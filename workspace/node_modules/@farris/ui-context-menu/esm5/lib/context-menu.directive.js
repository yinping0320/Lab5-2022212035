/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, HostListener, Input, Injector, ElementRef, Renderer2, Optional } from '@angular/core';
import { of } from 'rxjs';
import { FarrisContextMenuService } from './context-menu.service';
var FarrisContextMenuDirective = /** @class */ (function () {
    function FarrisContextMenuDirective(ctxMenuSer, injector, elRef, render) {
        this.ctxMenuSer = ctxMenuSer;
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.disabled = false;
        this.highlight = true;
    }
    /**
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.id = this.contextMenuId();
        if (!this.beforeShowContextMenu) {
            this.beforeShowContextMenu = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.onContextMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.disabled) {
            /** @type {?} */
            var contextMenuDom_1 = null;
            if (this.activeDomName) {
                contextMenuDom_1 = ((/** @type {?} */ (event.target))).closest(this.activeDomName);
                if (contextMenuDom_1) {
                    this.render.addClass(contextMenuDom_1, 'f-context-menu-active');
                }
                else {
                    return;
                }
            }
            /** @type {?} */
            var beforeShow$ = this.beforeShowContextMenu({ event: event, contextMenuDom: contextMenuDom_1 });
            if (beforeShow$ && beforeShow$.subscribe) {
                beforeShow$.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var ctxData = _this.getContextData(e);
                    _this.removeSurplusMenus();
                    if (ctxData.show) {
                        document.body.click();
                        // if (!this.ctxMenuSer) {
                        //     const cfr = this.injector.get(ComponentFactoryResolver);
                        //     this.ctxMenuSer = new FarrisContextMenuService(cfr, this.injector);
                        // }
                        _this.ctxMenuSer.show({
                            menuItems: _this.getViewMenuItems(ctxData.data),
                            event: event,
                            id: _this.id,
                            activeDom: contextMenuDom_1,
                            context: ctxData.data,
                            menuClass: _this.menuClass,
                            target: _this.elRef.nativeElement,
                            activeWidth: e['focusTargetWidth'],
                            highlight: _this.highlight
                        });
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }));
            }
        }
    };
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    /**
     * @private
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.removeSurplusMenus = 
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.menuItems && this.menuItems.length) {
            this.menuItems.forEach((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (m !== '-' && m.children && m.children.length) {
                    m.children.forEach((/**
                     * @param {?} cm
                     * @return {?}
                     */
                    function (cm) {
                        if (cm !== '-') {
                            cm.children = [];
                        }
                    }));
                }
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.contextMenuId = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = this.elRef.nativeElement.id;
        if (id) {
            return id + "-context-menu";
        }
        else {
            return 'context-menu_' + new Date().getTime();
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.getContextData = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (typeof e === 'boolean') {
            return { show: e, data: null };
        }
        return e;
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.getViewMenuItems = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (this.menuItems && this.menuItems.length) {
            return this.checkMenuItems(this.menuItems, context);
        }
        return [];
    };
    /**
     * @private
     * @param {?} menuItems
     * @param {?} context
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.checkMenuItems = /**
     * @private
     * @param {?} menuItems
     * @param {?} context
     * @return {?}
     */
    function (menuItems, context) {
        var _this = this;
        /** @type {?} */
        var menus = menuItems.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            if (typeof m === 'string') {
                return m;
            }
            else {
                /** @type {?} */
                var n = _this.checkVisibleAndDisable(m, context);
                if (n.children) {
                    n.children = _this.checkMenuItems(n.children, context);
                }
                return n;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return n === '-' || n.visible;
        }));
        if (menus && menus.length) {
            if (menus[0] === '-') {
                menus.shift(0);
            }
            if (menus[menus.length - 1] === '-') {
                menus.pop(0);
            }
        }
        return menus;
    };
    /**
     * @private
     * @param {?} m
     * @param {?} context
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.checkVisibleAndDisable = /**
     * @private
     * @param {?} m
     * @param {?} context
     * @return {?}
     */
    function (m, context) {
        /** @type {?} */
        var n = tslib_1.__assign({}, m);
        if (!n.hasOwnProperty('visible')) {
            n.visible = true;
        }
        else {
            if (typeof n.visible === 'function') {
                n.visible = n.visible(context);
            }
        }
        if (!n.hasOwnProperty('disable')) {
            n.disable = false;
        }
        else {
            if (typeof n.disable === 'function') {
                n.disable = n.disable(context);
            }
        }
        return n;
    };
    FarrisContextMenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-context-menus]',
                },] }
    ];
    /** @nocollapse */
    FarrisContextMenuDirective.ctorParameters = function () { return [
        { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FarrisContextMenuDirective.propDecorators = {
        menuItems: [{ type: Input, args: ['farris-context-menus',] }],
        menuClass: [{ type: Input }],
        disabled: [{ type: Input }],
        context: [{ type: Input }],
        beforeShowContextMenu: [{ type: Input }],
        activeDomName: [{ type: Input }],
        highlight: [{ type: Input }],
        onContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
    };
    return FarrisContextMenuDirective;
}());
export { FarrisContextMenuDirective };
if (false) {
    /** @type {?} */
    FarrisContextMenuDirective.prototype.menuItems;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.menuClass;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.disabled;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.context;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.beforeShowContextMenu;
    /**
     * 触发右键菜单实际DOM标签名称
     * @type {?}
     */
    FarrisContextMenuDirective.prototype.activeDomName;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.highlight;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.ctxMenuSer;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,