/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Subject } from 'rxjs';
import { FarrisContextMenuComponent } from './context-menu.component';
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { OverLayHiddenService } from '@farris/ui-common';
var FarrisContextMenuService = /** @class */ (function () {
    function FarrisContextMenuService(cfr, injector) {
        this.cfr = cfr;
        this.injector = injector;
        this.overlayEle = null;
        this.contextMenuDom = null;
        this.contextMenuRefs = {};
        this.activeDom = null;
        this.showContextMenu = new Subject();
        this.overlayHideSer = this.injector.get(OverLayHiddenService, null);
        if (!this.overlayHideSer) {
            this.overlayHideSer = new OverLayHiddenService();
        }
    }
    /**
     * @private
     * @param {?=} cls
     * @param {?=} opts
     * @return {?}
     */
    FarrisContextMenuService.prototype.createOverlay = /**
     * @private
     * @param {?=} cls
     * @param {?=} opts
     * @return {?}
     */
    function (cls, opts) {
        var _this = this;
        /** @type {?} */
        var overlayEle = document.querySelector('.f-context-menu-overlay');
        if (!overlayEle) {
            overlayEle = document.createElement('div');
            overlayEle.classList.add('f-context-menu-overlay', cls);
            overlayEle.style.pointerEvents = 'none';
            document.body.appendChild(overlayEle);
            if (opts.highlight) {
                this.activeDom = document.createElement('div');
                this.activeDom.classList.add('f-context-target-focus');
                overlayEle.appendChild(this.activeDom);
            }
            overlayEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (((/** @type {?} */ (e.target))).className.indexOf('f-context-menu-overlay') > -1) {
                    _this.hide();
                }
            }));
            overlayEle.addEventListener('contextmenu', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this.hide();
            }));
        }
        return overlayEle;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    FarrisContextMenuService.prototype.show = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        var menuItems = options.menuItems, event = options.event, id = options.id, activeDom = options.activeDom, context = options.context, menuClass = options.menuClass, target = options.target, activeWidth = options.activeWidth;
        /** @type {?} */
        var cmpRef = null;
        if (!this.contextMenuRefs) {
            this.contextMenuRefs = {};
        }
        if (!this.contextMenuRefs[id]) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(FarrisContextMenuComponent);
            cmpRef = cmpFactory.create(this.injector);
            cmpRef.instance.menuItems = menuItems;
            cmpRef.instance.id = id;
            cmpRef.instance.left = event.pageX;
            cmpRef.instance.top = event.pageY;
            this.contextMenuDom = activeDom;
            this.contextMenuRefs[cmpRef.instance.id] = cmpRef;
        }
        else {
            cmpRef = this.contextMenuRefs[id];
        }
        cmpRef.instance.context = context;
        this.overlayEle = this.createOverlay(menuClass, options);
        this.overlayEle.appendChild(cmpRef.location.nativeElement);
        this.overlayHideSer.registerMouseEvent(this.overlayEle, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (cmpRef.location.nativeElement.contains(e.target)) {
                return;
            }
            _this.hide();
        }));
        if (this.activeDom) {
            // const w = target.offsetWidth > this.contextMenuDom.offsetWidth ? this.contextMenuDom.offsetWidth : target.offsetWidth;
            /** @type {?} */
            var w = activeWidth || this.contextMenuDom.offsetWidth;
            this.activeDom.style.width = w + 'px';
            this.activeDom.style.height = this.contextMenuDom.offsetHeight + 'px';
            this.activeDom.style.left = target.getBoundingClientRect().left + 'px';
            this.activeDom.style.top = this.contextMenuDom.getBoundingClientRect().top + 'px';
            this.activeDom.style.display = 'block';
        }
        cmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        var menuPanelDom = cmpRef.instance.menuPanel.nativeElement;
        /** @type {?} */
        var menuPanelHeight = menuPanelDom.offsetHeight;
        if (window.innerHeight - event.pageY < menuPanelHeight) {
            cmpRef.instance.top = event.pageY - menuPanelHeight;
        }
        if (window.innerWidth - event.pageX < menuPanelDom.offsetWidth) {
            cmpRef.instance.left = event.pageX - menuPanelDom.offsetWidth;
        }
        cmpRef.changeDetectorRef.detectChanges();
    };
    /**
     * @return {?}
     */
    FarrisContextMenuService.prototype.hide = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.overlayEle) {
            this.overlayEle.style.display = 'none';
            if (this.contextMenuRefs) {
                try {
                    for (var _b = tslib_1.__values(Object.keys(this.contextMenuRefs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        this.contextMenuRefs[key].hostView.destroy();
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.contextMenuRefs = null;
            }
            // 移除DOM 样式
            if (this.contextMenuDom) {
                this.contextMenuDom.className = this.contextMenuDom.className.replace('f-context-menu-active', '');
            }
            this.overlayHideSer.destory(this.overlayEle);
            this.overlayEle.remove();
        }
        this.activeDom = null;
        this.overlayEle = null;
    };
    FarrisContextMenuService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FarrisContextMenuService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return FarrisContextMenuService;
}());
export { FarrisContextMenuService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.overlayEle;
    /** @type {?} */
    FarrisContextMenuService.prototype.contextMenuDom;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.contextMenuRefs;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.activeDom;
    /** @type {?} */
    FarrisContextMenuService.prototype.showContextMenu;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.overlayHideSer;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,