/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FarrisContextMenuService } from './context-menu.service';
import { Component, Injector, Input, NgZone, Renderer2, ViewEncapsulation, ElementRef, ViewChild, ChangeDetectorRef, Optional, QueryList, ViewChildren } from '@angular/core';
export class FarrisContextMenuComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} render
     * @param {?} ctxMenuSer
     * @param {?} elRef
     * @param {?} cd
     */
    constructor(injector, ngzone, render, ctxMenuSer, elRef, cd) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.ctxMenuSer = ctxMenuSer;
        this.elRef = elRef;
        this.cd = cd;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onMenuItemClick($event, item) {
        $event.stopPropagation();
        if (item.disable) {
            return;
        }
        if (item.children && item.children.length) {
            return;
        }
        this.ctxMenuSer.hide();
        if (item.handle) {
            item.handle(Object.assign({}, (this.context || {}), { instance: this, menu: item }));
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onMouseEnter($event, item) {
        if (item.children && item.children.length) {
            /** @type {?} */
            const childCtxMenu = this.subMenus.find((/**
             * @param {?} m
             * @return {?}
             */
            m => m.elRef.nativeElement.id === item.id + '_submenu'));
            if (childCtxMenu) {
                // childCtxMenu.context = this.context;
                childCtxMenu.parent = this;
                /** @type {?} */
                const childMenuPanel = childCtxMenu.menuPanel.nativeElement;
                /** @type {?} */
                const panel = this.menuPanel.nativeElement;
                /** @type {?} */
                const childContainerWidth = window.innerWidth - panel.offsetLeft - panel.offsetWidth;
                if (childMenuPanel.offsetWidth > childContainerWidth) {
                    /** @type {?} */
                    const l = -panel.offsetWidth;
                    childMenuPanel.style.left = l + 'px';
                }
                /** @type {?} */
                const childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;
                if (childContainerHeight < childMenuPanel.offsetHeight) {
                    /** @type {?} */
                    const t = window.innerHeight - panel.offsetTop - childMenuPanel.offsetHeight - 10;
                    childMenuPanel.style.top = t + 'px';
                }
            }
        }
    }
}
FarrisContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-menus',
                template: "\r\n<div class=\"f-context-menu-panel\" tabindex=\"0\" [style.left.px]=\"left\" [style.top.px]=\"top\" #menuPanel style=\"pointer-events: auto\">\r\n\r\n    <ul class=\"menu-list\">\r\n        <li class=\"menu-item d-flex\" *ngFor=\"let item of menuItems; index as i;last as islast;first as isfirst\" (click)=\"onMenuItemClick($event, item)\" \r\n        [class.menu-sep]=\"item === '-'\" (mouseenter)=\"onMouseEnter($event, item)\"\r\n        [class.disabled]=\"item.disable\" #menuitemli>\r\n            <ng-container *ngIf=\"item !== '-' \">\r\n                <div class=\"menu-item-icon\">\r\n                    <span class=\"f-icon {{ item.icon }}\" *ngIf=\"item.icon\"></span>\r\n                </div>\r\n                <div class=\"menu-item-text f-utils-fill d-flex\">\r\n                    <span style=\"display: block\" class=\"f-utils-fill\">{{ item.title }}</span>\r\n                    <span class=\"arrow-right\" *ngIf=\"item.children && item.children.length\">\r\n                        <span class=\"f-icon f-icon-arrow-e\"></span>\r\n                    </span>\r\n                </div>\r\n                <farris-menus #childMenu [context]=\"context\" [attr.id]=\"item.id+ '_submenu'\" *ngIf=\"item.children && item.children.length\" [menuItems]=\"item.children\"\r\n                    [top]=\"menuitemli.offsetTop - 3\" [left]=\"menuPanel.offsetWidth - 5\"\r\n                ></farris-menus>\r\n            </ng-container>\r\n        </li>\r\n    </ul>\r\n\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                exportAs: 'contextMenuRef',
                styles: [`
    .f-context-menu-overlay {
        position: fixed;
        z-index: 9999;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
    }
    .f-context-menu-panel {
        position: absolute;
        top: 200px;
        left: 300px;
        background: #fff;
        border: 1px solid #c6c6c6;
        border-radius: 5px;
        box-shadow: 3px 3px 5px #b8b4b4;
        padding: 3px 0px;
        min-width: 180px;
        max-width: 290px;
    }

    .f-context-menu-panel .menu-list {
        list-style: none;
    }

    .f-context-menu-panel .menu-item {
        height: 28px;
        line-height: 28px;
        cursor: pointer;
    }

    .f-context-menu-panel .menu-item.disabled {
        opacity: 0.4;
        cursor: default;
    }

    .f-context-menu-panel .menu-item.menu-sep{
        height: 6px;
        border-top: 1px solid #ccc;
        border-bottom: 1px solid #fff;
        margin-top: 5px;
    }

    .f-context-menu-panel .menu-item.active,
    .f-context-menu-panel .menu-item:hover:not(.menu-sep) {
        background: #e4e7ef;
    }
    .f-context-menu-panel .menu-item .f-context-menu-panel  {
        display: none;
    }

    .f-context-menu-panel .menu-item:hover  .f-context-menu-panel {
        display: block;
    }

    .f-context-menu-panel .menu-item-icon {
        width: 40px;
        text-align: center;
        font-size: 18px;
    }

    .f-context-target-focus {
        position: relative;
        top: 100px;
        left: 0;
        border: 1px dashed;
        height: 29px;
        display: none;
        background: #a1c8fb;
        opacity: 0.2;
    }

    .f-context-menu-panel .menu-item-text .arrow-right {
        width: 32px; height: 100%;display:block; text-align: center;
    }
        `]
            }] }
];
/** @nocollapse */
FarrisContextMenuComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
FarrisContextMenuComponent.propDecorators = {
    menuItems: [{ type: Input }],
    left: [{ type: Input }],
    top: [{ type: Input }],
    context: [{ type: Input }],
    menuPanel: [{ type: ViewChild, args: ['menuPanel',] }],
    subMenus: [{ type: ViewChildren, args: [FarrisContextMenuComponent,] }]
};
if (false) {
    /** @type {?} */
    FarrisContextMenuComponent.prototype.menuItems;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.left;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.top;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.context;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.menuPanel;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.subMenus;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.parent;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuComponent.prototype.ctxMenuSer;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuComponent.prototype.elRef;
    /** @type {?} */
    FarrisContextMenuComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,