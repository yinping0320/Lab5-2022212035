/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class CheckboxGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const cbgv = (qc.value);
        if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
            return [];
        /** @type {?} */
        let CheckboxArr = [];
        if (qc.control.controltype == 'bool-check') {
            return [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': cbgv.value[0],
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        else if (cbgv.value.length === 1) {
            return [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': (cbgv.value[0]),
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        cbgv.value.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            CheckboxArr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.Equal,
                'Value': value,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        }));
        CheckboxArr[0]['Lbracket'] = '(';
        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
        CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
        return CheckboxArr;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3hncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItY29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2hhbmRsZXJzL2NoZWNrYm94Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7SUFDN0IsT0FBTyxDQUFDLEVBQUU7O2NBQ0EsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUNyRSxPQUFPLEVBQUUsQ0FBQzs7WUFDVixXQUFXLEdBQUcsRUFBRTtRQUNwQixJQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxJQUFJLFlBQVksRUFBQztZQUN0QyxPQUFPLENBQUM7b0JBQ0osYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDdkIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO29CQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7aUJBQ2pDLENBQUMsQ0FBQTtTQUNMO2FBQ0ksSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUM7WUFDNUIsT0FBTyxDQUFDO29CQUNKLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztvQkFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxLQUFLO29CQUM3QixPQUFPLEVBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN6QixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7b0JBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDakMsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUNiLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztnQkFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxLQUFLO2dCQUM3QixPQUFPLEVBQUcsS0FBSztnQkFDZixVQUFVLEVBQUcsWUFBWSxDQUFDLEVBQUU7Z0JBQzVCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUNqQyxDQUFDLENBQUE7UUFDTixDQUFDLEVBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDakMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3RELFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFDbEUsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hHcm91cEhhbmRsZXJ7XHJcbiAgICBjb252ZXJ0KHFjKSB7XHJcbiAgICAgICAgY29uc3QgY2JndiA9IChxYy52YWx1ZSk7XHJcbiAgICAgICAgaWYoT2JqZWN0LmtleXMoY2JndikubGVuZ3RoID09PSAwIHx8IE9iamVjdC5rZXlzKGNiZ3YudmFsdWUpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIGxldCBDaGVja2JveEFyciA9IFtdO1xyXG4gICAgICAgIGlmKHFjLmNvbnRyb2wuY29udHJvbHR5cGUgPT0gJ2Jvb2wtY2hlY2snKXtcclxuICAgICAgICAgICAgcmV0dXJuIFt7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogY2Jndi52YWx1ZVswXSxcclxuICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoY2Jndi52YWx1ZS5sZW5ndGggPT09IDEpe1xyXG4gICAgICAgICAgICByZXR1cm4gW3tcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5sYWJlbENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCxcclxuICAgICAgICAgICAgICAgICdWYWx1ZScgOiAoY2Jndi52YWx1ZVswXSksXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCxcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYmd2LnZhbHVlLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgICAgICBDaGVja2JveEFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5sYWJlbENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCxcclxuICAgICAgICAgICAgICAgICdWYWx1ZScgOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBDaGVja2JveEFyclswXVsnTGJyYWNrZXQnXSA9ICcoJztcclxuICAgICAgICBDaGVja2JveEFycltDaGVja2JveEFyci5sZW5ndGggLSAxXVsnUmJyYWNrZXQnXSA9ICcpJztcclxuICAgICAgICBDaGVja2JveEFycltDaGVja2JveEFyci5sZW5ndGggLTFdWydSZWxhdGlvbiddID0gUmVsYXRpb25UeXBlLkFuZDtcclxuICAgICAgICByZXR1cm4gQ2hlY2tib3hBcnI7XHJcbiAgICB9XHJcbn0iXX0=