/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class DropDownHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const ddv = (qc.value);
        if (ddv.value == null || ddv.value == undefined) {
            return [];
        }
        if (Object.keys(ddv).length === 0 || Object.keys(ddv.value).length === 0)
            return [];
        return [{
                'FilterField': qc.labelCode,
                'Compare': CompareType.Equal,
                //equal
                // 'Value' : (ddv.value.getEnumValue() as EnumStringValue),
                'Value': ddv.value,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            }];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9oYW5kbGVycy9kcm9wZG93bi5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRCxNQUFNLE9BQU8sZUFBZTs7Ozs7SUFDeEIsT0FBTyxDQUFDLEVBQUU7O2NBQ0EsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN0QixJQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUUsSUFBSSxJQUFFLEdBQUcsQ0FBQyxLQUFLLElBQUUsU0FBUyxFQUFDO1lBQ3JDLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFDRCxJQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUNuRSxPQUFPLEVBQUUsQ0FBQztRQUNkLE9BQU8sQ0FBQztnQkFDSixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSzs7O2dCQUU3QixPQUFPLEVBQUcsR0FBRyxDQUFDLEtBQUs7Z0JBQ25CLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRzs7Z0JBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUNqQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wRG93bkhhbmRsZXJ7XHJcbiAgICBjb252ZXJ0KHFjKSB7XHJcbiAgICAgICAgY29uc3QgZGR2ID0gKHFjLnZhbHVlKTtcclxuICAgICAgICBpZihkZHYudmFsdWU9PW51bGx8fGRkdi52YWx1ZT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihPYmplY3Qua2V5cyhkZHYpLmxlbmd0aCA9PT0gMCB8fCBPYmplY3Qua2V5cyhkZHYudmFsdWUpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCwgLy9lcXVhbFxyXG4gICAgICAgICAgICAvLyAnVmFsdWUnIDogKGRkdi52YWx1ZS5nZXRFbnVtVmFsdWUoKSBhcyBFbnVtU3RyaW5nVmFsdWUpLFxyXG4gICAgICAgICAgICAnVmFsdWUnIDogZGR2LnZhbHVlLFxyXG4gICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCwgLy9hbmRcclxuICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgfV07XHJcbiAgICB9XHJcbn0iXX0=