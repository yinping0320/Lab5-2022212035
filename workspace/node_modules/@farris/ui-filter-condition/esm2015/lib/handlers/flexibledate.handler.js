/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class FlexibleDateHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const nrv = (qc.value);
        if (qc.control.single) {
            return Object.keys(nrv).length > 0 && nrv.value ? [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': nrv.value,
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }] : [];
        }
        else {
            if (Object.keys(nrv).length === 0)
                return arr;
            (nrv.startValue != null && nrv.startValue) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.GreaterThanOrEqual,
                'Value': nrv.startValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            (nrv.endValue != null && nrv.endValue) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.LessThanOrEqual,
                'Value': nrv.endValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleGlibGVkYXRlLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1jb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvaGFuZGxlcnMvZmxleGlibGVkYXRlLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFELE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBQzVCLE9BQU8sQ0FBQyxFQUFFOztjQUNBLEdBQUcsR0FBRyxFQUFFOztjQUNSLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDdEIsSUFBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQztZQUNqQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvQyxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLEdBQUcsQ0FBQyxLQUFLO29CQUNuQixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7b0JBQzdCLGFBQWEsRUFBQyxTQUFTLENBQUMsS0FBSztpQkFDaEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDWDthQUNHO1lBQ0EsSUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUM1QixPQUFPLEdBQUcsQ0FBQztZQUNmLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ25ELGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztnQkFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxrQkFBa0I7Z0JBQzFDLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVTtnQkFDeEIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO2dCQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7YUFDakMsQ0FBQyxDQUFDO1lBQ0gsQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDL0MsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGVBQWU7Z0JBQ3ZDLE9BQU8sRUFBRyxHQUFHLENBQUMsUUFBUTtnQkFDdEIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO2dCQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7YUFDakMsQ0FBQyxDQUFDO1lBRUgsT0FBTyxHQUFHLENBQUM7U0FDZDtJQUVMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGbGV4aWJsZURhdGVIYW5kbGVye1xyXG4gICAgY29udmVydChxYykge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgICAgIGNvbnN0IG5ydiA9IChxYy52YWx1ZSk7XHJcbiAgICAgICAgaWYocWMuY29udHJvbC5zaW5nbGUpe1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobnJ2KS5sZW5ndGggPiAwICYmIG5ydi52YWx1ZSA/IFt7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9XSA6IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihPYmplY3Qua2V5cyhucnYpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIChucnYuc3RhcnRWYWx1ZSAhPSBudWxsICYmIG5ydi5zdGFydFZhbHVlKSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuR3JlYXRlclRoYW5PckVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IG5ydi5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIChucnYuZW5kVmFsdWUgIT0gbnVsbCAmJiBucnYuZW5kVmFsdWUpICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5sYWJlbENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5MZXNzVGhhbk9yRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LmVuZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59Il19