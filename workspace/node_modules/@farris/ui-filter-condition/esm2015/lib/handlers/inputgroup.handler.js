/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class InputGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const igv = (qc.value);
        /** @type {?} */
        const arr = [];
        if (igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0) {
            return [];
        }
        else if (igv.isInputText) {
            arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.Like,
                // 'Value': encodeURIComponent(igv.textValue),
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach((/**
             * @param {?} itemValue
             * @return {?}
             */
            itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItY29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFDMUIsT0FBTyxDQUFDLEVBQUU7O2NBQ0EsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQzs7Y0FDaEIsR0FBRyxHQUFHLEVBQUU7UUFDZCxJQUFHLEdBQUcsQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEtBQUssSUFBSSxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNuRixPQUFPLEVBQUUsQ0FBQztTQUNiO2FBQ0ksSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO2dCQUMzQixTQUFTLEVBQUUsV0FBVyxDQUFDLElBQUk7O2dCQUUzQixPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVM7Z0JBQ3RCLFVBQVUsRUFBRSxZQUFZLENBQUMsR0FBRztnQkFDNUIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQ2pDLENBQUMsQ0FBQztZQUNILE9BQU8sR0FBRyxDQUFDO1NBQ2Q7YUFDSTtZQUNELEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ2xELFNBQVMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO29CQUNsQixhQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVM7b0JBQzNCLFNBQVMsRUFBRSxXQUFXLENBQUMsS0FBSztvQkFDNUIsT0FBTyxFQUFFLFNBQVM7b0JBQ2xCLFVBQVUsRUFBRSxZQUFZLENBQUMsRUFBRTtvQkFDM0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2lCQUNqQyxDQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsQ0FBQztZQUNILElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ2hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3pCLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDdEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDbkQsT0FBTyxHQUFHLENBQUM7YUFDZDtpQkFBTTtnQkFDSCxPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwSGFuZGxlciB7XHJcbiAgICBjb252ZXJ0KHFjKSB7XHJcbiAgICAgICAgY29uc3QgaWd2ID0gKHFjLnZhbHVlKTtcclxuICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICBpZihpZ3YudGV4dFZhbHVlID09PSB1bmRlZmluZWQgfHwgaWd2LnRleHRWYWx1ZSA9PT0gbnVsbCB8fCBpZ3YudGV4dFZhbHVlLmxlbmd0aCA9PSAwICl7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaWd2LmlzSW5wdXRUZXh0KSB7XHJcbiAgICAgICAgICAgIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCc6IHFjLmxhYmVsQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJzogQ29tcGFyZVR5cGUuTGlrZSxcclxuICAgICAgICAgICAgICAgIC8vICdWYWx1ZSc6IGVuY29kZVVSSUNvbXBvbmVudChpZ3YudGV4dFZhbHVlKSxcclxuICAgICAgICAgICAgICAgICdWYWx1ZSc6IGlndi50ZXh0VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWd2LmdldE9yaWdpbmFsVmFsdWUoKS5zcGxpdCgnLCcpLmZvckVhY2goaXRlbVZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW1WYWx1ZSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJzogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICdDb21wYXJlJzogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1ZhbHVlJzogaXRlbVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICdSZWxhdGlvbic6IFJlbGF0aW9uVHlwZS5PcixcclxuICAgICAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJbMF1bJ0xicmFja2V0J10gPSAnKCc7XHJcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aCAtIDFdWydSYnJhY2tldCddID0gJyknO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmVsYXRpb24nXSA9IFJlbGF0aW9uVHlwZS5BbmQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19