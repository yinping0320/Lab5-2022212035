import { Injectable, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CompareType = {
    /**
     * 等于
     */
    // Equal=1,
    Equal: 0,
    /**
     * 大于
     */
    GreaterThan: 2,
    /**
     * 大于或等于
     */
    GreaterThanOrEqual: 3,
    /**
     * 小于
     */
    LessThan: 4,
    /**
     * 小于或等于
     */
    LessThanOrEqual: 5,
    /**
     * 之间
     */
    // BetWeen=6
    Like: 6,
    /**
     * 包含
     */
    In: 14,
};
CompareType[CompareType.Equal] = 'Equal';
CompareType[CompareType.GreaterThan] = 'GreaterThan';
CompareType[CompareType.GreaterThanOrEqual] = 'GreaterThanOrEqual';
CompareType[CompareType.LessThan] = 'LessThan';
CompareType[CompareType.LessThanOrEqual] = 'LessThanOrEqual';
CompareType[CompareType.Like] = 'Like';
CompareType[CompareType.In] = 'In';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ValueType = {
    /**
     *值类型
     */
    Value: 0,
    /**
     * 表达式
     */
    Express: 1,
};
ValueType[ValueType.Value] = 'Value';
ValueType[ValueType.Express] = 'Express';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RelationType = {
    /**
     * 与
     */
    // And=0,
    And: 1,
    /**
     * 或
     */
    // Or=1
    Or: 2,
};
RelationType[RelationType.And] = 'And';
RelationType[RelationType.Or] = 'Or';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const tv = (qc.value);
        return Object.keys(tv).length > 0 && tv.value ? [{
                FilterField: qc.labelCode,
                Compare: CompareType.Like,
                // like CompareType.like undefined
                Value: tv.value,
                Relation: RelationType.And,
                // and undefined
                Expresstype: ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = (qc.value);
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const ddv = (qc.value);
        if (ddv.value == null || ddv.value == undefined) {
            return [];
        }
        if (Object.keys(ddv).length === 0 || Object.keys(ddv.value).length === 0)
            return [];
        return [{
                'FilterField': qc.labelCode,
                'Compare': CompareType.Equal,
                //equal
                // 'Value' : (ddv.value.getEnumValue() as EnumStringValue),
                'Value': ddv.value,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            }];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const nrv = (qc.value);
        if (Object.keys(nrv).length === 0)
            return arr;
        (nrv.startValue != null) && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': nrv.startValue,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        (nrv.endValue != null) && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': nrv.endValue,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmartHelpHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const shv = (qc.value);
        if (shv.value.length == 0 || !shv.valueField) {
            return [];
        }
        else {
            /** @type {?} */
            const arr = [];
            shv.getOriginalValue().split(',').forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                id && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const tv = (qc.value);
        return Object.keys(tv).length > 0 && tv.value ? [{
                'FilterField': qc.labelCode,
                'Compare': CompareType.Like,
                //like CompareType.like undefined
                'Value': tv.value,
                'Relation': RelationType.And,
                //and undefined
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const drv = (qc.value);
        return Object.keys(drv).length > 0 && drv.value ? [{
                'FilterField': qc.labelCode,
                'Compare': qc.control.compareType,
                //自定义
                'Value': drv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const cbgv = (qc.value);
        if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
            return [];
        /** @type {?} */
        let CheckboxArr = [];
        if (qc.control.controltype == 'bool-check') {
            return [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': cbgv.value[0],
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        else if (cbgv.value.length === 1) {
            return [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': (cbgv.value[0]),
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        cbgv.value.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            CheckboxArr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.Equal,
                'Value': value,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        }));
        CheckboxArr[0]['Lbracket'] = '(';
        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
        CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
        return CheckboxArr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeTimeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = (qc.value);
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const radiov = (qc.value);
        if (Object.keys(radiov).length === 0 || Object.keys(radiov.value).length === 0)
            return [];
        return [{
                'FilterField': qc.labelCode,
                'Compare': CompareType.Equal,
                //equal
                'Value': radiov.value,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            }];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const drv = (qc.value);
        return Object.keys(drv).length > 0 && drv.value ? [{
                'FilterField': qc.labelCode,
                'Compare': qc.control.compareType,
                //自定义
                'Value': drv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const drv = (qc.value);
        return Object.keys(drv).length > 0 && drv.value ? [{
                'FilterField': qc.labelCode,
                'Compare': qc.control.compareType,
                //自定义
                'Value': drv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = (qc.value);
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = (qc.value);
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.labelCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const igv = (qc.value);
        /** @type {?} */
        const arr = [];
        if (igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0) {
            return [];
        }
        else if (igv.isInputText) {
            arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.Like,
                // 'Value': encodeURIComponent(igv.textValue),
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach((/**
             * @param {?} itemValue
             * @return {?}
             */
            itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const tv = (qc.value);
        return Object.keys(tv).length > 0 && tv.value != null ? [{
                'FilterField': qc.labelCode,
                'Compare': CompareType.Like,
                'Value': tv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FlexibleNumberHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const nrv = (qc.value);
        if (qc.control.single) {
            return Object.keys(nrv).length > 0 && nrv.value != null ? [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': nrv.value,
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }] : [];
        }
        else {
            if (Object.keys(nrv).length === 0)
                return arr;
            (nrv.startValue != null) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.GreaterThanOrEqual,
                //GreaterOrEqual
                'Value': nrv.startValue,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            });
            (nrv.endValue != null) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.LessThanOrEqual,
                //LessOrEqual
                'Value': nrv.endValue,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            });
            return arr;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FlexibleDateHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const nrv = (qc.value);
        if (qc.control.single) {
            return Object.keys(nrv).length > 0 && nrv.value ? [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': nrv.value,
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }] : [];
        }
        else {
            if (Object.keys(nrv).length === 0)
                return arr;
            (nrv.startValue != null && nrv.startValue) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.GreaterThanOrEqual,
                'Value': nrv.startValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            (nrv.endValue != null && nrv.endValue) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.LessThanOrEqual,
                'Value': nrv.endValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryConditionHandlerFactory {
    /**
     * @private
     */
    constructor() {
        this.queryConditionHandlerMapping = new Map();
        this.queryConditionHandlerMapping.set('text', new TextHandler());
        this.queryConditionHandlerMapping.set('date', new DateRangeHandler());
        this.queryConditionHandlerMapping.set('datetime', new DateRangeTimeHandler());
        this.queryConditionHandlerMapping.set('monthRange', new MonthRangeHandler());
        this.queryConditionHandlerMapping.set('yearRange', new YearRangeHandler());
        this.queryConditionHandlerMapping.set('dropdown', new DropDownHandler());
        this.queryConditionHandlerMapping.set('number', new NumberRangeHandler());
        this.queryConditionHandlerMapping.set('help', new SmartHelpHandler());
        this.queryConditionHandlerMapping.set('search', new SearchHandler());
        this.queryConditionHandlerMapping.set('singleDate', new DateHandler());
        this.queryConditionHandlerMapping.set('month', new MonthHandler());
        this.queryConditionHandlerMapping.set('year', new YearHandler());
        this.queryConditionHandlerMapping.set('checkboxgroup', new CheckboxGroupHandler());
        this.queryConditionHandlerMapping.set('radio', new RadioHandler());
        this.queryConditionHandlerMapping.set('input-group', new InputGroupHandler());
        this.queryConditionHandlerMapping.set('singlenumber', new NumberHandler());
        this.queryConditionHandlerMapping.set('flexibleNumber', new FlexibleNumberHandler());
        this.queryConditionHandlerMapping.set('flexibleDate', new FlexibleDateHandler());
        this.queryConditionHandlerMapping.set('bool-check', new CheckboxGroupHandler());
    }
    /**
     * @return {?}
     */
    static getInstance() {
        if (!QueryConditionHandlerFactory._instance) {
            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
        }
        return QueryConditionHandlerFactory._instance;
    }
    /**
     * @param {?} controlType
     * @return {?}
     */
    getHandler(controlType) {
        return this.queryConditionHandlerMapping.get(controlType);
    }
}
QueryConditionHandlerFactory._instance = null;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterConditionService {
    constructor() { }
    /**
     * @param {?} item
     * @return {?}
     */
    setFilterConditions(item) {
        if (!Array.isArray(item)) {
            return QueryConditionHandlerFactory.getInstance().getHandler(item.control.controltype).convert(item);
        }
        else {
            /** @type {?} */
            let queryConditionHandler;
            /** @type {?} */
            const filterConditionList = [];
            item.forEach((/**
             * @param {?} qc
             * @return {?}
             */
            qc => {
                queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.controltype);
                filterConditionList.push(...queryConditionHandler.convert(qc));
            }));
            return filterConditionList;
        }
    }
}
FilterConditionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterConditionService.ctorParameters = () => [];
/** @nocollapse */ FilterConditionService.ngInjectableDef = defineInjectable({ factory: function FilterConditionService_Factory() { return new FilterConditionService(); }, token: FilterConditionService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterConditionModule {
}
FilterConditionModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [],
                exports: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FilterConditionService as QuerySolutionService, QueryConditionHandlerFactory, CheckboxGroupHandler, DateHandler, DateRangeHandler, DateRangeTimeHandler, DropDownHandler, NumberRangeHandler, SearchHandler, SmartHelpHandler, TextHandler, RadioHandler, YearHandler, YearRangeHandler, MonthHandler, MonthRangeHandler, InputGroupHandler, NumberHandler, FlexibleNumberHandler, FlexibleDateHandler, CompareType, RelationType, ValueType, FilterConditionModule };

//# sourceMappingURL=farris-ui-filter-condition.js.map