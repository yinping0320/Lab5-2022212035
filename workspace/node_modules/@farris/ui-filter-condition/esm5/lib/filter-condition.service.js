/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
import * as i0 from "@angular/core";
var FilterConditionService = /** @class */ (function () {
    function FilterConditionService() {
    }
    /**
     * @param {?} item
     * @return {?}
     */
    FilterConditionService.prototype.setFilterConditions = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!Array.isArray(item)) {
            return QueryConditionHandlerFactory.getInstance().getHandler(item.control.controltype).convert(item);
        }
        else {
            /** @type {?} */
            var queryConditionHandler_1;
            /** @type {?} */
            var filterConditionList_1 = [];
            item.forEach((/**
             * @param {?} qc
             * @return {?}
             */
            function (qc) {
                queryConditionHandler_1 = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.controltype);
                filterConditionList_1.push.apply(filterConditionList_1, tslib_1.__spread(queryConditionHandler_1.convert(qc)));
            }));
            return filterConditionList_1;
        }
    };
    FilterConditionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterConditionService.ctorParameters = function () { return []; };
    /** @nocollapse */ FilterConditionService.ngInjectableDef = i0.defineInjectable({ factory: function FilterConditionService_Factory() { return new FilterConditionService(); }, token: FilterConditionService, providedIn: "root" });
    return FilterConditionService;
}());
export { FilterConditionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbmRpdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItY29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2ZpbHRlci1jb25kaXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0FBRWhGO0lBSUU7SUFBZSxDQUFDOzs7OztJQUNULG9EQUFtQjs7OztJQUExQixVQUEyQixJQUFJO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RHO2FBQU07O2dCQUNELHVCQUFxQjs7Z0JBQ25CLHFCQUFtQixHQUFHLEVBQUU7WUFDOUIsSUFBSSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLEVBQUU7Z0JBQ1gsdUJBQXFCLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3RHLHFCQUFtQixDQUFDLElBQUksT0FBeEIscUJBQW1CLG1CQUFTLHVCQUFxQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRTtZQUNuRSxDQUFDLEVBQUMsQ0FBQztZQUVILE9BQU8scUJBQW1CLENBQUM7U0FDNUI7SUFDTCxDQUFDOztnQkFsQkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7aUNBTEQ7Q0FzQkMsQUFuQkQsSUFtQkM7U0FoQlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9xdWVyeWNvbmRpdGlvbi5oYW5kbGVyLmZhY3RvcnknO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29uZGl0aW9uU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIHB1YmxpYyBzZXRGaWx0ZXJDb25kaXRpb25zKGl0ZW0pIHtcclxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGl0ZW0pKSB7XHJcbiAgICAgICAgcmV0dXJuIFF1ZXJ5Q29uZGl0aW9uSGFuZGxlckZhY3RvcnkuZ2V0SW5zdGFuY2UoKS5nZXRIYW5kbGVyKGl0ZW0uY29udHJvbC5jb250cm9sdHlwZSkuY29udmVydChpdGVtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcXVlcnlDb25kaXRpb25IYW5kbGVyO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckNvbmRpdGlvbkxpc3QgPSBbXTtcclxuICAgICAgICBpdGVtLmZvckVhY2gocWMgPT4ge1xyXG4gICAgICAgICAgICBxdWVyeUNvbmRpdGlvbkhhbmRsZXIgPSBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKCkuZ2V0SGFuZGxlcihxYy5jb250cm9sLmNvbnRyb2x0eXBlKTtcclxuICAgICAgICAgICAgZmlsdGVyQ29uZGl0aW9uTGlzdC5wdXNoKC4uLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlci5jb252ZXJ0KHFjKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmaWx0ZXJDb25kaXRpb25MaXN0O1xyXG4gICAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==