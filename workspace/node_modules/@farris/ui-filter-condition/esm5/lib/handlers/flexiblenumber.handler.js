/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var FlexibleNumberHandler = /** @class */ (function () {
    function FlexibleNumberHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    FlexibleNumberHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var nrv = (qc.value);
        if (qc.control.single) {
            return Object.keys(nrv).length > 0 && nrv.value != null ? [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': nrv.value,
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }] : [];
        }
        else {
            if (Object.keys(nrv).length === 0)
                return arr;
            (nrv.startValue != null) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.GreaterThanOrEqual,
                //GreaterOrEqual
                'Value': nrv.startValue,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            });
            (nrv.endValue != null) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.LessThanOrEqual,
                //LessOrEqual
                'Value': nrv.endValue,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            });
            return arr;
        }
    };
    return FlexibleNumberHandler;
}());
export { FlexibleNumberHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleGlibGVudW1iZXIuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9oYW5kbGVycy9mbGV4aWJsZW51bWJlci5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBbUNBLENBQUM7Ozs7O0lBbENHLHVDQUFPOzs7O0lBQVAsVUFBUSxFQUFFOztZQUNBLEdBQUcsR0FBRyxFQUFFOztZQUNSLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDdEIsSUFBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQztZQUNqQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkQsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxHQUFHLENBQUMsS0FBSztvQkFDbkIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO29CQUM3QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ1g7YUFDRztZQUNBLElBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFDNUIsT0FBTyxHQUFHLENBQUM7WUFDZixDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDakMsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGtCQUFrQjs7Z0JBQzFDLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVTtnQkFDeEIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHOztnQkFDN0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQ2pDLENBQUMsQ0FBQztZQUNILENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUMvQixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsZUFBZTs7Z0JBQ3ZDLE9BQU8sRUFBRyxHQUFHLENBQUMsUUFBUTtnQkFDdEIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHOztnQkFDN0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQ2pDLENBQUMsQ0FBQztZQUVILE9BQU8sR0FBRyxDQUFDO1NBQ2Q7SUFFTCxDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQUFDLEFBbkNELElBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZsZXhpYmxlTnVtYmVySGFuZGxlcntcclxuICAgIGNvbnZlcnQocWMpIHtcclxuICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICBjb25zdCBucnYgPSAocWMudmFsdWUpO1xyXG4gICAgICAgIGlmKHFjLmNvbnRyb2wuc2luZ2xlKXtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG5ydikubGVuZ3RoID4gMCAmJiBucnYudmFsdWUgIT0gbnVsbCA/IFt7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9XSA6IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihPYmplY3Qua2V5cyhucnYpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIChucnYuc3RhcnRWYWx1ZSAhPSBudWxsKSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuR3JlYXRlclRoYW5PckVxdWFsLCAvL0dyZWF0ZXJPckVxdWFsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LnN0YXJ0VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCwgLy9hbmRcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgKG5ydi5lbmRWYWx1ZSAhPSBudWxsKSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuTGVzc1RoYW5PckVxdWFsLCAvL0xlc3NPckVxdWFsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LmVuZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsLy9hbmRcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0iXX0=