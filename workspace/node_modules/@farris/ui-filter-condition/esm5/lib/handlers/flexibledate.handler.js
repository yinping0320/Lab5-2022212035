/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var FlexibleDateHandler = /** @class */ (function () {
    function FlexibleDateHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    FlexibleDateHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var nrv = (qc.value);
        if (qc.control.single) {
            return Object.keys(nrv).length > 0 && nrv.value ? [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': nrv.value,
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }] : [];
        }
        else {
            if (Object.keys(nrv).length === 0)
                return arr;
            (nrv.startValue != null && nrv.startValue) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.GreaterThanOrEqual,
                'Value': nrv.startValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            (nrv.endValue != null && nrv.endValue) && arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.LessThanOrEqual,
                'Value': nrv.endValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
    };
    return FlexibleDateHandler;
}());
export { FlexibleDateHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleGlibGVkYXRlLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1jb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvaGFuZGxlcnMvZmxleGlibGVkYXRlLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFEO0lBQUE7SUFtQ0EsQ0FBQzs7Ozs7SUFsQ0cscUNBQU87Ozs7SUFBUCxVQUFRLEVBQUU7O1lBQ0EsR0FBRyxHQUFHLEVBQUU7O1lBQ1IsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN0QixJQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDO1lBQ2pCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9DLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztvQkFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxLQUFLO29CQUM3QixPQUFPLEVBQUcsR0FBRyxDQUFDLEtBQUs7b0JBQ25CLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRztvQkFDN0IsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO2lCQUNoQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNYO2FBQ0c7WUFDQSxJQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUM7Z0JBQzVCLE9BQU8sR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDbkQsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGtCQUFrQjtnQkFDMUMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxVQUFVO2dCQUN4QixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7Z0JBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUNqQyxDQUFDLENBQUM7WUFDSCxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUMvQyxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsZUFBZTtnQkFDdkMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxRQUFRO2dCQUN0QixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7Z0JBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUNqQyxDQUFDLENBQUM7WUFFSCxPQUFPLEdBQUcsQ0FBQztTQUNkO0lBRUwsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQW5DRCxJQW1DQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGbGV4aWJsZURhdGVIYW5kbGVye1xyXG4gICAgY29udmVydChxYykge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgICAgIGNvbnN0IG5ydiA9IChxYy52YWx1ZSk7XHJcbiAgICAgICAgaWYocWMuY29udHJvbC5zaW5nbGUpe1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobnJ2KS5sZW5ndGggPiAwICYmIG5ydi52YWx1ZSA/IFt7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9XSA6IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihPYmplY3Qua2V5cyhucnYpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIChucnYuc3RhcnRWYWx1ZSAhPSBudWxsICYmIG5ydi5zdGFydFZhbHVlKSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuR3JlYXRlclRoYW5PckVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IG5ydi5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIChucnYuZW5kVmFsdWUgIT0gbnVsbCAmJiBucnYuZW5kVmFsdWUpICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5sYWJlbENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5MZXNzVGhhbk9yRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogbnJ2LmVuZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59Il19