/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var CheckboxGroupHandler = /** @class */ (function () {
    function CheckboxGroupHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    CheckboxGroupHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var cbgv = (qc.value);
        if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
            return [];
        /** @type {?} */
        var CheckboxArr = [];
        if (qc.control.controltype == 'bool-check') {
            return [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': cbgv.value[0],
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        else if (cbgv.value.length === 1) {
            return [{
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': (cbgv.value[0]),
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        cbgv.value.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            CheckboxArr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.Equal,
                'Value': value,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        }));
        CheckboxArr[0]['Lbracket'] = '(';
        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
        CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
        return CheckboxArr;
    };
    return CheckboxGroupHandler;
}());
export { CheckboxGroupHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3hncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItY29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2hhbmRsZXJzL2NoZWNrYm94Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQ7SUFBQTtJQXNDQSxDQUFDOzs7OztJQXJDRyxzQ0FBTzs7OztJQUFQLFVBQVEsRUFBRTs7WUFDQSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ3JFLE9BQU8sRUFBRSxDQUFDOztZQUNWLFdBQVcsR0FBRyxFQUFFO1FBQ3BCLElBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksWUFBWSxFQUFDO1lBQ3RDLE9BQU8sQ0FBQztvQkFDSixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUN2QixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7b0JBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDakMsQ0FBQyxDQUFBO1NBQ0w7YUFDSSxJQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBQztZQUM1QixPQUFPLENBQUM7b0JBQ0osYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRztvQkFDN0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2lCQUNqQyxDQUFDLENBQUE7U0FDTDtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsS0FBSztZQUNwQixXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUNiLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztnQkFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxLQUFLO2dCQUM3QixPQUFPLEVBQUcsS0FBSztnQkFDZixVQUFVLEVBQUcsWUFBWSxDQUFDLEVBQUU7Z0JBQzVCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUNqQyxDQUFDLENBQUE7UUFDTixDQUFDLEVBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDakMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3RELFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFDbEUsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0FBQyxBQXRDRCxJQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrYm94R3JvdXBIYW5kbGVye1xyXG4gICAgY29udmVydChxYykge1xyXG4gICAgICAgIGNvbnN0IGNiZ3YgPSAocWMudmFsdWUpO1xyXG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGNiZ3YpLmxlbmd0aCA9PT0gMCB8fCBPYmplY3Qua2V5cyhjYmd2LnZhbHVlKS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICBsZXQgQ2hlY2tib3hBcnIgPSBbXTtcclxuICAgICAgICBpZihxYy5jb250cm9sLmNvbnRyb2x0eXBlID09ICdib29sLWNoZWNrJyl7XHJcbiAgICAgICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmxhYmVsQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IGNiZ3YudmFsdWVbMF0sXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCxcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGNiZ3YudmFsdWUubGVuZ3RoID09PSAxKXtcclxuICAgICAgICAgICAgcmV0dXJuIFt7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogKGNiZ3YudmFsdWVbMF0pLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2Jndi52YWx1ZS5mb3JFYWNoKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgQ2hlY2tib3hBcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLk9yLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgQ2hlY2tib3hBcnJbMF1bJ0xicmFja2V0J10gPSAnKCc7XHJcbiAgICAgICAgQ2hlY2tib3hBcnJbQ2hlY2tib3hBcnIubGVuZ3RoIC0gMV1bJ1JicmFja2V0J10gPSAnKSc7XHJcbiAgICAgICAgQ2hlY2tib3hBcnJbQ2hlY2tib3hBcnIubGVuZ3RoIC0xXVsnUmVsYXRpb24nXSA9IFJlbGF0aW9uVHlwZS5BbmQ7XHJcbiAgICAgICAgcmV0dXJuIENoZWNrYm94QXJyO1xyXG4gICAgfVxyXG59Il19