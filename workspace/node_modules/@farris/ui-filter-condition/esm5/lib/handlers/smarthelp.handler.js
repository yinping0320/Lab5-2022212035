/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var SmartHelpHandler = /** @class */ (function () {
    function SmartHelpHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    SmartHelpHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var shv = (qc.value);
        if (shv.value.length == 0 || !shv.valueField) {
            return [];
        }
        else {
            /** @type {?} */
            var arr_1 = [];
            shv.getOriginalValue().split(',').forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                id && arr_1.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr_1.length > 0) {
                arr_1[0]['Lbracket'] = '(';
                arr_1[arr_1.length - 1]['Rbracket'] = ')';
                arr_1[arr_1.length - 1]['Relation'] = RelationType.And;
                return arr_1;
            }
            else {
                return [];
            }
        }
    };
    return SmartHelpHandler;
}());
export { SmartHelpHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1jb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvaGFuZGxlcnMvc21hcnRoZWxwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFEO0lBQUE7SUEwQkEsQ0FBQzs7Ozs7SUF6Qkcsa0NBQU87Ozs7SUFBUCxVQUFRLEVBQUU7O1lBQ0EsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN0QixJQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUM7WUFDeEMsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFJOztnQkFDSyxLQUFHLEdBQUcsRUFBRTtZQUNkLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxFQUFFO2dCQUN4QyxFQUFFLElBQUksS0FBRyxDQUFDLElBQUksQ0FBQztvQkFDWCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLEVBQUU7b0JBQ1osVUFBVSxFQUFHLFlBQVksQ0FBQyxFQUFFO29CQUM1QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBRyxLQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztnQkFDZCxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN6QixLQUFHLENBQUMsS0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3JDLEtBQUcsQ0FBQyxLQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ2xELE9BQU8sS0FBRyxDQUFDO2FBQ2Q7aUJBQUk7Z0JBQ0QsT0FBTyxFQUFFLENBQUM7YUFDYjtTQUNKO0lBQ0wsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQTFCRCxJQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTbWFydEhlbHBIYW5kbGVye1xyXG4gICAgY29udmVydChxYykge1xyXG4gICAgICAgIGNvbnN0IHNodiA9IChxYy52YWx1ZSk7XHJcbiAgICAgICAgaWYoc2h2LnZhbHVlLmxlbmd0aCA9PSAwIHx8ICFzaHYudmFsdWVGaWVsZCl7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgICAgIHNodi5nZXRPcmlnaW5hbFZhbHVlKCkuc3BsaXQoJywnKS5mb3JFYWNoKGlkID0+IHtcclxuICAgICAgICAgICAgICAgIGlkICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMubGFiZWxDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZScgOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLk9yLFxyXG4gICAgICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6VmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmKGFyci5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgIGFyclswXVsnTGJyYWNrZXQnXSA9ICcoJztcclxuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0xXVsnUmJyYWNrZXQnXSA9ICcpJztcclxuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0xXVsnUmVsYXRpb24nXSA9IFJlbGF0aW9uVHlwZS5BbmQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==