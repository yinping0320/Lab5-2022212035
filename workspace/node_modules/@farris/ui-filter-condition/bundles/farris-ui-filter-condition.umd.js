(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-filter-condition', ['exports', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-filter-condition'] = {}),global.ng.core));
}(this, (function (exports,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var CompareType = {
        /**
         * 等于
         */
        // Equal=1,
        Equal: 0,
        /**
         * 大于
         */
        GreaterThan: 2,
        /**
         * 大于或等于
         */
        GreaterThanOrEqual: 3,
        /**
         * 小于
         */
        LessThan: 4,
        /**
         * 小于或等于
         */
        LessThanOrEqual: 5,
        /**
         * 之间
         */
        // BetWeen=6
        Like: 6,
        /**
         * 包含
         */
        In: 14,
    };
    CompareType[CompareType.Equal] = 'Equal';
    CompareType[CompareType.GreaterThan] = 'GreaterThan';
    CompareType[CompareType.GreaterThanOrEqual] = 'GreaterThanOrEqual';
    CompareType[CompareType.LessThan] = 'LessThan';
    CompareType[CompareType.LessThanOrEqual] = 'LessThanOrEqual';
    CompareType[CompareType.Like] = 'Like';
    CompareType[CompareType.In] = 'In';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ValueType = {
        /**
         *值类型
         */
        Value: 0,
        /**
         * 表达式
         */
        Express: 1,
    };
    ValueType[ValueType.Value] = 'Value';
    ValueType[ValueType.Express] = 'Express';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var RelationType = {
        /**
         * 与
         */
        // And=0,
        And: 1,
        /**
         * 或
         */
        // Or=1
        Or: 2,
    };
    RelationType[RelationType.And] = 'And';
    RelationType[RelationType.Or] = 'Or';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextHandler = /** @class */ (function () {
        function TextHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        TextHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var tv = (qc.value);
                return Object.keys(tv).length > 0 && tv.value ? [{
                        FilterField: qc.labelCode,
                        Compare: CompareType.Like,
                        // like CompareType.like undefined
                        Value: tv.value,
                        Relation: RelationType.And,
                        // and undefined
                        Expresstype: ValueType.Value
                    }] : [];
            };
        return TextHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeHandler = /** @class */ (function () {
        function DateRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DateRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (qc.value);
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return DateRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DropDownHandler = /** @class */ (function () {
        function DropDownHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DropDownHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var ddv = (qc.value);
                if (ddv.value == null || ddv.value == undefined) {
                    return [];
                }
                if (Object.keys(ddv).length === 0 || Object.keys(ddv.value).length === 0)
                    return [];
                return [{
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.Equal,
                        //equal
                        // 'Value' : (ddv.value.getEnumValue() as EnumStringValue),
                        'Value': ddv.value,
                        'Relation': RelationType.And,
                        //and
                        'Expresstype': ValueType.Value
                    }];
            };
        return DropDownHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumberRangeHandler = /** @class */ (function () {
        function NumberRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        NumberRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var nrv = (qc.value);
                if (Object.keys(nrv).length === 0)
                    return arr;
                (nrv.startValue != null) && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': nrv.startValue,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                (nrv.endValue != null) && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': nrv.endValue,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return NumberRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SmartHelpHandler = /** @class */ (function () {
        function SmartHelpHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        SmartHelpHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var shv = (qc.value);
                if (shv.value.length == 0 || !shv.valueField) {
                    return [];
                }
                else {
                    /** @type {?} */
                    var arr_1 = [];
                    shv.getOriginalValue().split(',').forEach(( /**
                     * @param {?} id
                     * @return {?}
                     */function (id) {
                        id && arr_1.push({
                            'FilterField': qc.labelCode,
                            'Compare': CompareType.Equal,
                            'Value': id,
                            'Relation': RelationType.Or,
                            'Expresstype': ValueType.Value
                        });
                    }));
                    if (arr_1.length > 0) {
                        arr_1[0]['Lbracket'] = '(';
                        arr_1[arr_1.length - 1]['Rbracket'] = ')';
                        arr_1[arr_1.length - 1]['Relation'] = RelationType.And;
                        return arr_1;
                    }
                    else {
                        return [];
                    }
                }
            };
        return SmartHelpHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchHandler = /** @class */ (function () {
        function SearchHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        SearchHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var tv = (qc.value);
                return Object.keys(tv).length > 0 && tv.value ? [{
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.Like,
                        //like CompareType.like undefined
                        'Value': tv.value,
                        'Relation': RelationType.And,
                        //and undefined
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return SearchHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateHandler = /** @class */ (function () {
        function DateHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DateHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var drv = (qc.value);
                return Object.keys(drv).length > 0 && drv.value ? [{
                        'FilterField': qc.labelCode,
                        'Compare': qc.control.compareType,
                        //自定义
                        'Value': drv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return DateHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxGroupHandler = /** @class */ (function () {
        function CheckboxGroupHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        CheckboxGroupHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var cbgv = (qc.value);
                if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
                    return [];
                /** @type {?} */
                var CheckboxArr = [];
                if (qc.control.controltype == 'bool-check') {
                    return [{
                            'FilterField': qc.labelCode,
                            'Compare': CompareType.Equal,
                            'Value': cbgv.value[0],
                            'Relation': RelationType.And,
                            'Expresstype': ValueType.Value
                        }];
                }
                else if (cbgv.value.length === 1) {
                    return [{
                            'FilterField': qc.labelCode,
                            'Compare': CompareType.Equal,
                            'Value': (cbgv.value[0]),
                            'Relation': RelationType.And,
                            'Expresstype': ValueType.Value
                        }];
                }
                cbgv.value.forEach(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    CheckboxArr.push({
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.Equal,
                        'Value': value,
                        'Relation': RelationType.Or,
                        'Expresstype': ValueType.Value
                    });
                }));
                CheckboxArr[0]['Lbracket'] = '(';
                CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
                CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
                return CheckboxArr;
            };
        return CheckboxGroupHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeTimeHandler = /** @class */ (function () {
        function DateRangeTimeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DateRangeTimeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (qc.value);
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return DateRangeTimeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioHandler = /** @class */ (function () {
        function RadioHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        RadioHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var radiov = (qc.value);
                if (Object.keys(radiov).length === 0 || Object.keys(radiov.value).length === 0)
                    return [];
                return [{
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.Equal,
                        //equal
                        'Value': radiov.value,
                        'Relation': RelationType.And,
                        //and
                        'Expresstype': ValueType.Value
                    }];
            };
        return RadioHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthHandler = /** @class */ (function () {
        function MonthHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        MonthHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var drv = (qc.value);
                return Object.keys(drv).length > 0 && drv.value ? [{
                        'FilterField': qc.labelCode,
                        'Compare': qc.control.compareType,
                        //自定义
                        'Value': drv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return MonthHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearHandler = /** @class */ (function () {
        function YearHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        YearHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var drv = (qc.value);
                return Object.keys(drv).length > 0 && drv.value ? [{
                        'FilterField': qc.labelCode,
                        'Compare': qc.control.compareType,
                        //自定义
                        'Value': drv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return YearHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearRangeHandler = /** @class */ (function () {
        function YearRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        YearRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (qc.value);
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return YearRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthRangeHandler = /** @class */ (function () {
        function MonthRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        MonthRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (qc.value);
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return MonthRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputGroupHandler = /** @class */ (function () {
        function InputGroupHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        InputGroupHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var igv = (qc.value);
                /** @type {?} */
                var arr = [];
                if (igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0) {
                    return [];
                }
                else if (igv.isInputText) {
                    arr.push({
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.Like,
                        // 'Value': encodeURIComponent(igv.textValue),
                        'Value': igv.textValue,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    });
                    return arr;
                }
                else {
                    igv.getOriginalValue().split(',').forEach(( /**
                     * @param {?} itemValue
                     * @return {?}
                     */function (itemValue) {
                        itemValue && arr.push({
                            'FilterField': qc.labelCode,
                            'Compare': CompareType.Equal,
                            'Value': itemValue,
                            'Relation': RelationType.Or,
                            'Expresstype': ValueType.Value
                        });
                    }));
                    if (arr.length > 0) {
                        arr[0]['Lbracket'] = '(';
                        arr[arr.length - 1]['Rbracket'] = ')';
                        arr[arr.length - 1]['Relation'] = RelationType.And;
                        return arr;
                    }
                    else {
                        return [];
                    }
                }
            };
        return InputGroupHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumberHandler = /** @class */ (function () {
        function NumberHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        NumberHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var tv = (qc.value);
                return Object.keys(tv).length > 0 && tv.value != null ? [{
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.Like,
                        'Value': tv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return NumberHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FlexibleNumberHandler = /** @class */ (function () {
        function FlexibleNumberHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        FlexibleNumberHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var nrv = (qc.value);
                if (qc.control.single) {
                    return Object.keys(nrv).length > 0 && nrv.value != null ? [{
                            'FilterField': qc.labelCode,
                            'Compare': CompareType.Equal,
                            'Value': nrv.value,
                            'Relation': RelationType.And,
                            'Expresstype': ValueType.Value
                        }] : [];
                }
                else {
                    if (Object.keys(nrv).length === 0)
                        return arr;
                    (nrv.startValue != null) && arr.push({
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.GreaterThanOrEqual,
                        //GreaterOrEqual
                        'Value': nrv.startValue,
                        'Relation': RelationType.And,
                        //and
                        'Expresstype': ValueType.Value
                    });
                    (nrv.endValue != null) && arr.push({
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.LessThanOrEqual,
                        //LessOrEqual
                        'Value': nrv.endValue,
                        'Relation': RelationType.And,
                        //and
                        'Expresstype': ValueType.Value
                    });
                    return arr;
                }
            };
        return FlexibleNumberHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FlexibleDateHandler = /** @class */ (function () {
        function FlexibleDateHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        FlexibleDateHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var nrv = (qc.value);
                if (qc.control.single) {
                    return Object.keys(nrv).length > 0 && nrv.value ? [{
                            'FilterField': qc.labelCode,
                            'Compare': CompareType.Equal,
                            'Value': nrv.value,
                            'Relation': RelationType.And,
                            'Expresstype': ValueType.Value
                        }] : [];
                }
                else {
                    if (Object.keys(nrv).length === 0)
                        return arr;
                    (nrv.startValue != null && nrv.startValue) && arr.push({
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.GreaterThanOrEqual,
                        'Value': nrv.startValue,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    });
                    (nrv.endValue != null && nrv.endValue) && arr.push({
                        'FilterField': qc.labelCode,
                        'Compare': CompareType.LessThanOrEqual,
                        'Value': nrv.endValue,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    });
                    return arr;
                }
            };
        return FlexibleDateHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QueryConditionHandlerFactory = /** @class */ (function () {
        function QueryConditionHandlerFactory() {
            this.queryConditionHandlerMapping = new Map();
            this.queryConditionHandlerMapping.set('text', new TextHandler());
            this.queryConditionHandlerMapping.set('date', new DateRangeHandler());
            this.queryConditionHandlerMapping.set('datetime', new DateRangeTimeHandler());
            this.queryConditionHandlerMapping.set('monthRange', new MonthRangeHandler());
            this.queryConditionHandlerMapping.set('yearRange', new YearRangeHandler());
            this.queryConditionHandlerMapping.set('dropdown', new DropDownHandler());
            this.queryConditionHandlerMapping.set('number', new NumberRangeHandler());
            this.queryConditionHandlerMapping.set('help', new SmartHelpHandler());
            this.queryConditionHandlerMapping.set('search', new SearchHandler());
            this.queryConditionHandlerMapping.set('singleDate', new DateHandler());
            this.queryConditionHandlerMapping.set('month', new MonthHandler());
            this.queryConditionHandlerMapping.set('year', new YearHandler());
            this.queryConditionHandlerMapping.set('checkboxgroup', new CheckboxGroupHandler());
            this.queryConditionHandlerMapping.set('radio', new RadioHandler());
            this.queryConditionHandlerMapping.set('input-group', new InputGroupHandler());
            this.queryConditionHandlerMapping.set('singlenumber', new NumberHandler());
            this.queryConditionHandlerMapping.set('flexibleNumber', new FlexibleNumberHandler());
            this.queryConditionHandlerMapping.set('flexibleDate', new FlexibleDateHandler());
            this.queryConditionHandlerMapping.set('bool-check', new CheckboxGroupHandler());
        }
        /**
         * @return {?}
         */
        QueryConditionHandlerFactory.getInstance = /**
         * @return {?}
         */
            function () {
                if (!QueryConditionHandlerFactory._instance) {
                    QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
                }
                return QueryConditionHandlerFactory._instance;
            };
        /**
         * @param {?} controlType
         * @return {?}
         */
        QueryConditionHandlerFactory.prototype.getHandler = /**
         * @param {?} controlType
         * @return {?}
         */
            function (controlType) {
                return this.queryConditionHandlerMapping.get(controlType);
            };
        QueryConditionHandlerFactory._instance = null;
        return QueryConditionHandlerFactory;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterConditionService = /** @class */ (function () {
        function FilterConditionService() {
        }
        /**
         * @param {?} item
         * @return {?}
         */
        FilterConditionService.prototype.setFilterConditions = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (!Array.isArray(item)) {
                    return QueryConditionHandlerFactory.getInstance().getHandler(item.control.controltype).convert(item);
                }
                else {
                    /** @type {?} */
                    var queryConditionHandler_1;
                    /** @type {?} */
                    var filterConditionList_1 = [];
                    item.forEach(( /**
                     * @param {?} qc
                     * @return {?}
                     */function (qc) {
                        queryConditionHandler_1 = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.controltype);
                        filterConditionList_1.push.apply(filterConditionList_1, __spread(queryConditionHandler_1.convert(qc)));
                    }));
                    return filterConditionList_1;
                }
            };
        FilterConditionService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FilterConditionService.ctorParameters = function () { return []; };
        /** @nocollapse */ FilterConditionService.ngInjectableDef = i0.defineInjectable({ factory: function FilterConditionService_Factory() { return new FilterConditionService(); }, token: FilterConditionService, providedIn: "root" });
        return FilterConditionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterConditionModule = /** @class */ (function () {
        function FilterConditionModule() {
        }
        FilterConditionModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        exports: []
                    },] }
        ];
        return FilterConditionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.QuerySolutionService = FilterConditionService;
    exports.QueryConditionHandlerFactory = QueryConditionHandlerFactory;
    exports.CheckboxGroupHandler = CheckboxGroupHandler;
    exports.DateHandler = DateHandler;
    exports.DateRangeHandler = DateRangeHandler;
    exports.DateRangeTimeHandler = DateRangeTimeHandler;
    exports.DropDownHandler = DropDownHandler;
    exports.NumberRangeHandler = NumberRangeHandler;
    exports.SearchHandler = SearchHandler;
    exports.SmartHelpHandler = SmartHelpHandler;
    exports.TextHandler = TextHandler;
    exports.RadioHandler = RadioHandler;
    exports.YearHandler = YearHandler;
    exports.YearRangeHandler = YearRangeHandler;
    exports.MonthHandler = MonthHandler;
    exports.MonthRangeHandler = MonthRangeHandler;
    exports.InputGroupHandler = InputGroupHandler;
    exports.NumberHandler = NumberHandler;
    exports.FlexibleNumberHandler = FlexibleNumberHandler;
    exports.FlexibleDateHandler = FlexibleDateHandler;
    exports.CompareType = CompareType;
    exports.RelationType = RelationType;
    exports.ValueType = ValueType;
    exports.FilterConditionModule = FilterConditionModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-filter-condition.umd.js.map