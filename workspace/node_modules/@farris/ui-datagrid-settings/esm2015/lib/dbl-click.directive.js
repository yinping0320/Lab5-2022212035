/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter } from "@angular/core";
import { fromEvent, race } from 'rxjs';
import { buffer, bufferCount, debounceTime, filter, first, repeat } from 'rxjs/operators';
export class FarrisDblClickDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.dblClickHandler = new EventEmitter();
        this._click$ = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const doubleClickDuration = 250;
        /** @type {?} */
        const leftClick$ = fromEvent(this.el.nativeElement, 'click').pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.button === 0)));
        /** @type {?} */
        const debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));
        /** @type {?} */
        const clickLimit$ = leftClick$.pipe(bufferCount(2));
        /** @type {?} */
        const bufferGate$ = race(debounce$, clickLimit$)
            .pipe(first(), repeat());
        this._click$ = leftClick$.pipe(buffer(bufferGate$), filter((/**
         * @param {?} clicks
         * @return {?}
         */
        clicks => {
            return clicks.length > 1;
        }))).subscribe((/**
         * @param {?} clicks
         * @return {?}
         */
        clicks => {
            this.dblClickHandler.emit(clicks[0]);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._click$) {
            this._click$.unsubscribe();
            this._click$ = null;
        }
    }
}
FarrisDblClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[f-dbl-click]'
            },] }
];
/** @nocollapse */
FarrisDblClickDirective.ctorParameters = () => [
    { type: ElementRef }
];
FarrisDblClickDirective.propDecorators = {
    options: [{ type: Input, args: ['f-dbl-click',] }],
    dblClickHandler: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FarrisDblClickDirective.prototype.options;
    /** @type {?} */
    FarrisDblClickDirective.prototype.dblClickHandler;
    /**
     * @type {?}
     * @private
     */
    FarrisDblClickDirective.prototype._click$;
    /**
     * @type {?}
     * @private
     */
    FarrisDblClickDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJsLWNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGJsLWNsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFnQixTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFPLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTS9GLE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFNaEMsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFIeEIsb0JBQWUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUxRCxZQUFPLEdBQWtCLElBQUksQ0FBQztJQUNELENBQUM7Ozs7SUFFdEMsUUFBUTs7Y0FDRSxtQkFBbUIsR0FBRyxHQUFHOztjQUN6QixVQUFVLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFDLENBQUM7O2NBQ3ZHLFNBQVMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOztjQUM5RCxXQUFXLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7O2NBQzdDLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQzthQUMvQyxJQUFJLENBQ0gsS0FBSyxFQUFFLEVBQ1AsTUFBTSxFQUFFLENBQ1Q7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQzFCLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFDbkIsTUFBTTs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ1osT0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDLEVBQUMsQ0FDTCxDQUFDLFNBQVM7Ozs7UUFBQyxNQUFNLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN2QjtJQUNMLENBQUM7OztZQXJDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7YUFDNUI7Ozs7WUFQbUIsVUFBVTs7O3NCQVV6QixLQUFLLFNBQUMsYUFBYTs4QkFDbkIsTUFBTTs7OztJQURQLDBDQUE4Qjs7SUFDOUIsa0RBQWtFOzs7OztJQUVsRSwwQ0FBc0M7Ozs7O0lBQzFCLHFDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgZnJvbUV2ZW50LCByYWNlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGJ1ZmZlciwgYnVmZmVyQ291bnQsIGRlYm91bmNlVGltZSwgZmlsdGVyLCBmaXJzdCwgbWFwLCByZXBlYXQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmLWRibC1jbGlja10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNEYmxDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgICBASW5wdXQoJ2YtZGJsLWNsaWNrJykgb3B0aW9ucztcclxuICAgIEBPdXRwdXQoKSBkYmxDbGlja0hhbmRsZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIHByaXZhdGUgX2NsaWNrJDogU3Vic2NyaXB0aW9uICA9IG51bGw7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGRvdWJsZUNsaWNrRHVyYXRpb24gPSAyNTA7XHJcbiAgICAgICAgY29uc3QgbGVmdENsaWNrJCA9IGZyb21FdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdjbGljaycpLnBpcGUoZmlsdGVyKChldmVudDogYW55KSA9PiBldmVudC5idXR0b24gPT09IDApKTtcclxuICAgICAgICBjb25zdCBkZWJvdW5jZSQgPSBsZWZ0Q2xpY2skLnBpcGUoZGVib3VuY2VUaW1lKGRvdWJsZUNsaWNrRHVyYXRpb24pKTtcclxuICAgICAgICBjb25zdCBjbGlja0xpbWl0JCA9IGxlZnRDbGljayQucGlwZShidWZmZXJDb3VudCgyKSk7XHJcbiAgICAgICAgY29uc3QgYnVmZmVyR2F0ZSQgPSByYWNlKGRlYm91bmNlJCwgY2xpY2tMaW1pdCQpXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICBmaXJzdCgpLFxyXG4gICAgICAgICAgcmVwZWF0KCksXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2xpY2skID0gbGVmdENsaWNrJC5waXBlKFxyXG4gICAgICAgICAgICBidWZmZXIoYnVmZmVyR2F0ZSQpLFxyXG4gICAgICAgICAgICBmaWx0ZXIoY2xpY2tzID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbGlja3MubGVuZ3RoID4gMTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApLnN1YnNjcmliZShjbGlja3MgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRibENsaWNrSGFuZGxlci5lbWl0KGNsaWNrc1swXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NsaWNrJCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGljayQudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgdGhpcy5fY2xpY2skID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=