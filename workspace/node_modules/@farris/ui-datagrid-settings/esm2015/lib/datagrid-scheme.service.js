/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { appendPerfixForUri, IdService } from "@farris/ui-common";
import { of, Subject } from "rxjs";
import { IS_MULTI_HEADER_STRING } from "./setting.model";
import { cloneDeep } from "lodash-es";
/**
 * 保存方案API
 * @type {?}
 */
const SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
/**
 * 获取方案列表API
 * @type {?}
 */
const SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;
/**
 * 方案列表管理- 设默认、删除 API
 * @type {?}
 */
const SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;
/**
 * 权限验证
 * @type {?}
 */
const SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
/** @type {?} */
const LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
export class DatagridSchemeService {
    /**
     * @param {?} inject
     */
    constructor(inject) {
        this.inject = inject;
        this.restService = null;
        this.state = {};
        this.perfixStr = '';
        this.schemeList$ = new Subject();
        this.schemeApi = {
            SCHEME_WEBAPI,
            /** 获取方案列表API */
            SCHEME_WEBAPI_QUERY,
            /** 方案列表管理- 设默认、删除 API */
            SCHEME_WEBAPI_UPDATE,
            /** 权限验证 */
            SCHEME_WEBAPI_Auth,
            LANGUAGE_WEBAPI
        };
        this.schemeKey = {};
        this.currentSchemeSettings = null;
    }
    /**
     * @param {?} perfixStr
     * @return {?}
     */
    setUriPerfix(perfixStr) {
        this.perfixStr = perfixStr || '';
    }
    /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    update(d, gridId) {
        if (!this.state[gridId]) {
            this.state[gridId] = {};
        }
        this.state[gridId] = Object.assign(this.state[gridId], d);
    }
    /**
     * @param {?} httpSer
     * @return {?}
     */
    setRestService(httpSer) {
        if (httpSer && httpSer['befRepository']) {
            this.restService = httpSer['befRepository']['restService'];
        }
    }
    /**
     * @private
     * @param {?} uri
     * @param {?} perfix
     * @return {?}
     */
    mergeUri(uri, perfix) {
        return appendPerfixForUri ? appendPerfixForUri(uri, perfix) : uri;
    }
    /**
     * @private
     * @return {?}
     */
    getWebFormKey() {
        /** @type {?} */
        const webformHash = window.location.hash.split('?')[0];
        return webformHash.substring(webformHash.lastIndexOf('/') + 1);
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    destory(gridId) {
        delete this.schemeKey[gridId];
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeKey(gridId) {
        if (!this.schemeKey[gridId]) {
            /** @type {?} */
            const formKey = this.getWebFormKey();
            this.schemeKey[gridId] = `${formKey}_DatagridScheme_${gridId}`;
        }
        return this.schemeKey[gridId];
    }
    /**
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getSchemeList(gridID, isMultiHeader = false) {
        /** @type {?} */
        let uri = this.schemeApi.SCHEME_WEBAPI_QUERY + this.getBelongId(gridID, isMultiHeader);
        uri = this.mergeUri(uri, this.perfixStr);
        if (this.restService) {
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
    }
    /**
     * @param {?} gridID
     * @param {?} schemeData
     * @return {?}
     */
    updateSchemeData(gridID, schemeData) {
        /** @type {?} */
        let schemeList = this.getStateValue(gridID, 'list');
        schemeList = schemeList.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id !== schemeData.id));
        schemeList.push(schemeData);
        this.setSchemeList(gridID, schemeList);
    }
    /**
     * @private
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getBelongId(gridID, isMultiHeader = false) {
        /** @type {?} */
        let id = this.getSchemeKey(gridID);
        if (isMultiHeader) {
            id = id + IS_MULTI_HEADER_STRING;
        }
        return id;
    }
    /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @param {?=} isMultiHeader
     * @return {?}
     */
    saveScheme(scheme, gridID, isUpdate = false, isMultiHeader = false) {
        if (this.restService) {
            /** @type {?} */
            const httpMethod = isUpdate ? 'PUT' : 'POST';
            scheme.belongId = this.getBelongId(gridID, isMultiHeader);
            /** @type {?} */
            const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI, this.perfixStr);
            return this.restService.invoke(uri, httpMethod, null, { body: scheme }, false);
        }
    }
    /**
     * @param {?} param
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    updateScheme(param, gridID, isMultiHeader = false) {
        if (!param) {
            return of(false);
        }
        /** @type {?} */
        const belongId = this.getBelongId(gridID, isMultiHeader);
        param.belongId = belongId;
        if (param.belongId) {
            /** @type {?} */
            const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_UPDATE, this.perfixStr);
            return this.restService.invoke(uri, 'PUT', null, { body: param }, false);
        }
    }
    /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    getStateValue(gridId, ...statePro) {
        /** @type {?} */
        const dgState = this.state[gridId];
        if (dgState) {
            if (statePro && statePro.length) {
                return statePro.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                (r, c) => {
                    return r[c];
                }), dgState);
            }
            return dgState;
        }
        return null;
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    updateStateValue(gridId, propertyName, value) {
        this.update({ [propertyName]: value }, gridId);
    }
    /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    setSchemeList(gridId, newSchemeList) {
        this.updateStateValue(gridId, 'list', newSchemeList);
        this.schemeList$.next(newSchemeList);
    }
    /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    hasSchemeName(gridId, schemeName) {
        /** @type {?} */
        const schemeList = this.getStateValue(gridId, 'list');
        if (!schemeList || !schemeList.length) {
            return false;
        }
        if (typeof schemeName === 'string') {
            return !!schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.name === schemeName.trim()));
        }
        else {
            if (typeof schemeName === 'object') {
                /** @type {?} */
                const replayNames = [];
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n.name) {
                        /** @type {?} */
                        const nameObj = JSON.parse(n.name);
                        // const currentNames = Object.values(nameObj);
                        for (let k in schemeName) {
                            if (nameObj[k] === schemeName[k]) {
                                replayNames.push(k);
                            }
                        }
                    }
                }));
                return replayNames;
            }
        }
    }
    /**
     * @return {?}
     */
    checkAuthority() {
        /** @type {?} */
        const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_Auth, this.perfixStr);
        return this.restService.invoke(uri, 'GET', null, null, false);
    }
    /**
     * @return {?}
     */
    getLanguages() {
        if (this.restService) {
            /** @type {?} */
            const uri = this.mergeUri(this.schemeApi.LANGUAGE_WEBAPI, this.perfixStr);
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
        else {
            return of([]);
        }
    }
    /**
     * @return {?}
     */
    createSchemeTaskID() {
        /** @type {?} */
        const idService = new IdService();
        this['SCHEME_TASK_ID'] = idService.guid();
        this.currentSchemeSettings = null;
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    setSettings(configs) {
        this.currentSchemeSettings = {
            taskid: this['SCHEME_TASK_ID'],
            values: cloneDeep(configs)
        };
    }
    /**
     * @return {?}
     */
    getSettings() {
        return this.currentSchemeSettings;
    }
    /**
     * @param {?} nowSettings
     * @param {?} isMultiHeader
     * @return {?}
     */
    isSchemeChanged(nowSettings, isMultiHeader) {
        let { sortInfo, viewColumns, groupField, columnFormat, expandGroupRows, multiHeaders } = nowSettings;
        let { sortInfo: sortInfo1, viewColumns: viewColumns1, groupField: groupField1, columnFormat: columnFormat1, expandGroupRows: expandGroupRows1, multiHeaders: multiHeaders1 } = this.getSettings().values;
        /** @type {?} */
        const checkSortInfo = (/**
         * @param {?} _sortInfo
         * @return {?}
         */
        (_sortInfo) => {
            if (!_sortInfo || !Object.keys(_sortInfo).length) {
                _sortInfo = {
                    sortName: [],
                    sortOrder: []
                };
            }
            return _sortInfo;
        });
        sortInfo = checkSortInfo(sortInfo);
        sortInfo1 = checkSortInfo(sortInfo1);
        /** @type {?} */
        const checkGroupField = (/**
         * @param {?} _groupField
         * @return {?}
         */
        (_groupField) => {
            if (!_groupField) {
                _groupField = [];
            }
            return _groupField;
        });
        groupField = checkGroupField(groupField);
        groupField1 = checkGroupField(groupField1);
        /** @type {?} */
        let nowconfig;
        /** @type {?} */
        let initConfig;
        if (isMultiHeader) {
            nowconfig = { sortInfo, expandGroupRows, groupField, multiHeaders };
            initConfig = { sortInfo: sortInfo1, expandGroupRows: expandGroupRows1, groupField: groupField1, multiHeaders: multiHeaders1 };
        }
        else {
            nowconfig = { columnFormat, expandGroupRows, groupField, sortInfo, viewColumns };
            initConfig = {
                columnFormat: columnFormat1,
                expandGroupRows: expandGroupRows1,
                groupField: groupField1,
                sortInfo: sortInfo1,
                viewColumns: viewColumns1
            };
        }
        /** @type {?} */
        const _clearData = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return JSON.stringify(data).replace(/UNFIXED/g, '').replace(/"calculationType":-1,/g, '').replace(/"calculationType":-1/g, '');
        });
        return _clearData(nowconfig) != _clearData(initConfig);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.state;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.perfixStr;
    /** @type {?} */
    DatagridSchemeService.prototype.schemeList$;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.schemeApi;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.schemeKey;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.currentSchemeSettings;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,