/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, switchMap } from 'rxjs/operators';
import { forkJoin, of, timer } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils, DebugService, IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { DatagridSchemeService } from './datagrid-scheme.service';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { NotifyService } from '@farris/ui-notify';
import { DATAGRID_SETTINGS_LOCALEDATA } from './datagrid-settings-locale';
import { cleanGroupFields, cleanSortFields, getDataFieldsForMultiHeaders, mergetColumnOptions, refreshGridColumns } from './mutli-headers.helper';
/** @type {?} */
export const GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
export class DatagridSettingsService {
    /**
     * @param {?} injector
     * @param {?} modalSer
     * @param {?} messager
     * @param {?} idService
     * @param {?} localeSer
     */
    constructor(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.currentSchemeitem = null;
        this.prevSchemeItem = null;
        this.debugSer = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.debugSer = this.injector.get(DebugService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
        this.schemeService = new DatagridSchemeService(this.injector);
        this.localeSer.setLocaleData(DATAGRID_SETTINGS_LOCALEDATA);
    }
    /**
     * @return {?}
     */
    get httpRestService() {
        return this._httpRestService;
    }
    ;
    /**
     * @param {?} httpSer
     * @return {?}
     */
    set httpRestService(httpSer) {
        this._httpRestService = httpSer;
        if (this.schemeService) {
            this.schemeService.setRestService(httpSer);
        }
    }
    /**
     * @param {?} perfixStr
     * @return {?}
     */
    setUriPerfixStr(perfixStr) {
        if (perfixStr == '') {
            if (window['gspframeworkService'] && window['gspframeworkService'].common) {
                /** @type {?} */
                const basePath = window['gspframeworkService'].common.getBasePath;
                if (basePath && basePath.get) {
                    perfixStr = basePath.get();
                }
            }
        }
        if (perfixStr != '' && perfixStr !== null) {
            this.schemeService.setUriPerfix(perfixStr);
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    destroy(id) {
        if (this.gridRefs) {
            if (id && this.gridRefs[id]) {
                this.gridRefs[id] = null;
                delete this.gridRefs[id];
            }
            else {
                if (!Object.keys(this.gridRefs).length) {
                    this.gridRefs = null;
                }
            }
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
        this.schemeService.destory(id);
    }
    /**
     * @private
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    writeDebugMsg(msg, type = 'warn') {
        if (this.debugSer) {
            if (this.debugSer[type]) {
                this.debugSer[type](msg);
            }
            else {
                console[type](msg);
            }
        }
    }
    /**
     * @param {?} dg
     * @return {?}
     */
    registerGridInstance(dg) {
        if (!dg) {
            this.writeDebugMsg('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        const id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    }
    /**
     * @param {?} dgID
     * @return {?}
     */
    getGridInstance(dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    }
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    updateSchemeSettings(schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            const schemeContentObj = schemeItem.queryConditionString ? JSON.parse(schemeItem.queryConditionString) : {};
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    const schemeSettings = schemeContentObj[this.localeSer.localeId] || {};
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    }
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    updateActiveSchemeItemSettings(dgId, settings) {
        /** @type {?} */
        const schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
        if (schemeItem) {
            this.schemeService.updateSchemeData(dgId, schemeItem);
        }
    }
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    setActiveSchemeItem(dgId, activeItem) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        if (activeItem) {
            this.activeSchemeItem[schemekey] = cloneDeep(activeItem);
        }
        else {
            delete this.activeSchemeItem[schemekey];
        }
    }
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    getActiveSchemeItem(dgId) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    }
    /**
     * @return {?}
     */
    getSearchTypes() {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    }
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showSimple(gridInstance, settings, selectedSchemeItem) {
        /** @type {?} */
        let _columns = this.getCurrentConfigs().columns || gridInstance.columns;
        /** @type {?} */
        const columns = this.convertColumnsToSimple(_columns);
        columns[0] = [...columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field && n.field !== gridInstance.ControlPanelFeild))];
        /** @type {?} */
        const searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            let simpleRef = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef.hostView);
            simpleRef.instance.columns = columns;
            simpleRef.instance.seartTypes = searchTypes;
            simpleRef.instance.gridInstance = gridInstance;
            simpleRef.instance.schemeSer = this.schemeService;
            if (document.querySelector('#page-wrapper')) {
                simpleRef.instance.top = 76;
            }
            simpleRef.instance.enableScheme = gridInstance.enableScheme;
            if (!settings) {
                settings = this.getCurrentConfigs();
            }
            if (gridInstance.enableScheme) {
                /** @type {?} */
                const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                if (settings) {
                    //  从高级模式 转到 简洁模式时，保存原始值
                    if (!simpleRef.instance['prevSchemeItem'] && this.prevSchemeItem) {
                        simpleRef.instance['prevSchemeItem'] = cloneDeep(this.prevSchemeItem);
                    }
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        if (_currentSchemtItem) {
                            this.currentSchemeitem = _currentSchemtItem;
                            this.prevSchemeItem = cloneDeep(_currentSchemtItem);
                            simpleRef.instance.currentSchemeItem = _currentSchemtItem;
                        }
                        else {
                            if (!Object.keys(settings).length) {
                                settings = this.getLocalSettings(this.createConfigKey(gridInstance.id));
                            }
                            simpleRef.instance.currentSchemeItem = null;
                            simpleRef.instance.settings = settings;
                        }
                    }
                }
                else {
                    this.currentSchemeitem = _currentSchemtItem;
                    this.prevSchemeItem = cloneDeep(_currentSchemtItem);
                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            else {
                if (gridInstance.enableSetMultiHeaders) {
                    simpleRef.instance.settings = this.getCurrentConfigs();
                }
                else {
                    simpleRef.instance.settings = settings;
                }
            }
            /** @type {?} */
            const zIndex = this.commonUtils.getFloatingLayerIndex();
            simpleRef.location.nativeElement.style.zIndex = '' + zIndex;
            document.body.appendChild(simpleRef.location.nativeElement);
            simpleRef.instance.canceld.subscribe((/**
             * @return {?}
             */
            () => {
                this.restoreScheme(gridInstance);
            }));
            simpleRef.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                if (simpleRef) {
                    simpleRef.instance.container.nativeElement.style.right = '-500px';
                    return timer(500);
                }
            }))).subscribe((/**
             * @return {?}
             */
            () => {
                simpleRef.location.nativeElement.remove();
                simpleRef.destroy();
                simpleRef = null;
                if (this.schemeListSubscription) {
                    this.schemeListSubscription.unsubscribe();
                }
                /** @type {?} */
                const _activeSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                if ((!this.currentSchemeitem || (_activeSchemtItem && _activeSchemtItem.id !== this.currentSchemeitem.id)) && (_activeSchemtItem && _activeSchemtItem.queryConditionString)) {
                    /** @type {?} */
                    const _currentSettings = JSON.parse(_activeSchemtItem.queryConditionString)[this.localeSer.localeId];
                    if (_currentSettings) {
                        columns[0].forEach((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => {
                            f.visible = _currentSettings.viewColumns.indexOf(f.field) > -1;
                        }));
                    }
                }
            }));
            // 打开高级设置窗口
            simpleRef.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ({ viewFields, settings, columns }) => {
                // if (viewFields && viewFields.length){
                //     this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, {viewColumns: viewFields});
                // }
                this.setCurrentConfigs(Object.assign({}, settings, { columns }));
                this.prevSchemeItem = simpleRef.instance['prevSchemeItem'];
                this['SCHEME_DEFAULT_TITLE'] = simpleRef.instance.defaultSchemeName;
                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);
            }));
            simpleRef.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.applySettings(e, gridInstance);
            }));
            // 多表列设置
            simpleRef.instance.submitForGroupHeader.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.applySettings(e, gridInstance);
            }));
            // simpleRef.instance.fieldsChange.subscribe((visibleFields: string[]) => {
            //     this.updateActiveSchemeItemSettings(gridInstance.id, {viewColumns: visibleFields})
            // });
            // 打开新增方案窗口
            simpleRef.instance.addNewScheme.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.showNewSchemeDialog(gridInstance, e, simpleRef.instance.collectSettings(), {
                    ok: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        // 更换为新的方案
                        simpleRef.instance.onSchemeItemClick(null, t);
                        this.saveUserConfig;
                    })
                });
            }));
            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            () => {
                this.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    (auth) => {
                        return Object.assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t, simpleRef);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            (list) => {
                simpleRef.instance.schemeList = list;
                if (!list || !list.length) {
                    this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    let hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id === _activeSchemeItem.id));
                    if (!hasActiveItem) {
                        hasActiveItem = this.getDefaultScheme(list); // 获取设置为当前方案的项
                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            simpleRef.instance.schemeChanged.subscribe((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                this.currentSchemeitem = t;
                this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));
            }));
            simpleRef.hostView.detectChanges();
            simpleRef.instance.cd.detectChanges();
            simpleRef.instance.container.nativeElement.style.right = '0px';
            return simpleRef;
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    show(gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            this.schemeService.createSchemeTaskID();
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    restoreScheme(gridInstance) {
        if (gridInstance.enableScheme) {
            this.setActiveSchemeItem(gridInstance.id, this.prevSchemeItem);
            if (!this.prevSchemeItem) {
                this.setCurrentConfigs(null);
            }
        }
        else {
            this.setCurrentConfigs(null);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showAdvanced(gridInstance, opts, selectedSchemeItem) {
        /** @type {?} */
        let _editColSortInfo = true;
        /** @type {?} */
        const editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            _editColSortInfo = false;
        }
        // 判断是否为多表头
        /** @type {?} */
        const showSetColumnsTab = !gridInstance.isMultiHeader() || (gridInstance.isMultiHeader() && gridInstance.enableSetMultiHeaders);
        /** @type {?} */
        const getActiveTabIndex = (/**
         * @return {?}
         */
        () => {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        const activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        const columns = this.convertColumnsToSimple(this.getCurrentConfigs().columns || gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        let currentSettings = this.getCurrentConfigs();
        /** @type {?} */
        const multiHeaderTree = currentSettings && currentSettings.multiHeaders ? currentSettings.multiHeaders.treeData : null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            /** @type {?} */
            const _currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            currentSettings = Object.assign(_currentSettings || {}, currentSettings || {});
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    /** @type {?} */
                    const fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.field === col.field));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
        }
        if (!gridInstance.enableSetMultiHeaders && currentSettings.viewColumns && currentSettings.viewColumns.length) {
            columns[0].forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                f.visible = currentSettings.viewColumns.indexOf(f.field) > -1;
            }));
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        let sortFields = getDataFieldsForMultiHeaders(cloneDeep(columns)).filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable));
        if (gridInstance.enableSetMultiHeaders && currentSettings && currentSettings.multiHeaders) {
            sortFields = getDataFieldsForMultiHeaders(currentSettings.multiHeaders.viewCols).filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable));
        }
        // const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        // const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        // this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        let modalRef = null;
        // const okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        // const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        // const resetText =  this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        const defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns,
                sortTreeData: sortFields,
                // viewTreeData: viewColumnsTreeData,
                gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex,
                schemeInfo: currentSettings,
                enableMultipleHeaders: gridInstance.enableSetMultiHeaders,
                multiHeaders: {
                    columns,
                    treeData: multiHeaderTree
                },
                schemeName: selectedSchemeItem ? selectedSchemeItem['_title_'] : this['SCHEME_DEFAULT_TITLE']
            },
            showButtons: false,
            closed: (/**
             * @param {?} isCloseBtn
             * @param {?} opts
             * @return {?}
             */
            (isCloseBtn, opts) => {
                const { event } = opts;
                if (event && event.code === 'Escape') {
                    this.restoreScheme(gridInstance);
                }
            })
        };
        /** @type {?} */
        const modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = showSetColumnsTab;
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.applySettings(e, gridInstance, { modalRef, currentScheme: selectedSchemeItem });
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            this.restoreScheme(gridInstance);
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            /** @type {?} */
            const settings = modalRef.content;
            const { sortInfo, viewColumns, columnFormat, groupField, multiHeaders } = settings;
            this.setCurrentConfigs({ sortInfo, viewColumns, columnFormat, groupField, multiHeaders });
            this.showSimple(gridInstance, { sortInfo, viewColumns, columnFormat, groupField, multiHeaders }, cloneDeep(selectedSchemeItem));
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    canSetColumnSort(gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    hasEnableSortColumns(gridInstance) {
        /** @type {?} */
        const sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        (c, r) => {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    }
    // private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
    //     const childCols = [];
    //     let _count = colStartIndex;
    //     if (!cols[rowIndex]) {
    //         return  [];
    //     }
    //     cols[rowIndex].slice().forEach(element => {
    //         _count = _count + element.colspan;
    //         if ( _count <= colCount ) {
    //             childCols.push(element);
    //         }
    //     });
    //     cols[rowIndex].splice(0, childCols.length);
    //     return childCols.map((c, i) => {
    //         let n: any = {
    //             data: c,
    //             selectable: forSort ? !!c.sortable : true
    //         };
    //         if (c.colspan && c.colspan > 1) {
    //             n = {
    //                 data: c,
    //                 selectable: false,
    //                 expanded: true,
    //                 children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)
    //             };
    //         }
    //         return n;
    //     });
    // }
    // convertColumns2TreeData(cols: DataColumn[][], forSort = false) {
    //     const columns = cols.map((c: any) => {
    //         const aa = c.map((_) => {
    //             if (_.field.indexOf('farris-datagrid-column_') == -1) {
    //                 _.colspan = _.colspan || 1;
    //                 return _;
    //             }
    //             return null;
    //         });
    //         return aa.filter(n => n);
    //     });
    //     if (columns.length === 1) {
    //         return columns[0].map(c => {
    //             return {
    //                 data: c,
    //                 selectable: forSort ? !!c.sortable : true
    //             };
    //         });
    //     } else {
    //         return columns[0].map((c, i) => {
    //             if (c.colspan && c.colspan > 1) {
    //                 return {
    //                     data: c,
    //                     selectable: false,
    //                     expanded: true,
    //                     children: this.getChilds(columns, 1, 0, c.colspan, forSort)
    //                 };
    //             } else {
    //                 return {
    //                     data: c,
    //                     selectable: forSort ? !!c.sortable : true
    //                 };
    //             }
    //         });
    //     }
    // }
    // private checkViewTreeNodes(treeNodes: TreeNode[]) {
    //     treeNodes.forEach((tn: TreeNode) => {
    //         if (!tn.children || !tn.children.length) {
    //             tn.selectable = true;
    //         } else {
    //             tn.selectable = false;
    //             this.checkViewTreeNodes(tn.children);
    //         }
    //     });
    // }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    _convertColumnsToSimple(gridInstance) {
        /** @type {?} */
        let cols = gridInstance.columns;
        // 重置列顺序为最初设计时的顺序
        /** @type {?} */
        const gridOpts = gridInstance.dfs._state.initialOptions;
        if (gridOpts.columnFields) {
            /** @type {?} */
            let desginCols = gridOpts.columnFields;
            /** @type {?} */
            const newColumns = [];
            desginCols.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        newColumns.push(col);
                    }
                }
            }));
            cols = [newColumns];
        }
        return cols;
    }
    /**
     * @param {?} cols
     * @return {?}
     */
    convertColumnsToSimple(cols) {
        if (!Array.isArray(cols[0])) {
            cols = [cols];
        }
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        (_cols) => {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string',
                        fixed: c.fixed || 'UNFIXED'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    resetGridView(gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        const dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            const options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                const newColumns = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    }
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @param {?=} _scheme
     * @return {?}
     */
    updateGridView(modalRef, gridInstance, btn = null, _scheme = null) {
        /** @type {?} */
        const settings = modalRef.content;
        if (settings) {
            const { sortInfo, viewColumns, columnFormat, groupField, expandGroupRows, multiHeaders } = settings;
            /** @type {?} */
            const _colformats = columnFormat ? this.convertColumnsToSimple(columnFormat)[0] : [];
            this.saving = true;
            /** @type {?} */
            let _groupField = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                if (typeof groupField === 'string') {
                    _groupField = groupField;
                }
                else if (Array.isArray(groupField)) {
                    _groupField = groupField.join(',');
                }
            }
            /** @type {?} */
            let _sortInfo = sortInfo;
            // 当多表头需要清理排序字段与分组字段，保证这些字段必须在表头中
            if (gridInstance.enableSetMultiHeaders && multiHeaders) {
                if (_groupField) {
                    _groupField = cleanGroupFields(multiHeaders.viewCols, _groupField.split(','));
                }
                if (sortInfo && sortInfo.sortName && sortInfo.sortName.length) {
                    _sortInfo = cleanSortFields(multiHeaders.viewCols, sortInfo);
                }
            }
            /** @type {?} */
            const saveData = { sortInfo: _sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats, expandGroupRows: expandGroupRows, multiHeaders };
            /** @type {?} */
            const refreshGrid = (/**
             * @return {?}
             */
            () => {
                if (gridInstance.groupRows) {
                    gridInstance.expandGroupRows = expandGroupRows;
                    gridInstance.groupField = _groupField;
                }
                if (gridInstance.enableSetMultiHeaders) {
                    // 设置表头
                    refreshGridColumns(gridInstance, multiHeaders.viewCols || []);
                }
                else {
                    if (viewColumns && viewColumns.length) {
                        gridInstance.columns = gridInstance.columns.map((/**
                         * @param {?} cols
                         * @return {?}
                         */
                        cols => {
                            this.updateColumnFormat(cols, columnFormat, gridInstance);
                            return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);
                        }));
                    }
                }
                gridInstance.columnsChanged(true);
                if (sortInfo && Object.keys(sortInfo).length) {
                    const { sortName, sortOrder } = sortInfo;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
            });
            /** @type {?} */
            const saveCurrent = (/**
             * @return {?}
             */
            () => {
                this.setUserConfig(gridInstance.id, saveData).subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (btn) {
                        btn.disabled = false;
                    }
                    this.saving = false;
                    refreshGrid();
                    this.setActiveSchemeItem(gridInstance.id, _scheme);
                    this.prevSchemeItem = _scheme;
                    this.updateActiveSchemeItemSettings(gridInstance.id, saveData);
                    this.setCurrentConfigs(saveData);
                    modalRef.close();
                }));
            });
            if (gridInstance.showConfirmWhenSchemeChanged && gridInstance.enableScheme) {
                /** @type {?} */
                const languageRes = this.localeSer.getValue('datagrid-scheme.schemeChanged');
                /** @type {?} */
                const _changed = this.schemeService.isSchemeChanged(saveData, gridInstance.enableSetMultiHeaders);
                if (_changed) {
                    /** @type {?} */
                    const msgDlg = this.messager.question2(languageRes.title, [
                        {
                            text: languageRes.cancel,
                            cls: 'btn btn-light',
                            handle: (/**
                             * @return {?}
                             */
                            () => {
                                this.saving = false;
                                modalRef.close();
                                msgDlg.close();
                                this.restoreScheme(gridInstance);
                            })
                        },
                        {
                            text: languageRes.no,
                            cls: 'btn btn-secondary',
                            handle: (/**
                             * @return {?}
                             */
                            () => {
                                // 保存到当前方案
                                msgDlg.close();
                                saveCurrent();
                            })
                        },
                        {
                            text: languageRes.yes,
                            cls: 'btn btn-primary',
                            handle: (/**
                             * @return {?}
                             */
                            () => {
                                // 另存新方案
                                this.showNewSchemeDialog(gridInstance, { type: 'saveas' }, saveData, {
                                    ok: (/**
                                     * @param {?} t
                                     * @return {?}
                                     */
                                    (t) => {
                                        this.saving = false;
                                        modalRef.close();
                                        this.currentSchemeitem = t;
                                        this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));
                                        refreshGrid();
                                    }),
                                    cancel: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        this.saving = false;
                                        if (btn) {
                                            btn.disabled = false;
                                        }
                                    })
                                });
                                msgDlg.close();
                            })
                        },
                    ]);
                }
                else {
                    if (this.currentSchemeitem && this.prevSchemeItem && this.currentSchemeitem.id === this.prevSchemeItem.id) {
                        this.saving = false;
                        modalRef.close();
                        refreshGrid();
                    }
                    else {
                        saveCurrent();
                    }
                }
            }
            else {
                saveCurrent();
            }
        }
        else {
            modalRef.close();
        }
    }
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance) {
        /** @type {?} */
        const hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        let newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === field));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c && c.field && c.field !== '_datagrid-setting-control_'));
    }
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    isNewAddColumn(field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field === field));
    }
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    updateColumnFormat(cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                /** @type {?} */
                const formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field === col.field));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    col.fixed = formatCol.fixed === 'UNFIXED' ? '' : formatCol.fixed;
                    col.title = formatCol.title;
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            if (!formatCol.groupFooter.options) {
                                formatCol.groupFooter.options = {};
                            }
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            if (!formatCol.footer.options) {
                                formatCol.footer.options = {};
                            }
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    }
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    createConfigKey(gridId) {
        /** @type {?} */
        const grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            this.writeDebugMsg('DatagridSettingService: Can not find the grid instance.');
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentUserSettings(gridId) {
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        const config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            const { sortName, sortOrder, columns } = gridInstance;
            if (sortName) {
                /** @type {?} */
                const sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            const viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible || n.visible === undefined)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(this._convertColumnsToSimple(gridInstance))[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    saveUserConfig(gridId) {
        /** @type {?} */
        const config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    }
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    setUserConfig(gridId, config) {
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        const currentConfig = localStorage.getItem(key);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            if (gridIns && gridIns.enableSetMultiHeaders) {
                _config['isMultiHeader'] = true;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                const activeScheme = this.getActiveSchemeItem(gridId);
                if (activeScheme) {
                    this.updateSchemeSettings(activeScheme, config);
                    if (activeScheme.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme, gridId, true, gridIns.enableSetMultiHeaders);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        (t) => {
                            if (t.success) {
                                /** @type {?} */
                                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {
                                    return this.schemeService.saveScheme(activeScheme, gridId, true, gridIns.enableSetMultiHeaders);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    // 如为系统预制时，按无方案处理
                    return this._saveUserConfig(key, config ? _config : '');
                    // return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    }
    /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getUserConfig(key, isMultiHeader = false) {
        if (this.httpRestService) {
            return this._getUserConfig(key, isMultiHeader);
        }
        else {
            return of(this.getLocalSettings(key, isMultiHeader));
        }
    }
    /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getLocalSettings(key, isMultiHeader = false) {
        /** @type {?} */
        const config = localStorage.getItem(key);
        if (config) {
            /** @type {?} */
            const con = JSON.parse(config);
            if (isMultiHeader && !con['isMultiHeader']) {
                return null;
            }
            else {
                if (con['isMultiHeader']) {
                    return null;
                }
            }
            if (con[this.localeSer.localeId]) {
                return con[this.localeSer.localeId];
            }
            else {
                if (Object.keys(con).indexOf('viewColumns') > -1) {
                    return con;
                }
                return null;
            }
        }
        else {
            return null;
        }
    }
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    getDefaultScheme(schemeList) {
        // 0、过滤出当前语言的方案列表
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        schemeList = schemeList.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return JSON.parse(n.name)[this.localeSer.localeId];
        }));
        /** @type {?} */
        let defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.isDefault));
            if (!defaultScheme) {
                /** @type {?} */
                let publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.type === 'public'));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.type === 'org'));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSettings(gridId) {
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        let schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([schemeList, userSetting, supportedLanguages]) => {
            schemeList = schemeList || [];
            this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                const defaultScheme = this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    let userSettings = null;
                    if (defaultScheme.queryConditionString) {
                        userSettings = JSON.parse(defaultScheme.queryConditionString);
                    }
                    if (userSettings) {
                        /** @type {?} */
                        const localeId = this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    }
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    _saveUserConfig(key, config) {
        try {
            /** @type {?} */
            const userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            this.writeDebugMsg(e, 'error');
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    resetUserConfig(gridInstance, modalRef) {
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                return this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    }
    /**
     * @private
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    _getUserConfig(key, isMultiHeader = false) {
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            (ucs) => {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    let c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (isMultiHeader && !c['isMultiHeader']) {
                            return null;
                        }
                        else {
                            if (c['isMultiHeader']) {
                                return null;
                            }
                        }
                        if (c[this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[this.localeSer.localeId];
                        }
                        else {
                            c[this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            if (this.debugSer) {
                this.debugSer.error(e);
            }
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    buildSubmitData(gridId, settings = null) {
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        const localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        const currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    }
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?} authInfo
     * @param {?} simpleRef
     * @return {?}
     */
    showSchemeListDialog(gridInstance, schemeList, authInfo, simpleRef) {
        /** @type {?} */
        const modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: (schemeList || []).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return JSON.parse(n.name)[this.localeSer.localeId];
                })),
                removeItem: authInfo.success,
                currentUserId: authInfo.currentUserId,
                currentSchemeId: this.currentSchemeitem ? this.currentSchemeitem.id : ''
            },
            showButtons: false
        };
        /** @type {?} */
        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        // schemeListDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        const instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            this.schemeService.updateScheme(t, gridInstance.id, gridInstance.enableSetMultiHeaders).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                const msg = '列设置方案保存成功。';
                if (this.notifyService) {
                    this.notifyService.success(msg);
                }
                else {
                    this.messager.success(msg);
                }
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                let newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                schemeListDlg.close();
                /** @type {?} */
                const currentScheme = this.getActiveSchemeItem(gridInstance.id);
                if (!currentScheme) {
                    this.setActiveSchemeItem(gridInstance.id, null);
                    simpleRef.instance.currentSchemeItem = null;
                    simpleRef.instance.resetToDefault();
                    this.prevSchemeItem = null;
                    simpleRef.instance.onSubmitClick();
                }
            }));
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} e
     * @param {?} settings
     * @param {?} callback
     * @return {?}
     */
    showNewSchemeDialog(gridInstance, e, settings, callback) {
        /** @type {?} */
        const modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        // newSchemeDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        const instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            newSchemeDlg.close();
            if (callback && callback.cancel) {
                callback.cancel();
            }
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.createNewScheme(gridInstance.id, t, e.type === 'new', settings);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t.flag === false) {
                /** @type {?} */
                const msg = t.msg;
                /** @type {?} */
                let _msg = msg;
                if (msg) {
                    if (msg.indexOf('|') > -1) {
                        _msg = msg.split('|').map((/**
                         * @param {?} langcode
                         * @return {?}
                         */
                        (langcode) => {
                            return this.localeSer.getValue('datagrid-settings.' + langcode);
                        })).join('');
                    }
                    else {
                        _msg = this.localeSer.getValue('datagrid-settings.' + msg);
                    }
                    if (this.notifyService) {
                        this.notifyService.info(_msg);
                    }
                    else {
                        this.messager.info(_msg);
                    }
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            this.schemeService.setSchemeList(gridInstance.id, schemeList);
            if (callback && callback.ok) {
                callback.ok(t);
            }
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            (auth) => {
                return Object.assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            let hasAuthority = { public: true, org: true };
            // 您没有将方案的使用范围设置为公共的权限。
            /** @type {?} */
            let _msg = 'noAuth.public';
            if (t.type.value === 'org') {
                // 您没有将方案的使用范围设置为组织的权限。
                _msg = 'noAuth.org';
            }
            /** @type {?} */
            const msg = this.localeSer.getValue('datagrid-settings.' + _msg);
            if (t.success) {
                /** @type {?} */
                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
                ;
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeList(gridId) {
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        return this.schemeService.getSchemeList(gridId, gridIns.enableSetMultiHeaders);
    }
    /**
     * 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     * @param {?} gridId
     * @param {?} data
     * @param {?=} isNewScheme
     * @param {?=} currentSettings
     * @return {?}
     */
    createNewScheme(gridId, data, isNewScheme = true, currentSettings) {
        if (!data.name) {
            // msg 请输入方案名称
            return of({ flag: false, msg: 'required.schemeName' });
        }
        else {
            /** @type {?} */
            const hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                // msg '方案名称已存在，请修改。'
                return of({ flag: false, msg: 'has.exist' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                const getMessageCode = (/**
                 * @param {?} langCode
                 * @return {?}
                 */
                (langCode) => {
                    if (langCode === 'zh-CHS') {
                        return 'has.chs'; // 简体中文名称已存在。
                    }
                    else if (langCode === 'zh-CHT') {
                        return 'has.cht'; // 繁體中文名稱已存在。
                    }
                    else {
                        return 'has.en'; // 英文名称已存在
                    }
                });
                if (hasName.includes(this.localeSer.localeId)) {
                    /** @type {?} */
                    const msg = getMessageCode(this.localeSer.localeId);
                    return of({ flag: false, msg });
                }
                else {
                    /** @type {?} */
                    const msgs = hasName.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return getMessageCode(n);
                    }));
                    return of({ flag: false, msg: msgs.join('|') });
                }
            }
        }
        /** @type {?} */
        const requiredName = [];
        if (!data.name[this.localeSer.localeId]) {
            requiredName.push(this.localeSer.localeId);
        }
        // this.languages.forEach(n => {
        //     if (data.name[n.code] === '' || data.name[n.code] === undefined) {
        //         requiredName.push(n.code);
        //     }
        // });
        if (requiredName.length) {
            /** @type {?} */
            const msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n === 'zh-CHS') {
                    return 'required.chs'; //'请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return 'required.cht'; //'请输入繁体中文名称。';
                }
                else {
                    return 'required.en'; // '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('|') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            // msg '请选择组织'
            return of({ flag: false, msg: 'required.org' });
        }
        /** @type {?} */
        let _config = null;
        if (!isNewScheme) {
            /** @type {?} */
            const LOCALEID = this.localeSer.localeId;
            if (currentSettings && currentSettings.columnFormat) {
                currentSettings.columnFormat = this.convertColumnsToSimple(currentSettings.columnFormat);
            }
            _config = { [LOCALEID]: currentSettings };
        }
        /** @type {?} */
        const newId = this.idService.guid();
        /** @type {?} */
        let isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        if (gridInstance && gridInstance.enableSetMultiHeaders && _config) {
            _config['isMultiHeader'] = gridInstance.enableSetMultiHeaders;
        }
        /** @type {?} */
        const scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId, false, gridInstance.enableSetMultiHeaders).pipe(map((/**
         * @return {?}
         */
        () => {
            return scheme;
        })));
    }
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    setSchemeList(schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    }
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    buildOrgAndSchemeRelations(schemeId, orgIds) {
        if (!orgIds || !orgIds.length) {
            return [];
        }
        if (typeof orgIds === 'string') {
            orgIds = orgIds.split(',');
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return {
                id: this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentSchemeSettings(gridId) {
        /** @type {?} */
        const activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    setCurrentConfigs(settings) {
        this['CURRENT_CONFIGS'] = settings;
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentConfigs() {
        return this['CURRENT_CONFIGS'] || {};
    }
    /**
     * @private
     * @param {?} e
     * @param {?} gridInstance
     * @param {?=} modal
     * @return {?}
     */
    applySettings(e, gridInstance, modal) {
        e.target.disabled = true;
        if (this.saving) {
            return;
        }
        if (!this.saving) {
            /** @type {?} */
            let _scheme;
            /** @type {?} */
            let dlg;
            if (modal) {
                const { modalRef, currentScheme } = modal;
                dlg = modalRef;
                _scheme = currentScheme;
            }
            else {
                dlg = e;
                _scheme = e.currentScheme;
            }
            this.updateGridView(dlg, gridInstance, e.target, _scheme);
        }
    }
    /**
     * @param {?} viewCols
     * @param {?} gridInitOptions
     * @return {?}
     */
    getMultiHeaderColumns(viewCols, gridInitOptions) {
        return mergetColumnOptions(viewCols, gridInitOptions);
    }
}
DatagridSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: IdService },
    { type: LocaleService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype._httpRestService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.languages;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.activeSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeListSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.currentSchemeitem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.prevSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,