/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, Output, ViewEncapsulation, HostListener, ViewChild, ElementRef } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { MessagerService } from '@farris/ui-messager';
import { getMultilingualValue } from '../getValueWithLocaleId';
import { NotifyService } from '@farris/ui-notify';
import { ColumnTreeComponent } from '../multi-headers/column-tree.component';
import { mergeSortInfo, multiHeadersHasDataFields, reset2DefaultForMultiHeaders } from '../mutli-headers.helper';
import { cloneDeep } from 'lodash-es';
export class SimpleColumnsComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.enableScheme = false;
        this.seartTypes = [];
        /**
         * 所有列
         */
        this.columns = [];
        /**
         * 显示的列
         */
        this.fields = [];
        /**
         * 点击侧边样式以外的区域隐藏面板。默认为 true
         */
        this.clickToHidden = true;
        this.top = 0;
        this._schemeList = [];
        this.cls = 'f-datagrid-settings-simple-host';
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.submit = new EventEmitter();
        /**
         * 分组表头确定事件
         */
        this.submitForGroupHeader = new EventEmitter();
        this.closed = new EventEmitter();
        this.advanced = new EventEmitter();
        this.canceld = new EventEmitter();
        this.addNewScheme = new EventEmitter();
        this.showSchemeList = new EventEmitter();
        this.activeItemChange = new EventEmitter();
        this.schemeChanged = new EventEmitter();
        this.allCols = [];
        this.columnType = 'all';
        this.isEn = false;
        this.showSchemePanel = false;
        this.switchValue = false;
        // 当前方案
        this.currentSchemeItem = null;
        this.searchResultIsVisibleAll = { checkAll: false, unCheckAll: false };
        this.defaultSchemeName = '系统预制';
        /**
         * 配置多表头相关设置
         */
        this.multiHeaderOptions = {};
        // 启用多表头
        this.enableMultipleHeaders = false;
        this.prevSchemeItem = null;
        this.settings = {};
        this.schemeSer = null;
        this.noDisplyColumnTip = '';
        this.localeSer = this.injector.get(LocaleService, null);
        this.messager = this.injector.get(MessagerService, null);
        this.notify = this.injector.get(NotifyService, null);
        this.noDisplyColumnTip = this.localeSer.getValue('datagrid-scheme.noDisplyColumnTip');
    }
    /**
     * @return {?}
     */
    get schemeList() {
        return this._schemeList;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set schemeList(val) {
        if (val && val.length) {
            val = val.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return JSON.parse(n.name)[this.localeSer.localeId];
            })); // 仅获取当前语言的方案
            val.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n['_title_'] = getMultilingualValue(JSON.parse(n.name), this.localeSer.localeId);
                if (this.currentSchemeItem && n.id === this.currentSchemeItem.id) {
                    this.currentSchemeItem['_title_'] = n['_title_'];
                }
            }));
        }
        this._schemeList = val || [];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        /** @type {?} */
        const clsname = $event.target['className'] || '';
        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {
            // 隐藏侧边栏；
            if (this.clickToHidden) {
                this.cancel();
            }
        }
        this.showSchemePanel = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEscKeydown($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.close();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEnterKeydown($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.onSubmitClick();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onControlGKeydown($event) {
        if ($event.ctrlKey && !document.querySelector('modal-container')) {
            /** @type {?} */
            const _key = $event.key.toLowerCase();
            if (['g', 'r', 's'].includes(_key)) {
                $event.preventDefault();
                $event.stopPropagation();
            }
            if (_key === 'g') {
                this.showAdvanced($event);
            }
            else if (_key === 'r') {
                this.onSettingReset();
            }
            else if (_key === 's') {
                this.searchInput.nativeElement.focus();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentSchemeSettings() {
        if (this.currentSchemeItem && this.currentSchemeItem.queryConditionString) {
            /** @type {?} */
            const schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);
            return (/** @type {?} */ (schemeSettings[this.localeSer.localeId]));
        }
        return null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 判断是否启用多表头列设置
        this.enableMultipleHeaders = this.gridInstance.enableSetMultiHeaders;
        // const options = this.gridInstance.dfs['_state'].initialOptions;
        // if (options.columnFields && options.columnFields.length) {
        //     this.allCols = options.columnFields.filter((f: any) => f.field !== '_datagrid-setting-control_');
        // } else {
        //     this.allCols = this.columns[0];
        // }
        this.allCols = this.columns[0];
        if (this.gridInstance.enableScheme) {
            if (!this.prevSchemeItem) {
                this.prevSchemeItem = cloneDeep(this.currentSchemeItem);
            }
            if (this.currentSchemeItem) {
                this.settings = this.getCurrentSchemeSettings() || {};
            }
            else {
                if (!this.settings || !Object.keys(this.settings).length) {
                    this._reset2Default();
                }
            }
        }
        const { multiHeaders } = this.settings;
        this.multiHeaderOptions = { columns: this.columns, treeData: multiHeaders ? multiHeaders.treeData : null };
        if (!this.enableMultipleHeaders) {
            if (this.settings && this.settings.viewColumns) {
                this.fields = this.settings.viewColumns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n != '_datagrid-setting-control_'));
                this.dirtySettings(true);
            }
            else {
                this.fields = this.getViewColumns();
            }
        }
        this.container.nativeElement.focus();
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll();
        this.defaultSchemeName = this.localeSer.getValue('datagrid-scheme.syspreset') || this.gridInstance.defaultSchemeName;
        if (this.schemeSer) {
            if (this.settings && !Object.keys(this.settings).length) {
                if (this.gridInstance.enableScheme) {
                    this.resetToDefault();
                }
                else {
                    this.settings = this.getCurrentSettings();
                }
            }
            this.schemeSer.setSettings(this.settings);
            this.defaultSettings();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log(this.fields);
    }
    /**
     * @private
     * @return {?}
     */
    getViewColumns() {
        // 多表头
        /** @type {?} */
        let visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                visibleCls = visibleCls.concat(this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (n.visible || n.visible === undefined)));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    _getViewColumns(cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.colspan && (c.visible || c.visible === undefined)));
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(searchWords = '') {
        /** @type {?} */
        let cols = [];
        if (this.switchValue) {
            cols = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.fields.indexOf(n.field) > -1));
        }
        else {
            cols = this.columns[0];
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1));
        }
        this.allCols = cols;
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)));
    }
    /**
     * @private
     * @param {?=} searchFields
     * @return {?}
     */
    seachResultIsCheckAll(searchFields) {
        /** @type {?} */
        const allColsLength = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field != '_datagrid-setting-control_')).length;
        /** @type {?} */
        let fieldsLength = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n != '_datagrid-setting-control_')).length;
        if (searchFields) {
            fieldsLength = searchFields.length;
        }
        return {
            checkAll: allColsLength && allColsLength === fieldsLength,
            unCheckAll: !searchFields ? !this.fields.length : !fieldsLength
        };
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        if (!this.gridInstance.enableScheme) {
            this.fieldsChange.emit(this.fields);
        }
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        this.onCheckboxClick($event, col);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        $event.stopPropagation();
        this.showSchemePanel = false;
        /** @type {?} */
        let checked = false;
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
            checked = true;
        }
        else {
            this.fields.splice(index, 1);
            checked = false;
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.visible = this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        /** @type {?} */
        const _fields = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(_fields);
        this.dirtySettings(true);
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    searchColumn($event) {
        this.switchValue = false;
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, txt, ulElRef) {
        this.showSchemePanel = false;
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(txt);
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    getCheckAllState() {
        if (!this.searchInput.nativeElement.value) {
            if (this.fields.length === 0) {
                return 0;
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
                return 2;
            }
        }
        else {
            /** @type {?} */
            const visibleLen = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).length;
            if (visibleLen === this.allCols.length) {
                return 1;
            }
            else {
                if (visibleLen < this.allCols.length) {
                    if (visibleLen === 0) {
                        return 0;
                    }
                    return 1;
                }
            }
        }
    }
    // 全选
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, txt) {
        $event.stopPropagation();
        if (!this.allCols || !this.allCols.length) {
            return;
        }
        this.showSchemePanel = false;
        /** @type {?} */
        const state = this.getCheckAllState();
        /** @type {?} */
        const isCheckAll = state === 0 || state === 2;
        /** @type {?} */
        let _fields = null;
        if (!txt) {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = isCheckAll));
        }
        else {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const item = this.allCols.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => n.field == a.field));
                if (item) {
                    n.visible = isCheckAll;
                    item.visible = isCheckAll;
                }
            }));
            _fields = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
        }
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(!txt ? null : _fields);
        this.dirtySettings(true);
        this.cd.detectChanges();
        this.onFieldsChanged();
        // this.filterColumns(txt);
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    close($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.closed.emit();
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    cancel($event) {
        this.currentSchemeItem = this.prevSchemeItem;
        // this.schemeChanged.emit(this.prevSchemeItem);
        this.close($event);
        this.canceld.emit();
    }
    // 打开高级设置窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    showAdvanced($event) {
        this.close($event);
        this.settings = this.getCurrentSettings();
        if (this.enableMultipleHeaders) {
            if (this.multiHeaderRef) {
                this.settings.multiHeaders = this.multiHeaderRef.getSettings();
            }
        }
        this.advanced.emit({ viewFields: this.fields, settings: this.settings, columns: this.columns });
    }
    // 恢复默认
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSettingReset($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '您确定要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText, 2035).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetToDefault();
                this.dirtySettings(true);
                this.searchResultIsVisibleAll = this.seachResultIsCheckAll();
            }
        }));
    }
    /**
     * @return {?}
     */
    resetToDefault() {
        if (this.enableMultipleHeaders) {
            this._reset2DefalutFormMultiHeaders();
        }
        else {
            this._reset2Default();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _reset2DefalutFormMultiHeaders() {
        const { settings, multiHeaderOptions } = reset2DefaultForMultiHeaders(this.gridInstance);
        this.settings = settings,
            this.multiHeaderOptions = multiHeaderOptions;
    }
    /**
     * @private
     * @return {?}
     */
    _reset2Default() {
        /** @type {?} */
        const options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            const newColumns = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = this.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = Object.assign({}, c.footer || {});
                        col.groupFooter = Object.assign({}, c.groupFooter || {});
                        col.title = c.title;
                        col.fixed = c.fixed || '';
                        newColumns.push(col);
                    }
                }
            }));
            this.columns = [newColumns];
        }
        this.allCols = this.columns[0];
        this.settings = {};
        this.fields = this.getViewColumns();
        this.settings.viewColumns = this.fields;
        this.settings.columnFormat = [...this.columns[0]];
        if (options.sort) {
            /** @type {?} */
            const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            /** @type {?} */
            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
        }
        else {
            this.settings.sortInfo = {};
        }
        this.settings.groupField = options.groupField ? options.groupField.split(',') : [];
        this.settings.expandGroupRows = !!options.expandGroupRows;
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentSettings() {
        /** @type {?} */
        let _settings = {};
        _settings.viewColumns = this.fields;
        if (!this.enableScheme) {
            if (!_settings.columnFormat) {
                _settings.columnFormat = [...this.columns[0]];
            }
            if (!_settings.sortInfo) {
                _settings.sortInfo = {
                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                    sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
                };
            }
            if (_settings.groupField === undefined) {
                _settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
            }
        }
        else {
            _settings = Object.assign(this.settings || {}, _settings);
        }
        if (_settings.expandGroupRows == undefined) {
            _settings.expandGroupRows = this.gridInstance['expandGroupRows'];
        }
        return _settings;
    }
    // 确定按钮点击事件
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSubmitClick($event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.enableMultipleHeaders) {
            if (!this.fields || !this.fields.length) {
                this.notify.warning(this.noDisplyColumnTip);
                return;
            }
        }
        this.prevSchemeItem = this.currentSchemeItem;
        this.showSchemePanel = false;
        this.settings = this.getCurrentSettings();
        // 启用多表头时，触发新的事件
        if (this.enableMultipleHeaders) {
            if (this.multiHeaderRef) {
                /** @type {?} */
                const _multiHeaders = this.multiHeaderRef.getSettings();
                if (!multiHeadersHasDataFields(_multiHeaders.viewCols)) {
                    this.notify.info(this.noDisplyColumnTip);
                    return;
                }
                mergeSortInfo(_multiHeaders.viewCols, this.settings.sortInfo);
                this.settings.multiHeaders = _multiHeaders;
            }
            this.submitForGroupHeader.emit({
                content: this.settings,
                close: this.close.bind(this),
                target: this.btnOk.nativeElement,
                currentScheme: this.currentSchemeItem
            });
        }
        else {
            this.submit.emit({
                content: this.settings,
                close: this.close.bind(this),
                target: this.btnOk.nativeElement,
                currentScheme: this.currentSchemeItem
            });
        }
    }
    /**
     * @return {?}
     */
    collectSettings() {
        this.settings = this.getCurrentSettings();
        // 启用多表头时，触发新的事件
        if (this.enableMultipleHeaders) {
            if (this.multiHeaderRef) {
                /** @type {?} */
                const _multiHeaders = this.multiHeaderRef.getSettings();
                if (!multiHeadersHasDataFields(_multiHeaders.viewCols)) {
                    this.notify.info(this.noDisplyColumnTip);
                    return;
                }
                mergeSortInfo(_multiHeaders.viewCols, this.settings.sortInfo);
                this.settings.multiHeaders = _multiHeaders;
            }
        }
        return Object.assign({}, this.settings);
    }
    // 显示下拉方案列表
    /**
     * @param {?} $event
     * @return {?}
     */
    onChooseScheme($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = !this.showSchemePanel;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.schemeitemsEleRef && this.currentSchemeItem) {
                /** @type {?} */
                const itemEl = this.schemeitemsEleRef.nativeElement.querySelector(`#schemeitem_${this.currentSchemeItem.id}`);
                if (itemEl) {
                    if (itemEl.scrollIntoViewIfNeeded) {
                        itemEl.scrollIntoViewIfNeeded();
                    }
                    else {
                        itemEl.scrollIntoView();
                    }
                }
            }
        }));
    }
    // 仅显示可见列
    /**
     * @param {?} $event
     * @param {?} searchWords
     * @return {?}
     */
    onlySeeVisibleColumns($event, searchWords) {
        this.switchValue = $event;
        this.filterColumns(searchWords);
    }
    /**
     * @return {?}
     */
    refresh() {
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    hidePanel() {
        this.showSchemePanel = false;
        this.refresh();
    }
    // 新增方案
    /**
     * @param {?} $event
     * @param {?=} saveas
     * @return {?}
     */
    onNewSchemeClick($event, saveas = 'new') {
        if ($event) {
            $event.stopPropagation();
        }
        this.hidePanel();
        this.addNewScheme.emit({ type: saveas || 'new' });
    }
    // 显示方案列表管理窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowSchemeList($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.hidePanel();
        this.showSchemeList.emit();
    }
    /**
     * @private
     * @param {?} schemeSettings
     * @return {?}
     */
    schemeChangedForSingleHeader(schemeSettings) {
        if (!schemeSettings) {
            this._reset2Default();
        }
        else {
            this.settings = schemeSettings;
            this.fields = schemeSettings.viewColumns;
            this.columns[0].forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                f.visible = this.fields.indexOf(f.field) > -1;
            }));
        }
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll();
    }
    /**
     * @private
     * @param {?} schemeSettings
     * @return {?}
     */
    schemeChangedForMultiHeaders(schemeSettings) {
        if (schemeSettings) {
            this.settings = schemeSettings;
            /** @type {?} */
            const options = this.gridInstance.dfs['_state'].initialOptions;
            this.multiHeaderOptions = {
                treeData: this.settings.multiHeaders ? this.settings.multiHeaders.treeData : null,
                columns: options.groupHeaderFields
            };
        }
        else {
            this._reset2DefalutFormMultiHeaders();
        }
    }
    // 方案点击
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSchemeItemClick($event, item) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.currentSchemeItem = item;
            this.showSchemePanel = false;
            /** @type {?} */
            let schemeSettings = null;
            if (item && item.queryConditionString) {
                schemeSettings = JSON.parse(item.queryConditionString);
                schemeSettings = schemeSettings[this.localeSer.localeId];
            }
            if (this.enableMultipleHeaders) {
                this.schemeChangedForMultiHeaders(schemeSettings);
            }
            else {
                this.schemeChangedForSingleHeader(schemeSettings);
            }
            this.schemeSer.setSettings(this.settings);
            this.defaultSettings(item);
            this.schemeChanged.emit(item);
            this.refresh();
        }));
    }
    /**
     * 多表头默认设置
     * @private
     * @param {?=} item
     * @return {?}
     */
    defaultSettings(item) {
        if (this.enableMultipleHeaders) {
            if (!item || (this.settings && this.settings.multiHeaders && !this.settings.multiHeaders.treeData)) { // 系统预置
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.settings.multiHeaders = this.multiHeaderRef.getSettings();
                    this.schemeSer.setSettings(this.settings);
                }));
            }
        }
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    dirtySettings(flag) {
        // this.isChanged = flag;
    }
    /**
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    clearSearch($event, input) {
        if (input && input.value) {
            this.filterColumns('');
            input.value = '';
        }
    }
}
SimpleColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-settings-simple',
                template: "<div class=\"d-flex flex-column f-datagrid-settings-simple\" tabindex=\"0\" #colcontainer\r\n    [style.top.px]=\"top\" [style.height]=\"'calc(100vh - ' +  top + 'px)'\" >\r\n\r\n    <div class=\"header d-flex\">\r\n        <div class=\"f-utils-fill title d-flex flex-row\"> {{ 'datagrid.settings.simple.title' | locale }} \r\n            <button #btnSchemeName class=\"btn ml-3 px-2 scheme-name d-flex flex-row\"  *ngIf=\"enableScheme\" (click)=\"onChooseScheme($event)\">\r\n                <!-- <span *ngIf=\"isChanged\">*</span> -->\r\n                <span>{{ currentSchemeItem? currentSchemeItem._title_ : defaultSchemeName }}</span>\r\n                <span class=\"f-icon f-icon-arrow-chevron-down ml-2\" style=\"font-size: 12px;\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"closed\" (click)=\"cancel($event)\">\r\n            <span class=\"f-icon f-icon-close\" style=\"font-size: 20px;\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"scheme-manager-dropdown\" [style.display]=\"showSchemePanel? '': 'none'\" [style.left.px]=\"btnRef? btnRef.nativeElement.offsetLeft : 97\"  (click)=\"$event.stopPropagation()\">\r\n        <div class=\"f-utils-fill f-utils-flex-column m-2\">\r\n            <div class=\"pb-2\" style=\"max-height: calc(100vh - 300px);overflow: auto\">\r\n                <ul #schemeitems>\r\n                    <li class=\"scheme-manager__item\" [class.active]=\"!currentSchemeItem\" (click)=\"onSchemeItemClick($event, null)\"> \r\n                        <!-- <span *ngIf=\"isChanged && !activeSchemeItem\">*</span> -->\r\n                        {{'datagrid-scheme.syspreset' | locale}}\r\n                    </li>\r\n                    <li [attr.id]=\"'schemeitem_'+ item.id\" class=\"scheme-manager__item d-flex flex-row\" \r\n                        [class.active]=\"currentSchemeItem && currentSchemeItem?.id === item.id\"  \r\n                        *ngFor=\"let item of schemeList\" (click)=\"onSchemeItemClick($event, item)\" title=\"{{item._title_}}\">\r\n                        <!-- <span *ngIf=\"isChanged && activeSchemeItem?.id==item.id\">*</span> -->\r\n                        <span class=\"f-utils-fill mr-1\" style=\"text-overflow: ellipsis;\">{{item._title_}}</span>\r\n                        <span class=\"scheme-manager__label default\" *ngIf=\"item.isDefault\">{{'datagrid-scheme.isDefault' | locale}}</span>\r\n                        <span class=\"scheme-manager__label public\" *ngIf=\"item.type === 'public'\">{{'datagrid-scheme.isPublic' | locale}}</span>\r\n                        <span class=\"scheme-manager__label private\" *ngIf=\"!item.isDefault && item.type === 'private'\">{{'datagrid-scheme.isPrivate' | locale}}</span>\r\n                        <span class=\"scheme-manager__label org\" *ngIf=\"item.type === 'org'\">{{'datagrid-scheme.isOrg' | locale}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"d-flex scheme-manager__button-add\">\r\n                <button (click)=\"onNewSchemeClick($event)\">\r\n                    <span class=\"f-icon f-icon-plus\"></span>{{'datagrid-scheme.newScheme' | locale}}\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"p-2 mt-2\">\r\n                <div class=\"btn-toolbar\" style=\"justify-content: flex-end;\">\r\n                    <button class=\"btn btn-link mr-3\" (click)=\"onShowSchemeList($event)\">{{'datagrid-scheme.mgrScheme' | locale}}</button>\r\n                    <button class=\"btn btn-primary mr-1\" (click)=\"onNewSchemeClick($event, 'saveas')\">{{'datagrid-scheme.saveas' | locale}} </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-utils-fill content d-flex flex-column mb-0\">\r\n        <div class=\"d-flex flex-column\">\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center; height: 24px;\">\r\n                <h5 *ngIf=\"!enableMultipleHeaders\" class=\"count f-utils-fill m-0\" [innerHTML]=\"'datagrid.settings.simple.count' | locale | replaceX: fields.length\"></h5>\r\n                <h5 *ngIf=\"enableMultipleHeaders\" class=\"count m-0\" style=\"font-size: 18px;\">{{ 'headerGroup.title' | locale }}</h5>\r\n                <div class=\"d-flex flex-row \" style=\"align-items: center;justify-content: end;\" [class.f-utils-fill]=\"enableMultipleHeaders\" >\r\n                    <div [class.d-flex]=\"!inputWord.value\"  class=\"flex-row\" [style.display]=\"inputWord.value ? 'none': ''\"  *ngIf=\"!enableMultipleHeaders\">{{'datagrid-scheme.onlyshowcolumns' | locale}} \r\n                        <farris-switch style=\"position: relative;\r\n                        top: 2px;\r\n                        margin-left: 5px;\"\r\n                        id=\"only-visible-columns\"\r\n                        [square]=\"false\" [size]=\"'small'\"\r\n                        [ngModel]=\"switchValue\" \r\n                        (valueChange)=\"onlySeeVisibleColumns($event, inputWord.value)\"\r\n                      \r\n                        ></farris-switch>\r\n                    </div>\r\n                   \r\n                    <button class=\"btn btn-link\" style=\"height: 32px;padding-left: 4px;\" [preview-headers]=\"gh\" [dlgTitle]=\"'headerGroup.preview'|locale\" *ngIf=\"enableMultipleHeaders\"> {{ 'headerGroup.preview' | locale }}</button>\r\n                    <farris-switch style=\"position: relative; top: 2px; margin-left: 5px; display: none;\" id=\"only-visible-columns\"\r\n                        [square]=\"false\" [size]=\"'small'\" [(ngModel)]=\"enableMultipleHeaders\"></farris-switch>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"tip\">\r\n                <ng-container  *ngIf=\"!enableMultipleHeaders\">\r\n                    {{ 'datagrid.settings.simple.tip' | locale }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"enableMultipleHeaders\">\r\n                    {{ 'headerGroup.tips' | locale }}\r\n                </ng-container>\r\n            </div>\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\" [style.display]=\"enableMultipleHeaders?'none':''\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\"\r\n                (input)=\"searchColumn($event)\" style=\"height: 26px;\">\r\n                <div  class=\"input-group-append\" style=\"cursor: pointer\">\r\n                    <span  class=\"fa f-icon-search\" [class.f-icon-close]=\"inputWord.value\" (click)=\"clearSearch($event, inputWord)\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div style=\"padding: 5px 0px;\" class=\"d-flex flex-row\" *ngIf=\"!enableMultipleHeaders\">\r\n            <button class=\"btn btn-link \" style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event,inputWord.value)\" [disabled]=\"!(allCols && allCols.length)\">\r\n                <span class=\"f-icon f-icon-minus-outline checkall\" \r\n                    [class.f-icon-checkbox]=\"searchResultIsVisibleAll.unCheckAll\"\r\n                    [class.f-icon-checkbox-checked]=\"searchResultIsVisibleAll.checkAll\"></span>\r\n                {{ 'datagrid.settings.checkall' | locale }}\r\n            </button>\r\n        </div>\r\n\r\n        <div style=\"overflow: auto;padding-right:3px;\" class=\"f-utils-fill\" [ngStyle]=\"enableMultipleHeaders? {border: '1px solid #dae9ff','border-radius': '6px'} : {}\">\r\n            <ul [style.display]=\"enableMultipleHeaders? 'none':''\" class=\"list-group list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length && fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"!fields.length || fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\" *ngIf=\"!inputWord.value\"></span>\r\n                </li>\r\n            </ul>\r\n            <column-tree #gh=\"groupHeaderTree\" [dg]=\"gridInstance\" [options]=\"multiHeaderOptions\"\r\n                [style.display]=\"enableMultipleHeaders? 'block': 'none'\" style=\"height: 100%;padding-top: 5px;\"></column-tree>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"footer\">\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-link advanced\" (click)=\"showAdvanced($event)\">{{ 'datagrid.settings.advancedMode' | locale: '\u9AD8\u7EA7\u6A21\u5F0F' }}</button>\r\n            <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n            <button class=\"btn btn-secondary cancel\"\r\n                (click)=\"cancel($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n            <button class=\"btn btn-primary ok\" #okbtn\r\n                (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SimpleColumnsComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SimpleColumnsComponent.propDecorators = {
    enableScheme: [{ type: Input }],
    seartTypes: [{ type: Input }],
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    clickToHidden: [{ type: Input }],
    top: [{ type: Input }],
    schemeList: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    container: [{ type: ViewChild, args: ['colcontainer',] }],
    btnOk: [{ type: ViewChild, args: ['okbtn',] }],
    searchInput: [{ type: ViewChild, args: ['inputWord',] }],
    schemeitemsEleRef: [{ type: ViewChild, args: ['schemeitems',] }],
    btnRef: [{ type: ViewChild, args: ['btnSchemeName',] }],
    multiHeaderRef: [{ type: ViewChild, args: ['gh',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }],
    submit: [{ type: Output }],
    submitForGroupHeader: [{ type: Output }],
    closed: [{ type: Output }],
    advanced: [{ type: Output }],
    canceld: [{ type: Output }],
    addNewScheme: [{ type: Output }],
    showSchemeList: [{ type: Output }],
    activeItemChange: [{ type: Output }],
    schemeChanged: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEscKeydown: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
    onEnterKeydown: [{ type: HostListener, args: ['window:keydown.enter', ['$event'],] }],
    onControlGKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SimpleColumnsComponent.prototype.enableScheme;
    /** @type {?} */
    SimpleColumnsComponent.prototype.seartTypes;
    /**
     * 所有列
     * @type {?}
     */
    SimpleColumnsComponent.prototype.columns;
    /**
     * 显示的列
     * @type {?}
     */
    SimpleColumnsComponent.prototype.fields;
    /**
     * 点击侧边样式以外的区域隐藏面板。默认为 true
     * @type {?}
     */
    SimpleColumnsComponent.prototype.clickToHidden;
    /** @type {?} */
    SimpleColumnsComponent.prototype.top;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype._schemeList;
    /** @type {?} */
    SimpleColumnsComponent.prototype.cls;
    /** @type {?} */
    SimpleColumnsComponent.prototype.container;
    /** @type {?} */
    SimpleColumnsComponent.prototype.btnOk;
    /** @type {?} */
    SimpleColumnsComponent.prototype.searchInput;
    /** @type {?} */
    SimpleColumnsComponent.prototype.schemeitemsEleRef;
    /** @type {?} */
    SimpleColumnsComponent.prototype.btnRef;
    /** @type {?} */
    SimpleColumnsComponent.prototype.multiHeaderRef;
    /** @type {?} */
    SimpleColumnsComponent.prototype.formatChange;
    /** @type {?} */
    SimpleColumnsComponent.prototype.fieldsChange;
    /** @type {?} */
    SimpleColumnsComponent.prototype.submit;
    /**
     * 分组表头确定事件
     * @type {?}
     */
    SimpleColumnsComponent.prototype.submitForGroupHeader;
    /** @type {?} */
    SimpleColumnsComponent.prototype.closed;
    /** @type {?} */
    SimpleColumnsComponent.prototype.advanced;
    /** @type {?} */
    SimpleColumnsComponent.prototype.canceld;
    /** @type {?} */
    SimpleColumnsComponent.prototype.addNewScheme;
    /** @type {?} */
    SimpleColumnsComponent.prototype.showSchemeList;
    /** @type {?} */
    SimpleColumnsComponent.prototype.activeItemChange;
    /** @type {?} */
    SimpleColumnsComponent.prototype.schemeChanged;
    /** @type {?} */
    SimpleColumnsComponent.prototype.allCols;
    /** @type {?} */
    SimpleColumnsComponent.prototype.columnType;
    /** @type {?} */
    SimpleColumnsComponent.prototype.gridInstance;
    /** @type {?} */
    SimpleColumnsComponent.prototype.localeSer;
    /** @type {?} */
    SimpleColumnsComponent.prototype.isEn;
    /** @type {?} */
    SimpleColumnsComponent.prototype.showSchemePanel;
    /** @type {?} */
    SimpleColumnsComponent.prototype.switchValue;
    /** @type {?} */
    SimpleColumnsComponent.prototype.currentSchemeItem;
    /** @type {?} */
    SimpleColumnsComponent.prototype.searchResultIsVisibleAll;
    /** @type {?} */
    SimpleColumnsComponent.prototype.defaultSchemeName;
    /**
     * 配置多表头相关设置
     * @type {?}
     */
    SimpleColumnsComponent.prototype.multiHeaderOptions;
    /** @type {?} */
    SimpleColumnsComponent.prototype.enableMultipleHeaders;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.prevSchemeItem;
    /** @type {?} */
    SimpleColumnsComponent.prototype.settings;
    /** @type {?} */
    SimpleColumnsComponent.prototype.schemeSer;
    /** @type {?} */
    SimpleColumnsComponent.prototype.noDisplyColumnTip;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.injector;
    /** @type {?} */
    SimpleColumnsComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,