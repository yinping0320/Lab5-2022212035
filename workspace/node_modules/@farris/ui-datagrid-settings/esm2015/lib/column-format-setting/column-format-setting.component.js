/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Component, Input, Injector, ViewChild, Output, EventEmitter, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { NgForm } from '@angular/forms';
import { DatagridSettingsComponent } from '../datagrid-settings.component';
import { ColumnTreeComponent } from '../multi-headers/column-tree.component';
export class ColumnFormatSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.columns = [];
        this.fields = [];
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.allCols = [];
        /**
         * format Data
         */
        this.formatData = [];
        this.columnType = 'all';
        this.activeField = null;
        this.showGridFooter = false;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.fixedItems = [];
        this.isEn = false;
        this.switchValue = false;
        this._searchResult = { checkAll: false, unCheckAll: false };
        /**
         * 配置多表头相关设置
         */
        this.multiHeaderOptions = {};
        // 启用多表头
        this.enableMultipleHeaders = false;
        this.selectTreeNode = null;
        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&
            !this.gridSettingComponentRef.gridInstance.footerTemplate;
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @return {?}
     */
    get isShowfixed() {
        if (this.groupHeadersRef && this.selectTreeNode && this.selectTreeNode.id !== '__HOU_XUAN_LIE_ID__') { // 多表头
            // 多表头
            /** @type {?} */
            const rn = this.groupHeadersRef.tt.findRowNode(this.selectTreeNode.id);
            return rn && !rn.level;
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.setFormatData();
            this.allCols = this.columns[0];
            this.setActiveField();
            this.checkColumnOptions();
            this._searchResult = this.seachResultIsCheckAll();
        }
        if (changes.multiHeaderOptions && !changes.multiHeaderOptions.isFirstChange()) {
            this.setActiveField();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isEn = this.localeSer.localeId === 'en';
        this.initData();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setActiveField();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.colForm) {
                this.colForm.valueChanges.subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => {
                    this.formatChange.emit(this.formatData);
                }));
            }
        }), 50);
    }
    /**
     * @private
     * @return {?}
     */
    setActiveField() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.enableMultipleHeaders && this.multiHeaderOptions) {
                const { columns } = this.multiHeaderOptions;
                if (columns && columns.length) {
                    this.groupHeadersRef.tt.selectFirstNode();
                }
                else {
                    this.activeField = null;
                }
            }
            else {
                this.activeField = this.columns[0][0];
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setFormatData() {
        // this.formatData = this.fields.map(n => {
        //     return this.columns[0].find(col => col.field === n);
        // });
        this.formatData = this.columns[0];
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.alignItems = this.gridSettingComponentRef.alignItems;
        this.searchItems = this.gridSettingComponentRef.searchItems;
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.fixedItems = this.gridSettingComponentRef.fixedItems;
        this.setFormatData();
        this.allCols = this.columns[0];
        this.checkColumnOptions();
        this.filterColumns();
    }
    /**
     * @private
     * @return {?}
     */
    checkColumnOptions() {
        if (this.activeField) {
            if (this.activeField.allowGrouping === undefined) {
                this.activeField.allowGrouping = true;
            }
            if (this.activeField.groupFooter === undefined) {
                this.activeField.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.groupFooter.options = this.activeField.groupFooter.options || { calculationType: -1 };
                if (this.activeField.groupFooter.options.calculationType === undefined) {
                    this.activeField.groupFooter.options.calculationType = -1;
                }
            }
            if (this.activeField.footer === undefined) {
                this.activeField.footer = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.footer.options = this.activeField.footer.options || { calculationType: -1 };
                if (this.activeField.footer.options.calculationType === undefined) {
                    this.activeField.footer.options.calculationType = -1;
                }
            }
            if (!this.activeField.fixed || (this.activeField.fixed !== 'left' && this.activeField.fixed !== 'right')) {
                this.activeField.fixed = 'UNFIXED';
            }
        }
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(searchWords = '') {
        /** @type {?} */
        let cols = [];
        if (this.switchValue) {
            cols = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.fields.indexOf(n.field) > -1));
        }
        else {
            cols = this.columns[0];
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords) > -1));
        }
        this.allCols = cols;
        this._searchResult = this.seachResultIsCheckAll(this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)));
    }
    /**
     * @private
     * @param {?=} searchFields
     * @return {?}
     */
    seachResultIsCheckAll(searchFields) {
        /** @type {?} */
        const allColsLength = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field != '_datagrid-setting-control_')).length;
        /** @type {?} */
        let fieldsLength = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n != '_datagrid-setting-control_')).length;
        if (searchFields) {
            fieldsLength = searchFields.length;
        }
        return {
            checkAll: allColsLength && allColsLength === fieldsLength,
            unCheckAll: !searchFields ? !this.fields.length : !fieldsLength
        };
    }
    /**
     * @param {?} col
     * @param {?} $event
     * @return {?}
     */
    onFieldClick(col, $event) {
        this.activeField = col;
        this.checkColumnOptions();
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        this.setFormatData();
        this.fieldsChange.emit(this.fields);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        $event.target.style.userSelect = 'none';
        this.onCheckboxClick($event, col);
        $event.target.style.userSelect = '';
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        $event.stopPropagation();
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.visible = this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        /** @type {?} */
        const _fields = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this._searchResult = this.seachResultIsCheckAll(_fields);
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    searchColumn($event) {
        this.switchValue = false;
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, txt, ulElRef) {
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(txt);
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @param {?=} search
     * @return {?}
     */
    getCheckAllState(search = false) {
        if (this.fields.length === 0) {
            return 0;
        }
        else {
            if (search) {
                if (this._searchResult.checkAll) {
                    return 1;
                }
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
            }
            return 2;
        }
    }
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, txt) {
        if (!this.allCols || !this.allCols.length) {
            return;
        }
        /** @type {?} */
        const state = this.getCheckAllState(txt);
        /** @type {?} */
        const isVisible = state === 0 || state === 2;
        /** @type {?} */
        let _fields = null;
        if (txt == '') {
            if (isVisible) {
                // 执行全选
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.visible = true));
                this.fields = this.columns[0].map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.field));
            }
            else {
                // 取消全选
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.visible = false));
                this.fields = [];
            }
        }
        else {
            this.allCols.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                /** @type {?} */
                const col = this.columns[0].find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => c.field === n.field));
                col.visible = isVisible;
                c.visible = isVisible;
            }));
            _fields = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
        }
        this._searchResult = this.seachResultIsCheckAll(!txt ? null : _fields);
        this.cd.detectChanges();
        this.onFieldsChanged();
        // this.filterColumns(txt);
    }
    // 仅显示可见列
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onlySeeVisibleColumns($event, txt) {
        this.switchValue = $event;
        this.filterColumns(txt);
    }
    /**
     * @param {?} $event
     * @param {?} searchInput
     * @return {?}
     */
    clearSearch($event, searchInput) {
        if (searchInput && searchInput.value) {
            this.filterColumns('');
            searchInput.value = '';
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onNodeSelected($event) {
        if ($event && $event.node.id !== "__HOU_XUAN_LIE_ID__") {
            this.activeField = $event.node.data;
            this.selectTreeNode = $event.node;
            this.checkColumnOptions();
        }
        else {
            this.activeField = null;
            this.selectTreeNode = null;
        }
    }
    /**
     * @return {?}
     */
    getMultiHeaders() {
        return this.groupHeadersRef ? this.groupHeadersRef.getSettings() : null;
    }
}
ColumnFormatSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-format-setting',
                template: "<div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n    <div region=\"west\" class=\"west d-flex flex-column \" *ngIf=\"!enableMultipleHeaders\">\r\n        <div style=\"margin: 0 6px;\">\r\n\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\" (input)=\"searchColumn($event)\" style=\"height: 30px;\">\r\n                <div  class=\"input-group-append\" style=\"cursor: pointer\">\r\n                    <span  class=\"f-icon f-icon-search\" [class.f-icon-close]=\"inputWord.value\" (click)=\"clearSearch($event, inputWord)\"></span>\r\n                </div>\r\n            </div>\r\n            <div style=\"padding: 5px 0px;background-color: #fff;justify-content: space-between;align-items: center;\" class=\"d-flex flex-row\">\r\n                <button class=\"btn btn-link\" style=\"height: 32px;padding-left: 4px;\" [disabled]=\"!(allCols && allCols.length)\" (click)=\"onCheckAllClick($event, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkbox\" \r\n                    [class.f-icon-checkbox]=\"_searchResult.unCheckAll\" \r\n                    [class.f-icon-checkbox-checked]=\"_searchResult.checkAll \"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <div [class.d-flex]=\"!inputWord.value\"  class=\"flex-row\" [style.display]=\"inputWord.value ? 'none': ''\" >{{'datagrid-scheme.onlyshowcolumns' | locale}} \r\n                    <farris-switch style=\"position: relative;\r\n                    top: 2px;\r\n                    margin-left: 5px;\"\r\n                    id=\"only-visible-columns\"\r\n                    [square]=\"false\" [size]=\"'small'\"\r\n                    [ngModel]=\"switchValue\" \r\n                    (valueChange)=\"onlySeeVisibleColumns($event, inputWord.value)\"\r\n                    ></farris-switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px; cursor: pointer;\" class=\"flex-fill\">\r\n            <ul class=\"list-group  list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onFieldClick(col, $event)\" [class.active]=\"activeField && activeField.field === col.field\"\r\n                    f-dbl-click (dblClickHandler)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\" *ngIf=\"!inputWord.value\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div region=\"west\" class=\"west d-flex flex-column \" *ngIf=\"enableMultipleHeaders\">\r\n        <div style=\"margin: 0 6px;\" class=\"mb-2\">\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center; height: 24px;\">\r\n                <h5 class=\"count m-0\" style=\"font-size: 18px;\"> {{ 'headerGroup.title' | locale }}</h5>\r\n                <div class=\"d-flex flex-row \" style=\"align-items: center;justify-content: end;\" [class.f-utils-fill]=\"enableMultipleHeaders\">\r\n                    <button class=\"btn btn-link\" style=\"height: 32px;padding-left: 4px;\" [preview-headers]=\"gh\" *ngIf=\"enableMultipleHeaders\"> {{ 'headerGroup.preview' | locale }}</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"tip p-2\" style=\"background: #f7faff; border-radius: 4px;\" >\r\n                {{ 'headerGroup.tips' | locale }}\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px; cursor: pointer;\" class=\"flex-fill\">\r\n            <column-tree #gh=\"groupHeaderTree\" [dg]=\"gridSettingComponentRef?.gridInstance\" [options]=\"multiHeaderOptions\"\r\n             class=\"flex-fill d-flex pt-2\" [inModal]=\"true\" (nodeSelected)=\"onNodeSelected($event)\"></column-tree>\r\n        </div>\r\n    </div>\r\n\r\n    <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px;border-right: 0;\">\r\n\r\n        <h6 style=\"margin: 15px 0px;font-weight: bold;\">{{ 'datagrid.settings.properties' | locale }}</h6>\r\n\r\n        <form #colformatform=\"ngForm\" style=\"margin-top: 5px;\" *ngIf=\"activeField\">\r\n            <!-- \u5217\u6807\u9898 -->\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid-settings.column.title' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input class=\"form-control\" name=\"title\" [(ngModel)]=\"activeField.title\" type=\"text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u8868\u5934\u5BF9\u9F50 -->\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid.settings.headeralign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list name=\"halign\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.halign\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u6570\u636E\u5BF9\u9F50 -->\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"activeField && !activeField.groupHeader\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.dataalign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list name=\"align\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.align\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u662F\u5426\u56FA\u5B9A -->\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"isShowfixed\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid-settings.column.fixed' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list name=\"fixed\" \r\n                        [data]=\"fixedItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.fixed\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u5408\u8BA1 -->\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter && activeField && !activeField.groupHeader\" >\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytype' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap \">\r\n                       \r\n                        <farris-combo-list name=\"footer.options.calculationType\" \r\n                        [data]=\" activeField.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.footer.options.calculationType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"activeField && !activeField.groupHeader && showGridFooter && ( \r\n                (!activeField.footer.options.calculationType && activeField.footer.options.calculationType != 0)  ||activeField.footer.options.calculationType == -1)\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytext' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input type=\"input\" name=\"footer.options.text\" class=\"form-control\" [(ngModel)]=\"activeField.footer.options.text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n   \r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ColumnFormatSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnFormatSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    colForm: [{ type: ViewChild, args: ['colformatform',] }],
    groupHeadersRef: [{ type: ViewChild, args: ['gh',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }],
    multiHeaderOptions: [{ type: Input }],
    enableMultipleHeaders: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.columns;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.fields;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.colForm;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.groupHeadersRef;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.formatChange;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.fieldsChange;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.allCols;
    /**
     * format Data
     * @type {?}
     */
    ColumnFormatSettingComponent.prototype.formatData;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.columnType;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.activeField;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.showGridFooter;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.searchItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.alignItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.summaryItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.summaryItems2;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.fixedItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.localeSer;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.isEn;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.switchValue;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype._searchResult;
    /**
     * 配置多表头相关设置
     * @type {?}
     */
    ColumnFormatSettingComponent.prototype.multiHeaderOptions;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.enableMultipleHeaders;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.selectTreeNode;
    /**
     * @type {?}
     * @private
     */
    ColumnFormatSettingComponent.prototype.injector;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.gridSettingComponentRef;
    /**
     * @type {?}
     * @private
     */
    ColumnFormatSettingComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,