/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep, flatten } from "lodash-es";
/**
 * @param {?} c
 * @return {?}
 */
function _setColumnId(c) {
    c.id = c.id || c.field;
    if (c.colspan && c.colspan > 1) {
        c.groupHeader = true;
        c.id = 'groupHeader_' + c.id;
    }
}
/**
 * @param {?} node
 * @param {?} cols
 * @return {?}
 */
function _columnsToTreeNodes2(node, cols) {
    if (node.data.colspan) {
        if (cols[node.level + 1] && cols[node.level + 1].length) {
            /** @type {?} */
            var i = 0;
            do {
                /** @type {?} */
                let col = cols[node.level + 1].splice(0, 1)[0];
                i += col.colspan || 1;
                _setColumnId(col);
                /** @type {?} */
                const child = { data: col, children: [], level: node.level + 1, expanded: true, visible: true };
                node.children.push(child);
                if (col.colspan && col.colspan > 1) {
                    _columnsToTreeNodes2(child, cols);
                }
            } while (i < node.data.colspan && cols[node.level + 1].length);
        }
    }
}
/**
 * 将多表头列信息，转换为树结构
 * @param {?} cols
 * @return {?}
 */
export function columnsToTreeNodes(cols) {
    /** @type {?} */
    var nodes = [];
    cols[0].filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n.field !== '_datagrid-setting-control_')).forEach((/**
     * @param {?} c
     * @return {?}
     */
    c => {
        _setColumnId(c);
        /** @type {?} */
        var node = { data: c, children: [], level: 0, expanded: true, visible: true };
        nodes.push(node);
    }));
    nodes.forEach((/**
     * @param {?} n
     * @return {?}
     */
    n => {
        _columnsToTreeNodes2(n, cols);
    }));
    return nodes;
}
// 多表头列设置恢复默认
/** @type {?} */
export const reset2DefaultForMultiHeaders = (/**
 * @param {?} gridInstance
 * @return {?}
 */
(gridInstance) => {
    /** @type {?} */
    const options = gridInstance.dfs['_state'].initialOptions;
    /** @type {?} */
    const settings = {
        viewColumns: [],
        columnFormat: []
    };
    if (options.sort) {
        /** @type {?} */
        const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
        /** @type {?} */
        const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
        settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
    }
    else {
        settings.sortInfo = {};
    }
    settings.groupField = options.groupField ? options.groupField.split(',') : [];
    settings.expandGroupRows = !!options.expandGroupRows;
    settings.multiHeaders = {
        treeData: null,
        viewCols: []
    };
    return {
        settings,
        multiHeaderOptions: {
            columns: options.groupHeaderFields,
            treeData: null
        }
    };
})
/** 为新的展示列合并原列中的设置，如 格式化，单元格样式、模板 */
;
/**
 * 为新的展示列合并原列中的设置，如 格式化，单元格样式、模板
 * @param {?} viewCols
 * @param {?} gridInitOptions
 * @return {?}
 */
export function mergetColumnOptions(viewCols, gridInitOptions) {
    if (viewCols && gridInitOptions) {
        /** @type {?} */
        const dataFields = flatten(gridInitOptions['designerColumns']);
        /** @type {?} */
        const _cols = cloneDeep(viewCols).map((/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            return cols.map((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (!col.field || col.field.indexOf('farris-datagrid-column_') > -1) {
                    col.filter = false;
                }
                if (!col.colspan || col.colspan === 1) { // 数据字段
                    // 数据字段
                    /** @type {?} */
                    const old = dataFields.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === col.field || n.field === col.id));
                    if (old) {
                        /** @type {?} */
                        const _col = Object.assign({}, old, col);
                        if (!col.colspan) {
                            delete _col.colspan;
                        }
                        if (!_col.rowspan) {
                            delete _col.rowspan;
                        }
                        return _col;
                    }
                }
                return col;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
        return _cols;
    }
}
/**
 * @param {?} gridInstance
 * @param {?} newColumns
 * @return {?}
 */
export function refreshGridColumns(gridInstance, newColumns) {
    if (!gridInstance) {
        return;
    }
    /** @type {?} */
    const gridInitOptions = gridInstance.dfs['_state'].initialOptions;
    if (newColumns && gridInitOptions) {
        gridInstance.columns = mergetColumnOptions(newColumns, gridInitOptions);
    }
}
/**
 * 将排序信息合并到列上
 * @param {?} newColumns
 * @param {?} sortInfo
 * @return {?}
 */
export function mergeSortInfo(newColumns, sortInfo) {
    if (sortInfo && Object.keys(sortInfo).length) {
        const { sortName, sortOrder } = sortInfo;
        if (sortName && sortName.length) {
            newColumns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            (cols) => {
                cols.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    /** @type {?} */
                    const i = sortName.indexOf(col.field);
                    if (i > -1) {
                        col.sortable = true;
                        col.order = sortOrder[i] || 'asc';
                    }
                    else {
                        col.order = '';
                    }
                }));
            }));
        }
    }
}
/**
 * @param {?} multiHeaderColumns
 * @return {?}
 */
export function multiHeadersHasDataFields(multiHeaderColumns) {
    if (multiHeaderColumns && multiHeaderColumns.length) {
        return flatten(multiHeaderColumns).filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.field && (!n.colspan || n.colspan === 1))).length;
    }
    return false;
}
/**
 * @param {?} groupHeaderCols
 * @return {?}
 */
export function getDataFieldsForMultiHeaders(groupHeaderCols) {
    return flatten(groupHeaderCols).filter((/**
     * @param {?} n
     * @return {?}
     */
    (n) => n.field && (!n.colspan || n.colspan === 1)));
}
/**
 * @param {?} viewCols
 * @param {?} groupFields
 * @return {?}
 */
export function cleanGroupFields(viewCols, groupFields) {
    /** @type {?} */
    const cols = getDataFieldsForMultiHeaders(viewCols);
    /** @type {?} */
    const groupColumns = groupFields.map((/**
     * @param {?} f
     * @return {?}
     */
    f => {
        /** @type {?} */
        const col = cols.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.field === f));
        return col;
    })).filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n));
    return groupColumns.map((/**
     * @param {?} n
     * @return {?}
     */
    n => n.field));
}
/**
 * @param {?} viewCols
 * @param {?} sortInfo
 * @return {?}
 */
export function cleanSortFields(viewCols, sortInfo) {
    /** @type {?} */
    const cols = getDataFieldsForMultiHeaders(viewCols);
    /** @type {?} */
    const sortNames = sortInfo.sortName.map((/**
     * @param {?} f
     * @param {?} i
     * @return {?}
     */
    (f, i) => {
        /** @type {?} */
        const col = cols.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.field === f));
        if (!col) {
            sortInfo.sortOrder.splice(i, 1);
        }
        return col;
    })).filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n));
    return {
        sortName: sortNames.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field)),
        sortOrder: sortInfo.sortOrder
    };
}
//# sourceMappingURL=data:application/json;base64,