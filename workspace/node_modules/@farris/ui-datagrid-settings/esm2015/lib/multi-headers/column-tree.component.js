/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, EventEmitter, Component, ElementRef, Injector, Input, NgZone, Output, Renderer2, TemplateRef, ViewChild, ViewEncapsulation } from "@angular/core";
import { of } from "rxjs";
import { BsModalService } from "@farris/ui-modal";
import { TreeTableComponent } from "@farris/ui-treetable";
import { NotifyService } from '@farris/ui-notify';
import { DatagridComponent } from '@farris/ui-datagrid';
import { NewHeaderFormComponent } from "./new-header.component";
import { SetColumnsComponent } from "./setcolumns.component";
import { columnsToTreeNodes } from "../mutli-headers.helper";
import { cloneDeep, flatten } from "lodash-es";
import { LocaleService } from "@farris/ui-locale";
export class ColumnTreeComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} cd
     * @param {?} render
     * @param {?} modalService
     * @param {?} el
     * @param {?} notitySer
     */
    constructor(injector, ngzone, cd, render, modalService, el, notitySer) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.cd = cd;
        this.render = render;
        this.modalService = modalService;
        this.el = el;
        this.notitySer = notitySer;
        this.options = {};
        this.inModal = false;
        this.nodeSelected = new EventEmitter();
        this.fields = [];
        this.treecols = [];
        this.treeData = [];
        this.contextMenus = [];
        /**
         * 值 __HOU_XUAN_LIE_ID__
         */
        this.HOU_XUAN_LIE_ID = '__HOU_XUAN_LIE_ID__';
        this.GROUP_HEADER_ICON = 'f-icon f-icon-file-folder-close';
        this.Hou_Xuan_Qu = { id: this.HOU_XUAN_LIE_ID, title: '(候选列)', houxuanquNode: true };
        this.languageRes = {
            title: '多表头',
            preview: '预览效果',
            tips: '在（候选列）中的字段，将不在列表中显示; 点击字段名称，在右侧显示相关操作按钮。',
            contextMenus: {
                new: '新建表头',
                newChild: '新建子级表头',
                setDataField: '分配数据列',
                rename: '重命名',
                top: '置顶',
                up: '上移',
                down: '下移',
                bottom: '置底',
                cancelGroup: '取消分组',
                remove: '在分组内移除'
            },
            candidate: '(候选列)',
            setHeader: '设为表头',
            ok: '确定',
            cancel: '取消',
            required: '请输入表头名称！',
            defaultGroupHeaderName: '分组表头1',
            newHeaderPlaceholder: '请输入名称',
            newHeaderLabel: '表头名称'
        };
        this.localeSer = null;
        /**
         * 移动命令项是否显示
         */
        this.moveMenuItemVisiblily = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                /** @type {?} */
                const rowData = t.node.data;
                if (rowData) {
                    return rowData['id'] != this.HOU_XUAN_LIE_ID;
                }
                return true;
            }
            return true;
        });
        this.isGroupHeader = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                /** @type {?} */
                const rowData = t.node.data;
                if (rowData) {
                    return !!rowData['groupHeader'];
                }
                return true;
            }
            return true;
        });
        this.onBeforeShowContextMenu = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t && t.data.parents.indexOf(this.HOU_XUAN_LIE_ID) > -1) {
                // 待选区中的数据列禁用右键菜单
                return of({ show: false });
            }
            return of({ show: true });
        });
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const groupHeaders = this.dg.dfs['_state'].initialOptions.groupHeaderFields;
        /** @type {?} */
        const allDataFields = flatten(groupHeaders).filter((/**
         * @param {?} col
         * @return {?}
         */
        (col) => !col.colspan || col.colspan == 1));
        this.fields = allDataFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== this.dg.ControlPanelFeild));
        // 树组件列信息
        this.treecols = [
            { field: 'title', title: '名称', template: this.cellTemp }
        ];
        this.languageRes = this.localeSer.getValue('headerGroup');
        this.Hou_Xuan_Qu.title = this.languageRes.candidate;
        this.initTreeData();
        this.initTreenodeContextMenus();
        this.listenTreeTableEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.options && !changes.options.isFirstChange()) {
            this.initTreeData();
            this.tt.clearSelections();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @return {?}
     */
    listenTreeTableEvent() {
        this.tt.removed.subscribe((/**
         * @param {?} rowNode
         * @return {?}
         */
        rowNode => {
            if (rowNode && rowNode.parent) {
                rowNode.parent.leaf = !(rowNode.parent.children && rowNode.parent.children.length);
                if (rowNode.parent.leaf) {
                    rowNode.parent.icon = this.GROUP_HEADER_ICON;
                }
            }
            if (!rowNode.node.data.groupHeader) {
                /** @type {?} */
                const hxl = this.getHouXuanNode();
                if (!rowNode.parent) {
                    this.treeData = this.treeData.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data.id !== rowNode.id));
                }
                this.tt.append(rowNode.node.data, hxl.node);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initTreenodeContextMenus() {
        this.contextMenus = [
            { id: 1, title: this.languageRes.contextMenus.new, icon: 'f-icon f-icon-add',
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    // console.log(t);
                    this.addNewGroup(t.data, false);
                })
            },
            { id: 2, title: this.languageRes.contextMenus.newChild, visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.isGroupHeader(t.data) && t.data.level + 1 < this.dg.maxMultiHeaders - 1;
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.addNewGroup(t.data, true);
                })
            },
            { id: 3, title: this.languageRes.contextMenus.setDataField, visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.isGroupHeader(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.setColumnsForGroupHeader(null, t.data);
                })
            },
            { id: 31, title: this.languageRes.contextMenus.rename, icon: 'f-icon f-icon-edit',
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.resetHeaderName(null, t.data);
                })
            },
            '-',
            {
                id: 4, title: this.languageRes.contextMenus.top, icon: 'f-icon f-icon-roofing',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.moveMenuItemVisiblily(t.data);
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveTop(null, t.data);
                })
            },
            {
                id: 5, title: this.languageRes.contextMenus.up, icon: 'f-icon f-icon-arrow-chevron-up',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.moveMenuItemVisiblily(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveUp(null, t.data);
                })
            },
            {
                id: 6, title: this.languageRes.contextMenus.down, icon: 'f-icon f-icon-arrow-chevron-down',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.moveMenuItemVisiblily(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveDown(null, t.data);
                })
            },
            {
                id: 7, title: this.languageRes.contextMenus.bottom, icon: 'f-icon f-icon-bottomsetting',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.moveMenuItemVisiblily(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveBottom(null, t.data);
                })
            },
            '-',
            {
                id: 8, title: this.languageRes.contextMenus.remove, icon: 'f-icon f-icon-minus',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return !t.data.node.data.houxuanquNode && !t.data.node.data.groupHeader;
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.tt.remove(t.data.id);
                })
            },
            {
                id: 9, title: this.languageRes.contextMenus.cancelGroup, icon: 'f-icon f-icon-x',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return t.data.node.data.groupHeader;
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.removeGroup(null, t.data);
                })
            }
        ];
    }
    /**
     * @return {?}
     */
    initTreeData() {
        if (this.options) {
            const { treeData } = this.options;
            if (treeData) {
                this.treeData = treeData;
                return;
            }
        }
        if (this.options.columns && this.options.columns.length > 1) {
            /** @type {?} */
            const _treeData = columnsToTreeNodes(cloneDeep(this.options.columns));
            /** @type {?} */
            const houXuanLie = this.fields.filter((/**
             * @param {?} f
             * @return {?}
             */
            f => !flatten(this.options.columns).find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === f.field)))).map((/**
             * @param {?} a
             * @return {?}
             */
            (a) => {
                return {
                    data: a,
                    children: [],
                    visible: true
                };
            }));
            _treeData.push({
                data: this.Hou_Xuan_Qu,
                children: houXuanLie,
                expanded: true
            });
            this.treeData = _treeData;
        }
        else {
            this.treeData = [{
                    data: { id: 'groupHeader_1', title: this.languageRes.defaultGroupHeaderName, halign: 'left', groupHeader: true },
                    children: this.fields.map((/**
                     * @param {?} n
                     * @param {?} i
                     * @return {?}
                     */
                    (n, i) => {
                        n['index'] = i;
                        n['id'] = n['field'];
                        return {
                            data: n,
                            children: [],
                            visible: true
                        };
                    })),
                    icon: this.GROUP_HEADER_ICON,
                    expanded: true, visible: true
                }, {
                    data: this.Hou_Xuan_Qu,
                    children: [],
                    expanded: true,
                    icon: this.GROUP_HEADER_ICON
                }];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getHouXuanNode() {
        return this.tt.findRowNode(this.HOU_XUAN_LIE_ID);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTreeSelected($event) {
        this.nodeSelected.emit($event);
    }
    /**
     * @private
     * @param {?} okCallback
     * @param {?} dlgTitle
     * @return {?}
     */
    showNewHeaderDialog(okCallback, dlgTitle) {
        /** @type {?} */
        const modalRef = this.modalService.show(NewHeaderFormComponent, {
            title: dlgTitle,
            width: 340,
            height: 190,
            showMaxButton: false,
            resizable: false,
            initialState: {
                title: '',
                placeholder: this.languageRes.newHeaderPlaceholder,
                label: this.languageRes.newHeaderLabel
            },
            buttons: [
                {
                    text: this.languageRes.cancel,
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        modalRef.close();
                    })
                },
                {
                    text: this.languageRes.ok,
                    cls: 'btn btn-primary',
                    handle: okCallback
                }
            ]
        });
        return modalRef;
    }
    /**
     * @private
     * @return {?}
     */
    generateGroupHeaderId() {
        return `groupHeader_${new Date().getTime()}`;
    }
    /**
     * @private
     * @param {?} rn
     * @param {?} title
     * @param {?=} child
     * @return {?}
     */
    createNewGroupHeader(rn, title, child = false) {
        /** @type {?} */
        const ghid = this.generateGroupHeaderId();
        /** @type {?} */
        const data = { id: ghid, title, groupHeader: true, halign: 'left', fixed: 'UNFIXED' };
        /** @type {?} */
        const gh = {
            data,
            children: [],
            expanded: true,
            visible: true,
            icon: this.GROUP_HEADER_ICON,
        };
        if (!child) {
            if (!rn.parent) {
                /** @type {?} */
                const i = this.treeData.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data.id === rn.id)) + 1;
                this.treeData.splice(i, 0, gh);
                this.treeData = this.treeData.slice();
            }
            else {
                gh.data.fixed = rn.parent.data.fixed;
                this.tt.appendChildren([gh], rn.parent);
            }
        }
        else {
            gh.data.fixed = rn.node.data.fixed;
            this.tt.appendChildren([gh], rn.node);
        }
    }
    // 删除分组
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    removeGroup(event, rowNode) {
        if (this.tt.selectedRow && rowNode.id === this.tt.selectedRow.id) {
            this.nodeSelected.emit(null);
        }
        /** @type {?} */
        const childs = this.tt.serializedValue.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.parents.indexOf(rowNode.id) > -1 && !n.node.data.groupHeader)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.node));
        this.treeData = this.treeData.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id !== rowNode.id));
        this.tt.remove(rowNode.id);
        this.tt.appendChildren(childs, this.getHouXuanNode().node);
    }
    // 新增分组
    /**
     * @param {?} rn
     * @param {?=} child
     * @return {?}
     */
    addNewGroup(rn, child = false) {
        /** @type {?} */
        const modalRef = this.showNewHeaderDialog((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const ghfRef = (/** @type {?} */ (modalRef.content));
            if (ghfRef.title) {
                if (!rn || rn.id === this.HOU_XUAN_LIE_ID) {
                    this.treeData.splice(0, 0, {
                        data: {
                            id: this.generateGroupHeaderId(), halign: 'left',
                            title: ghfRef.title, groupHeader: true, fixed: 'UNFIXED'
                        },
                        icon: this.GROUP_HEADER_ICON,
                        children: []
                    });
                    this.tt.updateSerializedValue();
                }
                else {
                    this.createNewGroupHeader(rn, ghfRef.title, child);
                }
                modalRef.close();
            }
            else {
                this.notitySer.info(this.languageRes.required);
                ghfRef.input.nativeElement.focus();
            }
        }), child ? this.languageRes.contextMenus.newChild : this.languageRes.contextMenus.new);
    }
    // 显示更新按钮
    /**
     * @param {?} $event
     * @param {?} nodeData
     * @return {?}
     */
    onMoreBtnClick($event, nodeData) {
        if (nodeData && nodeData.id) {
            this.tt.selectNode(nodeData.id);
        }
        this.tt.ctxMenu.onContextMenu($event);
    }
    /**
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    getCanSelectColumns(rowNode) {
        // 可分配列
        // 候选区数据 + 子节点
        // 可分配列
        // 候选区数据 + 子节点
        /** @type {?} */
        const hxl = this.getHouXuanNode();
        /** @type {?} */
        let fields = rowNode ? rowNode.node.children : [];
        fields = fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => !n.data.groupHeader));
        return hxl.node.children.concat(fields).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data));
    }
    /**
     * @private
     * @param {?} okCallback
     * @param {?} selectedItems
     * @param {?} rowNode
     * @return {?}
     */
    showSetColumnsDialog(okCallback, selectedItems, rowNode) {
        /** @type {?} */
        const modalRef = this.modalService.show(SetColumnsComponent, {
            title: this.languageRes.contextMenus.setDataField,
            width: 600,
            height: 500,
            showMaxButton: false,
            resizable: false,
            initialState: {
                data: this.getCanSelectColumns(rowNode),
                checkedItems: selectedItems,
                groupEditorRef: this
            },
            buttons: [
                {
                    text: this.languageRes.cancel,
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        modalRef.close();
                    })
                },
                {
                    text: this.languageRes.ok,
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        okCallback(modalRef.content.selectedIds);
                    })
                }
            ]
        });
        return modalRef;
    }
    /**
     * 为分组表头分配数据列
     * @param {?} $event
     * @param {?} rowNode
     * @return {?}
     */
    setColumnsForGroupHeader($event, rowNode) {
        /** @type {?} */
        const childs = rowNode ? rowNode.node.children ? rowNode.node.children.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data)) : [] : [];
        /** @type {?} */
        const modalRef = this.showSetColumnsDialog((/**
         * @param {?} selectedIds
         * @return {?}
         */
        (selectedIds) => {
            // 分组下的列
            /** @type {?} */
            const cols = selectedIds.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return this.fields.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field == n));
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
            // 候选区
            /** @type {?} */
            const hxl = this.getHouXuanNode();
            // 清理候选数据，将已分配的列在候选区移除
            hxl.node.children = (hxl.node.children || []).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => cols.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field == n.id)) === -1));
            // 查找需要移除的
            /** @type {?} */
            const needRemoveNodes = (rowNode.node.children || []).filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                return !n.data.groupHeader && cols.findIndex((/**
                 * @param {?} c
                 * @return {?}
                 */
                (c) => c.field === n.id)) == -1;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
            if (needRemoveNodes && needRemoveNodes.length) {
                needRemoveNodes.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    this.tt.remove(n.id);
                }));
            }
            // 查找需要新增的
            /** @type {?} */
            const needAppendNodes = cols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (rowNode.node.children || []).findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === n.field)) === -1)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (!n.id) {
                    n.id = n.field;
                }
                return n;
            }));
            if (needAppendNodes && needAppendNodes.length) {
                needAppendNodes.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const col = this.fields.find((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.field == n.field));
                    if (col) {
                        col.fixed = rowNode.node.data.fixed;
                    }
                }));
                this.tt.appendChildren(needAppendNodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return {
                        data: n,
                        children: [],
                        expanded: true
                    };
                })), rowNode.node);
                this.tt.expandNode(rowNode.id);
            }
            // 更新待选区
            /** @type {?} */
            const hxlCols = needRemoveNodes.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    data: n.data,
                    children: []
                };
            }));
            this.tt.appendChildren(hxlCols, hxl.node);
            modalRef.close();
        }), childs, rowNode);
    }
    // 将待选区中的数据列直接设为表头
    /**
     * @param {?} event
     * @param {?} col
     * @return {?}
     */
    setColumnHeader(event, col) {
        /** @type {?} */
        const i = this.treeData.length - 1;
        this.treeData.splice(i, 0, { data: col, children: [] });
        /** @type {?} */
        const hxl = this.getHouXuanNode();
        if (hxl) {
            hxl.node.children = hxl.node.children.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.data.id !== col.id));
            hxl.node.leaf = !(hxl.node.children && hxl.node.children.length);
            if (hxl.node.leaf) {
                hxl.node.icon = this.GROUP_HEADER_ICON;
            }
            this.tt.clearSelections();
            this.tt.updateSerializedValue();
            this.tt.selectNode(col.id, true);
        }
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveUp(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        if (index !== 0) {
            /** @type {?} */
            const tempArr = data.splice(index, 1);
            data.splice(index - 1, 0, ...tempArr);
            this.tt.updateSerializedValue();
        }
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveDown(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        /** @type {?} */
        const len = data.length;
        if (index !== len - 2) {
            /** @type {?} */
            const tempArr = data.splice(index, 1);
            data.splice(index + 1, 0, ...tempArr);
            this.tt.updateSerializedValue();
        }
        else {
            this.moveBottom(event, rowNode);
        }
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveTop(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        data.unshift(rowNode.node);
        data.splice(index + 1, 1);
        this.tt.updateSerializedValue();
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveBottom(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        data.push(rowNode.node);
        data.splice(index, 1);
        if (!rowNode.parent) {
            this.moveUp(event, rowNode);
        }
        else {
            this.tt.updateSerializedValue();
        }
    }
    /**
     * 获取多表头数据
     * @return {?}
     */
    getPreviewGroupColumns() {
        /** @type {?} */
        const treeNodes = this.getAllNodes();
        return this.convert2Array(treeNodes);
    }
    /**
     * 获取候选列
     * @return {?}
     */
    getHouXuanFields() {
        /** @type {?} */
        const hxl = this.treeData.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.houxuanquNode));
        if (hxl) {
            return hxl.children;
        }
        else {
            return [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getAllNodes() {
        /** @type {?} */
        const hxl = this.getHouXuanFields();
        return this.tt.serializedValue.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !n.node.data.houxuanquNode && hxl.findIndex((/**
             * @param {?} k
             * @return {?}
             */
            k => k.data.id === n.id)) === -1;
        }));
    }
    /**
     * 将树节点数据转换为 多表头结构
     * @param {?} rowNodes
     * @return {?}
     */
    convert2Array(rowNodes) {
        /** @type {?} */
        const r = [];
        /** @type {?} */
        const maxBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : (/**
         * @param {?} val
         * @return {?}
         */
        val => val[fn]))));
        /** @type {?} */
        const maxlevel = maxBy(rowNodes, (/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.level));
        // 排除没有数据字段的表头
        rowNodes = rowNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => (n.node.children && n.node.children.length && n.node.data.groupHeader) || !n.node.data.groupHeader));
        /**
         * 1、只有一组表头，且固定在左侧或右侧时，按无固定列方式处理
         * 2、只有左侧、右侧固定列而没有其他正常列时，取消右侧固定列
         * 3、只有左侧或右侧固定时，按无固定列处理
         * @type {?}
         */
        const parents = rowNodes.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => !e.parent));
        if (!parents.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.node.data.fixed || n.node.data.fixed === 'UNFIXED')).length) {
            /** @type {?} */
            const leftCols = parents.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.node.data.fixed === 'left'));
            /** @type {?} */
            const rightCols = parents.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.node.data.fixed === 'right'));
            if (leftCols.length == parents.length || rightCols.length == parents.length) {
                rowNodes.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (parents.find((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.id === n.id))) {
                        n.node.data.fixed = '';
                    }
                }));
            }
            else {
                if (rightCols.length === 1) {
                    leftCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        rowNodes.forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            if (t.id === n.id) {
                                n.node.data.fixed = '';
                            }
                        }));
                    }));
                }
                else {
                    rightCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        rowNodes.forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            if (t.id === n.id) {
                                n.node.data.fixed = '';
                            }
                        }));
                    }));
                }
            }
        }
        for (let i = 0; i <= maxlevel; i++) {
            r.push(rowNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.level === i)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const data = n.node.data;
                /** @type {?} */
                const _fixed = n.parent ? this.tt.getRoot(n.id).node.data.fixed : (data.fixed || '');
                /** @type {?} */
                const _colspan = (n.node.children ? rowNodes.filter((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => k.parents.indexOf(n.id) > -1 && k.id.indexOf('groupHeader_') == -1)).length : 1) || 1;
                /** @type {?} */
                const _rowspan = (n.node.children && n.node.children.length > 0) ? 1 : (maxlevel - n.level + 1);
                /** @type {?} */
                const newCol = {
                    field: data.field,
                    title: data.title,
                    sortable: data.sortable,
                    order: data.order,
                    halign: data.halign || 'left',
                    align: data.align || 'left',
                    visible: true,
                    allowGrouping: data.allowGrouping,
                    groupFooter: data.groupFooter,
                    footer: data.footer,
                    width: (data.size ? data.size.width : 100),
                    dataType: data.dataType || 'string',
                    fixed: _fixed === 'UNFIXED' ? '' : _fixed,
                    id: n.id,
                    parentId: n.node.parent ? n.node.parent.id : null,
                    rowspan: _rowspan,
                    colspan: _colspan
                };
                /** @type {?} */
                const newCol2 = {
                    field: data.field,
                    title: data.title,
                    halign: data.halign || 'left',
                    align: data.align || 'left',
                    visible: true,
                    groupFooter: {},
                    footer: {},
                    width: (data.size ? data.size.width : 100),
                    dataType: data.dataType || 'string',
                    fixed: _fixed === 'UNFIXED' ? '' : _fixed,
                    id: n.id,
                    parentId: n.node.parent ? n.node.parent.id : null,
                    rowspan: _rowspan,
                    colspan: _colspan
                };
                return n.node.data.groupHeader ? newCol2 : newCol;
            })));
        }
        return r;
    }
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    clearTreeNodesData(nodes) {
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            delete n.parent;
            delete n.elementRef;
            if (n.children && n.children.length) {
                this.clearTreeNodesData(n.children);
            }
        }));
    }
    /**
     * @return {?}
     */
    getSettings() {
        this.clearTreeNodesData(this.treeData);
        return {
            viewCols: this.getPreviewGroupColumns(),
            treeData: this.treeData
        };
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @return {?}
     */
    hiddenCol($event, id) {
        $event.stopPropagation();
        if (this.tt.selectedRow && id === this.tt.selectedRow.id) {
            this.tt.clearSelections();
            this.nodeSelected.emit(null);
        }
        this.tt.remove(id);
    }
    /**
     * @param {?} $event
     * @param {?} rowNode
     * @return {?}
     */
    resetHeaderName($event, rowNode) {
        /** @type {?} */
        const modalRef = this.showNewHeaderDialog((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const ghfRef = (/** @type {?} */ (modalRef.content));
            if (ghfRef.title) {
                rowNode.node.data.title = ghfRef.title;
                modalRef.close();
            }
            else {
                this.notitySer.info(this.languageRes.required);
                ghfRef.input.nativeElement.focus();
            }
        }), this.languageRes.contextMenus.rename);
        /** @type {?} */
        const ghfRef = (/** @type {?} */ (modalRef.content));
        ghfRef.title = rowNode.node.data.title;
    }
}
ColumnTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-tree',
                template: "<farris-treetable #tt [data]=\"treeData\" [columns]=\"treecols\"\r\n        [idField]=\"'id'\" [striped]=\"false\" [showBorder]=\"false\"\r\n        [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n        [fixedHeader]=\"false\" [fit] =\"false\" [showHeader]=\"false\"\r\n        [collapseIcon]=\"'f-icon f-icon-file-folder-close'\" [expandIcon]=\"'f-icon f-icon-file-folder-open'\"\r\n        [enableContextMenu]=\"true\" [contextMenuItems]=\"contextMenus\" [dblClickExpand]=\"false\" [beforeShowContextMenu]=\"onBeforeShowContextMenu\"\r\n        (nodeSelected)=\"onTreeSelected($event)\"\r\n></farris-treetable>\r\n<ng-template #nodeTemplate let-ctx>\r\n    <div class=\"d-flex flex-row multi-headers-toolbars\" id=\"{{ ctx.rowData['id'] }}\">\r\n        <div class=\"f-utils-fill\">{{ctx.rowData['title']}}</div>\r\n        <div class=\"d-flex align-items-center multi-headers-toolbars-buttons hide\" [class.show]=\"tt.selectValue === ctx.rowData['id']\">\r\n            \r\n            <button class=\"btn btn-link d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowData['id'] !== '__HOU_XUAN_LIE_ID__' && isGroupHeader(ctx.rowNode)\" title=\"{{languageRes.contextMenus.cancelGroup}}\"\r\n                (click)=\"removeGroup($event, ctx.rowNode);\">\r\n                <span class=\"f-icon f-icon-x\"></span>\r\n            </button>\r\n            <button class=\"btn btn-link d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowData['id'] !== '__HOU_XUAN_LIE_ID__' && ctx.rowNode.parents && ctx.rowNode.parents[0] !== '__HOU_XUAN_LIE_ID__' && !isGroupHeader(ctx.rowNode)\"\r\n                 title=\"{{languageRes.contextMenus.remove}}\"\r\n                (click)=\"hiddenCol($event,ctx.rowNode.id)\">\r\n                <span class=\"f-icon f-icon-x\"></span>\r\n            </button>\r\n            \r\n            <button class=\"btn btn-link mr-0 d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowData['id'] !== '__HOU_XUAN_LIE_ID__' && ctx.rowNode.parents && ctx.rowNode.parents[0] !== '__HOU_XUAN_LIE_ID__'\" title=\"\"\r\n                (click)=\"onMoreBtnClick($event, ctx.rowData)\">\r\n                <span class=\"f-icon f-icon-more-horizontal\"></span>\r\n            </button>\r\n            <button class=\"btn btn-link mr-0 d-flex align-items-center more treenode-more-btn\" title=\"{{languageRes.contextMenus.new}}\" \r\n                *ngIf=\"ctx.rowData['id'] === '__HOU_XUAN_LIE_ID__'\"\r\n                (click)=\"addNewGroup(null, !1)\">\r\n                <span class=\"f-icon f-icon-plus-circle font16 t-2\"></span>\r\n            </button>\r\n\r\n            <button class=\"btn btn-link mr-0 d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowNode.parents && ctx.rowNode.parents[0] === '__HOU_XUAN_LIE_ID__'\" title=\"{{languageRes.setHeader}}\"\r\n                (click)=\"setColumnHeader($event, ctx.rowData)\">\r\n                <span class=\"f-icon f-icon-add\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n</ng-template>",
                exportAs: 'groupHeaderTree',
                encapsulation: ViewEncapsulation.None,
                styles: [".multi-headers-toolbars .multi-headers-toolbars-buttons{margin-right:-11px}.multi-headers-toolbars .multi-headers-toolbars-buttons.hide{display:none!important}.multi-headers-toolbars .multi-headers-toolbars-buttons.show{display:flex!important}.multi-headers-toolbars .multi-headers-toolbars-buttons button.more{height:26px;width:26px;background:0 0;border-radius:0;border:0;padding:2px}.multi-headers-toolbars .multi-headers-toolbars-buttons button.more .f-icon{font-size:14px;position:relative;left:3px}.multi-headers-toolbars .multi-headers-toolbars-buttons .font16{font-size:16px}.multi-headers-toolbars:hover .multi-headers-toolbars-buttons,.table-hover tbody tr:hover .multi-headers-toolbars .multi-headers-toolbars-buttons{display:flex!important}"]
            }] }
];
/** @nocollapse */
ColumnTreeComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: BsModalService },
    { type: ElementRef },
    { type: NotifyService }
];
ColumnTreeComponent.propDecorators = {
    dg: [{ type: Input }],
    options: [{ type: Input }],
    inModal: [{ type: Input }],
    nodeSelected: [{ type: Output }],
    cellTemp: [{ type: ViewChild, args: ['nodeTemplate',] }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};
if (false) {
    /** @type {?} */
    ColumnTreeComponent.prototype.dg;
    /** @type {?} */
    ColumnTreeComponent.prototype.options;
    /** @type {?} */
    ColumnTreeComponent.prototype.inModal;
    /** @type {?} */
    ColumnTreeComponent.prototype.nodeSelected;
    /** @type {?} */
    ColumnTreeComponent.prototype.cellTemp;
    /** @type {?} */
    ColumnTreeComponent.prototype.tt;
    /** @type {?} */
    ColumnTreeComponent.prototype.fields;
    /** @type {?} */
    ColumnTreeComponent.prototype.treecols;
    /** @type {?} */
    ColumnTreeComponent.prototype.treeData;
    /** @type {?} */
    ColumnTreeComponent.prototype.contextMenus;
    /**
     * 值 __HOU_XUAN_LIE_ID__
     * @type {?}
     */
    ColumnTreeComponent.prototype.HOU_XUAN_LIE_ID;
    /** @type {?} */
    ColumnTreeComponent.prototype.GROUP_HEADER_ICON;
    /** @type {?} */
    ColumnTreeComponent.prototype.Hou_Xuan_Qu;
    /** @type {?} */
    ColumnTreeComponent.prototype.languageRes;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.localeSer;
    /**
     * 移动命令项是否显示
     * @type {?}
     */
    ColumnTreeComponent.prototype.moveMenuItemVisiblily;
    /** @type {?} */
    ColumnTreeComponent.prototype.isGroupHeader;
    /** @type {?} */
    ColumnTreeComponent.prototype.onBeforeShowContextMenu;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ColumnTreeComponent.prototype.notitySer;
}
//# sourceMappingURL=data:application/json;base64,