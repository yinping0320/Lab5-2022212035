/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, HostListener, ComponentFactoryResolver } from "@angular/core";
import { ColumnTreeComponent } from "../column-tree.component";
import { BsModalService } from "@farris/ui-modal";
import { PreviewMultiHeadersComponent } from "./preview-multi-headers.component";
export class ShowPreviewDirective {
    /**
     * @param {?} el
     * @param {?} cfr
     * @param {?} modalSer
     */
    constructor(el, cfr, modalSer) {
        this.el = el;
        this.cfr = cfr;
        this.modalSer = modalSer;
        this.dlgTitle = '效果预览';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPreviewBtnClick($event) {
        /** @type {?} */
        const modalRef = this.modalSer.show(PreviewMultiHeadersComponent, {
            title: this.dlgTitle,
            width: 600,
            height: 300,
            showMaxButton: true,
            resizable: true,
            initialState: {
                previewGroupColumns: this.treeIns.getPreviewGroupColumns()
            },
            showButtons: false
        });
    }
}
ShowPreviewDirective.decorators = [
    { type: Directive, args: [{
                selector: '[preview-headers]'
            },] }
];
/** @nocollapse */
ShowPreviewDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];
ShowPreviewDirective.propDecorators = {
    treeIns: [{ type: Input, args: ['preview-headers',] }],
    dlgTitle: [{ type: Input }],
    onPreviewBtnClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ShowPreviewDirective.prototype.treeIns;
    /** @type {?} */
    ShowPreviewDirective.prototype.dlgTitle;
    /**
     * @type {?}
     * @private
     */
    ShowPreviewDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowPreviewDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    ShowPreviewDirective.prototype.modalSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1wcmV2aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvbXVsdGktaGVhZGVycy9wcmV2aWV3L3Nob3ctcHJldmlldy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBS2pGLE1BQU0sT0FBTyxvQkFBb0I7Ozs7OztJQUc3QixZQUFvQixFQUFjLEVBQVUsR0FBNkIsRUFBVSxRQUF3QjtRQUF2RixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFnQjtRQURsRyxhQUFRLEdBQUcsTUFBTSxDQUFBO0lBQ29GLENBQUM7Ozs7O0lBRy9HLGlCQUFpQixDQUFDLE1BQU07O2NBQ2QsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFO1lBQzlELEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNwQixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHO1lBQ1gsYUFBYSxFQUFFLElBQUk7WUFDbkIsU0FBUyxFQUFFLElBQUk7WUFDZixZQUFZLEVBQUU7Z0JBQ1YsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRTthQUM3RDtZQUNELFdBQVcsRUFBRSxLQUFLO1NBQ3JCLENBQUM7SUFDTixDQUFDOzs7WUFyQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7YUFDaEM7Ozs7WUFQbUIsVUFBVTtZQUF1Qix3QkFBd0I7WUFFcEUsY0FBYzs7O3NCQU9sQixLQUFLLFNBQUMsaUJBQWlCO3VCQUN2QixLQUFLO2dDQUdMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFKakMsdUNBQXVEOztJQUN2RCx3Q0FBMEI7Ozs7O0lBQ2Qsa0NBQXNCOzs7OztJQUFFLG1DQUFxQzs7Ozs7SUFBRSx3Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0TGlzdGVuZXIsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbHVtblRyZWVDb21wb25lbnQgfSBmcm9tIFwiLi4vY29sdW1uLXRyZWUuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvdWktbW9kYWxcIjtcclxuaW1wb3J0IHsgUHJldmlld011bHRpSGVhZGVyc0NvbXBvbmVudCB9IGZyb20gXCIuL3ByZXZpZXctbXVsdGktaGVhZGVycy5jb21wb25lbnRcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcHJldmlldy1oZWFkZXJzXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNob3dQcmV2aWV3RGlyZWN0aXZlIHtcclxuICAgIEBJbnB1dCgncHJldmlldy1oZWFkZXJzJykgdHJlZUluczogQ29sdW1uVHJlZUNvbXBvbmVudDtcclxuICAgIEBJbnB1dCgpIGRsZ1RpdGxlID0gJ+aViOaenOmihOiniCdcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgbW9kYWxTZXI6IEJzTW9kYWxTZXJ2aWNlKSB7fVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIG9uUHJldmlld0J0bkNsaWNrKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlci5zaG93KFByZXZpZXdNdWx0aUhlYWRlcnNDb21wb25lbnQsIHtcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuZGxnVGl0bGUsXHJcbiAgICAgICAgICAgIHdpZHRoOiA2MDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogMzAwLFxyXG4gICAgICAgICAgICBzaG93TWF4QnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNpemFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgcHJldmlld0dyb3VwQ29sdW1uczogdGhpcy50cmVlSW5zLmdldFByZXZpZXdHcm91cENvbHVtbnMoKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaG93QnV0dG9uczogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==