/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, ChangeDetectorRef, ElementRef, ViewChild, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { NgForm } from '@angular/forms';
import { DatagridSettingsComponent } from '../datagrid-settings.component';
export class ColumnGroupSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.fields = [];
        this.formatColumns = [];
        this.groupFields = [];
        this.expandGroupRows = true;
        this.enabelGroupFooter = false;
        this.groupFieldsChange = new EventEmitter();
        this.formatColumnsChange = new EventEmitter();
        this.expandGroupRowsChange = new EventEmitter();
        // 分组列
        this.groupColumns = [];
        // 所有允许分组列
        this.allowGroupColumns = [];
        this.activeCalculationCol = null;
        this.showSelectColumnsPanel = false;
        this.summaryItems = [];
        this.summaryItems2 = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        //this.formatColumns = getDataFieldsForMultiHeaders(this.columns);
        this.setGroupColumns();
        this.registerEventHandle();
        this.initCalculationColumns();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!this.colForm.pristine) {
                    this.formatColumnsChange.emit(this.formatColumns);
                }
            }));
        }
        this.formatColumns.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.checkColumnOptions(n);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {
            this.formatColumns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.checkColumnOptions(n);
            }));
            this.setGroupColumns();
            this.initCalculationColumns();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCalculationColumns() {
        if (this.formatColumns) {
            this.activeCalculationCol = this.formatColumns[0];
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerEventHandle() {
        this.groupingSettingEl.nativeElement.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target !== this.selectcolumnspanel.nativeElement) {
                this.showSelectColumnsPanel = false;
            }
        }), false);
    }
    /**
     * @private
     * @return {?}
     */
    setGroupColumns() {
        if (this.groupFields && this.groupFields.length) {
            /** @type {?} */
            const cols = this.formatColumns;
            this.groupColumns = this.groupFields.map((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                /** @type {?} */
                const col = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.field === f));
                return col;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.groupFieldsChange.emit(this.groupFields);
        }
        else {
            this.groupColumns = [];
        }
        this.onGroupFieldsChange();
    }
    /**
     * @private
     * @return {?}
     */
    getAllowGroupingColumns() {
        /** @type {?} */
        const cols = this.formatColumns;
        return cols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (n.field.indexOf('farris-datagrid-column_') > -1) {
                return false;
            }
            return n.allowGrouping || n.allowGrouping === undefined;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    onGroupFieldsChange() {
        this.groupFieldsChange.emit(this.groupFields);
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    checkColumnOptions(col) {
        if (col) {
            if (col.groupFooter === undefined) {
                col.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                col.groupFooter.options = col.groupFooter.options || { calculationType: -1 };
                if (col.groupFooter.options.calculationType === undefined) {
                    col.groupFooter.options.calculationType = -1;
                }
            }
            // if (this.activeField.footer === undefined) {
            //     this.activeField.footer =  { options: {calculationType: -1} };
            // } else {
            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};
            //     if (this.activeField.footer.options.calculationType === undefined) {
            //         this.activeField.footer.options.calculationType = -1;
            //     }
            // }
        }
    }
    /**
     * 显示或隐藏字段选取面板
     * @param {?} $event
     * @return {?}
     */
    toggleGroupingColumnPanel($event) {
        $event.stopPropagation();
        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;
        this.allowGroupColumns = this.getAllowGroupingColumns();
    }
    /**
     * 添加分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    addGroupColumn($event, col) {
        $event.stopPropagation();
        if (this.groupFields.indexOf(col.field) === -1) {
            this.groupColumns = [...this.groupColumns, col];
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.onGroupFieldsChange();
            this.showSelectColumnsPanel = false;
        }
    }
    /**
     * 移除分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onRemoveGroupingField($event, col) {
        $event.stopPropagation();
        this.groupFields = this.groupFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== col.field));
        this.setGroupColumns();
    }
    /**
     * 拖动分组字段进行排序
     * @param {?} $event
     * @return {?}
     */
    onGroupingFieldDropped($event) {
        const { removedIndex, addedIndex } = $event;
        /** @type {?} */
        const removedItem = this.groupFields.splice(removedIndex, 1);
        this.groupFields.splice(addedIndex, 0, ...removedItem);
        this.setGroupColumns();
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onFieldClick($event, col) {
        this.activeCalculationCol = col;
    }
}
ColumnGroupSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-group-setting',
                template: "<div #groupingSetting class=\"d-flex flex-column flex-fill column-group-setting\">\r\n\r\n    <div region=\"north\" class=\"north d-flex flex-column group-fields\" style=\"height: 78px; \">\r\n        <div class=\"title d-flex flex-row\" style=\"justify-content: space-between;\">\r\n            <div>{{'datagrid.settings.grouppingField' | locale }}\r\n                <span class=\"text-warning\"> ({{'datagrid.settings.moreGrouppingFieldWarningMessage' | locale }})</span>\r\n            </div>\r\n            <div *ngIf=\"groupColumns && groupColumns.length\">\r\n                {{'datagrid-settings.groupRowStatus.label' | locale}}\uFF1A  <farris-switch style=\"display: inline-block;\"\r\n                [square]=\"false\"\r\n                [checked]=\"true\"\r\n                [(ngModel)]=\"expandGroupRows\"\r\n                [checkedLabel]=\"'datagrid-settings.groupRowStatus.expand' | locale\" [uncheckedLabel]=\"'datagrid-settings.groupRowStatus.collapse' | locale\" \r\n                (valueChange)=\"expandGroupRowsChange.emit(!!$event)\"\r\n                ></farris-switch>\r\n            </div>\r\n        </div>\r\n        <div #groupfieldcontainer class=\"flex-fill p-2 all-fields\">\r\n            <ul class=\"list-group\" style=\"display: inline-block;\"  column-group-drag (drop)=\"onGroupingFieldDropped($event)\">\r\n                <li class=\"list-group-item list-group-item-action btn btn-light smooth-dnd-draggable-wrapper group-field\"\r\n                *ngFor=\"let item of groupColumns\">\r\n                    {{ item.title }}\r\n                    <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" title=\"{{'datagrid.settings.removeGrouppingFieldTip' | locale }}\" (click)=\"onRemoveGroupingField($event, item)\"></span>\r\n                </li>\r\n\r\n                <li class=\"list-group-item list-group-item-action btn btn-light btn-add-groupfield\" title=\"{{'datagrid.settings.addGrouppingFieldTip' | locale }}\"\r\n                    *ngIf=\"!groupFields || groupFields.length < 3\" (click)=\"toggleGroupingColumnPanel($event)\" style=\"border-radius: 20px!important;\">\r\n                   <span class=\"f-icon f-icon-add\" style=\"font-size: 24px;\"></span>\r\n                </li>\r\n            </ul>\r\n            <div #selectcolumnspanel class=\"group-field-panel\" [style.display]=\"showSelectColumnsPanel? '': 'none'\"\r\n            [style.width.px]=\"groupfieldcontainer.offsetWidth - 16\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item list-group-item-action btn btn-light\" *ngFor=\"let item of allowGroupColumns\"\r\n                    (click)=\"addGroupColumn($event, item)\" [style.display]=\"groupFields?.indexOf(item.field) > -1 ? 'none': ''\">\r\n                        {{ item.title }}\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div region=\"center\" class=\"center  d-flex flex-column flex-fill\" style=\"overflow:hidden;\" *ngIf=\"enabelGroupFooter\">\r\n        <div class=\"group-sum-fields\">\r\n            {{'datagrid.settings.grouppingSummary' | locale}}\r\n        </div>\r\n        <div class=\"flex-fill p-2\" style=\" background-color: #fff; overflow: auto;\">\r\n            <div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n                <div region=\"west\" class=\"west d-flex flex-column\" style=\"width: 360px; min-width:260px;overflow: hidden;\">\r\n                    <div style=\"overflow: auto;padding-right: 5px;\" class=\"flex-fill\">\r\n                        <ul class=\"list-group  list-group-flush\">\r\n                            <li class=\"list-group-item list-group-item-action format-setting-column\"\r\n                            *ngFor=\"let item of formatColumns\"\r\n                            [class.active]=\"activeCalculationCol && activeCalculationCol.field === item.field\"\r\n                            (click)=\"onFieldClick($event, item)\"\r\n                             >\r\n                                {{ item.title }}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                 \r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px; border-right: 0px\">\r\n                    <form #groupSumform=\"ngForm\">\r\n                        <div class=\"farris-group-wrap\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryType' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                   \r\n                                    <farris-combo-list name=\"groupFooter.options.calculationType\" \r\n                                    [data]=\" activeCalculationCol?.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                                    [editable]=\"false\"\r\n                                    [(ngModel)]=\"activeCalculationCol?.groupFooter.options.calculationType\"\r\n                                    [idField]=\"'value'\"\r\n                                    [textField]=\"'title'\"\r\n                                    [enableClear]=\"false\"></farris-combo-list>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"farris-group-wrap\" *ngIf=\"activeCalculationCol?.groupFooter.options.calculationType == -1\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryText' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                    <input type=\"input\" name=\"groupFooter.options.text\" class=\"form-control\" [(ngModel)]=\"activeCalculationCol?.groupFooter.options.text\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ColumnGroupSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnGroupSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    formatColumns: [{ type: Input }],
    groupFields: [{ type: Input }],
    expandGroupRows: [{ type: Input }],
    enabelGroupFooter: [{ type: Input }],
    groupFieldsChange: [{ type: Output }],
    formatColumnsChange: [{ type: Output }],
    expandGroupRowsChange: [{ type: Output }],
    groupingSettingEl: [{ type: ViewChild, args: ['groupingSetting',] }],
    selectcolumnspanel: [{ type: ViewChild, args: ['selectcolumnspanel',] }],
    colForm: [{ type: ViewChild, args: ['groupSumform',] }]
};
if (false) {
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.columns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.fields;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.formatColumns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupFields;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.expandGroupRows;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.enabelGroupFooter;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupFieldsChange;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.formatColumnsChange;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.expandGroupRowsChange;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupingSettingEl;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.selectcolumnspanel;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.colForm;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupColumns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.allowGroupColumns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.activeCalculationCol;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.showSelectColumnsPanel;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.summaryItems;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.summaryItems2;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupSettingComponent.prototype.injector;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.gridSettingComponentRef;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupSettingComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,