/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { LocaleService } from '@farris/ui-locale';
import { getMultilingualValue } from '../getValueWithLocaleId';
export class SchemeListComponent {
    /**
     * @param {?} cd
     * @param {?} localeSer
     * @param {?} injector
     */
    constructor(cd, localeSer, injector) {
        this.cd = cd;
        this.localeSer = localeSer;
        this.injector = injector;
        this.items = [];
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.removeItem = true;
        this.currentSchemeId = '';
        this.columns = [];
        this.currentUserId = '';
        this.changes = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const colName = this.localeSer.getValue('datagrid-scheme.columns.name') || '名称';
        /** @type {?} */
        const colType = this.localeSer.getValue('datagrid-scheme.columns.type') || '属性';
        /** @type {?} */
        const colDefault = this.localeSer.getValue('datagrid-scheme.columns.isDefault') || '默认';
        /** @type {?} */
        const colCreator = this.localeSer.getValue('datagrid-scheme.columns.username') || '创建人';
        /** @type {?} */
        const colMgr = this.localeSer.getValue('datagrid-scheme.columns.mgr') || '管理';
        /** @type {?} */
        const publicTxt = this.localeSer.getValue('datagrid-scheme.isPublic') || '公共';
        /** @type {?} */
        const privateTxt = this.localeSer.getValue('datagrid-scheme.isPrivate') || '个人';
        /** @type {?} */
        const orgTxt = this.localeSer.getValue('datagrid-scheme.isOrg') || '组织';
        this.columns = [
            // {field: 'name', title: '名称', width: 150, template: this.schemeName},
            { field: 'name', title: colName, width: 150, formatter: (/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => {
                    return getMultilingualValue(JSON.parse(v), this.localeSer.localeId);
                }) },
            { field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @return {?}
                 */
                (v, d) => {
                    switch (v) {
                        case 'public':
                            return '<span class="scheme-manager__label px-1 public">' + publicTxt + '</span>';
                        case 'org':
                            return '<span class="scheme-manager__label px-1 org">' + orgTxt + '</span>';
                        case 'private':
                        default:
                            return '<span class="scheme-manager__label px-1 private">' + privateTxt + '</span>';
                    }
                }) },
            { field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },
            { field: 'userName', title: colCreator, width: 80 },
            { title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center', }
        ];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClose($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitClick($event) {
        this.submitModal.emit(this.changes);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    setDefault($event, ctx) {
        /** @type {?} */
        const r = $event == '1';
        // $event.stopPropagation();
        this.items.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            n.isDefault = false;
            if (n.id === ctx.rowData.id && r) {
                n.isDefault = r;
            }
        }));
        this.items = [...this.items];
        /** @type {?} */
        const defaultItem = this.items.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.isDefault));
        if (defaultItem) {
            this.changes = this.changes || {};
            this.changes.defaultId = defaultItem.id;
        }
        // this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    onSchemeDel($event, ctx) {
        if ((this.currentUserId === ctx.rowData["userId"] && ctx.rowData['type'] == 'private') || this.removeItem) {
            $event.stopPropagation();
            /** @type {?} */
            const id = ctx.rowData.id;
            this.items = this.items.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id !== id));
            this.changes = this.changes || {};
            this.changes.deletedIds = [...(this.changes.deletedIds || []), id];
            if (id === this.changes.defaultId) {
                this.changes.defaultId = '';
                delete this.changes.defaultId;
            }
        }
    }
}
SchemeListComponent.decorators = [
    { type: Component, args: [{
                selector: 'scheme-list',
                template: "\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid-scheme.schemeList' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onClose($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill mx-3 mt-1\" >\r\n        <farris-datagrid #dg\r\n            [columns]=\"columns\"\r\n            [data]=\"items\"\r\n            [fit]=\"true\"\r\n            [fitColumns]=\"true\"\r\n            [pagination]=\"false\"\r\n            [editable]=\"false\">\r\n        </farris-datagrid>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\" [disabled]=\"!(items && items.length) && !changes\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #schemeName let-ctx>\r\n    <div class=\"input-group\">\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"ctx.rowData['name']\">\r\n    </div>\r\n</ng-template>\r\n<ng-template #schemeIsDefault let-ctx>\r\n    <div class=\"f-datagrid-cell-formgroup farris-group-auto f-datagrid_scheme-switch\" [style.opacity]=\"ctx.rowData['type'] !== 'private' ? 0.6: 1\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\r\n        <farris-switch [(ngModel)]=\"ctx.rowData['isDefault']\" trueValue=\"1\" falseValue=\"0\"\r\n        (valueChange)=\"setDefault($event, ctx)\"  [disabled]=\"ctx.rowData['type'] !== 'private' || ctx.rowData['isDefault']\"></farris-switch>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template let-ctx #btnDel>\r\n    <a href=\"javascript:void(0)\" (click)=\"onSchemeDel($event, ctx)\" title=\"{{'datagrid-scheme.delete' | locale}}\" \r\n    *ngIf=\"(removeItem || (ctx.rowData['userId'] === currentUserId && ctx.rowData['type']=='private')) && currentSchemeId !== ctx.rowData['id']\">\r\n        <span class=\"f-icon f-icon-yxs_delete\"></span>\r\n    </a>\r\n</ng-template>"
            }] }
];
/** @nocollapse */
SchemeListComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: LocaleService },
    { type: Injector }
];
SchemeListComponent.propDecorators = {
    items: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    removeItem: [{ type: Input }],
    currentSchemeId: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }],
    schemeName: [{ type: ViewChild, args: ['schemeName',] }],
    schemeIsDefault: [{ type: ViewChild, args: ['schemeIsDefault',] }],
    btnDel: [{ type: ViewChild, args: ['btnDel',] }],
    dg: [{ type: ViewChild, args: ['dg',] }]
};
if (false) {
    /** @type {?} */
    SchemeListComponent.prototype.items;
    /** @type {?} */
    SchemeListComponent.prototype.closeModal;
    /** @type {?} */
    SchemeListComponent.prototype.submitModal;
    /** @type {?} */
    SchemeListComponent.prototype.removeItem;
    /** @type {?} */
    SchemeListComponent.prototype.currentSchemeId;
    /** @type {?} */
    SchemeListComponent.prototype.header;
    /** @type {?} */
    SchemeListComponent.prototype.schemeName;
    /** @type {?} */
    SchemeListComponent.prototype.schemeIsDefault;
    /** @type {?} */
    SchemeListComponent.prototype.btnDel;
    /** @type {?} */
    SchemeListComponent.prototype.dg;
    /** @type {?} */
    SchemeListComponent.prototype.columns;
    /** @type {?} */
    SchemeListComponent.prototype.currentUserId;
    /** @type {?} */
    SchemeListComponent.prototype.changes;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,