/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';
import { MultiSelectComponent } from '@farris/ui-multi-select';
export class DatagridSortSettingComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this.selectedIds = [];
        this.treeData = [];
        this.sortInfoChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    setFieldSortOrder($event, data, order) {
        $event.stopPropagation();
        data.sortable = true;
        data.order = order;
        if (!order) {
            this.ms.moveToLeft(data);
        }
        this.cd.detectChanges();
        this.onSelectionsChange(null);
        return false;
    }
    /**
     * @return {?}
     */
    getSortInfo() {
        if (this.ms.selections) {
            /** @type {?} */
            const names = [];
            /** @type {?} */
            const orders = [];
            this.ms.selections.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                col.order = col.order || 'asc';
                names.push(col.field);
                orders.push(col.order);
            }));
            return { sortName: names, sortOrder: orders };
        }
        return '';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectionsChange($event) {
        /** @type {?} */
        const si = this.getSortInfo();
        this.sortInfoChange.emit(si);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBeforeMove($event) {
        /** @type {?} */
        const items = (/** @type {?} */ ($event.items));
        if ($event.target.indexOf('rightAll') > -1) {
            for (const id in items) {
                if ($event.items[id]) {
                    $event.items[id].order = 'asc';
                }
            }
        }
        else {
            if ($event.target === 'right') {
                for (const id in items) {
                    if ($event.items[id]) {
                        $event.items[id].order = 'asc';
                    }
                }
            }
        }
    }
}
DatagridSortSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'sort-setting',
                template: "<div style=\"padding: 10px;height: 100%;\">\r\n<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'List'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" [rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (dataChange)=\"onSelectionsChange($event)\" (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\" >\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n            <!-- <span class=\"f-icon f-icon-sort-asc-sm sort-label\" title=\"\u5347\u5E8F\" *ngIf=\"data.sortable && data.order === 'asc'\"></span>\r\n            <span class=\"f-icon f-icon-sort-desc-sm  sort-label\" title=\"\u964D\u5E8F\" *ngIf=\"data.sortable && data.order === 'desc'\"></span> -->\r\n            <div class=\"d-flex\">\r\n                <div style=\"width: 120px;white-space: nowrap;min-width: 60px\">\r\n                    {{ data[textField] }} \r\n                </div>\r\n                <div class=\"farris-input-wrap  farris-checkradio-hor flex-fill\" style=\"justify-content: right;flex-wrap:nowrap\">\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'asc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\" data.order && data.order !== 'asc'\" [class.f-icon-check-circle]=\"!data.order || data.order === 'asc'\"></span>\r\n                        {{'datagrid.settings.asc'|locale}}\r\n                    </button>\r\n                    \r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'desc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\"data.order !== 'desc'\" [class.f-icon-check-circle]=\"data.order === 'desc'\"></span>\r\n                        {{'datagrid.settings.desc'|locale}}\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext sort-btns\" style=\"font-size: 12px;\" style=\"margin-right: 0;\" (click)=\"setFieldSortOrder($event, data, '')\" title=\"{{'datagrid.settings.cancelSort'|locale}}\">\r\n                        <span class=\"f-icon  f-icon-unsort\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>\r\n</div>"
            }] }
];
/** @nocollapse */
DatagridSortSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
DatagridSortSettingComponent.propDecorators = {
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    selectedIds: [{ type: Input }],
    treeData: [{ type: Input }],
    ms: [{ type: ViewChild, args: ['ms',] }],
    sortInfoChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DatagridSortSettingComponent.prototype.idField;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.valueField;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.textField;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.selectedIds;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.treeData;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.ms;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.sortInfoChange;
    /**
     * @type {?}
     * @private
     */
    DatagridSortSettingComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSortSettingComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFVLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTS9ELE1BQU0sT0FBTyw0QkFBNEI7Ozs7O0lBWXJDLFlBQW9CLFFBQWtCLEVBQVUsRUFBcUI7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBVjVELFlBQU8sR0FBRyxPQUFPLENBQUM7UUFDbEIsZUFBVSxHQUFHLE9BQU8sQ0FBQztRQUNyQixjQUFTLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWpCLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFHYixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFMEIsQ0FBQzs7OztJQUd6RSxRQUFRLEtBQUksQ0FBQzs7Ozs7OztJQUViLGlCQUFpQixDQUFDLE1BQWtCLEVBQUUsSUFBUyxFQUFFLEtBQWE7UUFDMUQsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUVELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTs7a0JBQ2QsS0FBSyxHQUFHLEVBQUU7O2tCQUNWLE1BQU0sR0FBRyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7WUFBQyxHQUFHLENBQUMsRUFBRTtnQkFDN0IsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQztnQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUMsRUFBQyxDQUFDO1lBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLE1BQU07O2NBQ2YsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsTUFBTTs7Y0FDVCxLQUFLLEdBQVEsbUJBQUEsTUFBTSxDQUFDLEtBQUssRUFBTztRQUN0QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3hDLEtBQUssTUFBTSxFQUFFLElBQUksS0FBSyxFQUFFO2dCQUNwQixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7b0JBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztpQkFDbEM7YUFDSjtTQUNKO2FBQU07WUFDSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO2dCQUMzQixLQUFLLE1BQU0sRUFBRSxJQUFJLEtBQUssRUFBRTtvQkFDcEIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFO3dCQUNsQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7cUJBQ2xDO2lCQUNKO2FBQ0o7U0FDSjtJQUNMLENBQUM7OztZQXhFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLGl1RkFBcUQ7YUFDeEQ7Ozs7WUFONkMsUUFBUTtZQUF3QixpQkFBaUI7OztzQkFTMUYsS0FBSzt5QkFDTCxLQUFLO3dCQUNMLEtBQUs7MEJBQ0wsS0FBSzt1QkFFTCxLQUFLO2lCQUNMLFNBQVMsU0FBQyxJQUFJOzZCQUVkLE1BQU07Ozs7SUFSUCwrQ0FBMkI7O0lBQzNCLGtEQUE4Qjs7SUFDOUIsaURBQTZCOztJQUM3QixtREFBMEI7O0lBRTFCLGdEQUF1Qjs7SUFDdkIsMENBQTBDOztJQUUxQyxzREFBOEM7Ozs7O0lBRWxDLGdEQUEwQjs7Ozs7SUFBRSwwQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCwgSW5qZWN0b3IsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNdWx0aVNlbGVjdENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbXVsdGktc2VsZWN0JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzb3J0LXNldHRpbmcnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RhdGFncmlkLXNvcnQtc2V0dGluZy5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkU29ydFNldHRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBJbnB1dCgpIGlkRmllbGQgPSAnZmllbGQnO1xyXG4gICAgQElucHV0KCkgdmFsdWVGaWVsZCA9ICdmaWVsZCc7XHJcbiAgICBASW5wdXQoKSB0ZXh0RmllbGQgPSAndGl0bGUnO1xyXG4gICAgQElucHV0KCkgc2VsZWN0ZWRJZHMgPSBbXTtcclxuXHJcbiAgICBASW5wdXQoKSB0cmVlRGF0YSA9IFtdO1xyXG4gICAgQFZpZXdDaGlsZCgnbXMnKSBtczogTXVsdGlTZWxlY3RDb21wb25lbnQ7XHJcblxyXG4gICAgQE91dHB1dCgpIHNvcnRJbmZvQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cclxuXHJcblxyXG4gICAgbmdPbkluaXQoKSB7fVxyXG5cclxuICAgIHNldEZpZWxkU29ydE9yZGVyKCRldmVudDogTW91c2VFdmVudCwgZGF0YTogYW55LCBvcmRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGRhdGEuc29ydGFibGUgPSB0cnVlO1xyXG4gICAgICAgIGRhdGEub3JkZXIgPSBvcmRlcjtcclxuXHJcbiAgICAgICAgaWYgKCFvcmRlcikge1xyXG4gICAgICAgICAgICB0aGlzLm1zLm1vdmVUb0xlZnQoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uc0NoYW5nZShudWxsKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U29ydEluZm8oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXMuc2VsZWN0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBvcmRlcnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5tcy5zZWxlY3Rpb25zLmZvckVhY2goY29sID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbC5vcmRlciA9IGNvbC5vcmRlciB8fCAnYXNjJztcclxuICAgICAgICAgICAgICAgIG5hbWVzLnB1c2goY29sLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgIG9yZGVycy5wdXNoKGNvbC5vcmRlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHsgc29ydE5hbWU6IG5hbWVzLCBzb3J0T3JkZXI6IG9yZGVycyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWxlY3Rpb25zQ2hhbmdlKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHNpID0gdGhpcy5nZXRTb3J0SW5mbygpO1xyXG4gICAgICAgIHRoaXMuc29ydEluZm9DaGFuZ2UuZW1pdChzaSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25CZWZvcmVNb3ZlKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zOiBhbnkgPSAkZXZlbnQuaXRlbXMgYXMgYW55O1xyXG4gICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmluZGV4T2YoJ3JpZ2h0QWxsJykgPiAtMSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50Lml0ZW1zW2lkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5pdGVtc1tpZF0ub3JkZXIgPSAnYXNjJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0ID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC5pdGVtc1tpZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50Lml0ZW1zW2lkXS5vcmRlciA9ICdhc2MnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=