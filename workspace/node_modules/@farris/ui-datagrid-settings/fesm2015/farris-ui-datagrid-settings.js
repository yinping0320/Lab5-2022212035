import { switchMap, map, filter, debounceTime, bufferCount, first, repeat, buffer } from 'rxjs/operators';
import { of, Subject, timer, forkJoin, fromEvent, race } from 'rxjs';
import { Component, Input, ViewChild, EventEmitter, ViewEncapsulation, Injector, NgZone, ChangeDetectorRef, Renderer2, ElementRef, Output, HostBinding, HostListener, InjectionToken, ComponentFactoryResolver, ApplicationRef, Injectable, Directive, NgModule } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { FormsModule } from '@angular/forms';
import { TreeTableModule } from '@farris/ui-treetable';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { GRID_SETTINGS_SERVICE, DatagridModule } from '@farris/ui-datagrid';
import { flatten, cloneDeep } from 'lodash-es';
import { appendPerfixForUri, IdService, DebugService, CommonUtils, FarrisCommonModule } from '@farris/ui-common';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { CommonModule } from '@angular/common';
import { ComboListModule } from '@farris/ui-combo-list';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { OrganizationSelectorModule } from '@farris/ui-organization-selector';
import { smoothDnD, dropHandlers } from '@farris/smooth-dnd';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NewHeaderFormComponent {
    constructor() {
        this.label = '表头名称';
        this.placeholder = "输入表头名称";
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
NewHeaderFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'group-header-form',
                template: `
    <div class="d-flex flex-row" style="align-items: center;height: 100%;">
        <span style="width: 90px;text-align: right;">{{label}}</span>
        <input #txt placeholder="{{placeholder}}" type="text" [(ngModel)]="title" class="form-control ml-2" style="width: 210px">
    </div>
    `
            }] }
];
/** @nocollapse */
NewHeaderFormComponent.ctorParameters = () => [];
NewHeaderFormComponent.propDecorators = {
    label: [{ type: Input }],
    title: [{ type: Input }],
    placeholder: [{ type: Input }],
    input: [{ type: ViewChild, args: ['txt',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SetColumnsComponent {
    constructor() {
        this.data = [];
        this.checkedItems = [];
        this.selectedIds = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.selectedIds = (this.checkedItems || []).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id));
        if (this.data) {
            this.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (!item.id) {
                    item.id = item.field;
                }
            }));
        }
    }
}
SetColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'set-columns',
                template: "<multi-select [dataSource]=\"data\"\r\n[idField]=\"'id'\" [valueField]=\"'field'\" [textField]=\"'title'\" [displayType]=\"'List'\"\r\n[enableTargetSort]=\"true\" [showCheckbox]=\"true\" [enableMoveMore]=\"true\" [(selectedId)]=\"selectedIds\">\r\n</multi-select>"
            }] }
];
/** @nocollapse */
SetColumnsComponent.ctorParameters = () => [];
SetColumnsComponent.propDecorators = {
    data: [{ type: Input }],
    checkedItems: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} c
 * @return {?}
 */
function _setColumnId(c) {
    c.id = c.id || c.field;
    if (c.colspan && c.colspan > 1) {
        c.groupHeader = true;
        c.id = 'groupHeader_' + c.id;
    }
}
/**
 * @param {?} node
 * @param {?} cols
 * @return {?}
 */
function _columnsToTreeNodes2(node, cols) {
    if (node.data.colspan) {
        if (cols[node.level + 1] && cols[node.level + 1].length) {
            /** @type {?} */
            var i = 0;
            do {
                /** @type {?} */
                let col = cols[node.level + 1].splice(0, 1)[0];
                i += col.colspan || 1;
                _setColumnId(col);
                /** @type {?} */
                const child = { data: col, children: [], level: node.level + 1, expanded: true, visible: true };
                node.children.push(child);
                if (col.colspan && col.colspan > 1) {
                    _columnsToTreeNodes2(child, cols);
                }
            } while (i < node.data.colspan && cols[node.level + 1].length);
        }
    }
}
/**
 * 将多表头列信息，转换为树结构
 * @param {?} cols
 * @return {?}
 */
function columnsToTreeNodes(cols) {
    /** @type {?} */
    var nodes = [];
    cols[0].filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n.field !== '_datagrid-setting-control_')).forEach((/**
     * @param {?} c
     * @return {?}
     */
    c => {
        _setColumnId(c);
        /** @type {?} */
        var node = { data: c, children: [], level: 0, expanded: true, visible: true };
        nodes.push(node);
    }));
    nodes.forEach((/**
     * @param {?} n
     * @return {?}
     */
    n => {
        _columnsToTreeNodes2(n, cols);
    }));
    return nodes;
}
// 多表头列设置恢复默认
/** @type {?} */
const reset2DefaultForMultiHeaders = (/**
 * @param {?} gridInstance
 * @return {?}
 */
(gridInstance) => {
    /** @type {?} */
    const options = gridInstance.dfs['_state'].initialOptions;
    /** @type {?} */
    const settings = {
        viewColumns: [],
        columnFormat: []
    };
    if (options.sort) {
        /** @type {?} */
        const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
        /** @type {?} */
        const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
        settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
    }
    else {
        settings.sortInfo = {};
    }
    settings.groupField = options.groupField ? options.groupField.split(',') : [];
    settings.expandGroupRows = !!options.expandGroupRows;
    settings.multiHeaders = {
        treeData: null,
        viewCols: []
    };
    return {
        settings,
        multiHeaderOptions: {
            columns: options.groupHeaderFields,
            treeData: null
        }
    };
})
/** 为新的展示列合并原列中的设置，如 格式化，单元格样式、模板 */
;
/**
 * 为新的展示列合并原列中的设置，如 格式化，单元格样式、模板
 * @param {?} viewCols
 * @param {?} gridInitOptions
 * @return {?}
 */
function mergetColumnOptions(viewCols, gridInitOptions) {
    if (viewCols && gridInitOptions) {
        /** @type {?} */
        const dataFields = flatten(gridInitOptions['designerColumns']);
        /** @type {?} */
        const _cols = cloneDeep(viewCols).map((/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            return cols.map((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (!col.field || col.field.indexOf('farris-datagrid-column_') > -1) {
                    col.filter = false;
                }
                if (!col.colspan || col.colspan === 1) { // 数据字段
                    // 数据字段
                    /** @type {?} */
                    const old = dataFields.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === col.field || n.field === col.id));
                    if (old) {
                        /** @type {?} */
                        const _col = Object.assign({}, old, col);
                        if (!col.colspan) {
                            delete _col.colspan;
                        }
                        if (!_col.rowspan) {
                            delete _col.rowspan;
                        }
                        return _col;
                    }
                }
                return col;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
        return _cols;
    }
}
/**
 * @param {?} gridInstance
 * @param {?} newColumns
 * @return {?}
 */
function refreshGridColumns(gridInstance, newColumns) {
    if (!gridInstance) {
        return;
    }
    /** @type {?} */
    const gridInitOptions = gridInstance.dfs['_state'].initialOptions;
    if (newColumns && gridInitOptions) {
        gridInstance.columns = mergetColumnOptions(newColumns, gridInitOptions);
    }
}
/**
 * 将排序信息合并到列上
 * @param {?} newColumns
 * @param {?} sortInfo
 * @return {?}
 */
function mergeSortInfo(newColumns, sortInfo) {
    if (sortInfo && Object.keys(sortInfo).length) {
        const { sortName, sortOrder } = sortInfo;
        if (sortName && sortName.length) {
            newColumns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            (cols) => {
                cols.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    /** @type {?} */
                    const i = sortName.indexOf(col.field);
                    if (i > -1) {
                        col.sortable = true;
                        col.order = sortOrder[i] || 'asc';
                    }
                    else {
                        col.order = '';
                    }
                }));
            }));
        }
    }
}
/**
 * @param {?} multiHeaderColumns
 * @return {?}
 */
function multiHeadersHasDataFields(multiHeaderColumns) {
    if (multiHeaderColumns && multiHeaderColumns.length) {
        return flatten(multiHeaderColumns).filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.field && (!n.colspan || n.colspan === 1))).length;
    }
    return false;
}
/**
 * @param {?} groupHeaderCols
 * @return {?}
 */
function getDataFieldsForMultiHeaders(groupHeaderCols) {
    return flatten(groupHeaderCols).filter((/**
     * @param {?} n
     * @return {?}
     */
    (n) => n.field && (!n.colspan || n.colspan === 1)));
}
/**
 * @param {?} viewCols
 * @param {?} groupFields
 * @return {?}
 */
function cleanGroupFields(viewCols, groupFields) {
    /** @type {?} */
    const cols = getDataFieldsForMultiHeaders(viewCols);
    /** @type {?} */
    const groupColumns = groupFields.map((/**
     * @param {?} f
     * @return {?}
     */
    f => {
        /** @type {?} */
        const col = cols.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.field === f));
        return col;
    })).filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n));
    return groupColumns.map((/**
     * @param {?} n
     * @return {?}
     */
    n => n.field));
}
/**
 * @param {?} viewCols
 * @param {?} sortInfo
 * @return {?}
 */
function cleanSortFields(viewCols, sortInfo) {
    /** @type {?} */
    const cols = getDataFieldsForMultiHeaders(viewCols);
    /** @type {?} */
    const sortNames = sortInfo.sortName.map((/**
     * @param {?} f
     * @param {?} i
     * @return {?}
     */
    (f, i) => {
        /** @type {?} */
        const col = cols.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.field === f));
        if (!col) {
            sortInfo.sortOrder.splice(i, 1);
        }
        return col;
    })).filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n));
    return {
        sortName: sortNames.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field)),
        sortOrder: sortInfo.sortOrder
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnTreeComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} cd
     * @param {?} render
     * @param {?} modalService
     * @param {?} el
     * @param {?} notitySer
     */
    constructor(injector, ngzone, cd, render, modalService, el, notitySer) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.cd = cd;
        this.render = render;
        this.modalService = modalService;
        this.el = el;
        this.notitySer = notitySer;
        this.options = {};
        this.inModal = false;
        this.nodeSelected = new EventEmitter();
        this.fields = [];
        this.treecols = [];
        this.treeData = [];
        this.contextMenus = [];
        /**
         * 值 __HOU_XUAN_LIE_ID__
         */
        this.HOU_XUAN_LIE_ID = '__HOU_XUAN_LIE_ID__';
        this.GROUP_HEADER_ICON = 'f-icon f-icon-file-folder-close';
        this.Hou_Xuan_Qu = { id: this.HOU_XUAN_LIE_ID, title: '(候选列)', houxuanquNode: true };
        this.languageRes = {
            title: '多表头',
            preview: '预览效果',
            tips: '在（候选列）中的字段，将不在列表中显示; 点击字段名称，在右侧显示相关操作按钮。',
            contextMenus: {
                new: '新建表头',
                newChild: '新建子级表头',
                setDataField: '分配数据列',
                rename: '重命名',
                top: '置顶',
                up: '上移',
                down: '下移',
                bottom: '置底',
                cancelGroup: '取消分组',
                remove: '在分组内移除'
            },
            candidate: '(候选列)',
            setHeader: '设为表头',
            ok: '确定',
            cancel: '取消',
            required: '请输入表头名称！',
            defaultGroupHeaderName: '分组表头1',
            newHeaderPlaceholder: '请输入名称',
            newHeaderLabel: '表头名称'
        };
        this.localeSer = null;
        /**
         * 移动命令项是否显示
         */
        this.moveMenuItemVisiblily = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                /** @type {?} */
                const rowData = t.node.data;
                if (rowData) {
                    return rowData['id'] != this.HOU_XUAN_LIE_ID;
                }
                return true;
            }
            return true;
        });
        this.isGroupHeader = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                /** @type {?} */
                const rowData = t.node.data;
                if (rowData) {
                    return !!rowData['groupHeader'];
                }
                return true;
            }
            return true;
        });
        this.onBeforeShowContextMenu = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t && t.data.parents.indexOf(this.HOU_XUAN_LIE_ID) > -1) {
                // 待选区中的数据列禁用右键菜单
                return of({ show: false });
            }
            return of({ show: true });
        });
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const groupHeaders = this.dg.dfs['_state'].initialOptions.groupHeaderFields;
        /** @type {?} */
        const allDataFields = flatten(groupHeaders).filter((/**
         * @param {?} col
         * @return {?}
         */
        (col) => !col.colspan || col.colspan == 1));
        this.fields = allDataFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== this.dg.ControlPanelFeild));
        // 树组件列信息
        this.treecols = [
            { field: 'title', title: '名称', template: this.cellTemp }
        ];
        this.languageRes = this.localeSer.getValue('headerGroup');
        this.Hou_Xuan_Qu.title = this.languageRes.candidate;
        this.initTreeData();
        this.initTreenodeContextMenus();
        this.listenTreeTableEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.options && !changes.options.isFirstChange()) {
            this.initTreeData();
            this.tt.clearSelections();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @return {?}
     */
    listenTreeTableEvent() {
        this.tt.removed.subscribe((/**
         * @param {?} rowNode
         * @return {?}
         */
        rowNode => {
            if (rowNode && rowNode.parent) {
                rowNode.parent.leaf = !(rowNode.parent.children && rowNode.parent.children.length);
                if (rowNode.parent.leaf) {
                    rowNode.parent.icon = this.GROUP_HEADER_ICON;
                }
            }
            if (!rowNode.node.data.groupHeader) {
                /** @type {?} */
                const hxl = this.getHouXuanNode();
                if (!rowNode.parent) {
                    this.treeData = this.treeData.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data.id !== rowNode.id));
                }
                this.tt.append(rowNode.node.data, hxl.node);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initTreenodeContextMenus() {
        this.contextMenus = [
            { id: 1, title: this.languageRes.contextMenus.new, icon: 'f-icon f-icon-add',
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    // console.log(t);
                    this.addNewGroup(t.data, false);
                })
            },
            { id: 2, title: this.languageRes.contextMenus.newChild, visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.isGroupHeader(t.data) && t.data.level + 1 < this.dg.maxMultiHeaders - 1;
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.addNewGroup(t.data, true);
                })
            },
            { id: 3, title: this.languageRes.contextMenus.setDataField, visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.isGroupHeader(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.setColumnsForGroupHeader(null, t.data);
                })
            },
            { id: 31, title: this.languageRes.contextMenus.rename, icon: 'f-icon f-icon-edit',
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.resetHeaderName(null, t.data);
                })
            },
            '-',
            {
                id: 4, title: this.languageRes.contextMenus.top, icon: 'f-icon f-icon-roofing',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.moveMenuItemVisiblily(t.data);
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveTop(null, t.data);
                })
            },
            {
                id: 5, title: this.languageRes.contextMenus.up, icon: 'f-icon f-icon-arrow-chevron-up',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.moveMenuItemVisiblily(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveUp(null, t.data);
                })
            },
            {
                id: 6, title: this.languageRes.contextMenus.down, icon: 'f-icon f-icon-arrow-chevron-down',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.moveMenuItemVisiblily(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveDown(null, t.data);
                })
            },
            {
                id: 7, title: this.languageRes.contextMenus.bottom, icon: 'f-icon f-icon-bottomsetting',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => { return this.moveMenuItemVisiblily(t.data); }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.moveBottom(null, t.data);
                })
            },
            '-',
            {
                id: 8, title: this.languageRes.contextMenus.remove, icon: 'f-icon f-icon-minus',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return !t.data.node.data.houxuanquNode && !t.data.node.data.groupHeader;
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.tt.remove(t.data.id);
                })
            },
            {
                id: 9, title: this.languageRes.contextMenus.cancelGroup, icon: 'f-icon f-icon-x',
                visible: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return t.data.node.data.groupHeader;
                }),
                handle: (/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.removeGroup(null, t.data);
                })
            }
        ];
    }
    /**
     * @return {?}
     */
    initTreeData() {
        if (this.options) {
            const { treeData } = this.options;
            if (treeData) {
                this.treeData = treeData;
                return;
            }
        }
        if (this.options.columns && this.options.columns.length > 1) {
            /** @type {?} */
            const _treeData = columnsToTreeNodes(cloneDeep(this.options.columns));
            /** @type {?} */
            const houXuanLie = this.fields.filter((/**
             * @param {?} f
             * @return {?}
             */
            f => !flatten(this.options.columns).find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === f.field)))).map((/**
             * @param {?} a
             * @return {?}
             */
            (a) => {
                return {
                    data: a,
                    children: [],
                    visible: true
                };
            }));
            _treeData.push({
                data: this.Hou_Xuan_Qu,
                children: houXuanLie,
                expanded: true
            });
            this.treeData = _treeData;
        }
        else {
            this.treeData = [{
                    data: { id: 'groupHeader_1', title: this.languageRes.defaultGroupHeaderName, halign: 'left', groupHeader: true },
                    children: this.fields.map((/**
                     * @param {?} n
                     * @param {?} i
                     * @return {?}
                     */
                    (n, i) => {
                        n['index'] = i;
                        n['id'] = n['field'];
                        return {
                            data: n,
                            children: [],
                            visible: true
                        };
                    })),
                    icon: this.GROUP_HEADER_ICON,
                    expanded: true, visible: true
                }, {
                    data: this.Hou_Xuan_Qu,
                    children: [],
                    expanded: true,
                    icon: this.GROUP_HEADER_ICON
                }];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getHouXuanNode() {
        return this.tt.findRowNode(this.HOU_XUAN_LIE_ID);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTreeSelected($event) {
        this.nodeSelected.emit($event);
    }
    /**
     * @private
     * @param {?} okCallback
     * @param {?} dlgTitle
     * @return {?}
     */
    showNewHeaderDialog(okCallback, dlgTitle) {
        /** @type {?} */
        const modalRef = this.modalService.show(NewHeaderFormComponent, {
            title: dlgTitle,
            width: 340,
            height: 190,
            showMaxButton: false,
            resizable: false,
            initialState: {
                title: '',
                placeholder: this.languageRes.newHeaderPlaceholder,
                label: this.languageRes.newHeaderLabel
            },
            buttons: [
                {
                    text: this.languageRes.cancel,
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        modalRef.close();
                    })
                },
                {
                    text: this.languageRes.ok,
                    cls: 'btn btn-primary',
                    handle: okCallback
                }
            ]
        });
        return modalRef;
    }
    /**
     * @private
     * @return {?}
     */
    generateGroupHeaderId() {
        return `groupHeader_${new Date().getTime()}`;
    }
    /**
     * @private
     * @param {?} rn
     * @param {?} title
     * @param {?=} child
     * @return {?}
     */
    createNewGroupHeader(rn, title, child = false) {
        /** @type {?} */
        const ghid = this.generateGroupHeaderId();
        /** @type {?} */
        const data = { id: ghid, title, groupHeader: true, halign: 'left', fixed: 'UNFIXED' };
        /** @type {?} */
        const gh = {
            data,
            children: [],
            expanded: true,
            visible: true,
            icon: this.GROUP_HEADER_ICON,
        };
        if (!child) {
            if (!rn.parent) {
                /** @type {?} */
                const i = this.treeData.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data.id === rn.id)) + 1;
                this.treeData.splice(i, 0, gh);
                this.treeData = this.treeData.slice();
            }
            else {
                gh.data.fixed = rn.parent.data.fixed;
                this.tt.appendChildren([gh], rn.parent);
            }
        }
        else {
            gh.data.fixed = rn.node.data.fixed;
            this.tt.appendChildren([gh], rn.node);
        }
    }
    // 删除分组
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    removeGroup(event, rowNode) {
        if (this.tt.selectedRow && rowNode.id === this.tt.selectedRow.id) {
            this.nodeSelected.emit(null);
        }
        /** @type {?} */
        const childs = this.tt.serializedValue.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.parents.indexOf(rowNode.id) > -1 && !n.node.data.groupHeader)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.node));
        this.treeData = this.treeData.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id !== rowNode.id));
        this.tt.remove(rowNode.id);
        this.tt.appendChildren(childs, this.getHouXuanNode().node);
    }
    // 新增分组
    /**
     * @param {?} rn
     * @param {?=} child
     * @return {?}
     */
    addNewGroup(rn, child = false) {
        /** @type {?} */
        const modalRef = this.showNewHeaderDialog((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const ghfRef = (/** @type {?} */ (modalRef.content));
            if (ghfRef.title) {
                if (!rn || rn.id === this.HOU_XUAN_LIE_ID) {
                    this.treeData.splice(0, 0, {
                        data: {
                            id: this.generateGroupHeaderId(), halign: 'left',
                            title: ghfRef.title, groupHeader: true, fixed: 'UNFIXED'
                        },
                        icon: this.GROUP_HEADER_ICON,
                        children: []
                    });
                    this.tt.updateSerializedValue();
                }
                else {
                    this.createNewGroupHeader(rn, ghfRef.title, child);
                }
                modalRef.close();
            }
            else {
                this.notitySer.info(this.languageRes.required);
                ghfRef.input.nativeElement.focus();
            }
        }), child ? this.languageRes.contextMenus.newChild : this.languageRes.contextMenus.new);
    }
    // 显示更新按钮
    /**
     * @param {?} $event
     * @param {?} nodeData
     * @return {?}
     */
    onMoreBtnClick($event, nodeData) {
        if (nodeData && nodeData.id) {
            this.tt.selectNode(nodeData.id);
        }
        this.tt.ctxMenu.onContextMenu($event);
    }
    /**
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    getCanSelectColumns(rowNode) {
        // 可分配列
        // 候选区数据 + 子节点
        // 可分配列
        // 候选区数据 + 子节点
        /** @type {?} */
        const hxl = this.getHouXuanNode();
        /** @type {?} */
        let fields = rowNode ? rowNode.node.children : [];
        fields = fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => !n.data.groupHeader));
        return hxl.node.children.concat(fields).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data));
    }
    /**
     * @private
     * @param {?} okCallback
     * @param {?} selectedItems
     * @param {?} rowNode
     * @return {?}
     */
    showSetColumnsDialog(okCallback, selectedItems, rowNode) {
        /** @type {?} */
        const modalRef = this.modalService.show(SetColumnsComponent, {
            title: this.languageRes.contextMenus.setDataField,
            width: 600,
            height: 500,
            showMaxButton: false,
            resizable: false,
            initialState: {
                data: this.getCanSelectColumns(rowNode),
                checkedItems: selectedItems,
                groupEditorRef: this
            },
            buttons: [
                {
                    text: this.languageRes.cancel,
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        modalRef.close();
                    })
                },
                {
                    text: this.languageRes.ok,
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        okCallback(modalRef.content.selectedIds);
                    })
                }
            ]
        });
        return modalRef;
    }
    /**
     * 为分组表头分配数据列
     * @param {?} $event
     * @param {?} rowNode
     * @return {?}
     */
    setColumnsForGroupHeader($event, rowNode) {
        /** @type {?} */
        const childs = rowNode ? rowNode.node.children ? rowNode.node.children.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data)) : [] : [];
        /** @type {?} */
        const modalRef = this.showSetColumnsDialog((/**
         * @param {?} selectedIds
         * @return {?}
         */
        (selectedIds) => {
            // 分组下的列
            /** @type {?} */
            const cols = selectedIds.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return this.fields.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field == n));
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
            // 候选区
            /** @type {?} */
            const hxl = this.getHouXuanNode();
            // 清理候选数据，将已分配的列在候选区移除
            hxl.node.children = (hxl.node.children || []).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => cols.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field == n.id)) === -1));
            // 查找需要移除的
            /** @type {?} */
            const needRemoveNodes = (rowNode.node.children || []).filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                return !n.data.groupHeader && cols.findIndex((/**
                 * @param {?} c
                 * @return {?}
                 */
                (c) => c.field === n.id)) == -1;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
            if (needRemoveNodes && needRemoveNodes.length) {
                needRemoveNodes.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    this.tt.remove(n.id);
                }));
            }
            // 查找需要新增的
            /** @type {?} */
            const needAppendNodes = cols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (rowNode.node.children || []).findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === n.field)) === -1)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (!n.id) {
                    n.id = n.field;
                }
                return n;
            }));
            if (needAppendNodes && needAppendNodes.length) {
                needAppendNodes.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const col = this.fields.find((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.field == n.field));
                    if (col) {
                        col.fixed = rowNode.node.data.fixed;
                    }
                }));
                this.tt.appendChildren(needAppendNodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return {
                        data: n,
                        children: [],
                        expanded: true
                    };
                })), rowNode.node);
                this.tt.expandNode(rowNode.id);
            }
            // 更新待选区
            /** @type {?} */
            const hxlCols = needRemoveNodes.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    data: n.data,
                    children: []
                };
            }));
            this.tt.appendChildren(hxlCols, hxl.node);
            modalRef.close();
        }), childs, rowNode);
    }
    // 将待选区中的数据列直接设为表头
    /**
     * @param {?} event
     * @param {?} col
     * @return {?}
     */
    setColumnHeader(event, col) {
        /** @type {?} */
        const i = this.treeData.length - 1;
        this.treeData.splice(i, 0, { data: col, children: [] });
        /** @type {?} */
        const hxl = this.getHouXuanNode();
        if (hxl) {
            hxl.node.children = hxl.node.children.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.data.id !== col.id));
            hxl.node.leaf = !(hxl.node.children && hxl.node.children.length);
            if (hxl.node.leaf) {
                hxl.node.icon = this.GROUP_HEADER_ICON;
            }
            this.tt.clearSelections();
            this.tt.updateSerializedValue();
            this.tt.selectNode(col.id, true);
        }
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveUp(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        if (index !== 0) {
            /** @type {?} */
            const tempArr = data.splice(index, 1);
            data.splice(index - 1, 0, ...tempArr);
            this.tt.updateSerializedValue();
        }
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveDown(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        /** @type {?} */
        const len = data.length;
        if (index !== len - 2) {
            /** @type {?} */
            const tempArr = data.splice(index, 1);
            data.splice(index + 1, 0, ...tempArr);
            this.tt.updateSerializedValue();
        }
        else {
            this.moveBottom(event, rowNode);
        }
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveTop(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        data.unshift(rowNode.node);
        data.splice(index + 1, 1);
        this.tt.updateSerializedValue();
    }
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    moveBottom(event, rowNode) {
        /** @type {?} */
        let data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        const index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.id === rowNode.id));
        data.push(rowNode.node);
        data.splice(index, 1);
        if (!rowNode.parent) {
            this.moveUp(event, rowNode);
        }
        else {
            this.tt.updateSerializedValue();
        }
    }
    /**
     * 获取多表头数据
     * @return {?}
     */
    getPreviewGroupColumns() {
        /** @type {?} */
        const treeNodes = this.getAllNodes();
        return this.convert2Array(treeNodes);
    }
    /**
     * 获取候选列
     * @return {?}
     */
    getHouXuanFields() {
        /** @type {?} */
        const hxl = this.treeData.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.data.houxuanquNode));
        if (hxl) {
            return hxl.children;
        }
        else {
            return [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getAllNodes() {
        /** @type {?} */
        const hxl = this.getHouXuanFields();
        return this.tt.serializedValue.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !n.node.data.houxuanquNode && hxl.findIndex((/**
             * @param {?} k
             * @return {?}
             */
            k => k.data.id === n.id)) === -1;
        }));
    }
    /**
     * 将树节点数据转换为 多表头结构
     * @param {?} rowNodes
     * @return {?}
     */
    convert2Array(rowNodes) {
        /** @type {?} */
        const r = [];
        /** @type {?} */
        const maxBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : (/**
         * @param {?} val
         * @return {?}
         */
        val => val[fn]))));
        /** @type {?} */
        const maxlevel = maxBy(rowNodes, (/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.level));
        // 排除没有数据字段的表头
        rowNodes = rowNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => (n.node.children && n.node.children.length && n.node.data.groupHeader) || !n.node.data.groupHeader));
        /**
         * 1、只有一组表头，且固定在左侧或右侧时，按无固定列方式处理
         * 2、只有左侧、右侧固定列而没有其他正常列时，取消右侧固定列
         * 3、只有左侧或右侧固定时，按无固定列处理
         * @type {?}
         */
        const parents = rowNodes.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => !e.parent));
        if (!parents.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.node.data.fixed || n.node.data.fixed === 'UNFIXED')).length) {
            /** @type {?} */
            const leftCols = parents.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.node.data.fixed === 'left'));
            /** @type {?} */
            const rightCols = parents.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.node.data.fixed === 'right'));
            if (leftCols.length == parents.length || rightCols.length == parents.length) {
                rowNodes.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (parents.find((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.id === n.id))) {
                        n.node.data.fixed = '';
                    }
                }));
            }
            else {
                if (rightCols.length === 1) {
                    leftCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        rowNodes.forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            if (t.id === n.id) {
                                n.node.data.fixed = '';
                            }
                        }));
                    }));
                }
                else {
                    rightCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        rowNodes.forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            if (t.id === n.id) {
                                n.node.data.fixed = '';
                            }
                        }));
                    }));
                }
            }
        }
        for (let i = 0; i <= maxlevel; i++) {
            r.push(rowNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.level === i)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const data = n.node.data;
                /** @type {?} */
                const _fixed = n.parent ? this.tt.getRoot(n.id).node.data.fixed : (data.fixed || '');
                /** @type {?} */
                const _colspan = (n.node.children ? rowNodes.filter((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => k.parents.indexOf(n.id) > -1 && k.id.indexOf('groupHeader_') == -1)).length : 1) || 1;
                /** @type {?} */
                const _rowspan = (n.node.children && n.node.children.length > 0) ? 1 : (maxlevel - n.level + 1);
                /** @type {?} */
                const newCol = {
                    field: data.field,
                    title: data.title,
                    sortable: data.sortable,
                    order: data.order,
                    halign: data.halign || 'left',
                    align: data.align || 'left',
                    visible: true,
                    allowGrouping: data.allowGrouping,
                    groupFooter: data.groupFooter,
                    footer: data.footer,
                    width: (data.size ? data.size.width : 100),
                    dataType: data.dataType || 'string',
                    fixed: _fixed === 'UNFIXED' ? '' : _fixed,
                    id: n.id,
                    parentId: n.node.parent ? n.node.parent.id : null,
                    rowspan: _rowspan,
                    colspan: _colspan
                };
                /** @type {?} */
                const newCol2 = {
                    field: data.field,
                    title: data.title,
                    halign: data.halign || 'left',
                    align: data.align || 'left',
                    visible: true,
                    groupFooter: {},
                    footer: {},
                    width: (data.size ? data.size.width : 100),
                    dataType: data.dataType || 'string',
                    fixed: _fixed === 'UNFIXED' ? '' : _fixed,
                    id: n.id,
                    parentId: n.node.parent ? n.node.parent.id : null,
                    rowspan: _rowspan,
                    colspan: _colspan
                };
                return n.node.data.groupHeader ? newCol2 : newCol;
            })));
        }
        return r;
    }
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    clearTreeNodesData(nodes) {
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            delete n.parent;
            delete n.elementRef;
            if (n.children && n.children.length) {
                this.clearTreeNodesData(n.children);
            }
        }));
    }
    /**
     * @return {?}
     */
    getSettings() {
        this.clearTreeNodesData(this.treeData);
        return {
            viewCols: this.getPreviewGroupColumns(),
            treeData: this.treeData
        };
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @return {?}
     */
    hiddenCol($event, id) {
        $event.stopPropagation();
        if (this.tt.selectedRow && id === this.tt.selectedRow.id) {
            this.tt.clearSelections();
            this.nodeSelected.emit(null);
        }
        this.tt.remove(id);
    }
    /**
     * @param {?} $event
     * @param {?} rowNode
     * @return {?}
     */
    resetHeaderName($event, rowNode) {
        /** @type {?} */
        const modalRef = this.showNewHeaderDialog((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const ghfRef = (/** @type {?} */ (modalRef.content));
            if (ghfRef.title) {
                rowNode.node.data.title = ghfRef.title;
                modalRef.close();
            }
            else {
                this.notitySer.info(this.languageRes.required);
                ghfRef.input.nativeElement.focus();
            }
        }), this.languageRes.contextMenus.rename);
        /** @type {?} */
        const ghfRef = (/** @type {?} */ (modalRef.content));
        ghfRef.title = rowNode.node.data.title;
    }
}
ColumnTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-tree',
                template: "<farris-treetable #tt [data]=\"treeData\" [columns]=\"treecols\"\r\n        [idField]=\"'id'\" [striped]=\"false\" [showBorder]=\"false\"\r\n        [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n        [fixedHeader]=\"false\" [fit] =\"false\" [showHeader]=\"false\"\r\n        [collapseIcon]=\"'f-icon f-icon-file-folder-close'\" [expandIcon]=\"'f-icon f-icon-file-folder-open'\"\r\n        [enableContextMenu]=\"true\" [contextMenuItems]=\"contextMenus\" [dblClickExpand]=\"false\" [beforeShowContextMenu]=\"onBeforeShowContextMenu\"\r\n        (nodeSelected)=\"onTreeSelected($event)\"\r\n></farris-treetable>\r\n<ng-template #nodeTemplate let-ctx>\r\n    <div class=\"d-flex flex-row multi-headers-toolbars\" id=\"{{ ctx.rowData['id'] }}\">\r\n        <div class=\"f-utils-fill\">{{ctx.rowData['title']}}</div>\r\n        <div class=\"d-flex align-items-center multi-headers-toolbars-buttons hide\" [class.show]=\"tt.selectValue === ctx.rowData['id']\">\r\n            \r\n            <button class=\"btn btn-link d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowData['id'] !== '__HOU_XUAN_LIE_ID__' && isGroupHeader(ctx.rowNode)\" title=\"{{languageRes.contextMenus.cancelGroup}}\"\r\n                (click)=\"removeGroup($event, ctx.rowNode);\">\r\n                <span class=\"f-icon f-icon-x\"></span>\r\n            </button>\r\n            <button class=\"btn btn-link d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowData['id'] !== '__HOU_XUAN_LIE_ID__' && ctx.rowNode.parents && ctx.rowNode.parents[0] !== '__HOU_XUAN_LIE_ID__' && !isGroupHeader(ctx.rowNode)\"\r\n                 title=\"{{languageRes.contextMenus.remove}}\"\r\n                (click)=\"hiddenCol($event,ctx.rowNode.id)\">\r\n                <span class=\"f-icon f-icon-x\"></span>\r\n            </button>\r\n            \r\n            <button class=\"btn btn-link mr-0 d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowData['id'] !== '__HOU_XUAN_LIE_ID__' && ctx.rowNode.parents && ctx.rowNode.parents[0] !== '__HOU_XUAN_LIE_ID__'\" title=\"\"\r\n                (click)=\"onMoreBtnClick($event, ctx.rowData)\">\r\n                <span class=\"f-icon f-icon-more-horizontal\"></span>\r\n            </button>\r\n            <button class=\"btn btn-link mr-0 d-flex align-items-center more treenode-more-btn\" title=\"{{languageRes.contextMenus.new}}\" \r\n                *ngIf=\"ctx.rowData['id'] === '__HOU_XUAN_LIE_ID__'\"\r\n                (click)=\"addNewGroup(null, !1)\">\r\n                <span class=\"f-icon f-icon-plus-circle font16 t-2\"></span>\r\n            </button>\r\n\r\n            <button class=\"btn btn-link mr-0 d-flex align-items-center more treenode-more-btn\" \r\n                *ngIf=\"ctx.rowNode.parents && ctx.rowNode.parents[0] === '__HOU_XUAN_LIE_ID__'\" title=\"{{languageRes.setHeader}}\"\r\n                (click)=\"setColumnHeader($event, ctx.rowData)\">\r\n                <span class=\"f-icon f-icon-add\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n</ng-template>",
                exportAs: 'groupHeaderTree',
                encapsulation: ViewEncapsulation.None,
                styles: [".multi-headers-toolbars .multi-headers-toolbars-buttons{margin-right:-11px}.multi-headers-toolbars .multi-headers-toolbars-buttons.hide{display:none!important}.multi-headers-toolbars .multi-headers-toolbars-buttons.show{display:flex!important}.multi-headers-toolbars .multi-headers-toolbars-buttons button.more{height:26px;width:26px;background:0 0;border-radius:0;border:0;padding:2px}.multi-headers-toolbars .multi-headers-toolbars-buttons button.more .f-icon{font-size:14px;position:relative;left:3px}.multi-headers-toolbars .multi-headers-toolbars-buttons .font16{font-size:16px}.multi-headers-toolbars:hover .multi-headers-toolbars-buttons,.table-hover tbody tr:hover .multi-headers-toolbars .multi-headers-toolbars-buttons{display:flex!important}"]
            }] }
];
/** @nocollapse */
ColumnTreeComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: BsModalService },
    { type: ElementRef },
    { type: NotifyService }
];
ColumnTreeComponent.propDecorators = {
    dg: [{ type: Input }],
    options: [{ type: Input }],
    inModal: [{ type: Input }],
    nodeSelected: [{ type: Output }],
    cellTemp: [{ type: ViewChild, args: ['nodeTemplate',] }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnFormatSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.columns = [];
        this.fields = [];
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.allCols = [];
        /**
         * format Data
         */
        this.formatData = [];
        this.columnType = 'all';
        this.activeField = null;
        this.showGridFooter = false;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.fixedItems = [];
        this.isEn = false;
        this.switchValue = false;
        this._searchResult = { checkAll: false, unCheckAll: false };
        /**
         * 配置多表头相关设置
         */
        this.multiHeaderOptions = {};
        // 启用多表头
        this.enableMultipleHeaders = false;
        this.selectTreeNode = null;
        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&
            !this.gridSettingComponentRef.gridInstance.footerTemplate;
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @return {?}
     */
    get isShowfixed() {
        if (this.groupHeadersRef && this.selectTreeNode && this.selectTreeNode.id !== '__HOU_XUAN_LIE_ID__') { // 多表头
            // 多表头
            /** @type {?} */
            const rn = this.groupHeadersRef.tt.findRowNode(this.selectTreeNode.id);
            return rn && !rn.level;
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.setFormatData();
            this.allCols = this.columns[0];
            this.setActiveField();
            this.checkColumnOptions();
            this._searchResult = this.seachResultIsCheckAll();
        }
        if (changes.multiHeaderOptions && !changes.multiHeaderOptions.isFirstChange()) {
            this.setActiveField();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isEn = this.localeSer.localeId === 'en';
        this.initData();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setActiveField();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.colForm) {
                this.colForm.valueChanges.subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => {
                    this.formatChange.emit(this.formatData);
                }));
            }
        }), 50);
    }
    /**
     * @private
     * @return {?}
     */
    setActiveField() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.enableMultipleHeaders && this.multiHeaderOptions) {
                const { columns } = this.multiHeaderOptions;
                if (columns && columns.length) {
                    this.groupHeadersRef.tt.selectFirstNode();
                }
                else {
                    this.activeField = null;
                }
            }
            else {
                this.activeField = this.columns[0][0];
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setFormatData() {
        // this.formatData = this.fields.map(n => {
        //     return this.columns[0].find(col => col.field === n);
        // });
        this.formatData = this.columns[0];
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.alignItems = this.gridSettingComponentRef.alignItems;
        this.searchItems = this.gridSettingComponentRef.searchItems;
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.fixedItems = this.gridSettingComponentRef.fixedItems;
        this.setFormatData();
        this.allCols = this.columns[0];
        this.checkColumnOptions();
        this.filterColumns();
    }
    /**
     * @private
     * @return {?}
     */
    checkColumnOptions() {
        if (this.activeField) {
            if (this.activeField.allowGrouping === undefined) {
                this.activeField.allowGrouping = true;
            }
            if (this.activeField.groupFooter === undefined) {
                this.activeField.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.groupFooter.options = this.activeField.groupFooter.options || { calculationType: -1 };
                if (this.activeField.groupFooter.options.calculationType === undefined) {
                    this.activeField.groupFooter.options.calculationType = -1;
                }
            }
            if (this.activeField.footer === undefined) {
                this.activeField.footer = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.footer.options = this.activeField.footer.options || { calculationType: -1 };
                if (this.activeField.footer.options.calculationType === undefined) {
                    this.activeField.footer.options.calculationType = -1;
                }
            }
            if (!this.activeField.fixed || (this.activeField.fixed !== 'left' && this.activeField.fixed !== 'right')) {
                this.activeField.fixed = 'UNFIXED';
            }
        }
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(searchWords = '') {
        /** @type {?} */
        let cols = [];
        if (this.switchValue) {
            cols = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.fields.indexOf(n.field) > -1));
        }
        else {
            cols = this.columns[0];
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords) > -1));
        }
        this.allCols = cols;
        this._searchResult = this.seachResultIsCheckAll(this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)));
    }
    /**
     * @private
     * @param {?=} searchFields
     * @return {?}
     */
    seachResultIsCheckAll(searchFields) {
        /** @type {?} */
        const allColsLength = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field != '_datagrid-setting-control_')).length;
        /** @type {?} */
        let fieldsLength = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n != '_datagrid-setting-control_')).length;
        if (searchFields) {
            fieldsLength = searchFields.length;
        }
        return {
            checkAll: allColsLength && allColsLength === fieldsLength,
            unCheckAll: !searchFields ? !this.fields.length : !fieldsLength
        };
    }
    /**
     * @param {?} col
     * @param {?} $event
     * @return {?}
     */
    onFieldClick(col, $event) {
        this.activeField = col;
        this.checkColumnOptions();
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        this.setFormatData();
        this.fieldsChange.emit(this.fields);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        $event.target.style.userSelect = 'none';
        this.onCheckboxClick($event, col);
        $event.target.style.userSelect = '';
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        $event.stopPropagation();
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.visible = this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        /** @type {?} */
        const _fields = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this._searchResult = this.seachResultIsCheckAll(_fields);
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    searchColumn($event) {
        this.switchValue = false;
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, txt, ulElRef) {
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(txt);
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @param {?=} search
     * @return {?}
     */
    getCheckAllState(search = false) {
        if (this.fields.length === 0) {
            return 0;
        }
        else {
            if (search) {
                if (this._searchResult.checkAll) {
                    return 1;
                }
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
            }
            return 2;
        }
    }
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, txt) {
        if (!this.allCols || !this.allCols.length) {
            return;
        }
        /** @type {?} */
        const state = this.getCheckAllState(txt);
        /** @type {?} */
        const isVisible = state === 0 || state === 2;
        /** @type {?} */
        let _fields = null;
        if (txt == '') {
            if (isVisible) {
                // 执行全选
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.visible = true));
                this.fields = this.columns[0].map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.field));
            }
            else {
                // 取消全选
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.visible = false));
                this.fields = [];
            }
        }
        else {
            this.allCols.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                /** @type {?} */
                const col = this.columns[0].find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => c.field === n.field));
                col.visible = isVisible;
                c.visible = isVisible;
            }));
            _fields = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
        }
        this._searchResult = this.seachResultIsCheckAll(!txt ? null : _fields);
        this.cd.detectChanges();
        this.onFieldsChanged();
        // this.filterColumns(txt);
    }
    // 仅显示可见列
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onlySeeVisibleColumns($event, txt) {
        this.switchValue = $event;
        this.filterColumns(txt);
    }
    /**
     * @param {?} $event
     * @param {?} searchInput
     * @return {?}
     */
    clearSearch($event, searchInput) {
        if (searchInput && searchInput.value) {
            this.filterColumns('');
            searchInput.value = '';
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onNodeSelected($event) {
        if ($event && $event.node.id !== "__HOU_XUAN_LIE_ID__") {
            this.activeField = $event.node.data;
            this.selectTreeNode = $event.node;
            this.checkColumnOptions();
        }
        else {
            this.activeField = null;
            this.selectTreeNode = null;
        }
    }
    /**
     * @return {?}
     */
    getMultiHeaders() {
        return this.groupHeadersRef ? this.groupHeadersRef.getSettings() : null;
    }
}
ColumnFormatSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-format-setting',
                template: "<div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n    <div region=\"west\" class=\"west d-flex flex-column \" *ngIf=\"!enableMultipleHeaders\">\r\n        <div style=\"margin: 0 6px;\">\r\n\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\" (input)=\"searchColumn($event)\" style=\"height: 30px;\">\r\n                <div  class=\"input-group-append\" style=\"cursor: pointer\">\r\n                    <span  class=\"f-icon f-icon-search\" [class.f-icon-close]=\"inputWord.value\" (click)=\"clearSearch($event, inputWord)\"></span>\r\n                </div>\r\n            </div>\r\n            <div style=\"padding: 5px 0px;background-color: #fff;justify-content: space-between;align-items: center;\" class=\"d-flex flex-row\">\r\n                <button class=\"btn btn-link\" style=\"height: 32px;padding-left: 4px;\" [disabled]=\"!(allCols && allCols.length)\" (click)=\"onCheckAllClick($event, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkbox\" \r\n                    [class.f-icon-checkbox]=\"_searchResult.unCheckAll\" \r\n                    [class.f-icon-checkbox-checked]=\"_searchResult.checkAll \"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <div [class.d-flex]=\"!inputWord.value\"  class=\"flex-row\" [style.display]=\"inputWord.value ? 'none': ''\" >{{'datagrid-scheme.onlyshowcolumns' | locale}} \r\n                    <farris-switch style=\"position: relative;\r\n                    top: 2px;\r\n                    margin-left: 5px;\"\r\n                    id=\"only-visible-columns\"\r\n                    [square]=\"false\" [size]=\"'small'\"\r\n                    [ngModel]=\"switchValue\" \r\n                    (valueChange)=\"onlySeeVisibleColumns($event, inputWord.value)\"\r\n                    ></farris-switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px; cursor: pointer;\" class=\"flex-fill\">\r\n            <ul class=\"list-group  list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onFieldClick(col, $event)\" [class.active]=\"activeField && activeField.field === col.field\"\r\n                    f-dbl-click (dblClickHandler)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\" *ngIf=\"!inputWord.value\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div region=\"west\" class=\"west d-flex flex-column \" *ngIf=\"enableMultipleHeaders\">\r\n        <div style=\"margin: 0 6px;\" class=\"mb-2\">\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center; height: 24px;\">\r\n                <h5 class=\"count m-0\" style=\"font-size: 18px;\"> {{ 'headerGroup.title' | locale }}</h5>\r\n                <div class=\"d-flex flex-row \" style=\"align-items: center;justify-content: end;\" [class.f-utils-fill]=\"enableMultipleHeaders\">\r\n                    <button class=\"btn btn-link\" style=\"height: 32px;padding-left: 4px;\" [preview-headers]=\"gh\" *ngIf=\"enableMultipleHeaders\"> {{ 'headerGroup.preview' | locale }}</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"tip p-2\" style=\"background: #f7faff; border-radius: 4px;\" >\r\n                {{ 'headerGroup.tips' | locale }}\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px; cursor: pointer;\" class=\"flex-fill\">\r\n            <column-tree #gh=\"groupHeaderTree\" [dg]=\"gridSettingComponentRef?.gridInstance\" [options]=\"multiHeaderOptions\"\r\n             class=\"flex-fill d-flex pt-2\" [inModal]=\"true\" (nodeSelected)=\"onNodeSelected($event)\"></column-tree>\r\n        </div>\r\n    </div>\r\n\r\n    <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px;border-right: 0;\">\r\n\r\n        <h6 style=\"margin: 15px 0px;font-weight: bold;\">{{ 'datagrid.settings.properties' | locale }}</h6>\r\n\r\n        <form #colformatform=\"ngForm\" style=\"margin-top: 5px;\" *ngIf=\"activeField\">\r\n            <!-- \u5217\u6807\u9898 -->\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid-settings.column.title' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input class=\"form-control\" name=\"title\" [(ngModel)]=\"activeField.title\" type=\"text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u8868\u5934\u5BF9\u9F50 -->\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid.settings.headeralign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list name=\"halign\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.halign\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u6570\u636E\u5BF9\u9F50 -->\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"activeField && !activeField.groupHeader\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.dataalign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list name=\"align\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.align\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u662F\u5426\u56FA\u5B9A -->\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"isShowfixed\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid-settings.column.fixed' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list name=\"fixed\" \r\n                        [data]=\"fixedItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.fixed\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u5408\u8BA1 -->\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter && activeField && !activeField.groupHeader\" >\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytype' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap \">\r\n                       \r\n                        <farris-combo-list name=\"footer.options.calculationType\" \r\n                        [data]=\" activeField.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.footer.options.calculationType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"activeField && !activeField.groupHeader && showGridFooter && ( \r\n                (!activeField.footer.options.calculationType && activeField.footer.options.calculationType != 0)  ||activeField.footer.options.calculationType == -1)\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytext' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input type=\"input\" name=\"footer.options.text\" class=\"form-control\" [(ngModel)]=\"activeField.footer.options.text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n   \r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ColumnFormatSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnFormatSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    colForm: [{ type: ViewChild, args: ['colformatform',] }],
    groupHeadersRef: [{ type: ViewChild, args: ['gh',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }],
    multiHeaderOptions: [{ type: Input }],
    enableMultipleHeaders: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSettingsComponent {
    /**
     * @param {?} cd
     * @param {?} inject
     */
    constructor(cd, inject) {
        this.cd = cd;
        this.inject = inject;
        this.activeTabIndex = 1;
        /**
         * 排序列数据
         */
        this.sortTreeData = [];
        this.sortNames = [];
        this.sortInfo = {};
        /**
         * 显示列数据
         */
        // viewTreeData = [];
        this.viewColumns = [];
        this.columnFormat = [];
        this.groupField = [];
        this.expandGroupRows = true;
        this.canSetColumnSort = true;
        this.canSetColumnVisible = true;
        this.enableReset = false;
        this.cancelHandle = new EventEmitter();
        this.submitHandle = new EventEmitter();
        this.reset = new EventEmitter();
        this.concise = new EventEmitter();
        this.schemeInfo = null;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.enableGroupFooter = false;
        this.fixedItems = [];
        /**
         * 配置多表头相关设置
         */
        this.multiHeaders = {};
        // 启用多表头
        this.enableMultipleHeaders = false;
        this.schemeName = '';
        this.tabWidth = 70;
        this.messager = this.inject.get(MessagerService, null);
        this.localeSer = this.inject.get(LocaleService);
        this.render2 = this.inject.get(Renderer2, null);
        this.notifySer = this.inject.get(NotifyService, null);
        this.searchItems = [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
        this.alignItems = [
            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
        ];
        this.summaryItems = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.summaryItems2 = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.fixedItems = [
            { value: 'UNFIXED', title: this.localeSer.getValue('datagrid-settings.column.unFixed') },
            { value: 'left', title: this.localeSer.getValue('datagrid-settings.column.leftFixed') },
            { value: 'right', title: this.localeSer.getValue('datagrid-settings.column.rightFixed') },
        ];
        if (this.localeSer.localeId === 'en') {
            this.tabWidth = 80;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
        /** @type {?} */
        const sortOrders = this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : [];
        this.viewColumns = this.getViewColumns();
        this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        this.columnFormat = [...this.columns[0]];
        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
        this.expandGroupRows = this.gridInstance['expandGroupRows'];
        this.enableGroupFooter = this.gridInstance.groupFooter;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.gridInstance.enableScheme) {
            this.initData();
        }
        else {
            if (this.schemeInfo) {
                this.sortInfo = this.schemeInfo.sortInfo || {};
                if (this.sortInfo) {
                    this.sortNames = this.sortInfo.sortName || '';
                }
                this.viewColumns = this.schemeInfo.viewColumns;
                this.columnFormat = this.schemeInfo.columnFormat;
                if (!this.columnFormat) {
                    this.columnFormat = [...this.columns[0]];
                }
                if (this.schemeInfo.groupField) {
                    if (typeof this.schemeInfo.groupField === 'string') {
                        this.groupField = ((/** @type {?} */ (this.schemeInfo.groupField))).split(',');
                    }
                    else {
                        this.groupField = this.schemeInfo.groupField || [];
                    }
                }
                else {
                    this.groupField = [];
                }
                this.expandGroupRows = !!this.schemeInfo.expandGroupRows;
            }
            else {
                // 系统预制
                this.reset2Default();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    close($event) {
        $event.stopPropagation();
        if (this.modalRef) {
            this.modalRef.close();
        }
    }
    /**
     * @private
     * @param {?=} tab
     * @return {?}
     */
    setCurrentTab(tab = null) {
        if (this.render2) {
            /** @type {?} */
            let left = 0;
            /** @type {?} */
            const tabs = Array.from(this.header.nativeElement.querySelectorAll('.navitem'));
            /** @type {?} */
            let index = this.activeTabIndex;
            if (tabs.length !== 3) {
                index = tabs.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n === tab)) + 1;
            }
            switch (index) {
                case 2:
                    left = this.localeSer.localeId === 'en' ? 78 : 68;
                    break;
                case 3:
                    left = this.localeSer.localeId === 'en' ? 158 : 138;
                    break;
                default:
                    left = 0;
                    break;
            }
            this.render2.setStyle(this.activeTab.nativeElement, 'transform', `translate3d(${left}px, 0px, 0px)`);
        }
    }
    /**
     * @param {?} $event
     * @param {?} idx
     * @return {?}
     */
    changeTabs($event, idx) {
        $event.stopPropagation();
        /** @type {?} */
        const treeNodes = this.getCurrentGroupHeaders();
        if (this.activeTabIndex === 1 && this.enableMultipleHeaders) {
            this.setCurrentGroupHeaders(treeNodes);
        }
        else {
            this.multiHeaders.treeData = treeNodes ? treeNodes.treeData : [];
        }
        if (idx === 2 && this.enableMultipleHeaders) {
            this.sortTreeData = getDataFieldsForMultiHeaders(treeNodes.viewCols).filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable));
        }
        if (idx === 3) {
            if (this.enableMultipleHeaders) {
                this.columnFormat = treeNodes && treeNodes.viewCols ? getDataFieldsForMultiHeaders(treeNodes.viewCols).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n.field.indexOf('farris-datagrid-column_') == -1)) : [];
            }
            else {
                this.columnFormat = getDataFieldsForMultiHeaders(this.columns);
            }
        }
        this.activeTabIndex = idx;
        /** @type {?} */
        let tabEl = $event.target;
        if (!tabEl.classList.contains('navitem') && tabEl.closest('.navitem')) {
            tabEl = tabEl.closest('.navitem');
        }
        this.setCurrentTab(tabEl);
    }
    /**
     * @param {?} sortInfo
     * @return {?}
     */
    onSortInfoChange(sortInfo) {
        this.sortInfo = sortInfo;
    }
    /**
     * @private
     * @return {?}
     */
    getViewColumns() {
        // 多表头
        /** @type {?} */
        let visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                visibleCls = visibleCls.concat(this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (n.visible || n.visible === undefined)));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    _getViewColumns(cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.colspan && (c.visible || c.visible === undefined)));
    }
    /**
     * @private
     * @return {?}
     */
    mergeColumnFormats() {
        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {
            const { sortName, sortOrder } = this.sortInfo;
            if (sortName && sortName.length) {
                sortName.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    /** @type {?} */
                    const col = this.columnFormat.find((/**
                     * @param {?} col
                     * @return {?}
                     */
                    (col) => {
                        return col.field === n;
                    }));
                    if (col) {
                        col.sortable = true;
                        col.order = sortOrder[i] || 'asc';
                    }
                }));
            }
        }
        /**
         * 1、只有一组表头，且固定在左侧或右侧时，按无固定列方式处理
         * 2、只有左侧、右侧固定列而没有其他正常列时，取消右侧固定列
         * 3、只有左侧或右侧固定时，按无固定列处理
         * @type {?}
         */
        const _columnsFormat = this.columnFormat;
        if (!_columnsFormat.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => (!n.fixed || n.fixed === 'UNFIXED') && n.visible)).length) {
            /** @type {?} */
            const colsCount = _columnsFormat.length;
            /** @type {?} */
            const rightCols = _columnsFormat.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.fixed === 'right'));
            /** @type {?} */
            const leftCols = _columnsFormat.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.fixed === 'left'));
            if (leftCols.length == colsCount || rightCols.length == colsCount) {
                _columnsFormat.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n.fixed = '';
                }));
            }
            else {
                if (rightCols.length === 1) {
                    leftCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        t.fixed = '';
                    }));
                }
                else {
                    rightCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        t.fixed = '';
                    }));
                }
            }
        }
    }
    /**
     * @param {?} colFormatData
     * @return {?}
     */
    onColumnFormatChange(colFormatData) {
        this.columnFormat = colFormatData;
    }
    /**
     * @private
     * @param {?} msg
     * @return {?}
     */
    _showMessager(msg) {
        if (this.notifySer) {
            this.notifySer.info(msg);
        }
        else {
            this.messager.info(msg);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitClick($event) {
        if (this.enableMultipleHeaders) {
            /** @type {?} */
            const _multiHeaders = this.getCurrentGroupHeaders();
            if (_multiHeaders && !multiHeadersHasDataFields(_multiHeaders.viewCols)) {
                this._showMessager('请设置表头。');
                return;
            }
            mergeSortInfo(_multiHeaders.viewCols, this.sortInfo);
            this.multiHeaders = _multiHeaders;
        }
        else {
            this.multiHeaders = null;
            this.mergeColumnFormats();
        }
        this.submitHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.cancelHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSettingReset($event) {
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                if (this.enableMultipleHeaders) {
                    const { settings, multiHeaderOptions } = reset2DefaultForMultiHeaders(this.gridInstance);
                    const { viewColumns, columnFormat, sortInfo, groupField, expandGroupRows, multiHeaders } = settings;
                    this.viewColumns = viewColumns;
                    this.sortInfo = sortInfo;
                    this.sortNames = sortInfo.sortName || [];
                    this.groupField = groupField;
                    this.expandGroupRows = expandGroupRows;
                    this.multiHeaders = {
                        columns: multiHeaderOptions.columns,
                        treeData: multiHeaders.treeData
                    };
                    this.columnFormat = getDataFieldsForMultiHeaders(multiHeaderOptions.columns);
                    this.setCurrentGroupHeaders({ viewCols: multiHeaderOptions.columns, treeData: null });
                }
                else {
                    this.reset2Default();
                }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reset2Default() {
        /** @type {?} */
        const options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            const newColumns = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = Object.assign({}, c.footer || {});
                        col.groupFooter = Object.assign({}, c.groupFooter || {});
                        col.title = c.title;
                        col.fixed = c.fixed || '';
                        newColumns.push(col);
                    }
                }
            }));
            this.columns = [newColumns];
        }
        this.viewColumns = this.getViewColumns();
        if (options.sort) {
            /** @type {?} */
            const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        }
        else {
            this.sortNames = [];
            this.sortInfo = {};
        }
        this.columnFormat = [...this.columns[0]];
        this.groupField = options.groupField ? options.groupField.split(',') : [];
        this.expandGroupRows = !!options.expandGroupRows;
        this.enableGroupFooter = !!options.enableGroupFooter;
    }
    /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    showConcise($event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (this.enableMultipleHeaders) {
            this.multiHeaders = this.getCurrentGroupHeaders();
        }
        this.mergeColumnFormats();
        this.concise.emit();
    }
    /**
     * @private
     * @param {?} p
     * @return {?}
     */
    setCurrentGroupHeaders(p) {
        this['GROUP_HEADERS'] = p;
    }
    /**
     * @return {?}
     */
    getCurrentGroupHeaders() {
        if (this.colFormatSettings) {
            return this.colFormatSettings.getMultiHeaders();
        }
        else {
            return this['GROUP_HEADERS'];
        }
    }
}
DatagridSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-settings',
                template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\" (mousedown)=\"$event.stopPropagation()\">\r\n\r\n                    <div class=\"active-tab\" #activeTab [style.width.px]=\"tabWidth - 2\"></div>\r\n\r\n                    <div class=\"navitem text-center\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs($event, 1)\"\r\n                        style=\"border: 0; z-index:2; \" [style.width.px]=\"tabWidth\">{{'datagrid.settings.visible' | locale}}</div>\r\n                    <div class=\"navitem text-center\" *ngIf=\"canSetColumnSort\" [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs($event, 2)\" \r\n                    style=\"border: 0;z-index:2;\" [style.width.px]=\"tabWidth\">{{'datagrid.settings.sortting' | locale}}</div>\r\n                    <div class=\"navitem text-center\" *ngIf=\"gridInstance?.groupRows\"\r\n                        [class.active]=\"activeTabIndex === 3\" (click)=\"changeTabs($event, 3)\" \r\n                        style=\"border: 0;z-index:2;\" [style.width.px]=\"tabWidth\">{{'datagrid.settings.groupping' | locale}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onCancelClick($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\" #colFormatSettings\r\n                (formatChange)=\"onColumnFormatChange($event)\" \r\n                [enableMultipleHeaders]=\"enableMultipleHeaders\"\r\n                [multiHeaderOptions]=\"multiHeaders\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [enabelGroupFooter]=\"gridInstance.groupFooter\" [(formatColumns)]=\"columnFormat\"\r\n            [(groupFields)]=\"groupField\" [(expandGroupRows)]=\"expandGroupRows\" [columns]=\"columns\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n\r\n        <button class=\"btn btn-link reset\" style=\"\r\n        color: black;\r\n        width: auto;\r\n        float: left;\r\n        margin-left: 20px;\r\n        cursor: default;\" *ngIf=\"gridInstance.enableScheme\">{{'datagrid-scheme.currentSheme' | locale: '\u5F53\u524D\u65B9\u6848'}}<span>{{ schemeName }}</span></button>\r\n\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DatagridSettingsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Injector }
];
DatagridSettingsComponent.propDecorators = {
    enableReset: [{ type: Input }],
    columns: [{ type: Input }],
    cancelHandle: [{ type: Output }],
    submitHandle: [{ type: Output }],
    reset: [{ type: Output }],
    concise: [{ type: Output }],
    schemeInfo: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }],
    activeTab: [{ type: ViewChild, args: ['activeTab',] }],
    colFormatSettings: [{ type: ViewChild, args: ['colFormatSettings',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} valObj
 * @param {?} localeId
 * @return {?}
 */
function getMultilingualValue(valObj, localeId) {
    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
        localeId = localeId || 'zh-CHS';
        /** @type {?} */
        const val = valObj[localeId];
        if (val !== undefined) {
            return val;
        }
        else {
            return '';
        }
    }
    else {
        return '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SimpleColumnsComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.enableScheme = false;
        this.seartTypes = [];
        /**
         * 所有列
         */
        this.columns = [];
        /**
         * 显示的列
         */
        this.fields = [];
        /**
         * 点击侧边样式以外的区域隐藏面板。默认为 true
         */
        this.clickToHidden = true;
        this.top = 0;
        this._schemeList = [];
        this.cls = 'f-datagrid-settings-simple-host';
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.submit = new EventEmitter();
        /**
         * 分组表头确定事件
         */
        this.submitForGroupHeader = new EventEmitter();
        this.closed = new EventEmitter();
        this.advanced = new EventEmitter();
        this.canceld = new EventEmitter();
        this.addNewScheme = new EventEmitter();
        this.showSchemeList = new EventEmitter();
        this.activeItemChange = new EventEmitter();
        this.schemeChanged = new EventEmitter();
        this.allCols = [];
        this.columnType = 'all';
        this.isEn = false;
        this.showSchemePanel = false;
        this.switchValue = false;
        // 当前方案
        this.currentSchemeItem = null;
        this.searchResultIsVisibleAll = { checkAll: false, unCheckAll: false };
        this.defaultSchemeName = '系统预制';
        /**
         * 配置多表头相关设置
         */
        this.multiHeaderOptions = {};
        // 启用多表头
        this.enableMultipleHeaders = false;
        this.prevSchemeItem = null;
        this.settings = {};
        this.schemeSer = null;
        this.noDisplyColumnTip = '';
        this.localeSer = this.injector.get(LocaleService, null);
        this.messager = this.injector.get(MessagerService, null);
        this.notify = this.injector.get(NotifyService, null);
        this.noDisplyColumnTip = this.localeSer.getValue('datagrid-scheme.noDisplyColumnTip');
    }
    /**
     * @return {?}
     */
    get schemeList() {
        return this._schemeList;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set schemeList(val) {
        if (val && val.length) {
            val = val.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return JSON.parse(n.name)[this.localeSer.localeId];
            })); // 仅获取当前语言的方案
            val.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n['_title_'] = getMultilingualValue(JSON.parse(n.name), this.localeSer.localeId);
                if (this.currentSchemeItem && n.id === this.currentSchemeItem.id) {
                    this.currentSchemeItem['_title_'] = n['_title_'];
                }
            }));
        }
        this._schemeList = val || [];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        /** @type {?} */
        const clsname = $event.target['className'] || '';
        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {
            // 隐藏侧边栏；
            if (this.clickToHidden) {
                this.cancel();
            }
        }
        this.showSchemePanel = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEscKeydown($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.close();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEnterKeydown($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.onSubmitClick();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onControlGKeydown($event) {
        if ($event.ctrlKey && !document.querySelector('modal-container')) {
            /** @type {?} */
            const _key = $event.key.toLowerCase();
            if (['g', 'r', 's'].includes(_key)) {
                $event.preventDefault();
                $event.stopPropagation();
            }
            if (_key === 'g') {
                this.showAdvanced($event);
            }
            else if (_key === 'r') {
                this.onSettingReset();
            }
            else if (_key === 's') {
                this.searchInput.nativeElement.focus();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentSchemeSettings() {
        if (this.currentSchemeItem && this.currentSchemeItem.queryConditionString) {
            /** @type {?} */
            const schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);
            return (/** @type {?} */ (schemeSettings[this.localeSer.localeId]));
        }
        return null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 判断是否启用多表头列设置
        this.enableMultipleHeaders = this.gridInstance.enableSetMultiHeaders;
        // const options = this.gridInstance.dfs['_state'].initialOptions;
        // if (options.columnFields && options.columnFields.length) {
        //     this.allCols = options.columnFields.filter((f: any) => f.field !== '_datagrid-setting-control_');
        // } else {
        //     this.allCols = this.columns[0];
        // }
        this.allCols = this.columns[0];
        if (this.gridInstance.enableScheme) {
            if (!this.prevSchemeItem) {
                this.prevSchemeItem = cloneDeep(this.currentSchemeItem);
            }
            if (this.currentSchemeItem) {
                this.settings = this.getCurrentSchemeSettings() || {};
            }
            else {
                if (!this.settings || !Object.keys(this.settings).length) {
                    this._reset2Default();
                }
            }
        }
        const { multiHeaders } = this.settings;
        this.multiHeaderOptions = { columns: this.columns, treeData: multiHeaders ? multiHeaders.treeData : null };
        if (!this.enableMultipleHeaders) {
            if (this.settings && this.settings.viewColumns) {
                this.fields = this.settings.viewColumns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n != '_datagrid-setting-control_'));
                this.dirtySettings(true);
            }
            else {
                this.fields = this.getViewColumns();
            }
        }
        this.container.nativeElement.focus();
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll();
        this.defaultSchemeName = this.localeSer.getValue('datagrid-scheme.syspreset') || this.gridInstance.defaultSchemeName;
        if (this.schemeSer) {
            if (this.settings && !Object.keys(this.settings).length) {
                if (this.gridInstance.enableScheme) {
                    this.resetToDefault();
                }
                else {
                    this.settings = this.getCurrentSettings();
                }
            }
            this.schemeSer.setSettings(this.settings);
            this.defaultSettings();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log(this.fields);
    }
    /**
     * @private
     * @return {?}
     */
    getViewColumns() {
        // 多表头
        /** @type {?} */
        let visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                visibleCls = visibleCls.concat(this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (n.visible || n.visible === undefined)));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    _getViewColumns(cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.colspan && (c.visible || c.visible === undefined)));
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(searchWords = '') {
        /** @type {?} */
        let cols = [];
        if (this.switchValue) {
            cols = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.fields.indexOf(n.field) > -1));
        }
        else {
            cols = this.columns[0];
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1));
        }
        this.allCols = cols;
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)));
    }
    /**
     * @private
     * @param {?=} searchFields
     * @return {?}
     */
    seachResultIsCheckAll(searchFields) {
        /** @type {?} */
        const allColsLength = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field != '_datagrid-setting-control_')).length;
        /** @type {?} */
        let fieldsLength = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n != '_datagrid-setting-control_')).length;
        if (searchFields) {
            fieldsLength = searchFields.length;
        }
        return {
            checkAll: allColsLength && allColsLength === fieldsLength,
            unCheckAll: !searchFields ? !this.fields.length : !fieldsLength
        };
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        if (!this.gridInstance.enableScheme) {
            this.fieldsChange.emit(this.fields);
        }
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        this.onCheckboxClick($event, col);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        $event.stopPropagation();
        this.showSchemePanel = false;
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.visible = this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        /** @type {?} */
        const _fields = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(_fields);
        this.dirtySettings(true);
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    searchColumn($event) {
        this.switchValue = false;
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, txt, ulElRef) {
        this.showSchemePanel = false;
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(txt);
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    getCheckAllState() {
        if (!this.searchInput.nativeElement.value) {
            if (this.fields.length === 0) {
                return 0;
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
                return 2;
            }
        }
        else {
            /** @type {?} */
            const visibleLen = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).length;
            if (visibleLen === this.allCols.length) {
                return 1;
            }
            else {
                if (visibleLen < this.allCols.length) {
                    if (visibleLen === 0) {
                        return 0;
                    }
                    return 1;
                }
            }
        }
    }
    // 全选
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, txt) {
        $event.stopPropagation();
        if (!this.allCols || !this.allCols.length) {
            return;
        }
        this.showSchemePanel = false;
        /** @type {?} */
        const state = this.getCheckAllState();
        /** @type {?} */
        const isCheckAll = state === 0 || state === 2;
        /** @type {?} */
        let _fields = null;
        if (!txt) {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = isCheckAll));
        }
        else {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const item = this.allCols.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => n.field == a.field));
                if (item) {
                    n.visible = isCheckAll;
                    item.visible = isCheckAll;
                }
            }));
            _fields = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
        }
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(!txt ? null : _fields);
        this.dirtySettings(true);
        this.cd.detectChanges();
        this.onFieldsChanged();
        // this.filterColumns(txt);
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    close($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.closed.emit();
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    cancel($event) {
        this.currentSchemeItem = this.prevSchemeItem;
        // this.schemeChanged.emit(this.prevSchemeItem);
        this.close($event);
        this.canceld.emit();
    }
    // 打开高级设置窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    showAdvanced($event) {
        this.close($event);
        this.settings = this.getCurrentSettings();
        if (this.enableMultipleHeaders) {
            if (this.multiHeaderRef) {
                this.settings.multiHeaders = this.multiHeaderRef.getSettings();
            }
        }
        this.advanced.emit({ viewFields: this.fields, settings: this.settings, columns: this.columns });
    }
    // 恢复默认
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSettingReset($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '您确定要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText, 2035).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetToDefault();
                this.dirtySettings(true);
                this.searchResultIsVisibleAll = this.seachResultIsCheckAll();
            }
        }));
    }
    /**
     * @return {?}
     */
    resetToDefault() {
        if (this.enableMultipleHeaders) {
            this._reset2DefalutFormMultiHeaders();
        }
        else {
            this._reset2Default();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _reset2DefalutFormMultiHeaders() {
        const { settings, multiHeaderOptions } = reset2DefaultForMultiHeaders(this.gridInstance);
        this.settings = settings,
            this.multiHeaderOptions = multiHeaderOptions;
    }
    /**
     * @private
     * @return {?}
     */
    _reset2Default() {
        /** @type {?} */
        const options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            const newColumns = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = this.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = Object.assign({}, c.footer || {});
                        col.groupFooter = Object.assign({}, c.groupFooter || {});
                        col.title = c.title;
                        col.fixed = c.fixed || '';
                        newColumns.push(col);
                    }
                }
            }));
            this.columns = [newColumns];
        }
        this.allCols = this.columns[0];
        this.settings = {};
        this.fields = this.getViewColumns();
        this.settings.viewColumns = this.fields;
        this.settings.columnFormat = [...this.columns[0]];
        if (options.sort) {
            /** @type {?} */
            const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            /** @type {?} */
            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
        }
        else {
            this.settings.sortInfo = {};
        }
        this.settings.groupField = options.groupField ? options.groupField.split(',') : [];
        this.settings.expandGroupRows = !!options.expandGroupRows;
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentSettings() {
        /** @type {?} */
        let _settings = {};
        _settings.viewColumns = this.fields;
        if (!this.enableScheme) {
            if (!_settings.columnFormat) {
                _settings.columnFormat = [...this.columns[0]];
            }
            if (!_settings.sortInfo) {
                _settings.sortInfo = {
                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                    sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
                };
            }
            if (_settings.groupField === undefined) {
                _settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
            }
        }
        else {
            _settings = Object.assign(this.settings || {}, _settings);
        }
        if (_settings.expandGroupRows == undefined) {
            _settings.expandGroupRows = this.gridInstance['expandGroupRows'];
        }
        return _settings;
    }
    // 确定按钮点击事件
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSubmitClick($event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.enableMultipleHeaders) {
            if (!this.fields || !this.fields.length) {
                this.notify.warning(this.noDisplyColumnTip);
                return;
            }
        }
        this.prevSchemeItem = this.currentSchemeItem;
        this.showSchemePanel = false;
        this.settings = this.getCurrentSettings();
        // 启用多表头时，触发新的事件
        if (this.enableMultipleHeaders) {
            if (this.multiHeaderRef) {
                /** @type {?} */
                const _multiHeaders = this.multiHeaderRef.getSettings();
                if (!multiHeadersHasDataFields(_multiHeaders.viewCols)) {
                    this.notify.info(this.noDisplyColumnTip);
                    return;
                }
                mergeSortInfo(_multiHeaders.viewCols, this.settings.sortInfo);
                this.settings.multiHeaders = _multiHeaders;
            }
            this.submitForGroupHeader.emit({
                content: this.settings,
                close: this.close.bind(this),
                target: this.btnOk.nativeElement,
                currentScheme: this.currentSchemeItem
            });
        }
        else {
            this.submit.emit({
                content: this.settings,
                close: this.close.bind(this),
                target: this.btnOk.nativeElement,
                currentScheme: this.currentSchemeItem
            });
        }
    }
    /**
     * @return {?}
     */
    collectSettings() {
        this.settings = this.getCurrentSettings();
        // 启用多表头时，触发新的事件
        if (this.enableMultipleHeaders) {
            if (this.multiHeaderRef) {
                /** @type {?} */
                const _multiHeaders = this.multiHeaderRef.getSettings();
                if (!multiHeadersHasDataFields(_multiHeaders.viewCols)) {
                    this.notify.info(this.noDisplyColumnTip);
                    return;
                }
                mergeSortInfo(_multiHeaders.viewCols, this.settings.sortInfo);
                this.settings.multiHeaders = _multiHeaders;
            }
        }
        return Object.assign({}, this.settings);
    }
    // 显示下拉方案列表
    /**
     * @param {?} $event
     * @return {?}
     */
    onChooseScheme($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = !this.showSchemePanel;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.schemeitemsEleRef && this.currentSchemeItem) {
                /** @type {?} */
                const itemEl = this.schemeitemsEleRef.nativeElement.querySelector(`#schemeitem_${this.currentSchemeItem.id}`);
                if (itemEl) {
                    if (itemEl.scrollIntoViewIfNeeded) {
                        itemEl.scrollIntoViewIfNeeded();
                    }
                    else {
                        itemEl.scrollIntoView();
                    }
                }
            }
        }));
    }
    // 仅显示可见列
    /**
     * @param {?} $event
     * @param {?} searchWords
     * @return {?}
     */
    onlySeeVisibleColumns($event, searchWords) {
        this.switchValue = $event;
        this.filterColumns(searchWords);
    }
    /**
     * @return {?}
     */
    refresh() {
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    hidePanel() {
        this.showSchemePanel = false;
        this.refresh();
    }
    // 新增方案
    /**
     * @param {?} $event
     * @param {?=} saveas
     * @return {?}
     */
    onNewSchemeClick($event, saveas = 'new') {
        if ($event) {
            $event.stopPropagation();
        }
        this.hidePanel();
        this.addNewScheme.emit({ type: saveas || 'new' });
    }
    // 显示方案列表管理窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowSchemeList($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.hidePanel();
        this.showSchemeList.emit();
    }
    /**
     * @private
     * @param {?} schemeSettings
     * @return {?}
     */
    schemeChangedForSingleHeader(schemeSettings) {
        if (!schemeSettings) {
            this._reset2Default();
        }
        else {
            this.settings = schemeSettings;
            this.fields = schemeSettings.viewColumns;
            this.columns[0].forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                f.visible = this.fields.indexOf(f.field) > -1;
            }));
        }
        this.searchResultIsVisibleAll = this.seachResultIsCheckAll();
    }
    /**
     * @private
     * @param {?} schemeSettings
     * @return {?}
     */
    schemeChangedForMultiHeaders(schemeSettings) {
        if (schemeSettings) {
            this.settings = schemeSettings;
            /** @type {?} */
            const options = this.gridInstance.dfs['_state'].initialOptions;
            this.multiHeaderOptions = {
                treeData: this.settings.multiHeaders ? this.settings.multiHeaders.treeData : null,
                columns: options.groupHeaderFields
            };
        }
        else {
            this._reset2DefalutFormMultiHeaders();
        }
    }
    // 方案点击
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSchemeItemClick($event, item) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.currentSchemeItem = item;
            this.showSchemePanel = false;
            /** @type {?} */
            let schemeSettings = null;
            if (item && item.queryConditionString) {
                schemeSettings = JSON.parse(item.queryConditionString);
                schemeSettings = schemeSettings[this.localeSer.localeId];
            }
            if (this.enableMultipleHeaders) {
                this.schemeChangedForMultiHeaders(schemeSettings);
            }
            else {
                this.schemeChangedForSingleHeader(schemeSettings);
            }
            this.schemeSer.setSettings(this.settings);
            this.defaultSettings(item);
            this.schemeChanged.emit(item);
            this.refresh();
        }));
    }
    /**
     * 多表头默认设置
     * @private
     * @param {?=} item
     * @return {?}
     */
    defaultSettings(item) {
        if (this.enableMultipleHeaders) {
            if (!item || (this.settings && this.settings.multiHeaders && !this.settings.multiHeaders.treeData)) { // 系统预置
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.settings.multiHeaders = this.multiHeaderRef.getSettings();
                    this.schemeSer.setSettings(this.settings);
                }));
            }
        }
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    dirtySettings(flag) {
        // this.isChanged = flag;
    }
    /**
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    clearSearch($event, input) {
        if (input && input.value) {
            this.filterColumns('');
            input.value = '';
        }
    }
}
SimpleColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-settings-simple',
                template: "<div class=\"d-flex flex-column f-datagrid-settings-simple\" tabindex=\"0\" #colcontainer\r\n    [style.top.px]=\"top\" [style.height]=\"'calc(100vh - ' +  top + 'px)'\" >\r\n\r\n    <div class=\"header d-flex\">\r\n        <div class=\"f-utils-fill title d-flex flex-row\"> {{ 'datagrid.settings.simple.title' | locale }} \r\n            <button #btnSchemeName class=\"btn ml-3 px-2 scheme-name d-flex flex-row\"  *ngIf=\"enableScheme\" (click)=\"onChooseScheme($event)\">\r\n                <!-- <span *ngIf=\"isChanged\">*</span> -->\r\n                <span>{{ currentSchemeItem? currentSchemeItem._title_ : defaultSchemeName }}</span>\r\n                <span class=\"f-icon f-icon-arrow-chevron-down ml-2\" style=\"font-size: 12px;\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"closed\" (click)=\"cancel($event)\">\r\n            <span class=\"f-icon f-icon-close\" style=\"font-size: 20px;\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"scheme-manager-dropdown\" [style.display]=\"showSchemePanel? '': 'none'\" [style.left.px]=\"btnRef? btnRef.nativeElement.offsetLeft : 97\"  (click)=\"$event.stopPropagation()\">\r\n        <div class=\"f-utils-fill f-utils-flex-column m-2\">\r\n            <div class=\"pb-2\" style=\"max-height: calc(100vh - 300px);overflow: auto\">\r\n                <ul #schemeitems>\r\n                    <li class=\"scheme-manager__item\" [class.active]=\"!currentSchemeItem\" (click)=\"onSchemeItemClick($event, null)\"> \r\n                        <!-- <span *ngIf=\"isChanged && !activeSchemeItem\">*</span> -->\r\n                        {{'datagrid-scheme.syspreset' | locale}}\r\n                    </li>\r\n                    <li [attr.id]=\"'schemeitem_'+ item.id\" class=\"scheme-manager__item d-flex flex-row\" \r\n                        [class.active]=\"currentSchemeItem && currentSchemeItem?.id === item.id\"  \r\n                        *ngFor=\"let item of schemeList\" (click)=\"onSchemeItemClick($event, item)\" title=\"{{item._title_}}\">\r\n                        <!-- <span *ngIf=\"isChanged && activeSchemeItem?.id==item.id\">*</span> -->\r\n                        <span class=\"f-utils-fill mr-1\" style=\"text-overflow: ellipsis;\">{{item._title_}}</span>\r\n                        <span class=\"scheme-manager__label default\" *ngIf=\"item.isDefault\">{{'datagrid-scheme.isDefault' | locale}}</span>\r\n                        <span class=\"scheme-manager__label public\" *ngIf=\"item.type === 'public'\">{{'datagrid-scheme.isPublic' | locale}}</span>\r\n                        <span class=\"scheme-manager__label private\" *ngIf=\"!item.isDefault && item.type === 'private'\">{{'datagrid-scheme.isPrivate' | locale}}</span>\r\n                        <span class=\"scheme-manager__label org\" *ngIf=\"item.type === 'org'\">{{'datagrid-scheme.isOrg' | locale}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"d-flex scheme-manager__button-add\">\r\n                <button (click)=\"onNewSchemeClick($event)\">\r\n                    <span class=\"f-icon f-icon-plus\"></span>{{'datagrid-scheme.newScheme' | locale}}\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"p-2 mt-2\">\r\n                <div class=\"btn-toolbar\" style=\"justify-content: flex-end;\">\r\n                    <button class=\"btn btn-link mr-3\" (click)=\"onShowSchemeList($event)\">{{'datagrid-scheme.mgrScheme' | locale}}</button>\r\n                    <button class=\"btn btn-primary mr-1\" (click)=\"onNewSchemeClick($event, 'saveas')\">{{'datagrid-scheme.saveas' | locale}} </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-utils-fill content d-flex flex-column mb-0\">\r\n        <div class=\"d-flex flex-column\">\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center; height: 24px;\">\r\n                <h5 *ngIf=\"!enableMultipleHeaders\" class=\"count f-utils-fill m-0\" [innerHTML]=\"'datagrid.settings.simple.count' | locale | replaceX: fields.length\"></h5>\r\n                <h5 *ngIf=\"enableMultipleHeaders\" class=\"count m-0\" style=\"font-size: 18px;\">{{ 'headerGroup.title' | locale }}</h5>\r\n                <div class=\"d-flex flex-row \" style=\"align-items: center;justify-content: end;\" [class.f-utils-fill]=\"enableMultipleHeaders\" >\r\n                    <div [class.d-flex]=\"!inputWord.value\"  class=\"flex-row\" [style.display]=\"inputWord.value ? 'none': ''\"  *ngIf=\"!enableMultipleHeaders\">{{'datagrid-scheme.onlyshowcolumns' | locale}} \r\n                        <farris-switch style=\"position: relative;\r\n                        top: 2px;\r\n                        margin-left: 5px;\"\r\n                        id=\"only-visible-columns\"\r\n                        [square]=\"false\" [size]=\"'small'\"\r\n                        [ngModel]=\"switchValue\" \r\n                        (valueChange)=\"onlySeeVisibleColumns($event, inputWord.value)\"\r\n                      \r\n                        ></farris-switch>\r\n                    </div>\r\n                   \r\n                    <button class=\"btn btn-link\" style=\"height: 32px;padding-left: 4px;\" [preview-headers]=\"gh\" [dlgTitle]=\"'headerGroup.preview'|locale\" *ngIf=\"enableMultipleHeaders\"> {{ 'headerGroup.preview' | locale }}</button>\r\n                    <farris-switch style=\"position: relative; top: 2px; margin-left: 5px; display: none;\" id=\"only-visible-columns\"\r\n                        [square]=\"false\" [size]=\"'small'\" [(ngModel)]=\"enableMultipleHeaders\"></farris-switch>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"tip\">\r\n                <ng-container  *ngIf=\"!enableMultipleHeaders\">\r\n                    {{ 'datagrid.settings.simple.tip' | locale }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"enableMultipleHeaders\">\r\n                    {{ 'headerGroup.tips' | locale }}\r\n                </ng-container>\r\n            </div>\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\" [style.display]=\"enableMultipleHeaders?'none':''\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\"\r\n                (input)=\"searchColumn($event)\" style=\"height: 26px;\">\r\n                <div  class=\"input-group-append\" style=\"cursor: pointer\">\r\n                    <span  class=\"fa f-icon-search\" [class.f-icon-close]=\"inputWord.value\" (click)=\"clearSearch($event, inputWord)\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div style=\"padding: 5px 0px;\" class=\"d-flex flex-row\" *ngIf=\"!enableMultipleHeaders\">\r\n            <button class=\"btn btn-link \" style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event,inputWord.value)\" [disabled]=\"!(allCols && allCols.length)\">\r\n                <span class=\"f-icon f-icon-minus-outline checkall\" \r\n                    [class.f-icon-checkbox]=\"searchResultIsVisibleAll.unCheckAll\"\r\n                    [class.f-icon-checkbox-checked]=\"searchResultIsVisibleAll.checkAll\"></span>\r\n                {{ 'datagrid.settings.checkall' | locale }}\r\n            </button>\r\n        </div>\r\n\r\n        <div style=\"overflow: auto;padding-right:3px;\" class=\"f-utils-fill\" [ngStyle]=\"enableMultipleHeaders? {border: '1px solid #dae9ff','border-radius': '6px'} : {}\">\r\n            <ul [style.display]=\"enableMultipleHeaders? 'none':''\" class=\"list-group list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length && fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"!fields.length || fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\" *ngIf=\"!inputWord.value\"></span>\r\n                </li>\r\n            </ul>\r\n            <column-tree #gh=\"groupHeaderTree\" [dg]=\"gridInstance\" [options]=\"multiHeaderOptions\"\r\n                [style.display]=\"enableMultipleHeaders? 'block': 'none'\" style=\"height: 100%;padding-top: 5px;\"></column-tree>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"footer\">\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-link advanced\" (click)=\"showAdvanced($event)\">{{ 'datagrid.settings.advancedMode' | locale: '\u9AD8\u7EA7\u6A21\u5F0F' }}</button>\r\n            <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n            <button class=\"btn btn-secondary cancel\"\r\n                (click)=\"cancel($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n            <button class=\"btn btn-primary ok\" #okbtn\r\n                (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SimpleColumnsComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SimpleColumnsComponent.propDecorators = {
    enableScheme: [{ type: Input }],
    seartTypes: [{ type: Input }],
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    clickToHidden: [{ type: Input }],
    top: [{ type: Input }],
    schemeList: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    container: [{ type: ViewChild, args: ['colcontainer',] }],
    btnOk: [{ type: ViewChild, args: ['okbtn',] }],
    searchInput: [{ type: ViewChild, args: ['inputWord',] }],
    schemeitemsEleRef: [{ type: ViewChild, args: ['schemeitems',] }],
    btnRef: [{ type: ViewChild, args: ['btnSchemeName',] }],
    multiHeaderRef: [{ type: ViewChild, args: ['gh',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }],
    submit: [{ type: Output }],
    submitForGroupHeader: [{ type: Output }],
    closed: [{ type: Output }],
    advanced: [{ type: Output }],
    canceld: [{ type: Output }],
    addNewScheme: [{ type: Output }],
    showSchemeList: [{ type: Output }],
    activeItemChange: [{ type: Output }],
    schemeChanged: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEscKeydown: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
    onEnterKeydown: [{ type: HostListener, args: ['window:keydown.enter', ['$event'],] }],
    onControlGKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const IS_MULTI_HEADER_STRING = '-$MULTIHEADER$';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 保存方案API
 * @type {?}
 */
const SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
/**
 * 获取方案列表API
 * @type {?}
 */
const SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;
/**
 * 方案列表管理- 设默认、删除 API
 * @type {?}
 */
const SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;
/**
 * 权限验证
 * @type {?}
 */
const SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
/** @type {?} */
const LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
class DatagridSchemeService {
    /**
     * @param {?} inject
     */
    constructor(inject) {
        this.inject = inject;
        this.restService = null;
        this.state = {};
        this.perfixStr = '';
        this.schemeList$ = new Subject();
        this.schemeApi = {
            SCHEME_WEBAPI,
            /** 获取方案列表API */
            SCHEME_WEBAPI_QUERY,
            /** 方案列表管理- 设默认、删除 API */
            SCHEME_WEBAPI_UPDATE,
            /** 权限验证 */
            SCHEME_WEBAPI_Auth,
            LANGUAGE_WEBAPI
        };
        this.schemeKey = {};
        this.currentSchemeSettings = null;
    }
    /**
     * @param {?} perfixStr
     * @return {?}
     */
    setUriPerfix(perfixStr) {
        this.perfixStr = perfixStr || '';
    }
    /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    update(d, gridId) {
        if (!this.state[gridId]) {
            this.state[gridId] = {};
        }
        this.state[gridId] = Object.assign(this.state[gridId], d);
    }
    /**
     * @param {?} httpSer
     * @return {?}
     */
    setRestService(httpSer) {
        if (httpSer && httpSer['befRepository']) {
            this.restService = httpSer['befRepository']['restService'];
        }
    }
    /**
     * @private
     * @param {?} uri
     * @param {?} perfix
     * @return {?}
     */
    mergeUri(uri, perfix) {
        return appendPerfixForUri ? appendPerfixForUri(uri, perfix) : uri;
    }
    /**
     * @private
     * @return {?}
     */
    getWebFormKey() {
        /** @type {?} */
        const webformHash = window.location.hash.split('?')[0];
        return webformHash.substring(webformHash.lastIndexOf('/') + 1);
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    destory(gridId) {
        delete this.schemeKey[gridId];
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeKey(gridId) {
        if (!this.schemeKey[gridId]) {
            /** @type {?} */
            const formKey = this.getWebFormKey();
            this.schemeKey[gridId] = `${formKey}_DatagridScheme_${gridId}`;
        }
        return this.schemeKey[gridId];
    }
    /**
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getSchemeList(gridID, isMultiHeader = false) {
        /** @type {?} */
        let uri = this.schemeApi.SCHEME_WEBAPI_QUERY + this.getBelongId(gridID, isMultiHeader);
        uri = this.mergeUri(uri, this.perfixStr);
        if (this.restService) {
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
    }
    /**
     * @param {?} gridID
     * @param {?} schemeData
     * @return {?}
     */
    updateSchemeData(gridID, schemeData) {
        /** @type {?} */
        let schemeList = this.getStateValue(gridID, 'list');
        schemeList = schemeList.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id !== schemeData.id));
        schemeList.push(schemeData);
        this.setSchemeList(gridID, schemeList);
    }
    /**
     * @private
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getBelongId(gridID, isMultiHeader = false) {
        /** @type {?} */
        let id = this.getSchemeKey(gridID);
        if (isMultiHeader) {
            id = id + IS_MULTI_HEADER_STRING;
        }
        return id;
    }
    /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @param {?=} isMultiHeader
     * @return {?}
     */
    saveScheme(scheme, gridID, isUpdate = false, isMultiHeader = false) {
        if (this.restService) {
            /** @type {?} */
            const httpMethod = isUpdate ? 'PUT' : 'POST';
            scheme.belongId = this.getBelongId(gridID, isMultiHeader);
            /** @type {?} */
            const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI, this.perfixStr);
            return this.restService.invoke(uri, httpMethod, null, { body: scheme }, false);
        }
    }
    /**
     * @param {?} param
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    updateScheme(param, gridID, isMultiHeader = false) {
        if (!param) {
            return of(false);
        }
        /** @type {?} */
        const belongId = this.getBelongId(gridID, isMultiHeader);
        param.belongId = belongId;
        if (param.belongId) {
            /** @type {?} */
            const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_UPDATE, this.perfixStr);
            return this.restService.invoke(uri, 'PUT', null, { body: param }, false);
        }
    }
    /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    getStateValue(gridId, ...statePro) {
        /** @type {?} */
        const dgState = this.state[gridId];
        if (dgState) {
            if (statePro && statePro.length) {
                return statePro.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                (r, c) => {
                    return r[c];
                }), dgState);
            }
            return dgState;
        }
        return null;
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    updateStateValue(gridId, propertyName, value) {
        this.update({ [propertyName]: value }, gridId);
    }
    /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    setSchemeList(gridId, newSchemeList) {
        this.updateStateValue(gridId, 'list', newSchemeList);
        this.schemeList$.next(newSchemeList);
    }
    /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    hasSchemeName(gridId, schemeName) {
        /** @type {?} */
        const schemeList = this.getStateValue(gridId, 'list');
        if (!schemeList || !schemeList.length) {
            return false;
        }
        if (typeof schemeName === 'string') {
            return !!schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.name === schemeName.trim()));
        }
        else {
            if (typeof schemeName === 'object') {
                /** @type {?} */
                const replayNames = [];
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n.name) {
                        /** @type {?} */
                        const nameObj = JSON.parse(n.name);
                        // const currentNames = Object.values(nameObj);
                        for (let k in schemeName) {
                            if (nameObj[k] === schemeName[k]) {
                                replayNames.push(k);
                            }
                        }
                    }
                }));
                return replayNames;
            }
        }
    }
    /**
     * @return {?}
     */
    checkAuthority() {
        /** @type {?} */
        const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_Auth, this.perfixStr);
        return this.restService.invoke(uri, 'GET', null, null, false);
    }
    /**
     * @return {?}
     */
    getLanguages() {
        if (this.restService) {
            /** @type {?} */
            const uri = this.mergeUri(this.schemeApi.LANGUAGE_WEBAPI, this.perfixStr);
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
        else {
            return of([]);
        }
    }
    /**
     * @return {?}
     */
    createSchemeTaskID() {
        /** @type {?} */
        const idService = new IdService();
        this['SCHEME_TASK_ID'] = idService.guid();
        this.currentSchemeSettings = null;
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    setSettings(configs) {
        this.currentSchemeSettings = {
            taskid: this['SCHEME_TASK_ID'],
            values: cloneDeep(configs)
        };
    }
    /**
     * @return {?}
     */
    getSettings() {
        return this.currentSchemeSettings;
    }
    /**
     * @param {?} nowSettings
     * @param {?} isMultiHeader
     * @return {?}
     */
    isSchemeChanged(nowSettings, isMultiHeader) {
        let { sortInfo, viewColumns, groupField, columnFormat, expandGroupRows, multiHeaders } = nowSettings;
        let { sortInfo: sortInfo1, viewColumns: viewColumns1, groupField: groupField1, columnFormat: columnFormat1, expandGroupRows: expandGroupRows1, multiHeaders: multiHeaders1 } = this.getSettings().values;
        /** @type {?} */
        const checkSortInfo = (/**
         * @param {?} _sortInfo
         * @return {?}
         */
        (_sortInfo) => {
            if (!_sortInfo || !Object.keys(_sortInfo).length) {
                _sortInfo = {
                    sortName: [],
                    sortOrder: []
                };
            }
            return _sortInfo;
        });
        sortInfo = checkSortInfo(sortInfo);
        sortInfo1 = checkSortInfo(sortInfo1);
        /** @type {?} */
        const checkGroupField = (/**
         * @param {?} _groupField
         * @return {?}
         */
        (_groupField) => {
            if (!_groupField) {
                _groupField = [];
            }
            return _groupField;
        });
        groupField = checkGroupField(groupField);
        groupField1 = checkGroupField(groupField1);
        /** @type {?} */
        let nowconfig;
        /** @type {?} */
        let initConfig;
        if (isMultiHeader) {
            nowconfig = { sortInfo, expandGroupRows, groupField, multiHeaders };
            initConfig = { sortInfo: sortInfo1, expandGroupRows: expandGroupRows1, groupField: groupField1, multiHeaders: multiHeaders1 };
        }
        else {
            nowconfig = { columnFormat, expandGroupRows, groupField, sortInfo, viewColumns };
            initConfig = {
                columnFormat: columnFormat1,
                expandGroupRows: expandGroupRows1,
                groupField: groupField1,
                sortInfo: sortInfo1,
                viewColumns: viewColumns1
            };
        }
        /** @type {?} */
        const _clearData = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return JSON.stringify(data).replace(/UNFIXED/g, '').replace(/"calculationType":-1,/g, '').replace(/"calculationType":-1/g, '');
        });
        return _clearData(nowconfig) != _clearData(initConfig);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NewSchemeComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.dataPermissionIds = [];
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.checkAuthority = new EventEmitter();
        this.schemeInfo = {
            name: '',
            isDefault: false,
            type: 'private',
            orgids: ''
        };
        this.schemeType = 'private';
        this.noPublicAuthority = false;
        this.noOrgAuthority = false;
        this.languages = [{ code: 'zh-CHS', name: '中文简体', default: true }, { code: 'en', name: 'English' }, { code: 'zh-CHT', name: '中文繁体' }];
        this.nameMaxLength = { 'zh-CHS': 9, 'zh-CHT': 9, en: 20 };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    close($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    submit($event) {
        this.submitModal.emit(this.schemeInfo);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.close($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectedOrg($event) {
        if ($event.selections && $event.selections.length) {
            /** @type {?} */
            let orgids = $event.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.orgId));
            this.schemeInfo.orgids = orgids;
        }
    }
    /**
     * @param {?} $event
     * @param {?} val
     * @return {?}
     */
    onSetRangeType($event, val) {
        $event.stopPropagation();
        this.schemeType = val;
        if (val === 'public' || val === 'org') {
            this.checkAuthority.emit({ value: val, schemeInfo: this.schemeInfo });
        }
        else {
            this.schemeInfo.type = val;
        }
    }
    /**
     * @param {?=} hasAuthority
     * @return {?}
     */
    refresh(hasAuthority = { public: true, org: true }) {
        this.schemeInfo = Object.assign({}, this.schemeInfo);
        this.schemeType = this.schemeInfo.type;
        this.noPublicAuthority = !hasAuthority.public;
        this.noOrgAuthority = !hasAuthority.org;
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    getSelectedId($event) {
        if ($event.selections && $event.selections.length) {
            this.schemeInfo.orgids = $event.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.orgId));
        }
        else {
            this.schemeInfo.orgids = '';
        }
    }
    /**
     * @return {?}
     */
    clearAllOrgs() {
        this.schemeInfo.orgids = '';
    }
}
NewSchemeComponent.decorators = [
    { type: Component, args: [{
                selector: 'new-scheme',
                template: "\r\n\r\n\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid-scheme.saveTitle' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill  mx-3 p-3 mt-1\" >\r\n        <!-- <div class=\"input-group mb-3 scheme-manager__search-box\">\r\n            <input #schemeName type=\"text\" class=\"form-control\" maxlength=\"9\" placeholder=\"{{'datagrid-scheme.namePlaceholder' | locale}}\" style=\"height: 26px;\" name=\"name\" [(ngModel)]=\"schemeInfo.name\">\r\n        </div> -->\r\n        <div class=\" mb-3\">\r\n            <language-textbox [(ngModel)]=\"schemeInfo.name\" [editable]=\"true\" [languages]=\"languages\" [maxWords]=\"nameMaxLength\"></language-textbox>\r\n        </div>\r\n            \r\n    \r\n        <div class=\"input-group mb-2\" style=\"border: 0;\">\r\n          \r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"private-scheme\"  name=\"schemeType\"  (click)=\"onSetRangeType($event, 'private')\" value=\"private\" [checked]=\"schemeType === 'private'\">\r\n                <label class=\"custom-control-label\" for=\"private-scheme\">{{'datagrid-scheme.setPrivate' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [zIndex]=\"2040\" [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid-scheme.privateTip' | locale\">?</span>\r\n            </div>\r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"public-scheme\" name=\"schemeType\" (click)=\"onSetRangeType($event, 'public')\" value=\"public\" [checked]=\"schemeType === 'public'\" >\r\n                <label class=\"custom-control-label\" for=\"public-scheme\">{{'datagrid-scheme.setPublic' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [zIndex]=\"2040\" [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid-scheme.publicTip' | locale\">?</span>\r\n            </div>\r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"org-scheme\" name=\"schemeType\" (click)=\"onSetRangeType($event, 'org')\"  value=\"org\" [checked]=\"schemeType === 'org'\" >\r\n                <label class=\"custom-control-label\" for=\"org-scheme\">{{'datagrid-scheme.setOrg' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [zIndex]=\"2040\" [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid-scheme.orgTip' | locale\">?</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group mb-2\" style=\"border: 0;\" *ngIf=\"schemeInfo.type === 'private'\">\r\n            <div class=\"custom-control custom-checkbox  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"default-scheme\" name=\"isDefault\" [(ngModel)]=\"schemeInfo.isDefault\">\r\n                <label class=\"custom-control-label\" for=\"default-scheme\">{{'datagrid-scheme.setDefault' | locale}} <i class=\"scheme-org-tip\">({{'datagrid-scheme.defaultTip' | locale}})</i></label>\r\n                <!-- <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'\u4E0B\u6B21\u8FDB\u5165\u6B64\u529F\u80FD\u65F6\uFF0C\u9ED8\u8BA4\u52A0\u8F7D\u8BE5\u65B9\u6848'\">?</span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"input-group mb-2\" style=\"border: 0;\" *ngIf=\"schemeInfo.type === 'org' && !noOrgAuthority\">\r\n            <div class=\"input-group mb-3\">\r\n                <farris-organization-selector\r\n                    [primaryField]=\"'orgId'\" [displayField]=\"'name'\"\r\n                    [absOrgType]=\"'System_organization'\"\r\n                    [layer]=\"1\" [multiSelect]=\"true\" [showTabIds]=\"'organization'\"\r\n                    [enableHierarchicalLoading]=\"true\" \r\n                    [cascadeCheck]=\"true\" [cascadeDown]=\"true\"\r\n                    (selectionsChange)=\"onSelectedOrg($event)\"\r\n                    [cascadeUp]=\"false\"\r\n                    [orgIds]=\"dataPermissionIds\"\r\n                    (inputClear)=\"clearAllOrgs()\" (tagRemoved)=\"getSelectedId($event)\"\r\n                    [dataPermission]=\"true\" [dataPermissionIds]=\"dataPermissionIds\" \r\n                ></farris-organization-selector>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\"\r\n            (click)=\"submit($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
NewSchemeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NewSchemeComponent.propDecorators = {
    header: [{ type: ViewChild, args: ['header',] }],
    dataPermissionIds: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    checkAuthority: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SchemeListComponent {
    /**
     * @param {?} cd
     * @param {?} localeSer
     * @param {?} injector
     */
    constructor(cd, localeSer, injector) {
        this.cd = cd;
        this.localeSer = localeSer;
        this.injector = injector;
        this.items = [];
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.removeItem = true;
        this.currentSchemeId = '';
        this.columns = [];
        this.currentUserId = '';
        this.changes = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const colName = this.localeSer.getValue('datagrid-scheme.columns.name') || '名称';
        /** @type {?} */
        const colType = this.localeSer.getValue('datagrid-scheme.columns.type') || '属性';
        /** @type {?} */
        const colDefault = this.localeSer.getValue('datagrid-scheme.columns.isDefault') || '默认';
        /** @type {?} */
        const colCreator = this.localeSer.getValue('datagrid-scheme.columns.username') || '创建人';
        /** @type {?} */
        const colMgr = this.localeSer.getValue('datagrid-scheme.columns.mgr') || '管理';
        /** @type {?} */
        const publicTxt = this.localeSer.getValue('datagrid-scheme.isPublic') || '公共';
        /** @type {?} */
        const privateTxt = this.localeSer.getValue('datagrid-scheme.isPrivate') || '个人';
        /** @type {?} */
        const orgTxt = this.localeSer.getValue('datagrid-scheme.isOrg') || '组织';
        this.columns = [
            // {field: 'name', title: '名称', width: 150, template: this.schemeName},
            { field: 'name', title: colName, width: 150, formatter: (/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => {
                    return getMultilingualValue(JSON.parse(v), this.localeSer.localeId);
                }) },
            { field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @return {?}
                 */
                (v, d) => {
                    switch (v) {
                        case 'public':
                            return '<span class="scheme-manager__label px-1 public">' + publicTxt + '</span>';
                        case 'org':
                            return '<span class="scheme-manager__label px-1 org">' + orgTxt + '</span>';
                        case 'private':
                        default:
                            return '<span class="scheme-manager__label px-1 private">' + privateTxt + '</span>';
                    }
                }) },
            { field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },
            { field: 'userName', title: colCreator, width: 80 },
            { title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center', }
        ];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClose($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitClick($event) {
        this.submitModal.emit(this.changes);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    setDefault($event, ctx) {
        /** @type {?} */
        const r = $event == '1';
        // $event.stopPropagation();
        this.items.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            n.isDefault = false;
            if (n.id === ctx.rowData.id && r) {
                n.isDefault = r;
            }
        }));
        this.items = [...this.items];
        /** @type {?} */
        const defaultItem = this.items.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.isDefault));
        if (defaultItem) {
            this.changes = this.changes || {};
            this.changes.defaultId = defaultItem.id;
        }
        // this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    onSchemeDel($event, ctx) {
        if ((this.currentUserId === ctx.rowData["userId"] && ctx.rowData['type'] == 'private') || this.removeItem) {
            $event.stopPropagation();
            /** @type {?} */
            const id = ctx.rowData.id;
            this.items = this.items.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id !== id));
            this.changes = this.changes || {};
            this.changes.deletedIds = [...(this.changes.deletedIds || []), id];
            if (id === this.changes.defaultId) {
                this.changes.defaultId = '';
                delete this.changes.defaultId;
            }
        }
    }
}
SchemeListComponent.decorators = [
    { type: Component, args: [{
                selector: 'scheme-list',
                template: "\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid-scheme.schemeList' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onClose($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill mx-3 mt-1\" >\r\n        <farris-datagrid #dg\r\n            [columns]=\"columns\"\r\n            [data]=\"items\"\r\n            [fit]=\"true\"\r\n            [fitColumns]=\"true\"\r\n            [pagination]=\"false\"\r\n            [editable]=\"false\">\r\n        </farris-datagrid>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\" [disabled]=\"!(items && items.length) && !changes\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #schemeName let-ctx>\r\n    <div class=\"input-group\">\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"ctx.rowData['name']\">\r\n    </div>\r\n</ng-template>\r\n<ng-template #schemeIsDefault let-ctx>\r\n    <div class=\"f-datagrid-cell-formgroup farris-group-auto f-datagrid_scheme-switch\" [style.opacity]=\"ctx.rowData['type'] !== 'private' ? 0.6: 1\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\r\n        <farris-switch [(ngModel)]=\"ctx.rowData['isDefault']\" trueValue=\"1\" falseValue=\"0\"\r\n        (valueChange)=\"setDefault($event, ctx)\"  [disabled]=\"ctx.rowData['type'] !== 'private' || ctx.rowData['isDefault']\"></farris-switch>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template let-ctx #btnDel>\r\n    <a href=\"javascript:void(0)\" (click)=\"onSchemeDel($event, ctx)\" title=\"{{'datagrid-scheme.delete' | locale}}\" \r\n    *ngIf=\"(removeItem || (ctx.rowData['userId'] === currentUserId && ctx.rowData['type']=='private')) && currentSchemeId !== ctx.rowData['id']\">\r\n        <span class=\"f-icon f-icon-yxs_delete\"></span>\r\n    </a>\r\n</ng-template>"
            }] }
];
/** @nocollapse */
SchemeListComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: LocaleService },
    { type: Injector }
];
SchemeListComponent.propDecorators = {
    items: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    removeItem: [{ type: Input }],
    currentSchemeId: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }],
    schemeName: [{ type: ViewChild, args: ['schemeName',] }],
    schemeIsDefault: [{ type: ViewChild, args: ['schemeIsDefault',] }],
    btnDel: [{ type: ViewChild, args: ['btnDel',] }],
    dg: [{ type: ViewChild, args: ['dg',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列设置相关多语资源
 * @type {?}
 */
const DATAGRID_SETTINGS_LOCALEDATA = {
    en: {
        'datagrid-settings': {
            noAuth: {
                public: 'You do not have permission to set the usage scope of the scheme as public.',
                org: 'You do not have permission to set the usage range of the scheme as organization.'
            },
            has: {
                exist: 'The scheme name already exists, please modify it.',
                chs: 'Simplified Chinese name already exists.',
                cht: 'Traditional Chinese name already exists.',
                en: 'English name already exists.'
            },
            required: {
                schemeName: 'Please enter a scheme name.',
                chs: 'Please enter a simplified Chinese name.',
                cht: 'Please enter a name in Traditional Chinese.',
                en: 'Please enter an English name.',
                org: 'Please select an organization.'
            },
            groupRowStatus: {
                label: 'Group Row Status',
                expand: 'open',
                collapse: 'fold'
            },
            column: {
                title: 'Column title',
                fixed: 'Fixed type',
                unFixed: 'Unfixed',
                leftFixed: 'Left fixed',
                rightFixed: 'Right fixed'
            }
        },
        'datagrid-scheme': {
            saveTitle: 'Save Scheme',
            namePlaceholder: 'Please enter a scheme name (no more than 9 characters)',
            setPrivate: 'Private',
            privateTip: 'When set as private, you can only view and use the scheme yourself',
            setPublic: 'Public',
            publicTip: 'When public, all users can view and use the scheme',
            setOrg: 'Organization',
            orgTip: 'When it is set to organization, users in the organization can view and use the scheme',
            setDefault: 'Default',
            defaultTip: 'The next time you enter this function, the scheme will be loaded by default',
            syspreset: 'System preset',
            isDefault: 'Default',
            isPublic: 'Public',
            isOrg: 'Org',
            isPrivate: 'Private',
            newScheme: 'Add New Scheme',
            mgrScheme: 'Manage',
            saveas: 'Save as',
            onlyshowcolumns: 'only the display column',
            schemeList: 'Scheme list',
            delete: 'Delete this shceme',
            columns: {
                name: 'Name',
                type: 'Type',
                isDefault: 'IsDefault',
                username: 'Creator',
                mgr: 'Manage'
            },
            currentSheme: 'Current scheme：',
            schemeChanged: {
                title: 'The scheme has been changed. Do you want to save it as a new scheme?',
                tips: 'cancel: discard modifications; No: save the current scheme; Yes: save as a new scheme.',
                yes: 'Yes',
                no: 'No',
                cancel: 'Cancel'
            },
            noDisplyColumnTip: 'Please set the fields to be displayed.'
        },
        'headerGroup': {
            title: 'Multiple meter heads',
            preview: 'Preview effect',
            tips: 'The fields in the (candidate column) will not be displayed in the list; Click on the field name and display the relevant operation buttons on the right.',
            contextMenus: {
                new: 'New Header',
                newChild: 'New Child Header',
                setDataField: 'Assign Data Columns',
                rename: 'Rename',
                top: 'Top',
                up: 'Up',
                down: 'Down',
                bottom: 'Bottom',
                cancelGroup: 'Cancel',
                remove: 'Remove'
            },
            candidate: 'Candidate columns',
            setHeader: 'Set as header',
            ok: 'Ok',
            cancel: 'Cancel',
            required: 'Please enter a header name!',
            defaultGroupHeaderName: 'NewHeader',
            newHeaderPlaceholder: 'Please enter a header name.',
            newHeaderLabel: 'Header Name'
        }
    },
    'zh-CHS': {
        'datagrid-settings': {
            noAuth: {
                public: '您没有将方案的使用范围设置为公共的权限。',
                org: '您没有将方案的使用范围设置为组织的权限。'
            },
            has: {
                exist: '方案名称已存在，请修改。',
                chs: '简体中文名称已存在。',
                cht: '繁体中文名称已存在。',
                en: '英文名称已存在。'
            },
            required: {
                schemeName: '请输入方案名称。',
                chs: '请输入简体中文名称。',
                cht: '请输入繁体中文名称。',
                en: '请输入英文名称。',
                org: '请选择组织。'
            },
            groupRowStatus: {
                label: '分组行状态',
                expand: '展开',
                collapse: '折叠'
            },
            column: {
                title: '列标题',
                fixed: '固定列',
                unFixed: '不固定',
                leftFixed: '固定在左侧',
                rightFixed: '固定在右侧'
            }
        },
        'datagrid-scheme': {
            saveTitle: '保存方案',
            namePlaceholder: '请输入方案名称（最多不超过9个字符）',
            setPrivate: '设为个人',
            privateTip: '设为个人时，只能自己查看、使用该方案',
            setPublic: '设为公共',
            publicTip: '设为公共时，所有用户都可查看、使用该方案',
            setOrg: '设为组织',
            orgTip: '设为组织时，组织内的用户均能查看、使用该方案',
            setDefault: '设为默认',
            defaultTip: '下次进入此功能时，默认加载该方案',
            syspreset: '系统预制',
            isDefault: '默认',
            isPublic: '公共',
            isOrg: '组织',
            isPrivate: '个人',
            newScheme: '新增方案',
            mgrScheme: '管理',
            saveas: '另存为',
            onlyshowcolumns: '仅看展示列',
            schemeList: '方案列表',
            delete: '删除',
            columns: {
                name: '名称',
                type: '属性',
                isDefault: '默认',
                username: '创建人',
                mgr: '管理'
            },
            currentSheme: '当前方案：',
            schemeChanged: {
                title: '方案已更改，是否另存为新方案？',
                tips: '取消：放弃修改；否：保存当前方案；是：方案另存为',
                yes: '是',
                no: '否',
                cancel: '取消'
            },
            noDisplyColumnTip: '请设置要显示的字段'
        },
        'headerGroup': {
            title: '多表头',
            preview: '预览效果',
            tips: '在（候选列）中的字段，将不在列表中显示; 点击字段名称，在右侧显示相关操作按钮。',
            contextMenus: {
                new: '新建表头',
                newChild: '新建子级表头',
                setDataField: '分配数据列',
                rename: '重命名',
                top: '置顶',
                up: '上移',
                down: '下移',
                bottom: '置底',
                cancelGroup: '取消分组',
                remove: '移除'
            },
            candidate: '(候选列)',
            setHeader: '设为表头',
            ok: '确定',
            cancel: '取消',
            required: '请输入表头名称！',
            defaultGroupHeaderName: '分组表头1',
            newHeaderPlaceholder: '请输入名称',
            newHeaderLabel: '表头名称'
        }
    },
    'zh-CHT': {
        'datagrid-settings': {
            noAuth: {
                public: '您沒有將方案的使用範圍設置爲公共的權限。',
                org: '您沒有將方案的使用範圍設置爲組織的權限。'
            },
            has: {
                exist: '方案名稱已存在，請修改。',
                chs: '簡體中文名稱已存在。',
                cht: '繁體中文名稱已存在。',
                en: '英文名稱已存在。'
            },
            required: {
                schemeName: '請輸入方案名稱.',
                chs: '請輸入簡體中文名稱。',
                cht: '請輸入繁體中文名稱。',
                en: '請輸入英文名稱。',
                org: '請選擇組織。'
            },
            groupRowStatus: {
                label: '分組行狀態',
                expand: '展開',
                collapse: '折疊'
            },
            column: {
                title: '列標題',
                fixed: '固定列',
                unFixed: '不固定',
                leftFixed: '固定在左側',
                rightFixed: '固定在右側'
            }
        },
        'datagrid-scheme': {
            saveTitle: '保存方案',
            namePlaceholder: '請輸入方案名稱（最多不超過9個字符）',
            setPrivate: '設爲個人',
            privateTip: '設爲個人時，只能自己查看、使用該方案',
            setPublic: '設爲公共',
            publicTip: '設爲公共时，所有用戶都可查看、使用該方案',
            setOrg: '設爲組織',
            orgTip: '設爲組織時，組織內的用戶均能查看、使用該方案',
            setDefault: '設爲默認',
            defaultTip: '下次進入此功能時，默認加載該方案',
            syspreset: '系統預制',
            isDefault: '默認',
            isPublic: '公共',
            isOrg: '組織',
            isPrivate: '個人',
            newScheme: '新增方案',
            mgrScheme: '管理',
            saveas: '另存爲',
            onlyshowcolumns: '僅看展示列',
            schemeList: '方案列表',
            delete: '刪除',
            columns: {
                name: '名稱',
                type: '屬性',
                isDefault: '默認',
                username: '創建人',
                mgr: '管理'
            },
            currentSheme: '當前方案：',
            schemeChanged: {
                title: '方案已更改，是否另存爲新方案？',
                tips: '取消：放棄修改；否：保存當前方案；是：方案另存爲',
                yes: '是',
                no: '否',
                cancel: '取消'
            },
            noDisplyColumnTip: '請設置要顯示的字段'
        },
        'headerGroup': {
            title: '多表頭',
            preview: '預覽效果',
            tips: '在（候選列）中的字段，將不在列表中顯示; 點擊字段名稱，在右側顯示相關操作按鈕。',
            contextMenus: {
                new: '新建表頭',
                newChild: '新建子級表頭',
                setDataField: '分配數據列',
                rename: '重命名',
                top: '置頂',
                up: '上移',
                down: '下移',
                bottom: '置底',
                cancelGroup: '取消分組',
                remove: '移除'
            },
            candidate: '(候選列)',
            setHeader: '設爲表頭',
            ok: '確定',
            cancel: '取消',
            newHeaderPlaceholder: '請輸入名稱',
            newHeaderLabel: '表頭名稱',
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
class DatagridSettingsService {
    /**
     * @param {?} injector
     * @param {?} modalSer
     * @param {?} messager
     * @param {?} idService
     * @param {?} localeSer
     */
    constructor(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.currentSchemeitem = null;
        this.prevSchemeItem = null;
        this.debugSer = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.debugSer = this.injector.get(DebugService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
        this.schemeService = new DatagridSchemeService(this.injector);
        this.localeSer.setLocaleData(DATAGRID_SETTINGS_LOCALEDATA);
    }
    /**
     * @return {?}
     */
    get httpRestService() {
        return this._httpRestService;
    }
    ;
    /**
     * @param {?} httpSer
     * @return {?}
     */
    set httpRestService(httpSer) {
        this._httpRestService = httpSer;
        if (this.schemeService) {
            this.schemeService.setRestService(httpSer);
        }
    }
    /**
     * @param {?} perfixStr
     * @return {?}
     */
    setUriPerfixStr(perfixStr) {
        if (perfixStr == '') {
            if (window['gspframeworkService'] && window['gspframeworkService'].common) {
                /** @type {?} */
                const basePath = window['gspframeworkService'].common.getBasePath;
                if (basePath && basePath.get) {
                    perfixStr = basePath.get();
                }
            }
        }
        if (perfixStr != '' && perfixStr !== null) {
            this.schemeService.setUriPerfix(perfixStr);
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    destroy(id) {
        if (this.gridRefs) {
            if (id && this.gridRefs[id]) {
                this.gridRefs[id] = null;
                delete this.gridRefs[id];
            }
            else {
                if (!Object.keys(this.gridRefs).length) {
                    this.gridRefs = null;
                }
            }
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
        this.schemeService.destory(id);
    }
    /**
     * @private
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    writeDebugMsg(msg, type = 'warn') {
        if (this.debugSer) {
            if (this.debugSer[type]) {
                this.debugSer[type](msg);
            }
            else {
                console[type](msg);
            }
        }
    }
    /**
     * @param {?} dg
     * @return {?}
     */
    registerGridInstance(dg) {
        if (!dg) {
            this.writeDebugMsg('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        const id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    }
    /**
     * @param {?} dgID
     * @return {?}
     */
    getGridInstance(dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    }
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    updateSchemeSettings(schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            const schemeContentObj = schemeItem.queryConditionString ? JSON.parse(schemeItem.queryConditionString) : {};
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    const schemeSettings = schemeContentObj[this.localeSer.localeId] || {};
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    }
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    updateActiveSchemeItemSettings(dgId, settings) {
        /** @type {?} */
        const schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
        if (schemeItem) {
            this.schemeService.updateSchemeData(dgId, schemeItem);
        }
    }
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    setActiveSchemeItem(dgId, activeItem) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        if (activeItem) {
            this.activeSchemeItem[schemekey] = cloneDeep(activeItem);
        }
        else {
            delete this.activeSchemeItem[schemekey];
        }
    }
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    getActiveSchemeItem(dgId) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    }
    /**
     * @return {?}
     */
    getSearchTypes() {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    }
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showSimple(gridInstance, settings, selectedSchemeItem) {
        /** @type {?} */
        let _columns = this.getCurrentConfigs().columns || gridInstance.columns;
        /** @type {?} */
        const columns = this.convertColumnsToSimple(_columns);
        columns[0] = [...columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field && n.field !== gridInstance.ControlPanelFeild))];
        /** @type {?} */
        const searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            let simpleRef = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef.hostView);
            simpleRef.instance.columns = columns;
            simpleRef.instance.seartTypes = searchTypes;
            simpleRef.instance.gridInstance = gridInstance;
            simpleRef.instance.schemeSer = this.schemeService;
            if (document.querySelector('#page-wrapper')) {
                simpleRef.instance.top = 76;
            }
            simpleRef.instance.enableScheme = gridInstance.enableScheme;
            if (!settings) {
                settings = this.getCurrentConfigs();
            }
            if (gridInstance.enableScheme) {
                /** @type {?} */
                const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                if (settings) {
                    //  从高级模式 转到 简洁模式时，保存原始值
                    if (!simpleRef.instance['prevSchemeItem'] && this.prevSchemeItem) {
                        simpleRef.instance['prevSchemeItem'] = cloneDeep(this.prevSchemeItem);
                    }
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        if (_currentSchemtItem) {
                            this.currentSchemeitem = _currentSchemtItem;
                            this.prevSchemeItem = cloneDeep(_currentSchemtItem);
                            simpleRef.instance.currentSchemeItem = _currentSchemtItem;
                        }
                        else {
                            if (!Object.keys(settings).length) {
                                settings = this.getLocalSettings(this.createConfigKey(gridInstance.id));
                            }
                            simpleRef.instance.currentSchemeItem = null;
                            simpleRef.instance.settings = settings;
                        }
                    }
                }
                else {
                    this.currentSchemeitem = _currentSchemtItem;
                    this.prevSchemeItem = cloneDeep(_currentSchemtItem);
                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            else {
                if (gridInstance.enableSetMultiHeaders) {
                    simpleRef.instance.settings = this.getCurrentConfigs();
                }
                else {
                    simpleRef.instance.settings = settings;
                }
            }
            /** @type {?} */
            const zIndex = this.commonUtils.getFloatingLayerIndex();
            simpleRef.location.nativeElement.style.zIndex = '' + zIndex;
            document.body.appendChild(simpleRef.location.nativeElement);
            simpleRef.instance.canceld.subscribe((/**
             * @return {?}
             */
            () => {
                this.restoreScheme(gridInstance);
            }));
            simpleRef.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                if (simpleRef) {
                    simpleRef.instance.container.nativeElement.style.right = '-500px';
                    return timer(500);
                }
            }))).subscribe((/**
             * @return {?}
             */
            () => {
                simpleRef.location.nativeElement.remove();
                simpleRef.destroy();
                simpleRef = null;
                if (this.schemeListSubscription) {
                    this.schemeListSubscription.unsubscribe();
                }
                /** @type {?} */
                const _activeSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                if ((!this.currentSchemeitem || (_activeSchemtItem && _activeSchemtItem.id !== this.currentSchemeitem.id)) && (_activeSchemtItem && _activeSchemtItem.queryConditionString)) {
                    /** @type {?} */
                    const _currentSettings = JSON.parse(_activeSchemtItem.queryConditionString)[this.localeSer.localeId];
                    if (_currentSettings) {
                        columns[0].forEach((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => {
                            f.visible = _currentSettings.viewColumns.indexOf(f.field) > -1;
                        }));
                    }
                }
            }));
            // 打开高级设置窗口
            simpleRef.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ({ viewFields, settings, columns }) => {
                // if (viewFields && viewFields.length){
                //     this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, {viewColumns: viewFields});
                // }
                this.setCurrentConfigs(Object.assign({}, settings, { columns }));
                this.prevSchemeItem = simpleRef.instance['prevSchemeItem'];
                this['SCHEME_DEFAULT_TITLE'] = simpleRef.instance.defaultSchemeName;
                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);
            }));
            simpleRef.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.applySettings(e, gridInstance);
            }));
            // 多表列设置
            simpleRef.instance.submitForGroupHeader.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.applySettings(e, gridInstance);
            }));
            // simpleRef.instance.fieldsChange.subscribe((visibleFields: string[]) => {
            //     this.updateActiveSchemeItemSettings(gridInstance.id, {viewColumns: visibleFields})
            // });
            // 打开新增方案窗口
            simpleRef.instance.addNewScheme.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.showNewSchemeDialog(gridInstance, e, simpleRef.instance.collectSettings(), {
                    ok: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        // 更换为新的方案
                        simpleRef.instance.onSchemeItemClick(null, t);
                        this.saveUserConfig;
                    })
                });
            }));
            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            () => {
                this.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    (auth) => {
                        return Object.assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t, simpleRef);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            (list) => {
                simpleRef.instance.schemeList = list;
                if (!list || !list.length) {
                    this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    let hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id === _activeSchemeItem.id));
                    if (!hasActiveItem) {
                        hasActiveItem = this.getDefaultScheme(list); // 获取设置为当前方案的项
                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            simpleRef.instance.schemeChanged.subscribe((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                this.currentSchemeitem = t;
                this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));
            }));
            simpleRef.hostView.detectChanges();
            simpleRef.instance.cd.detectChanges();
            simpleRef.instance.container.nativeElement.style.right = '0px';
            return simpleRef;
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    show(gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            this.schemeService.createSchemeTaskID();
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    restoreScheme(gridInstance) {
        if (gridInstance.enableScheme) {
            this.setActiveSchemeItem(gridInstance.id, this.prevSchemeItem);
            if (!this.prevSchemeItem) {
                this.setCurrentConfigs(null);
            }
        }
        else {
            this.setCurrentConfigs(null);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showAdvanced(gridInstance, opts, selectedSchemeItem) {
        /** @type {?} */
        let _editColSortInfo = true;
        /** @type {?} */
        const editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            _editColSortInfo = false;
        }
        // 判断是否为多表头
        /** @type {?} */
        const showSetColumnsTab = !gridInstance.isMultiHeader() || (gridInstance.isMultiHeader() && gridInstance.enableSetMultiHeaders);
        /** @type {?} */
        const getActiveTabIndex = (/**
         * @return {?}
         */
        () => {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        const activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        const columns = this.convertColumnsToSimple(this.getCurrentConfigs().columns || gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        let currentSettings = this.getCurrentConfigs();
        /** @type {?} */
        const multiHeaderTree = currentSettings && currentSettings.multiHeaders ? currentSettings.multiHeaders.treeData : null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            /** @type {?} */
            const _currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            currentSettings = Object.assign(_currentSettings || {}, currentSettings || {});
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    /** @type {?} */
                    const fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.field === col.field));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
        }
        if (!gridInstance.enableSetMultiHeaders && currentSettings.viewColumns && currentSettings.viewColumns.length) {
            columns[0].forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                f.visible = currentSettings.viewColumns.indexOf(f.field) > -1;
            }));
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        let sortFields = getDataFieldsForMultiHeaders(cloneDeep(columns)).filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable));
        if (gridInstance.enableSetMultiHeaders && currentSettings && currentSettings.multiHeaders) {
            sortFields = getDataFieldsForMultiHeaders(currentSettings.multiHeaders.viewCols).filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable));
        }
        // const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        // const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        // this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        let modalRef = null;
        // const okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        // const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        // const resetText =  this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        const defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns,
                sortTreeData: sortFields,
                // viewTreeData: viewColumnsTreeData,
                gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex,
                schemeInfo: currentSettings,
                enableMultipleHeaders: gridInstance.enableSetMultiHeaders,
                multiHeaders: {
                    columns,
                    treeData: multiHeaderTree
                },
                schemeName: selectedSchemeItem ? selectedSchemeItem['_title_'] : this['SCHEME_DEFAULT_TITLE']
            },
            showButtons: false,
            closed: (/**
             * @param {?} isCloseBtn
             * @param {?} opts
             * @return {?}
             */
            (isCloseBtn, opts) => {
                const { event } = opts;
                if (event && event.code === 'Escape') {
                    this.restoreScheme(gridInstance);
                }
            })
        };
        /** @type {?} */
        const modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = showSetColumnsTab;
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.applySettings(e, gridInstance, { modalRef, currentScheme: selectedSchemeItem });
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            this.restoreScheme(gridInstance);
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            /** @type {?} */
            const settings = modalRef.content;
            const { sortInfo, viewColumns, columnFormat, groupField, multiHeaders } = settings;
            this.setCurrentConfigs({ sortInfo, viewColumns, columnFormat, groupField, multiHeaders });
            this.showSimple(gridInstance, { sortInfo, viewColumns, columnFormat, groupField, multiHeaders }, cloneDeep(selectedSchemeItem));
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    canSetColumnSort(gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    hasEnableSortColumns(gridInstance) {
        /** @type {?} */
        const sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        (c, r) => {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    }
    // private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
    //     const childCols = [];
    //     let _count = colStartIndex;
    //     if (!cols[rowIndex]) {
    //         return  [];
    //     }
    //     cols[rowIndex].slice().forEach(element => {
    //         _count = _count + element.colspan;
    //         if ( _count <= colCount ) {
    //             childCols.push(element);
    //         }
    //     });
    //     cols[rowIndex].splice(0, childCols.length);
    //     return childCols.map((c, i) => {
    //         let n: any = {
    //             data: c,
    //             selectable: forSort ? !!c.sortable : true
    //         };
    //         if (c.colspan && c.colspan > 1) {
    //             n = {
    //                 data: c,
    //                 selectable: false,
    //                 expanded: true,
    //                 children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)
    //             };
    //         }
    //         return n;
    //     });
    // }
    // convertColumns2TreeData(cols: DataColumn[][], forSort = false) {
    //     const columns = cols.map((c: any) => {
    //         const aa = c.map((_) => {
    //             if (_.field.indexOf('farris-datagrid-column_') == -1) {
    //                 _.colspan = _.colspan || 1;
    //                 return _;
    //             }
    //             return null;
    //         });
    //         return aa.filter(n => n);
    //     });
    //     if (columns.length === 1) {
    //         return columns[0].map(c => {
    //             return {
    //                 data: c,
    //                 selectable: forSort ? !!c.sortable : true
    //             };
    //         });
    //     } else {
    //         return columns[0].map((c, i) => {
    //             if (c.colspan && c.colspan > 1) {
    //                 return {
    //                     data: c,
    //                     selectable: false,
    //                     expanded: true,
    //                     children: this.getChilds(columns, 1, 0, c.colspan, forSort)
    //                 };
    //             } else {
    //                 return {
    //                     data: c,
    //                     selectable: forSort ? !!c.sortable : true
    //                 };
    //             }
    //         });
    //     }
    // }
    // private checkViewTreeNodes(treeNodes: TreeNode[]) {
    //     treeNodes.forEach((tn: TreeNode) => {
    //         if (!tn.children || !tn.children.length) {
    //             tn.selectable = true;
    //         } else {
    //             tn.selectable = false;
    //             this.checkViewTreeNodes(tn.children);
    //         }
    //     });
    // }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    _convertColumnsToSimple(gridInstance) {
        /** @type {?} */
        let cols = gridInstance.columns;
        // 重置列顺序为最初设计时的顺序
        /** @type {?} */
        const gridOpts = gridInstance.dfs._state.initialOptions;
        if (gridOpts.columnFields) {
            /** @type {?} */
            let desginCols = gridOpts.columnFields;
            /** @type {?} */
            const newColumns = [];
            desginCols.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        newColumns.push(col);
                    }
                }
            }));
            cols = [newColumns];
        }
        return cols;
    }
    /**
     * @param {?} cols
     * @return {?}
     */
    convertColumnsToSimple(cols) {
        if (!Array.isArray(cols[0])) {
            cols = [cols];
        }
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        (_cols) => {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string',
                        fixed: c.fixed || 'UNFIXED'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    resetGridView(gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        const dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            const options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                const newColumns = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    }
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @param {?=} _scheme
     * @return {?}
     */
    updateGridView(modalRef, gridInstance, btn = null, _scheme = null) {
        /** @type {?} */
        const settings = modalRef.content;
        if (settings) {
            const { sortInfo, viewColumns, columnFormat, groupField, expandGroupRows, multiHeaders } = settings;
            /** @type {?} */
            const _colformats = columnFormat ? this.convertColumnsToSimple(columnFormat)[0] : [];
            this.saving = true;
            /** @type {?} */
            let _groupField = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                if (typeof groupField === 'string') {
                    _groupField = groupField;
                }
                else if (Array.isArray(groupField)) {
                    _groupField = groupField.join(',');
                }
            }
            /** @type {?} */
            let _sortInfo = sortInfo;
            // 当多表头需要清理排序字段与分组字段，保证这些字段必须在表头中
            if (gridInstance.enableSetMultiHeaders && multiHeaders) {
                if (_groupField) {
                    _groupField = cleanGroupFields(multiHeaders.viewCols, _groupField.split(','));
                }
                if (sortInfo && sortInfo.sortName && sortInfo.sortName.length) {
                    _sortInfo = cleanSortFields(multiHeaders.viewCols, sortInfo);
                }
            }
            /** @type {?} */
            const saveData = { sortInfo: _sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats, expandGroupRows: expandGroupRows, multiHeaders };
            /** @type {?} */
            const refreshGrid = (/**
             * @return {?}
             */
            () => {
                if (gridInstance.groupRows) {
                    gridInstance.expandGroupRows = expandGroupRows;
                    gridInstance.groupField = _groupField;
                }
                if (gridInstance.enableSetMultiHeaders) {
                    // 设置表头
                    refreshGridColumns(gridInstance, multiHeaders.viewCols || []);
                }
                else {
                    if (viewColumns && viewColumns.length) {
                        gridInstance.columns = gridInstance.columns.map((/**
                         * @param {?} cols
                         * @return {?}
                         */
                        cols => {
                            this.updateColumnFormat(cols, columnFormat, gridInstance);
                            return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);
                        }));
                    }
                }
                gridInstance.columnsChanged(true);
                if (sortInfo && Object.keys(sortInfo).length) {
                    const { sortName, sortOrder } = sortInfo;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
            });
            /** @type {?} */
            const saveCurrent = (/**
             * @return {?}
             */
            () => {
                this.setUserConfig(gridInstance.id, saveData).subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (btn) {
                        btn.disabled = false;
                    }
                    this.saving = false;
                    refreshGrid();
                    this.setActiveSchemeItem(gridInstance.id, _scheme);
                    this.prevSchemeItem = _scheme;
                    this.updateActiveSchemeItemSettings(gridInstance.id, saveData);
                    this.setCurrentConfigs(saveData);
                    modalRef.close();
                }));
            });
            if (gridInstance.showConfirmWhenSchemeChanged && gridInstance.enableScheme) {
                /** @type {?} */
                const languageRes = this.localeSer.getValue('datagrid-scheme.schemeChanged');
                /** @type {?} */
                const _changed = this.schemeService.isSchemeChanged(saveData, gridInstance.enableSetMultiHeaders);
                if (_changed) {
                    /** @type {?} */
                    const msgDlg = this.messager.question2(languageRes.title, [
                        {
                            text: languageRes.cancel,
                            cls: 'btn btn-light',
                            handle: (/**
                             * @return {?}
                             */
                            () => {
                                this.saving = false;
                                modalRef.close();
                                msgDlg.close();
                                this.restoreScheme(gridInstance);
                            })
                        },
                        {
                            text: languageRes.no,
                            cls: 'btn btn-secondary',
                            handle: (/**
                             * @return {?}
                             */
                            () => {
                                // 保存到当前方案
                                msgDlg.close();
                                saveCurrent();
                            })
                        },
                        {
                            text: languageRes.yes,
                            cls: 'btn btn-primary',
                            handle: (/**
                             * @return {?}
                             */
                            () => {
                                // 另存新方案
                                this.showNewSchemeDialog(gridInstance, { type: 'saveas' }, saveData, {
                                    ok: (/**
                                     * @param {?} t
                                     * @return {?}
                                     */
                                    (t) => {
                                        this.saving = false;
                                        modalRef.close();
                                        this.currentSchemeitem = t;
                                        this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));
                                        refreshGrid();
                                    }),
                                    cancel: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        this.saving = false;
                                        if (btn) {
                                            btn.disabled = false;
                                        }
                                    })
                                });
                                msgDlg.close();
                            })
                        },
                    ]);
                }
                else {
                    if (this.currentSchemeitem && this.prevSchemeItem && this.currentSchemeitem.id === this.prevSchemeItem.id) {
                        this.saving = false;
                        modalRef.close();
                        refreshGrid();
                    }
                    else {
                        saveCurrent();
                    }
                }
            }
            else {
                saveCurrent();
            }
        }
        else {
            modalRef.close();
        }
    }
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance) {
        /** @type {?} */
        const hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        let newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === field));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c && c.field && c.field !== '_datagrid-setting-control_'));
    }
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    isNewAddColumn(field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field === field));
    }
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    updateColumnFormat(cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                /** @type {?} */
                const formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field === col.field));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    col.fixed = formatCol.fixed === 'UNFIXED' ? '' : formatCol.fixed;
                    col.title = formatCol.title;
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            if (!formatCol.groupFooter.options) {
                                formatCol.groupFooter.options = {};
                            }
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            if (!formatCol.footer.options) {
                                formatCol.footer.options = {};
                            }
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    }
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    createConfigKey(gridId) {
        /** @type {?} */
        const grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            this.writeDebugMsg('DatagridSettingService: Can not find the grid instance.');
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentUserSettings(gridId) {
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        const config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            const { sortName, sortOrder, columns } = gridInstance;
            if (sortName) {
                /** @type {?} */
                const sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            const viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible || n.visible === undefined)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(this._convertColumnsToSimple(gridInstance))[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    saveUserConfig(gridId) {
        /** @type {?} */
        const config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    }
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    setUserConfig(gridId, config) {
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        const currentConfig = localStorage.getItem(key);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            if (gridIns && gridIns.enableSetMultiHeaders) {
                _config['isMultiHeader'] = true;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                const activeScheme = this.getActiveSchemeItem(gridId);
                if (activeScheme) {
                    this.updateSchemeSettings(activeScheme, config);
                    if (activeScheme.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme, gridId, true, gridIns.enableSetMultiHeaders);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        (t) => {
                            if (t.success) {
                                /** @type {?} */
                                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {
                                    return this.schemeService.saveScheme(activeScheme, gridId, true, gridIns.enableSetMultiHeaders);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    // 如为系统预制时，按无方案处理
                    return this._saveUserConfig(key, config ? _config : '');
                    // return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    }
    /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getUserConfig(key, isMultiHeader = false) {
        if (this.httpRestService) {
            return this._getUserConfig(key, isMultiHeader);
        }
        else {
            return of(this.getLocalSettings(key, isMultiHeader));
        }
    }
    /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    getLocalSettings(key, isMultiHeader = false) {
        /** @type {?} */
        const config = localStorage.getItem(key);
        if (config) {
            /** @type {?} */
            const con = JSON.parse(config);
            if (isMultiHeader && !con['isMultiHeader']) {
                return null;
            }
            else {
                if (con['isMultiHeader']) {
                    return null;
                }
            }
            if (con[this.localeSer.localeId]) {
                return con[this.localeSer.localeId];
            }
            else {
                if (Object.keys(con).indexOf('viewColumns') > -1) {
                    return con;
                }
                return null;
            }
        }
        else {
            return null;
        }
    }
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    getDefaultScheme(schemeList) {
        // 0、过滤出当前语言的方案列表
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        schemeList = schemeList.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return JSON.parse(n.name)[this.localeSer.localeId];
        }));
        /** @type {?} */
        let defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.isDefault));
            if (!defaultScheme) {
                /** @type {?} */
                let publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.type === 'public'));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.type === 'org'));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSettings(gridId) {
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        let schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([schemeList, userSetting, supportedLanguages]) => {
            schemeList = schemeList || [];
            this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                const defaultScheme = this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    let userSettings = null;
                    if (defaultScheme.queryConditionString) {
                        userSettings = JSON.parse(defaultScheme.queryConditionString);
                    }
                    if (userSettings) {
                        /** @type {?} */
                        const localeId = this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    }
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    _saveUserConfig(key, config) {
        try {
            /** @type {?} */
            const userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            this.writeDebugMsg(e, 'error');
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    resetUserConfig(gridInstance, modalRef) {
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                return this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    }
    /**
     * @private
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    _getUserConfig(key, isMultiHeader = false) {
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            (ucs) => {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    let c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (isMultiHeader && !c['isMultiHeader']) {
                            return null;
                        }
                        else {
                            if (c['isMultiHeader']) {
                                return null;
                            }
                        }
                        if (c[this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[this.localeSer.localeId];
                        }
                        else {
                            c[this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            if (this.debugSer) {
                this.debugSer.error(e);
            }
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    buildSubmitData(gridId, settings = null) {
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        const localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        const currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    }
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?} authInfo
     * @param {?} simpleRef
     * @return {?}
     */
    showSchemeListDialog(gridInstance, schemeList, authInfo, simpleRef) {
        /** @type {?} */
        const modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: (schemeList || []).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return JSON.parse(n.name)[this.localeSer.localeId];
                })),
                removeItem: authInfo.success,
                currentUserId: authInfo.currentUserId,
                currentSchemeId: this.currentSchemeitem ? this.currentSchemeitem.id : ''
            },
            showButtons: false
        };
        /** @type {?} */
        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        // schemeListDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        const instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            this.schemeService.updateScheme(t, gridInstance.id, gridInstance.enableSetMultiHeaders).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                const msg = '列设置方案保存成功。';
                if (this.notifyService) {
                    this.notifyService.success(msg);
                }
                else {
                    this.messager.success(msg);
                }
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                let newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                schemeListDlg.close();
                /** @type {?} */
                const currentScheme = this.getActiveSchemeItem(gridInstance.id);
                if (!currentScheme) {
                    this.setActiveSchemeItem(gridInstance.id, null);
                    simpleRef.instance.currentSchemeItem = null;
                    simpleRef.instance.resetToDefault();
                    this.prevSchemeItem = null;
                    simpleRef.instance.onSubmitClick();
                }
            }));
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} e
     * @param {?} settings
     * @param {?} callback
     * @return {?}
     */
    showNewSchemeDialog(gridInstance, e, settings, callback) {
        /** @type {?} */
        const modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        // newSchemeDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        const instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            newSchemeDlg.close();
            if (callback && callback.cancel) {
                callback.cancel();
            }
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.createNewScheme(gridInstance.id, t, e.type === 'new', settings);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t.flag === false) {
                /** @type {?} */
                const msg = t.msg;
                /** @type {?} */
                let _msg = msg;
                if (msg) {
                    if (msg.indexOf('|') > -1) {
                        _msg = msg.split('|').map((/**
                         * @param {?} langcode
                         * @return {?}
                         */
                        (langcode) => {
                            return this.localeSer.getValue('datagrid-settings.' + langcode);
                        })).join('');
                    }
                    else {
                        _msg = this.localeSer.getValue('datagrid-settings.' + msg);
                    }
                    if (this.notifyService) {
                        this.notifyService.info(_msg);
                    }
                    else {
                        this.messager.info(_msg);
                    }
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            this.schemeService.setSchemeList(gridInstance.id, schemeList);
            if (callback && callback.ok) {
                callback.ok(t);
            }
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            (auth) => {
                return Object.assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            let hasAuthority = { public: true, org: true };
            // 您没有将方案的使用范围设置为公共的权限。
            /** @type {?} */
            let _msg = 'noAuth.public';
            if (t.type.value === 'org') {
                // 您没有将方案的使用范围设置为组织的权限。
                _msg = 'noAuth.org';
            }
            /** @type {?} */
            const msg = this.localeSer.getValue('datagrid-settings.' + _msg);
            if (t.success) {
                /** @type {?} */
                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeList(gridId) {
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        return this.schemeService.getSchemeList(gridId, gridIns.enableSetMultiHeaders);
    }
    /**
     * 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     * @param {?} gridId
     * @param {?} data
     * @param {?=} isNewScheme
     * @param {?=} currentSettings
     * @return {?}
     */
    createNewScheme(gridId, data, isNewScheme = true, currentSettings) {
        if (!data.name) {
            // msg 请输入方案名称
            return of({ flag: false, msg: 'required.schemeName' });
        }
        else {
            /** @type {?} */
            const hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                // msg '方案名称已存在，请修改。'
                return of({ flag: false, msg: 'has.exist' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                const getMessageCode = (/**
                 * @param {?} langCode
                 * @return {?}
                 */
                (langCode) => {
                    if (langCode === 'zh-CHS') {
                        return 'has.chs'; // 简体中文名称已存在。
                    }
                    else if (langCode === 'zh-CHT') {
                        return 'has.cht'; // 繁體中文名稱已存在。
                    }
                    else {
                        return 'has.en'; // 英文名称已存在
                    }
                });
                if (hasName.includes(this.localeSer.localeId)) {
                    /** @type {?} */
                    const msg = getMessageCode(this.localeSer.localeId);
                    return of({ flag: false, msg });
                }
                else {
                    /** @type {?} */
                    const msgs = hasName.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return getMessageCode(n);
                    }));
                    return of({ flag: false, msg: msgs.join('|') });
                }
            }
        }
        /** @type {?} */
        const requiredName = [];
        if (!data.name[this.localeSer.localeId]) {
            requiredName.push(this.localeSer.localeId);
        }
        // this.languages.forEach(n => {
        //     if (data.name[n.code] === '' || data.name[n.code] === undefined) {
        //         requiredName.push(n.code);
        //     }
        // });
        if (requiredName.length) {
            /** @type {?} */
            const msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n === 'zh-CHS') {
                    return 'required.chs'; //'请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return 'required.cht'; //'请输入繁体中文名称。';
                }
                else {
                    return 'required.en'; // '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('|') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            // msg '请选择组织'
            return of({ flag: false, msg: 'required.org' });
        }
        /** @type {?} */
        let _config = null;
        if (!isNewScheme) {
            /** @type {?} */
            const LOCALEID = this.localeSer.localeId;
            if (currentSettings && currentSettings.columnFormat) {
                currentSettings.columnFormat = this.convertColumnsToSimple(currentSettings.columnFormat);
            }
            _config = { [LOCALEID]: currentSettings };
        }
        /** @type {?} */
        const newId = this.idService.guid();
        /** @type {?} */
        let isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        if (gridInstance && gridInstance.enableSetMultiHeaders && _config) {
            _config['isMultiHeader'] = gridInstance.enableSetMultiHeaders;
        }
        /** @type {?} */
        const scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId, false, gridInstance.enableSetMultiHeaders).pipe(map((/**
         * @return {?}
         */
        () => {
            return scheme;
        })));
    }
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    setSchemeList(schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    }
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    buildOrgAndSchemeRelations(schemeId, orgIds) {
        if (!orgIds || !orgIds.length) {
            return [];
        }
        if (typeof orgIds === 'string') {
            orgIds = orgIds.split(',');
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return {
                id: this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentSchemeSettings(gridId) {
        /** @type {?} */
        const activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    setCurrentConfigs(settings) {
        this['CURRENT_CONFIGS'] = settings;
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentConfigs() {
        return this['CURRENT_CONFIGS'] || {};
    }
    /**
     * @private
     * @param {?} e
     * @param {?} gridInstance
     * @param {?=} modal
     * @return {?}
     */
    applySettings(e, gridInstance, modal) {
        e.target.disabled = true;
        if (this.saving) {
            return;
        }
        if (!this.saving) {
            /** @type {?} */
            let _scheme;
            /** @type {?} */
            let dlg;
            if (modal) {
                const { modalRef, currentScheme } = modal;
                dlg = modalRef;
                _scheme = currentScheme;
            }
            else {
                dlg = e;
                _scheme = e.currentScheme;
            }
            this.updateGridView(dlg, gridInstance, e.target, _scheme);
        }
    }
    /**
     * @param {?} viewCols
     * @param {?} gridInitOptions
     * @return {?}
     */
    getMultiHeaderColumns(viewCols, gridInitOptions) {
        return mergetColumnOptions(viewCols, gridInitOptions);
    }
}
DatagridSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: IdService },
    { type: LocaleService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSortSettingComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this.selectedIds = [];
        this.treeData = [];
        this.sortInfoChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    setFieldSortOrder($event, data, order) {
        $event.stopPropagation();
        data.sortable = true;
        data.order = order;
        if (!order) {
            this.ms.moveToLeft(data);
        }
        this.cd.detectChanges();
        this.onSelectionsChange(null);
        return false;
    }
    /**
     * @return {?}
     */
    getSortInfo() {
        if (this.ms.selections) {
            /** @type {?} */
            const names = [];
            /** @type {?} */
            const orders = [];
            this.ms.selections.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                col.order = col.order || 'asc';
                names.push(col.field);
                orders.push(col.order);
            }));
            return { sortName: names, sortOrder: orders };
        }
        return '';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectionsChange($event) {
        /** @type {?} */
        const si = this.getSortInfo();
        this.sortInfoChange.emit(si);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBeforeMove($event) {
        /** @type {?} */
        const items = (/** @type {?} */ ($event.items));
        if ($event.target.indexOf('rightAll') > -1) {
            for (const id in items) {
                if ($event.items[id]) {
                    $event.items[id].order = 'asc';
                }
            }
        }
        else {
            if ($event.target === 'right') {
                for (const id in items) {
                    if ($event.items[id]) {
                        $event.items[id].order = 'asc';
                    }
                }
            }
        }
    }
}
DatagridSortSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'sort-setting',
                template: "<div style=\"padding: 10px;height: 100%;\">\r\n<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'List'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" [rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (dataChange)=\"onSelectionsChange($event)\" (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\" >\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n            <!-- <span class=\"f-icon f-icon-sort-asc-sm sort-label\" title=\"\u5347\u5E8F\" *ngIf=\"data.sortable && data.order === 'asc'\"></span>\r\n            <span class=\"f-icon f-icon-sort-desc-sm  sort-label\" title=\"\u964D\u5E8F\" *ngIf=\"data.sortable && data.order === 'desc'\"></span> -->\r\n            <div class=\"d-flex\">\r\n                <div style=\"width: 120px;white-space: nowrap;min-width: 60px\">\r\n                    {{ data[textField] }} \r\n                </div>\r\n                <div class=\"farris-input-wrap  farris-checkradio-hor flex-fill\" style=\"justify-content: right;flex-wrap:nowrap\">\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'asc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\" data.order && data.order !== 'asc'\" [class.f-icon-check-circle]=\"!data.order || data.order === 'asc'\"></span>\r\n                        {{'datagrid.settings.asc'|locale}}\r\n                    </button>\r\n                    \r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'desc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\"data.order !== 'desc'\" [class.f-icon-check-circle]=\"data.order === 'desc'\"></span>\r\n                        {{'datagrid.settings.desc'|locale}}\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext sort-btns\" style=\"font-size: 12px;\" style=\"margin-right: 0;\" (click)=\"setFieldSortOrder($event, data, '')\" title=\"{{'datagrid.settings.cancelSort'|locale}}\">\r\n                        <span class=\"f-icon  f-icon-unsort\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>\r\n</div>"
            }] }
];
/** @nocollapse */
DatagridSortSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
DatagridSortSettingComponent.propDecorators = {
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    selectedIds: [{ type: Input }],
    treeData: [{ type: Input }],
    ms: [{ type: ViewChild, args: ['ms',] }],
    sortInfoChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnGroupSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.fields = [];
        this.formatColumns = [];
        this.groupFields = [];
        this.expandGroupRows = true;
        this.enabelGroupFooter = false;
        this.groupFieldsChange = new EventEmitter();
        this.formatColumnsChange = new EventEmitter();
        this.expandGroupRowsChange = new EventEmitter();
        // 分组列
        this.groupColumns = [];
        // 所有允许分组列
        this.allowGroupColumns = [];
        this.activeCalculationCol = null;
        this.showSelectColumnsPanel = false;
        this.summaryItems = [];
        this.summaryItems2 = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        //this.formatColumns = getDataFieldsForMultiHeaders(this.columns);
        this.setGroupColumns();
        this.registerEventHandle();
        this.initCalculationColumns();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!this.colForm.pristine) {
                    this.formatColumnsChange.emit(this.formatColumns);
                }
            }));
        }
        this.formatColumns.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.checkColumnOptions(n);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {
            this.formatColumns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.checkColumnOptions(n);
            }));
            this.setGroupColumns();
            this.initCalculationColumns();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCalculationColumns() {
        if (this.formatColumns) {
            this.activeCalculationCol = this.formatColumns[0];
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerEventHandle() {
        this.groupingSettingEl.nativeElement.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target !== this.selectcolumnspanel.nativeElement) {
                this.showSelectColumnsPanel = false;
            }
        }), false);
    }
    /**
     * @private
     * @return {?}
     */
    setGroupColumns() {
        if (this.groupFields && this.groupFields.length) {
            /** @type {?} */
            const cols = this.formatColumns;
            this.groupColumns = this.groupFields.map((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                /** @type {?} */
                const col = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.field === f));
                return col;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.groupFieldsChange.emit(this.groupFields);
        }
        else {
            this.groupColumns = [];
        }
        this.onGroupFieldsChange();
    }
    /**
     * @private
     * @return {?}
     */
    getAllowGroupingColumns() {
        /** @type {?} */
        const cols = this.formatColumns;
        return cols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (n.field.indexOf('farris-datagrid-column_') > -1) {
                return false;
            }
            return n.allowGrouping || n.allowGrouping === undefined;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    onGroupFieldsChange() {
        this.groupFieldsChange.emit(this.groupFields);
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    checkColumnOptions(col) {
        if (col) {
            if (col.groupFooter === undefined) {
                col.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                col.groupFooter.options = col.groupFooter.options || { calculationType: -1 };
                if (col.groupFooter.options.calculationType === undefined) {
                    col.groupFooter.options.calculationType = -1;
                }
            }
            // if (this.activeField.footer === undefined) {
            //     this.activeField.footer =  { options: {calculationType: -1} };
            // } else {
            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};
            //     if (this.activeField.footer.options.calculationType === undefined) {
            //         this.activeField.footer.options.calculationType = -1;
            //     }
            // }
        }
    }
    /**
     * 显示或隐藏字段选取面板
     * @param {?} $event
     * @return {?}
     */
    toggleGroupingColumnPanel($event) {
        $event.stopPropagation();
        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;
        this.allowGroupColumns = this.getAllowGroupingColumns();
    }
    /**
     * 添加分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    addGroupColumn($event, col) {
        $event.stopPropagation();
        if (this.groupFields.indexOf(col.field) === -1) {
            this.groupColumns = [...this.groupColumns, col];
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.onGroupFieldsChange();
            this.showSelectColumnsPanel = false;
        }
    }
    /**
     * 移除分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onRemoveGroupingField($event, col) {
        $event.stopPropagation();
        this.groupFields = this.groupFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== col.field));
        this.setGroupColumns();
    }
    /**
     * 拖动分组字段进行排序
     * @param {?} $event
     * @return {?}
     */
    onGroupingFieldDropped($event) {
        const { removedIndex, addedIndex } = $event;
        /** @type {?} */
        const removedItem = this.groupFields.splice(removedIndex, 1);
        this.groupFields.splice(addedIndex, 0, ...removedItem);
        this.setGroupColumns();
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onFieldClick($event, col) {
        this.activeCalculationCol = col;
    }
}
ColumnGroupSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-group-setting',
                template: "<div #groupingSetting class=\"d-flex flex-column flex-fill column-group-setting\">\r\n\r\n    <div region=\"north\" class=\"north d-flex flex-column group-fields\" style=\"height: 78px; \">\r\n        <div class=\"title d-flex flex-row\" style=\"justify-content: space-between;\">\r\n            <div>{{'datagrid.settings.grouppingField' | locale }}\r\n                <span class=\"text-warning\"> ({{'datagrid.settings.moreGrouppingFieldWarningMessage' | locale }})</span>\r\n            </div>\r\n            <div *ngIf=\"groupColumns && groupColumns.length\">\r\n                {{'datagrid-settings.groupRowStatus.label' | locale}}\uFF1A  <farris-switch style=\"display: inline-block;\"\r\n                [square]=\"false\"\r\n                [checked]=\"true\"\r\n                [(ngModel)]=\"expandGroupRows\"\r\n                [checkedLabel]=\"'datagrid-settings.groupRowStatus.expand' | locale\" [uncheckedLabel]=\"'datagrid-settings.groupRowStatus.collapse' | locale\" \r\n                (valueChange)=\"expandGroupRowsChange.emit(!!$event)\"\r\n                ></farris-switch>\r\n            </div>\r\n        </div>\r\n        <div #groupfieldcontainer class=\"flex-fill p-2 all-fields\">\r\n            <ul class=\"list-group\" style=\"display: inline-block;\"  column-group-drag (drop)=\"onGroupingFieldDropped($event)\">\r\n                <li class=\"list-group-item list-group-item-action btn btn-light smooth-dnd-draggable-wrapper group-field\"\r\n                *ngFor=\"let item of groupColumns\">\r\n                    {{ item.title }}\r\n                    <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" title=\"{{'datagrid.settings.removeGrouppingFieldTip' | locale }}\" (click)=\"onRemoveGroupingField($event, item)\"></span>\r\n                </li>\r\n\r\n                <li class=\"list-group-item list-group-item-action btn btn-light btn-add-groupfield\" title=\"{{'datagrid.settings.addGrouppingFieldTip' | locale }}\"\r\n                    *ngIf=\"!groupFields || groupFields.length < 3\" (click)=\"toggleGroupingColumnPanel($event)\" style=\"border-radius: 20px!important;\">\r\n                   <span class=\"f-icon f-icon-add\" style=\"font-size: 24px;\"></span>\r\n                </li>\r\n            </ul>\r\n            <div #selectcolumnspanel class=\"group-field-panel\" [style.display]=\"showSelectColumnsPanel? '': 'none'\"\r\n            [style.width.px]=\"groupfieldcontainer.offsetWidth - 16\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item list-group-item-action btn btn-light\" *ngFor=\"let item of allowGroupColumns\"\r\n                    (click)=\"addGroupColumn($event, item)\" [style.display]=\"groupFields?.indexOf(item.field) > -1 ? 'none': ''\">\r\n                        {{ item.title }}\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div region=\"center\" class=\"center  d-flex flex-column flex-fill\" style=\"overflow:hidden;\" *ngIf=\"enabelGroupFooter\">\r\n        <div class=\"group-sum-fields\">\r\n            {{'datagrid.settings.grouppingSummary' | locale}}\r\n        </div>\r\n        <div class=\"flex-fill p-2\" style=\" background-color: #fff; overflow: auto;\">\r\n            <div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n                <div region=\"west\" class=\"west d-flex flex-column\" style=\"width: 360px; min-width:260px;overflow: hidden;\">\r\n                    <div style=\"overflow: auto;padding-right: 5px;\" class=\"flex-fill\">\r\n                        <ul class=\"list-group  list-group-flush\">\r\n                            <li class=\"list-group-item list-group-item-action format-setting-column\"\r\n                            *ngFor=\"let item of formatColumns\"\r\n                            [class.active]=\"activeCalculationCol && activeCalculationCol.field === item.field\"\r\n                            (click)=\"onFieldClick($event, item)\"\r\n                             >\r\n                                {{ item.title }}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                 \r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px; border-right: 0px\">\r\n                    <form #groupSumform=\"ngForm\">\r\n                        <div class=\"farris-group-wrap\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryType' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                   \r\n                                    <farris-combo-list name=\"groupFooter.options.calculationType\" \r\n                                    [data]=\" activeCalculationCol?.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                                    [editable]=\"false\"\r\n                                    [(ngModel)]=\"activeCalculationCol?.groupFooter.options.calculationType\"\r\n                                    [idField]=\"'value'\"\r\n                                    [textField]=\"'title'\"\r\n                                    [enableClear]=\"false\"></farris-combo-list>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"farris-group-wrap\" *ngIf=\"activeCalculationCol?.groupFooter.options.calculationType == -1\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryText' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                    <input type=\"input\" name=\"groupFooter.options.text\" class=\"form-control\" [(ngModel)]=\"activeCalculationCol?.groupFooter.options.text\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ColumnGroupSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnGroupSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    formatColumns: [{ type: Input }],
    groupFields: [{ type: Input }],
    expandGroupRows: [{ type: Input }],
    enabelGroupFooter: [{ type: Input }],
    groupFieldsChange: [{ type: Output }],
    formatColumnsChange: [{ type: Output }],
    expandGroupRowsChange: [{ type: Output }],
    groupingSettingEl: [{ type: ViewChild, args: ['groupingSetting',] }],
    selectcolumnspanel: [{ type: ViewChild, args: ['selectcolumnspanel',] }],
    colForm: [{ type: ViewChild, args: ['groupSumform',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
class ColumnVisibleDragDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     */
    constructor(ngzone, injector, render, el) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            behaviour: 'move',
            dragHandleSelector: '.field-drag-handle',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        this.container = smoothDnD(this.el.nativeElement, this.options);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        return index;
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
    }
}
ColumnVisibleDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[column-visible-drag]',
            },] }
];
/** @nocollapse */
ColumnVisibleDragDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
ColumnVisibleDragDirective.propDecorators = {
    drop: [{ type: Output }],
    options: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
class ColumnGroupDragDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     */
    constructor(ngzone, injector, render, el) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        this.container = smoothDnD(this.el.nativeElement, this.options);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        return index;
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
    }
}
ColumnGroupDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[column-group-drag]',
            },] }
];
/** @nocollapse */
ColumnGroupDragDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
ColumnGroupDragDirective.propDecorators = {
    drop: [{ type: Output }],
    options: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisDblClickDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.dblClickHandler = new EventEmitter();
        this._click$ = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const doubleClickDuration = 250;
        /** @type {?} */
        const leftClick$ = fromEvent(this.el.nativeElement, 'click').pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.button === 0)));
        /** @type {?} */
        const debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));
        /** @type {?} */
        const clickLimit$ = leftClick$.pipe(bufferCount(2));
        /** @type {?} */
        const bufferGate$ = race(debounce$, clickLimit$)
            .pipe(first(), repeat());
        this._click$ = leftClick$.pipe(buffer(bufferGate$), filter((/**
         * @param {?} clicks
         * @return {?}
         */
        clicks => {
            return clicks.length > 1;
        }))).subscribe((/**
         * @param {?} clicks
         * @return {?}
         */
        clicks => {
            this.dblClickHandler.emit(clicks[0]);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._click$) {
            this._click$.unsubscribe();
            this._click$ = null;
        }
    }
}
FarrisDblClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[f-dbl-click]'
            },] }
];
/** @nocollapse */
FarrisDblClickDirective.ctorParameters = () => [
    { type: ElementRef }
];
FarrisDblClickDirective.propDecorators = {
    options: [{ type: Input, args: ['f-dbl-click',] }],
    dblClickHandler: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PreviewMultiHeadersComponent {
    /**
     * @param {?} $event
     * @param {?} tabsbox
     * @return {?}
     */
    onWheel($event, tabsbox) {
        /** @type {?} */
        const sw = tabsbox.scrollWidth;
        /** @type {?} */
        const ow = tabsbox.offsetWidth;
        if (sw > ow) {
            /** @type {?} */
            const right = sw - ow;
            /** @type {?} */
            const sl = tabsbox.scrollLeft;
            if (sl < right && $event.deltaY > 0) {
                $event.preventDefault();
                tabsbox.scrollLeft = sl + 50;
            }
            if (sl > 0 && $event.deltaY < 0) {
                $event.preventDefault();
                tabsbox.scrollLeft = sl - 50;
            }
        }
    }
}
PreviewMultiHeadersComponent.decorators = [
    { type: Component, args: [{
                selector: 'preview-table',
                template: "\r\n<div #tablebox class=\"p-2 h-100 d-flex align-items-center\" style=\"overflow-x: auto;\" (wheel)=\"onWheel($event, tablebox)\">\r\n    <table class=\"table table-bordered bg-light\" style=\" border-color: #cbcbcb; table-layout: revert;\">\r\n\r\n        <tr *ngFor=\"let cls of previewGroupColumns\" style=\"height: 36px\">\r\n            <ng-container *ngFor=\"let c of cls\">\r\n                <ng-container *ngIf=\"c.colspan && c.colspan > 1\">\r\n                    <td style=\" vertical-align: middle;  border-color: #cbcbcb\" [attr.colspan]=\"c.colspan\" [attr.align]=\"c.halign || 'left'\">{{ c.title }}</td>\r\n                </ng-container>\r\n\r\n                <ng-container *ngIf=\"!c.colspan || c.colspan == 1\">\r\n                    <td [style.width.px]=\"c.width\" [attr.align]=\"c.halign || 'left'\"\r\n                        [attr.rowspan]=\"c.rowspan || 1\" style=\" vertical-align: middle;  border-color: #cbcbcb\">{{ c.title }}</td>\r\n                </ng-container>\r\n            </ng-container>\r\n        </tr>\r\n    </table>\r\n</div>"
            }] }
];
PreviewMultiHeadersComponent.propDecorators = {
    previewGroupColumns: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShowPreviewDirective {
    /**
     * @param {?} el
     * @param {?} cfr
     * @param {?} modalSer
     */
    constructor(el, cfr, modalSer) {
        this.el = el;
        this.cfr = cfr;
        this.modalSer = modalSer;
        this.dlgTitle = '效果预览';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPreviewBtnClick($event) {
        /** @type {?} */
        const modalRef = this.modalSer.show(PreviewMultiHeadersComponent, {
            title: this.dlgTitle,
            width: 600,
            height: 300,
            showMaxButton: true,
            resizable: true,
            initialState: {
                previewGroupColumns: this.treeIns.getPreviewGroupColumns()
            },
            showButtons: false
        });
    }
}
ShowPreviewDirective.decorators = [
    { type: Directive, args: [{
                selector: '[preview-headers]'
            },] }
];
/** @nocollapse */
ShowPreviewDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];
ShowPreviewDirective.propDecorators = {
    treeIns: [{ type: Input, args: ['preview-headers',] }],
    dlgTitle: [{ type: Input }],
    onPreviewBtnClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSettingsModule {
    /**
     * @param {?=} apiUri
     * @return {?}
     */
    static forRoot(apiUri = '') {
        return {
            ngModule: DatagridSettingsModule,
            providers: [
                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
            ]
        };
    }
}
DatagridSettingsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DatagridSettingsComponent,
                    DatagridSortSettingComponent,
                    ColumnFormatSettingComponent,
                    ColumnGroupSettingComponent,
                    ColumnVisibleDragDirective,
                    ColumnGroupDragDirective,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent,
                    ColumnTreeComponent,
                    NewHeaderFormComponent,
                    SetColumnsComponent,
                    FarrisDblClickDirective,
                    PreviewMultiHeadersComponent,
                    ShowPreviewDirective
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    MultiSelectModule,
                    ComboListModule,
                    DatagridModule,
                    FarrisCommonModule.forRoot(),
                    MessagerModule.forRoot(),
                    LocaleModule.forRoot(),
                    ModalModule.forRoot(),
                    SwitchModule,
                    FarrisTooltipModule,
                    NotifyModule.forRoot(),
                    OrganizationSelectorModule,
                    LanguageTextboxModule,
                    TreeTableModule
                ],
                entryComponents: [
                    DatagridSettingsComponent,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent,
                    NewHeaderFormComponent,
                    SetColumnsComponent,
                    PreviewMultiHeadersComponent
                ],
                exports: [
                    DatagridSettingsComponent,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent,
                    FarrisDblClickDirective
                ]
            },] }
];

export { ColumnFormatSettingComponent, ColumnGroupDragDirective, ColumnGroupSettingComponent, ColumnTreeComponent, ColumnVisibleDragDirective, DatagridSettingsComponent, DatagridSettingsModule, DatagridSettingsService, DatagridSortSettingComponent, FarrisDblClickDirective, GRID_SETTINGS_WEBAPI, IS_MULTI_HEADER_STRING, NewHeaderFormComponent, NewSchemeComponent, PreviewMultiHeadersComponent, SchemeListComponent, SetColumnsComponent, ShowPreviewDirective, SimpleColumnsComponent };
//# sourceMappingURL=farris-ui-datagrid-settings.js.map
