/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDndForGroupingField } from '@farris/smooth-dnd';
SmoothDndForGroupingField.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDndForGroupingField.wrapChild = false;
var ColumnGroupDragDirective = /** @class */ (function () {
    function ColumnGroupDragDirective(ngzone, injector, render, el) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        this.disposeDnd();
        this.container = SmoothDndForGroupingField(this.el.nativeElement, this.options);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDropReady = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
    };
    ColumnGroupDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[column-group-drag]',
                },] }
    ];
    /** @nocollapse */
    ColumnGroupDragDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColumnGroupDragDirective.propDecorators = {
        drop: [{ type: Output }],
        options: [{ type: Input }]
    };
    return ColumnGroupDragDirective;
}());
export { ColumnGroupDragDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.container;
    /** @type {?} */
    ColumnGroupDragDirective.prototype.drop;
    /** @type {?} */
    ColumnGroupDragDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWdyb3VwLWRyYWcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1zZXR0aW5ncy8iLCJzb3VyY2VzIjpbImxpYi9jb2x1bW4tZ3JvdXAvY29sdW1uLWdyb3VwLWRyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBaUIsS0FBSyxFQUFHLE1BQU0sRUFBRSxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDM0ksT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLElBQUkseUJBQXlCLEVBQTJDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkkseUJBQXlCLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE9BQU8sQ0FBQztBQUNoRix5QkFBeUIsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBRTVDO0lBOENJLGtDQUFvQixNQUFjLEVBQVUsUUFBa0IsRUFBVSxNQUFpQixFQUFVLEVBQWM7UUFBakgsaUJBQXNIO1FBQWxHLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUF6Q3ZHLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNCLFlBQU8sR0FBcUI7WUFDakMsV0FBVyxFQUFFLFlBQVk7WUFDekIsU0FBUyxFQUFFLE1BQU07WUFDakIsZUFBZSxFQUFFO2dCQUNiLFNBQVMsRUFBRSxrQkFBa0I7YUFDaEM7WUFDRCxjQUFjOzs7WUFBRTtnQkFDWixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDekIsQ0FBQyxDQUFBO1lBQ0QsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FB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IHsgRGlyZWN0aXZlLCBOZ1pvbmUsIEluamVjdG9yLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIElucHV0LCAgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBkcm9wSGFuZGxlcnMsIHNtb290aERuRCBhcyBTbW9vdGhEbmRGb3JHcm91cGluZ0ZpZWxkLCBEcm9wUmVzdWx0LCBDb250YWluZXJPcHRpb25zLCBjb25zdGFudHMgfSBmcm9tICdAZmFycmlzL3Ntb290aC1kbmQnO1xyXG5cclxuU21vb3RoRG5kRm9yR3JvdXBpbmdGaWVsZC5kcm9wSGFuZGxlciA9IGRyb3BIYW5kbGVycy5yZWFjdERyb3BIYW5kbGVyKCkuaGFuZGxlcjtcclxuU21vb3RoRG5kRm9yR3JvdXBpbmdGaWVsZC53cmFwQ2hpbGQgPSBmYWxzZTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbY29sdW1uLWdyb3VwLWRyYWddJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbHVtbkdyb3VwRHJhZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogYW55O1xyXG4gICAgQE91dHB1dCgpIGRyb3AgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBASW5wdXQoKSBvcHRpb25zOiBDb250YWluZXJPcHRpb25zID0ge1xyXG4gICAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgYmVoYXZpb3VyOiAnbW92ZScsXHJcbiAgICAgICAgZHJvcFBsYWNlaG9sZGVyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Ryb3AtZ3JvdXAtZmllbGQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0R2hvc3RQYXJlbnQ6ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRDaGlsZFBheWxvYWQ6IHRoaXMuZ2V0Q2hpbGRQYXlsb2FkLmJpbmQodGhpcyksXHJcbiAgICAgICAgc2hvdWxkQWNjZXB0RHJvcDogKHNvdXJjZUNvbnRhaW5lck9wdGlvbnMsIHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkRyb3BSZWFkeTogKGRyb3BSZXN1bHQ6IERyb3BSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Ecm9wUmVhZHkoZHJvcFJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Ecm9wOiAoZHJvcFJlc3VsdDogRHJvcFJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5nem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wLmVtaXQoZHJvcFJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EcmFnRW50ZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EcmFnRW50ZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkRyYWdTdGFydDogKGluZm8pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EcmFnU3RhcnQoaW5mbyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EcmFnRW5kOiAoaW5mbykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5nem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmQoaW5mbyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ3pvbmU6IE5nWm9uZSwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5pdERuRCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZURuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGlzcG9zZURuZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGluaXREbkQoKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NlRG5kKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBTbW9vdGhEbmRGb3JHcm91cGluZ0ZpZWxkKFxyXG4gICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDaGlsZFBheWxvYWQoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyb3BSZWFkeShkcm9wUmVzdWx0KSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydChpbmZvKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdFbmQoaW5mbykge1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIG9uRHJhZ0VudGVyKCkge1xyXG4gICAgfVxyXG59XHJcbiJdfQ==