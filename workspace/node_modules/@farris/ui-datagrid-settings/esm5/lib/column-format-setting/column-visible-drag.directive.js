/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDndForVisible, constants } from '@farris/smooth-dnd';
var wrapperClass = constants.wrapperClass, animationClass = constants.animationClass;
SmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDndForVisible.wrapChild = false;
/**
 * @record
 */
export function DragStartEndInfo() { }
if (false) {
    /** @type {?} */
    DragStartEndInfo.prototype.isSource;
    /** @type {?} */
    DragStartEndInfo.prototype.payload;
    /** @type {?} */
    DragStartEndInfo.prototype.willAcceptDrop;
}
var ColumnVisibleDragDirective = /** @class */ (function () {
    function ColumnVisibleDragDirective(ngzone, injector, render, el) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            behaviour: 'move',
            dragHandleSelector: '.field-drag-handle',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        this.disposeDnd();
        this.container = SmoothDndForVisible(this.el.nativeElement, this.options);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDropReady = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
    };
    ColumnVisibleDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[column-visible-drag]',
                },] }
    ];
    /** @nocollapse */
    ColumnVisibleDragDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColumnVisibleDragDirective.propDecorators = {
        drop: [{ type: Output }],
        options: [{ type: Input }]
    };
    return ColumnVisibleDragDirective;
}());
export { ColumnVisibleDragDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.container;
    /** @type {?} */
    ColumnVisibleDragDirective.prototype.drop;
    /** @type {?} */
    ColumnVisibleDragDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXZpc2libGUtZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLXNldHRpbmdzLyIsInNvdXJjZXMiOlsibGliL2NvbHVtbi1mb3JtYXQtc2V0dGluZy9jb2x1bW4tdmlzaWJsZS1kcmFnLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWlCLEtBQUssRUFDL0MsTUFBTSxFQUFFLFlBQVksRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN6RixPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsSUFBSSxtQkFBbUIsRUFBZ0MsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHckgsSUFBQSxxQ0FBWSxFQUFFLHlDQUFjO0FBQ3BDLG1CQUFtQixDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFPLENBQUM7QUFDMUUsbUJBQW1CLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQzs7OztBQUV0QyxzQ0FJQzs7O0lBSEcsb0NBQWtCOztJQUNsQixtQ0FBYTs7SUFDYiwwQ0FBd0I7O0FBRzVCO0lBOENJLG9DQUFvQixNQUFjLEVBQVUsUUFBa0IsRUFBVSxNQUFpQixFQUFVLEVBQWM7UUFBakgsaUJBQXNIO1FBQWxHLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUF6Q3ZHLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNCLFlBQU8sR0FBcUI7WUFDakMsU0FBUyxFQUFFLE1BQU07WUFDakIsa0JBQWtCLEVBQUUsb0JBQW9CO1lBQ3hDLGVBQWUsRUFBRTtnQkFDYixTQUFTLEVBQUUsa0JBQWtCO2FBQ2hDO1lBQ0Qs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O0lBQ3ZCLDBDQUFvQzs7SUFDcEMsNkNBc0NFOzs7OztJQUVVLDRDQUFzQjs7Ozs7SUFBRSw4Q0FBMEI7Ozs7O0lBQUUsNENBQXlCOzs7OztJQUFFLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIE5nWm9uZSwgSW5qZWN0b3IsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsXHJcbiAgICAgICAgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGRyb3BIYW5kbGVycywgc21vb3RoRG5EIGFzIFNtb290aERuZEZvclZpc2libGUsIERyb3BSZXN1bHQsIENvbnRhaW5lck9wdGlvbnMsIGNvbnN0YW50cyB9IGZyb20gJ0BmYXJyaXMvc21vb3RoLWRuZCc7XHJcblxyXG5cclxuY29uc3QgeyB3cmFwcGVyQ2xhc3MsIGFuaW1hdGlvbkNsYXNzIH0gPSBjb25zdGFudHM7XHJcblNtb290aERuZEZvclZpc2libGUuZHJvcEhhbmRsZXIgPSBkcm9wSGFuZGxlcnMucmVhY3REcm9wSGFuZGxlcigpLmhhbmRsZXI7XHJcblNtb290aERuZEZvclZpc2libGUud3JhcENoaWxkID0gZmFsc2U7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERyYWdTdGFydEVuZEluZm8ge1xyXG4gICAgaXNTb3VyY2U6IGJvb2xlYW47XHJcbiAgICBwYXlsb2FkOiBhbnk7XHJcbiAgICB3aWxsQWNjZXB0RHJvcDogYm9vbGVhbjtcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tjb2x1bW4tdmlzaWJsZS1kcmFnXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb2x1bW5WaXNpYmxlRHJhZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogYW55O1xyXG4gICAgQE91dHB1dCgpIGRyb3AgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBASW5wdXQoKSBvcHRpb25zOiBDb250YWluZXJPcHRpb25zID0ge1xyXG4gICAgICAgIGJlaGF2aW91cjogJ21vdmUnLFxyXG4gICAgICAgIGRyYWdIYW5kbGVTZWxlY3RvcjogJy5maWVsZC1kcmFnLWhhbmRsZScsXHJcbiAgICAgICAgZHJvcFBsYWNlaG9sZGVyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Ryb3AtZ3JvdXAtZmllbGQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0R2hvc3RQYXJlbnQ6ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRDaGlsZFBheWxvYWQ6IHRoaXMuZ2V0Q2hpbGRQYXlsb2FkLmJpbmQodGhpcyksXHJcbiAgICAgICAgc2hvdWxkQWNjZXB0RHJvcDogKHNvdXJjZUNvbnRhaW5lck9wdGlvbnMsIHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkRyb3BSZWFkeTogKGRyb3BSZXN1bHQ6IERyb3BSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Ecm9wUmVhZHkoZHJvcFJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Ecm9wOiAoZHJvcFJlc3VsdDogRHJvcFJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5nem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wLmVtaXQoZHJvcFJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EcmFnRW50ZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EcmFnRW50ZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkRyYWdTdGFydDogKGluZm86IERyYWdTdGFydEVuZEluZm8pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EcmFnU3RhcnQoaW5mbyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EcmFnRW5kOiAoaW5mbzogRHJhZ1N0YXJ0RW5kSW5mbykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5nem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmQoaW5mbyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ3pvbmU6IE5nWm9uZSwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5pdERuRCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZURuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGlzcG9zZURuZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdERuRCgpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2VEbmQoKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IFNtb290aERuZEZvclZpc2libGUoXHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldENoaWxkUGF5bG9hZChpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBpbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJvcFJlYWR5KGRyb3BSZXN1bHQpIHtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJhZ1N0YXJ0KGluZm8pIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdFbmQoaW5mbykge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdFbnRlcigpIHtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==