/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, HostListener, ComponentFactoryResolver } from "@angular/core";
import { ColumnTreeComponent } from "../column-tree.component";
import { BsModalService } from "@farris/ui-modal";
import { PreviewMultiHeadersComponent } from "./preview-multi-headers.component";
var ShowPreviewDirective = /** @class */ (function () {
    function ShowPreviewDirective(el, cfr, modalSer) {
        this.el = el;
        this.cfr = cfr;
        this.modalSer = modalSer;
        this.dlgTitle = '效果预览';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ShowPreviewDirective.prototype.onPreviewBtnClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var modalRef = this.modalSer.show(PreviewMultiHeadersComponent, {
            title: this.dlgTitle,
            width: 600,
            height: 300,
            showMaxButton: true,
            resizable: true,
            initialState: {
                previewGroupColumns: this.treeIns.getPreviewGroupColumns()
            },
            showButtons: false
        });
    };
    ShowPreviewDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[preview-headers]'
                },] }
    ];
    /** @nocollapse */
    ShowPreviewDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: BsModalService }
    ]; };
    ShowPreviewDirective.propDecorators = {
        treeIns: [{ type: Input, args: ['preview-headers',] }],
        dlgTitle: [{ type: Input }],
        onPreviewBtnClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return ShowPreviewDirective;
}());
export { ShowPreviewDirective };
if (false) {
    /** @type {?} */
    ShowPreviewDirective.prototype.treeIns;
    /** @type {?} */
    ShowPreviewDirective.prototype.dlgTitle;
    /**
     * @type {?}
     * @private
     */
    ShowPreviewDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowPreviewDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    ShowPreviewDirective.prototype.modalSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1wcmV2aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvbXVsdGktaGVhZGVycy9wcmV2aWV3L3Nob3ctcHJldmlldy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWpGO0lBTUksOEJBQW9CLEVBQWMsRUFBVSxHQUE2QixFQUFVLFFBQXdCO1FBQXZGLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWdCO1FBRGxHLGFBQVEsR0FBRyxNQUFNLENBQUE7SUFDb0YsQ0FBQzs7Ozs7SUFHL0csZ0RBQWlCOzs7O0lBRGpCLFVBQ2tCLE1BQU07O1lBQ2QsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFO1lBQzlELEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNwQixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHO1lBQ1gsYUFBYSxFQUFFLElBQUk7WUFDbkIsU0FBUyxFQUFFLElBQUk7WUFDZixZQUFZLEVBQUU7Z0JBQ1YsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRTthQUM3RDtZQUNELFdBQVcsRUFBRSxLQUFLO1NBQ3JCLENBQUM7SUFDTixDQUFDOztnQkFyQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7aUJBQ2hDOzs7O2dCQVBtQixVQUFVO2dCQUF1Qix3QkFBd0I7Z0JBRXBFLGNBQWM7OzswQkFPbEIsS0FBSyxTQUFDLGlCQUFpQjsyQkFDdkIsS0FBSztvQ0FHTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztJQWNyQywyQkFBQztDQUFBLEFBdEJELElBc0JDO1NBbkJZLG9CQUFvQjs7O0lBQzdCLHVDQUF1RDs7SUFDdkQsd0NBQTBCOzs7OztJQUNkLGtDQUFzQjs7Ozs7SUFBRSxtQ0FBcUM7Ozs7O0lBQUUsd0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb2x1bW5UcmVlQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbHVtbi10cmVlLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3VpLW1vZGFsXCI7XHJcbmltcG9ydCB7IFByZXZpZXdNdWx0aUhlYWRlcnNDb21wb25lbnQgfSBmcm9tIFwiLi9wcmV2aWV3LW11bHRpLWhlYWRlcnMuY29tcG9uZW50XCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3ByZXZpZXctaGVhZGVyc10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaG93UHJldmlld0RpcmVjdGl2ZSB7XHJcbiAgICBASW5wdXQoJ3ByZXZpZXctaGVhZGVycycpIHRyZWVJbnM6IENvbHVtblRyZWVDb21wb25lbnQ7XHJcbiAgICBASW5wdXQoKSBkbGdUaXRsZSA9ICfmlYjmnpzpooTop4gnXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBwcml2YXRlIG1vZGFsU2VyOiBCc01vZGFsU2VydmljZSkge31cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgICBvblByZXZpZXdCdG5DbGljaygkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXIuc2hvdyhQcmV2aWV3TXVsdGlIZWFkZXJzQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmRsZ1RpdGxlLFxyXG4gICAgICAgICAgICB3aWR0aDogNjAwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDMwMCxcclxuICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIHByZXZpZXdHcm91cENvbHVtbnM6IHRoaXMudHJlZUlucy5nZXRQcmV2aWV3R3JvdXBDb2x1bW5zKClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=