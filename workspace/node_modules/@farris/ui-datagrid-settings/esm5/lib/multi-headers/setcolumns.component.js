/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from "@angular/core";
var SetColumnsComponent = /** @class */ (function () {
    function SetColumnsComponent() {
        this.data = [];
        this.checkedItems = [];
        this.selectedIds = [];
    }
    /**
     * @return {?}
     */
    SetColumnsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.selectedIds = (this.checkedItems || []).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id; }));
        if (this.data) {
            this.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (!item.id) {
                    item.id = item.field;
                }
            }));
        }
    };
    SetColumnsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'set-columns',
                    template: "<multi-select [dataSource]=\"data\"\r\n[idField]=\"'id'\" [valueField]=\"'field'\" [textField]=\"'title'\" [displayType]=\"'List'\"\r\n[enableTargetSort]=\"true\" [showCheckbox]=\"true\" [enableMoveMore]=\"true\" [(selectedId)]=\"selectedIds\">\r\n</multi-select>"
                }] }
    ];
    /** @nocollapse */
    SetColumnsComponent.ctorParameters = function () { return []; };
    SetColumnsComponent.propDecorators = {
        data: [{ type: Input }],
        checkedItems: [{ type: Input }]
    };
    return SetColumnsComponent;
}());
export { SetColumnsComponent };
if (false) {
    /** @type {?} */
    SetColumnsComponent.prototype.data;
    /** @type {?} */
    SetColumnsComponent.prototype.checkedItems;
    /** @type {?} */
    SetColumnsComponent.prototype.selectedIds;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0Y29sdW1ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLXNldHRpbmdzLyIsInNvdXJjZXMiOlsibGliL211bHRpLWhlYWRlcnMvc2V0Y29sdW1ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXpEO0lBVUk7UUFKUyxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsaUJBQVksR0FBRyxFQUFFLENBQUM7UUFFM0IsZ0JBQVcsR0FBYSxFQUFFLENBQUE7SUFDWCxDQUFDOzs7O0lBRWhCLHNDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEVBQUosQ0FBSSxFQUFDLENBQUM7UUFDNUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxJQUFJO2dCQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtvQkFDVixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7aUJBQ3hCO1lBQ0wsQ0FBQyxFQUFDLENBQUE7U0FDTDtJQUNMLENBQUM7O2dCQXJCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLG1SQUEwQztpQkFDN0M7Ozs7O3VCQUdJLEtBQUs7K0JBQ0wsS0FBSzs7SUFlViwwQkFBQztDQUFBLEFBdEJELElBc0JDO1NBbEJZLG1CQUFtQjs7O0lBRTVCLG1DQUFtQjs7SUFDbkIsMkNBQTJCOztJQUUzQiwwQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3NldC1jb2x1bW5zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZXRjb2x1bW5zLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2V0Q29sdW1uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgZGF0YSA9IFtdO1xyXG4gICAgQElucHV0KCkgY2hlY2tlZEl0ZW1zID0gW107XHJcblxyXG4gICAgc2VsZWN0ZWRJZHM6IHN0cmluZ1tdID0gW11cclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSWRzID0gKHRoaXMuY2hlY2tlZEl0ZW1zIHx8IFtdKS5tYXAobiA9PiBuLmlkKTtcclxuICAgICAgICBpZiAodGhpcy5kYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5pZCA9IGl0ZW0uZmllbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19