/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter, ChangeDetectorRef, Injector, Output, Renderer2 } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { MessagerService } from '@farris/ui-messager';
import { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';
import { getDataFieldsForMultiHeaders, mergeSortInfo, multiHeadersHasDataFields, reset2DefaultForMultiHeaders } from './mutli-headers.helper';
import { NotifyService } from '@farris/ui-notify';
var DatagridSettingsComponent = /** @class */ (function () {
    function DatagridSettingsComponent(cd, inject) {
        this.cd = cd;
        this.inject = inject;
        this.activeTabIndex = 1;
        /**
         * 排序列数据
         */
        this.sortTreeData = [];
        this.sortNames = [];
        this.sortInfo = {};
        /**
         * 显示列数据
         */
        // viewTreeData = [];
        this.viewColumns = [];
        this.columnFormat = [];
        this.groupField = [];
        this.expandGroupRows = true;
        this.canSetColumnSort = true;
        this.canSetColumnVisible = true;
        this.enableReset = false;
        this.cancelHandle = new EventEmitter();
        this.submitHandle = new EventEmitter();
        this.reset = new EventEmitter();
        this.concise = new EventEmitter();
        this.schemeInfo = null;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.enableGroupFooter = false;
        this.fixedItems = [];
        /**
         * 配置多表头相关设置
         */
        this.multiHeaders = {};
        // 启用多表头
        this.enableMultipleHeaders = false;
        this.schemeName = '';
        this.tabWidth = 70;
        this.messager = this.inject.get(MessagerService, null);
        this.localeSer = this.inject.get(LocaleService);
        this.render2 = this.inject.get(Renderer2, null);
        this.notifySer = this.inject.get(NotifyService, null);
        this.searchItems = [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
        this.alignItems = [
            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
        ];
        this.summaryItems = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.summaryItems2 = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.fixedItems = [
            { value: 'UNFIXED', title: this.localeSer.getValue('datagrid-settings.column.unFixed') },
            { value: 'left', title: this.localeSer.getValue('datagrid-settings.column.leftFixed') },
            { value: 'right', title: this.localeSer.getValue('datagrid-settings.column.rightFixed') },
        ];
        if (this.localeSer.localeId === 'en') {
            this.tabWidth = 80;
        }
    }
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.initData = /**
     * @private
     * @return {?}
     */
    function () {
        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
        /** @type {?} */
        var sortOrders = this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : [];
        this.viewColumns = this.getViewColumns();
        this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        this.columnFormat = tslib_1.__spread(this.columns[0]);
        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
        this.expandGroupRows = this.gridInstance['expandGroupRows'];
        this.enableGroupFooter = this.gridInstance.groupFooter;
    };
    /**
     * @return {?}
     */
    DatagridSettingsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.gridInstance.enableScheme) {
            this.initData();
        }
        else {
            if (this.schemeInfo) {
                this.sortInfo = this.schemeInfo.sortInfo || {};
                if (this.sortInfo) {
                    this.sortNames = this.sortInfo.sortName || '';
                }
                this.viewColumns = this.schemeInfo.viewColumns;
                this.columnFormat = this.schemeInfo.columnFormat;
                if (!this.columnFormat) {
                    this.columnFormat = tslib_1.__spread(this.columns[0]);
                }
                if (this.schemeInfo.groupField) {
                    if (typeof this.schemeInfo.groupField === 'string') {
                        this.groupField = ((/** @type {?} */ (this.schemeInfo.groupField))).split(',');
                    }
                    else {
                        this.groupField = this.schemeInfo.groupField || [];
                    }
                }
                else {
                    this.groupField = [];
                }
                this.expandGroupRows = !!this.schemeInfo.expandGroupRows;
            }
            else {
                // 系统预制
                this.reset2Default();
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridSettingsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.close = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.modalRef) {
            this.modalRef.close();
        }
    };
    /**
     * @private
     * @param {?=} tab
     * @return {?}
     */
    DatagridSettingsComponent.prototype.setCurrentTab = /**
     * @private
     * @param {?=} tab
     * @return {?}
     */
    function (tab) {
        if (tab === void 0) { tab = null; }
        if (this.render2) {
            /** @type {?} */
            var left = 0;
            /** @type {?} */
            var tabs = Array.from(this.header.nativeElement.querySelectorAll('.navitem'));
            /** @type {?} */
            var index = this.activeTabIndex;
            if (tabs.length !== 3) {
                index = tabs.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n === tab; })) + 1;
            }
            switch (index) {
                case 2:
                    left = this.localeSer.localeId === 'en' ? 78 : 68;
                    break;
                case 3:
                    left = this.localeSer.localeId === 'en' ? 158 : 138;
                    break;
                default:
                    left = 0;
                    break;
            }
            this.render2.setStyle(this.activeTab.nativeElement, 'transform', "translate3d(" + left + "px, 0px, 0px)");
        }
    };
    /**
     * @param {?} $event
     * @param {?} idx
     * @return {?}
     */
    DatagridSettingsComponent.prototype.changeTabs = /**
     * @param {?} $event
     * @param {?} idx
     * @return {?}
     */
    function ($event, idx) {
        $event.stopPropagation();
        /** @type {?} */
        var treeNodes = this.getCurrentGroupHeaders();
        if (this.activeTabIndex === 1 && this.enableMultipleHeaders) {
            this.setCurrentGroupHeaders(treeNodes);
        }
        else {
            this.multiHeaders.treeData = treeNodes ? treeNodes.treeData : [];
        }
        if (idx === 2 && this.enableMultipleHeaders) {
            this.sortTreeData = getDataFieldsForMultiHeaders(treeNodes.viewCols).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable; }));
        }
        if (idx === 3) {
            if (this.enableMultipleHeaders) {
                this.columnFormat = treeNodes && treeNodes.viewCols ? getDataFieldsForMultiHeaders(treeNodes.viewCols).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field.indexOf('farris-datagrid-column_') == -1; })) : [];
            }
            else {
                this.columnFormat = getDataFieldsForMultiHeaders(this.columns);
            }
        }
        this.activeTabIndex = idx;
        /** @type {?} */
        var tabEl = $event.target;
        if (!tabEl.classList.contains('navitem') && tabEl.closest('.navitem')) {
            tabEl = tabEl.closest('.navitem');
        }
        this.setCurrentTab(tabEl);
    };
    /**
     * @param {?} sortInfo
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSortInfoChange = /**
     * @param {?} sortInfo
     * @return {?}
     */
    function (sortInfo) {
        this.sortInfo = sortInfo;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.getViewColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 多表头
        /** @type {?} */
        var visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                visibleCls = visibleCls.concat(_this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return (n.visible || n.visible === undefined); }));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsComponent.prototype._getViewColumns = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.mergeColumnFormats = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {
            var _a = this.sortInfo, sortName = _a.sortName, sortOrder_1 = _a.sortOrder;
            if (sortName && sortName.length) {
                sortName.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                function (n, i) {
                    /** @type {?} */
                    var col = _this.columnFormat.find((/**
                     * @param {?} col
                     * @return {?}
                     */
                    function (col) {
                        return col.field === n;
                    }));
                    if (col) {
                        col.sortable = true;
                        col.order = sortOrder_1[i] || 'asc';
                    }
                }));
            }
        }
        /**
         * 1、只有一组表头，且固定在左侧或右侧时，按无固定列方式处理
         * 2、只有左侧、右侧固定列而没有其他正常列时，取消右侧固定列
         * 3、只有左侧或右侧固定时，按无固定列处理
         * @type {?}
         */
        var _columnsFormat = this.columnFormat;
        if (!_columnsFormat.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return (!n.fixed || n.fixed === 'UNFIXED') && n.visible; })).length) {
            /** @type {?} */
            var colsCount = _columnsFormat.length;
            /** @type {?} */
            var rightCols = _columnsFormat.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fixed === 'right'; }));
            /** @type {?} */
            var leftCols = _columnsFormat.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fixed === 'left'; }));
            if (leftCols.length == colsCount || rightCols.length == colsCount) {
                _columnsFormat.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n.fixed = '';
                }));
            }
            else {
                if (rightCols.length === 1) {
                    leftCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        t.fixed = '';
                    }));
                }
                else {
                    rightCols.forEach((/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        t.fixed = '';
                    }));
                }
            }
        }
    };
    /**
     * @param {?} colFormatData
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onColumnFormatChange = /**
     * @param {?} colFormatData
     * @return {?}
     */
    function (colFormatData) {
        this.columnFormat = colFormatData;
    };
    /**
     * @private
     * @param {?} msg
     * @return {?}
     */
    DatagridSettingsComponent.prototype._showMessager = /**
     * @private
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        if (this.notifySer) {
            this.notifySer.info(msg);
        }
        else {
            this.messager.info(msg);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSubmitClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.enableMultipleHeaders) {
            /** @type {?} */
            var _multiHeaders = this.getCurrentGroupHeaders();
            if (_multiHeaders && !multiHeadersHasDataFields(_multiHeaders.viewCols)) {
                this._showMessager('请设置表头。');
                return;
            }
            mergeSortInfo(_multiHeaders.viewCols, this.sortInfo);
            this.multiHeaders = _multiHeaders;
        }
        else {
            this.multiHeaders = null;
            this.mergeColumnFormats();
        }
        this.submitHandle.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onCancelClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.cancelHandle.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSettingReset = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                if (_this.enableMultipleHeaders) {
                    var _a = reset2DefaultForMultiHeaders(_this.gridInstance), settings = _a.settings, multiHeaderOptions = _a.multiHeaderOptions;
                    var viewColumns = settings.viewColumns, columnFormat = settings.columnFormat, sortInfo = settings.sortInfo, groupField = settings.groupField, expandGroupRows = settings.expandGroupRows, multiHeaders = settings.multiHeaders;
                    _this.viewColumns = viewColumns;
                    _this.sortInfo = sortInfo;
                    _this.sortNames = sortInfo.sortName || [];
                    _this.groupField = groupField;
                    _this.expandGroupRows = expandGroupRows;
                    _this.multiHeaders = {
                        columns: multiHeaderOptions.columns,
                        treeData: multiHeaders.treeData
                    };
                    _this.columnFormat = getDataFieldsForMultiHeaders(multiHeaderOptions.columns);
                    _this.setCurrentGroupHeaders({ viewCols: multiHeaderOptions.columns, treeData: null });
                }
                else {
                    _this.reset2Default();
                }
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.reset2Default = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            var newColumns_1 = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = _this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = tslib_1.__assign({}, c.footer || {});
                        col.groupFooter = tslib_1.__assign({}, c.groupFooter || {});
                        col.title = c.title;
                        col.fixed = c.fixed || '';
                        newColumns_1.push(col);
                    }
                }
            }));
            this.columns = [newColumns_1];
        }
        this.viewColumns = this.getViewColumns();
        if (options.sort) {
            /** @type {?} */
            var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        }
        else {
            this.sortNames = [];
            this.sortInfo = {};
        }
        this.columnFormat = tslib_1.__spread(this.columns[0]);
        this.groupField = options.groupField ? options.groupField.split(',') : [];
        this.expandGroupRows = !!options.expandGroupRows;
        this.enableGroupFooter = !!options.enableGroupFooter;
    };
    /** 显示简洁模式窗口 */
    /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.showConcise = /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (this.enableMultipleHeaders) {
            this.multiHeaders = this.getCurrentGroupHeaders();
        }
        this.mergeColumnFormats();
        this.concise.emit();
    };
    /**
     * @private
     * @param {?} p
     * @return {?}
     */
    DatagridSettingsComponent.prototype.setCurrentGroupHeaders = /**
     * @private
     * @param {?} p
     * @return {?}
     */
    function (p) {
        this['GROUP_HEADERS'] = p;
    };
    /**
     * @return {?}
     */
    DatagridSettingsComponent.prototype.getCurrentGroupHeaders = /**
     * @return {?}
     */
    function () {
        if (this.colFormatSettings) {
            return this.colFormatSettings.getMultiHeaders();
        }
        else {
            return this['GROUP_HEADERS'];
        }
    };
    DatagridSettingsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-settings',
                    template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\" (mousedown)=\"$event.stopPropagation()\">\r\n\r\n                    <div class=\"active-tab\" #activeTab [style.width.px]=\"tabWidth - 2\"></div>\r\n\r\n                    <div class=\"navitem text-center\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs($event, 1)\"\r\n                        style=\"border: 0; z-index:2; \" [style.width.px]=\"tabWidth\">{{'datagrid.settings.visible' | locale}}</div>\r\n                    <div class=\"navitem text-center\" *ngIf=\"canSetColumnSort\" [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs($event, 2)\" \r\n                    style=\"border: 0;z-index:2;\" [style.width.px]=\"tabWidth\">{{'datagrid.settings.sortting' | locale}}</div>\r\n                    <div class=\"navitem text-center\" *ngIf=\"gridInstance?.groupRows\"\r\n                        [class.active]=\"activeTabIndex === 3\" (click)=\"changeTabs($event, 3)\" \r\n                        style=\"border: 0;z-index:2;\" [style.width.px]=\"tabWidth\">{{'datagrid.settings.groupping' | locale}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onCancelClick($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\" #colFormatSettings\r\n                (formatChange)=\"onColumnFormatChange($event)\" \r\n                [enableMultipleHeaders]=\"enableMultipleHeaders\"\r\n                [multiHeaderOptions]=\"multiHeaders\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [enabelGroupFooter]=\"gridInstance.groupFooter\" [(formatColumns)]=\"columnFormat\"\r\n            [(groupFields)]=\"groupField\" [(expandGroupRows)]=\"expandGroupRows\" [columns]=\"columns\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n\r\n        <button class=\"btn btn-link reset\" style=\"\r\n        color: black;\r\n        width: auto;\r\n        float: left;\r\n        margin-left: 20px;\r\n        cursor: default;\" *ngIf=\"gridInstance.enableScheme\">{{'datagrid-scheme.currentSheme' | locale: '\u5F53\u524D\u65B9\u6848'}}<span>{{ schemeName }}</span></button>\r\n\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DatagridSettingsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    DatagridSettingsComponent.propDecorators = {
        enableReset: [{ type: Input }],
        columns: [{ type: Input }],
        cancelHandle: [{ type: Output }],
        submitHandle: [{ type: Output }],
        reset: [{ type: Output }],
        concise: [{ type: Output }],
        schemeInfo: [{ type: Input }],
        header: [{ type: ViewChild, args: ['header',] }],
        activeTab: [{ type: ViewChild, args: ['activeTab',] }],
        colFormatSettings: [{ type: ViewChild, args: ['colFormatSettings',] }]
    };
    return DatagridSettingsComponent;
}());
export { DatagridSettingsComponent };
if (false) {
    /** @type {?} */
    DatagridSettingsComponent.prototype.modalRef;
    /** @type {?} */
    DatagridSettingsComponent.prototype.gridInstance;
    /** @type {?} */
    DatagridSettingsComponent.prototype.activeTabIndex;
    /**
     * 排序列数据
     * @type {?}
     */
    DatagridSettingsComponent.prototype.sortTreeData;
    /** @type {?} */
    DatagridSettingsComponent.prototype.sortNames;
    /** @type {?} */
    DatagridSettingsComponent.prototype.sortInfo;
    /**
     * 显示列数据
     * @type {?}
     */
    DatagridSettingsComponent.prototype.viewColumns;
    /** @type {?} */
    DatagridSettingsComponent.prototype.columnFormat;
    /** @type {?} */
    DatagridSettingsComponent.prototype.groupField;
    /** @type {?} */
    DatagridSettingsComponent.prototype.expandGroupRows;
    /** @type {?} */
    DatagridSettingsComponent.prototype.canSetColumnSort;
    /** @type {?} */
    DatagridSettingsComponent.prototype.canSetColumnVisible;
    /** @type {?} */
    DatagridSettingsComponent.prototype.enableReset;
    /** @type {?} */
    DatagridSettingsComponent.prototype.columns;
    /** @type {?} */
    DatagridSettingsComponent.prototype.cancelHandle;
    /** @type {?} */
    DatagridSettingsComponent.prototype.submitHandle;
    /** @type {?} */
    DatagridSettingsComponent.prototype.reset;
    /** @type {?} */
    DatagridSettingsComponent.prototype.concise;
    /** @type {?} */
    DatagridSettingsComponent.prototype.schemeInfo;
    /** @type {?} */
    DatagridSettingsComponent.prototype.header;
    /** @type {?} */
    DatagridSettingsComponent.prototype.activeTab;
    /** @type {?} */
    DatagridSettingsComponent.prototype.colFormatSettings;
    /** @type {?} */
    DatagridSettingsComponent.prototype.searchItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.alignItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.summaryItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.summaryItems2;
    /** @type {?} */
    DatagridSettingsComponent.prototype.enableGroupFooter;
    /** @type {?} */
    DatagridSettingsComponent.prototype.fixedItems;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.render2;
    /**
     * 配置多表头相关设置
     * @type {?}
     */
    DatagridSettingsComponent.prototype.multiHeaders;
    /** @type {?} */
    DatagridSettingsComponent.prototype.enableMultipleHeaders;
    /** @type {?} */
    DatagridSettingsComponent.prototype.notifySer;
    /** @type {?} */
    DatagridSettingsComponent.prototype.schemeName;
    /** @type {?} */
    DatagridSettingsComponent.prototype.tabWidth;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,