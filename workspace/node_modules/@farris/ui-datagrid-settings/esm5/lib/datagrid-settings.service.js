/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { map, switchMap } from 'rxjs/operators';
import { forkJoin, of, timer } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils, DebugService, IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { DatagridSchemeService } from './datagrid-scheme.service';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { NotifyService } from '@farris/ui-notify';
import { DATAGRID_SETTINGS_LOCALEDATA } from './datagrid-settings-locale';
import { cleanGroupFields, cleanSortFields, getDataFieldsForMultiHeaders, mergetColumnOptions, refreshGridColumns } from './mutli-headers.helper';
/** @type {?} */
export var GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
var DatagridSettingsService = /** @class */ (function () {
    function DatagridSettingsService(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.currentSchemeitem = null;
        this.prevSchemeItem = null;
        this.debugSer = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.debugSer = this.injector.get(DebugService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
        this.schemeService = new DatagridSchemeService(this.injector);
        this.localeSer.setLocaleData(DATAGRID_SETTINGS_LOCALEDATA);
    }
    Object.defineProperty(DatagridSettingsService.prototype, "httpRestService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._httpRestService;
        },
        set: /**
         * @param {?} httpSer
         * @return {?}
         */
        function (httpSer) {
            this._httpRestService = httpSer;
            if (this.schemeService) {
                this.schemeService.setRestService(httpSer);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @param {?} perfixStr
     * @return {?}
     */
    DatagridSettingsService.prototype.setUriPerfixStr = /**
     * @param {?} perfixStr
     * @return {?}
     */
    function (perfixStr) {
        if (perfixStr == '') {
            if (window['gspframeworkService'] && window['gspframeworkService'].common) {
                /** @type {?} */
                var basePath = window['gspframeworkService'].common.getBasePath;
                if (basePath && basePath.get) {
                    perfixStr = basePath.get();
                }
            }
        }
        if (perfixStr != '' && perfixStr !== null) {
            this.schemeService.setUriPerfix(perfixStr);
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    DatagridSettingsService.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (this.gridRefs) {
            if (id && this.gridRefs[id]) {
                this.gridRefs[id] = null;
                delete this.gridRefs[id];
            }
            else {
                if (!Object.keys(this.gridRefs).length) {
                    this.gridRefs = null;
                }
            }
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
        this.schemeService.destory(id);
    };
    /**
     * @private
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    DatagridSettingsService.prototype.writeDebugMsg = /**
     * @private
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    function (msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (this.debugSer) {
            if (this.debugSer[type]) {
                this.debugSer[type](msg);
            }
            else {
                console[type](msg);
            }
        }
    };
    /**
     * @param {?} dg
     * @return {?}
     */
    DatagridSettingsService.prototype.registerGridInstance = /**
     * @param {?} dg
     * @return {?}
     */
    function (dg) {
        if (!dg) {
            this.writeDebugMsg('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        var id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    };
    /**
     * @param {?} dgID
     * @return {?}
     */
    DatagridSettingsService.prototype.getGridInstance = /**
     * @param {?} dgID
     * @return {?}
     */
    function (dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    };
    /** 更新方案中的配置数据 */
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.updateSchemeSettings = /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    function (schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            var schemeContentObj = schemeItem.queryConditionString ? JSON.parse(schemeItem.queryConditionString) : {};
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    var schemeSettings = schemeContentObj[this.localeSer.localeId] || {};
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    };
    /** 更新当前方案配置数据 */
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.updateActiveSchemeItemSettings = /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    function (dgId, settings) {
        /** @type {?} */
        var schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
        if (schemeItem) {
            this.schemeService.updateSchemeData(dgId, schemeItem);
        }
    };
    /** 设置活动的方案 */
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.setActiveSchemeItem = /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    function (dgId, activeItem) {
        /** @type {?} */
        var schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        if (activeItem) {
            this.activeSchemeItem[schemekey] = cloneDeep(activeItem);
        }
        else {
            delete this.activeSchemeItem[schemekey];
        }
    };
    /** 获取当前活动的方案 */
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    DatagridSettingsService.prototype.getActiveSchemeItem = /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    function (dgId) {
        /** @type {?} */
        var schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    };
    /**
     * @return {?}
     */
    DatagridSettingsService.prototype.getSearchTypes = /**
     * @return {?}
     */
    function () {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    };
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.showSimple = /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    function (gridInstance, settings, selectedSchemeItem) {
        var _this = this;
        /** @type {?} */
        var _columns = this.getCurrentConfigs().columns || gridInstance.columns;
        /** @type {?} */
        var columns = this.convertColumnsToSimple(_columns);
        columns[0] = tslib_1.__spread(columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; })));
        /** @type {?} */
        var searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            var simpleRef_1 = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef_1.hostView);
            simpleRef_1.instance.columns = columns;
            simpleRef_1.instance.seartTypes = searchTypes;
            simpleRef_1.instance.gridInstance = gridInstance;
            simpleRef_1.instance.schemeSer = this.schemeService;
            if (document.querySelector('#page-wrapper')) {
                simpleRef_1.instance.top = 76;
            }
            simpleRef_1.instance.enableScheme = gridInstance.enableScheme;
            if (!settings) {
                settings = this.getCurrentConfigs();
            }
            if (gridInstance.enableScheme) {
                /** @type {?} */
                var _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                if (settings) {
                    //  从高级模式 转到 简洁模式时，保存原始值
                    if (!simpleRef_1.instance['prevSchemeItem'] && this.prevSchemeItem) {
                        simpleRef_1.instance['prevSchemeItem'] = cloneDeep(this.prevSchemeItem);
                    }
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef_1.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        if (_currentSchemtItem) {
                            this.currentSchemeitem = _currentSchemtItem;
                            this.prevSchemeItem = cloneDeep(_currentSchemtItem);
                            simpleRef_1.instance.currentSchemeItem = _currentSchemtItem;
                        }
                        else {
                            if (!Object.keys(settings).length) {
                                settings = this.getLocalSettings(this.createConfigKey(gridInstance.id));
                            }
                            simpleRef_1.instance.currentSchemeItem = null;
                            simpleRef_1.instance.settings = settings;
                        }
                    }
                }
                else {
                    this.currentSchemeitem = _currentSchemtItem;
                    this.prevSchemeItem = cloneDeep(_currentSchemtItem);
                    simpleRef_1.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            else {
                if (gridInstance.enableSetMultiHeaders) {
                    simpleRef_1.instance.settings = this.getCurrentConfigs();
                }
                else {
                    simpleRef_1.instance.settings = settings;
                }
            }
            /** @type {?} */
            var zIndex = this.commonUtils.getFloatingLayerIndex();
            simpleRef_1.location.nativeElement.style.zIndex = '' + zIndex;
            document.body.appendChild(simpleRef_1.location.nativeElement);
            simpleRef_1.instance.canceld.subscribe((/**
             * @return {?}
             */
            function () {
                _this.restoreScheme(gridInstance);
            }));
            simpleRef_1.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                if (simpleRef_1) {
                    simpleRef_1.instance.container.nativeElement.style.right = '-500px';
                    return timer(500);
                }
            }))).subscribe((/**
             * @return {?}
             */
            function () {
                simpleRef_1.location.nativeElement.remove();
                simpleRef_1.destroy();
                simpleRef_1 = null;
                if (_this.schemeListSubscription) {
                    _this.schemeListSubscription.unsubscribe();
                }
                /** @type {?} */
                var _activeSchemtItem = _this.getActiveSchemeItem(gridInstance.id);
                if ((!_this.currentSchemeitem || (_activeSchemtItem && _activeSchemtItem.id !== _this.currentSchemeitem.id)) && (_activeSchemtItem && _activeSchemtItem.queryConditionString)) {
                    /** @type {?} */
                    var _currentSettings_1 = JSON.parse(_activeSchemtItem.queryConditionString)[_this.localeSer.localeId];
                    if (_currentSettings_1) {
                        columns[0].forEach((/**
                         * @param {?} f
                         * @return {?}
                         */
                        function (f) {
                            f.visible = _currentSettings_1.viewColumns.indexOf(f.field) > -1;
                        }));
                    }
                }
            }));
            // 打开高级设置窗口
            simpleRef_1.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var viewFields = _a.viewFields, settings = _a.settings, columns = _a.columns;
                // if (viewFields && viewFields.length){
                //     this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, {viewColumns: viewFields});
                // }
                _this.setCurrentConfigs(tslib_1.__assign({}, settings, { columns: columns }));
                _this.prevSchemeItem = simpleRef_1.instance['prevSchemeItem'];
                _this['SCHEME_DEFAULT_TITLE'] = simpleRef_1.instance.defaultSchemeName;
                _this.showAdvanced(gridInstance, null, simpleRef_1.instance.currentSchemeItem);
            }));
            simpleRef_1.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.applySettings(e, gridInstance);
            }));
            // 多表列设置
            simpleRef_1.instance.submitForGroupHeader.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.applySettings(e, gridInstance);
            }));
            // simpleRef.instance.fieldsChange.subscribe((visibleFields: string[]) => {
            //     this.updateActiveSchemeItemSettings(gridInstance.id, {viewColumns: visibleFields})
            // });
            // 打开新增方案窗口
            simpleRef_1.instance.addNewScheme.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.showNewSchemeDialog(gridInstance, e, simpleRef_1.instance.collectSettings(), {
                    ok: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        // 更换为新的方案
                        simpleRef_1.instance.onSchemeItemClick(null, t);
                        _this.saveUserConfig;
                    })
                });
            }));
            simpleRef_1.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef_1.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            function () {
                _this.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) {
                    return _this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    function (auth) {
                        return tslib_1.__assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) {
                    _this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    _this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t, simpleRef_1);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                simpleRef_1.instance.schemeList = list;
                if (!list || !list.length) {
                    _this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                var _activeSchemeItem = _this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    var hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.id === _activeSchemeItem.id; }));
                    if (!hasActiveItem) {
                        hasActiveItem = _this.getDefaultScheme(list); // 获取设置为当前方案的项
                        _this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef_1.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            simpleRef_1.instance.schemeChanged.subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                _this.currentSchemeitem = t;
                _this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));
            }));
            simpleRef_1.hostView.detectChanges();
            simpleRef_1.instance.cd.detectChanges();
            simpleRef_1.instance.container.nativeElement.style.right = '0px';
            return simpleRef_1;
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.show = /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            this.schemeService.createSchemeTaskID();
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.restoreScheme = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (gridInstance.enableScheme) {
            this.setActiveSchemeItem(gridInstance.id, this.prevSchemeItem);
            if (!this.prevSchemeItem) {
                this.setCurrentConfigs(null);
            }
        }
        else {
            this.setCurrentConfigs(null);
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.showAdvanced = /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    function (gridInstance, opts, selectedSchemeItem) {
        var _this = this;
        /** @type {?} */
        var _editColSortInfo = true;
        /** @type {?} */
        var editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            _editColSortInfo = false;
        }
        // 判断是否为多表头
        /** @type {?} */
        var showSetColumnsTab = !gridInstance.isMultiHeader() || (gridInstance.isMultiHeader() && gridInstance.enableSetMultiHeaders);
        /** @type {?} */
        var getActiveTabIndex = (/**
         * @return {?}
         */
        function () {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        var activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        var columns = this.convertColumnsToSimple(this.getCurrentConfigs().columns || gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        var currentSettings = this.getCurrentConfigs();
        /** @type {?} */
        var multiHeaderTree = currentSettings && currentSettings.multiHeaders ? currentSettings.multiHeaders.treeData : null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            /** @type {?} */
            var _currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            currentSettings = Object.assign(_currentSettings || {}, currentSettings || {});
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    /** @type {?} */
                    var fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === col.field; }));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
        }
        if (!gridInstance.enableSetMultiHeaders && currentSettings.viewColumns && currentSettings.viewColumns.length) {
            columns[0].forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                f.visible = currentSettings.viewColumns.indexOf(f.field) > -1;
            }));
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var sortFields = getDataFieldsForMultiHeaders(cloneDeep(columns)).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable; }));
        if (gridInstance.enableSetMultiHeaders && currentSettings && currentSettings.multiHeaders) {
            sortFields = getDataFieldsForMultiHeaders(currentSettings.multiHeaders.viewCols).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable; }));
        }
        // const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        // const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        // this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        var modalRef = null;
        // const okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        // const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        // const resetText =  this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        var defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns: columns,
                sortTreeData: sortFields,
                // viewTreeData: viewColumnsTreeData,
                gridInstance: gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex: activeTabIndex,
                schemeInfo: currentSettings,
                enableMultipleHeaders: gridInstance.enableSetMultiHeaders,
                multiHeaders: {
                    columns: columns,
                    treeData: multiHeaderTree
                },
                schemeName: selectedSchemeItem ? selectedSchemeItem['_title_'] : this['SCHEME_DEFAULT_TITLE']
            },
            showButtons: false,
            closed: (/**
             * @param {?} isCloseBtn
             * @param {?} opts
             * @return {?}
             */
            function (isCloseBtn, opts) {
                var event = opts.event;
                if (event && event.code === 'Escape') {
                    _this.restoreScheme(gridInstance);
                }
            })
        };
        /** @type {?} */
        var modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = showSetColumnsTab;
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.applySettings(e, gridInstance, { modalRef: modalRef, currentScheme: selectedSchemeItem });
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
            _this.restoreScheme(gridInstance);
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
            /** @type {?} */
            var settings = modalRef.content;
            var sortInfo = settings.sortInfo, viewColumns = settings.viewColumns, columnFormat = settings.columnFormat, groupField = settings.groupField, multiHeaders = settings.multiHeaders;
            _this.setCurrentConfigs({ sortInfo: sortInfo, viewColumns: viewColumns, columnFormat: columnFormat, groupField: groupField, multiHeaders: multiHeaders });
            _this.showSimple(gridInstance, { sortInfo: sortInfo, viewColumns: viewColumns, columnFormat: columnFormat, groupField: groupField, multiHeaders: multiHeaders }, cloneDeep(selectedSchemeItem));
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.canSetColumnSort = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.hasEnableSortColumns = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        function (c, r) {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    };
    // private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
    //     const childCols = [];
    //     let _count = colStartIndex;
    //     if (!cols[rowIndex]) {
    //         return  [];
    //     }
    //     cols[rowIndex].slice().forEach(element => {
    //         _count = _count + element.colspan;
    //         if ( _count <= colCount ) {
    //             childCols.push(element);
    //         }
    //     });
    //     cols[rowIndex].splice(0, childCols.length);
    //     return childCols.map((c, i) => {
    //         let n: any = {
    //             data: c,
    //             selectable: forSort ? !!c.sortable : true
    //         };
    //         if (c.colspan && c.colspan > 1) {
    //             n = {
    //                 data: c,
    //                 selectable: false,
    //                 expanded: true,
    //                 children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)
    //             };
    //         }
    //         return n;
    //     });
    // }
    // convertColumns2TreeData(cols: DataColumn[][], forSort = false) {
    //     const columns = cols.map((c: any) => {
    //         const aa = c.map((_) => {
    //             if (_.field.indexOf('farris-datagrid-column_') == -1) {
    //                 _.colspan = _.colspan || 1;
    //                 return _;
    //             }
    //             return null;
    //         });
    //         return aa.filter(n => n);
    //     });
    //     if (columns.length === 1) {
    //         return columns[0].map(c => {
    //             return {
    //                 data: c,
    //                 selectable: forSort ? !!c.sortable : true
    //             };
    //         });
    //     } else {
    //         return columns[0].map((c, i) => {
    //             if (c.colspan && c.colspan > 1) {
    //                 return {
    //                     data: c,
    //                     selectable: false,
    //                     expanded: true,
    //                     children: this.getChilds(columns, 1, 0, c.colspan, forSort)
    //                 };
    //             } else {
    //                 return {
    //                     data: c,
    //                     selectable: forSort ? !!c.sortable : true
    //                 };
    //             }
    //         });
    //     }
    // }
    // private checkViewTreeNodes(treeNodes: TreeNode[]) {
    //     treeNodes.forEach((tn: TreeNode) => {
    //         if (!tn.children || !tn.children.length) {
    //             tn.selectable = true;
    //         } else {
    //             tn.selectable = false;
    //             this.checkViewTreeNodes(tn.children);
    //         }
    //     });
    // }
    // private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
    //     const childCols = [];
    //     let _count = colStartIndex;
    //     if (!cols[rowIndex]) {
    //         return  [];
    //     }
    //     cols[rowIndex].slice().forEach(element => {
    //         _count = _count + element.colspan;
    //         if ( _count <= colCount ) {
    //             childCols.push(element);
    //         }
    //     });
    //     cols[rowIndex].splice(0, childCols.length);
    //     return childCols.map((c, i) => {
    //         let n: any = {
    //             data: c,
    //             selectable: forSort ? !!c.sortable : true
    //         };
    //         if (c.colspan && c.colspan > 1) {
    //             n = {
    //                 data: c,
    //                 selectable: false,
    //                 expanded: true,
    //                 children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)
    //             };
    //         }
    //         return n;
    //     });
    // }
    // convertColumns2TreeData(cols: DataColumn[][], forSort = false) {
    //     const columns = cols.map((c: any) => {
    //         const aa = c.map((_) => {
    //             if (_.field.indexOf('farris-datagrid-column_') == -1) {
    //                 _.colspan = _.colspan || 1;
    //                 return _;
    //             }
    //             return null;
    //         });
    //         return aa.filter(n => n);
    //     });
    //     if (columns.length === 1) {
    //         return columns[0].map(c => {
    //             return {
    //                 data: c,
    //                 selectable: forSort ? !!c.sortable : true
    //             };
    //         });
    //     } else {
    //         return columns[0].map((c, i) => {
    //             if (c.colspan && c.colspan > 1) {
    //                 return {
    //                     data: c,
    //                     selectable: false,
    //                     expanded: true,
    //                     children: this.getChilds(columns, 1, 0, c.colspan, forSort)
    //                 };
    //             } else {
    //                 return {
    //                     data: c,
    //                     selectable: forSort ? !!c.sortable : true
    //                 };
    //             }
    //         });
    //     }
    // }
    // private checkViewTreeNodes(treeNodes: TreeNode[]) {
    //     treeNodes.forEach((tn: TreeNode) => {
    //         if (!tn.children || !tn.children.length) {
    //             tn.selectable = true;
    //         } else {
    //             tn.selectable = false;
    //             this.checkViewTreeNodes(tn.children);
    //         }
    //     });
    // }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype._convertColumnsToSimple = 
    // private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
    //     const childCols = [];
    //     let _count = colStartIndex;
    //     if (!cols[rowIndex]) {
    //         return  [];
    //     }
    //     cols[rowIndex].slice().forEach(element => {
    //         _count = _count + element.colspan;
    //         if ( _count <= colCount ) {
    //             childCols.push(element);
    //         }
    //     });
    //     cols[rowIndex].splice(0, childCols.length);
    //     return childCols.map((c, i) => {
    //         let n: any = {
    //             data: c,
    //             selectable: forSort ? !!c.sortable : true
    //         };
    //         if (c.colspan && c.colspan > 1) {
    //             n = {
    //                 data: c,
    //                 selectable: false,
    //                 expanded: true,
    //                 children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)
    //             };
    //         }
    //         return n;
    //     });
    // }
    // convertColumns2TreeData(cols: DataColumn[][], forSort = false) {
    //     const columns = cols.map((c: any) => {
    //         const aa = c.map((_) => {
    //             if (_.field.indexOf('farris-datagrid-column_') == -1) {
    //                 _.colspan = _.colspan || 1;
    //                 return _;
    //             }
    //             return null;
    //         });
    //         return aa.filter(n => n);
    //     });
    //     if (columns.length === 1) {
    //         return columns[0].map(c => {
    //             return {
    //                 data: c,
    //                 selectable: forSort ? !!c.sortable : true
    //             };
    //         });
    //     } else {
    //         return columns[0].map((c, i) => {
    //             if (c.colspan && c.colspan > 1) {
    //                 return {
    //                     data: c,
    //                     selectable: false,
    //                     expanded: true,
    //                     children: this.getChilds(columns, 1, 0, c.colspan, forSort)
    //                 };
    //             } else {
    //                 return {
    //                     data: c,
    //                     selectable: forSort ? !!c.sortable : true
    //                 };
    //             }
    //         });
    //     }
    // }
    // private checkViewTreeNodes(treeNodes: TreeNode[]) {
    //     treeNodes.forEach((tn: TreeNode) => {
    //         if (!tn.children || !tn.children.length) {
    //             tn.selectable = true;
    //         } else {
    //             tn.selectable = false;
    //             this.checkViewTreeNodes(tn.children);
    //         }
    //     });
    // }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var cols = gridInstance.columns;
        // 重置列顺序为最初设计时的顺序
        /** @type {?} */
        var gridOpts = gridInstance.dfs._state.initialOptions;
        if (gridOpts.columnFields) {
            /** @type {?} */
            var desginCols = gridOpts.columnFields;
            /** @type {?} */
            var newColumns_1 = [];
            desginCols.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        newColumns_1.push(col);
                    }
                }
            }));
            cols = [newColumns_1];
        }
        return cols;
    };
    /**
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumnsToSimple = /**
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        if (!Array.isArray(cols[0])) {
            cols = [cols];
        }
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        function (_cols) {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string',
                        fixed: c.fixed || 'UNFIXED'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }));
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.resetGridView = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        var dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            var options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_2 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns_2.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns_2;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    };
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @param {?=} _scheme
     * @return {?}
     */
    DatagridSettingsService.prototype.updateGridView = /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @param {?=} _scheme
     * @return {?}
     */
    function (modalRef, gridInstance, btn, _scheme) {
        var _this = this;
        if (btn === void 0) { btn = null; }
        if (_scheme === void 0) { _scheme = null; }
        /** @type {?} */
        var settings = modalRef.content;
        if (settings) {
            var sortInfo_1 = settings.sortInfo, viewColumns_1 = settings.viewColumns, columnFormat_1 = settings.columnFormat, groupField = settings.groupField, expandGroupRows_1 = settings.expandGroupRows, multiHeaders_1 = settings.multiHeaders;
            /** @type {?} */
            var _colformats = columnFormat_1 ? this.convertColumnsToSimple(columnFormat_1)[0] : [];
            this.saving = true;
            /** @type {?} */
            var _groupField_1 = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                if (typeof groupField === 'string') {
                    _groupField_1 = groupField;
                }
                else if (Array.isArray(groupField)) {
                    _groupField_1 = groupField.join(',');
                }
            }
            /** @type {?} */
            var _sortInfo = sortInfo_1;
            // 当多表头需要清理排序字段与分组字段，保证这些字段必须在表头中
            if (gridInstance.enableSetMultiHeaders && multiHeaders_1) {
                if (_groupField_1) {
                    _groupField_1 = cleanGroupFields(multiHeaders_1.viewCols, _groupField_1.split(','));
                }
                if (sortInfo_1 && sortInfo_1.sortName && sortInfo_1.sortName.length) {
                    _sortInfo = cleanSortFields(multiHeaders_1.viewCols, sortInfo_1);
                }
            }
            /** @type {?} */
            var saveData_1 = { sortInfo: _sortInfo, viewColumns: viewColumns_1, groupField: _groupField_1, columnFormat: _colformats, expandGroupRows: expandGroupRows_1, multiHeaders: multiHeaders_1 };
            /** @type {?} */
            var refreshGrid_1 = (/**
             * @return {?}
             */
            function () {
                if (gridInstance.groupRows) {
                    gridInstance.expandGroupRows = expandGroupRows_1;
                    gridInstance.groupField = _groupField_1;
                }
                if (gridInstance.enableSetMultiHeaders) {
                    // 设置表头
                    refreshGridColumns(gridInstance, multiHeaders_1.viewCols || []);
                }
                else {
                    if (viewColumns_1 && viewColumns_1.length) {
                        gridInstance.columns = gridInstance.columns.map((/**
                         * @param {?} cols
                         * @return {?}
                         */
                        function (cols) {
                            _this.updateColumnFormat(cols, columnFormat_1, gridInstance);
                            return _this.newVisibleOrderColumns(cols, viewColumns_1, columnFormat_1, gridInstance);
                        }));
                    }
                }
                gridInstance.columnsChanged(true);
                if (sortInfo_1 && Object.keys(sortInfo_1).length) {
                    var sortName = sortInfo_1.sortName, sortOrder = sortInfo_1.sortOrder;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
            });
            /** @type {?} */
            var saveCurrent_1 = (/**
             * @return {?}
             */
            function () {
                _this.setUserConfig(gridInstance.id, saveData_1).subscribe((/**
                 * @return {?}
                 */
                function () {
                    if (btn) {
                        btn.disabled = false;
                    }
                    _this.saving = false;
                    refreshGrid_1();
                    _this.setActiveSchemeItem(gridInstance.id, _scheme);
                    _this.prevSchemeItem = _scheme;
                    _this.updateActiveSchemeItemSettings(gridInstance.id, saveData_1);
                    _this.setCurrentConfigs(saveData_1);
                    modalRef.close();
                }));
            });
            if (gridInstance.showConfirmWhenSchemeChanged && gridInstance.enableScheme) {
                /** @type {?} */
                var languageRes = this.localeSer.getValue('datagrid-scheme.schemeChanged');
                /** @type {?} */
                var _changed = this.schemeService.isSchemeChanged(saveData_1, gridInstance.enableSetMultiHeaders);
                if (_changed) {
                    /** @type {?} */
                    var msgDlg_1 = this.messager.question2(languageRes.title, [
                        {
                            text: languageRes.cancel,
                            cls: 'btn btn-light',
                            handle: (/**
                             * @return {?}
                             */
                            function () {
                                _this.saving = false;
                                modalRef.close();
                                msgDlg_1.close();
                                _this.restoreScheme(gridInstance);
                            })
                        },
                        {
                            text: languageRes.no,
                            cls: 'btn btn-secondary',
                            handle: (/**
                             * @return {?}
                             */
                            function () {
                                // 保存到当前方案
                                msgDlg_1.close();
                                saveCurrent_1();
                            })
                        },
                        {
                            text: languageRes.yes,
                            cls: 'btn btn-primary',
                            handle: (/**
                             * @return {?}
                             */
                            function () {
                                // 另存新方案
                                _this.showNewSchemeDialog(gridInstance, { type: 'saveas' }, saveData_1, {
                                    ok: (/**
                                     * @param {?} t
                                     * @return {?}
                                     */
                                    function (t) {
                                        _this.saving = false;
                                        modalRef.close();
                                        _this.currentSchemeitem = t;
                                        _this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));
                                        refreshGrid_1();
                                    }),
                                    cancel: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        _this.saving = false;
                                        if (btn) {
                                            btn.disabled = false;
                                        }
                                    })
                                });
                                msgDlg_1.close();
                            })
                        },
                    ]);
                }
                else {
                    if (this.currentSchemeitem && this.prevSchemeItem && this.currentSchemeitem.id === this.prevSchemeItem.id) {
                        this.saving = false;
                        modalRef.close();
                        refreshGrid_1();
                    }
                    else {
                        saveCurrent_1();
                    }
                }
            }
            else {
                saveCurrent_1();
            }
        }
        else {
            modalRef.close();
        }
    };
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.newVisibleOrderColumns = /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, viewColumns, columnFormat, gridInstance) {
        var _this = this;
        /** @type {?} */
        var hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (_this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        var newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === field; }));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c && c.field && c.field !== '_datagrid-setting-control_'; }));
    };
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    DatagridSettingsService.prototype.isNewAddColumn = /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    function (field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field === field; }));
    };
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.updateColumnFormat = /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                /** @type {?} */
                var formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.field === col.field; }));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    col.fixed = formatCol.fixed === 'UNFIXED' ? '' : formatCol.fixed;
                    col.title = formatCol.title;
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            if (!formatCol.groupFooter.options) {
                                formatCol.groupFooter.options = {};
                            }
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            if (!formatCol.footer.options) {
                                formatCol.footer.options = {};
                            }
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    };
    // 创建唯一key, 由uri + gridId 组成，并混淆
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.createConfigKey = 
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            this.writeDebugMsg('DatagridSettingService: Can not find the grid instance.');
        }
    };
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentUserSettings = /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        var config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            var sortName = gridInstance.sortName, sortOrder = gridInstance.sortOrder, columns = gridInstance.columns;
            if (sortName) {
                /** @type {?} */
                var sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            var viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible || n.visible === undefined; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(this._convertColumnsToSimple(gridInstance))[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.saveUserConfig = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    };
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype.setUserConfig = /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    function (gridId, config) {
        var _this = this;
        /** @type {?} */
        var gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        var currentConfig = localStorage.getItem(key);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            if (gridIns && gridIns.enableSetMultiHeaders) {
                _config['isMultiHeader'] = true;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                var activeScheme_1 = this.getActiveSchemeItem(gridId);
                if (activeScheme_1) {
                    this.updateSchemeSettings(activeScheme_1, config);
                    if (activeScheme_1.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme_1, gridId, true, gridIns.enableSetMultiHeaders);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        function (t) {
                            if (t.success) {
                                /** @type {?} */
                                var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme_1.type === 'public' || (activeScheme_1.type === 'org' && hasOrgAuthority)) {
                                    return _this.schemeService.saveScheme(activeScheme_1, gridId, true, gridIns.enableSetMultiHeaders);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    // 如为系统预制时，按无方案处理
                    return this._saveUserConfig(key, config ? _config : '');
                    // return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    };
    /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSettingsService.prototype.getUserConfig = /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (key, isMultiHeader) {
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        if (this.httpRestService) {
            return this._getUserConfig(key, isMultiHeader);
        }
        else {
            return of(this.getLocalSettings(key, isMultiHeader));
        }
    };
    /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSettingsService.prototype.getLocalSettings = /**
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (key, isMultiHeader) {
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        /** @type {?} */
        var config = localStorage.getItem(key);
        if (config) {
            /** @type {?} */
            var con = JSON.parse(config);
            if (isMultiHeader && !con['isMultiHeader']) {
                return null;
            }
            else {
                if (con['isMultiHeader']) {
                    return null;
                }
            }
            if (con[this.localeSer.localeId]) {
                return con[this.localeSer.localeId];
            }
            else {
                if (Object.keys(con).indexOf('viewColumns') > -1) {
                    return con;
                }
                return null;
            }
        }
        else {
            return null;
        }
    };
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    DatagridSettingsService.prototype.getDefaultScheme = /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    function (schemeList) {
        var _this = this;
        // 0、过滤出当前语言的方案列表
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        schemeList = schemeList.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return JSON.parse(n.name)[_this.localeSer.localeId];
        }));
        /** @type {?} */
        var defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.isDefault; }));
            if (!defaultScheme) {
                /** @type {?} */
                var publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.type === 'public'; }));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.type === 'org'; }));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getSettings = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        var _this = this;
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        var schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 3), schemeList = _b[0], userSetting = _b[1], supportedLanguages = _b[2];
            schemeList = schemeList || [];
            _this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                _this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                var defaultScheme = _this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    _this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    var userSettings = null;
                    if (defaultScheme.queryConditionString) {
                        userSettings = JSON.parse(defaultScheme.queryConditionString);
                    }
                    if (userSettings) {
                        /** @type {?} */
                        var localeId = _this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    };
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype._saveUserConfig = /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        try {
            /** @type {?} */
            var userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            this.writeDebugMsg(e, 'error');
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    DatagridSettingsService.prototype.resetUserConfig = /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    function (gridInstance, modalRef) {
        var _this = this;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                return _this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSettingsService.prototype._getUserConfig = /**
     * @private
     * @param {?} key
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (key, isMultiHeader) {
        var _this = this;
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    var c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (isMultiHeader && !c['isMultiHeader']) {
                            return null;
                        }
                        else {
                            if (c['isMultiHeader']) {
                                return null;
                            }
                        }
                        if (c[_this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[_this.localeSer.localeId];
                        }
                        else {
                            c[_this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            if (this.debugSer) {
                this.debugSer.error(e);
            }
        }
    };
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.buildSubmitData = /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    function (gridId, settings) {
        if (settings === void 0) { settings = null; }
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        var localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        var currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    };
    // ----------------------------------------------------------------------------------------------- \\
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?} authInfo
     * @param {?} simpleRef
     * @return {?}
     */
    DatagridSettingsService.prototype.showSchemeListDialog = 
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?} authInfo
     * @param {?} simpleRef
     * @return {?}
     */
    function (gridInstance, schemeList, authInfo, simpleRef) {
        var _this = this;
        /** @type {?} */
        var modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: (schemeList || []).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return JSON.parse(n.name)[_this.localeSer.localeId];
                })),
                removeItem: authInfo.success,
                currentUserId: authInfo.currentUserId,
                currentSchemeId: this.currentSchemeitem ? this.currentSchemeitem.id : ''
            },
            showButtons: false
        };
        /** @type {?} */
        var schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        // schemeListDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        var instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        function () {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            _this.schemeService.updateScheme(t, gridInstance.id, gridInstance.enableSetMultiHeaders).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                var msg = '列设置方案保存成功。';
                if (_this.notifyService) {
                    _this.notifyService.success(msg);
                }
                else {
                    _this.messager.success(msg);
                }
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                var newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                _this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                schemeListDlg.close();
                /** @type {?} */
                var currentScheme = _this.getActiveSchemeItem(gridInstance.id);
                if (!currentScheme) {
                    _this.setActiveSchemeItem(gridInstance.id, null);
                    simpleRef.instance.currentSchemeItem = null;
                    simpleRef.instance.resetToDefault();
                    _this.prevSchemeItem = null;
                    simpleRef.instance.onSubmitClick();
                }
            }));
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    };
    // 新增或另存方案
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} e
     * @param {?} settings
     * @param {?} callback
     * @return {?}
     */
    DatagridSettingsService.prototype.showNewSchemeDialog = 
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} e
     * @param {?} settings
     * @param {?} callback
     * @return {?}
     */
    function (gridInstance, e, settings, callback) {
        var _this = this;
        /** @type {?} */
        var modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        var newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        // newSchemeDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        var instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        function () {
            newSchemeDlg.close();
            if (callback && callback.cancel) {
                callback.cancel();
            }
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return _this.createNewScheme(gridInstance.id, t, e.type === 'new', settings);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t.flag === false) {
                /** @type {?} */
                var msg = t.msg;
                /** @type {?} */
                var _msg = msg;
                if (msg) {
                    if (msg.indexOf('|') > -1) {
                        _msg = msg.split('|').map((/**
                         * @param {?} langcode
                         * @return {?}
                         */
                        function (langcode) {
                            return _this.localeSer.getValue('datagrid-settings.' + langcode);
                        })).join('');
                    }
                    else {
                        _msg = _this.localeSer.getValue('datagrid-settings.' + msg);
                    }
                    if (_this.notifyService) {
                        _this.notifyService.info(_msg);
                    }
                    else {
                        _this.messager.info(_msg);
                    }
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            var schemeList = _this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            _this.schemeService.setSchemeList(gridInstance.id, schemeList);
            if (callback && callback.ok) {
                callback.ok(t);
            }
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return _this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            function (auth) {
                return tslib_1.__assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var hasAuthority = { public: true, org: true };
            // 您没有将方案的使用范围设置为公共的权限。
            /** @type {?} */
            var _msg = 'noAuth.public';
            if (t.type.value === 'org') {
                // 您没有将方案的使用范围设置为组织的权限。
                _msg = 'noAuth.org';
            }
            /** @type {?} */
            var msg = _this.localeSer.getValue('datagrid-settings.' + _msg);
            if (t.success) {
                /** @type {?} */
                var hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        _this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                _this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
                ;
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getSchemeList = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var gridIns = this.getGridInstance(gridId);
        return this.schemeService.getSchemeList(gridId, gridIns.enableSetMultiHeaders);
    };
    /** 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     */
    /**
     * 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     * @param {?} gridId
     * @param {?} data
     * @param {?=} isNewScheme
     * @param {?=} currentSettings
     * @return {?}
     */
    DatagridSettingsService.prototype.createNewScheme = /**
     * 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     * @param {?} gridId
     * @param {?} data
     * @param {?=} isNewScheme
     * @param {?=} currentSettings
     * @return {?}
     */
    function (gridId, data, isNewScheme, currentSettings) {
        if (isNewScheme === void 0) { isNewScheme = true; }
        var _a;
        if (!data.name) {
            // msg 请输入方案名称
            return of({ flag: false, msg: 'required.schemeName' });
        }
        else {
            /** @type {?} */
            var hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                // msg '方案名称已存在，请修改。'
                return of({ flag: false, msg: 'has.exist' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                var getMessageCode_1 = (/**
                 * @param {?} langCode
                 * @return {?}
                 */
                function (langCode) {
                    if (langCode === 'zh-CHS') {
                        return 'has.chs'; // 简体中文名称已存在。
                    }
                    else if (langCode === 'zh-CHT') {
                        return 'has.cht'; // 繁體中文名稱已存在。
                    }
                    else {
                        return 'has.en'; // 英文名称已存在
                    }
                });
                if (hasName.includes(this.localeSer.localeId)) {
                    /** @type {?} */
                    var msg = getMessageCode_1(this.localeSer.localeId);
                    return of({ flag: false, msg: msg });
                }
                else {
                    /** @type {?} */
                    var msgs = hasName.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return getMessageCode_1(n);
                    }));
                    return of({ flag: false, msg: msgs.join('|') });
                }
            }
        }
        /** @type {?} */
        var requiredName = [];
        if (!data.name[this.localeSer.localeId]) {
            requiredName.push(this.localeSer.localeId);
        }
        // this.languages.forEach(n => {
        //     if (data.name[n.code] === '' || data.name[n.code] === undefined) {
        //         requiredName.push(n.code);
        //     }
        // });
        if (requiredName.length) {
            /** @type {?} */
            var msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n === 'zh-CHS') {
                    return 'required.chs'; //'请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return 'required.cht'; //'请输入繁体中文名称。';
                }
                else {
                    return 'required.en'; // '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('|') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            // msg '请选择组织'
            return of({ flag: false, msg: 'required.org' });
        }
        /** @type {?} */
        var _config = null;
        if (!isNewScheme) {
            /** @type {?} */
            var LOCALEID = this.localeSer.localeId;
            if (currentSettings && currentSettings.columnFormat) {
                currentSettings.columnFormat = this.convertColumnsToSimple(currentSettings.columnFormat);
            }
            _config = (_a = {}, _a[LOCALEID] = currentSettings, _a);
        }
        /** @type {?} */
        var newId = this.idService.guid();
        /** @type {?} */
        var isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        var gridInstance = this.getGridInstance(gridId);
        if (gridInstance && gridInstance.enableSetMultiHeaders && _config) {
            _config['isMultiHeader'] = gridInstance.enableSetMultiHeaders;
        }
        /** @type {?} */
        var scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId, false, gridInstance.enableSetMultiHeaders).pipe(map((/**
         * @return {?}
         */
        function () {
            return scheme;
        })));
    };
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.setSchemeList = /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    function (schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    };
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    DatagridSettingsService.prototype.buildOrgAndSchemeRelations = /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    function (schemeId, orgIds) {
        var _this = this;
        if (!orgIds || !orgIds.length) {
            return [];
        }
        if (typeof orgIds === 'string') {
            orgIds = orgIds.split(',');
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return {
                id: _this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    };
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentSchemeSettings = /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    };
    /**
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.setCurrentConfigs = /**
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        this['CURRENT_CONFIGS'] = settings;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentConfigs = /**
     * @private
     * @return {?}
     */
    function () {
        return this['CURRENT_CONFIGS'] || {};
    };
    /**
     * @private
     * @param {?} e
     * @param {?} gridInstance
     * @param {?=} modal
     * @return {?}
     */
    DatagridSettingsService.prototype.applySettings = /**
     * @private
     * @param {?} e
     * @param {?} gridInstance
     * @param {?=} modal
     * @return {?}
     */
    function (e, gridInstance, modal) {
        e.target.disabled = true;
        if (this.saving) {
            return;
        }
        if (!this.saving) {
            /** @type {?} */
            var _scheme = void 0;
            /** @type {?} */
            var dlg = void 0;
            if (modal) {
                var modalRef = modal.modalRef, currentScheme = modal.currentScheme;
                dlg = modalRef;
                _scheme = currentScheme;
            }
            else {
                dlg = e;
                _scheme = e.currentScheme;
            }
            this.updateGridView(dlg, gridInstance, e.target, _scheme);
        }
    };
    /**
     * @param {?} viewCols
     * @param {?} gridInitOptions
     * @return {?}
     */
    DatagridSettingsService.prototype.getMultiHeaderColumns = /**
     * @param {?} viewCols
     * @param {?} gridInitOptions
     * @return {?}
     */
    function (viewCols, gridInitOptions) {
        return mergetColumnOptions(viewCols, gridInitOptions);
    };
    DatagridSettingsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridSettingsService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: IdService },
        { type: LocaleService }
    ]; };
    return DatagridSettingsService;
}());
export { DatagridSettingsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype._httpRestService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.languages;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.activeSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeListSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.currentSchemeitem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.prevSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,