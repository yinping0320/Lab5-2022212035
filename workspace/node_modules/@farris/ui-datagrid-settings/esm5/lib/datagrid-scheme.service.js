/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { appendPerfixForUri, IdService } from "@farris/ui-common";
import { of, Subject } from "rxjs";
import { IS_MULTI_HEADER_STRING } from "./setting.model";
import { cloneDeep } from "lodash-es";
/**
 * 保存方案API
 * @type {?}
 */
var SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
/**
 * 获取方案列表API
 * @type {?}
 */
var SCHEME_WEBAPI_QUERY = SCHEME_WEBAPI + "/belongId/";
/**
 * 方案列表管理- 设默认、删除 API
 * @type {?}
 */
var SCHEME_WEBAPI_UPDATE = SCHEME_WEBAPI + "/batch";
/**
 * 权限验证
 * @type {?}
 */
var SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
/** @type {?} */
var LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
var DatagridSchemeService = /** @class */ (function () {
    function DatagridSchemeService(inject) {
        this.inject = inject;
        this.restService = null;
        this.state = {};
        this.perfixStr = '';
        this.schemeList$ = new Subject();
        this.schemeApi = {
            SCHEME_WEBAPI: SCHEME_WEBAPI,
            /** 获取方案列表API */
            SCHEME_WEBAPI_QUERY: SCHEME_WEBAPI_QUERY,
            /** 方案列表管理- 设默认、删除 API */
            SCHEME_WEBAPI_UPDATE: SCHEME_WEBAPI_UPDATE,
            /** 权限验证 */
            SCHEME_WEBAPI_Auth: SCHEME_WEBAPI_Auth,
            LANGUAGE_WEBAPI: LANGUAGE_WEBAPI
        };
        this.schemeKey = {};
        this.currentSchemeSettings = null;
    }
    /**
     * @param {?} perfixStr
     * @return {?}
     */
    DatagridSchemeService.prototype.setUriPerfix = /**
     * @param {?} perfixStr
     * @return {?}
     */
    function (perfixStr) {
        this.perfixStr = perfixStr || '';
    };
    /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    DatagridSchemeService.prototype.update = /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    function (d, gridId) {
        if (!this.state[gridId]) {
            this.state[gridId] = {};
        }
        this.state[gridId] = Object.assign(this.state[gridId], d);
    };
    /**
     * @param {?} httpSer
     * @return {?}
     */
    DatagridSchemeService.prototype.setRestService = /**
     * @param {?} httpSer
     * @return {?}
     */
    function (httpSer) {
        if (httpSer && httpSer['befRepository']) {
            this.restService = httpSer['befRepository']['restService'];
        }
    };
    /**
     * @private
     * @param {?} uri
     * @param {?} perfix
     * @return {?}
     */
    DatagridSchemeService.prototype.mergeUri = /**
     * @private
     * @param {?} uri
     * @param {?} perfix
     * @return {?}
     */
    function (uri, perfix) {
        return appendPerfixForUri ? appendPerfixForUri(uri, perfix) : uri;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSchemeService.prototype.getWebFormKey = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var webformHash = window.location.hash.split('?')[0];
        return webformHash.substring(webformHash.lastIndexOf('/') + 1);
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSchemeService.prototype.destory = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        delete this.schemeKey[gridId];
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSchemeService.prototype.getSchemeKey = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        if (!this.schemeKey[gridId]) {
            /** @type {?} */
            var formKey = this.getWebFormKey();
            this.schemeKey[gridId] = formKey + "_DatagridScheme_" + gridId;
        }
        return this.schemeKey[gridId];
    };
    /**
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSchemeService.prototype.getSchemeList = /**
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (gridID, isMultiHeader) {
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        /** @type {?} */
        var uri = this.schemeApi.SCHEME_WEBAPI_QUERY + this.getBelongId(gridID, isMultiHeader);
        uri = this.mergeUri(uri, this.perfixStr);
        if (this.restService) {
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
    };
    /**
     * @param {?} gridID
     * @param {?} schemeData
     * @return {?}
     */
    DatagridSchemeService.prototype.updateSchemeData = /**
     * @param {?} gridID
     * @param {?} schemeData
     * @return {?}
     */
    function (gridID, schemeData) {
        /** @type {?} */
        var schemeList = this.getStateValue(gridID, 'list');
        schemeList = schemeList.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id !== schemeData.id; }));
        schemeList.push(schemeData);
        this.setSchemeList(gridID, schemeList);
    };
    /**
     * @private
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSchemeService.prototype.getBelongId = /**
     * @private
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (gridID, isMultiHeader) {
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        /** @type {?} */
        var id = this.getSchemeKey(gridID);
        if (isMultiHeader) {
            id = id + IS_MULTI_HEADER_STRING;
        }
        return id;
    };
    /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSchemeService.prototype.saveScheme = /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (scheme, gridID, isUpdate, isMultiHeader) {
        if (isUpdate === void 0) { isUpdate = false; }
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        if (this.restService) {
            /** @type {?} */
            var httpMethod = isUpdate ? 'PUT' : 'POST';
            scheme.belongId = this.getBelongId(gridID, isMultiHeader);
            /** @type {?} */
            var uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI, this.perfixStr);
            return this.restService.invoke(uri, httpMethod, null, { body: scheme }, false);
        }
    };
    /**
     * @param {?} param
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    DatagridSchemeService.prototype.updateScheme = /**
     * @param {?} param
     * @param {?} gridID
     * @param {?=} isMultiHeader
     * @return {?}
     */
    function (param, gridID, isMultiHeader) {
        if (isMultiHeader === void 0) { isMultiHeader = false; }
        if (!param) {
            return of(false);
        }
        /** @type {?} */
        var belongId = this.getBelongId(gridID, isMultiHeader);
        param.belongId = belongId;
        if (param.belongId) {
            /** @type {?} */
            var uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_UPDATE, this.perfixStr);
            return this.restService.invoke(uri, 'PUT', null, { body: param }, false);
        }
    };
    /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    DatagridSchemeService.prototype.getStateValue = /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    function (gridId) {
        var statePro = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            statePro[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var dgState = this.state[gridId];
        if (dgState) {
            if (statePro && statePro.length) {
                return statePro.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                function (r, c) {
                    return r[c];
                }), dgState);
            }
            return dgState;
        }
        return null;
    };
    /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    DatagridSchemeService.prototype.updateStateValue = /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    function (gridId, propertyName, value) {
        var _a;
        this.update((_a = {}, _a[propertyName] = value, _a), gridId);
    };
    /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    DatagridSchemeService.prototype.setSchemeList = /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    function (gridId, newSchemeList) {
        this.updateStateValue(gridId, 'list', newSchemeList);
        this.schemeList$.next(newSchemeList);
    };
    /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    DatagridSchemeService.prototype.hasSchemeName = /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    function (gridId, schemeName) {
        /** @type {?} */
        var schemeList = this.getStateValue(gridId, 'list');
        if (!schemeList || !schemeList.length) {
            return false;
        }
        if (typeof schemeName === 'string') {
            return !!schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.name === schemeName.trim(); }));
        }
        else {
            if (typeof schemeName === 'object') {
                /** @type {?} */
                var replayNames_1 = [];
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    if (n.name) {
                        /** @type {?} */
                        var nameObj = JSON.parse(n.name);
                        // const currentNames = Object.values(nameObj);
                        for (var k in schemeName) {
                            if (nameObj[k] === schemeName[k]) {
                                replayNames_1.push(k);
                            }
                        }
                    }
                }));
                return replayNames_1;
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridSchemeService.prototype.checkAuthority = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_Auth, this.perfixStr);
        return this.restService.invoke(uri, 'GET', null, null, false);
    };
    /**
     * @return {?}
     */
    DatagridSchemeService.prototype.getLanguages = /**
     * @return {?}
     */
    function () {
        if (this.restService) {
            /** @type {?} */
            var uri = this.mergeUri(this.schemeApi.LANGUAGE_WEBAPI, this.perfixStr);
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
        else {
            return of([]);
        }
    };
    /**
     * @return {?}
     */
    DatagridSchemeService.prototype.createSchemeTaskID = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var idService = new IdService();
        this['SCHEME_TASK_ID'] = idService.guid();
        this.currentSchemeSettings = null;
    };
    /**
     * @param {?} configs
     * @return {?}
     */
    DatagridSchemeService.prototype.setSettings = /**
     * @param {?} configs
     * @return {?}
     */
    function (configs) {
        this.currentSchemeSettings = {
            taskid: this['SCHEME_TASK_ID'],
            values: cloneDeep(configs)
        };
    };
    /**
     * @return {?}
     */
    DatagridSchemeService.prototype.getSettings = /**
     * @return {?}
     */
    function () {
        return this.currentSchemeSettings;
    };
    /**
     * @param {?} nowSettings
     * @param {?} isMultiHeader
     * @return {?}
     */
    DatagridSchemeService.prototype.isSchemeChanged = /**
     * @param {?} nowSettings
     * @param {?} isMultiHeader
     * @return {?}
     */
    function (nowSettings, isMultiHeader) {
        var sortInfo = nowSettings.sortInfo, viewColumns = nowSettings.viewColumns, groupField = nowSettings.groupField, columnFormat = nowSettings.columnFormat, expandGroupRows = nowSettings.expandGroupRows, multiHeaders = nowSettings.multiHeaders;
        var _a = this.getSettings().values, sortInfo1 = _a.sortInfo, viewColumns1 = _a.viewColumns, groupField1 = _a.groupField, columnFormat1 = _a.columnFormat, expandGroupRows1 = _a.expandGroupRows, multiHeaders1 = _a.multiHeaders;
        /** @type {?} */
        var checkSortInfo = (/**
         * @param {?} _sortInfo
         * @return {?}
         */
        function (_sortInfo) {
            if (!_sortInfo || !Object.keys(_sortInfo).length) {
                _sortInfo = {
                    sortName: [],
                    sortOrder: []
                };
            }
            return _sortInfo;
        });
        sortInfo = checkSortInfo(sortInfo);
        sortInfo1 = checkSortInfo(sortInfo1);
        /** @type {?} */
        var checkGroupField = (/**
         * @param {?} _groupField
         * @return {?}
         */
        function (_groupField) {
            if (!_groupField) {
                _groupField = [];
            }
            return _groupField;
        });
        groupField = checkGroupField(groupField);
        groupField1 = checkGroupField(groupField1);
        /** @type {?} */
        var nowconfig;
        /** @type {?} */
        var initConfig;
        if (isMultiHeader) {
            nowconfig = { sortInfo: sortInfo, expandGroupRows: expandGroupRows, groupField: groupField, multiHeaders: multiHeaders };
            initConfig = { sortInfo: sortInfo1, expandGroupRows: expandGroupRows1, groupField: groupField1, multiHeaders: multiHeaders1 };
        }
        else {
            nowconfig = { columnFormat: columnFormat, expandGroupRows: expandGroupRows, groupField: groupField, sortInfo: sortInfo, viewColumns: viewColumns };
            initConfig = {
                columnFormat: columnFormat1,
                expandGroupRows: expandGroupRows1,
                groupField: groupField1,
                sortInfo: sortInfo1,
                viewColumns: viewColumns1
            };
        }
        /** @type {?} */
        var _clearData = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return JSON.stringify(data).replace(/UNFIXED/g, '').replace(/"calculationType":-1,/g, '').replace(/"calculationType":-1/g, '');
        });
        return _clearData(nowconfig) != _clearData(initConfig);
    };
    return DatagridSchemeService;
}());
export { DatagridSchemeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.state;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.perfixStr;
    /** @type {?} */
    DatagridSchemeService.prototype.schemeList$;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.schemeApi;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.schemeKey;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.currentSchemeSettings;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc2NoZW1lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLXNldHRpbmdzLyIsInNvdXJjZXMiOlsibGliL2RhdGFncmlkLXNjaGVtZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0MsT0FBTyxFQUFtRCxzQkFBc0IsRUFBOEMsTUFBTSxpQkFBaUIsQ0FBQztBQUN0SixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7OztJQUloQyxhQUFhLEdBQUcscUNBQXFDOzs7OztJQUVyRCxtQkFBbUIsR0FBTSxhQUFhLGVBQVk7Ozs7O0lBRWxELG9CQUFvQixHQUFNLGFBQWEsV0FBUTs7Ozs7SUFFL0Msa0JBQWtCLEdBQUcsNERBQTREOztJQUVqRixlQUFlLEdBQUcsNERBQTREO0FBR3BGO0lBc0JJLCtCQUFvQixNQUFnQjtRQUFoQixXQUFNLEdBQU4sTUFBTSxDQUFVO1FBckI1QixnQkFBVyxHQUFHLElBQUksQ0FBQztRQUNuQixVQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUMxQixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUVwQixjQUFTLEdBQUc7WUFDaEIsYUFBYSxlQUFBO1lBQ2IsZ0JBQWdCO1lBQ2hCLG1CQUFtQixxQkFBQTtZQUNuQix5QkFBeUI7WUFDekIsb0JBQW9CLHNCQUFBO1lBQ3BCLFdBQVc7WUFDWCxrQkFBa0Isb0JBQUE7WUFFbEIsZUFBZSxpQkFBQTtTQUNsQixDQUFDO1FBRU0sY0FBUyxHQUFRLEVBQUUsQ0FBQztRQUVwQiwwQkFBcUIsR0FBRyxJQUFJLENBQUM7SUFHckMsQ0FBQzs7Ozs7SUFF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RSxZQUFZLGNBQUEsRUFBRSxDQUFDO1lBQ3JFLFVBQVUsR0FBSyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBQyxXQUFXLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxDQUFDO1NBQ2xJO2FBQU07WUFDSCxTQUFTLEdBQUksRUFBRSxZQUFZLGNBQUEsRUFBQyxlQUFlLGlCQUFBLEVBQUMsVUFBVSxZQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsV0FBVyxhQUFBLEVBQUUsQ0FBQztZQUNoRixVQUFVLEdBQUs7Z0JBQ1gsWUFBWSxFQUFFLGFBQWE7Z0JBQzNCLGVBQWUsRUFBRSxnQkFBZ0I7Z0JBQ2pDLFVBQVUsRUFBQyxXQUFXO2dCQUN0QixRQUFRLEVBQUUsU0FBUztnQkFDbkIsV0FBVyxFQUFFLFlBQVk7YUFDNUIsQ0FBQztTQUNMOztZQUVLLFVBQVU7Ozs7UUFBRyxVQUFDLElBQUk7WUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuSSxDQUFDLENBQUE7UUFFRCxPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FBQyxBQWpQRCxJQWlQQzs7Ozs7OztJQWhQRyw0Q0FBMkI7Ozs7O0lBQzNCLHNDQUFrQzs7Ozs7SUFDbEMsMENBQXVCOztJQUN2Qiw0Q0FBNEI7Ozs7O0lBRTVCLDBDQVVFOzs7OztJQUVGLDBDQUE0Qjs7Ozs7SUFFNUIsc0RBQXFDOzs7OztJQUV6Qix1Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IGFwcGVuZFBlcmZpeEZvclVyaSwgSWRTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvdWktY29tbW9uXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IEJhdGNoU2NoZW1lLCBEYXRhZ3JpZFNjaGVtZU1vZGVsLCBEZ1NjaGVtZVN0YXRlLCBJU19NVUxUSV9IRUFERVJfU1RSSU5HLCBTY2hlbWVBdXRoTW9kZWwsIFNjaGVtZVN0YXRlLCBTZXR0aW5nTW9kZWwgfSBmcm9tIFwiLi9zZXR0aW5nLm1vZGVsXCI7XHJcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcclxuXHJcblxyXG4vKiog5L+d5a2Y5pa55qGIQVBJICovXHJcbmNvbnN0IFNDSEVNRV9XRUJBUEkgPSAnL2FwaS9ydW50aW1lL3N5cy92MS4wL3F1ZXJ5c29sdXRpb24nO1xyXG4vKiog6I635Y+W5pa55qGI5YiX6KGoQVBJICovXHJcbmNvbnN0IFNDSEVNRV9XRUJBUElfUVVFUlkgPSBgJHtTQ0hFTUVfV0VCQVBJfS9iZWxvbmdJZC9gO1xyXG4vKiog5pa55qGI5YiX6KGo566h55CGLSDorr7pu5jorqTjgIHliKDpmaQgQVBJICovXHJcbmNvbnN0IFNDSEVNRV9XRUJBUElfVVBEQVRFID0gYCR7U0NIRU1FX1dFQkFQSX0vYmF0Y2hgO1xyXG4vKiog5p2D6ZmQ6aqM6K+BICovXHJcbmNvbnN0IFNDSEVNRV9XRUJBUElfQXV0aCA9ICcvYXBpL3J1bnRpbWUvc3lzL3YxLjAvcXVlcnlzb2x1dGlvbi9jb21wb25lbnRUeXBlL0RhdGFncmlkJztcclxuXHJcbmNvbnN0IExBTkdVQUdFX1dFQkFQSSA9ICcvYXBpL3J1bnRpbWUvc3lzL3YxLjAvbG9naW5JbmZvP2luZm9UeXBlPXN1cHBvcnRlZExhbmd1YWdlJztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRTY2hlbWVTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVzdFNlcnZpY2UgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBzdGF0ZTogRGdTY2hlbWVTdGF0ZSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBwZXJmaXhTdHIgPSAnJztcclxuICAgIHNjaGVtZUxpc3QkID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgICBwcml2YXRlIHNjaGVtZUFwaSA9IHtcclxuICAgICAgICBTQ0hFTUVfV0VCQVBJLFxyXG4gICAgICAgIC8qKiDojrflj5bmlrnmoYjliJfooahBUEkgKi9cclxuICAgICAgICBTQ0hFTUVfV0VCQVBJX1FVRVJZLFxyXG4gICAgICAgIC8qKiDmlrnmoYjliJfooajnrqHnkIYtIOiuvum7mOiupOOAgeWIoOmZpCBBUEkgKi9cclxuICAgICAgICBTQ0hFTUVfV0VCQVBJX1VQREFURSxcclxuICAgICAgICAvKiog5p2D6ZmQ6aqM6K+BICovXHJcbiAgICAgICAgU0NIRU1FX1dFQkFQSV9BdXRoLFxyXG5cclxuICAgICAgICBMQU5HVUFHRV9XRUJBUElcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBzY2hlbWVLZXk6IGFueSA9IHt9O1xyXG5cclxuICAgIHByaXZhdGUgY3VycmVudFNjaGVtZVNldHRpbmdzID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdDogSW5qZWN0b3IpIHtcclxuICAgIH1cclxuXHJcbiAgICBzZXRVcmlQZXJmaXgocGVyZml4U3RyOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnBlcmZpeFN0ciA9IHBlcmZpeFN0ciB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZDogU2NoZW1lU3RhdGUsIGdyaWRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlW2dyaWRJZF0pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZVtncmlkSWRdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RhdGVbZ3JpZElkXSA9IE9iamVjdC5hc3NpZ24odGhpcy5zdGF0ZVtncmlkSWRdLCBkKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRSZXN0U2VydmljZShodHRwU2VyOiBhbnkpIHtcclxuICAgICAgICBpZiAoaHR0cFNlciAmJiBodHRwU2VyWydiZWZSZXBvc2l0b3J5J10pIHtcclxuICAgICAgICAgICAgdGhpcy5yZXN0U2VydmljZSA9IGh0dHBTZXJbJ2JlZlJlcG9zaXRvcnknXVsncmVzdFNlcnZpY2UnXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtZXJnZVVyaSh1cmksIHBlcmZpeCkge1xyXG4gICAgICAgIHJldHVybiBhcHBlbmRQZXJmaXhGb3JVcmkgPyBhcHBlbmRQZXJmaXhGb3JVcmkodXJpLCBwZXJmaXgpOiB1cmk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRXZWJGb3JtS2V5KCkge1xyXG4gICAgICAgIGNvbnN0IHdlYmZvcm1IYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3BsaXQoJz8nKVswXTtcclxuICAgICAgICByZXR1cm4gd2ViZm9ybUhhc2guc3Vic3RyaW5nKHdlYmZvcm1IYXNoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0b3J5KGdyaWRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuc2NoZW1lS2V5W2dyaWRJZF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2NoZW1lS2V5KGdyaWRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNjaGVtZUtleVtncmlkSWRdKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1LZXkgPSB0aGlzLmdldFdlYkZvcm1LZXkoKTtcclxuICAgICAgICAgICAgdGhpcy5zY2hlbWVLZXlbZ3JpZElkXSA9IGAke2Zvcm1LZXl9X0RhdGFncmlkU2NoZW1lXyR7Z3JpZElkfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnNjaGVtZUtleVtncmlkSWRdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNjaGVtZUxpc3QoZ3JpZElEOiBzdHJpbmcsIGlzTXVsdGlIZWFkZXIgPSBmYWxzZSk6IE9ic2VydmFibGU8RGF0YWdyaWRTY2hlbWVNb2RlbFtdPiB7XHJcbiAgICAgICAgbGV0IHVyaSA9IHRoaXMuc2NoZW1lQXBpLlNDSEVNRV9XRUJBUElfUVVFUlkgKyB0aGlzLmdldEJlbG9uZ0lkKGdyaWRJRCwgaXNNdWx0aUhlYWRlcik7XHJcbiAgICAgICAgdXJpID0gdGhpcy5tZXJnZVVyaSh1cmksIHRoaXMucGVyZml4U3RyKTtcclxuICAgICAgICBpZiAodGhpcy5yZXN0U2VydmljZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN0U2VydmljZS5pbnZva2UodXJpLCAnR0VUJywgbnVsbCwgbnVsbCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTY2hlbWVEYXRhKGdyaWRJRDogc3RyaW5nLCBzY2hlbWVEYXRhKSB7XHJcbiAgICAgICAgbGV0IHNjaGVtZUxpc3QgPSB0aGlzLmdldFN0YXRlVmFsdWUoZ3JpZElELCAnbGlzdCcpO1xyXG4gICAgICAgIHNjaGVtZUxpc3QgPSBzY2hlbWVMaXN0LmZpbHRlcihuID0+IG4uaWQgIT09IHNjaGVtZURhdGEuaWQpO1xyXG4gICAgICAgIHNjaGVtZUxpc3QucHVzaChzY2hlbWVEYXRhKTtcclxuICAgICAgICB0aGlzLnNldFNjaGVtZUxpc3QoZ3JpZElELCBzY2hlbWVMaXN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEJlbG9uZ0lkKGdyaWRJRDogc3RyaW5nLCBpc011bHRpSGVhZGVyID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgaWQgPSB0aGlzLmdldFNjaGVtZUtleShncmlkSUQpO1xyXG4gICAgICAgIGlmIChpc011bHRpSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGlkID0gaWQgKyBJU19NVUxUSV9IRUFERVJfU1RSSU5HO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVTY2hlbWUoc2NoZW1lOiBEYXRhZ3JpZFNjaGVtZU1vZGVsLCBncmlkSUQ6IHN0cmluZywgaXNVcGRhdGUgPSBmYWxzZSwgaXNNdWx0aUhlYWRlciA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzdFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgY29uc3QgaHR0cE1ldGhvZCA9IGlzVXBkYXRlID8gJ1BVVCc6ICdQT1NUJztcclxuICAgICAgICAgICAgc2NoZW1lLmJlbG9uZ0lkID0gdGhpcy5nZXRCZWxvbmdJZChncmlkSUQsIGlzTXVsdGlIZWFkZXIpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdXJpID0gdGhpcy5tZXJnZVVyaSh0aGlzLnNjaGVtZUFwaS5TQ0hFTUVfV0VCQVBJLCB0aGlzLnBlcmZpeFN0cik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLmludm9rZSh1cmksIGh0dHBNZXRob2QsIG51bGwsIHsgYm9keTogc2NoZW1lfSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTY2hlbWUocGFyYW06IEJhdGNoU2NoZW1lLCBncmlkSUQ6IHN0cmluZywgaXNNdWx0aUhlYWRlciA9IGZhbHNlKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoIXBhcmFtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJlbG9uZ0lkID0gdGhpcy5nZXRCZWxvbmdJZChncmlkSUQsIGlzTXVsdGlIZWFkZXIpO1xyXG4gICAgICAgIHBhcmFtLmJlbG9uZ0lkID0gYmVsb25nSWRcclxuXHJcbiAgICAgICAgaWYgKHBhcmFtLmJlbG9uZ0lkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVyaSA9IHRoaXMubWVyZ2VVcmkodGhpcy5zY2hlbWVBcGkuU0NIRU1FX1dFQkFQSV9VUERBVEUsIHRoaXMucGVyZml4U3RyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuaW52b2tlKHVyaSwgJ1BVVCcsIG51bGwsIHtib2R5OiBwYXJhbX0sIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdGVWYWx1ZShncmlkSWQsIC4uLnN0YXRlUHJvKSB7XHJcbiAgICAgICAgY29uc3QgZGdTdGF0ZSA9IHRoaXMuc3RhdGVbZ3JpZElkXTtcclxuICAgICAgICBpZiAoZGdTdGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVQcm8gJiYgc3RhdGVQcm8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVQcm8ucmVkdWNlKChyLCBjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJbY107XHJcbiAgICAgICAgICAgICAgICB9LCBkZ1N0YXRlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGdTdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVTdGF0ZVZhbHVlKGdyaWRJZCwgcHJvcGVydHlOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKHtbcHJvcGVydHlOYW1lXTogdmFsdWV9LCBncmlkSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFNjaGVtZUxpc3QoZ3JpZElkLCBuZXdTY2hlbWVMaXN0KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZVZhbHVlKGdyaWRJZCwgJ2xpc3QnLCBuZXdTY2hlbWVMaXN0KTtcclxuICAgICAgICB0aGlzLnNjaGVtZUxpc3QkLm5leHQobmV3U2NoZW1lTGlzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFzU2NoZW1lTmFtZShncmlkSWQsIHNjaGVtZU5hbWU6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHNjaGVtZUxpc3QgPSB0aGlzLmdldFN0YXRlVmFsdWUoZ3JpZElkLCAnbGlzdCcpO1xyXG4gICAgICAgIGlmICghc2NoZW1lTGlzdCB8fCAhc2NoZW1lTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWVOYW1lID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gISFzY2hlbWVMaXN0LmZpbmQobiA9PiBuLm5hbWUgPT09IHNjaGVtZU5hbWUudHJpbSgpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtZU5hbWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYXlOYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgc2NoZW1lTGlzdC5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZU9iaiA9IEpTT04ucGFyc2Uobi5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgY3VycmVudE5hbWVzID0gT2JqZWN0LnZhbHVlcyhuYW1lT2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBrIGluIHNjaGVtZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lT2JqW2tdID09PSBzY2hlbWVOYW1lW2tdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGF5TmFtZXMucHVzaChrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYXlOYW1lcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja0F1dGhvcml0eSgpOiBPYnNlcnZhYmxlPFNjaGVtZUF1dGhNb2RlbD4ge1xyXG4gICAgICAgIGNvbnN0IHVyaSA9IHRoaXMubWVyZ2VVcmkodGhpcy5zY2hlbWVBcGkuU0NIRU1FX1dFQkFQSV9BdXRoLCB0aGlzLnBlcmZpeFN0cik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuaW52b2tlKHVyaSwgJ0dFVCcsIG51bGwsIG51bGwsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYW5ndWFnZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzdFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgY29uc3QgdXJpID0gdGhpcy5tZXJnZVVyaSh0aGlzLnNjaGVtZUFwaS5MQU5HVUFHRV9XRUJBUEksIHRoaXMucGVyZml4U3RyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuaW52b2tlKHVyaSwgJ0dFVCcsIG51bGwsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTY2hlbWVUYXNrSUQoKSB7XHJcbiAgICAgICAgY29uc3QgaWRTZXJ2aWNlOiBJZFNlcnZpY2UgPSBuZXcgSWRTZXJ2aWNlKCk7XHJcbiAgICAgICAgdGhpc1snU0NIRU1FX1RBU0tfSUQnXSA9IGlkU2VydmljZS5ndWlkKCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2NoZW1lU2V0dGluZ3MgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzZXRTZXR0aW5ncyhjb25maWdzOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTY2hlbWVTZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgdGFza2lkOiB0aGlzWydTQ0hFTUVfVEFTS19JRCddLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IGNsb25lRGVlcChjb25maWdzKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRTZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50U2NoZW1lU2V0dGluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTY2hlbWVDaGFuZ2VkKG5vd1NldHRpbmdzOiBTZXR0aW5nTW9kZWwsIGlzTXVsdGlIZWFkZXI6IGJvb2xlYW4pIDogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IHsgc29ydEluZm8sIHZpZXdDb2x1bW5zLCBncm91cEZpZWxkLCBjb2x1bW5Gb3JtYXQsIGV4cGFuZEdyb3VwUm93cywgbXVsdGlIZWFkZXJzIH0gPSBub3dTZXR0aW5ncztcclxuICAgICAgICBsZXQgeyBzb3J0SW5mbzogc29ydEluZm8xLCB2aWV3Q29sdW1uczogdmlld0NvbHVtbnMxLCBncm91cEZpZWxkOiBncm91cEZpZWxkMSwgY29sdW1uRm9ybWF0OiBjb2x1bW5Gb3JtYXQxLCBleHBhbmRHcm91cFJvd3M6IGV4cGFuZEdyb3VwUm93czEsIG11bHRpSGVhZGVyczogbXVsdGlIZWFkZXJzMSB9ID0gdGhpcy5nZXRTZXR0aW5ncygpLnZhbHVlcztcclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2tTb3J0SW5mbyA9IChfc29ydEluZm8pID0+IHtcclxuICAgICAgICAgICAgaWYgKCFfc29ydEluZm8gfHwgIU9iamVjdC5rZXlzKF9zb3J0SW5mbykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBfc29ydEluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc29ydE5hbWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogW11cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfc29ydEluZm87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNvcnRJbmZvID0gY2hlY2tTb3J0SW5mbyhzb3J0SW5mbyk7XHJcbiAgICAgICAgc29ydEluZm8xID0gY2hlY2tTb3J0SW5mbyhzb3J0SW5mbzEpO1xyXG5cclxuICAgICAgICBjb25zdCBjaGVja0dyb3VwRmllbGQgPSAoX2dyb3VwRmllbGQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFfZ3JvdXBGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgX2dyb3VwRmllbGQgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX2dyb3VwRmllbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyb3VwRmllbGQgPSBjaGVja0dyb3VwRmllbGQoZ3JvdXBGaWVsZCk7XHJcbiAgICAgICAgZ3JvdXBGaWVsZDEgPSBjaGVja0dyb3VwRmllbGQoZ3JvdXBGaWVsZDEpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IG5vd2NvbmZpZywgaW5pdENvbmZpZztcclxuICAgICAgICBpZiAoaXNNdWx0aUhlYWRlcikge1xyXG4gICAgICAgICAgICBub3djb25maWcgPSAgeyBzb3J0SW5mbywgZXhwYW5kR3JvdXBSb3dzLCBncm91cEZpZWxkLCBtdWx0aUhlYWRlcnMgfTtcclxuICAgICAgICAgICAgaW5pdENvbmZpZyAgPSAgeyBzb3J0SW5mbzogc29ydEluZm8xLCBleHBhbmRHcm91cFJvd3M6IGV4cGFuZEdyb3VwUm93czEsIGdyb3VwRmllbGQ6Z3JvdXBGaWVsZDEsIG11bHRpSGVhZGVyczogbXVsdGlIZWFkZXJzMSB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5vd2NvbmZpZyA9ICB7IGNvbHVtbkZvcm1hdCxleHBhbmRHcm91cFJvd3MsZ3JvdXBGaWVsZCwgc29ydEluZm8sIHZpZXdDb2x1bW5zIH07XHJcbiAgICAgICAgICAgIGluaXRDb25maWcgID0gIHsgXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5Gb3JtYXQ6IGNvbHVtbkZvcm1hdDEsXHJcbiAgICAgICAgICAgICAgICBleHBhbmRHcm91cFJvd3M6IGV4cGFuZEdyb3VwUm93czEsIFxyXG4gICAgICAgICAgICAgICAgZ3JvdXBGaWVsZDpncm91cEZpZWxkMSxcclxuICAgICAgICAgICAgICAgIHNvcnRJbmZvOiBzb3J0SW5mbzEsXHJcbiAgICAgICAgICAgICAgICB2aWV3Q29sdW1uczogdmlld0NvbHVtbnMxXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBfY2xlYXJEYXRhID0gKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpLnJlcGxhY2UoL1VORklYRUQvZywgJycpLnJlcGxhY2UoL1wiY2FsY3VsYXRpb25UeXBlXCI6LTEsL2csICcnKS5yZXBsYWNlKC9cImNhbGN1bGF0aW9uVHlwZVwiOi0xL2csICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBfY2xlYXJEYXRhKG5vd2NvbmZpZykgIT0gX2NsZWFyRGF0YShpbml0Q29uZmlnKTtcclxuICAgIH1cclxufVxyXG4iXX0=