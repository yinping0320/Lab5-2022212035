/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter } from "@angular/core";
import { fromEvent, race } from 'rxjs';
import { buffer, bufferCount, debounceTime, filter, first, repeat } from 'rxjs/operators';
var FarrisDblClickDirective = /** @class */ (function () {
    function FarrisDblClickDirective(el) {
        this.el = el;
        this.dblClickHandler = new EventEmitter();
        this._click$ = null;
    }
    /**
     * @return {?}
     */
    FarrisDblClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var doubleClickDuration = 250;
        /** @type {?} */
        var leftClick$ = fromEvent(this.el.nativeElement, 'click').pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.button === 0; })));
        /** @type {?} */
        var debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));
        /** @type {?} */
        var clickLimit$ = leftClick$.pipe(bufferCount(2));
        /** @type {?} */
        var bufferGate$ = race(debounce$, clickLimit$)
            .pipe(first(), repeat());
        this._click$ = leftClick$.pipe(buffer(bufferGate$), filter((/**
         * @param {?} clicks
         * @return {?}
         */
        function (clicks) {
            return clicks.length > 1;
        }))).subscribe((/**
         * @param {?} clicks
         * @return {?}
         */
        function (clicks) {
            _this.dblClickHandler.emit(clicks[0]);
        }));
    };
    /**
     * @return {?}
     */
    FarrisDblClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._click$) {
            this._click$.unsubscribe();
            this._click$ = null;
        }
    };
    FarrisDblClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[f-dbl-click]'
                },] }
    ];
    /** @nocollapse */
    FarrisDblClickDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FarrisDblClickDirective.propDecorators = {
        options: [{ type: Input, args: ['f-dbl-click',] }],
        dblClickHandler: [{ type: Output }]
    };
    return FarrisDblClickDirective;
}());
export { FarrisDblClickDirective };
if (false) {
    /** @type {?} */
    FarrisDblClickDirective.prototype.options;
    /** @type {?} */
    FarrisDblClickDirective.prototype.dblClickHandler;
    /**
     * @type {?}
     * @private
     */
    FarrisDblClickDirective.prototype._click$;
    /**
     * @type {?}
     * @private
     */
    FarrisDblClickDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJsLWNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGJsLWNsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFnQixTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFPLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRy9GO0lBU0ksaUNBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSHhCLG9CQUFlLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFMUQsWUFBTyxHQUFrQixJQUFJLENBQUM7SUFDRCxDQUFDOzs7O0lBRXRDLDBDQUFROzs7SUFBUjtRQUFBLGlCQW1CQzs7WUFsQlMsbUJBQW1CLEdBQUcsR0FBRzs7WUFDekIsVUFBVSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTs7OztRQUFDLFVBQUMsS0FBVSxJQUFLLE9BQUEsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQWxCLENBQWtCLEVBQUMsQ0FBQzs7WUFDdkcsU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7O1lBQzlELFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFDN0MsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO2FBQy9DLElBQUksQ0FDSCxLQUFLLEVBQUUsRUFDUCxNQUFNLEVBQUUsQ0FDVDtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FDMUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUNuQixNQUFNOzs7O1FBQUMsVUFBQSxNQUFNO1lBQ1QsT0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDLEVBQUMsQ0FDTCxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLE1BQU07WUFDZCxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCw2Q0FBVzs7O0lBQVg7UUFDSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQzs7Z0JBckNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtpQkFDNUI7Ozs7Z0JBUG1CLFVBQVU7OzswQkFVekIsS0FBSyxTQUFDLGFBQWE7a0NBQ25CLE1BQU07O0lBZ0NYLDhCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0FuQ1ksdUJBQXVCOzs7SUFFaEMsMENBQThCOztJQUM5QixrREFBa0U7Ozs7O0lBRWxFLDBDQUFzQzs7Ozs7SUFDMUIscUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQsIHJhY2UgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgYnVmZmVyLCBidWZmZXJDb3VudCwgZGVib3VuY2VUaW1lLCBmaWx0ZXIsIGZpcnN0LCBtYXAsIHJlcGVhdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2YtZGJsLWNsaWNrXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0RibENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgnZi1kYmwtY2xpY2snKSBvcHRpb25zO1xyXG4gICAgQE91dHB1dCgpIGRibENsaWNrSGFuZGxlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfY2xpY2skOiBTdWJzY3JpcHRpb24gID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZG91YmxlQ2xpY2tEdXJhdGlvbiA9IDI1MDtcclxuICAgICAgICBjb25zdCBsZWZ0Q2xpY2skID0gZnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NsaWNrJykucGlwZShmaWx0ZXIoKGV2ZW50OiBhbnkpID0+IGV2ZW50LmJ1dHRvbiA9PT0gMCkpO1xyXG4gICAgICAgIGNvbnN0IGRlYm91bmNlJCA9IGxlZnRDbGljayQucGlwZShkZWJvdW5jZVRpbWUoZG91YmxlQ2xpY2tEdXJhdGlvbikpO1xyXG4gICAgICAgIGNvbnN0IGNsaWNrTGltaXQkID0gbGVmdENsaWNrJC5waXBlKGJ1ZmZlckNvdW50KDIpKTtcclxuICAgICAgICBjb25zdCBidWZmZXJHYXRlJCA9IHJhY2UoZGVib3VuY2UkLCBjbGlja0xpbWl0JClcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgIGZpcnN0KCksXHJcbiAgICAgICAgICByZXBlYXQoKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGljayQgPSBsZWZ0Q2xpY2skLnBpcGUoXHJcbiAgICAgICAgICAgIGJ1ZmZlcihidWZmZXJHYXRlJCksXHJcbiAgICAgICAgICAgIGZpbHRlcihjbGlja3MgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWNrcy5sZW5ndGggPiAxO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICkuc3Vic2NyaWJlKGNsaWNrcyA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGJsQ2xpY2tIYW5kbGVyLmVtaXQoY2xpY2tzWzBdKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2xpY2skKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrJC51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jbGljayQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==