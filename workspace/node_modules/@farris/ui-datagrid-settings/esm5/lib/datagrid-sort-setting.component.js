/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';
import { MultiSelectComponent } from '@farris/ui-multi-select';
var DatagridSortSettingComponent = /** @class */ (function () {
    function DatagridSortSettingComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this.selectedIds = [];
        this.treeData = [];
        this.sortInfoChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.setFieldSortOrder = /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    function ($event, data, order) {
        $event.stopPropagation();
        data.sortable = true;
        data.order = order;
        if (!order) {
            this.ms.moveToLeft(data);
        }
        this.cd.detectChanges();
        this.onSelectionsChange(null);
        return false;
    };
    /**
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.getSortInfo = /**
     * @return {?}
     */
    function () {
        if (this.ms.selections) {
            /** @type {?} */
            var names_1 = [];
            /** @type {?} */
            var orders_1 = [];
            this.ms.selections.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                col.order = col.order || 'asc';
                names_1.push(col.field);
                orders_1.push(col.order);
            }));
            return { sortName: names_1, sortOrder: orders_1 };
        }
        return '';
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.onSelectionsChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var si = this.getSortInfo();
        this.sortInfoChange.emit(si);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.onBeforeMove = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var items = (/** @type {?} */ ($event.items));
        if ($event.target.indexOf('rightAll') > -1) {
            for (var id in items) {
                if ($event.items[id]) {
                    $event.items[id].order = 'asc';
                }
            }
        }
        else {
            if ($event.target === 'right') {
                for (var id in items) {
                    if ($event.items[id]) {
                        $event.items[id].order = 'asc';
                    }
                }
            }
        }
    };
    DatagridSortSettingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sort-setting',
                    template: "<div style=\"padding: 10px;height: 100%;\">\r\n<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'List'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" [rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (dataChange)=\"onSelectionsChange($event)\" (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\" >\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n            <!-- <span class=\"f-icon f-icon-sort-asc-sm sort-label\" title=\"\u5347\u5E8F\" *ngIf=\"data.sortable && data.order === 'asc'\"></span>\r\n            <span class=\"f-icon f-icon-sort-desc-sm  sort-label\" title=\"\u964D\u5E8F\" *ngIf=\"data.sortable && data.order === 'desc'\"></span> -->\r\n            <div class=\"d-flex\">\r\n                <div style=\"width: 120px;white-space: nowrap;min-width: 60px\">\r\n                    {{ data[textField] }} \r\n                </div>\r\n                <div class=\"farris-input-wrap  farris-checkradio-hor flex-fill\" style=\"justify-content: right;flex-wrap:nowrap\">\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'asc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\" data.order && data.order !== 'asc'\" [class.f-icon-check-circle]=\"!data.order || data.order === 'asc'\"></span>\r\n                        {{'datagrid.settings.asc'|locale}}\r\n                    </button>\r\n                    \r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'desc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\"data.order !== 'desc'\" [class.f-icon-check-circle]=\"data.order === 'desc'\"></span>\r\n                        {{'datagrid.settings.desc'|locale}}\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext sort-btns\" style=\"font-size: 12px;\" style=\"margin-right: 0;\" (click)=\"setFieldSortOrder($event, data, '')\" title=\"{{'datagrid.settings.cancelSort'|locale}}\">\r\n                        <span class=\"f-icon  f-icon-unsort\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    DatagridSortSettingComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    DatagridSortSettingComponent.propDecorators = {
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        selectedIds: [{ type: Input }],
        treeData: [{ type: Input }],
        ms: [{ type: ViewChild, args: ['ms',] }],
        sortInfoChange: [{ type: Output }]
    };
    return DatagridSortSettingComponent;
}());
export { DatagridSortSettingComponent };
if (false) {
    /** @type {?} */
    DatagridSortSettingComponent.prototype.idField;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.valueField;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.textField;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.selectedIds;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.treeData;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.ms;
    /** @type {?} */
    DatagridSortSettingComponent.prototype.sortInfoChange;
    /**
     * @type {?}
     * @private
     */
    DatagridSortSettingComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSortSettingComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFVLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRS9EO0lBZ0JJLHNDQUFvQixRQUFrQixFQUFVLEVBQXFCO1FBQWpELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQVY1RCxZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxPQUFPLENBQUM7UUFDckIsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUNwQixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUVqQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBR2IsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTBCLENBQUM7Ozs7SUFHekUsK0NBQVE7OztJQUFSLGNBQVksQ0FBQzs7Ozs7OztJQUViLHdEQUFpQjs7Ozs7O0lBQWpCLFVBQWtCLE1BQWtCLEVBQUUsSUFBUyxFQUFFLEtBQWE7UUFDMUQsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUVELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFRCxrREFBVzs7O0lBQVg7UUFDSSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFOztnQkFDZCxPQUFLLEdBQUcsRUFBRTs7Z0JBQ1YsUUFBTSxHQUFHLEVBQUU7WUFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsR0FBRztnQkFDMUIsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQztnQkFDL0IsT0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RCLFFBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUMsRUFBQyxDQUFDO1lBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFLLEVBQUUsU0FBUyxFQUFFLFFBQU0sRUFBRSxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELHlEQUFrQjs7OztJQUFsQixVQUFtQixNQUFNOztZQUNmLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsbURBQVk7Ozs7SUFBWixVQUFhLE1BQU07O1lBQ1QsS0FBSyxHQUFRLG1CQUFBLE1BQU0sQ0FBQyxLQUFLLEVBQU87UUFDdEMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN4QyxLQUFLLElBQU0sRUFBRSxJQUFJLEtBQUssRUFBRTtnQkFDcEIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFO29CQUNsQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7aUJBQ2xDO2FBQ0o7U0FDSjthQUFNO1lBQ0gsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtnQkFDM0IsS0FBSyxJQUFNLEVBQUUsSUFBSSxLQUFLLEVBQUU7b0JBQ3BCLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRTt3QkFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO3FCQUNsQztpQkFDSjthQUNKO1NBQ0o7SUFDTCxDQUFDOztnQkF4RUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QixpdUZBQXFEO2lCQUN4RDs7OztnQkFONkMsUUFBUTtnQkFBd0IsaUJBQWlCOzs7MEJBUzFGLEtBQUs7NkJBQ0wsS0FBSzs0QkFDTCxLQUFLOzhCQUNMLEtBQUs7MkJBRUwsS0FBSztxQkFDTCxTQUFTLFNBQUMsSUFBSTtpQ0FFZCxNQUFNOztJQTJEWCxtQ0FBQztDQUFBLEFBekVELElBeUVDO1NBckVZLDRCQUE0Qjs7O0lBRXJDLCtDQUEyQjs7SUFDM0Isa0RBQThCOztJQUM5QixpREFBNkI7O0lBQzdCLG1EQUEwQjs7SUFFMUIsZ0RBQXVCOztJQUN2QiwwQ0FBMEM7O0lBRTFDLHNEQUE4Qzs7Ozs7SUFFbEMsZ0RBQTBCOzs7OztJQUFFLDBDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBJbmplY3RvciwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE11bHRpU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1tdWx0aS1zZWxlY3QnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3NvcnQtc2V0dGluZycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRTb3J0U2V0dGluZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgaWRGaWVsZCA9ICdmaWVsZCc7XHJcbiAgICBASW5wdXQoKSB2YWx1ZUZpZWxkID0gJ2ZpZWxkJztcclxuICAgIEBJbnB1dCgpIHRleHRGaWVsZCA9ICd0aXRsZSc7XHJcbiAgICBASW5wdXQoKSBzZWxlY3RlZElkcyA9IFtdO1xyXG5cclxuICAgIEBJbnB1dCgpIHRyZWVEYXRhID0gW107XHJcbiAgICBAVmlld0NoaWxkKCdtcycpIG1zOiBNdWx0aVNlbGVjdENvbXBvbmVudDtcclxuXHJcbiAgICBAT3V0cHV0KCkgc29ydEluZm9DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpIHt9XHJcblxyXG4gICAgc2V0RmllbGRTb3J0T3JkZXIoJGV2ZW50OiBNb3VzZUV2ZW50LCBkYXRhOiBhbnksIG9yZGVyOiBzdHJpbmcpIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZGF0YS5zb3J0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgZGF0YS5vcmRlciA9IG9yZGVyO1xyXG5cclxuICAgICAgICBpZiAoIW9yZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXMubW92ZVRvTGVmdChkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMub25TZWxlY3Rpb25zQ2hhbmdlKG51bGwpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTb3J0SW5mbygpIHtcclxuICAgICAgICBpZiAodGhpcy5tcy5zZWxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IG9yZGVycyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLm1zLnNlbGVjdGlvbnMuZm9yRWFjaChjb2wgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29sLm9yZGVyID0gY29sLm9yZGVyIHx8ICdhc2MnO1xyXG4gICAgICAgICAgICAgICAgbmFtZXMucHVzaChjb2wuZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgb3JkZXJzLnB1c2goY29sLm9yZGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4geyBzb3J0TmFtZTogbmFtZXMsIHNvcnRPcmRlcjogb3JkZXJzIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICBvblNlbGVjdGlvbnNDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3Qgc2kgPSB0aGlzLmdldFNvcnRJbmZvKCk7XHJcbiAgICAgICAgdGhpcy5zb3J0SW5mb0NoYW5nZS5lbWl0KHNpKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkJlZm9yZU1vdmUoJGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXM6IGFueSA9ICRldmVudC5pdGVtcyBhcyBhbnk7XHJcbiAgICAgICAgaWYgKCRldmVudC50YXJnZXQuaW5kZXhPZigncmlnaHRBbGwnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkZXZlbnQuaXRlbXNbaWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50Lml0ZW1zW2lkXS5vcmRlciA9ICdhc2MnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQgPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50Lml0ZW1zW2lkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuaXRlbXNbaWRdLm9yZGVyID0gJ2FzYyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==