{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/ui-datagrid-settings/lib/multi-headers/new-header.component.ts","ng://@farris/ui-datagrid-settings/lib/multi-headers/setcolumns.component.ts","ng://@farris/ui-datagrid-settings/lib/mutli-headers.helper.ts","ng://@farris/ui-datagrid-settings/lib/multi-headers/column-tree.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-format-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.component.ts","ng://@farris/ui-datagrid-settings/lib/getValueWithLocaleId.ts","ng://@farris/ui-datagrid-settings/lib/simple-mode/simple-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-scheme.service.ts","ng://@farris/ui-datagrid-settings/lib/setting.model.ts","ng://@farris/ui-datagrid-settings/lib/scheme/newscheme.component.ts","ng://@farris/ui-datagrid-settings/lib/scheme/scheme-list.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings-locale.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.service.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-sort-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-visible-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/dbl-click.directive.ts","ng://@farris/ui-datagrid-settings/lib/multi-headers/preview/preview-multi-headers.component.ts","ng://@farris/ui-datagrid-settings/lib/multi-headers/preview/show-preview.directive.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","NewHeaderFormComponent","label","placeholder","ngOnInit","Component","args","selector","template","Input","ViewChild","SetColumnsComponent","data","checkedItems","selectedIds","map","id","forEach","item","field","_setColumnId","c","colspan","groupHeader","columnsToTreeNodes","cols","nodes","filter","node","children","level","expanded","visible","_columnsToTreeNodes2","col","splice","child","reset2DefaultForMultiHeaders","gridInstance","options","dfs","initialOptions","settings","viewColumns","columnFormat","sort","sortOrders","sortOrder","split","sortNames","sortName","sortInfo","groupField","expandGroupRows","multiHeaders","treeData","viewCols","multiHeaderOptions","columns","groupHeaderFields","mergetColumnOptions","gridInitOptions","dataFields_1","flatten","cloneDeep","indexOf","old","find","_col","rowspan","mergeSortInfo","newColumns","keys","sortName_1","sortOrder_1","sortable","order","multiHeadersHasDataFields","multiHeaderColumns","getDataFieldsForMultiHeaders","groupHeaderCols","ColumnTreeComponent","injector","ngzone","cd","render","modalService","el","notitySer","_this","inModal","nodeSelected","EventEmitter","fields","treecols","contextMenus","HOU_XUAN_LIE_ID","GROUP_HEADER_ICON","Hou_Xuan_Qu","title","houxuanquNode","languageRes","preview","tips","new","newChild","setDataField","rename","top","up","down","bottom","cancelGroup","remove","candidate","setHeader","ok","cancel","required","defaultGroupHeaderName","newHeaderPlaceholder","newHeaderLabel","localeSer","moveMenuItemVisiblily","rowData","isGroupHeader","onBeforeShowContextMenu","parents","of","show","get","LocaleService","groupHeaders","dg","allDataFields","ControlPanelFeild","cellTemp","getValue","initTreeData","initTreenodeContextMenus","listenTreeTableEvent","ngOnChanges","changes","isFirstChange","tt","clearSelections","ngAfterViewInit","ngOnDestroy","removed","subscribe","rowNode","parent","leaf","icon","hxl","getHouXuanNode","append","handle","addNewGroup","maxMultiHeaders","setColumnsForGroupHeader","resetHeaderName","moveTop","moveUp","moveDown","moveBottom","removeGroup","_treeData","houXuanLie","f","a","halign","findRowNode","onTreeSelected","$event","emit","showNewHeaderDialog","okCallback","dlgTitle","modalRef","width","height","showMaxButton","resizable","initialState","buttons","text","cls","close","generateGroupHeaderId","Date","getTime","createNewGroupHeader","rn","gh","fixed","appendChildren","findIndex","slice","event","selectedRow","childs","serializedValue","ghfRef","updateSerializedValue","info","input","nativeElement","focus","onMoreBtnClick","nodeData","selectNode","ctxMenu","onContextMenu","getCanSelectColumns","showSetColumnsDialog","selectedItems","groupEditorRef","content","needRemoveNodes","needAppendNodes","expandNode","hxlCols","setColumnHeader","index","tempArr","unshift","getPreviewGroupColumns","treeNodes","getAllNodes","convert2Array","getHouXuanFields","k","rowNodes","arr","fn","maxlevel","Math","max","val","leftCols","rightCols","_fixed","getRoot","_colspan","_rowspan","newCol","align","allowGrouping","groupFooter","footer","size","dataType","parentId","newCol2","clearTreeNodesData","elementRef","getSettings","hiddenCol","stopPropagation","exportAs","encapsulation","ViewEncapsulation","None","Injector","NgZone","ChangeDetectorRef","Renderer2","BsModalService","ElementRef","NotifyService","Output","ColumnFormatSettingComponent","gridSettingComponentRef","formatChange","fieldsChange","allCols","formatData","columnType","activeField","showGridFooter","searchItems","alignItems","summaryItems","summaryItems2","fixedItems","isEn","switchValue","_searchResult","checkAll","unCheckAll","enableMultipleHeaders","selectTreeNode","showFooter","footerTemplate","defineProperty","groupHeadersRef","setFormatData","setActiveField","checkColumnOptions","seachResultIsCheckAll","localeId","initData","setTimeout","colForm","valueChanges","v","selectFirstNode","filterColumns","undefined","calculationType","searchWords","toLowerCase","searchFields","allColsLength","fieldsLength","onFieldClick","onFieldsChanged","onDblClick","target","style","userSelect","onCheckboxClick","_fields","searchColumn","txt","onFieldDrop","fieldInfo","ulElRef","removedIndex","addedIndex","moveItem","targetItem","moveItemIndex","targetItemIndex","removedItem","_a","getCheckAllState","search","onCheckAllClick","state","isVisible","detectChanges","onlySeeVisibleColumns","clearSearch","searchInput","onNodeSelected","getMultiHeaders","DatagridSettingsComponent","inject","activeTabIndex","sortTreeData","canSetColumnSort","canSetColumnVisible","enableReset","cancelHandle","submitHandle","reset","concise","schemeInfo","enableGroupFooter","schemeName","tabWidth","messager","MessagerService","render2","notifySer","getViewColumns","enableScheme","reset2Default","setCurrentTab","tab","left","tabs","Array","from","header","querySelectorAll","setStyle","activeTab","changeTabs","idx","getCurrentGroupHeaders","setCurrentGroupHeaders","tabEl","classList","contains","closest","onSortInfoChange","visibleCls","_getViewColumns","mergeColumnFormats","_columnsFormat","colsCount","onColumnFormatChange","colFormatData","_showMessager","msg","onSubmitClick","_multiHeaders","onCancelClick","onSettingReset","restorDefaultText","confirm","columnFields","newColumns_1","showConcise","colFormatSettings","getMultilingualValue","valObj","SimpleColumnsComponent","seartTypes","clickToHidden","_schemeList","submit","submitForGroupHeader","closed","advanced","canceld","addNewScheme","showSchemeList","activeItemChange","schemeChanged","showSchemePanel","currentSchemeItem","searchResultIsVisibleAll","defaultSchemeName","prevSchemeItem","schemeSer","noDisplyColumnTip","notify","JSON","parse","name","onClick","onEscKeydown","document","querySelector","onEnterKeydown","onControlGKeydown","ctrlKey","_key","key","includes","preventDefault","showAdvanced","getCurrentSchemeSettings","queryConditionString","enableSetMultiHeaders","_reset2Default","dirtySettings","container","resetToDefault","getCurrentSettings","setSettings","defaultSettings","visibleLen","isCheckAll","multiHeaderRef","viewFields","_reset2DefalutFormMultiHeaders","_settings","bind","btnOk","currentScheme","warning","collectSettings","onChooseScheme","schemeitemsEleRef","itemEl","scrollIntoViewIfNeeded","scrollIntoView","refresh","hidePanel","onNewSchemeClick","saveas","type","onShowSchemeList","schemeChangedForSingleHeader","schemeSettings","schemeChangedForMultiHeaders","onSchemeItemClick","flag","HostBinding","HostListener","SCHEME_WEBAPI","SCHEME_WEBAPI_QUERY","SCHEME_WEBAPI_UPDATE","SCHEME_WEBAPI_Auth","LANGUAGE_WEBAPI","DatagridSchemeService","restService","perfixStr","schemeList$","Subject","schemeApi","schemeKey","currentSchemeSettings","setUriPerfix","update","d","gridId","setRestService","httpSer","mergeUri","uri","perfix","appendPerfixForUri","getWebFormKey","webformHash","window","location","hash","substring","lastIndexOf","destory","getSchemeKey","formKey","getSchemeList","gridID","isMultiHeader","getBelongId","invoke","updateSchemeData","schemeData","schemeList","getStateValue","setSchemeList","saveScheme","scheme","isUpdate","httpMethod","belongId","body","updateScheme","param","statePro","_i","dgState","reduce","updateStateValue","propertyName","newSchemeList","hasSchemeName","trim","replayNames_1","nameObj","checkAuthority","getLanguages","createSchemeTaskID","idService","IdService","guid","configs","taskid","values","isSchemeChanged","nowSettings","sortInfo1","viewColumns1","groupField1","columnFormat1","expandGroupRows1","multiHeaders1","checkSortInfo","_sortInfo","nowconfig","initConfig","checkGroupField","_groupField","_clearData","stringify","replace","NewSchemeComponent","dataPermissionIds","closeModal","submitModal","isDefault","orgids","schemeType","noPublicAuthority","noOrgAuthority","languages","code","default","nameMaxLength","zh-CHS","zh-CHT","en","onSelectedOrg","selections","orgId","onSetRangeType","hasAuthority","public","org","getSelectedId","clearAllOrgs","SchemeListComponent","items","removeItem","currentSchemeId","currentUserId","colName","colType","colDefault","colCreator","colMgr","publicTxt","privateTxt","orgTxt","formatter","schemeIsDefault","btnDel","onClose","setDefault","ctx","defaultItem","defaultId","onSchemeDel","id_1","deletedIds","DATAGRID_SETTINGS_LOCALEDATA","datagrid-settings","noAuth","has","exist","chs","cht","groupRowStatus","expand","collapse","column","unFixed","leftFixed","rightFixed","datagrid-scheme","saveTitle","namePlaceholder","setPrivate","privateTip","setPublic","publicTip","setOrg","orgTip","defaultTip","syspreset","isPublic","isOrg","isPrivate","newScheme","mgrScheme","onlyshowcolumns","delete","username","mgr","currentSheme","yes","no","headerGroup","GRID_SETTINGS_WEBAPI","InjectionToken","DatagridSettingsService","modalSer","multiSortMsg","columnsSortableMsg","notShowDialog","_httpRestService","gridRefs","activeSchemeItem","saving","cfr","app","schemeListSubscription","currentSchemeitem","debugSer","ComponentFactoryResolver","ApplicationRef","notifyService","DebugService","commonUtils","CommonUtils","schemeService","setLocaleData","setUriPerfixStr","common","basePath","getBasePath","destroy","setActiveSchemeItem","writeDebugMsg","console","registerGridInstance","getGridInstance","dgID","updateSchemeSettings","schemeItem","schemeContentObj","updateActiveSchemeItemSettings","dgId","getActiveSchemeItem","activeItem","schemekey","getSearchTypes","showSimple","selectedSchemeItem","_columns","getCurrentConfigs","convertColumnsToSimple","searchTypes","simpleRef_1","resolveComponentFactory","create","attachView","hostView","instance","_currentSchemtItem","getLocalSettings","createConfigKey","zIndex","getFloatingLayerIndex","appendChild","restoreScheme","pipe","switchMap","right","timer","unsubscribe","_activeSchemtItem","_currentSettings_1","setCurrentConfigs","applySettings","showNewSchemeDialog","saveUserConfig","auth","list","showSchemeListDialog","_activeSchemeItem","hasActiveItem","getDefaultScheme","opts","enableSimpleMode","_editColSortInfo","showSetColumnsTab","currentSettings","multiHeaderTree","_currentSettings","fcol","sortFields","defaultOpts","showHeader","showButtons","isCloseBtn","modalOpts","dialog","draggbar","multiSort","hasEnableSortColumns","flatColumns","_convertColumnsToSimple","gridOpts","_state","desginCols","isArray","_cols","resetGridView","newColumns_2","updateGridView","btn","_scheme","groupFields","sortInfo_1","viewColumns_1","columnFormat_1","expandGroupRows_1","multiHeaders_1","_colformats","_groupField_1","groupRows","join","cleanSortFields","saveData_1","refreshGrid_1","refreshGridColumns","updateColumnFormat","newVisibleOrderColumns","columnsChanged","clearSort","saveCurrent_1","setUserConfig","disabled","showConfirmWhenSchemeChanged","msgDlg_1","question2","hideColumns","element","isNewAddColumn","newCols","formatCol","parseInt","grid","dgs","getCurrentUserSettings","config","gridIns","LOCALEID","currentConfig","localStorage","getItem","_config","setItem","httpRestService","activeScheme_1","success","hasOrgAuthority","authOrganizationData","_saveUserConfig","getUserConfig","_getUserConfig","con","defaultScheme","publicSchemes","forkJoin","_b","userSetting","supportedLanguages","userSettings","userConfigSetting","configkey1","configkey2","configkey3","textvalue","saveUserSettings","resetUserConfig","getUserSettings","ucs","textValue","buildSubmitData","localeKey","authInfo","simpleRef","schemeListDlg","callback","newSchemeDlg","createNewScheme","_msg","langcode","hasPublicAuthority","authOperationData","isNewScheme","hasName","getMessageCode_1","langCode","msgs","requiredName","newId","isSystem","extendId","extendInfo","buildOrgAndSchemeRelations","schemeId","orgIds","relatedId","activeScheme","modal","dlg","getMultiHeaderColumns","Injectable","DatagridSortSettingComponent","idField","valueField","textField","sortInfoChange","setFieldSortOrder","ms","moveToLeft","onSelectionsChange","getSortInfo","names_1","orders_1","si","onBeforeMove","ColumnGroupSettingComponent","formatColumns","enabelGroupFooter","groupFieldsChange","formatColumnsChange","expandGroupRowsChange","groupColumns","allowGroupColumns","activeCalculationCol","showSelectColumnsPanel","setGroupColumns","registerEventHandle","initCalculationColumns","pristine","groupingSettingEl","addEventListener","selectcolumnspanel","cols_1","onGroupFieldsChange","getAllowGroupingColumns","toggleGroupingColumnPanel","addGroupColumn","onRemoveGroupingField","onGroupingFieldDropped","smoothDnd","constants","wrapperClass","animationClass","SmoothDndForVisible","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","ColumnVisibleDragDirective","drop","behaviour","dragHandleSelector","dropPlaceholder","className","getGhostParent","getChildPayload","shouldAcceptDrop","sourceContainerOptions","payload","onDropReady","dropResult","run","onDrop","onDragEnter","onDragStart","onDragEnd","initDnD","disposeDnd","dispose","Directive","smoothDnD","SmoothDndForGroupingField","ColumnGroupDragDirective","orientation","FarrisDblClickDirective","dblClickHandler","_click$","leftClick$","fromEvent","button","debounce$","debounceTime","clickLimit$","bufferCount","bufferGate$","race","first","repeat","buffer","clicks","PreviewMultiHeadersComponent","onWheel","tabsbox","sw","scrollWidth","ow","offsetWidth","sl","scrollLeft","deltaY","ShowPreviewDirective","onPreviewBtnClick","previewGroupColumns","treeIns","DatagridSettingsModule","forRoot","apiUri","ngModule","providers","provide","GRID_SETTINGS_SERVICE","useClass","NgModule","declarations","imports","CommonModule","FormsModule","MultiSelectModule","ComboListModule","DatagridModule","FarrisCommonModule","MessagerModule","LocaleModule","ModalModule","SwitchModule","FarrisTooltipModule","NotifyModule","OrganizationSelectorModule","LanguageTextboxModule","TreeTableModule","entryComponents","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'group-header-form',\r\n    template: `\r\n    <div class=\"d-flex flex-row\" style=\"align-items: center;height: 100%;\">\r\n        <span style=\"width: 90px;text-align: right;\">{{label}}</span>\r\n        <input #txt placeholder=\"{{placeholder}}\" type=\"text\" [(ngModel)]=\"title\" class=\"form-control ml-2\" style=\"width: 210px\">\r\n    </div>\r\n    `,\r\n})\r\nexport class NewHeaderFormComponent implements OnInit {\r\n    @Input() label = 'è¡¨å¤´åç§°'\r\n    @Input() title: string;\r\n    @Input() placeholder = \"è¾å¥è¡¨å¤´åç§°\"\r\n\r\n    @ViewChild('txt') input: ElementRef<any>\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","import { Component, Input, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'set-columns',\r\n    templateUrl: './setcolumns.component.html'\r\n})\r\nexport class SetColumnsComponent implements OnInit {\r\n\r\n    @Input() data = [];\r\n    @Input() checkedItems = [];\r\n\r\n    selectedIds: string[] = []\r\n    constructor() {}\r\n\r\n    ngOnInit() {\r\n        this.selectedIds = (this.checkedItems || []).map(n => n.id);\r\n        if (this.data) {\r\n            this.data.forEach(item => {\r\n                if (!item.id) {\r\n                    item.id = item.field;\r\n                }\r\n            })\r\n        }\r\n    }\r\n}","import { cloneDeep, flatten } from \"lodash-es\";\r\n\r\n\r\nfunction _setColumnId(c) {\r\n    c.id = c.id || c.field;\r\n    if (c.colspan && c.colspan > 1) {\r\n        c.groupHeader = true;\r\n        c.id = 'groupHeader_'+ c.id;\r\n    }\r\n}\r\n\r\n\r\nfunction _columnsToTreeNodes2(node, cols) {\r\n\tif (node.data.colspan) {\r\n        if (cols[node.level + 1] && cols[node.level + 1].length) {\r\n            var i = 0;\r\n            do {\r\n                let col = cols[node.level + 1].splice(0, 1)[0];\r\n                i += col.colspan || 1;\r\n                _setColumnId(col);\r\n                const child = { data: col, children: [], level: node.level + 1, expanded: true, visible: true };\r\n                node.children.push(child);\r\n\r\n                if (col.colspan && col.colspan > 1) {\r\n                    _columnsToTreeNodes2(child, cols);\r\n                }\r\n\r\n            } while(i< node.data.colspan && cols[node.level + 1].length)\r\n        }\r\n    }\r\n}\r\n\r\n/** å°å¤è¡¨å¤´åä¿¡æ¯ï¼è½¬æ¢ä¸ºæ ç»æ */\r\nexport function columnsToTreeNodes(cols) {\r\n\tvar nodes = [];\r\n\tcols[0].filter(n => n.field !== '_datagrid-setting-control_').forEach(c => {\r\n        _setColumnId(c);\r\n\t    var node = { data: c, children: [], level: 0, expanded: true, visible: true };\r\n\t    nodes.push(node);\r\n\t});\r\n    nodes.forEach(n => {\r\n    \t_columnsToTreeNodes2(n, cols);\r\n    });\r\n\r\n    return nodes;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// å¤è¡¨å¤´åè®¾ç½®æ¢å¤é»è®¤\r\nexport const reset2DefaultForMultiHeaders = (gridInstance) => {\r\n    const options = gridInstance.dfs['_state'].initialOptions;\r\n    const settings: any = {\r\n        viewColumns: [],\r\n        columnFormat: []\r\n    };\r\n\r\n    if (options.sort) {\r\n        const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n        const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n        settings.sortInfo = { sortName: sortNames, sortOrder:  sortOrders };\r\n    } else {\r\n        settings.sortInfo = {};\r\n    }\r\n    settings.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n    settings.expandGroupRows = !!options.expandGroupRows;\r\n\r\n    settings.multiHeaders = {\r\n        treeData: null,\r\n        viewCols: []\r\n    };\r\n\r\n    return {\r\n        settings,\r\n        multiHeaderOptions: {\r\n            columns: options.groupHeaderFields,\r\n            treeData: null\r\n        }\r\n    }\r\n}\r\n\r\n/** ä¸ºæ°çå±ç¤ºååå¹¶ååä¸­çè®¾ç½®ï¼å¦ æ ¼å¼åï¼ååæ ¼æ ·å¼ãæ¨¡æ¿ */\r\nexport function mergetColumnOptions(viewCols: any, gridInitOptions: any) {\r\n    if (viewCols && gridInitOptions) {\r\n        const dataFields = flatten(gridInitOptions['designerColumns']);\r\n        const _cols = cloneDeep(viewCols).map((cols: any) => {\r\n            return cols.map((col: any) => {\r\n\r\n                if (!col.field || col.field.indexOf('farris-datagrid-column_') > -1) {\r\n                    col.filter = false;\r\n                }\r\n\r\n                if (!col.colspan || col.colspan === 1) { // æ°æ®å­æ®µ\r\n                    const old = dataFields.find((n: any) => n.field === col.field || n.field === col.id);\r\n                    if (old) {\r\n                        const _col = Object.assign({},old, col);\r\n                        if (!col.colspan) {\r\n                            delete _col.colspan;\r\n                        }\r\n                        if (!_col.rowspan) {\r\n                            delete _col.rowspan;\r\n                        }\r\n\r\n                        return _col;\r\n                    }\r\n                }\r\n                return col;\r\n            }).filter(n => n)\r\n        });\r\n\r\n        return _cols;\r\n    }\r\n}\r\n\r\n\r\nexport function refreshGridColumns(gridInstance: any, newColumns: any) {\r\n    if(!gridInstance) {\r\n        return;\r\n    }\r\n    const gridInitOptions = gridInstance.dfs['_state'].initialOptions;\r\n    if (newColumns && gridInitOptions) {\r\n        gridInstance.columns = mergetColumnOptions(newColumns, gridInitOptions)\r\n    }\r\n}\r\n\r\n/** å°æåºä¿¡æ¯åå¹¶å°åä¸ */\r\nexport function  mergeSortInfo(newColumns: any, sortInfo: any) {\r\n    if (sortInfo && Object.keys(sortInfo).length) {\r\n        const { sortName, sortOrder } = sortInfo;\r\n        if (sortName && sortName.length) {\r\n            newColumns.forEach((cols: any) => {\r\n                cols.forEach((col: any) => {\r\n                    const i = sortName.indexOf(col.field);\r\n                    if (i > -1) {\r\n                        col.sortable = true;\r\n                        col.order = sortOrder[i] || 'asc';\r\n                    } else {\r\n                        col.order = '';\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function multiHeadersHasDataFields(multiHeaderColumns: any) {\r\n    if (multiHeaderColumns && multiHeaderColumns.length) {\r\n        return flatten(multiHeaderColumns).filter((n: any) => n.field &&( !n.colspan || n.colspan === 1) ).length;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function getDataFieldsForMultiHeaders(groupHeaderCols) {\r\n    return flatten(groupHeaderCols).filter((n: any) => n.field && ( !n.colspan || n.colspan === 1));\r\n}\r\n\r\n\r\nexport function cleanGroupFields(viewCols: any, groupFields: any) {\r\n    const cols: any = getDataFieldsForMultiHeaders(viewCols);\r\n    const groupColumns = groupFields.map( f => {\r\n        const col = cols.find(col => col.field === f);\r\n        return col;\r\n    }).filter(n => n);\r\n\r\n    return groupColumns.map(n => n.field);\r\n}\r\n\r\n\r\nexport function cleanSortFields(viewCols: any, sortInfo: { sortName: [], sortOrder: [] }) {\r\n    const cols: any = getDataFieldsForMultiHeaders(viewCols);\r\n    const sortNames = sortInfo.sortName.map( (f, i) => {\r\n        const col = cols.find(col => col.field === f);\r\n        if (!col) {\r\n            sortInfo.sortOrder.splice(i, 1);\r\n        }\r\n        return col;\r\n    }).filter(n => n);\r\n\r\n    return {\r\n        sortName: sortNames.map(n => n.field),\r\n        sortOrder: sortInfo.sortOrder\r\n    };\r\n}","import { AfterViewInit, ChangeDetectorRef,EventEmitter, Component, ElementRef, Injector, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewChild, ViewEncapsulation } from \"@angular/core\";\r\n\r\nimport { of } from \"rxjs\";\r\n\r\nimport { BsModalService } from \"@farris/ui-modal\";\r\nimport { RowNode, TreeNode, TreeTableComponent } from \"@farris/ui-treetable\";\r\nimport { OverLayHiddenService } from '@farris/ui-common';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { DatagridComponent, DataColumn } from '@farris/ui-datagrid';\r\n\r\nimport { NewHeaderFormComponent } from \"./new-header.component\";\r\nimport { SetColumnsComponent } from \"./setcolumns.component\";\r\nimport { columnsToTreeNodes } from \"../mutli-headers.helper\";\r\nimport { cloneDeep, flatten } from \"lodash-es\";\r\nimport { ColumnTreeOptions } from \"../setting.model\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\n\r\n\r\n@Component({\r\n    selector: 'column-tree',\r\n    styleUrls: ['./column-tree.scss'],\r\n    templateUrl: './column-tree.component.html',\r\n    exportAs: 'groupHeaderTree',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnTreeComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {\r\n\r\n    @Input() dg: DatagridComponent;\r\n    @Input() options: Partial<ColumnTreeOptions> = {};\r\n\r\n    @Input() inModal = false;\r\n\r\n    @Output() nodeSelected = new EventEmitter<any>();\r\n    \r\n    @ViewChild('nodeTemplate') cellTemp: TemplateRef<any>\r\n    @ViewChild('tt') tt: TreeTableComponent;\r\n    \r\n    fields = [];\r\n    treecols = [];\r\n    treeData = [];\r\n    contextMenus = [];\r\n\r\n    /** å¼ __HOU_XUAN_LIE_ID__ */\r\n    HOU_XUAN_LIE_ID = '__HOU_XUAN_LIE_ID__';\r\n\r\n\r\n    GROUP_HEADER_ICON = 'f-icon f-icon-file-folder-close';\r\n\r\n    Hou_Xuan_Qu = { id: this.HOU_XUAN_LIE_ID, title: '(åéå)', houxuanquNode: true };\r\n\r\n\r\n    languageRes = {\r\n        title: 'å¤è¡¨å¤´',\r\n        preview: 'é¢è§ææ',\r\n        tips: 'å¨ï¼åéåï¼ä¸­çå­æ®µï¼å°ä¸å¨åè¡¨ä¸­æ¾ç¤º; ç¹å»å­æ®µåç§°ï¼å¨å³ä¾§æ¾ç¤ºç¸å³æä½æé®ã',\r\n        contextMenus: {\r\n            new: 'æ°å»ºè¡¨å¤´',\r\n            newChild: 'æ°å»ºå­çº§è¡¨å¤´',\r\n            setDataField: 'åéæ°æ®å',\r\n            rename: 'éå½å',\r\n            top: 'ç½®é¡¶',\r\n            up: 'ä¸ç§»',\r\n            down: 'ä¸ç§»',\r\n            bottom: 'ç½®åº',\r\n            cancelGroup: 'åæ¶åç»',\r\n            remove: 'å¨åç»åç§»é¤'\r\n        },\r\n        candidate: '(åéå)',\r\n        setHeader: 'è®¾ä¸ºè¡¨å¤´',\r\n        ok: 'ç¡®å®',\r\n        cancel: 'åæ¶',\r\n        required: 'è¯·è¾å¥è¡¨å¤´åç§°ï¼',\r\n        defaultGroupHeaderName: 'åç»è¡¨å¤´1',\r\n        newHeaderPlaceholder: 'è¯·è¾å¥åç§°',\r\n        newHeaderLabel: 'è¡¨å¤´åç§°'\r\n    }\r\n\r\n    private localeSer: LocaleService = null;\r\n    constructor(private injector: Injector, private ngzone: NgZone, private cd: ChangeDetectorRef, private render: Renderer2,\r\n        private modalService: BsModalService, private el: ElementRef,\r\n        private notitySer: NotifyService) {\r\n            this.localeSer = this.injector.get(LocaleService, null);\r\n        }\r\n\r\n    ngOnInit(): void {\r\n        const groupHeaders = this.dg.dfs['_state'].initialOptions.groupHeaderFields;\r\n        const allDataFields = flatten<DataColumn>(groupHeaders).filter((col: DataColumn) => !col.colspan || col.colspan == 1);\r\n        this.fields = allDataFields.filter(n => n.field && n.field !== this.dg.ControlPanelFeild);\r\n\r\n        // æ ç»ä»¶åä¿¡æ¯\r\n        this.treecols = [\r\n            { field: 'title', title: 'åç§°', template: this.cellTemp }\r\n        ];\r\n\r\n        this.languageRes = this.localeSer.getValue('headerGroup');\r\n        this.Hou_Xuan_Qu.title = this.languageRes.candidate;\r\n\r\n        this.initTreeData();\r\n\r\n        this.initTreenodeContextMenus();\r\n        this.listenTreeTableEvent();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.options && !changes.options.isFirstChange()) {\r\n            this.initTreeData();\r\n            this.tt.clearSelections();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    private listenTreeTableEvent() {\r\n        this.tt.removed.subscribe(rowNode => {\r\n\r\n            if (rowNode && rowNode.parent) {\r\n                rowNode.parent.leaf = !(rowNode.parent.children && rowNode.parent.children.length);\r\n                if (rowNode.parent.leaf) {\r\n                    rowNode.parent.icon = this.GROUP_HEADER_ICON;\r\n                }\r\n            }\r\n\r\n            if (!rowNode.node.data.groupHeader) {\r\n                const hxl = this.getHouXuanNode();\r\n\r\n                if (!rowNode.parent) {\r\n                    this.treeData = this.treeData.filter(n => n.data.id !== rowNode.id);\r\n                }\r\n\r\n                this.tt.append(rowNode.node.data, hxl.node);\r\n            }\r\n\r\n          \r\n        });\r\n    }\r\n\r\n    private initTreenodeContextMenus() {\r\n        this.contextMenus = [\r\n            { id: 1, title: this.languageRes.contextMenus.new, icon: 'f-icon f-icon-add', \r\n                handle: (t) => {\r\n                    // console.log(t);\r\n                    this.addNewGroup(t.data, false);\r\n                }\r\n            },\r\n            { id: 2, title: this.languageRes.contextMenus.newChild, visible: (t: any) => {\r\n                    return this.isGroupHeader(t.data) && t.data.level + 1 < this.dg.maxMultiHeaders - 1;\r\n                },\r\n                handle: (t) => {\r\n                    this.addNewGroup(t.data, true);\r\n                }\r\n            },\r\n            { id: 3, title: this.languageRes.contextMenus.setDataField, visible: (t: any) => {return this.isGroupHeader(t.data) },\r\n                handle: (t) => {\r\n                    this.setColumnsForGroupHeader(null, t.data);\r\n                }\r\n            },\r\n            { id: 31, title: this.languageRes.contextMenus.rename, icon: 'f-icon f-icon-edit', \r\n                handle: (t) => {\r\n                    this.resetHeaderName(null, t.data);\r\n                }\r\n            },\r\n            '-',\r\n            {\r\n                id: 4, title: this.languageRes.contextMenus.top, icon: 'f-icon f-icon-roofing', \r\n                visible: (t: any) => {\r\n                    return this.moveMenuItemVisiblily(t.data);\r\n                },\r\n                handle: (t) => {\r\n                    this.moveTop(null, t.data);\r\n                }\r\n            },\r\n            {\r\n                id: 5, title: this.languageRes.contextMenus.up, icon: 'f-icon f-icon-arrow-chevron-up',\r\n                visible: (t: any) => {return this.moveMenuItemVisiblily(t.data)},\r\n                handle: (t) => {\r\n                    this.moveUp(null, t.data);\r\n                }\r\n            },\r\n            {\r\n                id: 6, title: this.languageRes.contextMenus.down, icon: 'f-icon f-icon-arrow-chevron-down',\r\n                visible: (t: any) => {return this.moveMenuItemVisiblily(t.data)},\r\n                handle: (t) => {\r\n                    this.moveDown(null, t.data);\r\n                }\r\n            },\r\n            {\r\n                id: 7, title: this.languageRes.contextMenus.bottom, icon: 'f-icon f-icon-bottomsetting',\r\n                visible: (t: any) => {return this.moveMenuItemVisiblily(t.data)},\r\n                handle: (t) => {\r\n                    this.moveBottom(null, t.data);\r\n                }\r\n            },\r\n            '-',\r\n            {\r\n                id: 8, title: this.languageRes.contextMenus.remove, icon: 'f-icon f-icon-minus',\r\n                visible: (t) => {\r\n                    return !t.data.node.data.houxuanquNode && !t.data.node.data.groupHeader;\r\n                },\r\n                handle: (t) => {\r\n                    this.tt.remove(t.data.id);\r\n                }\r\n            },\r\n            {\r\n                id: 9, title: this.languageRes.contextMenus.cancelGroup, icon: 'f-icon f-icon-x',\r\n                visible: (t) => {\r\n                    return t.data.node.data.groupHeader;\r\n                },\r\n                handle: (t) => {\r\n                    this.removeGroup(null, t.data);\r\n                }\r\n            }\r\n        ];\r\n    }\r\n\r\n    /** ç§»å¨å½ä»¤é¡¹æ¯å¦æ¾ç¤º */\r\n    moveMenuItemVisiblily = (t: RowNode) => {\r\n        if (t) {\r\n            const rowData = t.node.data;\r\n            if (rowData) {\r\n                return rowData['id'] != this.HOU_XUAN_LIE_ID;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isGroupHeader = (t: RowNode) => {\r\n        if (t) {\r\n            const rowData = t.node.data;\r\n            if (rowData) {\r\n                return !!rowData['groupHeader'];\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    initTreeData() {\r\n\r\n        if (this.options) {\r\n            const { treeData } = this.options;\r\n\r\n            if (treeData) {\r\n                this.treeData = treeData;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.options.columns && this.options.columns.length > 1) {\r\n            const _treeData = columnsToTreeNodes(cloneDeep(this.options.columns));\r\n            const houXuanLie = this.fields.filter(f => !flatten(this.options.columns).find(col => col.field === f.field)).map((a:any) => {\r\n                return {\r\n                    data: a,\r\n                    children: [],\r\n                    visible: true\r\n                }\r\n            });\r\n            _treeData.push({\r\n                data: this.Hou_Xuan_Qu,\r\n                children: houXuanLie,\r\n                expanded: true\r\n            });\r\n            this.treeData = _treeData;\r\n        } else {\r\n            this.treeData = [{\r\n                data: { id: 'groupHeader_1', title: this.languageRes.defaultGroupHeaderName, halign: 'left', groupHeader: true },\r\n                children: this.fields.map((n, i) => {\r\n                    n['index'] = i;\r\n                    n['id'] = n['field'];\r\n                    return {\r\n                        data: n,\r\n                        children: [],\r\n                        visible: true\r\n                    };\r\n                }),\r\n                icon: this.GROUP_HEADER_ICON,\r\n                expanded: true, visible: true\r\n            }, {\r\n                data: this.Hou_Xuan_Qu,\r\n                children: [],\r\n                expanded: true,\r\n                icon: this.GROUP_HEADER_ICON\r\n            }];\r\n        }\r\n    }\r\n\r\n    private getHouXuanNode() {\r\n        return this.tt.findRowNode(this.HOU_XUAN_LIE_ID);\r\n    }\r\n\r\n    onTreeSelected($event) {\r\n        this.nodeSelected.emit($event);\r\n    }\r\n\r\n    private showNewHeaderDialog(okCallback, dlgTitle) {\r\n        const modalRef = this.modalService.show(NewHeaderFormComponent, {\r\n            title: dlgTitle,\r\n            width: 340,\r\n            height: 190,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            initialState: {\r\n                title: '',\r\n                placeholder: this.languageRes.newHeaderPlaceholder,\r\n                label: this.languageRes.newHeaderLabel\r\n            },\r\n            buttons: [\r\n                {\r\n                    text: this.languageRes.cancel,\r\n                    cls: 'btn btn-secondary',\r\n                    handle: () => {\r\n                        modalRef.close();\r\n                    }\r\n                },\r\n                {\r\n                    text: this.languageRes.ok,\r\n                    cls: 'btn btn-primary',\r\n                    handle: okCallback\r\n                }\r\n            ]\r\n        });\r\n\r\n        return modalRef;\r\n    }\r\n\r\n    private generateGroupHeaderId() {\r\n        return `groupHeader_${new Date().getTime()}`;\r\n    }\r\n\r\n    private createNewGroupHeader(rn: RowNode, title: string, child = false) {\r\n        const ghid = this.generateGroupHeaderId();\r\n        const data = { id: ghid, title, groupHeader: true, halign: 'left', fixed: 'UNFIXED' };\r\n        const gh = {\r\n            data,\r\n            children: [],\r\n            expanded: true,\r\n            visible: true,\r\n            icon: this.GROUP_HEADER_ICON,\r\n        };\r\n        if (!child) {\r\n            if (!rn.parent) {\r\n                const i = this.treeData.findIndex(n => n.data.id === rn.id) + 1;\r\n                this.treeData.splice(i, 0, gh);\r\n                this.treeData = this.treeData.slice();\r\n            } else {\r\n                gh.data.fixed = rn.parent.data.fixed;\r\n                this.tt.appendChildren([gh], rn.parent);\r\n            }\r\n        } else {\r\n            gh.data.fixed = rn.node.data.fixed;\r\n            this.tt.appendChildren([gh], rn.node);\r\n        }\r\n    }\r\n\r\n    // å é¤åç»\r\n    removeGroup(event: MouseEvent, rowNode) {\r\n        if (this.tt.selectedRow && rowNode.id === this.tt.selectedRow.id) {\r\n            this.nodeSelected.emit(null);\r\n        }\r\n        const childs = this.tt.serializedValue.filter(n => n.parents.indexOf(rowNode.id) > -1 && !n.node.data.groupHeader).map(n => n.node);\r\n        this.treeData = this.treeData.filter(n => n.data.id !== rowNode.id);\r\n\r\n        this.tt.remove(rowNode.id);\r\n        this.tt.appendChildren(childs, this.getHouXuanNode().node);\r\n    }\r\n\r\n    // æ°å¢åç»\r\n    addNewGroup(rn: RowNode, child = false) {\r\n        const modalRef = this.showNewHeaderDialog(() => {\r\n            const ghfRef = modalRef.content as NewHeaderFormComponent;\r\n            if (ghfRef.title) {\r\n                if (!rn || rn.id === this.HOU_XUAN_LIE_ID) {\r\n                    this.treeData.splice(0, 0, {\r\n                        data: {\r\n                            id: this.generateGroupHeaderId(), halign: 'left',\r\n                            title: ghfRef.title, groupHeader: true, fixed: 'UNFIXED'\r\n                        },\r\n                        icon: this.GROUP_HEADER_ICON,\r\n                        children: []\r\n                    });\r\n                    this.tt.updateSerializedValue();\r\n                } else {\r\n                    this.createNewGroupHeader(rn, ghfRef.title, child);\r\n                }\r\n\r\n                modalRef.close();\r\n            } else {\r\n                this.notitySer.info(this.languageRes.required);\r\n                ghfRef.input.nativeElement.focus();\r\n            }\r\n       }, child? this.languageRes.contextMenus.newChild: this.languageRes.contextMenus.new);\r\n\r\n    }\r\n\r\n    // æ¾ç¤ºæ´æ°æé®\r\n    onMoreBtnClick($event: MouseEvent, nodeData) {\r\n        if (nodeData && nodeData.id) {\r\n            this.tt.selectNode(nodeData.id);\r\n        }\r\n        this.tt.ctxMenu.onContextMenu($event);\r\n    }\r\n\r\n    private getCanSelectColumns(rowNode: RowNode) {\r\n        // å¯åéå\r\n        // åéåºæ°æ® + å­èç¹\r\n\r\n        const hxl = this.getHouXuanNode();\r\n        let fields = rowNode ? rowNode.node.children : [];\r\n        fields = fields.filter((n: TreeNode) => !n.data.groupHeader)\r\n        return hxl.node.children.concat(fields).map(n => n.data);\r\n    }\r\n\r\n    private showSetColumnsDialog(okCallback, selectedItems, rowNode: RowNode) {\r\n        const modalRef = this.modalService.show(SetColumnsComponent, {\r\n            title: this.languageRes.contextMenus.setDataField,\r\n            width: 600,\r\n            height: 500,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            initialState: {\r\n                data: this.getCanSelectColumns(rowNode),\r\n                checkedItems: selectedItems,\r\n                groupEditorRef: this\r\n            },\r\n            buttons: [\r\n                {\r\n                    text: this.languageRes.cancel,\r\n                    cls: 'btn btn-secondary',\r\n                    handle: () => {\r\n                        modalRef.close();\r\n                    }\r\n                },\r\n                {\r\n                    text: this.languageRes.ok,\r\n                    cls: 'btn btn-primary',\r\n                    handle: () => {\r\n                        okCallback(modalRef.content.selectedIds)\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        return modalRef;\r\n    }\r\n\r\n    /** ä¸ºåç»è¡¨å¤´åéæ°æ®å */\r\n    setColumnsForGroupHeader($event, rowNode: RowNode) {\r\n        const childs = rowNode ? rowNode.node.children ? rowNode.node.children.map(n => n.data) : [] : [];\r\n        const modalRef = this.showSetColumnsDialog((selectedIds: string[]) => {\r\n            // åç»ä¸çå\r\n            const cols = selectedIds.map(n => {\r\n                return this.fields.find(f => f.field == n);\r\n            }).filter(n => n);\r\n            // åéåº\r\n            const hxl = this.getHouXuanNode();\r\n            // æ¸çåéæ°æ®ï¼å°å·²åéçåå¨åéåºç§»é¤\r\n            hxl.node.children = (hxl.node.children || []).filter(n => cols.findIndex(c => c.field == n.id) === -1);\r\n\r\n            // æ¥æ¾éè¦ç§»é¤ç\r\n            const needRemoveNodes = (rowNode.node.children || []).filter( (n) => {\r\n                return !n.data.groupHeader && cols.findIndex((c) => c.field === n.id) == -1\r\n            }).filter(n => n);\r\n\r\n            if (needRemoveNodes && needRemoveNodes.length) {\r\n                needRemoveNodes.forEach(n => {\r\n                    this.tt.remove(n.id);\r\n                });\r\n            }\r\n\r\n            // æ¥æ¾éè¦æ°å¢ç\r\n            const needAppendNodes = cols.filter(n =>  (rowNode.node.children || []).findIndex(c => c.id === n.field) === -1).map(n => {\r\n                if (!n.id) {\r\n                    n.id = n.field;\r\n                }\r\n                return n;\r\n            });\r\n            if (needAppendNodes && needAppendNodes.length) {\r\n                needAppendNodes.forEach(n => {\r\n                    const col = this.fields.find(f => f.field == n.field);\r\n                    if (col) {\r\n                        col.fixed =  rowNode.node.data.fixed;\r\n                    }\r\n                });\r\n\r\n                this.tt.appendChildren(needAppendNodes.map(n => {\r\n                    return {\r\n                        data: n,\r\n                        children: [],\r\n                        expanded: true\r\n                    };\r\n                }), rowNode.node);\r\n    \r\n                this.tt.expandNode(rowNode.id);\r\n            }\r\n\r\n            // æ´æ°å¾éåº\r\n            const hxlCols = needRemoveNodes.map(n => {\r\n                return {\r\n                    data: n.data,\r\n                    children: []\r\n                };\r\n            });\r\n            this.tt.appendChildren(hxlCols, hxl.node);\r\n\r\n            modalRef.close();\r\n        }, childs, rowNode);\r\n    }\r\n\r\n    // å°å¾éåºä¸­çæ°æ®åç´æ¥è®¾ä¸ºè¡¨å¤´\r\n    setColumnHeader(event: MouseEvent, col) {\r\n        const i = this.treeData.length - 1;\r\n        this.treeData.splice(i, 0, {  data: col, children: [] });\r\n\r\n        const hxl = this.getHouXuanNode();\r\n        if (hxl) {\r\n            hxl.node.children = hxl.node.children.filter(n => n.data.id !== col.id);\r\n            hxl.node.leaf = !(hxl.node.children && hxl.node.children.length);\r\n            if (hxl.node.leaf) {\r\n                hxl.node.icon = this.GROUP_HEADER_ICON;\r\n            }\r\n            this.tt.clearSelections();\r\n            this.tt.updateSerializedValue();\r\n            this.tt.selectNode(col.id, true);\r\n        }\r\n        \r\n    }\r\n    \r\n    moveUp(event: MouseEvent, rowNode) {\r\n        let data = this.treeData;\r\n        if (rowNode.parent) {\r\n            data = rowNode.parent.children;\r\n        }\r\n\r\n        const index = data.findIndex(n => n.data.id === rowNode.id);\r\n        if (index !== 0) {\r\n            const tempArr = data.splice(index, 1);\r\n            data.splice(index - 1, 0, ...tempArr);\r\n\r\n            this.tt.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    moveDown(event: MouseEvent, rowNode) {\r\n        let data = this.treeData;\r\n        if (rowNode.parent) {\r\n            data = rowNode.parent.children;\r\n        }\r\n        const index = data.findIndex(n => n.data.id === rowNode.id);\r\n        const len = data.length;\r\n\r\n        if (index !== len - 2) {\r\n            const tempArr = data.splice(index, 1);\r\n            data.splice(index + 1, 0, ...tempArr);\r\n            this.tt.updateSerializedValue();\r\n        } else {\r\n            this.moveBottom(event, rowNode);\r\n        }\r\n    }\r\n\r\n    moveTop(event: MouseEvent, rowNode) {\r\n        let data = this.treeData;\r\n        if (rowNode.parent) {\r\n            data = rowNode.parent.children;\r\n        }\r\n        const index = data.findIndex(n => n.data.id === rowNode.id);\r\n        data.unshift(rowNode.node);\r\n        data.splice(index + 1, 1);\r\n        this.tt.updateSerializedValue();\r\n    }\r\n\r\n    moveBottom(event: MouseEvent, rowNode) {\r\n        let data = this.treeData;\r\n        if (rowNode.parent) {\r\n            data = rowNode.parent.children;\r\n        }\r\n\r\n        const index = data.findIndex(n => n.data.id === rowNode.id);\r\n        data.push(rowNode.node);\r\n        data.splice(index, 1);\r\n\r\n        if (!rowNode.parent) {\r\n            this.moveUp(event, rowNode);\r\n        } else {\r\n            this.tt.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    /** è·åå¤è¡¨å¤´æ°æ® */\r\n    getPreviewGroupColumns() {\r\n        const treeNodes = this.getAllNodes();\r\n        return this.convert2Array(treeNodes); \r\n    }\r\n\r\n     /** è·ååéå */\r\n     getHouXuanFields() {\r\n        const hxl = this.treeData.find(n => n.data.houxuanquNode);\r\n        if (hxl) {\r\n            return hxl.children;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    private getAllNodes() {\r\n        const hxl = this.getHouXuanFields();\r\n        return this.tt.serializedValue.filter(n => {\r\n            return !n.node.data.houxuanquNode && hxl.findIndex(k => k.data.id === n.id) === -1;\r\n        });\r\n    }\r\n\r\n    /** å°æ èç¹æ°æ®è½¬æ¢ä¸º å¤è¡¨å¤´ç»æ */\r\n    convert2Array(rowNodes: RowNode[]) {\r\n        const r = [];\r\n        const maxBy = (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));\r\n        const maxlevel = maxBy(rowNodes, (n) => n.level) ;\r\n        // æé¤æ²¡ææ°æ®å­æ®µçè¡¨å¤´\r\n        rowNodes = rowNodes.filter(n => (n.node.children&& n.node.children.length && n.node.data.groupHeader) || !n.node.data.groupHeader);\r\n\r\n        /**\r\n         * 1ãåªæä¸ç»è¡¨å¤´ï¼ä¸åºå®å¨å·¦ä¾§æå³ä¾§æ¶ï¼ææ åºå®åæ¹å¼å¤ç\r\n         * 2ãåªæå·¦ä¾§ãå³ä¾§åºå®åèæ²¡æå¶ä»æ­£å¸¸åæ¶ï¼åæ¶å³ä¾§åºå®å\r\n         * 3ãåªæå·¦ä¾§æå³ä¾§åºå®æ¶ï¼ææ åºå®åå¤ç\r\n         */\r\n        const parents = rowNodes.filter(e => !e.parent);\r\n        if (!parents.filter(n => !n.node.data.fixed || n.node.data.fixed === 'UNFIXED').length) {\r\n            const leftCols = parents.filter(n => n.node.data.fixed === 'left');\r\n            const rightCols = parents.filter(n => n.node.data.fixed === 'right');\r\n            if (leftCols.length == parents.length || rightCols.length == parents.length) {\r\n                rowNodes.forEach(n => {\r\n                    if (parents.find(p => p.id === n.id)) {\r\n                        n.node.data.fixed = ''\r\n                    }\r\n                });\r\n            } else {\r\n                if (rightCols.length === 1) {\r\n                    leftCols.forEach(t =>{\r\n                        rowNodes.forEach(n => {\r\n                            if (t.id === n.id) {\r\n                                n.node.data.fixed = ''\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    rightCols.forEach(t =>{\r\n                        rowNodes.forEach(n => {\r\n                            if (t.id === n.id) {\r\n                                n.node.data.fixed = ''\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        for (let i = 0; i <= maxlevel; i++ ) {\r\n            r.push(rowNodes.filter(n => n.level === i).map(n => {\r\n                const data = n.node.data;\r\n                const _fixed = n.parent ? this.tt.getRoot(n.id).node.data.fixed :  (data.fixed || '');\r\n\r\n\r\n                const _colspan = (n.node.children ? rowNodes.filter(k => k.parents.indexOf(n.id) > -1 && k.id.indexOf('groupHeader_') == -1).length : 1) || 1;\r\n                const _rowspan = (n.node.children && n.node.children.length > 0) ? 1 : (maxlevel - n.level + 1);\r\n\r\n                const newCol: any = {\r\n                    field: data.field,\r\n                    title: data.title,\r\n                    sortable: data.sortable,\r\n                    order: data.order,\r\n                    halign: data.halign || 'left',\r\n                    align: data.align || 'left',\r\n                    visible: true,\r\n                    allowGrouping: data.allowGrouping,\r\n                    groupFooter: data.groupFooter,\r\n                    footer: data.footer,\r\n                    width: (data.size ? data.size.width : 100),\r\n                    dataType: data.dataType || 'string',\r\n                    fixed: _fixed === 'UNFIXED'? '': _fixed,\r\n                    id: n.id,\r\n                    parentId: n.node.parent ? n.node.parent.id : null,\r\n                    rowspan: _rowspan,\r\n                    colspan: _colspan\r\n                };\r\n\r\n                const newCol2: any = {\r\n                    field: data.field,\r\n                    title: data.title,\r\n                    halign: data.halign || 'left',\r\n                    align: data.align || 'left',\r\n                    visible: true,\r\n                    groupFooter: {},\r\n                    footer: {},\r\n                    width: (data.size ? data.size.width : 100),\r\n                    dataType: data.dataType || 'string',\r\n                    fixed: _fixed === 'UNFIXED'? '': _fixed,\r\n                    id: n.id,\r\n                    parentId: n.node.parent ? n.node.parent.id : null,\r\n                    rowspan: _rowspan,\r\n                    colspan: _colspan\r\n                };\r\n\r\n                return n.node.data.groupHeader ?  newCol2: newCol;\r\n            }));\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    onBeforeShowContextMenu = (t) => {\r\n        if (t && t.data.parents.indexOf(this.HOU_XUAN_LIE_ID) > -1) {\r\n            // å¾éåºä¸­çæ°æ®åç¦ç¨å³é®èå\r\n            return of({show: false});\r\n        }\r\n        return of({show: true});\r\n    }\r\n\r\n\r\n    private clearTreeNodesData(nodes: TreeNode[]) {\r\n        nodes.forEach((n: any) =>{\r\n            delete n.parent;\r\n            delete n.elementRef;\r\n            if (n.children && n.children.length) {\r\n                this.clearTreeNodesData(n.children);\r\n            }\r\n        })\r\n    }\r\n\r\n    getSettings() {\r\n        this.clearTreeNodesData(this.treeData);\r\n        return {\r\n            viewCols: this.getPreviewGroupColumns(),\r\n            treeData: this.treeData\r\n        };\r\n    }\r\n\r\n    hiddenCol($event: MouseEvent, id) {\r\n        $event.stopPropagation();\r\n        \r\n        if (this.tt.selectedRow && id === this.tt.selectedRow.id) {\r\n            this.tt.clearSelections();\r\n            this.nodeSelected.emit(null);\r\n        }\r\n\r\n        this.tt.remove(id);\r\n\r\n    }\r\n\r\n    resetHeaderName($event: MouseEvent, rowNode: RowNode) {\r\n        const modalRef = this.showNewHeaderDialog(() => {\r\n            const ghfRef = modalRef.content as NewHeaderFormComponent;\r\n            if (ghfRef.title) {\r\n                rowNode.node.data.title = ghfRef.title;\r\n                modalRef.close();\r\n            } else {\r\n                this.notitySer.info(this.languageRes.required);\r\n                ghfRef.input.nativeElement.focus();\r\n            }\r\n       }, this.languageRes.contextMenus.rename);\r\n\r\n       const ghfRef = modalRef.content as NewHeaderFormComponent;\r\n       ghfRef.title = rowNode.node.data.title;\r\n    }\r\n    \r\n}","import { LocaleService } from '@farris/ui-locale';\r\nimport { Component, Input, OnInit, Injector, ViewChild, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges, ViewEncapsulation, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\nimport { ColumnTreeOptions } from '../setting.model';\r\nimport { RowNode, TreeNode } from '@farris/ui-treetable';\r\nimport { ColumnTreeComponent } from '../multi-headers/column-tree.component';\r\n\r\n\r\n@Component({\r\n    selector: 'column-format-setting',\r\n    templateUrl: './column-format-setting.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnFormatSettingComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() columns = [];\r\n    @Input() fields = [];\r\n\r\n    @ViewChild('colformatform') colForm: NgForm;\r\n    @ViewChild('gh') groupHeadersRef: ColumnTreeComponent;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n\r\n    allCols = [];\r\n\r\n    /** format Data */\r\n    formatData = [];\r\n    columnType = 'all';\r\n    activeField = null;\r\n    showGridFooter = false;\r\n\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    fixedItems = [];\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n\r\n    switchValue = false;\r\n\r\n    _searchResult = { checkAll: false, unCheckAll: false };\r\n\r\n\r\n    /** éç½®å¤è¡¨å¤´ç¸å³è®¾ç½® */\r\n    @Input() multiHeaderOptions: Partial<ColumnTreeOptions> = {};\r\n    // å¯ç¨å¤è¡¨å¤´\r\n    @Input() enableMultipleHeaders = false;\r\n\r\n    selectTreeNode = null;\r\n\r\n    get isShowfixed() {\r\n        if (this.groupHeadersRef && this.selectTreeNode && this.selectTreeNode.id !== '__HOU_XUAN_LIE_ID__' ) { // å¤è¡¨å¤´\r\n            const rn = this.groupHeadersRef.tt.findRowNode(this.selectTreeNode.id);\r\n            return rn && !rn.level;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) {\r\n        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&\r\n                                !this.gridSettingComponentRef.gridInstance.footerTemplate;\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.setFormatData();\r\n            this.allCols = this.columns[0];\r\n            this.setActiveField();\r\n            this.checkColumnOptions();\r\n            this._searchResult = this.seachResultIsCheckAll();\r\n        }\r\n\r\n        if (changes.multiHeaderOptions && !changes.multiHeaderOptions.isFirstChange()) {\r\n            this.setActiveField();\r\n        }\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isEn = this.localeSer.localeId === 'en';\r\n        this.initData();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.setActiveField();\r\n        \r\n        setTimeout(() => {\r\n            if (this.colForm) {\r\n                this.colForm.valueChanges.subscribe(v => {\r\n                    this.formatChange.emit(this.formatData);\r\n                });\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n    private setActiveField() {\r\n        setTimeout(() => {\r\n            if (this.enableMultipleHeaders && this.multiHeaderOptions) {\r\n                const {columns} = this.multiHeaderOptions;\r\n                if (columns && columns.length) {\r\n                    this.groupHeadersRef.tt.selectFirstNode();\r\n                } else {\r\n                    this.activeField = null;\r\n                }\r\n            } else {\r\n                this.activeField = this.columns[0][0];\r\n            }\r\n        });\r\n    }\r\n\r\n    private setFormatData() {\r\n        // this.formatData = this.fields.map(n => {\r\n        //     return this.columns[0].find(col => col.field === n);\r\n        // });\r\n        this.formatData =  this.columns[0];\r\n    }\r\n\r\n    private initData() {\r\n\r\n        this.alignItems = this.gridSettingComponentRef.alignItems;\r\n        this.searchItems = this.gridSettingComponentRef.searchItems;\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n        this.fixedItems = this.gridSettingComponentRef.fixedItems;\r\n\r\n\r\n        this.setFormatData();\r\n        this.allCols = this.columns[0];\r\n        this.checkColumnOptions();\r\n\r\n        this.filterColumns();\r\n    }\r\n\r\n    private checkColumnOptions() {\r\n        if (this.activeField) {\r\n            if (this.activeField.allowGrouping === undefined) {\r\n                this.activeField.allowGrouping = true;\r\n            }\r\n\r\n            if (this.activeField.groupFooter === undefined) {\r\n                this.activeField.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.groupFooter.options = this.activeField.groupFooter.options || {calculationType: -1};\r\n                if (this.activeField.groupFooter.options.calculationType === undefined) {\r\n                    this.activeField.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            if (this.activeField.footer === undefined) {\r\n                this.activeField.footer =  { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n                if (this.activeField.footer.options.calculationType === undefined) {\r\n                    this.activeField.footer.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            if (!this.activeField.fixed || (this.activeField.fixed !== 'left' && this.activeField.fixed !== 'right')) {\r\n                this.activeField.fixed = 'UNFIXED';\r\n            }\r\n        }\r\n    }\r\n\r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns( searchWords = '') {\r\n        let cols = [];\r\n     \r\n        if (this.switchValue) {\r\n            cols = this.columns[0].filter(n => this.fields.indexOf(n.field) > -1);\r\n        } else {\r\n            cols = this.columns[0];\r\n        }\r\n\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n        this._searchResult = this.seachResultIsCheckAll(this.allCols.filter(n => n.visible));\r\n    }\r\n\r\n    private seachResultIsCheckAll(searchFields?: any) {\r\n        const allColsLength = this.allCols.filter(n => n.field != '_datagrid-setting-control_').length;\r\n        let fieldsLength = this.fields.filter(n => n !=  '_datagrid-setting-control_').length;\r\n\r\n        if (searchFields) {\r\n            fieldsLength = searchFields.length;\r\n        }\r\n\r\n\r\n        return {\r\n            checkAll: allColsLength && allColsLength === fieldsLength,\r\n            unCheckAll:!searchFields ? !this.fields.length : !fieldsLength\r\n        };\r\n    }\r\n\r\n    onFieldClick(col, $event) {\r\n        this.activeField = col;\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n\r\n    private onFieldsChanged() {\r\n        this.setFormatData();\r\n        this.fieldsChange.emit(this.fields);\r\n    }\r\n\r\n    onDblClick($event, col) {\r\n        $event.target.style.userSelect = 'none';\r\n        this.onCheckboxClick($event, col);\r\n        $event.target.style.userSelect = '';\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        $event.stopPropagation();\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        const _fields = this.allCols.filter(n => n.visible).map(n => n.field);\r\n        this._searchResult = this.seachResultIsCheckAll(_fields);\r\n      \r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event) {\r\n        this.switchValue = false;\r\n        const txt = $event.target.value;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, txt, ulElRef: any) {\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.onFieldsChanged();\r\n\r\n        this.filterColumns(txt);\r\n\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState(search = false) {\r\n        if (this.fields.length === 0) {\r\n            return 0;\r\n        } else {\r\n            if (search) {\r\n                if (this._searchResult.checkAll) {\r\n                    return 1;\r\n                }\r\n            } else {\r\n                if (this.fields.length === this.columns[0].length) {\r\n                    return 1;\r\n                }\r\n            }\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    onCheckAllClick($event, txt) {\r\n        if (!this.allCols || !this.allCols.length) {\r\n            return;\r\n        }\r\n        const state = this.getCheckAllState(txt);\r\n        const isVisible = state === 0 || state === 2;\r\n        let _fields = null;\r\n        if (txt == '') {\r\n            if (isVisible) {\r\n                // æ§è¡å¨é\r\n                this.columns[0].forEach(n => n.visible = true);\r\n                this.fields = this.columns[0].map(n => n.field);\r\n            } else {\r\n                // åæ¶å¨é\r\n                this.columns[0].forEach(n => n.visible = false);\r\n                this.fields = [];\r\n            }\r\n        } else {\r\n            this.allCols.forEach(c => {\r\n                const col = this.columns[0].find(n => c.field === n.field);\r\n                col.visible = isVisible;\r\n                c.visible = isVisible;\r\n            });\r\n            _fields = this.allCols.filter(n => n.visible).map(n => n.field);\r\n            this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        }\r\n        this._searchResult = this.seachResultIsCheckAll(!txt ? null: _fields);\r\n        this.cd.detectChanges();\r\n        this.onFieldsChanged();\r\n        // this.filterColumns(txt);\r\n    }\r\n\r\n     // ä»æ¾ç¤ºå¯è§å\r\n     onlySeeVisibleColumns($event, txt) {\r\n        this.switchValue = $event;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    clearSearch($event, searchInput) {\r\n        if (searchInput && searchInput.value) {\r\n            this.filterColumns('');\r\n            searchInput.value = '';\r\n        }\r\n    }\r\n\r\n    onNodeSelected($event: RowNode) {\r\n        if ($event && $event.node.id !== \"__HOU_XUAN_LIE_ID__\") {\r\n            this.activeField = $event.node.data;\r\n            this.selectTreeNode = $event.node;\r\n            this.checkColumnOptions();\r\n        } else {\r\n            this.activeField = null;\r\n            this.selectTreeNode = null;\r\n        }\r\n    }\r\n\r\n    getMultiHeaders(): {\r\n        viewCols: any[];\r\n        treeData: any[];\r\n    } {\r\n        return this.groupHeadersRef? this.groupHeadersRef.getSettings() : null;\r\n    }\r\n}\r\n","import {\r\n    Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter,\r\n    OnInit, OnChanges, SimpleChanges, ChangeDetectorRef, Injector, Output, Renderer2\r\n} from '@angular/core';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\nimport { DataColumn, DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { ColumnTreeOptions, SettingModel } from './setting.model';\r\nimport { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';\r\nimport { getDataFieldsForMultiHeaders, mergeSortInfo, multiHeadersHasDataFields, reset2DefaultForMultiHeaders } from './mutli-headers.helper';\r\nimport { NotifyService } from '@farris/ui-notify';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings',\r\n    templateUrl: './datagrid-settings.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DatagridSettingsComponent implements OnInit, OnChanges {\r\n    modalRef: BsModalRef;\r\n    gridInstance: DatagridComponent;\r\n    activeTabIndex = 1;\r\n\r\n    /** æåºåæ°æ® */\r\n    sortTreeData = [];\r\n    sortNames = [];\r\n    sortInfo: any = {};\r\n\r\n    /** æ¾ç¤ºåæ°æ® */\r\n    // viewTreeData = [];\r\n    viewColumns = [];\r\n\r\n    columnFormat = [];\r\n\r\n    groupField = [];\r\n    expandGroupRows = true;\r\n\r\n    canSetColumnSort = true;\r\n    canSetColumnVisible = true;\r\n    @Input() enableReset = false;\r\n    @Input() columns: DataColumn[][];\r\n\r\n    @Output() cancelHandle = new EventEmitter();\r\n    @Output() submitHandle = new EventEmitter();\r\n    @Output() reset = new EventEmitter();\r\n    @Output() concise = new EventEmitter();\r\n    @Input() schemeInfo: SettingModel = null;\r\n\r\n    @ViewChild('header') header: ElementRef;\r\n    @ViewChild('activeTab') activeTab: ElementRef;\r\n    @ViewChild('colFormatSettings') colFormatSettings: ColumnFormatSettingComponent\r\n\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n\r\n    enableGroupFooter = false;\r\n\r\n    fixedItems = [];\r\n\r\n    private localeSer: LocaleService;\r\n    private messager: MessagerService;\r\n    private render2: Renderer2;\r\n\r\n    /** éç½®å¤è¡¨å¤´ç¸å³è®¾ç½® */\r\n    multiHeaders: Partial<ColumnTreeOptions> = {};\r\n    // å¯ç¨å¤è¡¨å¤´\r\n    enableMultipleHeaders = false;\r\n    notifySer: NotifyService;\r\n\r\n    schemeName = '';\r\n\r\n    tabWidth = 70;\r\n\r\n    constructor(private cd: ChangeDetectorRef, private inject: Injector) {\r\n        this.messager = this.inject.get(MessagerService, null);\r\n        this.localeSer = this.inject.get(LocaleService);\r\n        this.render2 = this.inject.get(Renderer2, null);\r\n        this.notifySer = this.inject.get(NotifyService, null);\r\n        this.searchItems = [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n\r\n        this.alignItems = [\r\n            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft')},\r\n            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter')},\r\n            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight')},\r\n        ];\r\n\r\n        this.summaryItems = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },\r\n            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },\r\n            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },\r\n            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n        this.summaryItems2 = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n        this.fixedItems = [\r\n            { value: 'UNFIXED', title: this.localeSer.getValue('datagrid-settings.column.unFixed') },\r\n            { value: 'left', title: this.localeSer.getValue('datagrid-settings.column.leftFixed') },\r\n            { value: 'right', title: this.localeSer.getValue('datagrid-settings.column.rightFixed') },\r\n        ]\r\n\r\n        if (this.localeSer.localeId === 'en') {\r\n            this.tabWidth = 80;\r\n        }\r\n\r\n    }\r\n\r\n    private initData() {\r\n        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];\r\n        const sortOrders = this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : [];\r\n\r\n        this.viewColumns = this.getViewColumns();\r\n        this.sortInfo = {sortName: this.sortNames, sortOrder: sortOrders};\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n        this.expandGroupRows = this.gridInstance['expandGroupRows'];\r\n\r\n        this.enableGroupFooter = this.gridInstance.groupFooter;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.gridInstance.enableScheme) {\r\n            this.initData();\r\n        } else {\r\n            if (this.schemeInfo) {\r\n                this.sortInfo = this.schemeInfo.sortInfo || {};\r\n                if (this.sortInfo) {\r\n                    this.sortNames = this.sortInfo.sortName || '';\r\n                }\r\n                this.viewColumns = this.schemeInfo.viewColumns;\r\n                this.columnFormat = this.schemeInfo.columnFormat;\r\n                if (!this.columnFormat) {\r\n                    this.columnFormat = [...this.columns[0]];\r\n                }\r\n\r\n                if (this.schemeInfo.groupField) {\r\n                    if (typeof this.schemeInfo.groupField === 'string') {\r\n                        this.groupField = (this.schemeInfo.groupField as any).split(',');\r\n                    } else {\r\n                        this.groupField = this.schemeInfo.groupField || [];\r\n                    }\r\n                } else {\r\n                    this.groupField = [];\r\n                }\r\n                this.expandGroupRows = !!this.schemeInfo.expandGroupRows;\r\n            } else {\r\n                // ç³»ç»é¢å¶\r\n                this.reset2Default();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n    }\r\n\r\n    close($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (this.modalRef) {\r\n            this.modalRef.close();\r\n        }\r\n    }\r\n\r\n    private setCurrentTab(tab: HTMLElement = null) {\r\n        if (this.render2) {\r\n\r\n            let left = 0;\r\n\r\n            const tabs = Array.from(this.header.nativeElement.querySelectorAll('.navitem'));\r\n            let index = this.activeTabIndex;\r\n            if (tabs.length !== 3) {\r\n                index = tabs.findIndex(n => n === tab) + 1;\r\n            }\r\n            switch(index) {\r\n                case 2:\r\n                    left = this.localeSer.localeId === 'en'? 78: 68;\r\n                    break;\r\n                case 3:\r\n                    left = this.localeSer.localeId === 'en' ?158: 138;\r\n                    break;\r\n                default:\r\n                    left = 0;\r\n                    break;\r\n            }\r\n\r\n            this.render2.setStyle(this.activeTab.nativeElement, 'transform', `translate3d(${left}px, 0px, 0px)`);\r\n        }\r\n    }\r\n\r\n    changeTabs($event: MouseEvent, idx) {\r\n        $event.stopPropagation();\r\n\r\n        const treeNodes = this.getCurrentGroupHeaders();\r\n        if(this.activeTabIndex === 1 && this.enableMultipleHeaders) {\r\n            this.setCurrentGroupHeaders(treeNodes);\r\n        } else {\r\n            this.multiHeaders.treeData = treeNodes? treeNodes.treeData: [];\r\n        }\r\n\r\n\r\n        if (idx === 2 && this.enableMultipleHeaders) {\r\n            this.sortTreeData = getDataFieldsForMultiHeaders(treeNodes.viewCols).filter( (n: any) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable );\r\n        }\r\n\r\n        if (idx === 3) {\r\n            if (this.enableMultipleHeaders) {\r\n                this.columnFormat = treeNodes && treeNodes.viewCols ? getDataFieldsForMultiHeaders(treeNodes.viewCols).filter( (n: any) => n.field.indexOf('farris-datagrid-column_') == -1 ) : [];\r\n            } else {\r\n                this.columnFormat = getDataFieldsForMultiHeaders(this.columns);\r\n            }\r\n        }\r\n\r\n        this.activeTabIndex = idx;\r\n\r\n\r\n        let tabEl: any = $event.target;\r\n        if (!tabEl.classList.contains('navitem') && tabEl.closest('.navitem')) {\r\n            tabEl = tabEl.closest('.navitem');\r\n        }\r\n\r\n        this.setCurrentTab(tabEl);\r\n    }\r\n\r\n    onSortInfoChange(sortInfo: any) {\r\n        this.sortInfo = sortInfo;\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n\r\n\r\n    private mergeColumnFormats() {\r\n        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {\r\n            const { sortName, sortOrder } = this.sortInfo;\r\n            if (sortName && sortName.length) {\r\n                sortName.forEach((n, i) => {\r\n                    const col = this.columnFormat.find((col: any) => {\r\n                        return col.field === n;\r\n                    });\r\n                    if (col) {\r\n                        col.sortable = true;\r\n                        col.order = sortOrder[i] || 'asc';\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 1ãåªæä¸ç»è¡¨å¤´ï¼ä¸åºå®å¨å·¦ä¾§æå³ä¾§æ¶ï¼ææ åºå®åæ¹å¼å¤ç\r\n         * 2ãåªæå·¦ä¾§ãå³ä¾§åºå®åèæ²¡æå¶ä»æ­£å¸¸åæ¶ï¼åæ¶å³ä¾§åºå®å\r\n         * 3ãåªæå·¦ä¾§æå³ä¾§åºå®æ¶ï¼ææ åºå®åå¤ç\r\n         */\r\n        const _columnsFormat = this.columnFormat;\r\n        if (!_columnsFormat.filter(n => (!n.fixed || n.fixed === 'UNFIXED') && n.visible).length) {\r\n            const colsCount = _columnsFormat.length;\r\n            const rightCols = _columnsFormat.filter(n => n.fixed === 'right');\r\n            const leftCols = _columnsFormat.filter(n => n.fixed === 'left');\r\n            if ( leftCols.length == colsCount || rightCols.length == colsCount) {\r\n                _columnsFormat.forEach(n => {\r\n                    n.fixed = ''\r\n                });\r\n            } else {\r\n                if (rightCols.length === 1) {\r\n                    leftCols.forEach(t =>{\r\n                        t.fixed = '';\r\n                    });\r\n                } else {\r\n                    rightCols.forEach(t =>{\r\n                        t.fixed = '';\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onColumnFormatChange(colFormatData) {\r\n        this.columnFormat = colFormatData;\r\n    }\r\n\r\n    private _showMessager(msg: string) {\r\n        if (this.notifySer) {\r\n            this.notifySer.info(msg);\r\n        } else {\r\n            this.messager.info(msg);\r\n        }\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        if (this.enableMultipleHeaders) {\r\n            const _multiHeaders = this.getCurrentGroupHeaders();\r\n            if (_multiHeaders && !multiHeadersHasDataFields(_multiHeaders.viewCols)) {\r\n                this._showMessager('è¯·è®¾ç½®è¡¨å¤´ã');\r\n                return;\r\n            }\r\n\r\n            mergeSortInfo(_multiHeaders.viewCols, this.sortInfo);\r\n            this.multiHeaders = _multiHeaders;\r\n        } else {\r\n            this.multiHeaders = null;\r\n            this.mergeColumnFormats();\r\n        }\r\n        this.submitHandle.emit($event);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.cancelHandle.emit($event);\r\n    }\r\n\r\n    onSettingReset($event) {\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).subscribe((t: boolean) => {\r\n            if (t) {\r\n                if (this.enableMultipleHeaders) {\r\n                    const { settings, multiHeaderOptions } = reset2DefaultForMultiHeaders(this.gridInstance);\r\n                    const {viewColumns, columnFormat, sortInfo,groupField, expandGroupRows, multiHeaders} = settings;\r\n                    this.viewColumns = viewColumns;\r\n                    \r\n                    this.sortInfo = sortInfo;\r\n                    this.sortNames = sortInfo.sortName || [];\r\n                    this.groupField = groupField;\r\n                    this.expandGroupRows = expandGroupRows;\r\n                    this.multiHeaders = {\r\n                        columns: multiHeaderOptions.columns,\r\n                        treeData: multiHeaders.treeData\r\n                    };\r\n\r\n                    this.columnFormat = getDataFieldsForMultiHeaders( multiHeaderOptions.columns);\r\n                    this.setCurrentGroupHeaders({ viewCols: multiHeaderOptions.columns, treeData: null });\r\n\r\n                } else {\r\n                    this.reset2Default();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        col.title = c.title;\r\n                        col.fixed = c.fixed || '';\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.viewColumns = this.getViewColumns();\r\n\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.sortInfo = { sortName: this.sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.sortNames = [];\r\n            this.sortInfo = {};\r\n        }\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n        this.expandGroupRows = !!options.expandGroupRows;\r\n        this.enableGroupFooter = !!options.enableGroupFooter;\r\n\r\n    }\r\n    /** æ¾ç¤ºç®æ´æ¨¡å¼çªå£ */\r\n    showConcise($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        if (this.enableMultipleHeaders) {\r\n            this.multiHeaders = this.getCurrentGroupHeaders();\r\n        }\r\n\r\n        this.mergeColumnFormats();\r\n        this.concise.emit();\r\n    }\r\n\r\n    \r\n    private setCurrentGroupHeaders(p: {viewCols:any, treeData: any}) {\r\n        this['GROUP_HEADERS'] = p;\r\n    }\r\n\r\n    getCurrentGroupHeaders() {\r\n        if (this.colFormatSettings) {\r\n            return this.colFormatSettings.getMultiHeaders();\r\n        } else {\r\n            return this['GROUP_HEADERS'];\r\n        }\r\n    }\r\n\r\n}\r\n","export function getMultilingualValue(valObj, localeId) {\r\n    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {\r\n        localeId = localeId || 'zh-CHS';\r\n        const val = valObj[localeId];\r\n        if (val !== undefined) {\r\n            return val;\r\n        } else {\r\n            return '';\r\n        }\r\n    } else {\r\n        return '';\r\n    }\r\n}","\r\nimport { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit,\r\n        Output, ViewEncapsulation, HostListener, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { ColumnTreeOptions, SettingModel } from '../setting.model';\r\nimport { getMultilingualValue } from '../getValueWithLocaleId';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { ColumnTreeComponent } from '../multi-headers/column-tree.component';\r\nimport { mergeSortInfo, multiHeadersHasDataFields, reset2DefaultForMultiHeaders } from '../mutli-headers.helper';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { DatagridSchemeService } from '../datagrid-scheme.service';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings-simple',\r\n    templateUrl: './simple-columns.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SimpleColumnsComponent implements OnInit, AfterViewInit {\r\n    @Input() enableScheme = false;\r\n    @Input() seartTypes: any = [];\r\n    /** ææå */\r\n    @Input() columns = [];\r\n    /** æ¾ç¤ºçå */\r\n    @Input() fields = [];\r\n    /** ç¹å»ä¾§è¾¹æ ·å¼ä»¥å¤çåºåéèé¢æ¿ãé»è®¤ä¸º true */\r\n    @Input() clickToHidden = true;\r\n\r\n    @Input() top = 0;\r\n    private _schemeList = [];\r\n    @Input()\r\n    get schemeList() {\r\n        return this._schemeList;\r\n    }\r\n    set schemeList(val) {\r\n        if (val && val.length) {\r\n            val = val.filter(n => {\r\n                return JSON.parse(n.name)[this.localeSer.localeId]\r\n            }); // ä»è·åå½åè¯­è¨çæ¹æ¡\r\n            val.forEach(n => {\r\n                n['_title_'] = getMultilingualValue(JSON.parse(n.name), this.localeSer.localeId);\r\n                if (this.currentSchemeItem && n.id === this.currentSchemeItem.id) {\r\n                    this.currentSchemeItem['_title_'] = n['_title_'];\r\n                }\r\n            });\r\n        }\r\n        this._schemeList = val || [];\r\n    }\r\n\r\n    @HostBinding('class') cls = 'f-datagrid-settings-simple-host';\r\n\r\n    @ViewChild('colcontainer') container: ElementRef;\r\n    @ViewChild('okbtn') btnOk: ElementRef;\r\n    @ViewChild('inputWord') searchInput: ElementRef;\r\n\r\n    @ViewChild('schemeitems') schemeitemsEleRef: ElementRef;\r\n    @ViewChild('btnSchemeName') btnRef: ElementRef;\r\n\r\n    @ViewChild('gh') multiHeaderRef: ColumnTreeComponent;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n    @Output() submit = new EventEmitter();\r\n    /** åç»è¡¨å¤´ç¡®å®äºä»¶ */\r\n    @Output() submitForGroupHeader = new EventEmitter();\r\n    @Output() closed = new EventEmitter();\r\n    @Output() advanced = new EventEmitter();\r\n    @Output() canceld = new EventEmitter();\r\n\r\n    @Output() addNewScheme = new EventEmitter();\r\n    @Output() showSchemeList = new EventEmitter();\r\n    @Output() activeItemChange = new EventEmitter();\r\n\r\n    @Output() schemeChanged = new EventEmitter();\r\n\r\n    allCols = [];\r\n    columnType = 'all';\r\n\r\n    gridInstance: DatagridComponent;\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n\r\n    showSchemePanel = false;\r\n\r\n    switchValue = false;\r\n    // å½åæ¹æ¡\r\n    currentSchemeItem = null;\r\n\r\n    searchResultIsVisibleAll = { checkAll: false, unCheckAll: false };\r\n    defaultSchemeName = 'ç³»ç»é¢å¶';\r\n\r\n    \r\n    /** éç½®å¤è¡¨å¤´ç¸å³è®¾ç½® */\r\n    multiHeaderOptions: Partial<ColumnTreeOptions> = {};\r\n    // å¯ç¨å¤è¡¨å¤´\r\n    enableMultipleHeaders = false;\r\n\r\n    private messager: MessagerService;\r\n    private notify: NotifyService;\r\n\r\n    private prevSchemeItem = null;\r\n    \r\n    settings: SettingModel = {};\r\n\r\n    schemeSer: DatagridSchemeService = null;\r\n\r\n    noDisplyColumnTip = '';\r\n\r\n\r\n    constructor(private injector: Injector, public cd: ChangeDetectorRef) {\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n        this.messager = this.injector.get(MessagerService, null);\r\n        this.notify = this.injector.get(NotifyService, null);\r\n\r\n        this.noDisplyColumnTip = this.localeSer.getValue('datagrid-scheme.noDisplyColumnTip');\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        const clsname = $event.target['className'] || '';\r\n        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {\r\n            // éèä¾§è¾¹æ ï¼\r\n            if (this.clickToHidden) {\r\n                this.cancel();\r\n            }\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n    }\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    onEscKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    @HostListener('window:keydown.enter', ['$event'])\r\n    onEnterKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.onSubmitClick();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onControlGKeydown($event: KeyboardEvent) {\r\n        if ($event.ctrlKey && !document.querySelector('modal-container')) {\r\n            const _key = $event.key.toLowerCase();\r\n            if (['g', 'r', 's'].includes(_key)) {\r\n                $event.preventDefault();\r\n                $event.stopPropagation();\r\n            }\r\n            if (_key === 'g') {\r\n                this.showAdvanced($event);\r\n            } else if (_key === 'r') {\r\n                this.onSettingReset();\r\n            } else if (_key === 's') {\r\n                this.searchInput.nativeElement.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCurrentSchemeSettings() {\r\n        if (this.currentSchemeItem && this.currentSchemeItem.queryConditionString) {\r\n            const schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);\r\n            return schemeSettings[this.localeSer.localeId] as SettingModel;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // å¤æ­æ¯å¦å¯ç¨å¤è¡¨å¤´åè®¾ç½®\r\n        this.enableMultipleHeaders = this.gridInstance.enableSetMultiHeaders;\r\n        \r\n        // const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        // if (options.columnFields && options.columnFields.length) {\r\n        //     this.allCols = options.columnFields.filter((f: any) => f.field !== '_datagrid-setting-control_');\r\n        // } else {\r\n        //     this.allCols = this.columns[0];\r\n        // }\r\n        this.allCols = this.columns[0];\r\n        \r\n        if (this.gridInstance.enableScheme) {\r\n            if (!this.prevSchemeItem) {\r\n                this.prevSchemeItem = cloneDeep(this.currentSchemeItem);\r\n            }\r\n            if ( this.currentSchemeItem) {\r\n                this.settings = this.getCurrentSchemeSettings() || {};\r\n            } else {\r\n                if (!this.settings || !Object.keys(this.settings).length) {\r\n                    this._reset2Default();\r\n                }\r\n            }\r\n        }\r\n        \r\n        const { multiHeaders } = this.settings;\r\n\r\n        this.multiHeaderOptions = { columns: this.columns, treeData: multiHeaders?multiHeaders.treeData: null };\r\n        if (!this.enableMultipleHeaders) {\r\n            if (this.settings && this.settings.viewColumns) {\r\n                this.fields = this.settings.viewColumns.filter(n => n != '_datagrid-setting-control_');\r\n                this.dirtySettings(true);\r\n            } else {\r\n                this.fields = this.getViewColumns();\r\n            }\r\n        }\r\n\r\n        this.container.nativeElement.focus();\r\n        this.searchResultIsVisibleAll = this.seachResultIsCheckAll();\r\n        this.defaultSchemeName = this.localeSer.getValue('datagrid-scheme.syspreset') || this.gridInstance.defaultSchemeName;\r\n\r\n        if (this.schemeSer) {\r\n\r\n            if (this.settings && !Object.keys(this.settings).length) {\r\n                if (this.gridInstance.enableScheme) {\r\n                    this.resetToDefault();\r\n                } else {\r\n                    this.settings = this.getCurrentSettings();\r\n                }\r\n            }\r\n            this.schemeSer.setSettings(this.settings);\r\n\r\n            this.defaultSettings();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // console.log(this.fields);\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n    \r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns(searchWords = '') {\r\n        let cols = [];\r\n\r\n        if (this.switchValue) {\r\n            cols = this.columns[0].filter(n => this.fields.indexOf(n.field) > -1);\r\n        } else {\r\n            cols = this.columns[0];\r\n        }\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(this.allCols.filter(n => n.visible));\r\n    }\r\n\r\n    private seachResultIsCheckAll(searchFields?: any) {\r\n        const allColsLength = this.allCols.filter(n => n.field != '_datagrid-setting-control_').length;\r\n        let fieldsLength = this.fields.filter(n => n !=  '_datagrid-setting-control_').length;\r\n\r\n        if (searchFields) {\r\n            fieldsLength = searchFields.length;\r\n        }\r\n\r\n        return {\r\n            checkAll: allColsLength && allColsLength === fieldsLength,\r\n            unCheckAll:!searchFields ? !this.fields.length : !fieldsLength\r\n        };\r\n    }\r\n\r\n\r\n    private onFieldsChanged() {\r\n        if (!this.gridInstance.enableScheme) {\r\n            this.fieldsChange.emit(this.fields);\r\n        }\r\n    }\r\n\r\n    onDblClick($event, col) {\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        $event.stopPropagation();\r\n        this.showSchemePanel = false;\r\n        let checked = false;\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n            checked = true;\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n            checked = false;\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        \r\n        const _fields = this.allCols.filter(n => n.visible).map(n => n.field);\r\n        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(_fields);\r\n      \r\n        this.dirtySettings(true);\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event) {\r\n        this.switchValue = false;\r\n        const txt = $event.target.value;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, txt, ulElRef: any) {\r\n        this.showSchemePanel = false;\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState() {\r\n        if (!this.searchInput.nativeElement.value) {\r\n            if (this.fields.length === 0) {\r\n                return 0;\r\n            } else {\r\n                if (this.fields.length === this.columns[0].length) {\r\n                    return 1;\r\n                }\r\n                return 2;\r\n            }\r\n        } else {\r\n            const visibleLen = this.allCols.filter(n => n.visible).length;\r\n            if (visibleLen === this.allCols.length) {\r\n                return 1;\r\n            } else {\r\n                if (visibleLen < this.allCols.length) {\r\n                    if (visibleLen === 0) {\r\n                        return 0\r\n                    }\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // å¨é\r\n    onCheckAllClick($event: MouseEvent, txt) {\r\n        $event.stopPropagation();\r\n        if (!this.allCols || !this.allCols.length) {\r\n            return;\r\n        }\r\n        this.showSchemePanel = false;\r\n        const state = this.getCheckAllState();\r\n\r\n        const isCheckAll = state === 0 || state === 2;\r\n\r\n        let _fields = null;\r\n        if (!txt) {\r\n            this.columns[0].forEach(n => n.visible = isCheckAll);\r\n        } else {\r\n            this.columns[0].forEach(n => {\r\n                const item = this.allCols.find(a => n.field == a.field);\r\n                if (item) {\r\n                    n.visible = isCheckAll;\r\n                    item.visible = isCheckAll;\r\n                }\r\n            });\r\n            _fields = this.allCols.filter(n => n.visible).map(n => n.field);\r\n        }\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        \r\n        this.searchResultIsVisibleAll = this.seachResultIsCheckAll(!txt ? null: _fields);\r\n\r\n        this.dirtySettings(true);\r\n        this.cd.detectChanges();\r\n        this.onFieldsChanged();\r\n        // this.filterColumns(txt);\r\n    }\r\n\r\n    close($event?: MouseEvent) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.closed.emit();\r\n    }\r\n\r\n    cancel($event?: MouseEvent) {\r\n        this.currentSchemeItem = this.prevSchemeItem;\r\n        // this.schemeChanged.emit(this.prevSchemeItem);\r\n        this.close($event);\r\n        this.canceld.emit();\r\n    }\r\n\r\n    // æå¼é«çº§è®¾ç½®çªå£\r\n    showAdvanced($event) {\r\n        this.close($event);\r\n        \r\n        this.settings = this.getCurrentSettings();\r\n\r\n        if (this.enableMultipleHeaders) {\r\n            if (this.multiHeaderRef) {\r\n                this.settings.multiHeaders = this.multiHeaderRef.getSettings();\r\n            }\r\n        }    \r\n        this.advanced.emit({ viewFields: this.fields, settings: this.settings, columns: this.columns });\r\n    }\r\n\r\n    // æ¢å¤é»è®¤\r\n    onSettingReset($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'æ¨ç¡®å®è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText, 2035).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.resetToDefault();\r\n                this.dirtySettings(true);\r\n\r\n                this.searchResultIsVisibleAll = this.seachResultIsCheckAll();\r\n            }\r\n        });\r\n    }\r\n\r\n    resetToDefault() {\r\n        if (this.enableMultipleHeaders) {\r\n            this._reset2DefalutFormMultiHeaders()\r\n        } else {\r\n            this._reset2Default();\r\n        }\r\n    }\r\n\r\n\r\n    private _reset2DefalutFormMultiHeaders() {\r\n        const { settings, multiHeaderOptions } = reset2DefaultForMultiHeaders(this.gridInstance);\r\n        this.settings = settings,\r\n        this.multiHeaderOptions = multiHeaderOptions;\r\n    }\r\n\r\n\r\n    private _reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        col.title = c.title;\r\n                        col.fixed = c.fixed || '';\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.allCols = this.columns[0];\r\n        this.settings = {};\r\n        this.fields = this.getViewColumns();\r\n        this.settings.viewColumns = this.fields;\r\n        this.settings.columnFormat = [...this.columns[0]];\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.settings.sortInfo = { sortName: sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.settings.sortInfo = {};\r\n        }\r\n        this.settings.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n        this.settings.expandGroupRows = !!options.expandGroupRows;\r\n    }\r\n\r\n    private getCurrentSettings() {\r\n        let _settings: any = {};\r\n        _settings.viewColumns = this.fields;\r\n\r\n        if (!this.enableScheme) {\r\n            if (!_settings.columnFormat) {\r\n                _settings.columnFormat = [...this.columns[0]];\r\n            }\r\n\r\n            if (!_settings.sortInfo) {\r\n                _settings.sortInfo = {\r\n                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],\r\n                    sortOrder:  this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []\r\n                };\r\n            }\r\n\r\n            if (_settings.groupField === undefined) {\r\n                _settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n            }\r\n        } else {\r\n            _settings = Object.assign(this.settings|| {},  _settings);\r\n        }\r\n\r\n        if (_settings.expandGroupRows == undefined) {\r\n            _settings.expandGroupRows = this.gridInstance['expandGroupRows'];\r\n        }\r\n\r\n        return _settings;\r\n    }\r\n\r\n\r\n    // ç¡®å®æé®ç¹å»äºä»¶\r\n    onSubmitClick($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        if (!this.enableMultipleHeaders) {\r\n            if (!this.fields || !this.fields.length) {\r\n                this.notify.warning(this.noDisplyColumnTip);\r\n                return;\r\n            }\r\n        } \r\n\r\n        this.prevSchemeItem = this.currentSchemeItem;\r\n\r\n        this.showSchemePanel = false;\r\n\r\n        this.settings = this.getCurrentSettings();\r\n\r\n        // å¯ç¨å¤è¡¨å¤´æ¶ï¼è§¦åæ°çäºä»¶\r\n        if (this.enableMultipleHeaders) {\r\n            if (this.multiHeaderRef) {\r\n                const _multiHeaders = this.multiHeaderRef.getSettings();\r\n                if (!multiHeadersHasDataFields(_multiHeaders.viewCols)) {\r\n                    this.notify.info(this.noDisplyColumnTip);\r\n                    return;\r\n                }\r\n\r\n                mergeSortInfo(_multiHeaders.viewCols, this.settings.sortInfo);\r\n                this.settings.multiHeaders = _multiHeaders;\r\n            }\r\n\r\n\r\n            this.submitForGroupHeader.emit({\r\n                content: this.settings,\r\n                close: this.close.bind(this),\r\n                target: this.btnOk.nativeElement,\r\n                currentScheme: this.currentSchemeItem\r\n            });\r\n        } else {\r\n            this.submit.emit({\r\n                content: this.settings,\r\n                close: this.close.bind(this),\r\n                target: this.btnOk.nativeElement,\r\n                currentScheme: this.currentSchemeItem\r\n            });\r\n        }\r\n    }\r\n\r\n    collectSettings() {\r\n       \r\n        this.settings = this.getCurrentSettings();\r\n\r\n        // å¯ç¨å¤è¡¨å¤´æ¶ï¼è§¦åæ°çäºä»¶\r\n        if (this.enableMultipleHeaders) {\r\n            if (this.multiHeaderRef) {\r\n                const _multiHeaders = this.multiHeaderRef.getSettings();\r\n                if (!multiHeadersHasDataFields(_multiHeaders.viewCols)) {\r\n                    this.notify.info(this.noDisplyColumnTip);\r\n                    return;\r\n                }\r\n\r\n                mergeSortInfo(_multiHeaders.viewCols, this.settings.sortInfo);\r\n                this.settings.multiHeaders = _multiHeaders;\r\n            }\r\n        }\r\n\r\n        \r\n        return { ...this.settings };\r\n    }\r\n\r\n    // æ¾ç¤ºä¸ææ¹æ¡åè¡¨\r\n    onChooseScheme($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.showSchemePanel = !this.showSchemePanel;\r\n\r\n        setTimeout(() => {\r\n            if (this.schemeitemsEleRef && this.currentSchemeItem) {\r\n                const itemEl = this.schemeitemsEleRef.nativeElement.querySelector(`#schemeitem_${this.currentSchemeItem.id}`);\r\n                if (itemEl) {\r\n                    if (itemEl.scrollIntoViewIfNeeded) {\r\n                        itemEl.scrollIntoViewIfNeeded();\r\n                    } else {\r\n                        itemEl.scrollIntoView();\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // ä»æ¾ç¤ºå¯è§å\r\n    onlySeeVisibleColumns($event, searchWords) {\r\n        this.switchValue = $event;\r\n        this.filterColumns(searchWords);\r\n    }\r\n\r\n    refresh() {\r\n        if (!this.cd['destroyed']) {\r\n            this.cd.detectChanges();\r\n        }\r\n    }\r\n\r\n    hidePanel() {\r\n        this.showSchemePanel = false;\r\n        this.refresh();\r\n    }\r\n\r\n    // æ°å¢æ¹æ¡\r\n    onNewSchemeClick($event, saveas = 'new') {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.hidePanel();\r\n        this.addNewScheme.emit({ type: saveas || 'new' });\r\n\r\n        \r\n    }\r\n\r\n    // æ¾ç¤ºæ¹æ¡åè¡¨ç®¡ççªå£\r\n    onShowSchemeList($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.hidePanel();\r\n        this.showSchemeList.emit();\r\n    }\r\n\r\n\r\n    private schemeChangedForSingleHeader(schemeSettings) {\r\n        if (!schemeSettings) {\r\n            this._reset2Default();\r\n        } else {\r\n            this.settings = schemeSettings;\r\n            this.fields = schemeSettings.viewColumns;\r\n            this.columns[0].forEach(f => {\r\n                f.visible = this.fields.indexOf(f.field) > -1;\r\n            });\r\n        }\r\n\r\n        this.searchResultIsVisibleAll = this.seachResultIsCheckAll();\r\n    }\r\n\r\n    private schemeChangedForMultiHeaders(schemeSettings) {\r\n        if (schemeSettings) {\r\n            this.settings = schemeSettings;\r\n            const options = this.gridInstance.dfs['_state'].initialOptions;\r\n            this.multiHeaderOptions = {\r\n                treeData: this.settings.multiHeaders? this.settings.multiHeaders.treeData: null,\r\n                columns: options.groupHeaderFields\r\n            }\r\n        } else {\r\n            this._reset2DefalutFormMultiHeaders();\r\n        }\r\n    }\r\n\r\n    // æ¹æ¡ç¹å»\r\n    onSchemeItemClick($event, item) {\r\n        setTimeout(() => {\r\n            this.currentSchemeItem = item;\r\n            this.showSchemePanel = false;\r\n\r\n            let schemeSettings = null;\r\n            if (item && item.queryConditionString) {\r\n                schemeSettings = JSON.parse(item.queryConditionString);\r\n                schemeSettings = schemeSettings[this.localeSer.localeId];\r\n            }\r\n\r\n            if (this.enableMultipleHeaders) {\r\n                this.schemeChangedForMultiHeaders(schemeSettings);\r\n            } else {\r\n                this.schemeChangedForSingleHeader(schemeSettings);\r\n            }\r\n\r\n            this.schemeSer.setSettings(this.settings);\r\n\r\n            this.defaultSettings(item);\r\n\r\n            this.schemeChanged.emit(item);\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    /** å¤è¡¨å¤´é»è®¤è®¾ç½® */\r\n    private defaultSettings(item?: any) {\r\n        if (this.enableMultipleHeaders) {\r\n            if (!item || (this.settings && this.settings.multiHeaders && !this.settings.multiHeaders.treeData)) { // ç³»ç»é¢ç½®\r\n                setTimeout(() => {\r\n                    this.settings.multiHeaders = this.multiHeaderRef.getSettings();\r\n                    this.schemeSer.setSettings(this.settings);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    dirtySettings(flag) {\r\n        // this.isChanged = flag;\r\n    }\r\n\r\n    clearSearch($event, input) {\r\n        if (input && input.value) {\r\n            this.filterColumns('');\r\n            input.value = '';\r\n        }\r\n    }\r\n}\r\n","import { Injector } from \"@angular/core\";\r\nimport { appendPerfixForUri, IdService } from \"@farris/ui-common\";\r\nimport { Observable, of, Subject } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { BatchScheme, DatagridSchemeModel, DgSchemeState, IS_MULTI_HEADER_STRING, SchemeAuthModel, SchemeState, SettingModel } from \"./setting.model\";\r\nimport { cloneDeep } from \"lodash-es\";\r\n\r\n\r\n/** ä¿å­æ¹æ¡API */\r\nconst SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';\r\n/** è·åæ¹æ¡åè¡¨API */\r\nconst SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;\r\n/** æ¹æ¡åè¡¨ç®¡ç- è®¾é»è®¤ãå é¤ API */\r\nconst SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;\r\n/** æééªè¯ */\r\nconst SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';\r\n\r\nconst LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';\r\n\r\n\r\nexport class DatagridSchemeService {\r\n    private restService = null;\r\n    private state: DgSchemeState = {};\r\n    private perfixStr = '';\r\n    schemeList$ = new Subject();\r\n\r\n    private schemeApi = {\r\n        SCHEME_WEBAPI,\r\n        /** è·åæ¹æ¡åè¡¨API */\r\n        SCHEME_WEBAPI_QUERY,\r\n        /** æ¹æ¡åè¡¨ç®¡ç- è®¾é»è®¤ãå é¤ API */\r\n        SCHEME_WEBAPI_UPDATE,\r\n        /** æééªè¯ */\r\n        SCHEME_WEBAPI_Auth,\r\n\r\n        LANGUAGE_WEBAPI\r\n    };\r\n\r\n    private schemeKey: any = {};\r\n\r\n    private currentSchemeSettings = null;\r\n\r\n    constructor(private inject: Injector) {\r\n    }\r\n\r\n    setUriPerfix(perfixStr: string) {\r\n        this.perfixStr = perfixStr || '';\r\n    }\r\n\r\n    update(d: SchemeState, gridId: string) {\r\n        if (!this.state[gridId]) {\r\n            this.state[gridId] = {};\r\n        }\r\n        this.state[gridId] = Object.assign(this.state[gridId], d);\r\n    }\r\n\r\n    setRestService(httpSer: any) {\r\n        if (httpSer && httpSer['befRepository']) {\r\n            this.restService = httpSer['befRepository']['restService'];\r\n        }\r\n    }\r\n\r\n    private mergeUri(uri, perfix) {\r\n        return appendPerfixForUri ? appendPerfixForUri(uri, perfix): uri;\r\n    }\r\n\r\n    private getWebFormKey() {\r\n        const webformHash = window.location.hash.split('?')[0];\r\n        return webformHash.substring(webformHash.lastIndexOf('/') + 1);\r\n    }\r\n\r\n    destory(gridId: string) {\r\n        delete this.schemeKey[gridId];\r\n    }\r\n\r\n    getSchemeKey(gridId: string) {\r\n        if (!this.schemeKey[gridId]) {\r\n            const formKey = this.getWebFormKey();\r\n            this.schemeKey[gridId] = `${formKey}_DatagridScheme_${gridId}`;\r\n        }\r\n        return this.schemeKey[gridId];\r\n    }\r\n\r\n    getSchemeList(gridID: string, isMultiHeader = false): Observable<DatagridSchemeModel[]> {\r\n        let uri = this.schemeApi.SCHEME_WEBAPI_QUERY + this.getBelongId(gridID, isMultiHeader);\r\n        uri = this.mergeUri(uri, this.perfixStr);\r\n        if (this.restService) {\r\n            return this.restService.invoke(uri, 'GET', null, null, false);\r\n        }\r\n    }\r\n\r\n    updateSchemeData(gridID: string, schemeData) {\r\n        let schemeList = this.getStateValue(gridID, 'list');\r\n        schemeList = schemeList.filter(n => n.id !== schemeData.id);\r\n        schemeList.push(schemeData);\r\n        this.setSchemeList(gridID, schemeList);\r\n    }\r\n\r\n    private getBelongId(gridID: string, isMultiHeader = false) {\r\n        let id = this.getSchemeKey(gridID);\r\n        if (isMultiHeader) {\r\n            id = id + IS_MULTI_HEADER_STRING;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    saveScheme(scheme: DatagridSchemeModel, gridID: string, isUpdate = false, isMultiHeader = false) {\r\n        if (this.restService) {\r\n            const httpMethod = isUpdate ? 'PUT': 'POST';\r\n            scheme.belongId = this.getBelongId(gridID, isMultiHeader);\r\n\r\n            const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI, this.perfixStr);\r\n            return this.restService.invoke(uri, httpMethod, null, { body: scheme}, false);\r\n        }\r\n    }\r\n\r\n    updateScheme(param: BatchScheme, gridID: string, isMultiHeader = false): Observable<any> {\r\n        if (!param) {\r\n            return of(false);\r\n        }\r\n        const belongId = this.getBelongId(gridID, isMultiHeader);\r\n        param.belongId = belongId\r\n\r\n        if (param.belongId) {\r\n            const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_UPDATE, this.perfixStr);\r\n            return this.restService.invoke(uri, 'PUT', null, {body: param}, false);\r\n        }\r\n    }\r\n\r\n    getStateValue(gridId, ...statePro) {\r\n        const dgState = this.state[gridId];\r\n        if (dgState) {\r\n            if (statePro && statePro.length) {\r\n                return statePro.reduce((r, c) => {\r\n                    return r[c];\r\n                }, dgState)\r\n            }\r\n\r\n            return dgState;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private updateStateValue(gridId, propertyName, value) {\r\n        this.update({[propertyName]: value}, gridId);\r\n    }\r\n\r\n    setSchemeList(gridId, newSchemeList) {\r\n        this.updateStateValue(gridId, 'list', newSchemeList);\r\n        this.schemeList$.next(newSchemeList);\r\n    }\r\n\r\n    hasSchemeName(gridId, schemeName: any) {\r\n        const schemeList = this.getStateValue(gridId, 'list');\r\n        if (!schemeList || !schemeList.length) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof schemeName === 'string') {\r\n            return !!schemeList.find(n => n.name === schemeName.trim());\r\n        } else {\r\n            if (typeof schemeName === 'object') {\r\n                const replayNames = [];\r\n                schemeList.forEach(n => {\r\n                    if (n.name) {\r\n                        const nameObj = JSON.parse(n.name);\r\n                        // const currentNames = Object.values(nameObj);\r\n                        for(let k in schemeName) {\r\n                            if (nameObj[k] === schemeName[k]) {\r\n                                replayNames.push(k);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return replayNames;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkAuthority(): Observable<SchemeAuthModel> {\r\n        const uri = this.mergeUri(this.schemeApi.SCHEME_WEBAPI_Auth, this.perfixStr);\r\n        return this.restService.invoke(uri, 'GET', null, null, false);\r\n    }\r\n\r\n    getLanguages() {\r\n        if (this.restService) {\r\n            const uri = this.mergeUri(this.schemeApi.LANGUAGE_WEBAPI, this.perfixStr);\r\n            return this.restService.invoke(uri, 'GET', null, null, false);\r\n        } else {\r\n            return of([]);\r\n        }\r\n    }\r\n\r\n    createSchemeTaskID() {\r\n        const idService: IdService = new IdService();\r\n        this['SCHEME_TASK_ID'] = idService.guid();\r\n        this.currentSchemeSettings = null;\r\n    }\r\n\r\n\r\n    setSettings(configs: any) {\r\n        this.currentSchemeSettings = {\r\n            taskid: this['SCHEME_TASK_ID'],\r\n            values: cloneDeep(configs)\r\n        }\r\n    }\r\n\r\n    getSettings() {\r\n        return this.currentSchemeSettings;\r\n    }\r\n\r\n    isSchemeChanged(nowSettings: SettingModel, isMultiHeader: boolean) : boolean {\r\n        let { sortInfo, viewColumns, groupField, columnFormat, expandGroupRows, multiHeaders } = nowSettings;\r\n        let { sortInfo: sortInfo1, viewColumns: viewColumns1, groupField: groupField1, columnFormat: columnFormat1, expandGroupRows: expandGroupRows1, multiHeaders: multiHeaders1 } = this.getSettings().values;\r\n\r\n        const checkSortInfo = (_sortInfo) => {\r\n            if (!_sortInfo || !Object.keys(_sortInfo).length) {\r\n                _sortInfo = {\r\n                    sortName: [],\r\n                    sortOrder: []\r\n                };\r\n            }\r\n\r\n            return _sortInfo;\r\n        }\r\n        sortInfo = checkSortInfo(sortInfo);\r\n        sortInfo1 = checkSortInfo(sortInfo1);\r\n\r\n        const checkGroupField = (_groupField) => {\r\n            if (!_groupField) {\r\n                _groupField = [];\r\n            }\r\n            return _groupField;\r\n        }\r\n        groupField = checkGroupField(groupField);\r\n        groupField1 = checkGroupField(groupField1);\r\n\r\n\r\n        let nowconfig, initConfig;\r\n        if (isMultiHeader) {\r\n            nowconfig =  { sortInfo, expandGroupRows, groupField, multiHeaders };\r\n            initConfig  =  { sortInfo: sortInfo1, expandGroupRows: expandGroupRows1, groupField:groupField1, multiHeaders: multiHeaders1 };\r\n        } else {\r\n            nowconfig =  { columnFormat,expandGroupRows,groupField, sortInfo, viewColumns };\r\n            initConfig  =  { \r\n                columnFormat: columnFormat1,\r\n                expandGroupRows: expandGroupRows1, \r\n                groupField:groupField1,\r\n                sortInfo: sortInfo1,\r\n                viewColumns: viewColumns1\r\n            };\r\n        }\r\n\r\n        const _clearData = (data) => {\r\n            return JSON.stringify(data).replace(/UNFIXED/g, '').replace(/\"calculationType\":-1,/g, '').replace(/\"calculationType\":-1/g, '');\r\n        }\r\n\r\n        return _clearData(nowconfig) != _clearData(initConfig);\r\n    }\r\n}\r\n","import { DataColumn } from '@farris/ui-datagrid';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\n\r\nexport interface SettingModel {\r\n    columnFormat?: DataColumn[];\r\n    viewColumns?: string[];\r\n    groupField?: Array<string> | string;\r\n    sortInfo?: {\r\n        sortName?: string[];\r\n        sortOrder?: string[];\r\n    }\r\n    expandGroupRows?: boolean;\r\n    // å¤è¡¨å¤´è®¾ç½®\r\n    multiHeaders?: {\r\n        viewCols: Array<Array<Partial<DataColumn>>>,\r\n        treeData: Array<TreeNode>\r\n    };\r\n};\r\n\r\n\r\n\r\nexport interface DatagridSchemeModel {\r\n    id?: string;\r\n     /** è¡¨åä¸­è®°å½Datagridæ¹æ¡åè¡¨çIDï¼çè§£ä¸ºç±»å«ï¼è·åDatagrid æ¹æ¡åè¡¨æ¶æ ¹æ®æ­¤IDè¿è¡æ¥è¯¢ */\r\n    belongId: string;\r\n    code?: string;\r\n    /** æ¯å¦ä¸ºé»è®¤ï¼ 1 é»è®¤ï¼0 éé»è®¤ */\r\n    isDefault?: boolean;\r\n    /** æ¯å¦ä¸ºç³»ç»é¢å¶ */\r\n    isSystem?: boolean;\r\n    type?: 'private'|'public'|'org'\r\n    /** æ¹æ¡åç§° */\r\n    name: string;\r\n    /** æ¹æ¡åå®¹JSONä¸² */\r\n    queryConditionString?: string;\r\n    /** åå»ºäºº */\r\n    userId?: string;\r\n    userName?: string;\r\n    userCode?: string;\r\n    /* å¯åºåéç½®å±äºåè¡¨è¿æ¯ç­éæ¹æ¡, ç­éæ¹æ¡ä¸ºé»è®¤å¼query-scheme-1; åè¡¨ä¸ºå¶ä» */\r\n    extendId?: string;\r\n    /** ç¨äºå­æ¾ç»ç»å¬å±éç½®å±äºåªäºç»ç»ï¼ä»¥ç»ç»éæ©ç»ä»¶çè¿åå¼ä¸ºå */\r\n    extendInfo?: any[];\r\n}\r\n\r\n\r\nexport interface SetPublicSchemeModel {\r\n    id: string;\r\n    businessId: string;\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface SetOrgAuthSchemeModel {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface SchemeAuthModel {\r\n    success: boolean;\r\n    errorMessage?: any;\r\n    authOperationData: SetPublicSchemeModel[];\r\n    authOrganizationData: SetOrgAuthSchemeModel[];\r\n    currentUserId?: string;\r\n}\r\n\r\nexport interface BatchScheme {\r\n    belongId: string;\r\n    defaultId: string;\r\n    deletedIds: string[];\r\n}\r\n\r\nexport interface SchemeState {\r\n    list?: DatagridSchemeModel[];\r\n    current?: null;\r\n}\r\n\r\nexport interface DgSchemeState {\r\n    [gridId: string]: SchemeState;\r\n}\r\n\r\n\r\nexport interface ColumnTreeOptions {\r\n    columns?: Array<Array<Partial<DataColumn>>>,\r\n    treeData?: Array<TreeNode>\r\n}\r\n\r\nexport const IS_MULTI_HEADER_STRING = '-$MULTIHEADER$';","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'new-scheme',\r\n    templateUrl: './newscheme.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NewSchemeComponent implements OnInit {\r\n\r\n    @ViewChild('header') header: ElementRef<any>;\r\n\r\n    @Input() dataPermissionIds = [];\r\n\r\n    @Output() closeModal = new EventEmitter();\r\n    @Output() submitModal = new EventEmitter();\r\n    @Output() checkAuthority = new EventEmitter();\r\n\r\n    schemeInfo = {\r\n        name: '',\r\n        isDefault: false,\r\n        type: 'private',\r\n        orgids: ''\r\n    }\r\n\r\n    schemeType = 'private';\r\n\r\n    noPublicAuthority = false;\r\n    noOrgAuthority = false;\r\n\r\n    languages = [{ code: 'zh-CHS', name: 'ä¸­æç®ä½', default: true },{ code: 'en', name: 'English' },{ code: 'zh-CHT', name: 'ä¸­æç¹ä½'}];\r\n    nameMaxLength = { 'zh-CHS': 9, 'zh-CHT': 9, en: 20 };\r\n    \r\n    constructor(private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    close($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    submit($event) {\r\n        this.submitModal.emit(this.schemeInfo);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.close($event);\r\n    }\r\n\r\n    onSelectedOrg($event) {\r\n        if ($event.selections && $event.selections.length ) {\r\n            let orgids = $event.selections.map(n => n.orgId);\r\n            this.schemeInfo.orgids = orgids;\r\n        }\r\n    }\r\n\r\n    onSetRangeType($event: MouseEvent, val) {\r\n        $event.stopPropagation();\r\n        this.schemeType = val;\r\n        if (val === 'public' || val === 'org') {\r\n            this.checkAuthority.emit({ value: val, schemeInfo: this.schemeInfo });\r\n        } else {\r\n            this.schemeInfo.type = val;\r\n        }\r\n    }\r\n\r\n    refresh(hasAuthority = { public: true, org: true }) {\r\n        this.schemeInfo = {...this.schemeInfo};\r\n        this.schemeType = this.schemeInfo.type;\r\n        this.noPublicAuthority = !hasAuthority.public;\r\n        this.noOrgAuthority = !hasAuthority.org;\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    getSelectedId($event) {\r\n        if ($event.selections &&$event.selections.length) {\r\n            this.schemeInfo.orgids = $event.selections.map(n => n.orgId);\r\n        } else {\r\n            this.schemeInfo.orgids = '';\r\n        }\r\n    }\r\n\r\n    clearAllOrgs() {\r\n        this.schemeInfo.orgids = '';\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { getMultilingualValue } from '../getValueWithLocaleId';\r\n\r\n@Component({\r\n    selector: 'scheme-list',\r\n    templateUrl: 'scheme-list.component.html'\r\n})\r\n\r\nexport class SchemeListComponent implements OnInit {\r\n\r\n    @Input() items = [];\r\n    \r\n    @Output() closeModal = new EventEmitter();\r\n    @Output() submitModal = new EventEmitter();\r\n\r\n    @Input() removeItem = true;\r\n\r\n    @Input() currentSchemeId = '';\r\n    \r\n    @ViewChild('header') header: ElementRef<any>;\r\n    @ViewChild('schemeName') schemeName: TemplateRef<any>;\r\n    @ViewChild('schemeIsDefault') schemeIsDefault: TemplateRef<any>;\r\n    @ViewChild('btnDel') btnDel: TemplateRef<any>;\r\n    @ViewChild('dg') dg: DatagridComponent;\r\n\r\n    columns = [];\r\n\r\n    currentUserId = '';\r\n   \r\n    changes: {\r\n        defaultId?: string,\r\n        deletedIds?: any[]\r\n    } = null;\r\n    constructor(private cd: ChangeDetectorRef, private localeSer: LocaleService, private injector: Injector) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const colName = this.localeSer.getValue('datagrid-scheme.columns.name') || 'åç§°';\r\n        const colType = this.localeSer.getValue('datagrid-scheme.columns.type') || 'å±æ§';\r\n        const colDefault = this.localeSer.getValue('datagrid-scheme.columns.isDefault') || 'é»è®¤';\r\n        const colCreator = this.localeSer.getValue('datagrid-scheme.columns.username') || 'åå»ºäºº';\r\n        const colMgr = this.localeSer.getValue('datagrid-scheme.columns.mgr') || 'ç®¡ç';\r\n\r\n        const publicTxt = this.localeSer.getValue('datagrid-scheme.isPublic') || 'å¬å±';\r\n        const privateTxt = this.localeSer.getValue('datagrid-scheme.isPrivate') || 'ä¸ªäºº';\r\n        const orgTxt = this.localeSer.getValue('datagrid-scheme.isOrg') || 'ç»ç»';\r\n\r\n\r\n        this.columns = [\r\n            // {field: 'name', title: 'åç§°', width: 150, template: this.schemeName},\r\n            {field: 'name', title: colName, width: 150, formatter: (v) => {\r\n                return getMultilingualValue(JSON.parse(v), this.localeSer.localeId);\r\n            }},\r\n            {field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (v, d) => {\r\n                switch(v) {\r\n                    case 'public':\r\n                        return '<span class=\"scheme-manager__label px-1 public\">'+ publicTxt +'</span>';\r\n                    case 'org':\r\n                        return '<span class=\"scheme-manager__label px-1 org\">'+ orgTxt +'</span>';\r\n                    case 'private':\r\n                    default:\r\n                        return '<span class=\"scheme-manager__label px-1 private\">'+ privateTxt +'</span>';\r\n                }\r\n            }},\r\n            {field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },\r\n            {field: 'userName', title: colCreator, width: 80},\r\n            {title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center',}\r\n        ];\r\n    \r\n    }\r\n\r\n    onClose($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        this.submitModal.emit( this.changes);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    setDefault($event: any, ctx) {\r\n        const r = $event == '1';\r\n        // $event.stopPropagation();\r\n        this.items.forEach(n => {\r\n            n.isDefault = false;\r\n            if (n.id === ctx.rowData.id && r) {\r\n                n.isDefault = r;\r\n            }\r\n        });\r\n\r\n        this.items = [...this.items];\r\n\r\n        const defaultItem = this.items.find(n => n.isDefault);\r\n        if (defaultItem) {\r\n            this.changes = this.changes || {};\r\n            this.changes.defaultId = defaultItem.id;\r\n        }\r\n        // this.cd.detectChanges();\r\n    }\r\n\r\n    onSchemeDel($event, ctx) {\r\n        if ((this.currentUserId === ctx.rowData[\"userId\"] &&  ctx.rowData['type']=='private') || this.removeItem) {\r\n            $event.stopPropagation();\r\n            const id = ctx.rowData.id;\r\n            this.items = this.items.filter(n => n.id !== id);\r\n            this.changes = this.changes || {};\r\n            this.changes.deletedIds = [...(this.changes.deletedIds || []), id];\r\n            if (id === this.changes.defaultId) {\r\n                this.changes.defaultId = '';\r\n                delete this.changes.defaultId;\r\n            }\r\n        }\r\n    }\r\n}","/** åè®¾ç½®ç¸å³å¤è¯­èµæº */\r\nexport const DATAGRID_SETTINGS_LOCALEDATA = {\r\n    en: {\r\n        'datagrid-settings': {\r\n            noAuth: {\r\n                public: 'You do not have permission to set the usage scope of the scheme as public.',\r\n                org: 'You do not have permission to set the usage range of the scheme as organization.'\r\n            },\r\n            has: {\r\n                exist: 'The scheme name already exists, please modify it.',\r\n                chs: 'Simplified Chinese name already exists.',\r\n                cht: 'Traditional Chinese name already exists.',\r\n                en: 'English name already exists.'\r\n            },\r\n            required: {\r\n                schemeName: 'Please enter a scheme name.',\r\n                chs: 'Please enter a simplified Chinese name.',\r\n                cht: 'Please enter a name in Traditional Chinese.',\r\n                en: 'Please enter an English name.',\r\n                org: 'Please select an organization.'\r\n            },\r\n            groupRowStatus: {\r\n                label: 'Group Row Status',\r\n                expand: 'open',\r\n                collapse: 'fold'\r\n            },\r\n            column: {\r\n                title: 'Column title',\r\n                fixed: 'Fixed type',\r\n                unFixed: 'Unfixed',\r\n                leftFixed: 'Left fixed',\r\n                rightFixed: 'Right fixed'\r\n            }\r\n        },\r\n        'datagrid-scheme': {\r\n            saveTitle: 'Save Scheme',\r\n            namePlaceholder: 'Please enter a scheme name (no more than 9 characters)',\r\n            setPrivate: 'Private',\r\n            privateTip: 'When set as private, you can only view and use the scheme yourself',\r\n            setPublic: 'Public',\r\n            publicTip: 'When public, all users can view and use the scheme',\r\n            setOrg: 'Organization',\r\n            orgTip: 'When it is set to organization, users in the organization can view and use the scheme',\r\n            setDefault: 'Default',\r\n            defaultTip: 'The next time you enter this function, the scheme will be loaded by default',\r\n            syspreset: 'System preset',\r\n            isDefault: 'Default',\r\n            isPublic: 'Public',\r\n            isOrg: 'Org',\r\n            isPrivate: 'Private',\r\n            newScheme: 'Add New Scheme',\r\n            mgrScheme: 'Manage',\r\n            saveas: 'Save as',\r\n            onlyshowcolumns: 'only the display column',\r\n            schemeList: 'Scheme list',\r\n            delete: 'Delete this shceme',\r\n            columns:  {\r\n                name: 'Name',\r\n                type: 'Type',\r\n                isDefault: 'IsDefault',\r\n                username: 'Creator',\r\n                mgr: 'Manage'\r\n            },\r\n            currentSheme: 'Current schemeï¼',\r\n            schemeChanged: {\r\n                title: 'The scheme has been changed. Do you want to save it as a new scheme?',\r\n                tips: 'cancel: discard modifications; No: save the current scheme; Yes: save as a new scheme.',\r\n                yes: 'Yes',\r\n                no: 'No',\r\n                cancel: 'Cancel'\r\n            },\r\n            noDisplyColumnTip: 'Please set the fields to be displayed.'\r\n        },\r\n        'headerGroup': {\r\n            title: 'Multiple meter heads',\r\n            preview: 'Preview effect',\r\n            tips: 'The fields in the (candidate column) will not be displayed in the list; Click on the field name and display the relevant operation buttons on the right.',\r\n            contextMenus: {\r\n                new: 'New Header',\r\n                newChild: 'New Child Header',\r\n                setDataField: 'Assign Data Columns',\r\n                rename: 'Rename',\r\n                top: 'Top',\r\n                up: 'Up',\r\n                down: 'Down',\r\n                bottom: 'Bottom',\r\n                cancelGroup: 'Cancel',\r\n                remove: 'Remove'\r\n            },\r\n            candidate: 'Candidate columns',\r\n            setHeader: 'Set as header',\r\n            ok: 'Ok',\r\n            cancel: 'Cancel',\r\n            required: 'Please enter a header name!',\r\n            defaultGroupHeaderName: 'NewHeader',\r\n            newHeaderPlaceholder: 'Please enter a header name.',\r\n            newHeaderLabel: 'Header Name'\r\n        }\r\n    },\r\n    'zh-CHS': {\r\n        'datagrid-settings': {\r\n            noAuth: {\r\n                public: 'æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºå¬å±çæéã',\r\n                org: 'æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºç»ç»çæéã'\r\n            },\r\n            has: {\r\n                exist: 'æ¹æ¡åç§°å·²å­å¨ï¼è¯·ä¿®æ¹ã',\r\n                chs: 'ç®ä½ä¸­æåç§°å·²å­å¨ã',\r\n                cht: 'ç¹ä½ä¸­æåç§°å·²å­å¨ã',\r\n                en: 'è±æåç§°å·²å­å¨ã'\r\n            },\r\n            required: {\r\n                schemeName: 'è¯·è¾å¥æ¹æ¡åç§°ã',\r\n                chs: 'è¯·è¾å¥ç®ä½ä¸­æåç§°ã',\r\n                cht: 'è¯·è¾å¥ç¹ä½ä¸­æåç§°ã',\r\n                en: 'è¯·è¾å¥è±æåç§°ã',\r\n                org: 'è¯·éæ©ç»ç»ã'\r\n            },\r\n            groupRowStatus: {\r\n                label: 'åç»è¡ç¶æ',\r\n                expand: 'å±å¼',\r\n                collapse: 'æå '\r\n            },\r\n            column: {\r\n                title: 'åæ é¢',\r\n                fixed: 'åºå®å',\r\n                unFixed: 'ä¸åºå®',\r\n                leftFixed: 'åºå®å¨å·¦ä¾§',\r\n                rightFixed: 'åºå®å¨å³ä¾§'\r\n            }\r\n        },\r\n        'datagrid-scheme': {\r\n            saveTitle: 'ä¿å­æ¹æ¡',\r\n            namePlaceholder: 'è¯·è¾å¥æ¹æ¡åç§°ï¼æå¤ä¸è¶è¿9ä¸ªå­ç¬¦ï¼',\r\n            setPrivate: 'è®¾ä¸ºä¸ªäºº',\r\n            privateTip: 'è®¾ä¸ºä¸ªäººæ¶ï¼åªè½èªå·±æ¥çãä½¿ç¨è¯¥æ¹æ¡',\r\n            setPublic: 'è®¾ä¸ºå¬å±',\r\n            publicTip: 'è®¾ä¸ºå¬å±æ¶ï¼ææç¨æ·é½å¯æ¥çãä½¿ç¨è¯¥æ¹æ¡',\r\n            setOrg: 'è®¾ä¸ºç»ç»',\r\n            orgTip: 'è®¾ä¸ºç»ç»æ¶ï¼ç»ç»åçç¨æ·åè½æ¥çãä½¿ç¨è¯¥æ¹æ¡',\r\n            setDefault: 'è®¾ä¸ºé»è®¤',\r\n            defaultTip: 'ä¸æ¬¡è¿å¥æ­¤åè½æ¶ï¼é»è®¤å è½½è¯¥æ¹æ¡',\r\n            syspreset: 'ç³»ç»é¢å¶',\r\n            isDefault: 'é»è®¤',\r\n            isPublic: 'å¬å±',\r\n            isOrg: 'ç»ç»',\r\n            isPrivate: 'ä¸ªäºº',\r\n            newScheme: 'æ°å¢æ¹æ¡',\r\n            mgrScheme: 'ç®¡ç',\r\n            saveas: 'å¦å­ä¸º',\r\n            onlyshowcolumns: 'ä»çå±ç¤ºå',\r\n            schemeList: 'æ¹æ¡åè¡¨',\r\n            delete: 'å é¤',\r\n            columns:  {\r\n                name: 'åç§°',\r\n                type: 'å±æ§',\r\n                isDefault: 'é»è®¤',\r\n                username: 'åå»ºäºº',\r\n                mgr: 'ç®¡ç'\r\n            },\r\n            currentSheme: 'å½åæ¹æ¡ï¼',\r\n            schemeChanged: {\r\n                title: 'æ¹æ¡å·²æ´æ¹ï¼æ¯å¦å¦å­ä¸ºæ°æ¹æ¡ï¼',\r\n                tips: 'åæ¶ï¼æ¾å¼ä¿®æ¹ï¼å¦ï¼ä¿å­å½åæ¹æ¡ï¼æ¯ï¼æ¹æ¡å¦å­ä¸º',\r\n                yes: 'æ¯',\r\n                no: 'å¦',\r\n                cancel: 'åæ¶'\r\n            },\r\n            noDisplyColumnTip: 'è¯·è®¾ç½®è¦æ¾ç¤ºçå­æ®µ'\r\n\r\n        },\r\n        'headerGroup': {\r\n            title: 'å¤è¡¨å¤´',\r\n            preview: 'é¢è§ææ',\r\n            tips: 'å¨ï¼åéåï¼ä¸­çå­æ®µï¼å°ä¸å¨åè¡¨ä¸­æ¾ç¤º; ç¹å»å­æ®µåç§°ï¼å¨å³ä¾§æ¾ç¤ºç¸å³æä½æé®ã',\r\n            contextMenus: {\r\n                new: 'æ°å»ºè¡¨å¤´',\r\n                newChild: 'æ°å»ºå­çº§è¡¨å¤´',\r\n                setDataField: 'åéæ°æ®å',\r\n                rename: 'éå½å',\r\n                top: 'ç½®é¡¶',\r\n                up: 'ä¸ç§»',\r\n                down: 'ä¸ç§»',\r\n                bottom: 'ç½®åº',\r\n                cancelGroup: 'åæ¶åç»',\r\n                remove: 'ç§»é¤'\r\n            },\r\n            candidate: '(åéå)',\r\n            setHeader: 'è®¾ä¸ºè¡¨å¤´',\r\n            ok: 'ç¡®å®',\r\n            cancel: 'åæ¶',\r\n            required: 'è¯·è¾å¥è¡¨å¤´åç§°ï¼',\r\n            defaultGroupHeaderName: 'åç»è¡¨å¤´1',\r\n            newHeaderPlaceholder: 'è¯·è¾å¥åç§°',\r\n            newHeaderLabel: 'è¡¨å¤´åç§°'\r\n        }\r\n    },\r\n    'zh-CHT': {\r\n        'datagrid-settings': {\r\n            noAuth: {\r\n                public: 'æ¨æ²æå°æ¹æ¡çä½¿ç¨ç¯åè¨­ç½®ç²å¬å±çæ¬éã',\r\n                org: 'æ¨æ²æå°æ¹æ¡çä½¿ç¨ç¯åè¨­ç½®ç²çµç¹çæ¬éã'\r\n            },\r\n            has: {\r\n                exist: 'æ¹æ¡åç¨±å·²å­å¨ï¼è«ä¿®æ¹ã',\r\n                chs: 'ç°¡é«ä¸­æåç¨±å·²å­å¨ã',\r\n                cht: 'ç¹é«ä¸­æåç¨±å·²å­å¨ã',\r\n                en: 'è±æåç¨±å·²å­å¨ã'\r\n            },\r\n            required: {\r\n                schemeName: 'è«è¼¸å¥æ¹æ¡åç¨±.',\r\n                chs: 'è«è¼¸å¥ç°¡é«ä¸­æåç¨±ã',\r\n                cht: 'è«è¼¸å¥ç¹é«ä¸­æåç¨±ã',\r\n                en: 'è«è¼¸å¥è±æåç¨±ã',\r\n                org: 'è«é¸æçµç¹ã'\r\n            },\r\n            groupRowStatus: {\r\n                label: 'åçµè¡çæ',\r\n                expand: 'å±é',\r\n                collapse: 'æç'\r\n            },\r\n            column: {\r\n                title: 'åæ¨é¡',\r\n                fixed: 'åºå®å',\r\n                unFixed: 'ä¸åºå®',\r\n                leftFixed: 'åºå®å¨å·¦å´',\r\n                rightFixed: 'åºå®å¨å³å´'\r\n            }\r\n        },\r\n        'datagrid-scheme': {\r\n            saveTitle: 'ä¿å­æ¹æ¡',\r\n            namePlaceholder: 'è«è¼¸å¥æ¹æ¡åç¨±ï¼æå¤ä¸è¶é9åå­ç¬¦ï¼',\r\n            setPrivate: 'è¨­ç²åäºº',\r\n            privateTip: 'è¨­ç²åäººæï¼åªè½èªå·±æ¥çãä½¿ç¨è©²æ¹æ¡',\r\n            setPublic: 'è¨­ç²å¬å±',\r\n            publicTip: 'è¨­ç²å¬å±æ¶ï¼ææç¨æ¶é½å¯æ¥çãä½¿ç¨è©²æ¹æ¡',\r\n            setOrg: 'è¨­ç²çµç¹',\r\n            orgTip: 'è¨­ç²çµç¹æï¼çµç¹å§çç¨æ¶åè½æ¥çãä½¿ç¨è©²æ¹æ¡',\r\n            setDefault: 'è¨­ç²é»èª',\r\n            defaultTip: 'ä¸æ¬¡é²å¥æ­¤åè½æï¼é»èªå è¼è©²æ¹æ¡',\r\n            syspreset: 'ç³»çµ±é å¶',\r\n            isDefault: 'é»èª',\r\n            isPublic: 'å¬å±',\r\n            isOrg: 'çµç¹',\r\n            isPrivate: 'åäºº',\r\n            newScheme: 'æ°å¢æ¹æ¡',\r\n            mgrScheme: 'ç®¡ç',\r\n            saveas: 'å¦å­ç²',\r\n            onlyshowcolumns: 'åçå±ç¤ºå',\r\n            schemeList: 'æ¹æ¡åè¡¨',\r\n            delete: 'åªé¤',\r\n            columns:  {\r\n                name: 'åç¨±',\r\n                type: 'å±¬æ§',\r\n                isDefault: 'é»èª',\r\n                username: 'åµå»ºäºº',\r\n                mgr: 'ç®¡ç'\r\n            },\r\n            currentSheme: 'ç¶åæ¹æ¡ï¼',\r\n            schemeChanged: {\r\n                title: 'æ¹æ¡å·²æ´æ¹ï¼æ¯å¦å¦å­ç²æ°æ¹æ¡ï¼',\r\n                tips: 'åæ¶ï¼æ¾æ£ä¿®æ¹ï¼å¦ï¼ä¿å­ç¶åæ¹æ¡ï¼æ¯ï¼æ¹æ¡å¦å­ç²',\r\n                yes: 'æ¯',\r\n                no: 'å¦',\r\n                cancel: 'åæ¶'\r\n            },\r\n            noDisplyColumnTip: 'è«è¨­ç½®è¦é¡¯ç¤ºçå­æ®µ'\r\n        },\r\n        'headerGroup': {\r\n            title: 'å¤è¡¨é ­',\r\n            preview: 'é è¦½ææ',\r\n            tips: 'å¨ï¼åé¸åï¼ä¸­çå­æ®µï¼å°ä¸å¨åè¡¨ä¸­é¡¯ç¤º; é»æå­æ®µåç¨±ï¼å¨å³å´é¡¯ç¤ºç¸éæä½æéã',\r\n            contextMenus: {\r\n                new: 'æ°å»ºè¡¨é ­',\r\n                newChild: 'æ°å»ºå­ç´è¡¨é ­',\r\n                setDataField: 'åéæ¸æå',\r\n                rename: 'éå½å',\r\n                top: 'ç½®é ',\r\n                up: 'ä¸ç§»',\r\n                down: 'ä¸ç§»',\r\n                bottom: 'ç½®åº',\r\n                cancelGroup: 'åæ¶åçµ',\r\n                remove: 'ç§»é¤'\r\n            },\r\n            candidate: '(åé¸å)',\r\n            setHeader: 'è¨­ç²è¡¨é ­',\r\n            ok: 'ç¢ºå®',\r\n            cancel: 'åæ¶',\r\n            newHeaderPlaceholder: 'è«è¼¸å¥åç¨±',\r\n            newHeaderLabel: 'è¡¨é ­åç¨±',\r\n            \r\n        }\r\n    }\r\n}","import { debounceTime, filter, map, switchMap, tap } from 'rxjs/operators';\r\nimport { forkJoin, Observable, of, Subscription, timer } from 'rxjs';\r\nimport { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';\r\nimport { DatagridComponent, DataColumn } from '@farris/ui-datagrid';\r\nimport { BsModalService, ModalOptions, ModalContainerComponent } from '@farris/ui-modal';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\nimport { cloneDeep, debounce, flatten } from 'lodash-es';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\nimport { CommonUtils, DebugService, IdService, WEBAPI_PREFIX_TOKEN } from '@farris/ui-common';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\nimport { DatagridSchemeService } from './datagrid-scheme.service';\r\nimport { NewSchemeComponent } from './scheme/newscheme.component';\r\nimport { SchemeListComponent } from './scheme/scheme-list.component';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { DatagridSchemeModel, IS_MULTI_HEADER_STRING, SchemeAuthModel, SettingModel } from './setting.model';\r\n\r\nimport { DATAGRID_SETTINGS_LOCALEDATA }  from './datagrid-settings-locale';\r\nimport { cleanGroupFields, cleanSortFields, columnsToTreeNodes, getDataFieldsForMultiHeaders, mergetColumnOptions, refreshGridColumns } from './mutli-headers.helper';\r\n\r\n\r\nexport const GRID_SETTINGS_WEBAPI =  new InjectionToken(' Farris DataGrid User Setting WebApi URI.');\r\n\r\nexport type NewSchemeCallBack = {\r\n    cancel?: (p?: any) => void,\r\n    ok: (p: any) => void\r\n};\r\n\r\n@Injectable()\r\nexport class DatagridSettingsService {\r\n\r\n    private multiSortMsg = 'åè¡¨ä¸­æªå¼å¯å¤åæåºçåè½ã è¯·æ£æ¥ï¼';\r\n    private columnsSortableMsg = 'æªå¼å¯åçæåºåè½ãè¯·æ£æ¥ï¼';\r\n    private notShowDialog = 'å¤è¡¨å¤´æä¸æ¯æåæ¾ç¤ºè®¾ç½®ï¼åæ¶æªå¯ç¨åæåºåè½ã';\r\n\r\n    private _httpRestService = null;\r\n\r\n    private languages: any = [];\r\n\r\n    get httpRestService() {\r\n        return this._httpRestService;\r\n    };\r\n\r\n    set httpRestService(httpSer) {\r\n        this._httpRestService = httpSer;\r\n\r\n        if (this.schemeService) {\r\n            this.schemeService.setRestService(httpSer);\r\n        }\r\n    }\r\n\r\n    private gridRefs: {[key: string]: DatagridComponent} = null;\r\n    private activeSchemeItem: {[schemeid: string]: any} = null;\r\n\r\n    private saving = false;\r\n    private cfr: ComponentFactoryResolver = null;\r\n    private app: ApplicationRef = null;\r\n    private schemeListSubscription: Subscription = null;\r\n\r\n    private schemeService: DatagridSchemeService;\r\n    private notifyService: NotifyService;\r\n\r\n    private commonUtils: CommonUtils;\r\n\r\n    private currentSchemeitem = null;\r\n    private prevSchemeItem = null;\r\n    private debugSer: DebugService = null;\r\n\r\n    constructor(private injector: Injector, private modalSer: BsModalService,\r\n                private messager: MessagerService, private idService: IdService,\r\n                private localeSer: LocaleService) {\r\n\r\n        this.cfr = this.injector.get(ComponentFactoryResolver);\r\n        this.app = this.injector.get(ApplicationRef);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());\r\n        this.schemeService = new DatagridSchemeService(this.injector);\r\n\r\n \r\n        this.localeSer.setLocaleData(DATAGRID_SETTINGS_LOCALEDATA);\r\n    }\r\n\r\n    setUriPerfixStr(perfixStr: string) {\r\n\r\n        if (perfixStr == '') {\r\n            if (window['gspframeworkService'] && window['gspframeworkService'].common) {\r\n                const basePath = window['gspframeworkService'].common.getBasePath;\r\n                if (basePath && basePath.get) {\r\n                    perfixStr = basePath.get();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (perfixStr != '' && perfixStr !== null) {\r\n            this.schemeService.setUriPerfix(perfixStr);\r\n        }\r\n\r\n    }\r\n\r\n    destroy(id?: string) {\r\n        if (this.gridRefs) {\r\n            if (id && this.gridRefs[id]) {\r\n                this.gridRefs[id] = null;\r\n                delete this.gridRefs[id];\r\n            } else {\r\n                if (!Object.keys(this.gridRefs).length) {\r\n                    this.gridRefs = null;\r\n                }\r\n            }\r\n        }\r\n        this.saving = false;\r\n        this.setActiveSchemeItem(id, null);\r\n        this.schemeService.destory(id);\r\n    }\r\n\r\n    private writeDebugMsg(msg, type = 'warn') {\r\n        if (this.debugSer) {\r\n            if (this.debugSer[type]) {\r\n                this.debugSer[type](msg);\r\n            } else {\r\n                console[type](msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    registerGridInstance(dg: DatagridComponent) {\r\n        if (!dg) {\r\n            this.writeDebugMsg('DatagridSettingService: grid instance is null.')\r\n            return;\r\n        }\r\n        const id = dg.id;\r\n        this.gridRefs = this.gridRefs || {};\r\n        if (!this.gridRefs[id]) {\r\n            this.gridRefs[id] = dg;\r\n        }\r\n    }\r\n\r\n    getGridInstance(dgID: string) {\r\n        return this.gridRefs ? this.gridRefs[dgID] : null;\r\n    }\r\n\r\n    /** æ´æ°æ¹æ¡ä¸­çéç½®æ°æ® */\r\n    private updateSchemeSettings(schemeItem: DatagridSchemeModel, settings: Partial<SettingModel>) {\r\n        if (schemeItem && settings) {\r\n            const schemeContentObj = schemeItem.queryConditionString ? JSON.parse(schemeItem.queryConditionString) : {};\r\n            if (schemeContentObj) {\r\n                if ( schemeContentObj[this.localeSer.localeId]) {\r\n                    const schemeSettings = schemeContentObj[this.localeSer.localeId] || {};\r\n                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);\r\n                } else {\r\n                    schemeContentObj[this.localeSer.localeId] =  settings;\r\n                }\r\n                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°å½åæ¹æ¡éç½®æ°æ® */\r\n    updateActiveSchemeItemSettings(dgId: string, settings: Partial<SettingModel>) {\r\n        const schemeItem = this.getActiveSchemeItem(dgId);\r\n        this.updateSchemeSettings(schemeItem, settings);\r\n        if (schemeItem) {\r\n            this.schemeService.updateSchemeData(dgId, schemeItem);\r\n        }\r\n    }\r\n\r\n    /** è®¾ç½®æ´»å¨çæ¹æ¡ */\r\n    setActiveSchemeItem(dgId: string, activeItem: any) {\r\n        const schemekey = this.schemeService.getSchemeKey(dgId);\r\n        this.activeSchemeItem = this.activeSchemeItem || {};\r\n        if (activeItem) {\r\n            this.activeSchemeItem[schemekey] = cloneDeep(activeItem);\r\n        } else {\r\n            delete this.activeSchemeItem[schemekey];\r\n        }\r\n    }\r\n    /** è·åå½åæ´»å¨çæ¹æ¡ */\r\n    getActiveSchemeItem(dgId: string): DatagridSchemeModel {\r\n        const schemekey = this.schemeService.getSchemeKey(dgId);\r\n        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;\r\n    }\r\n\r\n    getSearchTypes() {\r\n        return [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n    }\r\n\r\n    showSimple(gridInstance: DatagridComponent, settings?: Partial<SettingModel>, selectedSchemeItem?: DatagridSchemeModel) {\r\n        let _columns = this.getCurrentConfigs().columns || gridInstance.columns;\r\n\r\n        const columns = this.convertColumnsToSimple(_columns);\r\n        columns[0] = [...columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild)];\r\n\r\n        const searchTypes = this.getSearchTypes();\r\n\r\n        if (this.cfr) {\r\n            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);\r\n            let simpleRef = cmpFactory.create(this.injector);\r\n            this.app.attachView(simpleRef.hostView);\r\n            simpleRef.instance.columns = columns;\r\n            simpleRef.instance.seartTypes = searchTypes;\r\n            simpleRef.instance.gridInstance = gridInstance;\r\n\r\n            simpleRef.instance.schemeSer = this.schemeService;\r\n\r\n            if (document.querySelector('#page-wrapper')) {\r\n                simpleRef.instance.top = 76;\r\n            }\r\n\r\n            simpleRef.instance.enableScheme = gridInstance.enableScheme;\r\n\r\n            if (!settings) {\r\n                settings = this.getCurrentConfigs();\r\n            }\r\n            \r\n            if (gridInstance.enableScheme) {\r\n                const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);\r\n                if (settings) {\r\n                    //  ä»é«çº§æ¨¡å¼ è½¬å° ç®æ´æ¨¡å¼æ¶ï¼ä¿å­åå§å¼\r\n                    if (!simpleRef.instance['prevSchemeItem'] && this.prevSchemeItem) {\r\n                        simpleRef.instance['prevSchemeItem'] = cloneDeep(this.prevSchemeItem);\r\n                    }\r\n\r\n                    if (selectedSchemeItem) {\r\n                        this.updateSchemeSettings(selectedSchemeItem, settings);\r\n                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;\r\n                    } else {\r\n                        if (_currentSchemtItem) {\r\n                            this.currentSchemeitem = _currentSchemtItem;\r\n                            this.prevSchemeItem = cloneDeep(_currentSchemtItem);\r\n                            simpleRef.instance.currentSchemeItem = _currentSchemtItem;\r\n                        } else {\r\n\r\n                            if (!Object.keys(settings).length) {\r\n                                settings = this.getLocalSettings(this.createConfigKey(gridInstance.id));\r\n                            }\r\n\r\n                            simpleRef.instance.currentSchemeItem = null;\r\n                            simpleRef.instance.settings = settings;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.currentSchemeitem = _currentSchemtItem;\r\n                    this.prevSchemeItem = cloneDeep(_currentSchemtItem);\r\n                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;\r\n                }\r\n            } else {\r\n                if (gridInstance.enableSetMultiHeaders) {\r\n                    simpleRef.instance.settings = this.getCurrentConfigs();\r\n                } else {\r\n                    simpleRef.instance.settings = settings;\r\n                }\r\n            }\r\n\r\n\r\n            const zIndex = this.commonUtils.getFloatingLayerIndex();\r\n            simpleRef.location.nativeElement.style.zIndex = '' + zIndex;\r\n\r\n            document.body.appendChild(simpleRef.location.nativeElement);\r\n\r\n            simpleRef.instance.canceld.subscribe( () =>{\r\n                this.restoreScheme(gridInstance);\r\n            });\r\n\r\n            simpleRef.instance.closed.pipe(\r\n                switchMap( () => {\r\n                    if (simpleRef) {\r\n                        simpleRef.instance.container.nativeElement.style.right = '-500px';\r\n                        return timer(500);\r\n                    }\r\n                })\r\n            ).subscribe(() => {\r\n                simpleRef.location.nativeElement.remove();\r\n                simpleRef.destroy();\r\n                simpleRef = null;\r\n                if (this.schemeListSubscription) {\r\n                    this.schemeListSubscription.unsubscribe();\r\n                }\r\n\r\n                const _activeSchemtItem = this.getActiveSchemeItem(gridInstance.id);\r\n                if ((!this.currentSchemeitem || (_activeSchemtItem && _activeSchemtItem.id !== this.currentSchemeitem.id)) && (_activeSchemtItem &&_activeSchemtItem.queryConditionString)) {\r\n                    const _currentSettings = JSON.parse(_activeSchemtItem.queryConditionString)[this.localeSer.localeId];\r\n                    if (_currentSettings) {\r\n                        columns[0].forEach(f => {\r\n                            f.visible = _currentSettings.viewColumns.indexOf(f.field) > -1;\r\n                        });\r\n                    }\r\n                }      \r\n            });\r\n\r\n            // æå¼é«çº§è®¾ç½®çªå£\r\n            simpleRef.instance.advanced.subscribe(({ viewFields, settings, columns }) => {\r\n                // if (viewFields && viewFields.length){\r\n                //     this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, {viewColumns: viewFields});\r\n                // }\r\n                this.setCurrentConfigs({...settings, columns});\r\n                this.prevSchemeItem = simpleRef.instance['prevSchemeItem'];\r\n                this['SCHEME_DEFAULT_TITLE'] = simpleRef.instance.defaultSchemeName;\r\n                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);\r\n            });\r\n\r\n            simpleRef.instance.submit.subscribe( (e: any) => {\r\n                this.applySettings(e, gridInstance);\r\n            });\r\n\r\n            // å¤è¡¨åè®¾ç½®\r\n            simpleRef.instance.submitForGroupHeader.subscribe((e: any) => {\r\n                this.applySettings(e, gridInstance);\r\n            });\r\n\r\n            // simpleRef.instance.fieldsChange.subscribe((visibleFields: string[]) => {\r\n            //     this.updateActiveSchemeItemSettings(gridInstance.id, {viewColumns: visibleFields})\r\n            // });\r\n\r\n            // æå¼æ°å¢æ¹æ¡çªå£\r\n            simpleRef.instance.addNewScheme.subscribe((e: { type: 'new' | 'saveas'}) => {\r\n                this.showNewSchemeDialog(gridInstance, e, simpleRef.instance.collectSettings(), {\r\n                    ok: (t: any) => {\r\n                        // æ´æ¢ä¸ºæ°çæ¹æ¡\r\n                        simpleRef.instance.onSchemeItemClick(null, t);\r\n\r\n                        this.saveUserConfig\r\n                    }\r\n                });\r\n            });\r\n\r\n            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];\r\n\r\n            // æå¼æ¹æ¡ç®¡çåè¡¨çªå£\r\n            simpleRef.instance.showSchemeList.subscribe(() => {\r\n                this.getSchemeList(gridInstance.id).pipe(\r\n                    switchMap((t) => {\r\n                        return this.schemeService.checkAuthority().pipe(\r\n                            map((auth: SchemeAuthModel) => {\r\n                                return {\r\n                                    list: t,\r\n                                    ...auth\r\n                                }\r\n                            })\r\n                        )\r\n                    })\r\n                ).subscribe((t: any) => {\r\n                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);\r\n                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t, simpleRef);\r\n                });\r\n            });\r\n\r\n            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((list: any) => {\r\n                simpleRef.instance.schemeList = list;\r\n\r\n                if (!list || !list.length) {\r\n                    this.setActiveSchemeItem(gridInstance.id, null);\r\n                    return;\r\n                }\r\n\r\n                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);\r\n                if (_activeSchemeItem) {\r\n                    let hasActiveItem = list.find(n => n.id === _activeSchemeItem.id);\r\n                    if (!hasActiveItem) {\r\n                        hasActiveItem = this.getDefaultScheme(list); // è·åè®¾ç½®ä¸ºå½åæ¹æ¡çé¡¹\r\n                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);\r\n                    }\r\n\r\n                    simpleRef.instance.currentSchemeItem = hasActiveItem;\r\n                }\r\n            });\r\n\r\n            // åæ¢æ¹æ¡\r\n            simpleRef.instance.schemeChanged.subscribe((t: any) => {\r\n                this.currentSchemeitem = t;\r\n                this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));\r\n            })\r\n\r\n            simpleRef.hostView.detectChanges();\r\n            simpleRef.instance.cd.detectChanges();\r\n            simpleRef.instance.container.nativeElement.style.right = '0px';\r\n\r\n            return simpleRef;\r\n        }\r\n    }\r\n\r\n\r\n    show(gridInstance: DatagridComponent, opts?: ModalOptions) {\r\n        this.registerGridInstance(gridInstance);\r\n\r\n        if (gridInstance.enableSimpleMode) {\r\n            this.schemeService.createSchemeTaskID();\r\n            return this.showSimple(gridInstance);\r\n        } else {\r\n            return this.showAdvanced(gridInstance, opts);\r\n        }\r\n    }\r\n\r\n    private restoreScheme(gridInstance) {\r\n        if (gridInstance.enableScheme) {\r\n            this.setActiveSchemeItem(gridInstance.id, this.prevSchemeItem);\r\n            if (!this.prevSchemeItem) {\r\n                this.setCurrentConfigs(null);    \r\n            }\r\n        } else {\r\n            this.setCurrentConfigs(null);\r\n        }\r\n    }\r\n\r\n    private showAdvanced(gridInstance: DatagridComponent, opts?: ModalOptions, selectedSchemeItem?: DatagridSchemeModel) {\r\n        let _editColSortInfo = true;\r\n        const editColSortInfo = this.canSetColumnSort(gridInstance);\r\n        if (editColSortInfo !== true) {\r\n            _editColSortInfo = false;\r\n        }\r\n\r\n        // å¤æ­æ¯å¦ä¸ºå¤è¡¨å¤´\r\n        const showSetColumnsTab = !gridInstance.isMultiHeader() || (gridInstance.isMultiHeader() && gridInstance.enableSetMultiHeaders);\r\n        const getActiveTabIndex = () => {\r\n            if (showSetColumnsTab) {\r\n                return 1;\r\n            } else {\r\n                if (_editColSortInfo) {\r\n                    return 2;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            }\r\n        };\r\n        const activeTabIndex = getActiveTabIndex();\r\n\r\n        if (activeTabIndex === -1) {\r\n            this.messager.warning(this.notShowDialog);\r\n            return;\r\n        }\r\n\r\n        const columns = this.convertColumnsToSimple(this.getCurrentConfigs().columns || gridInstance.columns);\r\n\r\n        // è·åå½åæ¹æ¡ä¸­å½åè¯­è¨çéç½®æ°æ®\r\n        let currentSettings: SettingModel = this.getCurrentConfigs();\r\n        const multiHeaderTree = currentSettings && currentSettings.multiHeaders? currentSettings.multiHeaders.treeData : null;\r\n        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {\r\n            const _currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];\r\n            currentSettings = Object.assign(_currentSettings || {}, currentSettings || {});\r\n            \r\n            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {\r\n                columns[0] = columns[0].map((col) => {\r\n                    const fcol = currentSettings.columnFormat.find(n => n.field === col.field);\r\n                    if (fcol) {\r\n                        col = Object.assign(col, fcol);\r\n                    }\r\n                    return col;\r\n                });\r\n            }\r\n        }\r\n        \r\n        \r\n        if (!gridInstance.enableSetMultiHeaders && currentSettings.viewColumns && currentSettings.viewColumns.length) {\r\n            columns[0].forEach(f => {\r\n                f.visible = currentSettings.viewColumns.indexOf(f.field) > -1;\r\n            });\r\n        }\r\n        \r\n        columns[0] = columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild);\r\n        \r\n        let sortFields = getDataFieldsForMultiHeaders(cloneDeep(columns)).filter( (n: any) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable);\r\n        \r\n        if (gridInstance.enableSetMultiHeaders && currentSettings && currentSettings.multiHeaders ) {\r\n            sortFields = getDataFieldsForMultiHeaders(currentSettings.multiHeaders.viewCols).filter( (n: any) => n.field.indexOf('farris-datagrid-column_') == -1 && n.sortable);\r\n        }\r\n\r\n        // const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);\r\n        // const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);\r\n        // this.checkViewTreeNodes(viewColumnsTreeData);\r\n\r\n        let modalRef = null;\r\n\r\n        // const okText = this.localeSer.getValue('datagrid.settings.ok') || 'ç¡®å®';\r\n        // const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || 'åæ¶';\r\n        // const resetText =  this.localeSer.getValue('datagrid.settings.reset') || 'éç½®';\r\n\r\n        const defaultOpts = {\r\n            width: 760, height: 560, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                columns,\r\n                sortTreeData: sortFields,\r\n                // viewTreeData: viewColumnsTreeData,\r\n                gridInstance,\r\n                canSetColumnSort: _editColSortInfo,\r\n                canSetColumnVisible: showSetColumnsTab,\r\n                activeTabIndex,\r\n                schemeInfo: currentSettings,\r\n                enableMultipleHeaders: gridInstance.enableSetMultiHeaders,\r\n                multiHeaders: {\r\n                    columns,\r\n                    treeData: multiHeaderTree\r\n                },\r\n                schemeName: selectedSchemeItem? selectedSchemeItem['_title_'] : this['SCHEME_DEFAULT_TITLE']\r\n            },\r\n            showButtons: false,\r\n            closed: (isCloseBtn, opts) => {\r\n                const {event} = opts;\r\n                if (event && event.code === 'Escape') {\r\n                    this.restoreScheme(gridInstance);\r\n                }\r\n            }\r\n        };\r\n        const modalOpts = Object.assign(defaultOpts, opts || {});\r\n\r\n        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);\r\n        const instance = modalRef.content as DatagridSettingsComponent;\r\n        instance.enableReset = true;\r\n        instance.modalRef = modalRef;\r\n        instance.canSetColumnSort = _editColSortInfo;\r\n        instance.canSetColumnVisible = showSetColumnsTab;\r\n\r\n        instance.submitHandle.subscribe((e) => {\r\n            this.applySettings(e, gridInstance, {modalRef, currentScheme: selectedSchemeItem});\r\n        });\r\n\r\n        instance.cancelHandle.subscribe((e) => {\r\n            modalRef.close();\r\n            this.restoreScheme(gridInstance);\r\n        });\r\n\r\n        // åæ¢å°ä¾§è¾¹æ ç®æ´æ¨¡å¼\r\n        instance.concise.subscribe((e) => {\r\n            modalRef.close();\r\n            const settings = modalRef.content;\r\n            const { sortInfo, viewColumns, columnFormat, groupField, multiHeaders } = settings;\r\n            this.setCurrentConfigs({ sortInfo, viewColumns, columnFormat, groupField, multiHeaders });\r\n            this.showSimple(gridInstance, \r\n                { sortInfo, viewColumns, columnFormat, groupField, multiHeaders }, \r\n                cloneDeep(selectedSchemeItem));\r\n        });\r\n\r\n        const modalContainer = modalRef.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n\r\n        return modalRef;\r\n    }\r\n\r\n\r\n\r\n    private canSetColumnSort(gridInstance: DatagridComponent) {\r\n        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {\r\n            return true;\r\n        } else {\r\n            if (!this.hasEnableSortColumns(gridInstance)) {\r\n                return this.columnsSortableMsg;\r\n            } else if (!gridInstance.multiSort) {\r\n                return this.multiSortMsg;\r\n            }\r\n        }\r\n    }\r\n\r\n    private hasEnableSortColumns(gridInstance: DatagridComponent) {\r\n        const sortColumnsCount = gridInstance.flatColumns.reduce((c, r) => {\r\n            if (r.sortable) {\r\n                return c + 1;\r\n            }\r\n            return c;\r\n        }, 0);\r\n\r\n        return sortColumnsCount > 0;\r\n    }\r\n\r\n\r\n    // private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {\r\n    //     const childCols = [];\r\n    //     let _count = colStartIndex;\r\n    //     if (!cols[rowIndex]) {\r\n    //         return  [];\r\n    //     }\r\n\r\n    //     cols[rowIndex].slice().forEach(element => {\r\n    //         _count = _count + element.colspan;\r\n    //         if ( _count <= colCount ) {\r\n    //             childCols.push(element);\r\n    //         }\r\n    //     });\r\n\r\n    //     cols[rowIndex].splice(0, childCols.length);\r\n\r\n    //     return childCols.map((c, i) => {\r\n    //         let n: any = {\r\n    //             data: c,\r\n    //             selectable: forSort ? !!c.sortable : true\r\n    //         };\r\n\r\n    //         if (c.colspan && c.colspan > 1) {\r\n    //             n = {\r\n    //                 data: c,\r\n    //                 selectable: false,\r\n    //                 expanded: true,\r\n    //                 children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)\r\n    //             };\r\n    //         }\r\n    //         return n;\r\n    //     });\r\n    // }\r\n    // convertColumns2TreeData(cols: DataColumn[][], forSort = false) {\r\n\r\n\r\n\r\n    //     const columns = cols.map((c: any) => {\r\n    //         const aa = c.map((_) => {\r\n    //             if (_.field.indexOf('farris-datagrid-column_') == -1) {\r\n    //                 _.colspan = _.colspan || 1;\r\n    //                 return _;\r\n    //             }\r\n    //             return null;\r\n    //         });\r\n    //         return aa.filter(n => n);\r\n    //     });\r\n    //     if (columns.length === 1) {\r\n    //         return columns[0].map(c => {\r\n    //             return {\r\n    //                 data: c,\r\n    //                 selectable: forSort ? !!c.sortable : true\r\n    //             };\r\n    //         });\r\n    //     } else {\r\n    //         return columns[0].map((c, i) => {\r\n    //             if (c.colspan && c.colspan > 1) {\r\n    //                 return {\r\n    //                     data: c,\r\n    //                     selectable: false,\r\n    //                     expanded: true,\r\n    //                     children: this.getChilds(columns, 1, 0, c.colspan, forSort)\r\n    //                 };\r\n    //             } else {\r\n    //                 return {\r\n    //                     data: c,\r\n    //                     selectable: forSort ? !!c.sortable : true\r\n    //                 };\r\n    //             }\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    // private checkViewTreeNodes(treeNodes: TreeNode[]) {\r\n    //     treeNodes.forEach((tn: TreeNode) => {\r\n    //         if (!tn.children || !tn.children.length) {\r\n    //             tn.selectable = true;\r\n    //         } else {\r\n    //             tn.selectable = false;\r\n    //             this.checkViewTreeNodes(tn.children);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    private _convertColumnsToSimple(gridInstance: any) {\r\n\r\n        let cols = gridInstance.columns;\r\n        // éç½®åé¡ºåºä¸ºæåè®¾è®¡æ¶çé¡ºåº\r\n        const gridOpts = gridInstance.dfs._state.initialOptions;\r\n        if (gridOpts.columnFields) {\r\n            let desginCols = gridOpts.columnFields;\r\n            const newColumns = [];\r\n\r\n            desginCols.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            cols = [newColumns];\r\n        }\r\n\r\n        return cols;\r\n    }\r\n\r\n    convertColumnsToSimple(cols: any) {\r\n        if (!Array.isArray(cols[0])) {\r\n            cols = [cols];\r\n        }\r\n\r\n        return cols.map( (_cols: DataColumn[]) => {\r\n            return _cols.map( (c: DataColumn) => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    return {\r\n                        field: c.field,\r\n                        title: c.title,\r\n                        colspan: c.colspan,\r\n                        rowspan: c.rowspan,\r\n                        sortable: c.sortable,\r\n                        order: c.order,\r\n                        halign: c.halign || 'left',\r\n                        align: c.align || 'left',\r\n                        visible: c.visible,\r\n                        allowGrouping: c.allowGrouping,\r\n                        groupFooter: c.groupFooter,\r\n                        footer: c.footer,\r\n                        width: c.width || 100,\r\n                        dataType: c.dataType || 'string',\r\n                        fixed: c.fixed || 'UNFIXED'\r\n                    };\r\n                }\r\n            }).filter(n => n);\r\n        });\r\n    }\r\n\r\n    private resetGridView(gridInstance: any) {\r\n        if (!gridInstance) {\r\n            return;\r\n        }\r\n        const dfs = gridInstance.dfs;\r\n        if (dfs) {\r\n            const options = dfs['_state'].initialOptions;\r\n\r\n            if (options.sort) {\r\n                if (options.sort.sortName) {\r\n                    gridInstance.sortName = options.sort.sortName;\r\n                }\r\n                if (options.sort.sortOrder) {\r\n                    gridInstance.sortOrder = options.sort.sortOrder;\r\n                }\r\n            }\r\n\r\n            gridInstance.groupField = options.groupField || '';\r\n            // TODO: è¿éè¦ä¿®æ­£é»è®¤åçæ¾ç¤ºé¡ºåº\r\n            if (options.columnFields && options.columnFields.length) {\r\n\r\n                const newColumns = [];\r\n                options.columnFields.forEach(c => {\r\n                    const col = gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = c.footer;\r\n                        col.groupFooter = c.groupFooter;\r\n                        newColumns.push(col);\r\n                    }\r\n                });\r\n\r\n                gridInstance.columns[0] = newColumns;\r\n            }\r\n\r\n            // gridInstance['checkOptions']();\r\n            gridInstance['columnsChanged']();\r\n        }\r\n    }\r\n\r\n \r\n\r\n    private updateGridView(modalRef, gridInstance, btn = null, _scheme = null) {\r\n        const settings = modalRef.content;\r\n\r\n        if (settings) {\r\n            const { sortInfo, viewColumns, columnFormat, groupField, expandGroupRows, multiHeaders } = settings;\r\n            const _colformats = columnFormat ? this.convertColumnsToSimple(columnFormat)[0] : [];\r\n            \r\n            this.saving = true;\r\n            \r\n            let _groupField = '';\r\n            if (gridInstance.groupRows && groupField && groupField.length) {\r\n                if (typeof groupField === 'string') {\r\n                    _groupField = groupField;\r\n                } else if(Array.isArray(groupField)) {\r\n                    _groupField = groupField.join(',');\r\n                }\r\n\r\n            }\r\n\r\n            let _sortInfo = sortInfo;\r\n            // å½å¤è¡¨å¤´éè¦æ¸çæåºå­æ®µä¸åç»å­æ®µï¼ä¿è¯è¿äºå­æ®µå¿é¡»å¨è¡¨å¤´ä¸­\r\n            if (gridInstance.enableSetMultiHeaders && multiHeaders) {\r\n                if (_groupField) {\r\n                    _groupField = cleanGroupFields(multiHeaders.viewCols, _groupField.split(','));\r\n                }\r\n\r\n                if (sortInfo && sortInfo.sortName && sortInfo.sortName.length) {\r\n                    _sortInfo = cleanSortFields(multiHeaders.viewCols, sortInfo);\r\n                }\r\n            }\r\n\r\n            \r\n            const saveData = { sortInfo: _sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats, expandGroupRows: expandGroupRows, multiHeaders };\r\n            \r\n            \r\n            const refreshGrid = () => {\r\n                if (gridInstance.groupRows) {\r\n                    gridInstance.expandGroupRows = expandGroupRows;\r\n                    gridInstance.groupField = _groupField;\r\n                }\r\n\r\n                if (gridInstance.enableSetMultiHeaders) {\r\n                    // è®¾ç½®è¡¨å¤´\r\n                    refreshGridColumns(gridInstance, multiHeaders.viewCols || []);\r\n                } else {\r\n                    if (viewColumns && viewColumns.length) {\r\n                        gridInstance.columns = gridInstance.columns.map(cols => {\r\n                            this.updateColumnFormat(cols, columnFormat, gridInstance);\r\n                            return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                gridInstance.columnsChanged(true);\r\n                if (sortInfo && Object.keys(sortInfo).length) {\r\n                    const { sortName, sortOrder } = sortInfo;\r\n                    if (sortName && sortName.length) {\r\n                        gridInstance.sort(sortName.join(','), sortOrder.join(','));\r\n                    } else {\r\n                        gridInstance.clearSort();\r\n                    }\r\n                } else {\r\n                    gridInstance.clearSort();\r\n                }\r\n            }\r\n\r\n            const saveCurrent = () => {\r\n                this.setUserConfig(gridInstance.id, saveData).subscribe( () => {\r\n                    if (btn) {\r\n                        btn.disabled = false;\r\n                    }\r\n                    this.saving = false;\r\n                    refreshGrid();\r\n\r\n                    this.setActiveSchemeItem(gridInstance.id, _scheme);\r\n                    this.prevSchemeItem = _scheme;\r\n                    this.updateActiveSchemeItemSettings(gridInstance.id, saveData);\r\n                    this.setCurrentConfigs(saveData);\r\n                    modalRef.close();\r\n                });\r\n            }\r\n\r\n\r\n            if (gridInstance.showConfirmWhenSchemeChanged && gridInstance.enableScheme) {\r\n                const languageRes = this.localeSer.getValue('datagrid-scheme.schemeChanged')\r\n                const _changed = this.schemeService.isSchemeChanged(saveData, gridInstance.enableSetMultiHeaders);\r\n                if (_changed) {\r\n                    const msgDlg = this.messager.question2(languageRes.title, [\r\n                        {\r\n                            text: languageRes.cancel,\r\n                            cls: 'btn btn-light',\r\n                            handle: () => {\r\n                                this.saving = false;\r\n                                modalRef.close();\r\n                                msgDlg.close();\r\n                                this.restoreScheme(gridInstance);\r\n                            }\r\n                        },\r\n                        {\r\n                            text: languageRes.no,\r\n                            cls: 'btn btn-secondary',\r\n                            handle: () => {\r\n                                // ä¿å­å°å½åæ¹æ¡\r\n                                msgDlg.close();\r\n                                saveCurrent();\r\n                            }\r\n                        },\r\n                        {\r\n                            text: languageRes.yes,\r\n                            cls: 'btn btn-primary',\r\n                            handle: () => {\r\n                                // å¦å­æ°æ¹æ¡\r\n                                this.showNewSchemeDialog(gridInstance, {type: 'saveas'}, saveData, {\r\n                                    ok: (t) => {\r\n                                        this.saving = false;\r\n                                        modalRef.close();\r\n                                        this.currentSchemeitem = t;\r\n                                        this.setActiveSchemeItem(gridInstance.id, cloneDeep(t));\r\n                                        refreshGrid();\r\n                                    },\r\n                                    cancel: () => {\r\n                                        this.saving = false;\r\n                                        if (btn) {\r\n                                            btn.disabled = false;\r\n                                        }\r\n                                    }\r\n                                });\r\n                                msgDlg.close();\r\n                            }\r\n                        },\r\n                    ]);  // , languageRes.tips å­æ é¢\r\n                } else {\r\n                    if (this.currentSchemeitem && this.prevSchemeItem && this.currentSchemeitem.id === this.prevSchemeItem.id) {\r\n                        this.saving = false;\r\n                        modalRef.close();        \r\n                        refreshGrid();\r\n                    } else {\r\n                        saveCurrent();\r\n                    }\r\n                }\r\n            } else {\r\n                saveCurrent();\r\n            }\r\n            \r\n        } else {\r\n            modalRef.close();\r\n        }\r\n    }\r\n\r\n\r\n    newVisibleOrderColumns(cols: any, viewColumns: any, columnFormat: any, gridInstance: any) {\r\n        const hideColumns = [];\r\n        cols.forEach((element, index) => {\r\n            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {\r\n                viewColumns.push(element.field);\r\n            } else {\r\n                element.visible = viewColumns.includes(element.field);\r\n                if (!element.visible) {\r\n                    hideColumns.push(element);\r\n                }\r\n            }\r\n        });\r\n\r\n        // æ¸çä¸å­å¨çå\r\n        let newCols = viewColumns.map( field => {\r\n            return cols.find(c => c.field === field);\r\n        }).filter(n => n);\r\n\r\n        if (hideColumns.length) {\r\n            newCols = newCols.concat(hideColumns);\r\n        }\r\n\r\n        return newCols.filter(c => c && c.field && c.field !== '_datagrid-setting-control_' );\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦ä¸ºæ°å¢å çå­æ®µ\r\n     * æ°å¢çå­æ®µï¼éè¦å¨åè¡¨ä¸­å±ç¤ºåºæ¥ï¼å¹¶ä¿å­å°ä¸ªæ§åè®¾ç½®ä¸­\r\n     */\r\n    private isNewAddColumn(field: any, columns: any) {\r\n        columns = columns || [];\r\n        return !columns.find(c => c.field === field);\r\n    }\r\n\r\n\r\n    updateColumnFormat(cols: any[], columnFormat: any[], gridInstance) {\r\n        if (columnFormat && columnFormat.length) {\r\n            cols.forEach(col => {\r\n                const formatCol = columnFormat.find(f=> f.field === col.field);\r\n                if (formatCol) {\r\n                    col.width = formatCol.width;\r\n                    col.halign = formatCol.halign || 'left';\r\n                    col.align = formatCol.align || 'left';\r\n                    col.fixed = formatCol.fixed === 'UNFIXED'? '': formatCol.fixed;\r\n                    col.title = formatCol.title;\r\n\r\n                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {\r\n                        if (!col.groupFooter) {\r\n                            col.groupFooter = formatCol.groupFooter;\r\n                        }\r\n\r\n                        if (col.groupFooter && col.groupFooter.options) {\r\n                            if (!formatCol.groupFooter.options) {\r\n                                formatCol.groupFooter.options = {};\r\n                            }\r\n                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';\r\n                            col.groupFooter.options.calculationType =\r\n                                formatCol.groupFooter.options.calculationType !== undefined &&\r\n                                formatCol.groupFooter.options.calculationType !== null ?\r\n                                parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n\r\n                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {\r\n\r\n                        if (!col.footer) {\r\n                            col.footer = formatCol.footer;\r\n                        }\r\n\r\n                        if (col.footer && col.footer.options) {\r\n                            if (!formatCol.footer.options) {\r\n                                formatCol.footer.options = {};\r\n                            }\r\n                            col.footer.options.text = formatCol.footer.options.text || '';\r\n                            col.footer.options.calculationType =\r\n                                formatCol.footer.options.calculationType !== undefined &&\r\n                                formatCol.footer.options.calculationType !== null ?\r\n                                parseInt(formatCol.footer.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // åå»ºå¯ä¸key, ç±uri + gridId ç»æï¼å¹¶æ··æ·\r\n    private createConfigKey(gridId: string) {\r\n        const grid = this.getGridInstance(gridId);\r\n        if (grid) {\r\n            return grid.dgs.createConfigKey(gridId);\r\n        } else {\r\n            this.writeDebugMsg('DatagridSettingService: Can not find the grid instance.');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private getCurrentUserSettings(gridId: string) {\r\n        const gridInstance = this.getGridInstance(gridId);\r\n        const config = {sortInfo: {}, viewColumns: [], groupField: '', columnFormat: []};\r\n\r\n        if (gridInstance) {\r\n            const { sortName, sortOrder, columns} = gridInstance;\r\n            if (sortName) {\r\n                const sortInfo = {\r\n                    sortName: sortName.split(','),\r\n                    sortOrder: sortOrder.split(',')\r\n                };\r\n\r\n                config.sortInfo = sortInfo;\r\n            }\r\n\r\n            const viewColumns = columns[0].filter(n => n.visible || n.visible === undefined).map(n => n.field);\r\n            config.viewColumns = viewColumns;\r\n            config.columnFormat = this.convertColumnsToSimple(this._convertColumnsToSimple(gridInstance))[0];\r\n\r\n            if (gridInstance.groupRows) {\r\n                config.groupField = gridInstance.groupField;\r\n            }\r\n        }\r\n        return config;\r\n    }\r\n\r\n\r\n    saveUserConfig(gridId: string) {\r\n        const config = this.getCurrentUserSettings(gridId);\r\n        return this.setUserConfig(gridId, config);\r\n    }\r\n\r\n    setUserConfig(gridId: string, config: any ): Observable<any> {\r\n        const gridIns = this.getGridInstance(gridId);\r\n        const key = this.createConfigKey(gridId);\r\n        const LOCALEID = this.localeSer.localeId;\r\n        const currentConfig = localStorage.getItem(key);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (config) {\r\n            if (_config) {\r\n                _config[LOCALEID] = config;\r\n            }\r\n\r\n            if (gridIns && gridIns.enableSetMultiHeaders) {\r\n                _config['isMultiHeader'] = true;\r\n            }\r\n\r\n            localStorage.setItem(key, JSON.stringify(_config));\r\n        } else {\r\n            localStorage.removeItem(key);\r\n        }\r\n\r\n\r\n        if (this.httpRestService) {\r\n            if (gridIns && gridIns.enableScheme) {\r\n                const activeScheme = this.getActiveSchemeItem(gridId);\r\n                if (activeScheme) {\r\n                    this.updateSchemeSettings(activeScheme, config);\r\n                    if (activeScheme.type === 'private') {\r\n                        return this.schemeService.saveScheme(activeScheme, gridId, true, gridIns.enableSetMultiHeaders);\r\n                    } else {\r\n                        return this.schemeService.checkAuthority().pipe(\r\n                            switchMap((t: SchemeAuthModel) => {\r\n                                if (t.success) {\r\n                                    const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;\r\n                                    if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {\r\n                                        return this.schemeService.saveScheme(activeScheme, gridId, true, gridIns.enableSetMultiHeaders);\r\n                                    }\r\n                                }\r\n\r\n                                return of(true);\r\n                            }),\r\n                        )\r\n                    }\r\n                } else {\r\n                    // å¦ä¸ºç³»ç»é¢å¶æ¶ï¼ææ æ¹æ¡å¤ç\r\n                    return this._saveUserConfig(key,  config ? _config :  '');\r\n                    // return of(true);\r\n                }\r\n            }\r\n\r\n            // ä¿å­è³æ°æ®åº\r\n            return this._saveUserConfig(key,  config ? _config :  '');\r\n        }\r\n\r\n        return of(true);\r\n    }\r\n\r\n    getUserConfig(key, isMultiHeader = false): Observable<any> {\r\n        if (this.httpRestService) {\r\n            return this._getUserConfig(key, isMultiHeader);\r\n        } else {\r\n            return of(this.getLocalSettings(key, isMultiHeader));\r\n        }\r\n    }\r\n\r\n\r\n    getLocalSettings(key: string, isMultiHeader = false) {\r\n        const config = localStorage.getItem(key);\r\n        if (config) {\r\n            const con = JSON.parse(config);\r\n\r\n            if (isMultiHeader && !con['isMultiHeader']) {\r\n                return null;\r\n            } else {\r\n                if (con['isMultiHeader']) {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            if (con[this.localeSer.localeId]) {\r\n                return con[this.localeSer.localeId];\r\n            } else {\r\n                if (Object.keys(con).indexOf('viewColumns') > -1) {\r\n                    return con;\r\n                }\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    private getDefaultScheme(schemeList: Array<DatagridSchemeModel>) {\r\n        // 0ãè¿æ»¤åºå½åè¯­è¨çæ¹æ¡åè¡¨\r\n        // 1ãæä¸ªäººé»è®¤çè¿åä¸ªäººé»è®¤æ¹æ¡\r\n        // 2ãæ²¡æä¸ªäººé»è®¤æ¹æ¡çï¼è¿åå¬å±æ¹æ¡ç¬¬1ä¸ª\r\n        // 3ãæ²¡æå¬å±æ¹æ¡ï¼è¿åç»ç»æ¹æ¡ç¬¬1ä¸ª\r\n        // 4ãæ²¡æç»ç»æ¹æ¡ç, è¿åä¸ªäººæ¹æ¡ç¬¬1ä¸ª\r\n        // 5ãæ²¡æä¸ªäººæ¹æ¡çï¼è¿åç³»ç»é¢å¶ï¼å³è¡¨åè®¾è®¡æ¶çæ ¼å¼\r\n        schemeList = schemeList.filter(n => {\r\n            return JSON.parse(n.name)[this.localeSer.localeId]\r\n        });\r\n        \r\n        let defaultScheme = null;\r\n        if (!schemeList || !schemeList.length) {\r\n            return defaultScheme;\r\n        } else {\r\n            defaultScheme = schemeList.find(n => n.isDefault);\r\n            if (!defaultScheme) {\r\n                let publicSchemes = schemeList.filter(n => n.type === 'public');\r\n\r\n                if (!publicSchemes.length) {\r\n                    publicSchemes = schemeList.filter(n => n.type === 'org');\r\n                }\r\n\r\n                if (publicSchemes.length) {\r\n                    defaultScheme = publicSchemes[0];\r\n                } else {\r\n                    defaultScheme = schemeList[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        return defaultScheme;\r\n    }\r\n\r\n\r\n    getSettings(gridId: string) {\r\n        const key = this.createConfigKey(gridId);\r\n        const gridIns = this.getGridInstance(gridId);\r\n\r\n        let schemeList$ = of([]);\r\n        if (gridIns && gridIns.enableScheme) {\r\n            schemeList$ = this.getSchemeList(gridId);\r\n        }\r\n\r\n        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(\r\n            map(([schemeList, userSetting, supportedLanguages]) => {\r\n                schemeList = schemeList || [];\r\n                this.languages = supportedLanguages;\r\n                if (!schemeList.length) {\r\n                    return userSetting;\r\n                } else {\r\n                    // ç¼å­æ¹æ¡åè¡¨\r\n                    this.setSchemeList(schemeList, gridId);\r\n                    // æ¥æ¾é»è®¤æ¹æ¡\r\n                    const defaultScheme: DatagridSchemeModel = this.getDefaultScheme(schemeList);\r\n                    if (!defaultScheme) {\r\n                        return userSetting;\r\n                    } else {\r\n                        this.setActiveSchemeItem(gridId, defaultScheme);\r\n                        let userSettings = null;\r\n                        if (defaultScheme.queryConditionString) {\r\n                            userSettings = JSON.parse(defaultScheme.queryConditionString);\r\n                        }\r\n                        if (userSettings) {\r\n                            const localeId = this.localeSer.localeId;\r\n                            if (userSettings[localeId]) {\r\n                                localStorage.setItem(key, JSON.stringify(userSettings));\r\n                                return userSettings[localeId];\r\n                            } else {\r\n                                userSettings[localeId] = null;\r\n                                localStorage.setItem(key, JSON.stringify(userSettings));\r\n                                return null;\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    private _saveUserConfig(key, config) {\r\n        try {\r\n            const userConfigSetting = {\r\n                configkey1: key,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: config ? JSON.stringify(config) :  ''\r\n            };\r\n\r\n            return this.httpRestService.saveUserSettings(userConfigSetting);\r\n        } catch (e) {\r\n            this.writeDebugMsg(e, 'error');\r\n        }\r\n    }\r\n\r\n    resetUserConfig(gridInstance, modalRef) {\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).pipe(\r\n            switchMap( (t: boolean) => {\r\n                if (t) {\r\n                    return this.setUserConfig(gridInstance.id, '');\r\n                }\r\n                return of(t);\r\n            })\r\n        ).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.resetGridView(gridInstance);\r\n                modalRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getUserConfig(key, isMultiHeader = false) {\r\n        try {\r\n            return this.httpRestService.getUserSettings(key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs && ucs.textValue) {\r\n                        let c = JSON.parse(ucs.textValue);\r\n                        if (c) {\r\n                            if (isMultiHeader && !c['isMultiHeader']) {\r\n                                return null;\r\n                            } else {\r\n                                if (c['isMultiHeader']) {\r\n                                    return null;\r\n                                }\r\n                            }\r\n\r\n                            if (c[this.localeSer.localeId]) {\r\n                                localStorage.setItem(key, ucs.textValue);\r\n                                return c[this.localeSer.localeId];\r\n                            } else {\r\n                                c[this.localeSer.localeId] = null;\r\n                                localStorage.setItem(key, JSON.stringify(c));\r\n                                return null;\r\n                            }\r\n\r\n                        }\r\n                        return null;\r\n                    }\r\n                    return null;\r\n                })\r\n            );\r\n        } catch (e) {\r\n            if (this.debugSer) {\r\n                this.debugSer.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private buildSubmitData(gridId: string, settings = null) {\r\n        const LOCALEID = this.localeSer.localeId;\r\n        if (!settings) {\r\n            settings = this.getCurrentUserSettings(gridId);\r\n        }\r\n        const localeKey = this.createConfigKey(gridId);\r\n        const currentConfig = localStorage.getItem(localeKey);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (_config) {\r\n            _config[LOCALEID] = settings;\r\n        }\r\n\r\n        return _config;\r\n    }\r\n\r\n// ----------------------------------------------------------------------------------------------- \\\\\r\n\r\n    private showSchemeListDialog(gridInstance: any, schemeList: any, authInfo: SchemeAuthModel, simpleRef: any) {\r\n        const modalOpts = {\r\n            width: 760, height: 577, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                items: (schemeList || []).filter(n => {\r\n                    return JSON.parse(n.name)[this.localeSer.localeId]\r\n                }),\r\n                removeItem: authInfo.success,\r\n                currentUserId: authInfo.currentUserId,\r\n                currentSchemeId: this.currentSchemeitem ? this.currentSchemeitem.id: ''\r\n            },\r\n            showButtons: false\r\n        };\r\n\r\n        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);\r\n        // schemeListDlg.dialog.location.nativeElement.style.zIndex = 2031;\r\n\r\n        const instance = schemeListDlg.content as SchemeListComponent;\r\n        instance.closeModal.subscribe( () => {\r\n            schemeListDlg.close();\r\n        });\r\n\r\n        instance.submitModal.subscribe((t: any) => {\r\n            this.schemeService.updateScheme(t, gridInstance.id, gridInstance.enableSetMultiHeaders).subscribe((e: any) => {\r\n                if(e === false) {\r\n                    schemeListDlg.close();\r\n                    return;\r\n                }\r\n                const msg = 'åè®¾ç½®æ¹æ¡ä¿å­æåã';\r\n                if (this.notifyService) {\r\n                    this.notifyService.success(msg);\r\n                } else {\r\n                    this.messager.success(msg);\r\n                }\r\n\r\n                if(t.defaultId) {\r\n                    schemeList.forEach(n => {\r\n                        n.isDefault = false;\r\n                        if (n.id === t.defaultId) {\r\n                            n.isDefault = true;\r\n                            // this.setActiveSchemeItem(gridInstance.id, n);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                let newSchemeList = schemeList;\r\n                if (t.deletedIds && t.deletedIds.length) {\r\n                    newSchemeList = schemeList.filter(n => {\r\n                        return !t.deletedIds.includes(n.id)\r\n                    });\r\n                }\r\n\r\n                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);\r\n                schemeListDlg.close();\r\n\r\n                const currentScheme = this.getActiveSchemeItem(gridInstance.id);\r\n                if (!currentScheme) {\r\n                    this.setActiveSchemeItem(gridInstance.id, null);\r\n                    simpleRef.instance.currentSchemeItem = null;\r\n                    simpleRef.instance.resetToDefault();\r\n                    this.prevSchemeItem = null;\r\n                    simpleRef.instance.onSubmitClick();\r\n                }\r\n\r\n            });\r\n        });\r\n\r\n        const modalContainer = schemeListDlg.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n    }\r\n\r\n    // æ°å¢æå¦å­æ¹æ¡\r\n    private showNewSchemeDialog(gridInstance, e: { type: 'new' | 'saveas'}, settings, callback: NewSchemeCallBack) {\r\n        const modalOpts = {\r\n            width: 480, height: 269, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                languages: this.languages\r\n            },\r\n            showButtons: false,\r\n            resizable: false\r\n        };\r\n\r\n        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);\r\n        // newSchemeDlg.dialog.location.nativeElement.style.zIndex = 2031;\r\n        const instance = newSchemeDlg.content as NewSchemeComponent;\r\n        instance.closeModal.subscribe( () => {\r\n            newSchemeDlg.close();\r\n            if (callback && callback.cancel) {\r\n                callback.cancel();\r\n            }\r\n        });\r\n\r\n        instance.submitModal.pipe(\r\n            switchMap((t: any) => {\r\n                return this.createNewScheme(gridInstance.id, t, e.type === 'new', settings);\r\n            })\r\n        ).subscribe((t: any) => {\r\n            if (t.flag === false) {\r\n                const msg = t.msg;\r\n                let _msg = msg;\r\n                if (msg) {\r\n                    if (msg.indexOf('|') > -1) {\r\n                        _msg = msg.split('|').map((langcode) => {\r\n                            return this.localeSer.getValue('datagrid-settings.'+ langcode)\r\n                        }).join('');\r\n                    } else {\r\n                        _msg = this.localeSer.getValue('datagrid-settings.'+ msg );\r\n                    }\r\n                    if (this.notifyService) {\r\n                        this.notifyService.info(_msg);\r\n                    } else {\r\n                        this.messager.info(_msg);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            // æ´æ°æ¹æ¡åè¡¨\r\n            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];\r\n            if (t.isDefault) {\r\n                schemeList.forEach(n => {\r\n                    n.isDefault = false;\r\n                });\r\n            }\r\n            schemeList.push(t);\r\n            this.schemeService.setSchemeList(gridInstance.id, schemeList);\r\n            if (callback && callback.ok) {\r\n                callback.ok(t);\r\n            }\r\n            newSchemeDlg.close();\r\n        });\r\n\r\n        instance.checkAuthority.pipe(\r\n            switchMap((t: any) => {\r\n                return this.schemeService.checkAuthority().pipe(\r\n                    map((auth: SchemeAuthModel) => {\r\n                        return {\r\n                            type: t,\r\n                            ...auth\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        ).subscribe((t: any) => {\r\n            let hasAuthority = { public: true, org: true };\r\n            // æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºå¬å±çæéã\r\n            let _msg = 'noAuth.public';\r\n            if (t.type.value === 'org') {\r\n                // æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºç»ç»çæéã\r\n                _msg = 'noAuth.org';\r\n            }\r\n\r\n            const msg = this.localeSer.getValue('datagrid-settings.'+ _msg );\r\n            if (t.success) {\r\n                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;\r\n                hasAuthority.public = hasPublicAuthority;\r\n                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;\r\n                hasAuthority.org = hasOrgAuthority;\r\n                if (t.type.value === 'public') {\r\n                    instance.schemeInfo.type = t.type.value;\r\n                } else if (t.type.value === 'org') {\r\n                    if (!hasOrgAuthority) {\r\n                        this.notifyService.warning(msg);\r\n                    }else {\r\n                        instance.schemeInfo.type = t.type.value;\r\n                        instance.schemeInfo.orgids = t.authOrganizationData.join(',')\r\n                        instance.dataPermissionIds = t.authOrganizationData;\r\n                    }\r\n                }\r\n            } else {\r\n                this.notifyService.warning(msg);\r\n                hasAuthority = { public: false, org: false };;\r\n            }\r\n            instance.refresh(hasAuthority);\r\n        })\r\n\r\n        const modalContainer = newSchemeDlg.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n    }\r\n\r\n    getSchemeList(gridId: string) {\r\n        const gridIns = this.getGridInstance(gridId);\r\n        return this.schemeService.getSchemeList(gridId, gridIns.enableSetMultiHeaders);\r\n    }\r\n\r\n    /** æ°å¢æ¹æ¡\r\n     *  isNewSchemeï¼æ¯å¦æ°å æ¹æ¡ï¼å¦åä¸ºå¦å­ä¸º\r\n     *  currentSettingsï¼ å½åéç½®ä¿¡æ¯\r\n     *  data: æ°å»ºæ¹æ¡çªå£ä¼ éæ°æ®\r\n     */\r\n    createNewScheme(gridId: string, data: any, isNewScheme = true, currentSettings: any) {\r\n        if(!data.name) {\r\n            // msg è¯·è¾å¥æ¹æ¡åç§°\r\n            return of({flag: false, msg: 'required.schemeName'});\r\n        } else {\r\n            const hasName = this.schemeService.hasSchemeName(gridId, data.name);\r\n\r\n            if (typeof hasName === 'boolean' && hasName) {\r\n                // msg 'æ¹æ¡åç§°å·²å­å¨ï¼è¯·ä¿®æ¹ã'\r\n                return of({flag: false, msg: 'has.exist'});\r\n            } else if (Array.isArray(hasName) && hasName.length) {\r\n                \r\n                const getMessageCode = (langCode) => {\r\n                    if (langCode === 'zh-CHS') {\r\n                        return 'has.chs'; // ç®ä½ä¸­æåç§°å·²å­å¨ã\r\n                    } else if(langCode === 'zh-CHT') {\r\n                        return 'has.cht'; // ç¹é«ä¸­æåç¨±å·²å­å¨ã\r\n                    } else {\r\n                        return 'has.en'; // è±æåç§°å·²å­å¨\r\n                    }\r\n                }\r\n\r\n                if (hasName.includes(this.localeSer.localeId)) {\r\n                    const msg = getMessageCode(this.localeSer.localeId);\r\n                    return of({flag: false, msg});\r\n                } else {\r\n                    const msgs = hasName.map(n => {\r\n                        return getMessageCode(n);\r\n                    });\r\n\r\n                    return of({flag: false, msg: msgs.join('|')});\r\n                }\r\n            }\r\n        }\r\n\r\n        const requiredName = [];\r\n\r\n        if (!data.name[this.localeSer.localeId]) {\r\n            requiredName.push(this.localeSer.localeId);\r\n        }\r\n\r\n        // this.languages.forEach(n => {\r\n        //     if (data.name[n.code] === '' || data.name[n.code] === undefined) {\r\n        //         requiredName.push(n.code);\r\n        //     }\r\n        // });\r\n\r\n        if (requiredName.length) {\r\n            const msgs = requiredName.map(n => {\r\n                if (n === 'zh-CHS') {\r\n                    return 'required.chs'; //'è¯·è¾å¥ç®ä½ä¸­æåç§°ã';\r\n                } else if(n === 'zh-CHT') {\r\n                    return 'required.cht'; //'è¯·è¾å¥ç¹ä½ä¸­æåç§°ã';\r\n                } else {\r\n                    return 'required.en'; // 'è¯·è¾å¥è±æåç§°ã';\r\n                }\r\n            });\r\n            return of({flag: false, msg: msgs.join('|')});\r\n        }\r\n\r\n        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {\r\n            // msg 'è¯·éæ©ç»ç»'\r\n            return of({flag: false, msg: 'required.org'});\r\n        }\r\n        let _config = null;\r\n\r\n        if (!isNewScheme) {\r\n            const LOCALEID = this.localeSer.localeId;\r\n\r\n            if (currentSettings && currentSettings.columnFormat) {\r\n                currentSettings.columnFormat = this.convertColumnsToSimple(currentSettings.columnFormat);\r\n            }\r\n\r\n            _config ={ [LOCALEID]: currentSettings };\r\n        }\r\n\r\n        const newId = this.idService.guid();\r\n        let isDefault = data.isDefault;\r\n        if (isDefault) {\r\n            if (data.type !== 'private') {\r\n                isDefault = false;\r\n            }\r\n        }\r\n\r\n        if (data.name && typeof data.name === 'object') {\r\n            data.name = JSON.stringify(data.name);\r\n        }\r\n\r\n        const gridInstance = this.getGridInstance(gridId);\r\n        if (gridInstance && gridInstance.enableSetMultiHeaders && _config) {\r\n            _config['isMultiHeader'] = gridInstance.enableSetMultiHeaders;\r\n        }\r\n\r\n        const scheme: DatagridSchemeModel = {\r\n            id: newId,\r\n            belongId: '',\r\n            code: '',\r\n            name: data.name,\r\n            type: data.type,\r\n            isDefault: isDefault,\r\n            isSystem: false,\r\n            extendId: 'datagrid-settings-scheme',\r\n            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),\r\n            queryConditionString: _config? JSON.stringify(_config): '',\r\n        };\r\n\r\n        return this.schemeService.saveScheme(scheme, gridId, false, gridInstance.enableSetMultiHeaders).pipe(\r\n            map(() => {\r\n                return scheme;\r\n            })\r\n        );\r\n    }\r\n\r\n    setSchemeList(schemeList: DatagridSchemeModel[], gridId: string) {\r\n        this.schemeService.update({list: schemeList}, gridId);\r\n    }\r\n\r\n    private buildOrgAndSchemeRelations(schemeId: string, orgIds: any) {\r\n        if (!orgIds || !orgIds.length) {\r\n            return  [];\r\n        }\r\n        \r\n        if (typeof orgIds === 'string') {\r\n            orgIds = orgIds.split(',');\r\n        }\r\n\r\n        return orgIds.map(n => {\r\n            return {\r\n                id: this.idService.guid(),\r\n                orgId: n,\r\n                relatedId: schemeId\r\n            }\r\n        });\r\n    }\r\n\r\n    private getCurrentSchemeSettings(gridId: string): SettingModel {\r\n        const activeScheme = this.getActiveSchemeItem(gridId) as DatagridSchemeModel;\r\n        if (activeScheme && activeScheme.queryConditionString) {\r\n            return JSON.parse(activeScheme.queryConditionString);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setCurrentConfigs(settings: SettingModel) {\r\n        this['CURRENT_CONFIGS'] = settings;\r\n    }\r\n\r\n    private getCurrentConfigs() {\r\n        return this['CURRENT_CONFIGS'] || {};\r\n    }\r\n\r\n    private applySettings(e: any, gridInstance: any, modal?: any) {\r\n        e.target.disabled = true;\r\n        if (this.saving) {\r\n            return;\r\n        }\r\n        if (!this.saving) {\r\n            let _scheme, dlg;\r\n            if (modal){\r\n                const {modalRef, currentScheme} = modal;\r\n                dlg = modalRef;\r\n                _scheme = currentScheme;\r\n            } else {\r\n                dlg = e;\r\n                _scheme = e.currentScheme;\r\n            }\r\n\r\n            this.updateGridView(dlg, gridInstance, e.target, _scheme);\r\n        }\r\n    }\r\n\r\n    getMultiHeaderColumns(viewCols, gridInitOptions) {\r\n        return mergetColumnOptions(viewCols, gridInitOptions)\r\n    }\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n\r\n@Component({\r\n    selector: 'sort-setting',\r\n    templateUrl: './datagrid-sort-setting.component.html'\r\n})\r\nexport class DatagridSortSettingComponent implements OnInit {\r\n\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n    @Input() selectedIds = [];\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() sortInfoChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    setFieldSortOrder($event: MouseEvent, data: any, order: string) {\r\n        $event.stopPropagation();\r\n        data.sortable = true;\r\n        data.order = order;\r\n\r\n        if (!order) {\r\n            this.ms.moveToLeft(data);\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n        this.onSelectionsChange(null);\r\n        return false;\r\n    }\r\n\r\n    getSortInfo() {\r\n        if (this.ms.selections) {\r\n            const names = [];\r\n            const orders = [];\r\n            this.ms.selections.forEach(col => {\r\n                col.order = col.order || 'asc';\r\n                names.push(col.field);\r\n                orders.push(col.order);\r\n            });\r\n\r\n            return { sortName: names, sortOrder: orders };\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onSelectionsChange($event) {\r\n        const si = this.getSortInfo();\r\n        this.sortInfoChange.emit(si);\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n        const items: any = $event.items as any;\r\n        if ($event.target.indexOf('rightAll') > -1) {\r\n            for (const id in items) {\r\n                if ($event.items[id]) {\r\n                    $event.items[id].order = 'asc';\r\n                }\r\n            }\r\n        } else {\r\n            if ($event.target === 'right') {\r\n                for (const id in items) {\r\n                    if ($event.items[id]) {\r\n                        $event.items[id].order = 'asc';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Injector, ChangeDetectorRef, ElementRef, ViewChild, EventEmitter, Output, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\nimport { getDataFieldsForMultiHeaders } from '../mutli-headers.helper';\r\n\r\n@Component({\r\n    selector: 'column-group-setting',\r\n    templateUrl: './column-group.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnGroupSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns;\r\n    @Input() fields = [];\r\n    @Input() formatColumns = [];\r\n\r\n    @Input() groupFields = [];\r\n    @Input() expandGroupRows = true;\r\n\r\n    @Input() enabelGroupFooter = false;\r\n\r\n    @Output() groupFieldsChange = new EventEmitter();\r\n    @Output() formatColumnsChange = new EventEmitter();\r\n    @Output() expandGroupRowsChange = new EventEmitter();\r\n\r\n    @ViewChild('groupingSetting') groupingSettingEl: ElementRef;\r\n    @ViewChild('selectcolumnspanel') selectcolumnspanel: ElementRef;\r\n    @ViewChild('groupSumform') colForm: NgForm;\r\n\r\n    // åç»å\r\n    groupColumns = [];\r\n\r\n    // ææåè®¸åç»å\r\n    allowGroupColumns = [];\r\n    activeCalculationCol = null;\r\n\r\n\r\n    showSelectColumnsPanel = false;\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n        //this.formatColumns = getDataFieldsForMultiHeaders(this.columns);\r\n\r\n\r\n        this.setGroupColumns();\r\n        this.registerEventHandle();\r\n        this.initCalculationColumns();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatColumnsChange.emit(this.formatColumns);\r\n                }\r\n            });\r\n        }\r\n        \r\n        this.formatColumns.forEach(n => {\r\n            this.checkColumnOptions(n);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {\r\n            this.formatColumns.forEach(n => {\r\n                this.checkColumnOptions(n);\r\n            });\r\n            this.setGroupColumns();\r\n            this.initCalculationColumns();\r\n        }\r\n    }\r\n\r\n    private initCalculationColumns() {\r\n        if (this.formatColumns) {\r\n            this.activeCalculationCol = this.formatColumns[0];\r\n        }\r\n    }\r\n\r\n    private registerEventHandle() {\r\n        this.groupingSettingEl.nativeElement.addEventListener('click', (e) => {\r\n            if (e.target  !== this.selectcolumnspanel.nativeElement) {\r\n                this.showSelectColumnsPanel = false;\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    private setGroupColumns() {\r\n        if (this.groupFields && this.groupFields.length) {\r\n            const cols: any = this.formatColumns;\r\n            this.groupColumns = this.groupFields.map( f => {\r\n                const col = cols.find(col => col.field === f);\r\n                 return col;\r\n            }).filter(n => n);\r\n\r\n            this.groupFields = this.groupColumns.map(n => n.field);\r\n            this.groupFieldsChange.emit(this.groupFields);\r\n        } else {\r\n            this.groupColumns = [];\r\n        }\r\n        this.onGroupFieldsChange();\r\n    }\r\n\r\n    private getAllowGroupingColumns() {\r\n        const cols: any = this.formatColumns;\r\n        return cols.filter(n => {\r\n            if (n.field.indexOf('farris-datagrid-column_') > -1) {\r\n                return false;\r\n            }\r\n            return  n.allowGrouping || n.allowGrouping === undefined \r\n        });\r\n    }\r\n\r\n    private onGroupFieldsChange() {\r\n        this.groupFieldsChange.emit(this.groupFields);\r\n    }\r\n\r\n    private checkColumnOptions(col) {\r\n        if (col) {\r\n\r\n            if (col.groupFooter === undefined) {\r\n                col.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                col.groupFooter.options = col.groupFooter.options || {calculationType: -1};\r\n                if (col.groupFooter.options.calculationType === undefined) {\r\n                    col.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            // if (this.activeField.footer === undefined) {\r\n            //     this.activeField.footer =  { options: {calculationType: -1} };\r\n            // } else {\r\n            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n            //     if (this.activeField.footer.options.calculationType === undefined) {\r\n            //         this.activeField.footer.options.calculationType = -1;\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ¾ç¤ºæéèå­æ®µéåé¢æ¿\r\n     */\r\n    toggleGroupingColumnPanel($event) {\r\n        $event.stopPropagation();\r\n        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;\r\n        this.allowGroupColumns = this.getAllowGroupingColumns();\r\n    }\r\n\r\n    /** æ·»å åç»å­æ®µ */\r\n    addGroupColumn($event, col) {\r\n        $event.stopPropagation();\r\n        if (this.groupFields.indexOf(col.field) === -1) {\r\n            this.groupColumns = [...this.groupColumns, col];\r\n            this.groupFields = this.groupColumns.map(n => n.field);\r\n            this.onGroupFieldsChange();\r\n            this.showSelectColumnsPanel = false;\r\n        }\r\n    }\r\n\r\n    /** ç§»é¤åç»å­æ®µ */\r\n    onRemoveGroupingField($event, col) {\r\n        $event.stopPropagation();\r\n        this.groupFields = this.groupFields.filter(n => n !== col.field);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    /** æå¨åç»å­æ®µè¿è¡æåº */\r\n    onGroupingFieldDropped($event) {\r\n        const { removedIndex, addedIndex } = $event;\r\n\r\n        const removedItem = this.groupFields.splice(removedIndex, 1);\r\n        this.groupFields.splice(addedIndex, 0, ...removedItem);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    onFieldClick($event, col) {\r\n        this.activeCalculationCol = col;\r\n    }\r\n}\r\n","\r\nimport { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,\r\n        OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForVisible, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\n\r\nconst { wrapperClass, animationClass } = constants;\r\nSmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForVisible.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n    isSource: boolean;\r\n    payload: any;\r\n    willAcceptDrop: boolean;\r\n}\r\n\r\n@Directive({\r\n    selector: '[column-visible-drag]',\r\n})\r\nexport class ColumnVisibleDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        behaviour: 'move',\r\n        dragHandleSelector: '.field-drag-handle',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForVisible(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n    }\r\n\r\n    private onDragStart(info) {\r\n\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n\r\n    }\r\n\r\n}\r\n","import { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,  Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForGroupingField, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\nSmoothDndForGroupingField.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForGroupingField.wrapChild = false;\r\n\r\n@Directive({\r\n    selector: '[column-group-drag]',\r\n})\r\nexport class ColumnGroupDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        orientation: 'horizontal',\r\n        behaviour: 'move',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForGroupingField(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n    }\r\n\r\n    private onDragStart(info) {\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n    }\r\n}\r\n","import { Directive, ElementRef, OnInit, Input, Output, EventEmitter, OnDestroy } from \"@angular/core\";\r\nimport { Subscription, fromEvent, race } from 'rxjs';\r\nimport { buffer, bufferCount, debounceTime, filter, first, map, repeat } from 'rxjs/operators';\r\n\r\n\r\n@Directive({\r\n    selector: '[f-dbl-click]'\r\n})\r\nexport class FarrisDblClickDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('f-dbl-click') options;\r\n    @Output() dblClickHandler: EventEmitter<any> = new EventEmitter();\r\n\r\n    private _click$: Subscription  = null;\r\n    constructor(private el: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        const doubleClickDuration = 250;\r\n        const leftClick$ = fromEvent(this.el.nativeElement, 'click').pipe(filter((event: any) => event.button === 0));\r\n        const debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));\r\n        const clickLimit$ = leftClick$.pipe(bufferCount(2));\r\n        const bufferGate$ = race(debounce$, clickLimit$)\r\n        .pipe(\r\n          first(),\r\n          repeat(),\r\n        );\r\n\r\n        this._click$ = leftClick$.pipe(\r\n            buffer(bufferGate$),\r\n            filter(clicks => {\r\n                return clicks.length > 1;\r\n            })\r\n        ).subscribe(clicks => {\r\n            this.dblClickHandler.emit(clicks[0]);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this._click$) {\r\n            this._click$.unsubscribe();\r\n            this._click$ = null;\r\n        }\r\n    }\r\n}","import { Component, Input } from \"@angular/core\";\r\n\r\n\r\n@Component({\r\n    selector: 'preview-table',\r\n    templateUrl: './preview-multi-headers.component.html'\r\n})\r\nexport class PreviewMultiHeadersComponent {\r\n    @Input() previewGroupColumns;\r\n\r\n\r\n    onWheel($event, tabsbox) {\r\n        const sw = tabsbox.scrollWidth;\r\n        const ow = tabsbox.offsetWidth;\r\n\r\n        if (sw > ow) {\r\n            const right = sw - ow;\r\n            const sl = tabsbox.scrollLeft;\r\n            if (sl < right && $event.deltaY > 0) {\r\n                $event.preventDefault();\r\n                tabsbox.scrollLeft = sl + 50;\r\n            }\r\n\r\n            if (sl > 0 && $event.deltaY < 0) {\r\n                $event.preventDefault();\r\n                tabsbox.scrollLeft = sl - 50;\r\n            }\r\n        }\r\n    }\r\n}","import { Directive, ElementRef, Input, HostListener, ComponentFactoryResolver } from \"@angular/core\";\r\nimport { ColumnTreeComponent } from \"../column-tree.component\";\r\nimport { BsModalService } from \"@farris/ui-modal\";\r\nimport { PreviewMultiHeadersComponent } from \"./preview-multi-headers.component\";\r\n\r\n@Directive({\r\n    selector: '[preview-headers]'\r\n})\r\nexport class ShowPreviewDirective {\r\n    @Input('preview-headers') treeIns: ColumnTreeComponent;\r\n    @Input() dlgTitle = 'ææé¢è§'\r\n    constructor(private el: ElementRef, private cfr: ComponentFactoryResolver, private modalSer: BsModalService) {}\r\n\r\n    @HostListener('click', ['$event'])\r\n    onPreviewBtnClick($event) {\r\n        const modalRef = this.modalSer.show(PreviewMultiHeadersComponent, {\r\n            title: this.dlgTitle,\r\n            width: 600,\r\n            height: 300,\r\n            showMaxButton: true,\r\n            resizable: true,\r\n            initialState: {\r\n                previewGroupColumns: this.treeIns.getPreviewGroupColumns()\r\n            },\r\n            showButtons: false\r\n        });\r\n    }\r\n}","\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { GRID_SETTINGS_SERVICE, DatagridModule} from '@farris/ui-datagrid';\r\nimport { MultiSelectModule } from '@farris/ui-multi-select';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { SwitchModule } from '@farris/ui-switch';\r\nimport { FarrisTooltipModule } from '@farris/ui-tooltip';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { OrganizationSelectorModule } from '@farris/ui-organization-selector';\r\n\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\n\r\nimport { DatagridSettingsService } from './datagrid-settings.service';\r\nimport { DatagridSortSettingComponent } from './datagrid-sort-setting.component';\r\nimport { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';\r\nimport { ColumnGroupSettingComponent } from './column-group/column-group.component';\r\nimport { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';\r\nimport { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\nimport { NewSchemeComponent } from './scheme/newscheme.component';\r\nimport { SchemeListComponent } from './scheme/scheme-list.component';\r\nimport { LanguageTextboxModule } from '@farris/ui-language-textbox';\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { ColumnTreeComponent } from './multi-headers/column-tree.component';\r\nimport { NewHeaderFormComponent } from './multi-headers/new-header.component';\r\nimport { SetColumnsComponent } from './multi-headers/setcolumns.component';\r\nimport { FarrisDblClickDirective } from './dbl-click.directive';\r\nimport { PreviewMultiHeadersComponent } from './multi-headers/preview/preview-multi-headers.component';\r\nimport { ShowPreviewDirective } from './multi-headers/preview/show-preview.directive';\r\n@NgModule({\r\n    declarations: [\r\n        DatagridSettingsComponent,\r\n        DatagridSortSettingComponent,\r\n        ColumnFormatSettingComponent,\r\n        ColumnGroupSettingComponent,\r\n        ColumnVisibleDragDirective,\r\n        ColumnGroupDragDirective,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent,\r\n        ColumnTreeComponent,\r\n        NewHeaderFormComponent,\r\n        SetColumnsComponent,\r\n        FarrisDblClickDirective,\r\n        PreviewMultiHeadersComponent,\r\n        ShowPreviewDirective\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MultiSelectModule,\r\n        ComboListModule,\r\n        DatagridModule,\r\n        FarrisCommonModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        LocaleModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        SwitchModule,\r\n        FarrisTooltipModule,\r\n        NotifyModule.forRoot(),\r\n        OrganizationSelectorModule,\r\n        LanguageTextboxModule,\r\n        TreeTableModule\r\n    ],\r\n    entryComponents: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent,\r\n        NewHeaderFormComponent,\r\n        SetColumnsComponent,\r\n        PreviewMultiHeadersComponent\r\n    ],\r\n    exports: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent,\r\n        FarrisDblClickDirective\r\n    ]\r\n})\r\nexport class DatagridSettingsModule {\r\n    static forRoot(apiUri = ''): ModuleWithProviders {\r\n        return {\r\n            ngModule: DatagridSettingsModule,\r\n            providers: [\r\n                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}