import { AfterViewInit, ChangeDetectorRef, EventEmitter, ElementRef, Injector, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from "@angular/core";
import { BsModalService } from "@farris/ui-modal";
import { RowNode, TreeTableComponent } from "@farris/ui-treetable";
import { NotifyService } from '@farris/ui-notify';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ColumnTreeOptions } from "../setting.model";
export declare class ColumnTreeComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {
    private injector;
    private ngzone;
    private cd;
    private render;
    private modalService;
    private el;
    private notitySer;
    dg: DatagridComponent;
    options: Partial<ColumnTreeOptions>;
    inModal: boolean;
    nodeSelected: EventEmitter<any>;
    cellTemp: TemplateRef<any>;
    tt: TreeTableComponent;
    fields: any[];
    treecols: any[];
    treeData: any[];
    contextMenus: any[];
    /** 值 __HOU_XUAN_LIE_ID__ */
    HOU_XUAN_LIE_ID: string;
    GROUP_HEADER_ICON: string;
    Hou_Xuan_Qu: {
        id: string;
        title: string;
        houxuanquNode: boolean;
    };
    languageRes: {
        title: string;
        preview: string;
        tips: string;
        contextMenus: {
            new: string;
            newChild: string;
            setDataField: string;
            rename: string;
            top: string;
            up: string;
            down: string;
            bottom: string;
            cancelGroup: string;
            remove: string;
        };
        candidate: string;
        setHeader: string;
        ok: string;
        cancel: string;
        required: string;
        defaultGroupHeaderName: string;
        newHeaderPlaceholder: string;
        newHeaderLabel: string;
    };
    private localeSer;
    constructor(injector: Injector, ngzone: NgZone, cd: ChangeDetectorRef, render: Renderer2, modalService: BsModalService, el: ElementRef, notitySer: NotifyService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private listenTreeTableEvent;
    private initTreenodeContextMenus;
    /** 移动命令项是否显示 */
    moveMenuItemVisiblily: (t: RowNode) => boolean;
    isGroupHeader: (t: RowNode) => boolean;
    initTreeData(): void;
    private getHouXuanNode;
    onTreeSelected($event: any): void;
    private showNewHeaderDialog;
    private generateGroupHeaderId;
    private createNewGroupHeader;
    removeGroup(event: MouseEvent, rowNode: any): void;
    addNewGroup(rn: RowNode, child?: boolean): void;
    onMoreBtnClick($event: MouseEvent, nodeData: any): void;
    private getCanSelectColumns;
    private showSetColumnsDialog;
    /** 为分组表头分配数据列 */
    setColumnsForGroupHeader($event: any, rowNode: RowNode): void;
    setColumnHeader(event: MouseEvent, col: any): void;
    moveUp(event: MouseEvent, rowNode: any): void;
    moveDown(event: MouseEvent, rowNode: any): void;
    moveTop(event: MouseEvent, rowNode: any): void;
    moveBottom(event: MouseEvent, rowNode: any): void;
    /** 获取多表头数据 */
    getPreviewGroupColumns(): any[];
    /** 获取候选列 */
    getHouXuanFields(): any;
    private getAllNodes;
    /** 将树节点数据转换为 多表头结构 */
    convert2Array(rowNodes: RowNode[]): any[];
    onBeforeShowContextMenu: (t: any) => import("rxjs").Observable<{
        show: boolean;
    }>;
    private clearTreeNodesData;
    getSettings(): {
        viewCols: any[];
        treeData: any[];
    };
    hiddenCol($event: MouseEvent, id: any): void;
    resetHeaderName($event: MouseEvent, rowNode: RowNode): void;
}
