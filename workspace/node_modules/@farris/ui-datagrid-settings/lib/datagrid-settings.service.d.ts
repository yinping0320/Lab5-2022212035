import { Observable } from 'rxjs';
import { Injector, InjectionToken } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { BsModalService, ModalOptions } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { LocaleService } from '@farris/ui-locale';
import { IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { DatagridSchemeModel, SettingModel } from './setting.model';
export declare const GRID_SETTINGS_WEBAPI: InjectionToken<{}>;
export declare type NewSchemeCallBack = {
    cancel?: (p?: any) => void;
    ok: (p: any) => void;
};
export declare class DatagridSettingsService {
    private injector;
    private modalSer;
    private messager;
    private idService;
    private localeSer;
    private multiSortMsg;
    private columnsSortableMsg;
    private notShowDialog;
    private _httpRestService;
    private languages;
    httpRestService: any;
    private gridRefs;
    private activeSchemeItem;
    private saving;
    private cfr;
    private app;
    private schemeListSubscription;
    private schemeService;
    private notifyService;
    private commonUtils;
    private currentSchemeitem;
    private prevSchemeItem;
    private debugSer;
    constructor(injector: Injector, modalSer: BsModalService, messager: MessagerService, idService: IdService, localeSer: LocaleService);
    setUriPerfixStr(perfixStr: string): void;
    destroy(id?: string): void;
    private writeDebugMsg;
    registerGridInstance(dg: DatagridComponent): void;
    getGridInstance(dgID: string): DatagridComponent;
    /** 更新方案中的配置数据 */
    private updateSchemeSettings;
    /** 更新当前方案配置数据 */
    updateActiveSchemeItemSettings(dgId: string, settings: Partial<SettingModel>): void;
    /** 设置活动的方案 */
    setActiveSchemeItem(dgId: string, activeItem: any): void;
    /** 获取当前活动的方案 */
    getActiveSchemeItem(dgId: string): DatagridSchemeModel;
    getSearchTypes(): {
        value: string;
        title: any;
    }[];
    showSimple(gridInstance: DatagridComponent, settings?: Partial<SettingModel>, selectedSchemeItem?: DatagridSchemeModel): import("@angular/core").ComponentRef<SimpleColumnsComponent>;
    show(gridInstance: DatagridComponent, opts?: ModalOptions): any;
    private restoreScheme;
    private showAdvanced;
    private canSetColumnSort;
    private hasEnableSortColumns;
    private _convertColumnsToSimple;
    convertColumnsToSimple(cols: any): any;
    private resetGridView;
    private updateGridView;
    newVisibleOrderColumns(cols: any, viewColumns: any, columnFormat: any, gridInstance: any): any;
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    private isNewAddColumn;
    updateColumnFormat(cols: any[], columnFormat: any[], gridInstance: any): void;
    private createConfigKey;
    private getCurrentUserSettings;
    saveUserConfig(gridId: string): Observable<any>;
    setUserConfig(gridId: string, config: any): Observable<any>;
    getUserConfig(key: any, isMultiHeader?: boolean): Observable<any>;
    getLocalSettings(key: string, isMultiHeader?: boolean): any;
    private getDefaultScheme;
    getSettings(gridId: string): Observable<any>;
    private _saveUserConfig;
    resetUserConfig(gridInstance: any, modalRef: any): void;
    private _getUserConfig;
    private buildSubmitData;
    private showSchemeListDialog;
    private showNewSchemeDialog;
    getSchemeList(gridId: string): Observable<DatagridSchemeModel[]>;
    /** 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     */
    createNewScheme(gridId: string, data: any, isNewScheme: boolean, currentSettings: any): any;
    setSchemeList(schemeList: DatagridSchemeModel[], gridId: string): void;
    private buildOrgAndSchemeRelations;
    private getCurrentSchemeSettings;
    setCurrentConfigs(settings: SettingModel): void;
    private getCurrentConfigs;
    private applySettings;
    getMultiHeaderColumns(viewCols: any, gridInitOptions: any): any;
}
