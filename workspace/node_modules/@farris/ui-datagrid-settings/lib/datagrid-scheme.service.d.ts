import { Injector } from "@angular/core";
import { Observable, Subject } from "rxjs";
import { BatchScheme, DatagridSchemeModel, SchemeAuthModel, SchemeState, SettingModel } from "./setting.model";
export declare class DatagridSchemeService {
    private inject;
    private restService;
    private state;
    private perfixStr;
    schemeList$: Subject<{}>;
    private schemeApi;
    private schemeKey;
    private currentSchemeSettings;
    constructor(inject: Injector);
    setUriPerfix(perfixStr: string): void;
    update(d: SchemeState, gridId: string): void;
    setRestService(httpSer: any): void;
    private mergeUri;
    private getWebFormKey;
    destory(gridId: string): void;
    getSchemeKey(gridId: string): any;
    getSchemeList(gridID: string, isMultiHeader?: boolean): Observable<DatagridSchemeModel[]>;
    updateSchemeData(gridID: string, schemeData: any): void;
    private getBelongId;
    saveScheme(scheme: DatagridSchemeModel, gridID: string, isUpdate?: boolean, isMultiHeader?: boolean): any;
    updateScheme(param: BatchScheme, gridID: string, isMultiHeader?: boolean): Observable<any>;
    getStateValue(gridId: any, ...statePro: any[]): any;
    private updateStateValue;
    setSchemeList(gridId: any, newSchemeList: any): void;
    hasSchemeName(gridId: any, schemeName: any): boolean | any[];
    checkAuthority(): Observable<SchemeAuthModel>;
    getLanguages(): any;
    createSchemeTaskID(): void;
    setSettings(configs: any): void;
    getSettings(): any;
    isSchemeChanged(nowSettings: SettingModel, isMultiHeader: boolean): boolean;
}
