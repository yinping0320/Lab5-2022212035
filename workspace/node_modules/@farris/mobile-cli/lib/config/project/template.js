"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_html_1 = require("@rollup/plugin-html");
const utils_1 = require("../../utils");
const genInputCode = (option, runtime) => {
    if (runtime) {
        return `
      commonScriptElem.addEventListener('load', function() {
        window.mobileCommonFuncs.getDimPath().then(
          function(dimPath) {
            var nowTime = new Date().getTime();
            let cssLink = document.createElement('link');
            cssLink.href = "./${option.publicPath}" + dimPath + "${option.cssFileName}?v="+nowTime;
            cssLink.rel = 'stylesheet';
            document.head.appendChild(cssLink);
            System.import("./${option.publicPath}" + dimPath + "${option.fileName}?v="+nowTime).then(()=>{window.mobileFrontPageService.hideLoading();});
          },
          function() {
            alert('应用加载失败，请联系管理员');
          }
        );
      });
    `;
    }
    else {
        return `System.import("./${option.publicPath}${option.fileName}?v=${option.version}").then(()=>{window.mobileFrontPageService.hideLoading();});`;
    }
};
exports.default = (options) => {
    const { isRtc, headTitle = '', useSvgBuilder = true } = options;
    return ({ attributes, files, meta, publicPath, title }) => __awaiter(void 0, void 0, void 0, function* () {
        const svgSprite = useSvgBuilder ? utils_1.svgBuilder('src/assets') : '';
        let version = '';
        const scripts = (files.js || []).filter((chunk) => chunk.isEntry)
            .map((chunk) => {
            if (chunk.isEntry) {
                version = utils_1.cryptoVersionContent(chunk.code);
            }
            const attrs = plugin_html_1.makeHtmlAttributes(attributes.script);
            const cssFileName = (files.css || [])
                .map(({ fileName }) => {
                return fileName;
            });
            return `<script ${attrs}>${genInputCode(Object.assign(Object.assign({}, chunk), { publicPath, version, cssFileName }), !!isRtc)}</script>`;
        }).join('\n');
        const linkVersion = new Date().getTime();
        const links = (files.css || [])
            .map(({ fileName }) => {
            const attrs = plugin_html_1.makeHtmlAttributes(attributes.link);
            return `<link href="${publicPath}${fileName}?v=${linkVersion}" rel="stylesheet"${attrs}>`;
        })
            .join('\n');
        const metas = meta.map((meta) => {
            let { tag, code, location = 'head' } = meta, props = __rest(meta, ["tag", "code", "location"]);
            code = code ? code : '';
            tag = tag ? tag : 'meta';
            const attrs = plugin_html_1.makeHtmlAttributes(props);
            const openTag = `<${tag}${attrs}>`;
            const closeTag = `</${tag}>`;
            return { location, code: openTag + code + closeTag };
        });
        const headMetas = metas
            .filter((meta) => meta.location === 'head')
            .map((meta) => meta.code)
            .join('\n');
        const bodyMetas = metas
            .filter((meta) => meta.location === 'body')
            .map((meta) => meta.code)
            .join('\n');
        return `<!DOCTYPE html>
  <html${plugin_html_1.makeHtmlAttributes(attributes.html)}>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>${headTitle}</title>
    <link rel="stylesheet" href="/platform/common/web/assets/vant.css">
    <link rel="stylesheet" href="/platform/common/web/assets/farris-mobile-page.css">
    ${links}
    <script src="/platform/runtime/common/web/gsprtf/gsp.rtf.mobile.core.js"></script>
    <script src="/platform/common/web/system.js"></script>
    ${headMetas}
    <!-- <script type="systemjs-importmap" src="/platform/runtime/common/web/runtime.common.compact.manifest.json"></script> -->
  </head>
  
  <body>
    <noscript>
      <strong>We're sorry but ${title} doesn't work properly without JavaScript enabled.
        Please enable it to continue.</strong>
    </noscript>
    ${svgSprite}
    <div id="app"></div>
    <script>
      var body = document.getElementsByTagName('body')[0];
      var nowTime = new Date().getTime();

      var commonScriptElem = document.createElement('script');
      commonScriptElem.src = '/platform/common/web/@farris/mobile-common.js?v=' + nowTime;
      commonScriptElem.onload = ()=>{window.mobileFrontPageService.showLoading();};
      body.appendChild(commonScriptElem);

      var manifestScriptElem = document.createElement('script');
      manifestScriptElem.type = 'systemjs-importmap';
      manifestScriptElem.src = '/platform/runtime/common/web/runtime.common.compact.manifest.json?v=' + nowTime;
      body.appendChild(manifestScriptElem);
    </script>
    ${bodyMetas}
    <!-- built files will be auto injected -->
    ${scripts}
  </body>
  </html>`;
    });
};
//# sourceMappingURL=template.js.map