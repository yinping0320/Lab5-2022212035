"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyPluginOptions = exports.onWarn = exports.replacePluginOptions = exports.aliasPluginOptions = exports.cssPluginOptions = exports.babelPluginOptions = exports.htmlPluginOptions = exports.ENV = exports.input = exports.output = exports.EXTERNAL = void 0;
const template_1 = __importDefault(require("./template"));
const utils_1 = require("../../utils");
const cwdConfig = utils_1.getCwdField('farris.config');
const pkg = utils_1.getCwdField('package');
// 排除公共文件
const deps = (pkg === null || pkg === void 0 ? void 0 : pkg.dependencies) ? Object.keys(pkg.dependencies) : [];
deps.push('rxjs/operators');
exports.EXTERNAL = (cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.external) ? cwdConfig.external : deps;
// 出口
const format = process.env.ROLLUP_FORMAT ? process.env.ROLLUP_FORMAT : 'system';
exports.output = utils_1.merge({
    // file: `dist-rollup/index.${format}.js`,
    file: `dist-rollup/${pkg.name}/index.js`,
    // file: undefined,
    // dir: `dist-rollup/${pkg.name}`, // 支持 Code Splitting
    format: format,
    globals: {
        vue: 'Vue',
        vant: 'vant',
        '@farris/mobile-ui': 'farrisMobile',
    },
}, (cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.output) ? cwdConfig.output : {});
// 入口
exports.input = (cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.input) ? cwdConfig.input : 'src/main.ts';
// export const INPUT = 'index.js';
// 运行环境
exports.ENV = process.env.NODE_ENV;
// @rollup/plugin-htm 配置
const isRtc = cwdConfig && cwdConfig.isRtc === true ? true : false;
const headTitle = cwdConfig && cwdConfig.title ? cwdConfig.title : '';
const useSvgBuilder = cwdConfig && cwdConfig.useSvgBuilder ? cwdConfig.useSvgBuilder : '';
const template = template_1.default({ isRtc, headTitle, useSvgBuilder });
exports.htmlPluginOptions = utils_1.merge({
    title: pkg.name,
    template,
    attributes: { html: { lang: 'en' }, script: {} },
}, ((_a = cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.plugins) === null || _a === void 0 ? void 0 : _a.html) ? cwdConfig.plugins.html : {});
// @rollup/plugin-babel 配置
exports.babelPluginOptions = utils_1.merge({
    babelHelpers: 'bundled',
    // babel编译支持文件类型
    extensions: ['.js', '.ts', '.vue'],
    exclude: './node_modules/*',
}, ((_b = cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.plugins) === null || _b === void 0 ? void 0 : _b.babel) ? cwdConfig.plugins.babel : {});
// rollup-plugin-css-only 配置
exports.cssPluginOptions = utils_1.merge({ output: 'index.css' }, ((_c = cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.plugins) === null || _c === void 0 ? void 0 : _c.css) ? cwdConfig.plugins.css : {});
// @rollup/plugin-alias 配置
exports.aliasPluginOptions = utils_1.merge({
    entries: [{ find: /^(@babel\/runtime.+)/, replacement: '$1.js' }],
}, ((_d = cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.plugins) === null || _d === void 0 ? void 0 : _d.alias) ? cwdConfig.plugins.alias : {});
// @rollup/plugin-replace 配置
exports.replacePluginOptions = utils_1.merge({
    'process.env.NODE_ENV': JSON.stringify(exports.ENV),
}, ((_e = cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.plugins) === null || _e === void 0 ? void 0 : _e.replace) ? cwdConfig.plugins.replace : {});
exports.onWarn = (warning, warn) => {
    return;
    if (exports.ENV === 'production')
        return;
    // skip certain warnings
    // if (warning.code === 'PLUGIN_WARNING') return;
    // throw on others
    // if (warning.code === 'NON_EXISTENT_EXPORT') throw new Error(warning.message);
    // console.log(warning)
    // Use default for everything else
    warn(warning);
};
// @rollup/plugin-replace 配置
exports.copyPluginOptions = utils_1.merge({ targets: 'src/assets', dest: `dist-rollup/${pkg.name}` }, ((_f = cwdConfig === null || cwdConfig === void 0 ? void 0 : cwdConfig.plugins) === null || _f === void 0 ? void 0 : _f.copy) ? cwdConfig.plugins.copy : {});
//# sourceMappingURL=config.js.map