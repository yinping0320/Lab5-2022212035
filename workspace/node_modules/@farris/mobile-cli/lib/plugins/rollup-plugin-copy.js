"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const utils_1 = require("../utils");
const formatPath = (path) => {
    return path_1.join(utils_1.CWD, path);
};
const getCopyOptions = (options) => {
    const copyOptions = [];
    if (utils_1.isArray(options)) {
        options.map(option => {
            const { targets, dest = '' } = option;
            utils_1.isArray(targets) && targets.map(target => {
                copyOptions.push({ target, dest });
            });
        });
    }
    else {
        const { targets, dest = '' } = options;
        if (utils_1.isArray(targets)) {
            targets.map(target => {
                copyOptions.push({ target, dest });
            });
        }
        else {
            targets && copyOptions.push({ target: targets, dest });
        }
    }
    return copyOptions;
};
function copy(options = {}) {
    const copyOptions = getCopyOptions(options);
    return {
        name: 'copy',
        writeBundle(options) {
            return __awaiter(this, void 0, void 0, function* () {
                // console.log(options);
                copyOptions.map(copyOption => {
                    const { target, dest } = copyOption;
                    const formPath = formatPath(target);
                    if (!fs_extra_1.default.existsSync(formPath)) {
                        return;
                    }
                    try {
                        fs_extra_1.default.copySync(formPath, formatPath(dest));
                    }
                    catch (error) {
                        console.log(error);
                    }
                });
            });
        },
    };
}
exports.default = copy;
//# sourceMappingURL=rollup-plugin-copy.js.map