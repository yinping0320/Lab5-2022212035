"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrap = void 0;
const fs_1 = require("fs");
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
const build_1 = require("./build");
const config_1 = require("./config");
function bootstrap(option) {
    return __awaiter(this, void 0, void 0, function* () {
        const { command = [], value } = option;
        if (command.includes('build') && command.includes('all')) {
            yield runBuild(build_1.buildAllLib, config_1.libs);
        }
        else if (command.includes('build')) {
            if (command.includes('config')) {
                yield runBuild(runBuildByConfig, value);
            }
            else {
                yield runBuild(build_1.build, value);
            }
        }
        else if (command.includes('help')) {
            showHelpInfo();
        }
        else if (command.includes('version')) {
            showVersionInfo(value);
        }
        // 解决执行完命令，存在无法退出进程问题
        // exit(0)
        // return Promise.resolve(0)
    });
}
exports.bootstrap = bootstrap;
function runBuild(cb, value) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log(chalk_1.default.green('Build Begin'));
        const spinner = ora_1.default(`${chalk_1.default.blue('Building...')}`).start();
        const beginDate = new Date();
        try {
            yield cb(value);
            const seconds = ((new Date().getTime() - beginDate.getTime()) / 1000).toFixed(1);
            spinner.succeed();
            console.log(chalk_1.default.green('Build Done:', `Finished In ${seconds}s`));
            return Promise.resolve();
        }
        catch (error) {
            spinner.fail();
            console.log(chalk_1.default.red('Build Error:', error));
            return Promise.reject();
        }
    });
}
function runBuildByConfig(path) {
    const configStr = fs_1.readFileSync(path, 'utf8');
    const config = configStr ? JSON.parse(configStr) : '';
    if (config instanceof Array) {
        return build_1.buildAllLib(config);
    }
    return build_1.build(config);
}
function showHelpInfo() {
    console.log('  usage:\n');
    console.log('  -v --version [show version]');
    console.log('  -b --build [build target]');
    console.log('  -c --config [build target by config file]');
}
function showVersionInfo(value) {
    console.log('version:', value);
}
//# sourceMappingURL=index.js.map