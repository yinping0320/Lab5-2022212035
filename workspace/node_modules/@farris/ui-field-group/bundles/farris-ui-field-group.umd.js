(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@farris/ui-locale'), require('@angular/core'), require('@farris/ui-editor')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-field-group', ['exports', '@angular/common', '@farris/ui-locale', '@angular/core', '@farris/ui-editor'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-field-group'] = {}),global.ng.common,global.uiLocale,global.ng.core,global.uiEditor));
}(this, (function (exports,common,uiLocale,core,uiEditor) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColComponent = /** @class */ (function () {
        function ColComponent() {
        }
        /**
         * @return {?}
         */
        ColComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ColComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-col',
                        template: "<ng-content></ng-content>\r\n",
                        // tslint:disable-next-line:use-host-property-decorator
                        host: {
                            class: 'col-md'
                        },
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ColComponent.ctorParameters = function () { return []; };
        return ColComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColDirective = /** @class */ (function () {
        function ColDirective(el, render) {
            this.el = el;
            this.render = render;
            /** @type {?} */
            var screenWidth = window.screen.width;
            if (screenWidth < 576) {
                this.el.nativeElement.setAttribute('class', 'col');
            }
            else if (screenWidth >= 567 && screenWidth < 768) {
                this.el.nativeElement.setAttribute('class', 'col-sm');
            }
            else if (screenWidth >= 768 && screenWidth < 1366) {
                this.el.nativeElement.setAttribute('class', 'col-md');
            }
            else if (screenWidth >= 1366 && screenWidth < 1920) {
                this.el.nativeElement.setAttribute('class', 'col-lg');
            }
            else if (screenWidth >= 1920) {
                this.el.nativeElement.setAttribute('class', 'col-xl');
            }
        }
        ColDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[appCol]'
                    },] }
        ];
        /** @nocollapse */
        ColDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        return ColDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DragDirective = /** @class */ (function () {
        function DragDirective(el) {
            this.el = el;
            this.isDown = false;
            // 记录鼠标点击事件的位置 Y
            this.totalOffsetX = 0; // 记录总偏移量 X轴
            // 记录总偏移量 X轴
            this.totalOffsetY = 0; // 记录总偏移量 Y轴
        }
        // 点击事件
        // 记录总偏移量 Y轴
        // 点击事件
        /**
         * @param {?} event
         * @return {?}
         */
        DragDirective.prototype.onMousedown =
            // 记录总偏移量 Y轴
            // 点击事件
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.isDown = true;
                this.disX = event.clientX;
                this.disY = event.clientY;
            };
        // 监听document移动事件事件
        // 监听document移动事件事件
        /**
         * @param {?} event
         * @return {?}
         */
        DragDirective.prototype.onMousemove =
            // 监听document移动事件事件
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // 判断该元素是否被点击了。
                if (this.isDown) {
                    this.el.nativeElement.style.left = this.totalOffsetX + event.clientX - this.disX + 'px';
                    this.el.nativeElement.style.top = this.totalOffsetY + event.clientY - this.disY + 'px';
                }
            };
        // 监听document离开事件
        // 监听document离开事件
        /**
         * @param {?} event
         * @return {?}
         */
        DragDirective.prototype.onMouseup =
            // 监听document离开事件
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // 只用当元素移动过了，离开函数体才会触发。
                if (this.isDown) {
                    this.totalOffsetX += event.clientX - this.disX;
                    this.totalOffsetY += event.clientY - this.disY;
                    this.isDown = false;
                }
            };
        /**
         * @return {?}
         */
        DragDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.el.nativeElement.style.position = 'relative';
            };
        DragDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[appDrag]'
                    },] }
        ];
        /** @nocollapse */
        DragDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        DragDirective.propDecorators = {
            onMousedown: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }],
            onMousemove: [{ type: core.HostListener, args: ['document:mousemove', ['$event'],] }],
            onMouseup: [{ type: core.HostListener, args: ['document:mouseup', ['$event'],] }]
        };
        return DragDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FoldDirective = /** @class */ (function () {
        function FoldDirective(el, render) {
            this.el = el;
            this.render = render;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        FoldDirective.prototype.click = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.target.localName === 'legend') {
                    /** @type {?} */
                    var legend = this.el.nativeElement.children[0];
                    /** @type {?} */
                    var div = this.el.nativeElement.children[1];
                    if (legend.classList.contains('f-legend-collapse')) {
                        // 处理 legend
                        this.render.removeClass(legend, 'f-legend-collapse');
                        this.render.addClass(legend, 'f-legend-show');
                        // 处理div
                        this.render.removeStyle(div, 'height');
                        this.render.removeStyle(div, 'overflow');
                    }
                    else {
                        // 处理 legend
                        this.render.removeClass(legend, 'f-legend-show');
                        this.render.addClass(legend, 'f-legend-collapse');
                        // 处理div
                        this.render.setStyle(div, 'height', '0px');
                        this.render.setStyle(div, 'overflow', 'hidden');
                    }
                    this.render.addClass(legend, 'f-legend-icon');
                }
            };
        FoldDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisFold]'
                    },] }
        ];
        /** @nocollapse */
        FoldDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        FoldDirective.propDecorators = {
            click: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return FoldDirective;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SwapDirective = /** @class */ (function (_super) {
        __extends(SwapDirective, _super);
        function SwapDirective(el) {
            var _this = _super.call(this, el) || this;
            _this.el = el;
            return _this;
        }
        /*获取元素绝对位置的纵坐标*/
        /*获取元素绝对位置的纵坐标*/
        /**
         * @param {?} e
         * @return {?}
         */
        SwapDirective.prototype.getTop = /*获取元素绝对位置的纵坐标*/
            /**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var offset = e.offsetTop;
                if (e.offsetParent) {
                    offset += this.getTop(e.offsetParent);
                }
                return offset;
            };
        /*获取元素绝对位置的横坐标*/
        /*获取元素绝对位置的横坐标*/
        /**
         * @param {?} e
         * @return {?}
         */
        SwapDirective.prototype.getLeft = /*获取元素绝对位置的横坐标*/
            /**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var offset = e.offsetLeft;
                // console.log(offset);
                if (e.offsetParent) {
                    offset += this.getLeft(e.offsetParent);
                }
                return offset;
            };
        // tslint:disable-next-line:use-life-cycle-interface
        // tslint:disable-next-line:use-life-cycle-interface
        /**
         * @return {?}
         */
        SwapDirective.prototype.ngOnInit =
            // tslint:disable-next-line:use-life-cycle-interface
            /**
             * @return {?}
             */
            function () {
                _super.prototype.ngOnInit.call(this);
            };
        // tslint:disable-next-line:member-ordering
        /**
         * 存放所有指令位置
         */
        SwapDirective.elList = new Array(Map);
        SwapDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[appSwap]'
                    },] }
        ];
        /** @nocollapse */
        SwapDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        return SwapDirective;
    }(DragDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CollapseDirective = /** @class */ (function () {
        // fold
        /*  */
        function CollapseDirective(el, render, localeService) {
            this.el = el;
            this.render = render;
            this.localeService = localeService;
            /* 收折文本 */
            this.collapseText = '';
            /* 展开文本 */
            this.expandText = '';
            // this.collapseTemplate = collapseTemplate.templa;
        }
        /**
         * @return {?}
         */
        CollapseDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // if (!this.el.nativeElement.classList.contains('f-state-visible')) {
                //     this.render.addClass(this.el.nativeElement, 'f-state-visible');
                // }
            };
        /**
         * 当标题  收折文本变化时，视图随之变化
         * @param changeOption 变更变量集合
         */
        /**
         * 当标题  收折文本变化时，视图随之变化
         * @param {?} changeOption 变更变量集合
         * @return {?}
         */
        CollapseDirective.prototype.ngOnChanges = /**
         * 当标题  收折文本变化时，视图随之变化
         * @param {?} changeOption 变更变量集合
         * @return {?}
         */
            function (changeOption) {
                if (changeOption['title'] && this.titleDiv && this.titleText) {
                    // 移除当前结构  重现渲染
                    this.render.removeChild(this.titleDiv, this.titleText);
                    this.titleText = this.render.createText(this.title);
                    this.render.appendChild(this.titleDiv, this.titleText);
                }
                if ((changeOption['collapseText'] || changeOption['expandText']) && this.span) {
                    if (this.collapse) {
                        this.span.innerHTML = this.expandText;
                    }
                    else {
                        this.span.innerHTML = this.collapseText;
                    }
                }
            };
        /**
         * @return {?}
         */
        CollapseDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.parent = this.render.parentNode(this.el.nativeElement);
                // if (this.localeService) {
                //     this.collapseText = this.localeService.getValue('collapseDirective.fold');
                //     this.expandText = this.localeService.getValue('collapseDirective.expand');
                // }
                if (!this.parent.classList.contains('f-section-formgroup')) {
                    this.render.addClass(parent, 'f-section-formgroup');
                }
                this.generateLegendChildren();
                this.changeState();
                // 绑定收折事件
                this.clickEvent = this.click.bind(this);
                this.titleDiv.addEventListener('click', this.clickEvent);
                this.button.addEventListener('click', this.clickEvent);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        CollapseDirective.prototype.click = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.collapse = !this.collapse;
                this.changeState();
            };
        /**
         * @return {?}
         */
        CollapseDirective.prototype.changeState = /**
         * @return {?}
         */
            function () {
                if (this.collapse) {
                    this.render.addClass(this.parent, 'f-state-collapse');
                    // 按钮添加类
                    this.render.removeClass(this.button, 'f-state-expand');
                    if (this.expandText) {
                        this.span.innerHTML = this.expandText;
                    }
                }
                else {
                    this.render.removeClass(this.parent, 'f-state-collapse');
                    this.render.addClass(this.button, 'f-state-expand');
                    if (this.collapseText) {
                        this.span.innerHTML = this.collapseText;
                    }
                }
            };
        // 生成fieldset内部元素
        // 生成fieldset内部元素
        /**
         * @return {?}
         */
        CollapseDirective.prototype.generateLegendChildren =
            // 生成fieldset内部元素
            /**
             * @return {?}
             */
            function () {
                // 生成标题div
                this.titleDiv = this.render.createElement('div');
                this.titleText = this.render.createText(this.title);
                this.render.addClass(this.titleDiv, 'f-title');
                this.render.appendChild(this.titleDiv, this.titleText);
                // 生成header
                /** @type {?} */
                var header = this.render.createElement('div');
                this.render.addClass(header, 'f-header');
                // 生成toolbar div
                /** @type {?} */
                var toolbarDiv = this.render.createElement('div');
                this.render.addClass(toolbarDiv, 'f-toolbar');
                // 生成收折button
                this.button = this.render.createElement('button');
                this.render.addClass(this.button, 'btn');
                this.render.addClass(this.button, 'f-btn-collapse-expand');
                this.render.addClass(this.button, 'f-btn-mx');
                // 生成收折文本
                this.span = this.render.createElement('span');
                // 组合结构
                this.render.appendChild(this.button, this.span);
                this.render.appendChild(toolbarDiv, this.button);
                this.render.appendChild(header, this.titleDiv);
                this.render.appendChild(header, toolbarDiv);
                this.render.appendChild(this.el.nativeElement, header);
            };
        /**
         * @return {?}
         */
        CollapseDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.clickEvent) {
                    this.titleDiv.removeEventListener('click', this.clickEvent);
                    this.button.removeEventListener('click', this.clickEvent);
                }
            };
        CollapseDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisCollapse]'
                    },] }
        ];
        /** @nocollapse */
        CollapseDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: uiLocale.LocaleService }
            ];
        };
        CollapseDirective.propDecorators = {
            title: [{ type: core.Input }],
            collapse: [{ type: core.Input }],
            collapseText: [{ type: core.Input }],
            expandText: [{ type: core.Input }]
        };
        return CollapseDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RowComponent = /** @class */ (function () {
        function RowComponent() {
        }
        /**
         * @return {?}
         */
        RowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        RowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-row',
                        template: "<ng-content>\r\n</ng-content>\r\n",
                        // tslint:disable-next-line:use-host-property-decorator
                        host: {
                            class: 'form-row'
                        },
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RowComponent.ctorParameters = function () { return []; };
        return RowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormComponent = /** @class */ (function () {
        function FormComponent() {
        }
        /**
         * @return {?}
         */
        FormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        FormComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
            };
        FormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-form',
                        template: "<ng-content></ng-content>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        FormComponent.ctorParameters = function () { return []; };
        FormComponent.propDecorators = {
            arr: [{ type: core.ContentChildren, args: [RowComponent,] }]
        };
        return FormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TabIndexDirective = /** @class */ (function () {
        function TabIndexDirective(elRef, inject, render, editorRef) {
            this.elRef = elRef;
            this.inject = inject;
            this.render = render;
            this.editorRef = editorRef;
            this.input = 'INPUT';
            this.textarea = 'TEXTAREA';
            this.inputGroup = 'INPUT-GROUP';
            this.lookup = 'FARRIS-LOOKUP-GRID';
            this.comboLookup = 'FARRIS-COMBO-LOOKUP';
            this.comboList = 'FARRIS-COMBO-LIST';
            this.datepicker = 'FARRIS-DATEPICKER';
            this.timepicker = 'FARRIS-TIME-PICKER';
            this.numberSpinner = 'FARRIS-NUMBER-SPINNER';
            this.checkGroup = 'FARRIS-CHECKBOXGROUP';
            this.radioGroup = 'FARRIS-RADIOGROUP';
            this.switchCase = 'FARRIS-SWITCH';
            this.htmlEditor = 'FARRIS-EDITOR';
            this.colorPicker = 'COLOR-PICKER';
            this.langText = 'LANGUAGE-TEXTBOX';
            this.inputs = [this.input, this.textarea];
            this.farrisInputs = [this.inputGroup, this.lookup, this.comboList, this.colorPicker, this.langText,
                this.comboLookup, this.datepicker, this.timepicker, this.numberSpinner];
        }
        /**
         * @return {?}
         */
        TabIndexDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        TabIndexDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.updateTabIndex();
                }));
            };
        /**
         * @private
         * @return {?}
         */
        TabIndexDirective.prototype.updateTabIndex = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var el = this.elRef.nativeElement;
                if (this.tabIndex === '' || this.tabIndex === undefined || this.tabIndex === null) {
                    this.tabIndex = el.tabIndex !== undefined ? el.tabIndex : -1;
                }
                /** @type {?} */
                var tagName = el.tagName.toUpperCase();
                /** @type {?} */
                var inputEle = null;
                if (this.inputs.indexOf(tagName) > -1) {
                    inputEle = el;
                }
                else {
                    if (this.farrisInputs.indexOf(tagName) > -1) {
                        inputEle = el.querySelector('input');
                    }
                    if (tagName === this.htmlEditor) {
                        if (this.editorRef) {
                            this.editorRef.onInit.subscribe(( /**
                             * @return {?}
                             */function () {
                                inputEle = el.querySelector('iframe');
                                el.removeAttribute('tabindex');
                                inputEle.tabIndex = _this.tabIndex;
                            }));
                        }
                    }
                }
                if (inputEle) {
                    el.removeAttribute('tabindex');
                    inputEle.tabIndex = this.tabIndex;
                }
            };
        TabIndexDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[tab-index]',
                    },] }
        ];
        /** @nocollapse */
        TabIndexDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Injector },
                { type: core.Renderer2 },
                { type: uiEditor.EditorComponent, decorators: [{ type: core.Optional }, { type: core.Self }] }
            ];
        };
        TabIndexDirective.propDecorators = {
            tabIndex: [{ type: core.Input, args: ['tab-index',] }]
        };
        return TabIndexDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FieldGroupModule = /** @class */ (function () {
        function FieldGroupModule() {
        }
        FieldGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            uiLocale.LocaleModule
                        ],
                        declarations: [RowComponent, ColComponent, DragDirective, SwapDirective, ColDirective, FormComponent,
                            FoldDirective, CollapseDirective, TabIndexDirective],
                        exports: [RowComponent, ColComponent, DragDirective, SwapDirective, ColDirective, FormComponent,
                            FoldDirective, CollapseDirective, TabIndexDirective]
                    },] }
        ];
        return FieldGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ColComponent = ColComponent;
    exports.ColDirective = ColDirective;
    exports.DragDirective = DragDirective;
    exports.FoldDirective = FoldDirective;
    exports.SwapDirective = SwapDirective;
    exports.CollapseDirective = CollapseDirective;
    exports.FormComponent = FormComponent;
    exports.RowComponent = RowComponent;
    exports.FieldGroupModule = FieldGroupModule;
    exports.ɵa = TabIndexDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-field-group.umd.js.map