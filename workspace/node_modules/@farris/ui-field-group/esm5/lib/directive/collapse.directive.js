/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
var CollapseDirective = /** @class */ (function () {
    // fold
    /*  */
    function CollapseDirective(el, render, localeService) {
        this.el = el;
        this.render = render;
        this.localeService = localeService;
        /* 收折文本 */
        this.collapseText = '';
        /* 展开文本 */
        this.expandText = '';
        // this.collapseTemplate = collapseTemplate.templa;
    }
    /**
     * @return {?}
     */
    CollapseDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // if (!this.el.nativeElement.classList.contains('f-state-visible')) {
        //     this.render.addClass(this.el.nativeElement, 'f-state-visible');
        // }
    };
    /**
     * 当标题  收折文本变化时，视图随之变化
     * @param changeOption 变更变量集合
     */
    /**
     * 当标题  收折文本变化时，视图随之变化
     * @param {?} changeOption 变更变量集合
     * @return {?}
     */
    CollapseDirective.prototype.ngOnChanges = /**
     * 当标题  收折文本变化时，视图随之变化
     * @param {?} changeOption 变更变量集合
     * @return {?}
     */
    function (changeOption) {
        if (changeOption['title'] && this.titleDiv && this.titleText) {
            // 移除当前结构  重现渲染
            this.render.removeChild(this.titleDiv, this.titleText);
            this.titleText = this.render.createText(this.title);
            this.render.appendChild(this.titleDiv, this.titleText);
        }
        if ((changeOption['collapseText'] || changeOption['expandText']) && this.span) {
            if (this.collapse) {
                this.span.innerHTML = this.expandText;
            }
            else {
                this.span.innerHTML = this.collapseText;
            }
        }
    };
    /**
     * @return {?}
     */
    CollapseDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.parent = this.render.parentNode(this.el.nativeElement);
        // if (this.localeService) {
        //     this.collapseText = this.localeService.getValue('collapseDirective.fold');
        //     this.expandText = this.localeService.getValue('collapseDirective.expand');
        // }
        if (!this.parent.classList.contains('f-section-formgroup')) {
            this.render.addClass(parent, 'f-section-formgroup');
        }
        this.generateLegendChildren();
        this.changeState();
        // 绑定收折事件
        this.clickEvent = this.click.bind(this);
        this.titleDiv.addEventListener('click', this.clickEvent);
        this.button.addEventListener('click', this.clickEvent);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    CollapseDirective.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.collapse = !this.collapse;
        this.changeState();
    };
    /**
     * @return {?}
     */
    CollapseDirective.prototype.changeState = /**
     * @return {?}
     */
    function () {
        if (this.collapse) {
            this.render.addClass(this.parent, 'f-state-collapse');
            // 按钮添加类
            this.render.removeClass(this.button, 'f-state-expand');
            if (this.expandText) {
                this.span.innerHTML = this.expandText;
            }
        }
        else {
            this.render.removeClass(this.parent, 'f-state-collapse');
            this.render.addClass(this.button, 'f-state-expand');
            if (this.collapseText) {
                this.span.innerHTML = this.collapseText;
            }
        }
    };
    // 生成fieldset内部元素
    // 生成fieldset内部元素
    /**
     * @return {?}
     */
    CollapseDirective.prototype.generateLegendChildren = 
    // 生成fieldset内部元素
    /**
     * @return {?}
     */
    function () {
        // 生成标题div
        this.titleDiv = this.render.createElement('div');
        this.titleText = this.render.createText(this.title);
        this.render.addClass(this.titleDiv, 'f-title');
        this.render.appendChild(this.titleDiv, this.titleText);
        // 生成header
        /** @type {?} */
        var header = this.render.createElement('div');
        this.render.addClass(header, 'f-header');
        // 生成toolbar div
        /** @type {?} */
        var toolbarDiv = this.render.createElement('div');
        this.render.addClass(toolbarDiv, 'f-toolbar');
        // 生成收折button
        this.button = this.render.createElement('button');
        this.render.addClass(this.button, 'btn');
        this.render.addClass(this.button, 'f-btn-collapse-expand');
        this.render.addClass(this.button, 'f-btn-mx');
        // 生成收折文本
        this.span = this.render.createElement('span');
        // 组合结构
        this.render.appendChild(this.button, this.span);
        this.render.appendChild(toolbarDiv, this.button);
        this.render.appendChild(header, this.titleDiv);
        this.render.appendChild(header, toolbarDiv);
        this.render.appendChild(this.el.nativeElement, header);
    };
    /**
     * @return {?}
     */
    CollapseDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.clickEvent) {
            this.titleDiv.removeEventListener('click', this.clickEvent);
            this.button.removeEventListener('click', this.clickEvent);
        }
    };
    CollapseDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisCollapse]'
                },] }
    ];
    /** @nocollapse */
    CollapseDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LocaleService }
    ]; };
    CollapseDirective.propDecorators = {
        title: [{ type: Input }],
        collapse: [{ type: Input }],
        collapseText: [{ type: Input }],
        expandText: [{ type: Input }]
    };
    return CollapseDirective;
}());
export { CollapseDirective };
if (false) {
    /** @type {?} */
    CollapseDirective.prototype.title;
    /** @type {?} */
    CollapseDirective.prototype.collapse;
    /** @type {?} */
    CollapseDirective.prototype.collapseText;
    /** @type {?} */
    CollapseDirective.prototype.expandText;
    /** @type {?} */
    CollapseDirective.prototype.button;
    /** @type {?} */
    CollapseDirective.prototype.span;
    /** @type {?} */
    CollapseDirective.prototype.parent;
    /** @type {?} */
    CollapseDirective.prototype.titleDiv;
    /** @type {?} */
    CollapseDirective.prototype.clickEvent;
    /** @type {?} */
    CollapseDirective.prototype.titleText;
    /**
     * @type {?}
     * @private
     */
    CollapseDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CollapseDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    CollapseDirective.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,