/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Injector, Renderer2, Self, Optional } from '@angular/core';
import { EditorComponent } from '@farris/ui-editor';
/**
 * form 表单中输入组件的tab-index
 * Date: 2021-03-11
 * Creator: Lucas GOGO
 */
import { Directive, Input } from '@angular/core';
var TabIndexDirective = /** @class */ (function () {
    function TabIndexDirective(elRef, inject, render, editorRef) {
        this.elRef = elRef;
        this.inject = inject;
        this.render = render;
        this.editorRef = editorRef;
        this.input = 'INPUT';
        this.textarea = 'TEXTAREA';
        this.inputGroup = 'INPUT-GROUP';
        this.lookup = 'FARRIS-LOOKUP-GRID';
        this.comboLookup = 'FARRIS-COMBO-LOOKUP';
        this.comboList = 'FARRIS-COMBO-LIST';
        this.datepicker = 'FARRIS-DATEPICKER';
        this.timepicker = 'FARRIS-TIME-PICKER';
        this.numberSpinner = 'FARRIS-NUMBER-SPINNER';
        this.checkGroup = 'FARRIS-CHECKBOXGROUP';
        this.radioGroup = 'FARRIS-RADIOGROUP';
        this.switchCase = 'FARRIS-SWITCH';
        this.htmlEditor = 'FARRIS-EDITOR';
        this.colorPicker = 'COLOR-PICKER';
        this.langText = 'LANGUAGE-TEXTBOX';
        this.inputs = [this.input, this.textarea];
        this.farrisInputs = [this.inputGroup, this.lookup, this.comboList, this.colorPicker, this.langText,
            this.comboLookup, this.datepicker, this.timepicker, this.numberSpinner];
    }
    /**
     * @return {?}
     */
    TabIndexDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TabIndexDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.updateTabIndex();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TabIndexDirective.prototype.updateTabIndex = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var el = this.elRef.nativeElement;
        if (this.tabIndex === '' || this.tabIndex === undefined || this.tabIndex === null) {
            this.tabIndex = el.tabIndex !== undefined ? el.tabIndex : -1;
        }
        /** @type {?} */
        var tagName = el.tagName.toUpperCase();
        /** @type {?} */
        var inputEle = null;
        if (this.inputs.indexOf(tagName) > -1) {
            inputEle = el;
        }
        else {
            if (this.farrisInputs.indexOf(tagName) > -1) {
                inputEle = el.querySelector('input');
            }
            if (tagName === this.htmlEditor) {
                if (this.editorRef) {
                    this.editorRef.onInit.subscribe((/**
                     * @return {?}
                     */
                    function () {
                        inputEle = el.querySelector('iframe');
                        el.removeAttribute('tabindex');
                        inputEle.tabIndex = _this.tabIndex;
                    }));
                }
            }
        }
        if (inputEle) {
            el.removeAttribute('tabindex');
            inputEle.tabIndex = this.tabIndex;
        }
    };
    TabIndexDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tab-index]',
                },] }
    ];
    /** @nocollapse */
    TabIndexDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: Renderer2 },
        { type: EditorComponent, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    TabIndexDirective.propDecorators = {
        tabIndex: [{ type: Input, args: ['tab-index',] }]
    };
    return TabIndexDirective;
}());
export { TabIndexDirective };
if (false) {
    /** @type {?} */
    TabIndexDirective.prototype.tabIndex;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.input;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.textarea;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.inputGroup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.lookup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.comboLookup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.comboList;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.datepicker;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.timepicker;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.numberSpinner;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.checkGroup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.switchCase;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.htmlEditor;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.colorPicker;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.langText;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.inputs;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.farrisInputs;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.editorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWluZGV4LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmllbGQtZ3JvdXAvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlL3RhYi1pbmRleC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFVLFNBQVMsRUFBcUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7OztBQU9wRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRDtJQTJCSSwyQkFBb0IsS0FBaUIsRUFBVSxNQUFnQixFQUFVLE1BQWlCLEVBQ2xELFNBQTBCO1FBRDlDLFVBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNsRCxjQUFTLEdBQVQsU0FBUyxDQUFpQjtRQXRCMUQsVUFBSyxHQUFHLE9BQU8sQ0FBQztRQUNoQixhQUFRLEdBQUcsVUFBVSxDQUFDO1FBQ3RCLGVBQVUsR0FBRyxhQUFhLENBQUM7UUFDM0IsV0FBTSxHQUFHLG9CQUFvQixDQUFDO1FBQzlCLGdCQUFXLEdBQUcscUJBQXFCLENBQUM7UUFDcEMsY0FBUyxHQUFHLG1CQUFtQixDQUFDO1FBQ2hDLGVBQVUsR0FBRyxtQkFBbUIsQ0FBQztRQUNqQyxlQUFVLEdBQUcsb0JBQW9CLENBQUM7UUFDbEMsa0JBQWEsR0FBRyx1QkFBdUIsQ0FBQztRQUN4QyxlQUFVLEdBQUcsc0JBQXNCLENBQUM7UUFDcEMsZUFBVSxHQUFHLG1CQUFtQixDQUFDO1FBQ2pDLGVBQVUsR0FBRyxlQUFlLENBQUM7UUFDN0IsZUFBVSxHQUFHLGVBQWUsQ0FBQztRQUM3QixnQkFBVyxHQUFHLGNBQWMsQ0FBQztRQUM3Qixh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dUNBQTBDOzs7OztJQUMxQywwQ0FBZ0Q7Ozs7O0lBQ2hELHVDQUE0Qzs7Ozs7SUFDNUMsdUNBQXlDOzs7OztJQUN6Qyx1Q0FBcUM7Ozs7O0lBQ3JDLHVDQUFxQzs7Ozs7SUFDckMsd0NBQXFDOzs7OztJQUNyQyxxQ0FBc0M7Ozs7O0lBR3RDLG1DQUE2Qzs7Ozs7SUFDN0MseUNBQ2lHOzs7OztJQUVyRixrQ0FBeUI7Ozs7O0lBQUUsbUNBQXdCOzs7OztJQUFFLG1DQUF5Qjs7Ozs7SUFDOUUsc0NBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uSW5pdCwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBIb3N0LCBDb21wb25lbnRSZWYsIFNlbGYsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEVkaXRvckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZWRpdG9yJztcclxuXHJcbi8qKlxyXG4gKiBmb3JtIOihqOWNleS4rei+k+WFpee7hOS7tueahHRhYi1pbmRleFxyXG4gKiBEYXRlOiAyMDIxLTAzLTExXHJcbiAqIENyZWF0b3I6IEx1Y2FzIEdPR09cclxuICovXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbdGFiLWluZGV4XScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJJbmRleERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBASW5wdXQoJ3RhYi1pbmRleCcpIHRhYkluZGV4OiBudW1iZXIgfCBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSBpbnB1dCA9ICdJTlBVVCc7XHJcbiAgICBwcml2YXRlIHRleHRhcmVhID0gJ1RFWFRBUkVBJztcclxuICAgIHByaXZhdGUgaW5wdXRHcm91cCA9ICdJTlBVVC1HUk9VUCc7XHJcbiAgICBwcml2YXRlIGxvb2t1cCA9ICdGQVJSSVMtTE9PS1VQLUdSSUQnO1xyXG4gICAgcHJpdmF0ZSBjb21ib0xvb2t1cCA9ICdGQVJSSVMtQ09NQk8tTE9PS1VQJztcclxuICAgIHByaXZhdGUgY29tYm9MaXN0ID0gJ0ZBUlJJUy1DT01CTy1MSVNUJztcclxuICAgIHByaXZhdGUgZGF0ZXBpY2tlciA9ICdGQVJSSVMtREFURVBJQ0tFUic7XHJcbiAgICBwcml2YXRlIHRpbWVwaWNrZXIgPSAnRkFSUklTLVRJTUUtUElDS0VSJztcclxuICAgIHByaXZhdGUgbnVtYmVyU3Bpbm5lciA9ICdGQVJSSVMtTlVNQkVSLVNQSU5ORVInO1xyXG4gICAgcHJpdmF0ZSBjaGVja0dyb3VwID0gJ0ZBUlJJUy1DSEVDS0JPWEdST1VQJztcclxuICAgIHByaXZhdGUgcmFkaW9Hcm91cCA9ICdGQVJSSVMtUkFESU9HUk9VUCc7XHJcbiAgICBwcml2YXRlIHN3aXRjaENhc2UgPSAnRkFSUklTLVNXSVRDSCc7XHJcbiAgICBwcml2YXRlIGh0bWxFZGl0b3IgPSAnRkFSUklTLUVESVRPUic7XHJcbiAgICBwcml2YXRlIGNvbG9yUGlja2VyID0gJ0NPTE9SLVBJQ0tFUic7XHJcbiAgICBwcml2YXRlIGxhbmdUZXh0ID0gJ0xBTkdVQUdFLVRFWFRCT1gnO1xyXG5cclxuXHJcbiAgICBwcml2YXRlIGlucHV0cyA9IFt0aGlzLmlucHV0LCB0aGlzLnRleHRhcmVhXTtcclxuICAgIHByaXZhdGUgZmFycmlzSW5wdXRzID0gWyB0aGlzLmlucHV0R3JvdXAsIHRoaXMubG9va3VwLCB0aGlzLmNvbWJvTGlzdCwgdGhpcy5jb2xvclBpY2tlciwgdGhpcy5sYW5nVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tYm9Mb29rdXAsIHRoaXMuZGF0ZXBpY2tlciwgdGhpcy50aW1lcGlja2VyLCB0aGlzLm51bWJlclNwaW5uZXIgXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBAU2VsZigpIHByaXZhdGUgZWRpdG9yUmVmOiBFZGl0b3JDb21wb25lbnQpIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRhYkluZGV4KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVUYWJJbmRleCgpIHtcclxuICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBpZiAodGhpcy50YWJJbmRleCA9PT0gJycgfHwgdGhpcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMudGFiSW5kZXggPT09IG51bGwgKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFiSW5kZXggPSBlbC50YWJJbmRleCAhPT0gdW5kZWZpbmVkID8gZWwudGFiSW5kZXggOiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IGVsLnRhZ05hbWUudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICAgICAgbGV0IGlucHV0RWxlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRzLmluZGV4T2YodGFnTmFtZSkgPiAtMSkge1xyXG4gICAgICAgICAgICBpbnB1dEVsZSA9IGVsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZhcnJpc0lucHV0cy5pbmRleE9mKHRhZ05hbWUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0RWxlID0gZWwucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRhZ05hbWUgPT09IHRoaXMuaHRtbEVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWRpdG9yUmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JSZWYub25Jbml0LnN1YnNjcmliZSggKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RWxlLnRhYkluZGV4ID0gdGhpcy50YWJJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsZSkge1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XHJcbiAgICAgICAgICAgIGlucHV0RWxlLnRhYkluZGV4ID0gdGhpcy50YWJJbmRleDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==