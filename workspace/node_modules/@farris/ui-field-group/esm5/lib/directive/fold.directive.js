/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
var FoldDirective = /** @class */ (function () {
    function FoldDirective(el, render) {
        this.el = el;
        this.render = render;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    FoldDirective.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.target.localName === 'legend') {
            /** @type {?} */
            var legend = this.el.nativeElement.children[0];
            /** @type {?} */
            var div = this.el.nativeElement.children[1];
            if (legend.classList.contains('f-legend-collapse')) {
                // 处理 legend
                this.render.removeClass(legend, 'f-legend-collapse');
                this.render.addClass(legend, 'f-legend-show');
                // 处理div
                this.render.removeStyle(div, 'height');
                this.render.removeStyle(div, 'overflow');
            }
            else {
                // 处理 legend
                this.render.removeClass(legend, 'f-legend-show');
                this.render.addClass(legend, 'f-legend-collapse');
                // 处理div
                this.render.setStyle(div, 'height', '0px');
                this.render.setStyle(div, 'overflow', 'hidden');
            }
            this.render.addClass(legend, 'f-legend-icon');
        }
    };
    FoldDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisFold]'
                },] }
    ];
    /** @nocollapse */
    FoldDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FoldDirective.propDecorators = {
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FoldDirective;
}());
export { FoldDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FoldDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FoldDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpZWxkLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZS9mb2xkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRTtJQUtFLHVCQUFvQixFQUFjLEVBQVUsTUFBaUI7UUFBekMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7SUFBSSxDQUFDOzs7OztJQUUvQiw2QkFBSzs7OztJQUF4QyxVQUF5QyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFOztnQkFFN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7O2dCQUMxQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM3QyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7Z0JBQ2xELFlBQVk7Z0JBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFDOUMsUUFBUTtnQkFDUixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUMxQztpQkFBTTtnQkFDTCxZQUFZO2dCQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUM7Z0JBQ2xELFFBQVE7Z0JBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUNqRDtZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUM7O2dCQTdCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7aUJBQ3pCOzs7O2dCQUptQixVQUFVO2dCQUFnQixTQUFTOzs7d0JBU3BELFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBdUJuQyxvQkFBQztDQUFBLEFBOUJELElBOEJDO1NBM0JZLGFBQWE7Ozs7OztJQUVaLDJCQUFzQjs7Ozs7SUFBRSwrQkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmYXJyaXNGb2xkXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZvbGREaXJlY3RpdmUge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7IH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBjbGljayhlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQubG9jYWxOYW1lID09PSAnbGVnZW5kJykge1xyXG5cclxuICAgICAgY29uc3QgbGVnZW5kID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdO1xyXG4gICAgICBjb25zdCBkaXYgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMV07XHJcbiAgICAgIGlmIChsZWdlbmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmLWxlZ2VuZC1jb2xsYXBzZScpKSB7XHJcbiAgICAgICAgLy8g5aSE55CGIGxlZ2VuZFxyXG4gICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKGxlZ2VuZCwgJ2YtbGVnZW5kLWNvbGxhcHNlJyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3MobGVnZW5kLCAnZi1sZWdlbmQtc2hvdycpO1xyXG4gICAgICAgIC8vIOWkhOeQhmRpdlxyXG4gICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZVN0eWxlKGRpdiwgJ2hlaWdodCcpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZVN0eWxlKGRpdiwgJ292ZXJmbG93Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8g5aSE55CGIGxlZ2VuZFxyXG4gICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKGxlZ2VuZCwgJ2YtbGVnZW5kLXNob3cnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyhsZWdlbmQsICdmLWxlZ2VuZC1jb2xsYXBzZScpO1xyXG4gICAgICAgIC8vIOWkhOeQhmRpdlxyXG4gICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKGRpdiwgJ2hlaWdodCcsICcwcHgnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZShkaXYsICdvdmVyZmxvdycsICdoaWRkZW4nKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyhsZWdlbmQsICdmLWxlZ2VuZC1pY29uJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==