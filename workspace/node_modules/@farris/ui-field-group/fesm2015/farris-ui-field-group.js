import { CommonModule } from '@angular/common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { Component, Directive, ElementRef, Renderer2, HostListener, Input, ContentChildren, Injector, Self, Optional, NgModule } from '@angular/core';
import { EditorComponent } from '@farris/ui-editor';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ColComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-col',
                template: "<ng-content></ng-content>\r\n",
                // tslint:disable-next-line:use-host-property-decorator
                host: {
                    class: 'col-md'
                },
                styles: [""]
            }] }
];
/** @nocollapse */
ColComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        /** @type {?} */
        const screenWidth = window.screen.width;
        if (screenWidth < 576) {
            this.el.nativeElement.setAttribute('class', 'col');
        }
        else if (screenWidth >= 567 && screenWidth < 768) {
            this.el.nativeElement.setAttribute('class', 'col-sm');
        }
        else if (screenWidth >= 768 && screenWidth < 1366) {
            this.el.nativeElement.setAttribute('class', 'col-md');
        }
        else if (screenWidth >= 1366 && screenWidth < 1920) {
            this.el.nativeElement.setAttribute('class', 'col-lg');
        }
        else if (screenWidth >= 1920) {
            this.el.nativeElement.setAttribute('class', 'col-xl');
        }
    }
}
ColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appCol]'
            },] }
];
/** @nocollapse */
ColDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DragDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.isDown = false;
        // 记录鼠标点击事件的位置 Y
        this.totalOffsetX = 0; // 记录总偏移量 X轴
        // 记录总偏移量 X轴
        this.totalOffsetY = 0; // 记录总偏移量 Y轴
    }
    // 记录总偏移量 Y轴
    // 点击事件
    /**
     * @param {?} event
     * @return {?}
     */
    onMousedown(event) {
        this.isDown = true;
        this.disX = event.clientX;
        this.disY = event.clientY;
    }
    // 监听document移动事件事件
    /**
     * @param {?} event
     * @return {?}
     */
    onMousemove(event) {
        // 判断该元素是否被点击了。
        if (this.isDown) {
            this.el.nativeElement.style.left = this.totalOffsetX + event.clientX - this.disX + 'px';
            this.el.nativeElement.style.top = this.totalOffsetY + event.clientY - this.disY + 'px';
        }
    }
    // 监听document离开事件
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseup(event) {
        // 只用当元素移动过了，离开函数体才会触发。
        if (this.isDown) {
            this.totalOffsetX += event.clientX - this.disX;
            this.totalOffsetY += event.clientY - this.disY;
            this.isDown = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.el.nativeElement.style.position = 'relative';
    }
}
DragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appDrag]'
            },] }
];
/** @nocollapse */
DragDirective.ctorParameters = () => [
    { type: ElementRef }
];
DragDirective.propDecorators = {
    onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onMousemove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }],
    onMouseup: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FoldDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
        if (e.target.localName === 'legend') {
            /** @type {?} */
            const legend = this.el.nativeElement.children[0];
            /** @type {?} */
            const div = this.el.nativeElement.children[1];
            if (legend.classList.contains('f-legend-collapse')) {
                // 处理 legend
                this.render.removeClass(legend, 'f-legend-collapse');
                this.render.addClass(legend, 'f-legend-show');
                // 处理div
                this.render.removeStyle(div, 'height');
                this.render.removeStyle(div, 'overflow');
            }
            else {
                // 处理 legend
                this.render.removeClass(legend, 'f-legend-show');
                this.render.addClass(legend, 'f-legend-collapse');
                // 处理div
                this.render.setStyle(div, 'height', '0px');
                this.render.setStyle(div, 'overflow', 'hidden');
            }
            this.render.addClass(legend, 'f-legend-icon');
        }
    }
}
FoldDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisFold]'
            },] }
];
/** @nocollapse */
FoldDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FoldDirective.propDecorators = {
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 交换位置指令
 */
class SwapDirective extends DragDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
        this.el = el;
    }
    /*获取元素绝对位置的纵坐标*/
    /**
     * @param {?} e
     * @return {?}
     */
    getTop(e) {
        /** @type {?} */
        let offset = e.offsetTop;
        if (e.offsetParent) {
            offset += this.getTop(e.offsetParent);
        }
        return offset;
    }
    /*获取元素绝对位置的横坐标*/
    /**
     * @param {?} e
     * @return {?}
     */
    getLeft(e) {
        /** @type {?} */
        let offset = e.offsetLeft;
        // console.log(offset);
        if (e.offsetParent) {
            offset += this.getLeft(e.offsetParent);
        }
        return offset;
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
    }
}
// tslint:disable-next-line:member-ordering
/**
 * 存放所有指令位置
 */
SwapDirective.elList = new Array(Map);
SwapDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appSwap]'
            },] }
];
/** @nocollapse */
SwapDirective.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CollapseDirective {
    // fold
    /*  */
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} localeService
     */
    constructor(el, render, localeService) {
        this.el = el;
        this.render = render;
        this.localeService = localeService;
        /* 收折文本 */
        this.collapseText = '';
        /* 展开文本 */
        this.expandText = '';
        // this.collapseTemplate = collapseTemplate.templa;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // if (!this.el.nativeElement.classList.contains('f-state-visible')) {
        //     this.render.addClass(this.el.nativeElement, 'f-state-visible');
        // }
    }
    /**
     * 当标题  收折文本变化时，视图随之变化
     * @param {?} changeOption 变更变量集合
     * @return {?}
     */
    ngOnChanges(changeOption) {
        if (changeOption['title'] && this.titleDiv && this.titleText) {
            // 移除当前结构  重现渲染
            this.render.removeChild(this.titleDiv, this.titleText);
            this.titleText = this.render.createText(this.title);
            this.render.appendChild(this.titleDiv, this.titleText);
        }
        if ((changeOption['collapseText'] || changeOption['expandText']) && this.span) {
            if (this.collapse) {
                this.span.innerHTML = this.expandText;
            }
            else {
                this.span.innerHTML = this.collapseText;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.parent = this.render.parentNode(this.el.nativeElement);
        // if (this.localeService) {
        //     this.collapseText = this.localeService.getValue('collapseDirective.fold');
        //     this.expandText = this.localeService.getValue('collapseDirective.expand');
        // }
        if (!this.parent.classList.contains('f-section-formgroup')) {
            this.render.addClass(parent, 'f-section-formgroup');
        }
        this.generateLegendChildren();
        this.changeState();
        // 绑定收折事件
        this.clickEvent = this.click.bind(this);
        this.titleDiv.addEventListener('click', this.clickEvent);
        this.button.addEventListener('click', this.clickEvent);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
        this.collapse = !this.collapse;
        this.changeState();
    }
    /**
     * @return {?}
     */
    changeState() {
        if (this.collapse) {
            this.render.addClass(this.parent, 'f-state-collapse');
            // 按钮添加类
            this.render.removeClass(this.button, 'f-state-expand');
            if (this.expandText) {
                this.span.innerHTML = this.expandText;
            }
        }
        else {
            this.render.removeClass(this.parent, 'f-state-collapse');
            this.render.addClass(this.button, 'f-state-expand');
            if (this.collapseText) {
                this.span.innerHTML = this.collapseText;
            }
        }
    }
    // 生成fieldset内部元素
    /**
     * @return {?}
     */
    generateLegendChildren() {
        // 生成标题div
        this.titleDiv = this.render.createElement('div');
        this.titleText = this.render.createText(this.title);
        this.render.addClass(this.titleDiv, 'f-title');
        this.render.appendChild(this.titleDiv, this.titleText);
        // 生成header
        /** @type {?} */
        const header = this.render.createElement('div');
        this.render.addClass(header, 'f-header');
        // 生成toolbar div
        /** @type {?} */
        const toolbarDiv = this.render.createElement('div');
        this.render.addClass(toolbarDiv, 'f-toolbar');
        // 生成收折button
        this.button = this.render.createElement('button');
        this.render.addClass(this.button, 'btn');
        this.render.addClass(this.button, 'f-btn-collapse-expand');
        this.render.addClass(this.button, 'f-btn-mx');
        // 生成收折文本
        this.span = this.render.createElement('span');
        // 组合结构
        this.render.appendChild(this.button, this.span);
        this.render.appendChild(toolbarDiv, this.button);
        this.render.appendChild(header, this.titleDiv);
        this.render.appendChild(header, toolbarDiv);
        this.render.appendChild(this.el.nativeElement, header);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.clickEvent) {
            this.titleDiv.removeEventListener('click', this.clickEvent);
            this.button.removeEventListener('click', this.clickEvent);
        }
    }
}
CollapseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisCollapse]'
            },] }
];
/** @nocollapse */
CollapseDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LocaleService }
];
CollapseDirective.propDecorators = {
    title: [{ type: Input }],
    collapse: [{ type: Input }],
    collapseText: [{ type: Input }],
    expandText: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RowComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
RowComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-row',
                template: "<ng-content>\r\n</ng-content>\r\n",
                // tslint:disable-next-line:use-host-property-decorator
                host: {
                    class: 'form-row'
                },
                styles: [""]
            }] }
];
/** @nocollapse */
RowComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
}
FormComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-form',
                template: "<ng-content></ng-content>",
                styles: [""]
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [];
FormComponent.propDecorators = {
    arr: [{ type: ContentChildren, args: [RowComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TabIndexDirective {
    /**
     * @param {?} elRef
     * @param {?} inject
     * @param {?} render
     * @param {?} editorRef
     */
    constructor(elRef, inject, render, editorRef) {
        this.elRef = elRef;
        this.inject = inject;
        this.render = render;
        this.editorRef = editorRef;
        this.input = 'INPUT';
        this.textarea = 'TEXTAREA';
        this.inputGroup = 'INPUT-GROUP';
        this.lookup = 'FARRIS-LOOKUP-GRID';
        this.comboLookup = 'FARRIS-COMBO-LOOKUP';
        this.comboList = 'FARRIS-COMBO-LIST';
        this.datepicker = 'FARRIS-DATEPICKER';
        this.timepicker = 'FARRIS-TIME-PICKER';
        this.numberSpinner = 'FARRIS-NUMBER-SPINNER';
        this.checkGroup = 'FARRIS-CHECKBOXGROUP';
        this.radioGroup = 'FARRIS-RADIOGROUP';
        this.switchCase = 'FARRIS-SWITCH';
        this.htmlEditor = 'FARRIS-EDITOR';
        this.colorPicker = 'COLOR-PICKER';
        this.langText = 'LANGUAGE-TEXTBOX';
        this.inputs = [this.input, this.textarea];
        this.farrisInputs = [this.inputGroup, this.lookup, this.comboList, this.colorPicker, this.langText,
            this.comboLookup, this.datepicker, this.timepicker, this.numberSpinner];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.updateTabIndex();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    updateTabIndex() {
        /** @type {?} */
        const el = this.elRef.nativeElement;
        if (this.tabIndex === '' || this.tabIndex === undefined || this.tabIndex === null) {
            this.tabIndex = el.tabIndex !== undefined ? el.tabIndex : -1;
        }
        /** @type {?} */
        const tagName = el.tagName.toUpperCase();
        /** @type {?} */
        let inputEle = null;
        if (this.inputs.indexOf(tagName) > -1) {
            inputEle = el;
        }
        else {
            if (this.farrisInputs.indexOf(tagName) > -1) {
                inputEle = el.querySelector('input');
            }
            if (tagName === this.htmlEditor) {
                if (this.editorRef) {
                    this.editorRef.onInit.subscribe((/**
                     * @return {?}
                     */
                    () => {
                        inputEle = el.querySelector('iframe');
                        el.removeAttribute('tabindex');
                        inputEle.tabIndex = this.tabIndex;
                    }));
                }
            }
        }
        if (inputEle) {
            el.removeAttribute('tabindex');
            inputEle.tabIndex = this.tabIndex;
        }
    }
}
TabIndexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tab-index]',
            },] }
];
/** @nocollapse */
TabIndexDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: Renderer2 },
    { type: EditorComponent, decorators: [{ type: Optional }, { type: Self }] }
];
TabIndexDirective.propDecorators = {
    tabIndex: [{ type: Input, args: ['tab-index',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FieldGroupModule {
}
FieldGroupModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    LocaleModule
                ],
                declarations: [RowComponent, ColComponent, DragDirective, SwapDirective, ColDirective, FormComponent,
                    FoldDirective, CollapseDirective, TabIndexDirective],
                exports: [RowComponent, ColComponent, DragDirective, SwapDirective, ColDirective, FormComponent,
                    FoldDirective, CollapseDirective, TabIndexDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ColComponent, ColDirective, DragDirective, FoldDirective, SwapDirective, CollapseDirective, FormComponent, RowComponent, FieldGroupModule, TabIndexDirective as ɵa };

//# sourceMappingURL=farris-ui-field-group.js.map