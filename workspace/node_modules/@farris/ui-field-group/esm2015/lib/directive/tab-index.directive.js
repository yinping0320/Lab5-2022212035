/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Injector, Renderer2, Self, Optional } from '@angular/core';
import { EditorComponent } from '@farris/ui-editor';
/**
 * form 表单中输入组件的tab-index
 * Date: 2021-03-11
 * Creator: Lucas GOGO
 */
import { Directive, Input } from '@angular/core';
export class TabIndexDirective {
    /**
     * @param {?} elRef
     * @param {?} inject
     * @param {?} render
     * @param {?} editorRef
     */
    constructor(elRef, inject, render, editorRef) {
        this.elRef = elRef;
        this.inject = inject;
        this.render = render;
        this.editorRef = editorRef;
        this.input = 'INPUT';
        this.textarea = 'TEXTAREA';
        this.inputGroup = 'INPUT-GROUP';
        this.lookup = 'FARRIS-LOOKUP-GRID';
        this.comboLookup = 'FARRIS-COMBO-LOOKUP';
        this.comboList = 'FARRIS-COMBO-LIST';
        this.datepicker = 'FARRIS-DATEPICKER';
        this.timepicker = 'FARRIS-TIME-PICKER';
        this.numberSpinner = 'FARRIS-NUMBER-SPINNER';
        this.checkGroup = 'FARRIS-CHECKBOXGROUP';
        this.radioGroup = 'FARRIS-RADIOGROUP';
        this.switchCase = 'FARRIS-SWITCH';
        this.htmlEditor = 'FARRIS-EDITOR';
        this.colorPicker = 'COLOR-PICKER';
        this.langText = 'LANGUAGE-TEXTBOX';
        this.inputs = [this.input, this.textarea];
        this.farrisInputs = [this.inputGroup, this.lookup, this.comboList, this.colorPicker, this.langText,
            this.comboLookup, this.datepicker, this.timepicker, this.numberSpinner];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.updateTabIndex();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    updateTabIndex() {
        /** @type {?} */
        const el = this.elRef.nativeElement;
        if (this.tabIndex === '' || this.tabIndex === undefined || this.tabIndex === null) {
            this.tabIndex = el.tabIndex !== undefined ? el.tabIndex : -1;
        }
        /** @type {?} */
        const tagName = el.tagName.toUpperCase();
        /** @type {?} */
        let inputEle = null;
        if (this.inputs.indexOf(tagName) > -1) {
            inputEle = el;
        }
        else {
            if (this.farrisInputs.indexOf(tagName) > -1) {
                inputEle = el.querySelector('input');
            }
            if (tagName === this.htmlEditor) {
                if (this.editorRef) {
                    this.editorRef.onInit.subscribe((/**
                     * @return {?}
                     */
                    () => {
                        inputEle = el.querySelector('iframe');
                        el.removeAttribute('tabindex');
                        inputEle.tabIndex = this.tabIndex;
                    }));
                }
            }
        }
        if (inputEle) {
            el.removeAttribute('tabindex');
            inputEle.tabIndex = this.tabIndex;
        }
    }
}
TabIndexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tab-index]',
            },] }
];
/** @nocollapse */
TabIndexDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: Renderer2 },
    { type: EditorComponent, decorators: [{ type: Optional }, { type: Self }] }
];
TabIndexDirective.propDecorators = {
    tabIndex: [{ type: Input, args: ['tab-index',] }]
};
if (false) {
    /** @type {?} */
    TabIndexDirective.prototype.tabIndex;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.input;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.textarea;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.inputGroup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.lookup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.comboLookup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.comboList;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.datepicker;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.timepicker;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.numberSpinner;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.checkGroup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.switchCase;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.htmlEditor;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.colorPicker;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.langText;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.inputs;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.farrisInputs;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TabIndexDirective.prototype.editorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWluZGV4LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmllbGQtZ3JvdXAvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlL3RhYi1pbmRleC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFVLFNBQVMsRUFBcUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7OztBQU9wRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtqRCxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7O0lBd0IxQixZQUFvQixLQUFpQixFQUFVLE1BQWdCLEVBQVUsTUFBaUIsRUFDbEQsU0FBMEI7UUFEOUMsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2xELGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBdEIxRCxVQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxVQUFVLENBQUM7UUFDdEIsZUFBVSxHQUFHLGFBQWEsQ0FBQztRQUMzQixXQUFNLEdBQUcsb0JBQW9CLENBQUM7UUFDOUIsZ0JBQVcsR0FBRyxxQkFBcUIsQ0FBQztRQUNwQyxjQUFTLEdBQUcsbUJBQW1CLENBQUM7UUFDaEMsZUFBVSxHQUFHLG1CQUFtQixDQUFDO1FBQ2pDLGVBQVUsR0FBRyxvQkFBb0IsQ0FBQztRQUNsQyxrQkFBYSxHQUFHLHVCQUF1QixDQUFDO1FBQ3hDLGVBQVUsR0FBRyxzQkFBc0IsQ0FBQztRQUNwQyxlQUFVLEdBQUcsbUJBQW1CLENBQUM7UUFDakMsZUFBVSxHQUFHLGVBQWUsQ0FBQztRQUM3QixlQUFVLEdBQUcsZUFBZSxDQUFDO1FBQzdCLGdCQUFX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eUM7Ozs7O0lBQ3pDLHVDQUFxQzs7Ozs7SUFDckMsdUNBQXFDOzs7OztJQUNyQyx3Q0FBcUM7Ozs7O0lBQ3JDLHFDQUFzQzs7Ozs7SUFHdEMsbUNBQTZDOzs7OztJQUM3Qyx5Q0FDaUc7Ozs7O0lBRXJGLGtDQUF5Qjs7Ozs7SUFBRSxtQ0FBd0I7Ozs7O0lBQUUsbUNBQXlCOzs7OztJQUM5RSxzQ0FBc0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3RvciwgT25Jbml0LCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIEhvc3QsIENvbXBvbmVudFJlZiwgU2VsZiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1lZGl0b3InO1xyXG5cclxuLyoqXHJcbiAqIGZvcm0g6KGo5Y2V5Lit6L6T5YWl57uE5Lu255qEdGFiLWluZGV4XHJcbiAqIERhdGU6IDIwMjEtMDMtMTFcclxuICogQ3JlYXRvcjogTHVjYXMgR09HT1xyXG4gKi9cclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1t0YWItaW5kZXhdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYkluZGV4RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIEBJbnB1dCgndGFiLWluZGV4JykgdGFiSW5kZXg6IG51bWJlciB8IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIGlucHV0ID0gJ0lOUFVUJztcclxuICAgIHByaXZhdGUgdGV4dGFyZWEgPSAnVEVYVEFSRUEnO1xyXG4gICAgcHJpdmF0ZSBpbnB1dEdyb3VwID0gJ0lOUFVULUdST1VQJztcclxuICAgIHByaXZhdGUgbG9va3VwID0gJ0ZBUlJJUy1MT09LVVAtR1JJRCc7XHJcbiAgICBwcml2YXRlIGNvbWJvTG9va3VwID0gJ0ZBUlJJUy1DT01CTy1MT09LVVAnO1xyXG4gICAgcHJpdmF0ZSBjb21ib0xpc3QgPSAnRkFSUklTLUNPTUJPLUxJU1QnO1xyXG4gICAgcHJpdmF0ZSBkYXRlcGlja2VyID0gJ0ZBUlJJUy1EQVRFUElDS0VSJztcclxuICAgIHByaXZhdGUgdGltZXBpY2tlciA9ICdGQVJSSVMtVElNRS1QSUNLRVInO1xyXG4gICAgcHJpdmF0ZSBudW1iZXJTcGlubmVyID0gJ0ZBUlJJUy1OVU1CRVItU1BJTk5FUic7XHJcbiAgICBwcml2YXRlIGNoZWNrR3JvdXAgPSAnRkFSUklTLUNIRUNLQk9YR1JPVVAnO1xyXG4gICAgcHJpdmF0ZSByYWRpb0dyb3VwID0gJ0ZBUlJJUy1SQURJT0dST1VQJztcclxuICAgIHByaXZhdGUgc3dpdGNoQ2FzZSA9ICdGQVJSSVMtU1dJVENIJztcclxuICAgIHByaXZhdGUgaHRtbEVkaXRvciA9ICdGQVJSSVMtRURJVE9SJztcclxuICAgIHByaXZhdGUgY29sb3JQaWNrZXIgPSAnQ09MT1ItUElDS0VSJztcclxuICAgIHByaXZhdGUgbGFuZ1RleHQgPSAnTEFOR1VBR0UtVEVYVEJPWCc7XHJcblxyXG5cclxuICAgIHByaXZhdGUgaW5wdXRzID0gW3RoaXMuaW5wdXQsIHRoaXMudGV4dGFyZWFdO1xyXG4gICAgcHJpdmF0ZSBmYXJyaXNJbnB1dHMgPSBbIHRoaXMuaW5wdXRHcm91cCwgdGhpcy5sb29rdXAsIHRoaXMuY29tYm9MaXN0LCB0aGlzLmNvbG9yUGlja2VyLCB0aGlzLmxhbmdUZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21ib0xvb2t1cCwgdGhpcy5kYXRlcGlja2VyLCB0aGlzLnRpbWVwaWNrZXIsIHRoaXMubnVtYmVyU3Bpbm5lciBdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgaW5qZWN0OiBJbmplY3RvciwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMixcclxuICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgcHJpdmF0ZSBlZGl0b3JSZWY6IEVkaXRvckNvbXBvbmVudCkge31cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVGFiSW5kZXgoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVRhYkluZGV4KCkge1xyXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIGlmICh0aGlzLnRhYkluZGV4ID09PSAnJyB8fCB0aGlzLnRhYkluZGV4ID09PSB1bmRlZmluZWQgfHwgdGhpcy50YWJJbmRleCA9PT0gbnVsbCApIHtcclxuICAgICAgICAgICAgdGhpcy50YWJJbmRleCA9IGVsLnRhYkluZGV4ICE9PSB1bmRlZmluZWQgPyBlbC50YWJJbmRleCA6IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0YWdOYW1lID0gZWwudGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuICAgICAgICBsZXQgaW5wdXRFbGUgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnB1dHMuaW5kZXhPZih0YWdOYW1lKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIGlucHV0RWxlID0gZWw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmFycmlzSW5wdXRzLmluZGV4T2YodGFnTmFtZSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbGUgPSBlbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gdGhpcy5odG1sRWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lZGl0b3JSZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvclJlZi5vbkluaXQuc3Vic2NyaWJlKCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RWxlID0gZWwucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGUudGFiSW5kZXggPSB0aGlzLnRhYkluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlucHV0RWxlKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcclxuICAgICAgICAgICAgaW5wdXRFbGUudGFiSW5kZXggPSB0aGlzLnRhYkluZGV4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIl19