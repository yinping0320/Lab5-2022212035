/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
export class FoldDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
        if (e.target.localName === 'legend') {
            /** @type {?} */
            const legend = this.el.nativeElement.children[0];
            /** @type {?} */
            const div = this.el.nativeElement.children[1];
            if (legend.classList.contains('f-legend-collapse')) {
                // 处理 legend
                this.render.removeClass(legend, 'f-legend-collapse');
                this.render.addClass(legend, 'f-legend-show');
                // 处理div
                this.render.removeStyle(div, 'height');
                this.render.removeStyle(div, 'overflow');
            }
            else {
                // 处理 legend
                this.render.removeClass(legend, 'f-legend-show');
                this.render.addClass(legend, 'f-legend-collapse');
                // 处理div
                this.render.setStyle(div, 'height', '0px');
                this.render.setStyle(div, 'overflow', 'hidden');
            }
            this.render.addClass(legend, 'f-legend-icon');
        }
    }
}
FoldDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisFold]'
            },] }
];
/** @nocollapse */
FoldDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FoldDirective.propDecorators = {
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FoldDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FoldDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpZWxkLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZS9mb2xkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUsvRSxNQUFNLE9BQU8sYUFBYTs7Ozs7SUFFeEIsWUFBb0IsRUFBYyxFQUFVLE1BQWlCO1FBQXpDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO0lBQUksQ0FBQzs7Ozs7SUFFL0IsS0FBSyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7O2tCQUU3QixNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs7a0JBQzFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsRUFBRTtnQkFDbEQsWUFBWTtnQkFDWixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztnQkFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2dCQUM5QyxRQUFRO2dCQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzFDO2lCQUFNO2dCQUNMLFlBQVk7Z0JBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztnQkFDbEQsUUFBUTtnQkFDUixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ2pEO1lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQzs7O1lBN0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7OztZQUptQixVQUFVO1lBQWdCLFNBQVM7OztvQkFTcEQsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztJQUZyQiwyQkFBc0I7Ozs7O0lBQUUsK0JBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZmFycmlzRm9sZF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb2xkRGlyZWN0aXZlIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMikgeyB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSkgY2xpY2soZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0LmxvY2FsTmFtZSA9PT0gJ2xlZ2VuZCcpIHtcclxuXHJcbiAgICAgIGNvbnN0IGxlZ2VuZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXTtcclxuICAgICAgY29uc3QgZGl2ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzFdO1xyXG4gICAgICBpZiAobGVnZW5kLmNsYXNzTGlzdC5jb250YWlucygnZi1sZWdlbmQtY29sbGFwc2UnKSkge1xyXG4gICAgICAgIC8vIOWkhOeQhiBsZWdlbmRcclxuICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyhsZWdlbmQsICdmLWxlZ2VuZC1jb2xsYXBzZScpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKGxlZ2VuZCwgJ2YtbGVnZW5kLXNob3cnKTtcclxuICAgICAgICAvLyDlpITnkIZkaXZcclxuICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVTdHlsZShkaXYsICdoZWlnaHQnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVTdHlsZShkaXYsICdvdmVyZmxvdycpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIOWkhOeQhiBsZWdlbmRcclxuICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyhsZWdlbmQsICdmLWxlZ2VuZC1zaG93Jyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3MobGVnZW5kLCAnZi1sZWdlbmQtY29sbGFwc2UnKTtcclxuICAgICAgICAvLyDlpITnkIZkaXZcclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZShkaXYsICdoZWlnaHQnLCAnMHB4Jyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUoZGl2LCAnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3MobGVnZW5kLCAnZi1sZWdlbmQtaWNvbicpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=