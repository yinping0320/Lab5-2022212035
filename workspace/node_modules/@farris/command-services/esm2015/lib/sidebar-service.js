import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FarrisSidebarService } from '@farris/ui-sidebar';
import { FrameContext } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
/**
 * 侧边栏服务
 * @scope FrameComponent
 */
class SidebarService {
    constructor(frameContext, sidebarUIService, messageService, languageService) {
        this.frameContext = frameContext;
        this.sidebarUIService = sidebarUIService;
        this.messageService = messageService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    get repository() {
        return this.frameContext.repository;
    }
    openSidebar() {
        this.sidebarUIService.sendIsOpen(true);
    }
    closeSidebar() {
        this.sidebarUIService.sendIsOpen(false);
    }
    /**
     * 关闭前先取消变更
     */
    confirmBeforeClosingSidebar() {
        // 检查是否有变更，没有变更直接关闭
        const ifChangesExist = this.repository.entityManager.checkAllEntityChanges();
        if (!ifChangesExist) {
            return of(true);
        }
        // 确认是否关闭
        const confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);
        const result$ = confirm$.pipe(switchMap((confirmResult) => {
            if (confirmResult === false) {
                return of(false);
            }
            else {
                return of(true);
            }
        }));
        return result$;
    }
    /**
     * 继续关闭侧边栏
     */
    continueClosingSidebar() {
        return of(true);
    }
    /**
     * 阻止侧边栏关闭
     */
    stopClosingSidebar() {
        return of(false);
    }
}
SidebarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SidebarService.ctorParameters = () => [
    { type: FrameContext },
    { type: FarrisSidebarService },
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { SidebarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3NpZGViYXItc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLEVBQVUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR3BEOzs7R0FHRztBQUNILE1BQ00sY0FBYztJQU1sQixZQUNVLFlBQTBCLEVBQzFCLGdCQUFzQyxFQUN0QyxjQUFrQyxFQUN0QixlQUFnQztRQUg1QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXNCO1FBQ3RDLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUN0QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBYkQsSUFBWSxVQUFVO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFtQyxDQUFDO0lBQy9ELENBQUM7SUFhRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQTJCO1FBRXpCLG1CQUFtQjtRQUNuQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFFRCxTQUFTO1FBQ1QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDdkYsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FDM0IsU0FBUyxDQUFDLENBQUMsYUFBc0IsRUFBRSxFQUFFO1lBQ25DLElBQUksYUFBYSxLQUFLLEtBQUssRUFBRTtnQkFDM0IsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakI7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0JBQXNCO1FBQzNCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNJLGtCQUFrQjtRQUN2QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDOzs7WUFoRUYsVUFBVTs7OztZQVZNLFlBQVk7WUFEcEIsb0JBQW9CO1lBR3BCLGtCQUFrQjtZQUNsQixlQUFlLHVCQWtCbkIsUUFBUTs7QUF3RGIsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGYXJyaXNTaWRlYmFyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktc2lkZWJhcic7XHJcbmltcG9ydCB7IEVudGl0eSwgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbWVzc2FnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDkvqfovrnmoI/mnI3liqFcclxuICogQHNjb3BlIEZyYW1lQ29tcG9uZW50XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFNpZGViYXJTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBnZXQgcmVwb3NpdG9yeSgpOiBCZWZSZXBvc2l0b3J5PEVudGl0eT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxFbnRpdHk+O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgcHJpdmF0ZSBzaWRlYmFyVUlTZXJ2aWNlOiBGYXJyaXNTaWRlYmFyU2VydmljZSxcclxuICAgIHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgKSB7XHJcbiAgICBpZiAoIXRoaXMubGFuZ3VhZ2VTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvcGVuU2lkZWJhcigpIHtcclxuICAgIHRoaXMuc2lkZWJhclVJU2VydmljZS5zZW5kSXNPcGVuKHRydWUpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VTaWRlYmFyKCkge1xyXG4gICAgdGhpcy5zaWRlYmFyVUlTZXJ2aWNlLnNlbmRJc09wZW4oZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YWz6Zet5YmN5YWI5Y+W5raI5Y+Y5pu0XHJcbiAgICovXHJcbiAgY29uZmlybUJlZm9yZUNsb3NpbmdTaWRlYmFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG5cclxuICAgIC8vIOajgOafpeaYr+WQpuacieWPmOabtO+8jOayoeacieWPmOabtOebtOaOpeWFs+mXrVxyXG4gICAgY29uc3QgaWZDaGFuZ2VzRXhpc3QgPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5jaGVja0FsbEVudGl0eUNoYW5nZXMoKTtcclxuICAgIGlmICghaWZDaGFuZ2VzRXhpc3QpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOehruiupOaYr+WQpuWFs+mXrVxyXG4gICAgY29uc3QgY29uZmlybSQgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLnF1ZXN0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydleGl0V2l0aG91dFNhdmUnXSk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gY29uZmlybSQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChjb25maXJtUmVzdWx0OiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbmZpcm1SZXN1bHQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOe7p+e7reWFs+mXreS+p+i+ueagj1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250aW51ZUNsb3NpbmdTaWRlYmFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Zi75q2i5L6n6L655qCP5YWz6ZetXHJcbiAgICovXHJcbiAgcHVibGljIHN0b3BDbG9zaW5nU2lkZWJhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTaWRlYmFyU2VydmljZSB9O1xyXG4iXX0=