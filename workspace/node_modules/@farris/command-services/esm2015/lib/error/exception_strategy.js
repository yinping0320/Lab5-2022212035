import { Optional } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { LanguageService } from '../languag.service';
import { DeviceAbility } from '../util/device-ability';
import moment from 'moment';
/**
 * 异常处理基类
 */
export class ExceptionStrategy {
    constructor(messagerService, languageService) {
        this.messagerService = messagerService;
        this.languageService = languageService;
    }
}
/** @nocollapse */
ExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 信息级别异常处理
 */
export class InfoExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.messagerService.info(error.Message);
    }
}
/** @nocollapse */
InfoExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 警告级别异常处理
 */
export class WarningExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.messagerService.warning(error.Message);
    }
}
/** @nocollapse */
WarningExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 错误级别异常处理
 */
export class ErrorExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
        this.langService = null;
        this.langService = languageService;
        if (!this.langService) {
            this.langService = new LanguageService();
        }
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.handleErrorLevel(error);
    }
    handleErrorLevel(error) {
        const exceptionMsg = error.Message || '';
        const date = error.date || new Date();
        const localDate = moment(date).format('YYYY-MM-DD HH:mm:ss');
        const detail = error.Detail || `${error.Message}\r\n发生时间：${localDate}\r\n详细信息：${error.innerMessage}` || '';
        const innerMessage = error.innerMessage || null;
        let bsModalRef;
        const options = {
            // title: this.languageService.serverNotifyTitle,
            showMaxButton: false,
            buttons: [
                {
                    text: this.langService.roger,
                    cls: 'btn btn-primary btn-lg',
                    handle: () => {
                        bsModalRef.close();
                    }
                }
            ],
            // showHeader: false,
            width: 440,
            height: 200,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: this.langService.copy,
                    onClick: (e) => {
                        const result = DeviceAbility.copyToClipboard(detail);
                        const text = result ? this.langService.copySuccess : this.langService.copyFailed;
                        bsModalRef.content.showMiniNotify(text, 1500);
                    }
                }
            }
        };
        this.displayError(error);
        bsModalRef = this.messagerService.show('exception', exceptionMsg, options);
    }
    /**
     * 在控制台中显示错误信息
     */
    displayError(error) {
        if (!error) {
            return;
        }
        if (!console || !console.error) {
            return;
        }
        console.error(error);
    }
}
/** @nocollapse */
ErrorExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 致命错误级别异常处理
 */
export class FatalExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.messagerService.error(error.Message);
    }
}
/** @nocollapse */
FatalExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,