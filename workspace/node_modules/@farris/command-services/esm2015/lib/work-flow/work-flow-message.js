import { Injectable, Injector } from "@angular/core";
import { WorkFlowMessageService } from "./work-flow-message.service";
/**
 * 工作流消息
 * @warning 禁止使用表单上下文，所有上下文必须从外部传入
 */
export class WorkFlowMessage {
    constructor(injector, workFlowMessageService) {
        this.injector = injector;
        this.workFlowMessageService = workFlowMessageService;
        this.listeners = new Map();
    }
    setup() {
        if (!this.workFlowMessageService) {
            return;
        }
        this.workFlowMessageService.listen((message) => {
            if (!this.listeners || this.listeners.size < 1) {
                return;
            }
            this.listeners.forEach((callback, key) => {
                if (typeof callback === 'function') {
                    callback(message);
                }
            });
        });
    }
    addEventListener(callback) {
        const id = `${new Date().valueOf().toString(16)}-${Math.ceil(Math.random() * 100)}`;
        this.listeners.set(id, callback);
        return id;
    }
    removeEventListener(eventId) {
        if (!this.listeners || this.listeners.size < 1) {
            return;
        }
        this.listeners.delete(eventId);
        eventId = null;
    }
}
WorkFlowMessage.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WorkFlowMessage.ctorParameters = () => [
    { type: Injector },
    { type: WorkFlowMessageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay1mbG93LW1lc3NhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvd29yay1mbG93L3dvcmstZmxvdy1tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFOzs7R0FHRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBRTFCLFlBQW9CLFFBQWtCLEVBQVMsc0JBQThDO1FBQXpFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzNGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztJQUMxQyxDQUFDO0lBQ00sS0FBSztRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDaEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQTBCLEVBQUUsRUFBRTtZQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7Z0JBQzlDLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBYSxFQUFFLEdBQVcsRUFBRSxFQUFFO2dCQUNwRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtvQkFDbEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ00sZ0JBQWdCLENBQUMsUUFBdUM7UUFDN0QsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3BGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqQyxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDTSxtQkFBbUIsQ0FBQyxPQUFlO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUM5QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLENBQUM7OztZQWhDRixVQUFVOzs7O1lBUlUsUUFBUTtZQUVwQixzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFdvcmtGbG93IH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgV29ya0Zsb3dNZXNzYWdlU2VydmljZSB9IGZyb20gXCIuL3dvcmstZmxvdy1tZXNzYWdlLnNlcnZpY2VcIjtcclxuXHJcbi8qKlxyXG4gKiDlt6XkvZzmtYHmtojmga9cclxuICogQHdhcm5pbmcg56aB5q2i5L2/55So6KGo5Y2V5LiK5LiL5paH77yM5omA5pyJ5LiK5LiL5paH5b+F6aG75LuO5aSW6YOo5Lyg5YWlXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXb3JrRmxvd01lc3NhZ2Uge1xyXG4gIHByaXZhdGUgbGlzdGVuZXJzOiBNYXA8c3RyaW5nLCBhbnk+O1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwdWJsaWMgd29ya0Zsb3dNZXNzYWdlU2VydmljZTogV29ya0Zsb3dNZXNzYWdlU2VydmljZSkge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0dXAoKSB7XHJcbiAgICBpZiAoIXRoaXMud29ya0Zsb3dNZXNzYWdlU2VydmljZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLndvcmtGbG93TWVzc2FnZVNlcnZpY2UubGlzdGVuKChtZXNzYWdlOiBXb3JrRmxvdy5JTWVzc2FnZSkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzIHx8IHRoaXMubGlzdGVuZXJzLnNpemUgPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGNhbGxiYWNrOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgY2FsbGJhY2sobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKGNhbGxiYWNrOiAoZXZlbnQ6IE1lc3NhZ2VFdmVudCkgPT4gdm9pZCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBpZCA9IGAke25ldyBEYXRlKCkudmFsdWVPZigpLnRvU3RyaW5nKDE2KX0tJHtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMCl9YDtcclxuICAgIHRoaXMubGlzdGVuZXJzLnNldChpZCwgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIGlkO1xyXG4gIH1cclxuICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudElkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5saXN0ZW5lcnMgfHwgdGhpcy5saXN0ZW5lcnMuc2l6ZSA8IDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGV2ZW50SWQpO1xyXG4gICAgZXZlbnRJZCA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==