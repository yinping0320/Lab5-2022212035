import { Injectable, Injector } from '@angular/core';
import { EMPTY, of } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { FrameContext, DataPathCreator, Repository } from '@farris/devkit';
import { LanguageService } from './languag.service';
import { FormMessageService } from './form-message.service';
export class PopUpService {
    constructor(injector, frameContext, repository, languageService, messageService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.repository = repository;
        this.languageService = languageService;
        this.messageService = messageService;
    }
    confirm() { }
    /**
     * 取消变更
     * @param frameId
     * @param id
     * @returns
     * @throws invalid frameid
     */
    cancel(frameId, id) {
        const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        if (!frameContext) {
            throw new Error(`[PopUpService]Invalid frameId ${frameId}`);
        }
        const primaryValue = this.frameContext.bindingData.list.currentId;
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        if (!id) {
            const bindingList = this.frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        const befRepository = this.repository;
        const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
        const entityListPaths = Array.from(longPaths);
        // 舍弃当前表当前行
        entityListPaths.pop();
        const dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityListPaths.length < 1) {
            // 主表
            const entity = this.repository.entityCollection.getEntityById(id);
            const originalData = entity['originalData'];
            entity.load(originalData, { loadChild: false });
        }
        else {
            const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
            if (entityList) {
                const originalData = entityList['originalData'];
                const item = originalData.find((item) => item.id === id);
                if (item) {
                    // 已有数据，还原变更
                    const entity = befRepository.entityManager.getEntityByPath(longPaths);
                    if (entity.changes && entity.changes.length > 0) {
                        return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(tap((result) => {
                            if (result) {
                                entity.load(item, { loadChild: false });
                                entity.changes.splice(0, entity.changes.length);
                            }
                        }));
                    }
                    else {
                        // 没有修改，直接关闭
                        if (dialogRef) {
                            dialogRef.close();
                        }
                    }
                }
                else {
                    // 新增的数据，删除
                    const paths = this.buildPath(bindingPath, primaryValue);
                    return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(switchMap((result) => {
                        if (result) {
                            return befRepository.removeEntityByPath(paths, id).pipe(tap(() => {
                                befRepository.entityManager.removeEntityByPath(paths, id);
                                if (entityList.count() === 0 && dialogRef) {
                                    dialogRef.close();
                                }
                            }));
                        }
                        else {
                            return EMPTY;
                        }
                    }));
                }
            }
        }
        return of([]);
    }
    /**
     * 同步当前行
     * @param id 当前行
     */
    updateCurrentRow(id) {
        const bindingPath = this.frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        // const frameId = this.frameContext.frameId;
        const root = this.frameContext.getVirtualRootFrameContext();
        const primaryKeyValue = root.bindingData.list.currentId;
        this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);
        if (bindingPaths.length > 0) {
            const paths = [];
            bindingPaths.forEach((path, index, array) => {
                paths.push(path);
                const bindingList = root.bindingData.getValue(paths);
                if (bindingList) {
                    const currentId = bindingList.currentId;
                    const modalBindingList = this.frameContext.bindingData.getValue(paths);
                    if (index === bindingPath.length - 1 && id) {
                        modalBindingList.setCurrentId(id);
                    }
                    else if (modalBindingList) {
                        modalBindingList.setCurrentId(currentId);
                    }
                }
            });
        }
    }
    closeCheck() {
        const frameContext = this.frameContext;
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        const befRepository = this.repository;
        const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
        const entityListPaths = Array.from(longPaths);
        entityListPaths.pop();
        const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
        const dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityList.count() === 0 && dialogRef) {
            dialogRef.close();
        }
    }
    /**
     * 删除弹窗中的当前行数据
     * @param frameId -可选，要删除数据所在组件的id，默认为命令所在的组件
     * @param id -可选，要删除数据的id，默认为命令所在组件的当前行数据id
     * @param showConfirm -可选，删除数据时是否进行删除前的确认，默认为`true`
     * @returns
     * @throws 组件id错误时抛出错误
     */
    removeRow(frameId, id, showConfirm = true) {
        const frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
        if (!frameContext) {
            throw new Error(`无效的组件id：${frameId}`);
        }
        // 纠正主键
        if (!id) {
            const bindingList = frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        const paths = this.buildPath(bindingPath, this.frameContext.bindingData.list.currentId);
        const befRepository = this.repository;
        // 转换showConfirm为布尔
        if (typeof showConfirm == 'string') {
            showConfirm = showConfirm.trim() === 'false' ? false : true;
        }
        let confirm$ = of(true);
        if (showConfirm) {
            confirm$ = this.messageService.confirm(this.languageService.confirmDeletion);
        }
        return confirm$.pipe(switchMap((result) => {
            if (result) {
                if (bindingPaths.length === 0) {
                    // 主表删除，不立即保存
                    return befRepository.removeEntityById(id, false);
                }
                else {
                    return befRepository.removeEntityByPath(paths, id).pipe(tap(() => {
                        befRepository.entityManager.removeEntityByPath(paths, id);
                    }));
                }
            }
            else {
                return EMPTY;
            }
        }));
    }
    /**
     * 关闭弹窗
     * @param frameId -可选，组件id，不指定时使用命令所在的上下文组件
     * @throws 使用指定的组件id无法获取组件及弹窗组件实例获取失败时会抛出异常
     */
    closeDialog(frameId) {
        let frameContext = this.frameContext;
        let dialogRef = null;
        // 开发者指定了组件id
        if (frameId) {
            frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            if (!frameContext) {
                throw new Error('指定了无效的组件id');
            }
            dialogRef = frameContext.frameComponent['dialogRef'];
        }
        else {
            // 尝试从当前组件上下文中获取弹窗引用
            dialogRef = frameContext.frameComponent['dialogRef'];
            if (!dialogRef) {
                // 如果命令挂载到了内容组件上
                dialogRef = this.frameContext.parent.frameComponent['dialogRef'];
            }
        }
        if (!dialogRef) {
            throw new Error(`无法获取弹窗组件实例`);
        }
        dialogRef.close();
    }
    /**
     * 还原自上次持久化以后产生的变更
     * @param frameId - 组件id
     * @param id - 数据id
     * @param showConfirm - 是否展示提示信息
     */
    cancelChanges(frameId, id, showConfirm = true) {
        const frameContext = this.getFrameContext(frameId);
        // 纠正主键
        id = this.getPrimaryValue(frameId, id);
        const data = this.getPersisteData(frameId, id);
        if (typeof showConfirm === 'string') {
            showConfirm = showConfirm.trim().toLowerCase() === 'false' ? false : true;
        }
        const isDataChanged = this.isDataChanged(data, frameId, id);
        let result$ = of(true);
        if (showConfirm && isDataChanged) {
            result$ = this.messageService.confirm(this.languageService.cancelWithoutSave);
        }
        return result$.pipe(switchMap((result) => {
            if (result) {
                const befRepository = frameContext.repository;
                const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter((p) => p);
                const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
                const entityPaths = Array.from(longPaths);
                const entity = befRepository.entityManager.getEntityNodeByPath(entityPaths);
                if (entity) {
                    entity.load(data);
                }
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    }
    /**
     * 持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     */
    persiste(frameId, id) {
        // 持久化数据
        const bindingObject = this.getBindingObject(frameId, id);
        bindingObject['__PSESISTE__DATA'] = bindingObject.toJSON();
    }
    /**
     * 获取持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     */
    getPersisteData(frameId, id) {
        const bindingObject = this.getBindingObject(frameId, id);
        return bindingObject['__PSESISTE__DATA'];
    }
    isDataChanged(data, frameId, id) {
        const bindingObject = this.getBindingObject(frameId, id);
        const value = bindingObject.toJSON();
        return JSON.stringify(value) !== JSON.stringify(data);
    }
    /**
     * 获取当前行
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 找不到对应数据时抛出无法找到对应数据的异常
     */
    getBindingObject(frameId, id) {
        const frameContext = this.getFrameContext(frameId);
        // 纠正主键
        id = this.getPrimaryValue(frameId, id);
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter((p) => p);
        // 拿到当前行
        const bindingList = frameContext.bindingData.getValue(bindingPaths);
        if (!bindingList || bindingList.length < 1) {
            throw new Error(`无法找到id为:${id}的数据`);
        }
        return bindingList.currentItem;
    }
    /**
     * 构造子表路径
     * @param bindingPath - 绑定路径
     * @param id - id
     * @throws 子表路径错误
     */
    buildPath(bindingPath, id) {
        let path = '/' + id;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.frameContext.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 根据组件id获取组件上下文
     * @param frameId - 组件id
     * @returns
     * @throws 无效的组件id
     */
    getFrameContext(frameId) {
        const frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
        if (!frameContext) {
            throw new Error(`无效的组件id：${frameId}`);
        }
        return frameContext;
    }
    /**
     * 获取主键
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 组件id无效时抛出异常
     */
    getPrimaryValue(frameId, id) {
        if (!id) {
            const frameContext = this.getFrameContext(frameId);
            if (!frameContext) {
                throw new Error(`无效的组件id：${frameId}`);
            }
            const bindingList = frameContext.bindingData.getList();
            if (!bindingList || bindingList.length < 1) {
                throw new Error(`无效的主键:${id}`);
            }
            id = bindingList.currentId;
        }
        return id;
    }
}
PopUpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PopUpService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: Repository },
    { type: LanguageService },
    { type: FormMessageService }
];
//# sourceMappingURL=data:application/json;base64,