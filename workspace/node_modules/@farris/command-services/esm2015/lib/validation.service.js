// tslint:disable: max-line-length
import { ElementRef, InjectFlags, Injectable, Optional } from '@angular/core';
import { Repository, FrameContext, PARENT_CLASS, ChangeType, DataPropGroup } from '@farris/devkit';
import { tap, switchMap } from 'rxjs/operators';
import { EMPTY, Subject } from 'rxjs';
import { zip } from 'rxjs/observable/zip';
import { empty } from 'rxjs/observable/empty';
import { of } from 'rxjs/observable/of';
import { VerifyDetailService } from '@farris/ui-verify-detail';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
import { VerifyService } from './verify.service';
import { DatagridComponent } from '@farris/ui-datagrid';
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class ValidationService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, notifyService, languageService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.validationResults = new Subject();
        this.validationAllResult = new Subject();
        if (!this.languageService) {
            this.languageService = new LanguageService();
        }
    }
    /**
     * 验证表单内的所有表单
     */
    validate() {
        this.repository.getList().subscribe((result) => {
            for (const entity of result) {
                entity.validate().subscribe((result) => {
                    if (!result.isValid) {
                        alert(result.message);
                        this.validationResults.next(result);
                    }
                });
            }
        });
        return this.validationResults;
    }
    /**
     * 校验当前行
     */
    validateCurrentRow() {
        const entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        const primaryValue = this.frameContext.bindingData.list.currentId;
        if (!primaryValue) {
            return of(true);
        }
        // 首先校验实体不能为空规则
        const entity = this.repository.entityCollection.getEntityById(primaryValue);
        if (!entity) {
            return of(true);
        }
        const entities = [entity];
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        // 修复使用相同be创建的vo的组合表单校验时多个表单校验规则被合并的问题
        // TODO: 目前未考虑组合表单统一保存的场景，后续支持组合表单统一保存时再修改
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        rootViewModel.verifyInformations = [];
        let formValid = true;
        let entityValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 验证所有实体
        const observableList = entities.map((entity) => {
            const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);
            return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);
        });
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            this.handleErrorClickEvent();
            if (isValidated && !formValid) {
                // 实体校验通过但表单校验不通过，此时实体和表单存在校验规则不一致的情况
                console.warn('实体和控件校验规则不一致，请确认实体校验规则配置与控件一致。如果配置不一致可能会导致校验失效！');
            }
            // 实体校验通过，实体校验使用的规则是控件+实体，正常实体校验通过后控件校验一定也会通过
            if (isValidated) {
                const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);
                if (!isEntityValid) {
                    return EMPTY;
                }
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    }
    /**
     * 调用表单和实体上的验证规则, 通过后调用回调cb
     */
    validateAll() {
        const entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        const entities = this.repository.entityCollection.getAllEntities();
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let formValid = true;
        let entityValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 触发所有实体的validate事件
        const isMultiEntityValiate = entities.length > 0;
        // 验证所有实体
        const observableList = entities.map((entity, index) => entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            // 因为校验累加的缘故，导致之前的校验信息一直存在，只能通过校验结果来确定是否还有错误信息
            if (isValidated && formValid) {
                verifyInformations = rootViewModel.verifyInformations = [];
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            this.handleErrorClickEvent();
            if (isValidated) {
                const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);
                if (!isEntityValid) {
                    return EMPTY;
                }
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    }
    /**
     * 校验实体是否满足不能为空的规则
     * @param entity 主实体
     */
    validateEntityAllowEmptyRule(entityTypeInfo) {
        // 确认实体各个层级中是否存在不能为空的规则
        const paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);
        if (!paths || paths.length < 1) {
            return true;
        }
        // 找到所有不合法的bindingPaths
        const invalidPaths = paths.filter((path) => {
            const bindingPaths = path.split('/').filter(p => p);
            const bindingList = this.frameContext.bindingData.getValue(bindingPaths);
            if (!bindingList || bindingList.length < 1) {
                return true;
            }
            return false;
        });
        // 有实体必填，但实体数据为空
        if (invalidPaths.length > 0) {
            const tableNames = [];
            invalidPaths.forEach((path) => {
                //const frameContexts = this.getFrameContextByBindingPath(path.split('/'));
                //const frameComponents = frameContexts.map(frameContext => frameContext.frameComponent);
                // 找到所有容器类组件
                //const containerComponents = frameComponents.filter(frameComponent => [ComponentType.farrisDataGridComponent, ComponentType.farrisTreeTalbeComponent, ComponentType.kendoGridComponent, ComponentType.primengTreeComponent].includes(frameComponent.componentType));
                //if (!(!containerComponents || containerComponents.length < 1)) {
                const viewModelName = this.getViewModelNameByBindingPaths(path.split('/')) || `绑定路径${path}`;
                tableNames.push(viewModelName);
                //}
            });
            if (this.notifyService) {
                this.notifyService.error(`${tableNames.join('，')} ${this.languageService.tableCanNotEmpty}`, { hideTitle: true });
            }
            return false;
        }
        return true;
    }
    /**
     *
     * @param bindingPaths path不能为空或/，不支持主表
     */
    getViewModelNameByBindingPaths(bindingPaths) {
        const namespace = this.frameContext.namespace;
        let frameContexts = null;
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const bindingPath = bindingPaths.filter(p => p).join('/');
        const frameContext = frameContexts.find((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
        const viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';
        return viewModelName;
    }
    /**
     * 遍历获取所有不能为空的实体的绑定路径
     * @param entityTypeInfo
     * @param results
     * @returns
     */
    getNotAllowEmptyBindingPaths(entityTypeInfo, results = []) {
        if (!entityTypeInfo) {
            return;
        }
        this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, results);
        return results;
    }
    deepFirstTraversalEntityTypeInfo(entityTypeInfo, result = [], previousValue = []) {
        // 确认当前实体是否必填
        const isAllowEmpty = this.isAllowEmpty(entityTypeInfo.entityInfo.allowEmpty, previousValue);
        if (isAllowEmpty === false) {
            if (previousValue.length < 1) {
                result.push('');
            }
            else {
                result.push(previousValue.join('/'));
            }
        }
        // 获取所有子表
        const list = entityTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach((propInfo) => {
                const typeInfo = propInfo.typeInfo;
                if (typeInfo && typeInfo.entityInfo) {
                    previousValue.push(typeInfo.entityInfo.nodeCode);
                    this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);
                }
            });
        }
        // 没有下级了，此时应该清空游标，将收集到的路径放到结果集中
        if (previousValue && previousValue.length > 0) {
            previousValue.pop();
        }
    }
    isAllowEmpty(value, paths) {
        if (value === undefined || value === true || value === '') {
            return true;
        }
        // 开发者定义了不能为空的规则
        const frameContexts = this.getFrameContextByBindingPath(paths);
        let caller = this.frameContext.frameComponent;
        if (!frameContexts || frameContexts.length < 1) {
            // 定义了规则但对应的Frame没有渲染
            console.warn(`绑定路径 ${paths.join('/')} 定义了不能为空的规则，但找不到该绑定路径对应的组件。请确保组件显隐与必填一致。`);
        }
        else {
            caller = frameContexts.pop().frameComponent;
        }
        if (typeof value === 'boolean') {
            return value;
        }
        else if (typeof value === 'string') {
            value = value.trim().startsWith('return') ? value : `return ${value}`;
            const factory = new Function(`
        var viewModel = this.viewModel;
        var bindingData = this.bindingData;
        var context = this.context;
        ${value}
      `);
            return factory.apply(caller);
        }
        else {
            console.warn(`无效的必填规则。`);
        }
    }
    collectValidationErrors(rootViewModel, errors, namespace, filter = true) {
        if (filter) {
            rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
        }
        errors.forEach((validationError) => {
            if (validationError.children && validationError.children.length) {
                this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);
            }
            let id = '';
            const findId = (target) => {
                if (target && target.data && target.data.id) {
                    id = target.data.id;
                    return;
                }
                else if (target[PARENT_CLASS]) {
                    findId(target[PARENT_CLASS]);
                }
            };
            findId(validationError.target);
            if (validationError.constraints) {
                const validationResultTypes = Object.keys(validationError.constraints);
                if (validationResultTypes.length) {
                    const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;
                    let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);
                    index = index === -1 ? 0 : index + offset;
                    rootViewModel.verifyInformations.splice(index, 0, {
                        id: id,
                        namespace,
                        targetField: validationError.field,
                        index: validationError.index,
                        title: validationError.propertyName,
                        msg: validationError.constraints[validationResultTypes[0]],
                        frameContext: validationError.frameContext,
                        fullPath: validationError.fullPath,
                        type: validationResultTypes[0] === 'required' ? 'empty' : 'error'
                    });
                }
            }
        });
    }
    /**
     * 重置校验信息（仅当前表单）
     */
    resetValidation() {
        const isDialog = this.isInDialog();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isDialog) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let verifyInformations = rootViewModel.verifyInformations;
        if (verifyInformations.length) {
            const namespace = this.frameContext.namespace;
            if (namespace !== null) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
            }
            rootViewModel.verifyInformations = verifyInformations;
            //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);
        }
        if (rootViewModel && rootViewModel.verifycationChanged) {
            rootViewModel.verifycationChanged.next(verifyInformations);
        }
        return of(null);
    }
    /**
     * 是否在弹窗内部
     */
    isInDialog() {
        return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;
    }
    /**
     * 拥有独自的校验提示服务
     */
    hasOwnVerifyDetailService() {
        return this.frameContext.injector.get(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get(VerifyDetailService, null);
        ;
    }
    /**
     * 通过bindingPath获取所有匹配的frameContext
     * @param bindingPath
     * @returns
     */
    getFrameContextByBindingPath(bindingPaths) {
        const bindingPath = bindingPaths.filter(p => p).join('/');
        return this.frameContext.appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
    }
    get verifyDetailService() {
        return this.frameContext.injector.get(VerifyDetailService, null, InjectFlags.Self);
    }
    handleErrorClickEvent() {
        if (this.verifyDetailService && this.verifyDetailService.verifyContainer && this.verifyDetailService.verifyContainer.instance) {
            this.verifyDetailService.verifyContainer.instance.validatorClick.subscribe((item) => {
                this.onErrorItemClick(item);
            });
        }
    }
    onErrorItemClick(item = { frameContext: null, id: null, targetField: null, fullPath: null }) {
        const { frameContext, id, targetField, fullPath } = item;
        const isGridComponent = frameContext && frameContext.frameComponent.isGridComponent || false;
        if (!isGridComponent) {
            if (!targetField) { }
            const elementRef = frameContext.injector.get(ElementRef, null, InjectFlags.Self) || frameContext.injector.get(ElementRef, null);
            VerifyService.focusElement(targetField, elementRef);
            this.verifyDetailService.verifyContainer.instance.showList = false;
        }
        else {
            // find grid component
            const grid = frameContext.componentRefManager.getComponentByType(DatagridComponent);
            if (grid && targetField && id) {
                grid.editCell(id, targetField);
                this.verifyDetailService.verifyContainer.instance.showList = false;
            }
        }
    }
}
ValidationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidationService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FormNotifyService, decorators: [{ type: Optional }] },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { ValidationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsVUFBVSxFQUFVLFlBQVksRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUE0RSxhQUFhLEVBQTRDLE1BQU0sZ0JBQWdCLENBQUM7QUFDL04sT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsS0FBSyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhEOzs7R0FHRztBQUVILE1BQ00saUJBQWlCO0lBSXJCOztPQUVHO0lBQ0gsWUFDVSxVQUEyQixFQUMzQixZQUEwQixFQUNkLGFBQWdDLEVBQ2hDLGVBQWdDO1FBSDVDLGVBQVUsR0FBVixVQUFVLENBQWlCO1FBQzNC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QUFRLENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2FBQ3BFO1NBQ0Y7SUFDSCxDQUFDOzs7WUFockJGLFVBQVU7Ozs7WUFqQkYsVUFBVTtZQUFVLFlBQVk7WUFPaEMsaUJBQWlCLHVCQXFCckIsUUFBUTtZQXBCSixlQUFlLHVCQXFCbkIsUUFBUTs7QUF1cUJiLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxyXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3RGbGFncywgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSwgRW50aXR5LCBGcmFtZUNvbnRleHQsIFBBUkVOVF9DTEFTUywgQ2hhbmdlVHlwZSwgVmFsaWRhdGlvblJlc3VsdCwgVmFsaWRhdGlvbkVycm9yLCBWYWxpZGF0ZVJ1bGUsIFZpZXdNb2RlbCwgRGF0YVR5cGVJbmZvLCBEYXRhUHJvcEdyb3VwLCBEYXRhUHJvcEluZm8sIEJpbmRpbmdMaXN0LCBDb21wb25lbnRUeXBlIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyB0YXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRU1QVFksIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgemlwIH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL3ppcCc7XHJcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2VtcHR5JztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzL29ic2VydmFibGUvb2YnO1xyXG5pbXBvcnQgeyBWZXJpZnlEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS12ZXJpZnktZGV0YWlsJztcclxuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbm90aWZ5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IFZlcmlmeVNlcnZpY2UgfSBmcm9tICcuL3ZlcmlmeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuXHJcbi8qKlxyXG4gKiDooajljZXpqozor4HmnI3liqFcclxuICogQHNjb3BlIEZyYW1lQ29tcG9uZW50XHJcbiAqL1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBWYWxpZGF0aW9uU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgdmFsaWRhdGlvblJlc3VsdHMgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgcHJpdmF0ZSB2YWxpZGF0aW9uQWxsUmVzdWx0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4sXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2VcclxuICApIHtcclxuICAgIGlmICghdGhpcy5sYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgICAgdGhpcy5sYW5ndWFnZVNlcnZpY2UgPSBuZXcgTGFuZ3VhZ2VTZXJ2aWNlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpqozor4HooajljZXlhoXnmoTmiYDmnInooajljZVcclxuICAgKi9cclxuICBwdWJsaWMgdmFsaWRhdGUoKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuZ2V0TGlzdCgpLnN1YnNjcmliZShcclxuICAgICAgKHJlc3VsdDogRW50aXR5W10pID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiByZXN1bHQpIHtcclxuICAgICAgICAgIGVudGl0eS52YWxpZGF0ZSgpLnN1YnNjcmliZSgocmVzdWx0OiBWYWxpZGF0aW9uUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICBhbGVydChyZXN1bHQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uUmVzdWx0cy5uZXh0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25SZXN1bHRzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmoKHpqozlvZPliY3ooYxcclxuICAgKi9cclxuICBwdWJsaWMgdmFsaWRhdGVDdXJyZW50Um93KCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBlbnRpdHlUeXBlSW5mbyA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbztcclxuICAgIC8vIOe7hOWQiOihqOWNleWPquagoemqjOW9k+WJjeaMiemSruaJgOWcqOeahOihqOWNlVxyXG4gICAgY29uc3QgcHJpbWFyeVZhbHVlID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgICBpZiAoIXByaW1hcnlWYWx1ZSkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICAvLyDpppblhYjmoKHpqozlrp7kvZPkuI3og73kuLrnqbrop4TliJlcclxuICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQocHJpbWFyeVZhbHVlKTtcclxuICAgIGlmICghZW50aXR5KSB7XHJcbiAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbnRpdGllczogRW50aXR5W10gPSBbZW50aXR5XTtcclxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuZnJhbWVDb250ZXh0Lm5hbWVzcGFjZTtcclxuICAgIGxldCBmcmFtZUNvbnRleHRzID0gW107XHJcbiAgICAvLyDkv67lpI3kvb/nlKjnm7jlkIxiZeWIm+W7uueahHZv55qE57uE5ZCI6KGo5Y2V5qCh6aqM5pe25aSa5Liq6KGo5Y2V5qCh6aqM6KeE5YiZ6KKr5ZCI5bm255qE6Zeu6aKYXHJcbiAgICAvLyBUT0RPOiDnm67liY3mnKrogIPomZHnu4TlkIjooajljZXnu5/kuIDkv53lrZjnmoTlnLrmma/vvIzlkI7nu63mlK/mjIHnu4TlkIjooajljZXnu5/kuIDkv53lrZjml7blho3kv67mlLlcclxuICAgIGlmIChuYW1lc3BhY2UgIT09IG51bGwpIHtcclxuICAgICAgLy8g5a2Y5Zyo5ZG95ZCN56m66Ze077yM6K+05piO6KGo5Y2V6L6D5paw77yM5Y+v5Lul5L6d6LWW6K+l54m55oCnXHJcbiAgICAgIGZyYW1lQ29udGV4dHMgPSB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0c0J5TmFtZXNwYWNlKG5hbWVzcGFjZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDooajljZXovoPogIHvvIzojrflj5bmiYDmnInnmoTkuIrkuIvmlofvvIzlnKjmoKHpqozpmLbmrrXov4fmu6Top4TliJlcclxuICAgICAgZnJhbWVDb250ZXh0cyA9IHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaXNNb2RhbCA9IHRoaXMuaXNJbkRpYWxvZygpO1xyXG4gICAgY29uc3QgaGFzT3duVmVyaWZ5RGV0YWlsU2VydmljZSA9IHRoaXMuaGFzT3duVmVyaWZ5RGV0YWlsU2VydmljZSgpO1xyXG4gICAgbGV0IHJvb3RWaWV3TW9kZWwgPSB0aGlzLmZyYW1lQ29udGV4dC5yb290LnZpZXdNb2RlbDtcclxuICAgIGlmIChpc01vZGFsICYmIGhhc093blZlcmlmeURldGFpbFNlcnZpY2UpIHtcclxuICAgICAgcm9vdFZpZXdNb2RlbCA9IHRoaXMuZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkudmlld01vZGVsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0b1ZhbGlkYXRlID0gZmFsc2U7XHJcbiAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XHJcbiAgICBmcmFtZUNvbnRleHRzLmZvckVhY2goKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSA9PiB7XHJcbiAgICAgIGlmIChmcmFtZUNvbnRleHQuZm9ybSAmJiBmcmFtZUNvbnRleHQuZm9ybS5lbmFibGVWYWxpZGF0ZSkge1xyXG4gICAgICAgIHRvVmFsaWRhdGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmICghdG9WYWxpZGF0ZSB8fCBlbnRpdGllcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgIH1cclxuICAgIHJvb3RWaWV3TW9kZWwudmVyaWZ5SW5mb3JtYXRpb25zID0gW107XHJcbiAgICBsZXQgZm9ybVZhbGlkID0gdHJ1ZTtcclxuICAgIGxldCBlbnRpdHlWYWxpZCA9IHRydWU7XHJcbiAgICBjb25zdCBmb3JtVmFsaWRhdGlvblJ1bGVzID0gbmV3IE1hcDxzdHJpbmcsIFZhbGlkYXRlUnVsZVtdPigpO1xyXG4gICAgZnJhbWVDb250ZXh0cy5mb3JFYWNoKChmb3JtQ29udGV4dDogRnJhbWVDb250ZXh0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSBmb3JtQ29udGV4dC5iaW5kaW5nRGF0YS5nZXRPYmplY3QoKTtcclxuICAgICAgLy8g6YCa55+l5omA5pyJYmluZGluZ0RhdGEsXHJcbiAgICAgIGJpbmRpbmdPYmplY3QgJiYgYmluZGluZ09iamVjdC5zZXRTaG93VmFsaWRhdGlvbk1zZyh0cnVlKTtcclxuICAgICAgaWYgKGZvcm1Db250ZXh0LmZvcm0gJiYgZm9ybUNvbnRleHQuZm9ybS5lbmFibGVWYWxpZGF0ZSkge1xyXG4gICAgICAgIC8vIOiOt+WPluW9k+WJjeihqOWNleS4iueahOaJgOaciemqjOivgeinhOWImVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb3JtVmFsaWRhdGlvblJ1bGVzID0gZm9ybUNvbnRleHQuZm9ybS5nZXRWYWxpZGF0aW9uUnVsZXMoKTtcclxuICAgICAgICBjdXJyZW50Rm9ybVZhbGlkYXRpb25SdWxlcy5mb3JFYWNoKChydWxlcywgcGF0aCkgPT4ge1xyXG4gICAgICAgICAgaWYgKGZvcm1WYWxpZGF0aW9uUnVsZXMuaGFzKHBhdGgpKSB7XHJcbiAgICAgICAgICAgIHJ1bGVzLmZvckVhY2gocnVsZSA9PiBmb3JtVmFsaWRhdGlvblJ1bGVzLmdldChwYXRoKS5wdXNoKHJ1bGUpKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvcm1WYWxpZGF0aW9uUnVsZXMuc2V0KHBhdGgsIFsuLi5ydWxlc10pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvcm1Db250ZXh0LmZvcm0uc2V0U2hvd1ZhbGlkYXRpb25Nc2codHJ1ZSk7XHJcbiAgICAgICAgLy8g6YCQ5Liq6LCD55So6KGo5Y2V55qE6aqM6K+B77yM6aqM6K+B5YmN56uv6KGo5Y2V6KeE5YiZXHJcbiAgICAgICAgaWYgKCFmb3JtQ29udGV4dC5mb3JtLmlzRm9ybVZhbGlkKCkpIHtcclxuICAgICAgICAgIGZvcm1FcnJvcnMucHVzaChmb3JtQ29udGV4dC5mb3JtKTtcclxuICAgICAgICAgIGZvcm1WYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g6aqM6K+B5omA5pyJ5a6e5L2TXHJcbiAgICBjb25zdCBvYnNlcnZhYmxlTGlzdCA9IGVudGl0aWVzLm1hcCgoZW50aXR5OiBFbnRpdHkpID0+IHtcclxuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5saXN0LmdldEluZGV4QnlJZChlbnRpdHkucHJpbWFyeVZhbHVlKTtcclxuICAgICAgcmV0dXJuIGVudGl0eS52YWxpZGF0ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgZm9ybVZhbGlkYXRpb25SdWxlcywgbnVsbCwgdGhpcy5mcmFtZUNvbnRleHQpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gemlwKC4uLm9ic2VydmFibGVMaXN0KS5waXBlKFxyXG4gICAgICB0YXAoKHJlc3VsdExpc3QpID0+IHtcclxuICAgICAgICBmcmFtZUNvbnRleHRzLmZvckVhY2goKGZvcm1Db250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcclxuICAgICAgICAgIGlmICghZm9ybUNvbnRleHQuZm9ybS5lbmFibGVWYWxpZGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBoYW5kbGVFcnJvcnMgPSAoZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JbXSkgPT4ge1xyXG4gICAgICAgICAgICBlcnJvcnMuZm9yRWFjaCgodmFsaWRhdGlvbkVycm9yOiBWYWxpZGF0aW9uRXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9yLmNoaWxkcmVuICYmIHZhbGlkYXRpb25FcnJvci5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9ycyh2YWxpZGF0aW9uRXJyb3IuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zdCBlcnJNc2dPYmogPSB7fTtcclxuICAgICAgICAgICAgICBsZXQgaWQgPSAnJztcclxuICAgICAgICAgICAgICBjb25zdCBmaW5kSWQgPSAodGFyZ2V0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmRhdGEgJiYgdGFyZ2V0LmRhdGEuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgaWQgPSB0YXJnZXQuZGF0YS5pZDtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRbUEFSRU5UX0NMQVNTXSkge1xyXG4gICAgICAgICAgICAgICAgICBmaW5kSWQodGFyZ2V0W1BBUkVOVF9DTEFTU10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgZmluZElkKHZhbGlkYXRpb25FcnJvci50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAvLyDlrp7kvZPpqozor4Hlh7rplJnvvIzpnIDopoHlsIbplJnor6/lsZXnpLrliLDnlYzpnaLkuIpcclxuICAgICAgICAgICAgICAvLyDlrp7kvZPkuI3kuIDlrprmmK/lvZPliY3ooYxcclxuICAgICAgICAgICAgICBsZXQgcGFyZW50UGF0aERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiBbXSxcclxuICAgICAgICAgICAgICAgIGlzVWR0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzR3JpZDogZmFsc2VcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3IudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRQYXRoRGF0YSA9IHZhbGlkYXRpb25FcnJvci50YXJnZXQuZ2V0UGF0aHMoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgY29uc3QgYmluZGluZ1BhdGggPSAnLycgKyBwYXJlbnRQYXRoRGF0YS5wYXRoLmpvaW4oJy8nKTtcclxuICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9yLmNvbnN0cmFpbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWxpZGF0aW9uRXJyb3IuY29uc3RyYWludHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgZXJyTXNnT2JqW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdmFsaWRhdGlvbkVycm9yLmNvbnN0cmFpbnRzW2tleV1cclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgLy8gaWYgKHRoaXMuZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCA9PT0gYmluZGluZ1BhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gICByb290Vmlld01vZGVsWyd2ZXJpZnlJbmZvcm1hdGlvbnMnXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgLy8gICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgLy8gICAgIHRpdGxlOiBrZXksXHJcbiAgICAgICAgICAgICAgICAgIC8vICAgICBtc2c6IHZhbGlkYXRpb25FcnJvci5jb25zdHJhaW50c1trZXldLFxyXG4gICAgICAgICAgICAgICAgICAvLyAgICAgdHlwZTogJ3dhcm4nXHJcbiAgICAgICAgICAgICAgICAgIC8vICAgfSlcclxuICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gcGFyZW50UGF0aERhdGEucGF0aC5jb25jYXQodmFsaWRhdGlvbkVycm9yLnByb3BlcnR5KTtcclxuXHJcbiAgICAgICAgICAgICAgLy9pZiAodGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoID09PSBiaW5kaW5nUGF0aCkge1xyXG4gICAgICAgICAgICAgIC8vIOWwhumUmeivr+S/oeaBr+abtOaWsOWIsGZvcm1Db250cm9s5LiKXHJcbiAgICAgICAgICAgICAgZm9ybUNvbnRleHQuYmluZGluZ0RhdGEuY2hhbmdlcy5uZXh0KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IENoYW5nZVR5cGUuVXBkYXRlRXJyb3JzLFxyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRocyxcclxuICAgICAgICAgICAgICAgIGlzVWR0OiBwYXJlbnRQYXRoRGF0YS5pc1VkdCxcclxuICAgICAgICAgICAgICAgIGlzR3JpZDogcGFyZW50UGF0aERhdGEuaXNHcmlkLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbGlkYXRpb25FcnJvci52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGVycm9yczogZXJyTXNnT2JqXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIC8vIOWxleW8gOmqjOivgee7k+aenFxyXG4gICAgICAgICAgY29uc3QgaXNWYWxpZExpc3QgPSByZXN1bHRMaXN0Lm1hcCgocmVzdWx0OiBWYWxpZGF0aW9uUmVzdWx0KSA9PiByZXN1bHQuaXNWYWxpZCk7XHJcbiAgICAgICAgICAvLyDkv53lrZjliY3lhYjosIPnlKjlrp7kvZPkuIrnmoTpqozor4Hop4TliJnvvIzlhajpg6jpgJrov4fkuYvlkI7miY3kv53lrZhcclxuICAgICAgICAgIC8vIOWunuS9k+mqjOivgemAmui/h1xyXG4gICAgICAgICAgaWYgKGlzVmFsaWRMaXN0LmZpbHRlcih4ID0+IHgpLmxlbmd0aCA9PT0gb2JzZXJ2YWJsZUxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIOWwhumUmeivr+S/oeaBr+abtOaWsOWIsGZvcm1Db250cm9s5LiKXHJcbiAgICAgICAgICAgIGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmNoYW5nZXMubmV4dCh7XHJcbiAgICAgICAgICAgICAgdHlwZTogQ2hhbmdlVHlwZS5VcGRhdGVFcnJvcnMsXHJcbiAgICAgICAgICAgICAgcGF0aDogW11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIOmqjOivgeaIkOWKn+WQjumakOiXj+i+k+WFpeaXtueahOmqjOivgVxyXG4gICAgICAgICAgICBpZiAoZm9ybVZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgYmluZGluZ09iamVjdCA9IGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmdldE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgIGJpbmRpbmdPYmplY3QgJiYgYmluZGluZ09iamVjdC5zZXRTaG93VmFsaWRhdGlvbk1zZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgY29uc3QgZm9ybSA9IGZvcm1Db250ZXh0LmZvcm07XHJcbiAgICAgICAgICAgICAgaWYgKGZvcm0pIHtcclxuICAgICAgICAgICAgICAgIGZvcm0uc2V0U2hvd1ZhbGlkYXRpb25Nc2coZmFsc2UpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5a6e5L2T6aqM6K+B5pyJ6ZSZ6K+vXHJcbiAgICAgICAgICAgIGVudGl0eVZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlc3VsdExpc3QuZm9yRWFjaCgocmVzdWx0OiBWYWxpZGF0aW9uUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmuIXpmaTpqozor4HpgJrov4fnmoTplJnor69cclxuICAgICAgICAgICAgICAgIGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmNoYW5nZXMubmV4dCh7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6IENoYW5nZVR5cGUuVXBkYXRlRXJyb3JzLFxyXG4gICAgICAgICAgICAgICAgICBwYXRoOiBbXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9ycyhyZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KSxcclxuICAgICAgc3dpdGNoTWFwKChyZXN1bHRMaXN0KSA9PiB7XHJcbiAgICAgICAgbGV0IGlzVmFsaWRhdGVkID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgICAgICByZXN1bHRMaXN0LmZvckVhY2goKHJlc3VsdDogVmFsaWRhdGlvblJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFyZXN1bHQuaXNWYWxpZCkge1xyXG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZXJyb3JzLnB1c2goLi4ucmVzdWx0LmVycm9ycyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbGxlY3RWYWxpZGF0aW9uRXJyb3JzKHJvb3RWaWV3TW9kZWwsIGVycm9ycywgdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcm9vdFZpZXdNb2RlbC52ZXJpZnljYXRpb25DaGFuZ2VkLm5leHQocm9vdFZpZXdNb2RlbC52ZXJpZnlJbmZvcm1hdGlvbnMpO1xyXG4gICAgICAgIGxldCB2ZXJpZnlJbmZvcm1hdGlvbnMgPSByb290Vmlld01vZGVsLnZlcmlmeUluZm9ybWF0aW9ucztcclxuICAgICAgICBpZiAoaXNNb2RhbCAmJiBoYXNPd25WZXJpZnlEZXRhaWxTZXJ2aWNlKSB7XHJcbiAgICAgICAgICB2ZXJpZnlJbmZvcm1hdGlvbnMgPSByb290Vmlld01vZGVsLnZlcmlmeUluZm9ybWF0aW9ucy5maWx0ZXIoaXRlbSA9PiBpdGVtLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcm9vdFZpZXdNb2RlbC52ZXJpZnljYXRpb25DaGFuZ2VkLm5leHQodmVyaWZ5SW5mb3JtYXRpb25zKTtcclxuICAgICAgICB0aGlzLmhhbmRsZUVycm9yQ2xpY2tFdmVudCgpO1xyXG4gICAgICAgIGlmIChpc1ZhbGlkYXRlZCAmJiAhZm9ybVZhbGlkKSB7XHJcbiAgICAgICAgICAvLyDlrp7kvZPmoKHpqozpgJrov4fkvYbooajljZXmoKHpqozkuI3pgJrov4fvvIzmraTml7blrp7kvZPlkozooajljZXlrZjlnKjmoKHpqozop4TliJnkuI3kuIDoh7TnmoTmg4XlhrVcclxuICAgICAgICAgIGNvbnNvbGUud2Fybign5a6e5L2T5ZKM5o6n5Lu25qCh6aqM6KeE5YiZ5LiN5LiA6Ie077yM6K+356Gu6K6k5a6e5L2T5qCh6aqM6KeE5YiZ6YWN572u5LiO5o6n5Lu25LiA6Ie044CC5aaC5p6c6YWN572u5LiN5LiA6Ie05Y+v6IO95Lya5a+86Ie05qCh6aqM5aSx5pWI77yBJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWunuS9k+agoemqjOmAmui/h++8jOWunuS9k+agoemqjOS9v+eUqOeahOinhOWImeaYr+aOp+S7tivlrp7kvZPvvIzmraPluLjlrp7kvZPmoKHpqozpgJrov4flkI7mjqfku7bmoKHpqozkuIDlrprkuZ/kvJrpgJrov4dcclxuICAgICAgICBpZiAoaXNWYWxpZGF0ZWQpIHtcclxuICAgICAgICAgIGNvbnN0IGlzRW50aXR5VmFsaWQgPSB0aGlzLnZhbGlkYXRlRW50aXR5QWxsb3dFbXB0eVJ1bGUoZW50aXR5VHlwZUluZm8pO1xyXG4gICAgICAgICAgaWYgKCFpc0VudGl0eVZhbGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDosIPnlKjooajljZXlkozlrp7kvZPkuIrnmoTpqozor4Hop4TliJksIOmAmui/h+WQjuiwg+eUqOWbnuiwg2NiXHJcbiAgICovXHJcbiAgdmFsaWRhdGVBbGwoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGVudGl0eVR5cGVJbmZvID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvO1xyXG4gICAgLy8g57uE5ZCI6KGo5Y2V5Y+q5qCh6aqM5b2T5YmN5oyJ6ZKu5omA5Zyo55qE6KGo5Y2VXHJcbiAgICBjb25zdCBlbnRpdGllczogRW50aXR5W10gPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRBbGxFbnRpdGllcygpO1xyXG4gICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlO1xyXG4gICAgbGV0IGZyYW1lQ29udGV4dHMgPSBbXTtcclxuICAgIGlmIChuYW1lc3BhY2UgIT09IG51bGwpIHtcclxuICAgICAgLy8g5a2Y5Zyo5ZG95ZCN56m66Ze077yM6K+05piO6KGo5Y2V6L6D5paw77yM5Y+v5Lul5L6d6LWW6K+l54m55oCnXHJcbiAgICAgIGZyYW1lQ29udGV4dHMgPSB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0c0J5TmFtZXNwYWNlKG5hbWVzcGFjZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDooajljZXovoPogIHvvIzojrflj5bmiYDmnInnmoTkuIrkuIvmlofvvIzlnKjmoKHpqozpmLbmrrXov4fmu6Top4TliJlcclxuICAgICAgZnJhbWVDb250ZXh0cyA9IHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRvVmFsaWRhdGUgPSBmYWxzZTtcclxuICAgIGNvbnN0IGZvcm1FcnJvcnMgPSBbXTtcclxuICAgIGZyYW1lQ29udGV4dHMuZm9yRWFjaCgoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcclxuICAgICAgaWYgKGZyYW1lQ29udGV4dC5mb3JtICYmIGZyYW1lQ29udGV4dC5mb3JtLmVuYWJsZVZhbGlkYXRlKSB7XHJcbiAgICAgICAgdG9WYWxpZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKCF0b1ZhbGlkYXRlIHx8IGVudGl0aWVzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNNb2RhbCA9IHRoaXMuaXNJbkRpYWxvZygpO1xyXG4gICAgY29uc3QgaGFzT3duVmVyaWZ5RGV0YWlsU2VydmljZSA9IHRoaXMuaGFzT3duVmVyaWZ5RGV0YWlsU2VydmljZSgpO1xyXG4gICAgbGV0IHJvb3RWaWV3TW9kZWwgPSB0aGlzLmZyYW1lQ29udGV4dC5yb290LnZpZXdNb2RlbDtcclxuICAgIGlmIChpc01vZGFsICYmIGhhc093blZlcmlmeURldGFpbFNlcnZpY2UpIHtcclxuICAgICAgcm9vdFZpZXdNb2RlbCA9IHRoaXMuZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkudmlld01vZGVsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBmb3JtVmFsaWQgPSB0cnVlO1xyXG4gICAgbGV0IGVudGl0eVZhbGlkID0gdHJ1ZTtcclxuICAgIGNvbnN0IGZvcm1WYWxpZGF0aW9uUnVsZXMgPSBuZXcgTWFwPHN0cmluZywgVmFsaWRhdGVSdWxlW10+KCk7XHJcbiAgICBmcmFtZUNvbnRleHRzLmZvckVhY2goKGZvcm1Db250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcclxuICAgICAgY29uc3QgYmluZGluZ09iamVjdCA9IGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmdldE9iamVjdCgpO1xyXG4gICAgICAvLyDpgJrnn6XmiYDmnIliaW5kaW5nRGF0YSxcclxuICAgICAgYmluZGluZ09iamVjdCAmJiBiaW5kaW5nT2JqZWN0LnNldFNob3dWYWxpZGF0aW9uTXNnKHRydWUpO1xyXG4gICAgICBpZiAoZm9ybUNvbnRleHQuZm9ybSAmJiBmb3JtQ29udGV4dC5mb3JtLmVuYWJsZVZhbGlkYXRlKSB7XHJcbiAgICAgICAgLy8g6I635Y+W5b2T5YmN6KGo5Y2V5LiK55qE5omA5pyJ6aqM6K+B6KeE5YiZXHJcbiAgICAgICAgY29uc3QgY3VycmVudEZvcm1WYWxpZGF0aW9uUnVsZXMgPSBmb3JtQ29udGV4dC5mb3JtLmdldFZhbGlkYXRpb25SdWxlcygpO1xyXG4gICAgICAgIGN1cnJlbnRGb3JtVmFsaWRhdGlvblJ1bGVzLmZvckVhY2goKHJ1bGVzLCBwYXRoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoZm9ybVZhbGlkYXRpb25SdWxlcy5oYXMocGF0aCkpIHtcclxuICAgICAgICAgICAgcnVsZXMuZm9yRWFjaChydWxlID0+IGZvcm1WYWxpZGF0aW9uUnVsZXMuZ2V0KHBhdGgpLnB1c2gocnVsZSkpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9ybVZhbGlkYXRpb25SdWxlcy5zZXQocGF0aCwgWy4uLnJ1bGVzXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9ybUNvbnRleHQuZm9ybS5zZXRTaG93VmFsaWRhdGlvbk1zZyh0cnVlKTtcclxuICAgICAgICAvLyDpgJDkuKrosIPnlKjooajljZXnmoTpqozor4HvvIzpqozor4HliY3nq6/ooajljZXop4TliJlcclxuICAgICAgICBpZiAoIWZvcm1Db250ZXh0LmZvcm0uaXNGb3JtVmFsaWQoKSkge1xyXG4gICAgICAgICAgZm9ybUVycm9ycy5wdXNoKGZvcm1Db250ZXh0LmZvcm0pO1xyXG4gICAgICAgICAgZm9ybVZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIOinpuWPkeaJgOacieWunuS9k+eahHZhbGlkYXRl5LqL5Lu2XHJcbiAgICBjb25zdCBpc011bHRpRW50aXR5VmFsaWF0ZSA9IGVudGl0aWVzLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgLy8g6aqM6K+B5omA5pyJ5a6e5L2TXHJcbiAgICBjb25zdCBvYnNlcnZhYmxlTGlzdCA9IGVudGl0aWVzLm1hcCgoZW50aXR5OiBFbnRpdHksIGluZGV4OiBudW1iZXIpID0+XHJcbiAgICAgIGVudGl0eS52YWxpZGF0ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgZm9ybVZhbGlkYXRpb25SdWxlcywgaXNNdWx0aUVudGl0eVZhbGlhdGUgPyBpbmRleCA6IG51bGwsIHRoaXMuZnJhbWVDb250ZXh0KSk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gemlwKC4uLm9ic2VydmFibGVMaXN0KS5waXBlKFxyXG4gICAgICB0YXAoKHJlc3VsdExpc3QpID0+IHtcclxuICAgICAgICBmcmFtZUNvbnRleHRzLmZvckVhY2goKGZvcm1Db250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcclxuICAgICAgICAgIGlmICghZm9ybUNvbnRleHQuZm9ybS5lbmFibGVWYWxpZGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBoYW5kbGVFcnJvcnMgPSAoZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JbXSkgPT4ge1xyXG4gICAgICAgICAgICBlcnJvcnMuZm9yRWFjaCgodmFsaWRhdGlvbkVycm9yOiBWYWxpZGF0aW9uRXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9yLmNoaWxkcmVuICYmIHZhbGlkYXRpb25FcnJvci5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9ycyh2YWxpZGF0aW9uRXJyb3IuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zdCBlcnJNc2dPYmogPSB7fTtcclxuICAgICAgICAgICAgICBsZXQgaWQgPSAnJztcclxuICAgICAgICAgICAgICBjb25zdCBmaW5kSWQgPSAodGFyZ2V0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmRhdGEgJiYgdGFyZ2V0LmRhdGEuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgaWQgPSB0YXJnZXQuZGF0YS5pZDtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRbUEFSRU5UX0NMQVNTXSkge1xyXG4gICAgICAgICAgICAgICAgICBmaW5kSWQodGFyZ2V0W1BBUkVOVF9DTEFTU10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgZmluZElkKHZhbGlkYXRpb25FcnJvci50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAvLyDlrp7kvZPpqozor4Hlh7rplJnvvIzpnIDopoHlsIbplJnor6/lsZXnpLrliLDnlYzpnaLkuIpcclxuICAgICAgICAgICAgICAvLyDlrp7kvZPkuI3kuIDlrprmmK/lvZPliY3ooYxcclxuICAgICAgICAgICAgICBsZXQgcGFyZW50UGF0aERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiBbXSxcclxuICAgICAgICAgICAgICAgIGlzVWR0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzR3JpZDogZmFsc2VcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3IudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRQYXRoRGF0YSA9IHZhbGlkYXRpb25FcnJvci50YXJnZXQuZ2V0UGF0aHMoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgY29uc3QgYmluZGluZ1BhdGggPSAnLycgKyBwYXJlbnRQYXRoRGF0YS5wYXRoLmpvaW4oJy8nKTtcclxuICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9yLmNvbnN0cmFpbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWxpZGF0aW9uRXJyb3IuY29uc3RyYWludHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgZXJyTXNnT2JqW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdmFsaWRhdGlvbkVycm9yLmNvbnN0cmFpbnRzW2tleV1cclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgLy8gaWYgKHRoaXMuZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCA9PT0gYmluZGluZ1BhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gICByb290Vmlld01vZGVsWyd2ZXJpZnlJbmZvcm1hdGlvbnMnXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgLy8gICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgLy8gICAgIHRpdGxlOiBrZXksXHJcbiAgICAgICAgICAgICAgICAgIC8vICAgICBtc2c6IHZhbGlkYXRpb25FcnJvci5jb25zdHJhaW50c1trZXldLFxyXG4gICAgICAgICAgICAgICAgICAvLyAgICAgdHlwZTogJ3dhcm4nXHJcbiAgICAgICAgICAgICAgICAgIC8vICAgfSlcclxuICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gcGFyZW50UGF0aERhdGEucGF0aC5jb25jYXQodmFsaWRhdGlvbkVycm9yLnByb3BlcnR5KTtcclxuXHJcbiAgICAgICAgICAgICAgLy9pZiAodGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoID09PSBiaW5kaW5nUGF0aCkge1xyXG4gICAgICAgICAgICAgIC8vIOWwhumUmeivr+S/oeaBr+abtOaWsOWIsGZvcm1Db250cm9s5LiKXHJcbiAgICAgICAgICAgICAgZm9ybUNvbnRleHQuYmluZGluZ0RhdGEuY2hhbmdlcy5uZXh0KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IENoYW5nZVR5cGUuVXBkYXRlRXJyb3JzLFxyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRocyxcclxuICAgICAgICAgICAgICAgIGlzVWR0OiBwYXJlbnRQYXRoRGF0YS5pc1VkdCxcclxuICAgICAgICAgICAgICAgIGlzR3JpZDogcGFyZW50UGF0aERhdGEuaXNHcmlkLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbGlkYXRpb25FcnJvci52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGVycm9yczogZXJyTXNnT2JqXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIC8vIOWxleW8gOmqjOivgee7k+aenFxyXG4gICAgICAgICAgY29uc3QgaXNWYWxpZExpc3QgPSByZXN1bHRMaXN0Lm1hcCgocmVzdWx0OiBWYWxpZGF0aW9uUmVzdWx0KSA9PiByZXN1bHQuaXNWYWxpZCk7XHJcbiAgICAgICAgICAvLyDkv53lrZjliY3lhYjosIPnlKjlrp7kvZPkuIrnmoTpqozor4Hop4TliJnvvIzlhajpg6jpgJrov4fkuYvlkI7miY3kv53lrZhcclxuICAgICAgICAgIC8vIOWunuS9k+mqjOivgemAmui/h1xyXG4gICAgICAgICAgaWYgKGlzVmFsaWRMaXN0LmZpbHRlcih4ID0+IHgpLmxlbmd0aCA9PT0gb2JzZXJ2YWJsZUxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIOWwhumUmeivr+S/oeaBr+abtOaWsOWIsGZvcm1Db250cm9s5LiKXHJcbiAgICAgICAgICAgIGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmNoYW5nZXMubmV4dCh7XHJcbiAgICAgICAgICAgICAgdHlwZTogQ2hhbmdlVHlwZS5VcGRhdGVFcnJvcnMsXHJcbiAgICAgICAgICAgICAgcGF0aDogW11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIOmqjOivgeaIkOWKn+WQjumakOiXj+i+k+WFpeaXtueahOmqjOivgVxyXG4gICAgICAgICAgICBpZiAoZm9ybVZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgYmluZGluZ09iamVjdCA9IGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmdldE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgIGJpbmRpbmdPYmplY3QgJiYgYmluZGluZ09iamVjdC5zZXRTaG93VmFsaWRhdGlvbk1zZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgY29uc3QgZm9ybSA9IGZvcm1Db250ZXh0LmZvcm07XHJcbiAgICAgICAgICAgICAgaWYgKGZvcm0pIHtcclxuICAgICAgICAgICAgICAgIGZvcm0uc2V0U2hvd1ZhbGlkYXRpb25Nc2coZmFsc2UpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5a6e5L2T6aqM6K+B5pyJ6ZSZ6K+vXHJcbiAgICAgICAgICAgIGVudGl0eVZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlc3VsdExpc3QuZm9yRWFjaCgocmVzdWx0OiBWYWxpZGF0aW9uUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmuIXpmaTpqozor4HpgJrov4fnmoTplJnor69cclxuICAgICAgICAgICAgICAgIGZvcm1Db250ZXh0LmJpbmRpbmdEYXRhLmNoYW5nZXMubmV4dCh7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6IENoYW5nZVR5cGUuVXBkYXRlRXJyb3JzLFxyXG4gICAgICAgICAgICAgICAgICBwYXRoOiBbXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9ycyhyZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KSxcclxuICAgICAgc3dpdGNoTWFwKChyZXN1bHRMaXN0KSA9PiB7XHJcbiAgICAgICAgbGV0IGlzVmFsaWRhdGVkID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgICAgICByZXN1bHRMaXN0LmZvckVhY2goKHJlc3VsdDogVmFsaWRhdGlvblJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFyZXN1bHQuaXNWYWxpZCkge1xyXG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZXJyb3JzLnB1c2goLi4ucmVzdWx0LmVycm9ycyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbGxlY3RWYWxpZGF0aW9uRXJyb3JzKHJvb3RWaWV3TW9kZWwsIGVycm9ycywgdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHZlcmlmeUluZm9ybWF0aW9ucyA9IHJvb3RWaWV3TW9kZWwudmVyaWZ5SW5mb3JtYXRpb25zO1xyXG4gICAgICAgIGlmIChpc01vZGFsICYmIGhhc093blZlcmlmeURldGFpbFNlcnZpY2UpIHtcclxuICAgICAgICAgIHZlcmlmeUluZm9ybWF0aW9ucyA9IHJvb3RWaWV3TW9kZWwudmVyaWZ5SW5mb3JtYXRpb25zLmZpbHRlcihpdGVtID0+IGl0ZW0ubmFtZXNwYWNlID09PSBuYW1lc3BhY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlm6DkuLrmoKHpqozntK/liqDnmoTnvJjmlYXvvIzlr7zoh7TkuYvliY3nmoTmoKHpqozkv6Hmga/kuIDnm7TlrZjlnKjvvIzlj6rog73pgJrov4fmoKHpqoznu5PmnpzmnaXnoa7lrprmmK/lkKbov5jmnInplJnor6/kv6Hmga9cclxuICAgICAgICBpZiAoaXNWYWxpZGF0ZWQgJiYgZm9ybVZhbGlkKSB7XHJcbiAgICAgICAgICB2ZXJpZnlJbmZvcm1hdGlvbnMgPSByb290Vmlld01vZGVsLnZlcmlmeUluZm9ybWF0aW9ucyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByb290Vmlld01vZGVsLnZlcmlmeWNhdGlvbkNoYW5nZWQubmV4dCh2ZXJpZnlJbmZvcm1hdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlRXJyb3JDbGlja0V2ZW50KCk7XHJcbiAgICAgICAgaWYgKGlzVmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICBjb25zdCBpc0VudGl0eVZhbGlkID0gdGhpcy52YWxpZGF0ZUVudGl0eUFsbG93RW1wdHlSdWxlKGVudGl0eVR5cGVJbmZvKTtcclxuICAgICAgICAgIGlmICghaXNFbnRpdHlWYWxpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qCh6aqM5a6e5L2T5piv5ZCm5ruh6Laz5LiN6IO95Li656m655qE6KeE5YiZXHJcbiAgICogQHBhcmFtIGVudGl0eSDkuLvlrp7kvZNcclxuICAgKi9cclxuICBwcml2YXRlIHZhbGlkYXRlRW50aXR5QWxsb3dFbXB0eVJ1bGUoZW50aXR5VHlwZUluZm86IERhdGFUeXBlSW5mbykge1xyXG4gICAgLy8g56Gu6K6k5a6e5L2T5ZCE5Liq5bGC57qn5Lit5piv5ZCm5a2Y5Zyo5LiN6IO95Li656m655qE6KeE5YiZXHJcbiAgICBjb25zdCBwYXRocyA9IHRoaXMuZ2V0Tm90QWxsb3dFbXB0eUJpbmRpbmdQYXRocyhlbnRpdHlUeXBlSW5mbyk7XHJcbiAgICBpZiAoIXBhdGhzIHx8IHBhdGhzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyDmib7liLDmiYDmnInkuI3lkIjms5XnmoRiaW5kaW5nUGF0aHNcclxuICAgIGNvbnN0IGludmFsaWRQYXRocyA9IHBhdGhzLmZpbHRlcigocGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgY29uc3QgYmluZGluZ0xpc3QgPSB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShiaW5kaW5nUGF0aHMpIGFzIEJpbmRpbmdMaXN0O1xyXG4gICAgICBpZiAoIWJpbmRpbmdMaXN0IHx8IGJpbmRpbmdMaXN0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIC8vIOacieWunuS9k+W/heWhq++8jOS9huWunuS9k+aVsOaNruS4uuepulxyXG4gICAgaWYgKGludmFsaWRQYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHRhYmxlTmFtZXMgPSBbXTtcclxuICAgICAgaW52YWxpZFBhdGhzLmZvckVhY2goKHBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIC8vY29uc3QgZnJhbWVDb250ZXh0cyA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0QnlCaW5kaW5nUGF0aChwYXRoLnNwbGl0KCcvJykpO1xyXG4gICAgICAgIC8vY29uc3QgZnJhbWVDb21wb25lbnRzID0gZnJhbWVDb250ZXh0cy5tYXAoZnJhbWVDb250ZXh0ID0+IGZyYW1lQ29udGV4dC5mcmFtZUNvbXBvbmVudCk7XHJcbiAgICAgICAgLy8g5om+5Yiw5omA5pyJ5a655Zmo57G757uE5Lu2XHJcbiAgICAgICAgLy9jb25zdCBjb250YWluZXJDb21wb25lbnRzID0gZnJhbWVDb21wb25lbnRzLmZpbHRlcihmcmFtZUNvbXBvbmVudCA9PiBbQ29tcG9uZW50VHlwZS5mYXJyaXNEYXRhR3JpZENvbXBvbmVudCwgQ29tcG9uZW50VHlwZS5mYXJyaXNUcmVlVGFsYmVDb21wb25lbnQsIENvbXBvbmVudFR5cGUua2VuZG9HcmlkQ29tcG9uZW50LCBDb21wb25lbnRUeXBlLnByaW1lbmdUcmVlQ29tcG9uZW50XS5pbmNsdWRlcyhmcmFtZUNvbXBvbmVudC5jb21wb25lbnRUeXBlKSk7XHJcbiAgICAgICAgLy9pZiAoISghY29udGFpbmVyQ29tcG9uZW50cyB8fCBjb250YWluZXJDb21wb25lbnRzLmxlbmd0aCA8IDEpKSB7XHJcbiAgICAgICAgY29uc3Qgdmlld01vZGVsTmFtZSA9IHRoaXMuZ2V0Vmlld01vZGVsTmFtZUJ5QmluZGluZ1BhdGhzKHBhdGguc3BsaXQoJy8nKSkgfHwgYOe7keWumui3r+W+hCR7cGF0aH1gO1xyXG4gICAgICAgIHRhYmxlTmFtZXMucHVzaCh2aWV3TW9kZWxOYW1lKTtcclxuICAgICAgICAvL31cclxuICAgICAgfSk7XHJcbiAgICAgIGlmICh0aGlzLm5vdGlmeVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoYCR7dGFibGVOYW1lcy5qb2luKCfvvIwnKX0gJHt0aGlzLmxhbmd1YWdlU2VydmljZS50YWJsZUNhbk5vdEVtcHR5fWAsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0gYmluZGluZ1BhdGhzIHBhdGjkuI3og73kuLrnqbrmiJYv77yM5LiN5pSv5oyB5Li76KGoXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWaWV3TW9kZWxOYW1lQnlCaW5kaW5nUGF0aHMoYmluZGluZ1BhdGhzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlO1xyXG4gICAgbGV0IGZyYW1lQ29udGV4dHM6IEZyYW1lQ29udGV4dFtdID0gbnVsbDtcclxuICAgIGlmIChuYW1lc3BhY2UgIT09IG51bGwpIHtcclxuICAgICAgLy8g5a2Y5Zyo5ZG95ZCN56m66Ze077yM6K+05piO6KGo5Y2V6L6D5paw77yM5Y+v5Lul5L6d6LWW6K+l54m55oCnXHJcbiAgICAgIGZyYW1lQ29udGV4dHMgPSB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0c0J5TmFtZXNwYWNlKG5hbWVzcGFjZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDooajljZXovoPogIHvvIzojrflj5bmiYDmnInnmoTkuIrkuIvmlofvvIzlnKjmoKHpqozpmLbmrrXov4fmu6Top4TliJlcclxuICAgICAgZnJhbWVDb250ZXh0cyA9IHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aCA9IGJpbmRpbmdQYXRocy5maWx0ZXIocCA9PiBwKS5qb2luKCcvJyk7XHJcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHRzLmZpbmQoKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSA9PiBmcmFtZUNvbnRleHQudmlld01vZGVsICYmIGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKS5qb2luKCcvJykgPT09IGJpbmRpbmdQYXRoKTtcclxuICAgIGNvbnN0IHZpZXdNb2RlbE5hbWUgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmZvcm0gJiYgZnJhbWVDb250ZXh0LmZvcm0uZm9ybUdyb3VwTmFtZSB8fCAnJztcclxuICAgIHJldHVybiB2aWV3TW9kZWxOYW1lO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDpgY3ljobojrflj5bmiYDmnInkuI3og73kuLrnqbrnmoTlrp7kvZPnmoTnu5Hlrprot6/lvoRcclxuICAgKiBAcGFyYW0gZW50aXR5VHlwZUluZm8gXHJcbiAgICogQHBhcmFtIHJlc3VsdHMgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXROb3RBbGxvd0VtcHR5QmluZGluZ1BhdGhzKGVudGl0eVR5cGVJbmZvOiBEYXRhVHlwZUluZm8sIHJlc3VsdHM6IHN0cmluZ1tdID0gW10pOiBzdHJpbmdbXSB7XHJcbiAgICBpZiAoIWVudGl0eVR5cGVJbmZvKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZGVlcEZpcnN0VHJhdmVyc2FsRW50aXR5VHlwZUluZm8oZW50aXR5VHlwZUluZm8sIHJlc3VsdHMpO1xyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgfVxyXG4gIHByaXZhdGUgZGVlcEZpcnN0VHJhdmVyc2FsRW50aXR5VHlwZUluZm8oZW50aXR5VHlwZUluZm86IERhdGFUeXBlSW5mbywgcmVzdWx0OiBzdHJpbmdbXSA9IFtdLCBwcmV2aW91c1ZhbHVlOiBzdHJpbmdbXSA9IFtdKSB7XHJcbiAgICAvLyDnoa7orqTlvZPliY3lrp7kvZPmmK/lkKblv4XloatcclxuICAgIGNvbnN0IGlzQWxsb3dFbXB0eSA9IHRoaXMuaXNBbGxvd0VtcHR5KGVudGl0eVR5cGVJbmZvLmVudGl0eUluZm8uYWxsb3dFbXB0eSwgcHJldmlvdXNWYWx1ZSk7XHJcbiAgICBpZiAoaXNBbGxvd0VtcHR5ID09PSBmYWxzZSkge1xyXG4gICAgICBpZiAocHJldmlvdXNWYWx1ZS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHByZXZpb3VzVmFsdWUuam9pbignLycpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g6I635Y+W5omA5pyJ5a2Q6KGoXHJcbiAgICBjb25zdCBsaXN0ID0gZW50aXR5VHlwZUluZm8uZ2V0UHJvcEluZm9zQnlHcm91cChEYXRhUHJvcEdyb3VwLkxpc3QpO1xyXG4gICAgaWYgKGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxpc3QuZm9yRWFjaCgocHJvcEluZm86IERhdGFQcm9wSW5mbykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHR5cGVJbmZvID0gcHJvcEluZm8udHlwZUluZm87XHJcbiAgICAgICAgaWYgKHR5cGVJbmZvICYmIHR5cGVJbmZvLmVudGl0eUluZm8pIHtcclxuICAgICAgICAgIHByZXZpb3VzVmFsdWUucHVzaCh0eXBlSW5mby5lbnRpdHlJbmZvLm5vZGVDb2RlKTtcclxuICAgICAgICAgIHRoaXMuZGVlcEZpcnN0VHJhdmVyc2FsRW50aXR5VHlwZUluZm8odHlwZUluZm8sIHJlc3VsdCwgcHJldmlvdXNWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIOayoeacieS4i+e6p+S6hu+8jOatpOaXtuW6lOivpea4heepuua4uOagh++8jOWwhuaUtumbhuWIsOeahOi3r+W+hOaUvuWIsOe7k+aenOmbhuS4rVxyXG4gICAgaWYgKHByZXZpb3VzVmFsdWUgJiYgcHJldmlvdXNWYWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHByZXZpb3VzVmFsdWUucG9wKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgaXNBbGxvd0VtcHR5KHZhbHVlOiBzdHJpbmcgfCBib29sZWFuLCBwYXRoczogc3RyaW5nW10pIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSAnJykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIOW8gOWPkeiAheWumuS5ieS6huS4jeiDveS4uuepuueahOinhOWImVxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0cyA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0QnlCaW5kaW5nUGF0aChwYXRocyk7XHJcbiAgICBsZXQgY2FsbGVyID0gdGhpcy5mcmFtZUNvbnRleHQuZnJhbWVDb21wb25lbnQ7XHJcbiAgICBpZiAoIWZyYW1lQ29udGV4dHMgfHwgZnJhbWVDb250ZXh0cy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIC8vIOWumuS5ieS6huinhOWImeS9huWvueW6lOeahEZyYW1l5rKh5pyJ5riy5p+TXHJcbiAgICAgIGNvbnNvbGUud2Fybihg57uR5a6a6Lev5b6EICR7cGF0aHMuam9pbignLycpfSDlrprkuYnkuobkuI3og73kuLrnqbrnmoTop4TliJnvvIzkvYbmib7kuI3liLDor6Xnu5Hlrprot6/lvoTlr7nlupTnmoTnu4Tku7bjgILor7fnoa7kv53nu4Tku7bmmL7pmpDkuI7lv4XloavkuIDoh7TjgIJgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNhbGxlciA9IGZyYW1lQ29udGV4dHMucG9wKCkuZnJhbWVDb21wb25lbnQ7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpLnN0YXJ0c1dpdGgoJ3JldHVybicpID8gdmFsdWUgOiBgcmV0dXJuICR7dmFsdWV9YDtcclxuICAgICAgY29uc3QgZmFjdG9yeSA9IG5ldyBGdW5jdGlvbihgXHJcbiAgICAgICAgdmFyIHZpZXdNb2RlbCA9IHRoaXMudmlld01vZGVsO1xyXG4gICAgICAgIHZhciBiaW5kaW5nRGF0YSA9IHRoaXMuYmluZGluZ0RhdGE7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgJHt2YWx1ZX1cclxuICAgICAgYCk7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5LmFwcGx5KGNhbGxlcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oYOaXoOaViOeahOW/heWhq+inhOWImeOAgmApO1xyXG4gICAgfVxyXG4gIH1cclxuICBjb2xsZWN0VmFsaWRhdGlvbkVycm9ycyhyb290Vmlld01vZGVsOiBWaWV3TW9kZWwsIGVycm9yczogVmFsaWRhdGlvbkVycm9yW10sIG5hbWVzcGFjZTogc3RyaW5nLCBmaWx0ZXI6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICBpZiAoZmlsdGVyKSB7XHJcbiAgICAgIHJvb3RWaWV3TW9kZWwudmVyaWZ5SW5mb3JtYXRpb25zID0gcm9vdFZpZXdNb2RlbC52ZXJpZnlJbmZvcm1hdGlvbnMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5uYW1lc3BhY2UgIT09IG5hbWVzcGFjZSk7XHJcbiAgICB9XHJcbiAgICBlcnJvcnMuZm9yRWFjaCgodmFsaWRhdGlvbkVycm9yOiBWYWxpZGF0aW9uRXJyb3IpID0+IHtcclxuICAgICAgaWYgKHZhbGlkYXRpb25FcnJvci5jaGlsZHJlbiAmJiB2YWxpZGF0aW9uRXJyb3IuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0VmFsaWRhdGlvbkVycm9ycyhyb290Vmlld01vZGVsLCB2YWxpZGF0aW9uRXJyb3IuY2hpbGRyZW4sIG5hbWVzcGFjZSwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBpZCA9ICcnO1xyXG4gICAgICBjb25zdCBmaW5kSWQgPSAodGFyZ2V0OiBhbnkpID0+IHtcclxuICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5kYXRhICYmIHRhcmdldC5kYXRhLmlkKSB7XHJcbiAgICAgICAgICBpZCA9IHRhcmdldC5kYXRhLmlkO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0W1BBUkVOVF9DTEFTU10pIHtcclxuICAgICAgICAgIGZpbmRJZCh0YXJnZXRbUEFSRU5UX0NMQVNTXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICBmaW5kSWQodmFsaWRhdGlvbkVycm9yLnRhcmdldCk7XHJcbiAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3IuY29uc3RyYWludHMpIHtcclxuICAgICAgICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0VHlwZXMgPSBPYmplY3Qua2V5cyh2YWxpZGF0aW9uRXJyb3IuY29uc3RyYWludHMpO1xyXG4gICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0VHlwZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSByb290Vmlld01vZGVsLnZlcmlmeUluZm9ybWF0aW9ucy5maWx0ZXIoaXRlbSA9PiBpdGVtLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlKS5sZW5ndGg7XHJcbiAgICAgICAgICBsZXQgaW5kZXggPSByb290Vmlld01vZGVsLnZlcmlmeUluZm9ybWF0aW9ucy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlKTtcclxuICAgICAgICAgIGluZGV4ID0gaW5kZXggPT09IC0xID8gMCA6IGluZGV4ICsgb2Zmc2V0O1xyXG4gICAgICAgICAgcm9vdFZpZXdNb2RlbC52ZXJpZnlJbmZvcm1hdGlvbnMuc3BsaWNlKGluZGV4LCAwLCB7XHJcbiAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgbmFtZXNwYWNlLFxyXG4gICAgICAgICAgICB0YXJnZXRGaWVsZDogdmFsaWRhdGlvbkVycm9yLmZpZWxkLFxyXG4gICAgICAgICAgICBpbmRleDogdmFsaWRhdGlvbkVycm9yLmluZGV4LFxyXG4gICAgICAgICAgICB0aXRsZTogdmFsaWRhdGlvbkVycm9yLnByb3BlcnR5TmFtZSxcclxuICAgICAgICAgICAgbXNnOiB2YWxpZGF0aW9uRXJyb3IuY29uc3RyYWludHNbdmFsaWRhdGlvblJlc3VsdFR5cGVzWzBdXSxcclxuICAgICAgICAgICAgZnJhbWVDb250ZXh0OiB2YWxpZGF0aW9uRXJyb3IuZnJhbWVDb250ZXh0LFxyXG4gICAgICAgICAgICBmdWxsUGF0aDogdmFsaWRhdGlvbkVycm9yLmZ1bGxQYXRoLFxyXG4gICAgICAgICAgICB0eXBlOiB2YWxpZGF0aW9uUmVzdWx0VHlwZXNbMF0gPT09ICdyZXF1aXJlZCcgPyAnZW1wdHknIDogJ2Vycm9yJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6YeN572u5qCh6aqM5L+h5oGv77yI5LuF5b2T5YmN6KGo5Y2V77yJXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0VmFsaWRhdGlvbigpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgaXNEaWFsb2cgPSB0aGlzLmlzSW5EaWFsb2coKTtcclxuICAgIGxldCByb290Vmlld01vZGVsID0gdGhpcy5mcmFtZUNvbnRleHQucm9vdC52aWV3TW9kZWw7XHJcbiAgICBpZiAoaXNEaWFsb2cpIHtcclxuICAgICAgcm9vdFZpZXdNb2RlbCA9IHRoaXMuZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkudmlld01vZGVsO1xyXG4gICAgfVxyXG4gICAgbGV0IHZlcmlmeUluZm9ybWF0aW9ucyA9IHJvb3RWaWV3TW9kZWwudmVyaWZ5SW5mb3JtYXRpb25zO1xyXG4gICAgaWYgKHZlcmlmeUluZm9ybWF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlO1xyXG4gICAgICBpZiAobmFtZXNwYWNlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmVyaWZ5SW5mb3JtYXRpb25zID0gcm9vdFZpZXdNb2RlbC52ZXJpZnlJbmZvcm1hdGlvbnMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5uYW1lc3BhY2UgIT09IG5hbWVzcGFjZSk7XHJcbiAgICAgIH1cclxuICAgICAgcm9vdFZpZXdNb2RlbC52ZXJpZnlJbmZvcm1hdGlvbnMgPSB2ZXJpZnlJbmZvcm1hdGlvbnM7XHJcbiAgICAgIC8vcm9vdFZpZXdNb2RlbC52ZXJpZnlJbmZvcm1hdGlvbnMuc3BsaWNlKDAsIHJvb3RWaWV3TW9kZWwudmVyaWZ5SW5mb3JtYXRpb25zLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBpZiAocm9vdFZpZXdNb2RlbCAmJiByb290Vmlld01vZGVsLnZlcmlmeWNhdGlvbkNoYW5nZWQpIHtcclxuICAgICAgcm9vdFZpZXdNb2RlbC52ZXJpZnljYXRpb25DaGFuZ2VkLm5leHQodmVyaWZ5SW5mb3JtYXRpb25zKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvZihudWxsKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5Zyo5by556qX5YaF6YOoXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0luRGlhbG9nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0ICYmIHRoaXMuZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkgJiYgdGhpcy5mcmFtZUNvbnRleHQuZ2V0VmlydHVhbFJvb3RGcmFtZUNvbnRleHQoKS5mcmFtZUNvbXBvbmVudCAmJiB0aGlzLmZyYW1lQ29udGV4dC5nZXRWaXJ0dWFsUm9vdEZyYW1lQ29udGV4dCgpLmZyYW1lQ29tcG9uZW50Wydpc0RpYWxvZ1Jvb3RDb21wb25lbnQnXSB8fCBmYWxzZTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5oul5pyJ54us6Ieq55qE5qCh6aqM5o+Q56S65pyN5YqhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYXNPd25WZXJpZnlEZXRhaWxTZXJ2aWNlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxWZXJpZnlEZXRhaWxTZXJ2aWNlPihWZXJpZnlEZXRhaWxTZXJ2aWNlLCBudWxsKSAhPT0gdGhpcy5mcmFtZUNvbnRleHQucm9vdC5hcHBDb250ZXh0LmluamVjdG9yLmdldDxWZXJpZnlEZXRhaWxTZXJ2aWNlPihWZXJpZnlEZXRhaWxTZXJ2aWNlLCBudWxsKTs7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmAmui/h2JpbmRpbmdQYXRo6I635Y+W5omA5pyJ5Yy56YWN55qEZnJhbWVDb250ZXh0XHJcbiAgICogQHBhcmFtIGJpbmRpbmdQYXRoIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RnJhbWVDb250ZXh0QnlCaW5kaW5nUGF0aChiaW5kaW5nUGF0aHM6IHN0cmluZ1tdKTogRnJhbWVDb250ZXh0W10ge1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGggPSBiaW5kaW5nUGF0aHMuZmlsdGVyKHAgPT4gcCkuam9pbignLycpO1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzKCkuZmlsdGVyKGZyYW1lQ29udGV4dCA9PiBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkuam9pbignLycpID09PSBiaW5kaW5nUGF0aCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IHZlcmlmeURldGFpbFNlcnZpY2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PFZlcmlmeURldGFpbFNlcnZpY2U+KFZlcmlmeURldGFpbFNlcnZpY2UsIG51bGwsIEluamVjdEZsYWdzLlNlbGYpO1xyXG4gIH1cclxuICBwcml2YXRlIGhhbmRsZUVycm9yQ2xpY2tFdmVudCgpIHtcclxuICAgIGlmICh0aGlzLnZlcmlmeURldGFpbFNlcnZpY2UgJiYgdGhpcy52ZXJpZnlEZXRhaWxTZXJ2aWNlLnZlcmlmeUNvbnRhaW5lciAmJiB0aGlzLnZlcmlmeURldGFpbFNlcnZpY2UudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlKSB7XHJcbiAgICAgIHRoaXMudmVyaWZ5RGV0YWlsU2VydmljZS52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UudmFsaWRhdG9yQ2xpY2suc3Vic2NyaWJlKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLm9uRXJyb3JJdGVtQ2xpY2soaXRlbSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIG9uRXJyb3JJdGVtQ2xpY2soaXRlbTogeyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCwgaWQ6IHN0cmluZywgdGFyZ2V0RmllbGQ6IHN0cmluZywgZnVsbFBhdGg6IHN0cmluZyB9ID0geyBmcmFtZUNvbnRleHQ6IG51bGwsIGlkOiBudWxsLCB0YXJnZXRGaWVsZDogbnVsbCwgZnVsbFBhdGg6IG51bGwgfSkge1xyXG4gICAgY29uc3QgeyBmcmFtZUNvbnRleHQsIGlkLCB0YXJnZXRGaWVsZCwgZnVsbFBhdGggfSA9IGl0ZW07XHJcbiAgICBjb25zdCBpc0dyaWRDb21wb25lbnQgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmZyYW1lQ29tcG9uZW50LmlzR3JpZENvbXBvbmVudCB8fCBmYWxzZTtcclxuICAgIGlmICghaXNHcmlkQ29tcG9uZW50KSB7XHJcbiAgICAgIGlmICghdGFyZ2V0RmllbGQpIHsgfVxyXG4gICAgICBjb25zdCBlbGVtZW50UmVmID0gZnJhbWVDb250ZXh0LmluamVjdG9yLmdldChFbGVtZW50UmVmLCBudWxsLCBJbmplY3RGbGFncy5TZWxmKSB8fCBmcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0KEVsZW1lbnRSZWYsIG51bGwpO1xyXG4gICAgICBWZXJpZnlTZXJ2aWNlLmZvY3VzRWxlbWVudCh0YXJnZXRGaWVsZCwgZWxlbWVudFJlZik7XHJcbiAgICAgIHRoaXMudmVyaWZ5RGV0YWlsU2VydmljZS52ZXJpZnlDb250YWluZXIuaW5zdGFuY2Uuc2hvd0xpc3QgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGZpbmQgZ3JpZCBjb21wb25lbnRcclxuICAgICAgY29uc3QgZ3JpZDogRGF0YWdyaWRDb21wb25lbnQgPSBmcmFtZUNvbnRleHQuY29tcG9uZW50UmVmTWFuYWdlci5nZXRDb21wb25lbnRCeVR5cGUoRGF0YWdyaWRDb21wb25lbnQpO1xyXG4gICAgICBpZiAoZ3JpZCAmJiB0YXJnZXRGaWVsZCAmJiBpZCkge1xyXG4gICAgICAgIGdyaWQuZWRpdENlbGwoaWQsIHRhcmdldEZpZWxkKTtcclxuICAgICAgICB0aGlzLnZlcmlmeURldGFpbFNlcnZpY2UudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnNob3dMaXN0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFZhbGlkYXRpb25TZXJ2aWNlIH07XHJcbiJdfQ==