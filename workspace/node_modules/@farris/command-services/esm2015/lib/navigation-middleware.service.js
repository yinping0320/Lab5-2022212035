import { Injectable, Optional } from '@angular/core';
import { EMPTY, of } from 'rxjs';
import { switchMap, throwIfEmpty } from 'rxjs/operators';
import { INSIDE_DIALOG_TOKEN, TAB_EVENT } from './types';
import { NavigationService } from './navigation.service';
import { FrameContext, UID } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
import { CardDataService } from './data-services/card-data.service';
import { DataChangeDetectionService } from './data-change-detection.service';
/**
 * 导航中间件服务
 * @scope FrameComponent
 */
// tslint:disable: no-string-literal
export class NavigationMiddlewareService {
    constructor(navigationService, frameContext, msgService, languageService, cardDataService) {
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.msgService = msgService;
        this.languageService = languageService;
        this.cardDataService = cardDataService;
        this.repository = frameContext.repository;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (this.frameContext) {
            this.appContext = this.frameContext.getFormAppContext() || null;
        }
    }
    /**
     * 关闭前处理
     */
    onClosing() {
        if (this.isInDialog()) {
            return;
        }
        this.navigationService.addEventListener(TAB_EVENT.onTabClosing, (options) => {
            if (!this.frameContext || this.frameContext.isDisposed) {
                return of(true);
            }
            return this.isChanged.pipe(switchMap((changed) => {
                if (changed && !this.appContext.opened) {
                    // 如果需要用户确认就切换到当前tab
                    if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {
                        options.beforeCloseHandle({ selectedChange: true });
                    }
                    const conform = this.msgService.question(this.languageService['exitWithoutSave']);
                    /*记录弹窗已打开*/
                    this.appContext.opened = true;
                    return conform.pipe(switchMap((result) => {
                        this.appContext.opened = false;
                        if (result) {
                            /*记录用户关闭弹窗*/
                            if (!!this.cardDataService) {
                                const revert$ = this.cardDataService.revert(options);
                                return revert$.pipe(switchMap(() => of(result)));
                            }
                        }
                        return of(result);
                    }));
                }
                else if (changed && this.appContext.opened) {
                    return of(false);
                }
                else {
                    return of(true);
                }
            }));
        });
    }
    /**
     * 是否在是弹窗窗口内
     */
    isInDialog() {
        let frameContext = this.frameContext;
        let isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;
        while (frameContext.parent !== null && !isDialogRootComponent) {
            frameContext = frameContext.parent;
            isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];
        }
        if (!isDialogRootComponent) {
            isDialogRootComponent = this.frameContext.injector.get(INSIDE_DIALOG_TOKEN, false);
        }
        return isDialogRootComponent;
    }
    /**
     * 获取tabid,如果targetId存在则直接使用targetId
     * @description 将用户要查看的数据id转换为运行框架需要的tabId
     * @param params - router参数
     * @param targetId - 要编辑/查看的数据id
     */
    getTabId(params, targetId) {
        if (!!targetId) {
            return targetId;
        }
        let paramsObj = null;
        if (!!params && params.startsWith('{') && params.endsWith('}')) {
            paramsObj = JSON.parse(params);
        }
        let paramId = null;
        if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {
            paramId = paramsObj.id;
        }
        else {
            paramId = UID.create();
        }
        return paramId;
    }
    /**
     * 是否有未保存的变更
     */
    get isChanged() {
        return DataChangeDetectionService.hasChange(this.frameContext).pipe(throwIfEmpty(() => EMPTY));
    }
}
NavigationMiddlewareService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NavigationMiddlewareService.ctorParameters = () => [
    { type: NavigationService },
    { type: FrameContext },
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: CardDataService }
];
//# sourceMappingURL=data:application/json;base64,