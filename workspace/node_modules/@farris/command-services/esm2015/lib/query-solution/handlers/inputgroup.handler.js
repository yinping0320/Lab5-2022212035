import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class InputGroupHandler {
    //qc.comparetype只有等于、相似
    convert(qc) {
        const igv = qc.value;
        const arr = [];
        if (igv.isInputText || igv.textField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': igv.textValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach(itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': itemValue,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLHVCQUF1QjtJQUN2QixPQUFPLENBQUMsRUFBa0I7UUFDeEIsTUFBTSxHQUFHLEdBQUksRUFBRSxDQUFDLEtBQXlCLENBQUM7UUFDMUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBRWYsSUFBSSxHQUFHLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO1lBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ1AsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO2dCQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUN2RixPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVM7Z0JBQ3RCLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUc7Z0JBQy9FLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztnQkFDOUIsVUFBVSxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksSUFBSTtnQkFDL0IsVUFBVSxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksSUFBSTthQUNoQyxDQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsQ0FBQztTQUNaO2FBQ0k7WUFDSCxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNwRCxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDcEIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO29CQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLO29CQUN4RixPQUFPLEVBQUUsU0FBUztvQkFDbEIsVUFBVSxFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUU7b0JBQ3hGLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDL0IsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFHLENBQUM7Z0JBQzVELEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUN6RSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDdEcsT0FBTyxHQUFHLENBQUM7YUFDWjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQzthQUNYO1NBQ0Y7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIElucHV0R3JvdXBWYWx1ZSB9IGZyb20gXCJAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvblwiO1xyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwSGFuZGxlciBpbXBsZW1lbnRzIElRdWVyeUNvbmRpdGlvbkhhbmRsZXIge1xyXG4gIC8vcWMuY29tcGFyZXR5cGXlj6rmnInnrYnkuo7jgIHnm7jkvLxcclxuICBjb252ZXJ0KHFjOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgY29uc3QgaWd2ID0gKHFjLnZhbHVlIGFzIElucHV0R3JvdXBWYWx1ZSk7XHJcbiAgICBjb25zdCBhcnIgPSBbXTtcclxuXHJcbiAgICBpZiAoaWd2LmlzSW5wdXRUZXh0IHx8IGlndi50ZXh0RmllbGQgPT0gbnVsbCkge1xyXG4gICAgICBhcnIucHVzaCh7XHJcbiAgICAgICAgJ0ZpbHRlckZpZWxkJzogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICdDb21wYXJlJzogKHFjLmNvbXBhcmVUeXBlIHx8IHFjLmNvbXBhcmVUeXBlID09PSAwKSA/IHFjLmNvbXBhcmVUeXBlIDogQ29tcGFyZVR5cGUuTGlrZSxcclxuICAgICAgICAnVmFsdWUnOiBpZ3YudGV4dFZhbHVlLC8vZW5jb2RlVVJJQ29tcG9uZW50KGlndi50ZXh0VmFsdWUpLFxyXG4gICAgICAgICdSZWxhdGlvbic6IChxYy5yZWxhdGlvbiB8fCBxYy5yZWxhdGlvbiA9PT0gMCkgPyBxYy5yZWxhdGlvbiA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlLFxyXG4gICAgICAgICdMYnJhY2tldCc6IHFjLkxicmFja2V0IHx8IG51bGwsXHJcbiAgICAgICAgJ1JicmFja2V0JzogcWMuUmJyYWNrZXQgfHwgbnVsbFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZ3YuZ2V0T3JpZ2luYWxWYWx1ZSgpLnNwbGl0KCcsJykuZm9yRWFjaChpdGVtVmFsdWUgPT4ge1xyXG4gICAgICAgIGl0ZW1WYWx1ZSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAnRmlsdGVyRmllbGQnOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAnQ29tcGFyZSc6IChxYy5jb21wYXJlVHlwZSB8fCBxYy5jb21wYXJlVHlwZSA9PT0gMCkgPyBxYy5jb21wYXJlVHlwZSA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgJ1ZhbHVlJzogaXRlbVZhbHVlLFxyXG4gICAgICAgICAgJ1JlbGF0aW9uJzogcWMuY29tcGFyZVR5cGUgPT09IENvbXBhcmVUeXBlLk5vdEVxdWFsID8gUmVsYXRpb25UeXBlLkFuZCA6IFJlbGF0aW9uVHlwZS5PcixcclxuICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgYXJyWzBdWydMYnJhY2tldCddID0gcWMuTGJyYWNrZXQgPyAocWMuTGJyYWNrZXQgKyAnKCcpIDonKCc7XHJcbiAgICAgICAgYXJyW2Fyci5sZW5ndGggLTFdWydSYnJhY2tldCddID0gcWMuUmJyYWNrZXQgPyAocWMuUmJyYWNrZXQgKyAnKScpIDogJyknO1xyXG4gICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV1bJ1JlbGF0aW9uJ10gPSAocWMucmVsYXRpb24gfHwgcWMucmVsYXRpb24gPT09IDApID8gcWMucmVsYXRpb24gOiBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==