import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
import { format, addDays, addWeeks, addMonths, addYears, startOfMonth, endOfMonth, startOfYear, endOfYear, startOfWeek, endOfWeek, getDay } from 'date-fns';
function getDate(dateValue, dtvFormat) {
    let today = new Date();
    // today.toLocaleString()
    let result = [];
    //首先判断哪些是单个日期，使用equal存入一个日期即可
    if (dateValue.isFirstDay || dateValue.isLastDay) {
        let switchValue = dateValue.dateType + '-' + (dateValue.isFirstDay ? 'first' : 'last');
        switch (switchValue) {
            case 'week-first':
                if (getDay(today) === 0) {
                    today = addDays(today, -1);
                }
                result.push(addDays(startOfWeek(today), 1));
                break;
            case 'week-last':
                if (getDay(today) === 0) {
                    today = addDays(today, -1);
                }
                result.push(addDays(endOfWeek(today), 1));
                break;
            case 'month-first':
                result.push(startOfMonth(today));
                break;
            case 'month-last':
                result.push(endOfMonth(today));
                break;
            case 'year-first':
                result.push(startOfYear(today));
                break;
            case 'year-last':
                result.push(endOfYear(today));
                break;
            default:
                result.push(today);
        }
    }
    else if (dateValue.dateType === 'day' && dateValue.period === 'present') {
        //今天
        result.push(today);
    }
    else if (dateValue.dateType === 'day' && dateValue.count === 1) {
        //昨天、明天
        let _date = addDays(today, dateValue.period === 'future' ? 1 : -1);
        result.push(_date);
    }
    else if (dateValue.period === 'present') {
        //本周、本月、本年
        switch (dateValue.dateType) {
            case 'week':
                result.push(startOfWeek(today), endOfWeek(today));
                break;
            case 'month':
                result.push(startOfMonth(today), endOfMonth(today));
                break;
            case 'year':
                result.push(startOfYear(today), endOfYear(today));
                break;
            default:
                result.push(today);
        }
    }
    else {
        let switchValue = dateValue.dateType + '-' + dateValue.period;
        switch (switchValue) {
            case 'day-previous':
                result.push(addDays(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'day-future':
                result.push(addDays(today, 1), addDays(today, dateValue.count));
                break;
            case 'week-previous':
                result.push(addWeeks(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'week-future':
                result.push(addDays(today, 1), addWeeks(today, dateValue.count));
                break;
            case 'month-previous':
                result.push(addMonths(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'month-future':
                result.push(addDays(today, 1), addMonths(today, dateValue.count));
                break;
            case 'year-previous':
                result.push(addYears(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'year-future':
                result.push(addDays(today, 1), addYears(today, dateValue.count));
                break;
            default:
                result.push(today);
        }
    }
    result = result.map(item => format(item, dtvFormat.returnFormat || 'yyyy-MM-dd'));
    return result;
}
;
export class SingleDateHandler {
    convert(qc) {
        const arr = [];
        const dtv = qc.value;
        if (typeof (dtv.dateValue) !== 'string') {
            let _dateValue = getDate(dtv.dateValue, qc.control);
            _dateValue.length === 1 && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': qc.compareType ? CompareType[qc.compareType] : CompareType.Equal,
                'Value': _dateValue[0],
                'Relation': qc.relation ? RelationType[qc.relation] : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
            _dateValue.length === 2 && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.GreaterOrEqual,
                'Value': _dateValue[0],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket ? (qc.Lbracket + '(') : '('
            }, {
                'FilterField': qc.fieldCode,
                'Compare': CompareType.LessOrEqual,
                'Value': _dateValue[1],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value,
                'Rbracket': qc.Rbracket ? (qc.Rbracket + ')') : ')'
            });
        }
        else {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': dtv.dateValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
        }
        return arr;
    }
}
//# sourceMappingURL=data:application/json;base64,