import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class SmartHelpHandler {
    convert(qc) {
        const shv = qc.value;
        if (shv.value.length == 0)
            return [];
        const arr = [];
        if (shv.isInputText || shv.valueField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': shv.textValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            shv.getOriginalValue().split(',').forEach(id => {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': id,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvcXVlcnktc29sdXRpb24vaGFuZGxlcnMvc21hcnRoZWxwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGdCQUFnQjtJQUN6QixPQUFPLENBQUMsRUFBa0I7UUFDdEIsTUFBTSxHQUFHLEdBQUksRUFBRSxDQUFDLEtBQXdCLENBQUM7UUFDekMsSUFBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFFcEMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBRyxHQUFHLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFDO1lBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUN4RixPQUFPLEVBQUcsR0FBRyxDQUFDLFNBQVM7Z0JBQ3ZCLFVBQVUsRUFBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUc7Z0JBQ2hGLGFBQWEsRUFBQyxTQUFTLENBQUMsS0FBSzthQUNoQyxDQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsQ0FBQztTQUNkO2FBQUk7WUFDRCxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMzQyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDWCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUs7b0JBQ3pGLE9BQU8sRUFBRyxFQUFFO29CQUNaLFVBQVUsRUFBRyxFQUFFLENBQUMsV0FBVyxLQUFLLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFO29CQUN6RixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztnQkFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFHLENBQUM7Z0JBQzVELEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUN6RSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDdEcsT0FBTyxHQUFHLENBQUM7YUFDZDtpQkFBSTtnQkFDRCxPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIFNtYXJ0SGVscFZhbHVlIH0gZnJvbSBcIkBmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uXCI7XHJcbmltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0SGVscEhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xyXG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBjb25zdCBzaHYgPSAocWMudmFsdWUgYXMgU21hcnRIZWxwVmFsdWUpO1xyXG4gICAgICAgIGlmKHNodi52YWx1ZS5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICBpZihzaHYuaXNJbnB1dFRleHQgfHwgc2h2LnZhbHVlRmllbGQgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiAocWMuY29tcGFyZVR5cGUgfHwgcWMuY29tcGFyZVR5cGUgPT09IDApID8gcWMuY29tcGFyZVR5cGUgOiBDb21wYXJlVHlwZS5MaWtlLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IHNodi50ZXh0VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogKHFjLnJlbGF0aW9uIHx8IHFjLnJlbGF0aW9uID09PSAwKSA/IHFjLnJlbGF0aW9uIDogUmVsYXRpb25UeXBlLkFuZCAsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgc2h2LmdldE9yaWdpbmFsVmFsdWUoKS5zcGxpdCgnLCcpLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWQgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogKHFjLmNvbXBhcmVUeXBlIHx8IHFjLmNvbXBhcmVUeXBlID09PSAwKSA/IHFjLmNvbXBhcmVUeXBlIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBxYy5jb21wYXJlVHlwZSA9PT0gQ29tcGFyZVR5cGUuTm90RXF1YWwgPyBSZWxhdGlvblR5cGUuQW5kIDogUmVsYXRpb25UeXBlLk9yLFxyXG4gICAgICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6VmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmKGFyci5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgIGFyclswXVsnTGJyYWNrZXQnXSA9IHFjLkxicmFja2V0ID8gKHFjLkxicmFja2V0ICsgJygnKSA6JygnO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLTFdWydSYnJhY2tldCddID0gcWMuUmJyYWNrZXQgPyAocWMuUmJyYWNrZXQgKyAnKScpIDogJyknO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmVsYXRpb24nXSA9IChxYy5yZWxhdGlvbiB8fCBxYy5yZWxhdGlvbiA9PT0gMCkgPyBxYy5yZWxhdGlvbiA6IFJlbGF0aW9uVHlwZS5BbmQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=