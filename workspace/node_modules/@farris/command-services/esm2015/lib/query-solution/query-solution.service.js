import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
import { FrameContext } from '@farris/devkit';
import { FrameworkSessionService } from '@farris/bef';
export class QuerySolutionService {
    constructor(frameContext, frameworkSessionService) {
        this.frameContext = frameContext;
        this.frameworkSessionService = frameworkSessionService;
    }
    getUserSessionId() {
        return this.frameworkSessionService.getUserSessionId();
    }
    setFilterConditions(params) {
        let queryConditionHandler;
        const filterConditionList = [];
        params.forEach(qc => {
            if (!qc.value.isEmpty()) {
                queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                queryConditionHandler && filterConditionList.push(...queryConditionHandler.convert(qc));
            }
        });
        //设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // const originalConditions = this.getOriginalQueryConditions(filterConditionList);
        this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);
    }
    setCurrentQueryConditions(conditions) {
        this.frameContext.uiState['currentQueryConditions'] = conditions;
    }
}
QuerySolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QuerySolutionService.ctorParameters = () => [
    { type: FrameContext },
    { type: FrameworkSessionService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9xdWVyeS1zb2x1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd0RCxNQUFNLE9BQU8sb0JBQW9CO0lBRS9CLFlBQ1UsWUFBMEIsRUFDMUIsdUJBQWdEO1FBRGhELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFHMUQsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDekQsQ0FBQztJQUVNLG1CQUFtQixDQUFDLE1BQTZCO1FBQ3RELElBQUkscUJBQTZDLENBQUM7UUFDbEQsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDdkIscUJBQXFCLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztnQkFDM0cscUJBQXFCLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcscUJBQXFCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDekY7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILDZFQUE2RTtRQUM3RSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN2RixtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVNLHlCQUF5QixDQUFDLFVBQTRCO1FBQzNELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLEdBQUcsVUFBVSxDQUFDO0lBQ25FLENBQUM7OztZQS9CRixVQUFVOzs7O1lBSkYsWUFBWTtZQUVaLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICdAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vcXVlcnljb25kaXRpb24uaGFuZGxlci5mYWN0b3J5JztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBJUXVlcnlTb2x1dGlvbkhhbmRsZXIsUXVlcnlTb2x1dGlvbkNvbXBvbmVudCB9IGZyb20gJ0Bnc3AtY21wL3F1ZXJ5c29sdXRpb24nO1xyXG5pbXBvcnQgeyBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvYmVmJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFF1ZXJ5U29sdXRpb25TZXJ2aWNlIGltcGxlbWVudHMgSVF1ZXJ5U29sdXRpb25IYW5kbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgcHJpdmF0ZSBmcmFtZXdvcmtTZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2VcclxuICApIHtcclxuXHJcbiAgfVxyXG5cclxuICBnZXRVc2VyU2Vzc2lvbklkKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZXdvcmtTZXNzaW9uU2VydmljZS5nZXRVc2VyU2Vzc2lvbklkKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0RmlsdGVyQ29uZGl0aW9ucyhwYXJhbXM6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPik6IHZvaWQge1xyXG4gICAgbGV0IHF1ZXJ5Q29uZGl0aW9uSGFuZGxlcjogSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcjtcclxuICAgIGNvbnN0IGZpbHRlckNvbmRpdGlvbkxpc3QgPSBbXTtcclxuICAgIHBhcmFtcy5mb3JFYWNoKHFjID0+IHtcclxuICAgICAgaWYgKCFxYy52YWx1ZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICBxdWVyeUNvbmRpdGlvbkhhbmRsZXIgPSBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKCkuZ2V0SGFuZGxlcihxYy5jb250cm9sLmdldENvbnRyb2xUeXBlKCkpO1xyXG4gICAgICAgIHF1ZXJ5Q29uZGl0aW9uSGFuZGxlciAmJiBmaWx0ZXJDb25kaXRpb25MaXN0LnB1c2goLi4ucXVlcnlDb25kaXRpb25IYW5kbGVyLmNvbnZlcnQocWMpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvL+iuvue9ruWIsE5nQ29tbWFuZCBwYXJhbXMuZmlsdGVy5bGe5oCn5LiK77yae1VJU1RBVEV+L3Jvb3QtY29tcG9uZW50L2ZpbHRlckNvbmRpdGlvbkxpc3R9XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC51aVN0YXRlWydmaWx0ZXJDb25kaXRpb25MaXN0J10gPSBKU09OLnN0cmluZ2lmeShmaWx0ZXJDb25kaXRpb25MaXN0KTtcclxuICAgIC8vIGNvbnN0IG9yaWdpbmFsQ29uZGl0aW9ucyA9IHRoaXMuZ2V0T3JpZ2luYWxRdWVyeUNvbmRpdGlvbnMoZmlsdGVyQ29uZGl0aW9uTGlzdCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC51aVN0YXRlWydvcmlnaW5hbEZpbHRlckNvbmRpdGlvbkxpc3QnXSA9IEpTT04uc3RyaW5naWZ5KGZpbHRlckNvbmRpdGlvbkxpc3QpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldEN1cnJlbnRRdWVyeUNvbmRpdGlvbnMoY29uZGl0aW9uczogUXVlcnlDb25kaXRpb25bXSk6IHZvaWQge1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQudWlTdGF0ZVsnY3VycmVudFF1ZXJ5Q29uZGl0aW9ucyddID0gY29uZGl0aW9ucztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6L+Y5Y6f6L+H5ruk5p2h5Lu25Lit55qEZW5jb2RlXHJcbiAgICogQHBhcmFtIGNvbmRpdGlvbnMg5p+l6K+i5pa55qGI5p6E6YCg5a6M55qE6L+H5ruk5p2h5Lu2XHJcbiAgICovXHJcbiAgLy8gcHJpdmF0ZSBnZXRPcmlnaW5hbFF1ZXJ5Q29uZGl0aW9ucyhjb25kaXRpb25zOiBBcnJheTxhbnk+KTogQXJyYXk8YW55PiB7XHJcbiAgLy8gICBjb25kaXRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25kaXRpb25zKSk7XHJcbiAgLy8gICBpZiAoY29uZGl0aW9ucyAmJiBBcnJheS5pc0FycmF5KGNvbmRpdGlvbnMpICYmIGNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gIC8vICAgICBjb25kaXRpb25zID0gY29uZGl0aW9ucy5tYXAoKGl0ZW0pID0+IHtcclxuICAvLyAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnVmFsdWUnKSkge1xyXG4gIC8vICAgICAgICAgaXRlbS5WYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChpdGVtLlZhbHVlKTtcclxuICAvLyAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcclxuICAvLyAgICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS52YWx1ZTtcclxuICAvLyAgICAgICAgIGRlbGV0ZSBpdGVtLnZhbHVlO1xyXG4gIC8vICAgICAgICAgaXRlbS5WYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcbiAgLy8gICAgICAgfVxyXG4gIC8vICAgICAgIHJldHVybiBpdGVtO1xyXG4gIC8vICAgICB9KTtcclxuICAvLyAgIH1cclxuICAvLyAgIHJldHVybiBjb25kaXRpb25zO1xyXG4gIC8vIH1cclxuXHJcbn1cclxuIl19