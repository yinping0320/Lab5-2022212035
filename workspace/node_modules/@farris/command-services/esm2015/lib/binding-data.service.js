import { Injectable } from '@angular/core';
import { AppContext, BindingData } from '@farris/devkit';
/**
 * 实体服务
 * @scope FrameComponent
 */
class BindingDataService {
    /**
     * 构造函数
     */
    constructor(bindingData, appContext) {
        this.bindingData = bindingData;
        this.appContext = appContext;
    }
    /**
     * 设置当前框架的当前行
     */
    setCurrentId(id, frameId) {
        // let bindingData = this.bindingData;
        // if (frameId) {
        //   const targetContext = this.appContext.getFrameContext(frameId);
        //   bindingData = targetContext.bindingData;
        // }
        // bindingData.list.setCurrentId(id);
        // @todo：全部重新设置一遍
        const frameContexts = Array.from(this.appContext.getAllFrameContexts().values());
        frameContexts.forEach((frameContext) => {
            const bindingData = frameContext.bindingData;
            bindingData.list.setCurrentId(id, true, false);
        });
    }
    setCurrentRow(id, frameId) {
        let bindingData = this.bindingData;
        if (frameId) {
            const targetContext = this.appContext.getFrameContext(frameId);
            bindingData = targetContext.bindingData;
        }
        bindingData.getList().setCurrentId(id);
    }
}
BindingDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BindingDataService.ctorParameters = () => [
    { type: BindingData },
    { type: AppContext }
];
export { BindingDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2RTs7O0dBR0c7QUFDSCxNQUNNLGtCQUFrQjtJQUV0Qjs7T0FFRztJQUNILFlBQ1UsV0FBd0IsRUFDeEIsVUFBc0I7UUFEdEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBRUw7O09BRUc7SUFDSCxZQUFZLENBQUMsRUFBVSxFQUFFLE9BQWU7UUFDdEMsc0NBQXNDO1FBQ3RDLGlCQUFpQjtRQUNqQixvRUFBb0U7UUFDcEUsNkNBQTZDO1FBQzdDLElBQUk7UUFDSixxQ0FBcUM7UUFFckMsaUJBQWlCO1FBQ2pCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQTBCLEVBQUUsRUFBRTtZQUNuRCxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQzdDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ00sYUFBYSxDQUFDLEVBQVUsRUFBRSxPQUFlO1FBQzlDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbkMsSUFBSSxPQUFPLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvRCxXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQztTQUN6QztRQUNELFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7O1lBcENGLFVBQVU7Ozs7WUFOVSxXQUFXO1lBQXZCLFVBQVU7O0FBNkNuQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCwgQmluZGluZ0RhdGEsIEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuXHJcbi8qKlxyXG4gKiDlrp7kvZPmnI3liqFcclxuICogQHNjb3BlIEZyYW1lQ29tcG9uZW50XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEJpbmRpbmdEYXRhU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEsXHJcbiAgICBwcml2YXRlIGFwcENvbnRleHQ6IEFwcENvbnRleHRcclxuICApIHsgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva7lvZPliY3moYbmnrbnmoTlvZPliY3ooYxcclxuICAgKi9cclxuICBzZXRDdXJyZW50SWQoaWQ6IHN0cmluZywgZnJhbWVJZDogc3RyaW5nKSB7XHJcbiAgICAvLyBsZXQgYmluZGluZ0RhdGEgPSB0aGlzLmJpbmRpbmdEYXRhO1xyXG4gICAgLy8gaWYgKGZyYW1lSWQpIHtcclxuICAgIC8vICAgY29uc3QgdGFyZ2V0Q29udGV4dCA9IHRoaXMuYXBwQ29udGV4dC5nZXRGcmFtZUNvbnRleHQoZnJhbWVJZCk7XHJcbiAgICAvLyAgIGJpbmRpbmdEYXRhID0gdGFyZ2V0Q29udGV4dC5iaW5kaW5nRGF0YTtcclxuICAgIC8vIH1cclxuICAgIC8vIGJpbmRpbmdEYXRhLmxpc3Quc2V0Q3VycmVudElkKGlkKTtcclxuXHJcbiAgICAvLyBAdG9kb++8muWFqOmDqOmHjeaWsOiuvue9ruS4gOmBjVxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0cyA9IEFycmF5LmZyb20odGhpcy5hcHBDb250ZXh0LmdldEFsbEZyYW1lQ29udGV4dHMoKS52YWx1ZXMoKSk7XHJcbiAgICBmcmFtZUNvbnRleHRzLmZvckVhY2goKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xyXG4gICAgICBiaW5kaW5nRGF0YS5saXN0LnNldEN1cnJlbnRJZChpZCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXRDdXJyZW50Um93KGlkOiBzdHJpbmcsIGZyYW1lSWQ6IHN0cmluZykge1xyXG4gICAgbGV0IGJpbmRpbmdEYXRhID0gdGhpcy5iaW5kaW5nRGF0YTtcclxuICAgIGlmIChmcmFtZUlkKSB7XHJcbiAgICAgIGNvbnN0IHRhcmdldENvbnRleHQgPSB0aGlzLmFwcENvbnRleHQuZ2V0RnJhbWVDb250ZXh0KGZyYW1lSWQpO1xyXG4gICAgICBiaW5kaW5nRGF0YSA9IHRhcmdldENvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgICB9XHJcbiAgICBiaW5kaW5nRGF0YS5nZXRMaXN0KCkuc2V0Q3VycmVudElkKGlkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJpbmRpbmdEYXRhU2VydmljZSB9O1xyXG4iXX0=