import { Injectable, Injector, Optional } from '@angular/core';
import { FrmI18nSettingService } from '@gsp-sys/rtf-common';
export class UserSettingsService {
    constructor(injector, frmI18nSettingService) {
        this.injector = injector;
        this.frmI18nSettingService = frmI18nSettingService;
    }
    /**
     * 用户时区字符串
     */
    get timeZone() {
        return this.timezone && this.timezone.id || null;
    }
    /**
     * 时区偏移
     */
    get timeZoneOffset() {
        const offset = this.timezone && this.timezone.baseOffset;
        if (offset !== null && offset !== undefined) {
            return offset;
        }
        else {
            return null;
        }
    }
    /**
     * 默认语言
     */
    get defaultLanguage() {
        return this.i18nSetting && this.i18nSetting.defaultLanguage || null;
    }
    /**
     * 日期格式化字符串
     * like: yyyy-MM-dd
     */
    get dateFormat() {
        return this.i18nSetting && this.i18nSetting.userDateFormat || null;
    }
    /**
     * 时间格式
     * like: HH:MM:ss
     */
    get timeFormat() {
        return this.i18nSetting && this.i18nSetting.userTimeFormat || null;
    }
    get dateTimeFormat() {
        const dateFormat = this.i18nSetting && this.i18nSetting.userDateFormat || 'yyyy-MM-dd';
        const timeFormat = this.i18nSetting && this.i18nSetting.userTimeFormat || 'HH:mm:ss';
        return `${dateFormat} ${timeFormat}`;
    }
    /**
     * 地址格式
     */
    get addressFormat() {
        return null;
    }
    /**
     * 数字格式
     */
    get numberFormat() {
        if (this.i18nSetting && this.i18nSetting.userNumberFormat) {
            const userNumberFormat = this.i18nSetting.userNumberFormat;
            const numberFormat = {
                negativeSign: userNumberFormat.negativeSign || '-',
                numberDecimalDigits: userNumberFormat.numberDecimalDigits || 2,
                numberDecimalSeparator: userNumberFormat.numberDecimalSeparator || '.',
                numberGroupSeparator: userNumberFormat.numberGroupSeparator || ','
            };
            return numberFormat;
        }
        return null;
    }
    /**
     * 区域代码
     */
    get regionCode() {
        return this.i18nSetting && this.i18nSetting.userRegionCode || null;
    }
    /**
     * 用户配置
     */
    get userSettings() {
        const userSettings = this.frmI18nSettingService && this.frmI18nSettingService.getSetting();
        return userSettings;
    }
    get timezone() {
        return this.i18nSetting && this.i18nSetting.timezone;
    }
    get i18nSetting() {
        return this.userSettings && this.userSettings.i18nSetting;
    }
}
UserSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UserSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: FrmI18nSettingService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1zZXR0aW5ncy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3VzZXItc2V0dGluZ3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHNUQsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFvQixRQUFrQixFQUFzQixxQkFBNEM7UUFBcEYsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFzQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0lBQUksQ0FBQztJQUU3Rzs7T0FFRztJQUNILElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDO0lBQ25ELENBQUM7SUFDRDs7T0FFRztJQUNILElBQVcsY0FBYztRQUN2QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ3pELElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQzNDLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFXLGVBQWU7UUFDeEIsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQztJQUN0RSxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUM7SUFDckUsQ0FBQztJQUNEOzs7T0FHRztJQUNILElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDO0lBQ3JFLENBQUM7SUFDRCxJQUFXLGNBQWM7UUFDdkIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsSUFBSSxZQUFZLENBQUM7UUFDdkYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsSUFBSSxVQUFVLENBQUM7UUFDckYsT0FBTyxHQUFHLFVBQVUsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFXLGFBQWE7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFXLFlBQVk7UUFDckIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7WUFDekQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1lBQzNELE1BQU0sWUFBWSxHQUFpQjtnQkFDakMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLFlBQVksSUFBSSxHQUFHO2dCQUNsRCxtQkFBbUIsRUFBRSxnQkFBZ0IsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDO2dCQUM5RCxzQkFBc0IsRUFBRSxnQkFBZ0IsQ0FBQyxzQkFBc0IsSUFBSSxHQUFHO2dCQUN0RSxvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxvQkFBb0IsSUFBSSxHQUFHO2FBQ25FLENBQUM7WUFDRixPQUFPLFlBQVksQ0FBQztTQUNyQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNEOztPQUVHO0lBQ0gsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUM7SUFDckUsQ0FBQztJQUNEOztPQUVHO0lBQ0gsSUFBWSxZQUFZO1FBQ3RCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0YsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUNELElBQVksUUFBUTtRQUNsQixPQUFPLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDdkQsQ0FBQztJQUNELElBQVksV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDNUQsQ0FBQzs7O1lBdEZGLFVBQVU7Ozs7WUFKVSxRQUFRO1lBRXBCLHFCQUFxQix1QkFJYSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE51bWJlckZvcm1hdCwgVXNlclNldHRpbmdzIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBGcm1JMThuU2V0dGluZ1NlcnZpY2UgfSBmcm9tICdAZ3NwLXN5cy9ydGYtY29tbW9uJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVzZXJTZXR0aW5nc1NlcnZpY2UgaW1wbGVtZW50cyBVc2VyU2V0dGluZ3Mge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBAT3B0aW9uYWwoKSBwcml2YXRlIGZybUkxOG5TZXR0aW5nU2VydmljZTogRnJtSTE4blNldHRpbmdTZXJ2aWNlKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICog55So5oi35pe25Yy65a2X56ym5LiyXHJcbiAgICovXHJcbiAgcHVibGljIGdldCB0aW1lWm9uZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudGltZXpvbmUgJiYgdGhpcy50aW1lem9uZS5pZCB8fCBudWxsO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDml7bljLrlgY/np7tcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IHRpbWVab25lT2Zmc2V0KCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnRpbWV6b25lICYmIHRoaXMudGltZXpvbmUuYmFzZU9mZnNldDtcclxuICAgIGlmIChvZmZzZXQgIT09IG51bGwgJiYgb2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIG9mZnNldDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDpu5jorqTor63oqIBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGRlZmF1bHRMYW5ndWFnZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4blNldHRpbmcgJiYgdGhpcy5pMThuU2V0dGluZy5kZWZhdWx0TGFuZ3VhZ2UgfHwgbnVsbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5pel5pyf5qC85byP5YyW5a2X56ym5LiyXHJcbiAgICogbGlrZTogeXl5eS1NTS1kZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgZGF0ZUZvcm1hdCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4blNldHRpbmcgJiYgdGhpcy5pMThuU2V0dGluZy51c2VyRGF0ZUZvcm1hdCB8fCBudWxsO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDml7bpl7TmoLzlvI9cclxuICAgKiBsaWtlOiBISDpNTTpzc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgdGltZUZvcm1hdCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4blNldHRpbmcgJiYgdGhpcy5pMThuU2V0dGluZy51c2VyVGltZUZvcm1hdCB8fCBudWxsO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0IGRhdGVUaW1lRm9ybWF0KCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gdGhpcy5pMThuU2V0dGluZyAmJiB0aGlzLmkxOG5TZXR0aW5nLnVzZXJEYXRlRm9ybWF0IHx8ICd5eXl5LU1NLWRkJztcclxuICAgIGNvbnN0IHRpbWVGb3JtYXQgPSB0aGlzLmkxOG5TZXR0aW5nICYmIHRoaXMuaTE4blNldHRpbmcudXNlclRpbWVGb3JtYXQgfHwgJ0hIOm1tOnNzJztcclxuICAgIHJldHVybiBgJHtkYXRlRm9ybWF0fSAke3RpbWVGb3JtYXR9YDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Zyw5Z2A5qC85byPXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBhZGRyZXNzRm9ybWF0KCk6IGFueSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5pWw5a2X5qC85byPXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBudW1iZXJGb3JtYXQoKTogTnVtYmVyRm9ybWF0IHtcclxuICAgIGlmICh0aGlzLmkxOG5TZXR0aW5nICYmIHRoaXMuaTE4blNldHRpbmcudXNlck51bWJlckZvcm1hdCkge1xyXG4gICAgICBjb25zdCB1c2VyTnVtYmVyRm9ybWF0ID0gdGhpcy5pMThuU2V0dGluZy51c2VyTnVtYmVyRm9ybWF0O1xyXG4gICAgICBjb25zdCBudW1iZXJGb3JtYXQ6IE51bWJlckZvcm1hdCA9IHtcclxuICAgICAgICBuZWdhdGl2ZVNpZ246IHVzZXJOdW1iZXJGb3JtYXQubmVnYXRpdmVTaWduIHx8ICctJyxcclxuICAgICAgICBudW1iZXJEZWNpbWFsRGlnaXRzOiB1c2VyTnVtYmVyRm9ybWF0Lm51bWJlckRlY2ltYWxEaWdpdHMgfHwgMixcclxuICAgICAgICBudW1iZXJEZWNpbWFsU2VwYXJhdG9yOiB1c2VyTnVtYmVyRm9ybWF0Lm51bWJlckRlY2ltYWxTZXBhcmF0b3IgfHwgJy4nLFxyXG4gICAgICAgIG51bWJlckdyb3VwU2VwYXJhdG9yOiB1c2VyTnVtYmVyRm9ybWF0Lm51bWJlckdyb3VwU2VwYXJhdG9yIHx8ICcsJ1xyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbnVtYmVyRm9ybWF0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWMuuWfn+S7o+eggVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgcmVnaW9uQ29kZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4blNldHRpbmcgJiYgdGhpcy5pMThuU2V0dGluZy51c2VyUmVnaW9uQ29kZSB8fCBudWxsO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDnlKjmiLfphY3nva5cclxuICAgKi9cclxuICBwcml2YXRlIGdldCB1c2VyU2V0dGluZ3MoKTogYW55IHtcclxuICAgIGNvbnN0IHVzZXJTZXR0aW5ncyA9IHRoaXMuZnJtSTE4blNldHRpbmdTZXJ2aWNlICYmIHRoaXMuZnJtSTE4blNldHRpbmdTZXJ2aWNlLmdldFNldHRpbmcoKTtcclxuICAgIHJldHVybiB1c2VyU2V0dGluZ3M7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IHRpbWV6b25lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4blNldHRpbmcgJiYgdGhpcy5pMThuU2V0dGluZy50aW1lem9uZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXQgaTE4blNldHRpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyU2V0dGluZ3MgJiYgdGhpcy51c2VyU2V0dGluZ3MuaTE4blNldHRpbmc7XHJcbiAgfVxyXG59Il19