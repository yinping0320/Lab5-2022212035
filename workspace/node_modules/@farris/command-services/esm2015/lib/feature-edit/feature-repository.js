import { Injectable, Injector } from "@angular/core";
import { Repository } from '@farris/devkit';
import { BasePathService } from "@farris/rtf";
export class FeatureRepository {
    constructor(injector, repository) {
        this.injector = injector;
        this.repository = repository;
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    getFeaturesByMaterialId(materialId) {
        const url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops');
        const body = {
            materialID: materialId
        };
        const options = {
            body
        };
        const befRepository = this.repository;
        return befRepository.proxy.request(url, 'put', null, options);
    }
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    getConfigedValueByFeatureId(materialId, configID, configType = 'Materials') {
        const url = BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo');
        const body = { objType: configType, objID: materialId, configID };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    }
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    applyFeatures(materialId, charactValue, configType = 'Materials') {
        const body = { objType: configType, objID: materialId, charactValue };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid'), 'put', null, options);
    }
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    getHelpInfo(helpid, filter, params) {
        const url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
        const httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        const body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    }
}
FeatureRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureRepository.ctorParameters = () => [
    { type: Injector },
    { type: Repository }
];
//# sourceMappingURL=data:application/json;base64,