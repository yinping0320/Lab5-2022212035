import { Injectable, Injector } from "@angular/core";
import { FeatureEditorService } from '@farris/ui-feature-editor';
import { FormNotifyService } from "../form-notify.service";
import { map, switchMap, tap } from "rxjs/operators";
import { FormLoadingService } from "../form-loading/form-loading.service";
import { FeatureDataService } from './feature-data.service';
import { LanguageService } from '../languag.service';
import { of } from "rxjs";
export class FeatureEditService {
    constructor(injector, featureEditorService, featureDataService, loadingService, notifyService, languageService) {
        this.injector = injector;
        this.featureEditorService = featureEditorService;
        this.featureDataService = featureDataService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.languageService = languageService;
    }
    edit(materialId, materialFeatureId, options) {
        if (!materialId) {
            throw new Error('[FeatureEditService]物料id不能为空！');
        }
        if (!options) {
            options = {};
        }
        if (typeof options === 'string' && options.startsWith('{') && options.endsWith('}')) {
            options = JSON.parse(options);
        }
        options.getHelpInfo = this.featureDataService.getHelpInfo;
        this.loadingService.show();
        return this.featureDataService.getFeaturesByMaterialId(materialId).pipe(tap((result) => {
            this.loadingService.hide();
            const returnValue = result || null;
            if (returnValue) {
                const featureInfo = JSON.parse(returnValue);
                const props = featureInfo.props || null;
                if (!props || props.length < 1) {
                    this.notifyService.warning(this.languageService.propsIsEmpty);
                    return;
                }
                this.featureEditorService.show(props, options);
            }
            else {
                this.notifyService.error(this.languageService.propsIsEmpty);
            }
        }));
    }
    buildFeatures(materialId, materialFeatureId) {
        const features$ = this.featureDataService.getFeaturesByMaterialId(materialId);
        return features$.pipe(switchMap(featureSet => {
            if (materialFeatureId) {
                const configedFeatures$ = this.featureDataService.getConfigedValueByFeatureId(materialFeatureId, materialFeatureId);
                return configedFeatures$.pipe(map(defaultConfigs => {
                    const featureTemplate = featureSet.props;
                    const features = this.mergeFeatures(featureTemplate, defaultConfigs);
                    return features;
                }));
            }
            else {
                return of(featureSet.props);
            }
        }));
    }
    mergeFeatures(featureTemplate, defaultConfigs) {
        return null;
    }
}
FeatureEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureEditService.ctorParameters = () => [
    { type: Injector },
    { type: FeatureEditorService },
    { type: FeatureDataService },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: LanguageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1lZGl0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZmVhdHVyZS1lZGl0L2ZlYXR1cmUtZWRpdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzFCLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFDVSxRQUFrQixFQUNsQixvQkFBMEMsRUFDMUMsa0JBQXNDLEVBQ3RDLGNBQWtDLEVBQ2xDLGFBQWdDLEVBQ2hDLGVBQWdDO1FBTGhDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUFDaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQ3RDLENBQUM7SUFFRSxJQUFJLENBQUMsVUFBa0IsRUFBRSxpQkFBMEIsRUFBRSxPQUFhO1FBQ3ZFLElBQUksQ0FBQyxVQUFVLEVB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fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGZWF0dXJlRWRpdG9yU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktZmVhdHVyZS1lZGl0b3InO1xyXG5pbXBvcnQgeyBGb3JtTm90aWZ5U2VydmljZSB9IGZyb20gXCIuLi9mb3JtLW5vdGlmeS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgRm9ybUxvYWRpbmdTZXJ2aWNlIH0gZnJvbSBcIi4uL2Zvcm0tbG9hZGluZy9mb3JtLWxvYWRpbmcuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBGZWF0dXJlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmUtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vbGFuZ3VhZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmVhdHVyZUVkaXRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBmZWF0dXJlRWRpdG9yU2VydmljZTogRmVhdHVyZUVkaXRvclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZlYXR1cmVEYXRhU2VydmljZTogRmVhdHVyZURhdGFTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogRm9ybUxvYWRpbmdTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcclxuICAgIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgKSB7IH1cclxuXHJcbiAgcHVibGljIGVkaXQobWF0ZXJpYWxJZDogc3RyaW5nLCBtYXRlcmlhbEZlYXR1cmVJZD86IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xyXG4gICAgaWYgKCFtYXRlcmlhbElkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0ZlYXR1cmVFZGl0U2VydmljZV3nianmlplpZOS4jeiDveS4uuepuu+8gScpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5zdGFydHNXaXRoKCd7JykgJiYgb3B0aW9ucy5lbmRzV2l0aCgnfScpKSB7XHJcbiAgICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgb3B0aW9ucy5nZXRIZWxwSW5mbyA9IHRoaXMuZmVhdHVyZURhdGFTZXJ2aWNlLmdldEhlbHBJbmZvO1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICByZXR1cm4gdGhpcy5mZWF0dXJlRGF0YVNlcnZpY2UuZ2V0RmVhdHVyZXNCeU1hdGVyaWFsSWQobWF0ZXJpYWxJZCkucGlwZShcclxuICAgICAgdGFwKChyZXN1bHQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gcmVzdWx0IHx8IG51bGw7XHJcbiAgICAgICAgaWYgKHJldHVyblZhbHVlKSB7XHJcbiAgICAgICAgICBjb25zdCBmZWF0dXJlSW5mbyA9IEpTT04ucGFyc2UocmV0dXJuVmFsdWUpO1xyXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSBmZWF0dXJlSW5mby5wcm9wcyB8fCBudWxsO1xyXG4gICAgICAgICAgaWYgKCFwcm9wcyB8fCBwcm9wcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnByb3BzSXNFbXB0eSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuZmVhdHVyZUVkaXRvclNlcnZpY2Uuc2hvdyhwcm9wcywgb3B0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcih0aGlzLmxhbmd1YWdlU2VydmljZS5wcm9wc0lzRW1wdHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIHByaXZhdGUgYnVpbGRGZWF0dXJlcyhtYXRlcmlhbElkOiBzdHJpbmcsIG1hdGVyaWFsRmVhdHVyZUlkPzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBmZWF0dXJlcyQgPSB0aGlzLmZlYXR1cmVEYXRhU2VydmljZS5nZXRGZWF0dXJlc0J5TWF0ZXJpYWxJZChtYXRlcmlhbElkKTtcclxuICAgIHJldHVybiBmZWF0dXJlcyQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKGZlYXR1cmVTZXQgPT4ge1xyXG4gICAgICAgIGlmIChtYXRlcmlhbEZlYXR1cmVJZCkge1xyXG4gICAgICAgICAgY29uc3QgY29uZmlnZWRGZWF0dXJlcyQgPSB0aGlzLmZlYXR1cmVEYXRhU2VydmljZS5nZXRDb25maWdlZFZhbHVlQnlGZWF0dXJlSWQobWF0ZXJpYWxGZWF0dXJlSWQsIG1hdGVyaWFsRmVhdHVyZUlkKTtcclxuICAgICAgICAgIHJldHVybiBjb25maWdlZEZlYXR1cmVzJC5waXBlKFxyXG4gICAgICAgICAgICBtYXAoZGVmYXVsdENvbmZpZ3MgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVUZW1wbGF0ZSA9IGZlYXR1cmVTZXQucHJvcHM7XHJcbiAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZXMgPSB0aGlzLm1lcmdlRmVhdHVyZXMoZmVhdHVyZVRlbXBsYXRlLCBkZWZhdWx0Q29uZmlncyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKGZlYXR1cmVTZXQucHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gIH1cclxuICBwcml2YXRlIG1lcmdlRmVhdHVyZXMoZmVhdHVyZVRlbXBsYXRlOiBhbnksIGRlZmF1bHRDb25maWdzOiBhbnkpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufSJdfQ==