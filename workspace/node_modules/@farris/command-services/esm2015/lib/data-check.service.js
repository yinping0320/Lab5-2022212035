import { Injectable, Optional } from '@angular/core';
import { empty } from 'rxjs';
import { FormMessageService } from './form-message.service';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
/**
 * 数据检查服务
 */
class DataCheckService {
    constructor(messageService, formNotifyService, languageService) {
        this.messageService = messageService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 编辑前检查
     */
    checkBeforeEdit(idToEdit) {
        const ifSkipCheck = this.ifSkipCheck(idToEdit);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToEdit) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });
        return empty();
    }
    /**
     * 查看前检查
     */
    checkBeforeView(idToView) {
        const ifSkipCheck = this.ifSkipCheck(idToView);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToView) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });
        return empty();
    }
    /**
     * 老表单跳过检查
     * @todo：待删除，兼容老表单
     */
    ifSkipCheck(id) {
        const context = this['context'];
        const params = context.command.params;
        // 表单没有重新保存过的情况
        if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {
            return true;
        }
        // 保存过但没有填参数的情况
        // @todo: 会漏掉空串的情况，目前主键解析的返回值是undefined，暂不考虑空串场景
        if (id === '') {
            return true;
        }
        return false;
    }
}
DataCheckService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataCheckService.ctorParameters = () => [
    { type: FormMessageService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { DataCheckService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jaGVjay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtY2hlY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsS0FBSyxFQUFNLE1BQU0sTUFBTSxDQUFDO0FBRTdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDs7R0FFRztBQUNILE1BQ00sZ0JBQWdCO0lBRXBCLFlBQ1UsY0FBa0MsRUFDbEMsaUJBQW9DLEVBQ3hCLGVBQWdDO1FBRjVDLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3hCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWUsQ0FBQyxRQUFnQjtRQUVyQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLElBQUksV0FBVyxLQUFLLElBQUksRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDNUYsT0FBTyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlLENBQUMsUUFBZ0I7UUFDckMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVGLE9BQU8sS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUNEOzs7T0FHRztJQUNJLFdBQVcsQ0FBQyxFQUFVO1FBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQW1CLENBQUM7UUFDbEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFdEMsZUFBZTtRQUNmLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDOUYsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELGVBQWU7UUFDZixnREFBZ0Q7UUFDaEQsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBbkVGLFVBQVU7Ozs7WUFQRixrQkFBa0I7WUFDbEIsaUJBQWlCO1lBQ2pCLGVBQWUsdUJBV25CLFFBQVE7O0FBZ0ViLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZW1wdHksIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbW1hbmRDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbWVzc2FnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbm90aWZ5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2xhbmd1YWcuc2VydmljZSc7XHJcblxyXG4vKipcclxuICog5pWw5o2u5qOA5p+l5pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIERhdGFDaGVja1NlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcclxuICAgIHByaXZhdGUgZm9ybU5vdGlmeVNlcnZpY2U6IEZvcm1Ob3RpZnlTZXJ2aWNlLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZSxcclxuICApIHtcclxuICAgIGlmICghdGhpcy5sYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgICAgdGhpcy5sYW5ndWFnZVNlcnZpY2UgPSBMYW5ndWFnZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOe8lui+keWJjeajgOafpVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjaGVja0JlZm9yZUVkaXQoaWRUb0VkaXQ6IHN0cmluZyk6IGFueSB7XHJcblxyXG4gICAgY29uc3QgaWZTa2lwQ2hlY2sgPSB0aGlzLmlmU2tpcENoZWNrKGlkVG9FZGl0KTtcclxuICAgIGlmIChpZlNraXBDaGVjayA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaWRUb0VkaXQpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnBsc1NlbGVjdEVkaXREYXRhLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgIHJldHVybiBlbXB0eSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p+l55yL5YmN5qOA5p+lXHJcbiAgICovXHJcbiAgcHVibGljIGNoZWNrQmVmb3JlVmlldyhpZFRvVmlldzogc3RyaW5nKTogYW55IHtcclxuICAgIGNvbnN0IGlmU2tpcENoZWNrID0gdGhpcy5pZlNraXBDaGVjayhpZFRvVmlldyk7XHJcbiAgICBpZiAoaWZTa2lwQ2hlY2sgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlkVG9WaWV3KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3RWaWV3RGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICByZXR1cm4gZW1wdHkoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6ICB6KGo5Y2V6Lez6L+H5qOA5p+lXHJcbiAgICogQHRvZG/vvJrlvoXliKDpmaTvvIzlhbzlrrnogIHooajljZVcclxuICAgKi9cclxuICBwdWJsaWMgaWZTa2lwQ2hlY2soaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXSBhcyBDb21tYW5kQ29udGV4dDtcclxuICAgIGNvbnN0IHBhcmFtcyA9IGNvbnRleHQuY29tbWFuZC5wYXJhbXM7XHJcblxyXG4gICAgLy8g6KGo5Y2V5rKh5pyJ6YeN5paw5L+d5a2Y6L+H55qE5oOF5Ya1XHJcbiAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KCdpZFRvRWRpdCcpID09PSBmYWxzZSAmJiBwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2lkVG9WaWV3JykgPT09IGZhbHNlKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOS/neWtmOi/h+S9huayoeacieWhq+WPguaVsOeahOaDheWGtVxyXG4gICAgLy8gQHRvZG86IOS8mua8j+aOieepuuS4sueahOaDheWGte+8jOebruWJjeS4u+mUruino+aekOeahOi/lOWbnuWAvOaYr3VuZGVmaW5lZO+8jOaaguS4jeiAg+iZkeepuuS4suWcuuaZr1xyXG4gICAgaWYgKGlkID09PSAnJykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBEYXRhQ2hlY2tTZXJ2aWNlIH07XHJcbiJdfQ==