import { Injectable, Injector } from "@angular/core";
import { AppContext, FrameContext, Repository } from "@farris/devkit";
import { BindingPathService } from "./binding-path.service";
import { FormControlService } from './form-control.service';
export class FrameContextService {
    constructor(injector, appContext, frameContext, repository, bindingPathService, formControlService) {
        this.injector = injector;
        this.appContext = appContext;
        this.frameContext = frameContext;
        this.repository = repository;
        this.bindingPathService = bindingPathService;
        this.formControlService = formControlService;
    }
    /**
       * 通过BE表名获取对应的frameContext
       * @param tableName
       * @returns
       */
    getFrameContextsByTableName(tableName) {
        if (!tableName) {
            throw new Error('tableName 不能为空。');
        }
        const dataTypeInfo = this.repository && this.repository.entityTypeInfo || null;
        if (!dataTypeInfo) {
            return null;
        }
        const bindingPaths = [];
        this.bindingPathService.getBindingPathsByTableName(dataTypeInfo, tableName, bindingPaths);
        const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
        if (!frameContexts || frameContexts.length === 0) {
            return null;
        }
        return frameContexts.filter((frameContext) => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPaths.join('/'));
    }
    /**
     * 根据字段完整路径获取所在的上下文
     * @param propertyPath
     * @param separtor
     * @returns
     */
    getFrameContextsByPropertyPath(propertyPath, separtor = '/') {
        if (!propertyPath) {
            throw new Error('propertyPath 不能为空。');
        }
        const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => {
            const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
            const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
            if (formControls && Object.keys(formControls).length > 0) {
                const key = Object.keys(formControls).find((key) => {
                    const formControl = formControls[key];
                    if (!formControl || !formControl.binding) {
                        return false;
                    }
                    const bindings = formControl.binding.split('.').filter(p => p);
                    const bindingPaths = bindingPath.split('/').filter(p => p);
                    const fullPath = bindingPaths.concat(bindings);
                    return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');
                });
                return key ? true : false;
            }
            return false;
        });
    }
    /**
     * 通过BE字段名获取字段的bindingPath
     * @param bindingPaths 绑定路径
     * @param columnName BE字段名
     * @returns
     */
    getFrameContextsByColumnName(bindingPaths, columnName) {
        if (!bindingPaths) {
            throw new Error('bindingPath 不能为空。');
        }
        if (!columnName) {
            throw new Error('columnName 不能为空。');
        }
        bindingPaths = bindingPaths.filter(p => p);
        const entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;
        if (!entityTypeInfo) {
            return null;
        }
        const dataTypeInfo = entityTypeInfo.getTypeInfoByPath(bindingPaths);
        const dataPropInfos = dataTypeInfo && dataTypeInfo.getPropInfos() || [];
        const columnPropInfo = dataPropInfos.find((dataPropInfo) => dataPropInfo.metadataInfo && (dataPropInfo.metadataInfo.originalDataField === columnName || dataPropInfo.metadataInfo.dataField === columnName));
        if (!columnPropInfo || !columnPropInfo.metadataInfo) {
            return null;
        }
        const frameContexts = this.appContext.frameContextManager.getFrameContexts();
        return frameContexts.filter((frameContext) => {
            const ngFormControls = this.formControlService.getFormControlsByFrameContext(frameContext);
            if (!ngFormControls || Object.keys(ngFormControls).length < 1) {
                return false;
            }
            const currentBindingPaths = this.bindingPathService.getBindingPathsByFrameContext(frameContext) || [];
            const isValidFrameContext = currentBindingPaths.join('/') === bindingPaths.join('/');
            if (!isValidFrameContext) {
                return false;
            }
            const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === columnPropInfo.metadataInfo.path);
            return ngFormControl ? true : false;
        });
    }
    /**
     * 通过绑定路径获取对应的组件上下文数组
     * @param bindingPath bindingPath字符串
     * @param namespace ns,默认为''
     */
    getFrameContextsByBindingPath(bindingPath, namespace = '') {
        if (Array.isArray(bindingPath)) {
            bindingPath = bindingPath.join('/');
        }
        const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => frameContext && frameContext.namespace === namespace && frameContext.viewModel.bindingPath === bindingPath);
    }
}
FrameContextService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameContextService.ctorParameters = () => [
    { type: Injector },
    { type: AppContext },
    { type: FrameContext },
    { type: Repository },
    { type: BindingPathService },
    { type: FormControlService }
];
//# sourceMappingURL=data:application/json;base64,