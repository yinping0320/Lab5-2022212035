import { Injectable, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { of, empty, EMPTY, from, Subject } from 'rxjs';
import { tap, switchMap, concatMap, last } from 'rxjs/operators';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { LanguageService } from '../languag.service';
import { FormNotifyService } from '../form-notify.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { EditStateUtil } from './utils/index';
import { FormNotifyStrategyService } from '../form-notify-strategy.service';
import { RuntimeFrameworkService } from '../rtf-service';
import { WEB_FORM_ROUTE_PARAMS_KEY } from '../types';
import { CommandService } from '../command-service';
import { ValidationService } from '../validation.service';
import { DataChangeDetectionService } from '../data-change-detection.service';
// tslint:disable: no-string-literal
// tslint:disable: max-line-length
/**
 * 卡片仓库服务
 */
class CardDataService {
    /**
     * 构造函数
     */
    constructor(formMessageService, frameContext, loadingService, formNotifyService, languageService, formErrorService, runtimeFrameworkService, commandService) {
        this.formMessageService = formMessageService;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.commandService = commandService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
    }
    /**
     * 加载数据
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    load(id) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        this.frameContext.appContext.params.set("retrieveing", true);
        this.frameContext.appContext.params.delete('queryChild');
        const get$ = this.repository.getById(id);
        return get$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 加载前
     * @param id id
     * @param transitionActionParamName 状态迁移动作参数编号
     * @returns
     */
    onLoading(transitionActionParamName) {
        const tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;
        if (!tabId) {
            return;
        }
        let skip = true;
        const listening = this.frameContext.appContext.params.get(tabId) || false;
        transitionActionParamName = transitionActionParamName || 'transitionAction';
        if (!listening) {
            this.frameContext.appContext.params.set(tabId, true);
            this.runtimeFrameworkService.getEntityParam(tabId, (options) => {
                if (skip) {
                    skip = false;
                    return;
                }
                const params = this.parseParams(options);
                if (params && params.sync) {
                    const action = params.action;
                    const id = params.id;
                    const ngCommand = this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.metadatas && this.frameContext.viewModel.metadatas[action];
                    const actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;
                    const formPrimaryValue = this.frameContext.bindingData.list.currentId;
                    const formState = this.frameContext.stateMachine.context.state;
                    let state = null;
                    let stateName;
                    if (!actionName) {
                        // 可能是用户自己配置的命令，没有状态机切换，此时不再判断状态机
                        state = formState;
                    }
                    else {
                        const ngAction = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.actions && this.frameContext.stateMachine.metadatas.actions[actionName];
                        state = ngAction && ngAction.transitTo || formState;
                        stateName = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.states[state] && this.frameContext.stateMachine.metadatas.states[state].name || this.languageService.defaultStateName;
                        if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {
                            const key = stateName.replace('{{', '').replace('}}', '');
                            stateName = this.frameContext.translate.transform(key, null);
                        }
                    }
                    const primaryValueChanged = formPrimaryValue !== id;
                    const stateChanged = formState !== state;
                    if (primaryValueChanged && stateChanged) {
                        // 均发生变化
                        const message = this.languageService.dataAndStateChanged.replace(/\$1/g, stateName);
                        this.showLoadingConfirm(message).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else if (primaryValueChanged) {
                        // 主键发生变化
                        this.showLoadingConfirm(this.languageService.dataChanged).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else if (stateChanged) {
                        // 状态发生变化
                        const message = this.languageService.stateChanged.replace(/\$1/g, stateName);
                        this.showLoadingConfirm(message).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else {
                        // 数据及状态均未发生变化
                        return of(true);
                    }
                }
            }, false);
        }
    }
    /**
     * 新增
     */
    add() {
        const lastModifiedId = this.bindingData.list.currentId;
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const create$ = this.repository.create();
        return create$.pipe(tap(() => {
            EditStateUtil.setEditState(this.frameContext, lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 级联新增
     */
    cascadeAdd() {
        const subject = new Subject();
        // 找到所有viewmodel,拿到了所有的frameContext，可能有组合表单的
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        // 找到当前frameContext的公共namespace
        const currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;
        // 拿到当前命令所在frame的表单的所有frameContext
        const currentFormFrameContexts = frameContexts.filter((context) => context.namespace === currentNamespace) || [];
        let bindingPaths = [];
        if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {
            // 找到所有下级frameContext
            const childFrameContexts = currentFormFrameContexts.filter((context) => context.viewModel.bindingPath && context.viewModel.bindingPath !== '/');
            if (childFrameContexts && childFrameContexts.length > 0) {
                let childBindingPaths = childFrameContexts.map((context) => context.viewModel.bindingPath);
                childBindingPaths = childBindingPaths.filter((item, index) => childBindingPaths.indexOf(item) === index);
                if (childBindingPaths && childBindingPaths.length > 0) {
                    bindingPaths = childBindingPaths.map((path) => path.split('/').filter((p) => p)).sort((a, b) => a.length - b.length);
                }
            }
        }
        this.loadingService.show();
        this.repository.create().pipe(switchMap((entity) => {
            const rid = entity.primaryValue;
            if (bindingPaths && bindingPaths.length > 0) {
                return from(bindingPaths).pipe(concatMap((bindingPath) => {
                    const fpath = this.getPath(this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);
                    return this.repository.appendByPath(fpath);
                }));
            }
            else {
                return of(entity);
            }
        })).pipe(last()).subscribe(() => {
            this.loadingService.hide();
            subject.next();
        }, (error) => {
            this.loadingService.hide();
            this.formErrorService.exception(this.languageService.addFailed, error);
        });
        return subject;
    }
    /**
     * 编辑（更新数据并标记编辑状态）
     */
    edit(id) {
        const update$ = this.update();
        return update$.pipe(tap(() => {
            const currentId = this.bindingData.list.currentId;
            EditStateUtil.setEditState(this.frameContext, currentId);
        }));
    }
    /**
     * 更新
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    update(id) {
        // 获取id
        id = this.bindingData.list.currentId;
        if (!id) {
            return empty();
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const update$ = this.repository.updateById(id);
        this.frameContext.appContext.params.set("retrieveing", true);
        return update$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.updateFailed, error);
        }));
    }
    updateWithoutEmpty() {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            return of(null);
        }
        else {
            return this.update();
        }
    }
    /**
     * 校验当前行是否存在
     * @returns
     */
    checkBeforeUpdate() {
        const bindingList = this.frameContext.bindingData.list;
        const id = bindingList && bindingList.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        return of(true);
    }
    /**
     * 已废弃
     * @returns
     */
    updateWithNotify() {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        else {
            return this.update();
        }
    }
    /**
     * 加载卡片数据（分页加载子表数据）
     * @deprecated 方法已废弃，请勿使用
     */
    loadPaged(filter, sort) {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // this.frameContext.root.params.set('updateWithPaging', true);
        const update$ = of(null); //this.repository.updateEntityById(id, true);
        return update$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.updateFailed, error);
        }));
    }
    /**
     * 保存
     */
    save(successMsg) {
        // 获取当前行
        const id = this.bindingData.list.currentId;
        if (!id) {
            return of(false);
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const update$ = this.repository.updateChangesById(id);
        const save$ = this.repository.applyChangesById(id);
        const result$ = update$.pipe(
        // update$ => save$
        switchMap((updateResult) => {
            if (updateResult === false) {
                return of(false);
            }
            else {
                return save$;
            }
        }), 
        // 隐藏loading
        tap(() => {
            // 取消新增状态
            EditStateUtil.setEditState(this.frameContext, id);
            this.loadingService.hideDelayLoading(loadingTimerId);
            // this.formNotifyService.info(this.languageService.saveSuccess);
            if (successMsg && successMsg.trim()) {
                let showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        const options = JSON.parse(successMsg);
                        if (options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
            }
            // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.saveFailed, error);
        }));
        return result$;
    }
    // #region 取消相关方法
    /**
     * 取消（默认取消）
     */
    cancel() {
        return this.cancelWithCheck();
    }
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    revert(options) {
        return this.cancelWithoutCheck(options);
    }
    /**
     * 取消（取消前检查未保存的变更）
     * @summary
     * 1、用户误操作：只需要做个提示就可以了；
     * 2、用户有意取消：点击取消就是要放弃所有变更，这时候询问人家是否要保存或者提示存在变更有点多此一举，确认一把即可。
     * 3、用户误操作：没有变更的情况下直接给取消了，用户会产生恐慌，因为用户有时候并不确定是否有变更，应该也确认一把。
     * @todo
     * 1、由于产品部很多代码误用了该方法，依赖了没有变更的时候直接取消，现在弹窗确认框来，不太合适；
     * 2、产品部需要用cancelWithoutCheck方法代替，目前先给兼容着，待删除。
     */
    cancelWithCheck() {
        const hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
        return hasChange$.pipe(switchMap((changed) => {
            if (!changed) {
                return this.cancelChanges();
            }
            else {
                // 确认是否取消
                const confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);
                const result$ = confirm$.pipe(switchMap((ifCancel) => {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return this.cancelChanges();
                }));
                return result$;
            }
        }));
    }
    /**
     * 取消（直接取消，不执行检查）
     */
    cancelWithoutCheck(options) {
        return this.cancelChanges(options);
    }
    /**
     * 取消
     */
    cancelChanges(options) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges(options);
        return cancel$.pipe(tap(() => {
            EditStateUtil.setEditState(this.frameContext, '');
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    // #endregion
    /**
     * 重新加载（仅供卡片取消后重新加载数据，其他场景请勿使用）
     */
    reload() {
        const isAdd = EditStateUtil.getAddState(this.frameContext);
        let id;
        if (isAdd === true) {
            id = EditStateUtil.getLastModifiedId(this.frameContext);
        }
        else {
            id = this.bindingData.list.currentId;
        }
        if (!id) {
            this.repository.entityCollection.loadEntities([]);
            return;
        }
        return this.load(id);
    }
    getPath(viewModel, bindingPath, rid) {
        let path = '/' + rid;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    resetForm(action) {
        const validationService = this.frameContext.injector.get(ValidationService, null);
        return this.frameContext.repository.cancelChanges().pipe(switchMap(() => this.commandService.execute(action).pipe(switchMap(() => {
            return validationService && validationService.resetValidation() || of(null);
        }))));
    }
    parseParams(options) {
        if (options && Object.prototype.toString.call(options) === "[object Map]" /* map */) {
            let params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);
            if (params && typeof params === 'string') {
                params = decodeURIComponent(params);
                if (params.startsWith('{') && params.endsWith('}')) {
                    params = JSON.parse(params);
                }
                return {
                    action: params.action,
                    id: params.idToView || params.idToEdit || params.id,
                    sync: params.sync || false
                };
            }
        }
        return null;
    }
    showLoadingConfirm(message) {
        return this.formMessageService.confirm(message).pipe(switchMap((result) => {
            if (result === true) {
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    }
}
CardDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CardDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: FrameContext },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormErrorService },
    { type: RuntimeFrameworkService },
    { type: CommandService }
];
export { CardDataService };
//# sourceMappingURL=data:application/json;base64,