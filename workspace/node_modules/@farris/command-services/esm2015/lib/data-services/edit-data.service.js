import { Injectable } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { EMPTY } from 'rxjs';
import { tap } from 'rxjs/operators';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { LanguageService } from '../languag.service';
import { FormErrorService } from '../error/form-error.service';
import { EditStateUtil } from './utils/index';
/**
 * 数据编辑服务
 */
class EditDataService {
    /**
     * 构造函数
     */
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.errorService = this.frameContext.injector.get(FormErrorService, null);
    }
    /**
     * 编辑（支持加锁）
     */
    edit(id) {
        id = id || this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const edit$ = this.repository.editEntityById(id);
        const result$ = edit$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            EditStateUtil.setEditState(this.frameContext, id);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.updateFailed, error);
        }));
        return result$;
    }
}
EditDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EditDataService.ctorParameters = () => [
    { type: FrameContext }
];
export { EditDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9lZGl0LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkUsT0FBTyxFQUFjLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHOUM7O0dBRUc7QUFDSCxNQUNNLGVBQWU7SUEyQm5COztPQUVHO0lBQ0gsWUFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQW1DLENBQUM7UUFDeEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBcUIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQWtCLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBbUIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLEVBQVU7UUFFcEIsRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDM0MsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNQLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JELGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwRCxDQUFDLEVBQ0QsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNiLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUNGLENBQ0YsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7OztZQWhFRixVQUFVOzs7O1lBYm1CLFlBQVk7O0FBaUYxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEVudGl0eSwgQmluZGluZ0RhdGEsIEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvYmVmJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGb3JtTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuLi9mb3JtLWxvYWRpbmcvZm9ybS1sb2FkaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vZXJyb3IvZm9ybS1lcnJvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRWRpdFN0YXRlVXRpbCB9IGZyb20gJy4vdXRpbHMvaW5kZXgnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDmlbDmja7nvJbovpHmnI3liqFcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRWRpdERhdGFTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5a6e5L2T5LuT5bqTXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcblxyXG4gIC8qKlxyXG4gICAqIOe7keWumuaVsOaNrlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhO1xyXG5cclxuICAvKipcclxuICAgKiBMb2FkaW5n5pyN5YqhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogRm9ybUxvYWRpbmdTZXJ2aWNlO1xyXG5cclxuICAvKipcclxuICAgKiDor63oqIDmnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlO1xyXG5cclxuICAvKipcclxuICAgKiDplJnor6/lpITnkIbmnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIGVycm9yU2VydmljZTogRm9ybUVycm9yU2VydmljZTtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PEZvcm1Mb2FkaW5nU2VydmljZT4oRm9ybUxvYWRpbmdTZXJ2aWNlLCBudWxsKTtcclxuICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PExhbmd1YWdlU2VydmljZT4oTGFuZ3VhZ2VTZXJ2aWNlLCBudWxsKTtcclxuICAgIHRoaXMuZXJyb3JTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PEZvcm1FcnJvclNlcnZpY2U+KEZvcm1FcnJvclNlcnZpY2UsIG51bGwpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog57yW6L6R77yI5pSv5oyB5Yqg6ZSB77yJXHJcbiAgICovXHJcbiAgcHVibGljIGVkaXQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8RW50aXR5PiB7XHJcblxyXG4gICAgaWQgPSBpZCB8fCB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCBlZGl0JCA9IHRoaXMucmVwb3NpdG9yeS5lZGl0RW50aXR5QnlJZChpZCk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gZWRpdCQucGlwZShcclxuICAgICAgdGFwKFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICBFZGl0U3RhdGVVdGlsLnNldEVkaXRTdGF0ZSh0aGlzLmZyYW1lQ29udGV4dCwgaWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UudXBkYXRlRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgRWRpdERhdGFTZXJ2aWNlIH07XHJcbiJdfQ==