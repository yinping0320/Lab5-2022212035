import { Injectable, Optional } from '@angular/core';
import { empty, of, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { Repository, ViewModel } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
/**
 * 子列表取数服务
 */
class SubListDataService {
    /**
     * 构造函数
     */
    constructor(msgService, repository, loadingService, viewModel, languageService, formNotifyService, formErrorService) {
        this.msgService = msgService;
        this.repository = repository;
        this.loadingService = loadingService;
        this.viewModel = viewModel;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.viewModel = viewModel;
    }
    /**
     * 新增
     */
    add() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'add' });
        }
        const path = this.getPath();
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const append$ = this.repository.appendByPath(path);
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 在指定位置插入
     * @param position 位置
     */
    insert(position = -1) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        const path = this.getPath();
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const append$ = this.repository.insertByPath(path, position);
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 删除子表数据
     */
    remove(id, successMsg) {
        const msg = successMsg ? successMsg : '';
        return this.innerRemove(id, false, msg);
    }
    /**
     * 删除子表数据（不确认）
     */
    removeWithoutConfirm(id) {
        return this.innerRemove(id, true, '');
    }
    /**
     * 批量删除子表
     * @param ids ids
     * @param successMsg 自定义提示信息
     */
    removeChildrenByIds(ids, successMsg) {
        if (!ids) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        const action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return EMPTY;
            }
            const path = this.getPath();
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.batchRemoveByPath(path, ids);
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 删除
     */
    innerRemove(id, isConfirm, successMsg) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'remove' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        let action$;
        if (isConfirm === false) {
            action$ = this.msgService.question(this.languageService.confirmDeletion);
        }
        else {
            action$ = of(true);
        }
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            const path = this.getPath();
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeByPath(path, id);
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 删除并保存
     * @param id id
     * @param successMsg 自定义提示信息
     */
    removeAndSave(id, successMsg) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeAndSave' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return empty();
        }
        const action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            // 删除子表数据
            const path = this.getPath();
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeByPath(path, id);
            return remove$.pipe(
            // 执行主表保存
            switchMap(() => {
                const fid = this.viewModel.bindingData.list.currentId;
                return this.repository.applyChangesById(fid);
            }), 
            // 隐藏加载中
            tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 上移或下移数据
     * @param direction 方向，up | down
     * @param field 排序字段
     * @param targets 要移动的数据
     * @description
     * 使用该方法时排序字段必须有值，否则无法排序
     */
    move(direction, field, targets) {
        if (!targets) {
            return;
        }
        if (typeof targets === 'string') {
            targets = targets.split(',').filter(p => p);
        }
        const bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (!bindingPath) {
            return;
        }
        const bindingList = this.viewModel.bindingData.getList();
        if (!bindingList || bindingList.length < 1) {
            return;
        }
        targets.forEach((target) => {
            const index = bindingList.getIndexById(target);
            if (index === -1) {
                return;
            }
            const item = bindingList.findById(target);
            const position = item.getValue(field);
            const base = direction === 'up' ? -1 : 1;
            // 待交换的行信息
            const exchangeRowIndex = index + base;
            if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {
                // 第一行无法上移，最后一行无法下移
                return;
            }
            const exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);
            const exchangeRow = bindingList.findById(exchangeRowId);
            const exchangeRowPosition = exchangeRow[field];
            // 移动行和交换行都没有排序
            if (this.isNullOrEmpty(position) && this.isNullOrEmpty(exchangeRowPosition)) {
                return;
            }
            bindingList.swapById(target, exchangeRowId);
            exchangeRow.setValue(field, position, true, true);
            item.setValue(field, exchangeRowPosition, true, true);
        });
    }
    isNullOrEmpty(value) {
        return value === '' || value === null || value === undefined;
    }
    /**
     * 获取完整路径
     * @todo：强识别到从表这一级
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    getPath() {
        const bindingPath = this.viewModel.bindingPath;
        const rid = this.viewModel.bindingData.list.currentId; // root表数据id
        let path = '/' + rid;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 获取根组件appContext
     */
    get messagePipe() {
        if (this.viewModel && this.viewModel.frameContext) {
            const appContext = this.viewModel.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
}
SubListDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubListDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: Repository },
    { type: FormLoadingService },
    { type: ViewModel },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormNotifyService },
    { type: FormErrorService }
];
export { SubListDataService };
//# sourceMappingURL=data:application/json;base64,