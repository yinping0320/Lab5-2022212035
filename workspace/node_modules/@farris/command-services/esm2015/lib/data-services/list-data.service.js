import { Injectable, Optional } from '@angular/core';
import { of, empty, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { Repository, BindingData, ViewModel, EntityPathConverter } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { CommandService } from '../command-service';
import { FilterConditionService } from '../filter-condition.service';
import { DataGridService } from '../data-grid.service';
import { DataChangeDetectionService } from '../data-change-detection.service';
// tslint:disable: no-string-literal max-line-length
/**
 * 列表仓库服务
 */
class ListDataService {
    /**
     * 构造
     * @param msgService msgService
     * @param repository repository
     * @param bindingData bindingData
     * @param loadingService loadingService
     * @param languageService languageService
     * @param formNotifyService formNotifyService
     * @param formErrorService formErrorService
     * ! @param viewModel viewModel,vm是后期注入的，老表单获取不到，一定要做非空判断
     * @param filterConditionService filterConditionService
     */
    constructor(msgService, repository, bindingData, loadingService, languageService, formNotifyService, formErrorService, viewModel, filterConditionService) {
        this.msgService = msgService;
        this.repository = repository;
        this.bindingData = bindingData;
        this.loadingService = loadingService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        this.viewModel = viewModel;
        this.filterConditionService = filterConditionService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        // if (!filterConditionService) {
        //   this.filterConditionService = new FilterConditionService();
        // }
    }
    /**
     * 加载
     */
    load(filter, sort) {
        // 参数处理
        filter = !filter ? '[]' : filter;
        sort = !sort ? '[]' : sort;
        // 合并过滤条件
        filter = this.mergeFilterConditions(filter);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        const loadingTimerId = this.loadingService.showLoadingWithDelay(200);
        const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
        return query$.pipe(tap(() => {
            // 触发远端合计事件
            this.fireQueryEvent(filter);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 过滤数据
     * @param filter 过滤条件
     * @param sort 排序条件
     */
    filter(filter, sort) {
        // 参数处理
        filter = !filter ? '[]' : filter;
        sort = !sort ? '[]' : sort;
        // 合并过滤条件
        filter = this.mergeFilterConditions(filter);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        const loadingTimerId = this.loadingService.showLoadingWithDelay(200);
        const query$ = this.repository.filter(JSON.parse(filter), JSON.parse(sort));
        return query$.pipe(tap(() => {
            // 触发远端合计事件
            this.fireQueryEvent(filter);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 查询
     */
    query(filter, sort, pageSize, pageIndex) {
        // 参数处理
        filter = (filter === '') ? '[]' : filter;
        sort = (sort === '') ? '[]' : sort;
        // 合并过滤条件
        filter = this.mergeFilterConditions(filter);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(5);
        const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), pageSize, pageIndex);
        return query$.pipe(tap(() => {
            // 触发远端合计事件
            this.fireQueryEvent(filter);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.queryFailed, error);
        }));
    }
    queryChild(filter, sort) {
        // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;
        // if (isUpdateWithPaging) {
        //   return of(null);
        // }
        // tslint:disable-next-line: max-line-length
        const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
        const paths = fullPaths.slice(0, fullPaths.length - 1);
        // debug
        // tslint:disable-next-line: max-line-length
        const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
        const bindingData = this.viewModel.bindingData;
        let nodeCode = bindingPaths[bindingPaths.length - 1];
        nodeCode = nodeCode.substr(0, nodeCode.length - 1);
        // 获取上级实体
        const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
        const BindingList = bindingData.getValue(parentPaths);
        if (!BindingList) {
            return;
        }
        this.viewModel.frameContext.appContext.params.delete("retrieveing");
        const configPath = `/${nodeCode}`;
        const config = this.repository.entityCollection.getPaginationConfigByPath(configPath);
        if (config) {
            const { pageIndex = 1, pageSize = 0 } = config;
            // pageSize = 0表示未分页
            if (pageSize !== 0) {
                this.viewModel.frameContext.appContext.params.set('queryChild', true);
                const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
                return request$.pipe(tap(() => { }, error => {
                    this.formErrorService.exception(this.languageService.queryFailed, error);
                }));
            }
        }
    }
    /**
     * 获取分页信息
     * @param nodeCode nodeCode
     * @returns 分页信息，包括：分页大小、当前页码
     * @description 基本分页信息在分页信息中存储时key为nodeCode
     */
    /*private getPagingInfo(nodeCode: string) {
      const result: { pageIndex?: number, pageSize?: number } = {};
      const nodeCodePath = `/${nodeCode}`;
      const defaultPagingInfo = this.repository.entityCollection.getPaginationConfigByPath(nodeCodePath);
      const pageSize = defaultPagingInfo && defaultPagingInfo.pageSize || 0;
      const pageIndex = defaultPagingInfo && defaultPagingInfo.pageIndex || 1;
      result.pageIndex = pageIndex;
      result.pageSize = pageSize;
      return result;
    }*/
    /**
     * 追加一条新数据
     */
    append() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'append' });
        }
        const append$ = this.repository.append();
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.appendFailed, error);
        }));
    }
    /**
     * 当前行前或后插入数据
     * @param position 1 | -1
     */
    insert(position = -1) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        const append$ = this.repository.insert(position);
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.appendFailed, error);
        }));
    }
    /**
     * 提交变更（批量编辑页面，行切换时提交增量）
     */
    updateChanges() {
        const update$ = this.repository.updateAllChanges();
        return update$;
    }
    /**
     * 批量保存
     * @param successMsg 自定义提示信息
     */
    save(successMsg) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const save$ = this.repository.applyChanges();
        const result$ = save$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            if (successMsg && successMsg.trim()) {
                let showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        const options = JSON.parse(successMsg);
                        if (options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                this.formNotifyService.success(this.languageService.saveSuccess, { hideTitle: true });
            }
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.multiSaveFailed, error);
        }));
        return result$;
    }
    /**
     * 删除
     * @param id 要删除的数据的id
     * @param ifSave 是否保存
     * @param successMsg 自定义提示信息
     * @param confirm 是否需要确认
     * @param breakable 是否可中断，ifSave为false时流会中断
     */
    remove(id, ifSave, successMsg, confirm = true, breakable = true) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'delete' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        confirm = (confirm === false || confirm === 'false') ? false : true;
        breakable = (breakable === false || breakable === 'false') ? false : true;
        const action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : of(true);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            ifSave = (ifSave === false || ifSave === 'false') ? false : true;
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeById(id, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }), switchMap(() => {
                if (ifSave === true || !breakable) {
                    // return this.load();
                    return of([]);
                }
                else {
                    // 批量编辑列表表格处于编辑态场景时，为防止执行后续命令导致数据重新加载，所以在此将命令中断了。但同时也导致了删除数据后勾选记录依然存在。所以在这里需要单独调用一次清空勾选方法。
                    const datagridService = new DataGridService();
                    datagridService.context = this['context'];
                    datagridService.uncheckDeletedRows([id]);
                    return empty();
                }
            }));
        }));
    }
    /**
     * 批量删除
     * @param ids ids
     * @param ifSave 是否保存
     * @param successMsg 自定义提示信息
     * @param deleteCurrentRowIfNoChecks 没有勾选时删除当前行
     */
    removeRows(ids, ifSave, successMsg, deleteCurrentRowIfNoChecks = false) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeRows' });
        }
        deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;
        if (!ids || ids.length === 0) {
            const currentId = this.bindingData.list.currentId;
            if (deleteCurrentRowIfNoChecks === true && currentId) {
                ids = [this.bindingData.list.currentId];
            }
            else {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return empty();
            }
        }
        const action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeByIds(ids, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }), switchMap(() => {
                return of([]);
            }));
        }));
    }
    /**
     * 删除后的刷新
     */
    refreshAfterRemoving(loadCmdName, loadCmdFrameId) {
        if (this.viewModel && loadCmdName && loadCmdFrameId) {
            const commandService = this.viewModel.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        }
        return this.load();
    }
    /**
     * 刷新
     * @param loadCmdName 刷新命令
     * @param loadCmdFrameId 刷新命令所在的frameId
     */
    refresh(loadCmdName, loadCmdFrameId) {
        if (this.viewModel && loadCmdName && loadCmdFrameId) {
            const commandService = this.viewModel.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        }
        return this.load();
    }
    /**
     * 取消时检测未保存记录
     */
    cancel() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'cancel' });
        }
        const hasChange$ = DataChangeDetectionService.hasChange(this.viewModel.frameContext);
        return hasChange$.pipe(switchMap((changed) => {
            if (!changed) {
                return this._cancel();
            }
            else {
                return this.msgService.question(this.languageService['cancelWithoutSave']).pipe(switchMap((ifCancel) => {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return this._cancel();
                }));
            }
        }));
    }
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    revert() {
        return this._cancel();
    }
    /**
     * 取消（内部取消）
     */
    _cancel() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    /**
     * 获取根组件appContext
     */
    get messagePipe() {
        if (this.viewModel && this.viewModel.frameContext) {
            const appContext = this.viewModel.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
    /**
     * 触发查询事件
     * @param filters 过滤条件
     */
    fireQueryEvent(filters) {
        const messagePipe = this.messagePipe;
        // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;
        if (messagePipe) {
            messagePipe.next({ type: 'query' });
        }
    }
    /**
     * 合并过滤条件
     * @param filter 表单过滤条件
     */
    mergeFilterConditions(filter) {
        if (typeof filter === 'string') {
            filter = JSON.parse(filter) || [];
        }
        const filters = filter;
        const bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (bindingPath) {
            const originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];
            // this.filterConditionService.getFilters(bindingPath) || [];
            const conditions = Array.from(originalConditions);
            if (conditions && conditions.length > 0) {
                /* filters.forEach((item: any, index: number) => {
                  const field = item.FilterField || null;
                  if (field) {
                    const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);
                    if (duplicateIndex !== -1) {
                      filters[index] = conditions[duplicateIndex];
                      conditions.splice(duplicateIndex, 1);
                    }
                  }
                });*/
                // 修改命令上过滤条件的最后一个查询关系为and
                if (filters.length > 0) {
                    // 最后一个过滤条件
                    const lastFilter = filters[filters.length - 1];
                    if (lastFilter) {
                        if (lastFilter.hasOwnProperty('Relation')) {
                            delete lastFilter.Relation;
                        }
                        lastFilter.relation = 1;
                    }
                }
                // 合并新的过滤条件和原来命令上的过滤条件
                filters.push(...conditions);
            }
        }
        return JSON.stringify(filters);
    }
    /**
     * 合并排序条件
     * @param sort 排序条件
     */
    mergeSortConditions(sort) {
        if (typeof sort === 'string') {
            sort = JSON.parse(sort) || [];
        }
        const sorts = sort;
        const bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (bindingPath) {
            // 获取当前绑定路径的所有排序条件
            const originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, (direction) => {
                if (direction === 'asc') {
                    return 0;
                }
                else {
                    return 1;
                }
            }) || [];
            const conditions = Array.from(originalConditions);
            // 如果当前绑定路径有排序条件，则忽略命令上预制的排序条件
            if (conditions && conditions.length > 0) {
                // 遍历已有的过滤条件，如果有重复的field，用后者的覆盖已有的
                /* sorts.forEach((item: any, index: number) => {
                  const field = item.SortField || null;
                  if (field) {
                    const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);
                    if (duplicateIndex !== -1) {
                      sorts[index] = conditions[duplicateIndex];
                      conditions.splice(duplicateIndex, 1);
                    }
                  }
                });*/
                return JSON.stringify(conditions);
                // 将其余排序条件添加到排序数组
                // sorts.push(...conditions);
            }
        }
        return JSON.stringify(sorts);
    }
}
ListDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ListDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: Repository },
    { type: BindingData },
    { type: FormLoadingService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormNotifyService },
    { type: FormErrorService },
    { type: ViewModel },
    { type: FilterConditionService }
];
export { ListDataService };
//# sourceMappingURL=data:application/json;base64,