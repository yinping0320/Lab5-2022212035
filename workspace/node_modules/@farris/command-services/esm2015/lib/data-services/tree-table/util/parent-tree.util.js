/**
 * 树数据的帮助类
 */
class ParentTreeNodeUtil {
    /**
     * 选中第一个根节点
     */
    selectFirstRootNode(bindingData, hierarchyInfoKey) {
        const treeNodesData = bindingData.list.toJSON();
        const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);
        return firstRootNodeId;
    }
    selectNodeByBindingList(bindingList, hierarchyInfoKey, selectedNodeId) {
        const treeNodesData = bindingList.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        let currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        setTimeout(() => {
            bindingList.setCurrentId(currentId, true, true);
        }, 0);
    }
    /**
     * 选中节点
     */
    selectedNode(bindingData, hierarchyInfoKey, selectedNodeId) {
        const treeNodesData = bindingData.list.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        let currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        if (bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        setTimeout(() => {
            bindingData.list.currentId = null;
            bindingData.list.setCurrentId(currentId, true, true);
        }, 0);
    }
    /**
     * 检查是否有子节点
     */
    hasChildNodes(treeNodesData, hierarchyInfoKey, fid) {
        const fNodeData = this.getNodeDataById(treeNodesData, fid);
        // const fLayer = fNodeData[hierarchyInfoKey]['layer'];
        const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];
        // 非明细节点，返回true
        if (fIsDetail === false) {
            return true;
        }
        return false;
        // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fid);
        // return childNodesData.length > 0;
    }
    /**
     * 获取根节点（多个根节点时获取第一个）
     * @return 找不到时返回null
     */
    getFirstNodeId(treeNodesData, hierarchyInfoKey) {
        let rootData = treeNodesData.find((itemData) => {
            const layer = itemData[hierarchyInfoKey]['layer'];
            return layer === 1;
        });
        if (!rootData) {
            const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);
            rootData = treeNodesData.find((itemData) => {
                const layer = itemData[hierarchyInfoKey]['layer'];
                return layer === rootLayer;
            });
        }
        return rootData ? rootData['id'] : '';
    }
    getRootLayer(treeNodesData, hierarchyInfoKey) {
        let layer = null;
        if (treeNodesData && Array.isArray(treeNodesData)) {
            const layers = treeNodesData.map(item => {
                const layer = item[hierarchyInfoKey]['layer'];
                return layer;
            });
            const minLayer = Math.min.apply(Math, layers);
            if (!isNaN(minLayer)) {
                layer = minLayer;
            }
        }
        return layer;
    }
    /**
     * 获取下一个节点（删除后）
     */
    getNextNodeId(treeNodesData, hierarchyInfoKey, currentId) {
        // 当前节点信息
        const currentNodeData = treeNodesData.find((itemData) => {
            return itemData['id'] === currentId;
        });
        const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];
        // 父节点信息
        const fLayer = currentLayer - 1;
        const fParentElement = currentNodeData[hierarchyInfoKey]['parentElement'];
        // 查找兄弟节点
        const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement);
        // 如果没有兄弟节点，向上查找
        if (siblingtreeNodesData.length === 1) {
            const parentData = treeNodesData.find((itemData) => {
                return itemData['id'] === fParentElement;
            });
            // 存在父节点，则设置父节点；
            // 不存在父节点，则设置第一个根节点。
            if (!parentData) {
                return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            return parentData['id'];
        }
        else {
            return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);
        }
    }
    /**
     * 获取下个兄弟节点的id
     */
    getNextSiblingNodeId(siblingtreeNodesData, currentId) {
        if (siblingtreeNodesData.length <= 1) {
            return '';
        }
        const currentIndex = siblingtreeNodesData.findIndex((itemData) => {
            return itemData['id'] === currentId;
        });
        // 最后一行上移一行，其他下移一行
        let nextIndex = -1;
        if (currentIndex === siblingtreeNodesData.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return siblingtreeNodesData[nextIndex]['id'];
    }
    /**
     * 获取下级节点的BindingObjects集合
     */
    getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement) {
        const childtreeNodesData = treeNodesData.filter((itemData) => {
            const layer = itemData[hierarchyInfoKey]['layer'];
            const parentElement = itemData[hierarchyInfoKey]['parentElement'];
            return (layer === fLayer + 1) && fParentElement == parentElement;
        });
        return childtreeNodesData;
    }
    /**
     * 获取id获取节点数据
     */
    getNodeDataById(treeNodesData, id) {
        const nodeData = treeNodesData.find((itemData) => {
            return itemData['id'] === id;
        });
        return nodeData ? nodeData : null;
    }
}
export { ParentTreeNodeUtil };
//# sourceMappingURL=data:application/json;base64,