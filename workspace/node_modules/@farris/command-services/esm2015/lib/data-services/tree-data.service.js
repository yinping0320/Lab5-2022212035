import { Injectable, Optional } from '@angular/core';
import { of, empty, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { FrameContext, FieldMetadataUtil } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { BaseDataService } from './base-data.service';
import { TreeUtilFactory } from './tree-table/util/tree-util-factory';
import { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';
import { DataChangeDetectionService } from '../data-change-detection.service';
// tslint:disable: no-string-literal
/**
 * 树数据服务
 */
class TreeDataService extends BaseDataService {
    /**
     * 构造函数
     */
    constructor(frameContext, messageService, loadingService, notifyService, errorService, languageService) {
        super(frameContext);
        this.messageService = messageService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.errorService = errorService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 分级信息字段名
     */
    get hierarchyInfoKey() {
        return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
    }
    get virtualRootFrameContext() {
        return this.frameContext.getVirtualRootFrameContext();
    }
    /**
     * 加载数据
     */
    load(filters, sorts) {
        const filtersArray = this.parseConditions(filters);
        const sortsArray = this.parseConditions(sorts);
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);
        return query$.pipe(tap(() => {
            // 纠正选中节点
            if (correctSelectedNode === true) {
                const hierarchyType = this.getHierarchyType();
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 分层加载数据
     */
    loadByLevel(filters, sorts, frozenCurrentRow) {
        this.setLoadByLevelState(filters, sorts);
        const filtersArray = this.parseConditions(filters);
        const sortsArray = this.parseConditions(sorts);
        // const parentId = this.bindingData.list.currentId;
        const parentId = this.getIdToExpand();
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        const hierarchyType = this.getHierarchyType();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return empty();
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 构造分页信息
        const pagination = this.buildPaginationInfo(parentId);
        const reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;
        const query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);
        return query$.pipe(tap((entities) => {
            this.frameContext.params.delete('_RELOAD_CHILDREN_');
            // 纠正选中节点
            if (correctSelectedNode === true) {
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);
                if (containsCurrentRow) {
                    this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!this.repository.entityCollection.getEntityById(currentRowId)) {
                    const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        this.setCurrentId(firstChildId);
                    }
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 加载完整树
     * @param virtualPropertyName 虚拟字段
     * @param fullTreeType 是否是完整树加载 0：完整树 1：部分树
     * @param loadType 是否分级加载 0：全部加载 1：分级加载
     * @param filter 过滤条件
     * @param frozenCurrentRow 冻结当前行
     */
    loadFullTree(virtualPropertyName, fullTreeType, loadType, filters, frozenCurrentRow) {
        if (typeof fullTreeType !== 'string') {
            throw new Error('ArgumentError: fullTreeType 不能为空且必须为字符串。');
        }
        if (typeof loadType !== 'string') {
            throw new Error('ArgumentError: loadType 不能为空且必须为字符串。');
        }
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        const virtualRootFrameContext = this.virtualRootFrameContext;
        // 还原上次设置的结果集
        virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');
        virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');
        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);
        const filtersArray = this.parseConditions(filters);
        const parentId = this.getIdToExpand();
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        const hierarchyType = this.getHierarchyType();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const context = {
            frameContext: this.frameContext,
            frozenCurrentRow
        };
        // tslint:disable-next-line: max-line-length
        const query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);
        return query$.pipe(tap((entities) => {
            const selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');
            // 纠正选中节点
            if (correctSelectedNode === true || !selectedRowId) {
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    const computedFirstRowId = treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                    if (computedFirstRowId) {
                        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', computedFirstRowId);
                    }
                }
            }
            const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);
                if (containsCurrentRow) {
                    this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {
                    const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        this.setCurrentId(firstChildId);
                    }
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 获取最新展开的节点
     */
    getIdToExpand() {
        const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        const idToExpand = expandNodes.pop();
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        return idToExpand;
    }
    /**
     * 设置最新展开的节点
     */
    setIdToExpand(idToExpand) {
        const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(idToExpand);
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    }
    /**
     * 解析过滤条件
     */
    parseConditions(conditions) {
        const conditionsString = (!conditions || conditions === '') ? '[]' : conditions;
        return JSON.parse(conditionsString);
    }
    /**
     * 新增同级
     */
    addSibling(id) {
        // 设计时id的获取改为从命令参数上获取，但设计时没有参数必填检查，
        // 如果打开表单保存了（即更新了最新的命令构件），但没有配置该参数，可能会传递过来一个空值，
        // 为了兼容此情况，使用当前行id作为id的值
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id || id === 'undefined') {
            id = '';
        }
        // 记录最近一次修改的数据id
        const lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const result$ = repository.addSibling(this.repository, id);
        return result$.pipe(tap(() => {
            this.virtualRootFrameContext.setParam('IS_ADD', true);
            this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addSiblingFailed, error);
        }));
    }
    /**
     * 新增下级
     */
    addChild(id) {
        // 原因同addSibling的修改
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            // 请选择父节点
            this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return empty();
        }
        // 记录最近一次修改的数据id
        const lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 新增的时候，要展开父节点
        this.setIdToExpand(id);
        const reloadChild$ = this.reloadByLevel();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const addChild$ = repository.addChild(this.repository, id);
        const result$ = reloadChild$.pipe(switchMap(() => {
            return addChild$;
        }), tap(() => {
            this.virtualRootFrameContext.setParam('IS_ADD', true);
            this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addChildFailed, error);
        }));
        return result$;
    }
    /**
     * 批量保存
     */
    save() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const save$ = this.repository.applyChanges();
        const result$ = save$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.notifyService.success(this.languageService.saveSuccess, { hideTitle: true });
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.multiSaveFailed, error);
        }));
        return result$;
    }
    /**
     * 删除
     */
    remove(id, successMsg) {
        // 原因同addSibling
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        // 存在子节点不允许删除
        const treeNodesData = this.repository.entityCollection.toJSON();
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return empty();
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });
            return empty();
        }
        // 确认删除
        const action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            // 获取删除后要设置的节点id
            const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, id);
            // 执行删除
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.frameContext.repository.removeById(id);
            return remove$.pipe(tap(() => {
                // 设置选中节点
                treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.notifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.errorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 取消时检测未保存记录
     */
    cancel() {
        const hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
        return hasChange$.pipe(switchMap((changed) => {
            if (!changed) {
                return this._cancel();
            }
            else {
                return this.messageService.question(this.languageService['cancelWithoutSave']).pipe(switchMap((ifCancel) => {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return this._cancel();
                }));
            }
        }));
    }
    /**
     * 构造分页信息
     * @param parentId parentId
     * @returns
     */
    buildPaginationInfo(parentId) {
        const pagination = { pageIndex: 0, pageSize: 0 };
        const enableNodePagination = this.frameContext.params.get('enableNodePagination');
        if (!parentId) {
            // 一级分页
            const pageSize = this.repository.entityCollection.pageSize || 0;
            const pageIndex = this.repository.entityCollection.pageIndex || 0;
            // 启用了一级分页
            if (pageSize !== 0) {
                pagination.pageSize = pageSize;
                pagination.pageIndex = pageIndex;
            }
        }
        else {
            // 如果未启用节点分页或当前为顶级节点加载，则不处理节点分页
            if (enableNodePagination) {
                const nodePageSize = this.frameContext.params.get('nodePageSize') || 0;
                let nodePageIndex = this.frameContext.params.get(`_NODE_${parentId}_PAGE_INDEX_`);
                if (!nodePageIndex) {
                    this.frameContext.params.set(`_NODE_${parentId}_PAGE_INDEX_`, 1);
                    nodePageIndex = 1;
                }
                pagination.pageIndex = nodePageIndex;
                pagination.pageSize = nodePageSize;
            }
        }
        return pagination;
    }
    /**
     * 取消变更
     */
    _cancel() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(switchMap(() => {
            const isAdd = this.virtualRootFrameContext.getParam('IS_ADD');
            const lastModifiedId = this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');
            const currentId = this.bindingData.list.currentId;
            if (isAdd === true) {
                this.repository.entityCollection.removeEntityById(currentId);
                // 重置编辑状态
                this.virtualRootFrameContext.setParam('IS_ADD', false);
                if (lastModifiedId) {
                    setTimeout(() => {
                        this.bindingData.list.setCurrentId(lastModifiedId, true, true);
                    }, 0);
                }
                return of(null);
            }
            else {
                return this.repository.updateById(currentId);
            }
        }), tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    /**
     * 检查是否存在下级节点（内部方法，请勿使用）
     */
    hasChildNodes(id, treeNodesData) {
        const treeNodeUtil = this.getTreeNodeUtil();
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            return true;
        }
        return false;
    }
    /**
     * 计算删除后的当前节点id（内部方法，请勿使用）
     */
    getNextNodeIdAfterRemoving(idToRemove, treeNodesData) {
        const treeNodeUtil = this.getTreeNodeUtil();
        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);
        return nextNodeId;
    }
    /**
     * 设置删除后的当前节点节点（内部方法，请勿使用）
     */
    setNextNodeAfterRemoving(nextNodeId) {
        const treeNodeUtil = this.getTreeNodeUtil();
        treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
    }
    /**
     * 设置树的当前行(给完整树使用)
     * @param id id
     */
    setCurrentId(id) {
        id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;
        this.frameContext.bindingData.list.setCurrentId(id, true, true, true);
    }
    /**
     * 选中树的第一个节点
     */
    selectFirstRow() {
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil !== null) {
            treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
        }
    }
    /**
     * 获取树节点工具类实例
     */
    getTreeNodeUtil() {
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            throw new Error(`不支持${hierarchyType}类型的分级`);
        }
        return treeNodeUtil;
    }
    /**
     * 记录加载状态
     * @todo：待删除
     */
    setLoadByLevelState(filters, sorts) {
        // @todo：临时处理
        this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);
        this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);
        this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);
    }
    /**
     * 展开当前节点
     * @todo：待删除
     */
    reloadByLevel() {
        const isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');
        if (isLoadByLevel === true) {
            const filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');
            const sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');
            return this.loadByLevel(filters, sorts);
        }
        return of([]);
    }
    getHierarchyType() {
        const ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);
        const hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];
        let hierarchyType = 'path'; // 分级码默认为path，兼容原表单
        if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {
            hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'];
        }
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    }
    /**
     * 获取根组件消息管道
     */
    get messagePipe() {
        if (this.frameContext) {
            const appContext = this.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
}
TreeDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: FormMessageService },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: FormErrorService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { TreeDataService };
//# sourceMappingURL=data:application/json;base64,