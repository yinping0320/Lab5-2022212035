import { Injectable, Optional } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { LanguageService } from './languag.service';
/**
 * 通知服务
 * @scope FormModule
 * @description
 * 消息提示使用策略：成功使用success，失败使用error，警告使用warning，其他场景使用info
 */
class FormNotifyService {
    /**
     * 构造函数
     * 注入@farris/ui的NotifyService
     */
    constructor(notifyService, languageService) {
        this.notifyService = notifyService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 信息提示
     * @param content 内容
     */
    default(content) {
        return this.notifyService.default({
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        });
    }
    /**
     * 信息提示
     * @param content 内容
     */
    info(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        return this.notifyService.info(notifyOptions);
    }
    /**
     * 成功提示
     * @param content 内容
     * @param options? 选项 {shorTitle: false}
     */
    success(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        this.notifyService.success(notifyOptions);
    }
    /**
     * 警告提示
     * @param content 内容
     * @param options 选项
     */
    warning(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        this.notifyService.warning(notifyOptions);
    }
    /**
     * 错误提示
     * @param content 内容
     */
    error(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        this.notifyService.error(notifyOptions);
    }
}
FormNotifyService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormNotifyService.ctorParameters = () => [
    { type: NotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { FormNotifyService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtLW5vdGlmeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBEOzs7OztHQUtHO0FBQ0gsTUFDTSxpQkFBaUI7SUFFckI7OztPQUdHO0lBQ0gsWUFBb0IsYUFBNEIsRUFDMUIsZUFBZ0M7UUFEbEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDMUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBRXBELElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksT0FBTyxDQUFDLE9BQWU7UUFDNUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBZ0I7WUFDL0MsS0FBSyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVztZQUN2QyxHQUFHLEVBQUUsT0FBTztZQUNaLE9BQU8sRUFBRSxJQUFJO1NBQ2QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNJLElBQUksQ0FBQyxPQUFlLEVBQUUsT0FBaUM7UUFDNUQsTUFBTSxhQUFhLEdBQWtCO1lBQ25DLEtBQUssRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVc7WUFDdkMsR0FBRyxFQUFFLE9BQU87WUFDWixPQUFPLEVBQUUsSUFBSTtTQUNHLENBQUM7UUFDbkIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNoQyxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksT0FBTyxDQUFDLE9BQWUsRUFBRSxPQUFpQztRQUMvRCxNQUFNLGFBQWEsR0FBa0I7WUFDbkMsS0FBSyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVztZQUN2QyxHQUFHLEVBQUUsT0FBTztZQUNaLE9BQU8sRUFBRSxJQUFJO1NBQ0csQ0FBQztRQUNuQixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ2hDLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksT0FBTyxDQUFDLE9BQWUsRUFBRSxPQUFpQztRQUMvRCxNQUFNLGFBQWEsR0FBa0I7WUFDbkMsS0FBSyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVztZQUN2QyxHQUFHLEVBQUUsT0FBTztZQUNaLE9BQU8sRUFBRSxJQUFJO1NBQ0csQ0FBQztRQUNuQixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ2hDLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLLENBQUMsT0FBZSxFQUFFLE9BQWlDO1FBQzdELE1BQU0sYUFBYSxHQUFrQjtZQUNuQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXO1lBQ3ZDLEdBQUcsRUFBRSxPQUFPO1lBQ1osT0FBTyxFQUFFLElBQUk7U0FDRyxDQUFDO1FBQ25CLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDaEMsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7O1lBM0ZGLFVBQVU7Ozs7WUFURixhQUFhO1lBQ2IsZUFBZSx1QkFnQm5CLFFBQVE7O0FBc0ZiLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSwgTm90aWZ5T3B0aW9ucyB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIOmAmuefpeacjeWKoVxyXG4gKiBAc2NvcGUgRm9ybU1vZHVsZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICog5raI5oGv5o+Q56S65L2/55So562W55Wl77ya5oiQ5Yqf5L2/55Soc3VjY2Vzc++8jOWksei0peS9v+eUqGVycm9y77yM6K2m5ZGK5L2/55Sod2FybmluZ++8jOWFtuS7luWcuuaZr+S9v+eUqGluZm9cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRm9ybU5vdGlmeVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiDms6jlhaVAZmFycmlzL3Vp55qETm90aWZ5U2VydmljZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZ5U2VydmljZTogTm90aWZ5U2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2VcclxuICApIHtcclxuICAgIGlmICghbGFuZ3VhZ2VTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkv6Hmga/mj5DnpLpcclxuICAgKiBAcGFyYW0gY29udGVudCDlhoXlrrlcclxuICAgKi9cclxuICBwdWJsaWMgZGVmYXVsdChjb250ZW50OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLm5vdGlmeVNlcnZpY2UuZGVmYXVsdCg8Tm90aWZ5T3B0aW9ucz57XHJcbiAgICAgIHRpdGxlOiB0aGlzLmxhbmd1YWdlU2VydmljZS5ub3RpZnlUaXRsZSxcclxuICAgICAgbXNnOiBjb250ZW50LFxyXG4gICAgICB0aW1lb3V0OiAzMDAwXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS/oeaBr+aPkOekulxyXG4gICAqIEBwYXJhbSBjb250ZW50IOWGheWuuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmZvKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBjb25zdCBub3RpZnlPcHRpb25zOiBOb3RpZnlPcHRpb25zID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sYW5ndWFnZVNlcnZpY2Uubm90aWZ5VGl0bGUsXHJcbiAgICAgIG1zZzogY29udGVudCxcclxuICAgICAgdGltZW91dDogMzAwMFxyXG4gICAgfSBhcyBOb3RpZnlPcHRpb25zO1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oaWRlVGl0bGUpIHtcclxuICAgICAgZGVsZXRlIG5vdGlmeU9wdGlvbnMudGl0bGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlTZXJ2aWNlLmluZm8obm90aWZ5T3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiJDlip/mj5DnpLpcclxuICAgKiBAcGFyYW0gY29udGVudCDlhoXlrrlcclxuICAgKiBAcGFyYW0gb3B0aW9ucz8g6YCJ6aG5IHtzaG9yVGl0bGU6IGZhbHNlfVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWNjZXNzKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBjb25zdCBub3RpZnlPcHRpb25zOiBOb3RpZnlPcHRpb25zID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sYW5ndWFnZVNlcnZpY2Uubm90aWZ5VGl0bGUsXHJcbiAgICAgIG1zZzogY29udGVudCxcclxuICAgICAgdGltZW91dDogMzAwMFxyXG4gICAgfSBhcyBOb3RpZnlPcHRpb25zO1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oaWRlVGl0bGUpIHtcclxuICAgICAgZGVsZXRlIG5vdGlmeU9wdGlvbnMudGl0bGU7XHJcbiAgICB9XHJcbiAgICB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2Vzcyhub3RpZnlPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOitpuWRiuaPkOekulxyXG4gICAqIEBwYXJhbSBjb250ZW50IOWGheWuuVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIOmAiemhuVxyXG4gICAqL1xyXG4gIHB1YmxpYyB3YXJuaW5nKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBjb25zdCBub3RpZnlPcHRpb25zOiBOb3RpZnlPcHRpb25zID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sYW5ndWFnZVNlcnZpY2Uubm90aWZ5VGl0bGUsXHJcbiAgICAgIG1zZzogY29udGVudCxcclxuICAgICAgdGltZW91dDogMzAwMFxyXG4gICAgfSBhcyBOb3RpZnlPcHRpb25zO1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oaWRlVGl0bGUpIHtcclxuICAgICAgZGVsZXRlIG5vdGlmeU9wdGlvbnMudGl0bGU7XHJcbiAgICB9XHJcbiAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyhub3RpZnlPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmUmeivr+aPkOekulxyXG4gICAqIEBwYXJhbSBjb250ZW50IOWGheWuuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcnJvcihjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgY29uc3Qgbm90aWZ5T3B0aW9uczogTm90aWZ5T3B0aW9ucyA9IHtcclxuICAgICAgdGl0bGU6IHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vdGlmeVRpdGxlLFxyXG4gICAgICBtc2c6IGNvbnRlbnQsXHJcbiAgICAgIHRpbWVvdXQ6IDMwMDBcclxuICAgIH0gYXMgTm90aWZ5T3B0aW9ucztcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGlkZVRpdGxlKSB7XHJcbiAgICAgIGRlbGV0ZSBub3RpZnlPcHRpb25zLnRpdGxlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKG5vdGlmeU9wdGlvbnMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfTtcclxuIl19