// https://github.com/typeslick/status-code-enum
var HttpStatusType;
(function (HttpStatusType) {
    HttpStatusType[HttpStatusType["Info"] = 1] = "Info";
    HttpStatusType[HttpStatusType["Success"] = 2] = "Success";
    HttpStatusType[HttpStatusType["Redirect"] = 3] = "Redirect";
    HttpStatusType[HttpStatusType["ClientError"] = 4] = "ClientError";
    HttpStatusType[HttpStatusType["ServerError"] = 5] = "ServerError";
})(HttpStatusType || (HttpStatusType = {}));
/**
 * http通用类
 */
class HttpUtil {
    /**
     * 基于http状态码返回状态类型
     * @param httpResponseSatus http请求返回状态码
     * @returns null | HttpStatusType
     */
    static getHttpStatusType(httpResponseSatus) {
        if (!httpResponseSatus) {
            return null;
        }
        let statusType = null; // 默认值为空
        if (httpResponseSatus < 100 || httpResponseSatus > 600) {
            statusType = null; // 不合理状态码
        }
        else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {
            statusType = HttpStatusType.Info;
        }
        else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {
            statusType = HttpStatusType.Success;
        }
        else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {
            statusType = HttpStatusType.Redirect;
        }
        else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {
            statusType = HttpStatusType.ClientError;
        }
        else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {
            statusType = HttpStatusType.ServerError;
        }
        return statusType;
    }
}
export { HttpUtil, HttpStatusType };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsL2h0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELElBQUssY0FNSjtBQU5ELFdBQUssY0FBYztJQUNmLG1EQUFRLENBQUE7SUFDUix5REFBTyxDQUFBO0lBQ1AsMkRBQVEsQ0FBQTtJQUNSLGlFQUFXLENBQUE7SUFDWCxpRUFBVyxDQUFBO0FBQ2YsQ0FBQyxFQU5JLGNBQWMsS0FBZCxjQUFjLFFBTWxCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFFBQVE7SUFFVjs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGlCQUFpQixDQUFDLGlCQUF5QjtRQUNyRCxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVE7UUFFL0IsSUFBSSxpQkFBaUIsR0FBRyxHQUFHLElBQUksaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQ3BELFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxTQUFTO1NBQy9CO2FBQU0sSUFBSSxpQkFBaUIsSUFBSSxHQUFHLElBQUksaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQzVELFVBQVUsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDO1NBQ3BDO2FBQU0sSUFBSSxpQkFBaUIsSUFBSSxHQUFHLElBQUksaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQzVELFVBQVUsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDO1NBQ3ZDO2FBQU0sSUFBSSxpQkFBaUIsSUFBSSxHQUFHLElBQUksaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQzVELFVBQVUsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQ3hDO2FBQU0sSUFBSSxpQkFBaUIsSUFBSSxHQUFHLElBQUksaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQzVELFVBQVUsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO1NBQzNDO2FBQU0sSUFBSSxpQkFBaUIsSUFBSSxHQUFHLElBQUksaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQzVELFVBQVUsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO1NBQzNDO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztDQUNKO0FBRUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBlc2xpY2svc3RhdHVzLWNvZGUtZW51bVxyXG5lbnVtIEh0dHBTdGF0dXNUeXBlIHtcclxuICAgIEluZm8gPSAxLFxyXG4gICAgU3VjY2VzcyxcclxuICAgIFJlZGlyZWN0LFxyXG4gICAgQ2xpZW50RXJyb3IsXHJcbiAgICBTZXJ2ZXJFcnJvclxyXG59XHJcblxyXG4vKipcclxuICogaHR0cOmAmueUqOexu1xyXG4gKi9cclxuY2xhc3MgSHR0cFV0aWwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Z+65LqOaHR0cOeKtuaAgeeggei/lOWbnueKtuaAgeexu+Wei1xyXG4gICAgICogQHBhcmFtIGh0dHBSZXNwb25zZVNhdHVzIGh0dHDor7fmsYLov5Tlm57nirbmgIHnoIFcclxuICAgICAqIEByZXR1cm5zIG51bGwgfCBIdHRwU3RhdHVzVHlwZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEh0dHBTdGF0dXNUeXBlKGh0dHBSZXNwb25zZVNhdHVzOiBudW1iZXIpOiBhbnkge1xyXG4gICAgICAgIGlmICghaHR0cFJlc3BvbnNlU2F0dXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBzdGF0dXNUeXBlID0gbnVsbDsgLy8g6buY6K6k5YC85Li656m6XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGh0dHBSZXNwb25zZVNhdHVzIDwgMTAwIHx8IGh0dHBSZXNwb25zZVNhdHVzID4gNjAwKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c1R5cGUgPSBudWxsOyAvLyDkuI3lkIjnkIbnirbmgIHnoIFcclxuICAgICAgICB9IGVsc2UgaWYgKGh0dHBSZXNwb25zZVNhdHVzID49IDEwMCAmJiBodHRwUmVzcG9uc2VTYXR1cyA8IDIwMCkge1xyXG4gICAgICAgICAgICBzdGF0dXNUeXBlID0gSHR0cFN0YXR1c1R5cGUuSW5mbztcclxuICAgICAgICB9IGVsc2UgaWYgKGh0dHBSZXNwb25zZVNhdHVzID49IDIwMCAmJiBodHRwUmVzcG9uc2VTYXR1cyA8IDMwMCkge1xyXG4gICAgICAgICAgICBzdGF0dXNUeXBlID0gSHR0cFN0YXR1c1R5cGUuU3VjY2VzcztcclxuICAgICAgICB9IGVsc2UgaWYgKGh0dHBSZXNwb25zZVNhdHVzID49IDMwMCAmJiBodHRwUmVzcG9uc2VTYXR1cyA8IDQwMCkge1xyXG4gICAgICAgICAgICBzdGF0dXNUeXBlID0gSHR0cFN0YXR1c1R5cGUuUmVkaXJlY3Q7XHJcbiAgICAgICAgfSBlbHNlIGlmIChodHRwUmVzcG9uc2VTYXR1cyA+PSA0MDAgJiYgaHR0cFJlc3BvbnNlU2F0dXMgPCA1MDApIHtcclxuICAgICAgICAgICAgc3RhdHVzVHlwZSA9IEh0dHBTdGF0dXNUeXBlLkNsaWVudEVycm9yO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaHR0cFJlc3BvbnNlU2F0dXMgPj0gNTAwICYmIGh0dHBSZXNwb25zZVNhdHVzIDwgNjAwKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c1R5cGUgPSBIdHRwU3RhdHVzVHlwZS5TZXJ2ZXJFcnJvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdGF0dXNUeXBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBIdHRwVXRpbCwgSHR0cFN0YXR1c1R5cGUgfTsiXX0=