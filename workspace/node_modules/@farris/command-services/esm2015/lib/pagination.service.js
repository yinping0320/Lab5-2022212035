import { Injectable, Injector } from "@angular/core";
import { DataPropGroup, FrameContext } from "@farris/devkit";
export class PaginationService {
    constructor(injector, frameContext) {
        this.injector = injector;
        this.frameContext = frameContext;
    }
    /**
     * 重置子表分页信息
     */
    resetChildrenPagination() {
        const paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};
        const childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(DataPropGroup.List) || [];
        if (paginationInfo && Object.keys(paginationInfo).length > 0) {
            const keys = Object.keys(paginationInfo);
            keys.forEach((key) => {
                const value = paginationInfo[key];
                if (Object.prototype.toString.apply(value) !== '[object Object]') {
                    return;
                }
                const rowPagination = childrenEntityCodes.find((nodeCode) => {
                    // 去掉s
                    nodeCode = nodeCode.slice(0, -1);
                    return key.startsWith(`${nodeCode}_`);
                });
                if (rowPagination) {
                    delete paginationInfo[key];
                }
                else {
                    paginationInfo[key].pageIndex = 1;
                    delete paginationInfo[key].total;
                    delete paginationInfo[key].pageCount;
                }
            });
            this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
        }
    }
}
PaginationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PaginationService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzdELE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFBb0IsUUFBa0IsRUFBVSxZQUEwQjtRQUF0RCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBSSxDQUFDO0lBQy9FOztPQUVHO0lBQ0ksdUJBQXVCO1FBQzVCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7UUFDMUYsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0SCxJQUFJLGNBQWMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQzNCLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssaUJBQWlCLEVBQUU7b0JBQ2hFLE9BQU87aUJBQ1I7Z0JBQ0QsTUFBTSxhQUFhLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO29CQUNsRSxNQUFNO29CQUNOLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqQyxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLGFBQWEsRUFBRTtvQkFDakIsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzVCO3FCQUFNO29CQUNMLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO29CQUNsQyxPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ2pDLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztpQkFDdEM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUMvRjtJQUNILENBQUM7OztZQS9CRixVQUFVOzs7O1lBSFUsUUFBUTtZQUNMLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IERhdGFQcm9wR3JvdXAsIEZyYW1lQ29udGV4dCB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvblNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSB7IH1cclxuICAvKipcclxuICAgKiDph43nva7lrZDooajliIbpobXkv6Hmga9cclxuICAgKi9cclxuICBwdWJsaWMgcmVzZXRDaGlsZHJlblBhZ2luYXRpb24oKSB7XHJcbiAgICBjb25zdCBwYWdpbmF0aW9uSW5mbyA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5wYWdpbmF0aW9uSW5mbyB8fCB7fTtcclxuICAgIGNvbnN0IGNoaWxkcmVuRW50aXR5Q29kZXMgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvLmdldFByb3BOYW1lc0J5R3JvdXAoRGF0YVByb3BHcm91cC5MaXN0KSB8fCBbXTtcclxuICAgIGlmIChwYWdpbmF0aW9uSW5mbyAmJiBPYmplY3Qua2V5cyhwYWdpbmF0aW9uSW5mbykubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocGFnaW5hdGlvbkluZm8pO1xyXG4gICAgICBrZXlzLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYWdpbmF0aW9uSW5mb1trZXldO1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgcm93UGFnaW5hdGlvbiA9IGNoaWxkcmVuRW50aXR5Q29kZXMuZmluZCgobm9kZUNvZGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgLy8g5Y675o6Jc1xyXG4gICAgICAgICAgbm9kZUNvZGUgPSBub2RlQ29kZS5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoYCR7bm9kZUNvZGV9X2ApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChyb3dQYWdpbmF0aW9uKSB7XHJcbiAgICAgICAgICBkZWxldGUgcGFnaW5hdGlvbkluZm9ba2V5XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcGFnaW5hdGlvbkluZm9ba2V5XS5wYWdlSW5kZXggPSAxO1xyXG4gICAgICAgICAgZGVsZXRlIHBhZ2luYXRpb25JbmZvW2tleV0udG90YWw7XHJcbiAgICAgICAgICBkZWxldGUgcGFnaW5hdGlvbkluZm9ba2V5XS5wYWdlQ291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnVwZGF0ZVBhZ2luYXRpb25JbmZvQnlQYXRoKCcvJywgcGFnaW5hdGlvbkluZm8pO1xyXG4gICAgfVxyXG4gIH1cclxufSJdfQ==