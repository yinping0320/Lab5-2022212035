import { Injectable, Optional } from '@angular/core';
import { forkJoin, Subject } from 'rxjs';
import { FrameContext, BindingPathConverter } from '@farris/devkit';
import { FormNotifyService } from '../form-notify.service';
import { ATTACHMENT_ORDER_FIELD } from './types';
import { AttachmentDataService } from './attachment-data.service';
import { LanguageService } from '../languag.service';
import { EntityService } from '../entity-services/index';
import { ListDataService, SubListDataService } from '../data-services/index';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { debounceTime, tap } from 'rxjs/operators';
/**
 * 附件上传
 * @summary
 * fileExtend：命名文件上传或预览组件传递过来的数据；
 * fileExtendFieldPath：命名附件UDT的字段路径；
 * attachmentInfo：命名附件UDT所需的信息；
 */
class FileService {
    /**
     * 构造函数
     */
    constructor(frameContext, attachDataService, entityService, subListDataService, notifyService, languageService, listDataService, formLoadingService) {
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.subListDataService = subListDataService;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.listDataService = listDataService;
        this.formLoadingService = formLoadingService;
        this.subject = new Subject();
        this.subject.pipe(debounceTime(500)).subscribe((data) => {
            this.process(data.fileInfoFieldPath, data.configs);
        });
        this.attachmentInfos = [];
    }
    // #region 上传文件
    /**
     * 批量添加附件行
     */
    addFileRows(fileInfoFieldPath) {
        const attachmentInfos = this.getAttachmentInfosToAddFromContext();
        if (attachmentInfos.length === 0) {
            this.notifyService.info('请先上传附件');
        }
        return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);
    }
    /**
     * 批量添加带附件类型的附件行
     * @param fileInfoFieldPath 附件udt字段
     * @param configs 附件扩展信息配置
     * @description configs配置如{"billId":"{UISTATE~/root/billId}","rowId":"{UISTATE~/root/rowId}","attachmentType":"xueli"}
     */
    addFileRowsWithConfigs(fileInfoFieldPath, configs) {
        const attachmentInfos = this.getAttachmentInfosToAddFromContext();
        if (attachmentInfos.length === 0) {
            this.notifyService.info('请先上传附件');
        }
        // let mapFields = null;
        // if (typeof configs === 'string') {
        //   // 去掉首尾空格
        //   configs = configs.trim();
        // }
        // if (configs.startsWith('{') && configs.endsWith('}')) {
        //   try {
        //     mapFields = JSON.parse(configs);
        //   } catch {
        //     throw new Error('附件扩展信息配置不是合法的json字符串。');
        //   }
        // } else {
        //   throw new Error('附件扩展信息配置不是合法的json字符串。');
        // }
        this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);
        this.subject.next({ fileInfoFieldPath, configs });
        //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);
    }
    process(fileInfoFieldPath, configs) {
        if (this.attachmentInfos && this.attachmentInfos.length > 0) {
            const attachmentInfos = this.attachmentInfos.concat([]);
            let mapFields = null;
            if (typeof configs === 'string') {
                // 去掉首尾空格
                configs = configs.trim();
            }
            if (configs.startsWith('{') && configs.endsWith('}')) {
                try {
                    mapFields = JSON.parse(configs);
                }
                catch (_a) {
                    throw new Error('附件扩展信息配置不是合法的json字符串。');
                }
            }
            else {
                throw new Error('附件扩展信息配置不是合法的json字符串。');
            }
            this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields).pipe(tap(() => {
                this.attachmentInfos = this.attachmentInfos.filter(item => !attachmentInfos.find(attachmentInfo => attachmentInfo.attachmentId === item.attachmentId));
                if (this.attachmentInfos.length > 0) {
                    this.process(fileInfoFieldPath, configs);
                }
            })).subscribe();
        }
    }
    /**
     * 获取要添加的附件信息数组
     */
    getAttachmentInfosToAddFromContext() {
        const fileExtends = this.getFileExtendsFromContext();
        const attachmentInfos = this.convertToAttachmentInfos(fileExtends);
        return attachmentInfos;
    }
    /**
     * 将附件上传组件返回的附件信息转换为服务器端需要的格式
     */
    convertToAttachmentInfos(fileExtends) {
        if (!fileExtends) {
            return [];
        }
        const attachmentInfos = [];
        fileExtends.forEach((fUploadOutPut) => {
            const attachmentInfo = {
                attachmentId: fUploadOutPut.extend.metadataId,
                fileName: fUploadOutPut.extend.fileName,
            };
            attachmentInfos.push(attachmentInfo);
        });
        return attachmentInfos;
    }
    // #endregion
    // #region 删除文件
    /**
     * 删除附件行
     */
    removeFileRows(fileInfoFieldPath) {
        const dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);
        if (dataIds.length === 0) {
            this.notifyService.info('请选择要删除的附件');
        }
        const isSublist = fileInfoFieldPath.split('/').filter(p => p).length >= 2;
        const removeObservables = [];
        if (isSublist) {
            dataIds.forEach((dataId) => {
                let removeObservable;
                removeObservable = this.subListDataService.removeWithoutConfirm(dataId);
                removeObservables.push(removeObservable);
            });
            return forkJoin(removeObservables);
        }
        else {
            return this.listDataService.removeRows(dataIds, false, null, false);
        }
    }
    /**
     * 获取要删除的数据
     */
    getDataIdsToRemoveFromContext(fileExtendFieldPath) {
        // 从上下文中获取要处理的附件信息数组
        const fileExtends = this.getFileExtendsFromContext();
        // 将附件数组转换为对应的数据id
        const dataIds = [];
        fileExtends.forEach((fileExtend) => {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            const fileId = fileExtend.extend.metadataId;
            const dataId = this.convertFileIdToDataId(fileId, fileExtendFieldPath);
            dataIds.push(dataId);
        });
        return dataIds;
    }
    /**
     * 根据路径获取附件字段值数组
     * @param fieldPath 字段路径
     */
    convertFileIdToDataId(fileId, fileExtendFieldPath) {
        // 解析路径
        const fileBindingPath = BindingPathConverter.toBindingPathArray(fileExtendFieldPath);
        const fileFieldName = fileBindingPath.pop();
        const fileListBindingPath = fileBindingPath;
        // 获取附件id数组
        const entityListData = this.entityService.getEntityListData(fileListBindingPath);
        const targetEntityData = entityListData.find((entityData) => {
            if (entityData[fileFieldName]) {
                const attachmentId = entityData[fileFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        });
        return targetEntityData.id;
    }
    // #endregion
    //#region 文件排序
    /**
     * 更新附件排序
     * @param attachmentInfoFieldPath 附件udt字段路径
     * @param ids 附件排序后的附件id数组
     */
    updateOrder(attachmentInfoFieldPath, ids) {
        if (!attachmentInfoFieldPath) {
            throw new Error('附件udt字段路径参数不能为空');
        }
        // 支持从代码中直接调用，如果参数中传递了ids则使用，否则使用命令上下文中的事件参数
        if (!ids) {
            // 获取事件参数
            const commandContext = this['context'];
            // 与组件约定事件参数为数据主键数组
            ids = commandContext && commandContext.eventParam && commandContext.eventParam.data;
        }
        // 对收集的主键数组进行判断
        if (!ids || !Array.isArray(ids)) {
            return;
        }
        // 当前命令所在组件的绑定数据
        const bindingList = this.frameContext.bindingData.getList();
        // 无绑定数据时不处理
        if (!bindingList || bindingList.length < 1) {
            return;
        }
        // 统一获取附件udt信息
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentField = parentBindingPathArray.pop();
        // 出现udt字段不存在的情况，说明命令中附件udt字段配置错误或vo中没有附件udt。控制器不兼容错误，此处判断只为阻止后续的遍历
        if (!attachmentField) {
            throw new Error('无法获取附件udt字段，请确认命令中附件udt字段路径配置正确，且视图模型中存在附件udt字段');
        }
        const data = bindingList.toJSON();
        // 更新绑定数据中附件udt字段中排序字段的值,仅更新有附件的行
        ids.forEach((id, index) => {
            const item = data.find(item => item && item[attachmentField] && item[attachmentField]['attachmentId'] === id);
            const primaryKeyValue = item && item.id;
            if (!primaryKeyValue) {
                return;
            }
            const bindingObject = bindingList.findById(primaryKeyValue);
            if (bindingObject) {
                // 附件udt对象
                const attachment = bindingObject[attachmentField];
                if (attachment) {
                    // 获取旧值
                    const order = attachment.getValue(ATTACHMENT_ORDER_FIELD);
                    if (order !== index) {
                        // 更新排序
                        attachment.setValue(ATTACHMENT_ORDER_FIELD, index, true, true);
                    }
                }
            }
        });
    }
    //#endregion
    // #region 其他工具方法
    /**
     * 从上下文中获取要处理的附件信息数组
     * @summary
     * 为了统一单个和多个附件的处理方式，统一包装为数组
     */
    getFileExtendsFromContext() {
        const commandContext = this['context'];
        const eventParam = commandContext.eventParam;
        if (!eventParam) {
            return [];
        }
        let fileExtends;
        if (Array.isArray(eventParam) === false) {
            fileExtends = [eventParam];
        }
        else {
            fileExtends = eventParam.concat([]);
        }
        return fileExtends;
    }
}
FileService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileService.ctorParameters = () => [
    { type: FrameContext },
    { type: AttachmentDataService },
    { type: EntityService },
    { type: SubListDataService },
    { type: FormNotifyService },
    { type: LanguageService },
    { type: ListDataService },
    { type: FormLoadingService, decorators: [{ type: Optional }] }
];
export { FileService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2F0dGFjaG1lbnQvZmlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBYyxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJELE9BQU8sRUFBRSxZQUFZLEVBQWtCLG9CQUFvQixFQUE4QixNQUFNLGdCQUFnQixDQUFDO0FBQ2hILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBa0Isc0JBQXNCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDakUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRDs7Ozs7O0dBTUc7QUFDSCxNQUNNLFdBQVc7SUFHZjs7T0FFRztJQUNILFlBQ1UsWUFBMEIsRUFDMUIsaUJBQXdDLEVBQ3hDLGFBQTRCLEVBQzVCLGtCQUFzQyxFQUN0QyxhQUFnQyxFQUNoQyxlQUFnQyxFQUNoQyxlQUFnQyxFQUNwQixrQkFBc0M7UUFQbEQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF1QjtRQUN4QyxrQkFBYSxH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S0FBSyxFQUFFO1lBQ3ZDLFdBQVcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzVCO2FBQU07WUFDTCxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyQztRQUVELE9BQU8sV0FBa0MsQ0FBQztJQUM1QyxDQUFDOzs7WUFyUkYsVUFBVTs7OztZQWpCRixZQUFZO1lBR1oscUJBQXFCO1lBRXJCLGFBQWE7WUFDSSxrQkFBa0I7WUFMbkMsaUJBQWlCO1lBR2pCLGVBQWU7WUFFZixlQUFlO1lBQ2Ysa0JBQWtCLHVCQXlCdEIsUUFBUTs7QUEwUWIsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZm9ya0pvaW4sIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRlVwbG9hZEZpbGVFeHRlbmQgfSBmcm9tICdAZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZCc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCwgQ29tbWFuZENvbnRleHQsIEJpbmRpbmdQYXRoQ29udmVydGVyLCBCaW5kaW5nTGlzdCwgQmluZGluZ09iamVjdCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXR0YWNobWVudEluZm8sIEFUVEFDSE1FTlRfT1JERVJfRklFTEQgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgQXR0YWNobWVudERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9hdHRhY2htZW50LWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IEVudGl0eVNlcnZpY2UgfSBmcm9tICcuLi9lbnRpdHktc2VydmljZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBMaXN0RGF0YVNlcnZpY2UsIFN1Ykxpc3REYXRhU2VydmljZSB9IGZyb20gJy4uL2RhdGEtc2VydmljZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBGb3JtTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuLi9mb3JtLWxvYWRpbmcvZm9ybS1sb2FkaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4gKiDpmYTku7bkuIrkvKBcclxuICogQHN1bW1hcnlcclxuICogZmlsZUV4dGVuZO+8muWRveWQjeaWh+S7tuS4iuS8oOaIlumihOiniOe7hOS7tuS8oOmAkui/h+adpeeahOaVsOaNru+8m1xyXG4gKiBmaWxlRXh0ZW5kRmllbGRQYXRo77ya5ZG95ZCN6ZmE5Lu2VURU55qE5a2X5q616Lev5b6E77ybXHJcbiAqIGF0dGFjaG1lbnRJbmZv77ya5ZG95ZCN6ZmE5Lu2VURU5omA6ZyA55qE5L+h5oGv77ybXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEZpbGVTZXJ2aWNlIHtcclxuICBwcml2YXRlIHN1YmplY3Q6IFN1YmplY3Q8eyBmaWxlSW5mb0ZpZWxkUGF0aDogc3RyaW5nLCBjb25maWdzOiBzdHJpbmcgfT47XHJcbiAgcHJpdmF0ZSBhdHRhY2htZW50SW5mb3M6IEF0dGFjaG1lbnRJbmZvW107XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgcHJpdmF0ZSBhdHRhY2hEYXRhU2VydmljZTogQXR0YWNobWVudERhdGFTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBlbnRpdHlTZXJ2aWNlOiBFbnRpdHlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBzdWJMaXN0RGF0YVNlcnZpY2U6IFN1Ykxpc3REYXRhU2VydmljZSxcclxuICAgIHByaXZhdGUgbm90aWZ5U2VydmljZTogRm9ybU5vdGlmeVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBsaXN0RGF0YVNlcnZpY2U6IExpc3REYXRhU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZm9ybUxvYWRpbmdTZXJ2aWNlOiBGb3JtTG9hZGluZ1NlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMuc3ViamVjdCA9IG5ldyBTdWJqZWN0PHsgZmlsZUluZm9GaWVsZFBhdGg6IHN0cmluZywgY29uZmlnczogc3RyaW5nIH0+KCk7XHJcbiAgICB0aGlzLnN1YmplY3QucGlwZShkZWJvdW5jZVRpbWUoNTAwKSkuc3Vic2NyaWJlKChkYXRhOiB7IGZpbGVJbmZvRmllbGRQYXRoOiBzdHJpbmcsIGNvbmZpZ3M6IHN0cmluZyB9KSA9PiB7XHJcbiAgICAgIHRoaXMucHJvY2VzcyhkYXRhLmZpbGVJbmZvRmllbGRQYXRoLCBkYXRhLmNvbmZpZ3MpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmF0dGFjaG1lbnRJbmZvcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLy8gI3JlZ2lvbiDkuIrkvKDmlofku7ZcclxuXHJcbiAgLyoqXHJcbiAgICog5om56YeP5re75Yqg6ZmE5Lu26KGMXHJcbiAgICovXHJcbiAgcHVibGljIGFkZEZpbGVSb3dzKGZpbGVJbmZvRmllbGRQYXRoOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRJbmZvcyA9IHRoaXMuZ2V0QXR0YWNobWVudEluZm9zVG9BZGRGcm9tQ29udGV4dCgpO1xyXG4gICAgaWYgKGF0dGFjaG1lbnRJbmZvcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmluZm8oJ+ivt+WFiOS4iuS8oOmZhOS7ticpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuYXR0YWNoRGF0YVNlcnZpY2UudXBkYXRlUm93cyhmaWxlSW5mb0ZpZWxkUGF0aCwgYXR0YWNobWVudEluZm9zKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5om56YeP5re75Yqg5bim6ZmE5Lu257G75Z6L55qE6ZmE5Lu26KGMXHJcbiAgICogQHBhcmFtIGZpbGVJbmZvRmllbGRQYXRoIOmZhOS7tnVkdOWtl+autVxyXG4gICAqIEBwYXJhbSBjb25maWdzIOmZhOS7tuaJqeWxleS/oeaBr+mFjee9riBcclxuICAgKiBAZGVzY3JpcHRpb24gY29uZmlnc+mFjee9ruWmgntcImJpbGxJZFwiOlwie1VJU1RBVEV+L3Jvb3QvYmlsbElkfVwiLFwicm93SWRcIjpcIntVSVNUQVRFfi9yb290L3Jvd0lkfVwiLFwiYXR0YWNobWVudFR5cGVcIjpcInh1ZWxpXCJ9XHJcbiAgICovXHJcbiAgcHVibGljIGFkZEZpbGVSb3dzV2l0aENvbmZpZ3MoZmlsZUluZm9GaWVsZFBhdGg6IHN0cmluZywgY29uZmlnczogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBhdHRhY2htZW50SW5mb3MgPSB0aGlzLmdldEF0dGFjaG1lbnRJbmZvc1RvQWRkRnJvbUNvbnRleHQoKTtcclxuICAgIGlmIChhdHRhY2htZW50SW5mb3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5pbmZvKCfor7flhYjkuIrkvKDpmYTku7YnKTtcclxuICAgIH1cclxuICAgIC8vIGxldCBtYXBGaWVsZHMgPSBudWxsO1xyXG4gICAgLy8gaWYgKHR5cGVvZiBjb25maWdzID09PSAnc3RyaW5nJykge1xyXG4gICAgLy8gICAvLyDljrvmjonpppblsL7nqbrmoLxcclxuICAgIC8vICAgY29uZmlncyA9IGNvbmZpZ3MudHJpbSgpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gaWYgKGNvbmZpZ3Muc3RhcnRzV2l0aCgneycpICYmIGNvbmZpZ3MuZW5kc1dpdGgoJ30nKSkge1xyXG4gICAgLy8gICB0cnkge1xyXG4gICAgLy8gICAgIG1hcEZpZWxkcyA9IEpTT04ucGFyc2UoY29uZmlncyk7XHJcbiAgICAvLyAgIH0gY2F0Y2gge1xyXG4gICAgLy8gICAgIHRocm93IG5ldyBFcnJvcign6ZmE5Lu25omp5bGV5L+h5oGv6YWN572u5LiN5piv5ZCI5rOV55qEanNvbuWtl+espuS4suOAgicpO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ+mZhOS7tuaJqeWxleS/oeaBr+mFjee9ruS4jeaYr+WQiOazleeahGpzb27lrZfnrKbkuLLjgIInKTtcclxuICAgIC8vIH1cclxuICAgIHRoaXMuYXR0YWNobWVudEluZm9zID0gdGhpcy5hdHRhY2htZW50SW5mb3MuY29uY2F0KGF0dGFjaG1lbnRJbmZvcyk7XHJcbiAgICB0aGlzLnN1YmplY3QubmV4dCh7IGZpbGVJbmZvRmllbGRQYXRoLCBjb25maWdzIH0pO1xyXG4gICAgLy9yZXR1cm4gdGhpcy5hdHRhY2hEYXRhU2VydmljZS51cGRhdGVSb3dzV2l0aENvbmZpZ3MoZmlsZUluZm9GaWVsZFBhdGgsIGF0dGFjaG1lbnRJbmZvcywgbWFwRmllbGRzKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBwcm9jZXNzKGZpbGVJbmZvRmllbGRQYXRoOiBzdHJpbmcsIGNvbmZpZ3M6IHN0cmluZykge1xyXG4gICAgaWYgKHRoaXMuYXR0YWNobWVudEluZm9zICYmIHRoaXMuYXR0YWNobWVudEluZm9zLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgYXR0YWNobWVudEluZm9zID0gdGhpcy5hdHRhY2htZW50SW5mb3MuY29uY2F0KFtdKTtcclxuICAgICAgbGV0IG1hcEZpZWxkcyA9IG51bGw7XHJcbiAgICAgIGlmICh0eXBlb2YgY29uZmlncyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAvLyDljrvmjonpppblsL7nqbrmoLxcclxuICAgICAgICBjb25maWdzID0gY29uZmlncy50cmltKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZ3Muc3RhcnRzV2l0aCgneycpICYmIGNvbmZpZ3MuZW5kc1dpdGgoJ30nKSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBtYXBGaWVsZHMgPSBKU09OLnBhcnNlKGNvbmZpZ3MpO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfpmYTku7bmianlsZXkv6Hmga/phY3nva7kuI3mmK/lkIjms5XnmoRqc29u5a2X56ym5Liy44CCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcign6ZmE5Lu25omp5bGV5L+h5oGv6YWN572u5LiN5piv5ZCI5rOV55qEanNvbuWtl+espuS4suOAgicpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYXR0YWNoRGF0YVNlcnZpY2UudXBkYXRlUm93c1dpdGhDb25maWdzKGZpbGVJbmZvRmllbGRQYXRoLCBhdHRhY2htZW50SW5mb3MsIG1hcEZpZWxkcykucGlwZShcclxuICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hdHRhY2htZW50SW5mb3MgPSB0aGlzLmF0dGFjaG1lbnRJbmZvcy5maWx0ZXIoaXRlbSA9PiAhYXR0YWNobWVudEluZm9zLmZpbmQoYXR0YWNobWVudEluZm8gPT4gYXR0YWNobWVudEluZm8uYXR0YWNobWVudElkID09PSBpdGVtLmF0dGFjaG1lbnRJZCkpO1xyXG4gICAgICAgICAgaWYgKHRoaXMuYXR0YWNobWVudEluZm9zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKGZpbGVJbmZvRmllbGRQYXRoLCBjb25maWdzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluimgea3u+WKoOeahOmZhOS7tuS/oeaBr+aVsOe7hFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0QXR0YWNobWVudEluZm9zVG9BZGRGcm9tQ29udGV4dCgpOiBBdHRhY2htZW50SW5mb1tdIHtcclxuICAgIGNvbnN0IGZpbGVFeHRlbmRzID0gdGhpcy5nZXRGaWxlRXh0ZW5kc0Zyb21Db250ZXh0KCk7XHJcbiAgICBjb25zdCBhdHRhY2htZW50SW5mb3MgPSB0aGlzLmNvbnZlcnRUb0F0dGFjaG1lbnRJbmZvcyhmaWxlRXh0ZW5kcyk7XHJcbiAgICByZXR1cm4gYXR0YWNobWVudEluZm9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5bCG6ZmE5Lu25LiK5Lyg57uE5Lu26L+U5Zue55qE6ZmE5Lu25L+h5oGv6L2s5o2i5Li65pyN5Yqh5Zmo56uv6ZyA6KaB55qE5qC85byPXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb252ZXJ0VG9BdHRhY2htZW50SW5mb3MoZmlsZUV4dGVuZHM6IEZVcGxvYWRGaWxlRXh0ZW5kW10pOiBBdHRhY2htZW50SW5mb1tdIHtcclxuICAgIGlmICghZmlsZUV4dGVuZHMpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF0dGFjaG1lbnRJbmZvczogQXR0YWNobWVudEluZm9bXSA9IFtdO1xyXG4gICAgZmlsZUV4dGVuZHMuZm9yRWFjaCgoZlVwbG9hZE91dFB1dDogRlVwbG9hZEZpbGVFeHRlbmQpID0+IHtcclxuICAgICAgY29uc3QgYXR0YWNobWVudEluZm86IEF0dGFjaG1lbnRJbmZvID0ge1xyXG4gICAgICAgIGF0dGFjaG1lbnRJZDogZlVwbG9hZE91dFB1dC5leHRlbmQubWV0YWRhdGFJZCxcclxuICAgICAgICBmaWxlTmFtZTogZlVwbG9hZE91dFB1dC5leHRlbmQuZmlsZU5hbWUsXHJcbiAgICAgIH07XHJcbiAgICAgIGF0dGFjaG1lbnRJbmZvcy5wdXNoKGF0dGFjaG1lbnRJbmZvKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRJbmZvcztcclxuICB9XHJcblxyXG4gIC8vICNlbmRyZWdpb25cclxuXHJcblxyXG4gIC8vICNyZWdpb24g5Yig6Zmk5paH5Lu2XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIoOmZpOmZhOS7tuihjFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZW1vdmVGaWxlUm93cyhmaWxlSW5mb0ZpZWxkUGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGRhdGFJZHMgPSB0aGlzLmdldERhdGFJZHNUb1JlbW92ZUZyb21Db250ZXh0KGZpbGVJbmZvRmllbGRQYXRoKTtcclxuICAgIGlmIChkYXRhSWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuaW5mbygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6ZmE5Lu2Jyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc1N1Ymxpc3QgPSBmaWxlSW5mb0ZpZWxkUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApLmxlbmd0aCA+PSAyO1xyXG4gICAgY29uc3QgcmVtb3ZlT2JzZXJ2YWJsZXM6IE9ic2VydmFibGU8YW55PltdID0gW107XHJcbiAgICBpZiAoaXNTdWJsaXN0KSB7XHJcbiAgICAgIGRhdGFJZHMuZm9yRWFjaCgoZGF0YUlkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBsZXQgcmVtb3ZlT2JzZXJ2YWJsZTtcclxuICAgICAgICByZW1vdmVPYnNlcnZhYmxlID0gdGhpcy5zdWJMaXN0RGF0YVNlcnZpY2UucmVtb3ZlV2l0aG91dENvbmZpcm0oZGF0YUlkKTtcclxuICAgICAgICByZW1vdmVPYnNlcnZhYmxlcy5wdXNoKHJlbW92ZU9ic2VydmFibGUpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZvcmtKb2luKHJlbW92ZU9ic2VydmFibGVzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmxpc3REYXRhU2VydmljZS5yZW1vdmVSb3dzKGRhdGFJZHMsIGZhbHNlLCBudWxsLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bopoHliKDpmaTnmoTmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIGdldERhdGFJZHNUb1JlbW92ZUZyb21Db250ZXh0KGZpbGVFeHRlbmRGaWVsZFBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuXHJcbiAgICAvLyDku47kuIrkuIvmlofkuK3ojrflj5bopoHlpITnkIbnmoTpmYTku7bkv6Hmga/mlbDnu4RcclxuICAgIGNvbnN0IGZpbGVFeHRlbmRzID0gdGhpcy5nZXRGaWxlRXh0ZW5kc0Zyb21Db250ZXh0KCk7XHJcblxyXG4gICAgLy8g5bCG6ZmE5Lu25pWw57uE6L2s5o2i5Li65a+55bqU55qE5pWw5o2uaWRcclxuICAgIGNvbnN0IGRhdGFJZHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBmaWxlRXh0ZW5kcy5mb3JFYWNoKChmaWxlRXh0ZW5kOiBGVXBsb2FkRmlsZUV4dGVuZCkgPT4ge1xyXG5cclxuICAgICAgLy8g5LiK5Lyg5Yig6Zmk5ZKM6aKE6KeI5Yig6Zmk5Lyg6YCS6L+H5p2l55qEZmlsZUlk55qEa2V55Y+v6IO95LiN5LiA6Ie077yM6KaB5YGa5YW85a65XHJcbiAgICAgIGNvbnN0IGZpbGVJZCA9IGZpbGVFeHRlbmQuZXh0ZW5kLm1ldGFkYXRhSWQ7XHJcbiAgICAgIGNvbnN0IGRhdGFJZCA9IHRoaXMuY29udmVydEZpbGVJZFRvRGF0YUlkKGZpbGVJZCwgZmlsZUV4dGVuZEZpZWxkUGF0aCk7XHJcbiAgICAgIGRhdGFJZHMucHVzaChkYXRhSWQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YUlkcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrui3r+W+hOiOt+WPlumZhOS7tuWtl+auteWAvOaVsOe7hFxyXG4gICAqIEBwYXJhbSBmaWVsZFBhdGgg5a2X5q616Lev5b6EXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb252ZXJ0RmlsZUlkVG9EYXRhSWQoZmlsZUlkOiBzdHJpbmcsIGZpbGVFeHRlbmRGaWVsZFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcblxyXG4gICAgLy8g6Kej5p6Q6Lev5b6EXHJcbiAgICBjb25zdCBmaWxlQmluZGluZ1BhdGggPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoZmlsZUV4dGVuZEZpZWxkUGF0aCk7XHJcbiAgICBjb25zdCBmaWxlRmllbGROYW1lID0gZmlsZUJpbmRpbmdQYXRoLnBvcCgpO1xyXG4gICAgY29uc3QgZmlsZUxpc3RCaW5kaW5nUGF0aCA9IGZpbGVCaW5kaW5nUGF0aDtcclxuXHJcbiAgICAvLyDojrflj5bpmYTku7ZpZOaVsOe7hFxyXG4gICAgY29uc3QgZW50aXR5TGlzdERhdGEgPSB0aGlzLmVudGl0eVNlcnZpY2UuZ2V0RW50aXR5TGlzdERhdGEoZmlsZUxpc3RCaW5kaW5nUGF0aCk7XHJcbiAgICBjb25zdCB0YXJnZXRFbnRpdHlEYXRhID0gZW50aXR5TGlzdERhdGEuZmluZCgoZW50aXR5RGF0YTogYW55KSA9PiB7XHJcbiAgICAgIGlmIChlbnRpdHlEYXRhW2ZpbGVGaWVsZE5hbWVdKSB7XHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudElkID0gZW50aXR5RGF0YVtmaWxlRmllbGROYW1lXVsnYXR0YWNobWVudElkJ107XHJcbiAgICAgICAgaWYgKGF0dGFjaG1lbnRJZCA9PT0gZmlsZUlkKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0YXJnZXRFbnRpdHlEYXRhLmlkO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG4gIC8vI3JlZ2lvbiDmlofku7bmjpLluo9cclxuICAvKipcclxuICAgKiDmm7TmlrDpmYTku7bmjpLluo9cclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGgg6ZmE5Lu2dWR05a2X5q616Lev5b6EXHJcbiAgICogQHBhcmFtIGlkcyDpmYTku7bmjpLluo/lkI7nmoTpmYTku7ZpZOaVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVPcmRlcihhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCBpZHM6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoIWF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign6ZmE5Lu2dWR05a2X5q616Lev5b6E5Y+C5pWw5LiN6IO95Li656m6Jyk7XHJcbiAgICB9XHJcbiAgICAvLyDmlK/mjIHku47ku6PnoIHkuK3nm7TmjqXosIPnlKjvvIzlpoLmnpzlj4LmlbDkuK3kvKDpgJLkuoZpZHPliJnkvb/nlKjvvIzlkKbliJnkvb/nlKjlkb3ku6TkuIrkuIvmlofkuK3nmoTkuovku7blj4LmlbBcclxuICAgIGlmICghaWRzKSB7XHJcbiAgICAgIC8vIOiOt+WPluS6i+S7tuWPguaVsFxyXG4gICAgICBjb25zdCBjb21tYW5kQ29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXSBhcyBDb21tYW5kQ29udGV4dDtcclxuICAgICAgLy8g5LiO57uE5Lu257qm5a6a5LqL5Lu25Y+C5pWw5Li65pWw5o2u5Li76ZSu5pWw57uEXHJcbiAgICAgIGlkcyA9IGNvbW1hbmRDb250ZXh0ICYmIGNvbW1hbmRDb250ZXh0LmV2ZW50UGFyYW0gJiYgY29tbWFuZENvbnRleHQuZXZlbnRQYXJhbS5kYXRhO1xyXG4gICAgfVxyXG4gICAgLy8g5a+55pS26ZuG55qE5Li76ZSu5pWw57uE6L+b6KGM5Yik5patXHJcbiAgICBpZiAoIWlkcyB8fCAhQXJyYXkuaXNBcnJheShpZHMpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIOW9k+WJjeWRveS7pOaJgOWcqOe7hOS7tueahOe7keWumuaVsOaNrlxyXG4gICAgY29uc3QgYmluZGluZ0xpc3Q6IEJpbmRpbmdMaXN0ID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0TGlzdCgpO1xyXG4gICAgLy8g5peg57uR5a6a5pWw5o2u5pe25LiN5aSE55CGXHJcbiAgICBpZiAoIWJpbmRpbmdMaXN0IHx8IGJpbmRpbmdMaXN0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8g57uf5LiA6I635Y+W6ZmE5Lu2dWR05L+h5oGvXHJcbiAgICBjb25zdCBwYXJlbnRCaW5kaW5nUGF0aEFycmF5ID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKTtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRGaWVsZCA9IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkucG9wKCk7XHJcbiAgICAvLyDlh7rnjrB1ZHTlrZfmrrXkuI3lrZjlnKjnmoTmg4XlhrXvvIzor7TmmI7lkb3ku6TkuK3pmYTku7Z1ZHTlrZfmrrXphY3nva7plJnor6/miJZ2b+S4reayoeaciemZhOS7tnVkdOOAguaOp+WItuWZqOS4jeWFvOWuuemUmeivr++8jOatpOWkhOWIpOaWreWPquS4uumYu+atouWQjue7reeahOmBjeWOhlxyXG4gICAgaWYgKCFhdHRhY2htZW50RmllbGQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfml6Dms5Xojrflj5bpmYTku7Z1ZHTlrZfmrrXvvIzor7fnoa7orqTlkb3ku6TkuK3pmYTku7Z1ZHTlrZfmrrXot6/lvoTphY3nva7mraPnoa7vvIzkuJTop4blm77mqKHlnovkuK3lrZjlnKjpmYTku7Z1ZHTlrZfmrrUnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGEgPSBiaW5kaW5nTGlzdC50b0pTT04oKTtcclxuICAgIC8vIOabtOaWsOe7keWumuaVsOaNruS4remZhOS7tnVkdOWtl+auteS4reaOkuW6j+Wtl+auteeahOWAvCzku4Xmm7TmlrDmnInpmYTku7bnmoTooYxcclxuICAgIGlkcy5mb3JFYWNoKChpZDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhLmZpbmQoaXRlbSA9PiBpdGVtICYmIGl0ZW1bYXR0YWNobWVudEZpZWxkXSAmJiBpdGVtW2F0dGFjaG1lbnRGaWVsZF1bJ2F0dGFjaG1lbnRJZCddID09PSBpZCk7XHJcbiAgICAgIGNvbnN0IHByaW1hcnlLZXlWYWx1ZSA9IGl0ZW0gJiYgaXRlbS5pZDtcclxuICAgICAgaWYgKCFwcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgYmluZGluZ09iamVjdCA9IGJpbmRpbmdMaXN0LmZpbmRCeUlkKHByaW1hcnlLZXlWYWx1ZSk7XHJcbiAgICAgIGlmIChiaW5kaW5nT2JqZWN0KSB7XHJcbiAgICAgICAgLy8g6ZmE5Lu2dWR05a+56LGhXHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudCA9IGJpbmRpbmdPYmplY3RbYXR0YWNobWVudEZpZWxkXSBhcyBCaW5kaW5nT2JqZWN0O1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50KSB7XHJcbiAgICAgICAgICAvLyDojrflj5bml6flgLxcclxuICAgICAgICAgIGNvbnN0IG9yZGVyID0gYXR0YWNobWVudC5nZXRWYWx1ZShBVFRBQ0hNRU5UX09SREVSX0ZJRUxEKTtcclxuICAgICAgICAgIGlmIChvcmRlciAhPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgLy8g5pu05paw5o6S5bqPXHJcbiAgICAgICAgICAgIGF0dGFjaG1lbnQuc2V0VmFsdWUoQVRUQUNITUVOVF9PUkRFUl9GSUVMRCwgaW5kZXgsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyAjcmVnaW9uIOWFtuS7luW3peWFt+aWueazlVxyXG5cclxuICAvKipcclxuICAgKiDku47kuIrkuIvmlofkuK3ojrflj5bopoHlpITnkIbnmoTpmYTku7bkv6Hmga/mlbDnu4RcclxuICAgKiBAc3VtbWFyeVxyXG4gICAqIOS4uuS6hue7n+S4gOWNleS4quWSjOWkmuS4qumZhOS7tueahOWkhOeQhuaWueW8j++8jOe7n+S4gOWMheijheS4uuaVsOe7hFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RmlsZUV4dGVuZHNGcm9tQ29udGV4dCgpOiBGVXBsb2FkRmlsZUV4dGVuZFtdIHtcclxuXHJcbiAgICBjb25zdCBjb21tYW5kQ29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXSBhcyBDb21tYW5kQ29udGV4dDtcclxuICAgIGNvbnN0IGV2ZW50UGFyYW0gPSBjb21tYW5kQ29udGV4dC5ldmVudFBhcmFtO1xyXG4gICAgaWYgKCFldmVudFBhcmFtKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZmlsZUV4dGVuZHM6IGFueVtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnRQYXJhbSkgPT09IGZhbHNlKSB7XHJcbiAgICAgIGZpbGVFeHRlbmRzID0gW2V2ZW50UGFyYW1dO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmlsZUV4dGVuZHMgPSBldmVudFBhcmFtLmNvbmNhdChbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZpbGVFeHRlbmRzIGFzIEZVcGxvYWRGaWxlRXh0ZW5kW107XHJcbiAgfVxyXG4gIC8vICNlbmRyZWdpb25cclxufVxyXG5cclxuZXhwb3J0IHsgRmlsZVNlcnZpY2UgfTtcclxuIl19