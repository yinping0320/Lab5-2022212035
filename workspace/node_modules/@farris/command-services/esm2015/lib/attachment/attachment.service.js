import { Injectable, InjectFlags, Optional } from '@angular/core';
import { from, of, empty, EMPTY } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { UploadDialogService, UploadLimit, DownloadService, FileState } from '@gsp-svc/formdoc-upload';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { FrameContext, BindingPathConverter, DataPathCreator } from '@farris/devkit';
import { FormNotifyService } from '../form-notify.service';
import { AttachmentUtil } from './attachment.util';
import { AttachmentDataService } from './attachment-data.service';
import { LanguageService } from '../languag.service';
import { EntityService } from '../entity-services/index';
import { BasePathService } from '@farris/rtf';
// tslint:disable: max-line-length
/**
 * 附件服务
 */
class AttachmentService {
    /**
     * 构造函数
     */
    constructor(frameContext, attachDataService, notifyService, uploadDialogService, downloadService) {
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.notifyService = notifyService;
        this.uploadDialogService = uploadDialogService;
        this.downloadService = downloadService;
        /**
         * 默认根目录
         */
        this.defaultRootDirId = '';
        this.setLanguageService();
        this.fileViewerService = this.frameContext.injector.get(FileViewerService, null, InjectFlags.Optional);
        this.entityService = this.frameContext.injector.get(EntityService, null, InjectFlags.Optional);
        if (!this.downloadService && typeof DownloadService !== 'undefined') {
            this.downloadService = this.frameContext.injector.get(DownloadService, null);
        }
    }
    /**
     * 默认父路径
     */
    get defaultParentDirName() {
        return this.frameContext.bindingData.list.currentId;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 设置语言服务
     */
    setLanguageService() {
        const injector = this.frameContext.injector;
        this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 上传单个文件
     * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param attachmentNamePath 附件名称字段的路径
     */
    uploadAndUpdateRow(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        const attachmentIdList = [];
        let currentItem = null;
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        else {
            this.notifyService.warning(this.languageService.plsSelectUpdateRow, { hideTitle: true });
            return EMPTY;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return empty();
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    }
    /**
     * 上传单个文件（支持多列）
     * @param attachmentInfoFieldPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param rootDirId 附件存储根目录
     * @param parentDirName 附件存储目录
     * @param fileType 文件类型，like .txt,.docx
     */
    uploadAndUpdateRowWithPropertyName(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        const attachmentIdList = [];
        let currentItem = null;
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        else {
            this.notifyService.warning(this.languageService.plsSelectUpdateRow, { hideTitle: true });
            return EMPTY;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    }
    /**
     * 上传多个文件
     */
    uploadAndBatchAddRows(attachmentInfoFieldPath, rootDirId, parentDirName, fileType) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    }
    /**
     * 上传多个文件
     */
    uploadAndBatchAddRowsWithPropertyName(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    }
    /**
     * 下载附件（根据附件id）
     */
    download(attachId, rootId) {
        if (!attachId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        rootId = rootId || 'default-root';
        const url = this.getDownloadUrl([attachId], rootId);
        // let url = '';
        // if (rootId) {
        //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
        // } else {
        //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;
        // }
        window.open(url);
        return of(true);
    }
    /**
     * 批量下载附件（根据附件id数组）
     */
    batchDownload(attachIds, rootId) {
        if (!attachIds || attachIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        // 只选择一个附件时按单个附件下载处理
        if (attachIds.length === 1) {
            return this.download(attachIds[0], rootId);
        }
        // const attachIdsString = JSON.stringify(attachIds);
        // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;
        const url = this.getDownloadUrl(attachIds, rootId);
        window.open(url);
        return of(true);
    }
    /**
     * 获取下载路径
     * @param metadataidlist 附件id数组
     * @param rootId rootId
     */
    getDownloadUrl(metadataidlist, rootId) {
        rootId = rootId || 'default-root';
        if (this.downloadService) {
            if (metadataidlist.length === 1) {
                return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);
            }
            else {
                const attachIdsString = JSON.stringify(metadataidlist);
                return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);
            }
        }
        else {
            console.warn('因安全问题，附件下载提供安全校验机制，附件下载功能需重新编译。');
            if (metadataidlist.length === 1) {
                return BasePathService.convertPath(`/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${metadataidlist[0]}&rootid=${rootId}`);
            }
            else {
                const attachIdsString = JSON.stringify(metadataidlist);
                return BasePathService.convertPath(`/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`);
            }
        }
    }
    /**
     * 下载（根据数据id）
     */
    downloadByDataId(dataId, attachmentInfoFieldPath, rootId) {
        if (!dataId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const dataIds = [dataId];
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const attachId = attachIds[0];
        return this.download(attachId);
    }
    /**
     * 批量下载附件
     */
    batchDownloadByDataIds(dataIds, attachmentInfoFieldPath, rootId) {
        if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {
            dataIds = dataIds.split(',').filter(p => p);
        }
        if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const ids = [].concat(dataIds);
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        return this.batchDownload(attachIds, rootId);
    }
    /**
     * 根据附件UDT字段的路径预览附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 跟目录id
     * @param ids 附件id
     */
    previewByAttachmentInfoFieldPath(attachmentInfoFieldPath, rootDirId, ids) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        let attachIds = [];
        let dataIds = [];
        if (ids && ids.length > 0) {
            if (typeof (ids) === 'string') {
                dataIds.push(ids);
            }
            else {
                dataIds = ids;
            }
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        }
        else {
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        }
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        return this.previewByAttachmentIds(attachIds, rootDirId);
    }
    /**
     * 根据附件UDT字段的路径预览当前行的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 根目录id
     */
    previewByAttachmentInfoFieldPathWithIndex(attachmentInfoFieldPath, rootDirId) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        const currentRow = this.getCurrentRow(attachmentInfoFieldPath);
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            throw new Error('要预览的附件id不存在，请确认');
        }
        else {
            return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);
        }
    }
    /**
     * 根据目录预览附件
     * @param subDirName 父目录名称
     * @param rootDirId 根目录id
     */
    previewBySubDirName(subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        const viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));
        return viewer$;
    }
    /**
     * 根据目录预览指定索引的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param subDirName 子目录名称
     * @param rootDirId 根目录id
     */
    previewBySubDirNameWithIndex(attachmentInfoFieldPath, subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));
        return viewer$;
    }
    /**
     * 根据附件id数组预览附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     */
    previewByAttachmentIds(attachmentIds, rootDirId) {
        const viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));
        return viewer$;
    }
    /**
     * 根据附件id数组预览指定索引的附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     * @param attachmentId 附件Id
     */
    previewFileListWithIndex(attachmentIds, rootDirId, attachmentId) {
        const viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));
        return viewer$;
    }
    /**
     * 生成版本号
     * @param versions 历史版本号
     * @description 默认编码规则v1.0 v2.0 ...
     */
    genVersion(versions) {
        if (!versions) {
            versions = [];
        }
        const mainCode = versions.length + 1;
        return `V${mainCode}.0`;
    }
    /**
     * 更新附件版本信息
     * @param versionField 附件版本字段
     * @param historyField 是否历史版本字段
     * @param attachmentFieldPath 附件udt字段路径
     */
    updateAttachmentVersion(versionField, historyField, attachmentFieldPath) {
        /**
         * 遍历所有附件行
         * 找到所有没有附件版本的行
         * 遍历这些行
         * 通过文件名去查找同名的且有附件版本号的行
         * 这些行历史版本字段置为true
         * 无版本号的行，版本= 上行数 + 1
         *
         */
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        const attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        const befRepository = this.frameContext.repository;
        const entityManager = befRepository.entityManager;
        const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
        const paths = dataPath.toArray().map((path) => {
            if (path.startsWith('PropName:')) {
                return path.split(':')[1];
            }
            else {
                return path;
            }
        });
        if (attachmentBindingList) {
            const attachments = attachmentBindingList.toJSON();
            // 只处理有附件的情况
            if (attachments) {
                const versionLessRows = attachments.filter(item => !item[versionField]);
                versionLessRows.forEach(item => {
                    const fileName = item[attachmentField]['fileName'];
                    const versionedRows = attachments.filter(row => row[attachmentField]['fileName'] === fileName && row[versionField]);
                    paths.pop();
                    paths.push(`DataId:${item[attachmentBindingList.primaryKey]}`);
                    let entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                    const version = this.genVersion(versionedRows);
                    entity[versionField] = version;
                    entity[historyField] = false;
                    // 处理历史记录
                    versionedRows.forEach(row => {
                        paths.pop();
                        paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);
                        entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                        entity[historyField] = true;
                    });
                });
            }
        }
    }
    isAttachmentCanDelete(historyField, attachmentFieldPath) {
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        bindingPaths.pop();
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        const bindingObject = attachmentBindingList.currentItem;
        if (bindingObject[historyField] === true) {
            this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });
            return EMPTY;
        }
    }
    updateAttachmentHistory(versionField, historyField, attachmentFieldPath) {
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        const attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        // const befRepository = this.frameContext.repository as BefRepository<any>;
        // const entityManager = befRepository.entityManager;
        if (attachmentBindingList) {
            const attachments = attachmentBindingList.toJSON();
            const versionedRows = attachments.filter(item => item[versionField]);
            const fileNameMap = new Map();
            const befRepository = this.frameContext.repository;
            const entityManager = befRepository.entityManager;
            const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
            const paths = dataPath.toArray().map((path) => {
                if (path.startsWith('PropName:')) {
                    return path.split(':')[1];
                }
                else {
                    return path;
                }
            });
            versionedRows.forEach(item => {
                const fileName = item[attachmentField]['fileName'];
                if (fileNameMap.has(fileName)) {
                    fileNameMap.get(fileName).push(item);
                }
                else {
                    fileNameMap.set(fileName, [item]);
                }
            });
            Array.from(fileNameMap.values()).forEach((array) => {
                array.sort((x, y) => {
                    const xVersion = parseInt(x[versionField].replace(/[a-zA-Z\.]/g, ''));
                    const yVersion = parseInt(y[versionField].replace(/[a-zA-Z\.]/g, ''));
                    return yVersion - xVersion;
                });
                const row = array[0];
                paths.pop();
                paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);
                const entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                entity[historyField] = false;
            });
        }
    }
    /**
     * 删除附件
     * @param attachmentInfoFieldPath 附件udt字段路径
     * @param id 数据id
     * @param rootDirId 根目录
     * @returns
     */
    removeAttachment(attachmentInfoFieldPath, id, rootDirId) {
        const rootId = rootDirId;
        if (!rootId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const dataIds = [id];
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectRemoveAtt, { hideTitle: true });
            return EMPTY;
        }
        const attachmentId = attachIds[0];
        return this.attachDataService.removeAttachment(attachmentInfoFieldPath, { attachmentId, fileName: null });
    }
    /**
     * 获取当前视图模型当前行的附件id
     * @param attachmentInfoFieldPath 附件udt字段
     */
    getCurrentAttachmentId(attachmentInfoFieldPath) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList.currentItem;
        if (currentItem && currentItem.primaryKeyValue) {
            return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;
        }
        else {
            return null;
        }
    }
    /**
     * 获取当前行
     * @param attachmentInfoFieldPath udt字段
     */
    getCurrentRow(attachmentInfoFieldPath) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList && bindingList.currentItem;
        return currentItem;
    }
    /**
     * 获取指定附件信息表的指定行
     * @param attachmentInfoFieldPath
     * @param primaryValue
     * @returns
     */
    getSpecialRow(attachmentInfoFieldPath, primaryValue) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList && bindingList.findById(primaryValue);
        return currentItem;
    }
    /**
     * 获取dataIds对应Entity上的附件id数组
     */
    getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds) {
        // 解析路径
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        // 获取附件所在实体的数据列表，不传递dataIds参数，则返回全部
        const entityListData = this.entityService.getEntityListData(parentBindingPathArray);
        let filteredEntityListData = [];
        if (dataIds && Array.isArray(dataIds) === true) {
            filteredEntityListData = entityListData.filter((entityData) => {
                return dataIds.indexOf(entityData.id) > -1;
            });
        }
        else {
            filteredEntityListData = entityListData;
        }
        // 转换为附件Id数组
        const attachmentIds = [];
        filteredEntityListData.forEach((entityData) => {
            if (entityData[attachmentFieldName]) {
                const attachmentId = entityData[attachmentFieldName]['attachmentId'];
                if (attachmentId) {
                    attachmentIds.push(attachmentId);
                }
            }
        });
        return attachmentIds;
    }
}
AttachmentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AttachmentService.ctorParameters = () => [
    { type: FrameContext },
    { type: AttachmentDataService },
    { type: FormNotifyService },
    { type: UploadDialogService },
    { type: DownloadService, decorators: [{ type: Optional }] }
];
export { AttachmentService };
//# sourceMappingURL=data:application/json;base64,