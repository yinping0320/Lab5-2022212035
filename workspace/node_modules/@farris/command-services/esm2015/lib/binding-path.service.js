import { Injectable, Injector } from "@angular/core";
import { AppContext, Repository } from "@farris/devkit";
export class BindingPathService {
    constructor(injector, appContext, repository) {
        this.injector = injector;
        this.appContext = appContext;
        this.repository = repository;
    }
    /**
     * 获取组件上下文的绑定路径
     * @param frameContext 组件上下文
     * @returns
     */
    getBindingPathsByFrameContext(frameContext) {
        return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(p => p) || null;
    }
    /**
     * 通过BE表名获取bindingPath
     * @param dataTypeInfo
     * @param tableName
     * @param paths
     * @param level
     * @returns
     */
    getBindingPathsByTableName(dataTypeInfo, tableName, paths = [], level = 0) {
        level++;
        if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
            return paths;
        }
        const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);
        if (props.length < 1) {
            paths = [];
            return paths;
        }
        if (dataTypeInfo.entityInfo) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
        }
        for (let idx = 0; idx < props.length; idx++) {
            const dataTypeInfo = props[idx].typeInfo;
            const path = this.getBindingPathsByTableName(dataTypeInfo, tableName, paths, level);
            if (!path || path.length < 1) {
                continue;
            }
            else {
                paths = paths.concat(path);
                return paths;
            }
        }
        return null;
    }
    /**
     * 获取属性路径中的绑定路径
     * @param paths paths
     * @param entityTypeInfo
     * @returns
     */
    getBindingPathsByPath(paths, entityTypeInfo) {
        let nodeCodes = [];
        if (typeof paths === 'string') {
            paths = paths.split('/').filter(p => p);
        }
        paths = paths.concat([]);
        while (paths.length > 0) {
            const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
            if (dataPropInfo.group === 'List') {
                nodeCodes = paths;
                break;
            }
            paths.pop();
        }
        return nodeCodes;
    }
    /**
     * 获取属性路径信息
     * @param path 属性路径
     * @returns
     */
    getPathInfo(path) {
        const paths = path.split('/').filter(p => p);
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        const entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);
        const propertyName = paths.slice(entityPath.length).join('/');
        return { bindingPath: entityPath.join('/'), propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };
    }
}
BindingPathService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BindingPathService.ctorParameters = () => [
    { type: Injector },
    { type: AppContext },
    { type: Repository }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy1wYXRoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1wYXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBc0MsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHNUYsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixZQUFvQixRQUFrQixFQUFVLFVBQXNCLEVBQVUsVUFBOEI7UUFBMUYsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFvQjtJQUFJLENBQUM7SUFDbkg7Ozs7T0FJRztJQUNJLDZCQUE2QixDQUFDLFlBQTBCO1FBQzdELE9BQU8sWUFBWSxJQUFJLFlBQVksQ0FBQyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztJQUM5SixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUNJLDBCQUEwQixDQUFDLFlBQTBCLEVBQUUsU0FBaUIsRUFBRSxRQUFrQixFQUFFLEVBQUUsUUFBZ0IsQ0FBQztRQUN0SCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksWUFBWSxDQUFDLFVBQVUsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUMsRUFBRTtZQUNySSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7Z0JBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzlDO1lBQ0QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRixJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDWCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxZQUFZLENBQUMsVUFBVSxFQUFFO1lBQzNCLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtnQkFDZixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUM7U0FDRjtRQUVELEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzNDLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDekMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BGLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzVCLFNBQVM7YUFDVjtpQkFBTTtnQkFDTCxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDM0IsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSxxQkFBcUIsQ0FBQyxLQUF3QixFQUFFLGNBQTRCO1FBQ2pGLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6QztRQUNELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdELElBQUksWUFBWSxDQUFDLEtBQUssS0FBSyxNQUFNLEVBQUU7Z0JBQ2pDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLE1BQU07YUFDUDtZQUNELEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNiO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxXQUFXLENBQUMsSUFBWTtRQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLHFDQUFxQztRQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckYsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlJLENBQUM7OztZQW5GRixVQUFVOzs7O1lBSFUsUUFBUTtZQUNwQixVQUFVO1lBQXNDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEFwcENvbnRleHQsIERhdGFUeXBlSW5mbywgRW50aXR5LCBGcmFtZUNvbnRleHQsIFJlcG9zaXRvcnkgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJpbmRpbmdQYXRoU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgYXBwQ29udGV4dDogQXBwQ29udGV4dCwgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT4pIHsgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlue7hOS7tuS4iuS4i+aWh+eahOe7keWumui3r+W+hFxyXG4gICAqIEBwYXJhbSBmcmFtZUNvbnRleHQg57uE5Lu25LiK5LiL5paHXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGdldEJpbmRpbmdQYXRoc0J5RnJhbWVDb250ZXh0KGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQudmlld01vZGVsICYmIGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggJiYgZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApIHx8IG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmAmui/h0JF6KGo5ZCN6I635Y+WYmluZGluZ1BhdGhcclxuICAgKiBAcGFyYW0gZGF0YVR5cGVJbmZvIFxyXG4gICAqIEBwYXJhbSB0YWJsZU5hbWUgXHJcbiAgICogQHBhcmFtIHBhdGhzIFxyXG4gICAqIEBwYXJhbSBsZXZlbFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRCaW5kaW5nUGF0aHNCeVRhYmxlTmFtZShkYXRhVHlwZUluZm86IERhdGFUeXBlSW5mbywgdGFibGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBzdHJpbmdbXSA9IFtdLCBsZXZlbDogbnVtYmVyID0gMCk6IHN0cmluZ1tdIHtcclxuICAgIGxldmVsKys7XHJcbiAgICBpZiAoZGF0YVR5cGVJbmZvLmVudGl0eUluZm8gJiYgKGRhdGFUeXBlSW5mby5lbnRpdHlJbmZvLm5vZGVDb2RlID09PSB0YWJsZU5hbWUgfHwgZGF0YVR5cGVJbmZvLmVudGl0eUluZm8ub3JpZ2luYWxDb2RlID09PSB0YWJsZU5hbWUpKSB7XHJcbiAgICAgIGlmIChsZXZlbCAhPT0gMSkge1xyXG4gICAgICAgIHBhdGhzLnB1c2goZGF0YVR5cGVJbmZvLmVudGl0eUluZm8ubm9kZUNvZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwYXRocztcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3BzID0gQXJyYXkuZnJvbShkYXRhVHlwZUluZm8ucHJvcEluZm9NYXAudmFsdWVzKCkpLmZpbHRlcihwID0+IHAudHlwZUluZm8pO1xyXG4gICAgaWYgKHByb3BzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcGF0aHMgPSBbXTtcclxuICAgICAgcmV0dXJuIHBhdGhzO1xyXG4gICAgfVxyXG4gICAgaWYgKGRhdGFUeXBlSW5mby5lbnRpdHlJbmZvKSB7XHJcbiAgICAgIGlmIChsZXZlbCAhPT0gMSkge1xyXG4gICAgICAgIHBhdGhzLnB1c2goZGF0YVR5cGVJbmZvLmVudGl0eUluZm8ubm9kZUNvZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcHJvcHMubGVuZ3RoOyBpZHgrKykge1xyXG4gICAgICBjb25zdCBkYXRhVHlwZUluZm8gPSBwcm9wc1tpZHhdLnR5cGVJbmZvO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRCaW5kaW5nUGF0aHNCeVRhYmxlTmFtZShkYXRhVHlwZUluZm8sIHRhYmxlTmFtZSwgcGF0aHMsIGxldmVsKTtcclxuICAgICAgaWYgKCFwYXRoIHx8IHBhdGgubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhdGhzID0gcGF0aHMuY29uY2F0KHBhdGgpO1xyXG4gICAgICAgIHJldHVybiBwYXRocztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWxnuaAp+i3r+W+hOS4reeahOe7keWumui3r+W+hFxyXG4gICAqIEBwYXJhbSBwYXRocyBwYXRoc1xyXG4gICAqIEBwYXJhbSBlbnRpdHlUeXBlSW5mbyBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QmluZGluZ1BhdGhzQnlQYXRoKHBhdGhzOiBzdHJpbmdbXSB8IHN0cmluZywgZW50aXR5VHlwZUluZm86IERhdGFUeXBlSW5mbyk6IHN0cmluZ1tdIHtcclxuICAgIGxldCBub2RlQ29kZXMgPSBbXTtcclxuICAgIGlmICh0eXBlb2YgcGF0aHMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHBhdGhzID0gcGF0aHMuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIH1cclxuICAgIHBhdGhzID0gcGF0aHMuY29uY2F0KFtdKTtcclxuICAgIHdoaWxlIChwYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGRhdGFQcm9wSW5mbyA9IGVudGl0eVR5cGVJbmZvLmdldFByb3BJbmZvQnlQYXRoKHBhdGhzKTtcclxuICAgICAgaWYgKGRhdGFQcm9wSW5mby5ncm91cCA9PT0gJ0xpc3QnKSB7XHJcbiAgICAgICAgbm9kZUNvZGVzID0gcGF0aHM7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgcGF0aHMucG9wKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZUNvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blsZ7mgKfot6/lvoTkv6Hmga9cclxuICAgKiBAcGFyYW0gcGF0aCDlsZ7mgKfot6/lvoRcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGF0aEluZm8ocGF0aDogc3RyaW5nKTogeyBiaW5kaW5nUGF0aDogc3RyaW5nLCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgYmluZGluZ1BhdGhzOiBzdHJpbmdbXSwgcHJvcGVydHlOYW1lczogc3RyaW5nW10gfSB7XHJcbiAgICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIC8vIOiOt+WPluacgOWkp+WunuS9k+Wxgue6p++8jOWFtuS9meS4uuWxnuaAp++8iOeugOWNleWxnuaAp+OAgXVkdOOAgeWFs+iBlOOAgeWFs+iBlOW1jOWll+WFs+iBlO+8iVxyXG4gICAgY29uc3QgZW50aXR5UGF0aCA9IHRoaXMuZ2V0QmluZGluZ1BhdGhzQnlQYXRoKHBhdGhzLCB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8pO1xyXG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gcGF0aHMuc2xpY2UoZW50aXR5UGF0aC5sZW5ndGgpLmpvaW4oJy8nKTtcclxuICAgIHJldHVybiB7IGJpbmRpbmdQYXRoOiBlbnRpdHlQYXRoLmpvaW4oJy8nKSwgcHJvcGVydHlOYW1lLCBiaW5kaW5nUGF0aHM6IGVudGl0eVBhdGgsIHByb3BlcnR5TmFtZXM6IHByb3BlcnR5TmFtZS5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApIH07XHJcbiAgfVxyXG59Il19