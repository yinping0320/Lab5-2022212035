import { Injectable } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { AppContext, ViewModel } from '@farris/devkit';
/**
 * 命令服务
 * @scope FrameConmponent
 */
class CommandService {
    constructor(viewModel, appContext) {
        this.viewModel = viewModel;
        this.appContext = appContext;
    }
    /**
     * context取值方法
     */
    get context() {
        return this.innerContext;
    }
    /**
     * context设值方法
     */
    set context(context) {
        this.innerContext = context;
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId 框架ID
     */
    execute(commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        let viewModel = this.viewModel;
        if (frameId) {
            const targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    }
    /**
     * 等待BeSession创建
     * @returns 最新创建出来的BeSession
     */
    waitForBeSession() {
        const frameContext = this.context.frameContext;
        const befRepository = frameContext.repository;
        const sessionService = befRepository.restService.sessionService;
        return sessionService.getBeSessionId().pipe(filter((beSessionId) => {
            return beSessionId !== null;
        }), take(1));
    }
    /**
     * 提取某个任务的执行结果
     * @param taskName 任务名称
     * @reutrn 返回taskName对应任务的执行结果
     */
    extractResult(taskName) {
        const results = this.context.results;
        return results[taskName];
    }
    /**
     * 暂停当前组件的行切换事件抛出
     */
    suspendFrameContextRowSelectedEvent(frameId) {
        let frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = true;
        }
    }
    resumeFrameContextRowSelectedEvent(frameId) {
        let frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = false;
        }
    }
}
CommandService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandService.ctorParameters = () => [
    { type: ViewModel },
    { type: AppContext }
];
export { CommandService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQXdDLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0Y7OztHQUdHO0FBQ0gsTUFDTSxjQUFjO0lBcUJsQixZQUNVLFNBQW9CLEVBQ3BCLFVBQXNCO1FBRHRCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBakJMOztPQUVHO0lBQ0gsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLE9BQU8sQ0FBQyxPQUF1QjtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBT0Q7Ozs7T0FJRztJQUNJLE9BQU8sQ0FBQyxXQUFtQixFQUFFLE9BQWdCO1FBQ2xELElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxLQUFLLEVBQUUsSUFBSSxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQ3JFLE9BQU87U0FDUjtRQUNELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxPQUFPLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZGLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZ0JBQWdCO1FBQ3JCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQy9DLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxVQUFtQyxDQUFDO1FBQ3ZFLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1FBQ2hFLE9BQU8sY0FBYyxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FDekMsTUFBTSxDQUFDLENBQUMsV0FBbUIsRUFBRSxFQUFFO1lBQzdCLE9BQU8sV0FBVyxLQUFLLElBQUksQ0FBQztRQUM5QixDQUFDLENBQUMsRUFDRixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksYUFBYSxDQUFDLFFBQWdCO1FBQ25DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3JDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7T0FFRztJQUNJLG1DQUFtQyxDQUFDLE9BQWdCO1FBQ3pELElBQUksWUFBWSxHQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUM3RCxJQUFJLE9BQU8sRUFBRTtZQUNYLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEc7UUFDRCxJQUFJLFlBQVksRUFBRTtZQUNoQixZQUFZLENBQUMsV0FBVyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztTQUN6RDtJQUVILENBQUM7SUFDTSxrQ0FBa0MsQ0FBQyxPQUFnQjtRQUN4RCxJQUFJLFlBQVksR0FBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDN0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hHO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsWUFBWSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7U0FDMUQ7SUFDSCxDQUFDOzs7WUExRkYsVUFBVTs7OztZQVBVLFNBQVM7WUFBckIsVUFBVTs7QUFvR25CLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQsIFZpZXdNb2RlbCwgQ29tbWFuZENvbnRleHQsIEVudGl0eSwgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5cclxuLyoqXHJcbiAqIOWRveS7pOacjeWKoVxyXG4gKiBAc2NvcGUgRnJhbWVDb25tcG9uZW50XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIENvbW1hbmRTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5YaF6YOoY290bmV4dFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5uZXJDb250ZXh0OiBDb21tYW5kQ29udGV4dDtcclxuXHJcbiAgLyoqXHJcbiAgICogY29udGV4dOWPluWAvOaWueazlVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgY29udGV4dCgpOiBDb21tYW5kQ29udGV4dCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbm5lckNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjb250ZXh06K6+5YC85pa55rOVXHJcbiAgICovXHJcbiAgcHVibGljIHNldCBjb250ZXh0KGNvbnRleHQ6IENvbW1hbmRDb250ZXh0KSB7XHJcbiAgICB0aGlzLmlubmVyQ29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgdmlld01vZGVsOiBWaWV3TW9kZWwsXHJcbiAgICBwcml2YXRlIGFwcENvbnRleHQ6IEFwcENvbnRleHRcclxuICApIHsgfVxyXG5cclxuICAvKipcclxuICAgKiDmiafooYzlkb3ku6RcclxuICAgKiBAcGFyYW0gY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXHJcbiAgICogQHBhcmFtIGZyYW1lSWQg5qGG5p62SURcclxuICAgKi9cclxuICBwdWJsaWMgZXhlY3V0ZShjb21tYW5kTmFtZTogc3RyaW5nLCBmcmFtZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghY29tbWFuZE5hbWUgfHwgY29tbWFuZE5hbWUgPT09ICcnIHx8IGNvbW1hbmROYW1lID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgdmlld01vZGVsID0gdGhpcy52aWV3TW9kZWw7XHJcbiAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgdmlld01vZGVsID0gdGFyZ2V0Q29udGV4dC52aWV3TW9kZWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmlld01vZGVsW2NvbW1hbmROYW1lXSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog562J5b6FQmVTZXNzaW9u5Yib5bu6XHJcbiAgICogQHJldHVybnMg5pyA5paw5Yib5bu65Ye65p2l55qEQmVTZXNzaW9uXHJcbiAgICovXHJcbiAgcHVibGljIHdhaXRGb3JCZVNlc3Npb24oKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IHRoaXMuY29udGV4dC5mcmFtZUNvbnRleHQ7XHJcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5ID0gZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxFbnRpdHk+O1xyXG4gICAgY29uc3Qgc2Vzc2lvblNlcnZpY2UgPSBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLnNlc3Npb25TZXJ2aWNlO1xyXG4gICAgcmV0dXJuIHNlc3Npb25TZXJ2aWNlLmdldEJlU2Vzc2lvbklkKCkucGlwZShcclxuICAgICAgZmlsdGVyKChiZVNlc3Npb25JZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGJlU2Vzc2lvbklkICE9PSBudWxsO1xyXG4gICAgICB9KSxcclxuICAgICAgdGFrZSgxKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPkOWPluafkOS4quS7u+WKoeeahOaJp+ihjOe7k+aenFxyXG4gICAqIEBwYXJhbSB0YXNrTmFtZSDku7vliqHlkI3np7BcclxuICAgKiBAcmV1dHJuIOi/lOWbnnRhc2tOYW1l5a+55bqU5Lu75Yqh55qE5omn6KGM57uT5p6cXHJcbiAgICovXHJcbiAgcHVibGljIGV4dHJhY3RSZXN1bHQodGFza05hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuY29udGV4dC5yZXN1bHRzO1xyXG4gICAgcmV0dXJuIHJlc3VsdHNbdGFza05hbWVdO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmmoLlgZzlvZPliY3nu4Tku7bnmoTooYzliIfmjaLkuovku7bmipvlh7pcclxuICAgKi9cclxuICBwdWJsaWMgc3VzcGVuZEZyYW1lQ29udGV4dFJvd1NlbGVjdGVkRXZlbnQoZnJhbWVJZD86IHN0cmluZykge1xyXG4gICAgbGV0IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0O1xyXG4gICAgaWYgKGZyYW1lSWQpIHtcclxuICAgICAgZnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEucm93U2VsZWN0ZWRFdmVudFN1c3BlbmQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbiAgcHVibGljIHJlc3VtZUZyYW1lQ29udGV4dFJvd1NlbGVjdGVkRXZlbnQoZnJhbWVJZD86IHN0cmluZykge1xyXG4gICAgbGV0IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0O1xyXG4gICAgaWYgKGZyYW1lSWQpIHtcclxuICAgICAgZnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEucm93U2VsZWN0ZWRFdmVudFN1c3BlbmQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbW1hbmRTZXJ2aWNlIH07XHJcbiJdfQ==