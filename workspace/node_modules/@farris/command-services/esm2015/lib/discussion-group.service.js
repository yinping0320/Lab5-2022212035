import { Injectable, Injector } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { FormLoadingService } from './form-loading/form-loading.service';
import { RuntimeFrameworkService } from './rtf-service';
import { tap } from 'rxjs/operators';
import { EMPTY } from 'rxjs';
import { BasePathService } from '@farris/rtf';
// tslint:disable: max-line-length
export class DiscussionGroupService {
    constructor(injector, frameContext, loadingService, runtimeFrameworkService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    /**
     * 实体仓库
     */
    get repository() {
        return this.frameContext.repository;
    }
    /**
     * 命令参数
     */
    get params() {
        return this['context'] && this['context']['eventParam'] || {};
    }
    addComment(id, summary, configId, text, visibility, parentId) {
        id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        const params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);
        const restService = this.repository.restService;
        const url = BasePathService.convertPath('/api/runtime/comment/v1.0/bill-comment/comment');
        const requestInfo = restService.buildRequestInfo();
        const options = {
            body: Object.assign({ requestInfo }, params)
        };
        this.loadingService.show();
        return restService.invoke(url, 'POST', null, options).pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 查询评论
     * @param id id
     */
    queryComments(id, configId, pageIndex, pageSize) {
        id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        const restService = this.repository.restService;
        const url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 查询所有部门信息
     */
    queryAllOrgs() {
        const restService = this.repository.restService;
        const url = BasePathService.convertPath('/api/runtime/sys/v1.0/sysOrgs?param={"layer":"1"}');
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 查询常用@用户
     * @param pageIndex
     * @param pageSize
     */
    queryFrequentAtUsers(pageIndex, pageSize) {
        const restService = this.repository.restService;
        const url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 获取at用户列表
     * @param user 用户编号或者用户名称（过滤使用）
     * @param pageIndex pageIndex
     * @param pageSize pageSize
     */
    queryAtUsers(user, pageIndex, pageSize) {
        const restService = this.repository.restService;
        const url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 构造获取评论列表的url
     * @param id id
     */
    buildQueryCommentsUrl(id, pageIndex, pageSize, configId) {
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 10;
        }
        const serverUri = this.repository.serverUri;
        // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';
        return BasePathService.convertPath(`/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=${configId}&billId=${id}&pageSize=${pageSize}&pageIndex=${pageIndex}`);
    }
    /**
     * 构造获取@用户url
     */
    buildQueryAtUsersUrl(user, pageIndex, pageSize) {
        const params = [];
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 1000;
        }
        if (user) {
            params.push(`param=${user}`);
        }
        params.push(`pageSize=${pageSize}`);
        params.push(`pageIndex=${pageIndex}`);
        return BasePathService.convertPath(`/api/runtime/comment/v1.0/bill-comment/atUser?${params.join('&')}`);
    }
    buildQueryFrequentAtUsersUrl(pageIndex, pageSize) {
        const params = [];
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 6;
        }
        params.push(`pageSize=${pageSize}`);
        params.push(`pageIndex=${pageIndex}`);
        return BasePathService.convertPath(`/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?${params.join('&')}`);
    }
    buildAddCommentParam(id, text, parentId, summary, visibility, configId) {
        if (typeof text === 'undefined') {
            text = this.params.text;
        }
        if (typeof parentId === 'undefined') {
            parentId = this.params.parentId;
        }
        if (typeof visibility === 'undefined') {
            visibility = this.params.visibility;
        }
        return {
            'bill': {
                'billId': id,
                'configId': configId,
                'summary': summary
            },
            'comment': {
                'billId': id,
                'configId': configId,
                'parentId': parentId || null,
                'text': text,
                'visibility': visibility
            }
        };
    }
}
DiscussionGroupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DiscussionGroupService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: FormLoadingService },
    { type: RuntimeFrameworkService }
];
//# sourceMappingURL=data:application/json;base64,