import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, TranslateToken } from '@farris/devkit';
/**
 * 后端消息处理服务
 * @description
 * ### 服务注入位置
 *  1、整个表单的root-component
 *  2、弹出窗口的root-component
 */
export class BackEndMessageHandler {
    constructor(injector, frameContext, translate) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.translate = translate;
    }
    /**
     * 处理后端返回的消息或错误
     * @param message 消息或错误
     */
    handle(message, context) {
        const isException = context && context.isException || false;
        const hasThrowError = context && context.hasThrowError || false;
        const eventBus = context && context.eventBus || null;
        const error = context && context.error || null;
        const formAppContext = context && context.formAppContext || null;
        const result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);
        if (result && result.form && result.form.length > 0) {
            result.form.forEach((item) => {
                item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');
            });
        }
        else {
            this.resetFormMessage(message.context.appContext, message.context.ns);
        }
        const targetFrameContext = this.findTargetFrameContext(this.frameContext);
        if (result && result.all && result.all.length > 0) {
            targetFrameContext.viewModel.verifycationChanged.next(result.all);
        }
        else {
            if (result !== null) {
                targetFrameContext.viewModel.verifycationChanged.next([]);
            }
        }
    }
    /**
     * 收集汇总信息和form信息
     * @param backEndMessage
     */
    collect(backEndMessage, isException = false, hasThrowError = false, eventBus = null, error = null, formAppContext = null) {
        const bizMessages = backEndMessage && backEndMessage.bizMessages || null;
        const appContext = backEndMessage && backEndMessage.context.appContext;
        const ns = backEndMessage.context.ns;
        if (!bizMessages || bizMessages.length < 1) {
            return null;
        }
        const result = {
            form: [],
            all: []
        };
        let hasFormlessError = false;
        for (let bizMessage of bizMessages) {
            const message = bizMessage.message;
            const location = bizMessage.location || null;
            const columns = location && location.columns || null;
            const nodeCode = location && location.nodeCode || null;
            const rows = location && location.rows;
            const bindingPath = this.getBindingPath(appContext, ns, nodeCode);
            const bindingPaths = bindingPath && bindingPath.split('/').filter(p => p);
            // 目前仅处理有location，且有id、列名、表名的。
            if (!location || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {
                continue;
            }
            // 遍历数据行
            for (let row of rows) {
                for (let column of columns) {
                    // 获取到所有绑定该列数据的frameContext
                    let frameContexts = this.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);
                    if (!frameContexts || frameContexts.length < 1) {
                        // 没有任何一个组件绑定该列的数据
                        hasFormlessError = true;
                        continue;
                    }
                    // 排除掉只读datagrid
                    frameContexts = frameContexts.filter((frameContext) => {
                        const isDataGridComponent = this.isDataGridComponent(frameContext.frameComponent);
                        if (isDataGridComponent) {
                            const isReadonlyDataGrid = this.isReadonlyDataGrid(frameContext.frameComponent);
                            if (isReadonlyDataGrid) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }
                        return true;
                    });
                    // 遍历的行是否为当前行
                    const isCurrentRow = this.isCurrentRow(appContext, ns, bindingPath, row);
                    // 如果是当前行的话需要将错误信息放到form中
                    if (isCurrentRow) {
                        // 忽略grid
                        // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));
                        if (frameContexts && frameContexts.length > 0) {
                            frameContexts.forEach((frameContext) => {
                                // 只处理了一个组件中列只绑定到一个前端控件的场景
                                const formControls = this.getFormControlByColumnName(frameContext, column);
                                if (formControls && formControls.length > 0) {
                                    formControls.forEach(([domPropertyName, formControl]) => {
                                        //const domPropertyName = formControl && formControl. || null;
                                        this.mergeMessage(result.form, frameContext, domPropertyName, message);
                                    });
                                }
                                //if (formControl && domPropertyName) {
                                //}
                            });
                        }
                        else {
                        }
                    }
                    // 将错误信息放到汇总中
                    frameContexts.forEach((frameContext) => {
                        const viewModelName = frameContext.viewModel.form.formGroupName;
                        const formControls = this.getFormControlByColumnName(frameContext, column);
                        if (formControls && formControls.length > 0) {
                            const [domPropertyName, formControl] = formControls.find(([propertyName, formControl]) => propertyName && propertyName.length > 0);
                            // const domPropertyName = domProperty && domProperty.propertyName;
                            const bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths);
                            let index = bindingList.getIndexById(row);
                            const primary = `${row}_${column}_${message}`;
                            // TODO:虽然能纠正汇总消息显示重复的问题，但可能导致点击错误无法定位到对应控件的问题，待后续优化
                            if (index >= 0 && result.all.findIndex(p => p.id === primary) === -1) {
                                // 数据源中有多于1行时显示索引
                                const position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;
                                const title = this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);
                                const item = {
                                    id: primary,
                                    index,
                                    targetField: formControl.id,
                                    title,
                                    msg: message,
                                    namespace: ns,
                                    bindingPath,
                                    type: 'error'
                                };
                                result.all.push(item);
                            }
                        }
                    });
                }
            }
        }
        if (hasFormlessError && isException && !hasThrowError && eventBus) {
            eventBus.post('Exception', '', 'onException', error, formAppContext);
        }
        return result;
    }
    mergeMessage(formItems, frameContext, domPropertyName, message) {
        const targetItem = formItems.find(item => item.frameContext.frameId === frameContext.frameId);
        if (targetItem) {
            const isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);
            const messageType = `backend-message-${Object.keys(targetItem.message).length + 1}`;
            if (isPropertyExist) {
                targetItem.message[domPropertyName]['errors'][messageType] = { name: message };
            }
            else {
                targetItem.message[domPropertyName] = { errors: { [messageType]: { name: message } } };
            }
        }
        else {
            formItems.push({
                frameContext: frameContext,
                message: {
                    [domPropertyName]: {
                        errors: {
                            'backend-message-1': { name: message }
                        }
                    }
                }
            });
        }
    }
    buildItemTitle(viewModelName, propertyName, index) {
        const template = {
            'zh-CHS': {
                viewModelName: `$viewModel`,
                index: `第 $index 行`,
                propertyName: `- $propertyName`
            },
            'en': {
                viewModelName: `$viewModel`,
                index: `row $index`,
                propertyName: `- $propertyName`
            },
            'zh-CHT': {
                viewModelName: `$viewModel`,
                index: `第 $index 行`,
                propertyName: `- $propertyName`
            }
        };
        const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        const message = [];
        if (viewModelName) {
            message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));
        }
        if (index > 0) {
            message.push(template[currentLanguage]['index'].replace('$index', index));
        }
        if (propertyName) {
            message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));
        }
        return message.join(' ');
    }
    /**
     * 根据表名或nodeCode获取绑定路径
     * @param appContext appContext
     * @param ns ns
     * @param nodeCode 表名
     */
    getBindingPath(appContext, ns, nodeCode) {
        const frameContext = this.getFrameContext(appContext, ns);
        return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);
    }
    /**
     * 通过绑定路径和列名找到所有符合条件的视图模型(包括grid和form)
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath 绑定路径
     * @param columnName 列名
     */
    getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, columnName) {
        let frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            // 找到form中有控件的frameContext
            frameContexts = frameContexts.filter((frameContext) => {
                // 基本条件是否满足
                let isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;
                if (!isValidFrameContext) {
                    return false;
                }
                // 再通过列名过滤
                const bindingPaths = bindingPath.split('/').filter(p => p);
                const dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
                if (dataTypeInfo) {
                    const dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());
                    // 从当前实体属性中找到数据字段为列名的属性
                    const entityPropertyInfo = dataPropInfos.find((propInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));
                    if (entityPropertyInfo) {
                        const entityPropertyName = entityPropertyInfo.name;
                        const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === entityPropertyName);
                        if (ngFormControl) {
                            return true;
                        }
                        else {
                            const item = Object.keys(frameContext.viewModel.form.ngFormControls).find(key => key === entityPropertyName);
                            return item ? true : false;
                        }
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            });
            return frameContexts;
        }
        return null;
    }
    /**
     * 是否为datagrid组件
     * @param frameComponent component
     */
    isDataGridComponent(frameComponent) {
        const columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;
        return columnNames ? true : false;
    }
    /**
     * grid组件是否是只读的
     * @param frameComponent frameComponent
     * @returns
     */
    isReadonlyDataGrid(frameComponent) {
        const frameContext = frameComponent.context;
        const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        if (dataGridColumnsName) {
            const datagridColumns = frameContext.viewModel[dataGridColumnsName];
            return datagridColumns.every((group) => {
                return group.every(item => !item.editor);
            });
        }
        else {
            throw new Error(`传入的组件不是一个表格！`);
        }
    }
    /**
     * id是否为当前行
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath bindingPath
     * @param id id
     */
    isCurrentRow(appContext, ns, bindingPath, id) {
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const frameContext = this.getFrameContext(appContext, ns);
        const bindingData = frameContext.bindingData;
        const bindingList = bindingData.getValue(bindingPaths);
        return bindingList.currentItem.primaryKeyValue === id;
    }
    /**
     * 获取当前ns下的rootFrameContext
     * @param appContext appcontext
     * @param ns namespace
     */
    getFrameContext(appContext, ns) {
        const frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            const randomFrameContext = frameContexts.find(frameContext => frameContext.namespace === ns);
            if (randomFrameContext) {
                const virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();
                return virtualRootFrameContext;
            }
        }
        return null;
    }
    /**
     * 通过绑定路径和列名获取绑定到该列的formControl
     */
    getFormControlByColumnName(frameContext, columnName) {
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);
        // 通过bindingPath找到对应的实体信息
        const typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
        const propsInfo = Array.from(typeInfo.propInfoMap.values());
        const propInfo = propsInfo.find((propInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));
        if (propInfo) {
            const mappingName = propInfo.name;
            const formControls = Object.entries(frameContext.viewModel.form.ngFormControls).filter((item) => item[1].binding === mappingName || item[0] === mappingName);
            // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);
            if (formControls) {
                return formControls;
            }
        }
        return null;
    }
    resetFormMessage(appContext, ns) {
        const frameContexts = appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.namespace === ns);
        frameContexts.forEach(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError());
    }
    /**
     * 递归找到展示消息的组件上下文
     * @param frameContext frameContext
     */
    findTargetFrameContext(frameContext) {
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        const virtualRootComponent = virtualRootFrameContext.frameComponent;
        const isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;
        if (isDialogComponent) {
            // 如果消息处理服务是弹窗内的，则消息提示展示在弹窗内
            return virtualRootFrameContext;
        }
        else {
            // 当前消息服务不在弹窗内，递归向上查找，找到第一个弹窗，如果找不到则找到最上的root-component
            const parentFrameContext = virtualRootFrameContext.parent;
            if (parentFrameContext) {
                return this.findTargetFrameContext(parentFrameContext);
            }
            else {
                return virtualRootFrameContext;
            }
        }
    }
}
BackEndMessageHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BackEndMessageHandler.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: undefined, decorators: [{ type: Inject, args: [TranslateToken,] }] }
];
//# sourceMappingURL=data:application/json;base64,