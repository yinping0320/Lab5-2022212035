import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { of } from "rxjs";
import { share, switchMap } from "rxjs/operators";
import { FORM_PATH_TOKEN, FrameContext, FORM_MANIFEST_SERVICE_TOKEN } from "@farris/devkit";
import { BasePathService } from "@farris/rtf";
export class FormExpressionManifestService {
    constructor(injector, frameContext, httpClient, modulePath, formManifestService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.httpClient = httpClient;
        this.modulePath = modulePath;
        this.formManifestService = formManifestService;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        return this.formManifestService.load().pipe(switchMap((formManifest) => {
            const expressions = formManifest.expressions;
            const expressionManifest = expressions.find((expressionManifest) => expressionManifest.ns === this.frameContext.namespace);
            if (expressionManifest) {
                const expressionPath = BasePathService.convertPath(`${this.modulePath}/expressions/${expressionManifest.path}?version=${new Date().valueOf().toString()}`);
                const key = BasePathService.convertPath(`${this.modulePath}/expressions/${expressionManifest.path}`);
                const request$ = FormExpressionManifestService.mainfests.get(key);
                if (request$) {
                    return request$;
                }
                else {
                    const req$ = this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());
                    FormExpressionManifestService.mainfests.set(key, req$);
                    return req$;
                }
            }
            else {
                return of({});
            }
        }));
    }
}
FormExpressionManifestService.mainfests = new Map();
FormExpressionManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormExpressionManifestService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_MANIFEST_SERVICE_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9leHByZXNzaW9uX21hbmlmZXN0X3NlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvbWFuaWZlc3QvZm9ybV9leHByZXNzaW9uX21hbmlmZXN0X3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQXlFLDJCQUEyQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBQ3pMLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHOUMsTUFBTSxPQUFPLDZCQUE2QjtJQUV4QyxZQUNVLFFBQWtCLEVBQ2xCLFlBQTBCLEVBQzFCLFVBQXNCLEVBQ0csVUFBVSxFQUNFLG1CQUF5QztRQUo5RSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDRyxlQUFVLEdBQVYsVUFBVSxDQUFBO1FBQ0Usd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFzQjtJQUFJLENBQUM7SUFFdEYsSUFBSTtRQUNULElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQ3pDLFNBQVMsQ0FBQyxDQUFDLFlBQTBCLEVBQUUsRUFBRTtZQUN2QyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQzdDLE1BQU0sa0JBQWtCLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLGtCQUEyQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwSixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsZ0JBQWdCLGtCQUFrQixDQUFDLElBQUksWUFBWSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0osTUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLGdCQUFnQixrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNyRyxNQUFNLFFBQVEsR0FBRyw2QkFBNkIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsRSxJQUFJLFFBQVEsRUFBRTtvQkFDWixPQUFPLFFBQVEsQ0FBQztpQkFDakI7cUJBQU07b0JBQ0wsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7b0JBQ3pGLDZCQUE2QixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN2RCxPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO2lCQUFNO2dCQUNMLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7QUFqQ2MsdUNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBMkIsQ0FBQzs7WUFGL0QsVUFBVTs7OztZQU5rQixRQUFRO1lBR1gsWUFBWTtZQUo3QixVQUFVOzRDQWNkLE1BQU0sU0FBQyxlQUFlOzRDQUN0QixNQUFNLFNBQUMsMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBzaGFyZSwgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IEZPUk1fUEFUSF9UT0tFTiwgRnJhbWVDb250ZXh0LCBGb3JtRXhwcmVzc2lvbnNNYW5pZmVzdCwgRm9ybU1hbmlmZXN0LCBJRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UsIEZPUk1fTUFOSUZFU1RfU0VSVklDRV9UT0tFTiwgSUZvcm1NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgQmFzZVBhdGhTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvcnRmXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGb3JtRXhwcmVzc2lvbk1hbmlmZXN0U2VydmljZSBpbXBsZW1lbnRzIElGb3JtRXhwcmVzc2lvbk1hbmlmZXN0U2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgbWFpbmZlc3RzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8YW55Pj4oKTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcclxuICAgIEBJbmplY3QoRk9STV9QQVRIX1RPS0VOKSBwcml2YXRlIG1vZHVsZVBhdGgsXHJcbiAgICBASW5qZWN0KEZPUk1fTUFOSUZFU1RfU0VSVklDRV9UT0tFTikgcHJpdmF0ZSBmb3JtTWFuaWZlc3RTZXJ2aWNlOiBJRm9ybU1hbmlmZXN0U2VydmljZSkgeyB9XHJcblxyXG4gIHB1YmxpYyBsb2FkKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAodGhpcy5tb2R1bGVQYXRoLmVuZHNXaXRoKCdcXC8nKSkge1xyXG4gICAgICB0aGlzLm1vZHVsZVBhdGggPSB0aGlzLm1vZHVsZVBhdGguc3Vic3RyaW5nKDAsIHRoaXMubW9kdWxlUGF0aC5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JtTWFuaWZlc3RTZXJ2aWNlLmxvYWQoKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKGZvcm1NYW5pZmVzdDogRm9ybU1hbmlmZXN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSBmb3JtTWFuaWZlc3QuZXhwcmVzc2lvbnM7XHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbk1hbmlmZXN0ID0gZXhwcmVzc2lvbnMuZmluZCgoZXhwcmVzc2lvbk1hbmlmZXN0OiBGb3JtRXhwcmVzc2lvbnNNYW5pZmVzdCkgPT4gZXhwcmVzc2lvbk1hbmlmZXN0Lm5zID09PSB0aGlzLmZyYW1lQ29udGV4dC5uYW1lc3BhY2UpO1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uTWFuaWZlc3QpIHtcclxuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25QYXRoID0gQmFzZVBhdGhTZXJ2aWNlLmNvbnZlcnRQYXRoKGAke3RoaXMubW9kdWxlUGF0aH0vZXhwcmVzc2lvbnMvJHtleHByZXNzaW9uTWFuaWZlc3QucGF0aH0/dmVyc2lvbj0ke25ldyBEYXRlKCkudmFsdWVPZigpLnRvU3RyaW5nKCl9YCk7XHJcbiAgICAgICAgICBjb25zdCBrZXkgPSBCYXNlUGF0aFNlcnZpY2UuY29udmVydFBhdGgoYCR7dGhpcy5tb2R1bGVQYXRofS9leHByZXNzaW9ucy8ke2V4cHJlc3Npb25NYW5pZmVzdC5wYXRofWApO1xyXG4gICAgICAgICAgY29uc3QgcmVxdWVzdCQgPSBGb3JtRXhwcmVzc2lvbk1hbmlmZXN0U2VydmljZS5tYWluZmVzdHMuZ2V0KGtleSk7XHJcbiAgICAgICAgICBpZiAocmVxdWVzdCQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QkO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVxJCA9IHRoaXMuaHR0cENsaWVudC5nZXQoZXhwcmVzc2lvblBhdGgsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicgfSkucGlwZShzaGFyZSgpKTtcclxuICAgICAgICAgICAgRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLnNldChrZXksIHJlcSQpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxJDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=