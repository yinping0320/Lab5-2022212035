import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { FORM_PATH_TOKEN } from "@farris/devkit";
import { share } from "rxjs/operators";
import { BasePathService } from "@farris/rtf";
export class FormManifestService {
    constructor(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        const formManifestPath = BasePathService.convertPath(`${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`);
        const request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            const req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    }
}
FormManifestService.mainfests = new Map();
FormManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormManifestService.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9tYW5pZmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL21hbmlmZXN0L2Zvcm1fbWFuaWZlc3Rfc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQXNDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHOUMsTUFBTSxPQUFPLG1CQUFtQjtJQUU5QixZQUNVLFFBQWtCLEVBQ08sVUFBVSxFQUNuQyxVQUFzQjtRQUZ0QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ08sZUFBVSxHQUFWLFVBQVUsQ0FBQTtRQUNuQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzVCLENBQUM7SUFDRSxJQUFJO1FBQ1QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM1RTtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLDJDQUEyQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNySixNQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBZSxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7QUFuQmMsNkJBQVMsR0FBRyxJQUFJLEdBQUcsRUFBb0MsQ0FBQzs7WUFGeEUsVUFBVTs7OztZQU5rQixRQUFROzRDQVdoQyxNQUFNLFNBQUMsZUFBZTtZQVpsQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEZPUk1fUEFUSF9UT0tFTiwgRm9ybU1hbmlmZXN0LCBJRm9ybU1hbmlmZXN0U2VydmljZSB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5pbXBvcnQgeyBCYXNlUGF0aFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9ydGZcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcm1NYW5pZmVzdFNlcnZpY2UgaW1wbGVtZW50cyBJRm9ybU1hbmlmZXN0U2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgbWFpbmZlc3RzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8Rm9ybU1hbmlmZXN0Pj4oKTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgQEluamVjdChGT1JNX1BBVEhfVE9LRU4pIHByaXZhdGUgbW9kdWxlUGF0aCxcclxuICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudFxyXG4gICkgeyB9XHJcbiAgcHVibGljIGxvYWQoKTogT2JzZXJ2YWJsZTxGb3JtTWFuaWZlc3Q+IHtcclxuICAgIGlmICh0aGlzLm1vZHVsZVBhdGguZW5kc1dpdGgoJ1xcLycpKSB7XHJcbiAgICAgIHRoaXMubW9kdWxlUGF0aCA9IHRoaXMubW9kdWxlUGF0aC5zdWJzdHJpbmcoMCwgdGhpcy5tb2R1bGVQYXRoLmxlbmd0aCAtIDEpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZm9ybU1hbmlmZXN0UGF0aCA9IEJhc2VQYXRoU2VydmljZS5jb252ZXJ0UGF0aChgJHt0aGlzLm1vZHVsZVBhdGh9L2V4cHJlc3Npb25zL2Zvcm0ubWFuaWZlc3QuanNvbj92ZXJzaW9uPSR7bmV3IERhdGUoKS52YWx1ZU9mKCkudG9TdHJpbmcoKX1gKTtcclxuICAgIGNvbnN0IHJlcXVlc3QkID0gRm9ybU1hbmlmZXN0U2VydmljZS5tYWluZmVzdHMuZ2V0KHRoaXMubW9kdWxlUGF0aCk7XHJcbiAgICBpZiAocmVxdWVzdCQpIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgcmVxJCA9IHRoaXMuaHR0cENsaWVudC5nZXQ8Rm9ybU1hbmlmZXN0Pihmb3JtTWFuaWZlc3RQYXRoLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nIH0pLnBpcGUoc2hhcmUoKSk7XHJcbiAgICAgIEZvcm1NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLnNldCh0aGlzLm1vZHVsZVBhdGgsIHJlcSQpO1xyXG4gICAgICByZXR1cm4gcmVxJDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19