import { Injectable } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { EntityTraversingService } from './entity-traversing.service';
import { EntityManipulationService } from './entity-manipulation.service';
import { EntityAggregationService } from './entity-aggregation.service';
/**
 * 实体服务
 * @scope FrameComponent
 */
class EntityService {
    constructor(frameContext) {
        this.frameContext = frameContext;
        const injector = this.frameContext.injector;
        this.traversingService = injector.get(EntityTraversingService);
        this.manipulationService = injector.get(EntityManipulationService);
        this.aggregationService = injector.get(EntityAggregationService);
    }
    /**
     * 获取path对应的属性值
     */
    getPropValue(path) {
        return this.traversingService.getPropValue(path);
    }
    /**
     * 设置path对应的属性值
     */
    setPropValue(path, value) {
        return this.manipulationService.setPropValue(path, value);
    }
    /**
     * 设置path对应的Entity数据
     */
    getEntityData(path) {
        return this.traversingService.getEntityData(path);
    }
    /**
     * 设置path对应的EntityList数据
     */
    getEntityListData(path) {
        return this.traversingService.getEntityListData(path);
    }
    /**
     * 获取path对应EntityList记录数
     */
    count(path) {
        return this.aggregationService.count(path);
    }
    /**
     * 获取path对应属性的合计值
     */
    sum(path) {
        return this.aggregationService.sum(path);
    }
    /**
     * 获取path对应属性的平均值
     */
    avg(path) {
        return this.aggregationService.avg(path);
    }
    /**
     * 获取path对应属性的最大值
     */
    max(path) {
        return this.aggregationService.max(path);
    }
    /**
     * 获取path对应属性的最小值
     */
    min(path) {
        return this.aggregationService.min(path);
    }
}
EntityService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityService.ctorParameters = () => [
    { type: FrameContext }
];
export { EntityService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZW50aXR5LXNlcnZpY2VzL2VudGl0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBRXZFOzs7R0FHRztBQUNILE1BQ00sYUFBYTtJQVFqQixZQUFvQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUM1QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUssUUFBUSxDQUFDLEdBQUcsQ0FBMEIsdUJBQXVCLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBNEIseUJBQXlCLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsa0JBQWtCLEdBQUksUUFBUSxDQUFDLEdBQUcsQ0FBMkIsd0JBQXdCLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQ7O09BRUc7SUFDSSxZQUFZLENBQUMsSUFBYztRQUNoQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBWSxDQUFDLElBQWMsRUFBRSxLQUFVO1FBQzVDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksYUFBYSxDQUFDLElBQWM7UUFDakMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRztJQUNJLGlCQUFpQixDQUFDLElBQWM7UUFDckMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLElBQWM7UUFDekIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNJLEdBQUcsQ0FBQyxJQUFjO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxHQUFHLENBQUMsSUFBYztRQUN2QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksR0FBRyxDQUFDLElBQWM7UUFDdkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNJLEdBQUcsQ0FBQyxJQUFjO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7WUE3RUYsVUFBVTs7OztZQVRGLFlBQVk7O0FBeUZyQixPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRW50aXR5VHJhdmVyc2luZ1NlcnZpY2UgfSBmcm9tICcuL2VudGl0eS10cmF2ZXJzaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFbnRpdHlNYW5pcHVsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9lbnRpdHktbWFuaXB1bGF0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFbnRpdHlBZ2dyZWdhdGlvblNlcnZpY2V9IGZyb20gJy4vZW50aXR5LWFnZ3JlZ2F0aW9uLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIOWunuS9k+acjeWKoVxyXG4gKiBAc2NvcGUgRnJhbWVDb21wb25lbnRcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRW50aXR5U2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgdHJhdmVyc2luZ1NlcnZpY2U6IEVudGl0eVRyYXZlcnNpbmdTZXJ2aWNlO1xyXG5cclxuICBwcml2YXRlIG1hbmlwdWxhdGlvblNlcnZpY2U6IEVudGl0eU1hbmlwdWxhdGlvblNlcnZpY2U7XHJcblxyXG4gIHByaXZhdGUgYWdncmVnYXRpb25TZXJ2aWNlOiBFbnRpdHlBZ2dyZWdhdGlvblNlcnZpY2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHtcclxuICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3I7XHJcbiAgICB0aGlzLnRyYXZlcnNpbmdTZXJ2aWNlICAgPSBpbmplY3Rvci5nZXQ8RW50aXR5VHJhdmVyc2luZ1NlcnZpY2U+KEVudGl0eVRyYXZlcnNpbmdTZXJ2aWNlKTtcclxuICAgIHRoaXMubWFuaXB1bGF0aW9uU2VydmljZSA9IGluamVjdG9yLmdldDxFbnRpdHlNYW5pcHVsYXRpb25TZXJ2aWNlPihFbnRpdHlNYW5pcHVsYXRpb25TZXJ2aWNlKTtcclxuICAgIHRoaXMuYWdncmVnYXRpb25TZXJ2aWNlICA9IGluamVjdG9yLmdldDxFbnRpdHlBZ2dyZWdhdGlvblNlcnZpY2U+KEVudGl0eUFnZ3JlZ2F0aW9uU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZwYXRo5a+55bqU55qE5bGe5oCn5YC8XHJcbiAgICovXHJcbiAgcHVibGljIGdldFByb3BWYWx1ZShwYXRoOiBzdHJpbmdbXSk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy50cmF2ZXJzaW5nU2VydmljZS5nZXRQcm9wVmFsdWUocGF0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva5wYXRo5a+55bqU55qE5bGe5oCn5YC8XHJcbiAgICovXHJcbiAgcHVibGljIHNldFByb3BWYWx1ZShwYXRoOiBzdHJpbmdbXSwgdmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgcmV0dXJuIHRoaXMubWFuaXB1bGF0aW9uU2VydmljZS5zZXRQcm9wVmFsdWUocGF0aCwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572ucGF0aOWvueW6lOeahEVudGl0eeaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFbnRpdHlEYXRhKHBhdGg6IHN0cmluZ1tdKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLnRyYXZlcnNpbmdTZXJ2aWNlLmdldEVudGl0eURhdGEocGF0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva5wYXRo5a+55bqU55qERW50aXR5TGlzdOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFbnRpdHlMaXN0RGF0YShwYXRoOiBzdHJpbmdbXSk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy50cmF2ZXJzaW5nU2VydmljZS5nZXRFbnRpdHlMaXN0RGF0YShwYXRoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlnBhdGjlr7nlupRFbnRpdHlMaXN06K6w5b2V5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGNvdW50KHBhdGg6IHN0cmluZ1tdKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0aW9uU2VydmljZS5jb3VudChwYXRoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlnBhdGjlr7nlupTlsZ7mgKfnmoTlkIjorqHlgLxcclxuICAgKi9cclxuICBwdWJsaWMgc3VtKHBhdGg6IHN0cmluZ1tdKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0aW9uU2VydmljZS5zdW0ocGF0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZwYXRo5a+55bqU5bGe5oCn55qE5bmz5Z2H5YC8XHJcbiAgICovXHJcbiAgcHVibGljIGF2ZyhwYXRoOiBzdHJpbmdbXSk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGlvblNlcnZpY2UuYXZnKHBhdGgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WcGF0aOWvueW6lOWxnuaAp+eahOacgOWkp+WAvFxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYXgocGF0aDogc3RyaW5nW10pOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuYWdncmVnYXRpb25TZXJ2aWNlLm1heChwYXRoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlnBhdGjlr7nlupTlsZ7mgKfnmoTmnIDlsI/lgLxcclxuICAgKi9cclxuICBwdWJsaWMgbWluKHBhdGg6IHN0cmluZ1tdKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0aW9uU2VydmljZS5taW4ocGF0aCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBFbnRpdHlTZXJ2aWNlIH07XHJcbiJdfQ==