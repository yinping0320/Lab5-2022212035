import { Injectable } from '@angular/core';
import { FrameContext, BindingList } from '@farris/devkit';
import { EntityTraversingService } from './entity-traversing.service';
/**
 * 实体聚合服务
 */
class EntityAggregationService {
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.traversingService = this.frameContext.injector.get(EntityTraversingService);
    }
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 获取path对应列表记录的条数
     */
    count(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        return entityListData.length;
    }
    /**
     * 获取path对应字段的和
     */
    sum(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        const total = entityListData.reduce((accTotal, entityData) => {
            let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            propValue = isNaN(propValue) ? 0 : propValue;
            accTotal += propValue;
            return accTotal;
        }, 0);
        return total;
    }
    /**
     * 获取path对应字段的平均值
     */
    avg(path) {
        const count = this.count(path);
        const total = this.sum(path);
        return count !== 0 ? total / count : 0;
    }
    /**
     * 获取path对应字段的最大值
     */
    max(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        const max = entityListData.reduce((accMax, entityData) => {
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                accMax = propValue;
            }
            return accMax;
        }, null);
        return max ? max : 0;
    }
    /**
     * 获取path对应字段的最小值
     */
    min(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        const min = entityListData.reduce((accMin, entityData) => {
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                accMin = propValue;
            }
            return accMin;
        }, null);
        return min ? min : 0;
    }
    /**
     * 获取属性值
     */
    getPropValue(entityData, path) {
        let currentData = entityData;
        path.forEach((pathItem) => {
            // 提前退出的都重置为null，主要针对关联对象未赋值场景
            if (!currentData) {
                currentData = null;
                return;
            }
            currentData = currentData[pathItem];
        });
        return currentData;
    }
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @return 形如 {parentListPath: [], propertyPath: []}
     */
    splitPath(path) {
        const listPath = path.concat([]);
        const propPath = [];
        let currentNode = this.bindingData.getValue(listPath);
        while (currentNode instanceof BindingList !== true) {
            const propPathItem = listPath.pop();
            if (!propPathItem) {
                return;
            }
            propPath.unshift(propPathItem);
            currentNode = this.bindingData.getValue(listPath);
        }
        return {
            listPath: listPath,
            propPath: propPath
        };
    }
}
EntityAggregationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityAggregationService.ctorParameters = () => [
    { type: FrameContext }
];
export { EntityAggregationService };
//# sourceMappingURL=data:application/json;base64,