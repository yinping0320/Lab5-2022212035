import { Injectable } from '@angular/core';
import { QuerystringService } from './querystring';
import { RuntimeFrameworkService } from './rtf-service';
import { of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
// tslint:disable: no-string-literal
/**
 * 参数服务
 * @scope FormModule
 */
export class ParamService {
    constructor(querystringService, runtimeFrameworkService) {
        this.querystringService = querystringService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    /**
     * 适配获取所有参数
     */
    get params() {
        // 先从hash中获取参数
        const hash = window.location.hash;
        const params = this.querystringService.parse(hash);
        /*
        const appMode = params.appMode;
        // appMode没有定义，认为是老表单,appMode = mdi 或 spa
        if (typeof appMode === 'undefined' || appMode === null) {
            return of(params);
        }
        // appMode存在，但为空，也认为是老表单
        if (appMode.length < 1) {
            return of(params);
        }
        // 新表单，使用iframe模式
        if (appMode.toLowerCase() === 'mdi') {
            return of(params);
        }
        */
        // 获取tabId，最新版本一定有tabId，如果取不到tabId则认为是老表单，直接从url获取参数
        const tabId = params.tabId;
        if (!tabId) {
            // throw new Error('TabId can`t be empty!');
            return of(params);
        }
        const subject = new Subject();
        // 管道参数e可能为object、Map类型
        this.runtimeFrameworkService.addEventListener(tabId, (e) => {
            let map = {};
            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                map = this.parseMapParams(e);
            }
            let args = {};
            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                args = new Map(e);
            }
            else {
                args = Object.assign({}, e);
            }
            setTimeout(() => {
                subject.next(Object.assign({}, args, map, params));
            }, 0);
        }, params);
        return subject.asObservable();
    }
    /**
     * 解析map类型的参数
     * @param params params
     */
    parseMapParams(params) {
        const map = {};
        map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));
        params.forEach((value, key) => {
            if (key !== 'WEB_FORM_ROUTE_PARAMS') {
                map[key] = value;
            }
        });
        return map;
    }
    /**
     * 获取param参数
     * @param param key
     */
    get(param) {
        return this.params.pipe(switchMap(options => {
            if (!!options && options.hasOwnProperty(param)) {
                return of(options.param);
            }
            else {
                return of(undefined);
            }
        }));
    }
    /**
     * 参数转为对象
     */
    parse() {
        return this.params.pipe(switchMap(options => {
            return of(options);
        }));
    }
}
ParamService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParamService.ctorParameters = () => [
    { type: QuerystringService },
    { type: RuntimeFrameworkService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9wYXJhbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUErQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLG9DQUFvQztBQUNwQzs7O0dBR0c7QUFFSCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUNVLGtCQUFzQyxFQUN0Qyx1QkFBZ0Q7UUFEaEQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0Qyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQ3RELENBQUM7SUFDTDs7T0FFRztJQUNILElBQVcsTUFBTTtRQUNmLGNBQWM7UUFDZCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNsQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25EOzs7Ozs7Ozs7Ozs7OztVQWNFO1FBQ0Ysb0RBQW9EO1FBQ3BELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLDRDQUE0QztZQUM1QyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQjtRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDbkMsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUM5RCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtnQkFDckcsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7WUFDRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtnQkFDckcsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25CO2lCQUFNO2dCQUNMLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QjtZQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ1gsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUNEOzs7T0FHRztJQUNLLGNBQWMsQ0FBQyxNQUFxQjtRQUMxQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsdUJBQXVCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN2RixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzVCLElBQUksR0FBRyxLQUFLLHVCQUF1QixFQUFFO2dCQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDRDs7O09BR0c7SUFDSSxHQUFHLENBQUMsS0FBYTtRQUN0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN0QjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBQ0Q7O09BRUc7SUFDSSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUEzRkYsVUFBVTs7OztZQVRGLGtCQUFrQjtZQUNsQix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5c3RyaW5nU2VydmljZSB9IGZyb20gJy4vcXVlcnlzdHJpbmcnO1xyXG5pbXBvcnQgeyBSdW50aW1lRnJhbWV3b3JrU2VydmljZSB9IGZyb20gJy4vcnRmLXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbi8qKlxyXG4gKiDlj4LmlbDmnI3liqFcclxuICogQHNjb3BlIEZvcm1Nb2R1bGVcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBhcmFtU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHF1ZXJ5c3RyaW5nU2VydmljZTogUXVlcnlzdHJpbmdTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBydW50aW1lRnJhbWV3b3JrU2VydmljZTogUnVudGltZUZyYW1ld29ya1NlcnZpY2VcclxuICApIHsgfVxyXG4gIC8qKlxyXG4gICAqIOmAgumFjeiOt+WPluaJgOacieWPguaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgcGFyYW1zKCk6IE9ic2VydmFibGU8eyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9PiB7XHJcbiAgICAvLyDlhYjku45oYXNo5Lit6I635Y+W5Y+C5pWwXHJcbiAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnF1ZXJ5c3RyaW5nU2VydmljZS5wYXJzZShoYXNoKTtcclxuICAgIC8qXHJcbiAgICBjb25zdCBhcHBNb2RlID0gcGFyYW1zLmFwcE1vZGU7XHJcbiAgICAvLyBhcHBNb2Rl5rKh5pyJ5a6a5LmJ77yM6K6k5Li65piv6ICB6KGo5Y2VLGFwcE1vZGUgPSBtZGkg5oiWIHNwYVxyXG4gICAgaWYgKHR5cGVvZiBhcHBNb2RlID09PSAndW5kZWZpbmVkJyB8fCBhcHBNb2RlID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICAvLyBhcHBNb2Rl5a2Y5Zyo77yM5L2G5Li656m677yM5Lmf6K6k5Li65piv6ICB6KGo5Y2VXHJcbiAgICBpZiAoYXBwTW9kZS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICAvLyDmlrDooajljZXvvIzkvb/nlKhpZnJhbWXmqKHlvI9cclxuICAgIGlmIChhcHBNb2RlLnRvTG93ZXJDYXNlKCkgPT09ICdtZGknKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICAqL1xyXG4gICAgLy8g6I635Y+WdGFiSWTvvIzmnIDmlrDniYjmnKzkuIDlrprmnIl0YWJJZO+8jOWmguaenOWPluS4jeWIsHRhYklk5YiZ6K6k5Li65piv6ICB6KGo5Y2V77yM55u05o6l5LuOdXJs6I635Y+W5Y+C5pWwXHJcbiAgICBjb25zdCB0YWJJZCA9IHBhcmFtcy50YWJJZDtcclxuICAgIGlmICghdGFiSWQpIHtcclxuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCdUYWJJZCBjYW5gdCBiZSBlbXB0eSEnKTtcclxuICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgLy8g566h6YGT5Y+C5pWwZeWPr+iDveS4um9iamVjdOOAgU1hcOexu+Wei1xyXG4gICAgdGhpcy5ydW50aW1lRnJhbWV3b3JrU2VydmljZS5hZGRFdmVudExpc3RlbmVyKHRhYklkLCAoZTogYW55KSA9PiB7XHJcbiAgICAgIGxldCBtYXAgPSB7fTtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNYXAgfHwgKGUgJiYgdHlwZW9mIChlWydnZXQnXSkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVbJ2VudHJpZXMnXSA9PT0gJ2Z1bmN0aW9uJykpIHtcclxuICAgICAgICBtYXAgPSB0aGlzLnBhcnNlTWFwUGFyYW1zKGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBhcmdzID0ge307XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgTWFwIHx8IChlICYmIHR5cGVvZiAoZVsnZ2V0J10pID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlWydlbnRyaWVzJ10gPT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICAgICAgYXJncyA9IG5ldyBNYXAoZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHN1YmplY3QubmV4dChPYmplY3QuYXNzaWduKHt9LCBhcmdzLCBtYXAsIHBhcmFtcykpO1xyXG4gICAgICB9LCAwKTtcclxuICAgIH0sIHBhcmFtcyk7XHJcbiAgICByZXR1cm4gc3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6Kej5p6QbWFw57G75Z6L55qE5Y+C5pWwXHJcbiAgICogQHBhcmFtIHBhcmFtcyBwYXJhbXNcclxuICAgKi9cclxuICBwcml2YXRlIHBhcnNlTWFwUGFyYW1zKHBhcmFtczogTWFwPGFueSwgYW55Pikge1xyXG4gICAgY29uc3QgbWFwID0ge307XHJcbiAgICBtYXBbJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUyddID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5nZXQoJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUycpKTtcclxuICAgIHBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgIGlmIChrZXkgIT09ICdXRUJfRk9STV9ST1VURV9QQVJBTVMnKSB7XHJcbiAgICAgICAgbWFwW2tleV0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWFwO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5ZwYXJhbeWPguaVsFxyXG4gICAqIEBwYXJhbSBwYXJhbSBrZXlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0KHBhcmFtOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcclxuICAgICAgICBpZiAoISFvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XHJcbiAgICAgICAgICByZXR1cm4gb2Yob3B0aW9ucy5wYXJhbSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWPguaVsOi9rOS4uuWvueixoVxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJzZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcclxuICAgICAgICByZXR1cm4gb2Yob3B0aW9ucyk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=