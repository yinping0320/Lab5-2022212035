(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-loading'), require('@farris/ui-messager'), require('@farris/ui-notify'), require('@farris/ui-wizard'), require('@angular/router'), require('@farris/extend-page-modal'), require('lodash-es'), require('rxjs/observable/zip'), require('rxjs/observable/empty'), require('@farris/ui-verify-detail'), require('mousetrap'), require('rxjs/observable/of'), require('@farris/ui-datagrid'), require('@gsp-wf/rtdevkit'), require('@gsp-wf/ui-flowchart'), require('@gsp-svc/cloudprint'), require('@gsp-svc/file-viewer'), require('@farris/ui-modal'), require('@farris/ui-sidebar'), require('@gsp-sys/rtf-common'), require('@farris/component-querycondition'), require('date-fns'), require('@farris/bef'), require('@farris/ui-common/date'), require('@gsp-svc/formdoc-upload'), require('@angular/common/http'), require('moment'), require('@farris/ui-tooltip'), require('@farris/rtf'), require('@farris/ui-feature-editor'), require('bignumber.js'), require('rxjs'), require('rxjs/operators'), require('@farris/ui-batch-edit-dialog'), require('@gsp-cmp/querysolution'), require('@farris/ui-list-filter'), require('@gsp-wf/wf-task-handler'), require('@angular/core'), require('@farris/devkit')) :
    typeof define === 'function' && define.amd ? define('@farris/command-services', ['exports', '@farris/ui-loading', '@farris/ui-messager', '@farris/ui-notify', '@farris/ui-wizard', '@angular/router', '@farris/extend-page-modal', 'lodash-es', 'rxjs/observable/zip', 'rxjs/observable/empty', '@farris/ui-verify-detail', 'mousetrap', 'rxjs/observable/of', '@farris/ui-datagrid', '@gsp-wf/rtdevkit', '@gsp-wf/ui-flowchart', '@gsp-svc/cloudprint', '@gsp-svc/file-viewer', '@farris/ui-modal', '@farris/ui-sidebar', '@gsp-sys/rtf-common', '@farris/component-querycondition', 'date-fns', '@farris/bef', '@farris/ui-common/date', '@gsp-svc/formdoc-upload', '@angular/common/http', 'moment', '@farris/ui-tooltip', '@farris/rtf', '@farris/ui-feature-editor', 'bignumber.js', 'rxjs', 'rxjs/operators', '@farris/ui-batch-edit-dialog', '@gsp-cmp/querysolution', '@farris/ui-list-filter', '@gsp-wf/wf-task-handler', '@angular/core', '@farris/devkit'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['command-services'] = {}),global.uiLoading,global.uiMessager,global.uiNotify,global.uiWizard,global.ng.router,global.extendPageModal,global.lodash,global.rxjs['observable/zip'],global.rxjs['observable/empty'],global.uiVerifyDetail,global.Mousetrap,global.rxjs['observable/of'],global.uiDatagrid,global.rtdevkit,global.uiFlowchart,global.cloudprint,global.fileViewer,global.uiModal,global.uiSidebar,global.rtfCommon,global.componentQuerycondition,global.dateFns,global.bef,global.date,global.formdocUpload,global.ng.common.http,global.moment,global.uiTooltip,global.rtf,global.uiFeatureEditor,global.bignumber_js,global.rxjs,global.rxjs.operators,global.uiBatchEditDialog,global.querysolution,global.uiListFilter,global.wfTaskHandler,global.ng.core,global.devkit));
}(this, (function (exports,uiLoading,uiMessager,uiNotify,uiWizard,router,extendPageModal,lodash,zip,empty,uiVerifyDetail,Mousetrap,of,uiDatagrid,rtdevkit,uiFlowchart,cloudprint,fileViewer,uiModal,uiSidebar,rtfCommon,componentQuerycondition,dateFns,bef,date,formdocUpload,http,moment,uiTooltip,rtf,uiFeatureEditor,bignumber_js,rxjs,operators,uiBatchEditDialog,querysolution,uiListFilter,wfTaskHandler,core,devkit) { 'use strict';

    lodash = lodash && lodash.hasOwnProperty('default') ? lodash['default'] : lodash;
    var Mousetrap__default = 'default' in Mousetrap ? Mousetrap['default'] : Mousetrap;
    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    /**
     * 发送消息给FormLoadingService，
     * 使其接收后调用hide()函数
     * 此服务仅用于处理Http异常
     */
    var HideEventService = /** @class */ (function () {
        function HideEventService() {
            this.hideEvent = new rxjs.Subject();
        }
        HideEventService.decorators = [
            { type: core.Injectable }
        ];
        return HideEventService;
    }());

    // tslint:disable: no-string-literal
    /**
     * 加载提示Helper
     * 1、包装@farris/ui的LoadingService；
     * 2、提供针对表单的快捷方法；
     */
    var FormLoadingService = /** @class */ (function () {
        /**
         * 强制显示，不能隐藏
         */
        /**
         * 构造函数
         * 注入@farris/ui的LoadingService
         */
        function FormLoadingService(loadingService, hideEventService, applicationContext) {
            var _this = this;
            this.loadingService = loadingService;
            this.hideEventService = hideEventService;
            this.applicationContext = applicationContext;
            /**
             * 延迟loading定时器
             */
            this.loadingTimerIds = [];
            if (hideEventService) {
                this.hideEventService.hideEvent.subscribe(function (result) {
                    _this.hide();
                });
            }
        }
        FormLoadingService.prototype.setSuspend = function (flag) {
            FormLoadingService.isSuspend = flag;
        };
        /**
         * 显示加载中
         */
        FormLoadingService.prototype.show = function (configOrMessage) {
            if (FormLoadingService.isSuspend === true) {
                return;
            }
            if (this.loadingCmp) {
                this.loadingCmp.close();
                this.loadingCmp = null;
            }
            this.registerService();
            var loadingConfig = this.buildLoadingConfig(configOrMessage);
            this.loadingCmp = this.loadingService.show(loadingConfig);
            return this.loadingCmp;
        };
        /**
         * 延迟显示Loading
         */
        FormLoadingService.prototype.showLoadingWithDelay = function (delayTime, configOrMessage) {
            var _this = this;
            // this.show(configOrMessage);
            var timerId = setTimeout(function () {
                _this.show(configOrMessage);
            }, delayTime);
            this.loadingTimerIds.push(timerId);
            this.registerService();
            return timerId;
        };
        /**
         * 隐藏延迟的Loading
         */
        FormLoadingService.prototype.hideDelayLoading = function (timerIdToClear) {
            this.clearLoadingTimer(timerIdToClear);
            this.hide();
        };
        /**
         * 构造LoadingConfig
         * @param configOrMessage 配置对象或消息字符串
         */
        FormLoadingService.prototype.buildLoadingConfig = function (configOrMessage) {
            var loadingConfig;
            if (!!configOrMessage) {
                if (typeof configOrMessage === 'object') {
                    loadingConfig = configOrMessage;
                }
                else {
                    loadingConfig = { 'message': configOrMessage };
                }
            }
            else {
                loadingConfig = {};
            }
            if (!loadingConfig.hasOwnProperty('delay')) {
                loadingConfig.delay = 0;
            }
            return loadingConfig;
        };
        /**
         * 关闭所有loading
         */
        FormLoadingService.prototype.clearAll = function () {
            var _this = this;
            FormLoadingService.isSuspend = false;
            window.setTimeout(function () {
                _this.loadingService.clearAll();
            }, 350);
            this.loadingCmp = null;
            this.clearAllLoadingTimers();
            this.destroy();
        };
        /**
         * 清空Loading定时器
         */
        FormLoadingService.prototype.clearLoadingTimer = function (timerIdToClear) {
            clearTimeout(timerIdToClear);
            this.loadingTimerIds = this.loadingTimerIds.filter(function (timerId) {
                return timerId !== timerIdToClear;
            });
        };
        /**
         * 清空所有Loading定时器
         */
        FormLoadingService.prototype.clearAllLoadingTimers = function () {
            var _this = this;
            this.loadingTimerIds.forEach(function (timerId) {
                _this.clearLoadingTimer(timerId);
            });
        };
        /**
         * 隐藏加载中
         */
        FormLoadingService.prototype.hide = function () {
            if (!this.loadingCmp) {
                this.destroy();
                return;
            }
            if (FormLoadingService.isSuspend === true) {
                return;
            }
            this.loadingCmp.close();
            this.loadingCmp = null;
            this.destroy();
        };
        /**
         * 销毁loadingService
         */
        FormLoadingService.prototype.destroy = function () {
            if (FormLoadingService.isSuspend === true) {
                return;
            }
            var services = window['DEVKIT_LOADING_SERVICE'] || [];
            if (services && Array.isArray(services) && services.length > 0) {
                services.forEach(function (service) {
                    if (service) {
                        service.clearAllLoadingTimers();
                        if (service.loadingCmp) {
                            service.loadingCmp.close();
                            service.loadingCmp = null;
                        }
                    }
                });
            }
            window['DEVKIT_LOADING_SERVICE'] = [];
        };
        /**
         * 注册所有的LoadingService实例
         */
        FormLoadingService.prototype.registerService = function () {
            var services = window['DEVKIT_LOADING_SERVICE'] || [];
            services.push(this);
            window['DEVKIT_LOADING_SERVICE'] = services;
        };
        FormLoadingService.isSuspend = false;
        FormLoadingService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormLoadingService.ctorParameters = function () {
            return [
                { type: uiLoading.LoadingService },
                { type: HideEventService, decorators: [{ type: core.Optional }] },
                { type: devkit.AppContext, decorators: [{ type: core.Optional }] }
            ];
        };
        return FormLoadingService;
    }());

    /**
     * 英文语言消息
     */
    var LanguageMessageForEn = /** @class */ (function () {
        function LanguageMessageForEn() {
            this.yes = 'Yes';
            this.no = 'No';
            this.unsaveNotifyTitle = 'Exist unsave record. Do save operation or not?';
            this.clientNotifyTitle = 'System Prompt In The Frontend';
            this.serverNotifyTitle = 'System Prompt In The Backend';
            this.cancelApproveSuccess = 'Cancel Approve Success';
            this.cancelApproveFailed = 'Cancel Approve Failed';
            this.unallowEmptyProcessInstanceName = 'Process Instance Name Can Not Be Empty';
            this.unallowEmptyBizBillId = 'Biz Bill Id Can Not Be Empty';
            this.unallowEmptyChildBizBillId = 'Child Biz Bill Id Can Not Be Empty';
            this.bizDefKeyRequired = 'Biz Def Key can\'t be empty.';
            this.procInsIdRequired = 'Process instance Id can\'t be empty.';
            this.addChildFailed = 'Add Child Failed';
            this.addSiblingFailed = 'Add Sibling Failed';
            this.addSubChildFailed = 'Add Sub Child Failed';
            this.addSubSiblingFailed = 'Add Sub Sibling Failed';
            this.deleteFailed = 'Delete Failed';
            this.multiSaveFailed = 'MultiSave Failed';
            this.appendFailed = 'Append Failed';
            this.queryFailed = 'Query Failed';
            this.cancelFailed = 'Cancel Failed';
            this.updateFailed = 'Update Failed';
            this.addFailed = 'Add Failed';
            this.loadFailed = 'Load Failed';
            this.saveSuccess = 'Successfully saved!';
            this.saveFailed = 'Save failed!';
            this.deleteSuccess = 'Successfully deleted!';
            this.deleteFaild = 'Failed to delete!';
            this.confirmDeletion = 'Confirm deletion?';
            this.submitSuccess = 'Submit successfully!';
            this.submitFaild = 'Submit failed!';
            this.notifyTitle = 'System prompt';
            this.httpError = 'HTTP request error! Please check the server error!';
            this.gridDataNotSave = 'The current page data is not saved. Turning the page will result in data loss. Do you want to continue turning the page?';
            this.exitWithoutSave = 'There is unsaved data. Do you want to continue closing?';
            this.notSupportMenuType = 'Not supported menu type!';
            this.cancelWithoutSave = 'Exist unsaved change,Confirm to cancel?';
            this.plsSelectDeleteData = 'Please select the data to delete!';
            this.errorHierarchyKey = 'Incorrect ierarchy key';
            this.plsSelectParentNode = 'Please select parent node!';
            this.deleteChildFirst = 'Please delete the child nodes first!';
            this.incorrectHierarchyConfig = 'Hierarchy config is incorrect!';
            this.operationFailed = 'The operation failed.';
            this.plsSelectEditData = 'Please select the data you want to edit!';
            this.plsSelectViewData = 'Please select the data you want to view!';
            this.plsUploadFirst = 'Please upload attachment first!';
            this.defaultDialogTitle = 'Dialog';
            this.changeToFirst = 'The first data.';
            this.changeToLast = 'The last data.';
            this.noProcessInstanceId = 'Please provide the process instance id.';
            this.noDataExist = 'Data does not exist to access the edit state!';
            this.noAttachment = 'There are no attachments to preview.';
            this.confirm = 'Confirm';
            this.cancel = 'Cancel';
            this.plsSelectCopyData = 'Please select the data you want to copy!';
            this.copyFieldsRequired = 'The copy fields can`t be empty!';
            this.pathIsRequired = 'The request url can`t be empty!';
            this.propsIsEmpty = 'The material has no props!';
            this.historyAttachment = 'The history attachment can`t be delete!';
            this.plsSelectDownloadAtt = 'Please select the attachment you want to download!';
            this.noDownloadAtt = 'There are no attachments to download!';
            this.plsCheckBatchEditRows = 'Please check the rows you want to edit!';
            this.plsSelectDetailFormData = 'Please select a detail form data first!';
            this.dataAndStateChanged = 'Are you sure you want to load the new data and switch to $1 state?';
            this.dataChanged = 'Are you sure you want to load the data and discards the current modification?';
            this.stateChanged = 'Are you sure you want to switch $1 state?';
            this.defaultStateName = 'init';
            this.copy = 'Copy detail message';
            this.copySuccess = 'Copy success';
            this.copyFailed = 'Copy failed';
            this.roger = 'Roger';
            this.appOrFuncIdRequired = 'No menu or application parameters are configured, please configure them in the designer.';
            this.tableCanNotEmpty = 'can not empty.';
            this.plsSelectRemoveAtt = 'Please select the attachment to delete!';
            this.plsSelectUpdateRow = 'Please select the row where you want to update the attachment!';
        }
        return LanguageMessageForEn;
    }());

    /**
     * 英文语言消息
     */
    var LanguageMessageForZh = /** @class */ (function () {
        function LanguageMessageForZh() {
            this.yes = '是';
            this.no = '否';
            this.unsaveNotifyTitle = '存在未保存记录。是否要保存？';
            this.clientNotifyTitle = '前端异常提示';
            this.serverNotifyTitle = '服务器端异常提示';
            this.cancelApproveSuccess = '取消提交成功！';
            this.cancelApproveFailed = '取消提交失败！';
            this.unallowEmptyProcessInstanceName = '流程实例名称不能为空';
            this.unallowEmptyBizBillId = '请选择一条数据';
            this.bizDefKeyRequired = '入口单据不能为空';
            this.unallowEmptyChildBizBillId = '从表业务单据编号不能为空！';
            this.procInsIdRequired = '流程实例Id不能为空！';
            this.addChildFailed = '新增子级失败';
            this.addSiblingFailed = '新增同级失败';
            this.addSubChildFailed = '新增从表子级失败';
            this.addSubSiblingFailed = '新增从表同级失败';
            this.deleteFailed = '删除失败';
            this.multiSaveFailed = '批量保存失败';
            this.appendFailed = '追加失败';
            this.queryFailed = '查询失败';
            this.cancelFailed = '取消失败';
            this.updateFailed = '更新失败';
            this.addFailed = '新增失败';
            this.loadFailed = '加载失败';
            this.saveSuccess = '保存成功！';
            this.saveFailed = '保存失败！';
            this.deleteSuccess = '删除成功！';
            this.deleteFaild = '删除失败！';
            this.confirmDeletion = '确认删除？';
            this.submitSuccess = '提交审批成功！';
            this.submitFaild = '提交审批失败！';
            this.notifyTitle = '系统提示';
            this.httpError = 'HTTP请求错误！请检查Server端错误！';
            this.gridDataNotSave = '当前页数据未保存，翻页将导致数据丢失，是否继续翻页？';
            this.exitWithoutSave = '存在未保存的数据，是否继续关闭？';
            this.notSupportMenuType = '关闭的既不是菜单也不是应用。';
            this.cancelWithoutSave = '存在未保存的变更，确认取消？';
            this.plsSelectDeleteData = '请选择要删除的数据！';
            this.errorHierarchyKey = '错误的分级码';
            this.plsSelectParentNode = '请选择父节点';
            this.deleteChildFirst = '请先删除子节点';
            this.incorrectHierarchyConfig = '分级码配置信息错误';
            this.operationFailed = '操作执行失败。';
            this.plsSelectEditData = '请选择要编辑的数据！';
            this.plsSelectViewData = '请选择要查看的数据！';
            this.plsUploadFirst = '请先上传附件！';
            this.defaultDialogTitle = '弹窗';
            this.changeToFirst = '已到达第一条数据';
            this.changeToLast = '已到达最后一条数据';
            this.noProcessInstanceId = '请指定流程实例标识。';
            this.noDataExist = '要编辑的数据不存在，无法进入编辑状态！';
            this.noAttachment = '没有可以预览的附件。';
            this.confirm = '确定';
            this.cancel = '取消';
            this.plsSelectCopyData = '请选择要复制的数据！';
            this.copyFieldsRequired = '要复制的字段不能为空！';
            this.pathIsRequired = '请求路径不能为空！';
            this.propsIsEmpty = '没有可以编辑的物料特征！';
            this.historyAttachment = '历史版本附件禁止删除！';
            this.plsSelectDownloadAtt = '请选择要下载的附件!';
            this.noDownloadAtt = '找不到要下载的附件!';
            this.plsCheckBatchEditRows = '请勾选要批量编辑的行！';
            this.plsSelectDetailFormData = '请先选择一条从表数据！';
            this.dataAndStateChanged = '确定要加载数据并切换到$1状态？';
            this.dataChanged = '确定要加载数据并放弃当前修改？';
            this.stateChanged = '确定要切换到$1状态？';
            this.defaultStateName = '初始';
            this.copy = '复制详细信息';
            this.copySuccess = '复制成功';
            this.copyFailed = '复制失败';
            this.roger = '知道了';
            this.appOrFuncIdRequired = '未配置菜单或应用参数，请在设计器中配置。';
            this.tableCanNotEmpty = '不能为空。';
            this.plsSelectRemoveAtt = '请选择要删除的附件!';
            this.plsSelectUpdateRow = '请选择要更新附件的行！';
        }
        return LanguageMessageForZh;
    }());

    /**
     * 繁体中文语言消息
     */
    var LanguageMessageForZhft = /** @class */ (function () {
        function LanguageMessageForZhft() {
            this.yes = '是';
            this.no = '否';
            this.unsaveNotifyTitle = '存在未保存記錄。是否要保存？';
            this.clientNotifyTitle = '前端異常提示';
            this.serverNotifyTitle = '服務器端異常提示';
            this.cancelApproveSuccess = '取消提交成功！';
            this.cancelApproveFailed = '取消提交失敗！';
            this.unallowEmptyProcessInstanceName = '流程實例名稱不能為空';
            this.unallowEmptyBizBillId = '請選擇壹條數據';
            this.bizDefKeyRequired = '入口單據不能為空';
            this.unallowEmptyChildBizBillId = '從表業務單據編號不能為空！';
            this.procInsIdRequired = '流程實例id不能為空！';
            this.addChildFailed = '新增子級失敗';
            this.addSiblingFailed = '新增同級失敗';
            this.addSubChildFailed = '新增從表子級失敗';
            this.addSubSiblingFailed = '新增從表同級失敗';
            this.deleteFailed = '刪除失敗';
            this.multiSaveFailed = '批量保存失敗';
            this.appendFailed = '追加失敗';
            this.queryFailed = '查詢失敗';
            this.cancelFailed = '取消失敗';
            this.updateFailed = '更新失敗';
            this.addFailed = '新增失敗';
            this.loadFailed = '加載失敗';
            this.saveSuccess = '保存成功！';
            this.saveFailed = '保存失敗！';
            this.deleteSuccess = '刪除成功！';
            this.deleteFaild = '刪除失敗！';
            this.confirmDeletion = '確認刪除？';
            this.submitSuccess = '提交審批成功！';
            this.submitFaild = '提交審批失敗！';
            this.notifyTitle = '系統提示';
            this.httpError = 'HTTP請求錯誤！請檢查Server端錯誤！';
            this.gridDataNotSave = '當前頁數據未保存，翻頁將導致數據丟失，是否繼續翻頁？';
            this.exitWithoutSave = '存在未保存的數據，是否繼續關閉？';
            this.notSupportMenuType = '關閉的既不是菜單也不是應用。';
            this.cancelWithoutSave = '存在未保存的變更，確認取消？';
            this.plsSelectDeleteData = '請選擇要刪除的數據！';
            this.errorHierarchyKey = '錯誤的分級碼';
            this.plsSelectParentNode = '請選擇父節點';
            this.deleteChildFirst = '請先刪除子節點';
            this.incorrectHierarchyConfig = '分級碼配置信息錯誤';
            this.operationFailed = '操作執行失敗。';
            this.plsSelectEditData = '請選擇要編輯的數據！';
            this.plsSelectViewData = '請選擇要查看的數據！';
            this.plsUploadFirst = '請先上傳附件！';
            this.defaultDialogTitle = '彈窗';
            this.changeToFirst = '已到達第壹條數據';
            this.changeToLast = '已到達最後壹條數據';
            this.noProcessInstanceId = '請指定流程實例標識。';
            this.noDataExist = '要編輯的數據不存在，無法進入編輯狀態！';
            this.noAttachment = '沒有可以預覽的附件。';
            this.confirm = '確定';
            this.cancel = '取消';
            this.plsSelectCopyData = '請選擇要復制的數據！';
            this.copyFieldsRequired = '要復制的字段不能為空！';
            this.pathIsRequired = '請求路径不能為空！';
            this.propsIsEmpty = '沒有可以編輯的物料特征！';
            this.historyAttachment = '曆史版本附件禁止刪除！';
            this.plsSelectDownloadAtt = '請選擇要下載的附件!';
            this.noDownloadAtt = '找不到要下載的附件！';
            this.plsCheckBatchEditRows = '請勾選要批量編輯的行！';
            this.plsSelectDetailFormData = '請先選擇一條從表數據！';
            this.dataAndStateChanged = '確定要加載數據並切換到$1狀態？';
            this.dataChanged = '確定要加載數據並放棄當前修改？';
            this.stateChanged = '確定要切換到$1狀態？';
            this.defaultStateName = '初始';
            this.copy = '復制詳細信息';
            this.copySuccess = '復制成功';
            this.copyFailed = '復制失敗';
            this.roger = '知道了';
            this.appOrFuncIdRequired = '未配置菜單或應用參數，請在設計器中配置。';
            this.tableCanNotEmpty = '不能為空。';
            this.plsSelectRemoveAtt = '請選擇要刪除的附件!';
            this.plsSelectUpdateRow = '請選擇更新附件的行！';
        }
        return LanguageMessageForZhft;
    }());

    var LanguageMessageFactory = /** @class */ (function () {
        function LanguageMessageFactory() {
        }
        /**
         * Create an instance by language
         */
        LanguageMessageFactory.create = function (language) {
            if (this.languageMessageMap.has(language) === true) {
                return this.languageMessageMap.get(language);
            }
            var languageMessage;
            switch (language) {
                case 'zh-CHS':
                    languageMessage = new LanguageMessageForZh();
                    break;
                case 'en':
                    languageMessage = new LanguageMessageForEn();
                    break;
                case 'zh-CHT':
                    languageMessage = new LanguageMessageForZhft();
                    break;
                default:
                    languageMessage = new LanguageMessageForZh();
                    break;
            }
            this.languageMessageMap.set(language, languageMessage);
            return languageMessage;
        };
        LanguageMessageFactory.languageMessageMap = new Map();
        return LanguageMessageFactory;
    }());

    /**
     * 多语言服务
     * @scope FormModule
     */
    var LanguageService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function LanguageService(localeId) {
            // #endregion
            /**
             * 当前语言
             */
            this.language = 'zh-CHS';
            this.language = localeId || 'zh-CHS';
            this.extendProperties();
            LanguageService.innerInstance = this;
        }
        Object.defineProperty(LanguageService.prototype, "languageMessage", {
            /**
             * 当前语言包
             */
            get: function () {
                return LanguageMessageFactory.create(this.language);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取实例
         */
        LanguageService.getInstance = function () {
            if (this.innerInstance) {
                return this.innerInstance;
            }
            var instance = new LanguageService('zh-CHS');
            LanguageService.innerInstance = instance;
            return instance;
        };
        /**
         * 扩展属性
         */
        LanguageService.prototype.extendProperties = function () {
            var _this = this;
            Object.keys(this.languageMessage).forEach(function (propName) {
                Object.defineProperty(_this, propName, {
                    get: function () {
                        return _this.languageMessage[propName];
                    }
                });
            });
        };
        /**
         * 单例对象
         */
        LanguageService.innerInstance = null;
        LanguageService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LanguageService.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.LOCALE_ID,] }] }
            ];
        };
        return LanguageService;
    }());

    /**
     * 服务器端异常实体
     */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var DeviceAbility = /** @class */ (function () {
        function DeviceAbility() {
        }
        /**
         * 复制到粘贴板
         * @param text
         * @returns
         */
        DeviceAbility.copyToClipboard = function (text) {
            var windowRef = window;
            if (windowRef.clipboardData && windowRef.clipboardData.setData) {
                return windowRef.clipboardData.setData("Text", text);
            }
            else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
                var textarea = document.createElement("textarea");
                textarea.textContent = text;
                textarea.style.position = "fixed";
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    return document.execCommand("copy");
                }
                catch (ex) {
                }
                finally {
                    document.body.removeChild(textarea);
                }
            }
            return false;
        };
        return DeviceAbility;
    }());

    /**
     * 异常处理基类
     */
    var ExceptionStrategy = /** @class */ (function () {
        function ExceptionStrategy(messagerService, languageService) {
            this.messagerService = messagerService;
            this.languageService = languageService;
        }
        /** @nocollapse */
        ExceptionStrategy.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return ExceptionStrategy;
    }());
    /**
     * 信息级别异常处理
     */
    var InfoExceptionStrategy = /** @class */ (function (_super) {
        __extends(InfoExceptionStrategy, _super);
        function InfoExceptionStrategy(messagerService, languageService) {
            return _super.call(this, messagerService, languageService) || this;
        }
        InfoExceptionStrategy.prototype.handleException = function (error) {
            if (!error) {
                return;
            }
            this.messagerService.info(error.Message);
        };
        /** @nocollapse */
        InfoExceptionStrategy.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return InfoExceptionStrategy;
    }(ExceptionStrategy));
    /**
     * 警告级别异常处理
     */
    var WarningExceptionStrategy = /** @class */ (function (_super) {
        __extends(WarningExceptionStrategy, _super);
        function WarningExceptionStrategy(messagerService, languageService) {
            return _super.call(this, messagerService, languageService) || this;
        }
        WarningExceptionStrategy.prototype.handleException = function (error) {
            if (!error) {
                return;
            }
            this.messagerService.warning(error.Message);
        };
        /** @nocollapse */
        WarningExceptionStrategy.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return WarningExceptionStrategy;
    }(ExceptionStrategy));
    /**
     * 错误级别异常处理
     */
    var ErrorExceptionStrategy = /** @class */ (function (_super) {
        __extends(ErrorExceptionStrategy, _super);
        function ErrorExceptionStrategy(messagerService, languageService) {
            var _this = _super.call(this, messagerService, languageService) || this;
            _this.langService = null;
            _this.langService = languageService;
            if (!_this.langService) {
                _this.langService = new LanguageService();
            }
            return _this;
        }
        ErrorExceptionStrategy.prototype.handleException = function (error) {
            if (!error) {
                return;
            }
            this.handleErrorLevel(error);
        };
        ErrorExceptionStrategy.prototype.handleErrorLevel = function (error) {
            var _this = this;
            var exceptionMsg = error.Message || '';
            var date$$1 = error.date || new Date();
            var localDate = moment(date$$1).format('YYYY-MM-DD HH:mm:ss');
            var detail = error.Detail || error.Message + "\r\n\u53D1\u751F\u65F6\u95F4\uFF1A" + localDate + "\r\n\u8BE6\u7EC6\u4FE1\u606F\uFF1A" + error.innerMessage || '';
            var innerMessage = error.innerMessage || null;
            var bsModalRef;
            var options = {
                // title: this.languageService.serverNotifyTitle,
                showMaxButton: false,
                buttons: [
                    {
                        text: this.langService.roger,
                        cls: 'btn btn-primary btn-lg',
                        handle: function () {
                            bsModalRef.close();
                        }
                    }
                ],
                // showHeader: false,
                width: 440,
                height: 200,
                safeHtml: false,
                exception: {
                    date: localDate,
                    message: innerMessage,
                    copyButton: {
                        text: this.langService.copy,
                        onClick: function (e) {
                            var result = DeviceAbility.copyToClipboard(detail);
                            var text = result ? _this.langService.copySuccess : _this.langService.copyFailed;
                            bsModalRef.content.showMiniNotify(text, 1500);
                        }
                    }
                }
            };
            this.displayError(error);
            bsModalRef = this.messagerService.show('exception', exceptionMsg, options);
        };
        /**
         * 在控制台中显示错误信息
         */
        ErrorExceptionStrategy.prototype.displayError = function (error) {
            if (!error) {
                return;
            }
            if (!console || !console.error) {
                return;
            }
            console.error(error);
        };
        /** @nocollapse */
        ErrorExceptionStrategy.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return ErrorExceptionStrategy;
    }(ExceptionStrategy));
    /**
     * 致命错误级别异常处理
     */
    var FatalExceptionStrategy = /** @class */ (function (_super) {
        __extends(FatalExceptionStrategy, _super);
        function FatalExceptionStrategy(messagerService, languageService) {
            return _super.call(this, messagerService, languageService) || this;
        }
        FatalExceptionStrategy.prototype.handleException = function (error) {
            if (!error) {
                return;
            }
            this.messagerService.error(error.Message);
        };
        /** @nocollapse */
        FatalExceptionStrategy.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return FatalExceptionStrategy;
    }(ExceptionStrategy));

    var ExceptionFactory = /** @class */ (function () {
        /**
         * 构造函数
         * @param messagerService 消息服务
         * @param languageService 多语言服务
         */
        function ExceptionFactory(messagerService, languageService) {
            this.messagerService = messagerService;
            this.languageService = languageService;
        }
        /**
         * 获取工厂实例
         * @param messagerService 消息服务
         * @param languageService 多语言服务
         */
        ExceptionFactory.getInstance = function (messagerService, languageService) {
            if (!this.exceptionFactory) {
                this.exceptionFactory = new ExceptionFactory(messagerService, languageService);
            }
            return this.exceptionFactory;
        };
        /**
         * 获取异常处理策略
         * @param exceptionLevel 异常等级
         */
        ExceptionFactory.prototype.getExceptionHandleStrategy = function (exceptionLevel) {
            var exceptionStrategy;
            switch (exceptionLevel) {
                case 0 /* Info */:
                    exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);
                    break;
                case 1 /* Warning */:
                    exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);
                    break;
                case 2 /* Error */:
                    exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                    break;
                case 3 /* Fatal */:
                    exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);
                    break;
                default:
                    // 默认异常等级是错误
                    exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                    break;
            }
            return exceptionStrategy;
        };
        /**
         * 异常工厂实例
         */
        ExceptionFactory.exceptionFactory = null;
        ExceptionFactory.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExceptionFactory.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return ExceptionFactory;
    }());

    // https://github.com/typeslick/status-code-enum
    var HttpStatusType;
    (function (HttpStatusType) {
        HttpStatusType[HttpStatusType["Info"] = 1] = "Info";
        HttpStatusType[HttpStatusType["Success"] = 2] = "Success";
        HttpStatusType[HttpStatusType["Redirect"] = 3] = "Redirect";
        HttpStatusType[HttpStatusType["ClientError"] = 4] = "ClientError";
        HttpStatusType[HttpStatusType["ServerError"] = 5] = "ServerError";
    })(HttpStatusType || (HttpStatusType = {}));
    /**
     * http通用类
     */
    var HttpUtil = /** @class */ (function () {
        function HttpUtil() {
        }
        /**
         * 基于http状态码返回状态类型
         * @param httpResponseSatus http请求返回状态码
         * @returns null | HttpStatusType
         */
        HttpUtil.getHttpStatusType = function (httpResponseSatus) {
            if (!httpResponseSatus) {
                return null;
            }
            var statusType = null; // 默认值为空
            if (httpResponseSatus < 100 || httpResponseSatus > 600) {
                statusType = null; // 不合理状态码
            }
            else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {
                statusType = HttpStatusType.Info;
            }
            else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {
                statusType = HttpStatusType.Success;
            }
            else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {
                statusType = HttpStatusType.Redirect;
            }
            else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {
                statusType = HttpStatusType.ClientError;
            }
            else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {
                statusType = HttpStatusType.ServerError;
            }
            return statusType;
        };
        return HttpUtil;
    }());

    /**
     * 表单错误提示服务
     * @description 统一处理前后端异常
     */
    var FormErrorService = /** @class */ (function () {
        function FormErrorService(msgService, languageService) {
            this.msgService = msgService;
            this.languageService = languageService;
        }
        /**
         * 异常路由方法
         */
        FormErrorService.prototype.exception = function (message, error) {
            // 针对session失效做特殊处理
            if (error && error.hasOwnProperty('expired') && error['expired'] === true) {
                return;
            }
            if (error && this.isHttpErrorResponse(error)) {
                this.httpErrorHandler(error);
            }
            else {
                // todo: 细化异常处理后，继续拆解该方法
                this.commonErrorHandler(message);
            }
        };
        /**
         * http请求异常处理器
         */
        FormErrorService.prototype.httpErrorHandler = function (httpError) {
            if (!httpError) {
                return;
            }
            var statusType = HttpUtil.getHttpStatusType(httpError.status);
            switch (statusType) {
                case HttpStatusType.ClientError:
                    if (httpError.status === 401) {
                        this.msgService.http401Error(httpError);
                        break;
                    }
                    this.msgService.httpErrorInClient(httpError);
                    break;
                case HttpStatusType.ServerError:
                    this.msgService.httpErrorInServer(httpError);
                    break;
                default:
                    throw new Error('Get invalid status code when using httpErrorHandler method.');
            }
        };
        FormErrorService.prototype.commonErrorHandler = function (errorMsg) {
            if (!errorMsg) {
                return;
            }
            this.msgService.error(errorMsg);
        };
        /**
         * httpErrorResponse like
         * @param error 异常
         */
        FormErrorService.prototype.isHttpErrorResponse = function (error) {
            if (!error) {
                return false;
            }
            if (typeof error !== 'object') {
                return false;
            }
            if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {
                return true;
            }
            if (error instanceof http.HttpErrorResponse) {
                return true;
            }
            return false;
        };
        FormErrorService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormErrorService.ctorParameters = function () {
            return [
                { type: FormMessageService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return FormErrorService;
    }());

    /**
     * 表单消息服务
     * @scope FormModule
     * @summary
     * 1、包装@farris/ui的消息服务；
     * 2、提供针对表单的快捷方法；
     */
    var FormMessageService = /** @class */ (function () {
        /**
         * 构造函数
         * 注入@farris/ui的LoadingService
         */
        function FormMessageService(messagerService, languageService, curLanguage) {
            this.messagerService = messagerService;
            this.languageService = languageService;
            this.curLanguage = curLanguage;
            this.languageService = this.languageService || LanguageService.getInstance();
        }
        /**
         * question弹窗
         */
        FormMessageService.prototype.question = function (content) {
            var confirmResult$ = this.confirmPromise(content);
            return rxjs.from(confirmResult$);
        };
        /**
         * 带默认焦点的弹出提示
         * @param content 内容
         */
        FormMessageService.prototype.question2 = function (content) {
            var _this = this;
            var promise$ = new Promise(function (resolve, reject) {
                var dialogRef = _this.messagerService.question2(content, [
                    {
                        text: _this.languageService.no,
                        cls: 'btn btn-secondary',
                        handle: function () {
                            resolve(false);
                            dialogRef.close();
                        }
                    },
                    {
                        text: _this.languageService.yes,
                        cls: 'btn btn-primary',
                        defaultFocus: true,
                        handle: function () {
                            resolve(true);
                            dialogRef.close();
                        }
                    }
                ]);
            });
            return rxjs.from(promise$);
        };
        /**
         * 弹出输入对话框
         * @param title 标题
         */
        FormMessageService.prototype.prompt = function (title) {
            return this.messagerService.prompt(title);
        };
        /**
         * 使用Promise实例包装回调方法，以同步回调方法执行后结果
         * @param content
         */
        FormMessageService.prototype.confirmPromise = function (content) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.messagerService.question(content, function () { resolve(true); }, function () { resolve(false); });
            });
        };
        /**
         * 确认弹框
         * @param content 弹出内容提示
         */
        FormMessageService.prototype.confirm = function (content) {
            return this.messagerService.confirm(content);
        };
        /**
         * 消息弹框
         */
        FormMessageService.prototype.info = function (content) {
            this.messagerService.info(content);
        };
        /**
         * 错误弹框
         */
        FormMessageService.prototype.error = function (content) {
            this.messagerService.error(content);
        };
        /**
         * 警告弹框
         */
        FormMessageService.prototype.warning = function (content) {
            this.messagerService.warning(content);
        };
        /**
         * 服务器端异常提示弹框
         */
        FormMessageService.prototype.httpErrorInServer = function (httpError) {
            var error = httpError.error;
            if (typeof (error) === 'string') {
                try {
                    error = JSON.parse(error);
                }
                catch (e) { }
            }
            if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
                this.messagerService.error(httpError.message);
                return;
            }
            var exceptionStrategy = ExceptionFactory.getInstance(this.messagerService, this.languageService).getExceptionHandleStrategy(error.Level);
            exceptionStrategy.handleException(error);
        };
        /**
         * 客户端异常提示弹框
         */
        FormMessageService.prototype.httpErrorInClient = function (httpError) {
            if (!httpError) {
                return;
            }
            var message = httpError.error && httpError.error.error && httpError.error.error.message;
            var exceptionMsg = message || httpError.message && httpError.message.replace(/http:\/\/[a-zA-Z0-9.:]{1,}/, '');
            var options = {
                // title: this.languageService.clientNotifyTitle,
                // showMaxButton: true,
                showHeader: false,
                width: 400,
                height: 200,
                safeHtml: false
            };
            this.messagerService.show('error', exceptionMsg, options);
        };
        /**
         * 401异常处理
         * 为了独立弹出重新登录提示框，切换到运行框架http服务后可以删除
         * @param httpError 异常
         */
        FormMessageService.prototype.http401Error = function (httpError) {
            var dialogShownKey = '401ErrorShownFlag';
            if (!httpError || window[dialogShownKey]) {
                return;
            }
            var i18n = {
                en: {
                    title: 'Warning',
                    sessionInvalid: 'Your login has expired, please login again.',
                    ok: 'ok',
                    cancel: 'cancel'
                },
                'zh-CHS': {
                    title: '提示',
                    sessionInvalid: '用户登录信息已失效，是否重新登录?',
                    ok: '确认',
                    cancel: '取消'
                }
            };
            this.curLanguage = this.curLanguage || 'zh-CHS';
            var messageOptions = {
                title: i18n[this.curLanguage].title,
                initialState: {
                    okText: i18n[this.curLanguage].ok,
                    okHandle: function () {
                        modalRef.close();
                        window[dialogShownKey] = false;
                        var eventResult = httpError && httpError.error || {};
                        var redirectUri = eventResult.redirect_uri || '/login.html';
                        window.location.href = "/logout.html#?logout-before-redirect=true&loginUri=" + redirectUri;
                    },
                    cancelText: i18n[this.curLanguage].cancel,
                    cancelHandle: function () {
                        modalRef.close();
                        window[dialogShownKey] = false;
                    }
                },
                showHeader: true,
                width: 420,
                height: 180,
                fitContent: false
            };
            var modalRef = this.messagerService.show('question', i18n[this.curLanguage].sessionInvalid, messageOptions);
            window[dialogShownKey] = true;
            if (modalRef && modalRef.dialog && modalRef.dialog.instance.closed) {
                modalRef.dialog.instance.closed.subscribe(function () {
                    window[dialogShownKey] = false;
                });
            }
        };
        FormMessageService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormMessageService.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }
            ];
        };
        return FormMessageService;
    }());

    /**
     * 通知服务
     * @scope FormModule
     * @description
     * 消息提示使用策略：成功使用success，失败使用error，警告使用warning，其他场景使用info
     */
    var FormNotifyService = /** @class */ (function () {
        /**
         * 构造函数
         * 注入@farris/ui的NotifyService
         */
        function FormNotifyService(notifyService, languageService) {
            this.notifyService = notifyService;
            this.languageService = languageService;
            if (!languageService) {
                this.languageService = LanguageService.getInstance();
            }
        }
        /**
         * 信息提示
         * @param content 内容
         */
        FormNotifyService.prototype.default = function (content) {
            return this.notifyService.default({
                title: this.languageService.notifyTitle,
                msg: content,
                timeout: 3000
            });
        };
        /**
         * 信息提示
         * @param content 内容
         */
        FormNotifyService.prototype.info = function (content, options) {
            var notifyOptions = {
                title: this.languageService.notifyTitle,
                msg: content,
                timeout: 3000
            };
            if (options && options.hideTitle) {
                delete notifyOptions.title;
            }
            return this.notifyService.info(notifyOptions);
        };
        /**
         * 成功提示
         * @param content 内容
         * @param options? 选项 {shorTitle: false}
         */
        FormNotifyService.prototype.success = function (content, options) {
            var notifyOptions = {
                title: this.languageService.notifyTitle,
                msg: content,
                timeout: 3000
            };
            if (options && options.hideTitle) {
                delete notifyOptions.title;
            }
            this.notifyService.success(notifyOptions);
        };
        /**
         * 警告提示
         * @param content 内容
         * @param options 选项
         */
        FormNotifyService.prototype.warning = function (content, options) {
            var notifyOptions = {
                title: this.languageService.notifyTitle,
                msg: content,
                timeout: 3000
            };
            if (options && options.hideTitle) {
                delete notifyOptions.title;
            }
            this.notifyService.warning(notifyOptions);
        };
        /**
         * 错误提示
         * @param content 内容
         */
        FormNotifyService.prototype.error = function (content, options) {
            var notifyOptions = {
                title: this.languageService.notifyTitle,
                msg: content,
                timeout: 3000
            };
            if (options && options.hideTitle) {
                delete notifyOptions.title;
            }
            this.notifyService.error(notifyOptions);
        };
        FormNotifyService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormNotifyService.ctorParameters = function () {
            return [
                { type: uiNotify.NotifyService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return FormNotifyService;
    }());

    var FormWizardService = /** @class */ (function () {
        function FormWizardService(wizardSer) {
            this.wizardSer = wizardSer;
        }
        FormWizardService.prototype.preStep = function () {
            var currentPageId = this.wizardSer.getCurrentPageId();
            this.wizardSer.updateWizardState(uiWizard.WizardEventType.Prev, currentPageId);
        };
        FormWizardService.prototype.nextStep = function () {
            var currentPageId = this.wizardSer.getCurrentPageId();
            this.wizardSer.updateWizardState(uiWizard.WizardEventType.Next, currentPageId);
        };
        FormWizardService.prototype.cancelWizard = function () {
            this.wizardSer.cancelWizard();
        };
        FormWizardService.prototype.finishWizard = function () {
            this.wizardSer.finishWizard();
        };
        FormWizardService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormWizardService.ctorParameters = function () {
            return [
                { type: uiWizard.WizardService }
            ];
        };
        return FormWizardService;
    }());

    /**
     * 检查规则
     * @scope FormModule
     */
    var CheckService = /** @class */ (function () {
        function CheckService() {
        }
        /**
         * 检查是否为空
         */
        CheckService.prototype.checkEmpty = function (value) {
            return !!value;
        };
        CheckService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CheckService.ctorParameters = function () { return []; };
        return CheckService;
    }());

    /**
     * 数据检查服务
     */
    var DataCheckService = /** @class */ (function () {
        function DataCheckService(messageService, formNotifyService, languageService) {
            this.messageService = messageService;
            this.formNotifyService = formNotifyService;
            this.languageService = languageService;
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
        }
        /**
         * 编辑前检查
         */
        DataCheckService.prototype.checkBeforeEdit = function (idToEdit) {
            var ifSkipCheck = this.ifSkipCheck(idToEdit);
            if (ifSkipCheck === true) {
                return true;
            }
            if (idToEdit) {
                return true;
            }
            this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });
            return rxjs.empty();
        };
        /**
         * 查看前检查
         */
        DataCheckService.prototype.checkBeforeView = function (idToView) {
            var ifSkipCheck = this.ifSkipCheck(idToView);
            if (ifSkipCheck === true) {
                return true;
            }
            if (idToView) {
                return true;
            }
            this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });
            return rxjs.empty();
        };
        /**
         * 老表单跳过检查
         * @todo：待删除，兼容老表单
         */
        DataCheckService.prototype.ifSkipCheck = function (id) {
            var context = this['context'];
            var params = context.command.params;
            // 表单没有重新保存过的情况
            if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {
                return true;
            }
            // 保存过但没有填参数的情况
            // @todo: 会漏掉空串的情况，目前主键解析的返回值是undefined，暂不考虑空串场景
            if (id === '') {
                return true;
            }
            return false;
        };
        DataCheckService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DataCheckService.ctorParameters = function () {
            return [
                { type: FormMessageService },
                { type: FormNotifyService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return DataCheckService;
    }());

    /**
     * 框架事件服务
     * @scope FormModule
     */
    var EventService = /** @class */ (function () {
        function EventService(eventBus) {
            this.eventBus = eventBus;
        }
        EventService.prototype.trigger = function (eventType, eventData, frameIds) {
            this.eventBus.trigger(eventType, eventData, frameIds);
        };
        EventService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EventService.ctorParameters = function () {
            return [
                { type: devkit.FrameEventBus }
            ];
        };
        return EventService;
    }());

    // tslint:disable: no-unused-expression
    /**
     * 菜单状态服务
     * @scope FormModule
     */
    var MenuStateService = /** @class */ (function () {
        function MenuStateService() {
            this.COMMAND_SERVICE_LINK_STORAGE_KEY = 'COMMAND_SERVICE_LINK_STORAGE_KEY';
        }
        MenuStateService.prototype.getState = function () {
            var data = !!sessionStorage && sessionStorage.getItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY) || null;
            if (!!data) {
                return JSON.parse(data);
            }
            return {};
        };
        MenuStateService.prototype.setState = function (links) {
            !!sessionStorage && sessionStorage.setItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY, JSON.stringify(links));
        };
        MenuStateService.prototype.addMenuState = function (parentMenuId, childMenuId, status) {
            if (status === void 0) {
                status = true;
            }
            if (!childMenuId) {
                return;
            }
            var state = this.getState();
            var isParentExist = !!state && state.hasOwnProperty(parentMenuId);
            var childItem = { id: childMenuId, status: status };
            if (isParentExist) {
                var parent_1 = state[parentMenuId];
                var isChildItemExist = parent_1.find(function (item) { return item.id === childMenuId; });
                if (!isChildItemExist) {
                    state[parentMenuId].push(childItem);
                }
            }
            else {
                state[parentMenuId] = [childItem];
            }
            this.setState(state);
        };
        MenuStateService.prototype.getMenuState = function (parentMenuId, childMenuId) {
            var state = this.getState();
            if (state === null) {
                return null;
            }
            var isParentExist = state.hasOwnProperty(parentMenuId);
            if (!isParentExist) {
                return null;
            }
            var parentMenu = state[parentMenuId];
            var childMenu = parentMenu.filter(function (item) { return item.status === true; });
            if (typeof childMenuId === 'undefined' || childMenuId.length < 1) {
                return childMenu;
            }
            return parentMenu.filter(function (item) { return item.status && item.id === childMenuId; });
        };
        MenuStateService.prototype.updateMenuState = function (childMenuId, status) {
            var state = this.getState();
            if (state === null) {
                return;
            }
            Object.keys(state).forEach(function (key) {
                var childMenu = state[key].find(function (item) { return item.id === childMenuId; });
                if (!!childMenu) {
                    childMenu.status = status;
                }
            });
            this.setState(state);
        };
        MenuStateService.prototype.removeMenu = function (menuId) {
            this.removeParentMenu(menuId);
            this.removeChildMenu(menuId);
        };
        MenuStateService.prototype.removeParentMenu = function (menuId) {
            var state = this.getState();
            if (state === null) {
                return null;
            }
            Object.keys(state).forEach(function (item) {
                if (item === menuId && state[menuId].length < 1) {
                    delete state[item];
                }
            });
            this.setState(state);
        };
        MenuStateService.prototype.removeChildMenu = function (menuId) {
            var state = this.getState();
            if (state === null) {
                return;
            }
            Object.keys(state).forEach(function (parentMenuId) {
                var childMenus = state[parentMenuId];
                if (childMenus && childMenus.length > 0) {
                    childMenus.forEach(function (child, index) {
                        if (child.id === menuId) {
                            childMenus.splice(index, 1);
                        }
                    });
                }
            });
            this.setState(state);
        };
        MenuStateService.decorators = [
            { type: core.Injectable }
        ];
        return MenuStateService;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-11-15 15:56:11
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-07-09 16:23:04
     */
    // tslint:disable: no-string-literal
    /**
     * 路由服务
     * @scope FormModule
     */
    var RouterService = /** @class */ (function () {
        function RouterService(router$$1, routerParamService, frameworkService, appService, menuStateService, languageService) {
            this.router = router$$1;
            this.routerParamService = routerParamService;
            this.frameworkService = frameworkService;
            this.appService = appService;
            this.menuStateService = menuStateService;
            this.languageService = languageService;
            /**
             * 上次切换的TabId
             */
            this.lastSwitchId = null;
            /**
             * 上次关闭的TabId
             */
            this.lastCloseId = null;
            // private menuStateService: MenuStateService = null;
            this.onClosed = null;
            if (!this.menuStateService) {
                this.menuStateService = new MenuStateService();
            }
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
            this.onClosed = new rxjs.Subject();
            this.registerEvent();
        }
        /**
         * 切换路由
         * @param url 菜单ID
         * @param params 路由参数
         */
        RouterService.prototype.route = function (url, params) {
            url = this.router.createUrlTree([url]).toString();
            this.setParams(url, params);
            this.router.navigateByUrl(url);
        };
        /**
         * 注册运行框架事件
         */
        RouterService.prototype.registerEvent = function () {
            var _this = this;
            var params = this.getParams(window.location.hash);
            var menuId = this.getAppId() || this.getFuncId();
            this.frameworkService.eventListner(this.frameworkService.FuncSwitch, function (e) {
                if (!e) {
                    return;
                }
                var id = _this.getOriginalId(e.id) || e.tabId;
                var menuState = _this.menuStateService.getMenuState(id);
                if (!!id && menuId === id && !!menuState && menuState.length > 0) {
                    _this.formReload();
                    _this.lastSwitchId = id;
                }
            }, params);
            this.frameworkService.eventListner(this.frameworkService.FuncClosed, function (e) {
                if (!e) {
                    return;
                }
                _this.onClosed.next(e);
                var id = _this.getOriginalId(e.id) || e.tabId;
                if (menuId === id) {
                    return;
                }
                var menuState = _this.menuStateService.getMenuState(menuId, id);
                // && id !== this.lastCloseId
                if (!!id && !!menuState && menuState.length > 0) {
                    _this.removeMenuState(id);
                    _this.formReload();
                    _this.lastCloseId = id;
                }
            }, params);
        };
        RouterService.prototype.removeMenuState = function (tabId) {
            if (this['context']) {
                this.menuStateService.removeMenu(tabId);
            }
        };
        /**
         * 获取原始功能id
         * @param id id
         */
        RouterService.prototype.getOriginalId = function (id) {
            if (!id) {
                return id;
            }
            if (id.indexOf('_') !== -1) {
                id = id.split('_')[0];
            }
            return id;
        };
        /**
         * 刷新组件数据
         */
        RouterService.prototype.formReload = function () {
            try {
                this['context']['frameContext']['appContext']['refresh']();
            }
            catch (_a) { }
        };
        /**
         * 打开功能菜单
         * @param funcId 菜单内码
         * @param params 路由参数，形如： { key1: val1, key2: value2 }
         */
        RouterService.prototype.openMenu = function (funcId, params, reload) {
            if (typeof reload === 'undefined' || typeof reload !== 'boolean') {
                reload = false;
            }
            var paramsMap = this.buildParamMap(params);
            var parentMenuId = this.getFuncId() || this.getAppId();
            this.menuStateService.addMenuState(parentMenuId, funcId);
            paramsMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);
            this.frameworkService.openFuncWithParam(funcId, paramsMap, reload);
        };
        /**
         * 打开应用
         * @param appId 应用内码
         * @param appEntrance 应用入口
         * @param params 路由参数，形如： { key1: val1, key2: value2 }
         */
        RouterService.prototype.openApp = function (appId, appEntrance, params, reload) {
            if (typeof reload === 'undefined' || typeof reload !== 'boolean') {
                reload = false;
            }
            var paramMap = this.buildParamMap(params);
            var parentMenuId = this.getAppId() || this.getFuncId();
            this.menuStateService.addMenuState(parentMenuId, appId);
            paramMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);
            if (!!this.appService) {
                this.appService.openApp(appId, appEntrance, paramMap, reload);
            }
        };
        /**
         * 构造参数
         */
        RouterService.prototype.buildParamMap = function (params) {
            if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
                params = {};
            }
            var paramMap = new Map();
            if (typeof params === 'object') {
                params = JSON.stringify(params);
            }
            params = window['encodeURIComponent'](params);
            paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
            return paramMap;
        };
        /**
         * 关闭功能菜单
         */
        RouterService.prototype.closeMenu = function () {
            var funcId = this.getFuncId();
            var appId = this.getAppId();
            var _a = this.findDialog(), isDialogComponent = _a.isDialogComponent, rootComponent = _a.rootComponent;
            if (isDialogComponent) {
                var modalRef = this.get(rootComponent, 'dialogRef');
                modalRef['close']();
                return;
            }
            if (funcId !== null && typeof funcId === 'string' && funcId.length > 0) {
                this.closeFunc(funcId);
            }
            else if (appId !== null && typeof appId === 'string' && appId.length > 0) {
                var appEntrance = this.getAppEntrance();
                this.closeApp(appId, appEntrance);
            }
            else {
                console.error(this.languageService['notSupportMenuType']);
            }
        };
        /**
         * 查找弹窗组件
         */
        RouterService.prototype.findDialog = function () {
            var frameContext = this.get(this, 'context.frameContext');
            var isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
            var parentFrameContext = this.get(frameContext, 'parent');
            while (parentFrameContext != null && !isDialogComponent) {
                frameContext = this.get(frameContext, 'parent');
                parentFrameContext = this.get(parentFrameContext, 'parent');
                isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
            }
            var rootComponent = this.get(frameContext, 'frameComponent');
            return { isDialogComponent: isDialogComponent, rootComponent: rootComponent };
        };
        /**
         * loadsh get
         * @param object 对象
         * @param path 路径
         * @param defaultVal 默认值
         */
        RouterService.prototype.get = function (object, path, defaultVal) {
            if (defaultVal === void 0) {
                defaultVal = null;
            }
            var PATH = Array.isArray(path)
                ? path
                : path.split('.').filter(function (i) { return i.length; });
            if (!PATH.length) {
                return object === undefined ? defaultVal : object;
            }
            if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {
                return defaultVal;
            }
            return this.get(object[PATH.shift()], PATH, defaultVal);
        };
        /**
         * 关闭菜单
         * @param funcId 菜单id
         */
        RouterService.prototype.closeFunc = function (funcId) {
            if (!funcId) {
                funcId = this.getFuncId();
            }
            if (!!this.frameworkService) {
                this.frameworkService.closeFunc(funcId).subscribe();
            }
        };
        /**
         * 关闭app
         * @param appId 应用id
         */
        RouterService.prototype.closeApp = function (appId, appEntrance) {
            if (!appId) {
                appId = this.getAppId();
            }
            if (typeof appEntrance === 'undefined') {
                appEntrance = this.getAppEntrance();
            }
            if (!!this.appService) {
                this.appService.closeApp(appId, appEntrance).subscribe();
            }
        };
        /**
         * 设置参数
         * @param params 路由参数
         */
        RouterService.prototype.setParams = function (url, params) {
            var paramsObj;
            if (typeof params === 'string' && params !== '') {
                paramsObj = JSON.parse(params);
            }
            else {
                paramsObj = params || {};
            }
            // 设置路由参数
            this.routerParamService.setParams(url, paramsObj);
        };
        /**
         * 获取funcId
         */
        RouterService.prototype.getFuncId = function () {
            var hash = window.location.hash;
            if (!hash) {
                return null;
            }
            var params = this.decodeURLParams(hash);
            if (params && params.hasOwnProperty('funcId')) {
                return params.funcId;
            }
            else {
                return null;
            }
        };
        /**
         * 获取appId
         */
        RouterService.prototype.getAppId = function () {
            var hash = window.location.hash;
            if (!hash) {
                return null;
            }
            var params = this.decodeURLParams(hash);
            if (params && params.hasOwnProperty('appId')) {
                return params.appId;
            }
            else {
                return null;
            }
        };
        RouterService.prototype.getParentMenuId = function () {
            var hash = window.location.hash;
            if (!hash) {
                return null;
            }
            var params = this.decodeURLParams(hash);
            if (params && params.hasOwnProperty('WEB_FORM_ROUTER_PARENT_ID')) {
                return params.WEB_FORM_ROUTER_PARENT_ID;
            }
            else {
                return null;
            }
        };
        /**
         * 获取应用入口
         */
        RouterService.prototype.getAppEntrance = function () {
            var hash = window.location.hash;
            if (!hash) {
                return null;
            }
            var params = this.decodeURLParams(hash);
            if (params && params.hasOwnProperty('appEntrance')) {
                return params.appEntrance;
            }
            else {
                return null;
            }
        };
        /**
         * 解码参数
         * @param query search|hash
         */
        RouterService.prototype.decodeURLParams = function (query) {
            if (typeof query === 'undefined') {
                query = window.location.hash || window.location.search;
            }
            var hashes = query.slice(query.indexOf('?') + 1).split('&');
            return hashes.reduce(function (params, hash) {
                var _a;
                var split = hash.indexOf('=');
                var key = hash.slice(0, split);
                var val = hash.slice(split + 1);
                return Object.assign(params, (_a = {}, _a[key] = decodeURIComponent(val), _a));
            }, {});
        };
        RouterService.prototype.getParams = function (queryString) {
            if (!queryString) {
                return {};
            }
            var hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
            return hashes.reduce(function (params, hash) {
                var _a;
                var split = hash.indexOf('=');
                var key = hash.slice(0, split);
                var val = hash.slice(split + 1);
                return Object.assign(params, (_a = {}, _a[key] = decodeURIComponent(val), _a));
            }, {});
        };
        RouterService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RouterService.ctorParameters = function () {
            return [
                { type: router.Router },
                { type: devkit.RouterParamService },
                { type: rtfCommon.FrameworkService },
                { type: rtfCommon.AppService, decorators: [{ type: core.Optional }] },
                { type: MenuStateService, decorators: [{ type: core.Optional }] },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return RouterService;
    }());

    // tslint:disable: unified-signatures
    var TAB_EVENT = {
        /**
         * Tab关闭后
         */
        onTabClosed: 'FuncClosed',
        /**
         * Tab关闭前
         */
        onTabClosing: 'beforeFuncCloseEvent',
        /**
         * Tab切换
         */
        onTabSwitched: 'funcSwitchEvent'
    };
    var TAB_QUERY_STRING = {
        TabId: 'tabId',
        AppType: 'appType',
        AppId: 'appId',
        AppEntrance: 'appEntrance',
        FuncId: 'funcId'
    };
    var WEB_FORM_ROUTE_PARAMS_KEY = 'WEB_FORM_ROUTE_PARAMS';
    var INSIDE_DIALOG_TOKEN = new core.InjectionToken('@farris/command-service-inside-dialog');
    var MODAL_REF = new core.InjectionToken('@farris/command-service-modal-ref');

    /**
     * 查询参数服务
     * @scope FormModule
     */
    var QuerystringService = /** @class */ (function () {
        function QuerystringService() {
        }
        /**
         * 解码参数
         * @param queryString search|hash
         */
        QuerystringService.prototype.parse = function (queryString) {
            if (!queryString) {
                return {};
            }
            var hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
            return hashes.reduce(function (params, hash) {
                var _a;
                var split = hash.indexOf('=');
                var key = hash.slice(0, split);
                var val = hash.slice(split + 1);
                return Object.assign(params, (_a = {}, _a[key] = decodeURIComponent(val), _a));
            }, {});
        };
        QuerystringService.decorators = [
            { type: core.Injectable }
        ];
        return QuerystringService;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-07-23 15:56:11
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-11-27 15:31:36
     */
    /**
     * RuntimeFrameworkService
     * @scope @FormModule
     */
    // tslint:disable: no-string-literal disable: max-line-length
    var RuntimeFrameworkService = /** @class */ (function () {
        function RuntimeFrameworkService() {
            this.rtfService = this.getService();
        }
        /**
         * 遍历获取rtf服务
         */
        RuntimeFrameworkService.prototype.getService = function () {
            var env = window;
            while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {
                env = env.parent;
            }
            return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};
        };
        // #region 导航服务
        /**
         * 打开菜单或应用
         * @param options options
         */
        RuntimeFrameworkService.prototype.openMenu = function (options) {
            if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenu'] === 'function') {
                this.rtfService.func.openMenu(options);
            }
        };
        /**
         * 打开菜单或应用
         * @param options options
         */
        RuntimeFrameworkService.prototype.openMenu$ = function (options) {
            if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenuByStream'] === 'function') {
                return this.rtfService.func.openMenuByStream(options);
            }
            return rxjs.EMPTY;
        };
        /**
         * 获取导航实体数据
         * @param tabId tabid
         * @param callback callback
         * @param once once
         */
        RuntimeFrameworkService.prototype.getEntityParam = function (tabId, callback, once) {
            if (once === void 0) {
                once = true;
            }
            if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getEntityParam'] === 'function') {
                this.rtfService.func.getEntityParam(tabId, callback, once);
            }
        };
        /**
         * 尝试关闭菜单或应用
         * @param options optins
         */
        RuntimeFrameworkService.prototype.beforeCloseMenu = function (options) {
            if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['beforeClose'] === 'function') {
                this.rtfService.func.beforeClose(options);
            }
        };
        /**
         * 关闭菜单
         * @param options options
         */
        RuntimeFrameworkService.prototype.closeMenu = function (options) {
            if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['close'] === 'function') {
                this.rtfService.func.close(options);
            }
        };
        /**
         * 获取菜单静态参数
         * @param funcId 菜单id
         * @param callback 回调
         */
        RuntimeFrameworkService.prototype.getMenuParams = function (funcId, callback) {
            if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getMenuParams'] === 'function') {
                this.rtfService.func.getMenuParams(funcId, callback);
            }
        };
        /**
         * 添加事件监听
         */
        RuntimeFrameworkService.prototype.addEventListener = function (token, handler, options) {
            if (this.rtfService && this.rtfService.hasOwnProperty('frmEvent') && typeof this.rtfService['frmEvent']['eventListener'] === 'function') {
                this.rtfService.frmEvent.eventListener(token, handler, options);
            }
        };
        /**
         * 获取运行框架菜单切换控制事件
         * @returns Observable<any>
         */
        RuntimeFrameworkService.prototype.getMenuSwitchControlEvent = function () {
            var subject = new rxjs.Subject();
            var frmEvent = this.rtfService && this.rtfService.frmEvent || null;
            if (frmEvent) {
                var tabId_1 = this.tabId;
                var options_1 = this.params;
                window.setTimeout(function () {
                    frmEvent.eventListener(tabId_1, function (response) {
                        var menuSwitchControl = response && response.menuSwitchControl || null;
                        if (menuSwitchControl && menuSwitchControl.key === tabId_1) {
                            subject.next(menuSwitchControl.value);
                        }
                        else {
                            subject.next(null);
                        }
                    }, options_1);
                }, 0);
            }
            return subject;
        };
        Object.defineProperty(RuntimeFrameworkService.prototype, "params", {
            //#endregion
            // #region 适配层属性
            get: function () {
                if (this.rtfService && this.rtfService.hasOwnProperty('session') && typeof this.rtfService['session']['getCommonVariable'] === 'function') {
                    return this.rtfService['session']['getCommonVariable']();
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeFrameworkService.prototype, "tabId", {
            /**
             * 获取tabId
             */
            get: function () {
                return this.params && this.params['tabId'] || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeFrameworkService.prototype, "formToken", {
            /**
             * 获取formToken
             */
            get: function () {
                return this.params && this.params['formToken'] || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuntimeFrameworkService.prototype, "funcId", {
            /**
             * 获取funcId
             */
            get: function () {
                return this.params && this.params['funcId'] || null;
            },
            enumerable: true,
            configurable: true
        });
        // #endregion
        // #region 事件通信
        /**
         * 注册主题
         * @param code 主题的标识
         * @param options token生成规则
         * @param subject 自定义主题，默认使用Subject
         * @returns string 注册成功后返回主题的唯一标识
         */
        RuntimeFrameworkService.prototype.subjectRegister = function (code, options, subject) {
            if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRegister'] === 'function') {
                return this.rtfService.broadcast.subjectRegister(code, options, subject);
            }
            return null;
        };
        /**
         * 移除主题
         * @param token 主题唯一标识
         */
        RuntimeFrameworkService.prototype.subjectRemove = function (token) {
            if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRemove'] === 'function') {
                this.rtfService.broadcast.subjectRemove(token);
            }
        };
        /**
         * 给主题发送消息
         * @param token 主题标识
         * @param info 消息
         */
        RuntimeFrameworkService.prototype.subjectNotify = function (token, info) {
            if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['notify'] === 'function') {
                this.rtfService.broadcast.notify(token, info);
            }
        };
        /**
         * 注册主题监听器
         * @param token 主题标识
         * @param handler 主题处理器
         * @param observerToken 监听器id(可选)
         * @returns 监听器Id
         * @description 监听主题消息，监听成功返回当前监听者的唯一标识
         */
        RuntimeFrameworkService.prototype.subjectResponse = function (token, handler, observerToken) {
            if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['response'] === 'function') {
                var code = observerToken;
                if (typeof observerToken === 'undefined' || !observerToken || observerToken.length < 1) {
                    code = devkit.UID.create();
                }
                this.rtfService.broadcast.response(token, code, handler);
                return code;
            }
            return null;
        };
        /**
         * 取消对主题的监听
         * @param token 主题标识
         * @param observerToken 监听器标识
         */
        RuntimeFrameworkService.prototype.responseUnSubscribe = function (token, observerToken) {
            if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['responseUnSubscribe'] === 'function') {
                this.rtfService.broadcast.responseUnSubscribe(token, observerToken);
            }
        };
        // #endregion
        // #region 工具函数
        /**
         * 是否同源
         * @param environment window
         */
        RuntimeFrameworkService.prototype.isSameOrigin = function (environment) {
            var host = window.location.host;
            try {
                if (environment && environment.location && typeof environment.location.host !== 'undefined') {
                    return environment.location.host === host;
                }
            }
            catch (e) {
                return false;
            }
            return false;
        };
        RuntimeFrameworkService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RuntimeFrameworkService.ctorParameters = function () { return []; };
        return RuntimeFrameworkService;
    }());

    /**
     * 导航事件服务
     * @scope FormModule
     */
    var NavigationEventService = /** @class */ (function () {
        function NavigationEventService(runtimeFrameworkService, menuStateService, querystringService) {
            this.runtimeFrameworkService = runtimeFrameworkService;
            this.menuStateService = menuStateService;
            this.querystringService = querystringService;
            this.onClosedListeners = new Map();
            this.onClosingListeners = new Map();
            this.onTabSwitchListeners = new Map();
        }
        Object.defineProperty(NavigationEventService.prototype, "querystrings", {
            get: function () {
                var params = this.querystringService.parse(window.location.hash);
                // 修正formToken
                if (params) {
                    params.formToken = this.runtimeFrameworkService.formToken;
                }
                return params;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 注册事件
         */
        NavigationEventService.prototype.registerEvent = function () {
            var _this = this;
            var options = this.querystrings;
            this.params = options;
            // 注册标签页切换事件
            this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabSwitched, function (e) { return _this.handleTabSwitchEvent(e); }, options);
            // 注册标签页关闭后事件
            this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosed, function (e) { return _this.handleTabClosedEvent(e); }, options);
            // 注册标签页关闭前事件
            this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosing, function (e) { return _this.handleTabClosingEvent(e); }, options);
        };
        /**
         * 处理标签页切换事件
         */
        NavigationEventService.prototype.handleTabSwitchEvent = function (e) {
            if (!e) {
                return;
            }
            // 选中的表单为系统表单，只能返回id，没有tabId
            var eventTabId = e.tabId || e.id || null;
            if (!eventTabId) {
                return;
            }
            var options = this.params; // this.querystrings;
            var tabId = options.tabId || options.funcId || options.appId;
            var menuState = this.menuStateService.getMenuState(eventTabId);
            if (!!tabId && tabId === eventTabId && !!menuState && menuState.length > 0) {
                this.formReload();
            }
            this.fireTabSwitchEvent(e);
        };
        /**
         * 触发tab切换事件
         * @param e e
         */
        NavigationEventService.prototype.fireTabSwitchEvent = function (e) {
            if (!this.onTabSwitchListeners || this.onTabSwitchListeners.size < 1) {
                return;
            }
            this.onTabSwitchListeners.forEach(function (handle, key, map) {
                if (typeof handle === 'function') {
                    handle(e);
                }
            });
        };
        /**
         * 标签页关闭前事件
         */
        NavigationEventService.prototype.handleTabClosingEvent = function (e) {
            var _this = this;
            if (!e) {
                return;
            }
            // 要关闭的表单为系统表单，只能返回id，没有tabId
            var eventTabId = e.tabId || e.id || null;
            var options = this.params; // this.querystrings;
            var tabId = options.tabId || options.funcId || options.appId;
            if (!!eventTabId && !!tabId && tabId === eventTabId) {
                this.fireTabClosingEvent(e).subscribe(function (result) {
                    if (result) {
                        setTimeout(function () { return _this.removeMenuState(eventTabId); }, 500);
                        var formEventServices = window['formEventServices'];
                        if (formEventServices.has(eventTabId)) {
                            formEventServices.delete(eventTabId);
                            window['formEventServices'] = formEventServices;
                        }
                        if (!(e && e.hasOwnProperty('token'))) {
                            e = Object.assign({}, e, { token: options.formToken });
                        }
                        // TODO:不再主动销毁appContext，可能存在内存泄漏问题
                        // if (this.frameContext && this.frameContext.appContext) {
                        //   this.frameContext.appContext.dispose();
                        // }
                        _this.runtimeFrameworkService.closeMenu(e);
                    }
                });
            }
        };
        /**
         * 触发关闭前事件
         */
        NavigationEventService.prototype.fireTabClosingEvent = function (e) {
            if (!this.onClosingListeners || this.onClosingListeners.size < 1) {
                return rxjs.of(true);
            }
            var listeners = this.onClosingListeners.values();
            var result$ = rxjs.from(listeners);
            // 用户拒绝
            var userRejected = false;
            return result$.pipe(operators.concatMap(function (handle) {
                if (userRejected) {
                    return rxjs.EMPTY;
                }
                return handle(e).pipe(operators.take(1), operators.tap(function (result) { return userRejected = !result; }), operators.switchMap(function (result) { return rxjs.of(result); }));
            }), operators.every(function (result) { return result; }));
        };
        /**
         * 标签页关闭后事件
         */
        NavigationEventService.prototype.handleTabClosedEvent = function (e) {
            if (!e) {
                return;
            }
            var options = this.params; // this.querystrings;
            var tabId = options.tabId || options.funcId || options.appId;
            var eventTabId = e.tabId || e.id || null;
            if (tabId === eventTabId) {
                return;
            }
            var menuState = this.menuStateService.getMenuState(tabId, eventTabId);
            if (!!eventTabId && !!menuState && menuState.length > 0) {
                this.removeMenuState(eventTabId);
                this.formReload();
            }
            this.fireTabClosedEvent(e);
        };
        NavigationEventService.prototype.removeMenuState = function (tabId) {
            if (this['context']) {
                this.menuStateService.removeMenu(tabId);
            }
        };
        /**
         * 触发关闭后事件
         * @param e event
         */
        NavigationEventService.prototype.fireTabClosedEvent = function (e) {
            if (!this.onClosedListeners || this.onClosedListeners.size < 1) {
                return;
            }
            this.onClosedListeners.forEach(function (handle, key, map) {
                if (typeof handle === 'function') {
                    handle(e);
                }
            });
        };
        // #endregion
        /**
         * 注册事件监听器
         * @param eventType 事件类型 onTabClosed
         * @param handler 处理器
         */
        NavigationEventService.prototype.addEventListener = function (eventType, handler) {
            var key = devkit.UID.create();
            if (eventType === TAB_EVENT.onTabClosed) {
                this.onClosedListeners.set(key, handler);
                return key;
            }
            else if (eventType === TAB_EVENT.onTabClosing) {
                this.onClosingListeners.set(key, handler);
                return key;
            }
            else if (eventType === TAB_EVENT.onTabSwitched) {
                this.onTabSwitchListeners.set(key, handler);
                return key;
            }
            return null;
        };
        /**
         * 移除事件监听器
         * @param eventType 事件类型
         * @param key 事件标识
         */
        NavigationEventService.prototype.removeEventListener = function (eventType, key) {
            if (eventType === TAB_EVENT.onTabClosed) {
                return this.onClosedListeners.delete(key);
            }
            else if (eventType === TAB_EVENT.onTabClosing) {
                return this.onClosingListeners.delete(key);
            }
            return false;
        };
        /**
         * 清空事件监听器
         * @param eventType 事件类型
         */
        NavigationEventService.prototype.clearEventListener = function (eventType) {
            if (eventType === TAB_EVENT.onTabClosed) {
                this.onClosedListeners.clear();
            }
            else if (eventType === TAB_EVENT.onTabClosing) {
                this.onClosingListeners.clear();
            }
        };
        /**
         * 刷新组件数据
         */
        NavigationEventService.prototype.formReload = function () {
            try {
                // tslint:disable-next-line: no-string-literal
                this['context']['frameContext']['appContext']['refresh']();
            }
            catch (_a) { }
        };
        NavigationEventService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NavigationEventService.ctorParameters = function () {
            return [
                { type: RuntimeFrameworkService },
                { type: MenuStateService },
                { type: QuerystringService }
            ];
        };
        return NavigationEventService;
    }());

    var FARRIS_FORM_COMPONENTS = new core.InjectionToken('表单弹出窗口或隐藏组件列表');
    /**
     * 表单服务
     * @scope FormModule
     */
    var FarrisFormService = /** @class */ (function () {
        function FarrisFormService(initCtrls) {
            if (initCtrls === void 0) {
                initCtrls = {};
            }
            this.controls = {};
            if (!initCtrls) {
                initCtrls = {};
            }
            this.controls = __assign({}, initCtrls);
        }
        FarrisFormService.prototype.append = function (key, cmpIns) {
            this.controls[key] = cmpIns;
        };
        FarrisFormService.prototype.getControls = function (key) {
            if (this.controls[key]) {
                return this.controls[key];
            }
            else {
                console.warn("\u672A\u627E\u5230Key\u4E3A" + key + "\u7684\u7EC4\u4EF6\uFF01");
                return null;
            }
        };
        FarrisFormService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FarrisFormService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [FARRIS_FORM_COMPONENTS,] }] }
            ];
        };
        return FarrisFormService;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-08-02 15:31:34
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2020-03-03 09:33:43
     */
    // tslint:disable: no-string-literal max-line-length
    var APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';
    /**
     * 导航服务
     * @scope FormModule
     */
    var NavigationService = /** @class */ (function () {
        function NavigationService(runtimeFrameworkService, menuStateService, navigationEventService, querystringService, frameContext, injector, languageService
        // @Optional() private pageModalService: FEPageModalService,
        // @Optional() private farrisFormService: FarrisFormService,
        // @Optional() private languageService: LanguageService
        ) {
            this.runtimeFrameworkService = runtimeFrameworkService;
            this.menuStateService = menuStateService;
            this.navigationEventService = navigationEventService;
            this.querystringService = querystringService;
            this.frameContext = frameContext;
            this.injector = injector;
            this.languageService = languageService;
            // appId不同于tabId，每次表单实例化时都会重新生成
            var appId = this.formAppContext && this.formAppContext.ApplicationId;
            var tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            // 已经编译的表单，使用appId记录hash
            if (appId) {
                var appContextManager = window[APP_CONTEXT_MANAGER] || new Map();
                if (appContextManager && !appContextManager.has(appId)) {
                    appContextManager.set(appId, { hash: window.location.hash });
                    window[APP_CONTEXT_MANAGER] = appContextManager;
                }
            }
            if (tabId) {
                var formEventServices = window['formEventServices'] || new Map();
                // tabId、appId都存在时，使用appId替换tabId
                if (appId) {
                    tabId = appId;
                }
                if (formEventServices && formEventServices.has(tabId)) {
                    this.navigationEventService = formEventServices.get(tabId);
                }
                else {
                    this.navigationEventService.registerEvent();
                    formEventServices.set(tabId, this.navigationEventService);
                    this.navigationEventService.frameContext = this.frameContext;
                    window['formEventServices'] = formEventServices;
                    this.registerDestroyEvent(tabId);
                }
            }
            if (!languageService) {
                this.languageService = new LanguageService();
            }
        }
        Object.defineProperty(NavigationService.prototype, "context", {
            set: function (context) {
                this.navigationEventService['context'] = context;
                this['commandContext'] = context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationService.prototype, "formAppContext", {
            /**
             * 获取整个表单的appcontext（除module上的appcontext）
             */
            get: function () {
                if (this.frameContext) {
                    var appContext = this.frameContext.appContext;
                    // tslint:disable-next-line: max-line-length
                    while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(devkit.FrameContext, null) !== null) {
                        appContext = appContext.parent;
                    }
                    return appContext;
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationService.prototype, "querystrings", {
            get: function () {
                var hash = window.location.hash;
                var appId = this.formAppContext && this.formAppContext.ApplicationId;
                if (appId) {
                    var appContextManager = window[APP_CONTEXT_MANAGER];
                    var appContext = appContextManager && appContextManager.get(appId);
                    hash = appContext && appContext.hash || hash;
                }
                var params = this.querystringService.parse(hash);
                if (params) {
                    params.formToken = this.runtimeFrameworkService.formToken;
                }
                return params;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationService.prototype, "formNotifyService", {
            /**
             * 提示服务
             */
            get: function () {
                return this.injector && this.injector.get(FormNotifyService, null);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 注册销毁事件
         * @param tabId
         */
        NavigationService.prototype.registerDestroyEvent = function (tabId) {
            var _this = this;
            if (this.frameContext && this.frameContext.destorySignal) {
                this.frameContext.destorySignal.subscribe(function () {
                    _this.navigationEventService = null;
                });
            }
            if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {
                this.frameContext.appContext.destorySignal.subscribe(function () {
                    var formEventServices = window['formEventServices'];
                    if (formEventServices) {
                        formEventServices.delete(tabId);
                    }
                    var appContextManager = window[APP_CONTEXT_MANAGER];
                    if (appContextManager) {
                        appContextManager.delete(tabId);
                    }
                });
            }
        };
        // #region 接口
        /**
         * 打开菜单
         * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
         * @param funcId 菜单Id
         * @param params 参数
         * @param reload 是否重新刷新
         * @param enableRefresh 启用数据刷新
         * @param tabName tab标题
         * @param destructuring 是否解构参数
         */
        NavigationService.prototype.openMenu = function (tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
            if (!funcId && this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (tabName) {
                tabName = this.translate(tabName);
            }
            var queryStringParams = this.buildParamMap(params);
            destructuring = this.convertToBoolean(destructuring, false);
            if (destructuring === true) {
                queryStringParams = this.buildParam(params);
            }
            // const paramsMap = this.buildParamMap(params);
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            var options = {
                tabId: tabId,
                funcId: funcId,
                appType: rtfCommon.AppType.Menu,
                queryStringParams: queryStringParams,
                entityParams: queryStringParams,
                appId: undefined,
                appEntrance: undefined,
                isReload: reload,
                tabName: tabName || null
            };
            // 启用数据刷新参数为true或者没有定义，则按刷新处理
            // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
            // null false "false" "true" undefined
            enableRefresh = this.convertToBoolean(enableRefresh, true);
            if (enableRefresh === true) {
                var frameworkTabId = tabId ? funcId + "_" + tabId : funcId;
                this.menuStateService.addMenuState(currentTabId, frameworkTabId);
            }
            this.runtimeFrameworkService.openMenu(options);
        };
        /**
         * 打开菜单（流）
         * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
         * @param funcId 菜单Id
         * @param params 参数
         * @param reload 是否重新刷新
         * @param enableRefresh 启用数据刷新
         * @param destructuring 解构参数
         */
        NavigationService.prototype.openMenu$ = function (tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
            if (!funcId && this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (tabName) {
                tabName = this.translate(tabName);
            }
            var queryStringParams = this.buildParamMap(params);
            destructuring = this.convertToBoolean(destructuring, false);
            if (destructuring === true) {
                queryStringParams = this.buildParam(params);
            }
            // const paramsMap = this.buildParamMap(params);
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            var options = {
                tabId: tabId,
                funcId: funcId,
                appType: rtfCommon.AppType.Menu,
                queryStringParams: queryStringParams,
                entityParams: queryStringParams,
                appId: undefined,
                appEntrance: undefined,
                isReload: reload,
                tabName: tabName || null
            };
            // 启用数据刷新参数为true或者没有定义，则按刷新处理
            enableRefresh = this.convertToBoolean(enableRefresh, true);
            if (enableRefresh === true) {
                var frameworkTabId = tabId ? funcId + "_" + tabId : funcId;
                this.menuStateService.addMenuState(currentTabId, frameworkTabId);
            }
            return this.runtimeFrameworkService.openMenu$(options);
        };
        /**
         * 打开菜单(带维度)
         * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
         * @param funcId 菜单Id
         * @param params 参数
         * @param reload 是否重新刷新
         * @param enableRefresh 启用数据刷新
         * @param dim1 dim1
         * @param dim2 dim2
         * @param destructuring 解构参数
         */
        NavigationService.prototype.openMenuWithDimension = function (tabId, funcId, params, enableRefresh, dim1, dim2, tabName, metadataId, destructuring) {
            if (!funcId && this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (tabName) {
                tabName = this.translate(tabName);
            }
            if (metadataId === undefined || metadataId === null) {
                metadataId = '';
            }
            var queryStringParams = this.buildParamMap(params);
            destructuring = this.convertToBoolean(destructuring, false);
            if (destructuring === true) {
                queryStringParams = this.buildParam(params);
            }
            // const paramsMap = this.buildParamMap(params);
            queryStringParams.set('dim1', dim1 ? dim1 : 'public');
            queryStringParams.set('dim2', dim2 ? dim2 : 'public');
            queryStringParams.set('metadataId', metadataId);
            queryStringParams.set('isRtc', '1');
            queryStringParams.set('isRootMetadata', 'true');
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            var options = {
                tabId: tabId,
                funcId: funcId,
                appType: rtfCommon.AppType.Menu,
                queryStringParams: queryStringParams,
                entityParams: queryStringParams,
                appId: undefined,
                appEntrance: undefined,
                isReload: false,
                tabName: tabName || null
            };
            // 启用数据刷新参数为true或者没有定义，则按刷新处理
            // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
            // null false "false" "true" undefined
            enableRefresh = this.convertToBoolean(enableRefresh, true);
            if (enableRefresh === true) {
                var frameworkTabId = tabId ? funcId + "_" + tabId : funcId;
                this.menuStateService.addMenuState(currentTabId, frameworkTabId);
            }
            this.runtimeFrameworkService.openMenu(options);
        };
        /**
         * 打开应用
         * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
         * @param appId 应用Id
         * @param appEntrance 应用入口
         * @param params 参数
         * @param reload 是否重新刷新
         * @param tabName tab标题
         * @param enableRefresh 启用数据刷新
         * @param destructuring 解构参数
         */
        NavigationService.prototype.openApp = function (tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
            if (!appId && this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (tabName) {
                tabName = this.translate(tabName);
            }
            var queryStringParams = this.buildParamMap(params);
            destructuring = this.convertToBoolean(destructuring, false);
            if (destructuring === true) {
                queryStringParams = this.buildParam(params);
            }
            // const paramsMap = this.buildParamMap(params);
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            var options = {
                tabId: tabId,
                appId: appId,
                appEntrance: appEntrance,
                funcId: undefined,
                appType: rtfCommon.AppType.App,
                queryStringParams: queryStringParams,
                entityParams: queryStringParams,
                isReload: reload,
                tabName: tabName || null
            };
            enableRefresh = this.convertToBoolean(enableRefresh, true);
            if (enableRefresh === true) {
                var frameworkTabId = tabId ? appId + "_" + appEntrance + "_" + tabId : appId + "_" + appEntrance;
                this.menuStateService.addMenuState(currentTabId, frameworkTabId);
            }
            this.runtimeFrameworkService.openMenu(options);
        };
        /**
         * 打开应用(流式)
         * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
         * @param appId 应用Id
         * @param appEntrance 应用入口
         * @param params 参数
         * @param reload 是否重新刷新
         * @param tabName tab标题
         * @param enableRefresh 启用数据刷新
         * @param destructuring 解构参数
         */
        NavigationService.prototype.openApp$ = function (tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
            if (!appId && this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (tabName) {
                tabName = this.translate(tabName);
            }
            var queryStringParams = this.buildParamMap(params);
            destructuring = this.convertToBoolean(destructuring, false);
            if (destructuring === true) {
                queryStringParams = this.buildParam(params);
            }
            // const paramsMap = this.buildParamMap(params);
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            var options = {
                tabId: tabId,
                appId: appId,
                appEntrance: appEntrance,
                funcId: undefined,
                appType: rtfCommon.AppType.App,
                queryStringParams: queryStringParams,
                entityParams: queryStringParams,
                isReload: reload,
                tabName: tabName || null
            };
            enableRefresh = this.convertToBoolean(enableRefresh, true);
            if (enableRefresh === true) {
                var frameworkTabId = tabId ? appId + "_" + appEntrance + "_" + tabId : appId + "_" + appEntrance;
                this.menuStateService.addMenuState(currentTabId, frameworkTabId);
            }
            return this.runtimeFrameworkService.openMenu$(options);
        };
        /**
         * 关闭
         * @param onCloseing 关闭前事件处理器
         */
        NavigationService.prototype.close = function () {
            var options = this.querystrings;
            var _a = this.findDialog(), isInDialog = _a.isDialogComponent, rootComponent = _a.rootComponent;
            if (isInDialog) {
                var modalRefFactory = this.get(rootComponent, 'dialogRef');
                var modalRef = null;
                if (typeof modalRefFactory === 'function') {
                    var refs = modalRefFactory();
                    modalRef = refs && refs.modalRef;
                }
                else {
                    modalRef = modalRefFactory;
                }
                modalRef && modalRef['close']();
                return;
            }
            options.token = options.formToken;
            this.runtimeFrameworkService.beforeCloseMenu(options);
        };
        /**
         * 强制关闭
         */
        NavigationService.prototype.destory = function () {
            var options = this.querystrings;
            options.token = options.formToken;
            this.runtimeFrameworkService.closeMenu(options);
        };
        /**
         *
         * @param params params
         * @deprecated 待废弃，与buildParamMap重复
         */
        NavigationService.prototype.parseParams = function (params) {
            if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
                params = {};
            }
            var paramMap = new Map();
            if (typeof params === 'object') {
                params = JSON.stringify(params);
            }
            params = window['encodeURIComponent'](params);
            paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
            return paramMap;
        };
        /**
         * 注册事件监听器
         * @param eventType 事件类型 onTabClosed
         * @param handler 处理器
         * @returns string 返回事件标识
         */
        NavigationService.prototype.addEventListener = function (eventType, handler) {
            return this.navigationEventService.addEventListener(eventType, handler);
        };
        /**
         * 移除事件监听器
         * @param eventType 事件类型 onTabClosed | onTabCloseing
         * @param key 事件标识
         */
        NavigationService.prototype.removeEventListener = function (eventType, key) {
            return this.navigationEventService.removeEventListener(eventType, key);
        };
        /**
         * 清空事件监听器
         * @param eventType 事件类型
         */
        NavigationService.prototype.clearEventListener = function (eventType) {
            this.navigationEventService.clearEventListener(eventType);
        };
        /**
         * 以弹框、侧边栏或新标签页方式打开表单
         * @param mode 打开方式，支持`modal`弹窗、`sidebar`侧边栏、`tab`新标签页
         * @param modalId 弹窗id，如果mode=`modal`且没有url，
         * @param configs 弹窗配置
         * @param url 远端表单url
         * @param tabId 标签页id，modal=tab时必填
         * @param tabType 标签页类型，`menu` 或`app`
         * @param funcOrAppId 菜单或应用id
         * @param appEntrance 应用入口
         * @param params 参数
         * @param tabName 新标签页名称
         * @param enableRefresh 启用启动刷新
         * @param destructuring 是否解构
         */
        NavigationService.prototype.open = function (mode, modalId, url, configs, tabId, tabType, funcOrAppId, appEntrance, params, tabName, enableRefresh, destructuring) {
            var pageModalService = this.injector.get(extendPageModal.FEPageModalService, null);
            if (!pageModalService) {
                throw new Error('get FEPageModalService failed.');
            }
            // 校验参数是否合法
            if (!mode) {
                throw new Error('[NavigationService]->open,mode参数不能为空！');
            }
            if (mode === 'modal' || mode === 'sidebar') {
                if (!modalId && !url) {
                    throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时为空！');
                }
                if (modalId && url) {
                    throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时存在！');
                }
                var uiStateConfig = this.getObjectTypeConfig(params);
                var modalConfig = this.buildConfigs(configs);
                if (mode === 'sidebar') {
                    modalConfig.dialogType = mode;
                }
                var pageModalRef = null;
                if (modalId) {
                    var farrisFormService = this.injector.get(FarrisFormService, null);
                    if (!farrisFormService) {
                        return;
                    }
                    var componentType = farrisFormService.getControls(modalId);
                    var componentRef = this.createComponentRef(componentType, uiStateConfig);
                    pageModalRef = pageModalService.show(componentRef, modalConfig);
                }
                else if (url) {
                    pageModalRef = pageModalService.showByUrl(url, modalConfig);
                }
                if (pageModalRef && !!pageModalRef.content) {
                    pageModalRef.content.isDialogRootComponent = true;
                    pageModalRef.content.dialogRef = pageModalRef;
                    var header = pageModalRef.dialog && pageModalRef.dialog.instance && pageModalRef.dialog.instance.el && pageModalRef.dialog.instance.el.nativeElement && pageModalRef.dialog.instance.el.nativeElement.querySelector(".f-page-header");
                    if (header && pageModalRef.dialog.instance.draggbar) {
                        pageModalRef.dialog.instance.draggbar.handle = header;
                        header.style.cursor = 'move';
                    }
                }
            }
            else if (mode === 'tab') {
                if (!tabId || !tabType || !funcOrAppId) {
                    if (this.formNotifyService) {
                        this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                    }
                    throw new Error('新标签模式时标签页id、标签类型、菜单或应用id均不能为空！');
                }
                if (tabType === 'app' && !appEntrance) {
                    throw new Error('以应用方式打开时入口应用不能为空！');
                }
                if (tabType == 'app') {
                    this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);
                }
                else if (tabType === 'menu') {
                    this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);
                }
            }
            else {
                throw new Error('不支持的模式！');
            }
            // this.pageModalService.
        };
        /**
         * in app navigate
         * @param commands commands
         */
        // public navigate(commands: any[]);
        /**
         * in app navigate
         * @param commands commands
         * @param options options
         * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}
         */
        NavigationService.prototype.navigate = function (commands, options) {
            var router$$1 = this.injector && this.injector.get(router.Router, null);
            var activatedRoute = this.injector && this.injector.get(router.ActivatedRoute, null);
            var queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});
            if (options && options.hasOwnProperty('queryParams')) {
                delete options.queryParams;
            }
            var extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams: queryParams }, options || {});
            if (router$$1) {
                return router$$1.navigate(commands, extras);
            }
            else {
                return null;
            }
        };
        // #endregion
        // #region 私有方法
        /**
         * 封装路由参数
         * @param params 参数
         * @param options 配置参数
         */
        NavigationService.prototype.buildParamMap = function (params, options) {
            if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
                params = {};
            }
            var paramMap = new Map();
            if (options && Object.keys(options).length > 0) {
                if (typeof params !== 'object') {
                    params = JSON.parse(params);
                }
                params = lodash.merge(params, options);
            }
            if (typeof params === 'object') {
                params = JSON.stringify(params);
            }
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            params = window['encodeURIComponent'](params);
            paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
            paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
            return paramMap;
        };
        NavigationService.prototype.buildParam = function (params, options) {
            if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
                params = {};
            }
            var paramMap = new Map();
            if (options && Object.keys(options).length > 0) {
                if (typeof params !== 'object') {
                    params = JSON.parse(params);
                }
                params = lodash.merge(params, options);
            }
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            Object.keys(params).forEach(function (key) {
                paramMap.set(key, params[key]);
            });
            var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
            params = window['encodeURIComponent'](JSON.stringify(params));
            paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
            paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
            return paramMap;
        };
        /**
         * 查找弹窗组件
         */
        NavigationService.prototype.findDialog = function () {
            var frameContext = this.get(this, 'commandContext.frameContext');
            var isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
            var rootComponent = null;
            var parentFrameContext = this.get(frameContext, 'parent');
            while (parentFrameContext != null && !isDialogComponent) {
                frameContext = this.get(frameContext, 'parent');
                parentFrameContext = this.get(parentFrameContext, 'parent');
                isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
            }
            rootComponent = this.get(frameContext, 'frameComponent');
            if (!isDialogComponent) {
                isDialogComponent = this.frameContext.injector.get(INSIDE_DIALOG_TOKEN, false);
                if (isDialogComponent) {
                    var modalRef = this.frameContext.injector.get(MODAL_REF, null);
                    rootComponent = { dialogRef: modalRef };
                }
            }
            return { isDialogComponent: isDialogComponent, rootComponent: rootComponent };
        };
        /**
         * loadsh get
         * @param object 对象
         * @param path 路径
         * @param defaultVal 默认值
         */
        NavigationService.prototype.get = function (object, path, defaultVal) {
            if (defaultVal === void 0) {
                defaultVal = null;
            }
            var PATH = Array.isArray(path)
                ? path
                : path.split('.').filter(function (i) { return i.length; });
            if (!PATH.length) {
                return object === undefined ? defaultVal : object;
            }
            if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {
                return defaultVal;
            }
            return this.get(object[PATH.shift()], PATH, defaultVal);
        };
        NavigationService.prototype.convertToBoolean = function (value, defaultVal) {
            if (defaultVal === void 0) {
                defaultVal = false;
            }
            if (typeof value === 'undefined' || value === null) {
                value = defaultVal;
            }
            if (typeof value === 'string') {
                value = value || String(defaultVal);
                value = value === 'true' ? true : false;
            }
            return value;
        };
        /**
         * 翻译资源项
         * @param key 资源项key
         */
        NavigationService.prototype.translate = function (key) {
            var translateService = this.injector && this.injector.get(devkit.TranslateToken, null) || null;
            if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {
                key = key.replace('{{', '').replace('}}', '').trim();
                return translateService.transform(key, null);
            }
            return key;
        };
        // #endregion
        //#region 弹窗相关方法
        NavigationService.prototype.buildConfigs = function (config) {
            var _this = this;
            var languageService = this.injector.get(LanguageService, null);
            if (!languageService) {
                languageService = LanguageService.getInstance();
            }
            var defaultConfigs = {
                title: languageService && languageService.defaultDialogTitle || '',
                width: 800,
                height: 500,
                showButtons: false
            };
            var objectTypeConfig = this.getObjectTypeConfig(config);
            var configs = Object.assign(defaultConfigs, objectTypeConfig);
            var onClosingHandler = configs.beforeClose;
            var refresh = configs['refresh'] || {};
            var refreshCommandName = refresh && refresh.commandName || null;
            var refreshFrameId = refresh && refresh.frameId || null;
            // tslint:disable: no-string-literal
            var cancelChanges = configs['cancelChanges'] || false;
            configs.beforeClose = function (ref) {
                if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                    return onClosingHandler(ref).pipe(operators.switchMap(function (result) {
                        if (result) {
                            if (cancelChanges) {
                                return _this.cancelChanges(ref).pipe(operators.switchMap(function () { return _this.refreshForm(refreshCommandName, refreshFrameId); }));
                            }
                        }
                        return rxjs.of(result);
                    }));
                }
                else {
                    if (cancelChanges) {
                        return _this.cancelChanges(ref).pipe(operators.switchMap(function () { return _this.refreshForm(refreshCommandName, refreshFrameId); }));
                    }
                    else {
                        return rxjs.of(true);
                    }
                }
            };
            return configs;
        };
        NavigationService.prototype.getObjectTypeConfig = function (config) {
            var objectTypeConfig;
            if (typeof config === 'undefined') {
                config = {};
            }
            if (typeof config === 'string') {
                if (config.length) {
                    try {
                        objectTypeConfig = JSON.parse(config);
                    }
                    catch (_a) {
                        throw new Error(config + '不是合法的json字符串');
                    }
                }
                else {
                    objectTypeConfig = {};
                }
            }
            else if (typeof config === 'object') {
                objectTypeConfig = Object.assign({}, config);
            }
            else {
                throw new Error('填写对象格式或json字符串');
            }
            return objectTypeConfig;
        };
        /**
         * 取消服务器变更集
         */
        NavigationService.prototype.cancelChanges = function (ref) {
            if (ref && ref.modalRef && ref.modalRef.content) {
                var component = ref.modalRef.content;
                if (component && component.context) {
                    var repository = component.context.repository || null;
                    if (repository) {
                        return repository.cancelChanges().pipe(operators.switchMap(function () { return rxjs.of(true); }));
                    }
                }
            }
            return rxjs.of(true);
        };
        NavigationService.prototype.refreshForm = function (refreshCommandName, refreshFrameId) {
            if (refreshCommandName && refreshFrameId) {
                var frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);
                if (frameContext) {
                    var viewModel = frameContext.viewModel;
                    return viewModel[refreshCommandName]().pipe(operators.map(function () { return true; }));
                }
            }
            return rxjs.of(true);
        };
        NavigationService.prototype.createComponentRef = function (componentType, uiStateObject) {
            var componentRef;
            var frameContext = this.getFrameContext();
            var componentFactoryResolver = this.getComponentFactoryResolver();
            if (frameContext && componentFactoryResolver) {
                var contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);
                var modalContentInjector = core.ReflectiveInjector.resolveAndCreate([], frameContext.injector);
                componentRef = contentCmptFactory.create(modalContentInjector);
                if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                    if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                        Object.keys(uiStateObject).forEach(function (item) {
                            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                        });
                    }
                    // 附加isDialog参数
                    componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                }
            }
            return componentRef;
        };
        /**
         * 兼容旧弹窗，获取frameContext
         */
        NavigationService.prototype.getFrameContext = function () {
            if (this.frameContext) {
                return this.frameContext;
            }
            if (this['context'] && this['context']['frameContext']) {
                return this['context']['frameContext'];
            }
            return null;
        };
        /**
         * 兼容旧弹窗，获取ComponentFactoryResolver
         */
        NavigationService.prototype.getComponentFactoryResolver = function () {
            var frameContext = this.getFrameContext();
            var componentFactoryResolver;
            if (frameContext) {
                componentFactoryResolver = frameContext.injector.get(core.ComponentFactoryResolver);
            }
            return componentFactoryResolver;
        };
        NavigationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NavigationService.ctorParameters = function () {
            return [
                { type: RuntimeFrameworkService },
                { type: MenuStateService },
                { type: NavigationEventService },
                { type: QuerystringService },
                { type: devkit.FrameContext, decorators: [{ type: core.Optional }] },
                { type: core.Injector, decorators: [{ type: core.Optional }] },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return NavigationService;
    }());

    var IS_ADD = 'IS_ADD';
    var LAST_MODIFIED_ID = 'LAST_MODIFIED_ID';
    /**
     * 表单状态工具类
     * @internal
     */
    var EditStateUtil = /** @class */ (function () {
        function EditStateUtil() {
        }
        /**
         * 获取当前行id
         */
        EditStateUtil.getLastModifiedId = function (frameContext) {
            // const lastModifiedId = AppParamUtil.get(frameContext, LAST_MODIFIED_ID);
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            var lastModifiedId = null;
            if (virtualRootFrameContext) {
                lastModifiedId = virtualRootFrameContext.getParam(LAST_MODIFIED_ID);
                return lastModifiedId ? lastModifiedId : null;
            }
            return lastModifiedId;
        };
        /**
         * 设置最后修改的id
         */
        EditStateUtil.setLastModifiedId = function (frameContext, lastModifiedId) {
            // AppParamUtil.set(frameContext, LAST_MODIFIED_ID, lastModifiedId);
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            if (virtualRootFrameContext) {
                virtualRootFrameContext.setParam(LAST_MODIFIED_ID, lastModifiedId);
            }
        };
        /**
         * 获取新增状态
         */
        EditStateUtil.getAddState = function (frameContext) {
            // return AppParamUtil.get(frameContext, IS_ADD);
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            if (virtualRootFrameContext) {
                return virtualRootFrameContext.getParam(IS_ADD);
            }
        };
        /**
         * 设置新增状态
         */
        EditStateUtil.setAddState = function (frameContext, lastModifiedId) {
            // AppParamUtil.set(frameContext, IS_ADD, true);
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            if (virtualRootFrameContext) {
                virtualRootFrameContext.setParam(IS_ADD, true);
            }
            this.setLastModifiedId(frameContext, lastModifiedId);
        };
        /**
         * 取消新增状态
         */
        EditStateUtil.cancelAddState = function (frameContext) {
            // AppParamUtil.set(frameContext, IS_ADD, false);
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            if (virtualRootFrameContext) {
                virtualRootFrameContext.setParam(IS_ADD, false);
            }
        };
        /**
         * 设置编辑状态
         */
        EditStateUtil.setEditState = function (frameContext, id) {
            // AppParamUtil.set(frameContext, IS_ADD, false);
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            if (virtualRootFrameContext) {
                virtualRootFrameContext.setParam(IS_ADD, false);
            }
            this.setLastModifiedId(frameContext, id);
        };
        return EditStateUtil;
    }());

    /**
     * 应用上下文变量工具类
     * @internal
     */

    var FormNotifyStrategyService = /** @class */ (function () {
        function FormNotifyStrategyService() {
        }
        /**
         * 消息提示
         * @param formNotifyService formNotifyService
         * @param content content
         */
        FormNotifyStrategyService.info = function (formNotifyService, content) {
            var search = window.location.hash;
            var _a = FormNotifyStrategyService.querystring(search).odocDisableNotification, odocDisableNotification = _a === void 0 ? '' : _a;
            if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {
                return;
            }
            formNotifyService.info(content, { hideTitle: true });
        };
        /**
         * 成功提示
         * @param formNotifyService formNotifyService
         * @param content content
         */
        FormNotifyStrategyService.success = function (formNotifyService, content) {
            var search = window.location.hash;
            var _a = FormNotifyStrategyService.querystring(search).odocDisableNotification, odocDisableNotification = _a === void 0 ? '' : _a;
            if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {
                return;
            }
            formNotifyService.success(content, { hideTitle: true });
        };
        FormNotifyStrategyService.querystring = function (querystring) {
            var urlSearchParams = new URLSearchParams(querystring);
            var result = {};
            urlSearchParams.forEach(function (value, key) {
                result[key] = value;
            });
            return result;
        };
        return FormNotifyStrategyService;
    }());

    /**
     * 命令服务
     * @scope FrameConmponent
     */
    var CommandService = /** @class */ (function () {
        function CommandService(viewModel, appContext) {
            this.viewModel = viewModel;
            this.appContext = appContext;
        }
        Object.defineProperty(CommandService.prototype, "context", {
            /**
             * context取值方法
             */
            get: function () {
                return this.innerContext;
            },
            /**
             * context设值方法
             */
            set: function (context) {
                this.innerContext = context;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 执行命令
         * @param commandName 命令名称
         * @param frameId 框架ID
         */
        CommandService.prototype.execute = function (commandName, frameId) {
            if (!commandName || commandName === '' || commandName === 'undefined') {
                return;
            }
            var viewModel = this.viewModel;
            if (frameId) {
                var targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);
                viewModel = targetContext.viewModel;
            }
            return viewModel[commandName]();
        };
        /**
         * 等待BeSession创建
         * @returns 最新创建出来的BeSession
         */
        CommandService.prototype.waitForBeSession = function () {
            var frameContext = this.context.frameContext;
            var befRepository = frameContext.repository;
            var sessionService = befRepository.restService.sessionService;
            return sessionService.getBeSessionId().pipe(operators.filter(function (beSessionId) {
                return beSessionId !== null;
            }), operators.take(1));
        };
        /**
         * 提取某个任务的执行结果
         * @param taskName 任务名称
         * @reutrn 返回taskName对应任务的执行结果
         */
        CommandService.prototype.extractResult = function (taskName) {
            var results = this.context.results;
            return results[taskName];
        };
        /**
         * 暂停当前组件的行切换事件抛出
         */
        CommandService.prototype.suspendFrameContextRowSelectedEvent = function (frameId) {
            var frameContext = this.viewModel.frameContext;
            if (frameId) {
                frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            }
            if (frameContext) {
                frameContext.bindingData.rowSelectedEventSuspend = true;
            }
        };
        CommandService.prototype.resumeFrameContextRowSelectedEvent = function (frameId) {
            var frameContext = this.viewModel.frameContext;
            if (frameId) {
                frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            }
            if (frameContext) {
                frameContext.bindingData.rowSelectedEventSuspend = false;
            }
        };
        CommandService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommandService.ctorParameters = function () {
            return [
                { type: devkit.ViewModel },
                { type: devkit.AppContext }
            ];
        };
        return CommandService;
    }());

    var VerifyService = /** @class */ (function () {
        function VerifyService() {
        }
        VerifyService.focusElement = function (selector, elementRef) {
            var nativeElement = elementRef && elementRef.nativeElement || document;
            var target = nativeElement.ownerDocument.getElementById(selector);
            if (target) {
                if (target.tagName !== 'INPUT') {
                    var input = target.getElementsByTagName('input');
                    if (input.length) {
                        target = input[0];
                    }
                }
                target.focus();
            }
        };
        return VerifyService;
    }());

    /**
     * 表单验证服务
     * @scope FrameComponent
     */
    var ValidationService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ValidationService(repository, frameContext, notifyService, languageService) {
            this.repository = repository;
            this.frameContext = frameContext;
            this.notifyService = notifyService;
            this.languageService = languageService;
            this.validationResults = new rxjs.Subject();
            this.validationAllResult = new rxjs.Subject();
            if (!this.languageService) {
                this.languageService = new LanguageService();
            }
        }
        /**
         * 验证表单内的所有表单
         */
        ValidationService.prototype.validate = function () {
            var _this = this;
            this.repository.getList().subscribe(function (result) {
                var e_1, _a;
                try {
                    for (var result_1 = __values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                        var entity = result_1_1.value;
                        entity.validate().subscribe(function (result) {
                            if (!result.isValid) {
                                alert(result.message);
                                _this.validationResults.next(result);
                            }
                        });
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (result_1_1 && !result_1_1.done && (_a = result_1.return))
                            _a.call(result_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            });
            return this.validationResults;
        };
        /**
         * 校验当前行
         */
        ValidationService.prototype.validateCurrentRow = function () {
            var _this = this;
            var entityTypeInfo = this.repository.entityTypeInfo;
            // 组合表单只校验当前按钮所在的表单
            var primaryValue = this.frameContext.bindingData.list.currentId;
            if (!primaryValue) {
                return of.of(true);
            }
            // 首先校验实体不能为空规则
            var entity = this.repository.entityCollection.getEntityById(primaryValue);
            if (!entity) {
                return of.of(true);
            }
            var entities = [entity];
            var namespace = this.frameContext.namespace;
            var frameContexts = [];
            // 修复使用相同be创建的vo的组合表单校验时多个表单校验规则被合并的问题
            // TODO: 目前未考虑组合表单统一保存的场景，后续支持组合表单统一保存时再修改
            if (namespace !== null) {
                // 存在命名空间，说明表单较新，可以依赖该特性
                frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
            }
            else {
                // 表单较老，获取所有的上下文，在校验阶段过滤规则
                frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
            }
            var isModal = this.isInDialog();
            var hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
            var rootViewModel = this.frameContext.root.viewModel;
            if (isModal && hasOwnVerifyDetailService) {
                rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
            }
            var toValidate = false;
            var formErrors = [];
            frameContexts.forEach(function (frameContext) {
                if (frameContext.form && frameContext.form.enableValidate) {
                    toValidate = true;
                }
            });
            if (!toValidate || entities.length < 1) {
                return of.of(true);
            }
            rootViewModel.verifyInformations = [];
            var formValid = true;
            var formValidationRules = new Map();
            frameContexts.forEach(function (formContext) {
                var bindingObject = formContext.bindingData.getObject();
                // 通知所有bindingData,
                bindingObject && bindingObject.setShowValidationMsg(true);
                if (formContext.form && formContext.form.enableValidate) {
                    // 获取当前表单上的所有验证规则
                    var currentFormValidationRules = formContext.form.getValidationRules();
                    currentFormValidationRules.forEach(function (rules, path) {
                        if (formValidationRules.has(path)) {
                            rules.forEach(function (rule) { return formValidationRules.get(path).push(rule); });
                        }
                        else {
                            formValidationRules.set(path, __spread(rules));
                        }
                    });
                    formContext.form.setShowValidationMsg(true);
                    // 逐个调用表单的验证，验证前端表单规则
                    if (!formContext.form.isFormValid()) {
                        formErrors.push(formContext.form);
                        formValid = false;
                    }
                }
            });
            // 验证所有实体
            var observableList = entities.map(function (entity) {
                var index = _this.frameContext.bindingData.list.getIndexById(entity.primaryValue);
                return entity.validate(undefined, undefined, formValidationRules, null, _this.frameContext);
            });
            var result$ = zip.zip.apply(void 0, __spread(observableList)).pipe(operators.tap(function (resultList) {
                frameContexts.forEach(function (formContext) {
                    if (!formContext.form.enableValidate) {
                        return;
                    }
                    var handleErrors = function (errors) {
                        errors.forEach(function (validationError) {
                            if (validationError.children && validationError.children.length) {
                                handleErrors(validationError.children);
                            }
                            var errMsgObj = {};
                            var id = '';
                            var findId = function (target) {
                                if (target && target.data && target.data.id) {
                                    id = target.data.id;
                                    return;
                                }
                                else if (target[devkit.PARENT_CLASS]) {
                                    findId(target[devkit.PARENT_CLASS]);
                                }
                            };
                            findId(validationError.target);
                            // 实体验证出错，需要将错误展示到界面上
                            // 实体不一定是当前行
                            var parentPathData = {
                                path: [],
                                isUdt: false,
                                isGrid: false
                            };
                            if (validationError.target) {
                                parentPathData = validationError.target.getPaths();
                            }
                            var bindingPath = '/' + parentPathData.path.join('/');
                            if (validationError.constraints) {
                                Object.keys(validationError.constraints).forEach(function (key) {
                                    errMsgObj[key] = {
                                        name: validationError.constraints[key]
                                    };
                                    // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                    //   rootViewModel['verifyInformations'].push({
                                    //     id: id,
                                    //     title: key,
                                    //     msg: validationError.constraints[key],
                                    //     type: 'warn'
                                    //   })
                                    // }
                                });
                            }
                            var paths = parentPathData.path.concat(validationError.property);
                            //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                            // 将错误信息更新到formControl上
                            formContext.bindingData.changes.next({
                                type: devkit.ChangeType.UpdateErrors,
                                id: id,
                                path: paths,
                                isUdt: parentPathData.isUdt,
                                isGrid: parentPathData.isGrid,
                                value: validationError.value,
                                errors: errMsgObj
                            });
                            //}
                        });
                    };
                    // 展开验证结果
                    var isValidList = resultList.map(function (result) { return result.isValid; });
                    // 保存前先调用实体上的验证规则，全部通过之后才保存
                    // 实体验证通过
                    if (isValidList.filter(function (x) { return x; }).length === observableList.length) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: devkit.ChangeType.UpdateErrors,
                            path: []
                        });
                        // 验证成功后隐藏输入时的验证
                        if (formValid) {
                            var bindingObject = formContext.bindingData.getObject();
                            bindingObject && bindingObject.setShowValidationMsg(false);
                            var form = formContext.form;
                            if (form) {
                                form.setShowValidationMsg(false);
                            }
                        }
                    }
                    else {
                        resultList.forEach(function (result) {
                            if (result.isValid) {
                                // 清除验证通过的错误
                                formContext.bindingData.changes.next({
                                    type: devkit.ChangeType.UpdateErrors,
                                    path: []
                                });
                            }
                            else {
                                handleErrors(result.errors);
                            }
                        });
                    }
                });
            }), operators.switchMap(function (resultList) {
                var isValidated = true;
                var errors = [];
                resultList.forEach(function (result) {
                    if (!result.isValid) {
                        isValidated = false;
                    }
                    errors.push.apply(errors, __spread(result.errors));
                });
                if (errors.length > 0) {
                    _this.collectValidationErrors(rootViewModel, errors, _this.frameContext.namespace);
                }
                // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);
                var verifyInformations = rootViewModel.verifyInformations;
                if (isModal && hasOwnVerifyDetailService) {
                    verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace === namespace; });
                }
                rootViewModel.verifycationChanged.next(verifyInformations);
                _this.handleErrorClickEvent();
                if (isValidated && !formValid) {
                    // 实体校验通过但表单校验不通过，此时实体和表单存在校验规则不一致的情况
                    console.warn('实体和控件校验规则不一致，请确认实体校验规则配置与控件一致。如果配置不一致可能会导致校验失效！');
                }
                // 实体校验通过，实体校验使用的规则是控件+实体，正常实体校验通过后控件校验一定也会通过
                if (isValidated) {
                    var isEntityValid = _this.validateEntityAllowEmptyRule(entityTypeInfo);
                    if (!isEntityValid) {
                        return rxjs.EMPTY;
                    }
                    return of.of(true);
                }
                else {
                    return empty.empty();
                }
            }));
            return result$;
        };
        /**
         * 调用表单和实体上的验证规则, 通过后调用回调cb
         */
        ValidationService.prototype.validateAll = function () {
            var _this = this;
            var entityTypeInfo = this.repository.entityTypeInfo;
            // 组合表单只校验当前按钮所在的表单
            var entities = this.repository.entityCollection.getAllEntities();
            var namespace = this.frameContext.namespace;
            var frameContexts = [];
            if (namespace !== null) {
                // 存在命名空间，说明表单较新，可以依赖该特性
                frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
            }
            else {
                // 表单较老，获取所有的上下文，在校验阶段过滤规则
                frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
            }
            var toValidate = false;
            var formErrors = [];
            frameContexts.forEach(function (frameContext) {
                if (frameContext.form && frameContext.form.enableValidate) {
                    toValidate = true;
                }
            });
            if (!toValidate || entities.length < 1) {
                return of.of(true);
            }
            var isModal = this.isInDialog();
            var hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
            var rootViewModel = this.frameContext.root.viewModel;
            if (isModal && hasOwnVerifyDetailService) {
                rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
            }
            var formValid = true;
            var formValidationRules = new Map();
            frameContexts.forEach(function (formContext) {
                var bindingObject = formContext.bindingData.getObject();
                // 通知所有bindingData,
                bindingObject && bindingObject.setShowValidationMsg(true);
                if (formContext.form && formContext.form.enableValidate) {
                    // 获取当前表单上的所有验证规则
                    var currentFormValidationRules = formContext.form.getValidationRules();
                    currentFormValidationRules.forEach(function (rules, path) {
                        if (formValidationRules.has(path)) {
                            rules.forEach(function (rule) { return formValidationRules.get(path).push(rule); });
                        }
                        else {
                            formValidationRules.set(path, __spread(rules));
                        }
                    });
                    formContext.form.setShowValidationMsg(true);
                    // 逐个调用表单的验证，验证前端表单规则
                    if (!formContext.form.isFormValid()) {
                        formErrors.push(formContext.form);
                        formValid = false;
                    }
                }
            });
            // 触发所有实体的validate事件
            var isMultiEntityValiate = entities.length > 0;
            // 验证所有实体
            var observableList = entities.map(function (entity, index) {
                return entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, _this.frameContext);
            });
            var result$ = zip.zip.apply(void 0, __spread(observableList)).pipe(operators.tap(function (resultList) {
                frameContexts.forEach(function (formContext) {
                    if (!formContext.form.enableValidate) {
                        return;
                    }
                    var handleErrors = function (errors) {
                        errors.forEach(function (validationError) {
                            if (validationError.children && validationError.children.length) {
                                handleErrors(validationError.children);
                            }
                            var errMsgObj = {};
                            var id = '';
                            var findId = function (target) {
                                if (target && target.data && target.data.id) {
                                    id = target.data.id;
                                    return;
                                }
                                else if (target[devkit.PARENT_CLASS]) {
                                    findId(target[devkit.PARENT_CLASS]);
                                }
                            };
                            findId(validationError.target);
                            // 实体验证出错，需要将错误展示到界面上
                            // 实体不一定是当前行
                            var parentPathData = {
                                path: [],
                                isUdt: false,
                                isGrid: false
                            };
                            if (validationError.target) {
                                parentPathData = validationError.target.getPaths();
                            }
                            var bindingPath = '/' + parentPathData.path.join('/');
                            if (validationError.constraints) {
                                Object.keys(validationError.constraints).forEach(function (key) {
                                    errMsgObj[key] = {
                                        name: validationError.constraints[key]
                                    };
                                    // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                    //   rootViewModel['verifyInformations'].push({
                                    //     id: id,
                                    //     title: key,
                                    //     msg: validationError.constraints[key],
                                    //     type: 'warn'
                                    //   })
                                    // }
                                });
                            }
                            var paths = parentPathData.path.concat(validationError.property);
                            //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                            // 将错误信息更新到formControl上
                            formContext.bindingData.changes.next({
                                type: devkit.ChangeType.UpdateErrors,
                                id: id,
                                path: paths,
                                isUdt: parentPathData.isUdt,
                                isGrid: parentPathData.isGrid,
                                value: validationError.value,
                                errors: errMsgObj
                            });
                            //}
                        });
                    };
                    // 展开验证结果
                    var isValidList = resultList.map(function (result) { return result.isValid; });
                    // 保存前先调用实体上的验证规则，全部通过之后才保存
                    // 实体验证通过
                    if (isValidList.filter(function (x) { return x; }).length === observableList.length) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: devkit.ChangeType.UpdateErrors,
                            path: []
                        });
                        // 验证成功后隐藏输入时的验证
                        if (formValid) {
                            var bindingObject = formContext.bindingData.getObject();
                            bindingObject && bindingObject.setShowValidationMsg(false);
                            var form = formContext.form;
                            if (form) {
                                form.setShowValidationMsg(false);
                            }
                        }
                    }
                    else {
                        resultList.forEach(function (result) {
                            if (result.isValid) {
                                // 清除验证通过的错误
                                formContext.bindingData.changes.next({
                                    type: devkit.ChangeType.UpdateErrors,
                                    path: []
                                });
                            }
                            else {
                                handleErrors(result.errors);
                            }
                        });
                    }
                });
            }), operators.switchMap(function (resultList) {
                var isValidated = true;
                var errors = [];
                resultList.forEach(function (result) {
                    if (!result.isValid) {
                        isValidated = false;
                    }
                    errors.push.apply(errors, __spread(result.errors));
                });
                if (errors.length > 0) {
                    _this.collectValidationErrors(rootViewModel, errors, _this.frameContext.namespace);
                }
                var verifyInformations = rootViewModel.verifyInformations;
                if (isModal && hasOwnVerifyDetailService) {
                    verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace === namespace; });
                }
                // 因为校验累加的缘故，导致之前的校验信息一直存在，只能通过校验结果来确定是否还有错误信息
                if (isValidated && formValid) {
                    verifyInformations = rootViewModel.verifyInformations = [];
                }
                rootViewModel.verifycationChanged.next(verifyInformations);
                _this.handleErrorClickEvent();
                if (isValidated) {
                    var isEntityValid = _this.validateEntityAllowEmptyRule(entityTypeInfo);
                    if (!isEntityValid) {
                        return rxjs.EMPTY;
                    }
                    return of.of(true);
                }
                else {
                    return empty.empty();
                }
            }));
            return result$;
        };
        /**
         * 校验实体是否满足不能为空的规则
         * @param entity 主实体
         */
        ValidationService.prototype.validateEntityAllowEmptyRule = function (entityTypeInfo) {
            var _this = this;
            // 确认实体各个层级中是否存在不能为空的规则
            var paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);
            if (!paths || paths.length < 1) {
                return true;
            }
            // 找到所有不合法的bindingPaths
            var invalidPaths = paths.filter(function (path) {
                var bindingPaths = path.split('/').filter(function (p) { return p; });
                var bindingList = _this.frameContext.bindingData.getValue(bindingPaths);
                if (!bindingList || bindingList.length < 1) {
                    return true;
                }
                return false;
            });
            // 有实体必填，但实体数据为空
            if (invalidPaths.length > 0) {
                var tableNames_1 = [];
                invalidPaths.forEach(function (path) {
                    //const frameContexts = this.getFrameContextByBindingPath(path.split('/'));
                    //const frameComponents = frameContexts.map(frameContext => frameContext.frameComponent);
                    // 找到所有容器类组件
                    //const containerComponents = frameComponents.filter(frameComponent => [ComponentType.farrisDataGridComponent, ComponentType.farrisTreeTalbeComponent, ComponentType.kendoGridComponent, ComponentType.primengTreeComponent].includes(frameComponent.componentType));
                    //if (!(!containerComponents || containerComponents.length < 1)) {
                    var viewModelName = _this.getViewModelNameByBindingPaths(path.split('/')) || "\u7ED1\u5B9A\u8DEF\u5F84" + path;
                    tableNames_1.push(viewModelName);
                    //}
                });
                if (this.notifyService) {
                    this.notifyService.error(tableNames_1.join('，') + " " + this.languageService.tableCanNotEmpty, { hideTitle: true });
                }
                return false;
            }
            return true;
        };
        /**
         *
         * @param bindingPaths path不能为空或/，不支持主表
         */
        ValidationService.prototype.getViewModelNameByBindingPaths = function (bindingPaths) {
            var namespace = this.frameContext.namespace;
            var frameContexts = null;
            if (namespace !== null) {
                // 存在命名空间，说明表单较新，可以依赖该特性
                frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
            }
            else {
                // 表单较老，获取所有的上下文，在校验阶段过滤规则
                frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
            }
            var bindingPath = bindingPaths.filter(function (p) { return p; }).join('/');
            var frameContext = frameContexts.find(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/') === bindingPath; });
            var viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';
            return viewModelName;
        };
        /**
         * 遍历获取所有不能为空的实体的绑定路径
         * @param entityTypeInfo
         * @param results
         * @returns
         */
        ValidationService.prototype.getNotAllowEmptyBindingPaths = function (entityTypeInfo, results) {
            if (results === void 0) {
                results = [];
            }
            if (!entityTypeInfo) {
                return;
            }
            this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, results);
            return results;
        };
        ValidationService.prototype.deepFirstTraversalEntityTypeInfo = function (entityTypeInfo, result, previousValue) {
            var _this = this;
            if (result === void 0) {
                result = [];
            }
            if (previousValue === void 0) {
                previousValue = [];
            }
            // 确认当前实体是否必填
            var isAllowEmpty = this.isAllowEmpty(entityTypeInfo.entityInfo.allowEmpty, previousValue);
            if (isAllowEmpty === false) {
                if (previousValue.length < 1) {
                    result.push('');
                }
                else {
                    result.push(previousValue.join('/'));
                }
            }
            // 获取所有子表
            var list = entityTypeInfo.getPropInfosByGroup(devkit.DataPropGroup.List);
            if (list && list.length > 0) {
                list.forEach(function (propInfo) {
                    var typeInfo = propInfo.typeInfo;
                    if (typeInfo && typeInfo.entityInfo) {
                        previousValue.push(typeInfo.entityInfo.nodeCode);
                        _this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);
                    }
                });
            }
            // 没有下级了，此时应该清空游标，将收集到的路径放到结果集中
            if (previousValue && previousValue.length > 0) {
                previousValue.pop();
            }
        };
        ValidationService.prototype.isAllowEmpty = function (value, paths) {
            if (value === undefined || value === true || value === '') {
                return true;
            }
            // 开发者定义了不能为空的规则
            var frameContexts = this.getFrameContextByBindingPath(paths);
            var caller = this.frameContext.frameComponent;
            if (!frameContexts || frameContexts.length < 1) {
                // 定义了规则但对应的Frame没有渲染
                console.warn("\u7ED1\u5B9A\u8DEF\u5F84 " + paths.join('/') + " \u5B9A\u4E49\u4E86\u4E0D\u80FD\u4E3A\u7A7A\u7684\u89C4\u5219\uFF0C\u4F46\u627E\u4E0D\u5230\u8BE5\u7ED1\u5B9A\u8DEF\u5F84\u5BF9\u5E94\u7684\u7EC4\u4EF6\u3002\u8BF7\u786E\u4FDD\u7EC4\u4EF6\u663E\u9690\u4E0E\u5FC5\u586B\u4E00\u81F4\u3002");
            }
            else {
                caller = frameContexts.pop().frameComponent;
            }
            if (typeof value === 'boolean') {
                return value;
            }
            else if (typeof value === 'string') {
                value = value.trim().startsWith('return') ? value : "return " + value;
                var factory = new Function("\n        var viewModel = this.viewModel;\n        var bindingData = this.bindingData;\n        var context = this.context;\n        " + value + "\n      ");
                return factory.apply(caller);
            }
            else {
                console.warn("\u65E0\u6548\u7684\u5FC5\u586B\u89C4\u5219\u3002");
            }
        };
        ValidationService.prototype.collectValidationErrors = function (rootViewModel, errors, namespace, filter) {
            var _this = this;
            if (filter === void 0) {
                filter = true;
            }
            if (filter) {
                rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace !== namespace; });
            }
            errors.forEach(function (validationError) {
                if (validationError.children && validationError.children.length) {
                    _this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);
                }
                var id = '';
                var findId = function (target) {
                    if (target && target.data && target.data.id) {
                        id = target.data.id;
                        return;
                    }
                    else if (target[devkit.PARENT_CLASS]) {
                        findId(target[devkit.PARENT_CLASS]);
                    }
                };
                findId(validationError.target);
                if (validationError.constraints) {
                    var validationResultTypes = Object.keys(validationError.constraints);
                    if (validationResultTypes.length) {
                        var offset = rootViewModel.verifyInformations.filter(function (item) { return item.namespace === namespace; }).length;
                        var index = rootViewModel.verifyInformations.findIndex(function (item) { return item.namespace === namespace; });
                        index = index === -1 ? 0 : index + offset;
                        rootViewModel.verifyInformations.splice(index, 0, {
                            id: id,
                            namespace: namespace,
                            targetField: validationError.field,
                            index: validationError.index,
                            title: validationError.propertyName,
                            msg: validationError.constraints[validationResultTypes[0]],
                            frameContext: validationError.frameContext,
                            fullPath: validationError.fullPath,
                            type: validationResultTypes[0] === 'required' ? 'empty' : 'error'
                        });
                    }
                }
            });
        };
        /**
         * 重置校验信息（仅当前表单）
         */
        ValidationService.prototype.resetValidation = function () {
            var isDialog = this.isInDialog();
            var rootViewModel = this.frameContext.root.viewModel;
            if (isDialog) {
                rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
            }
            var verifyInformations = rootViewModel.verifyInformations;
            if (verifyInformations.length) {
                var namespace_1 = this.frameContext.namespace;
                if (namespace_1 !== null) {
                    verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace !== namespace_1; });
                }
                rootViewModel.verifyInformations = verifyInformations;
                //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);
            }
            if (rootViewModel && rootViewModel.verifycationChanged) {
                rootViewModel.verifycationChanged.next(verifyInformations);
            }
            return of.of(null);
        };
        /**
         * 是否在弹窗内部
         */
        ValidationService.prototype.isInDialog = function () {
            return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;
        };
        /**
         * 拥有独自的校验提示服务
         */
        ValidationService.prototype.hasOwnVerifyDetailService = function () {
            return this.frameContext.injector.get(uiVerifyDetail.VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get(uiVerifyDetail.VerifyDetailService, null);
        };
        /**
         * 通过bindingPath获取所有匹配的frameContext
         * @param bindingPath
         * @returns
         */
        ValidationService.prototype.getFrameContextByBindingPath = function (bindingPaths) {
            var bindingPath = bindingPaths.filter(function (p) { return p; }).join('/');
            return this.frameContext.appContext.frameContextManager.getFrameContexts().filter(function (frameContext) { return frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/') === bindingPath; });
        };
        Object.defineProperty(ValidationService.prototype, "verifyDetailService", {
            get: function () {
                return this.frameContext.injector.get(uiVerifyDetail.VerifyDetailService, null, core.InjectFlags.Self);
            },
            enumerable: true,
            configurable: true
        });
        ValidationService.prototype.handleErrorClickEvent = function () {
            var _this = this;
            if (this.verifyDetailService && this.verifyDetailService.verifyContainer && this.verifyDetailService.verifyContainer.instance) {
                this.verifyDetailService.verifyContainer.instance.validatorClick.subscribe(function (item) {
                    _this.onErrorItemClick(item);
                });
            }
        };
        ValidationService.prototype.onErrorItemClick = function (item) {
            if (item === void 0) {
                item = { frameContext: null, id: null, targetField: null, fullPath: null };
            }
            var frameContext = item.frameContext, id = item.id, targetField = item.targetField, fullPath = item.fullPath;
            var isGridComponent = frameContext && frameContext.frameComponent.isGridComponent || false;
            if (!isGridComponent) {
                var elementRef = frameContext.injector.get(core.ElementRef, null, core.InjectFlags.Self) || frameContext.injector.get(core.ElementRef, null);
                VerifyService.focusElement(targetField, elementRef);
                this.verifyDetailService.verifyContainer.instance.showList = false;
            }
            else {
                // find grid component
                var grid = frameContext.componentRefManager.getComponentByType(uiDatagrid.DatagridComponent);
                if (grid && targetField && id) {
                    grid.editCell(id, targetField);
                    this.verifyDetailService.verifyContainer.instance.showList = false;
                }
            }
        };
        ValidationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ValidationService.ctorParameters = function () {
            return [
                { type: devkit.Repository },
                { type: devkit.FrameContext },
                { type: FormNotifyService, decorators: [{ type: core.Optional }] },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return ValidationService;
    }());

    var DataChangeDetectionService = /** @class */ (function () {
        function DataChangeDetectionService() {
        }
        DataChangeDetectionService.hasChange = function (frameContext) {
            var befRepository = frameContext && frameContext.repository;
            var hasLocalChanges = bef.BefRepositoryUtil.isExistUnsaveData(befRepository);
            if (hasLocalChanges) {
                return rxjs.of(true);
            }
            // 本地没有变更，确认服务器端是否有未保存的变更
            var virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
            var serverSideChangeDetectionEnabled = virtualRootFrameContext && virtualRootFrameContext.enableServerSideChangeDetection;
            if (!serverSideChangeDetectionEnabled) {
                return rxjs.of(false);
            }
            else {
                // 启用了后端变更检测
                return frameContext.repository.hasChanges().pipe(operators.map(function (response) {
                    return response.returnValue;
                }));
            }
        };
        return DataChangeDetectionService;
    }());

    // tslint:disable: no-string-literal
    // tslint:disable: max-line-length
    /**
     * 卡片仓库服务
     */
    var CardDataService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function CardDataService(formMessageService, frameContext, loadingService, formNotifyService, languageService, formErrorService, runtimeFrameworkService, commandService) {
            this.formMessageService = formMessageService;
            this.frameContext = frameContext;
            this.loadingService = loadingService;
            this.formNotifyService = formNotifyService;
            this.languageService = languageService;
            this.formErrorService = formErrorService;
            this.runtimeFrameworkService = runtimeFrameworkService;
            this.commandService = commandService;
            if (!languageService) {
                this.languageService = LanguageService.getInstance();
            }
            this.repository = this.frameContext.repository;
            this.bindingData = this.frameContext.bindingData;
        }
        /**
         * 加载数据
         * @param id 主实体id
         * @param enableChildrenPagination 启用子表分页
         */
        CardDataService.prototype.load = function (id) {
            var _this = this;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            this.frameContext.appContext.params.set("retrieveing", true);
            this.frameContext.appContext.params.delete('queryChild');
            var get$ = this.repository.getById(id);
            return get$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.loadFailed, error);
            }));
        };
        /**
         * 加载前
         * @param id id
         * @param transitionActionParamName 状态迁移动作参数编号
         * @returns
         */
        CardDataService.prototype.onLoading = function (transitionActionParamName) {
            var _this = this;
            var tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;
            if (!tabId) {
                return;
            }
            var skip = true;
            var listening = this.frameContext.appContext.params.get(tabId) || false;
            transitionActionParamName = transitionActionParamName || 'transitionAction';
            if (!listening) {
                this.frameContext.appContext.params.set(tabId, true);
                this.runtimeFrameworkService.getEntityParam(tabId, function (options) {
                    if (skip) {
                        skip = false;
                        return;
                    }
                    var params = _this.parseParams(options);
                    if (params && params.sync) {
                        var action_1 = params.action;
                        var id = params.id;
                        var ngCommand = _this.frameContext && _this.frameContext.viewModel && _this.frameContext.viewModel.metadatas && _this.frameContext.viewModel.metadatas[action_1];
                        var actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;
                        var formPrimaryValue = _this.frameContext.bindingData.list.currentId;
                        var formState = _this.frameContext.stateMachine.context.state;
                        var state = null;
                        var stateName = void 0;
                        if (!actionName) {
                            // 可能是用户自己配置的命令，没有状态机切换，此时不再判断状态机
                            state = formState;
                        }
                        else {
                            var ngAction = _this.frameContext && _this.frameContext.stateMachine && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas.actions && _this.frameContext.stateMachine.metadatas.actions[actionName];
                            state = ngAction && ngAction.transitTo || formState;
                            stateName = _this.frameContext && _this.frameContext.stateMachine && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas.states[state] && _this.frameContext.stateMachine.metadatas.states[state].name || _this.languageService.defaultStateName;
                            if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {
                                var key = stateName.replace('{{', '').replace('}}', '');
                                stateName = _this.frameContext.translate.transform(key, null);
                            }
                        }
                        var primaryValueChanged = formPrimaryValue !== id;
                        var stateChanged = formState !== state;
                        if (primaryValueChanged && stateChanged) {
                            // 均发生变化
                            var message = _this.languageService.dataAndStateChanged.replace(/\$1/g, stateName);
                            _this.showLoadingConfirm(message).pipe(operators.switchMap(function () {
                                return _this.resetForm(action_1);
                            })).subscribe();
                        }
                        else if (primaryValueChanged) {
                            // 主键发生变化
                            _this.showLoadingConfirm(_this.languageService.dataChanged).pipe(operators.switchMap(function () {
                                return _this.resetForm(action_1);
                            })).subscribe();
                        }
                        else if (stateChanged) {
                            // 状态发生变化
                            var message = _this.languageService.stateChanged.replace(/\$1/g, stateName);
                            _this.showLoadingConfirm(message).pipe(operators.switchMap(function () {
                                return _this.resetForm(action_1);
                            })).subscribe();
                        }
                        else {
                            // 数据及状态均未发生变化
                            return rxjs.of(true);
                        }
                    }
                }, false);
            }
        };
        /**
         * 新增
         */
        CardDataService.prototype.add = function () {
            var _this = this;
            var lastModifiedId = this.bindingData.list.currentId;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var create$ = this.repository.create();
            return create$.pipe(operators.tap(function () {
                EditStateUtil.setEditState(_this.frameContext, lastModifiedId);
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.addFailed, error);
            }));
        };
        /**
         * 级联新增
         */
        CardDataService.prototype.cascadeAdd = function () {
            var _this = this;
            var subject = new rxjs.Subject();
            // 找到所有viewmodel,拿到了所有的frameContext，可能有组合表单的
            var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
            // 找到当前frameContext的公共namespace
            var currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;
            // 拿到当前命令所在frame的表单的所有frameContext
            var currentFormFrameContexts = frameContexts.filter(function (context) { return context.namespace === currentNamespace; }) || [];
            var bindingPaths = [];
            if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {
                // 找到所有下级frameContext
                var childFrameContexts = currentFormFrameContexts.filter(function (context) { return context.viewModel.bindingPath && context.viewModel.bindingPath !== '/'; });
                if (childFrameContexts && childFrameContexts.length > 0) {
                    var childBindingPaths_1 = childFrameContexts.map(function (context) { return context.viewModel.bindingPath; });
                    childBindingPaths_1 = childBindingPaths_1.filter(function (item, index) { return childBindingPaths_1.indexOf(item) === index; });
                    if (childBindingPaths_1 && childBindingPaths_1.length > 0) {
                        bindingPaths = childBindingPaths_1.map(function (path) { return path.split('/').filter(function (p) { return p; }); }).sort(function (a, b) { return a.length - b.length; });
                    }
                }
            }
            this.loadingService.show();
            this.repository.create().pipe(operators.switchMap(function (entity) {
                var rid = entity.primaryValue;
                if (bindingPaths && bindingPaths.length > 0) {
                    return rxjs.from(bindingPaths).pipe(operators.concatMap(function (bindingPath) {
                        var fpath = _this.getPath(_this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);
                        return _this.repository.appendByPath(fpath);
                    }));
                }
                else {
                    return rxjs.of(entity);
                }
            })).pipe(operators.last()).subscribe(function () {
                _this.loadingService.hide();
                subject.next();
            }, function (error) {
                _this.loadingService.hide();
                _this.formErrorService.exception(_this.languageService.addFailed, error);
            });
            return subject;
        };
        /**
         * 编辑（更新数据并标记编辑状态）
         */
        CardDataService.prototype.edit = function (id) {
            var _this = this;
            var update$ = this.update();
            return update$.pipe(operators.tap(function () {
                var currentId = _this.bindingData.list.currentId;
                EditStateUtil.setEditState(_this.frameContext, currentId);
            }));
        };
        /**
         * 更新
         * @param id 主实体id
         * @param enableChildrenPagination 启用子表分页
         */
        CardDataService.prototype.update = function (id) {
            var _this = this;
            // 获取id
            id = this.bindingData.list.currentId;
            if (!id) {
                return rxjs.empty();
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var update$ = this.repository.updateById(id);
            this.frameContext.appContext.params.set("retrieveing", true);
            return update$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.updateFailed, error);
            }));
        };
        CardDataService.prototype.updateWithoutEmpty = function () {
            // 获取id
            var id = this.bindingData.list.currentId;
            if (!id) {
                return rxjs.of(null);
            }
            else {
                return this.update();
            }
        };
        /**
         * 校验当前行是否存在
         * @returns
         */
        CardDataService.prototype.checkBeforeUpdate = function () {
            var bindingList = this.frameContext.bindingData.list;
            var id = bindingList && bindingList.currentId;
            if (!id) {
                this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
                return rxjs.EMPTY;
            }
            return rxjs.of(true);
        };
        /**
         * 已废弃
         * @returns
         */
        CardDataService.prototype.updateWithNotify = function () {
            // 获取id
            var id = this.bindingData.list.currentId;
            if (!id) {
                this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
                return rxjs.EMPTY;
            }
            else {
                return this.update();
            }
        };
        /**
         * 加载卡片数据（分页加载子表数据）
         * @deprecated 方法已废弃，请勿使用
         */
        CardDataService.prototype.loadPaged = function (filter, sort) {
            var _this = this;
            // 获取id
            var id = this.bindingData.list.currentId;
            if (!id) {
                return rxjs.EMPTY;
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            // this.frameContext.root.params.set('updateWithPaging', true);
            var update$ = rxjs.of(null); //this.repository.updateEntityById(id, true);
            return update$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.updateFailed, error);
            }));
        };
        /**
         * 保存
         */
        CardDataService.prototype.save = function (successMsg) {
            var _this = this;
            // 获取当前行
            var id = this.bindingData.list.currentId;
            if (!id) {
                return rxjs.of(false);
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var update$ = this.repository.updateChangesById(id);
            var save$ = this.repository.applyChangesById(id);
            var result$ = update$.pipe(
            // update$ => save$
            operators.switchMap(function (updateResult) {
                if (updateResult === false) {
                    return rxjs.of(false);
                }
                else {
                    return save$;
                }
            }), 
            // 隐藏loading
            operators.tap(function () {
                // 取消新增状态
                EditStateUtil.setEditState(_this.frameContext, id);
                _this.loadingService.hideDelayLoading(loadingTimerId);
                // this.formNotifyService.info(this.languageService.saveSuccess);
                if (successMsg && successMsg.trim()) {
                    var showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            var options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        _this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    FormNotifyStrategyService.success(_this.formNotifyService, _this.languageService.saveSuccess);
                }
                // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.saveFailed, error);
            }));
            return result$;
        };
        // #region 取消相关方法
        /**
         * 取消（默认取消）
         */
        CardDataService.prototype.cancel = function () {
            return this.cancelWithCheck();
        };
        /**
         * 还原变更集
         * @description 不带变更检测提示
         */
        CardDataService.prototype.revert = function (options) {
            return this.cancelWithoutCheck(options);
        };
        /**
         * 取消（取消前检查未保存的变更）
         * @summary
         * 1、用户误操作：只需要做个提示就可以了；
         * 2、用户有意取消：点击取消就是要放弃所有变更，这时候询问人家是否要保存或者提示存在变更有点多此一举，确认一把即可。
         * 3、用户误操作：没有变更的情况下直接给取消了，用户会产生恐慌，因为用户有时候并不确定是否有变更，应该也确认一把。
         * @todo
         * 1、由于产品部很多代码误用了该方法，依赖了没有变更的时候直接取消，现在弹窗确认框来，不太合适；
         * 2、产品部需要用cancelWithoutCheck方法代替，目前先给兼容着，待删除。
         */
        CardDataService.prototype.cancelWithCheck = function () {
            var _this = this;
            var hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
            return hasChange$.pipe(operators.switchMap(function (changed) {
                if (!changed) {
                    return _this.cancelChanges();
                }
                else {
                    // 确认是否取消
                    var confirm$ = _this.formMessageService.question(_this.languageService['cancelWithoutSave']);
                    var result$ = confirm$.pipe(operators.switchMap(function (ifCancel) {
                        if (ifCancel === false) {
                            return rxjs.EMPTY;
                        }
                        return _this.cancelChanges();
                    }));
                    return result$;
                }
            }));
        };
        /**
         * 取消（直接取消，不执行检查）
         */
        CardDataService.prototype.cancelWithoutCheck = function (options) {
            return this.cancelChanges(options);
        };
        /**
         * 取消
         */
        CardDataService.prototype.cancelChanges = function (options) {
            var _this = this;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var cancel$ = this.repository.cancelChanges(options);
            return cancel$.pipe(operators.tap(function () {
                EditStateUtil.setEditState(_this.frameContext, '');
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.cancelFailed, error);
            }));
        };
        // #endregion
        /**
         * 重新加载（仅供卡片取消后重新加载数据，其他场景请勿使用）
         */
        CardDataService.prototype.reload = function () {
            var isAdd = EditStateUtil.getAddState(this.frameContext);
            var id;
            if (isAdd === true) {
                id = EditStateUtil.getLastModifiedId(this.frameContext);
            }
            else {
                id = this.bindingData.list.currentId;
            }
            if (!id) {
                this.repository.entityCollection.loadEntities([]);
                return;
            }
            return this.load(id);
        };
        CardDataService.prototype.getPath = function (viewModel, bindingPath, rid) {
            var path = '/' + rid;
            var subPaths = bindingPath.split('/');
            if (subPaths.length > 0) {
                // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
                // 因此index从1开始
                for (var index = 1; index < subPaths.length - 1; index++) {
                    var subPath = subPaths[index];
                    var subData = viewModel.bindingData[subPath];
                    if (!subData || !subData.currentId) {
                        throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                    }
                    path += "/" + subPath + "/" + subData.currentId;
                }
            }
            path += '/' + subPaths[subPaths.length - 1];
            return path;
        };
        CardDataService.prototype.resetForm = function (action) {
            var _this = this;
            var validationService = this.frameContext.injector.get(ValidationService, null);
            return this.frameContext.repository.cancelChanges().pipe(operators.switchMap(function () {
                return _this.commandService.execute(action).pipe(operators.switchMap(function () {
                    return validationService && validationService.resetValidation() || rxjs.of(null);
                }));
            }));
        };
        CardDataService.prototype.parseParams = function (options) {
            if (options && Object.prototype.toString.call(options) === "[object Map]" /* map */) {
                var params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);
                if (params && typeof params === 'string') {
                    params = decodeURIComponent(params);
                    if (params.startsWith('{') && params.endsWith('}')) {
                        params = JSON.parse(params);
                    }
                    return {
                        action: params.action,
                        id: params.idToView || params.idToEdit || params.id,
                        sync: params.sync || false
                    };
                }
            }
            return null;
        };
        CardDataService.prototype.showLoadingConfirm = function (message) {
            return this.formMessageService.confirm(message).pipe(operators.switchMap(function (result) {
                if (result === true) {
                    return rxjs.of(true);
                }
                else {
                    return rxjs.EMPTY;
                }
            }));
        };
        CardDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CardDataService.ctorParameters = function () {
            return [
                { type: FormMessageService },
                { type: devkit.FrameContext },
                { type: FormLoadingService },
                { type: FormNotifyService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: FormErrorService },
                { type: RuntimeFrameworkService },
                { type: CommandService }
            ];
        };
        return CardDataService;
    }());

    /**
     * 导航中间件服务
     * @scope FrameComponent
     */
    // tslint:disable: no-string-literal
    var NavigationMiddlewareService = /** @class */ (function () {
        function NavigationMiddlewareService(navigationService, frameContext, msgService, languageService, cardDataService) {
            this.navigationService = navigationService;
            this.frameContext = frameContext;
            this.msgService = msgService;
            this.languageService = languageService;
            this.cardDataService = cardDataService;
            this.repository = frameContext.repository;
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
            if (this.frameContext) {
                this.appContext = this.frameContext.getFormAppContext() || null;
            }
        }
        /**
         * 关闭前处理
         */
        NavigationMiddlewareService.prototype.onClosing = function () {
            var _this = this;
            if (this.isInDialog()) {
                return;
            }
            this.navigationService.addEventListener(TAB_EVENT.onTabClosing, function (options) {
                if (!_this.frameContext || _this.frameContext.isDisposed) {
                    return rxjs.of(true);
                }
                return _this.isChanged.pipe(operators.switchMap(function (changed) {
                    if (changed && !_this.appContext.opened) {
                        // 如果需要用户确认就切换到当前tab
                        if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {
                            options.beforeCloseHandle({ selectedChange: true });
                        }
                        var conform = _this.msgService.question(_this.languageService['exitWithoutSave']);
                        /*记录弹窗已打开*/
                        _this.appContext.opened = true;
                        return conform.pipe(operators.switchMap(function (result) {
                            _this.appContext.opened = false;
                            if (result) {
                                /*记录用户关闭弹窗*/
                                if (!!_this.cardDataService) {
                                    var revert$ = _this.cardDataService.revert(options);
                                    return revert$.pipe(operators.switchMap(function () { return rxjs.of(result); }));
                                }
                            }
                            return rxjs.of(result);
                        }));
                    }
                    else if (changed && _this.appContext.opened) {
                        return rxjs.of(false);
                    }
                    else {
                        return rxjs.of(true);
                    }
                }));
            });
        };
        /**
         * 是否在是弹窗窗口内
         */
        NavigationMiddlewareService.prototype.isInDialog = function () {
            var frameContext = this.frameContext;
            var isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;
            while (frameContext.parent !== null && !isDialogRootComponent) {
                frameContext = frameContext.parent;
                isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];
            }
            if (!isDialogRootComponent) {
                isDialogRootComponent = this.frameContext.injector.get(INSIDE_DIALOG_TOKEN, false);
            }
            return isDialogRootComponent;
        };
        /**
         * 获取tabid,如果targetId存在则直接使用targetId
         * @description 将用户要查看的数据id转换为运行框架需要的tabId
         * @param params - router参数
         * @param targetId - 要编辑/查看的数据id
         */
        NavigationMiddlewareService.prototype.getTabId = function (params, targetId) {
            if (!!targetId) {
                return targetId;
            }
            var paramsObj = null;
            if (!!params && params.startsWith('{') && params.endsWith('}')) {
                paramsObj = JSON.parse(params);
            }
            var paramId = null;
            if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {
                paramId = paramsObj.id;
            }
            else {
                paramId = devkit.UID.create();
            }
            return paramId;
        };
        Object.defineProperty(NavigationMiddlewareService.prototype, "isChanged", {
            /**
             * 是否有未保存的变更
             */
            get: function () {
                return DataChangeDetectionService.hasChange(this.frameContext).pipe(operators.throwIfEmpty(function () { return rxjs.EMPTY; }));
            },
            enumerable: true,
            configurable: true
        });
        NavigationMiddlewareService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NavigationMiddlewareService.ctorParameters = function () {
            return [
                { type: NavigationService },
                { type: devkit.FrameContext },
                { type: FormMessageService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: CardDataService }
            ];
        };
        return NavigationMiddlewareService;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-08-05 11:48:27
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-08-06 15:01:53
     */
    // tslint:disable: no-string-literal
    /**
     * Grid中间件服务
     * @scope FrameComponent
     */
    var GridMiddlewareService = /** @class */ (function () {
        function GridMiddlewareService(frameContext, msgService, languageService, viewModel, commandService) {
            this.frameContext = frameContext;
            this.msgService = msgService;
            this.languageService = languageService;
            this.viewModel = viewModel;
            this.commandService = commandService;
            this.repository = this.frameContext.repository;
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
        }
        /**
         * 页码切换前
         */
        GridMiddlewareService.prototype.onPageChanging = function () {
            if (this.isChanged) {
                return this.msgService.question(this.languageService['gridDataNotSave']).pipe(operators.switchMap(function (result) {
                    if (!result) {
                        return rxjs.EMPTY;
                    }
                    else {
                        return rxjs.of(true);
                    }
                }));
            }
            else {
                return rxjs.of(true);
            }
        };
        /**
         * 表格过滤
         * @param commandName 命令名称
         * @param frameId frameId
         * @returns
         */
        GridMiddlewareService.prototype.filter = function (commandName, frameId) {
            var self = this;
            var filters = self.context && self.context.eventParam || [];
            if (typeof (filters) === 'string') {
                filters = JSON.parse(filters);
            }
            // 查询时重置页码为第一页
            this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;
            this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);
            return this.commandService.execute(commandName, frameId);
        };
        Object.defineProperty(GridMiddlewareService.prototype, "isChanged", {
            /**
             * 是否有未保存的变更
             */
            get: function () {
                var befRepository = this.repository;
                return bef.BefRepositoryUtil.isExistUnsaveData(befRepository);
            },
            enumerable: true,
            configurable: true
        });
        GridMiddlewareService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GridMiddlewareService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: FormMessageService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: devkit.ViewModel },
                { type: CommandService }
            ];
        };
        return GridMiddlewareService;
    }());

    // tslint:disable: no-string-literal
    /**
     * 参数服务
     * @scope FormModule
     */
    var ParamService = /** @class */ (function () {
        function ParamService(querystringService, runtimeFrameworkService) {
            this.querystringService = querystringService;
            this.runtimeFrameworkService = runtimeFrameworkService;
        }
        Object.defineProperty(ParamService.prototype, "params", {
            /**
             * 适配获取所有参数
             */
            get: function () {
                var _this = this;
                // 先从hash中获取参数
                var hash = window.location.hash;
                var params = this.querystringService.parse(hash);
                /*
                const appMode = params.appMode;
                // appMode没有定义，认为是老表单,appMode = mdi 或 spa
                if (typeof appMode === 'undefined' || appMode === null) {
                    return of(params);
                }
                // appMode存在，但为空，也认为是老表单
                if (appMode.length < 1) {
                    return of(params);
                }
                // 新表单，使用iframe模式
                if (appMode.toLowerCase() === 'mdi') {
                    return of(params);
                }
                */
                // 获取tabId，最新版本一定有tabId，如果取不到tabId则认为是老表单，直接从url获取参数
                var tabId = params.tabId;
                if (!tabId) {
                    // throw new Error('TabId can`t be empty!');
                    return rxjs.of(params);
                }
                var subject = new rxjs.Subject();
                // 管道参数e可能为object、Map类型
                this.runtimeFrameworkService.addEventListener(tabId, function (e) {
                    var map = {};
                    if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                        map = _this.parseMapParams(e);
                    }
                    var args = {};
                    if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                        args = new Map(e);
                    }
                    else {
                        args = Object.assign({}, e);
                    }
                    setTimeout(function () {
                        subject.next(Object.assign({}, args, map, params));
                    }, 0);
                }, params);
                return subject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 解析map类型的参数
         * @param params params
         */
        ParamService.prototype.parseMapParams = function (params) {
            var map = {};
            map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));
            params.forEach(function (value, key) {
                if (key !== 'WEB_FORM_ROUTE_PARAMS') {
                    map[key] = value;
                }
            });
            return map;
        };
        /**
         * 获取param参数
         * @param param key
         */
        ParamService.prototype.get = function (param) {
            return this.params.pipe(operators.switchMap(function (options) {
                if (!!options && options.hasOwnProperty(param)) {
                    return rxjs.of(options.param);
                }
                else {
                    return rxjs.of(undefined);
                }
            }));
        };
        /**
         * 参数转为对象
         */
        ParamService.prototype.parse = function () {
            return this.params.pipe(operators.switchMap(function (options) {
                return rxjs.of(options);
            }));
        };
        ParamService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ParamService.ctorParameters = function () {
            return [
                { type: QuerystringService },
                { type: RuntimeFrameworkService }
            ];
        };
        return ParamService;
    }());

    /**
     * 快捷键服务
     * @scope FormModule
     */
    var KeybindingService = /** @class */ (function () {
        function KeybindingService() {
            this.keyMap = new Map();
            this.bindingProvider = Mousetrap__default;
            this.ready = true;
        }
        /**
         * 对视图模型设置的快捷键进行绑定处理
         * @param viewModel 视图模型
         */
        KeybindingService.prototype.bind = function (viewModel) {
            var _this = this;
            viewModel.keybindingMap.forEach(function (keyBinding, method) {
                _this.register(keyBinding, function () {
                    return viewModel[method]();
                });
            });
        };
        /**
         * 注册快捷键
         * @param binding 键盘绑定信息
         * @param handler 响应事件
         */
        KeybindingService.prototype.register = function (binding, handler) {
            var combo = this._getCombo(binding);
            if (combo) {
                this.keyMap.set(combo, handler);
                if (binding.ctrlKey && binding.altKey && !binding.shiftKey) {
                    // 实际发现，ctrl+alt组合，只能触发keyup事件
                    this.bindingProvider.bind(combo, this._dispatch.bind(this), 'keyup');
                }
                else {
                    this.bindingProvider.bind(combo, this._dispatch.bind(this));
                }
            }
        };
        /**
         * 取消快捷键注册
         * @param binding 键盘绑定信息
         */
        KeybindingService.prototype.unregister = function (binding) {
            var combo = this._getCombo(binding);
            if (combo) {
                this.keyMap.delete(combo);
                this.bindingProvider.unbind(combo);
            }
        };
        KeybindingService.prototype._dispatch = function (e) {
            var _this = this;
            if (e.repeat)
                return false;
            if (this.ready) {
                var combo = this._getCombo(e);
                if (combo && this.keyMap.has(combo)) {
                    this.ready = false;
                    this.keyMap.get(combo)().subscribe(function () {
                        _this.ready = true;
                    }, function (error) {
                        _this.ready = true;
                    }, function () {
                        _this.ready = true;
                    });
                }
            }
            return false;
        };
        /**
         * 返回ctrl+shift+alt+a形式的组合字符串，全部为小写
         * @param keyInfo
         */
        KeybindingService.prototype._getCombo = function (keyInfo) {
            var key = keyInfo.key.toLowerCase();
            if (key.length != 1 || key.charCodeAt(0) < 97 /* a */ || key.charCodeAt(0) > 122 /* z */) {
                console.warn("快捷键字母形式为a-z");
                return null;
            }
            var combo = (keyInfo.ctrlKey ? 'ctrl+' : '')
                + (keyInfo.shiftKey ? 'shift+' : '')
                + (keyInfo.altKey ? 'alt+' : '')
                + (keyInfo.metaKey ? 'meta+' : '')
                + key;
            if (combo.length == 1) {
                console.warn("快捷键至少包含一个Modifier键");
                return null;
            }
            return combo;
        };
        KeybindingService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        KeybindingService.ctorParameters = function () { return []; };
        return KeybindingService;
    }());

    // tslint:disable: max-line-length
    /**
     * @deprecated 已废除
     */
    var FilterConditionService = /** @class */ (function () {
        function FilterConditionService() {
        }
        FilterConditionService.decorators = [
            { type: core.Injectable }
        ];
        return FilterConditionService;
    }());

    /**
     * UI状态服务
     * @scope FrameComponent
     */
    var UIStateService = /** @class */ (function () {
        function UIStateService() {
        }
        UIStateService.prototype.getState = function (componentId, stateName) {
            throw new Error('Not Implemented');
        };
        UIStateService.prototype.setState = function (componentId, stateName, value) {
            throw new Error('Not Implemented');
        };
        UIStateService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UIStateService.ctorParameters = function () { return []; };
        return UIStateService;
    }());

    // tslint:disable: max-line-length
    /**
     * 状态机服务
     * @scope FrameComponent
     */
    var StateMachineService = /** @class */ (function () {
        function StateMachineService(stateMachine) {
            var _this = this;
            this.stateMachine = stateMachine;
            this._clsDefaultName = 'f-form-state-default';
            this._initLoad = true;
            if (this.stateMachine.initialState.name === 'init') {
                window.setTimeout(function () {
                    _this.initFormState();
                }, 0);
            }
        }
        StateMachineService.prototype.transit = function (action) {
            if (action && typeof this.stateMachine[action] === 'function') {
                this.stateMachine[action]();
                this._currentFrameContext = this['context'] && this['context']['frameContext'];
                if (this._initLoad) {
                    this.initFormState();
                    this._initLoad = false;
                }
                if (!this._currentFrameContext) {
                    return;
                }
                var currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);
                if (!!currentRootFrameContext) {
                    this.toggleFormState(action, currentRootFrameContext);
                }
            }
        };
        StateMachineService.prototype.getCurrentRootFrameContext = function (currentFrameContext) {
            var currentRootFrameContext;
            this.getAllRootFrameContext().forEach(function (rootFc) {
                if (currentFrameContext.namespace === rootFc.namespace) {
                    currentRootFrameContext = rootFc;
                }
            });
            return currentRootFrameContext;
        };
        StateMachineService.prototype.getFrameContextManagerMap = function () {
            if (this.stateMachine && this.stateMachine.frameContext) {
                var appContext = this.stateMachine.frameContext.appContext;
                if (appContext) {
                    var frameContextManager = appContext.frameContextManager;
                    return frameContextManager.getFrameContextMap();
                }
            }
            return null;
            // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();
        };
        StateMachineService.prototype.getAllRootFrameContext = function () {
            var rootFrameContextArr = [];
            var frameContexts = this.getFrameContextManagerMap();
            if (frameContexts) {
                frameContexts.forEach(function (item) {
                    if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {
                        rootFrameContextArr.push(item);
                    }
                });
            }
            return rootFrameContextArr;
        };
        StateMachineService.prototype.initFormState = function () {
            var _this = this;
            if (!this.getFrameContextManagerMap()) {
                return;
            }
            this.getAllRootFrameContext().forEach(function (rootFc) {
                var rootComponent = rootFc.injector.get(core.ElementRef, null) || null;
                if (!rootComponent || !rootComponent.nativeElement) {
                    return;
                }
                if (!rootComponent.nativeElement.className.includes(_this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {
                    _this.addCssClass(rootComponent, _this._clsDefaultName);
                }
            });
        };
        StateMachineService.prototype.toggleFormState = function (action, frameContext) {
            var _this = this;
            var rootComponent = frameContext.injector.get(core.ElementRef, null) || null;
            if (!rootComponent || !rootComponent.nativeElement || !action) {
                return;
            }
            action = action.toLowerCase();
            if (action && ['create', 'edit'].includes(action)) {
                if (action === 'create') {
                    this.addCssClass(rootComponent, 'f-form-state-create');
                }
                else if (action === 'edit') {
                    this.addCssClass(rootComponent, 'f-form-state-edit');
                }
                this.removeCssClass(rootComponent, this._clsDefaultName);
            }
            else {
                ['f-form-state-create', 'f-form-state-edit'].forEach(function (item) { return _this.removeCssClass(rootComponent, item); });
                this.addCssClass(rootComponent, this._clsDefaultName);
            }
        };
        StateMachineService.prototype.addCssClass = function (elementRef, className) {
            if (!elementRef || !className || !elementRef.nativeElement) {
                return;
            }
            var originalClassName = elementRef.nativeElement.className || '';
            if (!originalClassName.includes(className)) {
                elementRef.nativeElement.className = originalClassName + " " + className;
            }
        };
        StateMachineService.prototype.removeCssClass = function (elementRef, className) {
            if (!elementRef || !className || !elementRef.nativeElement) {
                return;
            }
            var originalClassName = elementRef.nativeElement.className || '';
            if (originalClassName.includes(className)) {
                elementRef.nativeElement.className = originalClassName.split(' ').filter(function (p) { return p && p !== className; }).join(' ');
            }
        };
        StateMachineService.prototype.getFormRootComponent = function () {
            if (this.stateMachine && this.stateMachine.frameContext) {
                var viewContext = this.stateMachine.frameContext;
                if (viewContext) {
                    var virtualRootContext = viewContext.getVirtualRootFrameContext();
                    if (virtualRootContext) {
                        var injector = virtualRootContext.injector;
                        if (typeof injector.get === 'function') {
                            return injector.get(core.ElementRef, null);
                        }
                    }
                }
            }
            return null;
            // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;
        };
        StateMachineService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        StateMachineService.ctorParameters = function () {
            return [
                { type: devkit.StateMachine }
            ];
        };
        return StateMachineService;
    }());

    /**
     * 实体服务
     * @scope FrameComponent
     */
    var BindingDataService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function BindingDataService(bindingData, appContext) {
            this.bindingData = bindingData;
            this.appContext = appContext;
        }
        /**
         * 设置当前框架的当前行
         */
        BindingDataService.prototype.setCurrentId = function (id, frameId) {
            // let bindingData = this.bindingData;
            // if (frameId) {
            //   const targetContext = this.appContext.getFrameContext(frameId);
            //   bindingData = targetContext.bindingData;
            // }
            // bindingData.list.setCurrentId(id);
            // @todo：全部重新设置一遍
            var frameContexts = Array.from(this.appContext.getAllFrameContexts().values());
            frameContexts.forEach(function (frameContext) {
                var bindingData = frameContext.bindingData;
                bindingData.list.setCurrentId(id, true, false);
            });
        };
        BindingDataService.prototype.setCurrentRow = function (id, frameId) {
            var bindingData = this.bindingData;
            if (frameId) {
                var targetContext = this.appContext.getFrameContext(frameId);
                bindingData = targetContext.bindingData;
            }
            bindingData.getList().setCurrentId(id);
        };
        BindingDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BindingDataService.ctorParameters = function () {
            return [
                { type: devkit.BindingData },
                { type: devkit.AppContext }
            ];
        };
        return BindingDataService;
    }());

    /**
     * 应用参数服务
     * @scope FormModule
     */
    var ApplicationParamService = /** @class */ (function () {
        function ApplicationParamService(paramService, runtimeFrameworkService) {
            this.paramService = paramService;
            this.runtimeFrameworkService = runtimeFrameworkService;
            if (!this.runtimeFrameworkService) {
                this.runtimeFrameworkService = new RuntimeFrameworkService();
            }
        }
        /**
         * 解析参数
         */
        ApplicationParamService.prototype.parseParams = function (route, frameworkService, viewModel, callback) {
            var _this = this;
            var highOrderInvoke = this.highOrderInvoke(callback);
            if (!this.paramService) {
                route.queryParams.pipe(operators.take(1)).subscribe(function (params) {
                    _this.params = params;
                    _this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
                });
            }
            else {
                this.paramService.parse().pipe(operators.take(1)).subscribe(function (params) {
                    _this.params = params;
                    _this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
                });
            }
        };
        /**
         * 设置参数
         */
        ApplicationParamService.prototype.setupParams = function (params, frameworkService, viewModel, callback) {
            if (viewModel && viewModel.frameContext && viewModel.frameContext.appContext && params.tabId) {
                viewModel.frameContext.appContext.tabId = params.tabId;
            }
            var queryParams = this.getParams(params);
            if (!queryParams) {
                callback();
                return;
            }
            // 先设置参数，保证普通路由也能正常执行。
            this.setQueryParams(queryParams, viewModel);
            var funcId = this.getFuncId(queryParams);
            var appId = this.getAppId(queryParams);
            if (!funcId && !appId) {
                callback();
                return;
            }
            if (funcId) {
                this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);
            }
            else {
                callback();
            }
        };
        /**
         * 设置查询参数
         */
        ApplicationParamService.prototype.setQueryParams = function (queryParams, viewModel) {
            var parsedQueryParams = {};
            // 设置表单参数
            // 首先判断是否为弹窗
            var isInDialog = this.isInDialog(viewModel);
            var uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
            // 如果是弹窗，弹窗外的参数（无论表单参数或静态参数）不应该覆盖弹窗的参数。弹窗打开时传递的参数相当于局部变量，不应被覆盖
            Object.keys(queryParams).forEach(function (paramName) {
                if (!isInDialog) {
                    parsedQueryParams[paramName] = queryParams[paramName];
                }
                else {
                    if (!uiState.hasOwnProperty(paramName)) {
                        parsedQueryParams[paramName] = queryParams[paramName];
                    }
                }
            });
            this.updateUIState(viewModel, parsedQueryParams);
        };
        /**
         * 设置静态参数
         */
        ApplicationParamService.prototype.setStaticParams = function (funcId, queryParams, frameworkService, viewModel, callback) {
            var _this = this;
            this.runtimeFrameworkService.getMenuParams(funcId, function (staicParams) {
                var staticParamsObj = _this.mapStaticParamsToObject(staicParams, queryParams, viewModel);
                if (!staticParamsObj) {
                    callback();
                    return;
                }
                _this.updateUIState(viewModel, staticParamsObj);
                callback();
            });
        };
        /**
         * 将staticParams转换为普通对象
         * @param staticParams，形如：[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]
         * @return 形如：{key1: val1, key2: value2 }
         */
        ApplicationParamService.prototype.mapStaticParamsToObject = function (staticParams, queryParams, viewModel) {
            if (!staticParams) {
                return;
            }
            var inDialog = this.isInDialog(viewModel);
            var uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
            var result = {};
            staticParams.forEach(function (value, key, map) {
                if (!inDialog) {
                    // 静态参数不能覆盖查询参数
                    if (!queryParams.hasOwnProperty(key)) {
                        result[key] = value;
                    }
                }
                else {
                    if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {
                        result[key] = value;
                    }
                }
            });
            return result;
        };
        /**
         * 是否在弹窗内
         * @param viewModel viewmodel
         */
        ApplicationParamService.prototype.isInDialog = function (viewModel) {
            var isInDialog = false;
            if (viewModel && viewModel.uiState) {
                // tslint:disable-next-line: max-line-length
                if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {
                    isInDialog = true;
                }
            }
            return isInDialog;
        };
        /**
         * 更新UIState
         */
        ApplicationParamService.prototype.updateUIState = function (viewModel, params) {
            var _this = this;
            if (!viewModel || !params) {
                return;
            }
            var uiState = viewModel.uiState;
            // 兼容使用string传递params对象的场景
            if (typeof params === 'string' && params !== '') {
                params = JSON.parse(params);
            }
            // 在UIState为参数创建属性
            Object.keys(params).forEach(function (propName) {
                uiState.setPropertyValue(propName, params[propName]);
                if (propName && propName === 'union_session') {
                    var sessionInfo = params[propName];
                    _this.setSessionInfo(viewModel, sessionInfo);
                }
            });
        };
        ApplicationParamService.prototype.setSessionInfo = function (viewModel, sessionInfo) {
            if (!viewModel || !sessionInfo) {
                return;
            }
            if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {
                sessionInfo = JSON.parse(sessionInfo);
            }
            var token = sessionInfo && sessionInfo.token || null;
            var sessionId = sessionInfo && sessionInfo.sessionId || null;
            if (token) {
                viewModel.frameContext.appContext.Token = token;
            }
            if (sessionId) {
                var befRepository = viewModel.frameContext.repository;
                if (befRepository) {
                    befRepository.restService.sessionService.setBeSessionId(sessionId);
                }
            }
        };
        /**
         * 获取功能菜单id
         */
        ApplicationParamService.prototype.getFuncId = function (queryParams) {
            if (!queryParams) {
                return;
            }
            return queryParams['funcId'];
        };
        /**
         * 获取应用id
         */
        ApplicationParamService.prototype.getAppId = function (queryParams) {
            if (!queryParams) {
                return;
            }
            return queryParams['appId'];
        };
        ApplicationParamService.prototype.getTabId = function (queryParams) {
            if (!queryParams) {
                return;
            }
            return queryParams['tabId'];
        };
        /**
         * 获取url参数对象
         * @param queryParams url参数
         */
        ApplicationParamService.prototype.getParams = function (queryParams) {
            if (!queryParams) {
                return {};
            }
            var result = {};
            if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {
                var webFormRouteParams = queryParams['WEB_FORM_ROUTE_PARAMS'];
                if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {
                    webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\n').replace(/%09/g, '\\t').replace(/%0D/g, '\\r'));
                    result = JSON.parse(webFormRouteParams);
                }
                Object.keys(queryParams).forEach(function (prop) {
                    if (prop !== 'WEB_FORM_ROUTE_PARAMS') {
                        result[prop] = queryParams[prop];
                    }
                });
                return result;
            }
            return queryParams;
        };
        ApplicationParamService.prototype.highOrderInvoke = function (callback) {
            var _this = this;
            return function () {
                try {
                    var queryParams = _this.getParams(_this.params);
                    var tabId = _this.getTabId(queryParams);
                    if (tabId) {
                        var controlEvent = _this.runtimeFrameworkService.getMenuSwitchControlEvent();
                        if (controlEvent && rxjs.isObservable(controlEvent)) {
                            controlEvent.subscribe(function (event) {
                                if (event) {
                                    event.next('ok');
                                }
                            });
                        }
                    }
                }
                catch (e) {
                    console.warn(e);
                }
                if (callback && typeof callback === 'function') {
                    callback();
                }
            };
        };
        ApplicationParamService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ApplicationParamService.ctorParameters = function () {
            return [
                { type: ParamService, decorators: [{ type: core.Optional }] },
                { type: RuntimeFrameworkService, decorators: [{ type: core.Optional }] }
            ];
        };
        return ApplicationParamService;
    }());

    /**
     * 实体遍历服务
     * @todo
     * 实体层没有封装相关方法，临时通过BindingData来获取数据
     */
    var EntityTraversingService = /** @class */ (function () {
        function EntityTraversingService(frameContext) {
            this.frameContext = frameContext;
        }
        Object.defineProperty(EntityTraversingService.prototype, "bindingData", {
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取值
         */
        EntityTraversingService.prototype.getPropValue = function (path) {
            return this.bindingData.getValue(path);
        };
        /**
         * 获取实体数据
         */
        EntityTraversingService.prototype.getEntityData = function (path) {
            var bindingObj;
            var bindingListOrObject = this.bindingData.getValue(path);
            if (bindingListOrObject instanceof devkit.BindingList === true) {
                bindingObj = bindingListOrObject.currentItem;
            }
            else {
                bindingObj = bindingListOrObject;
            }
            return bindingObj.toJSON();
        };
        /**
         * 获取实体列表数据
         */
        EntityTraversingService.prototype.getEntityListData = function (path) {
            var bindingList = this.bindingData.getValue(path);
            return bindingList.toJSON();
        };
        EntityTraversingService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityTraversingService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return EntityTraversingService;
    }());

    var EntityManipulationService = /** @class */ (function () {
        function EntityManipulationService(frameContext) {
            this.frameContext = frameContext;
        }
        Object.defineProperty(EntityManipulationService.prototype, "bindingData", {
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置path对应的字段值
         */
        EntityManipulationService.prototype.setPropValue = function (path, value) {
            // 实体层还没有封装，临时用BindingData相关方法代替
            this.bindingData.setValue(path, value, true, true);
        };
        EntityManipulationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityManipulationService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return EntityManipulationService;
    }());

    /**
     * 实体聚合服务
     */
    var EntityAggregationService = /** @class */ (function () {
        function EntityAggregationService(frameContext) {
            this.frameContext = frameContext;
            this.traversingService = this.frameContext.injector.get(EntityTraversingService);
        }
        Object.defineProperty(EntityAggregationService.prototype, "bindingData", {
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取path对应列表记录的条数
         */
        EntityAggregationService.prototype.count = function (path) {
            var splitedPath = this.splitPath(path);
            var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
            return entityListData.length;
        };
        /**
         * 获取path对应字段的和
         */
        EntityAggregationService.prototype.sum = function (path) {
            var _this = this;
            var splitedPath = this.splitPath(path);
            var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
            var total = entityListData.reduce(function (accTotal, entityData) {
                var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
                propValue = isNaN(propValue) ? 0 : propValue;
                accTotal += propValue;
                return accTotal;
            }, 0);
            return total;
        };
        /**
         * 获取path对应字段的平均值
         */
        EntityAggregationService.prototype.avg = function (path) {
            var count = this.count(path);
            var total = this.sum(path);
            return count !== 0 ? total / count : 0;
        };
        /**
         * 获取path对应字段的最大值
         */
        EntityAggregationService.prototype.max = function (path) {
            var _this = this;
            var splitedPath = this.splitPath(path);
            var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
            var max = entityListData.reduce(function (accMax, entityData) {
                var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
                if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                    accMax = propValue;
                }
                return accMax;
            }, null);
            return max ? max : 0;
        };
        /**
         * 获取path对应字段的最小值
         */
        EntityAggregationService.prototype.min = function (path) {
            var _this = this;
            var splitedPath = this.splitPath(path);
            var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
            var min = entityListData.reduce(function (accMin, entityData) {
                var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
                if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                    accMin = propValue;
                }
                return accMin;
            }, null);
            return min ? min : 0;
        };
        /**
         * 获取属性值
         */
        EntityAggregationService.prototype.getPropValue = function (entityData, path) {
            var currentData = entityData;
            path.forEach(function (pathItem) {
                // 提前退出的都重置为null，主要针对关联对象未赋值场景
                if (!currentData) {
                    currentData = null;
                    return;
                }
                currentData = currentData[pathItem];
            });
            return currentData;
        };
        /**
         * 分隔路径，分隔符列表路径和属性路径
         * @return 形如 {parentListPath: [], propertyPath: []}
         */
        EntityAggregationService.prototype.splitPath = function (path) {
            var listPath = path.concat([]);
            var propPath = [];
            var currentNode = this.bindingData.getValue(listPath);
            while (currentNode instanceof devkit.BindingList !== true) {
                var propPathItem = listPath.pop();
                if (!propPathItem) {
                    return;
                }
                propPath.unshift(propPathItem);
                currentNode = this.bindingData.getValue(listPath);
            }
            return {
                listPath: listPath,
                propPath: propPath
            };
        };
        EntityAggregationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityAggregationService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return EntityAggregationService;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-29 19:07:30
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-05-29 19:31:19
     */
    /**
     * EntityList服务
     * @scope FrameComponent
     */
    var EntityListService = /** @class */ (function () {
        function EntityListService(bindingData) {
            this.bindingData = bindingData;
        }
        Object.defineProperty(EntityListService.prototype, "pageIndex", {
            /**
             * 获取当前页码
             */
            get: function () {
                return this.bindingData.list.pageIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityListService.prototype, "pageSize", {
            /**
             * 获取当前分页大小
             */
            get: function () {
                return this.bindingData.list.pageSize;
            },
            enumerable: true,
            configurable: true
        });
        EntityListService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityListService.ctorParameters = function () {
            return [
                { type: devkit.BindingData }
            ];
        };
        return EntityListService;
    }());

    /**
     * 实体服务
     * @scope FrameComponent
     */
    var EntityService = /** @class */ (function () {
        function EntityService(frameContext) {
            this.frameContext = frameContext;
            var injector = this.frameContext.injector;
            this.traversingService = injector.get(EntityTraversingService);
            this.manipulationService = injector.get(EntityManipulationService);
            this.aggregationService = injector.get(EntityAggregationService);
        }
        /**
         * 获取path对应的属性值
         */
        EntityService.prototype.getPropValue = function (path) {
            return this.traversingService.getPropValue(path);
        };
        /**
         * 设置path对应的属性值
         */
        EntityService.prototype.setPropValue = function (path, value) {
            return this.manipulationService.setPropValue(path, value);
        };
        /**
         * 设置path对应的Entity数据
         */
        EntityService.prototype.getEntityData = function (path) {
            return this.traversingService.getEntityData(path);
        };
        /**
         * 设置path对应的EntityList数据
         */
        EntityService.prototype.getEntityListData = function (path) {
            return this.traversingService.getEntityListData(path);
        };
        /**
         * 获取path对应EntityList记录数
         */
        EntityService.prototype.count = function (path) {
            return this.aggregationService.count(path);
        };
        /**
         * 获取path对应属性的合计值
         */
        EntityService.prototype.sum = function (path) {
            return this.aggregationService.sum(path);
        };
        /**
         * 获取path对应属性的平均值
         */
        EntityService.prototype.avg = function (path) {
            return this.aggregationService.avg(path);
        };
        /**
         * 获取path对应属性的最大值
         */
        EntityService.prototype.max = function (path) {
            return this.aggregationService.max(path);
        };
        /**
         * 获取path对应属性的最小值
         */
        EntityService.prototype.min = function (path) {
            return this.aggregationService.min(path);
        };
        EntityService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return EntityService;
    }());

    var BindingPathService = /** @class */ (function () {
        function BindingPathService(injector, appContext, repository) {
            this.injector = injector;
            this.appContext = appContext;
            this.repository = repository;
        }
        /**
         * 获取组件上下文的绑定路径
         * @param frameContext 组件上下文
         * @returns
         */
        BindingPathService.prototype.getBindingPathsByFrameContext = function (frameContext) {
            return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }) || null;
        };
        /**
         * 通过BE表名获取bindingPath
         * @param dataTypeInfo
         * @param tableName
         * @param paths
         * @param level
         * @returns
         */
        BindingPathService.prototype.getBindingPathsByTableName = function (dataTypeInfo, tableName, paths, level) {
            if (paths === void 0) {
                paths = [];
            }
            if (level === void 0) {
                level = 0;
            }
            level++;
            if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
                if (level !== 1) {
                    paths.push(dataTypeInfo.entityInfo.nodeCode);
                }
                return paths;
            }
            var props = Array.from(dataTypeInfo.propInfoMap.values()).filter(function (p) { return p.typeInfo; });
            if (props.length < 1) {
                paths = [];
                return paths;
            }
            if (dataTypeInfo.entityInfo) {
                if (level !== 1) {
                    paths.push(dataTypeInfo.entityInfo.nodeCode);
                }
            }
            for (var idx = 0; idx < props.length; idx++) {
                var dataTypeInfo_1 = props[idx].typeInfo;
                var path = this.getBindingPathsByTableName(dataTypeInfo_1, tableName, paths, level);
                if (!path || path.length < 1) {
                    continue;
                }
                else {
                    paths = paths.concat(path);
                    return paths;
                }
            }
            return null;
        };
        /**
         * 获取属性路径中的绑定路径
         * @param paths paths
         * @param entityTypeInfo
         * @returns
         */
        BindingPathService.prototype.getBindingPathsByPath = function (paths, entityTypeInfo) {
            var nodeCodes = [];
            if (typeof paths === 'string') {
                paths = paths.split('/').filter(function (p) { return p; });
            }
            paths = paths.concat([]);
            while (paths.length > 0) {
                var dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
                if (dataPropInfo.group === 'List') {
                    nodeCodes = paths;
                    break;
                }
                paths.pop();
            }
            return nodeCodes;
        };
        /**
         * 获取属性路径信息
         * @param path 属性路径
         * @returns
         */
        BindingPathService.prototype.getPathInfo = function (path) {
            var paths = path.split('/').filter(function (p) { return p; });
            // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
            var entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);
            var propertyName = paths.slice(entityPath.length).join('/');
            return { bindingPath: entityPath.join('/'), propertyName: propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(function (p) { return p; }) };
        };
        BindingPathService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BindingPathService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.AppContext },
                { type: devkit.Repository }
            ];
        };
        return BindingPathService;
    }());

    var FormControlService = /** @class */ (function () {
        function FormControlService() {
        }
        FormControlService.prototype.getFormControlsByFrameContext = function (frameContext) {
            return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
        };
        /**
         * 通过binding元数据获取NgFormControl
         * @param frameContext
         * @param binding binding
         * @returns
         */
        FormControlService.prototype.getFormControlByBinding = function (frameContext, binding) {
            var ngFormControls = this.getFormControlsByFrameContext(frameContext);
            if (!ngFormControls) {
                return null;
            }
            return Object.values(ngFormControls).find(function (ngFormControl) { return ngFormControl && ngFormControl.binding === binding; });
        };
        /**
         *
         * @param frameContext frameContext
         * @param fullPath
         * @returns
         */
        FormControlService.prototype.getFormControlIndexByFullPath = function (frameContext, fullPath) {
            var ngFormControls = this.getFormControlsByFrameContext(frameContext);
            if (!ngFormControls) {
                return null;
            }
            var bindings = fullPath.split('/').filter(function (p) { return p; });
            return Object.values(ngFormControls).findIndex(function (ngFormControl) {
                if (!ngFormControl) {
                    return false;
                }
                var bindingPath = frameContext.viewModel.bindingPath;
                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                var formControlBindingPaths = ngFormControl.binding.split('.').filter(function (p) { return p; });
                var fullPath = bindingPaths.concat(formControlBindingPaths);
                return fullPath.join('/') === bindings.join('/');
            });
        };
        /**
         * 通过binding元数据获取NgFormControl位置
         * @param frameContext
         * @param binding binding
         * @returns 从0开始
         */
        FormControlService.prototype.getFormControlIndexByBinding = function (frameContext, binding) {
            var ngFormControls = this.getFormControlsByFrameContext(frameContext);
            if (!ngFormControls) {
                return null;
            }
            return Object.values(ngFormControls).findIndex(function (ngFormControl) { return ngFormControl && ngFormControl.binding === binding; });
        };
        FormControlService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormControlService.ctorParameters = function () { return []; };
        return FormControlService;
    }());

    var FrameContextService = /** @class */ (function () {
        function FrameContextService(injector, appContext, frameContext, repository, bindingPathService, formControlService) {
            this.injector = injector;
            this.appContext = appContext;
            this.frameContext = frameContext;
            this.repository = repository;
            this.bindingPathService = bindingPathService;
            this.formControlService = formControlService;
        }
        /**
           * 通过BE表名获取对应的frameContext
           * @param tableName
           * @returns
           */
        FrameContextService.prototype.getFrameContextsByTableName = function (tableName) {
            if (!tableName) {
                throw new Error('tableName 不能为空。');
            }
            var dataTypeInfo = this.repository && this.repository.entityTypeInfo || null;
            if (!dataTypeInfo) {
                return null;
            }
            var bindingPaths = [];
            this.bindingPathService.getBindingPathsByTableName(dataTypeInfo, tableName, bindingPaths);
            var frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
            if (!frameContexts || frameContexts.length === 0) {
                return null;
            }
            return frameContexts.filter(function (frameContext) { return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/') === bindingPaths.join('/'); });
        };
        /**
         * 根据字段完整路径获取所在的上下文
         * @param propertyPath
         * @param separtor
         * @returns
         */
        FrameContextService.prototype.getFrameContextsByPropertyPath = function (propertyPath, separtor) {
            if (separtor === void 0) {
                separtor = '/';
            }
            if (!propertyPath) {
                throw new Error('propertyPath 不能为空。');
            }
            var frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
            return frameContexts.filter(function (frameContext) {
                var formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
                var bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
                if (formControls && Object.keys(formControls).length > 0) {
                    var key = Object.keys(formControls).find(function (key) {
                        var formControl = formControls[key];
                        if (!formControl || !formControl.binding) {
                            return false;
                        }
                        var bindings = formControl.binding.split('.').filter(function (p) { return p; });
                        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                        var fullPath = bindingPaths.concat(bindings);
                        return propertyPath.split(separtor).filter(function (p) { return p; }).join('/') === fullPath.join('/');
                    });
                    return key ? true : false;
                }
                return false;
            });
        };
        /**
         * 通过BE字段名获取字段的bindingPath
         * @param bindingPaths 绑定路径
         * @param columnName BE字段名
         * @returns
         */
        FrameContextService.prototype.getFrameContextsByColumnName = function (bindingPaths, columnName) {
            var _this = this;
            if (!bindingPaths) {
                throw new Error('bindingPath 不能为空。');
            }
            if (!columnName) {
                throw new Error('columnName 不能为空。');
            }
            bindingPaths = bindingPaths.filter(function (p) { return p; });
            var entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;
            if (!entityTypeInfo) {
                return null;
            }
            var dataTypeInfo = entityTypeInfo.getTypeInfoByPath(bindingPaths);
            var dataPropInfos = dataTypeInfo && dataTypeInfo.getPropInfos() || [];
            var columnPropInfo = dataPropInfos.find(function (dataPropInfo) { return dataPropInfo.metadataInfo && (dataPropInfo.metadataInfo.originalDataField === columnName || dataPropInfo.metadataInfo.dataField === columnName); });
            if (!columnPropInfo || !columnPropInfo.metadataInfo) {
                return null;
            }
            var frameContexts = this.appContext.frameContextManager.getFrameContexts();
            return frameContexts.filter(function (frameContext) {
                var ngFormControls = _this.formControlService.getFormControlsByFrameContext(frameContext);
                if (!ngFormControls || Object.keys(ngFormControls).length < 1) {
                    return false;
                }
                var currentBindingPaths = _this.bindingPathService.getBindingPathsByFrameContext(frameContext) || [];
                var isValidFrameContext = currentBindingPaths.join('/') === bindingPaths.join('/');
                if (!isValidFrameContext) {
                    return false;
                }
                var ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(function (item) { return item.binding === columnPropInfo.metadataInfo.path; });
                return ngFormControl ? true : false;
            });
        };
        /**
         * 通过绑定路径获取对应的组件上下文数组
         * @param bindingPath bindingPath字符串
         * @param namespace ns,默认为''
         */
        FrameContextService.prototype.getFrameContextsByBindingPath = function (bindingPath, namespace) {
            if (namespace === void 0) {
                namespace = '';
            }
            if (Array.isArray(bindingPath)) {
                bindingPath = bindingPath.join('/');
            }
            var frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
            return frameContexts.filter(function (frameContext) { return frameContext && frameContext.namespace === namespace && frameContext.viewModel.bindingPath === bindingPath; });
        };
        FrameContextService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FrameContextService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.AppContext },
                { type: devkit.FrameContext },
                { type: devkit.Repository },
                { type: BindingPathService },
                { type: FormControlService }
            ];
        };
        return FrameContextService;
    }());

    var FIXED_COLUMN_START_INDEX = 5000;
    var GRID_COLUMN_START_INDEX = 10000;
    /**
     * 表单验证服务
     * @scope FrameComponent
     */
    var FocusInvalidService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function FocusInvalidService(repository, frameContext, frameContextService, formControlService) {
            this.repository = repository;
            this.frameContext = frameContext;
            this.frameContextService = frameContextService;
            this.formControlService = formControlService;
        }
        /**
         * 向第一个验证不通过的字段设置焦点
         */
        FocusInvalidService.prototype.focusInvalidInput = function (verifyInformations, rootElement) {
            // 无验证不通过信息时，直接返回。
            if (!verifyInformations || !verifyInformations.length) {
                return;
            }
            var targetField = null;
            var firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);
            if (firstVerifyInformation) {
                targetField = firstVerifyInformation.targetField;
                if (targetField) {
                    var canFocus = this.focusElement(targetField, rootElement);
                    if (canFocus) {
                        verifyInformations['focused'] = true;
                    }
                }
            }
        };
        /**
         * 设置DataGrid单元格焦点
         */
        FocusInvalidService.prototype.focusGridCell = function (verifyInformations, focusableDataGrid) {
            if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true || focusableDataGrid.disabled === true) {
                return;
            }
            var targetField = null;
            var targetId = null;
            var firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);
            if (firstVerifyInformation) {
                targetField = firstVerifyInformation.targetField;
                targetId = firstVerifyInformation.id;
                verifyInformations['focused'] = true;
                focusableDataGrid.editCell(targetId, targetField);
            }
        };
        FocusInvalidService.prototype.updateVerifyInformationsIndex = function (verifyInformations, rootElement) {
            var _this = this;
            verifyInformations = verifyInformations.filter(function (verifyInformation) {
                var frameContexts = _this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
                var frameContext = frameContexts && frameContexts.filter(function (frameContext) { return frameContext && frameContext.frameId === _this.frameContext.frameId; });
                return frameContext ? true : false;
            });
            return verifyInformations.map(function (verifyInformation) {
                var tabIndex = -1;
                if (verifyInformation) {
                    if (rootElement && verifyInformation.targetField) {
                        var input = _this.getInputElementById(verifyInformation.targetField, rootElement);
                        tabIndex = input && input.getAttribute('tabindex') || -1;
                        tabIndex = Number(tabIndex);
                    }
                    // const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
                    var frameContext = _this.frameContext; //frameContexts && frameContexts[0] || null;
                    var frameIndex = frameContext.index + 1;
                    verifyInformation.tabIndex = tabIndex;
                    verifyInformation.domIndex = -1;
                    verifyInformation.frameIndex = -1;
                    verifyInformation.position = tabIndex;
                    if (frameContext) {
                        var domIndex = verifyInformation.fullPath && _this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;
                        if (domIndex > 0) {
                            var rowIndex = verifyInformation.index || 0;
                            verifyInformation.domIndex = domIndex;
                            verifyInformation.frameIndex = frameContext.index;
                            verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);
                        }
                    }
                }
                return verifyInformation;
            });
        };
        FocusInvalidService.prototype.isGridComponent = function (frameContext) {
            if (frameContext) {
                var dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
                return dataGridColumnsName ? true : false;
            }
            return undefined;
        };
        FocusInvalidService.prototype.getColumnIndex = function (frameContext, binding) {
            binding = binding.split('/').filter(function (p) { return p; }).join('/');
            var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
            var dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
            var frameIndex = frameContext.index + 1;
            if (!dataGridColumnsName) {
                return undefined;
            }
            var columns = frameContext.viewModel[dataGridColumnsName];
            if (!columns || columns.length < 1) {
                return undefined;
            }
            // 打平columns
            columns = columns.reduce(function (results, item) {
                if (Array.isArray(item)) {
                    return results.concat(item);
                }
                return results.concat([item]);
            }, []);
            var position = -1;
            var _loop_1 = function (index) {
                var column = columns[index];
                var fields = column && column.field && column.field.split('.').filter(function (p) { return p; }) || null;
                if (!fields) {
                    return "continue";
                }
                if (bindingPaths.concat(fields).join('/') === binding) {
                    var fixed_1 = column.fixed;
                    if (fixed_1) {
                        var fixedColumns = columns.filter(function (item) { return item.fixed === fixed_1; });
                        var fixedColumnIndex = this_1.getIndexFromColumns(fixedColumns, binding);
                        if (fixed_1 === 'left') {
                            position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;
                        }
                        else {
                            position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;
                        }
                    }
                    else {
                        position = frameIndex * GRID_COLUMN_START_INDEX + index;
                    }
                    return "break";
                }
            };
            var this_1 = this;
            for (var index = 0; index < columns.length; index++) {
                var state_1 = _loop_1(index);
                if (state_1 === "break")
                    break;
            }
            return position;
        };
        FocusInvalidService.prototype.getIndexFromColumns = function (columns, binding) {
            var bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
            return columns.findIndex(function (column) {
                var fields = column && column.field && column.field.split('.').filter(function (p) { return p; }) || null;
                if (!fields) {
                    return false;
                }
                if (bindingPaths.concat(fields).join('/') === binding) {
                    return true;
                }
                return false;
            });
        };
        FocusInvalidService.prototype.selectFirstVerifyInformation = function (verifyInformations, rootElement) {
            verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);
            verifyInformations.sort(function (v1, v2) { return Number(v1.position) - Number(v2.position); });
            return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;
        };
        FocusInvalidService.prototype.getInputElementById = function (targetField, rootElement) {
            var element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;
            if (element && element.tagName !== 'INPUT') {
                var inputs = element.getElementsByTagName('input');
                if (inputs.length) {
                    element = inputs[0];
                }
            }
            return element;
        };
        FocusInvalidService.prototype.getFrameContextsByPropertyPath = function (propertyPath, separtor) {
            if (separtor === void 0) {
                separtor = '/';
            }
            if (!propertyPath) {
                return [];
            }
            var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];
            return frameContexts.filter(function (frameContext) {
                var formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
                var bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
                if (formControls && Object.keys(formControls).length > 0) {
                    var key = Object.keys(formControls).find(function (key) {
                        var formControl = formControls[key];
                        if (!formControl || !formControl.binding) {
                            return false;
                        }
                        var bindings = formControl.binding.split('.').filter(function (p) { return p; });
                        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                        var fullPath = bindingPaths.concat(bindings);
                        return propertyPath.split(separtor).filter(function (p) { return p; }).join('/') === fullPath.join('/');
                    });
                    return key ? true : false;
                }
                return false;
            });
        };
        FocusInvalidService.prototype.getFormControlIndexByBindingPath = function (frameContext, binding) {
            var ngFormControls = this.getFormControlsByFrameContext(frameContext);
            if (!ngFormControls) {
                return null;
            }
            var bindings = binding.split('/').filter(function (p) { return p; });
            return Object.values(ngFormControls).findIndex(function (ngFormControl) {
                if (!ngFormControl) {
                    return false;
                }
                var bindingPath = frameContext.viewModel.bindingPath;
                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                var formControlBindingPaths = ngFormControl.binding.split('.').filter(function (p) { return p; });
                var fullPath = bindingPaths.concat(formControlBindingPaths);
                return fullPath.join('/') === bindings.join('/');
            });
        };
        FocusInvalidService.prototype.getFieldIndex = function (frameContext, binding) {
            var isGridComponent = this.isGridComponent(frameContext);
            if (isGridComponent) {
                return this.getColumnIndex(frameContext, binding);
            }
            else {
                return this.getFormControlIndexByBindingPath(frameContext, binding);
            }
        };
        FocusInvalidService.prototype.getFormControlsByFrameContext = function (frameContext) {
            return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
        };
        FocusInvalidService.prototype.focusElement = function (elementId, rootElement) {
            var focused = false;
            var elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);
            // 未获取到指定字段时，返回，不再设置焦点。
            if (elementToFocus) {
                // 如果有多个id重复的元素，则不定位
                var elements = rootElement.nativeElement.ownerDocument.querySelectorAll("#" + elementId);
                if (elements && elements.length > 1) {
                    return focused;
                }
                // 如果绑定目标字段的控件不是Input元素，则查找其下级节点。
                if (elementToFocus.tagName !== 'INPUT') {
                    var subElements = elementToFocus.getElementsByTagName('input');
                    if (subElements.length) {
                        elementToFocus = subElements[0];
                    }
                }
                elementToFocus.focus();
                focused = true;
            }
            return focused;
        };
        /**
         * 设置焦点
         * @param verifyInformation 错误信息
         * @param frameContext 上下文
         * @returns
         */
        FocusInvalidService.prototype.focus = function (verifyInformation, frameContext) {
            if (!verifyInformation) {
                return;
            }
            var isGridValidation = verifyInformation.index !== null;
            if (isGridValidation) {
                var grid_1 = this.getGridRef(frameContext);
                if (grid_1) {
                    setTimeout(function () {
                        grid_1.editCell(verifyInformation.id, verifyInformation.targetField);
                    }, 0);
                }
            }
            else {
                var frameElement_1 = this.getComponentRef(frameContext);
                var elementId = verifyInformation.targetField;
                this.focusById(elementId, frameElement_1);
            }
        };
        /**
         * 通过控件id设置焦点
         * @param elementId
         * @param elementRef
         */
        FocusInvalidService.prototype.focusById = function (elementId, elementRef) {
            var document = elementRef && elementRef.nativeElement.ownerDocument || window.document;
            if (document) {
                var element = document.getElementById(elementId);
                if (element.tagName !== 'INPUT') {
                    var subElements = element.getElementsByTagName('input');
                    if (subElements.length) {
                        var input = subElements[0];
                        if (input && typeof input.focus === 'function') {
                            input.focus();
                        }
                    }
                }
                else {
                    element.focus();
                }
            }
        };
        /**
         * 获取组件实例
         * @param frameContext
         * @returns
         */
        FocusInvalidService.prototype.getComponentRef = function (frameContext) {
            return this.frameContext && this.frameContext.injector.get(core.ElementRef, null) || null;
        };
        /**
         * 获取grid实例
         * @param frameContext frameContext
         * @returns
         */
        FocusInvalidService.prototype.getGridRef = function (frameContext) {
            var _this = this;
            var namespace = frameContext.namespace;
            var bindingPath = frameContext.viewModel.bindingPath;
            var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];
            var matchedFrameContexts = frameContexts.filter(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString() === bindingPath.split('/').filter(function (p) { return p; }).toString(); });
            var result = null;
            if (matchedFrameContexts) {
                matchedFrameContexts.every(function (frameContext) {
                    var frameId = frameContext.frameId;
                    var componentsMap = _this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                    if (!componentsMap) {
                        return true;
                    }
                    var datagridComponent = Array.from(componentsMap.values()).find(function (component) { return component && component['__component_type__'] === 'DatagridComponent'; });
                    if (datagridComponent) {
                        result = datagridComponent;
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            return result;
        };
        FocusInvalidService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FocusInvalidService.ctorParameters = function () {
            return [
                { type: devkit.Repository },
                { type: devkit.FrameContext },
                { type: FrameContextService },
                { type: FormControlService }
            ];
        };
        return FocusInvalidService;
    }());

    var POSTER = 'iframePoster';
    var RECEIVER = 'iframeReceiver';
    var REPOSITORY = 'repository';
    var TAB_ID = 'tabId=';
    /**
     * ChangeItemService
     * @scope FrameComponent
     */
    var ChangeItemService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ChangeItemService(repository, frameContext, notifyService, languageService) {
            this.repository = repository;
            this.frameContext = frameContext;
            this.notifyService = notifyService;
            this.languageService = languageService;
            this.top = top;
            this.itemChangePoster = new rxjs.Subject();
            this.itemChangeReceiver = new rxjs.Subject();
        }
        ChangeItemService.prototype.init = function () {
            this.top['topMap'] = this.top['topMap'] || {};
            this.changeItem = this.changeItem.bind(this);
        };
        ChangeItemService.prototype.setBykey = function (key, value) {
            this.top['topMap'] = this.top['topMap'] || {};
            this.top['topMap'][this.tabId] = this.top['topMap'][this.tabId] || {};
            var topObject = this.top['topMap'][this.tabId];
            topObject[key] = value;
        };
        ChangeItemService.prototype.getByKey = function (key) {
            var topObject = this.top['topMap'][this.tabId] || {};
            return topObject[key];
        };
        // 建立iframe通信
        ChangeItemService.prototype.setIframePoster = function () {
            if (this.getByKey[POSTER]) {
                return;
            }
            else {
                this.setBykey(POSTER, this.itemChangePoster);
            }
        };
        ChangeItemService.prototype.getIframePoster = function () {
            this.itemChangePoster = this.getByKey(RECEIVER);
            this.setBykey(RECEIVER, this.itemChangeReceiver);
        };
        ChangeItemService.prototype.changeItem = function (type, id, parentId) {
            var _this = this;
            // 根据是否是弹出式卡片取不同的tabId
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            var virtualRootComponent = virtualRootFrameContext.frameComponent;
            var isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;
            if (isDialogComponent) {
                this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));
            }
            else {
                this.tabId = parentId;
            }
            this.itemChangeReceiver = this.getByKey(RECEIVER);
            return rxjs.Observable.create(function (subscriber) {
                _this.getNextItemByCurrentId(id, type).subscribe(function (result) {
                    subscriber.next(result);
                });
            });
        };
        // 在list初始化时调用，缓存list的repository
        ChangeItemService.prototype.setRepository = function () {
            if (window.location.hash.includes(TAB_ID)) {
                this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));
                this.setBykey(REPOSITORY, this.frameContext.repository);
                this.setIframePoster();
                this.getIframePoster();
            }
        };
        // 根据类型和id获取相邻的数据
        ChangeItemService.prototype.getNextItemByCurrentId = function (currentId, type) {
            var repository = this.getByKey(REPOSITORY);
            var _a = repository.entityCollection.paginationInfo, pageSize = _a.pageSize, pageIndex = _a.pageIndex, total = _a.total;
            var currentIdx = null;
            var list = repository.entityCollection.getAllEntities();
            list.find(function (x, idx) {
                if (x.id === currentId) {
                    currentIdx = idx;
                }
            });
            // 没有在列表中找到数据，返回空
            if (currentIdx === null) {
                // 新增取消当前无数据时点上一条下一条
                if (list.length) {
                    switch (type) {
                        case 'prev':
                            return of.of(list[list.length - 1].id);
                            break;
                        case 'next':
                            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });
                            return rxjs.EMPTY;
                    }
                }
                return of.of(null);
            }
            var nextIdx = currentIdx;
            switch (type) {
                case 'prev':
                    // 当前页第一条,且非第一页,取上一页最后一条
                    if (currentIdx === 0 && pageIndex !== 1) {
                        return repository.getEntities([], [], pageSize, pageIndex - 1).pipe(operators.switchMap(function (result) {
                            nextIdx = pageSize - 1;
                            return of.of(result[nextIdx].id);
                        }));
                    }
                    // 第一页第一条，仍返回原有数据
                    else if (currentIdx === 0 && pageIndex === 1) {
                        this.notifyService.info(this.languageService.changeToFirst, { hideTitle: true });
                        return of.of(list[nextIdx].id);
                    }
                    // 不是第一条，返回上一条
                    else {
                        nextIdx = currentIdx - 1;
                        return of.of(list[nextIdx].id);
                    }
                    break;
                case 'next':
                    // 超过当前页
                    if (currentIdx + 1 + 1 > list.length) {
                        // 且非最后一条数据,取下一页第一条数据
                        if (((pageIndex - 1) * pageSize + currentIdx + 1) < total) {
                            return repository.getEntities([], [], pageSize, pageIndex + 1).pipe(operators.switchMap(function (result) {
                                return of.of(result[0].id);
                            }));
                        }
                        // 最后一条数据，仍返回原数据
                        else {
                            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });
                            return of.of(list[nextIdx].id);
                        }
                    }
                    else {
                        nextIdx = currentIdx + 1;
                        return of.of(list[nextIdx].id);
                    }
                    break;
            }
        };
        ChangeItemService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ChangeItemService.ctorParameters = function () {
            return [
                { type: devkit.Repository },
                { type: devkit.FrameContext },
                { type: FormNotifyService },
                { type: LanguageService }
            ];
        };
        return ChangeItemService;
    }());

    var Service = /** @class */ (function () {
        function Service() {
        }
        Object.defineProperty(Service.prototype, "eventParam", {
            /**
             * 命令参数
             */
            get: function () {
                return this.context && this.context.eventParam || null;
            },
            enumerable: true,
            configurable: true
        });
        return Service;
    }());

    var DataGridService = /** @class */ (function (_super) {
        __extends(DataGridService, _super);
        function DataGridService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 清空所有勾选行
         * @description 取消勾选当前表单所有勾选行
         */
        DataGridService.prototype.clearChecks = function () {
            // const params = this.eventParam;
            // if (params && Array.isArray(params)) {
            // const param = params[0];
            // if (param instanceof QueryCondition) {
            var gridComponents = this.getFormGridComponents(this.context);
            if (gridComponents && gridComponents.length > 0) {
                gridComponents.forEach(function (gridComponent) {
                    var clearSelections = true;
                    if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {
                        clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];
                    }
                    if (clearSelections) {
                        gridComponent.clearCheckeds(true);
                    }
                });
            }
            // }
            // }
        };
        /**
         * 取消勾选删除的行
         * @param ids ids
         * @returns
         * @description 取消勾选当前绑定路径下指定数据，清空下级表格中所有勾选行，仅供删除场景使用
         */
        DataGridService.prototype.uncheckDeletedRows = function (ids) {
            if (typeof ids === 'string') {
                if (ids.indexOf(',') !== -1) {
                    ids = ids.split(',').filter(function (p) { return p; });
                }
                else {
                    ids = [ids];
                }
            }
            if (!ids || ids.length < 1) {
                return;
            }
            // 获取bindingPath及ns
            var frameContext = this.context.frameContext;
            if (!frameContext) {
                return;
            }
            var appContext = frameContext.appContext;
            var ns = frameContext.namespace;
            var bindingPath = frameContext.viewModel && frameContext.viewModel.bindingPath;
            if (!appContext) {
                return;
            }
            // 根据bindingPath获取所有可能的frameContext
            var frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
            var frameContextsInCurrentBindingPath = frameContexts.filter(function (frameContext) { return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath === bindingPath; });
            // 获取这些frame中所有的表格组件map
            var gridInCurrentFrame = this.getGridComponentByFrameContexts(frameContextsInCurrentBindingPath);
            if (!gridInCurrentFrame) {
                return;
            }
            // 一个bindingPath下应该只有一个grid
            var grid = gridInCurrentFrame.pop();
            // 清空命令所在的frame下表格的指定勾选
            if (grid) {
                grid.unCheckRows(ids, true);
            }
            // 清空下级表格的所有勾选行数据
            var childrenFrameContexts = frameContexts.filter(function (frameContext) { return frameContext.viewModel.bindingPath !== bindingPath && frameContext.viewModel.bindingPath.startsWith(bindingPath); });
            var childrenGridComponents = this.getGridComponentByFrameContexts(childrenFrameContexts);
            // 清空命令所在frame
            if (childrenGridComponents && childrenGridComponents.length > 0) {
                childrenGridComponents.forEach(function (gridComponent) {
                    // 清空所有勾选
                    gridComponent.checkedRows = [];
                });
            }
        };
        /**
         * 取消勾选行
         * @param ids ids
         * @returns
         */
        DataGridService.prototype.uncheckRows = function (ids) {
            if (typeof ids === 'string') {
                ids = [ids];
            }
            if (!ids || ids.length < 1) {
                return;
            }
            var gridComponents = this.getFormGridComponents(this.context);
            if (gridComponents && gridComponents.length > 0) {
                gridComponents.forEach(function (gridComponent) {
                    gridComponent.unCheckRows(ids, true);
                });
            }
        };
        /**
         * 根据命令上下文获取当前命令所在组件的表格实例
         * @param commandContext 命令上下文
         * @returns
         */
        DataGridService.prototype.getFormGridComponents = function (commandContext) {
            var grids = [];
            var frameContext = commandContext && commandContext.frameContext;
            var appContext = frameContext && frameContext.appContext || null;
            if (appContext) {
                var componentRefs = appContext.componentRefs;
                var collect = Array.from(componentRefs.values()); // [Map<string,any>,Map<string,any>]
                collect.forEach(function (item) {
                    var components = Array.from(item.values());
                    var gridComponents = components.filter(function (component) { return component instanceof uiDatagrid.DatagridComponent; });
                    grids = grids.concat(gridComponents);
                });
            }
            return grids;
        };
        DataGridService.prototype.getGridComponentByFrameContexts = function (frameContexts) {
            return frameContexts.reduce(function (result, frameContext) {
                var appContext = frameContext.appContext;
                var frameId = frameContext.frameId;
                // 获取当前组件下所有的组件实例
                var componentsRef = appContext.componentRefs.get(frameId);
                var grids = componentsRef && Array.from(componentsRef.values()).filter(function (component) { return component instanceof uiDatagrid.DatagridComponent; });
                if (grids && grids.length > 0) {
                    result = result.concat(grids);
                }
                return result;
            }, []);
        };
        DataGridService.decorators = [
            { type: core.Injectable }
        ];
        return DataGridService;
    }(Service));

    // tslint:disable: no-string-literal max-line-length
    /**
     * 列表仓库服务
     */
    var ListDataService = /** @class */ (function () {
        /**
         * 构造
         * @param msgService msgService
         * @param repository repository
         * @param bindingData bindingData
         * @param loadingService loadingService
         * @param languageService languageService
         * @param formNotifyService formNotifyService
         * @param formErrorService formErrorService
         * ! @param viewModel viewModel,vm是后期注入的，老表单获取不到，一定要做非空判断
         * @param filterConditionService filterConditionService
         */
        function ListDataService(msgService, repository, bindingData, loadingService, languageService, formNotifyService, formErrorService, viewModel, filterConditionService) {
            this.msgService = msgService;
            this.repository = repository;
            this.bindingData = bindingData;
            this.loadingService = loadingService;
            this.languageService = languageService;
            this.formNotifyService = formNotifyService;
            this.formErrorService = formErrorService;
            this.viewModel = viewModel;
            this.filterConditionService = filterConditionService;
            if (!languageService) {
                this.languageService = LanguageService.getInstance();
            }
            // if (!filterConditionService) {
            //   this.filterConditionService = new FilterConditionService();
            // }
        }
        /**
         * 加载
         */
        ListDataService.prototype.load = function (filter, sort) {
            var _this = this;
            // 参数处理
            filter = !filter ? '[]' : filter;
            sort = !sort ? '[]' : sort;
            // 合并过滤条件
            filter = this.mergeFilterConditions(filter);
            // 合并排序条件
            sort = this.mergeSortConditions(sort);
            var loadingTimerId = this.loadingService.showLoadingWithDelay(200);
            var query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
            return query$.pipe(operators.tap(function () {
                // 触发远端合计事件
                _this.fireQueryEvent(filter);
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.loadFailed, error);
            }));
        };
        /**
         * 过滤数据
         * @param filter 过滤条件
         * @param sort 排序条件
         */
        ListDataService.prototype.filter = function (filter, sort) {
            var _this = this;
            // 参数处理
            filter = !filter ? '[]' : filter;
            sort = !sort ? '[]' : sort;
            // 合并过滤条件
            filter = this.mergeFilterConditions(filter);
            // 合并排序条件
            sort = this.mergeSortConditions(sort);
            var loadingTimerId = this.loadingService.showLoadingWithDelay(200);
            var query$ = this.repository.filter(JSON.parse(filter), JSON.parse(sort));
            return query$.pipe(operators.tap(function () {
                // 触发远端合计事件
                _this.fireQueryEvent(filter);
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.loadFailed, error);
            }));
        };
        /**
         * 查询
         */
        ListDataService.prototype.query = function (filter, sort, pageSize, pageIndex) {
            var _this = this;
            // 参数处理
            filter = (filter === '') ? '[]' : filter;
            sort = (sort === '') ? '[]' : sort;
            // 合并过滤条件
            filter = this.mergeFilterConditions(filter);
            // 合并排序条件
            sort = this.mergeSortConditions(sort);
            // 执行取数
            var loadingTimerId = this.loadingService.showLoadingWithDelay(5);
            var query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), pageSize, pageIndex);
            return query$.pipe(operators.tap(function () {
                // 触发远端合计事件
                _this.fireQueryEvent(filter);
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.queryFailed, error);
            }));
        };
        ListDataService.prototype.queryChild = function (filter, sort) {
            var _this = this;
            // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;
            // if (isUpdateWithPaging) {
            //   return of(null);
            // }
            // tslint:disable-next-line: max-line-length
            var fullPaths = devkit.EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
            var paths = fullPaths.slice(0, fullPaths.length - 1);
            // debug
            // tslint:disable-next-line: max-line-length
            var bindingPaths = this.viewModel.bindingPath.split('/').filter(function (item) { return item; });
            var bindingData = this.viewModel.bindingData;
            var nodeCode = bindingPaths[bindingPaths.length - 1];
            nodeCode = nodeCode.substr(0, nodeCode.length - 1);
            // 获取上级实体
            var parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
            var BindingList = bindingData.getValue(parentPaths);
            if (!BindingList) {
                return;
            }
            this.viewModel.frameContext.appContext.params.delete("retrieveing");
            var configPath = "/" + nodeCode;
            var config = this.repository.entityCollection.getPaginationConfigByPath(configPath);
            if (config) {
                var _a = config.pageIndex, pageIndex = _a === void 0 ? 1 : _a, _b = config.pageSize, pageSize = _b === void 0 ? 0 : _b;
                // pageSize = 0表示未分页
                if (pageSize !== 0) {
                    this.viewModel.frameContext.appContext.params.set('queryChild', true);
                    var request$ = this.repository.queryChild(paths, pageIndex, pageSize);
                    return request$.pipe(operators.tap(function () { }, function (error) {
                        _this.formErrorService.exception(_this.languageService.queryFailed, error);
                    }));
                }
            }
        };
        /**
         * 获取分页信息
         * @param nodeCode nodeCode
         * @returns 分页信息，包括：分页大小、当前页码
         * @description 基本分页信息在分页信息中存储时key为nodeCode
         */
        /*private getPagingInfo(nodeCode: string) {
          const result: { pageIndex?: number, pageSize?: number } = {};
          const nodeCodePath = `/${nodeCode}`;
          const defaultPagingInfo = this.repository.entityCollection.getPaginationConfigByPath(nodeCodePath);
          const pageSize = defaultPagingInfo && defaultPagingInfo.pageSize || 0;
          const pageIndex = defaultPagingInfo && defaultPagingInfo.pageIndex || 1;
          result.pageIndex = pageIndex;
          result.pageSize = pageSize;
          return result;
        }*/
        /**
         * 追加一条新数据
         */
        ListDataService.prototype.append = function () {
            var _this = this;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'append' });
            }
            var append$ = this.repository.append();
            return append$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.appendFailed, error);
            }));
        };
        /**
         * 当前行前或后插入数据
         * @param position 1 | -1
         */
        ListDataService.prototype.insert = function (position) {
            var _this = this;
            if (position === void 0) {
                position = -1;
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'insert' });
            }
            var append$ = this.repository.insert(position);
            return append$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.appendFailed, error);
            }));
        };
        /**
         * 提交变更（批量编辑页面，行切换时提交增量）
         */
        ListDataService.prototype.updateChanges = function () {
            var update$ = this.repository.updateAllChanges();
            return update$;
        };
        /**
         * 批量保存
         * @param successMsg 自定义提示信息
         */
        ListDataService.prototype.save = function (successMsg) {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'save' });
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var save$ = this.repository.applyChanges();
            var result$ = save$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    var showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            var options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        _this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    _this.formNotifyService.success(_this.languageService.saveSuccess, { hideTitle: true });
                }
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.multiSaveFailed, error);
            }));
            return result$;
        };
        /**
         * 删除
         * @param id 要删除的数据的id
         * @param ifSave 是否保存
         * @param successMsg 自定义提示信息
         * @param confirm 是否需要确认
         * @param breakable 是否可中断，ifSave为false时流会中断
         */
        ListDataService.prototype.remove = function (id, ifSave, successMsg, confirm, breakable) {
            var _this = this;
            if (confirm === void 0) {
                confirm = true;
            }
            if (breakable === void 0) {
                breakable = true;
            }
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'delete' });
            }
            if (!id) {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return rxjs.empty();
            }
            confirm = (confirm === false || confirm === 'false') ? false : true;
            breakable = (breakable === false || breakable === 'false') ? false : true;
            var action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : rxjs.of(true);
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.empty();
                }
                ifSave = (ifSave === false || ifSave === 'false') ? false : true;
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                var remove$ = _this.repository.removeById(id, ifSave);
                if (!remove$) {
                    return rxjs.empty();
                }
                return remove$.pipe(operators.tap(function () {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.formNotifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.formErrorService.exception(_this.languageService.deleteFailed, error);
                }), operators.switchMap(function () {
                    if (ifSave === true || !breakable) {
                        // return this.load();
                        return rxjs.of([]);
                    }
                    else {
                        // 批量编辑列表表格处于编辑态场景时，为防止执行后续命令导致数据重新加载，所以在此将命令中断了。但同时也导致了删除数据后勾选记录依然存在。所以在这里需要单独调用一次清空勾选方法。
                        var datagridService = new DataGridService();
                        datagridService.context = _this['context'];
                        datagridService.uncheckDeletedRows([id]);
                        return rxjs.empty();
                    }
                }));
            }));
        };
        /**
         * 批量删除
         * @param ids ids
         * @param ifSave 是否保存
         * @param successMsg 自定义提示信息
         * @param deleteCurrentRowIfNoChecks 没有勾选时删除当前行
         */
        ListDataService.prototype.removeRows = function (ids, ifSave, successMsg, deleteCurrentRowIfNoChecks) {
            var _this = this;
            if (deleteCurrentRowIfNoChecks === void 0) {
                deleteCurrentRowIfNoChecks = false;
            }
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'removeRows' });
            }
            deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;
            if (!ids || ids.length === 0) {
                var currentId = this.bindingData.list.currentId;
                if (deleteCurrentRowIfNoChecks === true && currentId) {
                    ids = [this.bindingData.list.currentId];
                }
                else {
                    this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                    return rxjs.empty();
                }
            }
            var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.empty();
                }
                if (typeof ifSave === 'undefined') {
                    ifSave = true;
                }
                if (typeof ifSave === 'string') {
                    ifSave = ifSave.toLowerCase() === 'false' ? false : true;
                }
                ifSave = (ifSave === false) ? false : true;
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                var remove$ = _this.repository.removeByIds(ids, ifSave);
                if (!remove$) {
                    return rxjs.empty();
                }
                return remove$.pipe(operators.tap(function () {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.formNotifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.formErrorService.exception(_this.languageService.deleteFailed, error);
                }), operators.switchMap(function () {
                    return rxjs.of([]);
                }));
            }));
        };
        /**
         * 删除后的刷新
         */
        ListDataService.prototype.refreshAfterRemoving = function (loadCmdName, loadCmdFrameId) {
            if (this.viewModel && loadCmdName && loadCmdFrameId) {
                var commandService = this.viewModel.frameContext.injector.get(CommandService, null);
                return commandService.execute(loadCmdName, loadCmdFrameId);
            }
            return this.load();
        };
        /**
         * 刷新
         * @param loadCmdName 刷新命令
         * @param loadCmdFrameId 刷新命令所在的frameId
         */
        ListDataService.prototype.refresh = function (loadCmdName, loadCmdFrameId) {
            if (this.viewModel && loadCmdName && loadCmdFrameId) {
                var commandService = this.viewModel.frameContext.injector.get(CommandService, null);
                return commandService.execute(loadCmdName, loadCmdFrameId);
            }
            return this.load();
        };
        /**
         * 取消时检测未保存记录
         */
        ListDataService.prototype.cancel = function () {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'cancel' });
            }
            var hasChange$ = DataChangeDetectionService.hasChange(this.viewModel.frameContext);
            return hasChange$.pipe(operators.switchMap(function (changed) {
                if (!changed) {
                    return _this._cancel();
                }
                else {
                    return _this.msgService.question(_this.languageService['cancelWithoutSave']).pipe(operators.switchMap(function (ifCancel) {
                        if (ifCancel === false) {
                            return rxjs.EMPTY;
                        }
                        return _this._cancel();
                    }));
                }
            }));
        };
        /**
         * 还原变更集
         * @description 不带变更检测提示
         */
        ListDataService.prototype.revert = function () {
            return this._cancel();
        };
        /**
         * 取消（内部取消）
         */
        ListDataService.prototype._cancel = function () {
            var _this = this;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var cancel$ = this.repository.cancelChanges();
            return cancel$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.cancelFailed, error);
            }));
        };
        Object.defineProperty(ListDataService.prototype, "messagePipe", {
            /**
             * 获取根组件appContext
             */
            get: function () {
                if (this.viewModel && this.viewModel.frameContext) {
                    var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                    if (appContext) {
                        return appContext.messagePipe || null;
                    }
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 触发查询事件
         * @param filters 过滤条件
         */
        ListDataService.prototype.fireQueryEvent = function (filters) {
            var messagePipe = this.messagePipe;
            // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;
            if (messagePipe) {
                messagePipe.next({ type: 'query' });
            }
        };
        /**
         * 合并过滤条件
         * @param filter 表单过滤条件
         */
        ListDataService.prototype.mergeFilterConditions = function (filter) {
            if (typeof filter === 'string') {
                filter = JSON.parse(filter) || [];
            }
            var filters = filter;
            var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
            if (bindingPath) {
                var originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];
                // this.filterConditionService.getFilters(bindingPath) || [];
                var conditions = Array.from(originalConditions);
                if (conditions && conditions.length > 0) {
                    /* filters.forEach((item: any, index: number) => {
                      const field = item.FilterField || null;
                      if (field) {
                        const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);
                        if (duplicateIndex !== -1) {
                          filters[index] = conditions[duplicateIndex];
                          conditions.splice(duplicateIndex, 1);
                        }
                      }
                    });*/
                    // 修改命令上过滤条件的最后一个查询关系为and
                    if (filters.length > 0) {
                        // 最后一个过滤条件
                        var lastFilter = filters[filters.length - 1];
                        if (lastFilter) {
                            if (lastFilter.hasOwnProperty('Relation')) {
                                delete lastFilter.Relation;
                            }
                            lastFilter.relation = 1;
                        }
                    }
                    // 合并新的过滤条件和原来命令上的过滤条件
                    filters.push.apply(filters, __spread(conditions));
                }
            }
            return JSON.stringify(filters);
        };
        /**
         * 合并排序条件
         * @param sort 排序条件
         */
        ListDataService.prototype.mergeSortConditions = function (sort) {
            if (typeof sort === 'string') {
                sort = JSON.parse(sort) || [];
            }
            var sorts = sort;
            var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
            if (bindingPath) {
                // 获取当前绑定路径的所有排序条件
                var originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, function (direction) {
                    if (direction === 'asc') {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }) || [];
                var conditions = Array.from(originalConditions);
                // 如果当前绑定路径有排序条件，则忽略命令上预制的排序条件
                if (conditions && conditions.length > 0) {
                    // 遍历已有的过滤条件，如果有重复的field，用后者的覆盖已有的
                    /* sorts.forEach((item: any, index: number) => {
                      const field = item.SortField || null;
                      if (field) {
                        const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);
                        if (duplicateIndex !== -1) {
                          sorts[index] = conditions[duplicateIndex];
                          conditions.splice(duplicateIndex, 1);
                        }
                      }
                    });*/
                    return JSON.stringify(conditions);
                    // 将其余排序条件添加到排序数组
                    // sorts.push(...conditions);
                }
            }
            return JSON.stringify(sorts);
        };
        ListDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ListDataService.ctorParameters = function () {
            return [
                { type: FormMessageService },
                { type: devkit.Repository },
                { type: devkit.BindingData },
                { type: FormLoadingService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: FormNotifyService },
                { type: FormErrorService },
                { type: devkit.ViewModel },
                { type: FilterConditionService }
            ];
        };
        return ListDataService;
    }());

    /**
     * 子列表取数服务
     */
    var SubListDataService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function SubListDataService(msgService, repository, loadingService, viewModel, languageService, formNotifyService, formErrorService) {
            this.msgService = msgService;
            this.repository = repository;
            this.loadingService = loadingService;
            this.viewModel = viewModel;
            this.languageService = languageService;
            this.formNotifyService = formNotifyService;
            this.formErrorService = formErrorService;
            if (!languageService) {
                this.languageService = LanguageService.getInstance();
            }
            this.viewModel = viewModel;
        }
        /**
         * 新增
         */
        SubListDataService.prototype.add = function () {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'add' });
            }
            var path = this.getPath();
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var append$ = this.repository.appendByPath(path);
            return append$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.addFailed, error);
            }));
        };
        /**
         * 在指定位置插入
         * @param position 位置
         */
        SubListDataService.prototype.insert = function (position) {
            var _this = this;
            if (position === void 0) {
                position = -1;
            }
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'insert' });
            }
            var path = this.getPath();
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var append$ = this.repository.insertByPath(path, position);
            return append$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.addFailed, error);
            }));
        };
        /**
         * 删除子表数据
         */
        SubListDataService.prototype.remove = function (id, successMsg) {
            var msg = successMsg ? successMsg : '';
            return this.innerRemove(id, false, msg);
        };
        /**
         * 删除子表数据（不确认）
         */
        SubListDataService.prototype.removeWithoutConfirm = function (id) {
            return this.innerRemove(id, true, '');
        };
        /**
         * 批量删除子表
         * @param ids ids
         * @param successMsg 自定义提示信息
         */
        SubListDataService.prototype.removeChildrenByIds = function (ids, successMsg) {
            var _this = this;
            if (!ids) {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return rxjs.EMPTY;
            }
            var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.EMPTY;
                }
                var path = _this.getPath();
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                var remove$ = _this.repository.batchRemoveByPath(path, ids);
                return remove$.pipe(operators.tap(function () {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.formNotifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.formErrorService.exception(_this.languageService.deleteFailed, error);
                }));
            }));
        };
        /**
         * 删除
         */
        SubListDataService.prototype.innerRemove = function (id, isConfirm, successMsg) {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'remove' });
            }
            if (!id) {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return rxjs.empty();
            }
            var action$;
            if (isConfirm === false) {
                action$ = this.msgService.question(this.languageService.confirmDeletion);
            }
            else {
                action$ = rxjs.of(true);
            }
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.empty();
                }
                var path = _this.getPath();
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                var remove$ = _this.repository.removeByPath(path, id);
                return remove$.pipe(operators.tap(function () {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.formNotifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.formErrorService.exception(_this.languageService.deleteFailed, error);
                }));
            }));
        };
        /**
         * 删除并保存
         * @param id id
         * @param successMsg 自定义提示信息
         */
        SubListDataService.prototype.removeAndSave = function (id, successMsg) {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'removeAndSave' });
            }
            if (!id) {
                this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
                return rxjs.empty();
            }
            var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.empty();
                }
                // 删除子表数据
                var path = _this.getPath();
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                var remove$ = _this.repository.removeByPath(path, id);
                return remove$.pipe(
                // 执行主表保存
                operators.switchMap(function () {
                    var fid = _this.viewModel.bindingData.list.currentId;
                    return _this.repository.applyChangesById(fid);
                }), 
                // 隐藏加载中
                operators.tap(function () {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.formNotifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.formErrorService.exception(_this.languageService.deleteFailed, error);
                }));
            }));
        };
        /**
         * 上移或下移数据
         * @param direction 方向，up | down
         * @param field 排序字段
         * @param targets 要移动的数据
         * @description
         * 使用该方法时排序字段必须有值，否则无法排序
         */
        SubListDataService.prototype.move = function (direction, field, targets) {
            var _this = this;
            if (!targets) {
                return;
            }
            if (typeof targets === 'string') {
                targets = targets.split(',').filter(function (p) { return p; });
            }
            var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
            if (!bindingPath) {
                return;
            }
            var bindingList = this.viewModel.bindingData.getList();
            if (!bindingList || bindingList.length < 1) {
                return;
            }
            targets.forEach(function (target) {
                var index = bindingList.getIndexById(target);
                if (index === -1) {
                    return;
                }
                var item = bindingList.findById(target);
                var position = item.getValue(field);
                var base = direction === 'up' ? -1 : 1;
                // 待交换的行信息
                var exchangeRowIndex = index + base;
                if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {
                    // 第一行无法上移，最后一行无法下移
                    return;
                }
                var exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);
                var exchangeRow = bindingList.findById(exchangeRowId);
                var exchangeRowPosition = exchangeRow[field];
                // 移动行和交换行都没有排序
                if (_this.isNullOrEmpty(position) && _this.isNullOrEmpty(exchangeRowPosition)) {
                    return;
                }
                bindingList.swapById(target, exchangeRowId);
                exchangeRow.setValue(field, position, true, true);
                item.setValue(field, exchangeRowPosition, true, true);
            });
        };
        SubListDataService.prototype.isNullOrEmpty = function (value) {
            return value === '' || value === null || value === undefined;
        };
        /**
         * 获取完整路径
         * @todo：强识别到从表这一级
         * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
         */
        SubListDataService.prototype.getPath = function () {
            var bindingPath = this.viewModel.bindingPath;
            var rid = this.viewModel.bindingData.list.currentId; // root表数据id
            var path = '/' + rid;
            var subPaths = bindingPath.split('/');
            if (subPaths.length > 0) {
                // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
                // 因此index从1开始
                for (var index = 1; index < subPaths.length - 1; index++) {
                    var subPath = subPaths[index];
                    var subData = this.viewModel.bindingData[subPath];
                    if (!subData || !subData.currentId) {
                        this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });
                        throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                    }
                    path += "/" + subPath + "/" + subData.currentId;
                }
            }
            path += '/' + subPaths[subPaths.length - 1];
            return path;
        };
        Object.defineProperty(SubListDataService.prototype, "messagePipe", {
            /**
             * 获取根组件appContext
             */
            get: function () {
                if (this.viewModel && this.viewModel.frameContext) {
                    var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                    if (appContext) {
                        return appContext.messagePipe || null;
                    }
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        SubListDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SubListDataService.ctorParameters = function () {
            return [
                { type: FormMessageService },
                { type: devkit.Repository },
                { type: FormLoadingService },
                { type: devkit.ViewModel },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: FormNotifyService },
                { type: FormErrorService }
            ];
        };
        return SubListDataService;
    }());

    /**
     * 基础数据服务
     */
    var BaseDataService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function BaseDataService(frameContext) {
            this.frameContext = frameContext;
        }
        Object.defineProperty(BaseDataService.prototype, "repository", {
            /**
             * 实体仓库
             */
            get: function () {
                return this.frameContext.repository;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseDataService.prototype, "restService", {
            /**
             * Rest服务
             */
            get: function () {
                return this.repository.restService;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseDataService.prototype, "bindingData", {
            /**
             * 数据绑定
             */
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        return BaseDataService;
    }());

    /**
     * 树数据的帮助类
     */
    var ParentTreeNodeUtil = /** @class */ (function () {
        function ParentTreeNodeUtil() {
        }
        /**
         * 选中第一个根节点
         */
        ParentTreeNodeUtil.prototype.selectFirstRootNode = function (bindingData, hierarchyInfoKey) {
            var treeNodesData = bindingData.list.toJSON();
            var firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);
            return firstRootNodeId;
        };
        ParentTreeNodeUtil.prototype.selectNodeByBindingList = function (bindingList, hierarchyInfoKey, selectedNodeId) {
            var treeNodesData = bindingList.toJSON();
            // 如果要设置的节点不存在，则设置第1个根节点
            var selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
            var currentId = selectedNodeId;
            if (!selectedNodeData) {
                currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            setTimeout(function () {
                bindingList.setCurrentId(currentId, true, true);
            }, 0);
        };
        /**
         * 选中节点
         */
        ParentTreeNodeUtil.prototype.selectedNode = function (bindingData, hierarchyInfoKey, selectedNodeId) {
            var treeNodesData = bindingData.list.toJSON();
            // 如果要设置的节点不存在，则设置第1个根节点
            var selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
            var currentId = selectedNodeId;
            if (!selectedNodeData) {
                currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            if (bindingData.rowSelectedEventSuspend === true) {
                return;
            }
            setTimeout(function () {
                bindingData.list.currentId = null;
                bindingData.list.setCurrentId(currentId, true, true);
            }, 0);
        };
        /**
         * 检查是否有子节点
         */
        ParentTreeNodeUtil.prototype.hasChildNodes = function (treeNodesData, hierarchyInfoKey, fid) {
            var fNodeData = this.getNodeDataById(treeNodesData, fid);
            // const fLayer = fNodeData[hierarchyInfoKey]['layer'];
            var fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];
            // 非明细节点，返回true
            if (fIsDetail === false) {
                return true;
            }
            return false;
            // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fid);
            // return childNodesData.length > 0;
        };
        /**
         * 获取根节点（多个根节点时获取第一个）
         * @return 找不到时返回null
         */
        ParentTreeNodeUtil.prototype.getFirstNodeId = function (treeNodesData, hierarchyInfoKey) {
            var rootData = treeNodesData.find(function (itemData) {
                var layer = itemData[hierarchyInfoKey]['layer'];
                return layer === 1;
            });
            if (!rootData) {
                var rootLayer_1 = this.getRootLayer(treeNodesData, hierarchyInfoKey);
                rootData = treeNodesData.find(function (itemData) {
                    var layer = itemData[hierarchyInfoKey]['layer'];
                    return layer === rootLayer_1;
                });
            }
            return rootData ? rootData['id'] : '';
        };
        ParentTreeNodeUtil.prototype.getRootLayer = function (treeNodesData, hierarchyInfoKey) {
            var layer = null;
            if (treeNodesData && Array.isArray(treeNodesData)) {
                var layers = treeNodesData.map(function (item) {
                    var layer = item[hierarchyInfoKey]['layer'];
                    return layer;
                });
                var minLayer = Math.min.apply(Math, layers);
                if (!isNaN(minLayer)) {
                    layer = minLayer;
                }
            }
            return layer;
        };
        /**
         * 获取下一个节点（删除后）
         */
        ParentTreeNodeUtil.prototype.getNextNodeId = function (treeNodesData, hierarchyInfoKey, currentId) {
            // 当前节点信息
            var currentNodeData = treeNodesData.find(function (itemData) {
                return itemData['id'] === currentId;
            });
            var currentLayer = currentNodeData[hierarchyInfoKey]['layer'];
            // 父节点信息
            var fLayer = currentLayer - 1;
            var fParentElement = currentNodeData[hierarchyInfoKey]['parentElement'];
            // 查找兄弟节点
            var siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement);
            // 如果没有兄弟节点，向上查找
            if (siblingtreeNodesData.length === 1) {
                var parentData = treeNodesData.find(function (itemData) {
                    return itemData['id'] === fParentElement;
                });
                // 存在父节点，则设置父节点；
                // 不存在父节点，则设置第一个根节点。
                if (!parentData) {
                    return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
                }
                return parentData['id'];
            }
            else {
                return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);
            }
        };
        /**
         * 获取下个兄弟节点的id
         */
        ParentTreeNodeUtil.prototype.getNextSiblingNodeId = function (siblingtreeNodesData, currentId) {
            if (siblingtreeNodesData.length <= 1) {
                return '';
            }
            var currentIndex = siblingtreeNodesData.findIndex(function (itemData) {
                return itemData['id'] === currentId;
            });
            // 最后一行上移一行，其他下移一行
            var nextIndex = -1;
            if (currentIndex === siblingtreeNodesData.length - 1) {
                nextIndex = currentIndex - 1;
            }
            else {
                nextIndex = currentIndex + 1;
            }
            return siblingtreeNodesData[nextIndex]['id'];
        };
        /**
         * 获取下级节点的BindingObjects集合
         */
        ParentTreeNodeUtil.prototype.getChildNodesData = function (treeNodesData, hierarchyInfoKey, fLayer, fParentElement) {
            var childtreeNodesData = treeNodesData.filter(function (itemData) {
                var layer = itemData[hierarchyInfoKey]['layer'];
                var parentElement = itemData[hierarchyInfoKey]['parentElement'];
                return (layer === fLayer + 1) && fParentElement == parentElement;
            });
            return childtreeNodesData;
        };
        /**
         * 获取id获取节点数据
         */
        ParentTreeNodeUtil.prototype.getNodeDataById = function (treeNodesData, id) {
            var nodeData = treeNodesData.find(function (itemData) {
                return itemData['id'] === id;
            });
            return nodeData ? nodeData : null;
        };
        return ParentTreeNodeUtil;
    }());

    /**
     * 树数据的帮助类
     */
    var PathTreeNodeUtil = /** @class */ (function () {
        function PathTreeNodeUtil() {
        }
        /**
         * 选中第一个根节点
         */
        PathTreeNodeUtil.prototype.selectFirstRootNode = function (bindingData, hierarchyInfoKey) {
            var treeNodesData = bindingData.list.toJSON();
            var firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);
            return firstRootNodeId;
        };
        PathTreeNodeUtil.prototype.selectNodeByBindingList = function (bindingList, hierarchyInfoKey, selectedNodeId) {
            var treeNodesData = bindingList.toJSON();
            // 如果要设置的节点不存在，则设置第1个根节点
            var selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
            var currentId = selectedNodeId;
            if (!selectedNodeData) {
                currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            setTimeout(function () {
                bindingList.setCurrentId(currentId, true, true);
            }, 0);
        };
        /**
         * 选中节点
         */
        PathTreeNodeUtil.prototype.selectedNode = function (bindingData, hierarchyInfoKey, selectedNodeId) {
            var treeNodesData = bindingData.list.toJSON();
            // 如果要设置的节点不存在，则设置第1个根节点
            var selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
            var currentId = selectedNodeId;
            if (!selectedNodeData) {
                currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            if (bindingData.rowSelectedEventSuspend === true) {
                return;
            }
            setTimeout(function () {
                bindingData.list.currentId = null;
                bindingData.list.setCurrentId(currentId, true, true);
            }, 0);
        };
        /**
         * 检查是否有子节点
         */
        PathTreeNodeUtil.prototype.hasChildNodes = function (treeNodesData, hierarchyInfoKey, fid) {
            var fNodeData = this.getNodeDataById(treeNodesData, fid);
            // const fLayer = fNodeData[hierarchyInfoKey]['layer'];
            // const fPath  = fNodeData[hierarchyInfoKey]['path'];
            var fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];
            // 非明细节点，返回true
            if (fIsDetail === false) {
                return true;
            }
            return false;
            // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);
            // return childNodesData.length > 0;
        };
        /**
         * 获取根节点（多个根节点时获取第一个）
         * @return 找不到时返回null
         */
        PathTreeNodeUtil.prototype.getFirstNodeId = function (treeNodesData, hierarchyInfoKey) {
            var rootData = treeNodesData.find(function (itemData) {
                var layer = itemData[hierarchyInfoKey]['layer'];
                return layer === 1;
            });
            if (!rootData) {
                var rootLayer_1 = this.getRootLayer(treeNodesData, hierarchyInfoKey);
                rootData = treeNodesData.find(function (itemData) {
                    var layer = itemData[hierarchyInfoKey]['layer'];
                    return layer === rootLayer_1;
                });
            }
            return rootData ? rootData['id'] : '';
        };
        PathTreeNodeUtil.prototype.getRootLayer = function (treeNodesData, hierarchyInfoKey) {
            var layer = null;
            if (treeNodesData && Array.isArray(treeNodesData)) {
                var layers = treeNodesData.map(function (item) {
                    var layer = item[hierarchyInfoKey]['layer'];
                    return layer;
                });
                var minLayer = Math.min.apply(Math, layers);
                if (!isNaN(minLayer)) {
                    layer = minLayer;
                }
            }
            return layer;
        };
        /**
         * 获取下一个节点（删除后）
         */
        PathTreeNodeUtil.prototype.getNextNodeId = function (treeNodesData, hierarchyInfoKey, currentId) {
            // 当前节点信息
            var currentNodeData = treeNodesData.find(function (itemData) {
                return itemData['id'] === currentId;
            });
            var currentPath = currentNodeData[hierarchyInfoKey]['path'];
            var currentLayer = currentNodeData[hierarchyInfoKey]['layer'];
            // 父节点信息
            var fLayer = currentLayer - 1;
            var fPath = currentPath.substring(0, currentPath.length - 4);
            // 查找兄弟节点
            var siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);
            // 如果没有兄弟节点，向上查找
            if (siblingtreeNodesData.length === 1) {
                var parentData = treeNodesData.find(function (itemData) {
                    return itemData[hierarchyInfoKey]['path'] === fPath;
                });
                // 存在父节点，则设置父节点；
                // 不存在父节点，则设置第一个根节点。
                if (!parentData) {
                    return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
                }
                return parentData['id'];
            }
            else {
                return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);
            }
        };
        /**
         * 获取下个兄弟节点的id
         */
        PathTreeNodeUtil.prototype.getNextSiblingNodeId = function (siblingtreeNodesData, currentId) {
            if (siblingtreeNodesData.length <= 1) {
                return '';
            }
            var currentIndex = siblingtreeNodesData.findIndex(function (itemData) {
                return itemData['id'] === currentId;
            });
            // 最后一行上移一行，其他下移一行
            var nextIndex = -1;
            if (currentIndex === siblingtreeNodesData.length - 1) {
                nextIndex = currentIndex - 1;
            }
            else {
                nextIndex = currentIndex + 1;
            }
            return siblingtreeNodesData[nextIndex]['id'];
        };
        /**
         * 获取下级节点的BindingObjects集合
         */
        PathTreeNodeUtil.prototype.getChildNodesData = function (treeNodesData, hierarchyInfoKey, fLayer, fPath) {
            var childtreeNodesData = treeNodesData.filter(function (itemData) {
                var layer = itemData[hierarchyInfoKey]['layer'];
                var path = itemData[hierarchyInfoKey]['path'];
                return (layer === fLayer + 1) && path.startsWith(fPath);
            });
            return childtreeNodesData;
        };
        /**
         * 获取id获取节点数据
         */
        PathTreeNodeUtil.prototype.getNodeDataById = function (treeNodesData, id) {
            var nodeData = treeNodesData.find(function (itemData) {
                return itemData['id'] === id;
            });
            return nodeData ? nodeData : null;
        };
        return PathTreeNodeUtil;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-30 14:12:39
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-05-30 16:18:47
     */
    var TreeUtilFactory = /** @class */ (function () {
        function TreeUtilFactory() {
        }
        TreeUtilFactory.getInstance = function (treeType) {
            var util = null;
            switch (treeType) {
                case 'path':
                    util = new PathTreeNodeUtil();
                    break;
                case 'parent':
                    util = new ParentTreeNodeUtil();
                    break;
                default: break;
            }
            return util;
        };
        return TreeUtilFactory;
    }());

    /**
     * 父子树仓库
     */
    var ParentTreeRepository = /** @class */ (function () {
        function ParentTreeRepository() {
        }
        /**
         * 添加兄弟节点
         */
        ParentTreeRepository.prototype.addSibling = function (repository, id) {
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addSiblingUri = baseUri + "/service/parenthierarchycreatesibling";
            var body = {
                dataID: id,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var entity = repository.buildEntity(responseInfo.returnValue);
                repository.entityCollection.addEntity(entity);
                return entity;
            }));
        };
        /**
         * 添加兄弟节点
         */
        ParentTreeRepository.prototype.addChild = function (repository, parentId) {
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addChildUri = baseUri + "/service/parenthierarchycreatechildlayer";
            var body = {
                dataID: parentId,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addChildUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var entity = repository.buildEntity(responseInfo.returnValue);
                repository.entityCollection.addEntity(entity);
                return entity;
            }));
        };
        /**
         * 添加子表兄弟节点
         */
        ParentTreeRepository.prototype.addSubSibling = function (repository, nodes, ids) {
            var _this = this;
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addSubSiblingUri = baseUri + "/service/childnodeparenthierarchycreatesibling";
            var body = {
                nodes: nodes,
                ids: ids,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var path = _this.getPaths(nodes, ids);
                var entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
                return entity;
            }));
        };
        /**
         * 添加子表子节点
         */
        ParentTreeRepository.prototype.addSubChild = function (repository, nodes, ids) {
            var _this = this;
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addSubChildUri = baseUri + "/service/childnodeparenthierarchycreatechildlayer";
            var body = {
                nodes: nodes,
                ids: ids,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var paths = _this.getPaths(nodes, ids);
                var entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);
                return entity;
            }));
        };
        ParentTreeRepository.prototype.getPaths = function (nodes, ids) {
            var paths = '';
            if (nodes && nodes.length > 0 && ids && ids.length > 0) {
                for (var i = 0; i < ids.length; i++) {
                    if (nodes[i]) {
                        paths = paths + ("/" + ids[i]);
                        paths = paths + ("/" + nodes[i] + "s");
                    }
                }
            }
            return paths;
        };
        /**
         * 加载父节点
         */
        // tslint:disable-next-line: max-line-length
        ParentTreeRepository.prototype.loadByParentId = function (repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow, pagination, frameContext, reload) {
            var _this = this;
            if (frozenCurrentRow === void 0) {
                frozenCurrentRow = false;
            }
            if (reload === void 0) {
                reload = false;
            }
            var localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
            if (localEntities && localEntities.length > 0 && !reload) {
                return rxjs.of(localEntities);
            }
            var restService = repository.restService;
            var parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
            var originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
            var filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
            var isUsePagination = pagination && pagination.pageSize > 0 || false;
            // 组织EntityFilter
            var entityFilter = {
                FilterConditions: filtersWithParent,
                SortConditions: sorts,
                IsUsePagination: isUsePagination,
                Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
            };
            var requestInfo = restService.buildRequestInfo();
            return restService.extendQuery(entityFilter, requestInfo).pipe(operators.map(function (responseInfo) {
                var paginationInfo = _this.getPaginationInfo(responseInfo);
                if (parentId) {
                    if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                        frameContext.params.set("_NODE_" + parentId + "_PAGINATION_INFO_", paginationInfo);
                    }
                }
                else {
                    if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                        frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                    }
                }
                // 先清空下级实体
                _this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
                // 追加下级实体
                var listData = responseInfo.returnValue.result;
                var entities = repository.buildEntities(listData);
                if (frozenCurrentRow) {
                    repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
                }
                else {
                    repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
                }
                return entities;
            }));
        };
        // tslint:disable-next-line: max-line-length
        ParentTreeRepository.prototype.loadFullTree = function (repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
            var _this = this;
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var queryUrl = baseUri + "/service/parentidfulltreequery";
            var parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
            var entityFilter = this.buildEntityFilter(filters, null, 0, 0);
            var body = {
                dataId: parentId || '',
                isUsePagination: false,
                virtualPropertyName: propertyName,
                pagination: {},
                fullTreeType: fullTreeType,
                loadType: loadType,
                filter: entityFilter,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            return restService.invoke(queryUrl, 'PUT', null, options).pipe(operators.tap(function (responseInfo) {
                // 保存展开的节点
                if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                    var frameContext = context.frameContext;
                    var virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                    if (virtualRootFrameContext) {
                        var list = responseInfo.returnValue.result;
                        var selectedRowId_1 = responseInfo.returnValue.selectedRowId;
                        // 从顶层开始计算所有需要展开的节点
                        var leafNodeInfo = list.find(function (item) { return item[repository.primaryKey] === selectedRowId_1; });
                        var hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                        var ids = _this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                        virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                        virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId_1);
                        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId_1);
                    }
                }
            }), operators.map(function (responseInfo) {
                var frozenCurrentRow = context && context.frozenCurrentRow || false;
                // 先清空下级实体
                _this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
                // 追加下级实体
                var listData = responseInfo.returnValue.result;
                var entities = repository.buildEntities(listData);
                if (frozenCurrentRow) {
                    repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
                }
                else {
                    repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
                }
                return entities;
            }));
        };
        /**
         * 插入对父节点的过滤
         */
        ParentTreeRepository.prototype.buildFiltersWithParent = function (originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
            var relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
            var parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
            var parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';
            var parentFilterArray = [
                {
                    "FilterField": originalHierarchyInfoKey + ".Layer",
                    "Value": parentLayer + 1,
                    "Lbracket": null,
                    "Rbracket": null,
                    "Relation": 1,
                    "Expresstype": 0,
                    "Compare": 0
                }
            ];
            if (parentElement) {
                parentFilterArray.push({
                    "FilterField": originalHierarchyInfoKey + ".ParentElement",
                    "Value": parentElement,
                    "Lbracket": null,
                    "Rbracket": null,
                    "Relation": relationType,
                    "Expresstype": 0,
                    "Compare": 0
                });
            }
            else {
                parentFilterArray[0].Relation = relationType;
            }
            return parentFilterArray.concat(filterArray);
        };
        ParentTreeRepository.prototype.buildEntityFilter = function (filter, sort, pageSize, pageIndex) {
            // @todo：临时兼容老代码，降低改动带来的风险
            if (!filter && !sort && !pageSize && !pageIndex) {
                return null;
            }
            if (!filter) {
                filter = [];
            }
            if (!sort) {
                sort = [];
            }
            // 纠正最后一个过滤条件的Relation
            if (filter && filter.length > 0) {
                filter[filter.length - 1].Relation = 0;
            }
            var entityFilter = {
                FilterConditions: filter,
                SortConditions: sort,
                IsUsePagination: pageSize === 0 ? false : true,
                Pagination: {
                    PageIndex: pageIndex,
                    PageSize: pageSize,
                    PageCount: 0,
                    TotalCount: 0
                }
            };
            return entityFilter;
        };
        /**
         * 清空后代实体
         * @description parentHierarchyInfo中layer为要清空后代节点的layer，但里面的parentElement不是父级的id，而是要清空后代节点的id
         */
        ParentTreeRepository.prototype.clearDescendantEntities = function (repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow) {
            if (frozenCurrentRow === void 0) {
                frozenCurrentRow = false;
            }
            // 清空根节点
            if (!parentHierarchyInfo) {
                repository.entityCollection.clear();
                return;
            }
            var nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);
            if (frozenCurrentRow) {
                repository.entityCollection.removeEntities(function (entity) {
                    var id = entity[entity.primaryKey];
                    return nodes.includes(id);
                });
            }
            else {
                repository.entityCollection.removeData(function (entity) {
                    var id = entity[entity.primaryKey];
                    return nodes.includes(id);
                });
            }
        };
        /**
         * 获取某个节点的所有子节点
         * @param repository repository
         * @param hierarchyInfokey hierarchyInfokey
         * @param parentHierarchyInfo parentHierarchyInfo
         */
        ParentTreeRepository.prototype.getChildNodes = function (repository, hierarchyInfokey, parentHierarchyInfo) {
            var _this = this;
            var fparentElement = parentHierarchyInfo.id;
            var flayer = parentHierarchyInfo.layer;
            var nodes = [];
            repository.entityCollection.getAllEntities().forEach(function (entity) {
                var hierarchyInfo = entity[hierarchyInfokey];
                var parentElement = hierarchyInfo.parentElement;
                var layer = hierarchyInfo.layer;
                var result = layer >= (flayer + 1) && parentElement === fparentElement;
                if (result) {
                    var id = entity[entity.primaryKey];
                    nodes.push(id);
                    var childHierarchyInfo = _this.getHierarchyInfoById(repository, hierarchyInfokey, id);
                    var childs = _this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);
                    if (childs && childs.length > 0) {
                        nodes = nodes.concat(childs);
                    }
                }
            });
            return nodes;
        };
        /**
         * 获取实体的分级信息
         */
        ParentTreeRepository.prototype.getHierarchyInfoById = function (repository, hierarchyInfokey, id) {
            if (!id) {
                return null;
            }
            var entity = repository.entityCollection.getEntityById(id);
            var hierarchyInfoEntity = entity[hierarchyInfokey];
            var result = hierarchyInfoEntity.toJSON();
            result['id'] = id;
            return result;
        };
        ParentTreeRepository.prototype.getHierarchyInfo = function (entity, hierarchyInfokey) {
            return entity[hierarchyInfokey];
        };
        /**
         * 获取分级码的原始的字段名
         */
        ParentTreeRepository.prototype.getOriginalHierarchyInfoKey = function (repository, hierarchyInfokey) {
            var ngObjects = devkit.FieldMetadataUtil.getNgObjects(repository.entityType);
            var hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
            return hierarchyInfoNgObject.originalDataField;
        };
        ParentTreeRepository.prototype.getPaginationInfo = function (responseInfo) {
            return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
        };
        ParentTreeRepository.prototype.findParent = function (hierarchyInfo, list, hierarchyInfoKey) {
            return list.find(function (item) {
                var currentHierarchyInfo = item[hierarchyInfoKey];
                return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;
            });
        };
        ParentTreeRepository.prototype.getAllParentIds = function (hierarchyInfo, list, hierarchyInfoKey, repository) {
            var item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
            var ids = [];
            while (item) {
                ids.push(item[repository.primaryKey]);
                item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
            }
            return ids;
        };
        /**
         * 查找节点下所有子级（第一级）
         * @param repository repository
         * @param hierarchyInfoKey 分级码字段
         * @param id id
         * @returns
         */
        ParentTreeRepository.prototype.getChildren = function (repository, hierarchyInfoKey, id) {
            var _this = this;
            var hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
            if (!hierarchyInfo) {
                return null;
            }
            var layer = hierarchyInfo.layer;
            var parentElement = hierarchyInfo.parentElement;
            var entities = repository.entityCollection.getEntities(function (entity) {
                var hierarchyInfo = _this.getHierarchyInfo(entity, hierarchyInfoKey);
                var matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);
                if (matched) {
                    return entity;
                }
                else {
                    return null;
                }
            });
            return entities;
        };
        return ParentTreeRepository;
    }());

    /**
     * 路径树仓库
     */
    var PathTreeRepository = /** @class */ (function () {
        function PathTreeRepository() {
        }
        /**
         * 添加兄弟节点
         */
        PathTreeRepository.prototype.addSibling = function (repository, id) {
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addSiblingUri = baseUri + "/service/pathhierarchycreatesibling";
            var body = {
                dataID: id,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var entity = repository.buildEntity(responseInfo.returnValue);
                repository.entityCollection.addEntity(entity);
                return entity;
            }));
        };
        /**
         * 添加兄弟节点
         */
        PathTreeRepository.prototype.addChild = function (repository, parentId) {
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addChildUri = baseUri + "/service/pathhierarchycreatechildlayer";
            var body = {
                dataID: parentId,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addChildUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var entity = repository.buildEntity(responseInfo.returnValue);
                repository.entityCollection.addEntity(entity);
                return entity;
            }));
        };
        /**
         * 添加子表兄弟节点
         */
        PathTreeRepository.prototype.addSubSibling = function (repository, nodes, ids) {
            var _this = this;
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addSubSiblingUri = baseUri + "/service/childnodepathhierarchycreatesibling";
            var body = {
                nodes: nodes,
                ids: ids,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var path = _this.getPaths(nodes, ids);
                var entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
                return entity;
            }));
        };
        /**
        * 添加子表子节点
        */
        PathTreeRepository.prototype.addSubChild = function (repository, nodes, ids) {
            var _this = this;
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var addSubChildUri = baseUri + "/service/childnodepathhierarchycreatechildlayer";
            var body = {
                nodes: nodes,
                ids: ids,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                body: body
            };
            return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(operators.map(function (responseInfo) {
                var path = _this.getPaths(nodes, ids);
                var entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
                return entity;
            }));
        };
        PathTreeRepository.prototype.getPaths = function (nodes, ids) {
            var paths = '';
            if (nodes && nodes.length > 0 && ids && ids.length > 0) {
                for (var i = 0; i < ids.length; i++) {
                    if (nodes[i]) {
                        paths = paths + ("/" + ids[i]);
                        paths = paths + ("/" + nodes[i] + "s");
                    }
                }
            }
            return paths;
        };
        /**
         * 加载父节点
         */
        // tslint:disable-next-line: max-line-length
        PathTreeRepository.prototype.loadByParentId = function (repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow, pagination, frameContext, reload) {
            var _this = this;
            if (frozenCurrentRow === void 0) {
                frozenCurrentRow = false;
            }
            if (reload === void 0) {
                reload = false;
            }
            var localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
            if (localEntities && localEntities.length > 0 && !reload) {
                return rxjs.of(localEntities);
            }
            var restService = repository.restService;
            var parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
            var originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
            var filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
            var isUsePagination = pagination && pagination.pageSize > 0 || false;
            // 组织EntityFilter
            var entityFilter = {
                FilterConditions: filtersWithParent,
                SortConditions: sorts,
                IsUsePagination: isUsePagination,
                Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
            };
            var requestInfo = restService.buildRequestInfo();
            return restService.extendQuery(entityFilter, requestInfo).pipe(operators.map(function (responseInfo) {
                var paginationInfo = _this.getPaginationInfo(responseInfo);
                if (parentId) {
                    if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                        frameContext.params.set("_NODE_" + parentId + "_PAGINATION_INFO_", paginationInfo);
                    }
                }
                else {
                    if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                        frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                    }
                }
                // 先清空下级实体
                _this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
                // 追加下级实体
                var listData = responseInfo.returnValue.result;
                var entities = repository.buildEntities(listData);
                if (frozenCurrentRow) {
                    repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
                }
                else {
                    repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
                }
                return entities;
            }));
        };
        // tslint:disable-next-line: max-line-length
        PathTreeRepository.prototype.loadFullTree = function (repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
            var _this = this;
            var restService = repository.restService;
            var baseUri = restService.baseUri;
            var queryUrl = baseUri + "/service/parentidfulltreequery";
            var pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
            var entityFilter = this.buildEntityFilter(filters, null, 0, 0);
            var body = {
                dataId: parentId || '',
                isUsePagination: false,
                virtualPropertyName: propertyName,
                pagination: {},
                fullTreeType: fullTreeType,
                loadType: loadType,
                filter: entityFilter,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            return restService.invoke(queryUrl, 'PUT', null, options).pipe(operators.tap(function (responseInfo) {
                // 保存展开的节点
                if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                    var frameContext = context.frameContext;
                    var virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                    if (virtualRootFrameContext) {
                        var list = responseInfo.returnValue.result;
                        var selectedRowId_1 = responseInfo.returnValue.selectedRowId;
                        // 从顶层开始计算所有需要展开的节点
                        var leafNodeInfo = list.find(function (item) { return item[repository.primaryKey] === selectedRowId_1; });
                        var hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                        var ids = _this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                        virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                        virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId_1);
                        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId_1);
                    }
                }
            }), operators.map(function (responseInfo) {
                var frozenCurrentRow = context && context.frozenCurrentRow || false;
                // 先清空下级实体
                _this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);
                // 追加下级实体
                var listData = responseInfo.returnValue.result;
                var entities = repository.buildEntities(listData);
                if (frozenCurrentRow) {
                    repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
                }
                else {
                    repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
                }
                return entities;
            }));
        };
        /**
         * 插入对父节点的过滤
         */
        PathTreeRepository.prototype.buildFiltersWithParent = function (originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
            var relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
            var parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
            var parentFilterArray = [
                {
                    "FilterField": originalHierarchyInfoKey + ".Layer",
                    "Value": parentLayer + 1,
                    "Lbracket": null,
                    "Rbracket": null,
                    "Relation": 1,
                    "Expresstype": 0,
                    "Compare": 0
                }
            ];
            // 父路径过滤，如果为空，则不添加（兼容oracle取数）
            var parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';
            if (parentPath) {
                parentFilterArray.push({
                    "FilterField": originalHierarchyInfoKey + ".Path",
                    "Value": parentPath,
                    "Lbracket": null,
                    "Rbracket": null,
                    "Relation": relationType,
                    "Expresstype": 0,
                    "Compare": 7
                });
            }
            else {
                parentFilterArray[0].Relation = relationType;
            }
            return parentFilterArray.concat(filterArray);
        };
        PathTreeRepository.prototype.buildEntityFilter = function (filter, sort, pageSize, pageIndex) {
            // @todo：临时兼容老代码，降低改动带来的风险
            if (!filter && !sort && !pageSize && !pageIndex) {
                return null;
            }
            if (!filter) {
                filter = [];
            }
            if (!sort) {
                sort = [];
            }
            // 纠正最后一个过滤条件的Relation
            if (filter && filter.length > 0) {
                filter[filter.length - 1].Relation = 0;
            }
            var entityFilter = {
                FilterConditions: filter,
                SortConditions: sort,
                IsUsePagination: pageSize === 0 ? false : true,
                Pagination: {
                    PageIndex: pageIndex,
                    PageSize: pageSize,
                    PageCount: 0,
                    TotalCount: 0
                }
            };
            return entityFilter;
        };
        /**
         * 清空后代实体
         */
        PathTreeRepository.prototype.clearDescendantEntities = function (repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow) {
            if (frozenCurrentRow === void 0) {
                frozenCurrentRow = false;
            }
            // 清空根节点
            if (!parentHierarchyInfo) {
                repository.entityCollection.clear();
                return;
            }
            var fPath = parentHierarchyInfo.path;
            var fLayer = parentHierarchyInfo.layer;
            if (frozenCurrentRow) {
                repository.entityCollection.removeData(function (entity) {
                    var hierarchyInfo = entity[hierarchyInfokey];
                    var path = hierarchyInfo.path;
                    var layer = hierarchyInfo.layer;
                    return layer > fLayer && path.startsWith(fPath);
                });
            }
            else {
                repository.entityCollection.removeEntities(function (entity) {
                    var hierarchyInfo = entity[hierarchyInfokey];
                    var path = hierarchyInfo.path;
                    var layer = hierarchyInfo.layer;
                    return layer > fLayer && path.startsWith(fPath);
                });
            }
        };
        /**
         * 获取实体的分级信息
         */
        PathTreeRepository.prototype.getHierarchyInfoById = function (repository, hierarchyInfokey, id) {
            if (!id) {
                return null;
            }
            var entity = repository.entityCollection.getEntityById(id);
            var hierarchyInfoEntity = entity[hierarchyInfokey];
            return hierarchyInfoEntity.toJSON();
        };
        /**
         * 获取分级码的原始的字段名
         */
        PathTreeRepository.prototype.getOriginalHierarchyInfoKey = function (repository, hierarchyInfokey) {
            var ngObjects = devkit.FieldMetadataUtil.getNgObjects(repository.entityType);
            var hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
            return hierarchyInfoNgObject.originalDataField;
        };
        PathTreeRepository.prototype.getPaginationInfo = function (responseInfo) {
            return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
        };
        PathTreeRepository.prototype.findParent = function (hierarchyInfo, list, hierarchyInfoKey) {
            return list.find(function (item) {
                var currentHierarchyInfo = item[hierarchyInfoKey];
                return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
            });
        };
        PathTreeRepository.prototype.getAllParentIds = function (hierarchyInfo, list, hierarchyInfoKey, repository) {
            var item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
            var ids = [];
            while (item) {
                ids.push(item[repository.primaryKey]);
                item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
            }
            return ids;
        };
        PathTreeRepository.prototype.getHierarchyInfo = function (entity, hierarchyInfoKey) {
            return entity[hierarchyInfoKey];
        };
        /**
         * 查找节点下所有子级（第一级）
         * @param repository repository
         * @param hierarchyInfoKey 分级码字段
         * @param id id
         * @returns
         */
        PathTreeRepository.prototype.getChildren = function (repository, hierarchyInfoKey, id) {
            var _this = this;
            var hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
            if (!hierarchyInfo) {
                return null;
            }
            var layer = hierarchyInfo.layer;
            var path = hierarchyInfo.path;
            var entities = repository.entityCollection.getEntities(function (entity) {
                var hierarchyInfo = _this.getHierarchyInfo(entity, hierarchyInfoKey);
                var matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);
                if (matched) {
                    return entity;
                }
                else {
                    return null;
                }
            });
            return entities;
        };
        return PathTreeRepository;
    }());

    var TreeRepositoryFactory = /** @class */ (function () {
        function TreeRepositoryFactory() {
        }
        TreeRepositoryFactory.getInstance = function (treeType) {
            var repository = null;
            switch (treeType) {
                case "path":
                    repository = new PathTreeRepository();
                    break;
                case "parent":
                    repository = new ParentTreeRepository();
                    break;
                default: break;
            }
            return repository;
        };
        return TreeRepositoryFactory;
    }());

    // tslint:disable: no-string-literal
    /**
     * 树数据服务
     */
    var TreeDataService = /** @class */ (function (_super) {
        __extends(TreeDataService, _super);
        /**
         * 构造函数
         */
        function TreeDataService(frameContext, messageService, loadingService, notifyService, errorService, languageService) {
            var _this = _super.call(this, frameContext) || this;
            _this.messageService = messageService;
            _this.loadingService = loadingService;
            _this.notifyService = notifyService;
            _this.errorService = errorService;
            _this.languageService = languageService;
            if (!languageService) {
                _this.languageService = LanguageService.getInstance();
            }
            return _this;
        }
        Object.defineProperty(TreeDataService.prototype, "hierarchyInfoKey", {
            /**
             * 分级信息字段名
             */
            get: function () {
                return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeDataService.prototype, "virtualRootFrameContext", {
            get: function () {
                return this.frameContext.getVirtualRootFrameContext();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 加载数据
         */
        TreeDataService.prototype.load = function (filters, sorts) {
            var _this = this;
            var filtersArray = this.parseConditions(filters);
            var sortsArray = this.parseConditions(sorts);
            var correctSelectedNode = this.repository.entityCollection.count() === 0;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);
            return query$.pipe(operators.tap(function () {
                // 纠正选中节点
                if (correctSelectedNode === true) {
                    var hierarchyType = _this.getHierarchyType();
                    var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                    if (treeNodeUtil !== null) {
                        treeNodeUtil.selectFirstRootNode(_this.bindingData, _this.hierarchyInfoKey);
                    }
                }
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.loadFailed, error);
            }));
        };
        /**
         * 分层加载数据
         */
        TreeDataService.prototype.loadByLevel = function (filters, sorts, frozenCurrentRow) {
            var _this = this;
            this.setLoadByLevelState(filters, sorts);
            var filtersArray = this.parseConditions(filters);
            var sortsArray = this.parseConditions(sorts);
            // const parentId = this.bindingData.list.currentId;
            var parentId = this.getIdToExpand();
            var correctSelectedNode = this.repository.entityCollection.count() === 0;
            if (frozenCurrentRow === undefined) {
                frozenCurrentRow = false;
            }
            if (typeof frozenCurrentRow !== 'boolean') {
                frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
            }
            var hierarchyType = this.getHierarchyType();
            var repository = TreeRepositoryFactory.getInstance(hierarchyType);
            if (repository === null) {
                return rxjs.empty();
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            // 构造分页信息
            var pagination = this.buildPaginationInfo(parentId);
            var reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;
            var query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);
            return query$.pipe(operators.tap(function (entities) {
                _this.frameContext.params.delete('_RELOAD_CHILDREN_');
                // 纠正选中节点
                if (correctSelectedNode === true) {
                    var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                    if (treeNodeUtil !== null) {
                        treeNodeUtil.selectFirstRootNode(_this.bindingData, _this.hierarchyInfoKey);
                    }
                }
                var currentRowId = _this.bindingData.list.currentItem.primaryKeyValue;
                if (frozenCurrentRow) {
                    // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                    var containsCurrentRow = entities.find(function (item) { return item.primaryValue === currentRowId; });
                    if (containsCurrentRow) {
                        _this.setCurrentId(currentRowId);
                    }
                    // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                    if (!_this.repository.entityCollection.getEntityById(currentRowId)) {
                        var firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                        if (firstChildId) {
                            _this.setCurrentId(firstChildId);
                        }
                    }
                }
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.loadFailed, error);
            }));
        };
        /**
         * 加载完整树
         * @param virtualPropertyName 虚拟字段
         * @param fullTreeType 是否是完整树加载 0：完整树 1：部分树
         * @param loadType 是否分级加载 0：全部加载 1：分级加载
         * @param filter 过滤条件
         * @param frozenCurrentRow 冻结当前行
         */
        TreeDataService.prototype.loadFullTree = function (virtualPropertyName, fullTreeType, loadType, filters, frozenCurrentRow) {
            var _this = this;
            if (typeof fullTreeType !== 'string') {
                throw new Error('ArgumentError: fullTreeType 不能为空且必须为字符串。');
            }
            if (typeof loadType !== 'string') {
                throw new Error('ArgumentError: loadType 不能为空且必须为字符串。');
            }
            if (frozenCurrentRow === undefined) {
                frozenCurrentRow = false;
            }
            if (typeof frozenCurrentRow !== 'boolean') {
                frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
            }
            var virtualRootFrameContext = this.virtualRootFrameContext;
            // 还原上次设置的结果集
            virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');
            virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');
            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);
            var filtersArray = this.parseConditions(filters);
            var parentId = this.getIdToExpand();
            var correctSelectedNode = this.repository.entityCollection.count() === 0;
            var hierarchyType = this.getHierarchyType();
            var repository = TreeRepositoryFactory.getInstance(hierarchyType);
            if (repository === null) {
                return rxjs.EMPTY;
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var context = {
                frameContext: this.frameContext,
                frozenCurrentRow: frozenCurrentRow
            };
            // tslint:disable-next-line: max-line-length
            var query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);
            return query$.pipe(operators.tap(function (entities) {
                var selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');
                // 纠正选中节点
                if (correctSelectedNode === true || !selectedRowId) {
                    var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                    if (treeNodeUtil !== null) {
                        var computedFirstRowId = treeNodeUtil.selectFirstRootNode(_this.bindingData, _this.hierarchyInfoKey);
                        if (computedFirstRowId) {
                            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', computedFirstRowId);
                        }
                    }
                }
                var currentRowId = _this.bindingData.list.currentItem.primaryKeyValue;
                if (frozenCurrentRow) {
                    // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                    var containsCurrentRow = entities.find(function (item) { return item.primaryValue === currentRowId; });
                    if (containsCurrentRow) {
                        _this.setCurrentId(currentRowId);
                    }
                    // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                    if (!_this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {
                        var firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                        if (firstChildId) {
                            _this.setCurrentId(firstChildId);
                        }
                    }
                }
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.loadFailed, error);
            }));
        };
        /**
         * 获取最新展开的节点
         */
        TreeDataService.prototype.getIdToExpand = function () {
            var expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
            var idToExpand = expandNodes.pop();
            this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
            return idToExpand;
        };
        /**
         * 设置最新展开的节点
         */
        TreeDataService.prototype.setIdToExpand = function (idToExpand) {
            var expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
            expandNodes.push(idToExpand);
            this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        };
        /**
         * 解析过滤条件
         */
        TreeDataService.prototype.parseConditions = function (conditions) {
            var conditionsString = (!conditions || conditions === '') ? '[]' : conditions;
            return JSON.parse(conditionsString);
        };
        /**
         * 新增同级
         */
        TreeDataService.prototype.addSibling = function (id) {
            var _this = this;
            // 设计时id的获取改为从命令参数上获取，但设计时没有参数必填检查，
            // 如果打开表单保存了（即更新了最新的命令构件），但没有配置该参数，可能会传递过来一个空值，
            // 为了兼容此情况，使用当前行id作为id的值
            id = id ? id : this.bindingData.list.currentId;
            // 参数检查
            if (!id || id === 'undefined') {
                id = '';
            }
            // 记录最近一次修改的数据id
            var lastModifiedId = this.bindingData.list.currentId;
            // 获取分级方式
            var hierarchyType = this.getHierarchyType();
            // 执行取数
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var repository = TreeRepositoryFactory.getInstance(hierarchyType);
            if (!repository) {
                // 错误的分级码
                throw new Error(this.languageService['errorHierarchyKey']);
            }
            var result$ = repository.addSibling(this.repository, id);
            return result$.pipe(operators.tap(function () {
                _this.virtualRootFrameContext.setParam('IS_ADD', true);
                _this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.addSiblingFailed, error);
            }));
        };
        /**
         * 新增下级
         */
        TreeDataService.prototype.addChild = function (id) {
            var _this = this;
            // 原因同addSibling的修改
            id = id ? id : this.bindingData.list.currentId;
            // 参数检查
            if (!id) {
                // 请选择父节点
                this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
                return rxjs.empty();
            }
            // 记录最近一次修改的数据id
            var lastModifiedId = this.bindingData.list.currentId;
            // 获取分级方式
            var hierarchyType = this.getHierarchyType();
            // 执行取数
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            // 新增的时候，要展开父节点
            this.setIdToExpand(id);
            var reloadChild$ = this.reloadByLevel();
            var repository = TreeRepositoryFactory.getInstance(hierarchyType);
            if (!repository) {
                throw new Error(this.languageService['errorHierarchyKey']);
            }
            var addChild$ = repository.addChild(this.repository, id);
            var result$ = reloadChild$.pipe(operators.switchMap(function () {
                return addChild$;
            }), operators.tap(function () {
                _this.virtualRootFrameContext.setParam('IS_ADD', true);
                _this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.addChildFailed, error);
            }));
            return result$;
        };
        /**
         * 批量保存
         */
        TreeDataService.prototype.save = function () {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'save' });
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var save$ = this.repository.applyChanges();
            var result$ = save$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.notifyService.success(_this.languageService.saveSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.multiSaveFailed, error);
            }));
            return result$;
        };
        /**
         * 删除
         */
        TreeDataService.prototype.remove = function (id, successMsg) {
            var _this = this;
            // 原因同addSibling
            id = id ? id : this.bindingData.list.currentId;
            // 参数检查
            if (!id) {
                this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return rxjs.empty();
            }
            // 存在子节点不允许删除
            var treeNodesData = this.repository.entityCollection.toJSON();
            var hierarchyType = this.getHierarchyType();
            var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
            if (treeNodeUtil === null) {
                return rxjs.empty();
            }
            if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
                this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });
                return rxjs.empty();
            }
            // 确认删除
            var action$ = this.messageService.question(this.languageService.confirmDeletion);
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.empty();
                }
                // 获取删除后要设置的节点id
                var nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, _this.hierarchyInfoKey, id);
                // 执行删除
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                var remove$ = _this.frameContext.repository.removeById(id);
                return remove$.pipe(operators.tap(function () {
                    // 设置选中节点
                    treeNodeUtil.selectedNode(_this.bindingData, _this.hierarchyInfoKey, nextNodeId);
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.notifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.notifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.errorService.exception(_this.languageService.deleteFailed, error);
                }));
            }));
        };
        /**
         * 取消时检测未保存记录
         */
        TreeDataService.prototype.cancel = function () {
            var _this = this;
            var hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
            return hasChange$.pipe(operators.switchMap(function (changed) {
                if (!changed) {
                    return _this._cancel();
                }
                else {
                    return _this.messageService.question(_this.languageService['cancelWithoutSave']).pipe(operators.switchMap(function (ifCancel) {
                        if (ifCancel === false) {
                            return rxjs.EMPTY;
                        }
                        return _this._cancel();
                    }));
                }
            }));
        };
        /**
         * 构造分页信息
         * @param parentId parentId
         * @returns
         */
        TreeDataService.prototype.buildPaginationInfo = function (parentId) {
            var pagination = { pageIndex: 0, pageSize: 0 };
            var enableNodePagination = this.frameContext.params.get('enableNodePagination');
            if (!parentId) {
                // 一级分页
                var pageSize = this.repository.entityCollection.pageSize || 0;
                var pageIndex = this.repository.entityCollection.pageIndex || 0;
                // 启用了一级分页
                if (pageSize !== 0) {
                    pagination.pageSize = pageSize;
                    pagination.pageIndex = pageIndex;
                }
            }
            else {
                // 如果未启用节点分页或当前为顶级节点加载，则不处理节点分页
                if (enableNodePagination) {
                    var nodePageSize = this.frameContext.params.get('nodePageSize') || 0;
                    var nodePageIndex = this.frameContext.params.get("_NODE_" + parentId + "_PAGE_INDEX_");
                    if (!nodePageIndex) {
                        this.frameContext.params.set("_NODE_" + parentId + "_PAGE_INDEX_", 1);
                        nodePageIndex = 1;
                    }
                    pagination.pageIndex = nodePageIndex;
                    pagination.pageSize = nodePageSize;
                }
            }
            return pagination;
        };
        /**
         * 取消变更
         */
        TreeDataService.prototype._cancel = function () {
            var _this = this;
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var cancel$ = this.repository.cancelChanges();
            return cancel$.pipe(operators.switchMap(function () {
                var isAdd = _this.virtualRootFrameContext.getParam('IS_ADD');
                var lastModifiedId = _this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');
                var currentId = _this.bindingData.list.currentId;
                if (isAdd === true) {
                    _this.repository.entityCollection.removeEntityById(currentId);
                    // 重置编辑状态
                    _this.virtualRootFrameContext.setParam('IS_ADD', false);
                    if (lastModifiedId) {
                        setTimeout(function () {
                            _this.bindingData.list.setCurrentId(lastModifiedId, true, true);
                        }, 0);
                    }
                    return rxjs.of(null);
                }
                else {
                    return _this.repository.updateById(currentId);
                }
            }), operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.cancelFailed, error);
            }));
        };
        /**
         * 检查是否存在下级节点（内部方法，请勿使用）
         */
        TreeDataService.prototype.hasChildNodes = function (id, treeNodesData) {
            var treeNodeUtil = this.getTreeNodeUtil();
            if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
                return true;
            }
            return false;
        };
        /**
         * 计算删除后的当前节点id（内部方法，请勿使用）
         */
        TreeDataService.prototype.getNextNodeIdAfterRemoving = function (idToRemove, treeNodesData) {
            var treeNodeUtil = this.getTreeNodeUtil();
            var nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);
            return nextNodeId;
        };
        /**
         * 设置删除后的当前节点节点（内部方法，请勿使用）
         */
        TreeDataService.prototype.setNextNodeAfterRemoving = function (nextNodeId) {
            var treeNodeUtil = this.getTreeNodeUtil();
            treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
        };
        /**
         * 设置树的当前行(给完整树使用)
         * @param id id
         */
        TreeDataService.prototype.setCurrentId = function (id) {
            id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;
            this.frameContext.bindingData.list.setCurrentId(id, true, true, true);
        };
        /**
         * 选中树的第一个节点
         */
        TreeDataService.prototype.selectFirstRow = function () {
            var hierarchyType = this.getHierarchyType();
            var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
            if (treeNodeUtil !== null) {
                treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
            }
        };
        /**
         * 获取树节点工具类实例
         */
        TreeDataService.prototype.getTreeNodeUtil = function () {
            var hierarchyType = this.getHierarchyType();
            var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
            if (treeNodeUtil === null) {
                throw new Error("\u4E0D\u652F\u6301" + hierarchyType + "\u7C7B\u578B\u7684\u5206\u7EA7");
            }
            return treeNodeUtil;
        };
        /**
         * 记录加载状态
         * @todo：待删除
         */
        TreeDataService.prototype.setLoadByLevelState = function (filters, sorts) {
            // @todo：临时处理
            this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);
            this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);
            this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);
        };
        /**
         * 展开当前节点
         * @todo：待删除
         */
        TreeDataService.prototype.reloadByLevel = function () {
            var isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');
            if (isLoadByLevel === true) {
                var filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');
                var sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');
                return this.loadByLevel(filters, sorts);
            }
            return rxjs.of([]);
        };
        TreeDataService.prototype.getHierarchyType = function () {
            var ngObjects = devkit.FieldMetadataUtil.getNgObjects(this.repository.entityType);
            var hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];
            var hierarchyType = 'path'; // 分级码默认为path，兼容原表单
            if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {
                hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'];
            }
            if (hierarchyType == null || hierarchyType.length < 1) {
                // '分级码配置信息错误'
                throw new Error(this.languageService['incorrectHierarchyConfig']);
            }
            return hierarchyType;
        };
        Object.defineProperty(TreeDataService.prototype, "messagePipe", {
            /**
             * 获取根组件消息管道
             */
            get: function () {
                if (this.frameContext) {
                    var appContext = this.frameContext.getFormAppContext() || null;
                    if (appContext) {
                        return appContext.messagePipe || null;
                    }
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        TreeDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TreeDataService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: FormMessageService },
                { type: FormLoadingService },
                { type: FormNotifyService },
                { type: FormErrorService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return TreeDataService;
    }(BaseDataService));

    var FilterConditionDataService = /** @class */ (function () {
        function FilterConditionDataService(viewModel, filterConditionService, commandService) {
            this.viewModel = viewModel;
            this.filterConditionService = filterConditionService;
            this.commandService = commandService;
        }
        /**
         * 执行过滤
         * @param commandName 命令名称
         * @param frameId 命令所在的frameId
         */
        FilterConditionDataService.prototype.filter = function (commandName, frameId) {
            var self = this;
            var filters = self.context && self.context.eventParam && self.context.eventParam.data || [];
            if (typeof (filters) === 'string') {
                filters = JSON.parse(filters);
            }
            // 查询时重置页码为第一页
            this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;
            this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);
            return this.commandService.execute(commandName, frameId);
        };
        FilterConditionDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FilterConditionDataService.ctorParameters = function () {
            return [
                { type: devkit.ViewModel },
                { type: FilterConditionService },
                { type: CommandService }
            ];
        };
        return FilterConditionDataService;
    }());

    /**
     * 数据编辑服务
     */
    var EditDataService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function EditDataService(frameContext) {
            this.frameContext = frameContext;
            this.repository = this.frameContext.repository;
            this.bindingData = this.frameContext.bindingData;
            this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
            this.languageService = this.frameContext.injector.get(LanguageService, null);
            this.errorService = this.frameContext.injector.get(FormErrorService, null);
        }
        /**
         * 编辑（支持加锁）
         */
        EditDataService.prototype.edit = function (id) {
            var _this = this;
            id = id || this.bindingData.list.currentId;
            if (!id) {
                return rxjs.EMPTY;
            }
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var edit$ = this.repository.editEntityById(id);
            var result$ = edit$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                EditStateUtil.setEditState(_this.frameContext, id);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.updateFailed, error);
            }));
            return result$;
        };
        EditDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EditDataService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return EditDataService;
    }());

    /**
     * 删除服务
     */
    var RemoveDataService = /** @class */ (function () {
        /**
         * 构造函数
         * @param frameContext 组件上下文
         */
        function RemoveDataService(frameContext) {
            this.frameContext = frameContext;
            this.notifyService = this.frameContext.injector.get(FormNotifyService, null);
            this.messageService = this.frameContext.injector.get(FormMessageService, null);
            this.errorService = this.frameContext.injector.get(FormErrorService, null);
            this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
            this.languageService = this.frameContext.injector.get(LanguageService, null);
            this.commandService = this.frameContext.injector.get(CommandService, null);
            this.listDataService = this.frameContext.injector.get(ListDataService, null);
            this.treeDataService = this.frameContext.injector.get(TreeDataService, null);
            this.befRepository = this.frameContext.repository;
        }
        /**
         * 删除id对应的实体
         * @param id 要删除的数据id
         * @param ifSave 是否保存
         * @param enableRemoveAndSave 是否启用删除并保存（仅为兼容，新调用请勿设置）
         * @summary
         * enableRemoveAndSave存在的意义：
         * 1、老表单的可能没有delAndSave方法；
         * 2、为了将ListDataService中的remove方法迁移到此方法上，显示设置为false，保持和以前行为一致；
         * 3、该参数默认为true，并且在WebComponent层不暴露，新命令不需要传递，默认为true；
         */
        RemoveDataService.prototype.removeById = function (id, ifSave, enableRemoveAndSave, successMsg) {
            if (enableRemoveAndSave === void 0) {
                enableRemoveAndSave = true;
            }
            var msg = successMsg ? successMsg : '';
            return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);
        };
        RemoveDataService.prototype.removeByIds = function (ids) {
            throw new Error('Not Implemented');
        };
        /**
         * 删除id对应的实体，并执行保存
         */
        RemoveDataService.prototype.removeAndSaveById = function (id, successMsg) {
            var msg = successMsg ? successMsg : '';
            return this.innerRemoveById(id, true, true, msg);
        };
        /**
         * 删除并保存树节点数据
         */
        RemoveDataService.prototype.removeAndSaveByIdForTree = function (id, successMsg) {
            var _this = this;
            var msg = successMsg ? successMsg : '';
            // 检查要删除的id是否存在
            if (this.checkIdsToRemove([id]) === false) {
                this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
                return rxjs.EMPTY;
            }
            // 检查是否有子节点
            var treeNodesData = this.befRepository.entityCollection.toJSON();
            if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {
                this.messageService.warning(this.languageService.deleteChildFirst);
                return rxjs.EMPTY;
            }
            // 执行删除
            var remove$ = this.innerRemoveById(id, true, true, msg);
            var nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);
            var result$ = remove$.pipe(operators.tap(function () {
                _this.treeDataService.setNextNodeAfterRemoving(nextNodeId);
            }));
            return result$;
        };
        /**
         * 批量删除并保存
         */
        RemoveDataService.prototype.removeAndSaveByIds = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 删除后的刷新
         */
        RemoveDataService.prototype.refreshAfterRemoving = function (loadCmdName, loadCmdFrameId) {
            if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {
                return;
            }
            var commandService = this.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        };
        /**
         * 删除id对应的实体
         * @param id 实体id
         * @param ifSave 是否保存
         * @param enableRemoveAndSave 是否启用删除并保存（老EAPI上没有此方法，通过开关进行兼容）
         * @summary
         * enableRemoveAndSave参数说明：
         * 1、老EAPI上没有delAndSave方法，只能发两次请求（删除和保存）；
         * 2、此开关用于选择使用哪种方式，兼容老表单。
         */
        RemoveDataService.prototype.innerRemoveById = function (id, ifSave, enableRemoveAndSave, successMsg) {
            var _this = this;
            // 检查要删除的id是否存在
            if (this.checkIdsToRemove([id]) === false) {
                this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var confirm$ = this.confirmToRemove();
            var remove$ = enableRemoveAndSave && ifSave ?
                this.befRepository.removeEntityAndSaveById(id) :
                this.befRepository.removeById(id, ifSave);
            var result$ = confirm$.pipe(operators.concatMap(function (ifRemove) {
                if (ifRemove === false) {
                    return rxjs.EMPTY;
                }
                var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
                return remove$.pipe(operators.tap(function () {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.notifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.notifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.errorService.exception(_this.languageService.deleteFailed, error);
                }), operators.switchMap(function () {
                    var saved = enableRemoveAndSave && ifSave;
                    if (!saved) {
                        return rxjs.EMPTY;
                    }
                    else {
                        return rxjs.of(null);
                    }
                }));
            }));
            return result$;
        };
        /**
         * 检查要删除的ids是否为空
         */
        RemoveDataService.prototype.checkIdsToRemove = function (ids) {
            if (!ids) {
                return false;
            }
            var filteredIds = ids.filter(function (id) {
                return !!id;
            });
            if (filteredIds.length === 0) {
                return false;
            }
            return true;
        };
        /**
         * 确认删除
         */
        RemoveDataService.prototype.confirmToRemove = function () {
            var confirm$ = this.messageService.question(this.languageService.confirmDeletion);
            var result$ = confirm$.pipe(operators.concatMap(function (ifRemove) {
                if (ifRemove === false) {
                    return rxjs.EMPTY;
                }
                else {
                    return rxjs.of(true);
                }
            }));
            return result$;
        };
        RemoveDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RemoveDataService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return RemoveDataService;
    }());

    /**
     * 删除服务
     */
    var SaveDataService = /** @class */ (function () {
        /**
         * 构造函数
         * @param frameContext 组件上下文
         */
        function SaveDataService(frameContext) {
            this.frameContext = frameContext;
            this.notifyService = this.frameContext.injector.get(FormNotifyService, null);
            this.messageService = this.frameContext.injector.get(FormMessageService, null);
            this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
            this.languageService = this.frameContext.injector.get(LanguageService, null);
            this.befRepository = this.frameContext.repository;
        }
        SaveDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SaveDataService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return SaveDataService;
    }());

    /**
     * 树数据服务
     */
    var SubTreeDataService = /** @class */ (function (_super) {
        __extends(SubTreeDataService, _super);
        /**
         * 构造函数
         */
        function SubTreeDataService(frameContext, viewModel, messageService, loadingService, errorService, formNotifyService, languageService) {
            var _this = _super.call(this, frameContext) || this;
            _this.viewModel = viewModel;
            _this.messageService = messageService;
            _this.loadingService = loadingService;
            _this.errorService = errorService;
            _this.formNotifyService = formNotifyService;
            _this.languageService = languageService;
            if (!languageService) {
                _this.languageService = LanguageService.getInstance();
            }
            return _this;
        }
        Object.defineProperty(SubTreeDataService.prototype, "hierarchyInfoKey", {
            /**
             * 分级码信息
             */
            get: function () {
                return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SubTreeDataService.prototype, "hierarchyInfoField", {
            get: function () {
                return this.hierarchyInfoKey.split('/').filter(function (p) { return p; }).pop();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SubTreeDataService.prototype, "virtualRootFrameContext", {
            get: function () {
                return this.frameContext.getVirtualRootFrameContext();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SubTreeDataService.prototype, "messagePipe", {
            get: function () {
                if (this.viewModel && this.viewModel.frameContext) {
                    var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                    if (appContext) {
                        return appContext.messagePipe || null;
                    }
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 新增子表同级
         */
        SubTreeDataService.prototype.addSubSibling = function () {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'addSubSibling' });
            }
            var params = this.getParams();
            // 获取分级方式
            var hierarchyType = this.getHierarchyType();
            // 执行取数
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var repository = TreeRepositoryFactory.getInstance(hierarchyType);
            if (!repository) {
                // 错误的分级码
                throw new Error(this.languageService['errorHierarchyKey']);
            }
            var result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);
            return result$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.errorService.exception(_this.languageService.addSubSiblingFailed, error);
            }));
        };
        /**
         * 新增下级
         */
        SubTreeDataService.prototype.addSubChild = function () {
            var _this = this;
            if (this.messagePipe) {
                this.messagePipe.next({ messageType: 'addSubChild' });
            }
            var params = this.getParams();
            // 获取分级方式
            var hierarchyType = this.getHierarchyType();
            var currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();
            if (!currentList['currentId']) {
                // 请选择父节点
                this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
                return rxjs.EMPTY;
            }
            // 执行取数
            var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            var repository = TreeRepositoryFactory.getInstance(hierarchyType);
            if (!repository) {
                throw new Error(this.languageService['errorHierarchyKey']);
            }
            var addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);
            var result$ = addSubChild$.pipe(operators.tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.addSubChildFailed, error);
            }));
            return result$;
        };
        /**
         * 删除子表树节点
         * @param id id
         */
        SubTreeDataService.prototype.remove = function (id, successMsg) {
            var _this = this;
            // 参数检查
            if (!id) {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return rxjs.EMPTY;
            }
            // 获取分级方式
            var hierarchyType = this.getHierarchyType();
            // 有子节点时不允许删除
            var treeNodesData = this.frameContext.bindingData.getList().toJSON();
            var bindingList = this.frameContext.bindingData.getList();
            var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
            if (treeNodeUtil === null) {
                return rxjs.EMPTY;
            }
            if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {
                this.messageService.warning(this.languageService['deleteChildFirst']);
                return rxjs.EMPTY;
            }
            // 确认删除
            var action$ = this.messageService.question(this.languageService.confirmDeletion);
            return action$.pipe(operators.concatMap(function (result) {
                if (!result) {
                    return rxjs.EMPTY;
                }
                // 获取删除后要设置的节点id
                var nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, _this.hierarchyInfoField, id);
                // 执行删除
                var loadingTimerId = _this.loadingService.show();
                var path = _this.getPath();
                var remove$ = _this.frameContext.repository.removeByPath(path, id);
                return remove$.pipe(operators.tap(function () {
                    // 设置选中节点
                    treeNodeUtil.selectNodeByBindingList(bindingList, _this.hierarchyInfoField, nextNodeId);
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    if (successMsg && successMsg.trim()) {
                        var showMessage = true;
                        if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                            try {
                                var options = JSON.parse(successMsg);
                                if (options.showMessage === false) {
                                    showMessage = false;
                                }
                            }
                            catch (_a) { }
                        }
                        if (showMessage !== false) {
                            _this.formNotifyService.success(successMsg, { hideTitle: true });
                        }
                    }
                    else {
                        _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                    }
                    // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }, function (error) {
                    _this.loadingService.hideDelayLoading(loadingTimerId);
                    _this.errorService.exception(_this.languageService.deleteFailed, error);
                }));
            }));
        };
        SubTreeDataService.prototype.getHierarchyType = function () {
            var propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));
            var hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;
            if (hierarchyType == null || hierarchyType.length < 1) {
                // '分级码配置信息错误'
                throw new Error(this.languageService['incorrectHierarchyConfig']);
            }
            return hierarchyType;
        };
        /**
         * 获取参数
         * /parentId/childCodes/childId/grandsonCodes
         * [childCodes, grandsonCodes]
         * [parntId, childId]
         */
        SubTreeDataService.prototype.getParams = function () {
            var nodeCodes = this.viewModel.bindingPath.substr(1).split('/');
            var ids = [];
            var nodeCodeArray = [];
            var rid = this.viewModel.bindingData.list.currentId; // root表数据id
            ids.push(rid);
            var subData = this.viewModel.bindingData;
            if (nodeCodes.length > 0) {
                nodeCodes.map(function (nodeCode) {
                    subData = subData[nodeCode];
                    if (subData && subData.currentId) {
                        ids.push(subData.currentId);
                    }
                    //去除nodeCode的s
                    nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);
                });
            }
            return { nodeCodes: nodeCodeArray, ids: ids };
        };
        /**
         * 获取完整路径
         * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
         */
        SubTreeDataService.prototype.getPath = function () {
            var bindingPath = this.viewModel.bindingPath;
            var rid = this.viewModel.bindingData.list.currentId; // root表数据id
            var path = '/' + rid;
            var subPaths = bindingPath.split('/').filter(function (p) { return p; });
            if (subPaths.length > 0) {
                // eg:bindingPath形如/edus/grades,split后是['edus', 'grades']
                var subData = this.viewModel.bindingData;
                for (var index = 1; index < subPaths.length - 1; index++) {
                    var subPath = subPaths[index];
                    subData = subData[subPath];
                    if (!subData || !subData.currentId) {
                        throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                    }
                    path += "/" + subPath + "/" + subData.currentId;
                }
            }
            path += '/' + subPaths[subPaths.length - 1];
            return path;
        };
        SubTreeDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SubTreeDataService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: devkit.ViewModel },
                { type: FormMessageService },
                { type: FormLoadingService },
                { type: FormErrorService },
                { type: FormNotifyService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return SubTreeDataService;
    }(BaseDataService));

    // tslint:disable: no-string-literal
    /**
     * 列表仓库服务
     * @scope FrameComponent
     */
    var BeActionService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function BeActionService(repository, loadingService, msgService, notifyService, formErrorService, languageService) {
            this.repository = repository;
            this.loadingService = loadingService;
            this.msgService = msgService;
            this.notifyService = notifyService;
            this.formErrorService = formErrorService;
            this.languageService = languageService;
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
        }
        /**
         * 执行自定义动作
         */
        BeActionService.prototype.invokeAction = function (actionUri, httpMethod, httpHeaders, queryParams, body) {
            return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, true);
        };
        /**
         * 已弃用：请使用invokeAction代替
         * @deprecated
         * @summary
         * 迁移时请注意：invokeAction中body请传递满足BodyWithRequestInfo接口的格式，形如：
         * { requestInfo: reqeustInfoInstance, key1: value1, key2: value2 }
         */
        BeActionService.prototype.executeAction = function (actionUri, httpMethod, httpHeaders, queryParams, body) {
            // 1、不确定body中是否有RequestInfo对象
            // 2、restService的reqeust会根据body中是否有key为ReqeustInfo（大写开头）的参数来确定；
            // 3、如果body中没有key为ReqeustInfo的参数，不直接返回ResponseInfo，而是进一步解析，返回其中的returnValue。
            return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, false);
        };
        /**
         * 构造查询字符串
         */
        BeActionService.prototype.buildQueryParams = function (queryParams) {
            if (typeof queryParams === 'string') {
                queryParams = JSON.parse(queryParams);
            }
            var queryParamsString = '';
            Object.keys(queryParams).forEach(function (key) {
                queryParamsString += key + "=" + queryParams[key];
            });
            return queryParamsString;
        };
        /**
         * 获取Rest服务
         */
        BeActionService.prototype.getRestService = function () {
            var befRepository = this.repository;
            return befRepository.restService;
        };
        /**
         * 调用自定义动作
         */
        BeActionService.prototype.innerInvokeAction = function (actionUri, httpMethod, httpHeaders, queryParams, body, hasRequestInfo) {
            var _this = this;
            var options = {};
            var restService = this.getRestService();
            var baseUri = restService.baseUri;
            // 构造url
            var fullActionUri = baseUri + "/service/" + actionUri;
            if (queryParams && queryParams !== '') {
                var queryParamsString = this.buildQueryParams(queryParams);
                fullActionUri += queryParamsString;
            }
            // body构造
            if (body && body !== '') {
                if (typeof body === 'string' && body.startsWith('{') && body.endsWith('}')) {
                    body = JSON.parse(body);
                }
                options['body'] = body;
            }
            // http头构造
            if (httpHeaders && httpHeaders !== '') {
                httpHeaders = JSON.parse(httpHeaders);
                // 如果没有设置Content-Type，默认用json格式
                if (!httpHeaders['Content-Type']) {
                    httpHeaders['Content-Type'] = 'application/json';
                }
                options['headers'] = new http.HttpHeaders(httpHeaders);
            }
            else {
                options['headers'] = new http.HttpHeaders({ 'Content-Type': 'application/json' });
            }
            // 执行服务器端请求
            this.loadingService.show();
            // invoke方法
            // 1、RequestInfo=>报错
            // 2、requestInfo=>ResponseInfo
            // request方法
            // 1、RequestInfo=>ResponseInfo
            // 2、requestInfo=>returnValue
            var methodName = hasRequestInfo ? 'invoke' : 'request';
            var result$ = restService[methodName](fullActionUri, httpMethod, null, options);
            return result$.pipe(operators.tap(function () {
                _this.loadingService.hide();
            }, function (error) {
                _this.loadingService.hide();
                var errorMsg = fullActionUri + _this.languageService['operationFailed'];
                _this.formErrorService.exception(errorMsg, error);
            }));
        };
        BeActionService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BeActionService.ctorParameters = function () {
            return [
                { type: devkit.Repository },
                { type: FormLoadingService },
                { type: FormMessageService },
                { type: FormNotifyService },
                { type: FormErrorService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return BeActionService;
    }());

    // tslint:disable: max-line-length
    /**
     * 审批服务
     * @Scope FrameComponent
     */
    var ApproveService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ApproveService(formLoadingService, beActionService, msgService, notifyService, languageService, formErrorService, frameContext, submitter, flowchartService, wfTaskHandlerService) {
            this.formLoadingService = formLoadingService;
            this.beActionService = beActionService;
            this.msgService = msgService;
            this.notifyService = notifyService;
            this.languageService = languageService;
            this.formErrorService = formErrorService;
            this.frameContext = frameContext;
            this.submitter = submitter;
            this.flowchartService = flowchartService;
            this.wfTaskHandlerService = wfTaskHandlerService;
            if (this.frameContext) {
                this.repository = this.frameContext.repository;
                if (!this.wfTaskHandlerService) {
                    this.wfTaskHandlerService = this.frameContext.injector.get(wfTaskHandler.WfTaskHandlerService, null);
                }
            }
        }
        /**
         * 带有交互的提交审批
         */
        ApproveService.prototype.submitApproveWithInteraction = function (bizBillID) {
            return this.submitApprove(bizBillID);
        };
        /**
         * 提交审批
         * @param bizBillID 业务单据id
         * @param interactionResult 前端交互结果
         * @deprecated 已废弃，清使用包含入口单据的审批
         */
        ApproveService.prototype.submitApprove = function (bizBillID, interactionResult) {
            var _this = this;
            if (!bizBillID) {
                // this.msgService.error(this.languageService.unallowEmptyBizBillId);
                this.notifyService.info(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
                return rxjs.empty();
            }
            var actionUri = 'submittoapprovevoaction';
            var restService = this.beActionService.getRestService();
            var body = {
                requestInfo: restService.buildRequestInfo(),
                bizInstID: bizBillID,
                interactionResult: interactionResult ? {
                    procDefId: interactionResult.processDefinitionId
                } : {}
            };
            this.formLoadingService.show();
            // 添加提示
            var action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);
            // 目前包含三种情况：
            // 1. 第一次提交成功，服务端返回流程实例id
            // 2. 第一次提交成功，服务端返回流程实例id，并返回多个参与者，交互时提交参与者
            // 3. 第一次提交未成功，服务端返回多个流程定义，需要交互后第二次提交审批；第二次提交会出现情况1和情况2
            return action$.pipe(operators.map(function (result) {
                if (result && result.returnValue && result.returnValue.excutionResponse) {
                    var wfResponse = result.returnValue.excutionResponse;
                    return wfResponse;
                }
            }), operators.switchMap(function (response) {
                if (response && response.procInstId) {
                    if (_this.repository) {
                        var updating$ = _this.repository.updateById(bizBillID);
                        return updating$.pipe(operators.tap(function () {
                            _this.formLoadingService.hide();
                            // this.notifyService.info(this.languageService.submitSuccess);
                            FormNotifyStrategyService.success(_this.notifyService, _this.languageService.submitSuccess);
                        }), operators.map(function () {
                            return response;
                        }));
                    }
                    else {
                        _this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.submitSuccess);
                        FormNotifyStrategyService.success(_this.notifyService, _this.languageService.submitSuccess);
                        return rxjs.of(response);
                    }
                }
                else {
                    return rxjs.of(response);
                }
            }), operators.switchMap(function (response) {
                if (response.needInteraction) {
                    return rxjs.from(new Promise(function (resolve) {
                        _this.submitter.excute(response, function (interactionResponse) {
                            // 如果此次未提交，而选择后得到了流程定义ID，则在此提交审批
                            if (!response.procInstId && interactionResponse.processDefinitionId) {
                                _this.submitApprove(bizBillID, interactionResponse).subscribe(function () {
                                    resolve();
                                });
                            }
                            else {
                                resolve();
                            }
                        });
                    }));
                }
                else {
                    return rxjs.of(null);
                }
            }), operators.catchError(function (error) {
                _this.formLoadingService.hide();
                // this.formErrorService.exception(this.languageService.submitFaild, error);
                return rxjs.of(error);
            }));
        };
        /**
         * 提交审批(带入口单据)
         * @param bizBillID 业务单据Id
         * @param bizDefKey 入口单据Id
         * @param options options
         * @param interactionResult 交互结果
         */
        ApproveService.prototype.submitApproveWithBizDefKey = function (bizBillID, bizDefKey, options, interactionResult) {
            var _this = this;
            if (!bizBillID) {
                this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!bizDefKey) {
                this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            try {
                if (options && typeof (options) === 'string') {
                    options = JSON.parse(options);
                }
            }
            catch (e) {
                throw new Error('ArgumentError:options not a valid json string.');
            }
            var actionUri = 'submittoapprovewithpayload';
            var restService = this.beActionService.getRestService();
            var body = {
                requestInfo: restService.buildRequestInfo(),
                approvePayload: {
                    startProcessPayload: {
                        bizDefKey: bizDefKey,
                        dataId: bizBillID,
                        name: options && options.name || '',
                        variables: options && options.variables || {}
                    }
                }
            };
            if (interactionResult) {
                body.approvePayload.startProcessPayload.processDefinitionId = interactionResult.processDefinitionId;
                body.approvePayload.startProcessPayload.processDefinitionKey = interactionResult['processDefinitionKey'];
            }
            this.formLoadingService.show();
            // 添加提示
            var action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);
            // 目前包含三种情况：
            // 1. 第一次提交成功，服务端返回流程实例id
            // 2. 第一次提交成功，服务端返回流程实例id，并返回多个参与者，交互时提交参与者
            // 3. 第一次提交未成功，服务端返回多个流程定义，需要交互后第二次提交审批；第二次提交会出现情况1和情况2
            return action$.pipe(operators.map(function (result) {
                if (result && result.returnValue && result.returnValue.excutionResponse) {
                    var wfResponse = result.returnValue.excutionResponse;
                    return wfResponse;
                }
            }), operators.switchMap(function (response) {
                if (response && response.procInstId) {
                    if (_this.repository) {
                        var updating$ = _this.repository.updateById(bizBillID);
                        return updating$.pipe(operators.tap(function () {
                            _this.formLoadingService.hide();
                            // this.notifyService.info(this.languageService.submitSuccess);
                            FormNotifyStrategyService.success(_this.notifyService, _this.languageService.submitSuccess);
                        }), operators.map(function () {
                            return response;
                        }));
                    }
                    else {
                        _this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.submitSuccess);
                        FormNotifyStrategyService.success(_this.notifyService, _this.languageService.submitSuccess);
                        return rxjs.of(response);
                    }
                }
                else {
                    return rxjs.of(response);
                }
            }), operators.switchMap(function (response) {
                if (response.needInteraction) {
                    return rxjs.from(new Promise(function (resolve) {
                        _this.submitter.excute(response, function (interactionResponse) {
                            // 如果此次未提交，而选择后得到了流程定义ID，则在此提交审批
                            if (!response.procInstId && interactionResponse.processDefinitionId) {
                                _this.submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResponse).subscribe(function () {
                                    resolve();
                                });
                            }
                            else {
                                resolve();
                            }
                        });
                    }));
                }
                else {
                    return rxjs.of(null);
                }
            }), operators.catchError(function (error) {
                _this.formLoadingService.hide();
                // this.formErrorService.exception(this.languageService.submitFaild, error);
                return rxjs.of(error);
            }));
        };
        /**
         * 提交审批(带入口单据使用wf控件)
         * @param bizBillID 业务单据Id
         * @param bizDefKey 入口单据Id
         * @param options 上下文参数
         * @param variables 可选参数
         */
        ApproveService.prototype.submitApproveWithBizDefKeyUseControl = function (bizBillID, bizDefKey, options, variables) {
            if (options === void 0) {
                options = {};
            }
            if (!bizBillID) {
                this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!bizDefKey) {
                this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!options || typeof options !== 'object') {
                options = {};
            }
            var payload = __assign({ dataId: bizBillID, bizDefKey: bizDefKey }, options);
            // 处理variables参数
            if (variables) {
                if (variables.startsWith('{') && variables.endsWith('}')) {
                    try {
                        variables = JSON.parse(variables);
                    }
                    catch (_a) {
                        variables = {};
                    }
                }
                payload.variables = variables;
            }
            return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
        };
        /**
         * 子表提交审批
         * @param bizDefKey 入口单据Id
         * @param bizId 业务单据Id（主表）
         * @param childBizId 业务单据Id（从表）
         * @param options 上下文参数
         * @param variables 可选参数
         */
        ApproveService.prototype.childSubmitApproveWithBizDefKey = function (bizDefKey, bizId, childBizId, options, variables) {
            if (options === void 0) {
                options = {};
            }
            // 入口单据不能为空
            if (!bizDefKey) {
                this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            // 主业务单据Id不能为空
            if (!bizId) {
                this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
                return rxjs.EMPTY;
            }
            // 从表业务单据Id不能为空
            if (!childBizId) {
                this.notifyService.warning(this.languageService.unallowEmptyChildBizBillId, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!options || typeof options !== 'object') {
                options = {};
            }
            var payload = __assign({ dataId: bizId + "," + childBizId, bizDefKey: bizDefKey }, options);
            // 处理variables参数
            if (variables) {
                if (variables.startsWith('{') && variables.endsWith('}')) {
                    try {
                        variables = JSON.parse(variables);
                    }
                    catch (_a) {
                        variables = {};
                    }
                }
                payload.variables = variables;
            }
            return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
        };
        /**
         * 取消审批
         * @deprecated 已废弃，请使用cancelSubmit
         */
        ApproveService.prototype.cancelApprove = function (bizBillID) {
            var _this = this;
            if (!bizBillID) {
                this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
                return rxjs.empty();
            }
            var actionUri = 'canceltosubmitvoaction';
            var restService = this.beActionService.getRestService();
            var body = {
                requestInfo: restService.buildRequestInfo(),
                bizInstID: bizBillID,
            };
            this.formLoadingService.show();
            var action$ = this.beActionService.executeAction(actionUri, 'PUT', null, null, body);
            return action$.pipe(operators.switchMap(function () {
                if (_this.repository) {
                    var updating$ = _this.repository.updateById(bizBillID);
                    return updating$.pipe(operators.tap(function () {
                        _this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.cancelApproveSuccess);
                        FormNotifyStrategyService.success(_this.notifyService, _this.languageService.cancelApproveSuccess);
                    }));
                }
                else {
                    _this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.cancelApproveSuccess);
                    FormNotifyStrategyService.success(_this.notifyService, _this.languageService.cancelApproveSuccess);
                    return rxjs.of();
                }
            }), operators.catchError(function (error) {
                _this.formLoadingService.hide();
                // this.formErrorService.exception(this.languageService.cancelApproveFailed, error);
                return rxjs.of(error);
            }));
        };
        /**
         * 取消审批(支持主表、子表)
         * @param procInstId 流程实例Id
         */
        ApproveService.prototype.cancelSubmit = function (procInstId) {
            if (!procInstId) {
                this.notifyService.warning(this.languageService.procInsIdRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ procInstId: procInstId });
        };
        /**
         * 查看流程图
         * @param procInstId 流程实例ID
         */
        ApproveService.prototype.viewProcess = function (procInstId) {
            if (this.flowchartService) {
                if (!procInstId) {
                    this.notifyService.warning(this.languageService.noProcessInstanceId, { hideTitle: true });
                    return;
                }
                return this.flowchartService.viewFlowChart(procInstId);
            }
        };
        /**
         * 转换配置大小写
         * @param jsonObj Object
         * @deprecated
         */
        ApproveService.prototype.switchPrefixLetter = function (jsonObj, toUpper) {
            var e_1, _a;
            if (typeof (jsonObj) === 'object' && !!jsonObj) {
                if (Array.isArray(jsonObj)) {
                    for (var i = 0; i < jsonObj.length; i++) {
                        this.switchPrefixLetter(jsonObj[i], toUpper);
                    }
                }
                else {
                    try {
                        for (var _b = __values(Object.keys(jsonObj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var key = _c.value;
                            var newKey = (toUpper ? key.substring(0, 1).toUpperCase() : key.substring(0, 1).toLowerCase()) + key.substring(1);
                            jsonObj[newKey] = jsonObj[key];
                            if (typeof jsonObj[key] === 'object') {
                                this.switchPrefixLetter(jsonObj[key], toUpper);
                            }
                            delete (jsonObj[key]);
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
            }
            return jsonObj;
        };
        ApproveService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ApproveService.ctorParameters = function () {
            return [
                { type: FormLoadingService },
                { type: BeActionService },
                { type: FormMessageService },
                { type: FormNotifyService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: FormErrorService },
                { type: devkit.FrameContext },
                { type: rtdevkit.WFSubmiteService, decorators: [{ type: core.Optional }] },
                { type: uiFlowchart.WFFlowchartService, decorators: [{ type: core.Optional }] },
                { type: wfTaskHandler.WfTaskHandlerService, decorators: [{ type: core.Optional }] }
            ];
        };
        return ApproveService;
    }());

    // tslint:disable: unified-signatures
    // tslint:disable: max-line-length
    /**
     * 打印服务
     * @Scope FrameComponent
     */
    var PrintService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function PrintService(msgService, languageService, printService, formNotifyService) {
            this.msgService = msgService;
            this.languageService = languageService;
            this.printService = printService;
            this.formNotifyService = formNotifyService;
        }
        /**
         * 打印单据
         * @param beMetaId BE元数据标识
         * @param bizBillId 业务单据标识
         */
        PrintService.prototype.printSingle = function (beMetaId, bizBillId) {
            if (!bizBillId) {
                // this.msgService.error(this.languageService.unallowEmptyBizBillId);
                this.showWarning(this.languageService.unallowEmptyBizBillId);
                return rxjs.EMPTY;
            }
            return this.printArray(beMetaId, [bizBillId]);
        };
        /**
         * 打印单据（通过id或ids）
         * @param beMetaId be元数据Id
         * @param ids 单据id或ids
         */
        PrintService.prototype.printByIds = function (beMetaId, ids) {
            if (!ids) {
                // this.msgService.error(this.languageService.unallowEmptyBizBillId);
                this.showWarning(this.languageService.unallowEmptyBizBillId);
                return rxjs.EMPTY;
            }
            var dataIds = ids.split(',').filter(function (item) { return item; });
            return this.printArray(beMetaId, dataIds);
        };
        /**
         * 打印单据（带维度）
         * @param beMetaId be元数据Id
         * @param ids 单据id或ids
         * @param dim1 维度1值
         * @param dim2 维度2值
         * @param billCategoryId 单据类型Id
         */
        PrintService.prototype.printByIdsWithDimension = function (beMetaId, ids, dim1, dim2, billCategoryId) {
            if (!ids) {
                // this.msgService.error(this.languageService.unallowEmptyBizBillId);
                this.showWarning(this.languageService.unallowEmptyBizBillId);
                return rxjs.EMPTY;
            }
            var dataIds = ids.split(',').filter(function (item) { return item; });
            return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);
        };
        /**
         * 打印多个单据
         * @param beMetaId BE元数据标识
         * @param dataIds 业务单据标识数组
         * @param dim1 维度1
         * @param dim2 维度2
         * @param billCategoryId 业务单据类型Id
         */
        PrintService.prototype.printArray = function (beMetaId, dataIds, dim1, dim2, billCategoryId) {
            if (!dataIds || dataIds.length === 0) {
                // this.msgService.error(this.languageService.unallowEmptyBizBillId);
                this.showWarning(this.languageService.unallowEmptyBizBillId);
                return rxjs.EMPTY;
            }
            var sourceOptions = this.buildSourceOptions({
                dataIds: dataIds,
                sourceId: beMetaId
            });
            var outputOptions = this.buildOutputOptions();
            if (typeof dim1 !== 'undefined') {
                sourceOptions.FirstDimensionVal = dim1;
            }
            if (typeof dim2 !== 'undefined') {
                sourceOptions.SecondDimensionVal = dim2;
            }
            if (typeof billCategoryId !== 'undefined') {
                sourceOptions.billCategoryId = billCategoryId;
            }
            return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');
        };
        /**
         * 按照BE取数方式批量打印单据
         * @param beMetaId BE元数据标识
         * @param filterCondition 过滤条件
         * @param sortCondition 排序条件
         * @param includeChildData 包含子表数据
         */
        PrintService.prototype.printMulti = function (beMetaId, filterCondition, sortCondition, includeChildData) {
            if (includeChildData === void 0) {
                includeChildData = true;
            }
            var entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };
            if (filterCondition) {
                // 统一纠正最后一个过滤条件的Relation
                var filters = JSON.parse(filterCondition);
                if (filters && filters.length > 0) {
                    filters[filters.length - 1].Relation = 0;
                }
                entryFilter.filterConditions = filters;
            }
            if (sortCondition) {
                entryFilter.sortConditions = JSON.parse(sortCondition);
            }
            // sfo:SourceFilterOptions
            var sourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter: entryFilter, includeChildData: includeChildData });
            var outputOptions = this.buildOutputOptions();
            return this.printService.outputBEDataWithFilter(sourceFilterOptions, outputOptions, 'tab');
        };
        /**
         * 按照BE取数方式批量打印单据(带维度)
         * @param beMetaId BE元数据标识
         * @param filterCondition 过滤条件
         * @param sortCondition 排序条件
         * @param dim1 维度1value
         * @param dim2 维度2value
         * @param billCategoryId 业务单据类型Id
         * @param includeChildData 包含子表数据
         */
        PrintService.prototype.printMultiWithDimension = function (beMetaId, filterCondition, sortCondition, dim1, dim2, billCategoryId, includeChildData) {
            if (includeChildData === void 0) {
                includeChildData = true;
            }
            var entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };
            if (filterCondition) {
                // 统一纠正最后一个过滤条件的Relation
                var filters = JSON.parse(filterCondition);
                if (filters && filters.length > 0) {
                    filters[filters.length - 1].Relation = 0;
                }
                entryFilter.filterConditions = filters;
            }
            if (sortCondition) {
                entryFilter.sortConditions = JSON.parse(sortCondition);
            }
            var sfo = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter: entryFilter, includeChildData: includeChildData });
            if (typeof dim1 !== 'undefined') {
                sfo.FirstDimensionVal = dim1;
            }
            if (typeof dim2 !== 'undefined') {
                sfo.SecondDimensionVal = dim2;
            }
            if (typeof billCategoryId !== 'undefined') {
                sfo.billCategoryId = billCategoryId;
            }
            var outputOptions = this.buildOutputOptions();
            return this.printService.outputBEDataWithFilter(sfo, outputOptions, 'tab');
        };
        /**
         * 构造SourceOptions
         * @param options options
         */
        PrintService.prototype.buildSourceOptions = function (options) {
            var so = {
                DataIds: options && options.dataIds || undefined,
                SourceId: options && options.sourceId || undefined,
                FirstDimensionVal: options && options.dim1 || undefined,
                SecondDimensionVal: options && options.dim2 || undefined,
                RetrieveParam: options && options.retrieveParam || undefined,
                FormatId: options && options.formatId || undefined,
                billCategoryId: options && options.billCategoryId || undefined,
                ServiceUnit: options && options.serviceUnit || undefined,
                currentPage: options && options.currentPage || undefined,
                pageRowCount: options && options.pageRowCount || undefined,
                queryType: options && options.queryType || undefined,
                queryServiceId: options && options.queryServiceId || undefined,
                queryParam: options && options.queryParam || undefined
            };
            return so;
        };
        /**
         * 构造OutputOptions
         * @param options options
         */
        PrintService.prototype.buildOutputOptions = function (options) {
            var oo = {
                OutputType: options && options.outputType || cloudprint.OutputType.PRINT,
                FileType: options && options.fileType || cloudprint.FileType.Html5,
                Path: options && options.path || undefined,
                DeviceId: options && options.deviceId || undefined,
                printJob: options && options.printJob || undefined,
                printerName: options && options.printerName || undefined,
                printSetting: options && options.printSetting || undefined,
                printType: options && options.printType || cloudprint.PrintType.Form
            };
            return oo;
        };
        /**
         * 构造SourceFilterOptions
         * @param options options
         */
        PrintService.prototype.buildSourceFilterOptions = function (options) {
            var entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };
            var sfo = {
                SourceId: options.sourceId,
                EntityFilter: options && options.entryFilter || entryFilter,
                FirstDimensionVal: options && options.dim1 || undefined,
                SecondDimensionVal: options && options.dim2 || undefined,
                FormatId: options && options.formatId || undefined,
                ServiceUnit: options && options.serviceUnit || undefined,
                billCategoryId: options && options.billCategoryId || undefined,
                currentPage: options && options.currentPage || undefined,
                pageRowCount: options && options.pageRowCount || undefined,
                queryParam: options && options.queryParam || undefined,
                queryServiceId: options && options.queryServiceId || undefined,
                queryType: options && options.queryType || undefined,
                includeChildData: options && options.hasOwnProperty('includeChildData') ? options.includeChildData : true
            };
            return sfo;
        };
        /**
         * 展示错误消息
         * @param message 错误消息
         */
        PrintService.prototype.showWarning = function (message) {
            if (this.notifyService) {
                this.notifyService.warning(message, { hideTitle: true });
            }
            else if (this.msgService) {
                this.msgService.error(message);
            }
        };
        Object.defineProperty(PrintService.prototype, "notifyService", {
            get: function () {
                if (this.formNotifyService) {
                    return this.formNotifyService;
                }
                else if (this.injector) {
                    return this.injector.get(FormNotifyService, null);
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrintService.prototype, "commandContext", {
            get: function () {
                return this['context'] || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrintService.prototype, "frameContext", {
            get: function () {
                return this.commandContext && this.commandContext.frameContext || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrintService.prototype, "injector", {
            get: function () {
                return this.frameContext && this.frameContext.injector || null;
            },
            enumerable: true,
            configurable: true
        });
        PrintService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PrintService.ctorParameters = function () {
            return [
                { type: FormMessageService },
                { type: LanguageService },
                { type: cloudprint.CloudprintService },
                { type: FormNotifyService, decorators: [{ type: core.Optional }] }
            ];
        };
        return PrintService;
    }());

    /**
     * 附件udt排序字段
     */
    var ATTACHMENT_ORDER_FIELD = 'fileSortOrder';

    /**
     * 附件信息处理工具类
     */
    var AttachmentUtil = /** @class */ (function () {
        function AttachmentUtil() {
        }
        /**
         * 转换为附件信息数组
         */
        AttachmentUtil.convertToAttachmentInfos = function (fileInfos) {
            var _this = this;
            if (!fileInfos) {
                return [];
            }
            var attachmentInfos = fileInfos.map(function (fileInfo) {
                return _this.convertToAttachmentInfo(fileInfo);
            });
            return attachmentInfos;
        };
        /**
         * 转换为附件信息
         */
        AttachmentUtil.convertToAttachmentInfo = function (fileInfo) {
            var attachmentInfo = {
                attachmentId: fileInfo.metadataId,
                fileName: fileInfo.fileName
            };
            return attachmentInfo;
        };
        /**
         * 获取附件列表中的第一个附件
         */
        AttachmentUtil.getFirstAttachmentInfo = function (attachmentInfos) {
            if (!attachmentInfos || attachmentInfos.length === 0) {
                return;
            }
            var firstAttachmentInfo = attachmentInfos[0];
            return firstAttachmentInfo;
        };
        /**
         * 提取附件id数组
         */
        AttachmentUtil.peekAttachmentIds = function (attachmentInfos) {
            if (!attachmentInfos) {
                attachmentInfos = [];
            }
            var attachmentIds = attachmentInfos.map(function (attachmentInfo) {
                return attachmentInfo.attachmentId;
            });
            return attachmentIds;
        };
        return AttachmentUtil;
    }());

    /**
     * 附件调用
     */
    var AttachmentDataService = /** @class */ (function () {
        function AttachmentDataService(frameContext, loadingService) {
            this.frameContext = frameContext;
            this.loadingService = loadingService;
        }
        Object.defineProperty(AttachmentDataService.prototype, "repository", {
            /**
             * 实体仓库
             */
            get: function () {
                return this.frameContext.repository;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttachmentDataService.prototype, "bindingData", {
            /**
             * 绑定数据
             */
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 更新附件信息
         */
        AttachmentDataService.prototype.updateRow = function (attachmentInfoFieldPath, attachmentInfo) {
            var _this = this;
            var restService = this.repository.restService;
            var baseUri = restService.baseUri;
            var updateUri = baseUri + "/service/updateattachment";
            var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
            var body = {
                updateAttachInfo: serverAttachInfo,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            this.loadingService.show();
            return restService.invoke(updateUri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                return _this.syncAttachmentInfosToClient();
            }), operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 通过属性名更新附件信息
         * @param attachmentInfoFieldPath 附件字段
         * @param attachmentInfo 附件信息
         */
        AttachmentDataService.prototype.updateRowWithPropertyName = function (attachmentInfoFieldPath, attachmentInfo) {
            var _this = this;
            var restService = this.repository.restService;
            var baseUri = restService.baseUri;
            var updateUri = baseUri + "/service/updateattachmentwithproptyname";
            var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
            var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
            var body = {
                updateAttachInfo: serverAttachInfo,
                propertyName: propertyName,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            this.loadingService.show();
            return restService.invoke(updateUri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                return _this.syncAttachmentInfosToClient();
            }), operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 删除附件
         * @param attachmentInfoFieldPath
         * @param attachmentInfo
         * @returns
         */
        AttachmentDataService.prototype.removeAttachment = function (attachmentInfoFieldPath, attachmentInfo) {
            var _this = this;
            var restService = this.repository.restService;
            var baseUri = restService.baseUri;
            var updateUri = baseUri + "/service/deleteattachment";
            var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
            var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
            var body = {
                deleteAttachInfo: serverAttachInfo,
                requestInfo: restService.buildRequestInfo(),
                propertyName: propertyName,
            };
            var options = {
                body: body
            };
            this.loadingService.show();
            return restService.invoke(updateUri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                return _this.syncAttachmentInfosToClient();
            }), operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 批量创建附件行数据
         */
        AttachmentDataService.prototype.updateRows = function (attachmentInfoFieldPath, attachmentInfos) {
            var _this = this;
            var restService = this.repository.restService;
            var baseUri = restService.baseUri;
            var updateUri = baseUri + "/service/batchuploadattachment";
            var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
            var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
            var body = {
                batchUploadInfo: serverAttachInfo,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            return restService.invoke(updateUri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                return _this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
            }), operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 批量创建附件行数据
         */
        AttachmentDataService.prototype.updateRowsWithConfigs = function (attachmentInfoFieldPath, attachmentInfos, configs) {
            var _this = this;
            var restService = this.repository.restService;
            var baseUri = restService.baseUri;
            var updateUri = baseUri + "/service/batchuploadattachment";
            var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
            // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
            var body = {
                batchUploadInfo: serverAttachInfo,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            return restService.invoke(updateUri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                return _this.appendAttachmentInfos(responseInfo.returnValue, configs);
            }), operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 根据属性名批量创建附件行数据
         */
        AttachmentDataService.prototype.updateRowsWithPropertyName = function (attachmentInfoFieldPath, attachmentInfos) {
            var _this = this;
            var restService = this.repository.restService;
            var baseUri = restService.baseUri;
            var updateUri = baseUri + "/service/batchuploadattachmentwithproptyname";
            var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
            var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
            var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
            var body = {
                batchUploadInfo: serverAttachInfo,
                propertyName: propertyName,
                requestInfo: restService.buildRequestInfo()
            };
            var options = {
                body: body
            };
            return restService.invoke(updateUri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                return _this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
            }), operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 创建服务器端需要的更新信息
         */
        AttachmentDataService.prototype.createUpdateAttachInfo = function (attachmentInfoFieldPath, attachmentInfo) {
            var attachmentId = attachmentInfo.attachmentId;
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            parentBindingPathArray.pop();
            var nodeCodes = bef.BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
            var hiretryIds = bef.BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
            var serverAttachInfo = {
                NodeCodes: nodeCodes,
                HiretryIds: hiretryIds,
                AttachmentIds: [attachmentId],
                AttachmentId: attachmentId
            };
            return serverAttachInfo;
        };
        /**
         * 创建服务器端需要的批量新增附件信息
         */
        AttachmentDataService.prototype.createBatchCreateAttachInfo = function (attachmentInfoFieldPath, attachmentInfo) {
            var attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            parentBindingPathArray.pop();
            var nodeCodes = bef.BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
            var hiretryIds = bef.BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
            var serverAttachInfo = {
                NodeCodes: nodeCodes,
                HiretryIds: hiretryIds,
                AttachmentIds: attachmentIds,
                AttachmentId: null
            };
            return serverAttachInfo;
        };
        /**
         * 同步服务器端最新信息到客户端
         * @todo:
         * 1、主对象批量新增时不支持
         */
        AttachmentDataService.prototype.syncAttachmentInfosToClient = function () {
            var rootDataId = this.bindingData.list.currentId;
            return this.repository.updateEntityById(rootDataId);
        };
        /**
         * 追加主表数据到客户端
         */
        AttachmentDataService.prototype.appendAttachmentInfosToClient = function (listData, isRootEntity) {
            if (isRootEntity === true) {
                var entities = this.repository.buildEntities(listData);
                this.repository.entityCollection.addEntities(entities);
                return rxjs.of(listData);
            }
            else {
                var rootDataId = this.bindingData.list.currentId;
                return this.repository.updateEntityById(rootDataId).pipe(operators.map(function () { return listData; }));
            }
        };
        AttachmentDataService.prototype.appendAttachmentInfos = function (listData, keyValues) {
            var entities = this.repository.buildEntities(listData);
            this.repository.entityCollection.addEntities(entities);
            // 更新实体使之产生变更集
            this.updateEntities(entities, keyValues);
            return rxjs.of(listData);
        };
        AttachmentDataService.prototype.updateEntities = function (entities, keyValues) {
            var _this = this;
            entities.forEach(function (entity) {
                _this.updateEntity(entity, keyValues);
            });
        };
        AttachmentDataService.prototype.updateEntity = function (target, keyValues) {
            var _this = this;
            Object.keys(keyValues).forEach(function (key) {
                _this.setValueByPath(target, key, keyValues[key]);
            });
        };
        AttachmentDataService.prototype.setValueByPath = function (target, path, value) {
            if (target) {
                var paths = path.split('.');
                if (paths.length <= 1) {
                    target[path] = value;
                }
                else {
                    paths.slice(0, -1).reduce(function (prev, path) {
                        if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                            prev[path] = {};
                        }
                        return prev[path];
                    }, target)[paths[paths.length - 1]] = value;
                }
            }
        };
        AttachmentDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AttachmentDataService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: FormLoadingService }
            ];
        };
        return AttachmentDataService;
    }());

    // tslint:disable: max-line-length
    /**
     * 附件服务
     */
    var AttachmentService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function AttachmentService(frameContext, attachDataService, notifyService, uploadDialogService, downloadService) {
            this.frameContext = frameContext;
            this.attachDataService = attachDataService;
            this.notifyService = notifyService;
            this.uploadDialogService = uploadDialogService;
            this.downloadService = downloadService;
            /**
             * 默认根目录
             */
            this.defaultRootDirId = '';
            this.setLanguageService();
            this.fileViewerService = this.frameContext.injector.get(fileViewer.FileViewerService, null, core.InjectFlags.Optional);
            this.entityService = this.frameContext.injector.get(EntityService, null, core.InjectFlags.Optional);
            if (!this.downloadService && typeof formdocUpload.DownloadService !== 'undefined') {
                this.downloadService = this.frameContext.injector.get(formdocUpload.DownloadService, null);
            }
        }
        Object.defineProperty(AttachmentService.prototype, "defaultParentDirName", {
            /**
             * 默认父路径
             */
            get: function () {
                return this.frameContext.bindingData.list.currentId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttachmentService.prototype, "bindingData", {
            /**
             * 绑定数据
             */
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置语言服务
         */
        AttachmentService.prototype.setLanguageService = function () {
            var injector = this.frameContext.injector;
            this.languageService = injector.get(LanguageService, null, core.InjectFlags.Optional);
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
        };
        /**
         * 上传单个文件
         * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
         * @param attachmentNamePath 附件名称字段的路径
         */
        AttachmentService.prototype.uploadAndUpdateRow = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
            var _this = this;
            var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
            var formId = parentDirName ? parentDirName : this.defaultParentDirName;
            if (!rootId || !formId) {
                throw new Error('rootDirId和parentDirName不能为空，请填写');
            }
            var uploadLimit = new formdocUpload.UploadLimit();
            uploadLimit.fileCount = 1;
            if (fileType) {
                uploadLimit.fileType = fileType;
            }
            // 获取老的附件id数组
            var attachmentIdList = [];
            var currentItem = null;
            if (id) {
                // 修正当前行
                var bindingList = this.frameContext.bindingData.getList();
                if (bindingList.currentId !== id) {
                    bindingList.setCurrentId(id, true, true);
                }
                // 如果指定了id则获取指定id的行
                currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
            }
            else {
                // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
                currentItem = this.getCurrentRow(attachmentInfoFieldPath);
            }
            if (currentItem && currentItem.primaryKeyValue) {
                var attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
                if (attachmentIds && attachmentIds.length > 0) {
                    attachmentIdList.push.apply(attachmentIdList, attachmentIds);
                }
            }
            else {
                this.notifyService.warning(this.languageService.plsSelectUpdateRow, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var dialog$ = rxjs.from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
            var result$ = dialog$.pipe(operators.switchMap(function (fileInfos) {
                if (!fileInfos || fileInfos.length === 0) {
                    _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                    return rxjs.empty();
                }
                // 过滤出state为新增的附件
                fileInfos = fileInfos.filter(function (fileInfo) {
                    if (fileInfo.hasOwnProperty('state')) {
                        return fileInfo.state === formdocUpload.FileState.New;
                    }
                    return true;
                });
                if (fileInfos.length === 0) {
                    return rxjs.of(true);
                }
                // 是否上传判断
                var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
                var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
                return _this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);
            }));
            return result$;
        };
        /**
         * 上传单个文件（支持多列）
         * @param attachmentInfoFieldPath 附件内码字段的路径，形如/attachInfo/attachmentId；
         * @param rootDirId 附件存储根目录
         * @param parentDirName 附件存储目录
         * @param fileType 文件类型，like .txt,.docx
         */
        AttachmentService.prototype.uploadAndUpdateRowWithPropertyName = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
            var _this = this;
            var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
            var formId = parentDirName ? parentDirName : this.defaultParentDirName;
            if (!rootId || !formId) {
                throw new Error('rootDirId和parentDirName不能为空，请填写');
            }
            var uploadLimit = new formdocUpload.UploadLimit();
            uploadLimit.fileCount = 1;
            if (fileType) {
                uploadLimit.fileType = fileType;
            }
            // 获取老的附件id数组
            var attachmentIdList = [];
            var currentItem = null;
            if (id) {
                // 修正当前行
                var bindingList = this.frameContext.bindingData.getList();
                if (bindingList.currentId !== id) {
                    bindingList.setCurrentId(id, true, true);
                }
                // 如果指定了id则获取指定id的行
                currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
            }
            else {
                // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
                currentItem = this.getCurrentRow(attachmentInfoFieldPath);
            }
            if (currentItem && currentItem.primaryKeyValue) {
                var attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
                if (attachmentIds && attachmentIds.length > 0) {
                    attachmentIdList.push.apply(attachmentIdList, attachmentIds);
                }
            }
            else {
                this.notifyService.warning(this.languageService.plsSelectUpdateRow, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var dialog$ = rxjs.from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
            var result$ = dialog$.pipe(operators.switchMap(function (fileInfos) {
                if (!fileInfos || fileInfos.length === 0) {
                    _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                    return rxjs.EMPTY;
                }
                // 过滤出state为新增的附件
                fileInfos = fileInfos.filter(function (fileInfo) {
                    if (fileInfo.hasOwnProperty('state')) {
                        return fileInfo.state === formdocUpload.FileState.New;
                    }
                    return true;
                });
                if (fileInfos.length === 0) {
                    return rxjs.of(true);
                }
                // 是否上传判断
                var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
                var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
                return _this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);
            }));
            return result$;
        };
        /**
         * 上传多个文件
         */
        AttachmentService.prototype.uploadAndBatchAddRows = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType) {
            var _this = this;
            var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
            var formId = parentDirName ? parentDirName : this.defaultParentDirName;
            if (!rootId || !formId) {
                throw new Error('rootDirId和parentDirName不能为空，请填写');
            }
            var uploadLimit = new formdocUpload.UploadLimit();
            if (fileType) {
                uploadLimit.fileType = fileType;
            }
            var dialog$ = rxjs.from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
            var result$ = dialog$.pipe(operators.switchMap(function (fileInfos) {
                if (!fileInfos || fileInfos.length === 0) {
                    _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                    return rxjs.EMPTY;
                }
                // 过滤出state为新增的附件
                fileInfos = fileInfos.filter(function (fileInfo) {
                    if (fileInfo.hasOwnProperty('state')) {
                        return fileInfo.state === formdocUpload.FileState.New;
                    }
                    return true;
                });
                if (fileInfos.length === 0) {
                    return rxjs.of(true);
                }
                var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
                return _this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);
            }));
            return result$;
        };
        /**
         * 上传多个文件
         */
        AttachmentService.prototype.uploadAndBatchAddRowsWithPropertyName = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
            var _this = this;
            var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
            var formId = parentDirName ? parentDirName : this.defaultParentDirName;
            if (!rootId || !formId) {
                throw new Error('rootDirId和parentDirName不能为空，请填写');
            }
            var uploadLimit = new formdocUpload.UploadLimit();
            if (fileType) {
                uploadLimit.fileType = fileType;
            }
            if (id) {
                // 修正当前行
                var bindingList = this.frameContext.bindingData.getList();
                if (bindingList.currentId !== id) {
                    bindingList.setCurrentId(id, true, true);
                }
            }
            var dialog$ = rxjs.from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
            var result$ = dialog$.pipe(operators.switchMap(function (fileInfos) {
                if (!fileInfos || fileInfos.length === 0) {
                    _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                    return rxjs.EMPTY;
                }
                // 过滤出state为新增的附件
                fileInfos = fileInfos.filter(function (fileInfo) {
                    if (fileInfo.hasOwnProperty('state')) {
                        return fileInfo.state === formdocUpload.FileState.New;
                    }
                    return true;
                });
                if (fileInfos.length === 0) {
                    return rxjs.of(true);
                }
                var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
                return _this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);
            }));
            return result$;
        };
        /**
         * 下载附件（根据附件id）
         */
        AttachmentService.prototype.download = function (attachId, rootId) {
            if (!attachId) {
                this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            rootId = rootId || 'default-root';
            var url = this.getDownloadUrl([attachId], rootId);
            // let url = '';
            // if (rootId) {
            //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
            // } else {
            //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;
            // }
            window.open(url);
            return rxjs.of(true);
        };
        /**
         * 批量下载附件（根据附件id数组）
         */
        AttachmentService.prototype.batchDownload = function (attachIds, rootId) {
            if (!attachIds || attachIds.length === 0) {
                this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            // 只选择一个附件时按单个附件下载处理
            if (attachIds.length === 1) {
                return this.download(attachIds[0], rootId);
            }
            // const attachIdsString = JSON.stringify(attachIds);
            // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;
            var url = this.getDownloadUrl(attachIds, rootId);
            window.open(url);
            return rxjs.of(true);
        };
        /**
         * 获取下载路径
         * @param metadataidlist 附件id数组
         * @param rootId rootId
         */
        AttachmentService.prototype.getDownloadUrl = function (metadataidlist, rootId) {
            rootId = rootId || 'default-root';
            if (this.downloadService) {
                if (metadataidlist.length === 1) {
                    return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);
                }
                else {
                    var attachIdsString = JSON.stringify(metadataidlist);
                    return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);
                }
            }
            else {
                console.warn('因安全问题，附件下载提供安全校验机制，附件下载功能需重新编译。');
                if (metadataidlist.length === 1) {
                    return rtf.BasePathService.convertPath("/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=" + metadataidlist[0] + "&rootid=" + rootId);
                }
                else {
                    var attachIdsString = JSON.stringify(metadataidlist);
                    return rtf.BasePathService.convertPath("/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=" + attachIdsString + "&rootid=" + rootId);
                }
            }
        };
        /**
         * 下载（根据数据id）
         */
        AttachmentService.prototype.downloadByDataId = function (dataId, attachmentInfoFieldPath, rootId) {
            if (!dataId) {
                this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var dataIds = [dataId];
            var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
            if (attachIds.length === 0) {
                this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var attachId = attachIds[0];
            return this.download(attachId);
        };
        /**
         * 批量下载附件
         */
        AttachmentService.prototype.batchDownloadByDataIds = function (dataIds, attachmentInfoFieldPath, rootId) {
            if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {
                dataIds = dataIds.split(',').filter(function (p) { return p; });
            }
            if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {
                this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var ids = [].concat(dataIds);
            var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);
            if (attachIds.length === 0) {
                this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            return this.batchDownload(attachIds, rootId);
        };
        /**
         * 根据附件UDT字段的路径预览附件
         * @param attachmentInfoFieldPath 附件UDT字段path
         * @param rootDirId 跟目录id
         * @param ids 附件id
         */
        AttachmentService.prototype.previewByAttachmentInfoFieldPath = function (attachmentInfoFieldPath, rootDirId, ids) {
            if (!attachmentInfoFieldPath || !rootDirId) {
                throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
            }
            var attachIds = [];
            var dataIds = [];
            if (ids && ids.length > 0) {
                if (typeof (ids) === 'string') {
                    dataIds.push(ids);
                }
                else {
                    dataIds = ids;
                }
                attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
            }
            else {
                attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
            }
            if (attachIds && attachIds.length === 0) {
                this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
                return rxjs.EMPTY;
            }
            return this.previewByAttachmentIds(attachIds, rootDirId);
        };
        /**
         * 根据附件UDT字段的路径预览当前行的附件
         * @param attachmentInfoFieldPath 附件UDT字段path
         * @param rootDirId 根目录id
         */
        AttachmentService.prototype.previewByAttachmentInfoFieldPathWithIndex = function (attachmentInfoFieldPath, rootDirId) {
            if (!attachmentInfoFieldPath || !rootDirId) {
                throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
            }
            var currentRow = this.getCurrentRow(attachmentInfoFieldPath);
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            var attachmentFieldName = parentBindingPathArray.pop();
            if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {
                this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
            if (attachIds && attachIds.length === 0) {
                this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
            if (!attachmentId) {
                throw new Error('要预览的附件id不存在，请确认');
            }
            else {
                return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);
            }
        };
        /**
         * 根据目录预览附件
         * @param subDirName 父目录名称
         * @param rootDirId 根目录id
         */
        AttachmentService.prototype.previewBySubDirName = function (subDirName, rootDirId) {
            if (!subDirName || !rootDirId) {
                throw new Error('subDirName和rootDirId不能为空，请填写');
            }
            var viewer$ = rxjs.from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));
            return viewer$;
        };
        /**
         * 根据目录预览指定索引的附件
         * @param attachmentInfoFieldPath 附件UDT字段path
         * @param subDirName 子目录名称
         * @param rootDirId 根目录id
         */
        AttachmentService.prototype.previewBySubDirNameWithIndex = function (attachmentInfoFieldPath, subDirName, rootDirId) {
            if (!subDirName || !rootDirId) {
                throw new Error('subDirName和rootDirId不能为空，请填写');
            }
            // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
            var attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
            if (!attachmentId) {
                this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var viewer$ = rxjs.from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));
            return viewer$;
        };
        /**
         * 根据附件id数组预览附件
         * @param attachmentIds 附件id数组
         * @param rootDirId 根目录id
         */
        AttachmentService.prototype.previewByAttachmentIds = function (attachmentIds, rootDirId) {
            var viewer$ = rxjs.from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));
            return viewer$;
        };
        /**
         * 根据附件id数组预览指定索引的附件
         * @param attachmentIds 附件id数组
         * @param rootDirId 根目录id
         * @param attachmentId 附件Id
         */
        AttachmentService.prototype.previewFileListWithIndex = function (attachmentIds, rootDirId, attachmentId) {
            var viewer$ = rxjs.from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));
            return viewer$;
        };
        /**
         * 生成版本号
         * @param versions 历史版本号
         * @description 默认编码规则v1.0 v2.0 ...
         */
        AttachmentService.prototype.genVersion = function (versions) {
            if (!versions) {
                versions = [];
            }
            var mainCode = versions.length + 1;
            return "V" + mainCode + ".0";
        };
        /**
         * 更新附件版本信息
         * @param versionField 附件版本字段
         * @param historyField 是否历史版本字段
         * @param attachmentFieldPath 附件udt字段路径
         */
        AttachmentService.prototype.updateAttachmentVersion = function (versionField, historyField, attachmentFieldPath) {
            var _this = this;
            /**
             * 遍历所有附件行
             * 找到所有没有附件版本的行
             * 遍历这些行
             * 通过文件名去查找同名的且有附件版本号的行
             * 这些行历史版本字段置为true
             * 无版本号的行，版本= 上行数 + 1
             *
             */
            var bindingPaths = attachmentFieldPath.split('/').filter(function (p) { return p; });
            // 弹出附件udt字段
            var attachmentField = bindingPaths.pop();
            // 获取到所有的附件
            var attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
            var befRepository = this.frameContext.repository;
            var entityManager = befRepository.entityManager;
            var dataPath = devkit.DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
            var paths = dataPath.toArray().map(function (path) {
                if (path.startsWith('PropName:')) {
                    return path.split(':')[1];
                }
                else {
                    return path;
                }
            });
            if (attachmentBindingList) {
                var attachments_1 = attachmentBindingList.toJSON();
                // 只处理有附件的情况
                if (attachments_1) {
                    var versionLessRows = attachments_1.filter(function (item) { return !item[versionField]; });
                    versionLessRows.forEach(function (item) {
                        var fileName = item[attachmentField]['fileName'];
                        var versionedRows = attachments_1.filter(function (row) { return row[attachmentField]['fileName'] === fileName && row[versionField]; });
                        paths.pop();
                        paths.push("DataId:" + item[attachmentBindingList.primaryKey]);
                        var entity = _this.frameContext.repository.entityCollection.getEntityByPath(paths);
                        var version = _this.genVersion(versionedRows);
                        entity[versionField] = version;
                        entity[historyField] = false;
                        // 处理历史记录
                        versionedRows.forEach(function (row) {
                            paths.pop();
                            paths.push("DataId:" + row[attachmentBindingList.primaryKey]);
                            entity = _this.frameContext.repository.entityCollection.getEntityByPath(paths);
                            entity[historyField] = true;
                        });
                    });
                }
            }
        };
        AttachmentService.prototype.isAttachmentCanDelete = function (historyField, attachmentFieldPath) {
            var bindingPaths = attachmentFieldPath.split('/').filter(function (p) { return p; });
            // 弹出附件udt字段
            bindingPaths.pop();
            var attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
            var bindingObject = attachmentBindingList.currentItem;
            if (bindingObject[historyField] === true) {
                this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });
                return rxjs.EMPTY;
            }
        };
        AttachmentService.prototype.updateAttachmentHistory = function (versionField, historyField, attachmentFieldPath) {
            var _this = this;
            var bindingPaths = attachmentFieldPath.split('/').filter(function (p) { return p; });
            // 弹出附件udt字段
            var attachmentField = bindingPaths.pop();
            // 获取到所有的附件
            var attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
            // const befRepository = this.frameContext.repository as BefRepository<any>;
            // const entityManager = befRepository.entityManager;
            if (attachmentBindingList) {
                var attachments = attachmentBindingList.toJSON();
                var versionedRows = attachments.filter(function (item) { return item[versionField]; });
                var fileNameMap_1 = new Map();
                var befRepository = this.frameContext.repository;
                var entityManager = befRepository.entityManager;
                var dataPath = devkit.DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
                var paths_1 = dataPath.toArray().map(function (path) {
                    if (path.startsWith('PropName:')) {
                        return path.split(':')[1];
                    }
                    else {
                        return path;
                    }
                });
                versionedRows.forEach(function (item) {
                    var fileName = item[attachmentField]['fileName'];
                    if (fileNameMap_1.has(fileName)) {
                        fileNameMap_1.get(fileName).push(item);
                    }
                    else {
                        fileNameMap_1.set(fileName, [item]);
                    }
                });
                Array.from(fileNameMap_1.values()).forEach(function (array) {
                    array.sort(function (x, y) {
                        var xVersion = parseInt(x[versionField].replace(/[a-zA-Z\.]/g, ''));
                        var yVersion = parseInt(y[versionField].replace(/[a-zA-Z\.]/g, ''));
                        return yVersion - xVersion;
                    });
                    var row = array[0];
                    paths_1.pop();
                    paths_1.push("DataId:" + row[attachmentBindingList.primaryKey]);
                    var entity = _this.frameContext.repository.entityCollection.getEntityByPath(paths_1);
                    entity[historyField] = false;
                });
            }
        };
        /**
         * 删除附件
         * @param attachmentInfoFieldPath 附件udt字段路径
         * @param id 数据id
         * @param rootDirId 根目录
         * @returns
         */
        AttachmentService.prototype.removeAttachment = function (attachmentInfoFieldPath, id, rootDirId) {
            var rootId = rootDirId;
            if (!rootId) {
                throw new Error('rootDirId和parentDirName不能为空，请填写');
            }
            var dataIds = [id];
            var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
            if (attachIds.length === 0) {
                this.notifyService.warning(this.languageService.plsSelectRemoveAtt, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var attachmentId = attachIds[0];
            return this.attachDataService.removeAttachment(attachmentInfoFieldPath, { attachmentId: attachmentId, fileName: null });
        };
        /**
         * 获取当前视图模型当前行的附件id
         * @param attachmentInfoFieldPath 附件udt字段
         */
        AttachmentService.prototype.getCurrentAttachmentId = function (attachmentInfoFieldPath) {
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            var attachmentFieldName = parentBindingPathArray.pop();
            var bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
            var currentItem = bindingList.currentItem;
            if (currentItem && currentItem.primaryKeyValue) {
                return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;
            }
            else {
                return null;
            }
        };
        /**
         * 获取当前行
         * @param attachmentInfoFieldPath udt字段
         */
        AttachmentService.prototype.getCurrentRow = function (attachmentInfoFieldPath) {
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            parentBindingPathArray.pop();
            var bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
            var currentItem = bindingList && bindingList.currentItem;
            return currentItem;
        };
        /**
         * 获取指定附件信息表的指定行
         * @param attachmentInfoFieldPath
         * @param primaryValue
         * @returns
         */
        AttachmentService.prototype.getSpecialRow = function (attachmentInfoFieldPath, primaryValue) {
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            parentBindingPathArray.pop();
            var bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
            var currentItem = bindingList && bindingList.findById(primaryValue);
            return currentItem;
        };
        /**
         * 获取dataIds对应Entity上的附件id数组
         */
        AttachmentService.prototype.getAttachmentIdsByPathAndDataIds = function (attachmentInfoFieldPath, dataIds) {
            // 解析路径
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            var attachmentFieldName = parentBindingPathArray.pop();
            // 获取附件所在实体的数据列表，不传递dataIds参数，则返回全部
            var entityListData = this.entityService.getEntityListData(parentBindingPathArray);
            var filteredEntityListData = [];
            if (dataIds && Array.isArray(dataIds) === true) {
                filteredEntityListData = entityListData.filter(function (entityData) {
                    return dataIds.indexOf(entityData.id) > -1;
                });
            }
            else {
                filteredEntityListData = entityListData;
            }
            // 转换为附件Id数组
            var attachmentIds = [];
            filteredEntityListData.forEach(function (entityData) {
                if (entityData[attachmentFieldName]) {
                    var attachmentId = entityData[attachmentFieldName]['attachmentId'];
                    if (attachmentId) {
                        attachmentIds.push(attachmentId);
                    }
                }
            });
            return attachmentIds;
        };
        AttachmentService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AttachmentService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: AttachmentDataService },
                { type: FormNotifyService },
                { type: formdocUpload.UploadDialogService },
                { type: formdocUpload.DownloadService, decorators: [{ type: core.Optional }] }
            ];
        };
        return AttachmentService;
    }());

    /**
     * 附件上传
     * @summary
     * fileExtend：命名文件上传或预览组件传递过来的数据；
     * fileExtendFieldPath：命名附件UDT的字段路径；
     * attachmentInfo：命名附件UDT所需的信息；
     */
    var FileService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function FileService(frameContext, attachDataService, entityService, subListDataService, notifyService, languageService, listDataService, formLoadingService) {
            var _this = this;
            this.frameContext = frameContext;
            this.attachDataService = attachDataService;
            this.entityService = entityService;
            this.subListDataService = subListDataService;
            this.notifyService = notifyService;
            this.languageService = languageService;
            this.listDataService = listDataService;
            this.formLoadingService = formLoadingService;
            this.subject = new rxjs.Subject();
            this.subject.pipe(operators.debounceTime(500)).subscribe(function (data) {
                _this.process(data.fileInfoFieldPath, data.configs);
            });
            this.attachmentInfos = [];
        }
        // #region 上传文件
        /**
         * 批量添加附件行
         */
        FileService.prototype.addFileRows = function (fileInfoFieldPath) {
            var attachmentInfos = this.getAttachmentInfosToAddFromContext();
            if (attachmentInfos.length === 0) {
                this.notifyService.info('请先上传附件');
            }
            return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);
        };
        /**
         * 批量添加带附件类型的附件行
         * @param fileInfoFieldPath 附件udt字段
         * @param configs 附件扩展信息配置
         * @description configs配置如{"billId":"{UISTATE~/root/billId}","rowId":"{UISTATE~/root/rowId}","attachmentType":"xueli"}
         */
        FileService.prototype.addFileRowsWithConfigs = function (fileInfoFieldPath, configs) {
            var attachmentInfos = this.getAttachmentInfosToAddFromContext();
            if (attachmentInfos.length === 0) {
                this.notifyService.info('请先上传附件');
            }
            // let mapFields = null;
            // if (typeof configs === 'string') {
            //   // 去掉首尾空格
            //   configs = configs.trim();
            // }
            // if (configs.startsWith('{') && configs.endsWith('}')) {
            //   try {
            //     mapFields = JSON.parse(configs);
            //   } catch {
            //     throw new Error('附件扩展信息配置不是合法的json字符串。');
            //   }
            // } else {
            //   throw new Error('附件扩展信息配置不是合法的json字符串。');
            // }
            this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);
            this.subject.next({ fileInfoFieldPath: fileInfoFieldPath, configs: configs });
            //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);
        };
        FileService.prototype.process = function (fileInfoFieldPath, configs) {
            var _this = this;
            if (this.attachmentInfos && this.attachmentInfos.length > 0) {
                var attachmentInfos_1 = this.attachmentInfos.concat([]);
                var mapFields = null;
                if (typeof configs === 'string') {
                    // 去掉首尾空格
                    configs = configs.trim();
                }
                if (configs.startsWith('{') && configs.endsWith('}')) {
                    try {
                        mapFields = JSON.parse(configs);
                    }
                    catch (_a) {
                        throw new Error('附件扩展信息配置不是合法的json字符串。');
                    }
                }
                else {
                    throw new Error('附件扩展信息配置不是合法的json字符串。');
                }
                this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos_1, mapFields).pipe(operators.tap(function () {
                    _this.attachmentInfos = _this.attachmentInfos.filter(function (item) { return !attachmentInfos_1.find(function (attachmentInfo) { return attachmentInfo.attachmentId === item.attachmentId; }); });
                    if (_this.attachmentInfos.length > 0) {
                        _this.process(fileInfoFieldPath, configs);
                    }
                })).subscribe();
            }
        };
        /**
         * 获取要添加的附件信息数组
         */
        FileService.prototype.getAttachmentInfosToAddFromContext = function () {
            var fileExtends = this.getFileExtendsFromContext();
            var attachmentInfos = this.convertToAttachmentInfos(fileExtends);
            return attachmentInfos;
        };
        /**
         * 将附件上传组件返回的附件信息转换为服务器端需要的格式
         */
        FileService.prototype.convertToAttachmentInfos = function (fileExtends) {
            if (!fileExtends) {
                return [];
            }
            var attachmentInfos = [];
            fileExtends.forEach(function (fUploadOutPut) {
                var attachmentInfo = {
                    attachmentId: fUploadOutPut.extend.metadataId,
                    fileName: fUploadOutPut.extend.fileName,
                };
                attachmentInfos.push(attachmentInfo);
            });
            return attachmentInfos;
        };
        // #endregion
        // #region 删除文件
        /**
         * 删除附件行
         */
        FileService.prototype.removeFileRows = function (fileInfoFieldPath) {
            var _this = this;
            var dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);
            if (dataIds.length === 0) {
                this.notifyService.info('请选择要删除的附件');
            }
            var isSublist = fileInfoFieldPath.split('/').filter(function (p) { return p; }).length >= 2;
            var removeObservables = [];
            if (isSublist) {
                dataIds.forEach(function (dataId) {
                    var removeObservable;
                    removeObservable = _this.subListDataService.removeWithoutConfirm(dataId);
                    removeObservables.push(removeObservable);
                });
                return rxjs.forkJoin(removeObservables);
            }
            else {
                return this.listDataService.removeRows(dataIds, false, null, false);
            }
        };
        /**
         * 获取要删除的数据
         */
        FileService.prototype.getDataIdsToRemoveFromContext = function (fileExtendFieldPath) {
            var _this = this;
            // 从上下文中获取要处理的附件信息数组
            var fileExtends = this.getFileExtendsFromContext();
            // 将附件数组转换为对应的数据id
            var dataIds = [];
            fileExtends.forEach(function (fileExtend) {
                // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
                var fileId = fileExtend.extend.metadataId;
                var dataId = _this.convertFileIdToDataId(fileId, fileExtendFieldPath);
                dataIds.push(dataId);
            });
            return dataIds;
        };
        /**
         * 根据路径获取附件字段值数组
         * @param fieldPath 字段路径
         */
        FileService.prototype.convertFileIdToDataId = function (fileId, fileExtendFieldPath) {
            // 解析路径
            var fileBindingPath = devkit.BindingPathConverter.toBindingPathArray(fileExtendFieldPath);
            var fileFieldName = fileBindingPath.pop();
            var fileListBindingPath = fileBindingPath;
            // 获取附件id数组
            var entityListData = this.entityService.getEntityListData(fileListBindingPath);
            var targetEntityData = entityListData.find(function (entityData) {
                if (entityData[fileFieldName]) {
                    var attachmentId = entityData[fileFieldName]['attachmentId'];
                    if (attachmentId === fileId) {
                        return true;
                    }
                }
            });
            return targetEntityData.id;
        };
        // #endregion
        //#region 文件排序
        /**
         * 更新附件排序
         * @param attachmentInfoFieldPath 附件udt字段路径
         * @param ids 附件排序后的附件id数组
         */
        FileService.prototype.updateOrder = function (attachmentInfoFieldPath, ids) {
            if (!attachmentInfoFieldPath) {
                throw new Error('附件udt字段路径参数不能为空');
            }
            // 支持从代码中直接调用，如果参数中传递了ids则使用，否则使用命令上下文中的事件参数
            if (!ids) {
                // 获取事件参数
                var commandContext = this['context'];
                // 与组件约定事件参数为数据主键数组
                ids = commandContext && commandContext.eventParam && commandContext.eventParam.data;
            }
            // 对收集的主键数组进行判断
            if (!ids || !Array.isArray(ids)) {
                return;
            }
            // 当前命令所在组件的绑定数据
            var bindingList = this.frameContext.bindingData.getList();
            // 无绑定数据时不处理
            if (!bindingList || bindingList.length < 1) {
                return;
            }
            // 统一获取附件udt信息
            var parentBindingPathArray = devkit.BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
            var attachmentField = parentBindingPathArray.pop();
            // 出现udt字段不存在的情况，说明命令中附件udt字段配置错误或vo中没有附件udt。控制器不兼容错误，此处判断只为阻止后续的遍历
            if (!attachmentField) {
                throw new Error('无法获取附件udt字段，请确认命令中附件udt字段路径配置正确，且视图模型中存在附件udt字段');
            }
            var data = bindingList.toJSON();
            // 更新绑定数据中附件udt字段中排序字段的值,仅更新有附件的行
            ids.forEach(function (id, index) {
                var item = data.find(function (item) { return item && item[attachmentField] && item[attachmentField]['attachmentId'] === id; });
                var primaryKeyValue = item && item.id;
                if (!primaryKeyValue) {
                    return;
                }
                var bindingObject = bindingList.findById(primaryKeyValue);
                if (bindingObject) {
                    // 附件udt对象
                    var attachment = bindingObject[attachmentField];
                    if (attachment) {
                        // 获取旧值
                        var order = attachment.getValue(ATTACHMENT_ORDER_FIELD);
                        if (order !== index) {
                            // 更新排序
                            attachment.setValue(ATTACHMENT_ORDER_FIELD, index, true, true);
                        }
                    }
                }
            });
        };
        //#endregion
        // #region 其他工具方法
        /**
         * 从上下文中获取要处理的附件信息数组
         * @summary
         * 为了统一单个和多个附件的处理方式，统一包装为数组
         */
        FileService.prototype.getFileExtendsFromContext = function () {
            var commandContext = this['context'];
            var eventParam = commandContext.eventParam;
            if (!eventParam) {
                return [];
            }
            var fileExtends;
            if (Array.isArray(eventParam) === false) {
                fileExtends = [eventParam];
            }
            else {
                fileExtends = eventParam.concat([]);
            }
            return fileExtends;
        };
        FileService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FileService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: AttachmentDataService },
                { type: EntityService },
                { type: SubListDataService },
                { type: FormNotifyService },
                { type: LanguageService },
                { type: ListDataService },
                { type: FormLoadingService, decorators: [{ type: core.Optional }] }
            ];
        };
        return FileService;
    }());

    /**
     * 弹窗服务
     * @scope FormModule
     */
    var DialogService = /** @class */ (function () {
        function DialogService(modalService, farrisFormService, _componentFactoryResolver, frameContext, injector) {
            this.modalService = modalService;
            this.farrisFormService = farrisFormService;
            this._componentFactoryResolver = _componentFactoryResolver;
            this.frameContext = frameContext;
            this.injector = injector;
            this._providers = [];
            /**
             * 外部引用
             */
            this.refs = {};
            this.modals = {};
            this.setLanguageService();
        }
        /**
         * 设置语言服务
         */
        DialogService.prototype.setLanguageService = function () {
            // FrameContext不一定存在，不能直接用
            var frameContext = this.getFrameContext();
            if (frameContext) {
                var injector = this.frameContext.injector;
                this.languageService = injector.get(LanguageService, null, core.InjectFlags.Optional);
            }
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
        };
        /**
         * 兼容旧弹窗，获取frameContext
         */
        DialogService.prototype.getFrameContext = function () {
            if (this.frameContext) {
                return this.frameContext;
            }
            if (this['context'] && this['context']['frameContext']) {
                return this['context']['frameContext'];
            }
            return null;
        };
        /**
         * 兼容旧弹窗，获取ComponentFactoryResolver
         */
        DialogService.prototype.getComponentFactoryResolver = function () {
            var frameContext = this.getFrameContext();
            var componentFactoryResolver;
            if (frameContext) {
                componentFactoryResolver = frameContext.injector.get(core.ComponentFactoryResolver);
            }
            return componentFactoryResolver;
        };
        /**
         * 获取config转换成对象类型的配置
         * @param config 配置项
         * @throws 填写对象格式或json字符串
         */
        DialogService.prototype.getObjectTypeConfig = function (config) {
            var objectTypeConfig;
            if (typeof config === 'string') {
                if (config.length) {
                    try {
                        objectTypeConfig = JSON.parse(config);
                    }
                    catch (_a) {
                        throw new Error(config + '不是合法的json字符串');
                    }
                }
                else {
                    objectTypeConfig = {};
                }
            }
            else if (typeof config === 'object') {
                objectTypeConfig = Object.assign({}, config);
            }
            else {
                throw new Error('填写对象格式或json字符串');
            }
            return objectTypeConfig;
        };
        /**
         * 创建模态框内组件实例，并返回模态框实例；做了兼容老表单处理
         * @param config 弹窗配置
         * @param component 弹窗内组件
         * @param uiStateObject 绑定弹窗内组件uiState
         */
        DialogService.prototype.createModalComponentRef = function (config, component, uiStateObject) {
            var componentRef;
            var modalRef;
            var frameContext = this.getFrameContext();
            var componentFactoryResolver = this.getComponentFactoryResolver();
            if (frameContext && componentFactoryResolver) {
                var contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);
                var injector = this.createInjector(this.refs, this.frameContext.injector);
                var modalContentInjector = core.ReflectiveInjector.resolveAndCreate(__spread(this._providers), injector);
                componentRef = contentCmptFactory.create(modalContentInjector);
                if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                    if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                        Object.keys(uiStateObject).forEach(function (item) {
                            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                        });
                    }
                    // 附加isDialog参数
                    componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                }
                modalRef = this.modalService.show(componentRef, config);
            }
            else {
                modalRef = this.modalService.show(component, config);
            }
            return modalRef;
        };
        /**
         *打开弹窗
         * @param config 模态框本身配置
         * @param modalId 模态框内组件的id
         * @param uiStateConfig 模态框内组件uiState上的字段及值
         * @param callback 回调
         */
        DialogService.prototype.openModal = function (config, modalId, uiStateConfig, callback) {
            var _this = this;
            if (config === void 0) {
                config = {};
            }
            if (uiStateConfig === void 0) {
                uiStateConfig = {};
            }
            var configObj = this.getObjectTypeConfig(config);
            var uiStateObject = this.getObjectTypeConfig(uiStateConfig);
            var innerCompopnent = this.farrisFormService.getControls(modalId);
            var modalRef;
            var modalConfig = {
                title: this.languageService.defaultDialogTitle,
                width: 760,
                height: 450,
                showButtons: false
            };
            modalConfig = Object.assign(modalConfig, configObj);
            var onClosingHandler = modalConfig.beforeClose;
            // tslint:disable: no-string-literal
            var cancelChanges = modalConfig['cancelChanges'] || false;
            modalConfig.beforeClose = function (ref) {
                // if (ref && ref.modalRef && ref.modalRef.content) {
                //   ref.modalRef.content.isDialogRootComponent = false;
                // }
                if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                    return onClosingHandler(ref).pipe(operators.switchMap(function (result) {
                        if (result) {
                            if (cancelChanges) {
                                return _this.cancelChanges(ref);
                            }
                        }
                        return rxjs.of(result);
                    }));
                }
                if (cancelChanges) {
                    return _this.cancelChanges(ref);
                }
                else {
                    return rxjs.of(true);
                }
            };
            var remote = modalConfig.remote || false;
            if (remote) {
                this.createRemoteForm(modalConfig, uiStateObject).subscribe(function (modalRef) {
                    _this.modalRef = modalRef;
                    _this.refs.modalRef = modalRef;
                    if (modalRef && !!modalRef.content) {
                        modalRef.content.isDialogRootComponent = true;
                        modalRef.content.dialogRef = modalRef;
                    }
                    callback(modalRef);
                });
            }
            else {
                if (!innerCompopnent) {
                    console.error("\u83B7\u53D6\u63A7\u4EF6\u5931\u8D25\uFF0CmodalId=" + modalId);
                    return;
                }
                if (typeof innerCompopnent === 'string') {
                    modalConfig.dialogType = 'iframe';
                    modalRef = this.modalService.show(innerCompopnent, modalConfig);
                }
                else if (typeof innerCompopnent === 'function') {
                    modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);
                }
                else if (typeof innerCompopnent === 'object') {
                    // 如果是对象 且使用独立js加载
                    // {"useIsolateJs":true,"modalInstance":f()}
                    if (innerCompopnent.useIsolateJs) {
                        var injector = this.createInjector(this.refs);
                        var parameter = {
                            injector: injector,
                            uiState: uiStateObject,
                            modalService: this.modalService,
                            dialogServiceInstance: this,
                            eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,
                            componentCallback: this.componentModify,
                            modalInstanceCallback: this.modalInstanceCallback.bind(this)
                        };
                        // 会在内部进行
                        var subject = innerCompopnent['modalInstance'](modalConfig, parameter);
                        return subject;
                    }
                    else {
                        modalRef = this.modalService.show(innerCompopnent, modalConfig);
                    }
                }
                this.modalRef = modalRef;
                this.refs.modalRef = modalRef;
                if (modalRef && !!modalRef.content) {
                    modalRef.content.isDialogRootComponent = true;
                    modalRef.content.dialogRef = modalRef;
                }
                return modalRef;
            }
        };
        DialogService.prototype.componentModify = function (cmpRef, parameter) {
            if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {
                if (parameter.uistate && typeof parameter.uistate === 'string') {
                    parameter.uistate = JSON.parse(parameter.uistate);
                }
                if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {
                    Object.keys(parameter.uistate).forEach(function (item) {
                        cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);
                    });
                }
                // 附加isDialog参数
                cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
        };
        DialogService.prototype.modalInstanceCallback = function (cmpRef, options, parameter) {
            if (parameter && parameter.modalService) {
                var modalRef = parameter.modalService.show(cmpRef, options);
                this.modalRef = modalRef;
                this.refs.modalRef = modalRef;
                if (modalRef && !!modalRef.content) {
                    modalRef.content.isDialogRootComponent = true;
                    modalRef.content.dialogRef = modalRef;
                }
                return modalRef;
            }
        };
        /**
         * 打开类帮助表单
         * @param frameId
         * @param params
         * @param configs
         * @description 弹出表单和弹出远端表单区别为弹出表单需要配置字段映射
         */
        DialogService.prototype.openHelpModal = function (frameId, params, configs) {
            var _this = this;
            var events = this['context']['eventParam'] || {};
            // 卡片场景传递过来的事件是自定义对象，包含event和options。列表场景传递过来的事件参数是普通事件参数，在参数中携带了editor.options
            var event = events.event || events;
            var options = events.options || events.editor && events.editor.options || {};
            var context = events && events.context;
            var subject = new rxjs.Subject();
            // modalId在两种场景下都需要，用来区分实例
            var _a = options.modalId, modalId = _a === void 0 ? null : _a;
            if (!configs) {
                configs = '{}';
            }
            if (typeof configs === 'string' && configs.length > 0) {
                configs = JSON.parse(configs);
            }
            var _b = configs || {}, _c = _b.remote, remote = _c === void 0 ? false : _c, _d = _b.currentRow, currentRow = _d === void 0 ? false : _d, _e = _b.areaResponse, areaResponse = _e === void 0 ? undefined : _e;
            // 支持areaResponse配置
            if (areaResponse !== undefined && options.areaResponse === undefined) {
                options.areaResponse = areaResponse;
            }
            if (remote) {
                var mapFields_1 = configs.mapFields || {};
                options.remote = remote + '?v=' + new Date().valueOf();
                this.openModal(options, modalId, params, function (dialogRef) {
                    // 新增event参数（为了以后调用event中的formControl以适配列表中的智能输入框弹出表单）
                    _this.modals[modalId] = { subject: subject, frameId: frameId, mapFields: mapFields_1, dialogRef: dialogRef, currentRow: currentRow, event: event, context: context };
                });
            }
            else {
                var dialogRef = this.openModal(options, modalId, params);
                var mapFields = options.mapFields || {};
                this.modals[modalId] = { subject: subject, frameId: frameId, mapFields: mapFields, dialogRef: dialogRef, currentRow: currentRow, event: event, context: context };
            }
            return subject;
        };
        /**
         * 打开带回调的弹窗
         * @param frameId frameId
         * @param params 参数
         * @param configs 配置
         * @returns
         */
        DialogService.prototype.openCallbackableModal = function (frameId, params, configs) {
            var _this = this;
            if (!configs) {
                configs = '{}';
            }
            if (typeof configs === 'string') {
                configs = JSON.parse(configs);
            }
            var events = this['context'] && this['context']['eventParam'] || {};
            var options = events.options;
            options.showButtons = true;
            options.buttons = [
                { text: this.languageService.cancel, cls: 'btn', handle: function (event) { return _this.cancel(options); } },
                {
                    text: this.languageService.confirm, cls: 'btn btn-primary', handle: function (event) {
                        var _a = (options || {}).modalId, modalId = _a === void 0 ? null : _a;
                        if (modalId) {
                            var modal = _this.modals[modalId];
                            var _b = modal || {}, _c = _b.subject, subject_1 = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d, _e = _b.frameId, frameId_1 = _e === void 0 ? null : _e, _f = _b.handle, handle_1 = _f === void 0 ? null : _f, _g = _b.currentRow, currentRow_1 = _g === void 0 ? false : _g;
                            var formCmp = dialogRef.content; // 弹窗表单实例
                            if (!formCmp) {
                                throw new Error('不支持的表单类型');
                            }
                            var selectedItems = [];
                            if (currentRow_1 === true) {
                                var frameComtext = void 0;
                                if (formCmp.context) {
                                    frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId_1);
                                }
                                else {
                                    frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId_1);
                                }
                                if (!frameComtext) {
                                    throw new Error("\u65E0\u6548\u7684frameId\uFF1A" + frameId_1 + "\uFF0C\u8BF7\u786E\u8BA4\u547D\u4EE4\u4E2DframeId\u6B63\u786E\u3002");
                                }
                                var bindingList = frameComtext.bindingData.getList();
                                var item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                                selectedItems = [item];
                            }
                            else {
                                var rows = void 0;
                                // 如果context为空 那么尝试从对应的appcontext读取，主要目的是为了解析表单的弹出
                                if (formCmp.context) {
                                    rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId_1).uiState.rows || new Map();
                                }
                                else {
                                    rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId_1).uiState.rows || new Map();
                                }
                                selectedItems = Array.from(rows.values());
                            }
                            if (typeof handle_1 === 'function') {
                                handle_1(selectedItems);
                            }
                            if (subject_1) {
                                subject_1.next();
                            }
                            dialogRef.close(options);
                        }
                    }
                }
            ];
            var subject = new rxjs.Subject();
            var _a = options.modalId, modalId = _a === void 0 ? null : _a;
            var _b = configs.remote, remote = _b === void 0 ? null : _b, _c = configs.currentRow, currentRow = _c === void 0 ? false : _c, _d = configs.areaResponse, areaResponse = _d === void 0 ? undefined : _d;
            var handle = options.handle;
            // 支持areaResponse配置
            if (areaResponse !== undefined && options.areaResponse === undefined) {
                options.areaResponse = areaResponse;
            }
            if (remote) {
                options.remote = remote + '?v=' + new Date().valueOf();
                this.openModal(options, modalId, params, function (dialogRef) {
                    _this.modals[modalId] = { subject: subject, frameId: frameId, dialogRef: dialogRef, handle: handle, currentRow: currentRow, event: events.event };
                });
            }
            else {
                var dialogRef = this.openModal(options, modalId, params);
                this.modals[modalId] = { subject: subject, frameId: frameId, dialogRef: dialogRef, handle: handle, currentRow: currentRow, event: events.event };
            }
            return subject;
        };
        /**
         * 确认按钮事件
         * @throws frameId
         */
        DialogService.prototype.confirm = function () {
            var _this = this;
            var events = this['context'] && this['context']['eventParam'] || {};
            var _a = (events || {}).modalId, modalId = _a === void 0 ? null : _a;
            if (modalId) {
                var modal = this.modals[modalId];
                var _b = modal || {}, _c = _b.subject, subject = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d, _e = _b.mapFields, mapFields_2 = _e === void 0 ? {} : _e, _f = _b.frameId, frameId = _f === void 0 ? null : _f, _g = _b.currentRow, currentRow = _g === void 0 ? false : _g, _h = _b.event, event_1 = _h === void 0 ? null : _h, _j = _b.context, context_1 = _j === void 0 ? null : _j;
                var formCmp = dialogRef.content; // 弹窗表单实例
                if (!formCmp) {
                    throw new Error('不支持的表单类型');
                }
                // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;
                var selectedItems_1 = [];
                if (currentRow === true) {
                    var frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                    if (!frameComtext) {
                        throw new Error("\u65E0\u6548\u7684frameId\uFF1A" + frameId + "\uFF0C\u8BF7\u786E\u8BA4\u547D\u4EE4\u4E2DframeId\u6B63\u786E\u3002");
                    }
                    var bindingList = frameComtext.bindingData.getList();
                    var item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                    if (item && Object.keys(item).length > 0) {
                        selectedItems_1 = [item];
                    }
                }
                else {
                    var rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                    selectedItems_1 = Array.from(rows.values());
                }
                // 映射字段数据
                // 获取触发弹框的编辑器的字段名称
                var editorField = undefined;
                if (event_1 && event_1.editor && event_1.editor.column) {
                    editorField = event_1.editor.column.field;
                }
                if (selectedItems_1 && mapFields_2) {
                    Object.keys(mapFields_2).forEach(function (k) {
                        var targetField = mapFields_2[k];
                        var sourceKeyArray = k.split('.').filter(function (p) { return p; }) || [];
                        var targetValue = selectedItems_1.map(function (r) {
                            return sourceKeyArray.reduce(function (target, key) {
                                if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {
                                    return target[key];
                                }
                                else {
                                    return '';
                                }
                            }, r);
                        }).join(',');
                        if (targetField) {
                            var bindingPaths_1 = _this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
                            var targetFields = targetField.split(',').filter(function (p) { return p; });
                            targetFields.forEach(function (target) {
                                if (context_1) {
                                    _this.setValueByPath(context_1, target, targetValue);
                                }
                                else {
                                    // 修复表格智能输入框选择值后智能输入框值丢失的问题
                                    if (event_1.formControl && event_1.formControl.setValue && event_1.editor && event_1.editor.column && event_1.editor.column.field === target) {
                                        event_1.formControl.setValue(targetValue);
                                    }
                                    var targetPath = target.split('.');
                                    _this.frameContext.bindingData.setValue(bindingPaths_1.concat(targetPath), targetValue, true, true);
                                }
                            });
                        }
                    });
                }
                if (subject) {
                    subject.next();
                }
                dialogRef.close();
            }
        };
        /**
         * 取消按钮事件
         * @param event
         */
        DialogService.prototype.cancel = function (event) {
            var events = event || this['context'] && this['context']['eventParam'] || {};
            var _a = (events || {}).modalId, modalId = _a === void 0 ? null : _a;
            if (modalId) {
                var modal = this.modals[modalId];
                var _b = modal || {}, _c = _b.subject, subject = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d;
                if (subject) {
                    subject.next();
                }
                if (dialogRef) {
                    dialogRef.close();
                }
            }
        };
        /**
         * 取消服务器变更集
         * @param ref
         */
        DialogService.prototype.cancelChanges = function (ref) {
            if (ref && ref.modalRef && ref.modalRef.content) {
                var component = ref.modalRef.content;
                if (component && component.context) {
                    var repository = component.context.repository || null;
                    if (repository) {
                        return repository.cancelChanges().pipe(operators.switchMap(function () { return rxjs.of(true); }));
                    }
                }
            }
            return rxjs.of(true);
        };
        /**
         * 关闭该弹窗
         */
        DialogService.prototype.closeModal = function () {
            if (this.modalRef) {
                this.modalRef.close();
            }
        };
        /**
         * 创建远程表单实例
         * @param options dialog配置
         * @param uiState uistate
         */
        DialogService.prototype.createRemoteForm = function (options, uiState) {
            var _this = this;
            var remote = options.remote || false;
            var subject = new rxjs.Subject();
            if (remote) {
                var moduleName_1 = options.moduleName || null;
                System.import(remote).then(function (module) {
                    if (!moduleName_1) {
                        moduleName_1 = Object.keys(module).pop();
                    }
                    var moduleFactory = module[moduleName_1];
                    var moduleRef = moduleFactory.create(_this.injector);
                    var resolve = moduleRef && moduleRef.instance && moduleRef.instance.trans && typeof moduleRef.instance.trans.resolve === 'function' && moduleRef.instance.trans.resolve || (function () { return rxjs.of(true); });
                    resolve.apply(moduleRef.instance.trans).subscribe(function () {
                        var entryComponent = moduleRef['_bootstrapComponents'][0];
                        if (entryComponent) {
                            var compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                            var injector = _this.createInjector(_this.refs);
                            var componentRef_1 = compFactory.create(injector);
                            if (componentRef_1 && componentRef_1.instance && componentRef_1.instance.viewModel && componentRef_1.instance.viewModel.uiState) {
                                if (typeof uiState === 'object' && Object.keys(uiState).length) {
                                    Object.keys(uiState).forEach(function (item) {
                                        componentRef_1.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);
                                    });
                                }
                                // 附加isDialog参数
                                componentRef_1.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                            }
                            var modalRef = _this.modalService.show(componentRef_1, options);
                            subject.next(modalRef);
                        }
                        else {
                            throw new Error("\u65E0\u6CD5\u627E\u5230\u5165\u53E3\u8868\u5355\uFF01");
                        }
                    });
                });
            }
            return subject;
        };
        DialogService.prototype.setValueByPath = function (target, path, value) {
            if (target) {
                var paths = path.split('.');
                if (paths.length <= 1) {
                    target[path] = value;
                }
                else {
                    paths.slice(0, -1).reduce(function (prev, path) {
                        if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                            prev[path] = {};
                        }
                        return prev[path];
                    }, target)[paths[paths.length - 1]] = value;
                }
            }
        };
        DialogService.prototype.createInjector = function (modalRef, injector) {
            var providers = [
                { provide: INSIDE_DIALOG_TOKEN, useValue: true },
                {
                    provide: MODAL_REF, useValue: core.forwardRef(function () { return modalRef; })
                }
            ];
            return core.Injector.create({ providers: providers, parent: injector || this.injector });
        };
        DialogService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DialogService.ctorParameters = function () {
            return [
                { type: uiModal.BsModalService },
                { type: FarrisFormService },
                { type: core.ComponentFactoryResolver },
                { type: devkit.FrameContext },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        return DialogService;
    }());

    /**
     * 侧边栏服务
     * @scope FrameComponent
     */
    var SidebarService = /** @class */ (function () {
        function SidebarService(frameContext, sidebarUIService, messageService, languageService) {
            this.frameContext = frameContext;
            this.sidebarUIService = sidebarUIService;
            this.messageService = messageService;
            this.languageService = languageService;
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
        }
        Object.defineProperty(SidebarService.prototype, "repository", {
            get: function () {
                return this.frameContext.repository;
            },
            enumerable: true,
            configurable: true
        });
        SidebarService.prototype.openSidebar = function () {
            this.sidebarUIService.sendIsOpen(true);
        };
        SidebarService.prototype.closeSidebar = function () {
            this.sidebarUIService.sendIsOpen(false);
        };
        /**
         * 关闭前先取消变更
         */
        SidebarService.prototype.confirmBeforeClosingSidebar = function () {
            // 检查是否有变更，没有变更直接关闭
            var ifChangesExist = this.repository.entityManager.checkAllEntityChanges();
            if (!ifChangesExist) {
                return rxjs.of(true);
            }
            // 确认是否关闭
            var confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);
            var result$ = confirm$.pipe(operators.switchMap(function (confirmResult) {
                if (confirmResult === false) {
                    return rxjs.of(false);
                }
                else {
                    return rxjs.of(true);
                }
            }));
            return result$;
        };
        /**
         * 继续关闭侧边栏
         */
        SidebarService.prototype.continueClosingSidebar = function () {
            return rxjs.of(true);
        };
        /**
         * 阻止侧边栏关闭
         */
        SidebarService.prototype.stopClosingSidebar = function () {
            return rxjs.of(false);
        };
        SidebarService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SidebarService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: uiSidebar.FarrisSidebarService },
                { type: FormMessageService },
                { type: LanguageService, decorators: [{ type: core.Optional }] }
            ];
        };
        return SidebarService;
    }());

    /**
     * 过滤条件服务
     * @scope FormModule
     */
    var FilterService = /** @class */ (function () {
        function FilterService() {
        }
        /**
         * 移除包含特殊值的过滤条件
         * @todo：假定filters为字符串，待设计时支持数组参数后一起调整
         */
        FilterService.prototype.stripFiltersWithSpecialValue = function (filters, specialValues) {
            var _this = this;
            if (!filters || !specialValues) {
                return filters;
            }
            var filterArray = JSON.parse(filters);
            var strippedFilterArray = filterArray.filter(function (filter) {
                var filterValue = _this.getFilterValue(filter);
                return specialValues.indexOf(filterValue) === -1;
            });
            return JSON.stringify(strippedFilterArray);
        };
        /**
         * 获取过滤条件的值
         * @todo：没有Filter接口定义，目前产品部大小写不一致。
         */
        FilterService.prototype.getFilterValue = function (filter) {
            return filter.Value || filter.value;
        };
        FilterService.decorators = [
            { type: core.Injectable }
        ];
        return FilterService;
    }());

    var FARRIS_FORM_COMPONENTS$1 = new core.InjectionToken('表单弹出窗口或隐藏组件列表');
    /**
     * 表单服务
     * @scope FormModule
     */
    var ComponentManagerService = /** @class */ (function () {
        function ComponentManagerService() {
            this.controls = {};
        }
        ComponentManagerService.prototype.appendControl = function (key, cmpIns) {
            this.controls[key] = cmpIns;
        };
        ComponentManagerService.prototype.getControl = function (key) {
            if (this.controls[key]) {
                return this.controls[key];
            }
            else {
                console.warn("\u672A\u627E\u5230Key\u4E3A" + key + "\u7684\u7EC4\u4EF6\uFF01");
                return null;
            }
        };
        ComponentManagerService.prototype.clear = function (key) {
            if (key) {
                this.controls[key] = null;
                delete this.controls[key];
            }
            else {
                this.controls = {};
            }
        };
        ComponentManagerService.decorators = [
            { type: core.Injectable }
        ];
        return ComponentManagerService;
    }());

    var AuthorityService = /** @class */ (function () {
        function AuthorityService() {
        }
        AuthorityService.prototype.queryOperationAuthority = function (operationIds) {
            var queryResult = new Map();
            var i = 0;
            for (var j = 0; j < operationIds.length; j++) {
                queryResult.set(operationIds[j], i % 2 == 0 ? true : false);
                i++;
            }
            var dummyResult = new rxjs.Subject();
            setTimeout(function () {
                dummyResult.next(queryResult);
            }, 0);
            return dummyResult;
        };
        return AuthorityService;
    }());

    /**
     * 权限
     */
    var Authority = /** @class */ (function () {
        function Authority() {
            this.operationLabelMap = new Map();
            this.authOfLabel = new Map();
        }
        /**
         * 设置label到operation id的映射
         * @param labelMap
         */
        Authority.prototype.setLabelMap = function (labelMap) {
            var _this = this;
            for (var i in labelMap) {
                this.operationLabelMap.set(i, labelMap[i]);
            }
            this.operationLabelMap.forEach(function (opId, label) {
                _this[label] = false;
            });
        };
        /**
         * 初始化权限的值
         */
        Authority.prototype.initialize = function (authorityService) {
            var _this = this;
            if (this.operationLabelMap && this.operationLabelMap.size > 0) {
                return authorityService.queryOperationAuthority(Array.from(this.operationLabelMap.values())).pipe(operators.map(function (operationAuth) {
                    _this.operationLabelMap.forEach(function (opId, label) {
                        _this.authOfLabel.set(label, operationAuth.has(opId) ? operationAuth.get(opId) : false);
                    });
                }));
            }
            else {
                return rxjs.empty();
            }
        };
        /**
         * 返回操作权限，即用户是否拥有Label所对应的权限
         * @param label 标签，可以是button id等
         */
        Authority.prototype.hasOperation = function (label) {
            return this.authOfLabel.has(label) && this.authOfLabel.get(label);
        };
        return Authority;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-30 10:35:09
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-06-15 19:22:13
     */
    /**
     * 默认异常处理器
     * @scope 没有提供对应Provider
     */
    var ExceptionHandler = /** @class */ (function () {
        function ExceptionHandler(formErrorService, languageService, applicationContext) {
            this.formErrorService = formErrorService;
            this.languageService = languageService;
            this.applicationContext = applicationContext;
            this.appContext = null;
            if (this.languageService == null) {
                this.languageService = LanguageService.getInstance();
            }
        }
        ExceptionHandler.prototype.setContext = function (applicationContext) {
            this.appContext = applicationContext;
        };
        ExceptionHandler.prototype.handle = function (error) {
            if (!!this.formErrorService) {
                this.formErrorService.exception(this.languageService.loadFailed, error);
            }
        };
        ExceptionHandler.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExceptionHandler.ctorParameters = function () {
            return [
                { type: FormErrorService },
                { type: LanguageService, decorators: [{ type: core.Optional }] },
                { type: devkit.AppContext }
            ];
        };
        return ExceptionHandler;
    }());

    /**
     * 遗留的老Providers
     */
    var FARRIS_COMMAND_SERVICE_PROVIDERS = [
        // 表单模块注入（18个）
        FormLoadingService,
        FormMessageService,
        FormNotifyService,
        FormErrorService,
        CheckService,
        DataCheckService,
        EventService,
        FilterService,
        KeybindingService,
        LanguageService,
        ParamService,
        MenuStateService,
        QuerystringService,
        RuntimeFrameworkService,
        NavigationEventService,
        NavigationService,
        RouterService,
        ApplicationParamService,
        // FrameComponent（20个）
        ValidationService,
        FocusInvalidService,
        ChangeItemService,
        UIStateService,
        StateMachineService,
        BindingDataService,
        CommandService,
        // entity-services
        EntityTraversingService,
        EntityManipulationService,
        EntityAggregationService,
        EntityListService,
        EntityService,
        ListDataService,
        TreeDataService,
        SubTreeDataService,
        CardDataService,
        SubListDataService,
        BeActionService,
        ApproveService,
        PrintService,
        AttachmentDataService,
        AttachmentService,
        NavigationMiddlewareService,
        GridMiddlewareService,
        SidebarService,
        FarrisFormService,
        DialogService,
    ];

    var UserSettingsService = /** @class */ (function () {
        function UserSettingsService(injector, frmI18nSettingService) {
            this.injector = injector;
            this.frmI18nSettingService = frmI18nSettingService;
        }
        Object.defineProperty(UserSettingsService.prototype, "timeZone", {
            /**
             * 用户时区字符串
             */
            get: function () {
                return this.timezone && this.timezone.id || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "timeZoneOffset", {
            /**
             * 时区偏移
             */
            get: function () {
                var offset = this.timezone && this.timezone.baseOffset;
                if (offset !== null && offset !== undefined) {
                    return offset;
                }
                else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "defaultLanguage", {
            /**
             * 默认语言
             */
            get: function () {
                return this.i18nSetting && this.i18nSetting.defaultLanguage || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "dateFormat", {
            /**
             * 日期格式化字符串
             * like: yyyy-MM-dd
             */
            get: function () {
                return this.i18nSetting && this.i18nSetting.userDateFormat || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "timeFormat", {
            /**
             * 时间格式
             * like: HH:MM:ss
             */
            get: function () {
                return this.i18nSetting && this.i18nSetting.userTimeFormat || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "dateTimeFormat", {
            get: function () {
                var dateFormat = this.i18nSetting && this.i18nSetting.userDateFormat || 'yyyy-MM-dd';
                var timeFormat = this.i18nSetting && this.i18nSetting.userTimeFormat || 'HH:mm:ss';
                return dateFormat + " " + timeFormat;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "addressFormat", {
            /**
             * 地址格式
             */
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "numberFormat", {
            /**
             * 数字格式
             */
            get: function () {
                if (this.i18nSetting && this.i18nSetting.userNumberFormat) {
                    var userNumberFormat = this.i18nSetting.userNumberFormat;
                    var numberFormat = {
                        negativeSign: userNumberFormat.negativeSign || '-',
                        numberDecimalDigits: userNumberFormat.numberDecimalDigits || 2,
                        numberDecimalSeparator: userNumberFormat.numberDecimalSeparator || '.',
                        numberGroupSeparator: userNumberFormat.numberGroupSeparator || ','
                    };
                    return numberFormat;
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "regionCode", {
            /**
             * 区域代码
             */
            get: function () {
                return this.i18nSetting && this.i18nSetting.userRegionCode || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "userSettings", {
            /**
             * 用户配置
             */
            get: function () {
                var userSettings = this.frmI18nSettingService && this.frmI18nSettingService.getSetting();
                return userSettings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "timezone", {
            get: function () {
                return this.i18nSetting && this.i18nSetting.timezone;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserSettingsService.prototype, "i18nSetting", {
            get: function () {
                return this.userSettings && this.userSettings.i18nSetting;
            },
            enumerable: true,
            configurable: true
        });
        UserSettingsService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserSettingsService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: rtfCommon.FrmI18nSettingService, decorators: [{ type: core.Optional }] }
            ];
        };
        return UserSettingsService;
    }());

    var WorkFlowMessageService = /** @class */ (function () {
        function WorkFlowMessageService() {
            this.messageHandler = function (callback) {
                return function (event) {
                    var message = event.data;
                    if (message) {
                        message.sender = event.source;
                    }
                    if (typeof callback === 'function') {
                        callback(message);
                    }
                };
            };
        }
        /**
         * 监听工作流消息
         * @param callback 回调
         */
        WorkFlowMessageService.prototype.listen = function (callback) {
            this.handler = this.messageHandler(callback);
            window.addEventListener('message', this.handler);
        };
        WorkFlowMessageService.prototype.destroy = function () {
            if (this.handler) {
                window.removeEventListener('message', this.handler);
            }
        };
        /**
         * 给工作流表单发送消息
         * @param message
         */
        WorkFlowMessageService.prototype.send = function (message) {
            if (!message) {
                return;
            }
            var win = window;
            if (message.target) {
                win = message.target || window;
                delete message.target;
            }
            if (win) {
                win.postMessage(message, '*');
            }
        };
        WorkFlowMessageService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WorkFlowMessageService.ctorParameters = function () { return []; };
        return WorkFlowMessageService;
    }());

    /**
     * 工作流消息
     * @warning 禁止使用表单上下文，所有上下文必须从外部传入
     */
    var WorkFlowMessage = /** @class */ (function () {
        function WorkFlowMessage(injector, workFlowMessageService) {
            this.injector = injector;
            this.workFlowMessageService = workFlowMessageService;
            this.listeners = new Map();
        }
        WorkFlowMessage.prototype.setup = function () {
            var _this = this;
            if (!this.workFlowMessageService) {
                return;
            }
            this.workFlowMessageService.listen(function (message) {
                if (!_this.listeners || _this.listeners.size < 1) {
                    return;
                }
                _this.listeners.forEach(function (callback, key) {
                    if (typeof callback === 'function') {
                        callback(message);
                    }
                });
            });
        };
        WorkFlowMessage.prototype.addEventListener = function (callback) {
            var id = new Date().valueOf().toString(16) + "-" + Math.ceil(Math.random() * 100);
            this.listeners.set(id, callback);
            return id;
        };
        WorkFlowMessage.prototype.removeEventListener = function (eventId) {
            if (!this.listeners || this.listeners.size < 1) {
                return;
            }
            this.listeners.delete(eventId);
            eventId = null;
        };
        WorkFlowMessage.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WorkFlowMessage.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: WorkFlowMessageService }
            ];
        };
        return WorkFlowMessage;
    }());

    var WorkFlowMessageHandler = /** @class */ (function () {
        function WorkFlowMessageHandler(injector, frameContext, workFlowMessageService, workFlowMessage) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.workFlowMessageService = workFlowMessageService;
            this.workFlowMessage = workFlowMessage;
        }
        WorkFlowMessageHandler.prototype.onComponentInit = function (frameContext) {
            var _this = this;
            var eventId = this.workFlowMessage.addEventListener(this.handle.bind(this));
            var frameContextDestroySignal = this.frameContext.destorySignal;
            if (frameContextDestroySignal) {
                frameContextDestroySignal.subscribe(function () {
                    _this.workFlowMessage.removeEventListener(eventId);
                });
            }
            var appContextDestroySignal = this.frameContext.appContext.destorySignal;
            if (appContextDestroySignal) {
                appContextDestroySignal.subscribe(function () {
                    _this.workFlowMessage.workFlowMessageService.destroy();
                });
            }
        };
        WorkFlowMessageHandler.prototype.handle = function (message) {
            var _this = this;
            var source = message.sender;
            var data = message.data;
            var commandName = data && data.command || null;
            var resultTask = null;
            if (!commandName) {
                return;
            }
            if (commandName == 'wf-required-verification') {
                // 工作流的必填校验
                // 如此获取的是当前组件的校验服务，应该按namespace来区分，不同的namespace需要分别执行校验
                var formFrameContexts = this.getFormFrameContexts();
                resultTask = rxjs.from(formFrameContexts).pipe(operators.concatMap(function (frameContext) {
                    var validation = frameContext.injector.get(ValidationService, null);
                    if (validation) {
                        return validation.validateAll();
                    }
                    return rxjs.of(true);
                }));
            }
            else {
                var command = this.frameContext.viewModel[commandName];
                if (command) {
                    resultTask = command(data.arguments);
                }
            }
            if (resultTask) {
                var message_1 = this.buildMessage(true, source, this.isChanged);
                resultTask.pipe(operators.throwIfEmpty()).subscribe(function (result) {
                    // 向来源方回传消息
                    _this.workFlowMessageService.send(message_1);
                }, function () {
                    message_1.data.result = false;
                    _this.workFlowMessageService.send(message_1);
                });
            }
        };
        WorkFlowMessageHandler.prototype.buildMessage = function (result, target, dataChanged, type) {
            if (type === void 0) {
                type = 'message';
            }
            var message = {
                data: {
                    result: result,
                    dataChanged: dataChanged
                },
                type: type,
                target: target,
            };
            return message;
        };
        WorkFlowMessageHandler.prototype.getFormFrameContexts = function () {
            var appContextManager = this.injector.get(devkit.AppContextManager, null);
            var formFrameContexts = [];
            if (appContextManager) {
                var appContexts = appContextManager.getAppContexts();
                if (appContexts && appContexts.length > 0) {
                    appContexts.forEach(function (appContext) {
                        var frameContexts = appContext.frameContextManager.getFrameContexts();
                        frameContexts.reduce(function (contexts, frameContext) {
                            var namespace = frameContext.namespace;
                            var index = contexts.findIndex(function (frame) { return frame.namespace === namespace; });
                            if (index === -1) {
                                var root = frameContext.getVirtualRootFrameContext();
                                contexts.push(root);
                            }
                            return contexts;
                        }, formFrameContexts);
                    });
                }
            }
            return formFrameContexts;
        };
        Object.defineProperty(WorkFlowMessageHandler.prototype, "isChanged", {
            /**
             * 是否有未保存的变更
             */
            get: function () {
                var befRepository = this.frameContext.repository;
                return bef.BefRepositoryUtil.isExistUnsaveData(befRepository);
            },
            enumerable: true,
            configurable: true
        });
        WorkFlowMessageHandler.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WorkFlowMessageHandler.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: WorkFlowMessageService },
                { type: WorkFlowMessage }
            ];
        };
        return WorkFlowMessageHandler;
    }());

    /**
     * 模块级注入(共20个)
     */
    var FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS = [
        FormLoadingService,
        FormMessageService,
        FormNotifyService,
        FormErrorService,
        FormWizardService,
        CheckService,
        DataCheckService,
        EventService,
        ComponentManagerService,
        FilterService,
        KeybindingService,
        LanguageService,
        ParamService,
        MenuStateService,
        QuerystringService,
        RuntimeFrameworkService,
        NavigationEventService,
        NavigationService,
        RouterService,
        ApplicationParamService,
        FilterConditionService,
        { provide: devkit.UserSettingsToken, useClass: UserSettingsService },
        WorkFlowMessageService,
        WorkFlowMessage
    ];

    /**
     * 比较符
     */
    var CompareType;
    (function (CompareType) {
        CompareType[CompareType["Equal"] = 0] = "Equal";
        CompareType[CompareType["NotEqual"] = 1] = "NotEqual";
        CompareType[CompareType["Greater"] = 2] = "Greater";
        CompareType[CompareType["GreaterOrEqual"] = 3] = "GreaterOrEqual";
        CompareType[CompareType["Less"] = 4] = "Less";
        CompareType[CompareType["LessOrEqual"] = 5] = "LessOrEqual";
        CompareType[CompareType["Like"] = 6] = "Like";
        CompareType[CompareType["LikeStartWith"] = 7] = "LikeStartWith";
        CompareType[CompareType["LikeEndWith"] = 8] = "LikeEndWith";
        CompareType[CompareType["NotLike"] = 9] = "NotLike";
        CompareType[CompareType["NotLikeStartWith"] = 10] = "NotLikeStartWith";
        CompareType[CompareType["NotLikeEndWith"] = 11] = "NotLikeEndWith";
        CompareType[CompareType["Is"] = 12] = "Is";
        CompareType[CompareType["IsNot"] = 13] = "IsNot";
        CompareType[CompareType["In"] = 14] = "In";
        CompareType[CompareType["NotIn"] = 15] = "NotIn";
    })(CompareType || (CompareType = {}));

    var ValueType;
    (function (ValueType) {
        /**
         *值类型
         */
        ValueType[ValueType["Value"] = 0] = "Value";
        /**
         * 表达式
         */
        ValueType[ValueType["Express"] = 1] = "Express";
    })(ValueType || (ValueType = {}));

    var RelationType;
    (function (RelationType) {
        RelationType[RelationType["Empty"] = 0] = "Empty";
        /**
         * 与
         */
        // And=0,
        RelationType[RelationType["And"] = 1] = "And";
        /**
         * 或
         */
        // Or=1
        RelationType[RelationType["Or"] = 2] = "Or";
    })(RelationType || (RelationType = {}));

    var TextHandler = /** @class */ (function () {
        function TextHandler() {
        }
        TextHandler.prototype.convert = function (qc) {
            var tv = qc.value;
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                    'Value': tv.value,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        };
        return TextHandler;
    }());

    var DateRangeHandler = /** @class */ (function () {
        function DateRangeHandler() {
        }
        DateRangeHandler.prototype.convert = function (qc) {
            var control = qc.control;
            var arr = [];
            var drv = qc.value;
            drv.startTime && arr.push({
                'FilterField': control.startFieldCode ? control.startFieldCode : qc.fieldCode,
                'Compare': CompareType.GreaterOrEqual,
                'Value': drv.startTime,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            drv.endTime && arr.push({
                'FilterField': control.endFieldCode ? control.endFieldCode : qc.fieldCode,
                'Compare': CompareType.LessOrEqual,
                'Value': drv.endTime,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        };
        return DateRangeHandler;
    }());

    var DropDownHandler = /** @class */ (function () {
        function DropDownHandler() {
        }
        //qc.comparetype只有等于、不等于
        DropDownHandler.prototype.convert = function (qc) {
            var ddv = qc.value;
            var arr = [];
            ddv.value.forEach(function (dv) {
                arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': dv.value,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
            arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
            arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
            return arr;
        };
        return DropDownHandler;
    }());

    var NumberRangeHandler = /** @class */ (function () {
        function NumberRangeHandler() {
        }
        NumberRangeHandler.prototype.convert = function (qc) {
            var arr = [];
            var nrv = qc.value;
            (nrv.startValue != null) && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.GreaterOrEqual,
                'Value': nrv.startValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            (nrv.endValue != null) && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.LessOrEqual,
                'Value': nrv.endValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        };
        return NumberRangeHandler;
    }());

    var SmartHelpHandler = /** @class */ (function () {
        function SmartHelpHandler() {
        }
        SmartHelpHandler.prototype.convert = function (qc) {
            var shv = qc.value;
            if (shv.value.length == 0)
                return [];
            var arr = [];
            if (shv.isInputText || shv.valueField == null) {
                arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                    'Value': shv.textValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value
                });
                return arr;
            }
            else {
                shv.getOriginalValue().split(',').forEach(function (id) {
                    id && arr.push({
                        'FilterField': qc.fieldCode,
                        'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                        'Value': id,
                        'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                        'Expresstype': ValueType.Value
                    });
                });
                if (arr.length > 0) {
                    arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                    arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                    arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                    return arr;
                }
                else {
                    return [];
                }
            }
        };
        return SmartHelpHandler;
    }());

    var SingleYearHandler = /** @class */ (function () {
        function SingleYearHandler() {
        }
        SingleYearHandler.prototype.convert = function (qc) {
            var yv = qc.value;
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': yv.yearValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        };
        return SingleYearHandler;
    }());

    var CheckBoxHandler = /** @class */ (function () {
        function CheckBoxHandler() {
        }
        CheckBoxHandler.prototype.convert = function (qc) {
            //多选框的qc.compareType 只有等于
            var arr = [];
            var tv = qc.value;
            if (tv.value.length == 1)
                return [{
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Equal,
                        'Value': tv.value[0],
                        'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                        'Expresstype': ValueType.Value,
                        'Lbracket': qc.Lbracket || null,
                        'Rbracket': qc.Rbracket || null
                    }];
            tv.value.forEach(function (tvv) {
                arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': tvv,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
            arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
            arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
            return arr;
        };
        return CheckBoxHandler;
    }());

    var SingleMonthHandler = /** @class */ (function () {
        function SingleMonthHandler() {
        }
        SingleMonthHandler.prototype.convert = function (qc) {
            var mv = qc.value;
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': mv.monthValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        };
        return SingleMonthHandler;
    }());

    var MonthRangeHandler = /** @class */ (function () {
        function MonthRangeHandler() {
        }
        MonthRangeHandler.prototype.convert = function (qc) {
            var arr = [];
            var mrv = qc.value;
            mrv.startTime && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.GreaterOrEqual,
                'Value': mrv.startTime,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            mrv.endTime && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.LessOrEqual,
                'Value': mrv.endTime,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        };
        return MonthRangeHandler;
    }());

    var SingleDateTimeHandler = /** @class */ (function () {
        function SingleDateTimeHandler() {
        }
        SingleDateTimeHandler.prototype.convert = function (qc) {
            var dtv = qc.value;
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': dtv.datetimeValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        };
        return SingleDateTimeHandler;
    }());

    var SingleNumberHandler = /** @class */ (function () {
        function SingleNumberHandler() {
        }
        SingleNumberHandler.prototype.convert = function (qc) {
            var dtv = qc.value;
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': dtv.numValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        };
        return SingleNumberHandler;
    }());

    function getDate(dateValue, dtvFormat) {
        var today = new Date();
        // today.toLocaleString()
        var result = [];
        //首先判断哪些是单个日期，使用equal存入一个日期即可
        if (dateValue.isFirstDay || dateValue.isLastDay) {
            var switchValue = dateValue.dateType + '-' + (dateValue.isFirstDay ? 'first' : 'last');
            switch (switchValue) {
                case 'week-first':
                    if (dateFns.getDay(today) === 0) {
                        today = dateFns.addDays(today, -1);
                    }
                    result.push(dateFns.addDays(dateFns.startOfWeek(today), 1));
                    break;
                case 'week-last':
                    if (dateFns.getDay(today) === 0) {
                        today = dateFns.addDays(today, -1);
                    }
                    result.push(dateFns.addDays(dateFns.endOfWeek(today), 1));
                    break;
                case 'month-first':
                    result.push(dateFns.startOfMonth(today));
                    break;
                case 'month-last':
                    result.push(dateFns.endOfMonth(today));
                    break;
                case 'year-first':
                    result.push(dateFns.startOfYear(today));
                    break;
                case 'year-last':
                    result.push(dateFns.endOfYear(today));
                    break;
                default:
                    result.push(today);
            }
        }
        else if (dateValue.dateType === 'day' && dateValue.period === 'present') {
            //今天
            result.push(today);
        }
        else if (dateValue.dateType === 'day' && dateValue.count === 1) {
            //昨天、明天
            var _date = dateFns.addDays(today, dateValue.period === 'future' ? 1 : -1);
            result.push(_date);
        }
        else if (dateValue.period === 'present') {
            //本周、本月、本年
            switch (dateValue.dateType) {
                case 'week':
                    result.push(dateFns.startOfWeek(today), dateFns.endOfWeek(today));
                    break;
                case 'month':
                    result.push(dateFns.startOfMonth(today), dateFns.endOfMonth(today));
                    break;
                case 'year':
                    result.push(dateFns.startOfYear(today), dateFns.endOfYear(today));
                    break;
                default:
                    result.push(today);
            }
        }
        else {
            var switchValue = dateValue.dateType + '-' + dateValue.period;
            switch (switchValue) {
                case 'day-previous':
                    result.push(dateFns.addDays(today, dateValue.count * -1), dateFns.addDays(today, -1));
                    break;
                case 'day-future':
                    result.push(dateFns.addDays(today, 1), dateFns.addDays(today, dateValue.count));
                    break;
                case 'week-previous':
                    result.push(dateFns.addWeeks(today, dateValue.count * -1), dateFns.addDays(today, -1));
                    break;
                case 'week-future':
                    result.push(dateFns.addDays(today, 1), dateFns.addWeeks(today, dateValue.count));
                    break;
                case 'month-previous':
                    result.push(dateFns.addMonths(today, dateValue.count * -1), dateFns.addDays(today, -1));
                    break;
                case 'month-future':
                    result.push(dateFns.addDays(today, 1), dateFns.addMonths(today, dateValue.count));
                    break;
                case 'year-previous':
                    result.push(dateFns.addYears(today, dateValue.count * -1), dateFns.addDays(today, -1));
                    break;
                case 'year-future':
                    result.push(dateFns.addDays(today, 1), dateFns.addYears(today, dateValue.count));
                    break;
                default:
                    result.push(today);
            }
        }
        result = result.map(function (item) { return dateFns.format(item, dtvFormat.returnFormat || 'yyyy-MM-dd'); });
        return result;
    }
    var SingleDateHandler = /** @class */ (function () {
        function SingleDateHandler() {
        }
        SingleDateHandler.prototype.convert = function (qc) {
            var arr = [];
            var dtv = qc.value;
            if (typeof (dtv.dateValue) !== 'string') {
                var _dateValue = getDate(dtv.dateValue, qc.control);
                _dateValue.length === 1 && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': qc.compareType ? CompareType[qc.compareType] : CompareType.Equal,
                    'Value': _dateValue[0],
                    'Relation': qc.relation ? RelationType[qc.relation] : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                });
                _dateValue.length === 2 && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.GreaterOrEqual,
                    'Value': _dateValue[0],
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket ? (qc.Lbracket + '(') : '('
                }, {
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.LessOrEqual,
                    'Value': _dateValue[1],
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Rbracket': qc.Rbracket ? (qc.Rbracket + ')') : ')'
                });
            }
            else {
                arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': dtv.dateValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                });
            }
            return arr;
        };
        return SingleDateHandler;
    }());

    var ComboLookUpHandler = /** @class */ (function () {
        function ComboLookUpHandler() {
        }
        ComboLookUpHandler.prototype.convert = function (qc) {
            //帮助的qc.comparetype只有等于、不等于
            var cluv = qc.value;
            if (cluv.value.length == 0 || !cluv.valueField) {
                return [];
            }
            else {
                var arr_1 = [];
                cluv.getOriginalValue().split(',').forEach(function (id) {
                    id && arr_1.push({
                        'FilterField': qc.fieldCode,
                        'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                        'Value': id,
                        'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                        'Expresstype': ValueType.Value
                    });
                });
                if (arr_1.length > 0) {
                    arr_1[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                    arr_1[arr_1.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                    arr_1[arr_1.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                    return arr_1;
                }
                else {
                    return [];
                }
            }
        };
        return ComboLookUpHandler;
    }());

    var RadioHandler = /** @class */ (function () {
        function RadioHandler() {
        }
        RadioHandler.prototype.convert = function (qc) {
            var rv = qc.value;
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': rv.value,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        };
        return RadioHandler;
    }());

    var InputGroupHandler = /** @class */ (function () {
        function InputGroupHandler() {
        }
        //qc.comparetype只有等于、相似
        InputGroupHandler.prototype.convert = function (qc) {
            var igv = qc.value;
            var arr = [];
            if (igv.isInputText || igv.textField == null) {
                arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                    'Value': igv.textValue,
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                });
                return arr;
            }
            else {
                igv.getOriginalValue().split(',').forEach(function (itemValue) {
                    itemValue && arr.push({
                        'FilterField': qc.fieldCode,
                        'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                        'Value': itemValue,
                        'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                        'Expresstype': ValueType.Value
                    });
                });
                if (arr.length > 0) {
                    arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                    arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                    arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                    return arr;
                }
                else {
                    return [];
                }
            }
        };
        return InputGroupHandler;
    }());

    var QueryConditionHandlerFactory = /** @class */ (function () {
        function QueryConditionHandlerFactory() {
            this.queryConditionHandlerMapping = new Map();
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.Text, new TextHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.InputGroup, new InputGroupHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.DateRange, new DateRangeHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.DateTimeRange, new DateRangeHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.DropDownList, new DropDownHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.NumberRange, new NumberRangeHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.SmartHelp, new SmartHelpHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.SingleYear, new SingleYearHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.BoolCheck, new CheckBoxHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.SingleMonth, new SingleMonthHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.MonthRange, new MonthRangeHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.SingleDateTime, new SingleDateTimeHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.SingleNumber, new SingleNumberHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.SingleDate, new SingleDateHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.ComboLookUp, new ComboLookUpHandler());
            this.queryConditionHandlerMapping.set(componentQuerycondition.ControlType.Radio, new RadioHandler());
        }
        QueryConditionHandlerFactory.getInstance = function () {
            if (!QueryConditionHandlerFactory._instance) {
                QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
            }
            return QueryConditionHandlerFactory._instance;
        };
        QueryConditionHandlerFactory.prototype.getHandler = function (controlType) {
            return this.queryConditionHandlerMapping.get(controlType);
        };
        QueryConditionHandlerFactory._instance = null;
        return QueryConditionHandlerFactory;
    }());

    var QuerySolutionService = /** @class */ (function () {
        function QuerySolutionService(frameContext, frameworkSessionService) {
            this.frameContext = frameContext;
            this.frameworkSessionService = frameworkSessionService;
        }
        QuerySolutionService.prototype.getUserSessionId = function () {
            return this.frameworkSessionService.getUserSessionId();
        };
        QuerySolutionService.prototype.setFilterConditions = function (params) {
            var queryConditionHandler;
            var filterConditionList = [];
            params.forEach(function (qc) {
                if (!qc.value.isEmpty()) {
                    queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                    queryConditionHandler && filterConditionList.push.apply(filterConditionList, __spread(queryConditionHandler.convert(qc)));
                }
            });
            //设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
            this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
            // const originalConditions = this.getOriginalQueryConditions(filterConditionList);
            this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);
        };
        QuerySolutionService.prototype.setCurrentQueryConditions = function (conditions) {
            this.frameContext.uiState['currentQueryConditions'] = conditions;
        };
        QuerySolutionService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        QuerySolutionService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: bef.FrameworkSessionService }
            ];
        };
        return QuerySolutionService;
    }());

    /**
     * 结束表单编辑状态服务
     */
    var EndEditService = /** @class */ (function () {
        function EndEditService(frameContext) {
            this.frameContext = frameContext;
        }
        /**
         * 结束编辑
         */
        EndEditService.prototype.endEdit = function () {
            var appContext = this.frameContext && this.frameContext.getFormAppContext();
            return rxjs.of(null).pipe(operators.tap(function () {
                if (appContext) {
                    appContext.messagePipe.next({ type: 'endEdit' });
                }
            }), 
            // todo: 不应该使用delay，应该串流
            operators.delay(120));
        };
        EndEditService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EndEditService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return EndEditService;
    }());

    var RemoteSummaryService = /** @class */ (function () {
        function RemoteSummaryService(viewModel) {
            this.viewModel = viewModel;
        }
        /**
         * 服务器端合计
         * @param methodName 服务器端合计自定义动作名称
         * @param filters 过滤条件
         */
        RemoteSummaryService.prototype.summary = function (methodName, filters) {
            var repository = this.viewModel.frameContext.repository || null;
            if (repository) {
                var proxy = repository.proxy;
                if (proxy && typeof proxy[methodName] === 'function') {
                    return proxy[methodName](filters);
                }
            }
            return rxjs.of(null);
        };
        RemoteSummaryService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RemoteSummaryService.ctorParameters = function () {
            return [
                { type: devkit.ViewModel }
            ];
        };
        return RemoteSummaryService;
    }());

    // tslint:disable: max-line-length
    /**
     * 批量编辑服务
     */
    var BatchEditService = /** @class */ (function () {
        function BatchEditService(injector, componentManagerService, viewModel, repository, batchEditDialogService, dateService, languageService, formNotifyService, fileUploadService) {
            var _this = this;
            this.injector = injector;
            this.componentManagerService = componentManagerService;
            this.viewModel = viewModel;
            this.repository = repository;
            this.batchEditDialogService = batchEditDialogService;
            this.dateService = dateService;
            this.languageService = languageService;
            this.formNotifyService = formNotifyService;
            this.fileUploadService = fileUploadService;
            this.formLoadingService = this.injector.get(FormLoadingService, null);
            if (!this.languageService) {
                this.languageService = LanguageService.getInstance();
            }
            if (!this.formNotifyService) {
                this.formNotifyService = this.injector.get(FormNotifyService, null);
            }
            this.onHelpClose = new rxjs.Subject();
            this.onHelpClose.subscribe(function (result) {
                var _a = result || {}, _b = _a.frameId, frameId = _b === void 0 ? '' : _b, _c = _a.mapFields, mapFields = _c === void 0 ? '' : _c, _d = _a.data, data = _d === void 0 ? [] : _d;
                _this.onHelpCloseHandler(frameId, mapFields, data);
            });
        }
        Object.defineProperty(BatchEditService.prototype, "formErrorService", {
            get: function () {
                return this.injector && this.injector.get(FormErrorService, null);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 打开批量编辑对话框
         * @param frameId frameId
         */
        BatchEditService.prototype.openBatchEditDialog = function (frameId, enableDictPicking) {
            var _this = this;
            if (enableDictPicking === void 0) {
                enableDictPicking = false;
            }
            if (!frameId) {
                throw new Error('frameId is required.');
            }
            if (typeof enableDictPicking === 'string') {
                enableDictPicking = (enableDictPicking === 'true' ? true : false);
            }
            if (this.batchEditDialogService) {
                var columns = [];
                if (this.viewModel) {
                    var gridFrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);
                    var gridViewModel = gridFrameContext.viewModel;
                    if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {
                        // tslint:disable-next-line: no-string-literal
                        var gridColumnsAttrName = gridViewModel['dataGridColumnsName'];
                        columns = gridViewModel[gridColumnsAttrName];
                    }
                    else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {
                        columns = gridViewModel['dataGridColumns'];
                    }
                    var ids_1 = gridViewModel.uiState['ids'] || [];
                    if (!ids_1 || ids_1.length < 1) {
                        this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });
                        return rxjs.EMPTY;
                    }
                    var dialogRef_1 = this.batchEditDialogService.batchEdit(columns, {
                        rows: ids_1.length,
                        enableDictPicking: enableDictPicking,
                        onConfirm: function (inputs) {
                            if (Array.isArray(ids_1) && ids_1.length > 0) {
                                // console.log('openBatchEditDialog', inputs);
                                var appContext = _this.viewModel.frameContext.appContext;
                                appContext.changeDetectionController.detach();
                                inputs.forEach(function (input) {
                                    _this.updateBindingData(input, ids_1);
                                });
                                appContext.changeDetectionController.reattach();
                            }
                            dialogRef_1.close();
                        }
                    });
                }
            }
        };
        /**
         * 打开隐藏帮助
         * @param helpId 帮助id
         */
        BatchEditService.prototype.openHiddenHelp = function (helpId) {
            if (!helpId) {
                throw new Error('Argument error,helpId can`t be empty');
            }
            var componentManagerService = this.componentManagerService.getControl(helpId);
            if (componentManagerService) {
                componentManagerService.showDialog();
            }
            else {
                throw new Error("the component which id is " + helpId + " can't be found!");
            }
        };
        /**
         * 清空帮助勾选（只能挂载到帮助前事件）
         */
        BatchEditService.prototype.clearHelpSelections = function () {
            var self = this;
            var helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
            if (helpElement) {
                helpElement.displayValue = '';
            }
        };
        /**
         * 勾选当前行
         * @param frameId frameId
         * @param mapFields 字段映射
         * @param primaryKeyValue 帮助主键字段
         */
        BatchEditService.prototype.checkCurrentRow = function (frameId, mapFields, primaryKeyValue) {
            var self = this;
            var helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
            if (!primaryKeyValue) {
                primaryKeyValue = 'id';
            }
            var mappings = JSON.parse(mapFields);
            if (helpElement) {
                frameId = frameId || this.viewModel.frameContext.frameId;
                if (frameId) {
                    var frameContext = this.getFrameContextById(frameId);
                    if (frameContext) {
                        var bindingPath = frameContext.viewModel.bindingPath;
                        if (bindingPath) {
                            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                            var bindingList = frameContext.bindingData.getValue(bindingPaths);
                            var currentRow = bindingList.currentItem;
                            var path = mappings[primaryKeyValue];
                            if (path) {
                                var value = this.getValueByPath(currentRow, path);
                                helpElement.displayValue = value;
                            }
                        }
                    }
                }
            }
        };
        /**
         * 以帮助勾选数据作为依据，批量新增主表数据
         * @param frameId 主表所在frame的id
         * @param mapFields 帮助字段与主表字段映射
         * @description 以帮助勾选数据作为依据，批量新增主表数据
         */
        BatchEditService.prototype.batchAppend = function (frameId, mapFields) {
            var _this = this;
            var self = this;
            var result = self.context && self.context.eventParam || [];
            if (!mapFields) {
                throw new Error('mapFields can`t be empty.');
            }
            if (result && Array.isArray(result) && result.length > 0) {
                var mappings_1 = JSON.parse(mapFields);
                // 不是bindingPath则按frameId处理
                var bindingPath = '/';
                var appContext = this.injector.get(devkit.AppContext, null);
                if (appContext) {
                    var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                    if (frameContext) {
                        bindingPath = frameContext.viewModel.bindingPath || '/';
                    }
                    else {
                        throw new Error('frameId is invalid!');
                    }
                }
                var defaultValues_1 = [];
                result.forEach(function (item) {
                    var defaultValue = {};
                    Object.keys(mappings_1).forEach(function (prop) {
                        var value = _this.getValueByPath(item, prop);
                        var fields = mappings_1[prop];
                        var groups = fields.split(',').filter(function (p) { return p; });
                        groups.forEach(function (group) {
                            var paths = group.split('.').filter(function (p) { return p; });
                            _this.setValueByPath(defaultValue, paths.join('.'), value);
                        });
                    });
                    defaultValues_1.push(defaultValue);
                });
                this.formLoadingService.show();
                return this.repository.batchAppend(defaultValues_1).pipe(operators.tap(function () { return _this.formLoadingService.hide(); }), operators.map(function () { return true; }));
            }
            return rxjs.of(true);
        };
        /**
         * 以帮助勾选数据作为依据，批量新增从表/从从表
         * @param frameId 从表/从从表所在frame的id
         * @param mapFields 帮助字段与从表/从从表字段映射
         * @description 以帮助勾选数据作为依据，批量新增从表/从从表
         */
        BatchEditService.prototype.batchAppendByPathBasedOnHelpSelections = function (frameId, mapFields) {
            var _this = this;
            var self = this;
            var result = self.context && self.context.eventParam || [];
            if (!mapFields) {
                throw new Error('mapFields can`t be empty.');
            }
            if (result && Array.isArray(result) && result.length > 0) {
                var mappings_2 = JSON.parse(mapFields);
                // 不是bindingPath则按frameId处理
                var bindingPath = '/';
                var appContext = this.injector.get(devkit.AppContext, null);
                if (appContext) {
                    var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                    if (frameContext) {
                        bindingPath = frameContext.viewModel.bindingPath || '/';
                    }
                    else {
                        throw new Error('frameId is invalid!');
                    }
                }
                var defaultValues_2 = [];
                result.forEach(function (item) {
                    var defaultValue = {};
                    Object.keys(mappings_2).forEach(function (prop) {
                        var value = _this.getValueByPath(item, prop);
                        var fields = mappings_2[prop];
                        var groups = fields.split(',').filter(function (p) { return p; });
                        groups.forEach(function (group) {
                            var paths = group.split('.').filter(function (p) { return p; });
                            _this.setValueByPath(defaultValue, paths.join('.'), value);
                        });
                    });
                    defaultValues_2.push(defaultValue);
                });
                this.formLoadingService.show();
                var path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.batchAppendByPath(path, defaultValues_2).pipe(operators.tap(function () { return _this.formLoadingService.hide(); }), operators.map(function () { return true; }));
            }
            return rxjs.of(true);
        };
        /**
         * 批量新增带附件的从表或从从表数据
         * @param frameId
         * @param mapFields
         * @param attachmentInfoFieldPath 附件udt字段路径，可支持多个，以逗号分隔
         * @param rootId 附件存储根目录
         * @param path 附件存储目录
         * @description 批量新增带附件的从表或从从表数据与批量新增从表从从表数据一致，在批量新增数据的基础上增加了附件复制
         * @todo 目前附件复制在前端调用，会发起多个请求，且存在安全问题，后续应在vo集成
         */
        BatchEditService.prototype.batchAppendByPathWithAttachment = function (frameId, mapFields, attachmentInfoFieldPath, rootId, path) {
            var _this = this;
            var self = this;
            var result = self.context && self.context.eventParam || [];
            if (!mapFields) {
                throw new Error('mapFields can`t be empty.');
            }
            if (!attachmentInfoFieldPath) {
                throw new Error('附件udt字段路径不能为空');
            }
            if (result && Array.isArray(result) && result.length > 0) {
                var mappings_3 = JSON.parse(mapFields);
                var bindingPath_1 = '/';
                var appContext = this.injector.get(devkit.AppContext, null);
                // 修正bindingPath
                if (appContext) {
                    var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                    if (frameContext) {
                        bindingPath_1 = frameContext.viewModel.bindingPath || '/';
                    }
                    else {
                        throw new Error('frameId is invalid!');
                    }
                }
                // 处理附件udt字段
                var attachmentFields_1 = attachmentInfoFieldPath.split(',').filter(function (p) { return p; }).map(function (path) { return path.split('/').pop(); });
                this.formLoadingService.show();
                // 先复制附件
                var copyFiles$ = rxjs.from(result).pipe(operators.concatMap((function (item) {
                    return _this.copyRowFiles(item, attachmentFields_1, rootId, path).pipe(operators.catchError(function (error) {
                        _this.formLoadingService.hide();
                        var cafError = error.error;
                        if (typeof cafError === 'string') {
                            cafError = JSON.parse(cafError);
                        }
                        if (_this.formErrorService) {
                            _this.formErrorService.exception(cafError.message || _this.languageService.copyFailed, error);
                        }
                        return rxjs.throwError(error);
                    }));
                })));
                return copyFiles$.pipe(operators.takeLast(1)).pipe(operators.switchMap(function () {
                    // 拼装默认值
                    var defaultValues = _this.buildDefaultValues(result, mappings_3);
                    var path = _this.buildPath(bindingPath_1, _this.viewModel.bindingData.list.currentId);
                    return _this.repository.batchAppendByPath(path, defaultValues).pipe(operators.tap(function () { return _this.formLoadingService.hide(); }), operators.map(function () { return true; }));
                }));
            }
            return rxjs.of(true);
        };
        /**
         * 构造默认值数组
         * @param selectedValues
         * @param mapFields
         * @returns
         */
        BatchEditService.prototype.buildDefaultValues = function (selectedValues, mapFields) {
            var _this = this;
            var defaultValues = [];
            selectedValues.forEach(function (item) {
                var defaultValue = {};
                Object.keys(mapFields).forEach(function (prop) {
                    // 帮助数据
                    var value = _this.getValueByPath(item, prop);
                    // 目标字段
                    var fields = mapFields[prop];
                    var groups = fields.split(',').filter(function (p) { return p; });
                    groups.forEach(function (group) {
                        var paths = group.split('.').filter(function (p) { return p; });
                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            return defaultValues;
        };
        /**
         * 复制行中所有附件
         * @param row
         * @param attachmentFields
         * @param rootId
         * @param path
         * @returns
         */
        BatchEditService.prototype.copyRowFiles = function (row, attachmentFields, rootId, path) {
            var _this = this;
            return rxjs.from(attachmentFields).pipe(operators.concatMap(function (field) {
                var attachmentId = _this.getValueByPath(row, field + ".attachmentId");
                if (attachmentId) {
                    // 发送复制附件的请求，获取附件id
                    return _this.fileUploadService.copyFile(attachmentId, rootId, path).pipe(operators.tap(function (attachmentId) {
                        // 复制成功
                        _this.setValueByPath(row, [field, 'attachmentId'].join('.'), attachmentId);
                    }));
                }
                else {
                    return rxjs.of(null);
                }
            }));
        };
        /**
         * 行内帮助多选批量新增或替换子表数据
         * @param frameId frameId, optional,为空时使用命令执行时所在的上下文
         * @param mapFields 字段映射
         * @param primaryKey 帮助主键字段，默认为id
         * @returns
         */
        BatchEditService.prototype.batchAppendBasedOnRowHelpSelections = function (frameId, mapFields) {
            var _this = this;
            var self = this;
            var result = self.context && self.context.eventParam || [];
            if (!mapFields) {
                return rxjs.of(true);
            }
            var mappings = JSON.parse(mapFields);
            if (!mappings || !mappings.hasOwnProperty('id')) {
                return rxjs.of(true);
            }
            frameId = frameId || this.viewModel.frameContext.frameId;
            if (!frameId) {
                return rxjs.of(true);
            }
            var frameContext = this.getFrameContextById(frameId);
            if (!frameContext) {
                return rxjs.of(true);
            }
            setTimeout(function () {
                _this.endEdit(frameContext).subscribe(function () {
                    setTimeout(function () {
                        if (result && Array.isArray(result) && result.length > 0) {
                            var bindingPath_2 = frameContext.viewModel.bindingPath || '/';
                            var bindingPaths_1 = bindingPath_2.split('/').filter(function (p) { return p; });
                            var defaultValues_3 = [];
                            // 获取当前行
                            var bindingList_1 = frameContext.bindingData.getValue(bindingPaths_1);
                            var currentRow = bindingList_1.currentItem;
                            var currentRowId = bindingList_1.currentId;
                            var currentEntity = _this.getEntityByPath(frameContext, bindingPaths_1, currentRowId);
                            var headItem = result[0];
                            // 如果仅勾选一条，则应替换当前行的映射
                            if (result.length === 1) {
                                // this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                                var data_1 = headItem;
                                Object.keys(mappings).forEach(function (prop) {
                                    var value = _this.getValueByPath(data_1, prop);
                                    var fields = mappings[prop];
                                    var groups = fields.split(',').filter(function (p) { return p; });
                                    groups.forEach(function (group) {
                                        var paths = group.split('.').filter(function (p) { return p; });
                                        frameContext.bindingData.setValue(bindingPaths_1.concat(paths), value, true, true);
                                    });
                                });
                                return rxjs.of(true);
                            }
                            else {
                                var idMapField = mappings['id'];
                                var sourceItemId_1 = _this.getValueByPath(currentEntity, idMapField);
                                // 如果当前行没有映射或勾选结果中找不到当前行的映射
                                if (!sourceItemId_1 || result.findIndex(function (item) { return item[bindingList_1.primaryKey] === sourceItemId_1; }) === -1) {
                                    // 重新映射当前行
                                    _this.mappingRow(headItem, mappings, currentEntity, bindingPath_2);
                                    result = result.slice(1);
                                }
                                else if (sourceItemId_1) {
                                    var index = result.findIndex(function (item) { return item[bindingList_1.primaryKey] === sourceItemId_1; });
                                    // 重新映射当前行
                                    _this.mappingRow(result[index], mappings, currentEntity, bindingPath_2);
                                    result.splice(index, 1);
                                }
                                // 当前行处理完成
                                // 处理未映射的行
                                var emptyRows_1 = bindingList_1.toArray().filter(function (bindingObject) {
                                    var id = _this.getValueByPath(bindingObject, mappings[bindingList_1.primaryKey]);
                                    return !id;
                                });
                                if (emptyRows_1 && emptyRows_1.length > 0) {
                                    var rows = result;
                                    if (result.length > emptyRows_1.length) {
                                        rows = result.slice(0, emptyRows_1.length);
                                        result = result.slice(emptyRows_1.length);
                                    }
                                    else {
                                        result = [];
                                    }
                                    rows.forEach(function (item, index) {
                                        var targetItem = emptyRows_1[index];
                                        var entity = _this.getEntityByPath(frameContext, bindingPaths_1, targetItem.primaryKeyValue);
                                        _this.mappingRow(item, mappings, entity, bindingPath_2);
                                    });
                                }
                                // 处理剩余勾选
                                result.forEach(function (item) {
                                    var defaultValue = {};
                                    Object.keys(mappings).forEach(function (prop) {
                                        var value = _this.getValueByPath(item, prop);
                                        var fields = mappings[prop];
                                        var groups = fields.split(',').filter(function (p) { return p; });
                                        groups.forEach(function (group) {
                                            var paths = group.split('.').filter(function (p) { return p; });
                                            _this.setValueByPath(defaultValue, paths.join('.'), value);
                                        });
                                    });
                                    defaultValues_3.push(defaultValue);
                                });
                                if (defaultValues_3.length > 0) {
                                    _this.formLoadingService.show();
                                    var path = _this.buildPath(bindingPath_2, _this.viewModel.bindingData.list.currentId);
                                    _this.repository.batchAppendByPath(path, defaultValues_3).pipe(operators.tap(function () { return _this.formLoadingService.hide(); })).subscribe();
                                }
                            }
                        }
                    }, 350);
                });
            }, 50);
            return rxjs.of(true);
        };
        /**
         * 复制主表数据
         * @param id 要复制的数据id
         * @param fields 要复制的字段
         * @description 仅支持复制主表数据
         * @deprecated 该方法已被废弃，请使用clone方法替代。
         */
        BatchEditService.prototype.copy = function (id) {
            var _this = this;
            if (!id) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
                return rxjs.EMPTY;
            }
            var befRepository = this.repository;
            var baseUri = befRepository.restService.baseUri;
            var url = baseUri + "/service/copymainobjvoaction";
            var requestInfo = befRepository.restService.buildRequestInfo();
            var body = {
                requestInfo: requestInfo,
                dataID: id
            };
            var options = {
                body: body
            };
            this.formLoadingService.show();
            return befRepository.proxy.request(url, 'PUT', null, options).pipe(operators.tap(function () {
                _this.formLoadingService.hide();
            }), operators.map(function (responseInfo) {
                var returnValue = responseInfo.returnValue;
                var entity = _this.repository.buildEntity(returnValue);
                _this.repository.entityCollection.addEntity(entity);
                return entity;
            }));
        };
        /**
         * 复制数据（支持主表、从表、从从表）
         * @param id 要复制的行
         * @param path 请求路径
         * @returns
         */
        BatchEditService.prototype.clone = function (id, path) {
            var _this = this;
            if (!id) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!path) {
                this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!path.startsWith('/')) {
                path = '/' + path;
            }
            path = path.toLowerCase();
            var bindingPath = this.viewModel.bindingPath;
            var befRepository = this.repository;
            var baseUri = befRepository.restService.baseUri;
            var url = "" + baseUri + path;
            var requestInfo = befRepository.restService.buildRequestInfo();
            var ids = this.buildIds(bindingPath);
            ids.push(id);
            var body = {
                requestInfo: requestInfo,
                dataID: ids.join(',')
            };
            var options = {
                body: body
            };
            this.formLoadingService.show();
            return befRepository.proxy.request(url, 'PUT', null, options).pipe(operators.tap(function () {
                _this.formLoadingService.hide();
            }), operators.map(function (responseInfo) {
                var returnValue = responseInfo.returnValue;
                var entity = null;
                if (bindingPath.split('/').filter(function (p) { return p; }).length === 0) {
                    entity = _this.repository.buildEntity(returnValue);
                    _this.repository.entityCollection.addEntity(entity, true);
                }
                else {
                    var fpath = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                    entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);
                }
                return entity;
            }));
        };
        /**
         * 带附件的复制
         * @param id
         * @param url
         * @param attachmentInfoFieldPath
         * @param rootId
         * @param path
         * @returns
         */
        BatchEditService.prototype.cloneWithAttachment = function (id, url, attachmentInfoFieldPath, rootId, path) {
            var _this = this;
            if (!id) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!url) {
                this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
                return rxjs.EMPTY;
            }
            if (!attachmentInfoFieldPath) {
                throw new Error('附件udt字段路径不能为空');
            }
            if (!url.startsWith('/')) {
                url = '/' + url;
            }
            url = url.toLowerCase();
            var bindingPath = this.viewModel.bindingPath;
            var befRepository = this.repository;
            var baseUri = befRepository.restService.baseUri;
            var uri = "" + baseUri + url;
            var requestInfo = befRepository.restService.buildRequestInfo();
            var ids = this.buildIds(bindingPath);
            ids.push(id);
            var body = {
                requestInfo: requestInfo,
                dataID: ids.join(',')
            };
            var options = {
                body: body
            };
            this.formLoadingService.show();
            var attachmentFields = attachmentInfoFieldPath.split(',').filter(function (p) { return p; }).map(function (path) { return path.split('/').pop(); });
            return befRepository.proxy.request(uri, 'PUT', null, options).pipe(operators.switchMap(function (responseInfo) {
                var entityData = responseInfo.returnValue;
                var entity = null;
                if (bindingPath.split('/').filter(function (p) { return p; }).length === 0) {
                    entity = _this.repository.buildEntity(entityData);
                    _this.repository.entityCollection.addEntity(entity, true);
                }
                else {
                    var fpath = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                    entity = befRepository.entityManager.appendEntityByPath(fpath, entityData, entityData, true);
                }
                // 复制附件
                return _this.copyRowFiles(entity, attachmentFields, rootId, path).pipe(operators.switchMap(function () {
                    _this.formLoadingService.hide();
                    return _this.repository.updateAllChanges().pipe(operators.map(function () {
                        return entity;
                    }));
                }), operators.catchError(function (error) {
                    _this.formLoadingService.hide();
                    // 清空实体附件属性
                    _this.clearAttachmentInfo(entity, attachmentFields);
                    var cafError = error.error;
                    if (typeof cafError === 'string') {
                        cafError = JSON.parse(cafError);
                    }
                    if (_this.formErrorService) {
                        _this.formErrorService.exception(cafError.message || _this.languageService.copyFailed, error);
                    }
                    return rxjs.EMPTY;
                }));
            }));
        };
        BatchEditService.prototype.clearAttachmentInfo = function (entity, attachmentFields) {
            var _this = this;
            try {
                attachmentFields.forEach(function (attachmentField) {
                    _this.setValueByPath(entity, [attachmentField, 'attachmentId'].join('.'), null);
                    _this.setValueByPath(entity, [attachmentField, 'fileName'].join('.'), null);
                    _this.setValueByPath(entity, [attachmentField, 'fileCreateTime'].join('.'), null);
                    _this.setValueByPath(entity, [attachmentField, 'fileSize'].join('.'), null);
                });
            }
            catch (e) {
                console.log(e);
            }
        };
        //#region 旧的实现
        /**
         * 复制行
         * @param frameId frameId
         * @param ignoreFields 复制时忽略字段
         * @param repeat 重复复制次数，默认为1
         */
        BatchEditService.prototype.copyRow = function (frameId, ignoreFields, repeat) {
            var _this = this;
            if (repeat === void 0) {
                repeat = 1;
            }
            if (typeof repeat !== 'number') {
                repeat = parseInt(repeat, 10);
            }
            if (repeat < 1) {
                throw new Error('ArgumentError: repeat must >= 1');
            }
            // 获取当前行
            var frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            var primaryValue = frameContext.bindingData.list.currentId;
            var bindingPath = frameContext.viewModel.bindingPath || '/';
            var bindingData = null;
            var currentItem = null;
            if (bindingPath === '/') {
                // 主表直接取当前行
                currentItem = frameContext.bindingData.list.currentItem;
            }
            else {
                // 取从表/从从表当前行
                var paths = bindingPath.split('/').filter(function (p) { return p; });
                currentItem = frameContext.bindingData.getValue(paths).currentItem;
            }
            bindingData = currentItem.toJSON();
            if (!currentItem.primaryKeyValue) {
                if (this.formNotifyService) {
                    this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
                }
                return rxjs.EMPTY;
            }
            var ignoreFieldsArray = ignoreFields.split(',').filter(function (item) { return item; });
            var sources = new Array(repeat);
            return rxjs.from(sources).pipe(operators.concatMap(function () {
                var action$ = null;
                if (bindingPath !== '/') {
                    var fullPath = _this.buildPath(bindingPath, primaryValue);
                    action$ = _this.repository.appendByPath(fullPath);
                }
                else {
                    action$ = _this.repository.append();
                }
                return action$.pipe(operators.tap(function (entity) {
                    // 修正实体主键
                    bindingData[entity.primaryKey] = entity.primaryValue;
                    // 忽略指定字段
                    ignoreFieldsArray.forEach(function (field) {
                        var extractedFields = field.split('.').filter(function (item) { return item; });
                        if (extractedFields.length === 1) {
                            delete bindingData[field];
                        }
                        var parent = extractedFields.slice(0, -1).reduce(function (prev, current, index) {
                            return prev[current];
                        }, bindingData);
                        delete parent[extractedFields[extractedFields.length - 1]];
                    });
                    bindingData = Object.assign({}, entity.toJSON(), bindingData);
                    entity.load(bindingData, { loadChild: false });
                }), operators.catchError(function () {
                    return rxjs.EMPTY;
                }));
            }));
        };
        /**
         * 增量多选帮助批量赋值帮助后事件
         * @param frameId frameId
         * @param mapFields 字段映射
         * @param associatedField 关联字段
         */
        BatchEditService.prototype.afterIncrementalSelectHelpClose = function (frameId, mapFields, associatedField) {
            var _this = this;
            var self = this;
            var result = self.context && self.context.eventParam || [];
            // tslint:disable-next-line: max-line-length
            // const mapping = '{"id":"userRef.userRef", "name":"name", "sex":"sex","age":"userRef.userRef_Age","address":"userRef.userRef_Address","birthday":"userRef.userRef_Birthday","height":"userRef.userRef_Height","isMarried":"userRef.userRef_IsMarried"}';
            if (!associatedField) {
                throw new Error('associated field can`t be empty.');
            }
            if (!mapFields) {
                throw new Error('mapFields can`t be empty.');
            }
            var mappings = JSON.parse(mapFields);
            var foreignKey = associatedField;
            // 将选择人员保存到uistate中
            var rootFrameContext = this.viewModel.frameContext.root;
            // 不是bindingPath则按frameId处理
            var bindingPath = '/';
            var appContext = this.injector.get(devkit.AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            // tslint:disable-next-line: no-string-literal
            rootFrameContext.uiState['selections'] = result;
            if (result && Array.isArray(result)) {
                // 根据bindingPath获取bindingdata中现有数据
                var bindingPaths = bindingPath.split('/').filter(function (item) { return item; });
                var currentData_1 = this.viewModel.bindingData.getValue(bindingPaths);
                var currentDataArray_1 = currentData_1.toArray();
                // 找到result中有，但bindingData中没有的，为待新增项
                var appends = [];
                result.reduce(function (prev, item) {
                    var itemId = item && item[currentData_1.primaryKey] || null;
                    var isExist = currentDataArray_1.find(function (bindingObject) { return bindingObject[foreignKey][foreignKey] === itemId; });
                    if (!isExist) {
                        prev.push(item);
                    }
                    return prev;
                }, appends);
                // 找到bindingData中有，result中没有的，为待删除项
                var removes = [];
                currentDataArray_1.reduce(function (results, item) {
                    var index = result.findIndex(function (selectItem) { return selectItem[currentData_1.primaryKey] === item[foreignKey][foreignKey]; });
                    if (index === -1) {
                        results.push(item.primaryKeyValue);
                    }
                    return results;
                }, removes);
                // console.log('addItems', appends, 'removeItems', removes);
                // 调用后端接口新增数据
                var addAction$ = rxjs.from(appends).pipe(operators.concatMap(function (item) {
                    var path = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                    return _this.repository.appendByPath(path).pipe(operators.tap(function (entity) {
                        Object.keys(mappings).forEach(function (prop) {
                            var value = _this.getValueByPath(item, prop);
                            var fields = mappings[prop];
                            var groups = fields.split(',').filter(function (p) { return p; });
                            groups.forEach(function (group) {
                                var paths = group.split('.').filter(function (p) { return p; });
                                _this.setValueByPath(entity, paths.join('.'), value);
                            });
                        });
                    }), operators.catchError(function () {
                        return rxjs.EMPTY;
                    }));
                }));
                var removeAction$ = rxjs.from(removes).pipe(operators.concatMap(function (item) {
                    var path = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                    return _this.repository.removeByPath(path, item).pipe(operators.tap(function () {
                        var befRepository = _this.repository;
                        befRepository.entityManager.removeEntityByPath(path, item);
                    }), operators.catchError(function () {
                        return rxjs.EMPTY;
                    }));
                }));
                if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {
                    return rxjs.of(true);
                }
                return rxjs.concat(addAction$, removeAction$).pipe(operators.catchError(function () { return rxjs.EMPTY; }));
            }
            return rxjs.of(true);
        };
        // todo:模拟用户操作，待后端接口支持主表批量新增后重写
        /**
         * 多选帮助批量赋值帮助前事件
         */
        BatchEditService.prototype.beforeMultiSelectHelpOpen = function () {
            return this.clearHelpSelections();
        };
        /**
         * 多选帮助批量赋值帮助后事件
         * @param frameId 绑定路径
         * @param mapFields 字段映射
         * @param commandFrameId 回调命令所在frameId
         * @param commandName 回调命令
         * @deprecated 模拟用户操作，待批量赋值支持主表后废弃
         */
        BatchEditService.prototype.afterMultiSelectHelpClose = function (frameId, mapFields, commandFrameId, commandName) {
            var self = this;
            var result = self.context && self.context.eventParam || [];
            if (result && Array.isArray(result)) {
                // 调用后端接口新增数据
                if (!result || result.length < 1) {
                    return rxjs.of(true);
                }
                this.onHelpClose.next({ frameId: frameId, mapFields: mapFields, data: result, commandFrameId: commandFrameId, commandName: commandName });
                return rxjs.of(true);
            }
            return rxjs.of(true);
        };
        /**
          * 帮助关闭后处理器
          * @param frameId frameid
          * @param mapFields mapFields
          * @param result 帮助数据结果
          */
        BatchEditService.prototype.onHelpCloseHandler = function (frameId, mapFields, result) {
            var _this = this;
            if (!mapFields) {
                throw new Error('mapFields can`t be empty.');
            }
            var mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            var bindingPath = '/';
            var appContext = this.injector.get(devkit.AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            // 将选择人员保存到uistate中
            var rootFrameContext = this.viewModel.frameContext.root;
            var befRepository = this.repository;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            // tslint:disable-next-line: no-string-literal
            rootFrameContext.uiState['selections'] = result;
            if (result && Array.isArray(result)) {
                var addAction$ = rxjs.from(result).pipe(operators.concatMap(function (item) {
                    var requestInfo = befRepository.restService.buildRequestInfo();
                    if (bindingPaths.length > 0) {
                        var path_1 = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                        return befRepository.restService.createByPath(path_1, requestInfo).pipe(operators.tap(function (responseInfo) {
                            var data = responseInfo.returnValue;
                            var newEntity = befRepository.entityManager.appendEntityByPath(path_1, data, data);
                            Object.keys(mappings).forEach(function (prop) {
                                var value = _this.getValueByPath(item, prop);
                                var fields = mappings[prop];
                                var groups = fields.split(',').filter(function (p) { return p; });
                                groups.forEach(function (group) {
                                    var paths = group.split('.').filter(function (p) { return p; });
                                    _this.setValueByPath(newEntity, paths.join('.'), value);
                                });
                            });
                            return newEntity;
                        }));
                    }
                    else {
                        return befRepository.restService.create(null, requestInfo).pipe(operators.tap(function (responseInfo) {
                            var data = responseInfo.returnValue;
                            var newEntity = _this.repository.buildEntity(data);
                            Object.keys(mappings).forEach(function (prop) {
                                var value = _this.getValueByPath(item, prop);
                                var fields = mappings[prop];
                                var groups = fields.split(',').filter(function (p) { return p; });
                                groups.forEach(function (group) {
                                    var paths = group.split('.').filter(function (p) { return p; });
                                    _this.setValueByPath(newEntity, paths.join('.'), value);
                                });
                            });
                            _this.repository.entityCollection.addEntity(newEntity);
                            return newEntity;
                        }));
                    }
                }));
                // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);
                if (this.formLoadingService) {
                    this.suspendFrameContextEvent(frameId);
                    this.formLoadingService.show();
                    this.formLoadingService.setSuspend(true);
                }
                return addAction$.pipe(operators.last()).pipe(operators.switchMap(function () {
                    var primaryValue = _this.viewModel.bindingData.list.currentId;
                    if (primaryValue) {
                        return befRepository.updateChangesById(primaryValue);
                    }
                    else {
                        return rxjs.of(null);
                    }
                })).subscribe(function () {
                    if (_this.formLoadingService) {
                        _this.resumeFrameContextEvent(frameId);
                        _this.formLoadingService.setSuspend(false);
                        _this.formLoadingService.hide();
                    }
                }, function () {
                    if (_this.formLoadingService) {
                        _this.resumeFrameContextEvent(frameId);
                        _this.formLoadingService.setSuspend(false);
                        _this.formLoadingService.hide();
                    }
                });
            }
            return rxjs.of(null);
        };
        BatchEditService.prototype.suspendFrameContextEvent = function (frameId) {
            var appContext = this.injector.get(devkit.AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                frameContext.suspend = true;
            }
        };
        BatchEditService.prototype.resumeFrameContextEvent = function (frameId) {
            var appContext = this.injector.get(devkit.AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                frameContext.suspend = false;
                frameContext.appContext.messagePipe.next('bindData');
            }
        };
        //#endregion
        BatchEditService.prototype.setValueByPath = function (target, path, value) {
            if (target) {
                var paths = path.split('.');
                if (paths.length <= 1) {
                    target[path] = value;
                }
                else {
                    paths.slice(0, -1).reduce(function (prev, path) {
                        if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                            prev[path] = {};
                        }
                        return prev[path];
                    }, target)[paths[paths.length - 1]] = value;
                }
            }
        };
        BatchEditService.prototype.getValueByPath = function (target, path) {
            var paths = path.split('.');
            if (paths.length < 1) {
                return;
            }
            if (paths.length === 1) {
                return target[path];
            }
            var result = null;
            paths.forEach(function (prop, index) {
                if (index === 0) {
                    result = target && target[prop] || null;
                }
                else {
                    result = result && result[prop] || null;
                }
            });
            return result;
        };
        /**
         * 构造子表路径
         * @param bindingPath 绑定路径
         * @param id id
         */
        BatchEditService.prototype.buildPath = function (bindingPath, id) {
            var path = '/' + id;
            var subPaths = bindingPath.split('/');
            if (subPaths.length > 0) {
                // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
                // 因此index从1开始
                for (var index = 1; index < subPaths.length - 1; index++) {
                    var subPath = subPaths[index];
                    var subData = this.viewModel.bindingData[subPath];
                    if (!subData || !subData.currentId) {
                        throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                    }
                    path += "/" + subPath + "/" + subData.currentId;
                }
            }
            path += '/' + subPaths[subPaths.length - 1];
            return path;
        };
        /**
         * 获取绑定路径的当前行数组
         * @param bindingPath bindingPath
         * @returns
         */
        BatchEditService.prototype.buildIds = function (bindingPath) {
            var _this = this;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            var primaryValue = this.viewModel.bindingData.list.currentId;
            var result = [];
            var paths = [];
            if (bindingPaths.length > 0) {
                result.push(primaryValue);
                // 从表或从从表要复制的行不一定是当前行，用户可以指定
                bindingPaths.pop();
                bindingPaths.forEach(function (path) {
                    paths.push(path);
                    var bindingList = _this.viewModel.bindingData.getValue(paths);
                    if (bindingList) {
                        result.push(bindingList.currentId);
                    }
                });
            }
            return result;
        };
        BatchEditService.prototype.updateBindingData = function (input, ids) {
            var _a = input || {}, _b = _a.controlType, controlType = _b === void 0 ? null : _b, _c = _a.value, value = _c === void 0 ? null : _c, _d = _a.options, options = _d === void 0 ? {} : _d, _e = _a.dataType;
            if (controlType) {
                // 对帮助做特殊处理
                if (controlType === 'lookup' || controlType === 'combo-lookup') {
                    var mapFields = options.mapFields;
                    this.updateLookupField(ids, value, mapFields);
                }
                else {
                    this.updateSimpleField(ids, value, input);
                }
            }
        };
        BatchEditService.prototype.updateSimpleField = function (ids, value, column) {
            var _this = this;
            if (!column) {
                return;
            }
            var currentColumnType = column.dataType;
            // 存在行编辑器
            var result = value;
            if (currentColumnType === 'date') {
                var dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');
                if (!dateStr) {
                    dateStr = '0001-01-01T00:00:00';
                }
                result = dateStr;
            }
            else if (currentColumnType === 'number') {
                result = Number(value) || 0;
            }
            var field = column.field;
            ids.forEach(function (id) {
                _this.updateBindingList(id, field, result);
            });
        };
        BatchEditService.prototype.updateLookupField = function (ids, helpData, mapFields) {
            var _this = this;
            if (!mapFields) {
                return;
            }
            var helpFields = Object.keys(mapFields);
            var idIndex = helpFields.findIndex(function (item) { return item === 'id'; });
            if (helpFields.includes('id') && idIndex !== 0) {
                helpFields.splice(idIndex, 1);
                helpFields = __spread(['id'], helpFields);
            }
            if (!helpData) {
                helpFields.reverse();
            }
            helpFields.forEach(function (helpField) {
                var helpValue = '';
                if (helpData) {
                    if (helpData instanceof Array) {
                        helpValue = helpData.map(function (item) {
                            return _this.getValue(helpField, item);
                        }).join(',');
                    }
                    else {
                        helpValue = _this.getValue(helpField, helpData);
                    }
                }
                ids.forEach(function (id) {
                    _this.updateBindingList(id, mapFields[helpField], helpValue);
                });
            });
        };
        BatchEditService.prototype.updateBindingList = function (primaryValue, propertyName, value) {
            var viewModel = this.viewModel || null;
            if (!viewModel || !propertyName) {
                return;
            }
            // 更新主表部分行的字段
            var propertyNames = propertyName.split('.').filter(function (item) { return item; });
            var bindingObject = this.bindingList.findById(primaryValue);
            if (propertyNames.length < 2) {
                bindingObject.setValue(propertyName, value, true, true);
            }
            else {
                var targetBindingObject_1 = null;
                var fpaths = propertyNames.slice(0, propertyNames.length - 1);
                var targetPropertyName = propertyNames[propertyNames.length - 1];
                fpaths.forEach(function (prop) {
                    targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
                });
                // todo:需要添加值变化事件
                targetBindingObject_1.setValue(targetPropertyName, value, true, true);
            }
        };
        BatchEditService.prototype.getBindingPathArray = function () {
            var path = this.viewModel.bindingPath;
            if (path) {
                return path.split('/').filter(function (n) { return n !== ''; });
            }
            return [];
        };
        BatchEditService.prototype.getValue = function (f, data) {
            var val = '';
            if (f.indexOf('.') === -1) {
                val = data[f];
            }
            else {
                val = f.split('.').reduce(function (a, b) {
                    return a[b];
                }, data);
            }
            return val;
        };
        Object.defineProperty(BatchEditService.prototype, "bindingList", {
            get: function () {
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.viewModel.bindingData.list;
                }
                // 子实体
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                var paths = bindingPath.split('/');
                var filteredPaths = paths.filter(function (part) {
                    return part !== '';
                });
                return this.viewModel.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 根据映射将数据赋值给bindingData
         * @param data
         * @param mapFields
         * @param bindingData
         */
        BatchEditService.prototype.mappingRow = function (data, mapFields, entity, bindingPath) {
            var _this = this;
            Object.keys(mapFields).forEach(function (prop) {
                var value = _this.getValueByPath(data, prop);
                var fields = mapFields[prop];
                var groups = fields.split(',').filter(function (p) { return p; });
                groups.forEach(function (group) {
                    var paths = group.split('.').filter(function (p) { return p; });
                    _this.setValueByPath(entity, paths.join('.'), value);
                });
            });
        };
        /**
         * 通过frameId获取对应的组件上下文
         * @param frameId frameId
         * @returns
         */
        BatchEditService.prototype.getFrameContextById = function (frameId) {
            if (!frameId) {
                return null;
            }
            var appContext = this.injector.get(devkit.AppContext, null);
            var frameContext = null;
            if (appContext) {
                frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            }
            return frameContext;
        };
        BatchEditService.prototype.getEntityByPath = function (frameContext, bindingPaths, currentId) {
            bindingPaths = __spread(bindingPaths);
            var id = frameContext.bindingData.list.currentId;
            var entity = frameContext.repository.entityCollection.getEntityById(id);
            var item = entity;
            var paths = [];
            var tailPath = bindingPaths.pop();
            var parent = bindingPaths.reduce(function (object, path) {
                paths.push(path);
                if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {
                    var value = object[path];
                    if (value && value instanceof devkit.EntityList) {
                        var bindingList = frameContext.bindingData.getValue(paths);
                        var currentItemId = bindingList.currentId;
                        return value.get(currentItemId);
                    }
                    else {
                        return value;
                    }
                }
                else {
                    return null;
                }
            }, item);
            if (parent instanceof devkit.Entity) {
                var list = parent[tailPath];
                if (list) {
                    return list.get(currentId);
                }
                else {
                    throw new Error("\u65E0\u6548\u7684bindingPath.");
                }
            }
            else {
                throw new Error("\u65E0\u6548\u7684bindingPath.");
            }
        };
        BatchEditService.prototype.endEdit = function (frameContext) {
            var appContext = frameContext && frameContext.getFormAppContext();
            return rxjs.of(null).pipe(operators.tap(function () {
                if (appContext) {
                    appContext.messagePipe.next({ type: 'endEdit' });
                }
            }), 
            // todo: 不应该使用delay，应该串流
            operators.delay(5));
        };
        BatchEditService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BatchEditService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: ComponentManagerService },
                { type: devkit.ViewModel },
                { type: devkit.Repository },
                { type: uiBatchEditDialog.BatchEditDialogService },
                { type: date.DateTimeHelperService },
                { type: LanguageService },
                { type: FormNotifyService },
                { type: formdocUpload.UploadService }
            ];
        };
        return BatchEditService;
    }());

    // tslint:disable: max-line-length
    var DiscussionGroupService = /** @class */ (function () {
        function DiscussionGroupService(injector, frameContext, loadingService, runtimeFrameworkService) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.loadingService = loadingService;
            this.runtimeFrameworkService = runtimeFrameworkService;
        }
        Object.defineProperty(DiscussionGroupService.prototype, "repository", {
            /**
             * 实体仓库
             */
            get: function () {
                return this.frameContext.repository;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscussionGroupService.prototype, "params", {
            /**
             * 命令参数
             */
            get: function () {
                return this['context'] && this['context']['eventParam'] || {};
            },
            enumerable: true,
            configurable: true
        });
        DiscussionGroupService.prototype.addComment = function (id, summary, configId, text, visibility, parentId) {
            var _this = this;
            id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
            if (!id) {
                return rxjs.EMPTY;
            }
            var params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);
            var restService = this.repository.restService;
            var url = rtf.BasePathService.convertPath('/api/runtime/comment/v1.0/bill-comment/comment');
            var requestInfo = restService.buildRequestInfo();
            var options = {
                body: __assign({ requestInfo: requestInfo }, params)
            };
            this.loadingService.show();
            return restService.invoke(url, 'POST', null, options).pipe(operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 查询评论
         * @param id id
         */
        DiscussionGroupService.prototype.queryComments = function (id, configId, pageIndex, pageSize) {
            var _this = this;
            id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
            if (!id) {
                return rxjs.EMPTY;
            }
            var restService = this.repository.restService;
            var url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);
            this.loadingService.show();
            return restService.invoke(url, 'GET').pipe(operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 查询所有部门信息
         */
        DiscussionGroupService.prototype.queryAllOrgs = function () {
            var _this = this;
            var restService = this.repository.restService;
            var url = rtf.BasePathService.convertPath('/api/runtime/sys/v1.0/sysOrgs?param={"layer":"1"}');
            this.loadingService.show();
            return restService.invoke(url, 'GET').pipe(operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 查询常用@用户
         * @param pageIndex
         * @param pageSize
         */
        DiscussionGroupService.prototype.queryFrequentAtUsers = function (pageIndex, pageSize) {
            var _this = this;
            var restService = this.repository.restService;
            var url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);
            this.loadingService.show();
            return restService.invoke(url, 'GET').pipe(operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 获取at用户列表
         * @param user 用户编号或者用户名称（过滤使用）
         * @param pageIndex pageIndex
         * @param pageSize pageSize
         */
        DiscussionGroupService.prototype.queryAtUsers = function (user, pageIndex, pageSize) {
            var _this = this;
            var restService = this.repository.restService;
            var url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);
            this.loadingService.show();
            return restService.invoke(url, 'GET').pipe(operators.tap(function () {
                _this.loadingService.hide();
            }));
        };
        /**
         * 构造获取评论列表的url
         * @param id id
         */
        DiscussionGroupService.prototype.buildQueryCommentsUrl = function (id, pageIndex, pageSize, configId) {
            if (typeof pageIndex === 'undefined' || pageIndex === null) {
                pageIndex = this.params.pageIndex || 0;
            }
            if (typeof pageSize === 'undefined' || pageSize === null) {
                pageSize = this.params.pageSize || 10;
            }
            var serverUri = this.repository.serverUri;
            // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';
            return rtf.BasePathService.convertPath("/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=" + configId + "&billId=" + id + "&pageSize=" + pageSize + "&pageIndex=" + pageIndex);
        };
        /**
         * 构造获取@用户url
         */
        DiscussionGroupService.prototype.buildQueryAtUsersUrl = function (user, pageIndex, pageSize) {
            var params = [];
            if (typeof pageIndex === 'undefined' || pageIndex === null) {
                pageIndex = this.params.pageIndex || 0;
            }
            if (typeof pageSize === 'undefined' || pageSize === null) {
                pageSize = this.params.pageSize || 1000;
            }
            if (user) {
                params.push("param=" + user);
            }
            params.push("pageSize=" + pageSize);
            params.push("pageIndex=" + pageIndex);
            return rtf.BasePathService.convertPath("/api/runtime/comment/v1.0/bill-comment/atUser?" + params.join('&'));
        };
        DiscussionGroupService.prototype.buildQueryFrequentAtUsersUrl = function (pageIndex, pageSize) {
            var params = [];
            if (typeof pageIndex === 'undefined' || pageIndex === null) {
                pageIndex = this.params.pageIndex || 0;
            }
            if (typeof pageSize === 'undefined' || pageSize === null) {
                pageSize = this.params.pageSize || 6;
            }
            params.push("pageSize=" + pageSize);
            params.push("pageIndex=" + pageIndex);
            return rtf.BasePathService.convertPath("/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?" + params.join('&'));
        };
        DiscussionGroupService.prototype.buildAddCommentParam = function (id, text, parentId, summary, visibility, configId) {
            if (typeof text === 'undefined') {
                text = this.params.text;
            }
            if (typeof parentId === 'undefined') {
                parentId = this.params.parentId;
            }
            if (typeof visibility === 'undefined') {
                visibility = this.params.visibility;
            }
            return {
                'bill': {
                    'billId': id,
                    'configId': configId,
                    'summary': summary
                },
                'comment': {
                    'billId': id,
                    'configId': configId,
                    'parentId': parentId || null,
                    'text': text,
                    'visibility': visibility
                }
            };
        };
        DiscussionGroupService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DiscussionGroupService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: FormLoadingService },
                { type: RuntimeFrameworkService }
            ];
        };
        return DiscussionGroupService;
    }());

    var ListFilterConditionsService = /** @class */ (function () {
        function ListFilterConditionsService(frameContext) {
            this.frameContext = frameContext;
        }
        ListFilterConditionsService.prototype.setCurrentFilterConditions = function (conditions) {
            this.frameContext.uiState['currentFilterConditions'] = conditions;
        };
        ListFilterConditionsService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ListFilterConditionsService.ctorParameters = function () {
            return [
                { type: devkit.FrameContext }
            ];
        };
        return ListFilterConditionsService;
    }());

    var FormManifestService = /** @class */ (function () {
        function FormManifestService(injector, modulePath, httpClient) {
            this.injector = injector;
            this.modulePath = modulePath;
            this.httpClient = httpClient;
        }
        FormManifestService.prototype.load = function () {
            if (this.modulePath.endsWith('\/')) {
                this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
            }
            var formManifestPath = rtf.BasePathService.convertPath(this.modulePath + "/expressions/form.manifest.json?version=" + new Date().valueOf().toString());
            var request$ = FormManifestService.mainfests.get(this.modulePath);
            if (request$) {
                return request$;
            }
            else {
                var req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(operators.share());
                FormManifestService.mainfests.set(this.modulePath, req$);
                return req$;
            }
        };
        FormManifestService.mainfests = new Map();
        FormManifestService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormManifestService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.FORM_PATH_TOKEN,] }] },
                { type: http.HttpClient }
            ];
        };
        return FormManifestService;
    }());

    var FormExpressionManifestService = /** @class */ (function () {
        function FormExpressionManifestService(injector, frameContext, httpClient, modulePath, formManifestService) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.httpClient = httpClient;
            this.modulePath = modulePath;
            this.formManifestService = formManifestService;
        }
        FormExpressionManifestService.prototype.load = function () {
            var _this = this;
            if (this.modulePath.endsWith('\/')) {
                this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
            }
            return this.formManifestService.load().pipe(operators.switchMap(function (formManifest) {
                var expressions = formManifest.expressions;
                var expressionManifest = expressions.find(function (expressionManifest) { return expressionManifest.ns === _this.frameContext.namespace; });
                if (expressionManifest) {
                    var expressionPath = rtf.BasePathService.convertPath(_this.modulePath + "/expressions/" + expressionManifest.path + "?version=" + new Date().valueOf().toString());
                    var key = rtf.BasePathService.convertPath(_this.modulePath + "/expressions/" + expressionManifest.path);
                    var request$ = FormExpressionManifestService.mainfests.get(key);
                    if (request$) {
                        return request$;
                    }
                    else {
                        var req$ = _this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(operators.share());
                        FormExpressionManifestService.mainfests.set(key, req$);
                        return req$;
                    }
                }
                else {
                    return rxjs.of({});
                }
            }));
        };
        FormExpressionManifestService.mainfests = new Map();
        FormExpressionManifestService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormExpressionManifestService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: http.HttpClient },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.FORM_PATH_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.FORM_MANIFEST_SERVICE_TOKEN,] }] }
            ];
        };
        return FormExpressionManifestService;
    }());

    var LocalizationService = /** @class */ (function () {
        function LocalizationService(injector, userSettings) {
            this.injector = injector;
            this.userSettings = userSettings;
        }
        Object.defineProperty(LocalizationService.prototype, "formats", {
            /**
             * 用户配置格式
             */
            get: function () {
                var _a = this.userSettings || {}, _b = _a.dateFormat, dateFormat = _b === void 0 ? null : _b, _c = _a.timeFormat, timeFormat = _c === void 0 ? null : _c;
                var dateTimeFormat = null;
                if (dateFormat && timeFormat) {
                    dateTimeFormat = dateFormat + " " + timeFormat;
                }
                var date$$1 = {
                    dateFormat: dateFormat,
                    timeFormat: timeFormat,
                    dateTimeFormat: dateTimeFormat
                };
                var _d = this.numberFormat || {}, _e = _d.negativeSign, negativeSign = _e === void 0 ? null : _e, _f = _d.numberDecimalDigits, numberDecimalDigits = _f === void 0 ? null : _f, _g = _d.numberDecimalSeparator, numberDecimalSeparator = _g === void 0 ? null : _g, _h = _d.numberGroupSeparator, numberGroupSeparator = _h === void 0 ? null : _h;
                var number = {
                    negativeSign: negativeSign,
                    numberDecimalDigits: numberDecimalDigits,
                    numberDecimalSeparator: numberDecimalSeparator,
                    numberGroupSeparator: numberGroupSeparator
                };
                return { date: date$$1, number: number };
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 根据数据类型本地化数据
         * @param value value
         * @param dataType 数据类型
         * @returns string
         */
        LocalizationService.prototype.localize = function (value, dataType) {
            if (dataType && value) {
                dataType = dataType.toLowerCase();
                if (dataType === 'date') {
                    return this.transformDate(value);
                }
                else if (dataType === 'datetime') {
                    return this.transformDateTime(value);
                }
                else if (dataType === 'number') {
                    return this.transformNumber(value);
                }
                else {
                    return value;
                }
            }
            else {
                return value;
            }
        };
        /**
         * 根据国际化类型获取格式化字符串
         * @param localizationType 国际化类型
         * @returns
         */
        LocalizationService.prototype.getFormat = function (localizationType) {
            if (localizationType) {
                localizationType = localizationType.toLowerCase();
            }
            if (localizationType === 'date') {
                return this.formats.date.dateFormat;
            }
            else if (localizationType === 'datetime') {
                return this.formats.date.dateTimeFormat;
            }
            else {
                return '';
            }
        };
        /**
         * 转换日期
         * @param value value
         */
        LocalizationService.prototype.transformDate = function (value) {
            var dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
            if (!dateFormat || !value) {
                return value;
            }
            var date$$1 = moment(value);
            var isValid = date$$1.isValid();
            if (!isValid) {
                return value;
            }
            dateFormat = this.parseDateFormat(dateFormat);
            return date$$1.format(dateFormat);
        };
        /**
         * 转换日期时间
         * @param value value
         * todo: 目前无法定义日期时间格式
         */
        LocalizationService.prototype.transformDateTime = function (value) {
            var dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
            var timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';
            if (!dateFormat || !timeFormat) {
                return value;
            }
            var dateTime = moment(value);
            var isValid = dateTime.isValid();
            if (!isValid) {
                return value;
            }
            if (dateFormat) {
                dateFormat = this.parseDateFormat(dateFormat);
            }
            if (timeFormat) {
                timeFormat = this.parseTimeFormat(timeFormat);
            }
            var dateTimeFormat = dateFormat + ' ' + timeFormat;
            return dateTime.format(dateTimeFormat);
        };
        /**
         * 转换数字
         * @param value value
         */
        LocalizationService.prototype.transformNumber = function (value) {
            if (value === null || value === undefined || value === '') {
                return '';
            }
            var bigNumber = new bignumber_js.BigNumber(value);
            // 如果不是数字，不做任何处理
            if (!bignumber_js.BigNumber.isBigNumber(bigNumber)) {
                return value;
            }
            var isNegative = bigNumber.isNegative();
            var format = this.buildNumberFormat();
            var _a = this.numberFormat || {}, _b = _a.negativeSign, negativeSign = _b === void 0 ? null : _b, _c = _a.numberDecimalDigits, numberDecimalDigits = _c === void 0 ? null : _c;
            if (isNegative) {
                if (negativeSign !== null) {
                    format.prefix = negativeSign;
                    return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);
                }
            }
            return bigNumber.toFormat(numberDecimalDigits, null, format);
        };
        /**
         * 转换日期格式规则为moment的format规则
         * @param format format
         */
        LocalizationService.prototype.parseDateFormat = function (format) {
            return format.replace(/y/g, 'Y').replace(/d/g, 'D');
        };
        /**
         * 转换时间格式规则为moment的format规则
         * @param format format
         */
        LocalizationService.prototype.parseTimeFormat = function (format) {
            return format.replace(/M/g, 'm');
        };
        /**
         * 构造bignumber数字格式化选项
         */
        LocalizationService.prototype.buildNumberFormat = function () {
            if (this.numberFormat) {
                var _a = this.numberFormat, _b = _a.numberDecimalSeparator, numberDecimalSeparator = _b === void 0 ? null : _b, _c = _a.numberGroupSeparator, numberGroupSeparator = _c === void 0 ? null : _c;
                var format = {
                    groupSize: 3,
                };
                if (numberDecimalSeparator !== null) {
                    format.decimalSeparator = numberDecimalSeparator;
                }
                if (numberGroupSeparator !== null) {
                    format.groupSeparator = numberGroupSeparator;
                }
                return format;
            }
        };
        Object.defineProperty(LocalizationService.prototype, "numberFormat", {
            get: function () {
                return this.userSettings && this.userSettings.numberFormat || null;
            },
            enumerable: true,
            configurable: true
        });
        LocalizationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LocalizationService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.UserSettingsToken,] }] }
            ];
        };
        return LocalizationService;
    }());

    var FormAttentionService = /** @class */ (function () {
        function FormAttentionService(injector, frameContext, attentionService) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.attentionService = attentionService;
        }
        /**
         * 闪烁按钮
         * @param ids id字符串或数组
         * @param duration 时间间隔
         * @returns
         */
        FormAttentionService.prototype.blink = function (ids, duration) {
            if (typeof ids === 'string') {
                ids = ids.split(',').filter(function (p) { return p; });
            }
            if (!Array.isArray(ids) || ids.length < 1) {
                return rxjs.EMPTY;
            }
            if (typeof duration === 'string') {
                duration = duration.trim();
            }
            if (!duration) {
                duration = 600;
            }
            duration = parseInt(duration);
            if (isNaN(duration) || duration <= 0) {
                duration = 600;
            }
            var elements = ids.map(function (item) {
                return {
                    idOrEl: item,
                };
            });
            this.attentionService.catchAttention(elements, duration);
        };
        FormAttentionService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormAttentionService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: uiTooltip.AttentionService }
            ];
        };
        return FormAttentionService;
    }());

    var FeatureRepository = /** @class */ (function () {
        function FeatureRepository(injector, repository) {
            this.injector = injector;
            this.repository = repository;
        }
        /**
         * 根据物料id获取物料特征项及特征值（公共默认值）
         * @param materialId 物料id
         */
        FeatureRepository.prototype.getFeaturesByMaterialId = function (materialId) {
            var url = rtf.BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops');
            var body = {
                materialID: materialId
            };
            var options = {
                body: body
            };
            var befRepository = this.repository;
            return befRepository.proxy.request(url, 'put', null, options);
        };
        /**
         * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
         * @param materialId 物料Id
         * @param configID 对应该物料的特征项hash
         * @returns
         */
        FeatureRepository.prototype.getConfigedValueByFeatureId = function (materialId, configID, configType) {
            if (configType === void 0) {
                configType = 'Materials';
            }
            var url = rtf.BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo');
            var body = { objType: configType, objID: materialId, configID: configID };
            var befRepository = this.repository;
            var options = {
                body: body
            };
            return befRepository.proxy.request(url, 'put', null, options);
        };
        /**
         * 保存物料特征项
         * @param materialId 物料id
         * @param charactValue 特征值
         * @param configType 配置类型
         * @returns
         */
        FeatureRepository.prototype.applyFeatures = function (materialId, charactValue, configType) {
            if (configType === void 0) {
                configType = 'Materials';
            }
            var body = { objType: configType, objID: materialId, charactValue: charactValue };
            var befRepository = this.repository;
            var options = {
                body: body
            };
            return befRepository.proxy.request(rtf.BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid'), 'put', null, options);
        };
        /**
         * 获取帮助信息
         * @param helpid 帮助id
         * @param filter 过滤条件
         * @param params 参数
         * @returns
         */
        FeatureRepository.prototype.getHelpInfo = function (helpid, filter, params) {
            var url = rtf.BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
            var httpParams = {};
            if (params) {
                if (params.pageIndex) {
                    httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
                }
                if (params.pageSize) {
                    httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
                }
                if (params.condition) {
                    httpParams['condition'] = JSON.stringify(params.condition);
                }
                if (params.searchValue) {
                    httpParams['search'] = params.searchValue;
                }
            }
            var body = {
                helpID: helpid,
                queryParam: JSON.stringify(httpParams),
                filterStr: filter
            };
            var befRepository = this.repository;
            var options = {
                body: body
            };
            return befRepository.proxy.request(url, 'put', null, options);
        };
        FeatureRepository.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FeatureRepository.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.Repository }
            ];
        };
        return FeatureRepository;
    }());

    var Prop;
    (function (Prop) {
        var InputType;
        (function (InputType) {
            InputType["enum"] = "Enum";
            InputType["string"] = "String";
            InputType["help"] = "Help";
            InputType["number"] = "Number";
            InputType["date"] = "Date";
        })(InputType = Prop.InputType || (Prop.InputType = {}));
    })(Prop || (Prop = {}));

    var FeatureDataService = /** @class */ (function () {
        function FeatureDataService(injector, repository, localeId) {
            this.injector = injector;
            this.repository = repository;
            this.localeId = localeId;
            this.localeId = this.localeId || 'zh-CHS';
        }
        /**
         * 根据物料id获取物料特征项及特征值（公共默认值）
         * @param materialId 物料id
         */
        FeatureDataService.prototype.getFeaturesByMaterialId = function (materialId) {
            var _this = this;
            return this.repository.getFeaturesByMaterialId(materialId).pipe(operators.map(function (response) {
                if (!response || !response.returnValue) {
                    return null;
                }
                var returnValue = JSON.parse(response.returnValue);
                var result = { propset: [], props: [] };
                var propsets = returnValue.propset || null;
                var props = returnValue.props || null;
                if (propsets && Array.isArray(propsets)) {
                    propsets.map(function (propset) {
                        propset.name = _this.translateName(propset);
                        return propset;
                    });
                    result.propset = propsets;
                }
                if (props && Array.isArray(props) && props.length > 0) {
                    props.map(function (prop) {
                        // 处理多语
                        prop.name = _this.translateName(prop);
                        // 处理枚举
                        if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {
                            prop.data = JSON.parse(prop.enuminfo);
                        }
                        // 处理必填和只读
                        prop.isreadonly = prop.isreadonly === '1' ? true : false;
                        prop.isrequired = prop.isrequired === '1' ? true : false;
                        return prop;
                    });
                    result.props = props;
                }
                return result;
            }));
        };
        /**
         * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
         * @param materialId 物料Id
         * @param configID 对应该物料的特征项hash
         * @returns
         */
        FeatureDataService.prototype.getConfigedValueByFeatureId = function (materialId, configID, configType) {
            if (configType === void 0) {
                configType = 'Materials';
            }
            return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(operators.map(function (result) {
                return JSON.parse(result);
            }));
        };
        /**
         * 保存物料特征项
         * @param materialId 物料id
         * @param charactValue 特征值
         * @param configType 配置类型
         * @returns
         */
        FeatureDataService.prototype.applyFeatures = function (materialId, charactValue, configType) {
            if (configType === void 0) {
                configType = 'Materials';
            }
            return this.repository.applyFeatures(materialId, charactValue, configType).pipe(operators.map(function (config) {
                return JSON.parse(config);
            }));
        };
        /**
         * 获取帮助信息
         * @param helpid 帮助id
         * @param filter 过滤条件
         * @param params 参数
         * @returns
         */
        FeatureDataService.prototype.getHelpInfo = function (helpid, filter, params) {
            var url = rtf.BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
            var httpParams = {};
            if (params) {
                if (params.pageIndex) {
                    httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
                }
                if (params.pageSize) {
                    httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
                }
                if (params.condition) {
                    httpParams['condition'] = JSON.stringify(params.condition);
                }
                if (params.searchValue) {
                    httpParams['search'] = params.searchValue;
                }
            }
            var body = {
                helpID: helpid,
                queryParam: JSON.stringify(httpParams),
                filterStr: filter
            };
            var befRepository = null; //this.repository as BefRepository<any>;
            var options = {
                body: body
            };
            return befRepository.proxy.request(url, 'put', null, options).pipe(operators.map(function (result) { return JSON.parse(result); }));
        };
        /**
         * 国际化特征项或特征集名称
         * @param object 特征集或特征项对象
         * @returns
         */
        FeatureDataService.prototype.translateName = function (object) {
            if (!object) {
                return null;
            }
            var name = null;
            switch (this.localeId) {
                case 'en':
                    {
                        name = object['name_en'];
                    }
                    break;
                case 'zh-CHS':
                    {
                        name = object['name_chs'];
                    }
                    break;
                case 'zh-CHT':
                    {
                        name = object['name_cht'];
                    }
                    break;
                default: name = object['name_chs'];
            }
            return name;
        };
        FeatureDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FeatureDataService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: FeatureRepository },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.LOCALE_ID,] }] }
            ];
        };
        return FeatureDataService;
    }());

    var FeatureEditService = /** @class */ (function () {
        function FeatureEditService(injector, featureEditorService, featureDataService, loadingService, notifyService, languageService) {
            this.injector = injector;
            this.featureEditorService = featureEditorService;
            this.featureDataService = featureDataService;
            this.loadingService = loadingService;
            this.notifyService = notifyService;
            this.languageService = languageService;
        }
        FeatureEditService.prototype.edit = function (materialId, materialFeatureId, options) {
            var _this = this;
            if (!materialId) {
                throw new Error('[FeatureEditService]物料id不能为空！');
            }
            if (!options) {
                options = {};
            }
            if (typeof options === 'string' && options.startsWith('{') && options.endsWith('}')) {
                options = JSON.parse(options);
            }
            options.getHelpInfo = this.featureDataService.getHelpInfo;
            this.loadingService.show();
            return this.featureDataService.getFeaturesByMaterialId(materialId).pipe(operators.tap(function (result) {
                _this.loadingService.hide();
                var returnValue = result || null;
                if (returnValue) {
                    var featureInfo = JSON.parse(returnValue);
                    var props = featureInfo.props || null;
                    if (!props || props.length < 1) {
                        _this.notifyService.warning(_this.languageService.propsIsEmpty);
                        return;
                    }
                    _this.featureEditorService.show(props, options);
                }
                else {
                    _this.notifyService.error(_this.languageService.propsIsEmpty);
                }
            }));
        };
        FeatureEditService.prototype.buildFeatures = function (materialId, materialFeatureId) {
            var _this = this;
            var features$ = this.featureDataService.getFeaturesByMaterialId(materialId);
            return features$.pipe(operators.switchMap(function (featureSet) {
                if (materialFeatureId) {
                    var configedFeatures$ = _this.featureDataService.getConfigedValueByFeatureId(materialFeatureId, materialFeatureId);
                    return configedFeatures$.pipe(operators.map(function (defaultConfigs) {
                        var featureTemplate = featureSet.props;
                        var features = _this.mergeFeatures(featureTemplate, defaultConfigs);
                        return features;
                    }));
                }
                else {
                    return rxjs.of(featureSet.props);
                }
            }));
        };
        FeatureEditService.prototype.mergeFeatures = function (featureTemplate, defaultConfigs) {
            return null;
        };
        FeatureEditService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FeatureEditService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiFeatureEditor.FeatureEditorService },
                { type: FeatureDataService },
                { type: FormLoadingService },
                { type: FormNotifyService },
                { type: LanguageService }
            ];
        };
        return FeatureEditService;
    }());

    var ExpressionService = /** @class */ (function () {
        function ExpressionService(injector, resolveService, frameContext, expressionExecutor) {
            this.injector = injector;
            this.resolveService = resolveService;
            this.frameContext = frameContext;
            this.expressionExecutor = expressionExecutor;
        }
        /**
         * 执行表达式计算
         * @param expression 表达式
         * @param customContext 自定义上下文
         * @returns
         */
        ExpressionService.prototype.execute = function (expression, customContext) {
            var _a;
            var deps = this.resolveService.resolve(expression);
            var groupDependencies = devkit.ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);
            var entityContext = this.buildEntityContext(deps, groupDependencies);
            var stateContext = this.buildStateContext();
            var context = __assign((_a = {}, _a[this.entityOriginalNodeCode] = entityContext, _a), stateContext, { BigNumber: bignumber_js.BigNumber, frameContext: this.frameContext, bindingData: this.frameContext.bindingData, repository: this.frameContext.repository }, customContext);
            return this.expressionExecutor.eval(expression, context);
        };
        /**
         * 执行表达式（返回可观察对象）
         * @param expression 表达式
         * @param customContext 自定义上下文
         * @returns
         */
        ExpressionService.prototype.executeAsync = function (expression, customContext) {
            var result = this.execute(expression, customContext);
            return rxjs.of(result);
        };
        /**
         * 构造实体上下文
         * @param deps
         * @param groupDependencies
         * @param context
         * @returns
         */
        ExpressionService.prototype.buildEntityContext = function (deps, groupDependencies, context) {
            var _this = this;
            var isGroupdMainEntity = false;
            deps.forEach(function (dep) {
                var isEntityDependency = _this.isEntityDependency(dep);
                var isGroupDependency = groupDependencies.findIndex(function (item) { return item === dep; }) !== -1;
                // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系
                // 表达式依赖了实体
                if (isEntityDependency) {
                    // 是聚合依赖
                    if (isGroupDependency) {
                        var dependencyLength = dep.split('/').filter(function (p) { return p; }).length - 1;
                        if (dependencyLength === 1) {
                            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。
                            isGroupdMainEntity = true;
                        }
                    }
                }
            });
            var data = this.getEntity();
            if (isGroupdMainEntity) {
                var collection = this.frameContext.repository.entityCollection.toJSON();
                data['__type__'] = 'List';
                data['__items__'] = collection;
            }
            return data;
        };
        /**
         * 是否为实体依赖
         * @param dep
         * @returns
         */
        ExpressionService.prototype.isEntityDependency = function (dep) {
            return dep.startsWith(devkit.ENTITY_TEMPLATE);
        };
        /**
         * 获取实体
         * @param event
         * @returns
         */
        ExpressionService.prototype.getEntity = function () {
            var entityTypeInfo = this.frameContext.repository.entityTypeInfo;
            var bindingData = this.frameContext.bindingData;
            var childrenEntityPaths = [];
            devkit.ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
            var entity = this.frameContext.bindingData.list.currentItem.toJSON();
            entity['__type__'] = 'Entity';
            if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
                return entity;
            }
            // 找到所有子表
            childrenEntityPaths.forEach(function (paths) {
                var row = devkit.ExpressionUtil.getCurrentRowByPaths(paths, bindingData);
                if (row) {
                    var propertyName = paths.pop();
                    var parent_1 = paths.reduce(function (object, path) {
                        return object && object[path] || null;
                    }, entity);
                    var node = __assign({ __items__: __spread(parent_1[propertyName]) }, row, { __type__: 'List' });
                    parent_1[propertyName] = node;
                }
            });
            return entity;
        };
        Object.defineProperty(ExpressionService.prototype, "entityOriginalNodeCode", {
            /**
             * 获取主实体原始字段名
             */
            get: function () {
                var repository = this.injector.get(devkit.Repository);
                return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 构造变量上下文
         * @param event
         * @returns
         */
        ExpressionService.prototype.buildStateContext = function () {
            var ns = this.frameContext.namespace;
            var appContext = this.injector.get(devkit.AppContext, null);
            var frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
            var result = {};
            if (frameContexts && frameContexts.length > 0) {
                var anonymousFrameContext = frameContexts[0];
                var rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
                if (rootFrameContext) {
                    var uiState_1 = rootFrameContext.viewModel.uiState;
                    var propertyNames = Object.getOwnPropertyNames(uiState_1) || [];
                    propertyNames.forEach(function (prop) {
                        if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                            result[prop] = uiState_1[prop];
                        }
                    });
                }
            }
            return result;
        };
        ExpressionService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.ResolveService },
                { type: devkit.FrameContext },
                { type: devkit.ExpressionExecutor }
            ];
        };
        return ExpressionService;
    }());

    /**
     * angular 脏值检查服务
     */
    var DirtyCheckingService = /** @class */ (function () {
        function DirtyCheckingService(injector, cd, appRef) {
            this.injector = injector;
            this.cd = cd;
            this.appRef = appRef;
        }
        /**
         * Checks this view and its children.
         * @param global 是否全局检查
         */
        DirtyCheckingService.prototype.detectChanges = function (global) {
            global = (global === true || global === 'true') ? true : false;
            if (global && this.appRef) {
                this.appRef.tick();
            }
            else if (this.cd) {
                this.cd.detectChanges();
            }
        };
        /**
         * 在指定时间（ms）后触发Angular脏值检查
         * @param duration 超时时间(ms)
         * @param global 是否全局检查
         */
        DirtyCheckingService.prototype.detectChangesAfter = function (duration, global) {
            var _this = this;
            global = (global === true || global === 'true') ? true : false;
            if (isNaN(duration)) {
                return;
            }
            if (global && this.appRef) {
                window.setTimeout(function () {
                    _this.appRef.tick();
                }, duration);
            }
            else if (this.cd) {
                window.setTimeout(function () {
                    _this.cd.detectChanges();
                }, duration);
            }
        };
        DirtyCheckingService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DirtyCheckingService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef },
                { type: core.ApplicationRef }
            ];
        };
        return DirtyCheckingService;
    }());

    var PopUpService = /** @class */ (function () {
        function PopUpService(injector, frameContext, repository, languageService, messageService) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.repository = repository;
            this.languageService = languageService;
            this.messageService = messageService;
        }
        PopUpService.prototype.confirm = function () { };
        /**
         * 取消变更
         * @param frameId
         * @param id
         * @returns
         * @throws invalid frameid
         */
        PopUpService.prototype.cancel = function (frameId, id) {
            var frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            if (!frameContext) {
                throw new Error("[PopUpService]Invalid frameId " + frameId);
            }
            var primaryValue = this.frameContext.bindingData.list.currentId;
            var bindingPath = frameContext.viewModel.bindingPath;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            if (!id) {
                var bindingList = this.frameContext.bindingData.getList();
                id = bindingList.currentId;
            }
            var befRepository = this.repository;
            var longPaths = devkit.DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
            var entityListPaths = Array.from(longPaths);
            // 舍弃当前表当前行
            entityListPaths.pop();
            var dialogRef = this.frameContext.frameComponent['dialogRef'];
            if (entityListPaths.length < 1) {
                // 主表
                var entity = this.repository.entityCollection.getEntityById(id);
                var originalData = entity['originalData'];
                entity.load(originalData, { loadChild: false });
            }
            else {
                var entityList_1 = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
                if (entityList_1) {
                    var originalData = entityList_1['originalData'];
                    var item_1 = originalData.find(function (item) { return item.id === id; });
                    if (item_1) {
                        // 已有数据，还原变更
                        var entity_1 = befRepository.entityManager.getEntityByPath(longPaths);
                        if (entity_1.changes && entity_1.changes.length > 0) {
                            return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(operators.tap(function (result) {
                                if (result) {
                                    entity_1.load(item_1, { loadChild: false });
                                    entity_1.changes.splice(0, entity_1.changes.length);
                                }
                            }));
                        }
                        else {
                            // 没有修改，直接关闭
                            if (dialogRef) {
                                dialogRef.close();
                            }
                        }
                    }
                    else {
                        // 新增的数据，删除
                        var paths_1 = this.buildPath(bindingPath, primaryValue);
                        return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(operators.switchMap(function (result) {
                            if (result) {
                                return befRepository.removeEntityByPath(paths_1, id).pipe(operators.tap(function () {
                                    befRepository.entityManager.removeEntityByPath(paths_1, id);
                                    if (entityList_1.count() === 0 && dialogRef) {
                                        dialogRef.close();
                                    }
                                }));
                            }
                            else {
                                return rxjs.EMPTY;
                            }
                        }));
                    }
                }
            }
            return rxjs.of([]);
        };
        /**
         * 同步当前行
         * @param id 当前行
         */
        PopUpService.prototype.updateCurrentRow = function (id) {
            var _this = this;
            var bindingPath = this.frameContext.viewModel.bindingPath;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            // const frameId = this.frameContext.frameId;
            var root = this.frameContext.getVirtualRootFrameContext();
            var primaryKeyValue = root.bindingData.list.currentId;
            this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);
            if (bindingPaths.length > 0) {
                var paths_2 = [];
                bindingPaths.forEach(function (path, index, array) {
                    paths_2.push(path);
                    var bindingList = root.bindingData.getValue(paths_2);
                    if (bindingList) {
                        var currentId = bindingList.currentId;
                        var modalBindingList = _this.frameContext.bindingData.getValue(paths_2);
                        if (index === bindingPath.length - 1 && id) {
                            modalBindingList.setCurrentId(id);
                        }
                        else if (modalBindingList) {
                            modalBindingList.setCurrentId(currentId);
                        }
                    }
                });
            }
        };
        PopUpService.prototype.closeCheck = function () {
            var frameContext = this.frameContext;
            var bindingPath = frameContext.viewModel.bindingPath;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            var befRepository = this.repository;
            var longPaths = devkit.DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
            var entityListPaths = Array.from(longPaths);
            entityListPaths.pop();
            var entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
            var dialogRef = this.frameContext.frameComponent['dialogRef'];
            if (entityList.count() === 0 && dialogRef) {
                dialogRef.close();
            }
        };
        /**
         * 删除弹窗中的当前行数据
         * @param frameId -可选，要删除数据所在组件的id，默认为命令所在的组件
         * @param id -可选，要删除数据的id，默认为命令所在组件的当前行数据id
         * @param showConfirm -可选，删除数据时是否进行删除前的确认，默认为`true`
         * @returns
         * @throws 组件id错误时抛出错误
         */
        PopUpService.prototype.removeRow = function (frameId, id, showConfirm) {
            if (showConfirm === void 0) {
                showConfirm = true;
            }
            var frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
            if (!frameContext) {
                throw new Error("\u65E0\u6548\u7684\u7EC4\u4EF6id\uFF1A" + frameId);
            }
            // 纠正主键
            if (!id) {
                var bindingList = frameContext.bindingData.getList();
                id = bindingList.currentId;
            }
            var bindingPath = frameContext.viewModel.bindingPath;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            var paths = this.buildPath(bindingPath, this.frameContext.bindingData.list.currentId);
            var befRepository = this.repository;
            // 转换showConfirm为布尔
            if (typeof showConfirm == 'string') {
                showConfirm = showConfirm.trim() === 'false' ? false : true;
            }
            var confirm$ = rxjs.of(true);
            if (showConfirm) {
                confirm$ = this.messageService.confirm(this.languageService.confirmDeletion);
            }
            return confirm$.pipe(operators.switchMap(function (result) {
                if (result) {
                    if (bindingPaths.length === 0) {
                        // 主表删除，不立即保存
                        return befRepository.removeEntityById(id, false);
                    }
                    else {
                        return befRepository.removeEntityByPath(paths, id).pipe(operators.tap(function () {
                            befRepository.entityManager.removeEntityByPath(paths, id);
                        }));
                    }
                }
                else {
                    return rxjs.EMPTY;
                }
            }));
        };
        /**
         * 关闭弹窗
         * @param frameId -可选，组件id，不指定时使用命令所在的上下文组件
         * @throws 使用指定的组件id无法获取组件及弹窗组件实例获取失败时会抛出异常
         */
        PopUpService.prototype.closeDialog = function (frameId) {
            var frameContext = this.frameContext;
            var dialogRef = null;
            // 开发者指定了组件id
            if (frameId) {
                frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
                if (!frameContext) {
                    throw new Error('指定了无效的组件id');
                }
                dialogRef = frameContext.frameComponent['dialogRef'];
            }
            else {
                // 尝试从当前组件上下文中获取弹窗引用
                dialogRef = frameContext.frameComponent['dialogRef'];
                if (!dialogRef) {
                    // 如果命令挂载到了内容组件上
                    dialogRef = this.frameContext.parent.frameComponent['dialogRef'];
                }
            }
            if (!dialogRef) {
                throw new Error("\u65E0\u6CD5\u83B7\u53D6\u5F39\u7A97\u7EC4\u4EF6\u5B9E\u4F8B");
            }
            dialogRef.close();
        };
        /**
         * 还原自上次持久化以后产生的变更
         * @param frameId - 组件id
         * @param id - 数据id
         * @param showConfirm - 是否展示提示信息
         */
        PopUpService.prototype.cancelChanges = function (frameId, id, showConfirm) {
            var _this = this;
            if (showConfirm === void 0) {
                showConfirm = true;
            }
            var frameContext = this.getFrameContext(frameId);
            // 纠正主键
            id = this.getPrimaryValue(frameId, id);
            var data = this.getPersisteData(frameId, id);
            if (typeof showConfirm === 'string') {
                showConfirm = showConfirm.trim().toLowerCase() === 'false' ? false : true;
            }
            var isDataChanged = this.isDataChanged(data, frameId, id);
            var result$ = rxjs.of(true);
            if (showConfirm && isDataChanged) {
                result$ = this.messageService.confirm(this.languageService.cancelWithoutSave);
            }
            return result$.pipe(operators.switchMap(function (result) {
                if (result) {
                    var befRepository = frameContext.repository;
                    var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
                    var longPaths = devkit.DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, _this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
                    var entityPaths = Array.from(longPaths);
                    var entity = befRepository.entityManager.getEntityNodeByPath(entityPaths);
                    if (entity) {
                        entity.load(data);
                    }
                    return rxjs.of(true);
                }
                else {
                    return rxjs.EMPTY;
                }
            }));
        };
        /**
         * 持久化数据
         * @param frameId - 组件id
         * @param id - 数据id
         */
        PopUpService.prototype.persiste = function (frameId, id) {
            // 持久化数据
            var bindingObject = this.getBindingObject(frameId, id);
            bindingObject['__PSESISTE__DATA'] = bindingObject.toJSON();
        };
        /**
         * 获取持久化数据
         * @param frameId - 组件id
         * @param id - 数据id
         * @returns
         */
        PopUpService.prototype.getPersisteData = function (frameId, id) {
            var bindingObject = this.getBindingObject(frameId, id);
            return bindingObject['__PSESISTE__DATA'];
        };
        PopUpService.prototype.isDataChanged = function (data, frameId, id) {
            var bindingObject = this.getBindingObject(frameId, id);
            var value = bindingObject.toJSON();
            return JSON.stringify(value) !== JSON.stringify(data);
        };
        /**
         * 获取当前行
         * @param frameId - 组件id
         * @param id - 数据id
         * @returns
         * @throws 找不到对应数据时抛出无法找到对应数据的异常
         */
        PopUpService.prototype.getBindingObject = function (frameId, id) {
            var frameContext = this.getFrameContext(frameId);
            // 纠正主键
            id = this.getPrimaryValue(frameId, id);
            var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
            // 拿到当前行
            var bindingList = frameContext.bindingData.getValue(bindingPaths);
            if (!bindingList || bindingList.length < 1) {
                throw new Error("\u65E0\u6CD5\u627E\u5230id\u4E3A:" + id + "\u7684\u6570\u636E");
            }
            return bindingList.currentItem;
        };
        /**
         * 构造子表路径
         * @param bindingPath - 绑定路径
         * @param id - id
         * @throws 子表路径错误
         */
        PopUpService.prototype.buildPath = function (bindingPath, id) {
            var path = '/' + id;
            var subPaths = bindingPath.split('/');
            if (subPaths.length > 0) {
                // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
                // 因此index从1开始
                for (var index = 1; index < subPaths.length - 1; index++) {
                    var subPath = subPaths[index];
                    var subData = this.frameContext.viewModel.bindingData[subPath];
                    if (!subData || !subData.currentId) {
                        throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                    }
                    path += "/" + subPath + "/" + subData.currentId;
                }
            }
            path += '/' + subPaths[subPaths.length - 1];
            return path;
        };
        /**
         * 根据组件id获取组件上下文
         * @param frameId - 组件id
         * @returns
         * @throws 无效的组件id
         */
        PopUpService.prototype.getFrameContext = function (frameId) {
            var frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
            if (!frameContext) {
                throw new Error("\u65E0\u6548\u7684\u7EC4\u4EF6id\uFF1A" + frameId);
            }
            return frameContext;
        };
        /**
         * 获取主键
         * @param frameId - 组件id
         * @param id - 数据id
         * @returns
         * @throws 组件id无效时抛出异常
         */
        PopUpService.prototype.getPrimaryValue = function (frameId, id) {
            if (!id) {
                var frameContext = this.getFrameContext(frameId);
                if (!frameContext) {
                    throw new Error("\u65E0\u6548\u7684\u7EC4\u4EF6id\uFF1A" + frameId);
                }
                var bindingList = frameContext.bindingData.getList();
                if (!bindingList || bindingList.length < 1) {
                    throw new Error("\u65E0\u6548\u7684\u4E3B\u952E:" + id);
                }
                id = bindingList.currentId;
            }
            return id;
        };
        PopUpService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PopUpService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: devkit.Repository },
                { type: LanguageService },
                { type: FormMessageService }
            ];
        };
        return PopUpService;
    }());

    var FormService = /** @class */ (function () {
        function FormService(injector, appContext, repository) {
            this.injector = injector;
            this.appContext = appContext;
            this.repository = repository;
        }
        /**
         * 根据字段路径获取该字段在卡片或表格中的索引
         * @param source ngFormControls或any[][]
         * @param propertyPath 字段除bindingPath之外的完整路径
         * @returns
         */
        FormService.prototype.getIndex = function (source, propertyPath) {
            if (Array.isArray(source)) {
                var combine = source.reduce(function (result, group) {
                    return result.concat(group);
                }, []);
                return combine.findIndex(function (item) { return item.field === propertyPath; });
            }
            else if (Object.prototype.toString.call(source) === '[object Object]') {
                return Object.keys(source).findIndex(function (key) { return source[key].binding === propertyPath; });
            }
        };
        FormService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.AppContext },
                { type: devkit.Repository }
            ];
        };
        return FormService;
    }());

    var ViewModelService = /** @class */ (function () {
        function ViewModelService() {
        }
        ViewModelService.prototype.getGridColumns = function (frameContext) {
            var dataGridColumnsName = frameContext && frameContext.viewModel && frameContext.viewModel['dataGridColumnsName'] || null;
            return dataGridColumnsName && frameContext.viewModel[dataGridColumnsName] || [];
        };
        ViewModelService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ViewModelService.ctorParameters = function () { return []; };
        return ViewModelService;
    }());

    var PaginationService = /** @class */ (function () {
        function PaginationService(injector, frameContext) {
            this.injector = injector;
            this.frameContext = frameContext;
        }
        /**
         * 重置子表分页信息
         */
        PaginationService.prototype.resetChildrenPagination = function () {
            var paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};
            var childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(devkit.DataPropGroup.List) || [];
            if (paginationInfo && Object.keys(paginationInfo).length > 0) {
                var keys = Object.keys(paginationInfo);
                keys.forEach(function (key) {
                    var value = paginationInfo[key];
                    if (Object.prototype.toString.apply(value) !== '[object Object]') {
                        return;
                    }
                    var rowPagination = childrenEntityCodes.find(function (nodeCode) {
                        // 去掉s
                        nodeCode = nodeCode.slice(0, -1);
                        return key.startsWith(nodeCode + "_");
                    });
                    if (rowPagination) {
                        delete paginationInfo[key];
                    }
                    else {
                        paginationInfo[key].pageIndex = 1;
                        delete paginationInfo[key].total;
                        delete paginationInfo[key].pageCount;
                    }
                });
                this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
            }
        };
        PaginationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PaginationService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext }
            ];
        };
        return PaginationService;
    }());

    /**
     * 组件级注入注入(共23个)
     */
    var FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS = [
        ValidationService,
        FocusInvalidService,
        ChangeItemService,
        UIStateService,
        StateMachineService,
        BindingDataService,
        CommandService,
        // entity-services
        EntityTraversingService,
        EntityManipulationService,
        EntityAggregationService,
        EntityListService,
        EntityService,
        // data-services
        ListDataService,
        TreeDataService,
        SubTreeDataService,
        CardDataService,
        SubListDataService,
        RemoveDataService,
        SaveDataService,
        EditDataService,
        FilterConditionDataService,
        RemoteSummaryService,
        BeActionService,
        ApproveService,
        PrintService,
        AttachmentDataService,
        AttachmentService,
        FileService,
        NavigationMiddlewareService,
        GridMiddlewareService,
        SidebarService,
        FarrisFormService,
        DialogService,
        NavigationEventService,
        NavigationService,
        RouterService,
        AuthorityService,
        {
            provide: querysolution.QUERYSOLUTION_HANDLER_TOKEN,
            useClass: QuerySolutionService
        },
        {
            provide: uiListFilter.LISTFILTER_HANDLER_TOKEN,
            useClass: ListFilterConditionsService
        },
        EndEditService,
        uiBatchEditDialog.BatchEditDialogService,
        BatchEditService,
        DiscussionGroupService,
        LocalizationService,
        DataGridService,
        FormAttentionService,
        uiFeatureEditor.FeatureEditorService,
        FeatureDataService,
        FeatureEditService,
        ExpressionService,
        PopUpService,
        DirtyCheckingService,
        FormService,
        FormControlService,
        BindingPathService,
        FrameContextService,
        ViewModelService,
        PaginationService,
        // 表达式
        { provide: devkit.FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },
        { provide: devkit.FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService },
        { provide: devkit.MESSAGE_SERVICE_TOKEN, useClass: FormMessageService },
        { provide: devkit.NOTIFY_SERVICE_TOKEN, useClass: FormNotifyService },
        { provide: devkit.FRAME_COMPONENT_INIT_HANDLER_TOKEN, useClass: WorkFlowMessageHandler, multi: true }
    ];

    /**
     * 组件级注入注入(共23个)
     */
    var DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS = [
        { provide: 'ValidationService', useClass: ValidationService },
        { provide: 'FocusInvalidService', useClass: FocusInvalidService },
        { provide: 'ChangeItemService', useClass: ChangeItemService },
        { provide: 'UIStateService', useClass: UIStateService },
        { provide: 'StateMachineService', useClass: StateMachineService },
        { provide: 'BindingDataService', useClass: BindingDataService },
        { provide: 'CommandService', useClass: CommandService },
        // entity-services
        { provide: 'EntityTraversingService', useClass: EntityTraversingService },
        { provide: 'EntityManipulationService', useClass: EntityManipulationService },
        { provide: 'EntityAggregationService', useClass: EntityAggregationService },
        { provide: 'EntityListService', useClass: EntityListService },
        { provide: 'EntityService', useClass: EntityService },
        // data-services
        { provide: 'ListDataService', useClass: ListDataService },
        { provide: 'TreeDataService', useClass: TreeDataService },
        { provide: 'SubTreeDataService', useClass: SubTreeDataService },
        { provide: 'CardDataService', useClass: CardDataService },
        { provide: 'SubListDataService', useClass: SubListDataService },
        { provide: 'RemoveDataService', useClass: RemoveDataService },
        { provide: 'SaveDataService', useClass: SaveDataService },
        { provide: 'EditDataService', useClass: EditDataService },
        { provide: 'FilterConditionDataService', useClass: FilterConditionDataService },
        { provide: 'RemoteSummaryService', useClass: RemoteSummaryService },
        { provide: 'BeActionService', useClass: BeActionService },
        { provide: 'ApproveService', useClass: ApproveService },
        { provide: 'PrintService', useClass: PrintService },
        { provide: 'AttachmentDataService', useClass: AttachmentDataService },
        { provide: 'AttachmentService', useClass: AttachmentService },
        { provide: 'FileService', useClass: FileService },
        { provide: 'NavigationMiddlewareService', useClass: NavigationMiddlewareService },
        { provide: 'GridMiddlewareService', useClass: GridMiddlewareService },
        { provide: 'SidebarService', useClass: SidebarService },
        { provide: 'FarrisFormService', useClass: FarrisFormService },
        { provide: 'DialogService', useClass: DialogService },
        { provide: 'NavigationEventService', useClass: NavigationEventService },
        { provide: 'NavigationService', useClass: NavigationService },
        { provide: 'RouterService', useClass: RouterService },
        { provide: 'AuthorityService', useClass: AuthorityService },
        {
            provide: querysolution.QUERYSOLUTION_HANDLER_TOKEN,
            useClass: QuerySolutionService
        },
        {
            provide: uiListFilter.LISTFILTER_HANDLER_TOKEN,
            useClass: ListFilterConditionsService
        },
        { provide: 'EndEditService', useClass: EndEditService },
        { provide: 'BatchEditDialogService', useClass: uiBatchEditDialog.BatchEditDialogService },
        { provide: 'BatchEditService', useClass: BatchEditService },
        { provide: 'DiscussionGroupService', useClass: DiscussionGroupService },
        { provide: 'LocalizationService', useClass: LocalizationService },
        { provide: 'DataGridService', useClass: DataGridService },
        { provide: 'FormAttentionService', useClass: FormAttentionService },
        // 表达式
        { provide: devkit.FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },
        { provide: devkit.FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService }
    ];

    var CommandServicesModule = /** @class */ (function () {
        function CommandServicesModule(workFlowMessage) {
            this.workFlowMessage = workFlowMessage;
            if (this.workFlowMessage) {
                this.workFlowMessage.setup();
            }
        }
        CommandServicesModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS,
                        imports: [
                            wfTaskHandler.WfTaskHandlerModule
                        ],
                        exports: [
                            wfTaskHandler.WfTaskHandlerModule
                        ]
                    },] }
        ];
        /** @nocollapse */
        CommandServicesModule.ctorParameters = function () {
            return [
                { type: WorkFlowMessage }
            ];
        };
        return CommandServicesModule;
    }());

    var MessagePipe = /** @class */ (function () {
        function MessagePipe(token, rtfService) {
            this.token = token;
            this.rtfService = rtfService;
        }
        /**
         * 向管道发送消息
         * @param message 消息
         */
        MessagePipe.prototype.sendMessage = function (message) {
            this.rtfService.subjectNotify(this.token, message);
            return this;
        };
        /**
         * 监听管道消息
         * @param handler 消息处理器
         */
        MessagePipe.prototype.listen = function (handler) {
            var _this = this;
            var observerToken = devkit.UID.create();
            this.rtfService.subjectResponse(this.token, handler, observerToken);
            var unListen = function () {
                _this.rtfService.responseUnSubscribe(_this.token, observerToken);
            };
            return unListen;
        };
        /**
         * 销毁管道
         */
        MessagePipe.prototype.destory = function () {
            this.rtfService.subjectRemove(this.token);
        };
        return MessagePipe;
    }());

    var MessagePipeService = /** @class */ (function () {
        function MessagePipeService() {
        }
        /**
         * 通过token获取消息管道
         * @param token 消息管道标识
         */
        MessagePipeService.get = function (token) {
            var pipe = new MessagePipe(token, this.rtfService);
            return pipe;
        };
        /**
         * 创建消息管道
         * @param pipeName 管道名称
         * @param useFormContext 是否使用表单上下文创建管道标识
         * @param pipeType 管道类型(可选)，默认Subject<any>
         */
        MessagePipeService.create = function (pipeName, useFormContext, pipeType) {
            var options = null;
            if (useFormContext) {
                var params = this.querystringService.parse(window.location.hash);
                var funcId = params.funcId, appId = params.appId, appEntrance = params.appEntrance;
                options = { funcId: funcId, appId: appId, appEntrance: appEntrance };
            }
            var token = this.rtfService.subjectRegister(pipeName, options, pipeType);
            if (!token) {
                return null;
            }
            var pipe = new MessagePipe(token, this.rtfService);
            return pipe;
        };
        MessagePipeService.rtfService = new RuntimeFrameworkService();
        MessagePipeService.querystringService = new QuerystringService();
        return MessagePipeService;
    }());

    /**
     * 后端消息处理服务
     * @description
     * ### 服务注入位置
     *  1、整个表单的root-component
     *  2、弹出窗口的root-component
     */
    var BackEndMessageHandler = /** @class */ (function () {
        function BackEndMessageHandler(injector, frameContext, translate) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.translate = translate;
        }
        /**
         * 处理后端返回的消息或错误
         * @param message 消息或错误
         */
        BackEndMessageHandler.prototype.handle = function (message, context) {
            var isException = context && context.isException || false;
            var hasThrowError = context && context.hasThrowError || false;
            var eventBus = context && context.eventBus || null;
            var error = context && context.error || null;
            var formAppContext = context && context.formAppContext || null;
            var result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);
            if (result && result.form && result.form.length > 0) {
                result.form.forEach(function (item) {
                    item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');
                });
            }
            else {
                this.resetFormMessage(message.context.appContext, message.context.ns);
            }
            var targetFrameContext = this.findTargetFrameContext(this.frameContext);
            if (result && result.all && result.all.length > 0) {
                targetFrameContext.viewModel.verifycationChanged.next(result.all);
            }
            else {
                if (result !== null) {
                    targetFrameContext.viewModel.verifycationChanged.next([]);
                }
            }
        };
        /**
         * 收集汇总信息和form信息
         * @param backEndMessage
         */
        BackEndMessageHandler.prototype.collect = function (backEndMessage, isException, hasThrowError, eventBus, error, formAppContext) {
            var _this = this;
            if (isException === void 0) {
                isException = false;
            }
            if (hasThrowError === void 0) {
                hasThrowError = false;
            }
            if (eventBus === void 0) {
                eventBus = null;
            }
            if (error === void 0) {
                error = null;
            }
            if (formAppContext === void 0) {
                formAppContext = null;
            }
            var e_1, _a;
            var bizMessages = backEndMessage && backEndMessage.bizMessages || null;
            var appContext = backEndMessage && backEndMessage.context.appContext;
            var ns = backEndMessage.context.ns;
            if (!bizMessages || bizMessages.length < 1) {
                return null;
            }
            var result = {
                form: [],
                all: []
            };
            var hasFormlessError = false;
            var _loop_1 = function (bizMessage) {
                var e_2, _a;
                var message = bizMessage.message;
                var location_1 = bizMessage.location || null;
                var columns = location_1 && location_1.columns || null;
                var nodeCode = location_1 && location_1.nodeCode || null;
                var rows = location_1 && location_1.rows;
                var bindingPath = this_1.getBindingPath(appContext, ns, nodeCode);
                var bindingPaths = bindingPath && bindingPath.split('/').filter(function (p) { return p; });
                // 目前仅处理有location，且有id、列名、表名的。
                if (!location_1 || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {
                    return "continue";
                }
                var _loop_2 = function (row) {
                    var e_3, _a;
                    var _loop_3 = function (column) {
                        // 获取到所有绑定该列数据的frameContext
                        var frameContexts = this_1.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);
                        if (!frameContexts || frameContexts.length < 1) {
                            // 没有任何一个组件绑定该列的数据
                            hasFormlessError = true;
                            return "continue";
                        }
                        // 排除掉只读datagrid
                        frameContexts = frameContexts.filter(function (frameContext) {
                            var isDataGridComponent = _this.isDataGridComponent(frameContext.frameComponent);
                            if (isDataGridComponent) {
                                var isReadonlyDataGrid = _this.isReadonlyDataGrid(frameContext.frameComponent);
                                if (isReadonlyDataGrid) {
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                            return true;
                        });
                        // 遍历的行是否为当前行
                        var isCurrentRow = this_1.isCurrentRow(appContext, ns, bindingPath, row);
                        // 如果是当前行的话需要将错误信息放到form中
                        if (isCurrentRow) {
                            // 忽略grid
                            // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));
                            if (frameContexts && frameContexts.length > 0) {
                                frameContexts.forEach(function (frameContext) {
                                    // 只处理了一个组件中列只绑定到一个前端控件的场景
                                    var formControls = _this.getFormControlByColumnName(frameContext, column);
                                    if (formControls && formControls.length > 0) {
                                        formControls.forEach(function (_a) {
                                            var _b = __read(_a, 2), domPropertyName = _b[0], formControl = _b[1];
                                            //const domPropertyName = formControl && formControl. || null;
                                            _this.mergeMessage(result.form, frameContext, domPropertyName, message);
                                        });
                                    }
                                    //if (formControl && domPropertyName) {
                                    //}
                                });
                            }
                        }
                        // 将错误信息放到汇总中
                        frameContexts.forEach(function (frameContext) {
                            var viewModelName = frameContext.viewModel.form.formGroupName;
                            var formControls = _this.getFormControlByColumnName(frameContext, column);
                            if (formControls && formControls.length > 0) {
                                var _a = __read(formControls.find(function (_a) {
                                    var _b = __read(_a, 2), propertyName = _b[0], formControl = _b[1];
                                    return propertyName && propertyName.length > 0;
                                }), 2), domPropertyName = _a[0], formControl = _a[1];
                                // const domPropertyName = domProperty && domProperty.propertyName;
                                var bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths);
                                var index = bindingList.getIndexById(row);
                                var primary_1 = row + "_" + column + "_" + message;
                                // TODO:虽然能纠正汇总消息显示重复的问题，但可能导致点击错误无法定位到对应控件的问题，待后续优化
                                if (index >= 0 && result.all.findIndex(function (p) { return p.id === primary_1; }) === -1) {
                                    // 数据源中有多于1行时显示索引
                                    var position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;
                                    var title = _this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);
                                    var item = {
                                        id: primary_1,
                                        index: index,
                                        targetField: formControl.id,
                                        title: title,
                                        msg: message,
                                        namespace: ns,
                                        bindingPath: bindingPath,
                                        type: 'error'
                                    };
                                    result.all.push(item);
                                }
                            }
                        });
                    };
                    try {
                        for (var columns_1 = __values(columns), columns_1_1 = columns_1.next(); !columns_1_1.done; columns_1_1 = columns_1.next()) {
                            var column = columns_1_1.value;
                            _loop_3(column);
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return))
                                _a.call(columns_1);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                };
                try {
                    // 遍历数据行
                    for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                        var row = rows_1_1.value;
                        _loop_2(row);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return))
                            _a.call(rows_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
            };
            var this_1 = this;
            try {
                for (var bizMessages_1 = __values(bizMessages), bizMessages_1_1 = bizMessages_1.next(); !bizMessages_1_1.done; bizMessages_1_1 = bizMessages_1.next()) {
                    var bizMessage = bizMessages_1_1.value;
                    _loop_1(bizMessage);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (bizMessages_1_1 && !bizMessages_1_1.done && (_a = bizMessages_1.return))
                        _a.call(bizMessages_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            if (hasFormlessError && isException && !hasThrowError && eventBus) {
                eventBus.post('Exception', '', 'onException', error, formAppContext);
            }
            return result;
        };
        BackEndMessageHandler.prototype.mergeMessage = function (formItems, frameContext, domPropertyName, message) {
            var _a, _b;
            var targetItem = formItems.find(function (item) { return item.frameContext.frameId === frameContext.frameId; });
            if (targetItem) {
                var isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);
                var messageType = "backend-message-" + (Object.keys(targetItem.message).length + 1);
                if (isPropertyExist) {
                    targetItem.message[domPropertyName]['errors'][messageType] = { name: message };
                }
                else {
                    targetItem.message[domPropertyName] = { errors: (_a = {}, _a[messageType] = { name: message }, _a) };
                }
            }
            else {
                formItems.push({
                    frameContext: frameContext,
                    message: (_b = {},
                        _b[domPropertyName] = {
                            errors: {
                                'backend-message-1': { name: message }
                            }
                        },
                        _b)
                });
            }
        };
        BackEndMessageHandler.prototype.buildItemTitle = function (viewModelName, propertyName, index) {
            var template = {
                'zh-CHS': {
                    viewModelName: "$viewModel",
                    index: "\u7B2C $index \u884C",
                    propertyName: "- $propertyName"
                },
                'en': {
                    viewModelName: "$viewModel",
                    index: "row $index",
                    propertyName: "- $propertyName"
                },
                'zh-CHT': {
                    viewModelName: "$viewModel",
                    index: "\u7B2C $index \u884C",
                    propertyName: "- $propertyName"
                }
            };
            var currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
            var message = [];
            if (viewModelName) {
                message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));
            }
            if (index > 0) {
                message.push(template[currentLanguage]['index'].replace('$index', index));
            }
            if (propertyName) {
                message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));
            }
            return message.join(' ');
        };
        /**
         * 根据表名或nodeCode获取绑定路径
         * @param appContext appContext
         * @param ns ns
         * @param nodeCode 表名
         */
        BackEndMessageHandler.prototype.getBindingPath = function (appContext, ns, nodeCode) {
            var frameContext = this.getFrameContext(appContext, ns);
            return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);
        };
        /**
         * 通过绑定路径和列名找到所有符合条件的视图模型(包括grid和form)
         * @param appContext appContext
         * @param ns namespace
         * @param bindingPath 绑定路径
         * @param columnName 列名
         */
        BackEndMessageHandler.prototype.getFrameContextsByBindingPathAndColumnName = function (appContext, ns, bindingPath, columnName) {
            var frameContexts = appContext.frameContextManager.getFrameContexts();
            if (frameContexts && frameContexts.length > 0) {
                // 找到form中有控件的frameContext
                frameContexts = frameContexts.filter(function (frameContext) {
                    // 基本条件是否满足
                    var isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;
                    if (!isValidFrameContext) {
                        return false;
                    }
                    // 再通过列名过滤
                    var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                    var dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
                    if (dataTypeInfo) {
                        var dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());
                        // 从当前实体属性中找到数据字段为列名的属性
                        var entityPropertyInfo = dataPropInfos.find(function (propInfo) { return propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName); });
                        if (entityPropertyInfo) {
                            var entityPropertyName_1 = entityPropertyInfo.name;
                            var ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(function (item) { return item.binding === entityPropertyName_1; });
                            if (ngFormControl) {
                                return true;
                            }
                            else {
                                var item = Object.keys(frameContext.viewModel.form.ngFormControls).find(function (key) { return key === entityPropertyName_1; });
                                return item ? true : false;
                            }
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        return false;
                    }
                });
                return frameContexts;
            }
            return null;
        };
        /**
         * 是否为datagrid组件
         * @param frameComponent component
         */
        BackEndMessageHandler.prototype.isDataGridComponent = function (frameComponent) {
            var columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;
            return columnNames ? true : false;
        };
        /**
         * grid组件是否是只读的
         * @param frameComponent frameComponent
         * @returns
         */
        BackEndMessageHandler.prototype.isReadonlyDataGrid = function (frameComponent) {
            var frameContext = frameComponent.context;
            var dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
            if (dataGridColumnsName) {
                var datagridColumns = frameContext.viewModel[dataGridColumnsName];
                return datagridColumns.every(function (group) {
                    return group.every(function (item) { return !item.editor; });
                });
            }
            else {
                throw new Error("\u4F20\u5165\u7684\u7EC4\u4EF6\u4E0D\u662F\u4E00\u4E2A\u8868\u683C\uFF01");
            }
        };
        /**
         * id是否为当前行
         * @param appContext appContext
         * @param ns namespace
         * @param bindingPath bindingPath
         * @param id id
         */
        BackEndMessageHandler.prototype.isCurrentRow = function (appContext, ns, bindingPath, id) {
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            var frameContext = this.getFrameContext(appContext, ns);
            var bindingData = frameContext.bindingData;
            var bindingList = bindingData.getValue(bindingPaths);
            return bindingList.currentItem.primaryKeyValue === id;
        };
        /**
         * 获取当前ns下的rootFrameContext
         * @param appContext appcontext
         * @param ns namespace
         */
        BackEndMessageHandler.prototype.getFrameContext = function (appContext, ns) {
            var frameContexts = appContext.frameContextManager.getFrameContexts();
            if (frameContexts && frameContexts.length > 0) {
                var randomFrameContext = frameContexts.find(function (frameContext) { return frameContext.namespace === ns; });
                if (randomFrameContext) {
                    var virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();
                    return virtualRootFrameContext;
                }
            }
            return null;
        };
        /**
         * 通过绑定路径和列名获取绑定到该列的formControl
         */
        BackEndMessageHandler.prototype.getFormControlByColumnName = function (frameContext, columnName) {
            var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
            // 通过bindingPath找到对应的实体信息
            var typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
            var propsInfo = Array.from(typeInfo.propInfoMap.values());
            var propInfo = propsInfo.find(function (propInfo) { return propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName); });
            if (propInfo) {
                var mappingName_1 = propInfo.name;
                var formControls = Object.entries(frameContext.viewModel.form.ngFormControls).filter(function (item) { return item[1].binding === mappingName_1 || item[0] === mappingName_1; });
                // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);
                if (formControls) {
                    return formControls;
                }
            }
            return null;
        };
        BackEndMessageHandler.prototype.resetFormMessage = function (appContext, ns) {
            var frameContexts = appContext.frameContextManager.getFrameContexts().filter(function (frameContext) { return frameContext.namespace === ns; });
            frameContexts.forEach(function (frameContext) { return frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError(); });
        };
        /**
         * 递归找到展示消息的组件上下文
         * @param frameContext frameContext
         */
        BackEndMessageHandler.prototype.findTargetFrameContext = function (frameContext) {
            var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
            var virtualRootComponent = virtualRootFrameContext.frameComponent;
            var isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;
            if (isDialogComponent) {
                // 如果消息处理服务是弹窗内的，则消息提示展示在弹窗内
                return virtualRootFrameContext;
            }
            else {
                // 当前消息服务不在弹窗内，递归向上查找，找到第一个弹窗，如果找不到则找到最上的root-component
                var parentFrameContext = virtualRootFrameContext.parent;
                if (parentFrameContext) {
                    return this.findTargetFrameContext(parentFrameContext);
                }
                else {
                    return virtualRootFrameContext;
                }
            }
        };
        BackEndMessageHandler.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BackEndMessageHandler.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.TranslateToken,] }] }
            ];
        };
        return BackEndMessageHandler;
    }());

    // export * from './public-api-common';
    // export * from './public-api-extend';

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ɵa = BaseDataService;
    exports.ɵc = ListFilterConditionsService;
    exports.ɵb = QuerySolutionService;
    exports.ɵd = Service;
    exports.FormLoadingService = FormLoadingService;
    exports.FormMessageService = FormMessageService;
    exports.HideEventService = HideEventService;
    exports.FormNotifyService = FormNotifyService;
    exports.FormErrorService = FormErrorService;
    exports.FormWizardService = FormWizardService;
    exports.CheckService = CheckService;
    exports.DataCheckService = DataCheckService;
    exports.EventService = EventService;
    exports.MenuStateService = MenuStateService;
    exports.RouterService = RouterService;
    exports.LanguageService = LanguageService;
    exports.TAB_EVENT = TAB_EVENT;
    exports.TAB_QUERY_STRING = TAB_QUERY_STRING;
    exports.QuerystringService = QuerystringService;
    exports.RuntimeFrameworkService = RuntimeFrameworkService;
    exports.NavigationEventService = NavigationEventService;
    exports.NavigationService = NavigationService;
    exports.NavigationMiddlewareService = NavigationMiddlewareService;
    exports.GridMiddlewareService = GridMiddlewareService;
    exports.ParamService = ParamService;
    exports.FilterConditionService = FilterConditionService;
    exports.FilterConditionDataService = FilterConditionDataService;
    exports.UIStateService = UIStateService;
    exports.StateMachineService = StateMachineService;
    exports.BindingDataService = BindingDataService;
    exports.CommandService = CommandService;
    exports.ValidationService = ValidationService;
    exports.FocusInvalidService = FocusInvalidService;
    exports.ApplicationParamService = ApplicationParamService;
    exports.ChangeItemService = ChangeItemService;
    exports.EntityTraversingService = EntityTraversingService;
    exports.EntityManipulationService = EntityManipulationService;
    exports.EntityAggregationService = EntityAggregationService;
    exports.EntityListService = EntityListService;
    exports.EntityService = EntityService;
    exports.ListDataService = ListDataService;
    exports.CardDataService = CardDataService;
    exports.SubListDataService = SubListDataService;
    exports.TreeDataService = TreeDataService;
    exports.RemoveDataService = RemoveDataService;
    exports.SaveDataService = SaveDataService;
    exports.EditDataService = EditDataService;
    exports.RemoteSummaryService = RemoteSummaryService;
    exports.SubTreeDataService = SubTreeDataService;
    exports.BeActionService = BeActionService;
    exports.ApproveService = ApproveService;
    exports.PrintService = PrintService;
    exports.AttachmentDataService = AttachmentDataService;
    exports.AttachmentService = AttachmentService;
    exports.FileService = FileService;
    exports.DialogService = DialogService;
    exports.SidebarService = SidebarService;
    exports.FilterService = FilterService;
    exports.AuthorityService = AuthorityService;
    exports.Authority = Authority;
    exports.FarrisFormService = FarrisFormService;
    exports.FARRIS_FORM_COMPONENTS = FARRIS_FORM_COMPONENTS;
    exports.ExceptionHandler = ExceptionHandler;
    exports.KeybindingService = KeybindingService;
    exports.FARRIS_COMMAND_SERVICE_PROVIDERS = FARRIS_COMMAND_SERVICE_PROVIDERS;
    exports.FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS = FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS;
    exports.FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS = FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS;
    exports.DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS = DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS;
    exports.CommandServicesModule = CommandServicesModule;
    exports.ComponentManagerService = ComponentManagerService;
    exports.MessagePipeService = MessagePipeService;
    exports.MessagePipe = MessagePipe;
    exports.EndEditService = EndEditService;
    exports.BatchEditService = BatchEditService;
    exports.DiscussionGroupService = DiscussionGroupService;
    exports.FormManifestService = FormManifestService;
    exports.FormExpressionManifestService = FormExpressionManifestService;
    exports.UserSettingsService = UserSettingsService;
    exports.LocalizationService = LocalizationService;
    exports.DataGridService = DataGridService;
    exports.BackEndMessageHandler = BackEndMessageHandler;
    exports.FormAttentionService = FormAttentionService;
    exports.FormNotifyStrategyService = FormNotifyStrategyService;
    exports.FeatureDataService = FeatureDataService;
    exports.FeatureEditService = FeatureEditService;
    exports.FeatureRepository = FeatureRepository;
    exports.ExpressionService = ExpressionService;
    exports.PopUpService = PopUpService;
    exports.DirtyCheckingService = DirtyCheckingService;
    exports.WorkFlowMessage = WorkFlowMessage;
    exports.WorkFlowMessageService = WorkFlowMessageService;
    exports.WorkFlowMessageHandler = WorkFlowMessageHandler;
    exports.FormControlService = FormControlService;
    exports.BindingPathService = BindingPathService;
    exports.FrameContextService = FrameContextService;
    exports.ViewModelService = ViewModelService;
    exports.FormService = FormService;
    exports.PaginationService = PaginationService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-command-services.umd.js.map