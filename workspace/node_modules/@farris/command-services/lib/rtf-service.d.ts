import { Observable, Subject } from 'rxjs';
/**
 * RuntimeFrameworkService
 * @scope @FormModule
 */
export declare class RuntimeFrameworkService {
    private rtfService;
    constructor();
    /**
     * 遍历获取rtf服务
     */
    private getService;
    /**
     * 打开菜单或应用
     * @param options options
     */
    openMenu(options: any): void;
    /**
     * 打开菜单或应用
     * @param options options
     */
    openMenu$(options: any): any;
    /**
     * 获取导航实体数据
     * @param tabId tabid
     * @param callback callback
     * @param once once
     */
    getEntityParam(tabId: string, callback: any, once?: boolean): void;
    /**
     * 尝试关闭菜单或应用
     * @param options optins
     */
    beforeCloseMenu(options: any): void;
    /**
     * 关闭菜单
     * @param options options
     */
    closeMenu(options: any): void;
    /**
     * 获取菜单静态参数
     * @param funcId 菜单id
     * @param callback 回调
     */
    getMenuParams(funcId: string, callback: (params: any) => void): void;
    /**
     * 添加事件监听
     */
    addEventListener(token: string, handler: (value: any) => void, options: any): void;
    /**
     * 获取运行框架菜单切换控制事件
     * @returns Observable<any>
     */
    getMenuSwitchControlEvent(): Observable<any>;
    readonly params: any;
    /**
     * 获取tabId
     */
    readonly tabId: any;
    /**
     * 获取formToken
     */
    readonly formToken: any;
    /**
     * 获取funcId
     */
    readonly funcId: any;
    /**
     * 注册主题
     * @param code 主题的标识
     * @param options token生成规则
     * @param subject 自定义主题，默认使用Subject
     * @returns string 注册成功后返回主题的唯一标识
     */
    subjectRegister(code: string, options: any, subject?: Subject<any>): string;
    /**
     * 移除主题
     * @param token 主题唯一标识
     */
    subjectRemove(token: string): void;
    /**
     * 给主题发送消息
     * @param token 主题标识
     * @param info 消息
     */
    subjectNotify(token: string, info: any): void;
    /**
     * 注册主题监听器
     * @param token 主题标识
     * @param handler 主题处理器
     * @param observerToken 监听器id(可选)
     * @returns 监听器Id
     * @description 监听主题消息，监听成功返回当前监听者的唯一标识
     */
    subjectResponse(token: string, handler: (data: any) => void, observerToken?: string): string;
    /**
     * 取消对主题的监听
     * @param token 主题标识
     * @param observerToken 监听器标识
     */
    responseUnSubscribe(token: string, observerToken: string): void;
    /**
     * 是否同源
     * @param environment window
     */
    private isSameOrigin;
}
