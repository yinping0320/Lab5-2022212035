import { Injector } from "@angular/core";
import { FrameContext, ResolveService, ExpressionExecutor } from "@farris/devkit";
import { Observable } from "rxjs";
export declare class ExpressionService {
    private injector;
    private resolveService;
    private frameContext;
    private expressionExecutor;
    constructor(injector: Injector, resolveService: ResolveService, frameContext: FrameContext, expressionExecutor: ExpressionExecutor);
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    execute(expression: string, customContext?: {
        [prop: string]: any;
    }): any;
    /**
     * 执行表达式（返回可观察对象）
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    executeAsync(expression: string, customContext?: {
        [prop: string]: any;
    }): Observable<any>;
    /**
     * 构造实体上下文
     * @param deps
     * @param groupDependencies
     * @param context
     * @returns
     */
    private buildEntityContext;
    /**
     * 是否为实体依赖
     * @param dep
     * @returns
     */
    private isEntityDependency;
    /**
     * 获取实体
     * @param event
     * @returns
     */
    getEntity(): any;
    /**
     * 获取主实体原始字段名
     */
    protected readonly entityOriginalNodeCode: string;
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext(): {};
}
