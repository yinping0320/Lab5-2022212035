import { MessagerService } from '@farris/ui-messager';
import { LanguageService } from '../languag.service';
import { ServerExceptionEntity } from './types';
/**
 * 异常处理接口
 */
export interface IExceptionStrategy {
    handleException(error: ServerExceptionEntity): void;
}
/**
 * 异常处理基类
 */
export declare class ExceptionStrategy {
    messagerService: MessagerService;
    languageService: LanguageService;
    constructor(messagerService: MessagerService, languageService: LanguageService);
}
/**
 * 信息级别异常处理
 */
export declare class InfoExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {
    constructor(messagerService: MessagerService, languageService: LanguageService);
    handleException(error: ServerExceptionEntity): void;
}
/**
 * 警告级别异常处理
 */
export declare class WarningExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {
    constructor(messagerService: MessagerService, languageService: LanguageService);
    handleException(error: ServerExceptionEntity): void;
}
/**
 * 错误级别异常处理
 */
export declare class ErrorExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {
    private langService;
    constructor(messagerService: MessagerService, languageService: LanguageService);
    handleException(error: ServerExceptionEntity): void;
    private handleErrorLevel;
    /**
     * 在控制台中显示错误信息
     */
    private displayError;
}
/**
 * 致命错误级别异常处理
 */
export declare class FatalExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {
    constructor(messagerService: MessagerService, languageService: LanguageService);
    handleException(error: ServerExceptionEntity): void;
}
