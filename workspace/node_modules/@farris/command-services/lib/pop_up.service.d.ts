import { Injector } from '@angular/core';
import { FrameContext, Repository } from '@farris/devkit';
import { LanguageService } from './languag.service';
import { FormMessageService } from './form-message.service';
export declare class PopUpService {
    private injector;
    private frameContext;
    private repository;
    private languageService;
    private messageService;
    constructor(injector: Injector, frameContext: FrameContext, repository: Repository<any>, languageService: LanguageService, messageService: FormMessageService);
    confirm(): void;
    /**
     * 取消变更
     * @param frameId
     * @param id
     * @returns
     * @throws invalid frameid
     */
    cancel(frameId: string, id?: string): import("rxjs").Observable<boolean> | import("rxjs").Observable<any[]>;
    /**
     * 同步当前行
     * @param id 当前行
     */
    updateCurrentRow(id?: string): void;
    closeCheck(): void;
    /**
     * 删除弹窗中的当前行数据
     * @param frameId -可选，要删除数据所在组件的id，默认为命令所在的组件
     * @param id -可选，要删除数据的id，默认为命令所在组件的当前行数据id
     * @param showConfirm -可选，删除数据时是否进行删除前的确认，默认为`true`
     * @returns
     * @throws 组件id错误时抛出错误
     */
    removeRow(frameId?: string, id?: string, showConfirm?: string | boolean): import("rxjs").Observable<boolean>;
    /**
     * 关闭弹窗
     * @param frameId -可选，组件id，不指定时使用命令所在的上下文组件
     * @throws 使用指定的组件id无法获取组件及弹窗组件实例获取失败时会抛出异常
     */
    closeDialog(frameId?: string): void;
    /**
     * 还原自上次持久化以后产生的变更
     * @param frameId - 组件id
     * @param id - 数据id
     * @param showConfirm - 是否展示提示信息
     */
    cancelChanges(frameId?: string, id?: string, showConfirm?: boolean | string): import("rxjs").Observable<boolean>;
    /**
     * 持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     */
    persiste(frameId?: string, id?: string): void;
    /**
     * 获取持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     */
    private getPersisteData;
    private isDataChanged;
    /**
     * 获取当前行
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 找不到对应数据时抛出无法找到对应数据的异常
     */
    private getBindingObject;
    /**
     * 构造子表路径
     * @param bindingPath - 绑定路径
     * @param id - id
     * @throws 子表路径错误
     */
    private buildPath;
    /**
     * 根据组件id获取组件上下文
     * @param frameId - 组件id
     * @returns
     * @throws 无效的组件id
     */
    private getFrameContext;
    /**
     * 获取主键
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 组件id无效时抛出异常
     */
    private getPrimaryValue;
}
