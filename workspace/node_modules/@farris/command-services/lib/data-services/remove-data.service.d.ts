import { Observable } from 'rxjs';
import { FrameContext } from '@farris/devkit';
/**
 * 删除服务
 */
declare class RemoveDataService {
    private frameContext;
    private notifyService;
    private messageService;
    private loadingService;
    private errorService;
    private languageService;
    private befRepository;
    private commandService;
    private listDataService;
    private treeDataService;
    /**
     * 构造函数
     * @param frameContext 组件上下文
     */
    constructor(frameContext: FrameContext);
    /**
     * 删除id对应的实体
     * @param id 要删除的数据id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（仅为兼容，新调用请勿设置）
     * @summary
     * enableRemoveAndSave存在的意义：
     * 1、老表单的可能没有delAndSave方法；
     * 2、为了将ListDataService中的remove方法迁移到此方法上，显示设置为false，保持和以前行为一致；
     * 3、该参数默认为true，并且在WebComponent层不暴露，新命令不需要传递，默认为true；
     */
    removeById(id: string, ifSave: boolean, enableRemoveAndSave?: boolean, successMsg?: string): Observable<boolean>;
    removeByIds(ids: string[]): Observable<boolean>;
    /**
     * 删除id对应的实体，并执行保存
     */
    removeAndSaveById(id: string, successMsg?: string): Observable<boolean>;
    /**
     * 删除并保存树节点数据
     */
    removeAndSaveByIdForTree(id: string, successMsg?: string): Observable<boolean>;
    /**
     * 批量删除并保存
     */
    removeAndSaveByIds(): void;
    /**
     * 删除后的刷新
     */
    refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any>;
    /**
     * 删除id对应的实体
     * @param id 实体id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（老EAPI上没有此方法，通过开关进行兼容）
     * @summary
     * enableRemoveAndSave参数说明：
     * 1、老EAPI上没有delAndSave方法，只能发两次请求（删除和保存）；
     * 2、此开关用于选择使用哪种方式，兼容老表单。
     */
    private innerRemoveById;
    /**
     * 检查要删除的ids是否为空
     */
    private checkIdsToRemove;
    /**
     * 确认删除
     */
    private confirmToRemove;
}
export { RemoveDataService };
