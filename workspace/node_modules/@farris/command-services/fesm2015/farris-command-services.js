import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { WizardService, WizardEventType } from '@farris/ui-wizard';
import { Router, ActivatedRoute } from '@angular/router';
import { FEPageModalService } from '@farris/extend-page-modal';
import lodash from 'lodash-es';
import { zip } from 'rxjs/observable/zip';
import { empty as empty$1 } from 'rxjs/observable/empty';
import { VerifyDetailService } from '@farris/ui-verify-detail';
import Mousetrap__default from 'mousetrap';
import { of as of$1 } from 'rxjs/observable/of';
import { DatagridComponent } from '@farris/ui-datagrid';
import { WFSubmiteService } from '@gsp-wf/rtdevkit';
import { WFFlowchartService } from '@gsp-wf/ui-flowchart';
import { CloudprintService, OutputType, FileType, PrintType } from '@gsp-svc/cloudprint';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { BsModalService } from '@farris/ui-modal';
import { FarrisSidebarService } from '@farris/ui-sidebar';
import { FrameworkService, AppService, AppType, FrmI18nSettingService } from '@gsp-sys/rtf-common';
import { ControlType } from '@farris/component-querycondition';
import { format, addDays, addWeeks, addMonths, addYears, startOfMonth, endOfMonth, startOfYear, endOfYear, startOfWeek, endOfWeek, getDay } from 'date-fns';
import { BefRepositoryUtil, BefDataPathUtil, FrameworkSessionService } from '@farris/bef';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { UploadDialogService, UploadLimit, DownloadService, FileState, UploadService } from '@gsp-svc/formdoc-upload';
import { HttpErrorResponse, HttpHeaders, HttpClient } from '@angular/common/http';
import moment from 'moment';
import { AttentionService } from '@farris/ui-tooltip';
import { BasePathService } from '@farris/rtf';
import { FeatureEditorService } from '@farris/ui-feature-editor';
import { BigNumber } from 'bignumber.js';
import { Subject, from, empty, EMPTY, of, isObservable, Observable, forkJoin, concat, throwError } from 'rxjs';
import { every, concatMap, switchMap, take, tap, map, filter, last, throwIfEmpty, catchError, debounceTime, delay, takeLast, share } from 'rxjs/operators';
import { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';
import { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';
import { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';
import { WfTaskHandlerService, WfTaskHandlerModule } from '@gsp-wf/wf-task-handler';
import { Injectable, Optional, LOCALE_ID, Inject, InjectionToken, Injector, ComponentFactoryResolver, ReflectiveInjector, ElementRef, InjectFlags, forwardRef, ApplicationRef, ChangeDetectorRef, NgModule } from '@angular/core';
import { AppContext, FrameEventBus, RouterParamService, UID, FrameContext, TranslateToken, ViewModel, Repository, PARENT_CLASS, ChangeType, DataPropGroup, StateMachine, BindingData, BindingList, EntityPathConverter, FieldMetadataUtil, BindingPathConverter, DataPathCreator, AppContextManager, UserSettingsToken, Entity, EntityList, FORM_PATH_TOKEN, FORM_MANIFEST_SERVICE_TOKEN, ENTITY_TEMPLATE, ResolveService, ExpressionUtil, ExpressionExecutor, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, FRAME_COMPONENT_INIT_HANDLER_TOKEN } from '@farris/devkit';

/**
 * 发送消息给FormLoadingService，
 * 使其接收后调用hide()函数
 * 此服务仅用于处理Http异常
 */
class HideEventService {
    constructor() {
        this.hideEvent = new Subject();
    }
}
HideEventService.decorators = [
    { type: Injectable }
];

// tslint:disable: no-string-literal
/**
 * 加载提示Helper
 * 1、包装@farris/ui的LoadingService；
 * 2、提供针对表单的快捷方法；
 */
class FormLoadingService {
    /**
     * 强制显示，不能隐藏
     */
    /**
     * 构造函数
     * 注入@farris/ui的LoadingService
     */
    constructor(loadingService, hideEventService, applicationContext) {
        this.loadingService = loadingService;
        this.hideEventService = hideEventService;
        this.applicationContext = applicationContext;
        /**
         * 延迟loading定时器
         */
        this.loadingTimerIds = [];
        if (hideEventService) {
            this.hideEventService.hideEvent.subscribe(result => {
                this.hide();
            });
        }
    }
    setSuspend(flag) {
        FormLoadingService.isSuspend = flag;
    }
    /**
     * 显示加载中
     */
    show(configOrMessage) {
        if (FormLoadingService.isSuspend === true) {
            return;
        }
        if (this.loadingCmp) {
            this.loadingCmp.close();
            this.loadingCmp = null;
        }
        this.registerService();
        const loadingConfig = this.buildLoadingConfig(configOrMessage);
        this.loadingCmp = this.loadingService.show(loadingConfig);
        return this.loadingCmp;
    }
    /**
     * 延迟显示Loading
     */
    showLoadingWithDelay(delayTime, configOrMessage) {
        // this.show(configOrMessage);
        const timerId = setTimeout(() => {
            this.show(configOrMessage);
        }, delayTime);
        this.loadingTimerIds.push(timerId);
        this.registerService();
        return timerId;
    }
    /**
     * 隐藏延迟的Loading
     */
    hideDelayLoading(timerIdToClear) {
        this.clearLoadingTimer(timerIdToClear);
        this.hide();
    }
    /**
     * 构造LoadingConfig
     * @param configOrMessage 配置对象或消息字符串
     */
    buildLoadingConfig(configOrMessage) {
        let loadingConfig;
        if (!!configOrMessage) {
            if (typeof configOrMessage === 'object') {
                loadingConfig = configOrMessage;
            }
            else {
                loadingConfig = { 'message': configOrMessage };
            }
        }
        else {
            loadingConfig = {};
        }
        if (!loadingConfig.hasOwnProperty('delay')) {
            loadingConfig.delay = 0;
        }
        return loadingConfig;
    }
    /**
     * 关闭所有loading
     */
    clearAll() {
        FormLoadingService.isSuspend = false;
        window.setTimeout(() => {
            this.loadingService.clearAll();
        }, 350);
        this.loadingCmp = null;
        this.clearAllLoadingTimers();
        this.destroy();
    }
    /**
     * 清空Loading定时器
     */
    clearLoadingTimer(timerIdToClear) {
        clearTimeout(timerIdToClear);
        this.loadingTimerIds = this.loadingTimerIds.filter((timerId) => {
            return timerId !== timerIdToClear;
        });
    }
    /**
     * 清空所有Loading定时器
     */
    clearAllLoadingTimers() {
        this.loadingTimerIds.forEach((timerId) => {
            this.clearLoadingTimer(timerId);
        });
    }
    /**
     * 隐藏加载中
     */
    hide() {
        if (!this.loadingCmp) {
            this.destroy();
            return;
        }
        if (FormLoadingService.isSuspend === true) {
            return;
        }
        this.loadingCmp.close();
        this.loadingCmp = null;
        this.destroy();
    }
    /**
     * 销毁loadingService
     */
    destroy() {
        if (FormLoadingService.isSuspend === true) {
            return;
        }
        const services = window['DEVKIT_LOADING_SERVICE'] || [];
        if (services && Array.isArray(services) && services.length > 0) {
            services.forEach((service) => {
                if (service) {
                    service.clearAllLoadingTimers();
                    if (service.loadingCmp) {
                        service.loadingCmp.close();
                        service.loadingCmp = null;
                    }
                }
            });
        }
        window['DEVKIT_LOADING_SERVICE'] = [];
    }
    /**
     * 注册所有的LoadingService实例
     */
    registerService() {
        const services = window['DEVKIT_LOADING_SERVICE'] || [];
        services.push(this);
        window['DEVKIT_LOADING_SERVICE'] = services;
    }
}
FormLoadingService.isSuspend = false;
FormLoadingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormLoadingService.ctorParameters = () => [
    { type: LoadingService },
    { type: HideEventService, decorators: [{ type: Optional }] },
    { type: AppContext, decorators: [{ type: Optional }] }
];

/**
 * 英文语言消息
 */
class LanguageMessageForEn {
    constructor() {
        this.yes = 'Yes';
        this.no = 'No';
        this.unsaveNotifyTitle = 'Exist unsave record. Do save operation or not?';
        this.clientNotifyTitle = 'System Prompt In The Frontend';
        this.serverNotifyTitle = 'System Prompt In The Backend';
        this.cancelApproveSuccess = 'Cancel Approve Success';
        this.cancelApproveFailed = 'Cancel Approve Failed';
        this.unallowEmptyProcessInstanceName = 'Process Instance Name Can Not Be Empty';
        this.unallowEmptyBizBillId = 'Biz Bill Id Can Not Be Empty';
        this.unallowEmptyChildBizBillId = 'Child Biz Bill Id Can Not Be Empty';
        this.bizDefKeyRequired = 'Biz Def Key can\'t be empty.';
        this.procInsIdRequired = 'Process instance Id can\'t be empty.';
        this.addChildFailed = 'Add Child Failed';
        this.addSiblingFailed = 'Add Sibling Failed';
        this.addSubChildFailed = 'Add Sub Child Failed';
        this.addSubSiblingFailed = 'Add Sub Sibling Failed';
        this.deleteFailed = 'Delete Failed';
        this.multiSaveFailed = 'MultiSave Failed';
        this.appendFailed = 'Append Failed';
        this.queryFailed = 'Query Failed';
        this.cancelFailed = 'Cancel Failed';
        this.updateFailed = 'Update Failed';
        this.addFailed = 'Add Failed';
        this.loadFailed = 'Load Failed';
        this.saveSuccess = 'Successfully saved!';
        this.saveFailed = 'Save failed!';
        this.deleteSuccess = 'Successfully deleted!';
        this.deleteFaild = 'Failed to delete!';
        this.confirmDeletion = 'Confirm deletion?';
        this.submitSuccess = 'Submit successfully!';
        this.submitFaild = 'Submit failed!';
        this.notifyTitle = 'System prompt';
        this.httpError = 'HTTP request error! Please check the server error!';
        this.gridDataNotSave = 'The current page data is not saved. Turning the page will result in data loss. Do you want to continue turning the page?';
        this.exitWithoutSave = 'There is unsaved data. Do you want to continue closing?';
        this.notSupportMenuType = 'Not supported menu type!';
        this.cancelWithoutSave = 'Exist unsaved change,Confirm to cancel?';
        this.plsSelectDeleteData = 'Please select the data to delete!';
        this.errorHierarchyKey = 'Incorrect ierarchy key';
        this.plsSelectParentNode = 'Please select parent node!';
        this.deleteChildFirst = 'Please delete the child nodes first!';
        this.incorrectHierarchyConfig = 'Hierarchy config is incorrect!';
        this.operationFailed = 'The operation failed.';
        this.plsSelectEditData = 'Please select the data you want to edit!';
        this.plsSelectViewData = 'Please select the data you want to view!';
        this.plsUploadFirst = 'Please upload attachment first!';
        this.defaultDialogTitle = 'Dialog';
        this.changeToFirst = 'The first data.';
        this.changeToLast = 'The last data.';
        this.noProcessInstanceId = 'Please provide the process instance id.';
        this.noDataExist = 'Data does not exist to access the edit state!';
        this.noAttachment = 'There are no attachments to preview.';
        this.confirm = 'Confirm';
        this.cancel = 'Cancel';
        this.plsSelectCopyData = 'Please select the data you want to copy!';
        this.copyFieldsRequired = 'The copy fields can`t be empty!';
        this.pathIsRequired = 'The request url can`t be empty!';
        this.propsIsEmpty = 'The material has no props!';
        this.historyAttachment = 'The history attachment can`t be delete!';
        this.plsSelectDownloadAtt = 'Please select the attachment you want to download!';
        this.noDownloadAtt = 'There are no attachments to download!';
        this.plsCheckBatchEditRows = 'Please check the rows you want to edit!';
        this.plsSelectDetailFormData = 'Please select a detail form data first!';
        this.dataAndStateChanged = 'Are you sure you want to load the new data and switch to $1 state?';
        this.dataChanged = 'Are you sure you want to load the data and discards the current modification?';
        this.stateChanged = 'Are you sure you want to switch $1 state?';
        this.defaultStateName = 'init';
        this.copy = 'Copy detail message';
        this.copySuccess = 'Copy success';
        this.copyFailed = 'Copy failed';
        this.roger = 'Roger';
        this.appOrFuncIdRequired = 'No menu or application parameters are configured, please configure them in the designer.';
        this.tableCanNotEmpty = 'can not empty.';
        this.plsSelectRemoveAtt = 'Please select the attachment to delete!';
        this.plsSelectUpdateRow = 'Please select the row where you want to update the attachment!';
    }
}

/**
 * 英文语言消息
 */
class LanguageMessageForZh {
    constructor() {
        this.yes = '是';
        this.no = '否';
        this.unsaveNotifyTitle = '存在未保存记录。是否要保存？';
        this.clientNotifyTitle = '前端异常提示';
        this.serverNotifyTitle = '服务器端异常提示';
        this.cancelApproveSuccess = '取消提交成功！';
        this.cancelApproveFailed = '取消提交失败！';
        this.unallowEmptyProcessInstanceName = '流程实例名称不能为空';
        this.unallowEmptyBizBillId = '请选择一条数据';
        this.bizDefKeyRequired = '入口单据不能为空';
        this.unallowEmptyChildBizBillId = '从表业务单据编号不能为空！';
        this.procInsIdRequired = '流程实例Id不能为空！';
        this.addChildFailed = '新增子级失败';
        this.addSiblingFailed = '新增同级失败';
        this.addSubChildFailed = '新增从表子级失败';
        this.addSubSiblingFailed = '新增从表同级失败';
        this.deleteFailed = '删除失败';
        this.multiSaveFailed = '批量保存失败';
        this.appendFailed = '追加失败';
        this.queryFailed = '查询失败';
        this.cancelFailed = '取消失败';
        this.updateFailed = '更新失败';
        this.addFailed = '新增失败';
        this.loadFailed = '加载失败';
        this.saveSuccess = '保存成功！';
        this.saveFailed = '保存失败！';
        this.deleteSuccess = '删除成功！';
        this.deleteFaild = '删除失败！';
        this.confirmDeletion = '确认删除？';
        this.submitSuccess = '提交审批成功！';
        this.submitFaild = '提交审批失败！';
        this.notifyTitle = '系统提示';
        this.httpError = 'HTTP请求错误！请检查Server端错误！';
        this.gridDataNotSave = '当前页数据未保存，翻页将导致数据丢失，是否继续翻页？';
        this.exitWithoutSave = '存在未保存的数据，是否继续关闭？';
        this.notSupportMenuType = '关闭的既不是菜单也不是应用。';
        this.cancelWithoutSave = '存在未保存的变更，确认取消？';
        this.plsSelectDeleteData = '请选择要删除的数据！';
        this.errorHierarchyKey = '错误的分级码';
        this.plsSelectParentNode = '请选择父节点';
        this.deleteChildFirst = '请先删除子节点';
        this.incorrectHierarchyConfig = '分级码配置信息错误';
        this.operationFailed = '操作执行失败。';
        this.plsSelectEditData = '请选择要编辑的数据！';
        this.plsSelectViewData = '请选择要查看的数据！';
        this.plsUploadFirst = '请先上传附件！';
        this.defaultDialogTitle = '弹窗';
        this.changeToFirst = '已到达第一条数据';
        this.changeToLast = '已到达最后一条数据';
        this.noProcessInstanceId = '请指定流程实例标识。';
        this.noDataExist = '要编辑的数据不存在，无法进入编辑状态！';
        this.noAttachment = '没有可以预览的附件。';
        this.confirm = '确定';
        this.cancel = '取消';
        this.plsSelectCopyData = '请选择要复制的数据！';
        this.copyFieldsRequired = '要复制的字段不能为空！';
        this.pathIsRequired = '请求路径不能为空！';
        this.propsIsEmpty = '没有可以编辑的物料特征！';
        this.historyAttachment = '历史版本附件禁止删除！';
        this.plsSelectDownloadAtt = '请选择要下载的附件!';
        this.noDownloadAtt = '找不到要下载的附件!';
        this.plsCheckBatchEditRows = '请勾选要批量编辑的行！';
        this.plsSelectDetailFormData = '请先选择一条从表数据！';
        this.dataAndStateChanged = '确定要加载数据并切换到$1状态？';
        this.dataChanged = '确定要加载数据并放弃当前修改？';
        this.stateChanged = '确定要切换到$1状态？';
        this.defaultStateName = '初始';
        this.copy = '复制详细信息';
        this.copySuccess = '复制成功';
        this.copyFailed = '复制失败';
        this.roger = '知道了';
        this.appOrFuncIdRequired = '未配置菜单或应用参数，请在设计器中配置。';
        this.tableCanNotEmpty = '不能为空。';
        this.plsSelectRemoveAtt = '请选择要删除的附件!';
        this.plsSelectUpdateRow = '请选择要更新附件的行！';
    }
}

/**
 * 繁体中文语言消息
 */
class LanguageMessageForZhft {
    constructor() {
        this.yes = '是';
        this.no = '否';
        this.unsaveNotifyTitle = '存在未保存記錄。是否要保存？';
        this.clientNotifyTitle = '前端異常提示';
        this.serverNotifyTitle = '服務器端異常提示';
        this.cancelApproveSuccess = '取消提交成功！';
        this.cancelApproveFailed = '取消提交失敗！';
        this.unallowEmptyProcessInstanceName = '流程實例名稱不能為空';
        this.unallowEmptyBizBillId = '請選擇壹條數據';
        this.bizDefKeyRequired = '入口單據不能為空';
        this.unallowEmptyChildBizBillId = '從表業務單據編號不能為空！';
        this.procInsIdRequired = '流程實例id不能為空！';
        this.addChildFailed = '新增子級失敗';
        this.addSiblingFailed = '新增同級失敗';
        this.addSubChildFailed = '新增從表子級失敗';
        this.addSubSiblingFailed = '新增從表同級失敗';
        this.deleteFailed = '刪除失敗';
        this.multiSaveFailed = '批量保存失敗';
        this.appendFailed = '追加失敗';
        this.queryFailed = '查詢失敗';
        this.cancelFailed = '取消失敗';
        this.updateFailed = '更新失敗';
        this.addFailed = '新增失敗';
        this.loadFailed = '加載失敗';
        this.saveSuccess = '保存成功！';
        this.saveFailed = '保存失敗！';
        this.deleteSuccess = '刪除成功！';
        this.deleteFaild = '刪除失敗！';
        this.confirmDeletion = '確認刪除？';
        this.submitSuccess = '提交審批成功！';
        this.submitFaild = '提交審批失敗！';
        this.notifyTitle = '系統提示';
        this.httpError = 'HTTP請求錯誤！請檢查Server端錯誤！';
        this.gridDataNotSave = '當前頁數據未保存，翻頁將導致數據丟失，是否繼續翻頁？';
        this.exitWithoutSave = '存在未保存的數據，是否繼續關閉？';
        this.notSupportMenuType = '關閉的既不是菜單也不是應用。';
        this.cancelWithoutSave = '存在未保存的變更，確認取消？';
        this.plsSelectDeleteData = '請選擇要刪除的數據！';
        this.errorHierarchyKey = '錯誤的分級碼';
        this.plsSelectParentNode = '請選擇父節點';
        this.deleteChildFirst = '請先刪除子節點';
        this.incorrectHierarchyConfig = '分級碼配置信息錯誤';
        this.operationFailed = '操作執行失敗。';
        this.plsSelectEditData = '請選擇要編輯的數據！';
        this.plsSelectViewData = '請選擇要查看的數據！';
        this.plsUploadFirst = '請先上傳附件！';
        this.defaultDialogTitle = '彈窗';
        this.changeToFirst = '已到達第壹條數據';
        this.changeToLast = '已到達最後壹條數據';
        this.noProcessInstanceId = '請指定流程實例標識。';
        this.noDataExist = '要編輯的數據不存在，無法進入編輯狀態！';
        this.noAttachment = '沒有可以預覽的附件。';
        this.confirm = '確定';
        this.cancel = '取消';
        this.plsSelectCopyData = '請選擇要復制的數據！';
        this.copyFieldsRequired = '要復制的字段不能為空！';
        this.pathIsRequired = '請求路径不能為空！';
        this.propsIsEmpty = '沒有可以編輯的物料特征！';
        this.historyAttachment = '曆史版本附件禁止刪除！';
        this.plsSelectDownloadAtt = '請選擇要下載的附件!';
        this.noDownloadAtt = '找不到要下載的附件！';
        this.plsCheckBatchEditRows = '請勾選要批量編輯的行！';
        this.plsSelectDetailFormData = '請先選擇一條從表數據！';
        this.dataAndStateChanged = '確定要加載數據並切換到$1狀態？';
        this.dataChanged = '確定要加載數據並放棄當前修改？';
        this.stateChanged = '確定要切換到$1狀態？';
        this.defaultStateName = '初始';
        this.copy = '復制詳細信息';
        this.copySuccess = '復制成功';
        this.copyFailed = '復制失敗';
        this.roger = '知道了';
        this.appOrFuncIdRequired = '未配置菜單或應用參數，請在設計器中配置。';
        this.tableCanNotEmpty = '不能為空。';
        this.plsSelectRemoveAtt = '請選擇要刪除的附件!';
        this.plsSelectUpdateRow = '請選擇更新附件的行！';
    }
}

class LanguageMessageFactory {
    /**
     * Create an instance by language
     */
    static create(language) {
        if (this.languageMessageMap.has(language) === true) {
            return this.languageMessageMap.get(language);
        }
        let languageMessage;
        switch (language) {
            case 'zh-CHS':
                languageMessage = new LanguageMessageForZh();
                break;
            case 'en':
                languageMessage = new LanguageMessageForEn();
                break;
            case 'zh-CHT':
                languageMessage = new LanguageMessageForZhft();
                break;
            default:
                languageMessage = new LanguageMessageForZh();
                break;
        }
        this.languageMessageMap.set(language, languageMessage);
        return languageMessage;
    }
}
LanguageMessageFactory.languageMessageMap = new Map();

/**
 * 多语言服务
 * @scope FormModule
 */
class LanguageService {
    /**
     * 构造函数
     */
    constructor(localeId) {
        // #endregion
        /**
         * 当前语言
         */
        this.language = 'zh-CHS';
        this.language = localeId || 'zh-CHS';
        this.extendProperties();
        LanguageService.innerInstance = this;
    }
    /**
     * 当前语言包
     */
    get languageMessage() {
        return LanguageMessageFactory.create(this.language);
    }
    /**
     * 获取实例
     */
    static getInstance() {
        if (this.innerInstance) {
            return this.innerInstance;
        }
        const instance = new LanguageService('zh-CHS');
        LanguageService.innerInstance = instance;
        return instance;
    }
    /**
     * 扩展属性
     */
    extendProperties() {
        Object.keys(this.languageMessage).forEach((propName) => {
            Object.defineProperty(this, propName, {
                get: () => {
                    return this.languageMessage[propName];
                }
            });
        });
    }
}
/**
 * 单例对象
 */
LanguageService.innerInstance = null;
LanguageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LanguageService.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * 服务器端异常实体
 */

class DeviceAbility {
    /**
     * 复制到粘贴板
     * @param text
     * @returns
     */
    static copyToClipboard(text) {
        const windowRef = window;
        if (windowRef.clipboardData && windowRef.clipboardData.setData) {
            return windowRef.clipboardData.setData("Text", text);
        }
        else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");
            }
            catch (ex) {
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return false;
    }
}

/**
 * 异常处理基类
 */
class ExceptionStrategy {
    constructor(messagerService, languageService) {
        this.messagerService = messagerService;
        this.languageService = languageService;
    }
}
/** @nocollapse */
ExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 信息级别异常处理
 */
class InfoExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.messagerService.info(error.Message);
    }
}
/** @nocollapse */
InfoExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 警告级别异常处理
 */
class WarningExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.messagerService.warning(error.Message);
    }
}
/** @nocollapse */
WarningExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 错误级别异常处理
 */
class ErrorExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
        this.langService = null;
        this.langService = languageService;
        if (!this.langService) {
            this.langService = new LanguageService();
        }
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.handleErrorLevel(error);
    }
    handleErrorLevel(error) {
        const exceptionMsg = error.Message || '';
        const date = error.date || new Date();
        const localDate = moment(date).format('YYYY-MM-DD HH:mm:ss');
        const detail = error.Detail || `${error.Message}\r\n发生时间：${localDate}\r\n详细信息：${error.innerMessage}` || '';
        const innerMessage = error.innerMessage || null;
        let bsModalRef;
        const options = {
            // title: this.languageService.serverNotifyTitle,
            showMaxButton: false,
            buttons: [
                {
                    text: this.langService.roger,
                    cls: 'btn btn-primary btn-lg',
                    handle: () => {
                        bsModalRef.close();
                    }
                }
            ],
            // showHeader: false,
            width: 440,
            height: 200,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: this.langService.copy,
                    onClick: (e) => {
                        const result = DeviceAbility.copyToClipboard(detail);
                        const text = result ? this.langService.copySuccess : this.langService.copyFailed;
                        bsModalRef.content.showMiniNotify(text, 1500);
                    }
                }
            }
        };
        this.displayError(error);
        bsModalRef = this.messagerService.show('exception', exceptionMsg, options);
    }
    /**
     * 在控制台中显示错误信息
     */
    displayError(error) {
        if (!error) {
            return;
        }
        if (!console || !console.error) {
            return;
        }
        console.error(error);
    }
}
/** @nocollapse */
ErrorExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
/**
 * 致命错误级别异常处理
 */
class FatalExceptionStrategy extends ExceptionStrategy {
    constructor(messagerService, languageService) {
        super(messagerService, languageService);
    }
    handleException(error) {
        if (!error) {
            return;
        }
        this.messagerService.error(error.Message);
    }
}
/** @nocollapse */
FatalExceptionStrategy.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

class ExceptionFactory {
    /**
     * 构造函数
     * @param messagerService 消息服务
     * @param languageService 多语言服务
     */
    constructor(messagerService, languageService) {
        this.messagerService = messagerService;
        this.languageService = languageService;
    }
    /**
     * 获取工厂实例
     * @param messagerService 消息服务
     * @param languageService 多语言服务
     */
    static getInstance(messagerService, languageService) {
        if (!this.exceptionFactory) {
            this.exceptionFactory = new ExceptionFactory(messagerService, languageService);
        }
        return this.exceptionFactory;
    }
    /**
     * 获取异常处理策略
     * @param exceptionLevel 异常等级
     */
    getExceptionHandleStrategy(exceptionLevel) {
        let exceptionStrategy;
        switch (exceptionLevel) {
            case 0 /* Info */:
                exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 1 /* Warning */:
                exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 2 /* Error */:
                exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 3 /* Fatal */:
                exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);
                break;
            default:
                // 默认异常等级是错误
                exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                break;
        }
        return exceptionStrategy;
    }
}
/**
 * 异常工厂实例
 */
ExceptionFactory.exceptionFactory = null;
ExceptionFactory.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExceptionFactory.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

// https://github.com/typeslick/status-code-enum
var HttpStatusType;
(function (HttpStatusType) {
    HttpStatusType[HttpStatusType["Info"] = 1] = "Info";
    HttpStatusType[HttpStatusType["Success"] = 2] = "Success";
    HttpStatusType[HttpStatusType["Redirect"] = 3] = "Redirect";
    HttpStatusType[HttpStatusType["ClientError"] = 4] = "ClientError";
    HttpStatusType[HttpStatusType["ServerError"] = 5] = "ServerError";
})(HttpStatusType || (HttpStatusType = {}));
/**
 * http通用类
 */
class HttpUtil {
    /**
     * 基于http状态码返回状态类型
     * @param httpResponseSatus http请求返回状态码
     * @returns null | HttpStatusType
     */
    static getHttpStatusType(httpResponseSatus) {
        if (!httpResponseSatus) {
            return null;
        }
        let statusType = null; // 默认值为空
        if (httpResponseSatus < 100 || httpResponseSatus > 600) {
            statusType = null; // 不合理状态码
        }
        else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {
            statusType = HttpStatusType.Info;
        }
        else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {
            statusType = HttpStatusType.Success;
        }
        else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {
            statusType = HttpStatusType.Redirect;
        }
        else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {
            statusType = HttpStatusType.ClientError;
        }
        else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {
            statusType = HttpStatusType.ServerError;
        }
        return statusType;
    }
}

/**
 * 表单错误提示服务
 * @description 统一处理前后端异常
 */
class FormErrorService {
    constructor(msgService, languageService) {
        this.msgService = msgService;
        this.languageService = languageService;
    }
    /**
     * 异常路由方法
     */
    exception(message, error) {
        // 针对session失效做特殊处理
        if (error && error.hasOwnProperty('expired') && error['expired'] === true) {
            return;
        }
        if (error && this.isHttpErrorResponse(error)) {
            this.httpErrorHandler(error);
        }
        else {
            // todo: 细化异常处理后，继续拆解该方法
            this.commonErrorHandler(message);
        }
    }
    /**
     * http请求异常处理器
     */
    httpErrorHandler(httpError) {
        if (!httpError) {
            return;
        }
        const statusType = HttpUtil.getHttpStatusType(httpError.status);
        switch (statusType) {
            case HttpStatusType.ClientError:
                if (httpError.status === 401) {
                    this.msgService.http401Error(httpError);
                    break;
                }
                this.msgService.httpErrorInClient(httpError);
                break;
            case HttpStatusType.ServerError:
                this.msgService.httpErrorInServer(httpError);
                break;
            default:
                throw new Error('Get invalid status code when using httpErrorHandler method.');
        }
    }
    commonErrorHandler(errorMsg) {
        if (!errorMsg) {
            return;
        }
        this.msgService.error(errorMsg);
    }
    /**
     * httpErrorResponse like
     * @param error 异常
     */
    isHttpErrorResponse(error) {
        if (!error) {
            return false;
        }
        if (typeof error !== 'object') {
            return false;
        }
        if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {
            return true;
        }
        if (error instanceof HttpErrorResponse) {
            return true;
        }
        return false;
    }
}
FormErrorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormErrorService.ctorParameters = () => [
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

/**
 * 表单消息服务
 * @scope FormModule
 * @summary
 * 1、包装@farris/ui的消息服务；
 * 2、提供针对表单的快捷方法；
 */
class FormMessageService {
    /**
     * 构造函数
     * 注入@farris/ui的LoadingService
     */
    constructor(messagerService, languageService, curLanguage) {
        this.messagerService = messagerService;
        this.languageService = languageService;
        this.curLanguage = curLanguage;
        this.languageService = this.languageService || LanguageService.getInstance();
    }
    /**
     * question弹窗
     */
    question(content) {
        const confirmResult$ = this.confirmPromise(content);
        return from(confirmResult$);
    }
    /**
     * 带默认焦点的弹出提示
     * @param content 内容
     */
    question2(content) {
        const promise$ = new Promise((resolve, reject) => {
            const dialogRef = this.messagerService.question2(content, [
                {
                    text: this.languageService.no,
                    cls: 'btn btn-secondary',
                    handle: () => {
                        resolve(false);
                        dialogRef.close();
                    }
                },
                {
                    text: this.languageService.yes,
                    cls: 'btn btn-primary',
                    defaultFocus: true,
                    handle: () => {
                        resolve(true);
                        dialogRef.close();
                    }
                }
            ]);
        });
        return from(promise$);
    }
    /**
     * 弹出输入对话框
     * @param title 标题
     */
    prompt(title) {
        return this.messagerService.prompt(title);
    }
    /**
     * 使用Promise实例包装回调方法，以同步回调方法执行后结果
     * @param content
     */
    confirmPromise(content) {
        return new Promise((resolve, reject) => {
            this.messagerService.question(content, () => { resolve(true); }, () => { resolve(false); });
        });
    }
    /**
     * 确认弹框
     * @param content 弹出内容提示
     */
    confirm(content) {
        return this.messagerService.confirm(content);
    }
    /**
     * 消息弹框
     */
    info(content) {
        this.messagerService.info(content);
    }
    /**
     * 错误弹框
     */
    error(content) {
        this.messagerService.error(content);
    }
    /**
     * 警告弹框
     */
    warning(content) {
        this.messagerService.warning(content);
    }
    /**
     * 服务器端异常提示弹框
     */
    httpErrorInServer(httpError) {
        let error = httpError.error;
        if (typeof (error) === 'string') {
            try {
                error = JSON.parse(error);
            }
            catch (e) { }
        }
        if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
            this.messagerService.error(httpError.message);
            return;
        }
        const exceptionStrategy = ExceptionFactory.getInstance(this.messagerService, this.languageService).getExceptionHandleStrategy(error.Level);
        exceptionStrategy.handleException(error);
    }
    /**
     * 客户端异常提示弹框
     */
    httpErrorInClient(httpError) {
        if (!httpError) {
            return;
        }
        const message = httpError.error && httpError.error.error && httpError.error.error.message;
        const exceptionMsg = message || httpError.message && httpError.message.replace(/http:\/\/[a-zA-Z0-9.:]{1,}/, '');
        const options = {
            // title: this.languageService.clientNotifyTitle,
            // showMaxButton: true,
            showHeader: false,
            width: 400,
            height: 200,
            safeHtml: false
        };
        this.messagerService.show('error', exceptionMsg, options);
    }
    /**
     * 401异常处理
     * 为了独立弹出重新登录提示框，切换到运行框架http服务后可以删除
     * @param httpError 异常
     */
    http401Error(httpError) {
        const dialogShownKey = '401ErrorShownFlag';
        if (!httpError || window[dialogShownKey]) {
            return;
        }
        const i18n = {
            en: {
                title: 'Warning',
                sessionInvalid: 'Your login has expired, please login again.',
                ok: 'ok',
                cancel: 'cancel'
            },
            'zh-CHS': {
                title: '提示',
                sessionInvalid: '用户登录信息已失效，是否重新登录?',
                ok: '确认',
                cancel: '取消'
            }
        };
        this.curLanguage = this.curLanguage || 'zh-CHS';
        const messageOptions = {
            title: i18n[this.curLanguage].title,
            initialState: {
                okText: i18n[this.curLanguage].ok,
                okHandle: () => {
                    modalRef.close();
                    window[dialogShownKey] = false;
                    const eventResult = httpError && httpError.error || {};
                    const redirectUri = eventResult.redirect_uri || '/login.html';
                    window.location.href = `/logout.html#?logout-before-redirect=true&loginUri=${redirectUri}`;
                },
                cancelText: i18n[this.curLanguage].cancel,
                cancelHandle: () => {
                    modalRef.close();
                    window[dialogShownKey] = false;
                }
            },
            showHeader: true,
            width: 420,
            height: 180,
            fitContent: false
        };
        const modalRef = this.messagerService.show('question', i18n[this.curLanguage].sessionInvalid, messageOptions);
        window[dialogShownKey] = true;
        if (modalRef && modalRef.dialog && modalRef.dialog.instance.closed) {
            modalRef.dialog.instance.closed.subscribe(() => {
                window[dialogShownKey] = false;
            });
        }
    }
}
FormMessageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormMessageService.ctorParameters = () => [
    { type: MessagerService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * 通知服务
 * @scope FormModule
 * @description
 * 消息提示使用策略：成功使用success，失败使用error，警告使用warning，其他场景使用info
 */
class FormNotifyService {
    /**
     * 构造函数
     * 注入@farris/ui的NotifyService
     */
    constructor(notifyService, languageService) {
        this.notifyService = notifyService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 信息提示
     * @param content 内容
     */
    default(content) {
        return this.notifyService.default({
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        });
    }
    /**
     * 信息提示
     * @param content 内容
     */
    info(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        return this.notifyService.info(notifyOptions);
    }
    /**
     * 成功提示
     * @param content 内容
     * @param options? 选项 {shorTitle: false}
     */
    success(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        this.notifyService.success(notifyOptions);
    }
    /**
     * 警告提示
     * @param content 内容
     * @param options 选项
     */
    warning(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        this.notifyService.warning(notifyOptions);
    }
    /**
     * 错误提示
     * @param content 内容
     */
    error(content, options) {
        const notifyOptions = {
            title: this.languageService.notifyTitle,
            msg: content,
            timeout: 3000
        };
        if (options && options.hideTitle) {
            delete notifyOptions.title;
        }
        this.notifyService.error(notifyOptions);
    }
}
FormNotifyService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormNotifyService.ctorParameters = () => [
    { type: NotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

class FormWizardService {
    constructor(wizardSer) {
        this.wizardSer = wizardSer;
    }
    preStep() {
        const currentPageId = this.wizardSer.getCurrentPageId();
        this.wizardSer.updateWizardState(WizardEventType.Prev, currentPageId);
    }
    nextStep() {
        const currentPageId = this.wizardSer.getCurrentPageId();
        this.wizardSer.updateWizardState(WizardEventType.Next, currentPageId);
    }
    cancelWizard() {
        this.wizardSer.cancelWizard();
    }
    finishWizard() {
        this.wizardSer.finishWizard();
    }
}
FormWizardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormWizardService.ctorParameters = () => [
    { type: WizardService }
];

/**
 * 检查规则
 * @scope FormModule
 */
class CheckService {
    constructor() {
    }
    /**
     * 检查是否为空
     */
    checkEmpty(value) {
        return !!value;
    }
}
CheckService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CheckService.ctorParameters = () => [];

/**
 * 数据检查服务
 */
class DataCheckService {
    constructor(messageService, formNotifyService, languageService) {
        this.messageService = messageService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 编辑前检查
     */
    checkBeforeEdit(idToEdit) {
        const ifSkipCheck = this.ifSkipCheck(idToEdit);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToEdit) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });
        return empty();
    }
    /**
     * 查看前检查
     */
    checkBeforeView(idToView) {
        const ifSkipCheck = this.ifSkipCheck(idToView);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToView) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });
        return empty();
    }
    /**
     * 老表单跳过检查
     * @todo：待删除，兼容老表单
     */
    ifSkipCheck(id) {
        const context = this['context'];
        const params = context.command.params;
        // 表单没有重新保存过的情况
        if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {
            return true;
        }
        // 保存过但没有填参数的情况
        // @todo: 会漏掉空串的情况，目前主键解析的返回值是undefined，暂不考虑空串场景
        if (id === '') {
            return true;
        }
        return false;
    }
}
DataCheckService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataCheckService.ctorParameters = () => [
    { type: FormMessageService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

/**
 * 框架事件服务
 * @scope FormModule
 */
class EventService {
    constructor(eventBus) {
        this.eventBus = eventBus;
    }
    trigger(eventType, eventData, frameIds) {
        this.eventBus.trigger(eventType, eventData, frameIds);
    }
}
EventService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventService.ctorParameters = () => [
    { type: FrameEventBus }
];

// tslint:disable: no-unused-expression
/**
 * 菜单状态服务
 * @scope FormModule
 */
class MenuStateService {
    constructor() {
        this.COMMAND_SERVICE_LINK_STORAGE_KEY = 'COMMAND_SERVICE_LINK_STORAGE_KEY';
    }
    getState() {
        const data = !!sessionStorage && sessionStorage.getItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY) || null;
        if (!!data) {
            return JSON.parse(data);
        }
        return {};
    }
    setState(links) {
        !!sessionStorage && sessionStorage.setItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY, JSON.stringify(links));
    }
    addMenuState(parentMenuId, childMenuId, status = true) {
        if (!childMenuId) {
            return;
        }
        const state = this.getState();
        const isParentExist = !!state && state.hasOwnProperty(parentMenuId);
        const childItem = { id: childMenuId, status };
        if (isParentExist) {
            const parent = state[parentMenuId];
            const isChildItemExist = parent.find(item => item.id === childMenuId);
            if (!isChildItemExist) {
                state[parentMenuId].push(childItem);
            }
        }
        else {
            state[parentMenuId] = [childItem];
        }
        this.setState(state);
    }
    getMenuState(parentMenuId, childMenuId) {
        const state = this.getState();
        if (state === null) {
            return null;
        }
        const isParentExist = state.hasOwnProperty(parentMenuId);
        if (!isParentExist) {
            return null;
        }
        const parentMenu = state[parentMenuId];
        const childMenu = parentMenu.filter(item => item.status === true);
        if (typeof childMenuId === 'undefined' || childMenuId.length < 1) {
            return childMenu;
        }
        return parentMenu.filter(item => item.status && item.id === childMenuId);
    }
    updateMenuState(childMenuId, status) {
        const state = this.getState();
        if (state === null) {
            return;
        }
        Object.keys(state).forEach(key => {
            const childMenu = state[key].find(item => item.id === childMenuId);
            if (!!childMenu) {
                childMenu.status = status;
            }
        });
        this.setState(state);
    }
    removeMenu(menuId) {
        this.removeParentMenu(menuId);
        this.removeChildMenu(menuId);
    }
    removeParentMenu(menuId) {
        const state = this.getState();
        if (state === null) {
            return null;
        }
        Object.keys(state).forEach(item => {
            if (item === menuId && state[menuId].length < 1) {
                delete state[item];
            }
        });
        this.setState(state);
    }
    removeChildMenu(menuId) {
        const state = this.getState();
        if (state === null) {
            return;
        }
        Object.keys(state).forEach(parentMenuId => {
            const childMenus = state[parentMenuId];
            if (childMenus && childMenus.length > 0) {
                childMenus.forEach((child, index) => {
                    if (child.id === menuId) {
                        childMenus.splice(index, 1);
                    }
                });
            }
        });
        this.setState(state);
    }
}
MenuStateService.decorators = [
    { type: Injectable }
];

/*
 * @Author: Witt
 * @Date: 2018-11-15 15:56:11
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-07-09 16:23:04
 */
// tslint:disable: no-string-literal
/**
 * 路由服务
 * @scope FormModule
 */
class RouterService {
    constructor(router, routerParamService, frameworkService, appService, menuStateService, languageService) {
        this.router = router;
        this.routerParamService = routerParamService;
        this.frameworkService = frameworkService;
        this.appService = appService;
        this.menuStateService = menuStateService;
        this.languageService = languageService;
        /**
         * 上次切换的TabId
         */
        this.lastSwitchId = null;
        /**
         * 上次关闭的TabId
         */
        this.lastCloseId = null;
        // private menuStateService: MenuStateService = null;
        this.onClosed = null;
        if (!this.menuStateService) {
            this.menuStateService = new MenuStateService();
        }
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.onClosed = new Subject();
        this.registerEvent();
    }
    /**
     * 切换路由
     * @param url 菜单ID
     * @param params 路由参数
     */
    route(url, params) {
        url = this.router.createUrlTree([url]).toString();
        this.setParams(url, params);
        this.router.navigateByUrl(url);
    }
    /**
     * 注册运行框架事件
     */
    registerEvent() {
        const params = this.getParams(window.location.hash);
        const menuId = this.getAppId() || this.getFuncId();
        this.frameworkService.eventListner(this.frameworkService.FuncSwitch, e => {
            if (!e) {
                return;
            }
            const id = this.getOriginalId(e.id) || e.tabId;
            const menuState = this.menuStateService.getMenuState(id);
            if (!!id && menuId === id && !!menuState && menuState.length > 0) {
                this.formReload();
                this.lastSwitchId = id;
            }
        }, params);
        this.frameworkService.eventListner(this.frameworkService.FuncClosed, e => {
            if (!e) {
                return;
            }
            this.onClosed.next(e);
            const id = this.getOriginalId(e.id) || e.tabId;
            if (menuId === id) {
                return;
            }
            const menuState = this.menuStateService.getMenuState(menuId, id);
            // && id !== this.lastCloseId
            if (!!id && !!menuState && menuState.length > 0) {
                this.removeMenuState(id);
                this.formReload();
                this.lastCloseId = id;
            }
        }, params);
    }
    removeMenuState(tabId) {
        if (this['context']) {
            this.menuStateService.removeMenu(tabId);
        }
    }
    /**
     * 获取原始功能id
     * @param id id
     */
    getOriginalId(id) {
        if (!id) {
            return id;
        }
        if (id.indexOf('_') !== -1) {
            id = id.split('_')[0];
        }
        return id;
    }
    /**
     * 刷新组件数据
     */
    formReload() {
        try {
            this['context']['frameContext']['appContext']['refresh']();
        }
        catch (_a) { }
    }
    /**
     * 打开功能菜单
     * @param funcId 菜单内码
     * @param params 路由参数，形如： { key1: val1, key2: value2 }
     */
    openMenu(funcId, params, reload) {
        if (typeof reload === 'undefined' || typeof reload !== 'boolean') {
            reload = false;
        }
        const paramsMap = this.buildParamMap(params);
        const parentMenuId = this.getFuncId() || this.getAppId();
        this.menuStateService.addMenuState(parentMenuId, funcId);
        paramsMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);
        this.frameworkService.openFuncWithParam(funcId, paramsMap, reload);
    }
    /**
     * 打开应用
     * @param appId 应用内码
     * @param appEntrance 应用入口
     * @param params 路由参数，形如： { key1: val1, key2: value2 }
     */
    openApp(appId, appEntrance, params, reload) {
        if (typeof reload === 'undefined' || typeof reload !== 'boolean') {
            reload = false;
        }
        const paramMap = this.buildParamMap(params);
        const parentMenuId = this.getAppId() || this.getFuncId();
        this.menuStateService.addMenuState(parentMenuId, appId);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);
        if (!!this.appService) {
            this.appService.openApp(appId, appEntrance, paramMap, reload);
        }
    }
    /**
     * 构造参数
     */
    buildParamMap(params) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        return paramMap;
    }
    /**
     * 关闭功能菜单
     */
    closeMenu() {
        const funcId = this.getFuncId();
        const appId = this.getAppId();
        const { isDialogComponent, rootComponent } = this.findDialog();
        if (isDialogComponent) {
            const modalRef = this.get(rootComponent, 'dialogRef');
            modalRef['close']();
            return;
        }
        if (funcId !== null && typeof funcId === 'string' && funcId.length > 0) {
            this.closeFunc(funcId);
        }
        else if (appId !== null && typeof appId === 'string' && appId.length > 0) {
            const appEntrance = this.getAppEntrance();
            this.closeApp(appId, appEntrance);
        }
        else {
            console.error(this.languageService['notSupportMenuType']);
        }
    }
    /**
     * 查找弹窗组件
     */
    findDialog() {
        let frameContext = this.get(this, 'context.frameContext');
        let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        let parentFrameContext = this.get(frameContext, 'parent');
        while (parentFrameContext != null && !isDialogComponent) {
            frameContext = this.get(frameContext, 'parent');
            parentFrameContext = this.get(parentFrameContext, 'parent');
            isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        }
        const rootComponent = this.get(frameContext, 'frameComponent');
        return { isDialogComponent, rootComponent };
    }
    /**
     * loadsh get
     * @param object 对象
     * @param path 路径
     * @param defaultVal 默认值
     */
    get(object, path, defaultVal = null) {
        const PATH = Array.isArray(path)
            ? path
            : path.split('.').filter(i => i.length);
        if (!PATH.length) {
            return object === undefined ? defaultVal : object;
        }
        if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {
            return defaultVal;
        }
        return this.get(object[PATH.shift()], PATH, defaultVal);
    }
    /**
     * 关闭菜单
     * @param funcId 菜单id
     */
    closeFunc(funcId) {
        if (!funcId) {
            funcId = this.getFuncId();
        }
        if (!!this.frameworkService) {
            this.frameworkService.closeFunc(funcId).subscribe();
        }
    }
    /**
     * 关闭app
     * @param appId 应用id
     */
    closeApp(appId, appEntrance) {
        if (!appId) {
            appId = this.getAppId();
        }
        if (typeof appEntrance === 'undefined') {
            appEntrance = this.getAppEntrance();
        }
        if (!!this.appService) {
            this.appService.closeApp(appId, appEntrance).subscribe();
        }
    }
    /**
     * 设置参数
     * @param params 路由参数
     */
    setParams(url, params) {
        let paramsObj;
        if (typeof params === 'string' && params !== '') {
            paramsObj = JSON.parse(params);
        }
        else {
            paramsObj = params || {};
        }
        // 设置路由参数
        this.routerParamService.setParams(url, paramsObj);
    }
    /**
     * 获取funcId
     */
    getFuncId() {
        const hash = window.location.hash;
        if (!hash) {
            return null;
        }
        const params = this.decodeURLParams(hash);
        if (params && params.hasOwnProperty('funcId')) {
            return params.funcId;
        }
        else {
            return null;
        }
    }
    /**
     * 获取appId
     */
    getAppId() {
        const hash = window.location.hash;
        if (!hash) {
            return null;
        }
        const params = this.decodeURLParams(hash);
        if (params && params.hasOwnProperty('appId')) {
            return params.appId;
        }
        else {
            return null;
        }
    }
    getParentMenuId() {
        const hash = window.location.hash;
        if (!hash) {
            return null;
        }
        const params = this.decodeURLParams(hash);
        if (params && params.hasOwnProperty('WEB_FORM_ROUTER_PARENT_ID')) {
            return params.WEB_FORM_ROUTER_PARENT_ID;
        }
        else {
            return null;
        }
    }
    /**
     * 获取应用入口
     */
    getAppEntrance() {
        const hash = window.location.hash;
        if (!hash) {
            return null;
        }
        const params = this.decodeURLParams(hash);
        if (params && params.hasOwnProperty('appEntrance')) {
            return params.appEntrance;
        }
        else {
            return null;
        }
    }
    /**
     * 解码参数
     * @param query search|hash
     */
    decodeURLParams(query) {
        if (typeof query === 'undefined') {
            query = window.location.hash || window.location.search;
        }
        const hashes = query.slice(query.indexOf('?') + 1).split('&');
        return hashes.reduce((params, hash) => {
            const split = hash.indexOf('=');
            const key = hash.slice(0, split);
            const val = hash.slice(split + 1);
            return Object.assign(params, { [key]: decodeURIComponent(val) });
        }, {});
    }
    getParams(queryString) {
        if (!queryString) {
            return {};
        }
        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((params, hash) => {
            const split = hash.indexOf('=');
            const key = hash.slice(0, split);
            const val = hash.slice(split + 1);
            return Object.assign(params, { [key]: decodeURIComponent(val) });
        }, {});
    }
}
RouterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RouterService.ctorParameters = () => [
    { type: Router },
    { type: RouterParamService },
    { type: FrameworkService },
    { type: AppService, decorators: [{ type: Optional }] },
    { type: MenuStateService, decorators: [{ type: Optional }] },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

// tslint:disable: unified-signatures
const TAB_EVENT = {
    /**
     * Tab关闭后
     */
    onTabClosed: 'FuncClosed',
    /**
     * Tab关闭前
     */
    onTabClosing: 'beforeFuncCloseEvent',
    /**
     * Tab切换
     */
    onTabSwitched: 'funcSwitchEvent'
};
const TAB_QUERY_STRING = {
    TabId: 'tabId',
    AppType: 'appType',
    AppId: 'appId',
    AppEntrance: 'appEntrance',
    FuncId: 'funcId'
};
const WEB_FORM_ROUTE_PARAMS_KEY = 'WEB_FORM_ROUTE_PARAMS';
const INSIDE_DIALOG_TOKEN = new InjectionToken('@farris/command-service-inside-dialog');
const MODAL_REF = new InjectionToken('@farris/command-service-modal-ref');

/**
 * 查询参数服务
 * @scope FormModule
 */
class QuerystringService {
    /**
     * 解码参数
     * @param queryString search|hash
     */
    parse(queryString) {
        if (!queryString) {
            return {};
        }
        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((params, hash) => {
            const split = hash.indexOf('=');
            const key = hash.slice(0, split);
            const val = hash.slice(split + 1);
            return Object.assign(params, { [key]: decodeURIComponent(val) });
        }, {});
    }
}
QuerystringService.decorators = [
    { type: Injectable }
];

/*
 * @Author: aalizzwell
 * @Date: 2019-07-23 15:56:11
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-11-27 15:31:36
 */
/**
 * RuntimeFrameworkService
 * @scope @FormModule
 */
// tslint:disable: no-string-literal disable: max-line-length
class RuntimeFrameworkService {
    constructor() {
        this.rtfService = this.getService();
    }
    /**
     * 遍历获取rtf服务
     */
    getService() {
        let env = window;
        while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {
            env = env.parent;
        }
        return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};
    }
    // #region 导航服务
    /**
     * 打开菜单或应用
     * @param options options
     */
    openMenu(options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenu'] === 'function') {
            this.rtfService.func.openMenu(options);
        }
    }
    /**
     * 打开菜单或应用
     * @param options options
     */
    openMenu$(options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenuByStream'] === 'function') {
            return this.rtfService.func.openMenuByStream(options);
        }
        return EMPTY;
    }
    /**
     * 获取导航实体数据
     * @param tabId tabid
     * @param callback callback
     * @param once once
     */
    getEntityParam(tabId, callback, once = true) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getEntityParam'] === 'function') {
            this.rtfService.func.getEntityParam(tabId, callback, once);
        }
    }
    /**
     * 尝试关闭菜单或应用
     * @param options optins
     */
    beforeCloseMenu(options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['beforeClose'] === 'function') {
            this.rtfService.func.beforeClose(options);
        }
    }
    /**
     * 关闭菜单
     * @param options options
     */
    closeMenu(options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['close'] === 'function') {
            this.rtfService.func.close(options);
        }
    }
    /**
     * 获取菜单静态参数
     * @param funcId 菜单id
     * @param callback 回调
     */
    getMenuParams(funcId, callback) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getMenuParams'] === 'function') {
            this.rtfService.func.getMenuParams(funcId, callback);
        }
    }
    /**
     * 添加事件监听
     */
    addEventListener(token, handler, options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('frmEvent') && typeof this.rtfService['frmEvent']['eventListener'] === 'function') {
            this.rtfService.frmEvent.eventListener(token, handler, options);
        }
    }
    /**
     * 获取运行框架菜单切换控制事件
     * @returns Observable<any>
     */
    getMenuSwitchControlEvent() {
        const subject = new Subject();
        const frmEvent = this.rtfService && this.rtfService.frmEvent || null;
        if (frmEvent) {
            const tabId = this.tabId;
            const options = this.params;
            window.setTimeout(() => {
                frmEvent.eventListener(tabId, (response) => {
                    const menuSwitchControl = response && response.menuSwitchControl || null;
                    if (menuSwitchControl && menuSwitchControl.key === tabId) {
                        subject.next(menuSwitchControl.value);
                    }
                    else {
                        subject.next(null);
                    }
                }, options);
            }, 0);
        }
        return subject;
    }
    //#endregion
    // #region 适配层属性
    get params() {
        if (this.rtfService && this.rtfService.hasOwnProperty('session') && typeof this.rtfService['session']['getCommonVariable'] === 'function') {
            return this.rtfService['session']['getCommonVariable']();
        }
        return null;
    }
    /**
     * 获取tabId
     */
    get tabId() {
        return this.params && this.params['tabId'] || null;
    }
    /**
     * 获取formToken
     */
    get formToken() {
        return this.params && this.params['formToken'] || null;
    }
    /**
     * 获取funcId
     */
    get funcId() {
        return this.params && this.params['funcId'] || null;
    }
    // #endregion
    // #region 事件通信
    /**
     * 注册主题
     * @param code 主题的标识
     * @param options token生成规则
     * @param subject 自定义主题，默认使用Subject
     * @returns string 注册成功后返回主题的唯一标识
     */
    subjectRegister(code, options, subject) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRegister'] === 'function') {
            return this.rtfService.broadcast.subjectRegister(code, options, subject);
        }
        return null;
    }
    /**
     * 移除主题
     * @param token 主题唯一标识
     */
    subjectRemove(token) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRemove'] === 'function') {
            this.rtfService.broadcast.subjectRemove(token);
        }
    }
    /**
     * 给主题发送消息
     * @param token 主题标识
     * @param info 消息
     */
    subjectNotify(token, info) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['notify'] === 'function') {
            this.rtfService.broadcast.notify(token, info);
        }
    }
    /**
     * 注册主题监听器
     * @param token 主题标识
     * @param handler 主题处理器
     * @param observerToken 监听器id(可选)
     * @returns 监听器Id
     * @description 监听主题消息，监听成功返回当前监听者的唯一标识
     */
    subjectResponse(token, handler, observerToken) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['response'] === 'function') {
            let code = observerToken;
            if (typeof observerToken === 'undefined' || !observerToken || observerToken.length < 1) {
                code = UID.create();
            }
            this.rtfService.broadcast.response(token, code, handler);
            return code;
        }
        return null;
    }
    /**
     * 取消对主题的监听
     * @param token 主题标识
     * @param observerToken 监听器标识
     */
    responseUnSubscribe(token, observerToken) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['responseUnSubscribe'] === 'function') {
            this.rtfService.broadcast.responseUnSubscribe(token, observerToken);
        }
    }
    // #endregion
    // #region 工具函数
    /**
     * 是否同源
     * @param environment window
     */
    isSameOrigin(environment) {
        const host = window.location.host;
        try {
            if (environment && environment.location && typeof environment.location.host !== 'undefined') {
                return environment.location.host === host;
            }
        }
        catch (e) {
            return false;
        }
        return false;
    }
}
RuntimeFrameworkService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RuntimeFrameworkService.ctorParameters = () => [];

/**
 * 导航事件服务
 * @scope FormModule
 */
class NavigationEventService {
    constructor(runtimeFrameworkService, menuStateService, querystringService) {
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.menuStateService = menuStateService;
        this.querystringService = querystringService;
        this.onClosedListeners = new Map();
        this.onClosingListeners = new Map();
        this.onTabSwitchListeners = new Map();
    }
    get querystrings() {
        const params = this.querystringService.parse(window.location.hash);
        // 修正formToken
        if (params) {
            params.formToken = this.runtimeFrameworkService.formToken;
        }
        return params;
    }
    /**
     * 注册事件
     */
    registerEvent() {
        const options = this.querystrings;
        this.params = options;
        // 注册标签页切换事件
        this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabSwitched, (e) => this.handleTabSwitchEvent(e), options);
        // 注册标签页关闭后事件
        this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosed, (e) => this.handleTabClosedEvent(e), options);
        // 注册标签页关闭前事件
        this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosing, (e) => this.handleTabClosingEvent(e), options);
    }
    /**
     * 处理标签页切换事件
     */
    handleTabSwitchEvent(e) {
        if (!e) {
            return;
        }
        // 选中的表单为系统表单，只能返回id，没有tabId
        const eventTabId = e.tabId || e.id || null;
        if (!eventTabId) {
            return;
        }
        const options = this.params; // this.querystrings;
        const tabId = options.tabId || options.funcId || options.appId;
        const menuState = this.menuStateService.getMenuState(eventTabId);
        if (!!tabId && tabId === eventTabId && !!menuState && menuState.length > 0) {
            this.formReload();
        }
        this.fireTabSwitchEvent(e);
    }
    /**
     * 触发tab切换事件
     * @param e e
     */
    fireTabSwitchEvent(e) {
        if (!this.onTabSwitchListeners || this.onTabSwitchListeners.size < 1) {
            return;
        }
        this.onTabSwitchListeners.forEach((handle, key, map$$1) => {
            if (typeof handle === 'function') {
                handle(e);
            }
        });
    }
    /**
     * 标签页关闭前事件
     */
    handleTabClosingEvent(e) {
        if (!e) {
            return;
        }
        // 要关闭的表单为系统表单，只能返回id，没有tabId
        const eventTabId = e.tabId || e.id || null;
        const options = this.params; // this.querystrings;
        const tabId = options.tabId || options.funcId || options.appId;
        if (!!eventTabId && !!tabId && tabId === eventTabId) {
            this.fireTabClosingEvent(e).subscribe((result) => {
                if (result) {
                    setTimeout(() => this.removeMenuState(eventTabId), 500);
                    const formEventServices = window['formEventServices'];
                    if (formEventServices.has(eventTabId)) {
                        formEventServices.delete(eventTabId);
                        window['formEventServices'] = formEventServices;
                    }
                    if (!(e && e.hasOwnProperty('token'))) {
                        e = Object.assign({}, e, { token: options.formToken });
                    }
                    // TODO:不再主动销毁appContext，可能存在内存泄漏问题
                    // if (this.frameContext && this.frameContext.appContext) {
                    //   this.frameContext.appContext.dispose();
                    // }
                    this.runtimeFrameworkService.closeMenu(e);
                }
            });
        }
    }
    /**
     * 触发关闭前事件
     */
    fireTabClosingEvent(e) {
        if (!this.onClosingListeners || this.onClosingListeners.size < 1) {
            return of(true);
        }
        const listeners = this.onClosingListeners.values();
        const result$ = from(listeners);
        // 用户拒绝
        let userRejected = false;
        return result$.pipe(concatMap((handle) => {
            if (userRejected) {
                return EMPTY;
            }
            return handle(e).pipe(take(1), tap((result) => userRejected = !result), switchMap((result) => of(result)));
        }), every((result) => result));
    }
    /**
     * 标签页关闭后事件
     */
    handleTabClosedEvent(e) {
        if (!e) {
            return;
        }
        const options = this.params; // this.querystrings;
        const tabId = options.tabId || options.funcId || options.appId;
        const eventTabId = e.tabId || e.id || null;
        if (tabId === eventTabId) {
            return;
        }
        const menuState = this.menuStateService.getMenuState(tabId, eventTabId);
        if (!!eventTabId && !!menuState && menuState.length > 0) {
            this.removeMenuState(eventTabId);
            this.formReload();
        }
        this.fireTabClosedEvent(e);
    }
    removeMenuState(tabId) {
        if (this['context']) {
            this.menuStateService.removeMenu(tabId);
        }
    }
    /**
     * 触发关闭后事件
     * @param e event
     */
    fireTabClosedEvent(e) {
        if (!this.onClosedListeners || this.onClosedListeners.size < 1) {
            return;
        }
        this.onClosedListeners.forEach((handle, key, map$$1) => {
            if (typeof handle === 'function') {
                handle(e);
            }
        });
    }
    // #endregion
    /**
     * 注册事件监听器
     * @param eventType 事件类型 onTabClosed
     * @param handler 处理器
     */
    addEventListener(eventType, handler) {
        const key = UID.create();
        if (eventType === TAB_EVENT.onTabClosed) {
            this.onClosedListeners.set(key, handler);
            return key;
        }
        else if (eventType === TAB_EVENT.onTabClosing) {
            this.onClosingListeners.set(key, handler);
            return key;
        }
        else if (eventType === TAB_EVENT.onTabSwitched) {
            this.onTabSwitchListeners.set(key, handler);
            return key;
        }
        return null;
    }
    /**
     * 移除事件监听器
     * @param eventType 事件类型
     * @param key 事件标识
     */
    removeEventListener(eventType, key) {
        if (eventType === TAB_EVENT.onTabClosed) {
            return this.onClosedListeners.delete(key);
        }
        else if (eventType === TAB_EVENT.onTabClosing) {
            return this.onClosingListeners.delete(key);
        }
        return false;
    }
    /**
     * 清空事件监听器
     * @param eventType 事件类型
     */
    clearEventListener(eventType) {
        if (eventType === TAB_EVENT.onTabClosed) {
            this.onClosedListeners.clear();
        }
        else if (eventType === TAB_EVENT.onTabClosing) {
            this.onClosingListeners.clear();
        }
    }
    /**
     * 刷新组件数据
     */
    formReload() {
        try {
            // tslint:disable-next-line: no-string-literal
            this['context']['frameContext']['appContext']['refresh']();
        }
        catch (_a) { }
    }
}
NavigationEventService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NavigationEventService.ctorParameters = () => [
    { type: RuntimeFrameworkService },
    { type: MenuStateService },
    { type: QuerystringService }
];

const FARRIS_FORM_COMPONENTS = new InjectionToken('表单弹出窗口或隐藏组件列表');
/**
 * 表单服务
 * @scope FormModule
 */
class FarrisFormService {
    constructor(initCtrls = {}) {
        this.controls = {};
        if (!initCtrls) {
            initCtrls = {};
        }
        this.controls = Object.assign({}, initCtrls);
    }
    append(key, cmpIns) {
        this.controls[key] = cmpIns;
    }
    getControls(key) {
        if (this.controls[key]) {
            return this.controls[key];
        }
        else {
            console.warn(`未找到Key为${key}的组件！`);
            return null;
        }
    }
}
FarrisFormService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FarrisFormService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FARRIS_FORM_COMPONENTS,] }] }
];

/*
 * @Author: aalizzwell
 * @Date: 2019-08-02 15:31:34
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2020-03-03 09:33:43
 */
// tslint:disable: no-string-literal max-line-length
const APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';
/**
 * 导航服务
 * @scope FormModule
 */
class NavigationService {
    constructor(runtimeFrameworkService, menuStateService, navigationEventService, querystringService, frameContext, injector, languageService
    // @Optional() private pageModalService: FEPageModalService,
    // @Optional() private farrisFormService: FarrisFormService,
    // @Optional() private languageService: LanguageService
    ) {
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.menuStateService = menuStateService;
        this.navigationEventService = navigationEventService;
        this.querystringService = querystringService;
        this.frameContext = frameContext;
        this.injector = injector;
        this.languageService = languageService;
        // appId不同于tabId，每次表单实例化时都会重新生成
        const appId = this.formAppContext && this.formAppContext.ApplicationId;
        let tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        // 已经编译的表单，使用appId记录hash
        if (appId) {
            const appContextManager = window[APP_CONTEXT_MANAGER] || new Map();
            if (appContextManager && !appContextManager.has(appId)) {
                appContextManager.set(appId, { hash: window.location.hash });
                window[APP_CONTEXT_MANAGER] = appContextManager;
            }
        }
        if (tabId) {
            const formEventServices = window['formEventServices'] || new Map();
            // tabId、appId都存在时，使用appId替换tabId
            if (appId) {
                tabId = appId;
            }
            if (formEventServices && formEventServices.has(tabId)) {
                this.navigationEventService = formEventServices.get(tabId);
            }
            else {
                this.navigationEventService.registerEvent();
                formEventServices.set(tabId, this.navigationEventService);
                this.navigationEventService.frameContext = this.frameContext;
                window['formEventServices'] = formEventServices;
                this.registerDestroyEvent(tabId);
            }
        }
        if (!languageService) {
            this.languageService = new LanguageService();
        }
    }
    set context(context) {
        this.navigationEventService['context'] = context;
        this['commandContext'] = context;
    }
    /**
     * 获取整个表单的appcontext（除module上的appcontext）
     */
    get formAppContext() {
        if (this.frameContext) {
            let appContext = this.frameContext.appContext;
            // tslint:disable-next-line: max-line-length
            while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(FrameContext, null) !== null) {
                appContext = appContext.parent;
            }
            return appContext;
        }
        return null;
    }
    get querystrings() {
        let hash = window.location.hash;
        const appId = this.formAppContext && this.formAppContext.ApplicationId;
        if (appId) {
            const appContextManager = window[APP_CONTEXT_MANAGER];
            const appContext = appContextManager && appContextManager.get(appId);
            hash = appContext && appContext.hash || hash;
        }
        const params = this.querystringService.parse(hash);
        if (params) {
            params.formToken = this.runtimeFrameworkService.formToken;
        }
        return params;
    }
    /**
     * 提示服务
     */
    get formNotifyService() {
        return this.injector && this.injector.get(FormNotifyService, null);
    }
    /**
     * 注册销毁事件
     * @param tabId
     */
    registerDestroyEvent(tabId) {
        if (this.frameContext && this.frameContext.destorySignal) {
            this.frameContext.destorySignal.subscribe(() => {
                this.navigationEventService = null;
            });
        }
        if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {
            this.frameContext.appContext.destorySignal.subscribe(() => {
                const formEventServices = window['formEventServices'];
                if (formEventServices) {
                    formEventServices.delete(tabId);
                }
                const appContextManager = window[APP_CONTEXT_MANAGER];
                if (appContextManager) {
                    appContextManager.delete(tabId);
                }
            });
        }
    }
    // #region 接口
    /**
     * 打开菜单
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param tabName tab标题
     * @param destructuring 是否解构参数
     */
    openMenu(tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
        if (!funcId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        // const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: queryStringParams,
            appId: undefined,
            appEntrance: undefined,
            isReload: reload,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
        // null false "false" "true" undefined
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            const frameworkTabId = tabId ? `${funcId}_${tabId}` : funcId;
            this.menuStateService.addMenuState(currentTabId, frameworkTabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    }
    /**
     * 打开菜单（流）
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    openMenu$(tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
        if (!funcId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        // const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: queryStringParams,
            appId: undefined,
            appEntrance: undefined,
            isReload: reload,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            const frameworkTabId = tabId ? `${funcId}_${tabId}` : funcId;
            this.menuStateService.addMenuState(currentTabId, frameworkTabId);
        }
        return this.runtimeFrameworkService.openMenu$(options);
    }
    /**
     * 打开菜单(带维度)
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param dim1 dim1
     * @param dim2 dim2
     * @param destructuring 解构参数
     */
    openMenuWithDimension(tabId, funcId, params, enableRefresh, dim1, dim2, tabName, metadataId, destructuring) {
        if (!funcId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        if (metadataId === undefined || metadataId === null) {
            metadataId = '';
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        // const paramsMap = this.buildParamMap(params);
        queryStringParams.set('dim1', dim1 ? dim1 : 'public');
        queryStringParams.set('dim2', dim2 ? dim2 : 'public');
        queryStringParams.set('metadataId', metadataId);
        queryStringParams.set('isRtc', '1');
        queryStringParams.set('isRootMetadata', 'true');
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: queryStringParams,
            appId: undefined,
            appEntrance: undefined,
            isReload: false,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
        // null false "false" "true" undefined
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            const frameworkTabId = tabId ? `${funcId}_${tabId}` : funcId;
            this.menuStateService.addMenuState(currentTabId, frameworkTabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    }
    /**
     * 打开应用
     * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param appId 应用Id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param reload 是否重新刷新
     * @param tabName tab标题
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    openApp(tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
        if (!appId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        // const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            appId,
            appEntrance,
            funcId: undefined,
            appType: AppType.App,
            queryStringParams: queryStringParams,
            entityParams: queryStringParams,
            isReload: reload,
            tabName: tabName || null
        };
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            const frameworkTabId = tabId ? `${appId}_${appEntrance}_${tabId}` : `${appId}_${appEntrance}`;
            this.menuStateService.addMenuState(currentTabId, frameworkTabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    }
    /**
     * 打开应用(流式)
     * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param appId 应用Id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param reload 是否重新刷新
     * @param tabName tab标题
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    openApp$(tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
        if (!appId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        // const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            appId,
            appEntrance,
            funcId: undefined,
            appType: AppType.App,
            queryStringParams: queryStringParams,
            entityParams: queryStringParams,
            isReload: reload,
            tabName: tabName || null
        };
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            const frameworkTabId = tabId ? `${appId}_${appEntrance}_${tabId}` : `${appId}_${appEntrance}`;
            this.menuStateService.addMenuState(currentTabId, frameworkTabId);
        }
        return this.runtimeFrameworkService.openMenu$(options);
    }
    /**
     * 关闭
     * @param onCloseing 关闭前事件处理器
     */
    close() {
        const options = this.querystrings;
        const { isDialogComponent: isInDialog, rootComponent } = this.findDialog();
        if (isInDialog) {
            const modalRefFactory = this.get(rootComponent, 'dialogRef');
            let modalRef = null;
            if (typeof modalRefFactory === 'function') {
                const refs = modalRefFactory();
                modalRef = refs && refs.modalRef;
            }
            else {
                modalRef = modalRefFactory;
            }
            modalRef && modalRef['close']();
            return;
        }
        options.token = options.formToken;
        this.runtimeFrameworkService.beforeCloseMenu(options);
    }
    /**
     * 强制关闭
     */
    destory() {
        const options = this.querystrings;
        options.token = options.formToken;
        this.runtimeFrameworkService.closeMenu(options);
    }
    /**
     *
     * @param params params
     * @deprecated 待废弃，与buildParamMap重复
     */
    parseParams(params) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        return paramMap;
    }
    /**
     * 注册事件监听器
     * @param eventType 事件类型 onTabClosed
     * @param handler 处理器
     * @returns string 返回事件标识
     */
    addEventListener(eventType, handler) {
        return this.navigationEventService.addEventListener(eventType, handler);
    }
    /**
     * 移除事件监听器
     * @param eventType 事件类型 onTabClosed | onTabCloseing
     * @param key 事件标识
     */
    removeEventListener(eventType, key) {
        return this.navigationEventService.removeEventListener(eventType, key);
    }
    /**
     * 清空事件监听器
     * @param eventType 事件类型
     */
    clearEventListener(eventType) {
        this.navigationEventService.clearEventListener(eventType);
    }
    /**
     * 以弹框、侧边栏或新标签页方式打开表单
     * @param mode 打开方式，支持`modal`弹窗、`sidebar`侧边栏、`tab`新标签页
     * @param modalId 弹窗id，如果mode=`modal`且没有url，
     * @param configs 弹窗配置
     * @param url 远端表单url
     * @param tabId 标签页id，modal=tab时必填
     * @param tabType 标签页类型，`menu` 或`app`
     * @param funcOrAppId 菜单或应用id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param tabName 新标签页名称
     * @param enableRefresh 启用启动刷新
     * @param destructuring 是否解构
     */
    open(mode, modalId, url, configs, tabId, tabType, funcOrAppId, appEntrance, params, tabName, enableRefresh, destructuring) {
        const pageModalService = this.injector.get(FEPageModalService, null);
        if (!pageModalService) {
            throw new Error('get FEPageModalService failed.');
        }
        // 校验参数是否合法
        if (!mode) {
            throw new Error('[NavigationService]->open,mode参数不能为空！');
        }
        if (mode === 'modal' || mode === 'sidebar') {
            if (!modalId && !url) {
                throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时为空！');
            }
            if (modalId && url) {
                throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时存在！');
            }
            const uiStateConfig = this.getObjectTypeConfig(params);
            const modalConfig = this.buildConfigs(configs);
            if (mode === 'sidebar') {
                modalConfig.dialogType = mode;
            }
            let pageModalRef = null;
            if (modalId) {
                const farrisFormService = this.injector.get(FarrisFormService, null);
                if (!farrisFormService) {
                    return;
                }
                const componentType = farrisFormService.getControls(modalId);
                const componentRef = this.createComponentRef(componentType, uiStateConfig);
                pageModalRef = pageModalService.show(componentRef, modalConfig);
            }
            else if (url) {
                pageModalRef = pageModalService.showByUrl(url, modalConfig);
            }
            if (pageModalRef && !!pageModalRef.content) {
                pageModalRef.content.isDialogRootComponent = true;
                pageModalRef.content.dialogRef = pageModalRef;
                const header = pageModalRef.dialog && pageModalRef.dialog.instance && pageModalRef.dialog.instance.el && pageModalRef.dialog.instance.el.nativeElement && pageModalRef.dialog.instance.el.nativeElement.querySelector(".f-page-header");
                if (header && pageModalRef.dialog.instance.draggbar) {
                    pageModalRef.dialog.instance.draggbar.handle = header;
                    header.style.cursor = 'move';
                }
            }
        }
        else if (mode === 'tab') {
            if (!tabId || !tabType || !funcOrAppId) {
                if (this.formNotifyService) {
                    this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                }
                throw new Error('新标签模式时标签页id、标签类型、菜单或应用id均不能为空！');
            }
            if (tabType === 'app' && !appEntrance) {
                throw new Error('以应用方式打开时入口应用不能为空！');
            }
            if (tabType == 'app') {
                this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);
            }
            else if (tabType === 'menu') {
                this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);
            }
        }
        else {
            throw new Error('不支持的模式！');
        }
        // this.pageModalService.
    }
    /**
     * in app navigate
     * @param commands commands
     */
    // public navigate(commands: any[]);
    /**
     * in app navigate
     * @param commands commands
     * @param options options
     * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}
     */
    navigate(commands, options) {
        const router = this.injector && this.injector.get(Router, null);
        const activatedRoute = this.injector && this.injector.get(ActivatedRoute, null);
        const queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});
        if (options && options.hasOwnProperty('queryParams')) {
            delete options.queryParams;
        }
        const extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams }, options || {});
        if (router) {
            return router.navigate(commands, extras);
        }
        else {
            return null;
        }
    }
    // #endregion
    // #region 私有方法
    /**
     * 封装路由参数
     * @param params 参数
     * @param options 配置参数
     */
    buildParamMap(params, options) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (options && Object.keys(options).length > 0) {
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            params = lodash.merge(params, options);
        }
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
        return paramMap;
    }
    buildParam(params, options) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (options && Object.keys(options).length > 0) {
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            params = lodash.merge(params, options);
        }
        if (typeof params !== 'object') {
            params = JSON.parse(params);
        }
        Object.keys(params).forEach(key => {
            paramMap.set(key, params[key]);
        });
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        params = window['encodeURIComponent'](JSON.stringify(params));
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
        return paramMap;
    }
    /**
     * 查找弹窗组件
     */
    findDialog() {
        let frameContext = this.get(this, 'commandContext.frameContext');
        let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        let rootComponent = null;
        let parentFrameContext = this.get(frameContext, 'parent');
        while (parentFrameContext != null && !isDialogComponent) {
            frameContext = this.get(frameContext, 'parent');
            parentFrameContext = this.get(parentFrameContext, 'parent');
            isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        }
        rootComponent = this.get(frameContext, 'frameComponent');
        if (!isDialogComponent) {
            isDialogComponent = this.frameContext.injector.get(INSIDE_DIALOG_TOKEN, false);
            if (isDialogComponent) {
                const modalRef = this.frameContext.injector.get(MODAL_REF, null);
                rootComponent = { dialogRef: modalRef };
            }
        }
        return { isDialogComponent, rootComponent };
    }
    /**
     * loadsh get
     * @param object 对象
     * @param path 路径
     * @param defaultVal 默认值
     */
    get(object, path, defaultVal = null) {
        const PATH = Array.isArray(path)
            ? path
            : path.split('.').filter(i => i.length);
        if (!PATH.length) {
            return object === undefined ? defaultVal : object;
        }
        if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {
            return defaultVal;
        }
        return this.get(object[PATH.shift()], PATH, defaultVal);
    }
    convertToBoolean(value, defaultVal = false) {
        if (typeof value === 'undefined' || value === null) {
            value = defaultVal;
        }
        if (typeof value === 'string') {
            value = value || String(defaultVal);
            value = value === 'true' ? true : false;
        }
        return value;
    }
    /**
     * 翻译资源项
     * @param key 资源项key
     */
    translate(key) {
        const translateService = this.injector && this.injector.get(TranslateToken, null) || null;
        if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {
            key = key.replace('{{', '').replace('}}', '').trim();
            return translateService.transform(key, null);
        }
        return key;
    }
    // #endregion
    //#region 弹窗相关方法
    buildConfigs(config) {
        let languageService = this.injector.get(LanguageService, null);
        if (!languageService) {
            languageService = LanguageService.getInstance();
        }
        const defaultConfigs = {
            title: languageService && languageService.defaultDialogTitle || '',
            width: 800,
            height: 500,
            showButtons: false
        };
        const objectTypeConfig = this.getObjectTypeConfig(config);
        const configs = Object.assign(defaultConfigs, objectTypeConfig);
        const onClosingHandler = configs.beforeClose;
        const refresh = configs['refresh'] || {};
        const refreshCommandName = refresh && refresh.commandName || null;
        const refreshFrameId = refresh && refresh.frameId || null;
        // tslint:disable: no-string-literal
        const cancelChanges = configs['cancelChanges'] || false;
        configs.beforeClose = (ref) => {
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap(result => {
                    if (result) {
                        if (cancelChanges) {
                            return this.cancelChanges(ref).pipe(switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId)));
                        }
                    }
                    return of(result);
                }));
            }
            else {
                if (cancelChanges) {
                    return this.cancelChanges(ref).pipe(switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId)));
                }
                else {
                    return of(true);
                }
            }
        };
        return configs;
    }
    getObjectTypeConfig(config) {
        let objectTypeConfig;
        if (typeof config === 'undefined') {
            config = {};
        }
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    }
    /**
     * 取消服务器变更集
     */
    cancelChanges(ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            const component = ref.modalRef.content;
            if (component && component.context) {
                const repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(() => of(true)));
                }
            }
        }
        return of(true);
    }
    refreshForm(refreshCommandName, refreshFrameId) {
        if (refreshCommandName && refreshFrameId) {
            const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);
            if (frameContext) {
                const viewModel = frameContext.viewModel;
                return viewModel[refreshCommandName]().pipe(map(() => true));
            }
        }
        return of(true);
    }
    createComponentRef(componentType, uiStateObject) {
        let componentRef;
        const frameContext = this.getFrameContext();
        const componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);
            const modalContentInjector = ReflectiveInjector.resolveAndCreate([], frameContext.injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach(item => {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
        }
        return componentRef;
    }
    /**
     * 兼容旧弹窗，获取frameContext
     */
    getFrameContext() {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    }
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    getComponentFactoryResolver() {
        const frameContext = this.getFrameContext();
        let componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    }
}
NavigationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NavigationService.ctorParameters = () => [
    { type: RuntimeFrameworkService },
    { type: MenuStateService },
    { type: NavigationEventService },
    { type: QuerystringService },
    { type: FrameContext, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

const IS_ADD = 'IS_ADD';
const LAST_MODIFIED_ID = 'LAST_MODIFIED_ID';
/**
 * 表单状态工具类
 * @internal
 */
class EditStateUtil {
    /**
     * 获取当前行id
     */
    static getLastModifiedId(frameContext) {
        // const lastModifiedId = AppParamUtil.get(frameContext, LAST_MODIFIED_ID);
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        let lastModifiedId = null;
        if (virtualRootFrameContext) {
            lastModifiedId = virtualRootFrameContext.getParam(LAST_MODIFIED_ID);
            return lastModifiedId ? lastModifiedId : null;
        }
        return lastModifiedId;
    }
    /**
     * 设置最后修改的id
     */
    static setLastModifiedId(frameContext, lastModifiedId) {
        // AppParamUtil.set(frameContext, LAST_MODIFIED_ID, lastModifiedId);
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        if (virtualRootFrameContext) {
            virtualRootFrameContext.setParam(LAST_MODIFIED_ID, lastModifiedId);
        }
    }
    /**
     * 获取新增状态
     */
    static getAddState(frameContext) {
        // return AppParamUtil.get(frameContext, IS_ADD);
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        if (virtualRootFrameContext) {
            return virtualRootFrameContext.getParam(IS_ADD);
        }
    }
    /**
     * 设置新增状态
     */
    static setAddState(frameContext, lastModifiedId) {
        // AppParamUtil.set(frameContext, IS_ADD, true);
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        if (virtualRootFrameContext) {
            virtualRootFrameContext.setParam(IS_ADD, true);
        }
        this.setLastModifiedId(frameContext, lastModifiedId);
    }
    /**
     * 取消新增状态
     */
    static cancelAddState(frameContext) {
        // AppParamUtil.set(frameContext, IS_ADD, false);
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        if (virtualRootFrameContext) {
            virtualRootFrameContext.setParam(IS_ADD, false);
        }
    }
    /**
     * 设置编辑状态
     */
    static setEditState(frameContext, id) {
        // AppParamUtil.set(frameContext, IS_ADD, false);
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        if (virtualRootFrameContext) {
            virtualRootFrameContext.setParam(IS_ADD, false);
        }
        this.setLastModifiedId(frameContext, id);
    }
}

/**
 * 应用上下文变量工具类
 * @internal
 */

class FormNotifyStrategyService {
    /**
     * 消息提示
     * @param formNotifyService formNotifyService
     * @param content content
     */
    static info(formNotifyService, content) {
        const search = window.location.hash;
        const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);
        if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {
            return;
        }
        formNotifyService.info(content, { hideTitle: true });
    }
    /**
     * 成功提示
     * @param formNotifyService formNotifyService
     * @param content content
     */
    static success(formNotifyService, content) {
        const search = window.location.hash;
        const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);
        if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {
            return;
        }
        formNotifyService.success(content, { hideTitle: true });
    }
    static querystring(querystring) {
        const urlSearchParams = new URLSearchParams(querystring);
        const result = {};
        urlSearchParams.forEach((value, key) => {
            result[key] = value;
        });
        return result;
    }
}

/**
 * 命令服务
 * @scope FrameConmponent
 */
class CommandService {
    constructor(viewModel, appContext) {
        this.viewModel = viewModel;
        this.appContext = appContext;
    }
    /**
     * context取值方法
     */
    get context() {
        return this.innerContext;
    }
    /**
     * context设值方法
     */
    set context(context) {
        this.innerContext = context;
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId 框架ID
     */
    execute(commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        let viewModel = this.viewModel;
        if (frameId) {
            const targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    }
    /**
     * 等待BeSession创建
     * @returns 最新创建出来的BeSession
     */
    waitForBeSession() {
        const frameContext = this.context.frameContext;
        const befRepository = frameContext.repository;
        const sessionService = befRepository.restService.sessionService;
        return sessionService.getBeSessionId().pipe(filter((beSessionId) => {
            return beSessionId !== null;
        }), take(1));
    }
    /**
     * 提取某个任务的执行结果
     * @param taskName 任务名称
     * @reutrn 返回taskName对应任务的执行结果
     */
    extractResult(taskName) {
        const results = this.context.results;
        return results[taskName];
    }
    /**
     * 暂停当前组件的行切换事件抛出
     */
    suspendFrameContextRowSelectedEvent(frameId) {
        let frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = true;
        }
    }
    resumeFrameContextRowSelectedEvent(frameId) {
        let frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = false;
        }
    }
}
CommandService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandService.ctorParameters = () => [
    { type: ViewModel },
    { type: AppContext }
];

class VerifyService {
    static focusElement(selector, elementRef) {
        const nativeElement = elementRef && elementRef.nativeElement || document;
        let target = nativeElement.ownerDocument.getElementById(selector);
        if (target) {
            if (target.tagName !== 'INPUT') {
                const input = target.getElementsByTagName('input');
                if (input.length) {
                    target = input[0];
                }
            }
            target.focus();
        }
    }
}

// tslint:disable: max-line-length
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class ValidationService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, notifyService, languageService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.validationResults = new Subject();
        this.validationAllResult = new Subject();
        if (!this.languageService) {
            this.languageService = new LanguageService();
        }
    }
    /**
     * 验证表单内的所有表单
     */
    validate() {
        this.repository.getList().subscribe((result) => {
            for (const entity of result) {
                entity.validate().subscribe((result) => {
                    if (!result.isValid) {
                        alert(result.message);
                        this.validationResults.next(result);
                    }
                });
            }
        });
        return this.validationResults;
    }
    /**
     * 校验当前行
     */
    validateCurrentRow() {
        const entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        const primaryValue = this.frameContext.bindingData.list.currentId;
        if (!primaryValue) {
            return of$1(true);
        }
        // 首先校验实体不能为空规则
        const entity = this.repository.entityCollection.getEntityById(primaryValue);
        if (!entity) {
            return of$1(true);
        }
        const entities = [entity];
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        // 修复使用相同be创建的vo的组合表单校验时多个表单校验规则被合并的问题
        // TODO: 目前未考虑组合表单统一保存的场景，后续支持组合表单统一保存时再修改
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of$1(true);
        }
        rootViewModel.verifyInformations = [];
        let formValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 验证所有实体
        const observableList = entities.map((entity) => {
            const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);
            return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);
        });
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            this.handleErrorClickEvent();
            if (isValidated && !formValid) {
                // 实体校验通过但表单校验不通过，此时实体和表单存在校验规则不一致的情况
                console.warn('实体和控件校验规则不一致，请确认实体校验规则配置与控件一致。如果配置不一致可能会导致校验失效！');
            }
            // 实体校验通过，实体校验使用的规则是控件+实体，正常实体校验通过后控件校验一定也会通过
            if (isValidated) {
                const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);
                if (!isEntityValid) {
                    return EMPTY;
                }
                return of$1(true);
            }
            else {
                return empty$1();
            }
        }));
        return result$;
    }
    /**
     * 调用表单和实体上的验证规则, 通过后调用回调cb
     */
    validateAll() {
        const entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        const entities = this.repository.entityCollection.getAllEntities();
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of$1(true);
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let formValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 触发所有实体的validate事件
        const isMultiEntityValiate = entities.length > 0;
        // 验证所有实体
        const observableList = entities.map((entity, index) => entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            // 因为校验累加的缘故，导致之前的校验信息一直存在，只能通过校验结果来确定是否还有错误信息
            if (isValidated && formValid) {
                verifyInformations = rootViewModel.verifyInformations = [];
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            this.handleErrorClickEvent();
            if (isValidated) {
                const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);
                if (!isEntityValid) {
                    return EMPTY;
                }
                return of$1(true);
            }
            else {
                return empty$1();
            }
        }));
        return result$;
    }
    /**
     * 校验实体是否满足不能为空的规则
     * @param entity 主实体
     */
    validateEntityAllowEmptyRule(entityTypeInfo) {
        // 确认实体各个层级中是否存在不能为空的规则
        const paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);
        if (!paths || paths.length < 1) {
            return true;
        }
        // 找到所有不合法的bindingPaths
        const invalidPaths = paths.filter((path) => {
            const bindingPaths = path.split('/').filter(p => p);
            const bindingList = this.frameContext.bindingData.getValue(bindingPaths);
            if (!bindingList || bindingList.length < 1) {
                return true;
            }
            return false;
        });
        // 有实体必填，但实体数据为空
        if (invalidPaths.length > 0) {
            const tableNames = [];
            invalidPaths.forEach((path) => {
                //const frameContexts = this.getFrameContextByBindingPath(path.split('/'));
                //const frameComponents = frameContexts.map(frameContext => frameContext.frameComponent);
                // 找到所有容器类组件
                //const containerComponents = frameComponents.filter(frameComponent => [ComponentType.farrisDataGridComponent, ComponentType.farrisTreeTalbeComponent, ComponentType.kendoGridComponent, ComponentType.primengTreeComponent].includes(frameComponent.componentType));
                //if (!(!containerComponents || containerComponents.length < 1)) {
                const viewModelName = this.getViewModelNameByBindingPaths(path.split('/')) || `绑定路径${path}`;
                tableNames.push(viewModelName);
                //}
            });
            if (this.notifyService) {
                this.notifyService.error(`${tableNames.join('，')} ${this.languageService.tableCanNotEmpty}`, { hideTitle: true });
            }
            return false;
        }
        return true;
    }
    /**
     *
     * @param bindingPaths path不能为空或/，不支持主表
     */
    getViewModelNameByBindingPaths(bindingPaths) {
        const namespace = this.frameContext.namespace;
        let frameContexts = null;
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const bindingPath = bindingPaths.filter(p => p).join('/');
        const frameContext = frameContexts.find((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
        const viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';
        return viewModelName;
    }
    /**
     * 遍历获取所有不能为空的实体的绑定路径
     * @param entityTypeInfo
     * @param results
     * @returns
     */
    getNotAllowEmptyBindingPaths(entityTypeInfo, results = []) {
        if (!entityTypeInfo) {
            return;
        }
        this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, results);
        return results;
    }
    deepFirstTraversalEntityTypeInfo(entityTypeInfo, result = [], previousValue = []) {
        // 确认当前实体是否必填
        const isAllowEmpty = this.isAllowEmpty(entityTypeInfo.entityInfo.allowEmpty, previousValue);
        if (isAllowEmpty === false) {
            if (previousValue.length < 1) {
                result.push('');
            }
            else {
                result.push(previousValue.join('/'));
            }
        }
        // 获取所有子表
        const list = entityTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach((propInfo) => {
                const typeInfo = propInfo.typeInfo;
                if (typeInfo && typeInfo.entityInfo) {
                    previousValue.push(typeInfo.entityInfo.nodeCode);
                    this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);
                }
            });
        }
        // 没有下级了，此时应该清空游标，将收集到的路径放到结果集中
        if (previousValue && previousValue.length > 0) {
            previousValue.pop();
        }
    }
    isAllowEmpty(value, paths) {
        if (value === undefined || value === true || value === '') {
            return true;
        }
        // 开发者定义了不能为空的规则
        const frameContexts = this.getFrameContextByBindingPath(paths);
        let caller = this.frameContext.frameComponent;
        if (!frameContexts || frameContexts.length < 1) {
            // 定义了规则但对应的Frame没有渲染
            console.warn(`绑定路径 ${paths.join('/')} 定义了不能为空的规则，但找不到该绑定路径对应的组件。请确保组件显隐与必填一致。`);
        }
        else {
            caller = frameContexts.pop().frameComponent;
        }
        if (typeof value === 'boolean') {
            return value;
        }
        else if (typeof value === 'string') {
            value = value.trim().startsWith('return') ? value : `return ${value}`;
            const factory = new Function(`
        var viewModel = this.viewModel;
        var bindingData = this.bindingData;
        var context = this.context;
        ${value}
      `);
            return factory.apply(caller);
        }
        else {
            console.warn(`无效的必填规则。`);
        }
    }
    collectValidationErrors(rootViewModel, errors, namespace, filter$$1 = true) {
        if (filter$$1) {
            rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
        }
        errors.forEach((validationError) => {
            if (validationError.children && validationError.children.length) {
                this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);
            }
            let id = '';
            const findId = (target) => {
                if (target && target.data && target.data.id) {
                    id = target.data.id;
                    return;
                }
                else if (target[PARENT_CLASS]) {
                    findId(target[PARENT_CLASS]);
                }
            };
            findId(validationError.target);
            if (validationError.constraints) {
                const validationResultTypes = Object.keys(validationError.constraints);
                if (validationResultTypes.length) {
                    const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;
                    let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);
                    index = index === -1 ? 0 : index + offset;
                    rootViewModel.verifyInformations.splice(index, 0, {
                        id: id,
                        namespace,
                        targetField: validationError.field,
                        index: validationError.index,
                        title: validationError.propertyName,
                        msg: validationError.constraints[validationResultTypes[0]],
                        frameContext: validationError.frameContext,
                        fullPath: validationError.fullPath,
                        type: validationResultTypes[0] === 'required' ? 'empty' : 'error'
                    });
                }
            }
        });
    }
    /**
     * 重置校验信息（仅当前表单）
     */
    resetValidation() {
        const isDialog = this.isInDialog();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isDialog) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let verifyInformations = rootViewModel.verifyInformations;
        if (verifyInformations.length) {
            const namespace = this.frameContext.namespace;
            if (namespace !== null) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
            }
            rootViewModel.verifyInformations = verifyInformations;
            //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);
        }
        if (rootViewModel && rootViewModel.verifycationChanged) {
            rootViewModel.verifycationChanged.next(verifyInformations);
        }
        return of$1(null);
    }
    /**
     * 是否在弹窗内部
     */
    isInDialog() {
        return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;
    }
    /**
     * 拥有独自的校验提示服务
     */
    hasOwnVerifyDetailService() {
        return this.frameContext.injector.get(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get(VerifyDetailService, null);
    }
    /**
     * 通过bindingPath获取所有匹配的frameContext
     * @param bindingPath
     * @returns
     */
    getFrameContextByBindingPath(bindingPaths) {
        const bindingPath = bindingPaths.filter(p => p).join('/');
        return this.frameContext.appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
    }
    get verifyDetailService() {
        return this.frameContext.injector.get(VerifyDetailService, null, InjectFlags.Self);
    }
    handleErrorClickEvent() {
        if (this.verifyDetailService && this.verifyDetailService.verifyContainer && this.verifyDetailService.verifyContainer.instance) {
            this.verifyDetailService.verifyContainer.instance.validatorClick.subscribe((item) => {
                this.onErrorItemClick(item);
            });
        }
    }
    onErrorItemClick(item = { frameContext: null, id: null, targetField: null, fullPath: null }) {
        const { frameContext, id, targetField, fullPath } = item;
        const isGridComponent = frameContext && frameContext.frameComponent.isGridComponent || false;
        if (!isGridComponent) {
            const elementRef = frameContext.injector.get(ElementRef, null, InjectFlags.Self) || frameContext.injector.get(ElementRef, null);
            VerifyService.focusElement(targetField, elementRef);
            this.verifyDetailService.verifyContainer.instance.showList = false;
        }
        else {
            // find grid component
            const grid = frameContext.componentRefManager.getComponentByType(DatagridComponent);
            if (grid && targetField && id) {
                grid.editCell(id, targetField);
                this.verifyDetailService.verifyContainer.instance.showList = false;
            }
        }
    }
}
ValidationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidationService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FormNotifyService, decorators: [{ type: Optional }] },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

class DataChangeDetectionService {
    static hasChange(frameContext) {
        const befRepository = frameContext && frameContext.repository;
        const hasLocalChanges = BefRepositoryUtil.isExistUnsaveData(befRepository);
        if (hasLocalChanges) {
            return of(true);
        }
        // 本地没有变更，确认服务器端是否有未保存的变更
        const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        const serverSideChangeDetectionEnabled = virtualRootFrameContext && virtualRootFrameContext.enableServerSideChangeDetection;
        if (!serverSideChangeDetectionEnabled) {
            return of(false);
        }
        else {
            // 启用了后端变更检测
            return frameContext.repository.hasChanges().pipe(map((response) => {
                return response.returnValue;
            }));
        }
    }
}

// tslint:disable: no-string-literal
// tslint:disable: max-line-length
/**
 * 卡片仓库服务
 */
class CardDataService {
    /**
     * 构造函数
     */
    constructor(formMessageService, frameContext, loadingService, formNotifyService, languageService, formErrorService, runtimeFrameworkService, commandService) {
        this.formMessageService = formMessageService;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.commandService = commandService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
    }
    /**
     * 加载数据
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    load(id) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        this.frameContext.appContext.params.set("retrieveing", true);
        this.frameContext.appContext.params.delete('queryChild');
        const get$ = this.repository.getById(id);
        return get$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 加载前
     * @param id id
     * @param transitionActionParamName 状态迁移动作参数编号
     * @returns
     */
    onLoading(transitionActionParamName) {
        const tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;
        if (!tabId) {
            return;
        }
        let skip = true;
        const listening = this.frameContext.appContext.params.get(tabId) || false;
        transitionActionParamName = transitionActionParamName || 'transitionAction';
        if (!listening) {
            this.frameContext.appContext.params.set(tabId, true);
            this.runtimeFrameworkService.getEntityParam(tabId, (options) => {
                if (skip) {
                    skip = false;
                    return;
                }
                const params = this.parseParams(options);
                if (params && params.sync) {
                    const action = params.action;
                    const id = params.id;
                    const ngCommand = this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.metadatas && this.frameContext.viewModel.metadatas[action];
                    const actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;
                    const formPrimaryValue = this.frameContext.bindingData.list.currentId;
                    const formState = this.frameContext.stateMachine.context.state;
                    let state = null;
                    let stateName;
                    if (!actionName) {
                        // 可能是用户自己配置的命令，没有状态机切换，此时不再判断状态机
                        state = formState;
                    }
                    else {
                        const ngAction = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.actions && this.frameContext.stateMachine.metadatas.actions[actionName];
                        state = ngAction && ngAction.transitTo || formState;
                        stateName = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.states[state] && this.frameContext.stateMachine.metadatas.states[state].name || this.languageService.defaultStateName;
                        if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {
                            const key = stateName.replace('{{', '').replace('}}', '');
                            stateName = this.frameContext.translate.transform(key, null);
                        }
                    }
                    const primaryValueChanged = formPrimaryValue !== id;
                    const stateChanged = formState !== state;
                    if (primaryValueChanged && stateChanged) {
                        // 均发生变化
                        const message = this.languageService.dataAndStateChanged.replace(/\$1/g, stateName);
                        this.showLoadingConfirm(message).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else if (primaryValueChanged) {
                        // 主键发生变化
                        this.showLoadingConfirm(this.languageService.dataChanged).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else if (stateChanged) {
                        // 状态发生变化
                        const message = this.languageService.stateChanged.replace(/\$1/g, stateName);
                        this.showLoadingConfirm(message).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else {
                        // 数据及状态均未发生变化
                        return of(true);
                    }
                }
            }, false);
        }
    }
    /**
     * 新增
     */
    add() {
        const lastModifiedId = this.bindingData.list.currentId;
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const create$ = this.repository.create();
        return create$.pipe(tap(() => {
            EditStateUtil.setEditState(this.frameContext, lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 级联新增
     */
    cascadeAdd() {
        const subject = new Subject();
        // 找到所有viewmodel,拿到了所有的frameContext，可能有组合表单的
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        // 找到当前frameContext的公共namespace
        const currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;
        // 拿到当前命令所在frame的表单的所有frameContext
        const currentFormFrameContexts = frameContexts.filter((context) => context.namespace === currentNamespace) || [];
        let bindingPaths = [];
        if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {
            // 找到所有下级frameContext
            const childFrameContexts = currentFormFrameContexts.filter((context) => context.viewModel.bindingPath && context.viewModel.bindingPath !== '/');
            if (childFrameContexts && childFrameContexts.length > 0) {
                let childBindingPaths = childFrameContexts.map((context) => context.viewModel.bindingPath);
                childBindingPaths = childBindingPaths.filter((item, index) => childBindingPaths.indexOf(item) === index);
                if (childBindingPaths && childBindingPaths.length > 0) {
                    bindingPaths = childBindingPaths.map((path) => path.split('/').filter((p) => p)).sort((a, b) => a.length - b.length);
                }
            }
        }
        this.loadingService.show();
        this.repository.create().pipe(switchMap((entity) => {
            const rid = entity.primaryValue;
            if (bindingPaths && bindingPaths.length > 0) {
                return from(bindingPaths).pipe(concatMap((bindingPath) => {
                    const fpath = this.getPath(this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);
                    return this.repository.appendByPath(fpath);
                }));
            }
            else {
                return of(entity);
            }
        })).pipe(last()).subscribe(() => {
            this.loadingService.hide();
            subject.next();
        }, (error) => {
            this.loadingService.hide();
            this.formErrorService.exception(this.languageService.addFailed, error);
        });
        return subject;
    }
    /**
     * 编辑（更新数据并标记编辑状态）
     */
    edit(id) {
        const update$ = this.update();
        return update$.pipe(tap(() => {
            const currentId = this.bindingData.list.currentId;
            EditStateUtil.setEditState(this.frameContext, currentId);
        }));
    }
    /**
     * 更新
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    update(id) {
        // 获取id
        id = this.bindingData.list.currentId;
        if (!id) {
            return empty();
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const update$ = this.repository.updateById(id);
        this.frameContext.appContext.params.set("retrieveing", true);
        return update$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.updateFailed, error);
        }));
    }
    updateWithoutEmpty() {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            return of(null);
        }
        else {
            return this.update();
        }
    }
    /**
     * 校验当前行是否存在
     * @returns
     */
    checkBeforeUpdate() {
        const bindingList = this.frameContext.bindingData.list;
        const id = bindingList && bindingList.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        return of(true);
    }
    /**
     * 已废弃
     * @returns
     */
    updateWithNotify() {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        else {
            return this.update();
        }
    }
    /**
     * 加载卡片数据（分页加载子表数据）
     * @deprecated 方法已废弃，请勿使用
     */
    loadPaged(filter$$1, sort) {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // this.frameContext.root.params.set('updateWithPaging', true);
        const update$ = of(null); //this.repository.updateEntityById(id, true);
        return update$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.updateFailed, error);
        }));
    }
    /**
     * 保存
     */
    save(successMsg) {
        // 获取当前行
        const id = this.bindingData.list.currentId;
        if (!id) {
            return of(false);
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const update$ = this.repository.updateChangesById(id);
        const save$ = this.repository.applyChangesById(id);
        const result$ = update$.pipe(
        // update$ => save$
        switchMap((updateResult) => {
            if (updateResult === false) {
                return of(false);
            }
            else {
                return save$;
            }
        }), 
        // 隐藏loading
        tap(() => {
            // 取消新增状态
            EditStateUtil.setEditState(this.frameContext, id);
            this.loadingService.hideDelayLoading(loadingTimerId);
            // this.formNotifyService.info(this.languageService.saveSuccess);
            if (successMsg && successMsg.trim()) {
                let showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        const options = JSON.parse(successMsg);
                        if (options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
            }
            // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.saveFailed, error);
        }));
        return result$;
    }
    // #region 取消相关方法
    /**
     * 取消（默认取消）
     */
    cancel() {
        return this.cancelWithCheck();
    }
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    revert(options) {
        return this.cancelWithoutCheck(options);
    }
    /**
     * 取消（取消前检查未保存的变更）
     * @summary
     * 1、用户误操作：只需要做个提示就可以了；
     * 2、用户有意取消：点击取消就是要放弃所有变更，这时候询问人家是否要保存或者提示存在变更有点多此一举，确认一把即可。
     * 3、用户误操作：没有变更的情况下直接给取消了，用户会产生恐慌，因为用户有时候并不确定是否有变更，应该也确认一把。
     * @todo
     * 1、由于产品部很多代码误用了该方法，依赖了没有变更的时候直接取消，现在弹窗确认框来，不太合适；
     * 2、产品部需要用cancelWithoutCheck方法代替，目前先给兼容着，待删除。
     */
    cancelWithCheck() {
        const hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
        return hasChange$.pipe(switchMap((changed) => {
            if (!changed) {
                return this.cancelChanges();
            }
            else {
                // 确认是否取消
                const confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);
                const result$ = confirm$.pipe(switchMap((ifCancel) => {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return this.cancelChanges();
                }));
                return result$;
            }
        }));
    }
    /**
     * 取消（直接取消，不执行检查）
     */
    cancelWithoutCheck(options) {
        return this.cancelChanges(options);
    }
    /**
     * 取消
     */
    cancelChanges(options) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges(options);
        return cancel$.pipe(tap(() => {
            EditStateUtil.setEditState(this.frameContext, '');
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    // #endregion
    /**
     * 重新加载（仅供卡片取消后重新加载数据，其他场景请勿使用）
     */
    reload() {
        const isAdd = EditStateUtil.getAddState(this.frameContext);
        let id;
        if (isAdd === true) {
            id = EditStateUtil.getLastModifiedId(this.frameContext);
        }
        else {
            id = this.bindingData.list.currentId;
        }
        if (!id) {
            this.repository.entityCollection.loadEntities([]);
            return;
        }
        return this.load(id);
    }
    getPath(viewModel, bindingPath, rid) {
        let path = '/' + rid;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    resetForm(action) {
        const validationService = this.frameContext.injector.get(ValidationService, null);
        return this.frameContext.repository.cancelChanges().pipe(switchMap(() => this.commandService.execute(action).pipe(switchMap(() => {
            return validationService && validationService.resetValidation() || of(null);
        }))));
    }
    parseParams(options) {
        if (options && Object.prototype.toString.call(options) === "[object Map]" /* map */) {
            let params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);
            if (params && typeof params === 'string') {
                params = decodeURIComponent(params);
                if (params.startsWith('{') && params.endsWith('}')) {
                    params = JSON.parse(params);
                }
                return {
                    action: params.action,
                    id: params.idToView || params.idToEdit || params.id,
                    sync: params.sync || false
                };
            }
        }
        return null;
    }
    showLoadingConfirm(message) {
        return this.formMessageService.confirm(message).pipe(switchMap((result) => {
            if (result === true) {
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    }
}
CardDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CardDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: FrameContext },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormErrorService },
    { type: RuntimeFrameworkService },
    { type: CommandService }
];

/**
 * 导航中间件服务
 * @scope FrameComponent
 */
// tslint:disable: no-string-literal
class NavigationMiddlewareService {
    constructor(navigationService, frameContext, msgService, languageService, cardDataService) {
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.msgService = msgService;
        this.languageService = languageService;
        this.cardDataService = cardDataService;
        this.repository = frameContext.repository;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (this.frameContext) {
            this.appContext = this.frameContext.getFormAppContext() || null;
        }
    }
    /**
     * 关闭前处理
     */
    onClosing() {
        if (this.isInDialog()) {
            return;
        }
        this.navigationService.addEventListener(TAB_EVENT.onTabClosing, (options) => {
            if (!this.frameContext || this.frameContext.isDisposed) {
                return of(true);
            }
            return this.isChanged.pipe(switchMap((changed) => {
                if (changed && !this.appContext.opened) {
                    // 如果需要用户确认就切换到当前tab
                    if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {
                        options.beforeCloseHandle({ selectedChange: true });
                    }
                    const conform = this.msgService.question(this.languageService['exitWithoutSave']);
                    /*记录弹窗已打开*/
                    this.appContext.opened = true;
                    return conform.pipe(switchMap((result) => {
                        this.appContext.opened = false;
                        if (result) {
                            /*记录用户关闭弹窗*/
                            if (!!this.cardDataService) {
                                const revert$ = this.cardDataService.revert(options);
                                return revert$.pipe(switchMap(() => of(result)));
                            }
                        }
                        return of(result);
                    }));
                }
                else if (changed && this.appContext.opened) {
                    return of(false);
                }
                else {
                    return of(true);
                }
            }));
        });
    }
    /**
     * 是否在是弹窗窗口内
     */
    isInDialog() {
        let frameContext = this.frameContext;
        let isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;
        while (frameContext.parent !== null && !isDialogRootComponent) {
            frameContext = frameContext.parent;
            isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];
        }
        if (!isDialogRootComponent) {
            isDialogRootComponent = this.frameContext.injector.get(INSIDE_DIALOG_TOKEN, false);
        }
        return isDialogRootComponent;
    }
    /**
     * 获取tabid,如果targetId存在则直接使用targetId
     * @description 将用户要查看的数据id转换为运行框架需要的tabId
     * @param params - router参数
     * @param targetId - 要编辑/查看的数据id
     */
    getTabId(params, targetId) {
        if (!!targetId) {
            return targetId;
        }
        let paramsObj = null;
        if (!!params && params.startsWith('{') && params.endsWith('}')) {
            paramsObj = JSON.parse(params);
        }
        let paramId = null;
        if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {
            paramId = paramsObj.id;
        }
        else {
            paramId = UID.create();
        }
        return paramId;
    }
    /**
     * 是否有未保存的变更
     */
    get isChanged() {
        return DataChangeDetectionService.hasChange(this.frameContext).pipe(throwIfEmpty(() => EMPTY));
    }
}
NavigationMiddlewareService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NavigationMiddlewareService.ctorParameters = () => [
    { type: NavigationService },
    { type: FrameContext },
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: CardDataService }
];

/*
 * @Author: aalizzwell
 * @Date: 2019-08-05 11:48:27
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-08-06 15:01:53
 */
// tslint:disable: no-string-literal
/**
 * Grid中间件服务
 * @scope FrameComponent
 */
class GridMiddlewareService {
    constructor(frameContext, msgService, languageService, viewModel, commandService) {
        this.frameContext = frameContext;
        this.msgService = msgService;
        this.languageService = languageService;
        this.viewModel = viewModel;
        this.commandService = commandService;
        this.repository = this.frameContext.repository;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 页码切换前
     */
    onPageChanging() {
        if (this.isChanged) {
            return this.msgService.question(this.languageService['gridDataNotSave']).pipe(switchMap((result) => {
                if (!result) {
                    return EMPTY;
                }
                else {
                    return of(true);
                }
            }));
        }
        else {
            return of(true);
        }
    }
    /**
     * 表格过滤
     * @param commandName 命令名称
     * @param frameId frameId
     * @returns
     */
    filter(commandName, frameId) {
        const self = this;
        let filters = self.context && self.context.eventParam || [];
        if (typeof (filters) === 'string') {
            filters = JSON.parse(filters);
        }
        // 查询时重置页码为第一页
        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;
        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);
        return this.commandService.execute(commandName, frameId);
    }
    /**
     * 是否有未保存的变更
     */
    get isChanged() {
        const befRepository = this.repository;
        return BefRepositoryUtil.isExistUnsaveData(befRepository);
    }
}
GridMiddlewareService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GridMiddlewareService.ctorParameters = () => [
    { type: FrameContext },
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: ViewModel },
    { type: CommandService }
];

// tslint:disable: no-string-literal
/**
 * 参数服务
 * @scope FormModule
 */
class ParamService {
    constructor(querystringService, runtimeFrameworkService) {
        this.querystringService = querystringService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    /**
     * 适配获取所有参数
     */
    get params() {
        // 先从hash中获取参数
        const hash = window.location.hash;
        const params = this.querystringService.parse(hash);
        /*
        const appMode = params.appMode;
        // appMode没有定义，认为是老表单,appMode = mdi 或 spa
        if (typeof appMode === 'undefined' || appMode === null) {
            return of(params);
        }
        // appMode存在，但为空，也认为是老表单
        if (appMode.length < 1) {
            return of(params);
        }
        // 新表单，使用iframe模式
        if (appMode.toLowerCase() === 'mdi') {
            return of(params);
        }
        */
        // 获取tabId，最新版本一定有tabId，如果取不到tabId则认为是老表单，直接从url获取参数
        const tabId = params.tabId;
        if (!tabId) {
            // throw new Error('TabId can`t be empty!');
            return of(params);
        }
        const subject = new Subject();
        // 管道参数e可能为object、Map类型
        this.runtimeFrameworkService.addEventListener(tabId, (e) => {
            let map$$1 = {};
            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                map$$1 = this.parseMapParams(e);
            }
            let args = {};
            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                args = new Map(e);
            }
            else {
                args = Object.assign({}, e);
            }
            setTimeout(() => {
                subject.next(Object.assign({}, args, map$$1, params));
            }, 0);
        }, params);
        return subject.asObservable();
    }
    /**
     * 解析map类型的参数
     * @param params params
     */
    parseMapParams(params) {
        const map$$1 = {};
        map$$1['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));
        params.forEach((value, key) => {
            if (key !== 'WEB_FORM_ROUTE_PARAMS') {
                map$$1[key] = value;
            }
        });
        return map$$1;
    }
    /**
     * 获取param参数
     * @param param key
     */
    get(param) {
        return this.params.pipe(switchMap(options => {
            if (!!options && options.hasOwnProperty(param)) {
                return of(options.param);
            }
            else {
                return of(undefined);
            }
        }));
    }
    /**
     * 参数转为对象
     */
    parse() {
        return this.params.pipe(switchMap(options => {
            return of(options);
        }));
    }
}
ParamService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParamService.ctorParameters = () => [
    { type: QuerystringService },
    { type: RuntimeFrameworkService }
];

/**
 * 快捷键服务
 * @scope FormModule
 */
class KeybindingService {
    constructor() {
        this.keyMap = new Map();
        this.bindingProvider = Mousetrap__default;
        this.ready = true;
    }
    /**
     * 对视图模型设置的快捷键进行绑定处理
     * @param viewModel 视图模型
     */
    bind(viewModel) {
        viewModel.keybindingMap.forEach((keyBinding, method) => {
            this.register(keyBinding, () => {
                return viewModel[method]();
            });
        });
    }
    /**
     * 注册快捷键
     * @param binding 键盘绑定信息
     * @param handler 响应事件
     */
    register(binding, handler) {
        var combo = this._getCombo(binding);
        if (combo) {
            this.keyMap.set(combo, handler);
            if (binding.ctrlKey && binding.altKey && !binding.shiftKey) {
                // 实际发现，ctrl+alt组合，只能触发keyup事件
                this.bindingProvider.bind(combo, this._dispatch.bind(this), 'keyup');
            }
            else {
                this.bindingProvider.bind(combo, this._dispatch.bind(this));
            }
        }
    }
    /**
     * 取消快捷键注册
     * @param binding 键盘绑定信息
     */
    unregister(binding) {
        var combo = this._getCombo(binding);
        if (combo) {
            this.keyMap.delete(combo);
            this.bindingProvider.unbind(combo);
        }
    }
    _dispatch(e) {
        if (e.repeat)
            return false;
        if (this.ready) {
            var combo = this._getCombo(e);
            if (combo && this.keyMap.has(combo)) {
                this.ready = false;
                this.keyMap.get(combo)().subscribe(() => {
                    this.ready = true;
                }, (error) => {
                    this.ready = true;
                }, () => {
                    this.ready = true;
                });
            }
        }
        return false;
    }
    /**
     * 返回ctrl+shift+alt+a形式的组合字符串，全部为小写
     * @param keyInfo
     */
    _getCombo(keyInfo) {
        var key = keyInfo.key.toLowerCase();
        if (key.length != 1 || key.charCodeAt(0) < 97 /* a */ || key.charCodeAt(0) > 122 /* z */) {
            console.warn("快捷键字母形式为a-z");
            return null;
        }
        var combo = (keyInfo.ctrlKey ? 'ctrl+' : '')
            + (keyInfo.shiftKey ? 'shift+' : '')
            + (keyInfo.altKey ? 'alt+' : '')
            + (keyInfo.metaKey ? 'meta+' : '')
            + key;
        if (combo.length == 1) {
            console.warn("快捷键至少包含一个Modifier键");
            return null;
        }
        return combo;
    }
}
KeybindingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
KeybindingService.ctorParameters = () => [];

// tslint:disable: max-line-length
/**
 * @deprecated 已废除
 */
class FilterConditionService {
}
FilterConditionService.decorators = [
    { type: Injectable }
];

/**
 * UI状态服务
 * @scope FrameComponent
 */
class UIStateService {
    constructor() {
    }
    getState(componentId, stateName) {
        throw new Error('Not Implemented');
    }
    setState(componentId, stateName, value) {
        throw new Error('Not Implemented');
    }
}
UIStateService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UIStateService.ctorParameters = () => [];

// tslint:disable: max-line-length
/**
 * 状态机服务
 * @scope FrameComponent
 */
class StateMachineService {
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        this._clsDefaultName = 'f-form-state-default';
        this._initLoad = true;
        if (this.stateMachine.initialState.name === 'init') {
            window.setTimeout(() => {
                this.initFormState();
            }, 0);
        }
    }
    transit(action) {
        if (action && typeof this.stateMachine[action] === 'function') {
            this.stateMachine[action]();
            this._currentFrameContext = this['context'] && this['context']['frameContext'];
            if (this._initLoad) {
                this.initFormState();
                this._initLoad = false;
            }
            if (!this._currentFrameContext) {
                return;
            }
            const currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);
            if (!!currentRootFrameContext) {
                this.toggleFormState(action, currentRootFrameContext);
            }
        }
    }
    getCurrentRootFrameContext(currentFrameContext) {
        let currentRootFrameContext;
        this.getAllRootFrameContext().forEach((rootFc) => {
            if (currentFrameContext.namespace === rootFc.namespace) {
                currentRootFrameContext = rootFc;
            }
        });
        return currentRootFrameContext;
    }
    getFrameContextManagerMap() {
        if (this.stateMachine && this.stateMachine.frameContext) {
            const appContext = this.stateMachine.frameContext.appContext;
            if (appContext) {
                const frameContextManager = appContext.frameContextManager;
                return frameContextManager.getFrameContextMap();
            }
        }
        return null;
        // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();
    }
    getAllRootFrameContext() {
        const rootFrameContextArr = [];
        const frameContexts = this.getFrameContextManagerMap();
        if (frameContexts) {
            frameContexts.forEach(item => {
                if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {
                    rootFrameContextArr.push(item);
                }
            });
        }
        return rootFrameContextArr;
    }
    initFormState() {
        if (!this.getFrameContextManagerMap()) {
            return;
        }
        this.getAllRootFrameContext().forEach((rootFc) => {
            const rootComponent = rootFc.injector.get(ElementRef, null) || null;
            if (!rootComponent || !rootComponent.nativeElement) {
                return;
            }
            if (!rootComponent.nativeElement.className.includes(this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {
                this.addCssClass(rootComponent, this._clsDefaultName);
            }
        });
    }
    toggleFormState(action, frameContext) {
        const rootComponent = frameContext.injector.get(ElementRef, null) || null;
        if (!rootComponent || !rootComponent.nativeElement || !action) {
            return;
        }
        action = action.toLowerCase();
        if (action && ['create', 'edit'].includes(action)) {
            if (action === 'create') {
                this.addCssClass(rootComponent, 'f-form-state-create');
            }
            else if (action === 'edit') {
                this.addCssClass(rootComponent, 'f-form-state-edit');
            }
            this.removeCssClass(rootComponent, this._clsDefaultName);
        }
        else {
            ['f-form-state-create', 'f-form-state-edit'].forEach(item => this.removeCssClass(rootComponent, item));
            this.addCssClass(rootComponent, this._clsDefaultName);
        }
    }
    addCssClass(elementRef, className) {
        if (!elementRef || !className || !elementRef.nativeElement) {
            return;
        }
        const originalClassName = elementRef.nativeElement.className || '';
        if (!originalClassName.includes(className)) {
            elementRef.nativeElement.className = `${originalClassName} ${className}`;
        }
    }
    removeCssClass(elementRef, className) {
        if (!elementRef || !className || !elementRef.nativeElement) {
            return;
        }
        const originalClassName = elementRef.nativeElement.className || '';
        if (originalClassName.includes(className)) {
            elementRef.nativeElement.className = originalClassName.split(' ').filter(p => p && p !== className).join(' ');
        }
    }
    getFormRootComponent() {
        if (this.stateMachine && this.stateMachine.frameContext) {
            const viewContext = this.stateMachine.frameContext;
            if (viewContext) {
                const virtualRootContext = viewContext.getVirtualRootFrameContext();
                if (virtualRootContext) {
                    const injector = virtualRootContext.injector;
                    if (typeof injector.get === 'function') {
                        return injector.get(ElementRef, null);
                    }
                }
            }
        }
        return null;
        // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;
    }
}
StateMachineService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
StateMachineService.ctorParameters = () => [
    { type: StateMachine }
];

/**
 * 实体服务
 * @scope FrameComponent
 */
class BindingDataService {
    /**
     * 构造函数
     */
    constructor(bindingData, appContext) {
        this.bindingData = bindingData;
        this.appContext = appContext;
    }
    /**
     * 设置当前框架的当前行
     */
    setCurrentId(id, frameId) {
        // let bindingData = this.bindingData;
        // if (frameId) {
        //   const targetContext = this.appContext.getFrameContext(frameId);
        //   bindingData = targetContext.bindingData;
        // }
        // bindingData.list.setCurrentId(id);
        // @todo：全部重新设置一遍
        const frameContexts = Array.from(this.appContext.getAllFrameContexts().values());
        frameContexts.forEach((frameContext) => {
            const bindingData = frameContext.bindingData;
            bindingData.list.setCurrentId(id, true, false);
        });
    }
    setCurrentRow(id, frameId) {
        let bindingData = this.bindingData;
        if (frameId) {
            const targetContext = this.appContext.getFrameContext(frameId);
            bindingData = targetContext.bindingData;
        }
        bindingData.getList().setCurrentId(id);
    }
}
BindingDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BindingDataService.ctorParameters = () => [
    { type: BindingData },
    { type: AppContext }
];

/**
 * 应用参数服务
 * @scope FormModule
 */
class ApplicationParamService {
    constructor(paramService, runtimeFrameworkService) {
        this.paramService = paramService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        if (!this.runtimeFrameworkService) {
            this.runtimeFrameworkService = new RuntimeFrameworkService();
        }
    }
    /**
     * 解析参数
     */
    parseParams(route, frameworkService, viewModel, callback) {
        const highOrderInvoke = this.highOrderInvoke(callback);
        if (!this.paramService) {
            route.queryParams.pipe(take(1)).subscribe((params) => {
                this.params = params;
                this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
            });
        }
        else {
            this.paramService.parse().pipe(take(1)).subscribe(params => {
                this.params = params;
                this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
            });
        }
    }
    /**
     * 设置参数
     */
    setupParams(params, frameworkService, viewModel, callback) {
        if (viewModel && viewModel.frameContext && viewModel.frameContext.appContext && params.tabId) {
            viewModel.frameContext.appContext.tabId = params.tabId;
        }
        const queryParams = this.getParams(params);
        if (!queryParams) {
            callback();
            return;
        }
        // 先设置参数，保证普通路由也能正常执行。
        this.setQueryParams(queryParams, viewModel);
        const funcId = this.getFuncId(queryParams);
        const appId = this.getAppId(queryParams);
        if (!funcId && !appId) {
            callback();
            return;
        }
        if (funcId) {
            this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);
        }
        else {
            callback();
        }
    }
    /**
     * 设置查询参数
     */
    setQueryParams(queryParams, viewModel) {
        const parsedQueryParams = {};
        // 设置表单参数
        // 首先判断是否为弹窗
        const isInDialog = this.isInDialog(viewModel);
        const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
        // 如果是弹窗，弹窗外的参数（无论表单参数或静态参数）不应该覆盖弹窗的参数。弹窗打开时传递的参数相当于局部变量，不应被覆盖
        Object.keys(queryParams).forEach((paramName) => {
            if (!isInDialog) {
                parsedQueryParams[paramName] = queryParams[paramName];
            }
            else {
                if (!uiState.hasOwnProperty(paramName)) {
                    parsedQueryParams[paramName] = queryParams[paramName];
                }
            }
        });
        this.updateUIState(viewModel, parsedQueryParams);
    }
    /**
     * 设置静态参数
     */
    setStaticParams(funcId, queryParams, frameworkService, viewModel, callback) {
        this.runtimeFrameworkService.getMenuParams(funcId, (staicParams) => {
            const staticParamsObj = this.mapStaticParamsToObject(staicParams, queryParams, viewModel);
            if (!staticParamsObj) {
                callback();
                return;
            }
            this.updateUIState(viewModel, staticParamsObj);
            callback();
        });
    }
    /**
     * 将staticParams转换为普通对象
     * @param staticParams，形如：[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]
     * @return 形如：{key1: val1, key2: value2 }
     */
    mapStaticParamsToObject(staticParams, queryParams, viewModel) {
        if (!staticParams) {
            return;
        }
        const inDialog = this.isInDialog(viewModel);
        const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
        const result = {};
        staticParams.forEach((value, key, map$$1) => {
            if (!inDialog) {
                // 静态参数不能覆盖查询参数
                if (!queryParams.hasOwnProperty(key)) {
                    result[key] = value;
                }
            }
            else {
                if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {
                    result[key] = value;
                }
            }
        });
        return result;
    }
    /**
     * 是否在弹窗内
     * @param viewModel viewmodel
     */
    isInDialog(viewModel) {
        let isInDialog = false;
        if (viewModel && viewModel.uiState) {
            // tslint:disable-next-line: max-line-length
            if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {
                isInDialog = true;
            }
        }
        return isInDialog;
    }
    /**
     * 更新UIState
     */
    updateUIState(viewModel, params) {
        if (!viewModel || !params) {
            return;
        }
        const uiState = viewModel.uiState;
        // 兼容使用string传递params对象的场景
        if (typeof params === 'string' && params !== '') {
            params = JSON.parse(params);
        }
        // 在UIState为参数创建属性
        Object.keys(params).forEach((propName) => {
            uiState.setPropertyValue(propName, params[propName]);
            if (propName && propName === 'union_session') {
                let sessionInfo = params[propName];
                this.setSessionInfo(viewModel, sessionInfo);
            }
        });
    }
    setSessionInfo(viewModel, sessionInfo) {
        if (!viewModel || !sessionInfo) {
            return;
        }
        if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {
            sessionInfo = JSON.parse(sessionInfo);
        }
        const token = sessionInfo && sessionInfo.token || null;
        const sessionId = sessionInfo && sessionInfo.sessionId || null;
        if (token) {
            viewModel.frameContext.appContext.Token = token;
        }
        if (sessionId) {
            const befRepository = viewModel.frameContext.repository;
            if (befRepository) {
                befRepository.restService.sessionService.setBeSessionId(sessionId);
            }
        }
    }
    /**
     * 获取功能菜单id
     */
    getFuncId(queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['funcId'];
    }
    /**
     * 获取应用id
     */
    getAppId(queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['appId'];
    }
    getTabId(queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['tabId'];
    }
    /**
     * 获取url参数对象
     * @param queryParams url参数
     */
    getParams(queryParams) {
        if (!queryParams) {
            return {};
        }
        let result = {};
        if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {
            let webFormRouteParams = queryParams['WEB_FORM_ROUTE_PARAMS'];
            if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {
                webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\n').replace(/%09/g, '\\t').replace(/%0D/g, '\\r'));
                result = JSON.parse(webFormRouteParams);
            }
            Object.keys(queryParams).forEach(prop => {
                if (prop !== 'WEB_FORM_ROUTE_PARAMS') {
                    result[prop] = queryParams[prop];
                }
            });
            return result;
        }
        return queryParams;
    }
    highOrderInvoke(callback) {
        return () => {
            try {
                const queryParams = this.getParams(this.params);
                const tabId = this.getTabId(queryParams);
                if (tabId) {
                    const controlEvent = this.runtimeFrameworkService.getMenuSwitchControlEvent();
                    if (controlEvent && isObservable(controlEvent)) {
                        controlEvent.subscribe((event) => {
                            if (event) {
                                event.next('ok');
                            }
                        });
                    }
                }
            }
            catch (e) {
                console.warn(e);
            }
            if (callback && typeof callback === 'function') {
                callback();
            }
        };
    }
}
ApplicationParamService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApplicationParamService.ctorParameters = () => [
    { type: ParamService, decorators: [{ type: Optional }] },
    { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
];

/**
 * 实体遍历服务
 * @todo
 * 实体层没有封装相关方法，临时通过BindingData来获取数据
 */
class EntityTraversingService {
    constructor(frameContext) {
        this.frameContext = frameContext;
    }
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 获取值
     */
    getPropValue(path) {
        return this.bindingData.getValue(path);
    }
    /**
     * 获取实体数据
     */
    getEntityData(path) {
        let bindingObj;
        const bindingListOrObject = this.bindingData.getValue(path);
        if (bindingListOrObject instanceof BindingList === true) {
            bindingObj = bindingListOrObject.currentItem;
        }
        else {
            bindingObj = bindingListOrObject;
        }
        return bindingObj.toJSON();
    }
    /**
     * 获取实体列表数据
     */
    getEntityListData(path) {
        const bindingList = this.bindingData.getValue(path);
        return bindingList.toJSON();
    }
}
EntityTraversingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityTraversingService.ctorParameters = () => [
    { type: FrameContext }
];

class EntityManipulationService {
    constructor(frameContext) {
        this.frameContext = frameContext;
    }
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 设置path对应的字段值
     */
    setPropValue(path, value) {
        // 实体层还没有封装，临时用BindingData相关方法代替
        this.bindingData.setValue(path, value, true, true);
    }
}
EntityManipulationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityManipulationService.ctorParameters = () => [
    { type: FrameContext }
];

/**
 * 实体聚合服务
 */
class EntityAggregationService {
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.traversingService = this.frameContext.injector.get(EntityTraversingService);
    }
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 获取path对应列表记录的条数
     */
    count(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        return entityListData.length;
    }
    /**
     * 获取path对应字段的和
     */
    sum(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        const total = entityListData.reduce((accTotal, entityData) => {
            let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            propValue = isNaN(propValue) ? 0 : propValue;
            accTotal += propValue;
            return accTotal;
        }, 0);
        return total;
    }
    /**
     * 获取path对应字段的平均值
     */
    avg(path) {
        const count = this.count(path);
        const total = this.sum(path);
        return count !== 0 ? total / count : 0;
    }
    /**
     * 获取path对应字段的最大值
     */
    max(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        const max = entityListData.reduce((accMax, entityData) => {
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                accMax = propValue;
            }
            return accMax;
        }, null);
        return max ? max : 0;
    }
    /**
     * 获取path对应字段的最小值
     */
    min(path) {
        const splitedPath = this.splitPath(path);
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        const min = entityListData.reduce((accMin, entityData) => {
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                accMin = propValue;
            }
            return accMin;
        }, null);
        return min ? min : 0;
    }
    /**
     * 获取属性值
     */
    getPropValue(entityData, path) {
        let currentData = entityData;
        path.forEach((pathItem) => {
            // 提前退出的都重置为null，主要针对关联对象未赋值场景
            if (!currentData) {
                currentData = null;
                return;
            }
            currentData = currentData[pathItem];
        });
        return currentData;
    }
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @return 形如 {parentListPath: [], propertyPath: []}
     */
    splitPath(path) {
        const listPath = path.concat([]);
        const propPath = [];
        let currentNode = this.bindingData.getValue(listPath);
        while (currentNode instanceof BindingList !== true) {
            const propPathItem = listPath.pop();
            if (!propPathItem) {
                return;
            }
            propPath.unshift(propPathItem);
            currentNode = this.bindingData.getValue(listPath);
        }
        return {
            listPath: listPath,
            propPath: propPath
        };
    }
}
EntityAggregationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityAggregationService.ctorParameters = () => [
    { type: FrameContext }
];

/*
 * @Author: aalizzwell
 * @Date: 2019-05-29 19:07:30
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-05-29 19:31:19
 */
/**
 * EntityList服务
 * @scope FrameComponent
 */
class EntityListService {
    constructor(bindingData) {
        this.bindingData = bindingData;
    }
    /**
     * 获取当前页码
     */
    get pageIndex() {
        return this.bindingData.list.pageIndex;
    }
    /**
     * 获取当前分页大小
     */
    get pageSize() {
        return this.bindingData.list.pageSize;
    }
}
EntityListService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityListService.ctorParameters = () => [
    { type: BindingData }
];

/**
 * 实体服务
 * @scope FrameComponent
 */
class EntityService {
    constructor(frameContext) {
        this.frameContext = frameContext;
        const injector = this.frameContext.injector;
        this.traversingService = injector.get(EntityTraversingService);
        this.manipulationService = injector.get(EntityManipulationService);
        this.aggregationService = injector.get(EntityAggregationService);
    }
    /**
     * 获取path对应的属性值
     */
    getPropValue(path) {
        return this.traversingService.getPropValue(path);
    }
    /**
     * 设置path对应的属性值
     */
    setPropValue(path, value) {
        return this.manipulationService.setPropValue(path, value);
    }
    /**
     * 设置path对应的Entity数据
     */
    getEntityData(path) {
        return this.traversingService.getEntityData(path);
    }
    /**
     * 设置path对应的EntityList数据
     */
    getEntityListData(path) {
        return this.traversingService.getEntityListData(path);
    }
    /**
     * 获取path对应EntityList记录数
     */
    count(path) {
        return this.aggregationService.count(path);
    }
    /**
     * 获取path对应属性的合计值
     */
    sum(path) {
        return this.aggregationService.sum(path);
    }
    /**
     * 获取path对应属性的平均值
     */
    avg(path) {
        return this.aggregationService.avg(path);
    }
    /**
     * 获取path对应属性的最大值
     */
    max(path) {
        return this.aggregationService.max(path);
    }
    /**
     * 获取path对应属性的最小值
     */
    min(path) {
        return this.aggregationService.min(path);
    }
}
EntityService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityService.ctorParameters = () => [
    { type: FrameContext }
];

class BindingPathService {
    constructor(injector, appContext, repository) {
        this.injector = injector;
        this.appContext = appContext;
        this.repository = repository;
    }
    /**
     * 获取组件上下文的绑定路径
     * @param frameContext 组件上下文
     * @returns
     */
    getBindingPathsByFrameContext(frameContext) {
        return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(p => p) || null;
    }
    /**
     * 通过BE表名获取bindingPath
     * @param dataTypeInfo
     * @param tableName
     * @param paths
     * @param level
     * @returns
     */
    getBindingPathsByTableName(dataTypeInfo, tableName, paths = [], level = 0) {
        level++;
        if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
            return paths;
        }
        const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);
        if (props.length < 1) {
            paths = [];
            return paths;
        }
        if (dataTypeInfo.entityInfo) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
        }
        for (let idx = 0; idx < props.length; idx++) {
            const dataTypeInfo = props[idx].typeInfo;
            const path = this.getBindingPathsByTableName(dataTypeInfo, tableName, paths, level);
            if (!path || path.length < 1) {
                continue;
            }
            else {
                paths = paths.concat(path);
                return paths;
            }
        }
        return null;
    }
    /**
     * 获取属性路径中的绑定路径
     * @param paths paths
     * @param entityTypeInfo
     * @returns
     */
    getBindingPathsByPath(paths, entityTypeInfo) {
        let nodeCodes = [];
        if (typeof paths === 'string') {
            paths = paths.split('/').filter(p => p);
        }
        paths = paths.concat([]);
        while (paths.length > 0) {
            const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
            if (dataPropInfo.group === 'List') {
                nodeCodes = paths;
                break;
            }
            paths.pop();
        }
        return nodeCodes;
    }
    /**
     * 获取属性路径信息
     * @param path 属性路径
     * @returns
     */
    getPathInfo(path) {
        const paths = path.split('/').filter(p => p);
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        const entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);
        const propertyName = paths.slice(entityPath.length).join('/');
        return { bindingPath: entityPath.join('/'), propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };
    }
}
BindingPathService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BindingPathService.ctorParameters = () => [
    { type: Injector },
    { type: AppContext },
    { type: Repository }
];

class FormControlService {
    constructor() { }
    getFormControlsByFrameContext(frameContext) {
        return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
    }
    /**
     * 通过binding元数据获取NgFormControl
     * @param frameContext
     * @param binding binding
     * @returns
     */
    getFormControlByBinding(frameContext, binding) {
        const ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        return Object.values(ngFormControls).find((ngFormControl) => ngFormControl && ngFormControl.binding === binding);
    }
    /**
     *
     * @param frameContext frameContext
     * @param fullPath
     * @returns
     */
    getFormControlIndexByFullPath(frameContext, fullPath) {
        const ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        const bindings = fullPath.split('/').filter(p => p);
        return Object.values(ngFormControls).findIndex((ngFormControl) => {
            if (!ngFormControl) {
                return false;
            }
            const bindingPath = frameContext.viewModel.bindingPath;
            const bindingPaths = bindingPath.split('/').filter(p => p);
            const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);
            const fullPath = bindingPaths.concat(formControlBindingPaths);
            return fullPath.join('/') === bindings.join('/');
        });
    }
    /**
     * 通过binding元数据获取NgFormControl位置
     * @param frameContext
     * @param binding binding
     * @returns 从0开始
     */
    getFormControlIndexByBinding(frameContext, binding) {
        const ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        return Object.values(ngFormControls).findIndex((ngFormControl) => ngFormControl && ngFormControl.binding === binding);
    }
}
FormControlService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormControlService.ctorParameters = () => [];

class FrameContextService {
    constructor(injector, appContext, frameContext, repository, bindingPathService, formControlService) {
        this.injector = injector;
        this.appContext = appContext;
        this.frameContext = frameContext;
        this.repository = repository;
        this.bindingPathService = bindingPathService;
        this.formControlService = formControlService;
    }
    /**
       * 通过BE表名获取对应的frameContext
       * @param tableName
       * @returns
       */
    getFrameContextsByTableName(tableName) {
        if (!tableName) {
            throw new Error('tableName 不能为空。');
        }
        const dataTypeInfo = this.repository && this.repository.entityTypeInfo || null;
        if (!dataTypeInfo) {
            return null;
        }
        const bindingPaths = [];
        this.bindingPathService.getBindingPathsByTableName(dataTypeInfo, tableName, bindingPaths);
        const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
        if (!frameContexts || frameContexts.length === 0) {
            return null;
        }
        return frameContexts.filter((frameContext) => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPaths.join('/'));
    }
    /**
     * 根据字段完整路径获取所在的上下文
     * @param propertyPath
     * @param separtor
     * @returns
     */
    getFrameContextsByPropertyPath(propertyPath, separtor = '/') {
        if (!propertyPath) {
            throw new Error('propertyPath 不能为空。');
        }
        const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => {
            const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
            const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
            if (formControls && Object.keys(formControls).length > 0) {
                const key = Object.keys(formControls).find((key) => {
                    const formControl = formControls[key];
                    if (!formControl || !formControl.binding) {
                        return false;
                    }
                    const bindings = formControl.binding.split('.').filter(p => p);
                    const bindingPaths = bindingPath.split('/').filter(p => p);
                    const fullPath = bindingPaths.concat(bindings);
                    return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');
                });
                return key ? true : false;
            }
            return false;
        });
    }
    /**
     * 通过BE字段名获取字段的bindingPath
     * @param bindingPaths 绑定路径
     * @param columnName BE字段名
     * @returns
     */
    getFrameContextsByColumnName(bindingPaths, columnName) {
        if (!bindingPaths) {
            throw new Error('bindingPath 不能为空。');
        }
        if (!columnName) {
            throw new Error('columnName 不能为空。');
        }
        bindingPaths = bindingPaths.filter(p => p);
        const entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;
        if (!entityTypeInfo) {
            return null;
        }
        const dataTypeInfo = entityTypeInfo.getTypeInfoByPath(bindingPaths);
        const dataPropInfos = dataTypeInfo && dataTypeInfo.getPropInfos() || [];
        const columnPropInfo = dataPropInfos.find((dataPropInfo) => dataPropInfo.metadataInfo && (dataPropInfo.metadataInfo.originalDataField === columnName || dataPropInfo.metadataInfo.dataField === columnName));
        if (!columnPropInfo || !columnPropInfo.metadataInfo) {
            return null;
        }
        const frameContexts = this.appContext.frameContextManager.getFrameContexts();
        return frameContexts.filter((frameContext) => {
            const ngFormControls = this.formControlService.getFormControlsByFrameContext(frameContext);
            if (!ngFormControls || Object.keys(ngFormControls).length < 1) {
                return false;
            }
            const currentBindingPaths = this.bindingPathService.getBindingPathsByFrameContext(frameContext) || [];
            const isValidFrameContext = currentBindingPaths.join('/') === bindingPaths.join('/');
            if (!isValidFrameContext) {
                return false;
            }
            const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === columnPropInfo.metadataInfo.path);
            return ngFormControl ? true : false;
        });
    }
    /**
     * 通过绑定路径获取对应的组件上下文数组
     * @param bindingPath bindingPath字符串
     * @param namespace ns,默认为''
     */
    getFrameContextsByBindingPath(bindingPath, namespace = '') {
        if (Array.isArray(bindingPath)) {
            bindingPath = bindingPath.join('/');
        }
        const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => frameContext && frameContext.namespace === namespace && frameContext.viewModel.bindingPath === bindingPath);
    }
}
FrameContextService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameContextService.ctorParameters = () => [
    { type: Injector },
    { type: AppContext },
    { type: FrameContext },
    { type: Repository },
    { type: BindingPathService },
    { type: FormControlService }
];

const FIXED_COLUMN_START_INDEX = 5000;
const GRID_COLUMN_START_INDEX = 10000;
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class FocusInvalidService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, frameContextService, formControlService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.frameContextService = frameContextService;
        this.formControlService = formControlService;
    }
    /**
     * 向第一个验证不通过的字段设置焦点
     */
    focusInvalidInput(verifyInformations, rootElement) {
        // 无验证不通过信息时，直接返回。
        if (!verifyInformations || !verifyInformations.length) {
            return;
        }
        let targetField = null;
        const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            if (targetField) {
                const canFocus = this.focusElement(targetField, rootElement);
                if (canFocus) {
                    verifyInformations['focused'] = true;
                }
            }
        }
    }
    /**
     * 设置DataGrid单元格焦点
     */
    focusGridCell(verifyInformations, focusableDataGrid) {
        if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true || focusableDataGrid.disabled === true) {
            return;
        }
        let targetField = null;
        let targetId = null;
        const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            targetId = firstVerifyInformation.id;
            verifyInformations['focused'] = true;
            focusableDataGrid.editCell(targetId, targetField);
        }
    }
    updateVerifyInformationsIndex(verifyInformations, rootElement) {
        verifyInformations = verifyInformations.filter((verifyInformation) => {
            const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
            const frameContext = frameContexts && frameContexts.filter(frameContext => frameContext && frameContext.frameId === this.frameContext.frameId);
            return frameContext ? true : false;
        });
        return verifyInformations.map((verifyInformation) => {
            let tabIndex = -1;
            if (verifyInformation) {
                if (rootElement && verifyInformation.targetField) {
                    const input = this.getInputElementById(verifyInformation.targetField, rootElement);
                    tabIndex = input && input.getAttribute('tabindex') || -1;
                    tabIndex = Number(tabIndex);
                }
                // const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
                const frameContext = this.frameContext; //frameContexts && frameContexts[0] || null;
                const frameIndex = frameContext.index + 1;
                verifyInformation.tabIndex = tabIndex;
                verifyInformation.domIndex = -1;
                verifyInformation.frameIndex = -1;
                verifyInformation.position = tabIndex;
                if (frameContext) {
                    const domIndex = verifyInformation.fullPath && this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;
                    if (domIndex > 0) {
                        const rowIndex = verifyInformation.index || 0;
                        verifyInformation.domIndex = domIndex;
                        verifyInformation.frameIndex = frameContext.index;
                        verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);
                    }
                }
            }
            return verifyInformation;
        });
    }
    isGridComponent(frameContext) {
        if (frameContext) {
            const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
            return dataGridColumnsName ? true : false;
        }
        return undefined;
    }
    getColumnIndex(frameContext, binding) {
        binding = binding.split('/').filter(p => p).join('/');
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);
        const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        const frameIndex = frameContext.index + 1;
        if (!dataGridColumnsName) {
            return undefined;
        }
        let columns = frameContext.viewModel[dataGridColumnsName];
        if (!columns || columns.length < 1) {
            return undefined;
        }
        // 打平columns
        columns = columns.reduce((results, item) => {
            if (Array.isArray(item)) {
                return results.concat(item);
            }
            return results.concat([item]);
        }, []);
        let position = -1;
        for (let index = 0; index < columns.length; index++) {
            const column = columns[index];
            const fields = column && column.field && column.field.split('.').filter(p => p) || null;
            if (!fields) {
                continue;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                const fixed = column.fixed;
                if (fixed) {
                    const fixedColumns = columns.filter(item => item.fixed === fixed);
                    const fixedColumnIndex = this.getIndexFromColumns(fixedColumns, binding);
                    if (fixed === 'left') {
                        position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;
                    }
                    else {
                        position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;
                    }
                }
                else {
                    position = frameIndex * GRID_COLUMN_START_INDEX + index;
                }
                break;
            }
        }
        return position;
    }
    getIndexFromColumns(columns, binding) {
        const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);
        return columns.findIndex(column => {
            const fields = column && column.field && column.field.split('.').filter(p => p) || null;
            if (!fields) {
                return false;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                return true;
            }
            return false;
        });
    }
    selectFirstVerifyInformation(verifyInformations, rootElement) {
        verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);
        verifyInformations.sort((v1, v2) => Number(v1.position) - Number(v2.position));
        return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;
    }
    getInputElementById(targetField, rootElement) {
        let element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;
        if (element && element.tagName !== 'INPUT') {
            const inputs = element.getElementsByTagName('input');
            if (inputs.length) {
                element = inputs[0];
            }
        }
        return element;
    }
    getFrameContextsByPropertyPath(propertyPath, separtor = '/') {
        if (!propertyPath) {
            return [];
        }
        const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => {
            const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
            const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
            if (formControls && Object.keys(formControls).length > 0) {
                const key = Object.keys(formControls).find((key) => {
                    const formControl = formControls[key];
                    if (!formControl || !formControl.binding) {
                        return false;
                    }
                    const bindings = formControl.binding.split('.').filter(p => p);
                    const bindingPaths = bindingPath.split('/').filter(p => p);
                    const fullPath = bindingPaths.concat(bindings);
                    return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');
                });
                return key ? true : false;
            }
            return false;
        });
    }
    getFormControlIndexByBindingPath(frameContext, binding) {
        const ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        const bindings = binding.split('/').filter(p => p);
        return Object.values(ngFormControls).findIndex((ngFormControl) => {
            if (!ngFormControl) {
                return false;
            }
            const bindingPath = frameContext.viewModel.bindingPath;
            const bindingPaths = bindingPath.split('/').filter(p => p);
            const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);
            const fullPath = bindingPaths.concat(formControlBindingPaths);
            return fullPath.join('/') === bindings.join('/');
        });
    }
    getFieldIndex(frameContext, binding) {
        const isGridComponent = this.isGridComponent(frameContext);
        if (isGridComponent) {
            return this.getColumnIndex(frameContext, binding);
        }
        else {
            return this.getFormControlIndexByBindingPath(frameContext, binding);
        }
    }
    getFormControlsByFrameContext(frameContext) {
        return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
    }
    focusElement(elementId, rootElement) {
        let focused = false;
        let elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);
        // 未获取到指定字段时，返回，不再设置焦点。
        if (elementToFocus) {
            // 如果有多个id重复的元素，则不定位
            const elements = rootElement.nativeElement.ownerDocument.querySelectorAll(`#${elementId}`);
            if (elements && elements.length > 1) {
                return focused;
            }
            // 如果绑定目标字段的控件不是Input元素，则查找其下级节点。
            if (elementToFocus.tagName !== 'INPUT') {
                const subElements = elementToFocus.getElementsByTagName('input');
                if (subElements.length) {
                    elementToFocus = subElements[0];
                }
            }
            elementToFocus.focus();
            focused = true;
        }
        return focused;
    }
    /**
     * 设置焦点
     * @param verifyInformation 错误信息
     * @param frameContext 上下文
     * @returns
     */
    focus(verifyInformation, frameContext) {
        if (!verifyInformation) {
            return;
        }
        const isGridValidation = verifyInformation.index !== null;
        if (isGridValidation) {
            const grid = this.getGridRef(frameContext);
            if (grid) {
                setTimeout(() => {
                    grid.editCell(verifyInformation.id, verifyInformation.targetField);
                }, 0);
            }
        }
        else {
            const frameElement = this.getComponentRef(frameContext);
            const elementId = verifyInformation.targetField;
            this.focusById(elementId, frameElement);
        }
    }
    /**
     * 通过控件id设置焦点
     * @param elementId
     * @param elementRef
     */
    focusById(elementId, elementRef) {
        const document = elementRef && elementRef.nativeElement.ownerDocument || window.document;
        if (document) {
            const element = document.getElementById(elementId);
            if (element.tagName !== 'INPUT') {
                const subElements = element.getElementsByTagName('input');
                if (subElements.length) {
                    const input = subElements[0];
                    if (input && typeof input.focus === 'function') {
                        input.focus();
                    }
                }
            }
            else {
                element.focus();
            }
        }
    }
    /**
     * 获取组件实例
     * @param frameContext
     * @returns
     */
    getComponentRef(frameContext) {
        return this.frameContext && this.frameContext.injector.get(ElementRef, null) || null;
    }
    /**
     * 获取grid实例
     * @param frameContext frameContext
     * @returns
     */
    getGridRef(frameContext) {
        const namespace = frameContext.namespace;
        const bindingPath = frameContext.viewModel.bindingPath;
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];
        const matchedFrameContexts = frameContexts.filter((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());
        let result = null;
        if (matchedFrameContexts) {
            matchedFrameContexts.every((frameContext) => {
                const frameId = frameContext.frameId;
                const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                if (!componentsMap) {
                    return true;
                }
                const datagridComponent = Array.from(componentsMap.values()).find((component) => component && component['__component_type__'] === 'DatagridComponent');
                if (datagridComponent) {
                    result = datagridComponent;
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        return result;
    }
}
FocusInvalidService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FocusInvalidService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FrameContextService },
    { type: FormControlService }
];

const POSTER = 'iframePoster';
const RECEIVER = 'iframeReceiver';
const REPOSITORY = 'repository';
const TAB_ID = 'tabId=';
/**
 * ChangeItemService
 * @scope FrameComponent
 */
class ChangeItemService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, notifyService, languageService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.top = top;
        this.itemChangePoster = new Subject();
        this.itemChangeReceiver = new Subject();
    }
    init() {
        this.top['topMap'] = this.top['topMap'] || {};
        this.changeItem = this.changeItem.bind(this);
    }
    setBykey(key, value) {
        this.top['topMap'] = this.top['topMap'] || {};
        this.top['topMap'][this.tabId] = this.top['topMap'][this.tabId] || {};
        const topObject = this.top['topMap'][this.tabId];
        topObject[key] = value;
    }
    getByKey(key) {
        const topObject = this.top['topMap'][this.tabId] || {};
        return topObject[key];
    }
    // 建立iframe通信
    setIframePoster() {
        if (this.getByKey[POSTER]) {
            return;
        }
        else {
            this.setBykey(POSTER, this.itemChangePoster);
        }
    }
    getIframePoster() {
        this.itemChangePoster = this.getByKey(RECEIVER);
        this.setBykey(RECEIVER, this.itemChangeReceiver);
    }
    changeItem(type, id, parentId) {
        // 根据是否是弹出式卡片取不同的tabId
        const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        const virtualRootComponent = virtualRootFrameContext.frameComponent;
        const isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;
        if (isDialogComponent) {
            this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));
        }
        else {
            this.tabId = parentId;
        }
        this.itemChangeReceiver = this.getByKey(RECEIVER);
        return Observable.create((subscriber) => {
            this.getNextItemByCurrentId(id, type).subscribe((result) => {
                subscriber.next(result);
            });
        });
    }
    // 在list初始化时调用，缓存list的repository
    setRepository() {
        if (window.location.hash.includes(TAB_ID)) {
            this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));
            this.setBykey(REPOSITORY, this.frameContext.repository);
            this.setIframePoster();
            this.getIframePoster();
        }
    }
    // 根据类型和id获取相邻的数据
    getNextItemByCurrentId(currentId, type) {
        const repository = this.getByKey(REPOSITORY);
        const { pageSize, pageIndex, total } = repository.entityCollection.paginationInfo;
        let currentIdx = null;
        const list = repository.entityCollection.getAllEntities();
        list.find((x, idx) => {
            if (x.id === currentId) {
                currentIdx = idx;
            }
        });
        // 没有在列表中找到数据，返回空
        if (currentIdx === null) {
            // 新增取消当前无数据时点上一条下一条
            if (list.length) {
                switch (type) {
                    case 'prev':
                        return of$1(list[list.length - 1].id);
                        break;
                    case 'next':
                        this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });
                        return EMPTY;
                }
            }
            return of$1(null);
        }
        let nextIdx = currentIdx;
        switch (type) {
            case 'prev':
                // 当前页第一条,且非第一页,取上一页最后一条
                if (currentIdx === 0 && pageIndex !== 1) {
                    return repository.getEntities([], [], pageSize, pageIndex - 1).pipe(switchMap(result => {
                        nextIdx = pageSize - 1;
                        return of$1(result[nextIdx].id);
                    }));
                }
                // 第一页第一条，仍返回原有数据
                else if (currentIdx === 0 && pageIndex === 1) {
                    this.notifyService.info(this.languageService.changeToFirst, { hideTitle: true });
                    return of$1(list[nextIdx].id);
                }
                // 不是第一条，返回上一条
                else {
                    nextIdx = currentIdx - 1;
                    return of$1(list[nextIdx].id);
                }
                break;
            case 'next':
                // 超过当前页
                if (currentIdx + 1 + 1 > list.length) {
                    // 且非最后一条数据,取下一页第一条数据
                    if (((pageIndex - 1) * pageSize + currentIdx + 1) < total) {
                        return repository.getEntities([], [], pageSize, pageIndex + 1).pipe(switchMap(result => {
                            return of$1(result[0].id);
                        }));
                    }
                    // 最后一条数据，仍返回原数据
                    else {
                        this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });
                        return of$1(list[nextIdx].id);
                    }
                }
                else {
                    nextIdx = currentIdx + 1;
                    return of$1(list[nextIdx].id);
                }
                break;
        }
    }
}
ChangeItemService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ChangeItemService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FormNotifyService },
    { type: LanguageService }
];

class Service {
    /**
     * 命令参数
     */
    get eventParam() {
        return this.context && this.context.eventParam || null;
    }
}

class DataGridService extends Service {
    /**
     * 清空所有勾选行
     * @description 取消勾选当前表单所有勾选行
     */
    clearChecks() {
        // const params = this.eventParam;
        // if (params && Array.isArray(params)) {
        // const param = params[0];
        // if (param instanceof QueryCondition) {
        const gridComponents = this.getFormGridComponents(this.context);
        if (gridComponents && gridComponents.length > 0) {
            gridComponents.forEach((gridComponent) => {
                let clearSelections = true;
                if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {
                    clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];
                }
                if (clearSelections) {
                    gridComponent.clearCheckeds(true);
                }
            });
        }
        // }
        // }
    }
    /**
     * 取消勾选删除的行
     * @param ids ids
     * @returns
     * @description 取消勾选当前绑定路径下指定数据，清空下级表格中所有勾选行，仅供删除场景使用
     */
    uncheckDeletedRows(ids) {
        if (typeof ids === 'string') {
            if (ids.indexOf(',') !== -1) {
                ids = ids.split(',').filter(p => p);
            }
            else {
                ids = [ids];
            }
        }
        if (!ids || ids.length < 1) {
            return;
        }
        // 获取bindingPath及ns
        const frameContext = this.context.frameContext;
        if (!frameContext) {
            return;
        }
        const appContext = frameContext.appContext;
        const ns = frameContext.namespace;
        const bindingPath = frameContext.viewModel && frameContext.viewModel.bindingPath;
        if (!appContext) {
            return;
        }
        // 根据bindingPath获取所有可能的frameContext
        const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
        const frameContextsInCurrentBindingPath = frameContexts.filter(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath === bindingPath);
        // 获取这些frame中所有的表格组件map
        const gridInCurrentFrame = this.getGridComponentByFrameContexts(frameContextsInCurrentBindingPath);
        if (!gridInCurrentFrame) {
            return;
        }
        // 一个bindingPath下应该只有一个grid
        const grid = gridInCurrentFrame.pop();
        // 清空命令所在的frame下表格的指定勾选
        if (grid) {
            grid.unCheckRows(ids, true);
        }
        // 清空下级表格的所有勾选行数据
        const childrenFrameContexts = frameContexts.filter(frameContext => frameContext.viewModel.bindingPath !== bindingPath && frameContext.viewModel.bindingPath.startsWith(bindingPath));
        const childrenGridComponents = this.getGridComponentByFrameContexts(childrenFrameContexts);
        // 清空命令所在frame
        if (childrenGridComponents && childrenGridComponents.length > 0) {
            childrenGridComponents.forEach((gridComponent) => {
                // 清空所有勾选
                gridComponent.checkedRows = [];
            });
        }
    }
    /**
     * 取消勾选行
     * @param ids ids
     * @returns
     */
    uncheckRows(ids) {
        if (typeof ids === 'string') {
            ids = [ids];
        }
        if (!ids || ids.length < 1) {
            return;
        }
        const gridComponents = this.getFormGridComponents(this.context);
        if (gridComponents && gridComponents.length > 0) {
            gridComponents.forEach((gridComponent) => {
                gridComponent.unCheckRows(ids, true);
            });
        }
    }
    /**
     * 根据命令上下文获取当前命令所在组件的表格实例
     * @param commandContext 命令上下文
     * @returns
     */
    getFormGridComponents(commandContext) {
        let grids = [];
        const frameContext = commandContext && commandContext.frameContext;
        const appContext = frameContext && frameContext.appContext || null;
        if (appContext) {
            const componentRefs = appContext.componentRefs;
            const collect = Array.from(componentRefs.values()); // [Map<string,any>,Map<string,any>]
            collect.forEach((item) => {
                const components = Array.from(item.values());
                const gridComponents = components.filter((component) => component instanceof DatagridComponent);
                grids = grids.concat(gridComponents);
            });
        }
        return grids;
    }
    getGridComponentByFrameContexts(frameContexts) {
        return frameContexts.reduce((result, frameContext) => {
            const appContext = frameContext.appContext;
            const frameId = frameContext.frameId;
            // 获取当前组件下所有的组件实例
            const componentsRef = appContext.componentRefs.get(frameId);
            const grids = componentsRef && Array.from(componentsRef.values()).filter(component => component instanceof DatagridComponent);
            if (grids && grids.length > 0) {
                result = result.concat(grids);
            }
            return result;
        }, []);
    }
}
DataGridService.decorators = [
    { type: Injectable }
];

// tslint:disable: no-string-literal max-line-length
/**
 * 列表仓库服务
 */
class ListDataService {
    /**
     * 构造
     * @param msgService msgService
     * @param repository repository
     * @param bindingData bindingData
     * @param loadingService loadingService
     * @param languageService languageService
     * @param formNotifyService formNotifyService
     * @param formErrorService formErrorService
     * ! @param viewModel viewModel,vm是后期注入的，老表单获取不到，一定要做非空判断
     * @param filterConditionService filterConditionService
     */
    constructor(msgService, repository, bindingData, loadingService, languageService, formNotifyService, formErrorService, viewModel, filterConditionService) {
        this.msgService = msgService;
        this.repository = repository;
        this.bindingData = bindingData;
        this.loadingService = loadingService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        this.viewModel = viewModel;
        this.filterConditionService = filterConditionService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        // if (!filterConditionService) {
        //   this.filterConditionService = new FilterConditionService();
        // }
    }
    /**
     * 加载
     */
    load(filter$$1, sort) {
        // 参数处理
        filter$$1 = !filter$$1 ? '[]' : filter$$1;
        sort = !sort ? '[]' : sort;
        // 合并过滤条件
        filter$$1 = this.mergeFilterConditions(filter$$1);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        const loadingTimerId = this.loadingService.showLoadingWithDelay(200);
        const query$ = this.repository.getEntities(JSON.parse(filter$$1), JSON.parse(sort), null, null);
        return query$.pipe(tap(() => {
            // 触发远端合计事件
            this.fireQueryEvent(filter$$1);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 过滤数据
     * @param filter 过滤条件
     * @param sort 排序条件
     */
    filter(filter$$1, sort) {
        // 参数处理
        filter$$1 = !filter$$1 ? '[]' : filter$$1;
        sort = !sort ? '[]' : sort;
        // 合并过滤条件
        filter$$1 = this.mergeFilterConditions(filter$$1);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        const loadingTimerId = this.loadingService.showLoadingWithDelay(200);
        const query$ = this.repository.filter(JSON.parse(filter$$1), JSON.parse(sort));
        return query$.pipe(tap(() => {
            // 触发远端合计事件
            this.fireQueryEvent(filter$$1);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 查询
     */
    query(filter$$1, sort, pageSize, pageIndex) {
        // 参数处理
        filter$$1 = (filter$$1 === '') ? '[]' : filter$$1;
        sort = (sort === '') ? '[]' : sort;
        // 合并过滤条件
        filter$$1 = this.mergeFilterConditions(filter$$1);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(5);
        const query$ = this.repository.getEntities(JSON.parse(filter$$1), JSON.parse(sort), pageSize, pageIndex);
        return query$.pipe(tap(() => {
            // 触发远端合计事件
            this.fireQueryEvent(filter$$1);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.queryFailed, error);
        }));
    }
    queryChild(filter$$1, sort) {
        // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;
        // if (isUpdateWithPaging) {
        //   return of(null);
        // }
        // tslint:disable-next-line: max-line-length
        const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
        const paths = fullPaths.slice(0, fullPaths.length - 1);
        // debug
        // tslint:disable-next-line: max-line-length
        const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
        const bindingData = this.viewModel.bindingData;
        let nodeCode = bindingPaths[bindingPaths.length - 1];
        nodeCode = nodeCode.substr(0, nodeCode.length - 1);
        // 获取上级实体
        const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
        const BindingList$$1 = bindingData.getValue(parentPaths);
        if (!BindingList$$1) {
            return;
        }
        this.viewModel.frameContext.appContext.params.delete("retrieveing");
        const configPath = `/${nodeCode}`;
        const config = this.repository.entityCollection.getPaginationConfigByPath(configPath);
        if (config) {
            const { pageIndex = 1, pageSize = 0 } = config;
            // pageSize = 0表示未分页
            if (pageSize !== 0) {
                this.viewModel.frameContext.appContext.params.set('queryChild', true);
                const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
                return request$.pipe(tap(() => { }, error => {
                    this.formErrorService.exception(this.languageService.queryFailed, error);
                }));
            }
        }
    }
    /**
     * 获取分页信息
     * @param nodeCode nodeCode
     * @returns 分页信息，包括：分页大小、当前页码
     * @description 基本分页信息在分页信息中存储时key为nodeCode
     */
    /*private getPagingInfo(nodeCode: string) {
      const result: { pageIndex?: number, pageSize?: number } = {};
      const nodeCodePath = `/${nodeCode}`;
      const defaultPagingInfo = this.repository.entityCollection.getPaginationConfigByPath(nodeCodePath);
      const pageSize = defaultPagingInfo && defaultPagingInfo.pageSize || 0;
      const pageIndex = defaultPagingInfo && defaultPagingInfo.pageIndex || 1;
      result.pageIndex = pageIndex;
      result.pageSize = pageSize;
      return result;
    }*/
    /**
     * 追加一条新数据
     */
    append() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'append' });
        }
        const append$ = this.repository.append();
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.appendFailed, error);
        }));
    }
    /**
     * 当前行前或后插入数据
     * @param position 1 | -1
     */
    insert(position = -1) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        const append$ = this.repository.insert(position);
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.appendFailed, error);
        }));
    }
    /**
     * 提交变更（批量编辑页面，行切换时提交增量）
     */
    updateChanges() {
        const update$ = this.repository.updateAllChanges();
        return update$;
    }
    /**
     * 批量保存
     * @param successMsg 自定义提示信息
     */
    save(successMsg) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const save$ = this.repository.applyChanges();
        const result$ = save$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            if (successMsg && successMsg.trim()) {
                let showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        const options = JSON.parse(successMsg);
                        if (options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                this.formNotifyService.success(this.languageService.saveSuccess, { hideTitle: true });
            }
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.multiSaveFailed, error);
        }));
        return result$;
    }
    /**
     * 删除
     * @param id 要删除的数据的id
     * @param ifSave 是否保存
     * @param successMsg 自定义提示信息
     * @param confirm 是否需要确认
     * @param breakable 是否可中断，ifSave为false时流会中断
     */
    remove(id, ifSave, successMsg, confirm = true, breakable = true) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'delete' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        confirm = (confirm === false || confirm === 'false') ? false : true;
        breakable = (breakable === false || breakable === 'false') ? false : true;
        const action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : of(true);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            ifSave = (ifSave === false || ifSave === 'false') ? false : true;
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeById(id, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }), switchMap(() => {
                if (ifSave === true || !breakable) {
                    // return this.load();
                    return of([]);
                }
                else {
                    // 批量编辑列表表格处于编辑态场景时，为防止执行后续命令导致数据重新加载，所以在此将命令中断了。但同时也导致了删除数据后勾选记录依然存在。所以在这里需要单独调用一次清空勾选方法。
                    const datagridService = new DataGridService();
                    datagridService.context = this['context'];
                    datagridService.uncheckDeletedRows([id]);
                    return empty();
                }
            }));
        }));
    }
    /**
     * 批量删除
     * @param ids ids
     * @param ifSave 是否保存
     * @param successMsg 自定义提示信息
     * @param deleteCurrentRowIfNoChecks 没有勾选时删除当前行
     */
    removeRows(ids, ifSave, successMsg, deleteCurrentRowIfNoChecks = false) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeRows' });
        }
        deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;
        if (!ids || ids.length === 0) {
            const currentId = this.bindingData.list.currentId;
            if (deleteCurrentRowIfNoChecks === true && currentId) {
                ids = [this.bindingData.list.currentId];
            }
            else {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return empty();
            }
        }
        const action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeByIds(ids, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }), switchMap(() => {
                return of([]);
            }));
        }));
    }
    /**
     * 删除后的刷新
     */
    refreshAfterRemoving(loadCmdName, loadCmdFrameId) {
        if (this.viewModel && loadCmdName && loadCmdFrameId) {
            const commandService = this.viewModel.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        }
        return this.load();
    }
    /**
     * 刷新
     * @param loadCmdName 刷新命令
     * @param loadCmdFrameId 刷新命令所在的frameId
     */
    refresh(loadCmdName, loadCmdFrameId) {
        if (this.viewModel && loadCmdName && loadCmdFrameId) {
            const commandService = this.viewModel.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        }
        return this.load();
    }
    /**
     * 取消时检测未保存记录
     */
    cancel() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'cancel' });
        }
        const hasChange$ = DataChangeDetectionService.hasChange(this.viewModel.frameContext);
        return hasChange$.pipe(switchMap((changed) => {
            if (!changed) {
                return this._cancel();
            }
            else {
                return this.msgService.question(this.languageService['cancelWithoutSave']).pipe(switchMap((ifCancel) => {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return this._cancel();
                }));
            }
        }));
    }
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    revert() {
        return this._cancel();
    }
    /**
     * 取消（内部取消）
     */
    _cancel() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    /**
     * 获取根组件appContext
     */
    get messagePipe() {
        if (this.viewModel && this.viewModel.frameContext) {
            const appContext = this.viewModel.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
    /**
     * 触发查询事件
     * @param filters 过滤条件
     */
    fireQueryEvent(filters) {
        const messagePipe = this.messagePipe;
        // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;
        if (messagePipe) {
            messagePipe.next({ type: 'query' });
        }
    }
    /**
     * 合并过滤条件
     * @param filter 表单过滤条件
     */
    mergeFilterConditions(filter$$1) {
        if (typeof filter$$1 === 'string') {
            filter$$1 = JSON.parse(filter$$1) || [];
        }
        const filters = filter$$1;
        const bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (bindingPath) {
            const originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];
            // this.filterConditionService.getFilters(bindingPath) || [];
            const conditions = Array.from(originalConditions);
            if (conditions && conditions.length > 0) {
                /* filters.forEach((item: any, index: number) => {
                  const field = item.FilterField || null;
                  if (field) {
                    const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);
                    if (duplicateIndex !== -1) {
                      filters[index] = conditions[duplicateIndex];
                      conditions.splice(duplicateIndex, 1);
                    }
                  }
                });*/
                // 修改命令上过滤条件的最后一个查询关系为and
                if (filters.length > 0) {
                    // 最后一个过滤条件
                    const lastFilter = filters[filters.length - 1];
                    if (lastFilter) {
                        if (lastFilter.hasOwnProperty('Relation')) {
                            delete lastFilter.Relation;
                        }
                        lastFilter.relation = 1;
                    }
                }
                // 合并新的过滤条件和原来命令上的过滤条件
                filters.push(...conditions);
            }
        }
        return JSON.stringify(filters);
    }
    /**
     * 合并排序条件
     * @param sort 排序条件
     */
    mergeSortConditions(sort) {
        if (typeof sort === 'string') {
            sort = JSON.parse(sort) || [];
        }
        const sorts = sort;
        const bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (bindingPath) {
            // 获取当前绑定路径的所有排序条件
            const originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, (direction) => {
                if (direction === 'asc') {
                    return 0;
                }
                else {
                    return 1;
                }
            }) || [];
            const conditions = Array.from(originalConditions);
            // 如果当前绑定路径有排序条件，则忽略命令上预制的排序条件
            if (conditions && conditions.length > 0) {
                // 遍历已有的过滤条件，如果有重复的field，用后者的覆盖已有的
                /* sorts.forEach((item: any, index: number) => {
                  const field = item.SortField || null;
                  if (field) {
                    const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);
                    if (duplicateIndex !== -1) {
                      sorts[index] = conditions[duplicateIndex];
                      conditions.splice(duplicateIndex, 1);
                    }
                  }
                });*/
                return JSON.stringify(conditions);
                // 将其余排序条件添加到排序数组
                // sorts.push(...conditions);
            }
        }
        return JSON.stringify(sorts);
    }
}
ListDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ListDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: Repository },
    { type: BindingData },
    { type: FormLoadingService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormNotifyService },
    { type: FormErrorService },
    { type: ViewModel },
    { type: FilterConditionService }
];

/**
 * 子列表取数服务
 */
class SubListDataService {
    /**
     * 构造函数
     */
    constructor(msgService, repository, loadingService, viewModel, languageService, formNotifyService, formErrorService) {
        this.msgService = msgService;
        this.repository = repository;
        this.loadingService = loadingService;
        this.viewModel = viewModel;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.viewModel = viewModel;
    }
    /**
     * 新增
     */
    add() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'add' });
        }
        const path = this.getPath();
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const append$ = this.repository.appendByPath(path);
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 在指定位置插入
     * @param position 位置
     */
    insert(position = -1) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        const path = this.getPath();
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const append$ = this.repository.insertByPath(path, position);
        return append$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 删除子表数据
     */
    remove(id, successMsg) {
        const msg = successMsg ? successMsg : '';
        return this.innerRemove(id, false, msg);
    }
    /**
     * 删除子表数据（不确认）
     */
    removeWithoutConfirm(id) {
        return this.innerRemove(id, true, '');
    }
    /**
     * 批量删除子表
     * @param ids ids
     * @param successMsg 自定义提示信息
     */
    removeChildrenByIds(ids, successMsg) {
        if (!ids) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        const action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return EMPTY;
            }
            const path = this.getPath();
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.batchRemoveByPath(path, ids);
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 删除
     */
    innerRemove(id, isConfirm, successMsg) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'remove' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        let action$;
        if (isConfirm === false) {
            action$ = this.msgService.question(this.languageService.confirmDeletion);
        }
        else {
            action$ = of(true);
        }
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            const path = this.getPath();
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeByPath(path, id);
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 删除并保存
     * @param id id
     * @param successMsg 自定义提示信息
     */
    removeAndSave(id, successMsg) {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeAndSave' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return empty();
        }
        const action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            // 删除子表数据
            const path = this.getPath();
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.repository.removeByPath(path, id);
            return remove$.pipe(
            // 执行主表保存
            switchMap(() => {
                const fid = this.viewModel.bindingData.list.currentId;
                return this.repository.applyChangesById(fid);
            }), 
            // 隐藏加载中
            tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.formErrorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 上移或下移数据
     * @param direction 方向，up | down
     * @param field 排序字段
     * @param targets 要移动的数据
     * @description
     * 使用该方法时排序字段必须有值，否则无法排序
     */
    move(direction, field, targets) {
        if (!targets) {
            return;
        }
        if (typeof targets === 'string') {
            targets = targets.split(',').filter(p => p);
        }
        const bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (!bindingPath) {
            return;
        }
        const bindingList = this.viewModel.bindingData.getList();
        if (!bindingList || bindingList.length < 1) {
            return;
        }
        targets.forEach((target) => {
            const index = bindingList.getIndexById(target);
            if (index === -1) {
                return;
            }
            const item = bindingList.findById(target);
            const position = item.getValue(field);
            const base = direction === 'up' ? -1 : 1;
            // 待交换的行信息
            const exchangeRowIndex = index + base;
            if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {
                // 第一行无法上移，最后一行无法下移
                return;
            }
            const exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);
            const exchangeRow = bindingList.findById(exchangeRowId);
            const exchangeRowPosition = exchangeRow[field];
            // 移动行和交换行都没有排序
            if (this.isNullOrEmpty(position) && this.isNullOrEmpty(exchangeRowPosition)) {
                return;
            }
            bindingList.swapById(target, exchangeRowId);
            exchangeRow.setValue(field, position, true, true);
            item.setValue(field, exchangeRowPosition, true, true);
        });
    }
    isNullOrEmpty(value) {
        return value === '' || value === null || value === undefined;
    }
    /**
     * 获取完整路径
     * @todo：强识别到从表这一级
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    getPath() {
        const bindingPath = this.viewModel.bindingPath;
        const rid = this.viewModel.bindingData.list.currentId; // root表数据id
        let path = '/' + rid;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 获取根组件appContext
     */
    get messagePipe() {
        if (this.viewModel && this.viewModel.frameContext) {
            const appContext = this.viewModel.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
}
SubListDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubListDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: Repository },
    { type: FormLoadingService },
    { type: ViewModel },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormNotifyService },
    { type: FormErrorService }
];

/**
 * 基础数据服务
 */
class BaseDataService {
    /**
     * 实体仓库
     */
    get repository() {
        return this.frameContext.repository;
    }
    /**
     * Rest服务
     */
    get restService() {
        return this.repository.restService;
    }
    /**
     * 数据绑定
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 构造函数
     */
    constructor(frameContext) {
        this.frameContext = frameContext;
    }
}

/**
 * 树数据的帮助类
 */
class ParentTreeNodeUtil {
    /**
     * 选中第一个根节点
     */
    selectFirstRootNode(bindingData, hierarchyInfoKey) {
        const treeNodesData = bindingData.list.toJSON();
        const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);
        return firstRootNodeId;
    }
    selectNodeByBindingList(bindingList, hierarchyInfoKey, selectedNodeId) {
        const treeNodesData = bindingList.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        let currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        setTimeout(() => {
            bindingList.setCurrentId(currentId, true, true);
        }, 0);
    }
    /**
     * 选中节点
     */
    selectedNode(bindingData, hierarchyInfoKey, selectedNodeId) {
        const treeNodesData = bindingData.list.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        let currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        if (bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        setTimeout(() => {
            bindingData.list.currentId = null;
            bindingData.list.setCurrentId(currentId, true, true);
        }, 0);
    }
    /**
     * 检查是否有子节点
     */
    hasChildNodes(treeNodesData, hierarchyInfoKey, fid) {
        const fNodeData = this.getNodeDataById(treeNodesData, fid);
        // const fLayer = fNodeData[hierarchyInfoKey]['layer'];
        const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];
        // 非明细节点，返回true
        if (fIsDetail === false) {
            return true;
        }
        return false;
        // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fid);
        // return childNodesData.length > 0;
    }
    /**
     * 获取根节点（多个根节点时获取第一个）
     * @return 找不到时返回null
     */
    getFirstNodeId(treeNodesData, hierarchyInfoKey) {
        let rootData = treeNodesData.find((itemData) => {
            const layer = itemData[hierarchyInfoKey]['layer'];
            return layer === 1;
        });
        if (!rootData) {
            const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);
            rootData = treeNodesData.find((itemData) => {
                const layer = itemData[hierarchyInfoKey]['layer'];
                return layer === rootLayer;
            });
        }
        return rootData ? rootData['id'] : '';
    }
    getRootLayer(treeNodesData, hierarchyInfoKey) {
        let layer = null;
        if (treeNodesData && Array.isArray(treeNodesData)) {
            const layers = treeNodesData.map(item => {
                const layer = item[hierarchyInfoKey]['layer'];
                return layer;
            });
            const minLayer = Math.min.apply(Math, layers);
            if (!isNaN(minLayer)) {
                layer = minLayer;
            }
        }
        return layer;
    }
    /**
     * 获取下一个节点（删除后）
     */
    getNextNodeId(treeNodesData, hierarchyInfoKey, currentId) {
        // 当前节点信息
        const currentNodeData = treeNodesData.find((itemData) => {
            return itemData['id'] === currentId;
        });
        const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];
        // 父节点信息
        const fLayer = currentLayer - 1;
        const fParentElement = currentNodeData[hierarchyInfoKey]['parentElement'];
        // 查找兄弟节点
        const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement);
        // 如果没有兄弟节点，向上查找
        if (siblingtreeNodesData.length === 1) {
            const parentData = treeNodesData.find((itemData) => {
                return itemData['id'] === fParentElement;
            });
            // 存在父节点，则设置父节点；
            // 不存在父节点，则设置第一个根节点。
            if (!parentData) {
                return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            return parentData['id'];
        }
        else {
            return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);
        }
    }
    /**
     * 获取下个兄弟节点的id
     */
    getNextSiblingNodeId(siblingtreeNodesData, currentId) {
        if (siblingtreeNodesData.length <= 1) {
            return '';
        }
        const currentIndex = siblingtreeNodesData.findIndex((itemData) => {
            return itemData['id'] === currentId;
        });
        // 最后一行上移一行，其他下移一行
        let nextIndex = -1;
        if (currentIndex === siblingtreeNodesData.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return siblingtreeNodesData[nextIndex]['id'];
    }
    /**
     * 获取下级节点的BindingObjects集合
     */
    getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement) {
        const childtreeNodesData = treeNodesData.filter((itemData) => {
            const layer = itemData[hierarchyInfoKey]['layer'];
            const parentElement = itemData[hierarchyInfoKey]['parentElement'];
            return (layer === fLayer + 1) && fParentElement == parentElement;
        });
        return childtreeNodesData;
    }
    /**
     * 获取id获取节点数据
     */
    getNodeDataById(treeNodesData, id) {
        const nodeData = treeNodesData.find((itemData) => {
            return itemData['id'] === id;
        });
        return nodeData ? nodeData : null;
    }
}

/**
 * 树数据的帮助类
 */
class PathTreeNodeUtil {
    /**
     * 选中第一个根节点
     */
    selectFirstRootNode(bindingData, hierarchyInfoKey) {
        const treeNodesData = bindingData.list.toJSON();
        const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);
        return firstRootNodeId;
    }
    selectNodeByBindingList(bindingList, hierarchyInfoKey, selectedNodeId) {
        const treeNodesData = bindingList.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        let currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        setTimeout(() => {
            bindingList.setCurrentId(currentId, true, true);
        }, 0);
    }
    /**
     * 选中节点
     */
    selectedNode(bindingData, hierarchyInfoKey, selectedNodeId) {
        const treeNodesData = bindingData.list.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        let currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        if (bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        setTimeout(() => {
            bindingData.list.currentId = null;
            bindingData.list.setCurrentId(currentId, true, true);
        }, 0);
    }
    /**
     * 检查是否有子节点
     */
    hasChildNodes(treeNodesData, hierarchyInfoKey, fid) {
        const fNodeData = this.getNodeDataById(treeNodesData, fid);
        // const fLayer = fNodeData[hierarchyInfoKey]['layer'];
        // const fPath  = fNodeData[hierarchyInfoKey]['path'];
        const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];
        // 非明细节点，返回true
        if (fIsDetail === false) {
            return true;
        }
        return false;
        // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);
        // return childNodesData.length > 0;
    }
    /**
     * 获取根节点（多个根节点时获取第一个）
     * @return 找不到时返回null
     */
    getFirstNodeId(treeNodesData, hierarchyInfoKey) {
        let rootData = treeNodesData.find((itemData) => {
            const layer = itemData[hierarchyInfoKey]['layer'];
            return layer === 1;
        });
        if (!rootData) {
            const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);
            rootData = treeNodesData.find((itemData) => {
                const layer = itemData[hierarchyInfoKey]['layer'];
                return layer === rootLayer;
            });
        }
        return rootData ? rootData['id'] : '';
    }
    getRootLayer(treeNodesData, hierarchyInfoKey) {
        let layer = null;
        if (treeNodesData && Array.isArray(treeNodesData)) {
            const layers = treeNodesData.map(item => {
                const layer = item[hierarchyInfoKey]['layer'];
                return layer;
            });
            const minLayer = Math.min.apply(Math, layers);
            if (!isNaN(minLayer)) {
                layer = minLayer;
            }
        }
        return layer;
    }
    /**
     * 获取下一个节点（删除后）
     */
    getNextNodeId(treeNodesData, hierarchyInfoKey, currentId) {
        // 当前节点信息
        const currentNodeData = treeNodesData.find((itemData) => {
            return itemData['id'] === currentId;
        });
        const currentPath = currentNodeData[hierarchyInfoKey]['path'];
        const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];
        // 父节点信息
        const fLayer = currentLayer - 1;
        const fPath = currentPath.substring(0, currentPath.length - 4);
        // 查找兄弟节点
        const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);
        // 如果没有兄弟节点，向上查找
        if (siblingtreeNodesData.length === 1) {
            const parentData = treeNodesData.find((itemData) => {
                return itemData[hierarchyInfoKey]['path'] === fPath;
            });
            // 存在父节点，则设置父节点；
            // 不存在父节点，则设置第一个根节点。
            if (!parentData) {
                return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            return parentData['id'];
        }
        else {
            return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);
        }
    }
    /**
     * 获取下个兄弟节点的id
     */
    getNextSiblingNodeId(siblingtreeNodesData, currentId) {
        if (siblingtreeNodesData.length <= 1) {
            return '';
        }
        const currentIndex = siblingtreeNodesData.findIndex((itemData) => {
            return itemData['id'] === currentId;
        });
        // 最后一行上移一行，其他下移一行
        let nextIndex = -1;
        if (currentIndex === siblingtreeNodesData.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return siblingtreeNodesData[nextIndex]['id'];
    }
    /**
     * 获取下级节点的BindingObjects集合
     */
    getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath) {
        const childtreeNodesData = treeNodesData.filter((itemData) => {
            const layer = itemData[hierarchyInfoKey]['layer'];
            const path = itemData[hierarchyInfoKey]['path'];
            return (layer === fLayer + 1) && path.startsWith(fPath);
        });
        return childtreeNodesData;
    }
    /**
     * 获取id获取节点数据
     */
    getNodeDataById(treeNodesData, id) {
        const nodeData = treeNodesData.find((itemData) => {
            return itemData['id'] === id;
        });
        return nodeData ? nodeData : null;
    }
}

/*
 * @Author: aalizzwell
 * @Date: 2019-05-30 14:12:39
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-05-30 16:18:47
 */
class TreeUtilFactory {
    static getInstance(treeType) {
        let util = null;
        switch (treeType) {
            case 'path':
                util = new PathTreeNodeUtil();
                break;
            case 'parent':
                util = new ParentTreeNodeUtil();
                break;
            default: break;
        }
        return util;
    }
}

/**
 * 父子树仓库
 */
class ParentTreeRepository {
    /**
     * 添加兄弟节点
     */
    addSibling(repository, id) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSiblingUri = `${baseUri}/service/parenthierarchycreatesibling`;
        const body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加兄弟节点
     */
    addChild(repository, parentId) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addChildUri = `${baseUri}/service/parenthierarchycreatechildlayer`;
        const body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加子表兄弟节点
     */
    addSubSibling(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubSiblingUri = `${baseUri}/service/childnodeparenthierarchycreatesibling`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    /**
     * 添加子表子节点
     */
    addSubChild(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubChildUri = `${baseUri}/service/childnodeparenthierarchycreatechildlayer`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let paths = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);
            return entity;
        }));
    }
    getPaths(nodes, ids) {
        let paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (let i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + `/${ids[i]}`;
                    paths = paths + `/${nodes[i]}s`;
                }
            }
        }
        return paths;
    }
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    loadByParentId(repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow = false, pagination, frameContext, reload = false) {
        const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        const restService = repository.restService;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        const isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        const entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        const requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map((responseInfo) => {
            const paginationInfo = this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
            }
            else {
                repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
            }
            return entities;
        }));
    }
    // tslint:disable-next-line: max-line-length
    loadFullTree(repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const queryUrl = `${baseUri}/service/parentidfulltreequery`;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        const body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType,
            loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap((responseInfo) => {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                const frameContext = context.frameContext;
                const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    const list = responseInfo.returnValue.result;
                    const selectedRowId = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);
                    const hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);
                }
            }
        }), map((responseInfo) => {
            const frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
            }
            else {
                repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
            }
            return entities;
        }));
    }
    /**
     * 插入对父节点的过滤
     */
    buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        const parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';
        const parentFilterArray = [
            {
                "FilterField": `${originalHierarchyInfoKey}.Layer`,
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        if (parentElement) {
            parentFilterArray.push({
                "FilterField": `${originalHierarchyInfoKey}.ParentElement`,
                "Value": parentElement,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 0
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    }
    buildEntityFilter(filter$$1, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter$$1 && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter$$1) {
            filter$$1 = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter$$1 && filter$$1.length > 0) {
            filter$$1[filter$$1.length - 1].Relation = 0;
        }
        const entityFilter = {
            FilterConditions: filter$$1,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 清空后代实体
     * @description parentHierarchyInfo中layer为要清空后代节点的layer，但里面的parentElement不是父级的id，而是要清空后代节点的id
     */
    clearDescendantEntities(repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow = false) {
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        const nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);
        if (frozenCurrentRow) {
            repository.entityCollection.removeEntities((entity) => {
                const id = entity[entity.primaryKey];
                return nodes.includes(id);
            });
        }
        else {
            repository.entityCollection.removeData((entity) => {
                const id = entity[entity.primaryKey];
                return nodes.includes(id);
            });
        }
    }
    /**
     * 获取某个节点的所有子节点
     * @param repository repository
     * @param hierarchyInfokey hierarchyInfokey
     * @param parentHierarchyInfo parentHierarchyInfo
     */
    getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo) {
        const fparentElement = parentHierarchyInfo.id;
        const flayer = parentHierarchyInfo.layer;
        let nodes = [];
        repository.entityCollection.getAllEntities().forEach(entity => {
            const hierarchyInfo = entity[hierarchyInfokey];
            const parentElement = hierarchyInfo.parentElement;
            const layer = hierarchyInfo.layer;
            const result = layer >= (flayer + 1) && parentElement === fparentElement;
            if (result) {
                const id = entity[entity.primaryKey];
                nodes.push(id);
                const childHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfokey, id);
                const childs = this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);
                if (childs && childs.length > 0) {
                    nodes = nodes.concat(childs);
                }
            }
        });
        return nodes;
    }
    /**
     * 获取实体的分级信息
     */
    getHierarchyInfoById(repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        const entity = repository.entityCollection.getEntityById(id);
        const hierarchyInfoEntity = entity[hierarchyInfokey];
        const result = hierarchyInfoEntity.toJSON();
        result['id'] = id;
        return result;
    }
    getHierarchyInfo(entity, hierarchyInfokey) {
        return entity[hierarchyInfokey];
    }
    /**
     * 获取分级码的原始的字段名
     */
    getOriginalHierarchyInfoKey(repository, hierarchyInfokey) {
        const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    }
    getPaginationInfo(responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    }
    findParent(hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(item => {
            const currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;
        });
    }
    getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository) {
        let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        const ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    }
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    getChildren(repository, hierarchyInfoKey, id) {
        const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        const layer = hierarchyInfo.layer;
        const parentElement = hierarchyInfo.parentElement;
        const entities = repository.entityCollection.getEntities((entity) => {
            const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);
            const matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    }
}

/**
 * 路径树仓库
 */
class PathTreeRepository {
    /**
     * 添加兄弟节点
     */
    addSibling(repository, id) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSiblingUri = `${baseUri}/service/pathhierarchycreatesibling`;
        const body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加兄弟节点
     */
    addChild(repository, parentId) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addChildUri = `${baseUri}/service/pathhierarchycreatechildlayer`;
        const body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加子表兄弟节点
     */
    addSubSibling(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubSiblingUri = `${baseUri}/service/childnodepathhierarchycreatesibling`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    /**
    * 添加子表子节点
    */
    addSubChild(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubChildUri = `${baseUri}/service/childnodepathhierarchycreatechildlayer`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    getPaths(nodes, ids) {
        let paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (let i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + `/${ids[i]}`;
                    paths = paths + `/${nodes[i]}s`;
                }
            }
        }
        return paths;
    }
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    loadByParentId(repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow = false, pagination, frameContext, reload = false) {
        const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        const restService = repository.restService;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        const isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        const entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        const requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map((responseInfo) => {
            const paginationInfo = this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
            }
            else {
                repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
            }
            return entities;
        }));
    }
    // tslint:disable-next-line: max-line-length
    loadFullTree(repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const queryUrl = `${baseUri}/service/parentidfulltreequery`;
        const pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        const body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType,
            loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap((responseInfo) => {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                const frameContext = context.frameContext;
                const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    const list = responseInfo.returnValue.result;
                    const selectedRowId = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);
                    const hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);
                }
            }
        }), map((responseInfo) => {
            const frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
            }
            else {
                repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
            }
            return entities;
        }));
    }
    /**
     * 插入对父节点的过滤
     */
    buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        const parentFilterArray = [
            {
                "FilterField": `${originalHierarchyInfoKey}.Layer`,
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        // 父路径过滤，如果为空，则不添加（兼容oracle取数）
        const parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';
        if (parentPath) {
            parentFilterArray.push({
                "FilterField": `${originalHierarchyInfoKey}.Path`,
                "Value": parentPath,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 7
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    }
    buildEntityFilter(filter$$1, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter$$1 && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter$$1) {
            filter$$1 = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter$$1 && filter$$1.length > 0) {
            filter$$1[filter$$1.length - 1].Relation = 0;
        }
        const entityFilter = {
            FilterConditions: filter$$1,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 清空后代实体
     */
    clearDescendantEntities(repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow = false) {
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        const fPath = parentHierarchyInfo.path;
        const fLayer = parentHierarchyInfo.layer;
        if (frozenCurrentRow) {
            repository.entityCollection.removeData((entity) => {
                const hierarchyInfo = entity[hierarchyInfokey];
                const path = hierarchyInfo.path;
                const layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
        else {
            repository.entityCollection.removeEntities((entity) => {
                const hierarchyInfo = entity[hierarchyInfokey];
                const path = hierarchyInfo.path;
                const layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
    }
    /**
     * 获取实体的分级信息
     */
    getHierarchyInfoById(repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        const entity = repository.entityCollection.getEntityById(id);
        const hierarchyInfoEntity = entity[hierarchyInfokey];
        return hierarchyInfoEntity.toJSON();
    }
    /**
     * 获取分级码的原始的字段名
     */
    getOriginalHierarchyInfoKey(repository, hierarchyInfokey) {
        const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    }
    getPaginationInfo(responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    }
    findParent(hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(item => {
            const currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
        });
    }
    getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository) {
        let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        const ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    }
    getHierarchyInfo(entity, hierarchyInfoKey) {
        return entity[hierarchyInfoKey];
    }
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    getChildren(repository, hierarchyInfoKey, id) {
        const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        const layer = hierarchyInfo.layer;
        const path = hierarchyInfo.path;
        const entities = repository.entityCollection.getEntities((entity) => {
            const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);
            const matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    }
}

class TreeRepositoryFactory {
    static getInstance(treeType) {
        let repository = null;
        switch (treeType) {
            case "path":
                repository = new PathTreeRepository();
                break;
            case "parent":
                repository = new ParentTreeRepository();
                break;
            default: break;
        }
        return repository;
    }
}

// tslint:disable: no-string-literal
/**
 * 树数据服务
 */
class TreeDataService extends BaseDataService {
    /**
     * 构造函数
     */
    constructor(frameContext, messageService, loadingService, notifyService, errorService, languageService) {
        super(frameContext);
        this.messageService = messageService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.errorService = errorService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 分级信息字段名
     */
    get hierarchyInfoKey() {
        return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
    }
    get virtualRootFrameContext() {
        return this.frameContext.getVirtualRootFrameContext();
    }
    /**
     * 加载数据
     */
    load(filters, sorts) {
        const filtersArray = this.parseConditions(filters);
        const sortsArray = this.parseConditions(sorts);
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);
        return query$.pipe(tap(() => {
            // 纠正选中节点
            if (correctSelectedNode === true) {
                const hierarchyType = this.getHierarchyType();
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 分层加载数据
     */
    loadByLevel(filters, sorts, frozenCurrentRow) {
        this.setLoadByLevelState(filters, sorts);
        const filtersArray = this.parseConditions(filters);
        const sortsArray = this.parseConditions(sorts);
        // const parentId = this.bindingData.list.currentId;
        const parentId = this.getIdToExpand();
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        const hierarchyType = this.getHierarchyType();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return empty();
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 构造分页信息
        const pagination = this.buildPaginationInfo(parentId);
        const reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;
        const query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);
        return query$.pipe(tap((entities) => {
            this.frameContext.params.delete('_RELOAD_CHILDREN_');
            // 纠正选中节点
            if (correctSelectedNode === true) {
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);
                if (containsCurrentRow) {
                    this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!this.repository.entityCollection.getEntityById(currentRowId)) {
                    const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        this.setCurrentId(firstChildId);
                    }
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 加载完整树
     * @param virtualPropertyName 虚拟字段
     * @param fullTreeType 是否是完整树加载 0：完整树 1：部分树
     * @param loadType 是否分级加载 0：全部加载 1：分级加载
     * @param filter 过滤条件
     * @param frozenCurrentRow 冻结当前行
     */
    loadFullTree(virtualPropertyName, fullTreeType, loadType, filters, frozenCurrentRow) {
        if (typeof fullTreeType !== 'string') {
            throw new Error('ArgumentError: fullTreeType 不能为空且必须为字符串。');
        }
        if (typeof loadType !== 'string') {
            throw new Error('ArgumentError: loadType 不能为空且必须为字符串。');
        }
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        const virtualRootFrameContext = this.virtualRootFrameContext;
        // 还原上次设置的结果集
        virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');
        virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');
        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);
        const filtersArray = this.parseConditions(filters);
        const parentId = this.getIdToExpand();
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        const hierarchyType = this.getHierarchyType();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const context = {
            frameContext: this.frameContext,
            frozenCurrentRow
        };
        // tslint:disable-next-line: max-line-length
        const query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);
        return query$.pipe(tap((entities) => {
            const selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');
            // 纠正选中节点
            if (correctSelectedNode === true || !selectedRowId) {
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    const computedFirstRowId = treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                    if (computedFirstRowId) {
                        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', computedFirstRowId);
                    }
                }
            }
            const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);
                if (containsCurrentRow) {
                    this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {
                    const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        this.setCurrentId(firstChildId);
                    }
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 获取最新展开的节点
     */
    getIdToExpand() {
        const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        const idToExpand = expandNodes.pop();
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        return idToExpand;
    }
    /**
     * 设置最新展开的节点
     */
    setIdToExpand(idToExpand) {
        const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(idToExpand);
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    }
    /**
     * 解析过滤条件
     */
    parseConditions(conditions) {
        const conditionsString = (!conditions || conditions === '') ? '[]' : conditions;
        return JSON.parse(conditionsString);
    }
    /**
     * 新增同级
     */
    addSibling(id) {
        // 设计时id的获取改为从命令参数上获取，但设计时没有参数必填检查，
        // 如果打开表单保存了（即更新了最新的命令构件），但没有配置该参数，可能会传递过来一个空值，
        // 为了兼容此情况，使用当前行id作为id的值
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id || id === 'undefined') {
            id = '';
        }
        // 记录最近一次修改的数据id
        const lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const result$ = repository.addSibling(this.repository, id);
        return result$.pipe(tap(() => {
            this.virtualRootFrameContext.setParam('IS_ADD', true);
            this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addSiblingFailed, error);
        }));
    }
    /**
     * 新增下级
     */
    addChild(id) {
        // 原因同addSibling的修改
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            // 请选择父节点
            this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return empty();
        }
        // 记录最近一次修改的数据id
        const lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 新增的时候，要展开父节点
        this.setIdToExpand(id);
        const reloadChild$ = this.reloadByLevel();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const addChild$ = repository.addChild(this.repository, id);
        const result$ = reloadChild$.pipe(switchMap(() => {
            return addChild$;
        }), tap(() => {
            this.virtualRootFrameContext.setParam('IS_ADD', true);
            this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addChildFailed, error);
        }));
        return result$;
    }
    /**
     * 批量保存
     */
    save() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const save$ = this.repository.applyChanges();
        const result$ = save$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.notifyService.success(this.languageService.saveSuccess, { hideTitle: true });
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.multiSaveFailed, error);
        }));
        return result$;
    }
    /**
     * 删除
     */
    remove(id, successMsg) {
        // 原因同addSibling
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        // 存在子节点不允许删除
        const treeNodesData = this.repository.entityCollection.toJSON();
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return empty();
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });
            return empty();
        }
        // 确认删除
        const action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            // 获取删除后要设置的节点id
            const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, id);
            // 执行删除
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.frameContext.repository.removeById(id);
            return remove$.pipe(tap(() => {
                // 设置选中节点
                treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.notifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.errorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 取消时检测未保存记录
     */
    cancel() {
        const hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
        return hasChange$.pipe(switchMap((changed) => {
            if (!changed) {
                return this._cancel();
            }
            else {
                return this.messageService.question(this.languageService['cancelWithoutSave']).pipe(switchMap((ifCancel) => {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return this._cancel();
                }));
            }
        }));
    }
    /**
     * 构造分页信息
     * @param parentId parentId
     * @returns
     */
    buildPaginationInfo(parentId) {
        const pagination = { pageIndex: 0, pageSize: 0 };
        const enableNodePagination = this.frameContext.params.get('enableNodePagination');
        if (!parentId) {
            // 一级分页
            const pageSize = this.repository.entityCollection.pageSize || 0;
            const pageIndex = this.repository.entityCollection.pageIndex || 0;
            // 启用了一级分页
            if (pageSize !== 0) {
                pagination.pageSize = pageSize;
                pagination.pageIndex = pageIndex;
            }
        }
        else {
            // 如果未启用节点分页或当前为顶级节点加载，则不处理节点分页
            if (enableNodePagination) {
                const nodePageSize = this.frameContext.params.get('nodePageSize') || 0;
                let nodePageIndex = this.frameContext.params.get(`_NODE_${parentId}_PAGE_INDEX_`);
                if (!nodePageIndex) {
                    this.frameContext.params.set(`_NODE_${parentId}_PAGE_INDEX_`, 1);
                    nodePageIndex = 1;
                }
                pagination.pageIndex = nodePageIndex;
                pagination.pageSize = nodePageSize;
            }
        }
        return pagination;
    }
    /**
     * 取消变更
     */
    _cancel() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(switchMap(() => {
            const isAdd = this.virtualRootFrameContext.getParam('IS_ADD');
            const lastModifiedId = this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');
            const currentId = this.bindingData.list.currentId;
            if (isAdd === true) {
                this.repository.entityCollection.removeEntityById(currentId);
                // 重置编辑状态
                this.virtualRootFrameContext.setParam('IS_ADD', false);
                if (lastModifiedId) {
                    setTimeout(() => {
                        this.bindingData.list.setCurrentId(lastModifiedId, true, true);
                    }, 0);
                }
                return of(null);
            }
            else {
                return this.repository.updateById(currentId);
            }
        }), tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    /**
     * 检查是否存在下级节点（内部方法，请勿使用）
     */
    hasChildNodes(id, treeNodesData) {
        const treeNodeUtil = this.getTreeNodeUtil();
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            return true;
        }
        return false;
    }
    /**
     * 计算删除后的当前节点id（内部方法，请勿使用）
     */
    getNextNodeIdAfterRemoving(idToRemove, treeNodesData) {
        const treeNodeUtil = this.getTreeNodeUtil();
        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);
        return nextNodeId;
    }
    /**
     * 设置删除后的当前节点节点（内部方法，请勿使用）
     */
    setNextNodeAfterRemoving(nextNodeId) {
        const treeNodeUtil = this.getTreeNodeUtil();
        treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
    }
    /**
     * 设置树的当前行(给完整树使用)
     * @param id id
     */
    setCurrentId(id) {
        id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;
        this.frameContext.bindingData.list.setCurrentId(id, true, true, true);
    }
    /**
     * 选中树的第一个节点
     */
    selectFirstRow() {
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil !== null) {
            treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
        }
    }
    /**
     * 获取树节点工具类实例
     */
    getTreeNodeUtil() {
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            throw new Error(`不支持${hierarchyType}类型的分级`);
        }
        return treeNodeUtil;
    }
    /**
     * 记录加载状态
     * @todo：待删除
     */
    setLoadByLevelState(filters, sorts) {
        // @todo：临时处理
        this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);
        this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);
        this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);
    }
    /**
     * 展开当前节点
     * @todo：待删除
     */
    reloadByLevel() {
        const isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');
        if (isLoadByLevel === true) {
            const filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');
            const sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');
            return this.loadByLevel(filters, sorts);
        }
        return of([]);
    }
    getHierarchyType() {
        const ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);
        const hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];
        let hierarchyType = 'path'; // 分级码默认为path，兼容原表单
        if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {
            hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'];
        }
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    }
    /**
     * 获取根组件消息管道
     */
    get messagePipe() {
        if (this.frameContext) {
            const appContext = this.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
}
TreeDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: FormMessageService },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: FormErrorService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

class FilterConditionDataService {
    constructor(viewModel, filterConditionService, commandService) {
        this.viewModel = viewModel;
        this.filterConditionService = filterConditionService;
        this.commandService = commandService;
    }
    /**
     * 执行过滤
     * @param commandName 命令名称
     * @param frameId 命令所在的frameId
     */
    filter(commandName, frameId) {
        const self = this;
        let filters = self.context && self.context.eventParam && self.context.eventParam.data || [];
        if (typeof (filters) === 'string') {
            filters = JSON.parse(filters);
        }
        // 查询时重置页码为第一页
        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;
        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);
        return this.commandService.execute(commandName, frameId);
    }
}
FilterConditionDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterConditionDataService.ctorParameters = () => [
    { type: ViewModel },
    { type: FilterConditionService },
    { type: CommandService }
];

/**
 * 数据编辑服务
 */
class EditDataService {
    /**
     * 构造函数
     */
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.errorService = this.frameContext.injector.get(FormErrorService, null);
    }
    /**
     * 编辑（支持加锁）
     */
    edit(id) {
        id = id || this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const edit$ = this.repository.editEntityById(id);
        const result$ = edit$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            EditStateUtil.setEditState(this.frameContext, id);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.updateFailed, error);
        }));
        return result$;
    }
}
EditDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EditDataService.ctorParameters = () => [
    { type: FrameContext }
];

/**
 * 删除服务
 */
class RemoveDataService {
    /**
     * 构造函数
     * @param frameContext 组件上下文
     */
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.notifyService = this.frameContext.injector.get(FormNotifyService, null);
        this.messageService = this.frameContext.injector.get(FormMessageService, null);
        this.errorService = this.frameContext.injector.get(FormErrorService, null);
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.commandService = this.frameContext.injector.get(CommandService, null);
        this.listDataService = this.frameContext.injector.get(ListDataService, null);
        this.treeDataService = this.frameContext.injector.get(TreeDataService, null);
        this.befRepository = this.frameContext.repository;
    }
    /**
     * 删除id对应的实体
     * @param id 要删除的数据id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（仅为兼容，新调用请勿设置）
     * @summary
     * enableRemoveAndSave存在的意义：
     * 1、老表单的可能没有delAndSave方法；
     * 2、为了将ListDataService中的remove方法迁移到此方法上，显示设置为false，保持和以前行为一致；
     * 3、该参数默认为true，并且在WebComponent层不暴露，新命令不需要传递，默认为true；
     */
    removeById(id, ifSave, enableRemoveAndSave = true, successMsg) {
        const msg = successMsg ? successMsg : '';
        return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);
    }
    removeByIds(ids) {
        throw new Error('Not Implemented');
    }
    /**
     * 删除id对应的实体，并执行保存
     */
    removeAndSaveById(id, successMsg) {
        const msg = successMsg ? successMsg : '';
        return this.innerRemoveById(id, true, true, msg);
    }
    /**
     * 删除并保存树节点数据
     */
    removeAndSaveByIdForTree(id, successMsg) {
        const msg = successMsg ? successMsg : '';
        // 检查要删除的id是否存在
        if (this.checkIdsToRemove([id]) === false) {
            this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return EMPTY;
        }
        // 检查是否有子节点
        const treeNodesData = this.befRepository.entityCollection.toJSON();
        if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {
            this.messageService.warning(this.languageService.deleteChildFirst);
            return EMPTY;
        }
        // 执行删除
        const remove$ = this.innerRemoveById(id, true, true, msg);
        const nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);
        const result$ = remove$.pipe(tap(() => {
            this.treeDataService.setNextNodeAfterRemoving(nextNodeId);
        }));
        return result$;
    }
    /**
     * 批量删除并保存
     */
    removeAndSaveByIds() {
        throw new Error('Not Implemented');
    }
    /**
     * 删除后的刷新
     */
    refreshAfterRemoving(loadCmdName, loadCmdFrameId) {
        if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {
            return;
        }
        const commandService = this.frameContext.injector.get(CommandService, null);
        return commandService.execute(loadCmdName, loadCmdFrameId);
    }
    /**
     * 删除id对应的实体
     * @param id 实体id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（老EAPI上没有此方法，通过开关进行兼容）
     * @summary
     * enableRemoveAndSave参数说明：
     * 1、老EAPI上没有delAndSave方法，只能发两次请求（删除和保存）；
     * 2、此开关用于选择使用哪种方式，兼容老表单。
     */
    innerRemoveById(id, ifSave, enableRemoveAndSave, successMsg) {
        // 检查要删除的id是否存在
        if (this.checkIdsToRemove([id]) === false) {
            this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return EMPTY;
        }
        const confirm$ = this.confirmToRemove();
        const remove$ = enableRemoveAndSave && ifSave ?
            this.befRepository.removeEntityAndSaveById(id) :
            this.befRepository.removeById(id, ifSave);
        const result$ = confirm$.pipe(concatMap((ifRemove) => {
            if (ifRemove === false) {
                return EMPTY;
            }
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            return remove$.pipe(tap(() => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.notifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, (error) => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.errorService.exception(this.languageService.deleteFailed, error);
            }), switchMap(() => {
                const saved = enableRemoveAndSave && ifSave;
                if (!saved) {
                    return EMPTY;
                }
                else {
                    return of(null);
                }
            }));
        }));
        return result$;
    }
    /**
     * 检查要删除的ids是否为空
     */
    checkIdsToRemove(ids) {
        if (!ids) {
            return false;
        }
        const filteredIds = ids.filter((id) => {
            return !!id;
        });
        if (filteredIds.length === 0) {
            return false;
        }
        return true;
    }
    /**
     * 确认删除
     */
    confirmToRemove() {
        const confirm$ = this.messageService.question(this.languageService.confirmDeletion);
        const result$ = confirm$.pipe(concatMap((ifRemove) => {
            if (ifRemove === false) {
                return EMPTY;
            }
            else {
                return of(true);
            }
        }));
        return result$;
    }
}
RemoveDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RemoveDataService.ctorParameters = () => [
    { type: FrameContext }
];

/**
 * 删除服务
 */
class SaveDataService {
    /**
     * 构造函数
     * @param frameContext 组件上下文
     */
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.notifyService = this.frameContext.injector.get(FormNotifyService, null);
        this.messageService = this.frameContext.injector.get(FormMessageService, null);
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.befRepository = this.frameContext.repository;
    }
}
SaveDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SaveDataService.ctorParameters = () => [
    { type: FrameContext }
];

/**
 * 树数据服务
 */
class SubTreeDataService extends BaseDataService {
    /**
     * 构造函数
     */
    constructor(frameContext, viewModel, messageService, loadingService, errorService, formNotifyService, languageService) {
        super(frameContext);
        this.viewModel = viewModel;
        this.messageService = messageService;
        this.loadingService = loadingService;
        this.errorService = errorService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 分级码信息
     */
    get hierarchyInfoKey() {
        return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
    }
    get hierarchyInfoField() {
        return this.hierarchyInfoKey.split('/').filter(p => p).pop();
    }
    get virtualRootFrameContext() {
        return this.frameContext.getVirtualRootFrameContext();
    }
    get messagePipe() {
        if (this.viewModel && this.viewModel.frameContext) {
            const appContext = this.viewModel.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
    /**
     * 新增子表同级
     */
    addSubSibling() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'addSubSibling' });
        }
        let params = this.getParams();
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);
        return result$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.errorService.exception(this.languageService.addSubSiblingFailed, error);
        }));
    }
    /**
     * 新增下级
     */
    addSubChild() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'addSubChild' });
        }
        let params = this.getParams();
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        const currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();
        if (!currentList['currentId']) {
            // 请选择父节点
            this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return EMPTY;
        }
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);
        const result$ = addSubChild$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addSubChildFailed, error);
        }));
        return result$;
    }
    /**
     * 删除子表树节点
     * @param id id
     */
    remove(id, successMsg) {
        // 参数检查
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 有子节点时不允许删除
        const treeNodesData = this.frameContext.bindingData.getList().toJSON();
        const bindingList = this.frameContext.bindingData.getList();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return EMPTY;
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {
            this.messageService.warning(this.languageService['deleteChildFirst']);
            return EMPTY;
        }
        // 确认删除
        const action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return EMPTY;
            }
            // 获取删除后要设置的节点id
            const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoField, id);
            // 执行删除
            const loadingTimerId = this.loadingService.show();
            const path = this.getPath();
            const remove$ = this.frameContext.repository.removeByPath(path, id);
            return remove$.pipe(tap(() => {
                // 设置选中节点
                treeNodeUtil.selectNodeByBindingList(bindingList, this.hierarchyInfoField, nextNodeId);
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    let showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            const options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        this.formNotifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.errorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    getHierarchyType() {
        const propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));
        let hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    }
    /**
     * 获取参数
     * /parentId/childCodes/childId/grandsonCodes
     * [childCodes, grandsonCodes]
     * [parntId, childId]
     */
    getParams() {
        let nodeCodes = this.viewModel.bindingPath.substr(1).split('/');
        let ids = [];
        let nodeCodeArray = [];
        const rid = this.viewModel.bindingData.list.currentId; // root表数据id
        ids.push(rid);
        let subData = this.viewModel.bindingData;
        if (nodeCodes.length > 0) {
            nodeCodes.map(nodeCode => {
                subData = subData[nodeCode];
                if (subData && subData.currentId) {
                    ids.push(subData.currentId);
                }
                //去除nodeCode的s
                nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);
            });
        }
        return { nodeCodes: nodeCodeArray, ids: ids };
    }
    /**
     * 获取完整路径
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    getPath() {
        const bindingPath = this.viewModel.bindingPath;
        const rid = this.viewModel.bindingData.list.currentId; // root表数据id
        let path = '/' + rid;
        const subPaths = bindingPath.split('/').filter(p => p);
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['edus', 'grades']
            let subData = this.viewModel.bindingData;
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                subData = subData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
}
SubTreeDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubTreeDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: ViewModel },
    { type: FormMessageService },
    { type: FormLoadingService },
    { type: FormErrorService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

// tslint:disable: no-string-literal
/**
 * 列表仓库服务
 * @scope FrameComponent
 */
class BeActionService {
    /**
     * 构造函数
     */
    constructor(repository, loadingService, msgService, notifyService, formErrorService, languageService) {
        this.repository = repository;
        this.loadingService = loadingService;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.formErrorService = formErrorService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 执行自定义动作
     */
    invokeAction(actionUri, httpMethod, httpHeaders, queryParams, body) {
        return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, true);
    }
    /**
     * 已弃用：请使用invokeAction代替
     * @deprecated
     * @summary
     * 迁移时请注意：invokeAction中body请传递满足BodyWithRequestInfo接口的格式，形如：
     * { requestInfo: reqeustInfoInstance, key1: value1, key2: value2 }
     */
    executeAction(actionUri, httpMethod, httpHeaders, queryParams, body) {
        // 1、不确定body中是否有RequestInfo对象
        // 2、restService的reqeust会根据body中是否有key为ReqeustInfo（大写开头）的参数来确定；
        // 3、如果body中没有key为ReqeustInfo的参数，不直接返回ResponseInfo，而是进一步解析，返回其中的returnValue。
        return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, false);
    }
    /**
     * 构造查询字符串
     */
    buildQueryParams(queryParams) {
        if (typeof queryParams === 'string') {
            queryParams = JSON.parse(queryParams);
        }
        let queryParamsString = '';
        Object.keys(queryParams).forEach((key) => {
            queryParamsString += `${key}=${queryParams[key]}`;
        });
        return queryParamsString;
    }
    /**
     * 获取Rest服务
     */
    getRestService() {
        const befRepository = this.repository;
        return befRepository.restService;
    }
    /**
     * 调用自定义动作
     */
    innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, hasRequestInfo) {
        const options = {};
        const restService = this.getRestService();
        const baseUri = restService.baseUri;
        // 构造url
        let fullActionUri = `${baseUri}/service/${actionUri}`;
        if (queryParams && queryParams !== '') {
            const queryParamsString = this.buildQueryParams(queryParams);
            fullActionUri += queryParamsString;
        }
        // body构造
        if (body && body !== '') {
            if (typeof body === 'string' && body.startsWith('{') && body.endsWith('}')) {
                body = JSON.parse(body);
            }
            options['body'] = body;
        }
        // http头构造
        if (httpHeaders && httpHeaders !== '') {
            httpHeaders = JSON.parse(httpHeaders);
            // 如果没有设置Content-Type，默认用json格式
            if (!httpHeaders['Content-Type']) {
                httpHeaders['Content-Type'] = 'application/json';
            }
            options['headers'] = new HttpHeaders(httpHeaders);
        }
        else {
            options['headers'] = new HttpHeaders({ 'Content-Type': 'application/json' });
        }
        // 执行服务器端请求
        this.loadingService.show();
        // invoke方法
        // 1、RequestInfo=>报错
        // 2、requestInfo=>ResponseInfo
        // request方法
        // 1、RequestInfo=>ResponseInfo
        // 2、requestInfo=>returnValue
        const methodName = hasRequestInfo ? 'invoke' : 'request';
        const result$ = restService[methodName](fullActionUri, httpMethod, null, options);
        return result$.pipe(tap(() => {
            this.loadingService.hide();
        }, (error) => {
            this.loadingService.hide();
            const errorMsg = fullActionUri + this.languageService['operationFailed'];
            this.formErrorService.exception(errorMsg, error);
        }));
    }
}
BeActionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BeActionService.ctorParameters = () => [
    { type: Repository },
    { type: FormLoadingService },
    { type: FormMessageService },
    { type: FormNotifyService },
    { type: FormErrorService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

// tslint:disable: max-line-length
/**
 * 审批服务
 * @Scope FrameComponent
 */
class ApproveService {
    /**
     * 构造函数
     */
    constructor(formLoadingService, beActionService, msgService, notifyService, languageService, formErrorService, frameContext, submitter, flowchartService, wfTaskHandlerService) {
        this.formLoadingService = formLoadingService;
        this.beActionService = beActionService;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.frameContext = frameContext;
        this.submitter = submitter;
        this.flowchartService = flowchartService;
        this.wfTaskHandlerService = wfTaskHandlerService;
        if (this.frameContext) {
            this.repository = this.frameContext.repository;
            if (!this.wfTaskHandlerService) {
                this.wfTaskHandlerService = this.frameContext.injector.get(WfTaskHandlerService, null);
            }
        }
    }
    /**
     * 带有交互的提交审批
     */
    submitApproveWithInteraction(bizBillID) {
        return this.submitApprove(bizBillID);
    }
    /**
     * 提交审批
     * @param bizBillID 业务单据id
     * @param interactionResult 前端交互结果
     * @deprecated 已废弃，清使用包含入口单据的审批
     */
    submitApprove(bizBillID, interactionResult) {
        if (!bizBillID) {
            // this.msgService.error(this.languageService.unallowEmptyBizBillId);
            this.notifyService.info(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return empty();
        }
        const actionUri = 'submittoapprovevoaction';
        const restService = this.beActionService.getRestService();
        const body = {
            requestInfo: restService.buildRequestInfo(),
            bizInstID: bizBillID,
            interactionResult: interactionResult ? {
                procDefId: interactionResult.processDefinitionId
            } : {}
        };
        this.formLoadingService.show();
        // 添加提示
        const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);
        // 目前包含三种情况：
        // 1. 第一次提交成功，服务端返回流程实例id
        // 2. 第一次提交成功，服务端返回流程实例id，并返回多个参与者，交互时提交参与者
        // 3. 第一次提交未成功，服务端返回多个流程定义，需要交互后第二次提交审批；第二次提交会出现情况1和情况2
        return action$.pipe(map((result) => {
            if (result && result.returnValue && result.returnValue.excutionResponse) {
                var wfResponse = result.returnValue.excutionResponse;
                return wfResponse;
            }
        }), switchMap((response) => {
            if (response && response.procInstId) {
                if (this.repository) {
                    const updating$ = this.repository.updateById(bizBillID);
                    return updating$.pipe(tap(() => {
                        this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.submitSuccess);
                        FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    }), map(() => {
                        return response;
                    }));
                }
                else {
                    this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.submitSuccess);
                    FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    return of(response);
                }
            }
            else {
                return of(response);
            }
        }), switchMap((response) => {
            if (response.needInteraction) {
                return from(new Promise((resolve) => {
                    this.submitter.excute(response, (interactionResponse) => {
                        // 如果此次未提交，而选择后得到了流程定义ID，则在此提交审批
                        if (!response.procInstId && interactionResponse.processDefinitionId) {
                            this.submitApprove(bizBillID, interactionResponse).subscribe(() => {
                                resolve();
                            });
                        }
                        else {
                            resolve();
                        }
                    });
                }));
            }
            else {
                return of(null);
            }
        }), catchError(error => {
            this.formLoadingService.hide();
            // this.formErrorService.exception(this.languageService.submitFaild, error);
            return of(error);
        }));
    }
    /**
     * 提交审批(带入口单据)
     * @param bizBillID 业务单据Id
     * @param bizDefKey 入口单据Id
     * @param options options
     * @param interactionResult 交互结果
     */
    submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResult) {
        if (!bizBillID) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
            return EMPTY;
        }
        try {
            if (options && typeof (options) === 'string') {
                options = JSON.parse(options);
            }
        }
        catch (e) {
            throw new Error('ArgumentError:options not a valid json string.');
        }
        const actionUri = 'submittoapprovewithpayload';
        const restService = this.beActionService.getRestService();
        const body = {
            requestInfo: restService.buildRequestInfo(),
            approvePayload: {
                startProcessPayload: {
                    bizDefKey: bizDefKey,
                    dataId: bizBillID,
                    name: options && options.name || '',
                    variables: options && options.variables || {}
                }
            }
        };
        if (interactionResult) {
            body.approvePayload.startProcessPayload.processDefinitionId = interactionResult.processDefinitionId;
            body.approvePayload.startProcessPayload.processDefinitionKey = interactionResult['processDefinitionKey'];
        }
        this.formLoadingService.show();
        // 添加提示
        const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);
        // 目前包含三种情况：
        // 1. 第一次提交成功，服务端返回流程实例id
        // 2. 第一次提交成功，服务端返回流程实例id，并返回多个参与者，交互时提交参与者
        // 3. 第一次提交未成功，服务端返回多个流程定义，需要交互后第二次提交审批；第二次提交会出现情况1和情况2
        return action$.pipe(map((result) => {
            if (result && result.returnValue && result.returnValue.excutionResponse) {
                const wfResponse = result.returnValue.excutionResponse;
                return wfResponse;
            }
        }), switchMap((response) => {
            if (response && response.procInstId) {
                if (this.repository) {
                    const updating$ = this.repository.updateById(bizBillID);
                    return updating$.pipe(tap(() => {
                        this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.submitSuccess);
                        FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    }), map(() => {
                        return response;
                    }));
                }
                else {
                    this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.submitSuccess);
                    FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    return of(response);
                }
            }
            else {
                return of(response);
            }
        }), switchMap((response) => {
            if (response.needInteraction) {
                return from(new Promise((resolve) => {
                    this.submitter.excute(response, (interactionResponse) => {
                        // 如果此次未提交，而选择后得到了流程定义ID，则在此提交审批
                        if (!response.procInstId && interactionResponse.processDefinitionId) {
                            this.submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResponse).subscribe(() => {
                                resolve();
                            });
                        }
                        else {
                            resolve();
                        }
                    });
                }));
            }
            else {
                return of(null);
            }
        }), catchError(error => {
            this.formLoadingService.hide();
            // this.formErrorService.exception(this.languageService.submitFaild, error);
            return of(error);
        }));
    }
    /**
     * 提交审批(带入口单据使用wf控件)
     * @param bizBillID 业务单据Id
     * @param bizDefKey 入口单据Id
     * @param options 上下文参数
     * @param variables 可选参数
     */
    submitApproveWithBizDefKeyUseControl(bizBillID, bizDefKey, options = {}, variables) {
        if (!bizBillID) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        const payload = Object.assign({ dataId: bizBillID, bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    }
    /**
     * 子表提交审批
     * @param bizDefKey 入口单据Id
     * @param bizId 业务单据Id（主表）
     * @param childBizId 业务单据Id（从表）
     * @param options 上下文参数
     * @param variables 可选参数
     */
    childSubmitApproveWithBizDefKey(bizDefKey, bizId, childBizId, options = {}, variables) {
        // 入口单据不能为空
        if (!bizDefKey) {
            this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
            return EMPTY;
        }
        // 主业务单据Id不能为空
        if (!bizId) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return EMPTY;
        }
        // 从表业务单据Id不能为空
        if (!childBizId) {
            this.notifyService.warning(this.languageService.unallowEmptyChildBizBillId, { hideTitle: true });
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        const payload = Object.assign({ dataId: `${bizId},${childBizId}`, bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    }
    /**
     * 取消审批
     * @deprecated 已废弃，请使用cancelSubmit
     */
    cancelApprove(bizBillID) {
        if (!bizBillID) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return empty();
        }
        const actionUri = 'canceltosubmitvoaction';
        const restService = this.beActionService.getRestService();
        const body = {
            requestInfo: restService.buildRequestInfo(),
            bizInstID: bizBillID,
        };
        this.formLoadingService.show();
        const action$ = this.beActionService.executeAction(actionUri, 'PUT', null, null, body);
        return action$.pipe(switchMap(() => {
            if (this.repository) {
                const updating$ = this.repository.updateById(bizBillID);
                return updating$.pipe(tap(() => {
                    this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.cancelApproveSuccess);
                    FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);
                }));
            }
            else {
                this.formLoadingService.hide();
                // this.notifyService.info(this.languageService.cancelApproveSuccess);
                FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);
                return of();
            }
        }), catchError(error => {
            this.formLoadingService.hide();
            // this.formErrorService.exception(this.languageService.cancelApproveFailed, error);
            return of(error);
        }));
    }
    /**
     * 取消审批(支持主表、子表)
     * @param procInstId 流程实例Id
     */
    cancelSubmit(procInstId) {
        if (!procInstId) {
            this.notifyService.warning(this.languageService.procInsIdRequired, { hideTitle: true });
            return EMPTY;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ procInstId: procInstId });
    }
    /**
     * 查看流程图
     * @param procInstId 流程实例ID
     */
    viewProcess(procInstId) {
        if (this.flowchartService) {
            if (!procInstId) {
                this.notifyService.warning(this.languageService.noProcessInstanceId, { hideTitle: true });
                return;
            }
            return this.flowchartService.viewFlowChart(procInstId);
        }
    }
    /**
     * 转换配置大小写
     * @param jsonObj Object
     * @deprecated
     */
    switchPrefixLetter(jsonObj, toUpper) {
        if (typeof (jsonObj) === 'object' && !!jsonObj) {
            if (Array.isArray(jsonObj)) {
                for (var i = 0; i < jsonObj.length; i++) {
                    this.switchPrefixLetter(jsonObj[i], toUpper);
                }
            }
            else {
                for (const key of Object.keys(jsonObj)) {
                    var newKey = (toUpper ? key.substring(0, 1).toUpperCase() : key.substring(0, 1).toLowerCase()) + key.substring(1);
                    jsonObj[newKey] = jsonObj[key];
                    if (typeof jsonObj[key] === 'object') {
                        this.switchPrefixLetter(jsonObj[key], toUpper);
                    }
                    delete (jsonObj[key]);
                }
            }
        }
        return jsonObj;
    }
}
ApproveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApproveService.ctorParameters = () => [
    { type: FormLoadingService },
    { type: BeActionService },
    { type: FormMessageService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormErrorService },
    { type: FrameContext },
    { type: WFSubmiteService, decorators: [{ type: Optional }] },
    { type: WFFlowchartService, decorators: [{ type: Optional }] },
    { type: WfTaskHandlerService, decorators: [{ type: Optional }] }
];

// tslint:disable: unified-signatures
// tslint:disable: max-line-length
/**
 * 打印服务
 * @Scope FrameComponent
 */
class PrintService {
    /**
     * 构造函数
     */
    constructor(msgService, languageService, printService, formNotifyService) {
        this.msgService = msgService;
        this.languageService = languageService;
        this.printService = printService;
        this.formNotifyService = formNotifyService;
    }
    /**
     * 打印单据
     * @param beMetaId BE元数据标识
     * @param bizBillId 业务单据标识
     */
    printSingle(beMetaId, bizBillId) {
        if (!bizBillId) {
            // this.msgService.error(this.languageService.unallowEmptyBizBillId);
            this.showWarning(this.languageService.unallowEmptyBizBillId);
            return EMPTY;
        }
        return this.printArray(beMetaId, [bizBillId]);
    }
    /**
     * 打印单据（通过id或ids）
     * @param beMetaId be元数据Id
     * @param ids 单据id或ids
     */
    printByIds(beMetaId, ids) {
        if (!ids) {
            // this.msgService.error(this.languageService.unallowEmptyBizBillId);
            this.showWarning(this.languageService.unallowEmptyBizBillId);
            return EMPTY;
        }
        const dataIds = ids.split(',').filter(item => item);
        return this.printArray(beMetaId, dataIds);
    }
    /**
     * 打印单据（带维度）
     * @param beMetaId be元数据Id
     * @param ids 单据id或ids
     * @param dim1 维度1值
     * @param dim2 维度2值
     * @param billCategoryId 单据类型Id
     */
    printByIdsWithDimension(beMetaId, ids, dim1, dim2, billCategoryId) {
        if (!ids) {
            // this.msgService.error(this.languageService.unallowEmptyBizBillId);
            this.showWarning(this.languageService.unallowEmptyBizBillId);
            return EMPTY;
        }
        const dataIds = ids.split(',').filter(item => item);
        return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);
    }
    /**
     * 打印多个单据
     * @param beMetaId BE元数据标识
     * @param dataIds 业务单据标识数组
     * @param dim1 维度1
     * @param dim2 维度2
     * @param billCategoryId 业务单据类型Id
     */
    printArray(beMetaId, dataIds, dim1, dim2, billCategoryId) {
        if (!dataIds || dataIds.length === 0) {
            // this.msgService.error(this.languageService.unallowEmptyBizBillId);
            this.showWarning(this.languageService.unallowEmptyBizBillId);
            return EMPTY;
        }
        const sourceOptions = this.buildSourceOptions({
            dataIds: dataIds,
            sourceId: beMetaId
        });
        const outputOptions = this.buildOutputOptions();
        if (typeof dim1 !== 'undefined') {
            sourceOptions.FirstDimensionVal = dim1;
        }
        if (typeof dim2 !== 'undefined') {
            sourceOptions.SecondDimensionVal = dim2;
        }
        if (typeof billCategoryId !== 'undefined') {
            sourceOptions.billCategoryId = billCategoryId;
        }
        return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');
    }
    /**
     * 按照BE取数方式批量打印单据
     * @param beMetaId BE元数据标识
     * @param filterCondition 过滤条件
     * @param sortCondition 排序条件
     * @param includeChildData 包含子表数据
     */
    printMulti(beMetaId, filterCondition, sortCondition, includeChildData = true) {
        const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };
        if (filterCondition) {
            // 统一纠正最后一个过滤条件的Relation
            const filters = JSON.parse(filterCondition);
            if (filters && filters.length > 0) {
                filters[filters.length - 1].Relation = 0;
            }
            entryFilter.filterConditions = filters;
        }
        if (sortCondition) {
            entryFilter.sortConditions = JSON.parse(sortCondition);
        }
        // sfo:SourceFilterOptions
        const sourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });
        const outputOptions = this.buildOutputOptions();
        return this.printService.outputBEDataWithFilter(sourceFilterOptions, outputOptions, 'tab');
    }
    /**
     * 按照BE取数方式批量打印单据(带维度)
     * @param beMetaId BE元数据标识
     * @param filterCondition 过滤条件
     * @param sortCondition 排序条件
     * @param dim1 维度1value
     * @param dim2 维度2value
     * @param billCategoryId 业务单据类型Id
     * @param includeChildData 包含子表数据
     */
    printMultiWithDimension(beMetaId, filterCondition, sortCondition, dim1, dim2, billCategoryId, includeChildData = true) {
        const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };
        if (filterCondition) {
            // 统一纠正最后一个过滤条件的Relation
            const filters = JSON.parse(filterCondition);
            if (filters && filters.length > 0) {
                filters[filters.length - 1].Relation = 0;
            }
            entryFilter.filterConditions = filters;
        }
        if (sortCondition) {
            entryFilter.sortConditions = JSON.parse(sortCondition);
        }
        const sfo = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });
        if (typeof dim1 !== 'undefined') {
            sfo.FirstDimensionVal = dim1;
        }
        if (typeof dim2 !== 'undefined') {
            sfo.SecondDimensionVal = dim2;
        }
        if (typeof billCategoryId !== 'undefined') {
            sfo.billCategoryId = billCategoryId;
        }
        const outputOptions = this.buildOutputOptions();
        return this.printService.outputBEDataWithFilter(sfo, outputOptions, 'tab');
    }
    /**
     * 构造SourceOptions
     * @param options options
     */
    buildSourceOptions(options) {
        const so = {
            DataIds: options && options.dataIds || undefined,
            SourceId: options && options.sourceId || undefined,
            FirstDimensionVal: options && options.dim1 || undefined,
            SecondDimensionVal: options && options.dim2 || undefined,
            RetrieveParam: options && options.retrieveParam || undefined,
            FormatId: options && options.formatId || undefined,
            billCategoryId: options && options.billCategoryId || undefined,
            ServiceUnit: options && options.serviceUnit || undefined,
            currentPage: options && options.currentPage || undefined,
            pageRowCount: options && options.pageRowCount || undefined,
            queryType: options && options.queryType || undefined,
            queryServiceId: options && options.queryServiceId || undefined,
            queryParam: options && options.queryParam || undefined
        };
        return so;
    }
    /**
     * 构造OutputOptions
     * @param options options
     */
    buildOutputOptions(options) {
        const oo = {
            OutputType: options && options.outputType || OutputType.PRINT,
            FileType: options && options.fileType || FileType.Html5,
            Path: options && options.path || undefined,
            DeviceId: options && options.deviceId || undefined,
            printJob: options && options.printJob || undefined,
            printerName: options && options.printerName || undefined,
            printSetting: options && options.printSetting || undefined,
            printType: options && options.printType || PrintType.Form
        };
        return oo;
    }
    /**
     * 构造SourceFilterOptions
     * @param options options
     */
    buildSourceFilterOptions(options) {
        const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };
        const sfo = {
            SourceId: options.sourceId,
            EntityFilter: options && options.entryFilter || entryFilter,
            FirstDimensionVal: options && options.dim1 || undefined,
            SecondDimensionVal: options && options.dim2 || undefined,
            FormatId: options && options.formatId || undefined,
            ServiceUnit: options && options.serviceUnit || undefined,
            billCategoryId: options && options.billCategoryId || undefined,
            currentPage: options && options.currentPage || undefined,
            pageRowCount: options && options.pageRowCount || undefined,
            queryParam: options && options.queryParam || undefined,
            queryServiceId: options && options.queryServiceId || undefined,
            queryType: options && options.queryType || undefined,
            includeChildData: options && options.hasOwnProperty('includeChildData') ? options.includeChildData : true
        };
        return sfo;
    }
    /**
     * 展示错误消息
     * @param message 错误消息
     */
    showWarning(message) {
        if (this.notifyService) {
            this.notifyService.warning(message, { hideTitle: true });
        }
        else if (this.msgService) {
            this.msgService.error(message);
        }
    }
    get notifyService() {
        if (this.formNotifyService) {
            return this.formNotifyService;
        }
        else if (this.injector) {
            return this.injector.get(FormNotifyService, null);
        }
        return null;
    }
    get commandContext() {
        return this['context'] || null;
    }
    get frameContext() {
        return this.commandContext && this.commandContext.frameContext || null;
    }
    get injector() {
        return this.frameContext && this.frameContext.injector || null;
    }
}
PrintService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintService.ctorParameters = () => [
    { type: FormMessageService },
    { type: LanguageService },
    { type: CloudprintService },
    { type: FormNotifyService, decorators: [{ type: Optional }] }
];

/**
 * 附件udt排序字段
 */
const ATTACHMENT_ORDER_FIELD = 'fileSortOrder';

/**
 * 附件信息处理工具类
 */
class AttachmentUtil {
    /**
     * 转换为附件信息数组
     */
    static convertToAttachmentInfos(fileInfos) {
        if (!fileInfos) {
            return [];
        }
        const attachmentInfos = fileInfos.map((fileInfo) => {
            return this.convertToAttachmentInfo(fileInfo);
        });
        return attachmentInfos;
    }
    /**
     * 转换为附件信息
     */
    static convertToAttachmentInfo(fileInfo) {
        const attachmentInfo = {
            attachmentId: fileInfo.metadataId,
            fileName: fileInfo.fileName
        };
        return attachmentInfo;
    }
    /**
     * 获取附件列表中的第一个附件
     */
    static getFirstAttachmentInfo(attachmentInfos) {
        if (!attachmentInfos || attachmentInfos.length === 0) {
            return;
        }
        const firstAttachmentInfo = attachmentInfos[0];
        return firstAttachmentInfo;
    }
    /**
     * 提取附件id数组
     */
    static peekAttachmentIds(attachmentInfos) {
        if (!attachmentInfos) {
            attachmentInfos = [];
        }
        const attachmentIds = attachmentInfos.map((attachmentInfo) => {
            return attachmentInfo.attachmentId;
        });
        return attachmentIds;
    }
}

/**
 * 附件调用
 */
class AttachmentDataService {
    constructor(frameContext, loadingService) {
        this.frameContext = frameContext;
        this.loadingService = loadingService;
    }
    /**
     * 实体仓库
     */
    get repository() {
        return this.frameContext.repository;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 更新附件信息
     */
    updateRow(attachmentInfoFieldPath, attachmentInfo) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/updateattachment`;
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        const body = {
            updateAttachInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.syncAttachmentInfosToClient();
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 通过属性名更新附件信息
     * @param attachmentInfoFieldPath 附件字段
     * @param attachmentInfo 附件信息
     */
    updateRowWithPropertyName(attachmentInfoFieldPath, attachmentInfo) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/updateattachmentwithproptyname`;
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();
        const body = {
            updateAttachInfo: serverAttachInfo,
            propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.syncAttachmentInfosToClient();
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 删除附件
     * @param attachmentInfoFieldPath
     * @param attachmentInfo
     * @returns
     */
    removeAttachment(attachmentInfoFieldPath, attachmentInfo) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/deleteattachment`;
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();
        const body = {
            deleteAttachInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo(),
            propertyName,
        };
        const options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.syncAttachmentInfosToClient();
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 批量创建附件行数据
     */
    updateRows(attachmentInfoFieldPath, attachmentInfos) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/batchuploadattachment`;
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        const body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 批量创建附件行数据
     */
    updateRowsWithConfigs(attachmentInfoFieldPath, attachmentInfos, configs) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/batchuploadattachment`;
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        const body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.appendAttachmentInfos(responseInfo.returnValue, configs);
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 根据属性名批量创建附件行数据
     */
    updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/batchuploadattachmentwithproptyname`;
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();
        const body = {
            batchUploadInfo: serverAttachInfo,
            propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 创建服务器端需要的更新信息
     */
    createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        const attachmentId = attachmentInfo.attachmentId;
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    }
    /**
     * 创建服务器端需要的批量新增附件信息
     */
    createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    }
    /**
     * 同步服务器端最新信息到客户端
     * @todo:
     * 1、主对象批量新增时不支持
     */
    syncAttachmentInfosToClient() {
        const rootDataId = this.bindingData.list.currentId;
        return this.repository.updateEntityById(rootDataId);
    }
    /**
     * 追加主表数据到客户端
     */
    appendAttachmentInfosToClient(listData, isRootEntity) {
        if (isRootEntity === true) {
            const entities = this.repository.buildEntities(listData);
            this.repository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            const rootDataId = this.bindingData.list.currentId;
            return this.repository.updateEntityById(rootDataId).pipe(map(() => listData));
        }
    }
    appendAttachmentInfos(listData, keyValues) {
        const entities = this.repository.buildEntities(listData);
        this.repository.entityCollection.addEntities(entities);
        // 更新实体使之产生变更集
        this.updateEntities(entities, keyValues);
        return of(listData);
    }
    updateEntities(entities, keyValues) {
        entities.forEach((entity) => {
            this.updateEntity(entity, keyValues);
        });
    }
    updateEntity(target, keyValues) {
        Object.keys(keyValues).forEach((key) => {
            this.setValueByPath(target, key, keyValues[key]);
        });
    }
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
}
AttachmentDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AttachmentDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: FormLoadingService }
];

// tslint:disable: max-line-length
/**
 * 附件服务
 */
class AttachmentService {
    /**
     * 构造函数
     */
    constructor(frameContext, attachDataService, notifyService, uploadDialogService, downloadService) {
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.notifyService = notifyService;
        this.uploadDialogService = uploadDialogService;
        this.downloadService = downloadService;
        /**
         * 默认根目录
         */
        this.defaultRootDirId = '';
        this.setLanguageService();
        this.fileViewerService = this.frameContext.injector.get(FileViewerService, null, InjectFlags.Optional);
        this.entityService = this.frameContext.injector.get(EntityService, null, InjectFlags.Optional);
        if (!this.downloadService && typeof DownloadService !== 'undefined') {
            this.downloadService = this.frameContext.injector.get(DownloadService, null);
        }
    }
    /**
     * 默认父路径
     */
    get defaultParentDirName() {
        return this.frameContext.bindingData.list.currentId;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 设置语言服务
     */
    setLanguageService() {
        const injector = this.frameContext.injector;
        this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 上传单个文件
     * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param attachmentNamePath 附件名称字段的路径
     */
    uploadAndUpdateRow(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        const attachmentIdList = [];
        let currentItem = null;
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        else {
            this.notifyService.warning(this.languageService.plsSelectUpdateRow, { hideTitle: true });
            return EMPTY;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return empty();
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    }
    /**
     * 上传单个文件（支持多列）
     * @param attachmentInfoFieldPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param rootDirId 附件存储根目录
     * @param parentDirName 附件存储目录
     * @param fileType 文件类型，like .txt,.docx
     */
    uploadAndUpdateRowWithPropertyName(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        const attachmentIdList = [];
        let currentItem = null;
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        else {
            this.notifyService.warning(this.languageService.plsSelectUpdateRow, { hideTitle: true });
            return EMPTY;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    }
    /**
     * 上传多个文件
     */
    uploadAndBatchAddRows(attachmentInfoFieldPath, rootDirId, parentDirName, fileType) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    }
    /**
     * 上传多个文件
     */
    uploadAndBatchAddRowsWithPropertyName(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    }
    /**
     * 下载附件（根据附件id）
     */
    download(attachId, rootId) {
        if (!attachId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        rootId = rootId || 'default-root';
        const url = this.getDownloadUrl([attachId], rootId);
        // let url = '';
        // if (rootId) {
        //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
        // } else {
        //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;
        // }
        window.open(url);
        return of(true);
    }
    /**
     * 批量下载附件（根据附件id数组）
     */
    batchDownload(attachIds, rootId) {
        if (!attachIds || attachIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        // 只选择一个附件时按单个附件下载处理
        if (attachIds.length === 1) {
            return this.download(attachIds[0], rootId);
        }
        // const attachIdsString = JSON.stringify(attachIds);
        // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;
        const url = this.getDownloadUrl(attachIds, rootId);
        window.open(url);
        return of(true);
    }
    /**
     * 获取下载路径
     * @param metadataidlist 附件id数组
     * @param rootId rootId
     */
    getDownloadUrl(metadataidlist, rootId) {
        rootId = rootId || 'default-root';
        if (this.downloadService) {
            if (metadataidlist.length === 1) {
                return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);
            }
            else {
                const attachIdsString = JSON.stringify(metadataidlist);
                return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);
            }
        }
        else {
            console.warn('因安全问题，附件下载提供安全校验机制，附件下载功能需重新编译。');
            if (metadataidlist.length === 1) {
                return BasePathService.convertPath(`/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${metadataidlist[0]}&rootid=${rootId}`);
            }
            else {
                const attachIdsString = JSON.stringify(metadataidlist);
                return BasePathService.convertPath(`/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`);
            }
        }
    }
    /**
     * 下载（根据数据id）
     */
    downloadByDataId(dataId, attachmentInfoFieldPath, rootId) {
        if (!dataId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const dataIds = [dataId];
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const attachId = attachIds[0];
        return this.download(attachId);
    }
    /**
     * 批量下载附件
     */
    batchDownloadByDataIds(dataIds, attachmentInfoFieldPath, rootId) {
        if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {
            dataIds = dataIds.split(',').filter(p => p);
        }
        if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const ids = [].concat(dataIds);
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        return this.batchDownload(attachIds, rootId);
    }
    /**
     * 根据附件UDT字段的路径预览附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 跟目录id
     * @param ids 附件id
     */
    previewByAttachmentInfoFieldPath(attachmentInfoFieldPath, rootDirId, ids) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        let attachIds = [];
        let dataIds = [];
        if (ids && ids.length > 0) {
            if (typeof (ids) === 'string') {
                dataIds.push(ids);
            }
            else {
                dataIds = ids;
            }
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        }
        else {
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        }
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        return this.previewByAttachmentIds(attachIds, rootDirId);
    }
    /**
     * 根据附件UDT字段的路径预览当前行的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 根目录id
     */
    previewByAttachmentInfoFieldPathWithIndex(attachmentInfoFieldPath, rootDirId) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        const currentRow = this.getCurrentRow(attachmentInfoFieldPath);
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            throw new Error('要预览的附件id不存在，请确认');
        }
        else {
            return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);
        }
    }
    /**
     * 根据目录预览附件
     * @param subDirName 父目录名称
     * @param rootDirId 根目录id
     */
    previewBySubDirName(subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        const viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));
        return viewer$;
    }
    /**
     * 根据目录预览指定索引的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param subDirName 子目录名称
     * @param rootDirId 根目录id
     */
    previewBySubDirNameWithIndex(attachmentInfoFieldPath, subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));
        return viewer$;
    }
    /**
     * 根据附件id数组预览附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     */
    previewByAttachmentIds(attachmentIds, rootDirId) {
        const viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));
        return viewer$;
    }
    /**
     * 根据附件id数组预览指定索引的附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     * @param attachmentId 附件Id
     */
    previewFileListWithIndex(attachmentIds, rootDirId, attachmentId) {
        const viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));
        return viewer$;
    }
    /**
     * 生成版本号
     * @param versions 历史版本号
     * @description 默认编码规则v1.0 v2.0 ...
     */
    genVersion(versions) {
        if (!versions) {
            versions = [];
        }
        const mainCode = versions.length + 1;
        return `V${mainCode}.0`;
    }
    /**
     * 更新附件版本信息
     * @param versionField 附件版本字段
     * @param historyField 是否历史版本字段
     * @param attachmentFieldPath 附件udt字段路径
     */
    updateAttachmentVersion(versionField, historyField, attachmentFieldPath) {
        /**
         * 遍历所有附件行
         * 找到所有没有附件版本的行
         * 遍历这些行
         * 通过文件名去查找同名的且有附件版本号的行
         * 这些行历史版本字段置为true
         * 无版本号的行，版本= 上行数 + 1
         *
         */
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        const attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        const befRepository = this.frameContext.repository;
        const entityManager = befRepository.entityManager;
        const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
        const paths = dataPath.toArray().map((path) => {
            if (path.startsWith('PropName:')) {
                return path.split(':')[1];
            }
            else {
                return path;
            }
        });
        if (attachmentBindingList) {
            const attachments = attachmentBindingList.toJSON();
            // 只处理有附件的情况
            if (attachments) {
                const versionLessRows = attachments.filter(item => !item[versionField]);
                versionLessRows.forEach(item => {
                    const fileName = item[attachmentField]['fileName'];
                    const versionedRows = attachments.filter(row => row[attachmentField]['fileName'] === fileName && row[versionField]);
                    paths.pop();
                    paths.push(`DataId:${item[attachmentBindingList.primaryKey]}`);
                    let entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                    const version = this.genVersion(versionedRows);
                    entity[versionField] = version;
                    entity[historyField] = false;
                    // 处理历史记录
                    versionedRows.forEach(row => {
                        paths.pop();
                        paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);
                        entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                        entity[historyField] = true;
                    });
                });
            }
        }
    }
    isAttachmentCanDelete(historyField, attachmentFieldPath) {
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        bindingPaths.pop();
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        const bindingObject = attachmentBindingList.currentItem;
        if (bindingObject[historyField] === true) {
            this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });
            return EMPTY;
        }
    }
    updateAttachmentHistory(versionField, historyField, attachmentFieldPath) {
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        const attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        // const befRepository = this.frameContext.repository as BefRepository<any>;
        // const entityManager = befRepository.entityManager;
        if (attachmentBindingList) {
            const attachments = attachmentBindingList.toJSON();
            const versionedRows = attachments.filter(item => item[versionField]);
            const fileNameMap = new Map();
            const befRepository = this.frameContext.repository;
            const entityManager = befRepository.entityManager;
            const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
            const paths = dataPath.toArray().map((path) => {
                if (path.startsWith('PropName:')) {
                    return path.split(':')[1];
                }
                else {
                    return path;
                }
            });
            versionedRows.forEach(item => {
                const fileName = item[attachmentField]['fileName'];
                if (fileNameMap.has(fileName)) {
                    fileNameMap.get(fileName).push(item);
                }
                else {
                    fileNameMap.set(fileName, [item]);
                }
            });
            Array.from(fileNameMap.values()).forEach((array) => {
                array.sort((x, y) => {
                    const xVersion = parseInt(x[versionField].replace(/[a-zA-Z\.]/g, ''));
                    const yVersion = parseInt(y[versionField].replace(/[a-zA-Z\.]/g, ''));
                    return yVersion - xVersion;
                });
                const row = array[0];
                paths.pop();
                paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);
                const entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                entity[historyField] = false;
            });
        }
    }
    /**
     * 删除附件
     * @param attachmentInfoFieldPath 附件udt字段路径
     * @param id 数据id
     * @param rootDirId 根目录
     * @returns
     */
    removeAttachment(attachmentInfoFieldPath, id, rootDirId) {
        const rootId = rootDirId;
        if (!rootId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const dataIds = [id];
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectRemoveAtt, { hideTitle: true });
            return EMPTY;
        }
        const attachmentId = attachIds[0];
        return this.attachDataService.removeAttachment(attachmentInfoFieldPath, { attachmentId, fileName: null });
    }
    /**
     * 获取当前视图模型当前行的附件id
     * @param attachmentInfoFieldPath 附件udt字段
     */
    getCurrentAttachmentId(attachmentInfoFieldPath) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList.currentItem;
        if (currentItem && currentItem.primaryKeyValue) {
            return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;
        }
        else {
            return null;
        }
    }
    /**
     * 获取当前行
     * @param attachmentInfoFieldPath udt字段
     */
    getCurrentRow(attachmentInfoFieldPath) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList && bindingList.currentItem;
        return currentItem;
    }
    /**
     * 获取指定附件信息表的指定行
     * @param attachmentInfoFieldPath
     * @param primaryValue
     * @returns
     */
    getSpecialRow(attachmentInfoFieldPath, primaryValue) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList && bindingList.findById(primaryValue);
        return currentItem;
    }
    /**
     * 获取dataIds对应Entity上的附件id数组
     */
    getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds) {
        // 解析路径
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        // 获取附件所在实体的数据列表，不传递dataIds参数，则返回全部
        const entityListData = this.entityService.getEntityListData(parentBindingPathArray);
        let filteredEntityListData = [];
        if (dataIds && Array.isArray(dataIds) === true) {
            filteredEntityListData = entityListData.filter((entityData) => {
                return dataIds.indexOf(entityData.id) > -1;
            });
        }
        else {
            filteredEntityListData = entityListData;
        }
        // 转换为附件Id数组
        const attachmentIds = [];
        filteredEntityListData.forEach((entityData) => {
            if (entityData[attachmentFieldName]) {
                const attachmentId = entityData[attachmentFieldName]['attachmentId'];
                if (attachmentId) {
                    attachmentIds.push(attachmentId);
                }
            }
        });
        return attachmentIds;
    }
}
AttachmentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AttachmentService.ctorParameters = () => [
    { type: FrameContext },
    { type: AttachmentDataService },
    { type: FormNotifyService },
    { type: UploadDialogService },
    { type: DownloadService, decorators: [{ type: Optional }] }
];

/**
 * 附件上传
 * @summary
 * fileExtend：命名文件上传或预览组件传递过来的数据；
 * fileExtendFieldPath：命名附件UDT的字段路径；
 * attachmentInfo：命名附件UDT所需的信息；
 */
class FileService {
    /**
     * 构造函数
     */
    constructor(frameContext, attachDataService, entityService, subListDataService, notifyService, languageService, listDataService, formLoadingService) {
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.subListDataService = subListDataService;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.listDataService = listDataService;
        this.formLoadingService = formLoadingService;
        this.subject = new Subject();
        this.subject.pipe(debounceTime(500)).subscribe((data) => {
            this.process(data.fileInfoFieldPath, data.configs);
        });
        this.attachmentInfos = [];
    }
    // #region 上传文件
    /**
     * 批量添加附件行
     */
    addFileRows(fileInfoFieldPath) {
        const attachmentInfos = this.getAttachmentInfosToAddFromContext();
        if (attachmentInfos.length === 0) {
            this.notifyService.info('请先上传附件');
        }
        return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);
    }
    /**
     * 批量添加带附件类型的附件行
     * @param fileInfoFieldPath 附件udt字段
     * @param configs 附件扩展信息配置
     * @description configs配置如{"billId":"{UISTATE~/root/billId}","rowId":"{UISTATE~/root/rowId}","attachmentType":"xueli"}
     */
    addFileRowsWithConfigs(fileInfoFieldPath, configs) {
        const attachmentInfos = this.getAttachmentInfosToAddFromContext();
        if (attachmentInfos.length === 0) {
            this.notifyService.info('请先上传附件');
        }
        // let mapFields = null;
        // if (typeof configs === 'string') {
        //   // 去掉首尾空格
        //   configs = configs.trim();
        // }
        // if (configs.startsWith('{') && configs.endsWith('}')) {
        //   try {
        //     mapFields = JSON.parse(configs);
        //   } catch {
        //     throw new Error('附件扩展信息配置不是合法的json字符串。');
        //   }
        // } else {
        //   throw new Error('附件扩展信息配置不是合法的json字符串。');
        // }
        this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);
        this.subject.next({ fileInfoFieldPath, configs });
        //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);
    }
    process(fileInfoFieldPath, configs) {
        if (this.attachmentInfos && this.attachmentInfos.length > 0) {
            const attachmentInfos = this.attachmentInfos.concat([]);
            let mapFields = null;
            if (typeof configs === 'string') {
                // 去掉首尾空格
                configs = configs.trim();
            }
            if (configs.startsWith('{') && configs.endsWith('}')) {
                try {
                    mapFields = JSON.parse(configs);
                }
                catch (_a) {
                    throw new Error('附件扩展信息配置不是合法的json字符串。');
                }
            }
            else {
                throw new Error('附件扩展信息配置不是合法的json字符串。');
            }
            this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields).pipe(tap(() => {
                this.attachmentInfos = this.attachmentInfos.filter(item => !attachmentInfos.find(attachmentInfo => attachmentInfo.attachmentId === item.attachmentId));
                if (this.attachmentInfos.length > 0) {
                    this.process(fileInfoFieldPath, configs);
                }
            })).subscribe();
        }
    }
    /**
     * 获取要添加的附件信息数组
     */
    getAttachmentInfosToAddFromContext() {
        const fileExtends = this.getFileExtendsFromContext();
        const attachmentInfos = this.convertToAttachmentInfos(fileExtends);
        return attachmentInfos;
    }
    /**
     * 将附件上传组件返回的附件信息转换为服务器端需要的格式
     */
    convertToAttachmentInfos(fileExtends) {
        if (!fileExtends) {
            return [];
        }
        const attachmentInfos = [];
        fileExtends.forEach((fUploadOutPut) => {
            const attachmentInfo = {
                attachmentId: fUploadOutPut.extend.metadataId,
                fileName: fUploadOutPut.extend.fileName,
            };
            attachmentInfos.push(attachmentInfo);
        });
        return attachmentInfos;
    }
    // #endregion
    // #region 删除文件
    /**
     * 删除附件行
     */
    removeFileRows(fileInfoFieldPath) {
        const dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);
        if (dataIds.length === 0) {
            this.notifyService.info('请选择要删除的附件');
        }
        const isSublist = fileInfoFieldPath.split('/').filter(p => p).length >= 2;
        const removeObservables = [];
        if (isSublist) {
            dataIds.forEach((dataId) => {
                let removeObservable;
                removeObservable = this.subListDataService.removeWithoutConfirm(dataId);
                removeObservables.push(removeObservable);
            });
            return forkJoin(removeObservables);
        }
        else {
            return this.listDataService.removeRows(dataIds, false, null, false);
        }
    }
    /**
     * 获取要删除的数据
     */
    getDataIdsToRemoveFromContext(fileExtendFieldPath) {
        // 从上下文中获取要处理的附件信息数组
        const fileExtends = this.getFileExtendsFromContext();
        // 将附件数组转换为对应的数据id
        const dataIds = [];
        fileExtends.forEach((fileExtend) => {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            const fileId = fileExtend.extend.metadataId;
            const dataId = this.convertFileIdToDataId(fileId, fileExtendFieldPath);
            dataIds.push(dataId);
        });
        return dataIds;
    }
    /**
     * 根据路径获取附件字段值数组
     * @param fieldPath 字段路径
     */
    convertFileIdToDataId(fileId, fileExtendFieldPath) {
        // 解析路径
        const fileBindingPath = BindingPathConverter.toBindingPathArray(fileExtendFieldPath);
        const fileFieldName = fileBindingPath.pop();
        const fileListBindingPath = fileBindingPath;
        // 获取附件id数组
        const entityListData = this.entityService.getEntityListData(fileListBindingPath);
        const targetEntityData = entityListData.find((entityData) => {
            if (entityData[fileFieldName]) {
                const attachmentId = entityData[fileFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        });
        return targetEntityData.id;
    }
    // #endregion
    //#region 文件排序
    /**
     * 更新附件排序
     * @param attachmentInfoFieldPath 附件udt字段路径
     * @param ids 附件排序后的附件id数组
     */
    updateOrder(attachmentInfoFieldPath, ids) {
        if (!attachmentInfoFieldPath) {
            throw new Error('附件udt字段路径参数不能为空');
        }
        // 支持从代码中直接调用，如果参数中传递了ids则使用，否则使用命令上下文中的事件参数
        if (!ids) {
            // 获取事件参数
            const commandContext = this['context'];
            // 与组件约定事件参数为数据主键数组
            ids = commandContext && commandContext.eventParam && commandContext.eventParam.data;
        }
        // 对收集的主键数组进行判断
        if (!ids || !Array.isArray(ids)) {
            return;
        }
        // 当前命令所在组件的绑定数据
        const bindingList = this.frameContext.bindingData.getList();
        // 无绑定数据时不处理
        if (!bindingList || bindingList.length < 1) {
            return;
        }
        // 统一获取附件udt信息
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentField = parentBindingPathArray.pop();
        // 出现udt字段不存在的情况，说明命令中附件udt字段配置错误或vo中没有附件udt。控制器不兼容错误，此处判断只为阻止后续的遍历
        if (!attachmentField) {
            throw new Error('无法获取附件udt字段，请确认命令中附件udt字段路径配置正确，且视图模型中存在附件udt字段');
        }
        const data = bindingList.toJSON();
        // 更新绑定数据中附件udt字段中排序字段的值,仅更新有附件的行
        ids.forEach((id, index) => {
            const item = data.find(item => item && item[attachmentField] && item[attachmentField]['attachmentId'] === id);
            const primaryKeyValue = item && item.id;
            if (!primaryKeyValue) {
                return;
            }
            const bindingObject = bindingList.findById(primaryKeyValue);
            if (bindingObject) {
                // 附件udt对象
                const attachment = bindingObject[attachmentField];
                if (attachment) {
                    // 获取旧值
                    const order = attachment.getValue(ATTACHMENT_ORDER_FIELD);
                    if (order !== index) {
                        // 更新排序
                        attachment.setValue(ATTACHMENT_ORDER_FIELD, index, true, true);
                    }
                }
            }
        });
    }
    //#endregion
    // #region 其他工具方法
    /**
     * 从上下文中获取要处理的附件信息数组
     * @summary
     * 为了统一单个和多个附件的处理方式，统一包装为数组
     */
    getFileExtendsFromContext() {
        const commandContext = this['context'];
        const eventParam = commandContext.eventParam;
        if (!eventParam) {
            return [];
        }
        let fileExtends;
        if (Array.isArray(eventParam) === false) {
            fileExtends = [eventParam];
        }
        else {
            fileExtends = eventParam.concat([]);
        }
        return fileExtends;
    }
}
FileService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileService.ctorParameters = () => [
    { type: FrameContext },
    { type: AttachmentDataService },
    { type: EntityService },
    { type: SubListDataService },
    { type: FormNotifyService },
    { type: LanguageService },
    { type: ListDataService },
    { type: FormLoadingService, decorators: [{ type: Optional }] }
];

/**
 * 弹窗服务
 * @scope FormModule
 */
class DialogService {
    constructor(modalService, farrisFormService, _componentFactoryResolver, frameContext, injector) {
        this.modalService = modalService;
        this.farrisFormService = farrisFormService;
        this._componentFactoryResolver = _componentFactoryResolver;
        this.frameContext = frameContext;
        this.injector = injector;
        this._providers = [];
        /**
         * 外部引用
         */
        this.refs = {};
        this.modals = {};
        this.setLanguageService();
    }
    /**
     * 设置语言服务
     */
    setLanguageService() {
        // FrameContext不一定存在，不能直接用
        const frameContext = this.getFrameContext();
        if (frameContext) {
            const injector = this.frameContext.injector;
            this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        }
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 兼容旧弹窗，获取frameContext
     */
    getFrameContext() {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    }
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    getComponentFactoryResolver() {
        const frameContext = this.getFrameContext();
        let componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    }
    /**
     * 获取config转换成对象类型的配置
     * @param config 配置项
     * @throws 填写对象格式或json字符串
     */
    getObjectTypeConfig(config) {
        let objectTypeConfig;
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    }
    /**
     * 创建模态框内组件实例，并返回模态框实例；做了兼容老表单处理
     * @param config 弹窗配置
     * @param component 弹窗内组件
     * @param uiStateObject 绑定弹窗内组件uiState
     */
    createModalComponentRef(config, component, uiStateObject) {
        let componentRef;
        let modalRef;
        const frameContext = this.getFrameContext();
        const componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);
            const injector = this.createInjector(this.refs, this.frameContext.injector);
            const modalContentInjector = ReflectiveInjector.resolveAndCreate([...this._providers], injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach((item) => {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
            modalRef = this.modalService.show(componentRef, config);
        }
        else {
            modalRef = this.modalService.show(component, config);
        }
        return modalRef;
    }
    /**
     *打开弹窗
     * @param config 模态框本身配置
     * @param modalId 模态框内组件的id
     * @param uiStateConfig 模态框内组件uiState上的字段及值
     * @param callback 回调
     */
    openModal(config = {}, modalId, uiStateConfig = {}, callback) {
        const configObj = this.getObjectTypeConfig(config);
        const uiStateObject = this.getObjectTypeConfig(uiStateConfig);
        const innerCompopnent = this.farrisFormService.getControls(modalId);
        let modalRef;
        let modalConfig = {
            title: this.languageService.defaultDialogTitle,
            width: 760,
            height: 450,
            showButtons: false
        };
        modalConfig = Object.assign(modalConfig, configObj);
        const onClosingHandler = modalConfig.beforeClose;
        // tslint:disable: no-string-literal
        const cancelChanges = modalConfig['cancelChanges'] || false;
        modalConfig.beforeClose = (ref) => {
            // if (ref && ref.modalRef && ref.modalRef.content) {
            //   ref.modalRef.content.isDialogRootComponent = false;
            // }
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap((result) => {
                    if (result) {
                        if (cancelChanges) {
                            return this.cancelChanges(ref);
                        }
                    }
                    return of(result);
                }));
            }
            if (cancelChanges) {
                return this.cancelChanges(ref);
            }
            else {
                return of(true);
            }
        };
        const remote = modalConfig.remote || false;
        if (remote) {
            this.createRemoteForm(modalConfig, uiStateObject).subscribe((modalRef) => {
                this.modalRef = modalRef;
                this.refs.modalRef = modalRef;
                if (modalRef && !!modalRef.content) {
                    modalRef.content.isDialogRootComponent = true;
                    modalRef.content.dialogRef = modalRef;
                }
                callback(modalRef);
            });
        }
        else {
            if (!innerCompopnent) {
                console.error(`获取控件失败，modalId=${modalId}`);
                return;
            }
            if (typeof innerCompopnent === 'string') {
                modalConfig.dialogType = 'iframe';
                modalRef = this.modalService.show(innerCompopnent, modalConfig);
            }
            else if (typeof innerCompopnent === 'function') {
                modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);
            }
            else if (typeof innerCompopnent === 'object') {
                // 如果是对象 且使用独立js加载
                // {"useIsolateJs":true,"modalInstance":f()}
                if (innerCompopnent.useIsolateJs) {
                    const injector = this.createInjector(this.refs);
                    const parameter = {
                        injector: injector,
                        uiState: uiStateObject,
                        modalService: this.modalService,
                        dialogServiceInstance: this,
                        eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,
                        componentCallback: this.componentModify,
                        modalInstanceCallback: this.modalInstanceCallback.bind(this)
                    };
                    // 会在内部进行
                    const subject = innerCompopnent['modalInstance'](modalConfig, parameter);
                    return subject;
                }
                else {
                    modalRef = this.modalService.show(innerCompopnent, modalConfig);
                }
            }
            this.modalRef = modalRef;
            this.refs.modalRef = modalRef;
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    }
    componentModify(cmpRef, parameter) {
        if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {
            if (parameter.uistate && typeof parameter.uistate === 'string') {
                parameter.uistate = JSON.parse(parameter.uistate);
            }
            if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {
                Object.keys(parameter.uistate).forEach((item) => {
                    cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);
                });
            }
            // 附加isDialog参数
            cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
        }
    }
    modalInstanceCallback(cmpRef, options, parameter) {
        if (parameter && parameter.modalService) {
            const modalRef = parameter.modalService.show(cmpRef, options);
            this.modalRef = modalRef;
            this.refs.modalRef = modalRef;
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    }
    /**
     * 打开类帮助表单
     * @param frameId
     * @param params
     * @param configs
     * @description 弹出表单和弹出远端表单区别为弹出表单需要配置字段映射
     */
    openHelpModal(frameId, params, configs) {
        const events = this['context']['eventParam'] || {};
        // 卡片场景传递过来的事件是自定义对象，包含event和options。列表场景传递过来的事件参数是普通事件参数，在参数中携带了editor.options
        const event = events.event || events;
        const options = events.options || events.editor && events.editor.options || {};
        const context = events && events.context;
        const subject = new Subject();
        // modalId在两种场景下都需要，用来区分实例
        const { modalId = null } = options;
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string' && configs.length > 0) {
            configs = JSON.parse(configs);
        }
        const { remote = false, currentRow = false, areaResponse = undefined } = configs || {};
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            const mapFields = configs.mapFields || {};
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, (dialogRef) => {
                // 新增event参数（为了以后调用event中的formControl以适配列表中的智能输入框弹出表单）
                this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };
            });
        }
        else {
            const dialogRef = this.openModal(options, modalId, params);
            const mapFields = options.mapFields || {};
            this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };
        }
        return subject;
    }
    /**
     * 打开带回调的弹窗
     * @param frameId frameId
     * @param params 参数
     * @param configs 配置
     * @returns
     */
    openCallbackableModal(frameId, params, configs) {
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string') {
            configs = JSON.parse(configs);
        }
        const events = this['context'] && this['context']['eventParam'] || {};
        const options = events.options;
        options.showButtons = true;
        options.buttons = [
            { text: this.languageService.cancel, cls: 'btn', handle: (event) => this.cancel(options) },
            {
                text: this.languageService.confirm, cls: 'btn btn-primary', handle: (event) => {
                    const { modalId = null } = options || {};
                    if (modalId) {
                        const modal = this.modals[modalId];
                        const { subject = null, dialogRef = null, frameId = null, handle = null, currentRow = false } = modal || {};
                        const formCmp = dialogRef.content; // 弹窗表单实例
                        if (!formCmp) {
                            throw new Error('不支持的表单类型');
                        }
                        let selectedItems = [];
                        if (currentRow === true) {
                            let frameComtext;
                            if (formCmp.context) {
                                frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                            }
                            else {
                                frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId);
                            }
                            if (!frameComtext) {
                                throw new Error(`无效的frameId：${frameId}，请确认命令中frameId正确。`);
                            }
                            const bindingList = frameComtext.bindingData.getList();
                            const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                            selectedItems = [item];
                        }
                        else {
                            let rows;
                            // 如果context为空 那么尝试从对应的appcontext读取，主要目的是为了解析表单的弹出
                            if (formCmp.context) {
                                rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                            }
                            else {
                                rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                            }
                            selectedItems = Array.from(rows.values());
                        }
                        if (typeof handle === 'function') {
                            handle(selectedItems);
                        }
                        if (subject) {
                            subject.next();
                        }
                        dialogRef.close(options);
                    }
                }
            }
        ];
        const subject = new Subject();
        const { modalId = null } = options;
        const { remote = null, currentRow = false, areaResponse = undefined } = configs;
        const handle = options.handle;
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, (dialogRef) => {
                this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };
            });
        }
        else {
            const dialogRef = this.openModal(options, modalId, params);
            this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };
        }
        return subject;
    }
    /**
     * 确认按钮事件
     * @throws frameId
     */
    confirm() {
        const events = this['context'] && this['context']['eventParam'] || {};
        const { modalId = null } = events || {};
        if (modalId) {
            const modal = this.modals[modalId];
            const { subject = null, dialogRef = null, mapFields = {}, frameId = null, currentRow = false, event = null, context = null } = modal || {};
            const formCmp = dialogRef.content; // 弹窗表单实例
            if (!formCmp) {
                throw new Error('不支持的表单类型');
            }
            // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;
            let selectedItems = [];
            if (currentRow === true) {
                const frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                if (!frameComtext) {
                    throw new Error(`无效的frameId：${frameId}，请确认命令中frameId正确。`);
                }
                const bindingList = frameComtext.bindingData.getList();
                const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                if (item && Object.keys(item).length > 0) {
                    selectedItems = [item];
                }
            }
            else {
                const rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                selectedItems = Array.from(rows.values());
            }
            // 映射字段数据
            // 获取触发弹框的编辑器的字段名称
            let editorField = undefined;
            if (event && event.editor && event.editor.column) {
                editorField = event.editor.column.field;
            }
            if (selectedItems && mapFields) {
                Object.keys(mapFields).forEach((k) => {
                    const targetField = mapFields[k];
                    const sourceKeyArray = k.split('.').filter((p) => p) || [];
                    const targetValue = selectedItems.map((r) => {
                        return sourceKeyArray.reduce((target, key) => {
                            if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {
                                return target[key];
                            }
                            else {
                                return '';
                            }
                        }, r);
                    }).join(',');
                    if (targetField) {
                        const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter((p) => p);
                        const targetFields = targetField.split(',').filter((p) => p);
                        targetFields.forEach((target) => {
                            if (context) {
                                this.setValueByPath(context, target, targetValue);
                            }
                            else {
                                // 修复表格智能输入框选择值后智能输入框值丢失的问题
                                if (event.formControl && event.formControl.setValue && event.editor && event.editor.column && event.editor.column.field === target) {
                                    event.formControl.setValue(targetValue);
                                }
                                const targetPath = target.split('.');
                                this.frameContext.bindingData.setValue(bindingPaths.concat(targetPath), targetValue, true, true);
                            }
                        });
                    }
                });
            }
            if (subject) {
                subject.next();
            }
            dialogRef.close();
        }
    }
    /**
     * 取消按钮事件
     * @param event
     */
    cancel(event) {
        const events = event || this['context'] && this['context']['eventParam'] || {};
        const { modalId = null } = events || {};
        if (modalId) {
            const modal = this.modals[modalId];
            const { subject = null, dialogRef = null } = modal || {};
            if (subject) {
                subject.next();
            }
            if (dialogRef) {
                dialogRef.close();
            }
        }
    }
    /**
     * 取消服务器变更集
     * @param ref
     */
    cancelChanges(ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            const component = ref.modalRef.content;
            if (component && component.context) {
                const repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(() => of(true)));
                }
            }
        }
        return of(true);
    }
    /**
     * 关闭该弹窗
     */
    closeModal() {
        if (this.modalRef) {
            this.modalRef.close();
        }
    }
    /**
     * 创建远程表单实例
     * @param options dialog配置
     * @param uiState uistate
     */
    createRemoteForm(options, uiState) {
        const remote = options.remote || false;
        const subject = new Subject();
        if (remote) {
            let moduleName = options.moduleName || null;
            System.import(remote).then((module) => {
                if (!moduleName) {
                    moduleName = Object.keys(module).pop();
                }
                const moduleFactory = module[moduleName];
                const moduleRef = moduleFactory.create(this.injector);
                const resolve = moduleRef && moduleRef.instance && moduleRef.instance.trans && typeof moduleRef.instance.trans.resolve === 'function' && moduleRef.instance.trans.resolve || (() => of(true));
                resolve.apply(moduleRef.instance.trans).subscribe(() => {
                    const entryComponent = moduleRef['_bootstrapComponents'][0];
                    if (entryComponent) {
                        const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                        const injector = this.createInjector(this.refs);
                        const componentRef = compFactory.create(injector);
                        if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                            if (typeof uiState === 'object' && Object.keys(uiState).length) {
                                Object.keys(uiState).forEach((item) => {
                                    componentRef.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);
                                });
                            }
                            // 附加isDialog参数
                            componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                        }
                        const modalRef = this.modalService.show(componentRef, options);
                        subject.next(modalRef);
                    }
                    else {
                        throw new Error(`无法找到入口表单！`);
                    }
                });
            });
        }
        return subject;
    }
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
    createInjector(modalRef, injector) {
        const providers = [
            { provide: INSIDE_DIALOG_TOKEN, useValue: true },
            {
                provide: MODAL_REF, useValue: forwardRef(() => modalRef)
            }
        ];
        return Injector.create({ providers, parent: injector || this.injector });
    }
}
DialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DialogService.ctorParameters = () => [
    { type: BsModalService },
    { type: FarrisFormService },
    { type: ComponentFactoryResolver },
    { type: FrameContext },
    { type: Injector, decorators: [{ type: Optional }] }
];

/**
 * 侧边栏服务
 * @scope FrameComponent
 */
class SidebarService {
    constructor(frameContext, sidebarUIService, messageService, languageService) {
        this.frameContext = frameContext;
        this.sidebarUIService = sidebarUIService;
        this.messageService = messageService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    get repository() {
        return this.frameContext.repository;
    }
    openSidebar() {
        this.sidebarUIService.sendIsOpen(true);
    }
    closeSidebar() {
        this.sidebarUIService.sendIsOpen(false);
    }
    /**
     * 关闭前先取消变更
     */
    confirmBeforeClosingSidebar() {
        // 检查是否有变更，没有变更直接关闭
        const ifChangesExist = this.repository.entityManager.checkAllEntityChanges();
        if (!ifChangesExist) {
            return of(true);
        }
        // 确认是否关闭
        const confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);
        const result$ = confirm$.pipe(switchMap((confirmResult) => {
            if (confirmResult === false) {
                return of(false);
            }
            else {
                return of(true);
            }
        }));
        return result$;
    }
    /**
     * 继续关闭侧边栏
     */
    continueClosingSidebar() {
        return of(true);
    }
    /**
     * 阻止侧边栏关闭
     */
    stopClosingSidebar() {
        return of(false);
    }
}
SidebarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SidebarService.ctorParameters = () => [
    { type: FrameContext },
    { type: FarrisSidebarService },
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];

/**
 * 过滤条件服务
 * @scope FormModule
 */
class FilterService {
    /**
     * 移除包含特殊值的过滤条件
     * @todo：假定filters为字符串，待设计时支持数组参数后一起调整
     */
    stripFiltersWithSpecialValue(filters, specialValues) {
        if (!filters || !specialValues) {
            return filters;
        }
        const filterArray = JSON.parse(filters);
        const strippedFilterArray = filterArray.filter((filter$$1) => {
            const filterValue = this.getFilterValue(filter$$1);
            return specialValues.indexOf(filterValue) === -1;
        });
        return JSON.stringify(strippedFilterArray);
    }
    /**
     * 获取过滤条件的值
     * @todo：没有Filter接口定义，目前产品部大小写不一致。
     */
    getFilterValue(filter$$1) {
        return filter$$1.Value || filter$$1.value;
    }
}
FilterService.decorators = [
    { type: Injectable }
];

const FARRIS_FORM_COMPONENTS$1 = new InjectionToken('表单弹出窗口或隐藏组件列表');
/**
 * 表单服务
 * @scope FormModule
 */
class ComponentManagerService {
    constructor() {
        this.controls = {};
    }
    appendControl(key, cmpIns) {
        this.controls[key] = cmpIns;
    }
    getControl(key) {
        if (this.controls[key]) {
            return this.controls[key];
        }
        else {
            console.warn(`未找到Key为${key}的组件！`);
            return null;
        }
    }
    clear(key) {
        if (key) {
            this.controls[key] = null;
            delete this.controls[key];
        }
        else {
            this.controls = {};
        }
    }
}
ComponentManagerService.decorators = [
    { type: Injectable }
];

class AuthorityService {
    queryOperationAuthority(operationIds) {
        var queryResult = new Map();
        var i = 0;
        for (var j = 0; j < operationIds.length; j++) {
            queryResult.set(operationIds[j], i % 2 == 0 ? true : false);
            i++;
        }
        var dummyResult = new Subject();
        setTimeout(() => {
            dummyResult.next(queryResult);
        }, 0);
        return dummyResult;
    }
}

/**
 * 权限
 */
class Authority {
    constructor() {
        this.operationLabelMap = new Map();
        this.authOfLabel = new Map();
    }
    /**
     * 设置label到operation id的映射
     * @param labelMap
     */
    setLabelMap(labelMap) {
        for (var i in labelMap) {
            this.operationLabelMap.set(i, labelMap[i]);
        }
        this.operationLabelMap.forEach((opId, label) => {
            this[label] = false;
        });
    }
    /**
     * 初始化权限的值
     */
    initialize(authorityService) {
        if (this.operationLabelMap && this.operationLabelMap.size > 0) {
            return authorityService.queryOperationAuthority(Array.from(this.operationLabelMap.values())).pipe(map((operationAuth) => {
                this.operationLabelMap.forEach((opId, label) => {
                    this.authOfLabel.set(label, operationAuth.has(opId) ? operationAuth.get(opId) : false);
                });
            }));
        }
        else {
            return empty();
        }
    }
    /**
     * 返回操作权限，即用户是否拥有Label所对应的权限
     * @param label 标签，可以是button id等
     */
    hasOperation(label) {
        return this.authOfLabel.has(label) && this.authOfLabel.get(label);
    }
}

/*
 * @Author: aalizzwell
 * @Date: 2019-05-30 10:35:09
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-06-15 19:22:13
 */
/**
 * 默认异常处理器
 * @scope 没有提供对应Provider
 */
class ExceptionHandler {
    constructor(formErrorService, languageService, applicationContext) {
        this.formErrorService = formErrorService;
        this.languageService = languageService;
        this.applicationContext = applicationContext;
        this.appContext = null;
        if (this.languageService == null) {
            this.languageService = LanguageService.getInstance();
        }
    }
    setContext(applicationContext) {
        this.appContext = applicationContext;
    }
    handle(error) {
        if (!!this.formErrorService) {
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }
    }
}
ExceptionHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExceptionHandler.ctorParameters = () => [
    { type: FormErrorService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: AppContext }
];

/**
 * 遗留的老Providers
 */
const FARRIS_COMMAND_SERVICE_PROVIDERS = [
    // 表单模块注入（18个）
    FormLoadingService,
    FormMessageService,
    FormNotifyService,
    FormErrorService,
    CheckService,
    DataCheckService,
    EventService,
    FilterService,
    KeybindingService,
    LanguageService,
    ParamService,
    MenuStateService,
    QuerystringService,
    RuntimeFrameworkService,
    NavigationEventService,
    NavigationService,
    RouterService,
    ApplicationParamService,
    // FrameComponent（20个）
    ValidationService,
    FocusInvalidService,
    ChangeItemService,
    UIStateService,
    StateMachineService,
    BindingDataService,
    CommandService,
    // entity-services
    EntityTraversingService,
    EntityManipulationService,
    EntityAggregationService,
    EntityListService,
    EntityService,
    ListDataService,
    TreeDataService,
    SubTreeDataService,
    CardDataService,
    SubListDataService,
    BeActionService,
    ApproveService,
    PrintService,
    AttachmentDataService,
    AttachmentService,
    NavigationMiddlewareService,
    GridMiddlewareService,
    SidebarService,
    FarrisFormService,
    DialogService,
];

class UserSettingsService {
    constructor(injector, frmI18nSettingService) {
        this.injector = injector;
        this.frmI18nSettingService = frmI18nSettingService;
    }
    /**
     * 用户时区字符串
     */
    get timeZone() {
        return this.timezone && this.timezone.id || null;
    }
    /**
     * 时区偏移
     */
    get timeZoneOffset() {
        const offset = this.timezone && this.timezone.baseOffset;
        if (offset !== null && offset !== undefined) {
            return offset;
        }
        else {
            return null;
        }
    }
    /**
     * 默认语言
     */
    get defaultLanguage() {
        return this.i18nSetting && this.i18nSetting.defaultLanguage || null;
    }
    /**
     * 日期格式化字符串
     * like: yyyy-MM-dd
     */
    get dateFormat() {
        return this.i18nSetting && this.i18nSetting.userDateFormat || null;
    }
    /**
     * 时间格式
     * like: HH:MM:ss
     */
    get timeFormat() {
        return this.i18nSetting && this.i18nSetting.userTimeFormat || null;
    }
    get dateTimeFormat() {
        const dateFormat = this.i18nSetting && this.i18nSetting.userDateFormat || 'yyyy-MM-dd';
        const timeFormat = this.i18nSetting && this.i18nSetting.userTimeFormat || 'HH:mm:ss';
        return `${dateFormat} ${timeFormat}`;
    }
    /**
     * 地址格式
     */
    get addressFormat() {
        return null;
    }
    /**
     * 数字格式
     */
    get numberFormat() {
        if (this.i18nSetting && this.i18nSetting.userNumberFormat) {
            const userNumberFormat = this.i18nSetting.userNumberFormat;
            const numberFormat = {
                negativeSign: userNumberFormat.negativeSign || '-',
                numberDecimalDigits: userNumberFormat.numberDecimalDigits || 2,
                numberDecimalSeparator: userNumberFormat.numberDecimalSeparator || '.',
                numberGroupSeparator: userNumberFormat.numberGroupSeparator || ','
            };
            return numberFormat;
        }
        return null;
    }
    /**
     * 区域代码
     */
    get regionCode() {
        return this.i18nSetting && this.i18nSetting.userRegionCode || null;
    }
    /**
     * 用户配置
     */
    get userSettings() {
        const userSettings = this.frmI18nSettingService && this.frmI18nSettingService.getSetting();
        return userSettings;
    }
    get timezone() {
        return this.i18nSetting && this.i18nSetting.timezone;
    }
    get i18nSetting() {
        return this.userSettings && this.userSettings.i18nSetting;
    }
}
UserSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UserSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: FrmI18nSettingService, decorators: [{ type: Optional }] }
];

class WorkFlowMessageService {
    constructor() {
        this.messageHandler = (callback) => {
            return (event) => {
                var message = event.data;
                if (message) {
                    message.sender = event.source;
                }
                if (typeof callback === 'function') {
                    callback(message);
                }
            };
        };
    }
    /**
     * 监听工作流消息
     * @param callback 回调
     */
    listen(callback) {
        this.handler = this.messageHandler(callback);
        window.addEventListener('message', this.handler);
    }
    destroy() {
        if (this.handler) {
            window.removeEventListener('message', this.handler);
        }
    }
    /**
     * 给工作流表单发送消息
     * @param message
     */
    send(message) {
        if (!message) {
            return;
        }
        let win = window;
        if (message.target) {
            win = message.target || window;
            delete message.target;
        }
        if (win) {
            win.postMessage(message, '*');
        }
    }
}
WorkFlowMessageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WorkFlowMessageService.ctorParameters = () => [];

/**
 * 工作流消息
 * @warning 禁止使用表单上下文，所有上下文必须从外部传入
 */
class WorkFlowMessage {
    constructor(injector, workFlowMessageService) {
        this.injector = injector;
        this.workFlowMessageService = workFlowMessageService;
        this.listeners = new Map();
    }
    setup() {
        if (!this.workFlowMessageService) {
            return;
        }
        this.workFlowMessageService.listen((message) => {
            if (!this.listeners || this.listeners.size < 1) {
                return;
            }
            this.listeners.forEach((callback, key) => {
                if (typeof callback === 'function') {
                    callback(message);
                }
            });
        });
    }
    addEventListener(callback) {
        const id = `${new Date().valueOf().toString(16)}-${Math.ceil(Math.random() * 100)}`;
        this.listeners.set(id, callback);
        return id;
    }
    removeEventListener(eventId) {
        if (!this.listeners || this.listeners.size < 1) {
            return;
        }
        this.listeners.delete(eventId);
        eventId = null;
    }
}
WorkFlowMessage.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WorkFlowMessage.ctorParameters = () => [
    { type: Injector },
    { type: WorkFlowMessageService }
];

class WorkFlowMessageHandler {
    constructor(injector, frameContext, workFlowMessageService, workFlowMessage) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.workFlowMessageService = workFlowMessageService;
        this.workFlowMessage = workFlowMessage;
    }
    onComponentInit(frameContext) {
        const eventId = this.workFlowMessage.addEventListener(this.handle.bind(this));
        const frameContextDestroySignal = this.frameContext.destorySignal;
        if (frameContextDestroySignal) {
            frameContextDestroySignal.subscribe(() => {
                this.workFlowMessage.removeEventListener(eventId);
            });
        }
        const appContextDestroySignal = this.frameContext.appContext.destorySignal;
        if (appContextDestroySignal) {
            appContextDestroySignal.subscribe(() => {
                this.workFlowMessage.workFlowMessageService.destroy();
            });
        }
    }
    handle(message) {
        const source = message.sender;
        const data = message.data;
        const commandName = data && data.command || null;
        let resultTask = null;
        if (!commandName) {
            return;
        }
        if (commandName == 'wf-required-verification') {
            // 工作流的必填校验
            // 如此获取的是当前组件的校验服务，应该按namespace来区分，不同的namespace需要分别执行校验
            const formFrameContexts = this.getFormFrameContexts();
            resultTask = from(formFrameContexts).pipe(concatMap((frameContext) => {
                var validation = frameContext.injector.get(ValidationService, null);
                if (validation) {
                    return validation.validateAll();
                }
                return of(true);
            }));
        }
        else {
            var command = this.frameContext.viewModel[commandName];
            if (command) {
                resultTask = command(data.arguments);
            }
        }
        if (resultTask) {
            const message = this.buildMessage(true, source, this.isChanged);
            resultTask.pipe(throwIfEmpty()).subscribe((result) => {
                // 向来源方回传消息
                this.workFlowMessageService.send(message);
            }, () => {
                message.data.result = false;
                this.workFlowMessageService.send(message);
            });
        }
    }
    buildMessage(result, target, dataChanged, type = 'message') {
        const message = {
            data: {
                result,
                dataChanged
            },
            type: type,
            target: target,
        };
        return message;
    }
    getFormFrameContexts() {
        const appContextManager = this.injector.get(AppContextManager, null);
        const formFrameContexts = [];
        if (appContextManager) {
            const appContexts = appContextManager.getAppContexts();
            if (appContexts && appContexts.length > 0) {
                appContexts.forEach((appContext) => {
                    const frameContexts = appContext.frameContextManager.getFrameContexts();
                    frameContexts.reduce((contexts, frameContext) => {
                        const namespace = frameContext.namespace;
                        const index = contexts.findIndex((frame) => frame.namespace === namespace);
                        if (index === -1) {
                            const root = frameContext.getVirtualRootFrameContext();
                            contexts.push(root);
                        }
                        return contexts;
                    }, formFrameContexts);
                });
            }
        }
        return formFrameContexts;
    }
    /**
     * 是否有未保存的变更
     */
    get isChanged() {
        const befRepository = this.frameContext.repository;
        return BefRepositoryUtil.isExistUnsaveData(befRepository);
    }
}
WorkFlowMessageHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WorkFlowMessageHandler.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: WorkFlowMessageService },
    { type: WorkFlowMessage }
];

/**
 * 模块级注入(共20个)
 */
const FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS = [
    FormLoadingService,
    FormMessageService,
    FormNotifyService,
    FormErrorService,
    FormWizardService,
    CheckService,
    DataCheckService,
    EventService,
    ComponentManagerService,
    FilterService,
    KeybindingService,
    LanguageService,
    ParamService,
    MenuStateService,
    QuerystringService,
    RuntimeFrameworkService,
    NavigationEventService,
    NavigationService,
    RouterService,
    ApplicationParamService,
    FilterConditionService,
    { provide: UserSettingsToken, useClass: UserSettingsService },
    WorkFlowMessageService,
    WorkFlowMessage
];

/**
 * 比较符
 */
var CompareType;
(function (CompareType) {
    CompareType[CompareType["Equal"] = 0] = "Equal";
    CompareType[CompareType["NotEqual"] = 1] = "NotEqual";
    CompareType[CompareType["Greater"] = 2] = "Greater";
    CompareType[CompareType["GreaterOrEqual"] = 3] = "GreaterOrEqual";
    CompareType[CompareType["Less"] = 4] = "Less";
    CompareType[CompareType["LessOrEqual"] = 5] = "LessOrEqual";
    CompareType[CompareType["Like"] = 6] = "Like";
    CompareType[CompareType["LikeStartWith"] = 7] = "LikeStartWith";
    CompareType[CompareType["LikeEndWith"] = 8] = "LikeEndWith";
    CompareType[CompareType["NotLike"] = 9] = "NotLike";
    CompareType[CompareType["NotLikeStartWith"] = 10] = "NotLikeStartWith";
    CompareType[CompareType["NotLikeEndWith"] = 11] = "NotLikeEndWith";
    CompareType[CompareType["Is"] = 12] = "Is";
    CompareType[CompareType["IsNot"] = 13] = "IsNot";
    CompareType[CompareType["In"] = 14] = "In";
    CompareType[CompareType["NotIn"] = 15] = "NotIn";
})(CompareType || (CompareType = {}));

var ValueType;
(function (ValueType) {
    /**
     *值类型
     */
    ValueType[ValueType["Value"] = 0] = "Value";
    /**
     * 表达式
     */
    ValueType[ValueType["Express"] = 1] = "Express";
})(ValueType || (ValueType = {}));

var RelationType;
(function (RelationType) {
    RelationType[RelationType["Empty"] = 0] = "Empty";
    /**
     * 与
     */
    // And=0,
    RelationType[RelationType["And"] = 1] = "And";
    /**
     * 或
     */
    // Or=1
    RelationType[RelationType["Or"] = 2] = "Or";
})(RelationType || (RelationType = {}));

class TextHandler {
    convert(qc) {
        const tv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': tv.value,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    }
}

class DateRangeHandler {
    convert(qc) {
        let control = qc.control;
        const arr = [];
        const drv = qc.value;
        drv.startTime && arr.push({
            'FilterField': control.startFieldCode ? control.startFieldCode : qc.fieldCode,
            'Compare': CompareType.GreaterOrEqual,
            'Value': drv.startTime,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': control.endFieldCode ? control.endFieldCode : qc.fieldCode,
            'Compare': CompareType.LessOrEqual,
            'Value': drv.endTime,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

class DropDownHandler {
    //qc.comparetype只有等于、不等于
    convert(qc) {
        const ddv = qc.value;
        const arr = [];
        ddv.value.forEach(dv => {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': dv.value,
                'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                'Expresstype': ValueType.Value
            });
        });
        arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
        arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
        arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
        return arr;
    }
}

class NumberRangeHandler {
    convert(qc) {
        const arr = [];
        const nrv = qc.value;
        (nrv.startValue != null) && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterOrEqual,
            'Value': nrv.startValue,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        (nrv.endValue != null) && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessOrEqual,
            'Value': nrv.endValue,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

class SmartHelpHandler {
    convert(qc) {
        const shv = qc.value;
        if (shv.value.length == 0)
            return [];
        const arr = [];
        if (shv.isInputText || shv.valueField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': shv.textValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            shv.getOriginalValue().split(',').forEach(id => {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': id,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

class SingleYearHandler {
    convert(qc) {
        const yv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': yv.yearValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    }
}

class CheckBoxHandler {
    convert(qc) {
        //多选框的qc.compareType 只有等于
        const arr = [];
        const tv = qc.value;
        if (tv.value.length == 1)
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': tv.value[0],
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        tv.value.forEach(tvv => {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': tvv,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        });
        arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
        arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
        arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
        return arr;
    }
}

class SingleMonthHandler {
    convert(qc) {
        const mv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': mv.monthValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    }
}

class MonthRangeHandler {
    convert(qc) {
        const arr = [];
        const mrv = qc.value;
        mrv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterOrEqual,
            'Value': mrv.startTime,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        mrv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessOrEqual,
            'Value': mrv.endTime,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

class SingleDateTimeHandler {
    convert(qc) {
        const dtv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': dtv.datetimeValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    }
}

class SingleNumberHandler {
    convert(qc) {
        const dtv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': dtv.numValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    }
}

function getDate(dateValue, dtvFormat) {
    let today = new Date();
    // today.toLocaleString()
    let result = [];
    //首先判断哪些是单个日期，使用equal存入一个日期即可
    if (dateValue.isFirstDay || dateValue.isLastDay) {
        let switchValue = dateValue.dateType + '-' + (dateValue.isFirstDay ? 'first' : 'last');
        switch (switchValue) {
            case 'week-first':
                if (getDay(today) === 0) {
                    today = addDays(today, -1);
                }
                result.push(addDays(startOfWeek(today), 1));
                break;
            case 'week-last':
                if (getDay(today) === 0) {
                    today = addDays(today, -1);
                }
                result.push(addDays(endOfWeek(today), 1));
                break;
            case 'month-first':
                result.push(startOfMonth(today));
                break;
            case 'month-last':
                result.push(endOfMonth(today));
                break;
            case 'year-first':
                result.push(startOfYear(today));
                break;
            case 'year-last':
                result.push(endOfYear(today));
                break;
            default:
                result.push(today);
        }
    }
    else if (dateValue.dateType === 'day' && dateValue.period === 'present') {
        //今天
        result.push(today);
    }
    else if (dateValue.dateType === 'day' && dateValue.count === 1) {
        //昨天、明天
        let _date = addDays(today, dateValue.period === 'future' ? 1 : -1);
        result.push(_date);
    }
    else if (dateValue.period === 'present') {
        //本周、本月、本年
        switch (dateValue.dateType) {
            case 'week':
                result.push(startOfWeek(today), endOfWeek(today));
                break;
            case 'month':
                result.push(startOfMonth(today), endOfMonth(today));
                break;
            case 'year':
                result.push(startOfYear(today), endOfYear(today));
                break;
            default:
                result.push(today);
        }
    }
    else {
        let switchValue = dateValue.dateType + '-' + dateValue.period;
        switch (switchValue) {
            case 'day-previous':
                result.push(addDays(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'day-future':
                result.push(addDays(today, 1), addDays(today, dateValue.count));
                break;
            case 'week-previous':
                result.push(addWeeks(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'week-future':
                result.push(addDays(today, 1), addWeeks(today, dateValue.count));
                break;
            case 'month-previous':
                result.push(addMonths(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'month-future':
                result.push(addDays(today, 1), addMonths(today, dateValue.count));
                break;
            case 'year-previous':
                result.push(addYears(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'year-future':
                result.push(addDays(today, 1), addYears(today, dateValue.count));
                break;
            default:
                result.push(today);
        }
    }
    result = result.map(item => format(item, dtvFormat.returnFormat || 'yyyy-MM-dd'));
    return result;
}
class SingleDateHandler {
    convert(qc) {
        const arr = [];
        const dtv = qc.value;
        if (typeof (dtv.dateValue) !== 'string') {
            let _dateValue = getDate(dtv.dateValue, qc.control);
            _dateValue.length === 1 && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': qc.compareType ? CompareType[qc.compareType] : CompareType.Equal,
                'Value': _dateValue[0],
                'Relation': qc.relation ? RelationType[qc.relation] : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
            _dateValue.length === 2 && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.GreaterOrEqual,
                'Value': _dateValue[0],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket ? (qc.Lbracket + '(') : '('
            }, {
                'FilterField': qc.fieldCode,
                'Compare': CompareType.LessOrEqual,
                'Value': _dateValue[1],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value,
                'Rbracket': qc.Rbracket ? (qc.Rbracket + ')') : ')'
            });
        }
        else {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': dtv.dateValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
        }
        return arr;
    }
}

class ComboLookUpHandler {
    convert(qc) {
        //帮助的qc.comparetype只有等于、不等于
        const cluv = qc.value;
        if (cluv.value.length == 0 || !cluv.valueField) {
            return [];
        }
        else {
            const arr = [];
            cluv.getOriginalValue().split(',').forEach(id => {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': id,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

class RadioHandler {
    convert(qc) {
        const rv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': rv.value,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    }
}

class InputGroupHandler {
    //qc.comparetype只有等于、相似
    convert(qc) {
        const igv = qc.value;
        const arr = [];
        if (igv.isInputText || igv.textField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': igv.textValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach(itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': itemValue,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

class QueryConditionHandlerFactory {
    constructor() {
        this.queryConditionHandlerMapping = new Map();
        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());
        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateTimeRange, new DateRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DropDownList, new DropDownHandler());
        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.SmartHelp, new SmartHelpHandler());
        this.queryConditionHandlerMapping.set(ControlType.SingleYear, new SingleYearHandler());
        this.queryConditionHandlerMapping.set(ControlType.BoolCheck, new CheckBoxHandler());
        this.queryConditionHandlerMapping.set(ControlType.SingleMonth, new SingleMonthHandler());
        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.SingleDateTime, new SingleDateTimeHandler());
        this.queryConditionHandlerMapping.set(ControlType.SingleNumber, new SingleNumberHandler());
        this.queryConditionHandlerMapping.set(ControlType.SingleDate, new SingleDateHandler());
        this.queryConditionHandlerMapping.set(ControlType.ComboLookUp, new ComboLookUpHandler());
        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());
    }
    static getInstance() {
        if (!QueryConditionHandlerFactory._instance) {
            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
        }
        return QueryConditionHandlerFactory._instance;
    }
    getHandler(controlType) {
        return this.queryConditionHandlerMapping.get(controlType);
    }
}
QueryConditionHandlerFactory._instance = null;

class QuerySolutionService {
    constructor(frameContext, frameworkSessionService) {
        this.frameContext = frameContext;
        this.frameworkSessionService = frameworkSessionService;
    }
    getUserSessionId() {
        return this.frameworkSessionService.getUserSessionId();
    }
    setFilterConditions(params) {
        let queryConditionHandler;
        const filterConditionList = [];
        params.forEach(qc => {
            if (!qc.value.isEmpty()) {
                queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                queryConditionHandler && filterConditionList.push(...queryConditionHandler.convert(qc));
            }
        });
        //设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // const originalConditions = this.getOriginalQueryConditions(filterConditionList);
        this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);
    }
    setCurrentQueryConditions(conditions) {
        this.frameContext.uiState['currentQueryConditions'] = conditions;
    }
}
QuerySolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QuerySolutionService.ctorParameters = () => [
    { type: FrameContext },
    { type: FrameworkSessionService }
];

/**
 * 结束表单编辑状态服务
 */
class EndEditService {
    constructor(frameContext) {
        this.frameContext = frameContext;
    }
    /**
     * 结束编辑
     */
    endEdit() {
        const appContext = this.frameContext && this.frameContext.getFormAppContext();
        return of(null).pipe(tap(() => {
            if (appContext) {
                appContext.messagePipe.next({ type: 'endEdit' });
            }
        }), 
        // todo: 不应该使用delay，应该串流
        delay(120));
    }
}
EndEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EndEditService.ctorParameters = () => [
    { type: FrameContext }
];

class RemoteSummaryService {
    constructor(viewModel) {
        this.viewModel = viewModel;
    }
    /**
     * 服务器端合计
     * @param methodName 服务器端合计自定义动作名称
     * @param filters 过滤条件
     */
    summary(methodName, filters) {
        const repository = this.viewModel.frameContext.repository || null;
        if (repository) {
            const proxy = repository.proxy;
            if (proxy && typeof proxy[methodName] === 'function') {
                return proxy[methodName](filters);
            }
        }
        return of(null);
    }
}
RemoteSummaryService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RemoteSummaryService.ctorParameters = () => [
    { type: ViewModel }
];

// tslint:disable: max-line-length
/**
 * 批量编辑服务
 */
class BatchEditService {
    constructor(injector, componentManagerService, viewModel, repository, batchEditDialogService, dateService, languageService, formNotifyService, fileUploadService) {
        this.injector = injector;
        this.componentManagerService = componentManagerService;
        this.viewModel = viewModel;
        this.repository = repository;
        this.batchEditDialogService = batchEditDialogService;
        this.dateService = dateService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.fileUploadService = fileUploadService;
        this.formLoadingService = this.injector.get(FormLoadingService, null);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (!this.formNotifyService) {
            this.formNotifyService = this.injector.get(FormNotifyService, null);
        }
        this.onHelpClose = new Subject();
        this.onHelpClose.subscribe(result => {
            const { frameId = '', mapFields = '', data = [] } = result || {};
            this.onHelpCloseHandler(frameId, mapFields, data);
        });
    }
    get formErrorService() {
        return this.injector && this.injector.get(FormErrorService, null);
    }
    /**
     * 打开批量编辑对话框
     * @param frameId frameId
     */
    openBatchEditDialog(frameId, enableDictPicking = false) {
        if (!frameId) {
            throw new Error('frameId is required.');
        }
        if (typeof enableDictPicking === 'string') {
            enableDictPicking = (enableDictPicking === 'true' ? true : false);
        }
        if (this.batchEditDialogService) {
            let columns = [];
            if (this.viewModel) {
                const gridFrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);
                const gridViewModel = gridFrameContext.viewModel;
                if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {
                    // tslint:disable-next-line: no-string-literal
                    const gridColumnsAttrName = gridViewModel['dataGridColumnsName'];
                    columns = gridViewModel[gridColumnsAttrName];
                }
                else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {
                    columns = gridViewModel['dataGridColumns'];
                }
                const ids = gridViewModel.uiState['ids'] || [];
                if (!ids || ids.length < 1) {
                    this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });
                    return EMPTY;
                }
                const dialogRef = this.batchEditDialogService.batchEdit(columns, {
                    rows: ids.length,
                    enableDictPicking,
                    onConfirm: (inputs) => {
                        if (Array.isArray(ids) && ids.length > 0) {
                            // console.log('openBatchEditDialog', inputs);
                            const appContext = this.viewModel.frameContext.appContext;
                            appContext.changeDetectionController.detach();
                            inputs.forEach(input => {
                                this.updateBindingData(input, ids);
                            });
                            appContext.changeDetectionController.reattach();
                        }
                        dialogRef.close();
                    }
                });
            }
        }
    }
    /**
     * 打开隐藏帮助
     * @param helpId 帮助id
     */
    openHiddenHelp(helpId) {
        if (!helpId) {
            throw new Error('Argument error,helpId can`t be empty');
        }
        const componentManagerService = this.componentManagerService.getControl(helpId);
        if (componentManagerService) {
            componentManagerService.showDialog();
        }
        else {
            throw new Error(`the component which id is ${helpId} can't be found!`);
        }
    }
    /**
     * 清空帮助勾选（只能挂载到帮助前事件）
     */
    clearHelpSelections() {
        const self = this;
        const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (helpElement) {
            helpElement.displayValue = '';
        }
    }
    /**
     * 勾选当前行
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param primaryKeyValue 帮助主键字段
     */
    checkCurrentRow(frameId, mapFields, primaryKeyValue) {
        const self = this;
        const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (!primaryKeyValue) {
            primaryKeyValue = 'id';
        }
        const mappings = JSON.parse(mapFields);
        if (helpElement) {
            frameId = frameId || this.viewModel.frameContext.frameId;
            if (frameId) {
                const frameContext = this.getFrameContextById(frameId);
                if (frameContext) {
                    const bindingPath = frameContext.viewModel.bindingPath;
                    if (bindingPath) {
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        const bindingList = frameContext.bindingData.getValue(bindingPaths);
                        const currentRow = bindingList.currentItem;
                        const path = mappings[primaryKeyValue];
                        if (path) {
                            const value = this.getValueByPath(currentRow, path);
                            helpElement.displayValue = value;
                        }
                    }
                }
            }
        }
    }
    /**
     * 以帮助勾选数据作为依据，批量新增主表数据
     * @param frameId 主表所在frame的id
     * @param mapFields 帮助字段与主表字段映射
     * @description 以帮助勾选数据作为依据，批量新增主表数据
     */
    batchAppend(frameId, mapFields) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            const defaultValues = [];
            result.forEach((item) => {
                const defaultValue = {};
                Object.keys(mappings).forEach((prop) => {
                    const value = this.getValueByPath(item, prop);
                    const fields = mappings[prop];
                    const groups = fields.split(',').filter(p => p);
                    groups.forEach(group => {
                        const paths = group.split('.').filter(p => p);
                        this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            this.formLoadingService.show();
            return this.repository.batchAppend(defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
        }
        return of(true);
    }
    /**
     * 以帮助勾选数据作为依据，批量新增从表/从从表
     * @param frameId 从表/从从表所在frame的id
     * @param mapFields 帮助字段与从表/从从表字段映射
     * @description 以帮助勾选数据作为依据，批量新增从表/从从表
     */
    batchAppendByPathBasedOnHelpSelections(frameId, mapFields) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            const defaultValues = [];
            result.forEach((item) => {
                const defaultValue = {};
                Object.keys(mappings).forEach((prop) => {
                    const value = this.getValueByPath(item, prop);
                    const fields = mappings[prop];
                    const groups = fields.split(',').filter(p => p);
                    groups.forEach(group => {
                        const paths = group.split('.').filter(p => p);
                        this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            this.formLoadingService.show();
            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
            return this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
        }
        return of(true);
    }
    /**
     * 批量新增带附件的从表或从从表数据
     * @param frameId
     * @param mapFields
     * @param attachmentInfoFieldPath 附件udt字段路径，可支持多个，以逗号分隔
     * @param rootId 附件存储根目录
     * @param path 附件存储目录
     * @description 批量新增带附件的从表或从从表数据与批量新增从表从从表数据一致，在批量新增数据的基础上增加了附件复制
     * @todo 目前附件复制在前端调用，会发起多个请求，且存在安全问题，后续应在vo集成
     */
    batchAppendByPathWithAttachment(frameId, mapFields, attachmentInfoFieldPath, rootId, path) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (!attachmentInfoFieldPath) {
            throw new Error('附件udt字段路径不能为空');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            // 修正bindingPath
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            // 处理附件udt字段
            const attachmentFields = attachmentInfoFieldPath.split(',').filter(p => p).map(path => path.split('/').pop());
            this.formLoadingService.show();
            // 先复制附件
            const copyFiles$ = from(result).pipe(concatMap((item => {
                return this.copyRowFiles(item, attachmentFields, rootId, path).pipe(catchError((error) => {
                    this.formLoadingService.hide();
                    let cafError = error.error;
                    if (typeof cafError === 'string') {
                        cafError = JSON.parse(cafError);
                    }
                    if (this.formErrorService) {
                        this.formErrorService.exception(cafError.message || this.languageService.copyFailed, error);
                    }
                    return throwError(error);
                }));
            })));
            return copyFiles$.pipe(takeLast(1)).pipe(switchMap(() => {
                // 拼装默认值
                const defaultValues = this.buildDefaultValues(result, mappings);
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
            }));
        }
        return of(true);
    }
    /**
     * 构造默认值数组
     * @param selectedValues
     * @param mapFields
     * @returns
     */
    buildDefaultValues(selectedValues, mapFields) {
        const defaultValues = [];
        selectedValues.forEach((item) => {
            const defaultValue = {};
            Object.keys(mapFields).forEach((prop) => {
                // 帮助数据
                const value = this.getValueByPath(item, prop);
                // 目标字段
                const fields = mapFields[prop];
                const groups = fields.split(',').filter(p => p);
                groups.forEach(group => {
                    const paths = group.split('.').filter(p => p);
                    this.setValueByPath(defaultValue, paths.join('.'), value);
                });
            });
            defaultValues.push(defaultValue);
        });
        return defaultValues;
    }
    /**
     * 复制行中所有附件
     * @param row
     * @param attachmentFields
     * @param rootId
     * @param path
     * @returns
     */
    copyRowFiles(row, attachmentFields, rootId, path) {
        return from(attachmentFields).pipe(concatMap((field) => {
            const attachmentId = this.getValueByPath(row, `${field}.attachmentId`);
            if (attachmentId) {
                // 发送复制附件的请求，获取附件id
                return this.fileUploadService.copyFile(attachmentId, rootId, path).pipe(tap((attachmentId) => {
                    // 复制成功
                    this.setValueByPath(row, [field, 'attachmentId'].join('.'), attachmentId);
                }));
            }
            else {
                return of(null);
            }
        }));
    }
    /**
     * 行内帮助多选批量新增或替换子表数据
     * @param frameId frameId, optional,为空时使用命令执行时所在的上下文
     * @param mapFields 字段映射
     * @param primaryKey 帮助主键字段，默认为id
     * @returns
     */
    batchAppendBasedOnRowHelpSelections(frameId, mapFields) {
        const self = this;
        let result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            return of(true);
        }
        const mappings = JSON.parse(mapFields);
        if (!mappings || !mappings.hasOwnProperty('id')) {
            return of(true);
        }
        frameId = frameId || this.viewModel.frameContext.frameId;
        if (!frameId) {
            return of(true);
        }
        const frameContext = this.getFrameContextById(frameId);
        if (!frameContext) {
            return of(true);
        }
        setTimeout(() => {
            this.endEdit(frameContext).subscribe(() => {
                setTimeout(() => {
                    if (result && Array.isArray(result) && result.length > 0) {
                        const bindingPath = frameContext.viewModel.bindingPath || '/';
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        const defaultValues = [];
                        // 获取当前行
                        const bindingList = frameContext.bindingData.getValue(bindingPaths);
                        const currentRow = bindingList.currentItem;
                        const currentRowId = bindingList.currentId;
                        const currentEntity = this.getEntityByPath(frameContext, bindingPaths, currentRowId);
                        const headItem = result[0];
                        // 如果仅勾选一条，则应替换当前行的映射
                        if (result.length === 1) {
                            // this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                            const data = headItem;
                            Object.keys(mappings).forEach((prop) => {
                                const value = this.getValueByPath(data, prop);
                                const fields = mappings[prop];
                                const groups = fields.split(',').filter(p => p);
                                groups.forEach(group => {
                                    const paths = group.split('.').filter(p => p);
                                    frameContext.bindingData.setValue(bindingPaths.concat(paths), value, true, true);
                                });
                            });
                            return of(true);
                        }
                        else {
                            const idMapField = mappings['id'];
                            const sourceItemId = this.getValueByPath(currentEntity, idMapField);
                            // 如果当前行没有映射或勾选结果中找不到当前行的映射
                            if (!sourceItemId || result.findIndex(item => item[bindingList.primaryKey] === sourceItemId) === -1) {
                                // 重新映射当前行
                                this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                                result = result.slice(1);
                            }
                            else if (sourceItemId) {
                                const index = result.findIndex(item => item[bindingList.primaryKey] === sourceItemId);
                                // 重新映射当前行
                                this.mappingRow(result[index], mappings, currentEntity, bindingPath);
                                result.splice(index, 1);
                            }
                            // 当前行处理完成
                            // 处理未映射的行
                            const emptyRows = bindingList.toArray().filter(bindingObject => {
                                const id = this.getValueByPath(bindingObject, mappings[bindingList.primaryKey]);
                                return !id;
                            });
                            if (emptyRows && emptyRows.length > 0) {
                                let rows = result;
                                if (result.length > emptyRows.length) {
                                    rows = result.slice(0, emptyRows.length);
                                    result = result.slice(emptyRows.length);
                                }
                                else {
                                    result = [];
                                }
                                rows.forEach((item, index) => {
                                    const targetItem = emptyRows[index];
                                    const entity = this.getEntityByPath(frameContext, bindingPaths, targetItem.primaryKeyValue);
                                    this.mappingRow(item, mappings, entity, bindingPath);
                                });
                            }
                            // 处理剩余勾选
                            result.forEach((item) => {
                                const defaultValue = {};
                                Object.keys(mappings).forEach((prop) => {
                                    const value = this.getValueByPath(item, prop);
                                    const fields = mappings[prop];
                                    const groups = fields.split(',').filter(p => p);
                                    groups.forEach(group => {
                                        const paths = group.split('.').filter(p => p);
                                        this.setValueByPath(defaultValue, paths.join('.'), value);
                                    });
                                });
                                defaultValues.push(defaultValue);
                            });
                            if (defaultValues.length > 0) {
                                this.formLoadingService.show();
                                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                                this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide())).subscribe();
                            }
                        }
                    }
                }, 350);
            });
        }, 50);
        return of(true);
    }
    /**
     * 复制主表数据
     * @param id 要复制的数据id
     * @param fields 要复制的字段
     * @description 仅支持复制主表数据
     * @deprecated 该方法已被废弃，请使用clone方法替代。
     */
    copy(id) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const url = `${baseUri}/service/copymainobjvoaction`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const body = {
            requestInfo,
            dataID: id
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(() => {
            this.formLoadingService.hide();
        }), map((responseInfo) => {
            const returnValue = responseInfo.returnValue;
            const entity = this.repository.buildEntity(returnValue);
            this.repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 复制数据（支持主表、从表、从从表）
     * @param id 要复制的行
     * @param path 请求路径
     * @returns
     */
    clone(id, path) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!path) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        path = path.toLowerCase();
        const bindingPath = this.viewModel.bindingPath;
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const url = `${baseUri}${path}`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const ids = this.buildIds(bindingPath);
        ids.push(id);
        const body = {
            requestInfo,
            dataID: ids.join(',')
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(() => {
            this.formLoadingService.hide();
        }), map((responseInfo) => {
            const returnValue = responseInfo.returnValue;
            let entity = null;
            if (bindingPath.split('/').filter(p => p).length === 0) {
                entity = this.repository.buildEntity(returnValue);
                this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);
            }
            return entity;
        }));
    }
    /**
     * 带附件的复制
     * @param id
     * @param url
     * @param attachmentInfoFieldPath
     * @param rootId
     * @param path
     * @returns
     */
    cloneWithAttachment(id, url, attachmentInfoFieldPath, rootId, path) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!url) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!attachmentInfoFieldPath) {
            throw new Error('附件udt字段路径不能为空');
        }
        if (!url.startsWith('/')) {
            url = '/' + url;
        }
        url = url.toLowerCase();
        const bindingPath = this.viewModel.bindingPath;
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const uri = `${baseUri}${url}`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const ids = this.buildIds(bindingPath);
        ids.push(id);
        const body = {
            requestInfo,
            dataID: ids.join(',')
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        const attachmentFields = attachmentInfoFieldPath.split(',').filter((p) => p).map((path) => path.split('/').pop());
        return befRepository.proxy.request(uri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            const entityData = responseInfo.returnValue;
            let entity = null;
            if (bindingPath.split('/').filter((p) => p).length === 0) {
                entity = this.repository.buildEntity(entityData);
                this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, entityData, entityData, true);
            }
            // 复制附件
            return this.copyRowFiles(entity, attachmentFields, rootId, path).pipe(switchMap(() => {
                this.formLoadingService.hide();
                return this.repository.updateAllChanges().pipe(map(() => {
                    return entity;
                }));
            }), catchError((error) => {
                this.formLoadingService.hide();
                // 清空实体附件属性
                this.clearAttachmentInfo(entity, attachmentFields);
                let cafError = error.error;
                if (typeof cafError === 'string') {
                    cafError = JSON.parse(cafError);
                }
                if (this.formErrorService) {
                    this.formErrorService.exception(cafError.message || this.languageService.copyFailed, error);
                }
                return EMPTY;
            }));
        }));
    }
    clearAttachmentInfo(entity, attachmentFields) {
        try {
            attachmentFields.forEach((attachmentField) => {
                this.setValueByPath(entity, [attachmentField, 'attachmentId'].join('.'), null);
                this.setValueByPath(entity, [attachmentField, 'fileName'].join('.'), null);
                this.setValueByPath(entity, [attachmentField, 'fileCreateTime'].join('.'), null);
                this.setValueByPath(entity, [attachmentField, 'fileSize'].join('.'), null);
            });
        }
        catch (e) {
            console.log(e);
        }
    }
    //#region 旧的实现
    /**
     * 复制行
     * @param frameId frameId
     * @param ignoreFields 复制时忽略字段
     * @param repeat 重复复制次数，默认为1
     */
    copyRow(frameId, ignoreFields, repeat = 1) {
        if (typeof repeat !== 'number') {
            repeat = parseInt(repeat, 10);
        }
        if (repeat < 1) {
            throw new Error('ArgumentError: repeat must >= 1');
        }
        // 获取当前行
        const frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        const primaryValue = frameContext.bindingData.list.currentId;
        const bindingPath = frameContext.viewModel.bindingPath || '/';
        let bindingData = null;
        let currentItem = null;
        if (bindingPath === '/') {
            // 主表直接取当前行
            currentItem = frameContext.bindingData.list.currentItem;
        }
        else {
            // 取从表/从从表当前行
            const paths = bindingPath.split('/').filter(p => p);
            currentItem = frameContext.bindingData.getValue(paths).currentItem;
        }
        bindingData = currentItem.toJSON();
        if (!currentItem.primaryKeyValue) {
            if (this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            }
            return EMPTY;
        }
        const ignoreFieldsArray = ignoreFields.split(',').filter(item => item);
        const sources = new Array(repeat);
        return from(sources).pipe(concatMap(() => {
            let action$ = null;
            if (bindingPath !== '/') {
                const fullPath = this.buildPath(bindingPath, primaryValue);
                action$ = this.repository.appendByPath(fullPath);
            }
            else {
                action$ = this.repository.append();
            }
            return action$.pipe(tap((entity) => {
                // 修正实体主键
                bindingData[entity.primaryKey] = entity.primaryValue;
                // 忽略指定字段
                ignoreFieldsArray.forEach((field) => {
                    const extractedFields = field.split('.').filter(item => item);
                    if (extractedFields.length === 1) {
                        delete bindingData[field];
                    }
                    const parent = extractedFields.slice(0, -1).reduce((prev, current, index) => {
                        return prev[current];
                    }, bindingData);
                    delete parent[extractedFields[extractedFields.length - 1]];
                });
                bindingData = Object.assign({}, entity.toJSON(), bindingData);
                entity.load(bindingData, { loadChild: false });
            }), catchError(() => {
                return EMPTY;
            }));
        }));
    }
    /**
     * 增量多选帮助批量赋值帮助后事件
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param associatedField 关联字段
     */
    afterIncrementalSelectHelpClose(frameId, mapFields, associatedField) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        // tslint:disable-next-line: max-line-length
        // const mapping = '{"id":"userRef.userRef", "name":"name", "sex":"sex","age":"userRef.userRef_Age","address":"userRef.userRef_Address","birthday":"userRef.userRef_Birthday","height":"userRef.userRef_Height","isMarried":"userRef.userRef_IsMarried"}';
        if (!associatedField) {
            throw new Error('associated field can`t be empty.');
        }
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        const mappings = JSON.parse(mapFields);
        const foreignKey = associatedField;
        // 将选择人员保存到uistate中
        const rootFrameContext = this.viewModel.frameContext.root;
        // 不是bindingPath则按frameId处理
        let bindingPath = '/';
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            // 根据bindingPath获取bindingdata中现有数据
            const bindingPaths = bindingPath.split('/').filter(item => item);
            const currentData = this.viewModel.bindingData.getValue(bindingPaths);
            const currentDataArray = currentData.toArray();
            // 找到result中有，但bindingData中没有的，为待新增项
            const appends = [];
            result.reduce((prev, item) => {
                const itemId = item && item[currentData.primaryKey] || null;
                const isExist = currentDataArray.find((bindingObject) => bindingObject[foreignKey][foreignKey] === itemId);
                if (!isExist) {
                    prev.push(item);
                }
                return prev;
            }, appends);
            // 找到bindingData中有，result中没有的，为待删除项
            const removes = [];
            currentDataArray.reduce((results, item) => {
                const index = result.findIndex(selectItem => selectItem[currentData.primaryKey] === item[foreignKey][foreignKey]);
                if (index === -1) {
                    results.push(item.primaryKeyValue);
                }
                return results;
            }, removes);
            // console.log('addItems', appends, 'removeItems', removes);
            // 调用后端接口新增数据
            const addAction$ = from(appends).pipe(concatMap(item => {
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.appendByPath(path).pipe(tap((entity) => {
                    Object.keys(mappings).forEach(prop => {
                        const value = this.getValueByPath(item, prop);
                        const fields = mappings[prop];
                        const groups = fields.split(',').filter(p => p);
                        groups.forEach(group => {
                            const paths = group.split('.').filter(p => p);
                            this.setValueByPath(entity, paths.join('.'), value);
                        });
                    });
                }), catchError(() => {
                    return EMPTY;
                }));
            }));
            const removeAction$ = from(removes).pipe(concatMap(item => {
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.removeByPath(path, item).pipe(tap(() => {
                    const befRepository = this.repository;
                    befRepository.entityManager.removeEntityByPath(path, item);
                }), catchError(() => {
                    return EMPTY;
                }));
            }));
            if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {
                return of(true);
            }
            return concat(addAction$, removeAction$).pipe(catchError(() => EMPTY));
        }
        return of(true);
    }
    // todo:模拟用户操作，待后端接口支持主表批量新增后重写
    /**
     * 多选帮助批量赋值帮助前事件
     */
    beforeMultiSelectHelpOpen() {
        return this.clearHelpSelections();
    }
    /**
     * 多选帮助批量赋值帮助后事件
     * @param frameId 绑定路径
     * @param mapFields 字段映射
     * @param commandFrameId 回调命令所在frameId
     * @param commandName 回调命令
     * @deprecated 模拟用户操作，待批量赋值支持主表后废弃
     */
    afterMultiSelectHelpClose(frameId, mapFields, commandFrameId, commandName) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (result && Array.isArray(result)) {
            // 调用后端接口新增数据
            if (!result || result.length < 1) {
                return of(true);
            }
            this.onHelpClose.next({ frameId, mapFields, data: result, commandFrameId, commandName });
            return of(true);
        }
        return of(true);
    }
    /**
      * 帮助关闭后处理器
      * @param frameId frameid
      * @param mapFields mapFields
      * @param result 帮助数据结果
      */
    onHelpCloseHandler(frameId, mapFields, result) {
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        const mappings = JSON.parse(mapFields);
        // 不是bindingPath则按frameId处理
        let bindingPath = '/';
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // 将选择人员保存到uistate中
        const rootFrameContext = this.viewModel.frameContext.root;
        const befRepository = this.repository;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            const addAction$ = from(result).pipe(concatMap(item => {
                const requestInfo = befRepository.restService.buildRequestInfo();
                if (bindingPaths.length > 0) {
                    const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                    return befRepository.restService.createByPath(path, requestInfo).pipe(tap((responseInfo) => {
                        const data = responseInfo.returnValue;
                        const newEntity = befRepository.entityManager.appendEntityByPath(path, data, data);
                        Object.keys(mappings).forEach(prop => {
                            const value = this.getValueByPath(item, prop);
                            const fields = mappings[prop];
                            const groups = fields.split(',').filter(p => p);
                            groups.forEach(group => {
                                const paths = group.split('.').filter(p => p);
                                this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        return newEntity;
                    }));
                }
                else {
                    return befRepository.restService.create(null, requestInfo).pipe(tap((responseInfo) => {
                        const data = responseInfo.returnValue;
                        const newEntity = this.repository.buildEntity(data);
                        Object.keys(mappings).forEach(prop => {
                            const value = this.getValueByPath(item, prop);
                            const fields = mappings[prop];
                            const groups = fields.split(',').filter(p => p);
                            groups.forEach(group => {
                                const paths = group.split('.').filter(p => p);
                                this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        this.repository.entityCollection.addEntity(newEntity);
                        return newEntity;
                    }));
                }
            }));
            // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);
            if (this.formLoadingService) {
                this.suspendFrameContextEvent(frameId);
                this.formLoadingService.show();
                this.formLoadingService.setSuspend(true);
            }
            return addAction$.pipe(last()).pipe(switchMap(() => {
                const primaryValue = this.viewModel.bindingData.list.currentId;
                if (primaryValue) {
                    return befRepository.updateChangesById(primaryValue);
                }
                else {
                    return of(null);
                }
            })).subscribe(() => {
                if (this.formLoadingService) {
                    this.resumeFrameContextEvent(frameId);
                    this.formLoadingService.setSuspend(false);
                    this.formLoadingService.hide();
                }
            }, () => {
                if (this.formLoadingService) {
                    this.resumeFrameContextEvent(frameId);
                    this.formLoadingService.setSuspend(false);
                    this.formLoadingService.hide();
                }
            });
        }
        return of(null);
    }
    suspendFrameContextEvent(frameId) {
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = true;
        }
    }
    resumeFrameContextEvent(frameId) {
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = false;
            frameContext.appContext.messagePipe.next('bindData');
        }
    }
    //#endregion
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
    getValueByPath(target, path) {
        const paths = path.split('.');
        if (paths.length < 1) {
            return;
        }
        if (paths.length === 1) {
            return target[path];
        }
        let result = null;
        paths.forEach((prop, index) => {
            if (index === 0) {
                result = target && target[prop] || null;
            }
            else {
                result = result && result[prop] || null;
            }
        });
        return result;
    }
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    buildPath(bindingPath, id) {
        let path = '/' + id;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 获取绑定路径的当前行数组
     * @param bindingPath bindingPath
     * @returns
     */
    buildIds(bindingPath) {
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const primaryValue = this.viewModel.bindingData.list.currentId;
        const result = [];
        const paths = [];
        if (bindingPaths.length > 0) {
            result.push(primaryValue);
            // 从表或从从表要复制的行不一定是当前行，用户可以指定
            bindingPaths.pop();
            bindingPaths.forEach((path) => {
                paths.push(path);
                const bindingList = this.viewModel.bindingData.getValue(paths);
                if (bindingList) {
                    result.push(bindingList.currentId);
                }
            });
        }
        return result;
    }
    updateBindingData(input, ids) {
        const { controlType = null, value = null, options = {}, dataType = null } = input || {};
        if (controlType) {
            // 对帮助做特殊处理
            if (controlType === 'lookup' || controlType === 'combo-lookup') {
                const mapFields = options.mapFields;
                this.updateLookupField(ids, value, mapFields);
            }
            else {
                this.updateSimpleField(ids, value, input);
            }
        }
    }
    updateSimpleField(ids, value, column) {
        if (!column) {
            return;
        }
        const currentColumnType = column.dataType;
        // 存在行编辑器
        let result = value;
        if (currentColumnType === 'date') {
            let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');
            if (!dateStr) {
                dateStr = '0001-01-01T00:00:00';
            }
            result = dateStr;
        }
        else if (currentColumnType === 'number') {
            result = Number(value) || 0;
        }
        const field = column.field;
        ids.forEach(id => {
            this.updateBindingList(id, field, result);
        });
    }
    updateLookupField(ids, helpData, mapFields) {
        if (!mapFields) {
            return;
        }
        let helpFields = Object.keys(mapFields);
        const idIndex = helpFields.findIndex(item => item === 'id');
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = ['id', ...helpFields];
        }
        if (!helpData) {
            helpFields.reverse();
        }
        helpFields.forEach((helpField) => {
            let helpValue = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    helpValue = helpData.map((item) => {
                        return this.getValue(helpField, item);
                    }).join(',');
                }
                else {
                    helpValue = this.getValue(helpField, helpData);
                }
            }
            ids.forEach(id => {
                this.updateBindingList(id, mapFields[helpField], helpValue);
            });
        });
    }
    updateBindingList(primaryValue, propertyName, value) {
        const viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        const propertyNames = propertyName.split('.').filter(item => item);
        const bindingObject = this.bindingList.findById(primaryValue);
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            let targetBindingObject = null;
            const fpaths = propertyNames.slice(0, propertyNames.length - 1);
            const targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(prop => {
                targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject.setValue(targetPropertyName, value, true, true);
        }
    }
    getBindingPathArray() {
        const path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(n => n !== '');
        }
        return [];
    }
    getValue(f, data) {
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((a, b) => {
                return a[b];
            }, data);
        }
        return val;
    }
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.viewModel.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.viewModel.bindingData.getValue(filteredPaths);
    }
    /**
     * 根据映射将数据赋值给bindingData
     * @param data
     * @param mapFields
     * @param bindingData
     */
    mappingRow(data, mapFields, entity, bindingPath) {
        Object.keys(mapFields).forEach((prop) => {
            const value = this.getValueByPath(data, prop);
            const fields = mapFields[prop];
            const groups = fields.split(',').filter(p => p);
            groups.forEach(group => {
                const paths = group.split('.').filter(p => p);
                this.setValueByPath(entity, paths.join('.'), value);
            });
        });
    }
    /**
     * 通过frameId获取对应的组件上下文
     * @param frameId frameId
     * @returns
     */
    getFrameContextById(frameId) {
        if (!frameId) {
            return null;
        }
        const appContext = this.injector.get(AppContext, null);
        let frameContext = null;
        if (appContext) {
            frameContext = appContext.frameContextManager.getFrameContextById(frameId);
        }
        return frameContext;
    }
    getEntityByPath(frameContext, bindingPaths, currentId) {
        bindingPaths = [...bindingPaths];
        const id = frameContext.bindingData.list.currentId;
        const entity = frameContext.repository.entityCollection.getEntityById(id);
        let item = entity;
        const paths = [];
        const tailPath = bindingPaths.pop();
        const parent = bindingPaths.reduce((object, path) => {
            paths.push(path);
            if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {
                const value = object[path];
                if (value && value instanceof EntityList) {
                    const bindingList = frameContext.bindingData.getValue(paths);
                    const currentItemId = bindingList.currentId;
                    return value.get(currentItemId);
                }
                else {
                    return value;
                }
            }
            else {
                return null;
            }
        }, item);
        if (parent instanceof Entity) {
            const list = parent[tailPath];
            if (list) {
                return list.get(currentId);
            }
            else {
                throw new Error(`无效的bindingPath.`);
            }
        }
        else {
            throw new Error(`无效的bindingPath.`);
        }
    }
    endEdit(frameContext) {
        const appContext = frameContext && frameContext.getFormAppContext();
        return of(null).pipe(tap(() => {
            if (appContext) {
                appContext.messagePipe.next({ type: 'endEdit' });
            }
        }), 
        // todo: 不应该使用delay，应该串流
        delay(5));
    }
}
BatchEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BatchEditService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentManagerService },
    { type: ViewModel },
    { type: Repository },
    { type: BatchEditDialogService },
    { type: DateTimeHelperService },
    { type: LanguageService },
    { type: FormNotifyService },
    { type: UploadService }
];

// tslint:disable: max-line-length
class DiscussionGroupService {
    constructor(injector, frameContext, loadingService, runtimeFrameworkService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    /**
     * 实体仓库
     */
    get repository() {
        return this.frameContext.repository;
    }
    /**
     * 命令参数
     */
    get params() {
        return this['context'] && this['context']['eventParam'] || {};
    }
    addComment(id, summary, configId, text, visibility, parentId) {
        id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        const params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);
        const restService = this.repository.restService;
        const url = BasePathService.convertPath('/api/runtime/comment/v1.0/bill-comment/comment');
        const requestInfo = restService.buildRequestInfo();
        const options = {
            body: Object.assign({ requestInfo }, params)
        };
        this.loadingService.show();
        return restService.invoke(url, 'POST', null, options).pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 查询评论
     * @param id id
     */
    queryComments(id, configId, pageIndex, pageSize) {
        id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        const restService = this.repository.restService;
        const url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 查询所有部门信息
     */
    queryAllOrgs() {
        const restService = this.repository.restService;
        const url = BasePathService.convertPath('/api/runtime/sys/v1.0/sysOrgs?param={"layer":"1"}');
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 查询常用@用户
     * @param pageIndex
     * @param pageSize
     */
    queryFrequentAtUsers(pageIndex, pageSize) {
        const restService = this.repository.restService;
        const url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 获取at用户列表
     * @param user 用户编号或者用户名称（过滤使用）
     * @param pageIndex pageIndex
     * @param pageSize pageSize
     */
    queryAtUsers(user, pageIndex, pageSize) {
        const restService = this.repository.restService;
        const url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 构造获取评论列表的url
     * @param id id
     */
    buildQueryCommentsUrl(id, pageIndex, pageSize, configId) {
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 10;
        }
        const serverUri = this.repository.serverUri;
        // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';
        return BasePathService.convertPath(`/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=${configId}&billId=${id}&pageSize=${pageSize}&pageIndex=${pageIndex}`);
    }
    /**
     * 构造获取@用户url
     */
    buildQueryAtUsersUrl(user, pageIndex, pageSize) {
        const params = [];
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 1000;
        }
        if (user) {
            params.push(`param=${user}`);
        }
        params.push(`pageSize=${pageSize}`);
        params.push(`pageIndex=${pageIndex}`);
        return BasePathService.convertPath(`/api/runtime/comment/v1.0/bill-comment/atUser?${params.join('&')}`);
    }
    buildQueryFrequentAtUsersUrl(pageIndex, pageSize) {
        const params = [];
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 6;
        }
        params.push(`pageSize=${pageSize}`);
        params.push(`pageIndex=${pageIndex}`);
        return BasePathService.convertPath(`/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?${params.join('&')}`);
    }
    buildAddCommentParam(id, text, parentId, summary, visibility, configId) {
        if (typeof text === 'undefined') {
            text = this.params.text;
        }
        if (typeof parentId === 'undefined') {
            parentId = this.params.parentId;
        }
        if (typeof visibility === 'undefined') {
            visibility = this.params.visibility;
        }
        return {
            'bill': {
                'billId': id,
                'configId': configId,
                'summary': summary
            },
            'comment': {
                'billId': id,
                'configId': configId,
                'parentId': parentId || null,
                'text': text,
                'visibility': visibility
            }
        };
    }
}
DiscussionGroupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DiscussionGroupService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: FormLoadingService },
    { type: RuntimeFrameworkService }
];

class ListFilterConditionsService {
    constructor(frameContext) {
        this.frameContext = frameContext;
    }
    setCurrentFilterConditions(conditions) {
        this.frameContext.uiState['currentFilterConditions'] = conditions;
    }
}
ListFilterConditionsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ListFilterConditionsService.ctorParameters = () => [
    { type: FrameContext }
];

class FormManifestService {
    constructor(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        const formManifestPath = BasePathService.convertPath(`${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`);
        const request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            const req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    }
}
FormManifestService.mainfests = new Map();
FormManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormManifestService.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: HttpClient }
];

class FormExpressionManifestService {
    constructor(injector, frameContext, httpClient, modulePath, formManifestService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.httpClient = httpClient;
        this.modulePath = modulePath;
        this.formManifestService = formManifestService;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        return this.formManifestService.load().pipe(switchMap((formManifest) => {
            const expressions = formManifest.expressions;
            const expressionManifest = expressions.find((expressionManifest) => expressionManifest.ns === this.frameContext.namespace);
            if (expressionManifest) {
                const expressionPath = BasePathService.convertPath(`${this.modulePath}/expressions/${expressionManifest.path}?version=${new Date().valueOf().toString()}`);
                const key = BasePathService.convertPath(`${this.modulePath}/expressions/${expressionManifest.path}`);
                const request$ = FormExpressionManifestService.mainfests.get(key);
                if (request$) {
                    return request$;
                }
                else {
                    const req$ = this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());
                    FormExpressionManifestService.mainfests.set(key, req$);
                    return req$;
                }
            }
            else {
                return of({});
            }
        }));
    }
}
FormExpressionManifestService.mainfests = new Map();
FormExpressionManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormExpressionManifestService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_MANIFEST_SERVICE_TOKEN,] }] }
];

class LocalizationService {
    constructor(injector, userSettings) {
        this.injector = injector;
        this.userSettings = userSettings;
    }
    /**
     * 用户配置格式
     */
    get formats() {
        const { dateFormat = null, timeFormat = null } = this.userSettings || {};
        let dateTimeFormat = null;
        if (dateFormat && timeFormat) {
            dateTimeFormat = `${dateFormat} ${timeFormat}`;
        }
        const date = {
            dateFormat,
            timeFormat,
            dateTimeFormat
        };
        const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat || {};
        const number = {
            negativeSign,
            numberDecimalDigits,
            numberDecimalSeparator,
            numberGroupSeparator
        };
        return { date, number };
    }
    /**
     * 根据数据类型本地化数据
     * @param value value
     * @param dataType 数据类型
     * @returns string
     */
    localize(value, dataType) {
        if (dataType && value) {
            dataType = dataType.toLowerCase();
            if (dataType === 'date') {
                return this.transformDate(value);
            }
            else if (dataType === 'datetime') {
                return this.transformDateTime(value);
            }
            else if (dataType === 'number') {
                return this.transformNumber(value);
            }
            else {
                return value;
            }
        }
        else {
            return value;
        }
    }
    /**
     * 根据国际化类型获取格式化字符串
     * @param localizationType 国际化类型
     * @returns
     */
    getFormat(localizationType) {
        if (localizationType) {
            localizationType = localizationType.toLowerCase();
        }
        if (localizationType === 'date') {
            return this.formats.date.dateFormat;
        }
        else if (localizationType === 'datetime') {
            return this.formats.date.dateTimeFormat;
        }
        else {
            return '';
        }
    }
    /**
     * 转换日期
     * @param value value
     */
    transformDate(value) {
        let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
        if (!dateFormat || !value) {
            return value;
        }
        const date = moment(value);
        const isValid = date.isValid();
        if (!isValid) {
            return value;
        }
        dateFormat = this.parseDateFormat(dateFormat);
        return date.format(dateFormat);
    }
    /**
     * 转换日期时间
     * @param value value
     * todo: 目前无法定义日期时间格式
     */
    transformDateTime(value) {
        let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
        let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';
        if (!dateFormat || !timeFormat) {
            return value;
        }
        const dateTime = moment(value);
        const isValid = dateTime.isValid();
        if (!isValid) {
            return value;
        }
        if (dateFormat) {
            dateFormat = this.parseDateFormat(dateFormat);
        }
        if (timeFormat) {
            timeFormat = this.parseTimeFormat(timeFormat);
        }
        const dateTimeFormat = dateFormat + ' ' + timeFormat;
        return dateTime.format(dateTimeFormat);
    }
    /**
     * 转换数字
     * @param value value
     */
    transformNumber(value) {
        if (value === null || value === undefined || value === '') {
            return '';
        }
        const bigNumber = new BigNumber(value);
        // 如果不是数字，不做任何处理
        if (!BigNumber.isBigNumber(bigNumber)) {
            return value;
        }
        const isNegative = bigNumber.isNegative();
        const format$$1 = this.buildNumberFormat();
        const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};
        if (isNegative) {
            if (negativeSign !== null) {
                format$$1.prefix = negativeSign;
                return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format$$1);
            }
        }
        return bigNumber.toFormat(numberDecimalDigits, null, format$$1);
    }
    /**
     * 转换日期格式规则为moment的format规则
     * @param format format
     */
    parseDateFormat(format$$1) {
        return format$$1.replace(/y/g, 'Y').replace(/d/g, 'D');
    }
    /**
     * 转换时间格式规则为moment的format规则
     * @param format format
     */
    parseTimeFormat(format$$1) {
        return format$$1.replace(/M/g, 'm');
    }
    /**
     * 构造bignumber数字格式化选项
     */
    buildNumberFormat() {
        if (this.numberFormat) {
            const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;
            const format$$1 = {
                groupSize: 3,
            };
            if (numberDecimalSeparator !== null) {
                format$$1.decimalSeparator = numberDecimalSeparator;
            }
            if (numberGroupSeparator !== null) {
                format$$1.groupSeparator = numberGroupSeparator;
            }
            return format$$1;
        }
    }
    get numberFormat() {
        return this.userSettings && this.userSettings.numberFormat || null;
    }
}
LocalizationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LocalizationService.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [UserSettingsToken,] }] }
];

class FormAttentionService {
    constructor(injector, frameContext, attentionService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.attentionService = attentionService;
    }
    /**
     * 闪烁按钮
     * @param ids id字符串或数组
     * @param duration 时间间隔
     * @returns
     */
    blink(ids, duration) {
        if (typeof ids === 'string') {
            ids = ids.split(',').filter(p => p);
        }
        if (!Array.isArray(ids) || ids.length < 1) {
            return EMPTY;
        }
        if (typeof duration === 'string') {
            duration = duration.trim();
        }
        if (!duration) {
            duration = 600;
        }
        duration = parseInt(duration);
        if (isNaN(duration) || duration <= 0) {
            duration = 600;
        }
        const elements = ids.map((item) => {
            return {
                idOrEl: item,
            };
        });
        this.attentionService.catchAttention(elements, duration);
    }
}
FormAttentionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormAttentionService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: AttentionService }
];

class FeatureRepository {
    constructor(injector, repository) {
        this.injector = injector;
        this.repository = repository;
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    getFeaturesByMaterialId(materialId) {
        const url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops');
        const body = {
            materialID: materialId
        };
        const options = {
            body
        };
        const befRepository = this.repository;
        return befRepository.proxy.request(url, 'put', null, options);
    }
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    getConfigedValueByFeatureId(materialId, configID, configType = 'Materials') {
        const url = BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo');
        const body = { objType: configType, objID: materialId, configID };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    }
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    applyFeatures(materialId, charactValue, configType = 'Materials') {
        const body = { objType: configType, objID: materialId, charactValue };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid'), 'put', null, options);
    }
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    getHelpInfo(helpid, filter$$1, params) {
        const url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
        const httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        const body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter$$1
        };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    }
}
FeatureRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureRepository.ctorParameters = () => [
    { type: Injector },
    { type: Repository }
];

var Prop;
(function (Prop) {
    let InputType;
    (function (InputType) {
        InputType["enum"] = "Enum";
        InputType["string"] = "String";
        InputType["help"] = "Help";
        InputType["number"] = "Number";
        InputType["date"] = "Date";
    })(InputType = Prop.InputType || (Prop.InputType = {}));
})(Prop || (Prop = {}));

class FeatureDataService {
    constructor(injector, repository, localeId) {
        this.injector = injector;
        this.repository = repository;
        this.localeId = localeId;
        this.localeId = this.localeId || 'zh-CHS';
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    getFeaturesByMaterialId(materialId) {
        return this.repository.getFeaturesByMaterialId(materialId).pipe(map((response) => {
            if (!response || !response.returnValue) {
                return null;
            }
            const returnValue = JSON.parse(response.returnValue);
            const result = { propset: [], props: [] };
            const propsets = returnValue.propset || null;
            const props = returnValue.props || null;
            if (propsets && Array.isArray(propsets)) {
                propsets.map((propset) => {
                    propset.name = this.translateName(propset);
                    return propset;
                });
                result.propset = propsets;
            }
            if (props && Array.isArray(props) && props.length > 0) {
                props.map((prop) => {
                    // 处理多语
                    prop.name = this.translateName(prop);
                    // 处理枚举
                    if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {
                        prop.data = JSON.parse(prop.enuminfo);
                    }
                    // 处理必填和只读
                    prop.isreadonly = prop.isreadonly === '1' ? true : false;
                    prop.isrequired = prop.isrequired === '1' ? true : false;
                    return prop;
                });
                result.props = props;
            }
            return result;
        }));
    }
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    getConfigedValueByFeatureId(materialId, configID, configType = 'Materials') {
        return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map((result) => {
            return JSON.parse(result);
        }));
    }
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    applyFeatures(materialId, charactValue, configType = 'Materials') {
        return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map((config) => {
            return JSON.parse(config);
        }));
    }
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    getHelpInfo(helpid, filter$$1, params) {
        const url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
        const httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        const body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter$$1
        };
        const befRepository = null; //this.repository as BefRepository<any>;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options).pipe(map((result) => JSON.parse(result)));
    }
    /**
     * 国际化特征项或特征集名称
     * @param object 特征集或特征项对象
     * @returns
     */
    translateName(object) {
        if (!object) {
            return null;
        }
        let name = null;
        switch (this.localeId) {
            case 'en':
                {
                    name = object['name_en'];
                }
                break;
            case 'zh-CHS':
                {
                    name = object['name_chs'];
                }
                break;
            case 'zh-CHT':
                {
                    name = object['name_cht'];
                }
                break;
            default: name = object['name_chs'];
        }
        return name;
    }
}
FeatureDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureDataService.ctorParameters = () => [
    { type: Injector },
    { type: FeatureRepository },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
];

class FeatureEditService {
    constructor(injector, featureEditorService, featureDataService, loadingService, notifyService, languageService) {
        this.injector = injector;
        this.featureEditorService = featureEditorService;
        this.featureDataService = featureDataService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.languageService = languageService;
    }
    edit(materialId, materialFeatureId, options) {
        if (!materialId) {
            throw new Error('[FeatureEditService]物料id不能为空！');
        }
        if (!options) {
            options = {};
        }
        if (typeof options === 'string' && options.startsWith('{') && options.endsWith('}')) {
            options = JSON.parse(options);
        }
        options.getHelpInfo = this.featureDataService.getHelpInfo;
        this.loadingService.show();
        return this.featureDataService.getFeaturesByMaterialId(materialId).pipe(tap((result) => {
            this.loadingService.hide();
            const returnValue = result || null;
            if (returnValue) {
                const featureInfo = JSON.parse(returnValue);
                const props = featureInfo.props || null;
                if (!props || props.length < 1) {
                    this.notifyService.warning(this.languageService.propsIsEmpty);
                    return;
                }
                this.featureEditorService.show(props, options);
            }
            else {
                this.notifyService.error(this.languageService.propsIsEmpty);
            }
        }));
    }
    buildFeatures(materialId, materialFeatureId) {
        const features$ = this.featureDataService.getFeaturesByMaterialId(materialId);
        return features$.pipe(switchMap(featureSet => {
            if (materialFeatureId) {
                const configedFeatures$ = this.featureDataService.getConfigedValueByFeatureId(materialFeatureId, materialFeatureId);
                return configedFeatures$.pipe(map(defaultConfigs => {
                    const featureTemplate = featureSet.props;
                    const features = this.mergeFeatures(featureTemplate, defaultConfigs);
                    return features;
                }));
            }
            else {
                return of(featureSet.props);
            }
        }));
    }
    mergeFeatures(featureTemplate, defaultConfigs) {
        return null;
    }
}
FeatureEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureEditService.ctorParameters = () => [
    { type: Injector },
    { type: FeatureEditorService },
    { type: FeatureDataService },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: LanguageService }
];

class ExpressionService {
    constructor(injector, resolveService, frameContext, expressionExecutor) {
        this.injector = injector;
        this.resolveService = resolveService;
        this.frameContext = frameContext;
        this.expressionExecutor = expressionExecutor;
    }
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    execute(expression, customContext) {
        const deps = this.resolveService.resolve(expression);
        const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);
        const entityContext = this.buildEntityContext(deps, groupDependencies);
        const stateContext = this.buildStateContext();
        const context = Object.assign({ [this.entityOriginalNodeCode]: entityContext }, stateContext, { BigNumber, frameContext: this.frameContext, bindingData: this.frameContext.bindingData, repository: this.frameContext.repository }, customContext);
        return this.expressionExecutor.eval(expression, context);
    }
    /**
     * 执行表达式（返回可观察对象）
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    executeAsync(expression, customContext) {
        const result = this.execute(expression, customContext);
        return of(result);
    }
    /**
     * 构造实体上下文
     * @param deps
     * @param groupDependencies
     * @param context
     * @returns
     */
    buildEntityContext(deps, groupDependencies, context) {
        let isGroupdMainEntity = false;
        deps.forEach((dep) => {
            const isEntityDependency = this.isEntityDependency(dep);
            const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;
            // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系
            // 表达式依赖了实体
            if (isEntityDependency) {
                // 是聚合依赖
                if (isGroupDependency) {
                    const dependencyLength = dep.split('/').filter(p => p).length - 1;
                    if (dependencyLength === 1) {
                        // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。
                        isGroupdMainEntity = true;
                    }
                }
            }
        });
        const data = this.getEntity();
        if (isGroupdMainEntity) {
            const collection = this.frameContext.repository.entityCollection.toJSON();
            data['__type__'] = 'List';
            data['__items__'] = collection;
        }
        return data;
    }
    /**
     * 是否为实体依赖
     * @param dep
     * @returns
     */
    isEntityDependency(dep) {
        return dep.startsWith(ENTITY_TEMPLATE);
    }
    /**
     * 获取实体
     * @param event
     * @returns
     */
    getEntity() {
        const entityTypeInfo = this.frameContext.repository.entityTypeInfo;
        const bindingData = this.frameContext.bindingData;
        const childrenEntityPaths = [];
        ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
        const entity = this.frameContext.bindingData.list.currentItem.toJSON();
        entity['__type__'] = 'Entity';
        if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
            return entity;
        }
        // 找到所有子表
        childrenEntityPaths.forEach((paths) => {
            const row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);
            if (row) {
                const propertyName = paths.pop();
                let parent = paths.reduce((object, path) => {
                    return object && object[path] || null;
                }, entity);
                const node = Object.assign({ __items__: [...parent[propertyName]] }, row, { __type__: 'List' });
                parent[propertyName] = node;
            }
        });
        return entity;
    }
    /**
     * 获取主实体原始字段名
     */
    get entityOriginalNodeCode() {
        const repository = this.injector.get(Repository);
        return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;
    }
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext() {
        const ns = this.frameContext.namespace;
        const appContext = this.injector.get(AppContext, null);
        const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
        const result = {};
        if (frameContexts && frameContexts.length > 0) {
            const anonymousFrameContext = frameContexts[0];
            const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                const uiState = rootFrameContext.viewModel.uiState;
                const propertyNames = Object.getOwnPropertyNames(uiState) || [];
                propertyNames.forEach((prop) => {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState[prop];
                    }
                });
            }
        }
        return result;
    }
}
ExpressionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExpressionService.ctorParameters = () => [
    { type: Injector },
    { type: ResolveService },
    { type: FrameContext },
    { type: ExpressionExecutor }
];

/**
 * angular 脏值检查服务
 */
class DirtyCheckingService {
    constructor(injector, cd, appRef) {
        this.injector = injector;
        this.cd = cd;
        this.appRef = appRef;
    }
    /**
     * Checks this view and its children.
     * @param global 是否全局检查
     */
    detectChanges(global) {
        global = (global === true || global === 'true') ? true : false;
        if (global && this.appRef) {
            this.appRef.tick();
        }
        else if (this.cd) {
            this.cd.detectChanges();
        }
    }
    /**
     * 在指定时间（ms）后触发Angular脏值检查
     * @param duration 超时时间(ms)
     * @param global 是否全局检查
     */
    detectChangesAfter(duration, global) {
        global = (global === true || global === 'true') ? true : false;
        if (isNaN(duration)) {
            return;
        }
        if (global && this.appRef) {
            window.setTimeout(() => {
                this.appRef.tick();
            }, duration);
        }
        else if (this.cd) {
            window.setTimeout(() => {
                this.cd.detectChanges();
            }, duration);
        }
    }
}
DirtyCheckingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DirtyCheckingService.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: ApplicationRef }
];

class PopUpService {
    constructor(injector, frameContext, repository, languageService, messageService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.repository = repository;
        this.languageService = languageService;
        this.messageService = messageService;
    }
    confirm() { }
    /**
     * 取消变更
     * @param frameId
     * @param id
     * @returns
     * @throws invalid frameid
     */
    cancel(frameId, id) {
        const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        if (!frameContext) {
            throw new Error(`[PopUpService]Invalid frameId ${frameId}`);
        }
        const primaryValue = this.frameContext.bindingData.list.currentId;
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        if (!id) {
            const bindingList = this.frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        const befRepository = this.repository;
        const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
        const entityListPaths = Array.from(longPaths);
        // 舍弃当前表当前行
        entityListPaths.pop();
        const dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityListPaths.length < 1) {
            // 主表
            const entity = this.repository.entityCollection.getEntityById(id);
            const originalData = entity['originalData'];
            entity.load(originalData, { loadChild: false });
        }
        else {
            const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
            if (entityList) {
                const originalData = entityList['originalData'];
                const item = originalData.find((item) => item.id === id);
                if (item) {
                    // 已有数据，还原变更
                    const entity = befRepository.entityManager.getEntityByPath(longPaths);
                    if (entity.changes && entity.changes.length > 0) {
                        return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(tap((result) => {
                            if (result) {
                                entity.load(item, { loadChild: false });
                                entity.changes.splice(0, entity.changes.length);
                            }
                        }));
                    }
                    else {
                        // 没有修改，直接关闭
                        if (dialogRef) {
                            dialogRef.close();
                        }
                    }
                }
                else {
                    // 新增的数据，删除
                    const paths = this.buildPath(bindingPath, primaryValue);
                    return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(switchMap((result) => {
                        if (result) {
                            return befRepository.removeEntityByPath(paths, id).pipe(tap(() => {
                                befRepository.entityManager.removeEntityByPath(paths, id);
                                if (entityList.count() === 0 && dialogRef) {
                                    dialogRef.close();
                                }
                            }));
                        }
                        else {
                            return EMPTY;
                        }
                    }));
                }
            }
        }
        return of([]);
    }
    /**
     * 同步当前行
     * @param id 当前行
     */
    updateCurrentRow(id) {
        const bindingPath = this.frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        // const frameId = this.frameContext.frameId;
        const root = this.frameContext.getVirtualRootFrameContext();
        const primaryKeyValue = root.bindingData.list.currentId;
        this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);
        if (bindingPaths.length > 0) {
            const paths = [];
            bindingPaths.forEach((path, index, array) => {
                paths.push(path);
                const bindingList = root.bindingData.getValue(paths);
                if (bindingList) {
                    const currentId = bindingList.currentId;
                    const modalBindingList = this.frameContext.bindingData.getValue(paths);
                    if (index === bindingPath.length - 1 && id) {
                        modalBindingList.setCurrentId(id);
                    }
                    else if (modalBindingList) {
                        modalBindingList.setCurrentId(currentId);
                    }
                }
            });
        }
    }
    closeCheck() {
        const frameContext = this.frameContext;
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        const befRepository = this.repository;
        const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
        const entityListPaths = Array.from(longPaths);
        entityListPaths.pop();
        const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
        const dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityList.count() === 0 && dialogRef) {
            dialogRef.close();
        }
    }
    /**
     * 删除弹窗中的当前行数据
     * @param frameId -可选，要删除数据所在组件的id，默认为命令所在的组件
     * @param id -可选，要删除数据的id，默认为命令所在组件的当前行数据id
     * @param showConfirm -可选，删除数据时是否进行删除前的确认，默认为`true`
     * @returns
     * @throws 组件id错误时抛出错误
     */
    removeRow(frameId, id, showConfirm = true) {
        const frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
        if (!frameContext) {
            throw new Error(`无效的组件id：${frameId}`);
        }
        // 纠正主键
        if (!id) {
            const bindingList = frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter((p) => p);
        const paths = this.buildPath(bindingPath, this.frameContext.bindingData.list.currentId);
        const befRepository = this.repository;
        // 转换showConfirm为布尔
        if (typeof showConfirm == 'string') {
            showConfirm = showConfirm.trim() === 'false' ? false : true;
        }
        let confirm$ = of(true);
        if (showConfirm) {
            confirm$ = this.messageService.confirm(this.languageService.confirmDeletion);
        }
        return confirm$.pipe(switchMap((result) => {
            if (result) {
                if (bindingPaths.length === 0) {
                    // 主表删除，不立即保存
                    return befRepository.removeEntityById(id, false);
                }
                else {
                    return befRepository.removeEntityByPath(paths, id).pipe(tap(() => {
                        befRepository.entityManager.removeEntityByPath(paths, id);
                    }));
                }
            }
            else {
                return EMPTY;
            }
        }));
    }
    /**
     * 关闭弹窗
     * @param frameId -可选，组件id，不指定时使用命令所在的上下文组件
     * @throws 使用指定的组件id无法获取组件及弹窗组件实例获取失败时会抛出异常
     */
    closeDialog(frameId) {
        let frameContext = this.frameContext;
        let dialogRef = null;
        // 开发者指定了组件id
        if (frameId) {
            frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            if (!frameContext) {
                throw new Error('指定了无效的组件id');
            }
            dialogRef = frameContext.frameComponent['dialogRef'];
        }
        else {
            // 尝试从当前组件上下文中获取弹窗引用
            dialogRef = frameContext.frameComponent['dialogRef'];
            if (!dialogRef) {
                // 如果命令挂载到了内容组件上
                dialogRef = this.frameContext.parent.frameComponent['dialogRef'];
            }
        }
        if (!dialogRef) {
            throw new Error(`无法获取弹窗组件实例`);
        }
        dialogRef.close();
    }
    /**
     * 还原自上次持久化以后产生的变更
     * @param frameId - 组件id
     * @param id - 数据id
     * @param showConfirm - 是否展示提示信息
     */
    cancelChanges(frameId, id, showConfirm = true) {
        const frameContext = this.getFrameContext(frameId);
        // 纠正主键
        id = this.getPrimaryValue(frameId, id);
        const data = this.getPersisteData(frameId, id);
        if (typeof showConfirm === 'string') {
            showConfirm = showConfirm.trim().toLowerCase() === 'false' ? false : true;
        }
        const isDataChanged = this.isDataChanged(data, frameId, id);
        let result$ = of(true);
        if (showConfirm && isDataChanged) {
            result$ = this.messageService.confirm(this.languageService.cancelWithoutSave);
        }
        return result$.pipe(switchMap((result) => {
            if (result) {
                const befRepository = frameContext.repository;
                const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter((p) => p);
                const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
                const entityPaths = Array.from(longPaths);
                const entity = befRepository.entityManager.getEntityNodeByPath(entityPaths);
                if (entity) {
                    entity.load(data);
                }
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    }
    /**
     * 持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     */
    persiste(frameId, id) {
        // 持久化数据
        const bindingObject = this.getBindingObject(frameId, id);
        bindingObject['__PSESISTE__DATA'] = bindingObject.toJSON();
    }
    /**
     * 获取持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     */
    getPersisteData(frameId, id) {
        const bindingObject = this.getBindingObject(frameId, id);
        return bindingObject['__PSESISTE__DATA'];
    }
    isDataChanged(data, frameId, id) {
        const bindingObject = this.getBindingObject(frameId, id);
        const value = bindingObject.toJSON();
        return JSON.stringify(value) !== JSON.stringify(data);
    }
    /**
     * 获取当前行
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 找不到对应数据时抛出无法找到对应数据的异常
     */
    getBindingObject(frameId, id) {
        const frameContext = this.getFrameContext(frameId);
        // 纠正主键
        id = this.getPrimaryValue(frameId, id);
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter((p) => p);
        // 拿到当前行
        const bindingList = frameContext.bindingData.getValue(bindingPaths);
        if (!bindingList || bindingList.length < 1) {
            throw new Error(`无法找到id为:${id}的数据`);
        }
        return bindingList.currentItem;
    }
    /**
     * 构造子表路径
     * @param bindingPath - 绑定路径
     * @param id - id
     * @throws 子表路径错误
     */
    buildPath(bindingPath, id) {
        let path = '/' + id;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.frameContext.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 根据组件id获取组件上下文
     * @param frameId - 组件id
     * @returns
     * @throws 无效的组件id
     */
    getFrameContext(frameId) {
        const frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
        if (!frameContext) {
            throw new Error(`无效的组件id：${frameId}`);
        }
        return frameContext;
    }
    /**
     * 获取主键
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 组件id无效时抛出异常
     */
    getPrimaryValue(frameId, id) {
        if (!id) {
            const frameContext = this.getFrameContext(frameId);
            if (!frameContext) {
                throw new Error(`无效的组件id：${frameId}`);
            }
            const bindingList = frameContext.bindingData.getList();
            if (!bindingList || bindingList.length < 1) {
                throw new Error(`无效的主键:${id}`);
            }
            id = bindingList.currentId;
        }
        return id;
    }
}
PopUpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PopUpService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: Repository },
    { type: LanguageService },
    { type: FormMessageService }
];

class FormService {
    constructor(injector, appContext, repository) {
        this.injector = injector;
        this.appContext = appContext;
        this.repository = repository;
    }
    /**
     * 根据字段路径获取该字段在卡片或表格中的索引
     * @param source ngFormControls或any[][]
     * @param propertyPath 字段除bindingPath之外的完整路径
     * @returns
     */
    getIndex(source, propertyPath) {
        if (Array.isArray(source)) {
            const combine = source.reduce((result, group) => {
                return result.concat(group);
            }, []);
            return combine.findIndex((item) => item.field === propertyPath);
        }
        else if (Object.prototype.toString.call(source) === '[object Object]') {
            return Object.keys(source).findIndex(key => source[key].binding === propertyPath);
        }
    }
}
FormService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormService.ctorParameters = () => [
    { type: Injector },
    { type: AppContext },
    { type: Repository }
];

class ViewModelService {
    constructor() { }
    getGridColumns(frameContext) {
        const dataGridColumnsName = frameContext && frameContext.viewModel && frameContext.viewModel['dataGridColumnsName'] || null;
        return dataGridColumnsName && frameContext.viewModel[dataGridColumnsName] || [];
    }
}
ViewModelService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ViewModelService.ctorParameters = () => [];

class PaginationService {
    constructor(injector, frameContext) {
        this.injector = injector;
        this.frameContext = frameContext;
    }
    /**
     * 重置子表分页信息
     */
    resetChildrenPagination() {
        const paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};
        const childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(DataPropGroup.List) || [];
        if (paginationInfo && Object.keys(paginationInfo).length > 0) {
            const keys = Object.keys(paginationInfo);
            keys.forEach((key) => {
                const value = paginationInfo[key];
                if (Object.prototype.toString.apply(value) !== '[object Object]') {
                    return;
                }
                const rowPagination = childrenEntityCodes.find((nodeCode) => {
                    // 去掉s
                    nodeCode = nodeCode.slice(0, -1);
                    return key.startsWith(`${nodeCode}_`);
                });
                if (rowPagination) {
                    delete paginationInfo[key];
                }
                else {
                    paginationInfo[key].pageIndex = 1;
                    delete paginationInfo[key].total;
                    delete paginationInfo[key].pageCount;
                }
            });
            this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
        }
    }
}
PaginationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PaginationService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext }
];

/**
 * 组件级注入注入(共23个)
 */
const FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS = [
    ValidationService,
    FocusInvalidService,
    ChangeItemService,
    UIStateService,
    StateMachineService,
    BindingDataService,
    CommandService,
    // entity-services
    EntityTraversingService,
    EntityManipulationService,
    EntityAggregationService,
    EntityListService,
    EntityService,
    // data-services
    ListDataService,
    TreeDataService,
    SubTreeDataService,
    CardDataService,
    SubListDataService,
    RemoveDataService,
    SaveDataService,
    EditDataService,
    FilterConditionDataService,
    RemoteSummaryService,
    BeActionService,
    ApproveService,
    PrintService,
    AttachmentDataService,
    AttachmentService,
    FileService,
    NavigationMiddlewareService,
    GridMiddlewareService,
    SidebarService,
    FarrisFormService,
    DialogService,
    NavigationEventService,
    NavigationService,
    RouterService,
    AuthorityService,
    {
        provide: QUERYSOLUTION_HANDLER_TOKEN,
        useClass: QuerySolutionService
    },
    {
        provide: LISTFILTER_HANDLER_TOKEN,
        useClass: ListFilterConditionsService
    },
    EndEditService,
    BatchEditDialogService,
    BatchEditService,
    DiscussionGroupService,
    LocalizationService,
    DataGridService,
    FormAttentionService,
    FeatureEditorService,
    FeatureDataService,
    FeatureEditService,
    ExpressionService,
    PopUpService,
    DirtyCheckingService,
    FormService,
    FormControlService,
    BindingPathService,
    FrameContextService,
    ViewModelService,
    PaginationService,
    // 表达式
    { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },
    { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService },
    { provide: MESSAGE_SERVICE_TOKEN, useClass: FormMessageService },
    { provide: NOTIFY_SERVICE_TOKEN, useClass: FormNotifyService },
    { provide: FRAME_COMPONENT_INIT_HANDLER_TOKEN, useClass: WorkFlowMessageHandler, multi: true }
];

/**
 * 组件级注入注入(共23个)
 */
const DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS = [
    { provide: 'ValidationService', useClass: ValidationService },
    { provide: 'FocusInvalidService', useClass: FocusInvalidService },
    { provide: 'ChangeItemService', useClass: ChangeItemService },
    { provide: 'UIStateService', useClass: UIStateService },
    { provide: 'StateMachineService', useClass: StateMachineService },
    { provide: 'BindingDataService', useClass: BindingDataService },
    { provide: 'CommandService', useClass: CommandService },
    // entity-services
    { provide: 'EntityTraversingService', useClass: EntityTraversingService },
    { provide: 'EntityManipulationService', useClass: EntityManipulationService },
    { provide: 'EntityAggregationService', useClass: EntityAggregationService },
    { provide: 'EntityListService', useClass: EntityListService },
    { provide: 'EntityService', useClass: EntityService },
    // data-services
    { provide: 'ListDataService', useClass: ListDataService },
    { provide: 'TreeDataService', useClass: TreeDataService },
    { provide: 'SubTreeDataService', useClass: SubTreeDataService },
    { provide: 'CardDataService', useClass: CardDataService },
    { provide: 'SubListDataService', useClass: SubListDataService },
    { provide: 'RemoveDataService', useClass: RemoveDataService },
    { provide: 'SaveDataService', useClass: SaveDataService },
    { provide: 'EditDataService', useClass: EditDataService },
    { provide: 'FilterConditionDataService', useClass: FilterConditionDataService },
    { provide: 'RemoteSummaryService', useClass: RemoteSummaryService },
    { provide: 'BeActionService', useClass: BeActionService },
    { provide: 'ApproveService', useClass: ApproveService },
    { provide: 'PrintService', useClass: PrintService },
    { provide: 'AttachmentDataService', useClass: AttachmentDataService },
    { provide: 'AttachmentService', useClass: AttachmentService },
    { provide: 'FileService', useClass: FileService },
    { provide: 'NavigationMiddlewareService', useClass: NavigationMiddlewareService },
    { provide: 'GridMiddlewareService', useClass: GridMiddlewareService },
    { provide: 'SidebarService', useClass: SidebarService },
    { provide: 'FarrisFormService', useClass: FarrisFormService },
    { provide: 'DialogService', useClass: DialogService },
    { provide: 'NavigationEventService', useClass: NavigationEventService },
    { provide: 'NavigationService', useClass: NavigationService },
    { provide: 'RouterService', useClass: RouterService },
    { provide: 'AuthorityService', useClass: AuthorityService },
    {
        provide: QUERYSOLUTION_HANDLER_TOKEN,
        useClass: QuerySolutionService
    },
    {
        provide: LISTFILTER_HANDLER_TOKEN,
        useClass: ListFilterConditionsService
    },
    { provide: 'EndEditService', useClass: EndEditService },
    { provide: 'BatchEditDialogService', useClass: BatchEditDialogService },
    { provide: 'BatchEditService', useClass: BatchEditService },
    { provide: 'DiscussionGroupService', useClass: DiscussionGroupService },
    { provide: 'LocalizationService', useClass: LocalizationService },
    { provide: 'DataGridService', useClass: DataGridService },
    { provide: 'FormAttentionService', useClass: FormAttentionService },
    // 表达式
    { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },
    { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService }
];

class CommandServicesModule {
    constructor(workFlowMessage) {
        this.workFlowMessage = workFlowMessage;
        if (this.workFlowMessage) {
            this.workFlowMessage.setup();
        }
    }
}
CommandServicesModule.decorators = [
    { type: NgModule, args: [{
                providers: FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS,
                imports: [
                    WfTaskHandlerModule
                ],
                exports: [
                    WfTaskHandlerModule
                ]
            },] }
];
/** @nocollapse */
CommandServicesModule.ctorParameters = () => [
    { type: WorkFlowMessage }
];

class MessagePipe {
    constructor(token, rtfService) {
        this.token = token;
        this.rtfService = rtfService;
    }
    /**
     * 向管道发送消息
     * @param message 消息
     */
    sendMessage(message) {
        this.rtfService.subjectNotify(this.token, message);
        return this;
    }
    /**
     * 监听管道消息
     * @param handler 消息处理器
     */
    listen(handler) {
        const observerToken = UID.create();
        this.rtfService.subjectResponse(this.token, handler, observerToken);
        const unListen = () => {
            this.rtfService.responseUnSubscribe(this.token, observerToken);
        };
        return unListen;
    }
    /**
     * 销毁管道
     */
    destory() {
        this.rtfService.subjectRemove(this.token);
    }
}

class MessagePipeService {
    /**
     * 通过token获取消息管道
     * @param token 消息管道标识
     */
    static get(token) {
        const pipe = new MessagePipe(token, this.rtfService);
        return pipe;
    }
    /**
     * 创建消息管道
     * @param pipeName 管道名称
     * @param useFormContext 是否使用表单上下文创建管道标识
     * @param pipeType 管道类型(可选)，默认Subject<any>
     */
    static create(pipeName, useFormContext, pipeType) {
        let options = null;
        if (useFormContext) {
            const params = this.querystringService.parse(window.location.hash);
            const { funcId, appId, appEntrance } = params;
            options = { funcId, appId, appEntrance };
        }
        const token = this.rtfService.subjectRegister(pipeName, options, pipeType);
        if (!token) {
            return null;
        }
        const pipe = new MessagePipe(token, this.rtfService);
        return pipe;
    }
}
MessagePipeService.rtfService = new RuntimeFrameworkService();
MessagePipeService.querystringService = new QuerystringService();

/**
 * 后端消息处理服务
 * @description
 * ### 服务注入位置
 *  1、整个表单的root-component
 *  2、弹出窗口的root-component
 */
class BackEndMessageHandler {
    constructor(injector, frameContext, translate) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.translate = translate;
    }
    /**
     * 处理后端返回的消息或错误
     * @param message 消息或错误
     */
    handle(message, context) {
        const isException = context && context.isException || false;
        const hasThrowError = context && context.hasThrowError || false;
        const eventBus = context && context.eventBus || null;
        const error = context && context.error || null;
        const formAppContext = context && context.formAppContext || null;
        const result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);
        if (result && result.form && result.form.length > 0) {
            result.form.forEach((item) => {
                item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');
            });
        }
        else {
            this.resetFormMessage(message.context.appContext, message.context.ns);
        }
        const targetFrameContext = this.findTargetFrameContext(this.frameContext);
        if (result && result.all && result.all.length > 0) {
            targetFrameContext.viewModel.verifycationChanged.next(result.all);
        }
        else {
            if (result !== null) {
                targetFrameContext.viewModel.verifycationChanged.next([]);
            }
        }
    }
    /**
     * 收集汇总信息和form信息
     * @param backEndMessage
     */
    collect(backEndMessage, isException = false, hasThrowError = false, eventBus = null, error = null, formAppContext = null) {
        const bizMessages = backEndMessage && backEndMessage.bizMessages || null;
        const appContext = backEndMessage && backEndMessage.context.appContext;
        const ns = backEndMessage.context.ns;
        if (!bizMessages || bizMessages.length < 1) {
            return null;
        }
        const result = {
            form: [],
            all: []
        };
        let hasFormlessError = false;
        for (let bizMessage of bizMessages) {
            const message = bizMessage.message;
            const location = bizMessage.location || null;
            const columns = location && location.columns || null;
            const nodeCode = location && location.nodeCode || null;
            const rows = location && location.rows;
            const bindingPath = this.getBindingPath(appContext, ns, nodeCode);
            const bindingPaths = bindingPath && bindingPath.split('/').filter(p => p);
            // 目前仅处理有location，且有id、列名、表名的。
            if (!location || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {
                continue;
            }
            // 遍历数据行
            for (let row of rows) {
                for (let column of columns) {
                    // 获取到所有绑定该列数据的frameContext
                    let frameContexts = this.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);
                    if (!frameContexts || frameContexts.length < 1) {
                        // 没有任何一个组件绑定该列的数据
                        hasFormlessError = true;
                        continue;
                    }
                    // 排除掉只读datagrid
                    frameContexts = frameContexts.filter((frameContext) => {
                        const isDataGridComponent = this.isDataGridComponent(frameContext.frameComponent);
                        if (isDataGridComponent) {
                            const isReadonlyDataGrid = this.isReadonlyDataGrid(frameContext.frameComponent);
                            if (isReadonlyDataGrid) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }
                        return true;
                    });
                    // 遍历的行是否为当前行
                    const isCurrentRow = this.isCurrentRow(appContext, ns, bindingPath, row);
                    // 如果是当前行的话需要将错误信息放到form中
                    if (isCurrentRow) {
                        // 忽略grid
                        // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));
                        if (frameContexts && frameContexts.length > 0) {
                            frameContexts.forEach((frameContext) => {
                                // 只处理了一个组件中列只绑定到一个前端控件的场景
                                const formControls = this.getFormControlByColumnName(frameContext, column);
                                if (formControls && formControls.length > 0) {
                                    formControls.forEach(([domPropertyName, formControl]) => {
                                        //const domPropertyName = formControl && formControl. || null;
                                        this.mergeMessage(result.form, frameContext, domPropertyName, message);
                                    });
                                }
                                //if (formControl && domPropertyName) {
                                //}
                            });
                        }
                    }
                    // 将错误信息放到汇总中
                    frameContexts.forEach((frameContext) => {
                        const viewModelName = frameContext.viewModel.form.formGroupName;
                        const formControls = this.getFormControlByColumnName(frameContext, column);
                        if (formControls && formControls.length > 0) {
                            const [domPropertyName, formControl] = formControls.find(([propertyName, formControl]) => propertyName && propertyName.length > 0);
                            // const domPropertyName = domProperty && domProperty.propertyName;
                            const bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths);
                            let index = bindingList.getIndexById(row);
                            const primary = `${row}_${column}_${message}`;
                            // TODO:虽然能纠正汇总消息显示重复的问题，但可能导致点击错误无法定位到对应控件的问题，待后续优化
                            if (index >= 0 && result.all.findIndex(p => p.id === primary) === -1) {
                                // 数据源中有多于1行时显示索引
                                const position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;
                                const title = this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);
                                const item = {
                                    id: primary,
                                    index,
                                    targetField: formControl.id,
                                    title,
                                    msg: message,
                                    namespace: ns,
                                    bindingPath,
                                    type: 'error'
                                };
                                result.all.push(item);
                            }
                        }
                    });
                }
            }
        }
        if (hasFormlessError && isException && !hasThrowError && eventBus) {
            eventBus.post('Exception', '', 'onException', error, formAppContext);
        }
        return result;
    }
    mergeMessage(formItems, frameContext, domPropertyName, message) {
        const targetItem = formItems.find(item => item.frameContext.frameId === frameContext.frameId);
        if (targetItem) {
            const isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);
            const messageType = `backend-message-${Object.keys(targetItem.message).length + 1}`;
            if (isPropertyExist) {
                targetItem.message[domPropertyName]['errors'][messageType] = { name: message };
            }
            else {
                targetItem.message[domPropertyName] = { errors: { [messageType]: { name: message } } };
            }
        }
        else {
            formItems.push({
                frameContext: frameContext,
                message: {
                    [domPropertyName]: {
                        errors: {
                            'backend-message-1': { name: message }
                        }
                    }
                }
            });
        }
    }
    buildItemTitle(viewModelName, propertyName, index) {
        const template = {
            'zh-CHS': {
                viewModelName: `$viewModel`,
                index: `第 $index 行`,
                propertyName: `- $propertyName`
            },
            'en': {
                viewModelName: `$viewModel`,
                index: `row $index`,
                propertyName: `- $propertyName`
            },
            'zh-CHT': {
                viewModelName: `$viewModel`,
                index: `第 $index 行`,
                propertyName: `- $propertyName`
            }
        };
        const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        const message = [];
        if (viewModelName) {
            message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));
        }
        if (index > 0) {
            message.push(template[currentLanguage]['index'].replace('$index', index));
        }
        if (propertyName) {
            message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));
        }
        return message.join(' ');
    }
    /**
     * 根据表名或nodeCode获取绑定路径
     * @param appContext appContext
     * @param ns ns
     * @param nodeCode 表名
     */
    getBindingPath(appContext, ns, nodeCode) {
        const frameContext = this.getFrameContext(appContext, ns);
        return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);
    }
    /**
     * 通过绑定路径和列名找到所有符合条件的视图模型(包括grid和form)
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath 绑定路径
     * @param columnName 列名
     */
    getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, columnName) {
        let frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            // 找到form中有控件的frameContext
            frameContexts = frameContexts.filter((frameContext) => {
                // 基本条件是否满足
                let isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;
                if (!isValidFrameContext) {
                    return false;
                }
                // 再通过列名过滤
                const bindingPaths = bindingPath.split('/').filter(p => p);
                const dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
                if (dataTypeInfo) {
                    const dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());
                    // 从当前实体属性中找到数据字段为列名的属性
                    const entityPropertyInfo = dataPropInfos.find((propInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));
                    if (entityPropertyInfo) {
                        const entityPropertyName = entityPropertyInfo.name;
                        const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === entityPropertyName);
                        if (ngFormControl) {
                            return true;
                        }
                        else {
                            const item = Object.keys(frameContext.viewModel.form.ngFormControls).find(key => key === entityPropertyName);
                            return item ? true : false;
                        }
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            });
            return frameContexts;
        }
        return null;
    }
    /**
     * 是否为datagrid组件
     * @param frameComponent component
     */
    isDataGridComponent(frameComponent) {
        const columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;
        return columnNames ? true : false;
    }
    /**
     * grid组件是否是只读的
     * @param frameComponent frameComponent
     * @returns
     */
    isReadonlyDataGrid(frameComponent) {
        const frameContext = frameComponent.context;
        const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        if (dataGridColumnsName) {
            const datagridColumns = frameContext.viewModel[dataGridColumnsName];
            return datagridColumns.every((group) => {
                return group.every(item => !item.editor);
            });
        }
        else {
            throw new Error(`传入的组件不是一个表格！`);
        }
    }
    /**
     * id是否为当前行
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath bindingPath
     * @param id id
     */
    isCurrentRow(appContext, ns, bindingPath, id) {
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const frameContext = this.getFrameContext(appContext, ns);
        const bindingData = frameContext.bindingData;
        const bindingList = bindingData.getValue(bindingPaths);
        return bindingList.currentItem.primaryKeyValue === id;
    }
    /**
     * 获取当前ns下的rootFrameContext
     * @param appContext appcontext
     * @param ns namespace
     */
    getFrameContext(appContext, ns) {
        const frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            const randomFrameContext = frameContexts.find(frameContext => frameContext.namespace === ns);
            if (randomFrameContext) {
                const virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();
                return virtualRootFrameContext;
            }
        }
        return null;
    }
    /**
     * 通过绑定路径和列名获取绑定到该列的formControl
     */
    getFormControlByColumnName(frameContext, columnName) {
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);
        // 通过bindingPath找到对应的实体信息
        const typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
        const propsInfo = Array.from(typeInfo.propInfoMap.values());
        const propInfo = propsInfo.find((propInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));
        if (propInfo) {
            const mappingName = propInfo.name;
            const formControls = Object.entries(frameContext.viewModel.form.ngFormControls).filter((item) => item[1].binding === mappingName || item[0] === mappingName);
            // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);
            if (formControls) {
                return formControls;
            }
        }
        return null;
    }
    resetFormMessage(appContext, ns) {
        const frameContexts = appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.namespace === ns);
        frameContexts.forEach(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError());
    }
    /**
     * 递归找到展示消息的组件上下文
     * @param frameContext frameContext
     */
    findTargetFrameContext(frameContext) {
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        const virtualRootComponent = virtualRootFrameContext.frameComponent;
        const isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;
        if (isDialogComponent) {
            // 如果消息处理服务是弹窗内的，则消息提示展示在弹窗内
            return virtualRootFrameContext;
        }
        else {
            // 当前消息服务不在弹窗内，递归向上查找，找到第一个弹窗，如果找不到则找到最上的root-component
            const parentFrameContext = virtualRootFrameContext.parent;
            if (parentFrameContext) {
                return this.findTargetFrameContext(parentFrameContext);
            }
            else {
                return virtualRootFrameContext;
            }
        }
    }
}
BackEndMessageHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BackEndMessageHandler.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: undefined, decorators: [{ type: Inject, args: [TranslateToken,] }] }
];

// export * from './public-api-common';
// export * from './public-api-extend';

/**
 * Generated bundle index. Do not edit.
 */

export { BaseDataService as ɵa, ListFilterConditionsService as ɵc, QuerySolutionService as ɵb, Service as ɵd, FormLoadingService, FormMessageService, HideEventService, FormNotifyService, FormErrorService, FormWizardService, CheckService, DataCheckService, EventService, MenuStateService, RouterService, LanguageService, TAB_EVENT, TAB_QUERY_STRING, QuerystringService, RuntimeFrameworkService, NavigationEventService, NavigationService, NavigationMiddlewareService, GridMiddlewareService, ParamService, FilterConditionService, FilterConditionDataService, UIStateService, StateMachineService, BindingDataService, CommandService, ValidationService, FocusInvalidService, ApplicationParamService, ChangeItemService, EntityTraversingService, EntityManipulationService, EntityAggregationService, EntityListService, EntityService, ListDataService, CardDataService, SubListDataService, TreeDataService, RemoveDataService, SaveDataService, EditDataService, RemoteSummaryService, SubTreeDataService, BeActionService, ApproveService, PrintService, AttachmentDataService, AttachmentService, FileService, DialogService, SidebarService, FilterService, AuthorityService, Authority, FarrisFormService, FARRIS_FORM_COMPONENTS, ExceptionHandler, KeybindingService, FARRIS_COMMAND_SERVICE_PROVIDERS, FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS, FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS, DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS, CommandServicesModule, ComponentManagerService, MessagePipeService, MessagePipe, EndEditService, BatchEditService, DiscussionGroupService, FormManifestService, FormExpressionManifestService, UserSettingsService, LocalizationService, DataGridService, BackEndMessageHandler, FormAttentionService, FormNotifyStrategyService, FeatureDataService, FeatureEditService, FeatureRepository, ExpressionService, PopUpService, DirtyCheckingService, WorkFlowMessage, WorkFlowMessageService, WorkFlowMessageHandler, FormControlService, BindingPathService, FrameContextService, ViewModelService, FormService, PaginationService };

//# sourceMappingURL=farris-command-services.js.map