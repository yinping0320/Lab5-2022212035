import { Injectable } from '@angular/core';
import { FrameContext, BindingList } from '@farris/devkit';
import { EntityTraversingService } from './entity-traversing.service';
/**
 * 实体聚合服务
 */
var EntityAggregationService = /** @class */ (function () {
    function EntityAggregationService(frameContext) {
        this.frameContext = frameContext;
        this.traversingService = this.frameContext.injector.get(EntityTraversingService);
    }
    Object.defineProperty(EntityAggregationService.prototype, "bindingData", {
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取path对应列表记录的条数
     */
    EntityAggregationService.prototype.count = function (path) {
        var splitedPath = this.splitPath(path);
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        return entityListData.length;
    };
    /**
     * 获取path对应字段的和
     */
    EntityAggregationService.prototype.sum = function (path) {
        var _this = this;
        var splitedPath = this.splitPath(path);
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        var total = entityListData.reduce(function (accTotal, entityData) {
            var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
            propValue = isNaN(propValue) ? 0 : propValue;
            accTotal += propValue;
            return accTotal;
        }, 0);
        return total;
    };
    /**
     * 获取path对应字段的平均值
     */
    EntityAggregationService.prototype.avg = function (path) {
        var count = this.count(path);
        var total = this.sum(path);
        return count !== 0 ? total / count : 0;
    };
    /**
     * 获取path对应字段的最大值
     */
    EntityAggregationService.prototype.max = function (path) {
        var _this = this;
        var splitedPath = this.splitPath(path);
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        var max = entityListData.reduce(function (accMax, entityData) {
            var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                accMax = propValue;
            }
            return accMax;
        }, null);
        return max ? max : 0;
    };
    /**
     * 获取path对应字段的最小值
     */
    EntityAggregationService.prototype.min = function (path) {
        var _this = this;
        var splitedPath = this.splitPath(path);
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        var min = entityListData.reduce(function (accMin, entityData) {
            var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                accMin = propValue;
            }
            return accMin;
        }, null);
        return min ? min : 0;
    };
    /**
     * 获取属性值
     */
    EntityAggregationService.prototype.getPropValue = function (entityData, path) {
        var currentData = entityData;
        path.forEach(function (pathItem) {
            // 提前退出的都重置为null，主要针对关联对象未赋值场景
            if (!currentData) {
                currentData = null;
                return;
            }
            currentData = currentData[pathItem];
        });
        return currentData;
    };
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @return 形如 {parentListPath: [], propertyPath: []}
     */
    EntityAggregationService.prototype.splitPath = function (path) {
        var listPath = path.concat([]);
        var propPath = [];
        var currentNode = this.bindingData.getValue(listPath);
        while (currentNode instanceof BindingList !== true) {
            var propPathItem = listPath.pop();
            if (!propPathItem) {
                return;
            }
            propPath.unshift(propPathItem);
            currentNode = this.bindingData.getValue(listPath);
        }
        return {
            listPath: listPath,
            propPath: propPath
        };
    };
    EntityAggregationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EntityAggregationService.ctorParameters = function () { return [
        { type: FrameContext }
    ]; };
    return EntityAggregationService;
}());
export { EntityAggregationService };
//# sourceMappingURL=data:application/json;base64,