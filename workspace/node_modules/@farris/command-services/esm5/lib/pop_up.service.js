import { Injectable, Injector } from '@angular/core';
import { EMPTY, of } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { FrameContext, DataPathCreator, Repository } from '@farris/devkit';
import { LanguageService } from './languag.service';
import { FormMessageService } from './form-message.service';
var PopUpService = /** @class */ (function () {
    function PopUpService(injector, frameContext, repository, languageService, messageService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.repository = repository;
        this.languageService = languageService;
        this.messageService = messageService;
    }
    PopUpService.prototype.confirm = function () { };
    /**
     * 取消变更
     * @param frameId
     * @param id
     * @returns
     * @throws invalid frameid
     */
    PopUpService.prototype.cancel = function (frameId, id) {
        var frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        if (!frameContext) {
            throw new Error("[PopUpService]Invalid frameId " + frameId);
        }
        var primaryValue = this.frameContext.bindingData.list.currentId;
        var bindingPath = frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        if (!id) {
            var bindingList = this.frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        var befRepository = this.repository;
        var longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
        var entityListPaths = Array.from(longPaths);
        // 舍弃当前表当前行
        entityListPaths.pop();
        var dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityListPaths.length < 1) {
            // 主表
            var entity = this.repository.entityCollection.getEntityById(id);
            var originalData = entity['originalData'];
            entity.load(originalData, { loadChild: false });
        }
        else {
            var entityList_1 = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
            if (entityList_1) {
                var originalData = entityList_1['originalData'];
                var item_1 = originalData.find(function (item) { return item.id === id; });
                if (item_1) {
                    // 已有数据，还原变更
                    var entity_1 = befRepository.entityManager.getEntityByPath(longPaths);
                    if (entity_1.changes && entity_1.changes.length > 0) {
                        return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(tap(function (result) {
                            if (result) {
                                entity_1.load(item_1, { loadChild: false });
                                entity_1.changes.splice(0, entity_1.changes.length);
                            }
                        }));
                    }
                    else {
                        // 没有修改，直接关闭
                        if (dialogRef) {
                            dialogRef.close();
                        }
                    }
                }
                else {
                    // 新增的数据，删除
                    var paths_1 = this.buildPath(bindingPath, primaryValue);
                    return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(switchMap(function (result) {
                        if (result) {
                            return befRepository.removeEntityByPath(paths_1, id).pipe(tap(function () {
                                befRepository.entityManager.removeEntityByPath(paths_1, id);
                                if (entityList_1.count() === 0 && dialogRef) {
                                    dialogRef.close();
                                }
                            }));
                        }
                        else {
                            return EMPTY;
                        }
                    }));
                }
            }
        }
        return of([]);
    };
    /**
     * 同步当前行
     * @param id 当前行
     */
    PopUpService.prototype.updateCurrentRow = function (id) {
        var _this = this;
        var bindingPath = this.frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        // const frameId = this.frameContext.frameId;
        var root = this.frameContext.getVirtualRootFrameContext();
        var primaryKeyValue = root.bindingData.list.currentId;
        this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);
        if (bindingPaths.length > 0) {
            var paths_2 = [];
            bindingPaths.forEach(function (path, index, array) {
                paths_2.push(path);
                var bindingList = root.bindingData.getValue(paths_2);
                if (bindingList) {
                    var currentId = bindingList.currentId;
                    var modalBindingList = _this.frameContext.bindingData.getValue(paths_2);
                    if (index === bindingPath.length - 1 && id) {
                        modalBindingList.setCurrentId(id);
                    }
                    else if (modalBindingList) {
                        modalBindingList.setCurrentId(currentId);
                    }
                }
            });
        }
    };
    PopUpService.prototype.closeCheck = function () {
        var frameContext = this.frameContext;
        var bindingPath = frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var befRepository = this.repository;
        var longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
        var entityListPaths = Array.from(longPaths);
        entityListPaths.pop();
        var entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
        var dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityList.count() === 0 && dialogRef) {
            dialogRef.close();
        }
    };
    /**
     * 删除弹窗中的当前行数据
     * @param frameId -可选，要删除数据所在组件的id，默认为命令所在的组件
     * @param id -可选，要删除数据的id，默认为命令所在组件的当前行数据id
     * @param showConfirm -可选，删除数据时是否进行删除前的确认，默认为`true`
     * @returns
     * @throws 组件id错误时抛出错误
     */
    PopUpService.prototype.removeRow = function (frameId, id, showConfirm) {
        if (showConfirm === void 0) { showConfirm = true; }
        var frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
        if (!frameContext) {
            throw new Error("\u65E0\u6548\u7684\u7EC4\u4EF6id\uFF1A" + frameId);
        }
        // 纠正主键
        if (!id) {
            var bindingList = frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        var bindingPath = frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var paths = this.buildPath(bindingPath, this.frameContext.bindingData.list.currentId);
        var befRepository = this.repository;
        // 转换showConfirm为布尔
        if (typeof showConfirm == 'string') {
            showConfirm = showConfirm.trim() === 'false' ? false : true;
        }
        var confirm$ = of(true);
        if (showConfirm) {
            confirm$ = this.messageService.confirm(this.languageService.confirmDeletion);
        }
        return confirm$.pipe(switchMap(function (result) {
            if (result) {
                if (bindingPaths.length === 0) {
                    // 主表删除，不立即保存
                    return befRepository.removeEntityById(id, false);
                }
                else {
                    return befRepository.removeEntityByPath(paths, id).pipe(tap(function () {
                        befRepository.entityManager.removeEntityByPath(paths, id);
                    }));
                }
            }
            else {
                return EMPTY;
            }
        }));
    };
    /**
     * 关闭弹窗
     * @param frameId -可选，组件id，不指定时使用命令所在的上下文组件
     * @throws 使用指定的组件id无法获取组件及弹窗组件实例获取失败时会抛出异常
     */
    PopUpService.prototype.closeDialog = function (frameId) {
        var frameContext = this.frameContext;
        var dialogRef = null;
        // 开发者指定了组件id
        if (frameId) {
            frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            if (!frameContext) {
                throw new Error('指定了无效的组件id');
            }
            dialogRef = frameContext.frameComponent['dialogRef'];
        }
        else {
            // 尝试从当前组件上下文中获取弹窗引用
            dialogRef = frameContext.frameComponent['dialogRef'];
            if (!dialogRef) {
                // 如果命令挂载到了内容组件上
                dialogRef = this.frameContext.parent.frameComponent['dialogRef'];
            }
        }
        if (!dialogRef) {
            throw new Error("\u65E0\u6CD5\u83B7\u53D6\u5F39\u7A97\u7EC4\u4EF6\u5B9E\u4F8B");
        }
        dialogRef.close();
    };
    /**
     * 还原自上次持久化以后产生的变更
     * @param frameId - 组件id
     * @param id - 数据id
     * @param showConfirm - 是否展示提示信息
     */
    PopUpService.prototype.cancelChanges = function (frameId, id, showConfirm) {
        var _this = this;
        if (showConfirm === void 0) { showConfirm = true; }
        var frameContext = this.getFrameContext(frameId);
        // 纠正主键
        id = this.getPrimaryValue(frameId, id);
        var data = this.getPersisteData(frameId, id);
        if (typeof showConfirm === 'string') {
            showConfirm = showConfirm.trim().toLowerCase() === 'false' ? false : true;
        }
        var isDataChanged = this.isDataChanged(data, frameId, id);
        var result$ = of(true);
        if (showConfirm && isDataChanged) {
            result$ = this.messageService.confirm(this.languageService.cancelWithoutSave);
        }
        return result$.pipe(switchMap(function (result) {
            if (result) {
                var befRepository = frameContext.repository;
                var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
                var longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, _this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
                var entityPaths = Array.from(longPaths);
                var entity = befRepository.entityManager.getEntityNodeByPath(entityPaths);
                if (entity) {
                    entity.load(data);
                }
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    };
    /**
     * 持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     */
    PopUpService.prototype.persiste = function (frameId, id) {
        // 持久化数据
        var bindingObject = this.getBindingObject(frameId, id);
        bindingObject['__PSESISTE__DATA'] = bindingObject.toJSON();
    };
    /**
     * 获取持久化数据
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     */
    PopUpService.prototype.getPersisteData = function (frameId, id) {
        var bindingObject = this.getBindingObject(frameId, id);
        return bindingObject['__PSESISTE__DATA'];
    };
    PopUpService.prototype.isDataChanged = function (data, frameId, id) {
        var bindingObject = this.getBindingObject(frameId, id);
        var value = bindingObject.toJSON();
        return JSON.stringify(value) !== JSON.stringify(data);
    };
    /**
     * 获取当前行
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 找不到对应数据时抛出无法找到对应数据的异常
     */
    PopUpService.prototype.getBindingObject = function (frameId, id) {
        var frameContext = this.getFrameContext(frameId);
        // 纠正主键
        id = this.getPrimaryValue(frameId, id);
        var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
        // 拿到当前行
        var bindingList = frameContext.bindingData.getValue(bindingPaths);
        if (!bindingList || bindingList.length < 1) {
            throw new Error("\u65E0\u6CD5\u627E\u5230id\u4E3A:" + id + "\u7684\u6570\u636E");
        }
        return bindingList.currentItem;
    };
    /**
     * 构造子表路径
     * @param bindingPath - 绑定路径
     * @param id - id
     * @throws 子表路径错误
     */
    PopUpService.prototype.buildPath = function (bindingPath, id) {
        var path = '/' + id;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = this.frameContext.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    /**
     * 根据组件id获取组件上下文
     * @param frameId - 组件id
     * @returns
     * @throws 无效的组件id
     */
    PopUpService.prototype.getFrameContext = function (frameId) {
        var frameContext = frameId ? this.frameContext.appContext.frameContextManager.getFrameContextById(frameId) : this.frameContext;
        if (!frameContext) {
            throw new Error("\u65E0\u6548\u7684\u7EC4\u4EF6id\uFF1A" + frameId);
        }
        return frameContext;
    };
    /**
     * 获取主键
     * @param frameId - 组件id
     * @param id - 数据id
     * @returns
     * @throws 组件id无效时抛出异常
     */
    PopUpService.prototype.getPrimaryValue = function (frameId, id) {
        if (!id) {
            var frameContext = this.getFrameContext(frameId);
            if (!frameContext) {
                throw new Error("\u65E0\u6548\u7684\u7EC4\u4EF6id\uFF1A" + frameId);
            }
            var bindingList = frameContext.bindingData.getList();
            if (!bindingList || bindingList.length < 1) {
                throw new Error("\u65E0\u6548\u7684\u4E3B\u952E:" + id);
            }
            id = bindingList.currentId;
        }
        return id;
    };
    PopUpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PopUpService.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: Repository },
        { type: LanguageService },
        { type: FormMessageService }
    ]; };
    return PopUpService;
}());
export { PopUpService };
//# sourceMappingURL=data:application/json;base64,