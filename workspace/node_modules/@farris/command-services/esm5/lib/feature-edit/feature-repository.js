import { Injectable, Injector } from "@angular/core";
import { Repository } from '@farris/devkit';
import { BasePathService } from "@farris/rtf";
var FeatureRepository = /** @class */ (function () {
    function FeatureRepository(injector, repository) {
        this.injector = injector;
        this.repository = repository;
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    FeatureRepository.prototype.getFeaturesByMaterialId = function (materialId) {
        var url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops');
        var body = {
            materialID: materialId
        };
        var options = {
            body: body
        };
        var befRepository = this.repository;
        return befRepository.proxy.request(url, 'put', null, options);
    };
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    FeatureRepository.prototype.getConfigedValueByFeatureId = function (materialId, configID, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        var url = BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo');
        var body = { objType: configType, objID: materialId, configID: configID };
        var befRepository = this.repository;
        var options = {
            body: body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    };
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    FeatureRepository.prototype.applyFeatures = function (materialId, charactValue, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        var body = { objType: configType, objID: materialId, charactValue: charactValue };
        var befRepository = this.repository;
        var options = {
            body: body
        };
        return befRepository.proxy.request(BasePathService.convertPath('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid'), 'put', null, options);
    };
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    FeatureRepository.prototype.getHelpInfo = function (helpid, filter, params) {
        var url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
        var httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        var body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        var befRepository = this.repository;
        var options = {
            body: body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    };
    FeatureRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureRepository.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository }
    ]; };
    return FeatureRepository;
}());
export { FeatureRepository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2ZlYXR1cmUtZWRpdC9mZWF0dXJlLXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUM7SUFFRSwyQkFDVSxRQUFrQixFQUNsQixVQUEyQjtRQUQzQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGVBQVUsR0FBVixVQUFVLENBQWlCO0lBQ2pDLENBQUM7SUFDTDs7O09BR0c7SUFDSSxtREFBdUIsR0FBOUIsVUFBK0IsVUFBa0I7UUFDL0MsSUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1FBQzdHLElBQU0sSUFBSSxHQUFHO1lBQ1gsVUFBVSxFQUFFLFVBQVU7U0FDdkIsQ0FBQztRQUNGLElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUNGLElBQU0sYUFBYSxHQUF1QixJQUFJLENBQUMsVUFBZ0MsQ0FBQztRQUNoRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLHVEQUEyQixHQUFsQyxVQUFtQyxVQUFrQixFQUFFLFFBQWdCLEVBQUUsVUFBZ0M7UUFBaEMsMkJBQUEsRUFBQSx3QkFBZ0M7UUFDdkcsSUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1FBQzdHLElBQU0sSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUM7UUFDbEUsSUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUNJLHlDQUFhLEdBQXBCLFVBQXFCLFVBQWtCLEVBQUUsWUFBaUIsRUFBRSxVQUFnQztRQUFoQywyQkFBQSxFQUFBLHdCQUFnQztRQUMxRixJQUFNLElBQUksR0FBRyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxZQUFZLGNBQUEsRUFBRSxDQUFDO1FBQ3RFLElBQU0sYUFBYSxHQUF1QixJQUFJLENBQUMsVUFBZ0MsQ0FBQztRQUNoRixJQUFNLE9BQU8sR0FBRztZQUNkLElBQUksTUFBQTtTQUNMLENBQUM7UUFDRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsbUVBQW1FLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdKLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFDSSx1Q0FBVyxHQUFsQixVQUFtQixNQUFjLEVBQUUsTUFBYyxFQUFFLE1BQVc7UUFDNUQsSUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO1FBQ3hHLElBQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQztRQUMzQixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNoRTtZQUNELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDbkIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUNELElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUN0QixVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBTSxJQUFJLEdBQUc7WUFDWCxNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUN0QyxTQUFTLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Z0JBckZGLFVBQVU7Ozs7Z0JBUlUsUUFBUTtnQkFFcEIsVUFBVTs7SUE0Rm5CLHdCQUFDO0NBQUEsQUF0RkQsSUFzRkM7U0FyRlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5LCBSZXNwb25zZUluZm8gfSBmcm9tIFwiQGZhcnJpcy9iZWZcIjtcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5pbXBvcnQgeyBQcm9wIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgQmFzZVBhdGhTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvcnRmXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGZWF0dXJlUmVwb3NpdG9yeSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxhbnk+LFxyXG4gICkgeyB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u54mp5paZaWTojrflj5bnianmlpnnibnlvoHpobnlj4rnibnlvoHlgLzvvIjlhazlhbHpu5jorqTlgLzvvIlcclxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplpZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGZWF0dXJlc0J5TWF0ZXJpYWxJZChtYXRlcmlhbElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFJlc3BvbnNlSW5mbz4ge1xyXG4gICAgY29uc3QgdXJsID0gQmFzZVBhdGhTZXJ2aWNlLmNvbnZlcnRQYXRoKCcvYXBpL3NjbS9zY21mbmQvdjEuMC9zY21jb21tb25jbXBzZXJ2aWNlL3NlcnZpY2UvZ2V0bWF0ZXJpYWxwcm9wcycpO1xyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgbWF0ZXJpYWxJRDogbWF0ZXJpYWxJZFxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHlcclxuICAgIH07XHJcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PGFueT4gPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdwdXQnLCBudWxsLCBvcHRpb25zKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u54mp5paZaWTlj4rnianmlpnnibnlvoHkv53lrZjlkI7nmoRoYXNo6I635Y+W6K+l54mp5paZ5bey57uP5a2Y5YKo55qE54m55b6B6aG55YC8XHJcbiAgICogQHBhcmFtIG1hdGVyaWFsSWQg54mp5paZSWRcclxuICAgKiBAcGFyYW0gY29uZmlnSUQg5a+55bqU6K+l54mp5paZ55qE54m55b6B6aG5aGFzaFxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHVibGljIGdldENvbmZpZ2VkVmFsdWVCeUZlYXR1cmVJZChtYXRlcmlhbElkOiBzdHJpbmcsIGNvbmZpZ0lEOiBzdHJpbmcsIGNvbmZpZ1R5cGU6IHN0cmluZyA9ICdNYXRlcmlhbHMnKTogT2JzZXJ2YWJsZTxSZXNwb25zZUluZm8+IHtcclxuICAgIGNvbnN0IHVybCA9IEJhc2VQYXRoU2VydmljZS5jb252ZXJ0UGF0aCgnL2FwaS9iZi9kZi92MS4wL2NoYXJhY3Rjb25maWdzZXJ2aWNlL3NlcnZpY2UvZ2V0Y2hhcmFjdGNvbmZpZ2luZm8nKTtcclxuICAgIGNvbnN0IGJvZHkgPSB7IG9ialR5cGU6IGNvbmZpZ1R5cGUsIG9iaklEOiBtYXRlcmlhbElkLCBjb25maWdJRCB9O1xyXG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHlcclxuICAgIH07XHJcbiAgICByZXR1cm4gYmVmUmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHVybCwgJ3B1dCcsIG51bGwsIG9wdGlvbnMpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDkv53lrZjnianmlpnnibnlvoHpoblcclxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplpZFxyXG4gICAqIEBwYXJhbSBjaGFyYWN0VmFsdWUg54m55b6B5YC8XHJcbiAgICogQHBhcmFtIGNvbmZpZ1R5cGUg6YWN572u57G75Z6LXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgYXBwbHlGZWF0dXJlcyhtYXRlcmlhbElkOiBzdHJpbmcsIGNoYXJhY3RWYWx1ZTogYW55LCBjb25maWdUeXBlOiBzdHJpbmcgPSAnTWF0ZXJpYWxzJykge1xyXG4gICAgY29uc3QgYm9keSA9IHsgb2JqVHlwZTogY29uZmlnVHlwZSwgb2JqSUQ6IG1hdGVyaWFsSWQsIGNoYXJhY3RWYWx1ZSB9O1xyXG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHlcclxuICAgIH07XHJcbiAgICByZXR1cm4gYmVmUmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KEJhc2VQYXRoU2VydmljZS5jb252ZXJ0UGF0aCgnL2FwaS9iZi9kZi92MS4wL2NoYXJhY3Rjb25maWdzZXJ2aWNlL3NlcnZpY2UvbWF0Y2hjaGFyYWN0Y29uZmlnaWQnKSwgJ3B1dCcsIG51bGwsIG9wdGlvbnMpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bluK7liqnkv6Hmga9cclxuICAgKiBAcGFyYW0gaGVscGlkIOW4ruWKqWlkXHJcbiAgICogQHBhcmFtIGZpbHRlciDov4fmu6TmnaHku7ZcclxuICAgKiBAcGFyYW0gcGFyYW1zIOWPguaVsFxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHVibGljIGdldEhlbHBJbmZvKGhlbHBpZDogc3RyaW5nLCBmaWx0ZXI6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgdXJsID0gQmFzZVBhdGhTZXJ2aWNlLmNvbnZlcnRQYXRoKCcvYXBpL3NjbS9zY21mbmQvdjEuMC9zY21jb21tb25jbXBzZXJ2aWNlL3NlcnZpY2UvZ2V0aGVscGRhdGEnKTtcclxuICAgIGNvbnN0IGh0dHBQYXJhbXM6IGFueSA9IHt9O1xyXG4gICAgaWYgKHBhcmFtcykge1xyXG4gICAgICBpZiAocGFyYW1zLnBhZ2VJbmRleCkge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ3BhZ2VJbmRleCddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLnBhZ2VJbmRleCAtIDApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChwYXJhbXMucGFnZVNpemUpIHtcclxuICAgICAgICBodHRwUGFyYW1zWydwYWdlU2l6ZSddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLnBhZ2VTaXplIC0gMCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBhcmFtcy5jb25kaXRpb24pIHtcclxuICAgICAgICBodHRwUGFyYW1zWydjb25kaXRpb24nXSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5jb25kaXRpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChwYXJhbXMuc2VhcmNoVmFsdWUpIHtcclxuICAgICAgICBodHRwUGFyYW1zWydzZWFyY2gnXSA9IHBhcmFtcy5zZWFyY2hWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgaGVscElEOiBoZWxwaWQsXHJcbiAgICAgIHF1ZXJ5UGFyYW06IEpTT04uc3RyaW5naWZ5KGh0dHBQYXJhbXMpLFxyXG4gICAgICBmaWx0ZXJTdHI6IGZpbHRlclxyXG4gICAgfTtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8YW55PiA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBib2R5XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdwdXQnLCBudWxsLCBvcHRpb25zKTtcclxuICB9XHJcbn1cclxuIl19