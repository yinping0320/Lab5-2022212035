import { Inject, Injectable, Injector, LOCALE_ID, Optional } from "@angular/core";
import { map } from "rxjs/operators";
import { FeatureRepository } from "./feature-repository";
import { Prop } from "./types";
import { BasePathService } from "@farris/rtf";
var FeatureDataService = /** @class */ (function () {
    function FeatureDataService(injector, repository, localeId) {
        this.injector = injector;
        this.repository = repository;
        this.localeId = localeId;
        this.localeId = this.localeId || 'zh-CHS';
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    FeatureDataService.prototype.getFeaturesByMaterialId = function (materialId) {
        var _this = this;
        return this.repository.getFeaturesByMaterialId(materialId).pipe(map(function (response) {
            if (!response || !response.returnValue) {
                return null;
            }
            var returnValue = JSON.parse(response.returnValue);
            var result = { propset: [], props: [] };
            var propsets = returnValue.propset || null;
            var props = returnValue.props || null;
            if (propsets && Array.isArray(propsets)) {
                propsets.map(function (propset) {
                    propset.name = _this.translateName(propset);
                    return propset;
                });
                result.propset = propsets;
            }
            if (props && Array.isArray(props) && props.length > 0) {
                props.map(function (prop) {
                    // 处理多语
                    prop.name = _this.translateName(prop);
                    // 处理枚举
                    if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {
                        prop.data = JSON.parse(prop.enuminfo);
                    }
                    // 处理必填和只读
                    prop.isreadonly = prop.isreadonly === '1' ? true : false;
                    prop.isrequired = prop.isrequired === '1' ? true : false;
                    return prop;
                });
                result.props = props;
            }
            return result;
        }));
    };
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    FeatureDataService.prototype.getConfigedValueByFeatureId = function (materialId, configID, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map(function (result) {
            return JSON.parse(result);
        }));
    };
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    FeatureDataService.prototype.applyFeatures = function (materialId, charactValue, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map(function (config) {
            return JSON.parse(config);
        }));
    };
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    FeatureDataService.prototype.getHelpInfo = function (helpid, filter, params) {
        var url = BasePathService.convertPath('/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata');
        var httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        var body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        var befRepository = null; //this.repository as BefRepository<any>;
        var options = {
            body: body
        };
        return befRepository.proxy.request(url, 'put', null, options).pipe(map(function (result) { return JSON.parse(result); }));
    };
    /**
     * 国际化特征项或特征集名称
     * @param object 特征集或特征项对象
     * @returns
     */
    FeatureDataService.prototype.translateName = function (object) {
        if (!object) {
            return null;
        }
        var name = null;
        switch (this.localeId) {
            case 'en':
                {
                    name = object['name_en'];
                }
                break;
            case 'zh-CHS':
                {
                    name = object['name_chs'];
                }
                break;
            case 'zh-CHT':
                {
                    name = object['name_cht'];
                }
                break;
            default: name = object['name_chs'];
        }
        return name;
    };
    FeatureDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureDataService.ctorParameters = function () { return [
        { type: Injector },
        { type: FeatureRepository },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return FeatureDataService;
}());
export { FeatureDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZmVhdHVyZS1lZGl0L2ZlYXR1cmUtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSWxGLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUM7SUFFRSw0QkFDVSxRQUFrQixFQUNsQixVQUE2QixFQUNFLFFBQWlCO1FBRmhELGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7UUFDRSxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRXhELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUM7SUFDNUMsQ0FBQztJQUNEOzs7T0FHRztJQUNJLG9EQUF1QixHQUE5QixVQUErQixVQUFrQjtRQUFqRCxpQkFtQ0M7UUFsQ0MsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDN0QsR0FBRyxDQUFDLFVBQUMsUUFBc0I7WUFDekIsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3RDLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZ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O0lBQ0osQ0FBQztJQUNEOzs7O09BSUc7SUFDSywwQ0FBYSxHQUFyQixVQUFzQixNQUFrQztRQUN0RCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckIsS0FBSyxJQUFJO2dCQUFFO29CQUNULElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQzFCO2dCQUFDLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQUU7b0JBQ2IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDM0I7Z0JBQUMsTUFBTTtZQUNSLEtBQUssUUFBUTtnQkFBRTtvQkFDYixJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUMzQjtnQkFBQyxNQUFNO1lBQ1IsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBcElGLFVBQVU7Ozs7Z0JBVGtCLFFBQVE7Z0JBSzVCLGlCQUFpQjs2Q0FTckIsUUFBUSxZQUFJLE1BQU0sU0FBQyxTQUFTOztJQWdJakMseUJBQUM7Q0FBQSxBQXJJRCxJQXFJQztTQXBJWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yLCBMT0NBTEVfSUQsIE9wdGlvbmFsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSwgUmVzcG9uc2VJbmZvIH0gZnJvbSBcIkBmYXJyaXMvYmVmXCI7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCwgUmVzdGZ1bFNlcnZpY2UsIFJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgRmVhdHVyZVJlcG9zaXRvcnkgfSBmcm9tIFwiLi9mZWF0dXJlLXJlcG9zaXRvcnlcIjtcclxuaW1wb3J0IHsgUHJvcCB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IEJhc2VQYXRoU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3J0ZlwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmVhdHVyZURhdGFTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSByZXBvc2l0b3J5OiBGZWF0dXJlUmVwb3NpdG9yeSxcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZUlkPzogc3RyaW5nXHJcbiAgKSB7XHJcbiAgICB0aGlzLmxvY2FsZUlkID0gdGhpcy5sb2NhbGVJZCB8fCAnemgtQ0hTJztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u54mp5paZaWTojrflj5bnianmlpnnibnlvoHpobnlj4rnibnlvoHlgLzvvIjlhazlhbHpu5jorqTlgLzvvIlcclxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplpZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGZWF0dXJlc0J5TWF0ZXJpYWxJZChtYXRlcmlhbElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb3AuSVJldHVyblZhbHVlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmdldEZlYXR1cmVzQnlNYXRlcmlhbElkKG1hdGVyaWFsSWQpLnBpcGUoXHJcbiAgICAgIG1hcCgocmVzcG9uc2U6IFJlc3BvbnNlSW5mbykgPT4ge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnJldHVyblZhbHVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLnJldHVyblZhbHVlKTtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFByb3AuSVJldHVyblZhbHVlID0geyBwcm9wc2V0OiBbXSwgcHJvcHM6IFtdIH07XHJcbiAgICAgICAgY29uc3QgcHJvcHNldHMgPSByZXR1cm5WYWx1ZS5wcm9wc2V0IHx8IG51bGw7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSByZXR1cm5WYWx1ZS5wcm9wcyB8fCBudWxsO1xyXG4gICAgICAgIGlmIChwcm9wc2V0cyAmJiBBcnJheS5pc0FycmF5KHByb3BzZXRzKSkge1xyXG4gICAgICAgICAgcHJvcHNldHMubWFwKChwcm9wc2V0OiBQcm9wLklQcm9wU2V0KSA9PiB7XHJcbiAgICAgICAgICAgIHByb3BzZXQubmFtZSA9IHRoaXMudHJhbnNsYXRlTmFtZShwcm9wc2V0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHByb3BzZXQ7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJlc3VsdC5wcm9wc2V0ID0gcHJvcHNldHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9wcyAmJiBBcnJheS5pc0FycmF5KHByb3BzKSAmJiBwcm9wcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBwcm9wcy5tYXAoKHByb3A6IFByb3AuSVByb3ApID0+IHtcclxuICAgICAgICAgICAgLy8g5aSE55CG5aSa6K+tXHJcbiAgICAgICAgICAgIHByb3AubmFtZSA9IHRoaXMudHJhbnNsYXRlTmFtZShwcm9wKTtcclxuICAgICAgICAgICAgLy8g5aSE55CG5p6a5Li+XHJcbiAgICAgICAgICAgIGlmIChwcm9wLmlucHV0dHlwZSA9PT0gUHJvcC5JbnB1dFR5cGUuZW51bSAmJiBwcm9wLmVudW1pbmZvKSB7XHJcbiAgICAgICAgICAgICAgcHJvcC5kYXRhID0gSlNPTi5wYXJzZShwcm9wLmVudW1pbmZvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDlpITnkIblv4Xloavlkozlj6ror7tcclxuICAgICAgICAgICAgcHJvcC5pc3JlYWRvbmx5ID0gcHJvcC5pc3JlYWRvbmx5ID09PSAnMScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIHByb3AuaXNyZXF1aXJlZCA9IHByb3AuaXNyZXF1aXJlZCA9PT0gJzEnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmVzdWx0LnByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmoLnmja7nianmlplpZOWPiueJqeaWmeeJueW+geS/neWtmOWQjueahGhhc2jojrflj5bor6Xnianmlpnlt7Lnu4/lrZjlgqjnmoTnibnlvoHpobnlgLxcclxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplJZFxyXG4gICAqIEBwYXJhbSBjb25maWdJRCDlr7nlupTor6XnianmlpnnmoTnibnlvoHpobloYXNoXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29uZmlnZWRWYWx1ZUJ5RmVhdHVyZUlkKG1hdGVyaWFsSWQ6IHN0cmluZywgY29uZmlnSUQ6IHN0cmluZywgY29uZmlnVHlwZTogc3RyaW5nID0gJ01hdGVyaWFscycpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5nZXRDb25maWdlZFZhbHVlQnlGZWF0dXJlSWQobWF0ZXJpYWxJZCwgY29uZmlnSUQsIGNvbmZpZ1R5cGUpLnBpcGUobWFwKChyZXN1bHQ6IGFueSkgPT4ge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXN1bHQpO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDkv53lrZjnianmlpnnibnlvoHpoblcclxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplpZFxyXG4gICAqIEBwYXJhbSBjaGFyYWN0VmFsdWUg54m55b6B5YC8XHJcbiAgICogQHBhcmFtIGNvbmZpZ1R5cGUg6YWN572u57G75Z6LXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgYXBwbHlGZWF0dXJlcyhtYXRlcmlhbElkOiBzdHJpbmcsIGNoYXJhY3RWYWx1ZTogYW55LCBjb25maWdUeXBlOiBzdHJpbmcgPSAnTWF0ZXJpYWxzJykge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5hcHBseUZlYXR1cmVzKG1hdGVyaWFsSWQsIGNoYXJhY3RWYWx1ZSwgY29uZmlnVHlwZSkucGlwZShtYXAoKGNvbmZpZzogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGNvbmZpZyk7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW4ruWKqeS/oeaBr1xyXG4gICAqIEBwYXJhbSBoZWxwaWQg5biu5YqpaWRcclxuICAgKiBAcGFyYW0gZmlsdGVyIOi/h+a7pOadoeS7tlxyXG4gICAqIEBwYXJhbSBwYXJhbXMg5Y+C5pWwXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SGVscEluZm8oaGVscGlkOiBzdHJpbmcsIGZpbHRlcjogc3RyaW5nLCBwYXJhbXM6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB1cmwgPSBCYXNlUGF0aFNlcnZpY2UuY29udmVydFBhdGgoJy9hcGkvc2NtL3NjbWZuZC92MS4wL3NjbWNvbW1vbmNtcHNlcnZpY2Uvc2VydmljZS9nZXRoZWxwZGF0YScpO1xyXG4gICAgY29uc3QgaHR0cFBhcmFtczogYW55ID0ge307XHJcbiAgICBpZiAocGFyYW1zKSB7XHJcbiAgICAgIGlmIChwYXJhbXMucGFnZUluZGV4KSB7XHJcbiAgICAgICAgaHR0cFBhcmFtc1sncGFnZUluZGV4J10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMucGFnZUluZGV4IC0gMCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBhcmFtcy5wYWdlU2l6ZSkge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ3BhZ2VTaXplJ10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMucGFnZVNpemUgLSAwKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocGFyYW1zLmNvbmRpdGlvbikge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ2NvbmRpdGlvbiddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLmNvbmRpdGlvbik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBhcmFtcy5zZWFyY2hWYWx1ZSkge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ3NlYXJjaCddID0gcGFyYW1zLnNlYXJjaFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICBoZWxwSUQ6IGhlbHBpZCxcclxuICAgICAgcXVlcnlQYXJhbTogSlNPTi5zdHJpbmdpZnkoaHR0cFBhcmFtcyksXHJcbiAgICAgIGZpbHRlclN0cjogZmlsdGVyXHJcbiAgICB9O1xyXG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gbnVsbDsvL3RoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBib2R5XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdwdXQnLCBudWxsLCBvcHRpb25zKS5waXBlKFxyXG4gICAgICBtYXAoKHJlc3VsdDogYW55KSA9PiBKU09OLnBhcnNlKHJlc3VsdCkpXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlm73pmYXljJbnibnlvoHpobnmiJbnibnlvoHpm4blkI3np7BcclxuICAgKiBAcGFyYW0gb2JqZWN0IOeJueW+gembhuaIlueJueW+gemhueWvueixoVxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB0cmFuc2xhdGVOYW1lKG9iamVjdDogUHJvcC5JUHJvcFNldCB8IFByb3AuSVByb3ApOiBzdHJpbmcge1xyXG4gICAgaWYgKCFvYmplY3QpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBsZXQgbmFtZSA9IG51bGw7XHJcbiAgICBzd2l0Y2ggKHRoaXMubG9jYWxlSWQpIHtcclxuICAgICAgY2FzZSAnZW4nOiB7XHJcbiAgICAgICAgbmFtZSA9IG9iamVjdFsnbmFtZV9lbiddO1xyXG4gICAgICB9IGJyZWFrO1xyXG4gICAgICBjYXNlICd6aC1DSFMnOiB7XHJcbiAgICAgICAgbmFtZSA9IG9iamVjdFsnbmFtZV9jaHMnXTtcclxuICAgICAgfSBicmVhaztcclxuICAgICAgY2FzZSAnemgtQ0hUJzoge1xyXG4gICAgICAgIG5hbWUgPSBvYmplY3RbJ25hbWVfY2h0J107XHJcbiAgICAgIH0gYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6IG5hbWUgPSBvYmplY3RbJ25hbWVfY2hzJ107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZTtcclxuICB9XHJcbn1cclxuIl19