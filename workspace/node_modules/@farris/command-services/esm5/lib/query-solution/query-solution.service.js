import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
import { FrameContext } from '@farris/devkit';
import { FrameworkSessionService } from '@farris/bef';
var QuerySolutionService = /** @class */ (function () {
    function QuerySolutionService(frameContext, frameworkSessionService) {
        this.frameContext = frameContext;
        this.frameworkSessionService = frameworkSessionService;
    }
    QuerySolutionService.prototype.getUserSessionId = function () {
        return this.frameworkSessionService.getUserSessionId();
    };
    QuerySolutionService.prototype.setFilterConditions = function (params) {
        var queryConditionHandler;
        var filterConditionList = [];
        params.forEach(function (qc) {
            if (!qc.value.isEmpty()) {
                queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                queryConditionHandler && filterConditionList.push.apply(filterConditionList, tslib_1.__spread(queryConditionHandler.convert(qc)));
            }
        });
        //设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // const originalConditions = this.getOriginalQueryConditions(filterConditionList);
        this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);
    };
    QuerySolutionService.prototype.setCurrentQueryConditions = function (conditions) {
        this.frameContext.uiState['currentQueryConditions'] = conditions;
    };
    QuerySolutionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    QuerySolutionService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FrameworkSessionService }
    ]; };
    return QuerySolutionService;
}());
export { QuerySolutionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9xdWVyeS1zb2x1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdEQ7SUFHRSw4QkFDVSxZQUEwQixFQUMxQix1QkFBZ0Q7UUFEaEQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUcxRCxDQUFDO0lBRUQsK0NBQWdCLEdBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRU0sa0RBQW1CLEdBQTFCLFVBQTJCLE1BQTZCO1FBQ3RELElBQUkscUJBQTZDLENBQUM7UUFDbEQsSUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUU7WUFDZixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDdkIscUJBQXFCLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztnQkFDM0cscUJBQXFCLElBQUksbUJBQW1CLENBQUMsSUFBSSxPQUF4QixtQkFBbUIsbUJBQVMscUJBQXFCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUM7YUFDekY7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILDZFQUE2RTtRQUM3RSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN2RixtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVNLHdEQUF5QixHQUFoQyxVQUFpQyxVQUE0QjtRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUNuRSxDQUFDOztnQkEvQkYsVUFBVTs7OztnQkFKRixZQUFZO2dCQUVaLHVCQUF1Qjs7SUF1RGhDLDJCQUFDO0NBQUEsQUFyREQsSUFxREM7U0FwRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJ0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9xdWVyeWNvbmRpdGlvbi5oYW5kbGVyLmZhY3RvcnknO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IElRdWVyeVNvbHV0aW9uSGFuZGxlcixRdWVyeVNvbHV0aW9uQ29tcG9uZW50IH0gZnJvbSAnQGdzcC1jbXAvcXVlcnlzb2x1dGlvbic7XHJcbmltcG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUXVlcnlTb2x1dGlvblNlcnZpY2UgaW1wbGVtZW50cyBJUXVlcnlTb2x1dGlvbkhhbmRsZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBwcml2YXRlIGZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlOiBGcmFtZXdvcmtTZXNzaW9uU2VydmljZVxyXG4gICkge1xyXG5cclxuICB9XHJcblxyXG4gIGdldFVzZXJTZXNzaW9uSWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlLmdldFVzZXJTZXNzaW9uSWQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRGaWx0ZXJDb25kaXRpb25zKHBhcmFtczogQXJyYXk8UXVlcnlDb25kaXRpb24+KTogdm9pZCB7XHJcbiAgICBsZXQgcXVlcnlDb25kaXRpb25IYW5kbGVyOiBJUXVlcnlDb25kaXRpb25IYW5kbGVyO1xyXG4gICAgY29uc3QgZmlsdGVyQ29uZGl0aW9uTGlzdCA9IFtdO1xyXG4gICAgcGFyYW1zLmZvckVhY2gocWMgPT4ge1xyXG4gICAgICBpZiAoIXFjLnZhbHVlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgIHF1ZXJ5Q29uZGl0aW9uSGFuZGxlciA9IFF1ZXJ5Q29uZGl0aW9uSGFuZGxlckZhY3RvcnkuZ2V0SW5zdGFuY2UoKS5nZXRIYW5kbGVyKHFjLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSk7XHJcbiAgICAgICAgcXVlcnlDb25kaXRpb25IYW5kbGVyICYmIGZpbHRlckNvbmRpdGlvbkxpc3QucHVzaCguLi5xdWVyeUNvbmRpdGlvbkhhbmRsZXIuY29udmVydChxYykpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8v6K6+572u5YiwTmdDb21tYW5kIHBhcmFtcy5maWx0ZXLlsZ7mgKfkuIrvvJp7VUlTVEFURX4vcm9vdC1jb21wb25lbnQvZmlsdGVyQ29uZGl0aW9uTGlzdH1cclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGVbJ2ZpbHRlckNvbmRpdGlvbkxpc3QnXSA9IEpTT04uc3RyaW5naWZ5KGZpbHRlckNvbmRpdGlvbkxpc3QpO1xyXG4gICAgLy8gY29uc3Qgb3JpZ2luYWxDb25kaXRpb25zID0gdGhpcy5nZXRPcmlnaW5hbFF1ZXJ5Q29uZGl0aW9ucyhmaWx0ZXJDb25kaXRpb25MaXN0KTtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGVbJ29yaWdpbmFsRmlsdGVyQ29uZGl0aW9uTGlzdCddID0gSlNPTi5zdHJpbmdpZnkoZmlsdGVyQ29uZGl0aW9uTGlzdCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0Q3VycmVudFF1ZXJ5Q29uZGl0aW9ucyhjb25kaXRpb25zOiBRdWVyeUNvbmRpdGlvbltdKTogdm9pZCB7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC51aVN0YXRlWydjdXJyZW50UXVlcnlDb25kaXRpb25zJ10gPSBjb25kaXRpb25zO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDov5jljp/ov4fmu6TmnaHku7bkuK3nmoRlbmNvZGVcclxuICAgKiBAcGFyYW0gY29uZGl0aW9ucyDmn6Xor6LmlrnmoYjmnoTpgKDlroznmoTov4fmu6TmnaHku7ZcclxuICAgKi9cclxuICAvLyBwcml2YXRlIGdldE9yaWdpbmFsUXVlcnlDb25kaXRpb25zKGNvbmRpdGlvbnM6IEFycmF5PGFueT4pOiBBcnJheTxhbnk+IHtcclxuICAvLyAgIGNvbmRpdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbmRpdGlvbnMpKTtcclxuICAvLyAgIGlmIChjb25kaXRpb25zICYmIEFycmF5LmlzQXJyYXkoY29uZGl0aW9ucykgJiYgY29uZGl0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgLy8gICAgIGNvbmRpdGlvbnMgPSBjb25kaXRpb25zLm1hcCgoaXRlbSkgPT4ge1xyXG4gIC8vICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdWYWx1ZScpKSB7XHJcbiAgLy8gICAgICAgICBpdGVtLlZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0ZW0uVmFsdWUpO1xyXG4gIC8vICAgICAgIH0gZWxzZSBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gIC8vICAgICAgICAgY29uc3QgdmFsdWUgPSBpdGVtLnZhbHVlO1xyXG4gIC8vICAgICAgICAgZGVsZXRlIGl0ZW0udmFsdWU7XHJcbiAgLy8gICAgICAgICBpdGVtLlZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICAvLyAgICAgICB9XHJcbiAgLy8gICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgLy8gICAgIH0pO1xyXG4gIC8vICAgfVxyXG4gIC8vICAgcmV0dXJuIGNvbmRpdGlvbnM7XHJcbiAgLy8gfVxyXG5cclxufVxyXG4iXX0=