import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var SingleYearHandler = /** @class */ (function () {
    function SingleYearHandler() {
    }
    SingleYearHandler.prototype.convert = function (qc) {
        var yv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': yv.yearValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    };
    return SingleYearHandler;
}());
export { SingleYearHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLXllYXIuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9oYW5kbGVycy9zaW5nbGUteWVhci5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFEO0lBQUE7SUFhQSxDQUFDO0lBWkcsbUNBQU8sR0FBUCxVQUFRLEVBQWtCO1FBQ3RCLElBQU0sRUFBRSxHQUFJLEVBQUUsQ0FBQyxLQUF5QixDQUFDO1FBQ3pDLE9BQU8sQ0FBQztnQkFDSixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUs7Z0JBQ3pGLE9BQU8sRUFBRyxFQUFFLENBQUMsU0FBUztnQkFDdEIsVUFBVSxFQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRztnQkFDaEYsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO2dCQUM3QixVQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsSUFBSSxJQUFJO2dCQUMvQixVQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsSUFBSSxJQUFJO2FBQ2xDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUFiRCxJQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uLCBTaW5nbGVZZWFyVmFsdWUgfSBmcm9tIFwiQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2luZ2xlWWVhckhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xyXG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBjb25zdCB5diA9IChxYy52YWx1ZSBhcyBTaW5nbGVZZWFyVmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAnQ29tcGFyZScgOiAocWMuY29tcGFyZVR5cGUgfHwgcWMuY29tcGFyZVR5cGUgPT09IDApID8gcWMuY29tcGFyZVR5cGUgOiBDb21wYXJlVHlwZS5FcXVhbCxcclxuICAgICAgICAgICAgJ1ZhbHVlJyA6IHl2LnllYXJWYWx1ZSxcclxuICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IChxYy5yZWxhdGlvbiB8fCBxYy5yZWxhdGlvbiA9PT0gMCkgPyBxYy5yZWxhdGlvbiA6IFJlbGF0aW9uVHlwZS5BbmQsIC8vYW5kIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZSxcclxuICAgICAgICAgICAgJ0xicmFja2V0JzogcWMuTGJyYWNrZXQgfHwgbnVsbCxcclxuICAgICAgICAgICAgJ1JicmFja2V0JzogcWMuUmJyYWNrZXQgfHwgbnVsbFxyXG4gICAgICAgIH1dO1xyXG4gICAgfVxyXG59Il19