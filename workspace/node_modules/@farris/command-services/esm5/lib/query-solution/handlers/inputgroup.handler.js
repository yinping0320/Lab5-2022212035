import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var InputGroupHandler = /** @class */ (function () {
    function InputGroupHandler() {
    }
    //qc.comparetype只有等于、相似
    InputGroupHandler.prototype.convert = function (qc) {
        var igv = qc.value;
        var arr = [];
        if (igv.isInputText || igv.textField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': igv.textValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach(function (itemValue) {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': itemValue,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    };
    return InputGroupHandler;
}());
export { InputGroupHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBc0NBLENBQUM7SUFyQ0MsdUJBQXVCO0lBQ3ZCLG1DQUFPLEdBQVAsVUFBUSxFQUFrQjtRQUN4QixJQUFNLEdBQUcsR0FBSSxFQUFFLENBQUMsS0FBeUIsQ0FBQztRQUMxQyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZixJQUFJLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDUCxhQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVM7Z0JBQzNCLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQ3ZGLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FBUztnQkFDdEIsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRztnQkFDL0UsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2dCQUM5QixVQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsSUFBSSxJQUFJO2dCQUMvQixVQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsSUFBSSxJQUFJO2FBQ2hDLENBQUMsQ0FBQztZQUNILE9BQU8sR0FBRyxDQUFDO1NBQ1o7YUFDSTtZQUNILEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDcEIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO29CQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLO29CQUN4RixPQUFPLEVBQUUsU0FBUztvQkFDbEIsVUFBVSxFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUU7b0JBQ3hGLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDL0IsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFHLENBQUM7Z0JBQzVELEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUN6RSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDdEcsT0FBTyxHQUFHLENBQUM7YUFDWjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQzthQUNYO1NBQ0Y7SUFDSCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBdENELElBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uLCBJbnB1dEdyb3VwVmFsdWUgfSBmcm9tIFwiQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cEhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIHtcclxuICAvL3FjLmNvbXBhcmV0eXBl5Y+q5pyJ562J5LqO44CB55u45Ly8XHJcbiAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgIGNvbnN0IGlndiA9IChxYy52YWx1ZSBhcyBJbnB1dEdyb3VwVmFsdWUpO1xyXG4gICAgY29uc3QgYXJyID0gW107XHJcblxyXG4gICAgaWYgKGlndi5pc0lucHV0VGV4dCB8fCBpZ3YudGV4dEZpZWxkID09IG51bGwpIHtcclxuICAgICAgYXJyLnB1c2goe1xyXG4gICAgICAgICdGaWx0ZXJGaWVsZCc6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAnQ29tcGFyZSc6IChxYy5jb21wYXJlVHlwZSB8fCBxYy5jb21wYXJlVHlwZSA9PT0gMCkgPyBxYy5jb21wYXJlVHlwZSA6IENvbXBhcmVUeXBlLkxpa2UsXHJcbiAgICAgICAgJ1ZhbHVlJzogaWd2LnRleHRWYWx1ZSwvL2VuY29kZVVSSUNvbXBvbmVudChpZ3YudGV4dFZhbHVlKSxcclxuICAgICAgICAnUmVsYXRpb24nOiAocWMucmVsYXRpb24gfHwgcWMucmVsYXRpb24gPT09IDApID8gcWMucmVsYXRpb24gOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZSxcclxuICAgICAgICAnTGJyYWNrZXQnOiBxYy5MYnJhY2tldCB8fCBudWxsLFxyXG4gICAgICAgICdSYnJhY2tldCc6IHFjLlJicmFja2V0IHx8IG51bGxcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWd2LmdldE9yaWdpbmFsVmFsdWUoKS5zcGxpdCgnLCcpLmZvckVhY2goaXRlbVZhbHVlID0+IHtcclxuICAgICAgICBpdGVtVmFsdWUgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgJ0ZpbHRlckZpZWxkJzogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgJ0NvbXBhcmUnOiAocWMuY29tcGFyZVR5cGUgfHwgcWMuY29tcGFyZVR5cGUgPT09IDApID8gcWMuY29tcGFyZVR5cGUgOiBDb21wYXJlVHlwZS5FcXVhbCxcclxuICAgICAgICAgICdWYWx1ZSc6IGl0ZW1WYWx1ZSxcclxuICAgICAgICAgICdSZWxhdGlvbic6IHFjLmNvbXBhcmVUeXBlID09PSBDb21wYXJlVHlwZS5Ob3RFcXVhbCA/IFJlbGF0aW9uVHlwZS5BbmQgOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChhcnIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGFyclswXVsnTGJyYWNrZXQnXSA9IHFjLkxicmFja2V0ID8gKHFjLkxicmFja2V0ICsgJygnKSA6JygnO1xyXG4gICAgICAgIGFyclthcnIubGVuZ3RoIC0xXVsnUmJyYWNrZXQnXSA9IHFjLlJicmFja2V0ID8gKHFjLlJicmFja2V0ICsgJyknKSA6ICcpJztcclxuICAgICAgICBhcnJbYXJyLmxlbmd0aCAtIDFdWydSZWxhdGlvbiddID0gKHFjLnJlbGF0aW9uIHx8IHFjLnJlbGF0aW9uID09PSAwKSA/IHFjLnJlbGF0aW9uIDogUmVsYXRpb25UeXBlLkFuZDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=