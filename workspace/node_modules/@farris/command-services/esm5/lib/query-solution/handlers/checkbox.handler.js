import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var CheckBoxHandler = /** @class */ (function () {
    function CheckBoxHandler() {
    }
    CheckBoxHandler.prototype.convert = function (qc) {
        //多选框的qc.compareType 只有等于
        var arr = [];
        var tv = qc.value;
        if (tv.value.length == 1)
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': tv.value[0],
                    'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                    'Expresstype': ValueType.Value,
                    'Lbracket': qc.Lbracket || null,
                    'Rbracket': qc.Rbracket || null
                }];
        tv.value.forEach(function (tvv) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': tvv,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        });
        arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
        arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
        arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
        return arr;
    };
    return CheckBoxHandler;
}());
export { CheckBoxHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9oYW5kbGVycy9jaGVja2JveC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFEO0lBQUE7SUE2QkEsQ0FBQztJQTVCRyxpQ0FBTyxHQUFQLFVBQVEsRUFBa0I7UUFDdEIseUJBQXlCO1FBQ3pCLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQU0sRUFBRSxHQUFJLEVBQUUsQ0FBQyxLQUF1QixDQUFDO1FBQ3ZDLElBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQztZQUNuQixPQUFPLENBQUM7b0JBQ0osYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDckIsVUFBVSxFQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRztvQkFDaEYsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO29CQUM3QixVQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsSUFBSSxJQUFJO29CQUMvQixVQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsSUFBSSxJQUFJO2lCQUNsQyxDQUFDLENBQUM7UUFDUCxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDaEIsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDTCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztnQkFDN0IsT0FBTyxFQUFHLEdBQUc7Z0JBQ2IsVUFBVSxFQUFHLFlBQVksQ0FBQyxFQUFFO2dCQUM1QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7YUFDaEMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFHLENBQUM7UUFDNUQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDekUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFDckcsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBN0JELElBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uLCBDaGVja0JveFZhbHVlIH0gZnJvbSBcIkBmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uXCI7XHJcbmltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrQm94SGFuZGxlciBpbXBsZW1lbnRzIElRdWVyeUNvbmRpdGlvbkhhbmRsZXJ7XHJcbiAgICBjb252ZXJ0KHFjOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIC8v5aSa6YCJ5qGG55qEcWMuY29tcGFyZVR5cGUg5Y+q5pyJ562J5LqOXHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgY29uc3QgdHYgPSAocWMudmFsdWUgYXMgQ2hlY2tCb3hWYWx1ZSk7XHJcbiAgICAgICAgaWYodHYudmFsdWUubGVuZ3RoID09IDEpXHJcbiAgICAgICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IHR2LnZhbHVlWzBdLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IChxYy5yZWxhdGlvbiB8fCBxYy5yZWxhdGlvbiA9PT0gMCkgPyBxYy5yZWxhdGlvbiA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZSxcclxuICAgICAgICAgICAgICAgICdMYnJhY2tldCc6IHFjLkxicmFja2V0IHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAnUmJyYWNrZXQnOiBxYy5SYnJhY2tldCB8fCBudWxsXHJcbiAgICAgICAgICAgIH1dO1xyXG4gICAgICAgIHR2LnZhbHVlLmZvckVhY2godHZ2ID0+IHtcclxuICAgICAgICAgICAgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IHR2dixcclxuICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcnJbMF1bJ0xicmFja2V0J10gPSBxYy5MYnJhY2tldCA/IChxYy5MYnJhY2tldCArICcoJykgOicoJztcclxuICAgICAgICBhcnJbYXJyLmxlbmd0aCAtMV1bJ1JicmFja2V0J10gPSBxYy5SYnJhY2tldCA/IChxYy5SYnJhY2tldCArICcpJykgOiAnKSc7XHJcbiAgICAgICAgYXJyW2Fyci5sZW5ndGggLTFdWydSZWxhdGlvbiddID0gKHFjLnJlbGF0aW9uIHx8IHFjLnJlbGF0aW9uID09PSAwKSA/IHFjLnJlbGF0aW9uIDogUmVsYXRpb25UeXBlLkFuZDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfVxyXG59Il19