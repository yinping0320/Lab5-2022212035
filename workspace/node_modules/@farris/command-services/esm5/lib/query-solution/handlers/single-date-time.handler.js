import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var SingleDateTimeHandler = /** @class */ (function () {
    function SingleDateTimeHandler() {
    }
    SingleDateTimeHandler.prototype.convert = function (qc) {
        var dtv = qc.value;
        return [{
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                'Value': dtv.datetimeValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value,
                'Lbracket': qc.Lbracket || null,
                'Rbracket': qc.Rbracket || null
            }];
    };
    return SingleDateTimeHandler;
}());
export { SingleDateTimeHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLWRhdGUtdGltZS5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL3NpbmdsZS1kYXRlLXRpbWUuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBYUEsQ0FBQztJQVpHLHVDQUFPLEdBQVAsVUFBUSxFQUFrQjtRQUN0QixJQUFNLEdBQUcsR0FBSSxFQUFFLENBQUMsS0FBNkIsQ0FBQztRQUM5QyxPQUFPLENBQUM7Z0JBQ0osYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLO2dCQUN6RixPQUFPLEVBQUcsR0FBRyxDQUFDLGFBQWE7Z0JBQzNCLFVBQVUsRUFBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUc7Z0JBQ2hGLGFBQWEsRUFBQyxTQUFTLENBQUMsS0FBSztnQkFDN0IsVUFBVSxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksSUFBSTtnQkFDL0IsVUFBVSxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksSUFBSTthQUNsQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQUFDLEFBYkQsSUFhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9pcXVlcnljb25kaXRpb24uaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiwgU2luZ2xlRGF0ZVRpbWVWYWx1ZSB9IGZyb20gXCJAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvblwiO1xyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaW5nbGVEYXRlVGltZUhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xyXG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBjb25zdCBkdHYgPSAocWMudmFsdWUgYXMgU2luZ2xlRGF0ZVRpbWVWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIFt7XHJcbiAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICdDb21wYXJlJyA6IChxYy5jb21wYXJlVHlwZSB8fCBxYy5jb21wYXJlVHlwZSA9PT0gMCkgPyBxYy5jb21wYXJlVHlwZSA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAnVmFsdWUnIDogZHR2LmRhdGV0aW1lVmFsdWUsXHJcbiAgICAgICAgICAgICdSZWxhdGlvbicgOiAocWMucmVsYXRpb24gfHwgcWMucmVsYXRpb24gPT09IDApID8gcWMucmVsYXRpb24gOiBSZWxhdGlvblR5cGUuQW5kLC8vYW5kIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZSxcclxuICAgICAgICAgICAgJ0xicmFja2V0JzogcWMuTGJyYWNrZXQgfHwgbnVsbCxcclxuICAgICAgICAgICAgJ1JicmFja2V0JzogcWMuUmJyYWNrZXQgfHwgbnVsbFxyXG4gICAgICAgIH1dO1xyXG4gICAgfVxyXG59Il19