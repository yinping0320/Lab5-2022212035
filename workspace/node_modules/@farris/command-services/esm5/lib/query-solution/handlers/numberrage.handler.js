import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var NumberRangeHandler = /** @class */ (function () {
    function NumberRangeHandler() {
    }
    NumberRangeHandler.prototype.convert = function (qc) {
        var arr = [];
        var nrv = qc.value;
        (nrv.startValue != null) && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterOrEqual,
            'Value': nrv.startValue,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        (nrv.endValue != null) && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessOrEqual,
            'Value': nrv.endValue,
            'Relation': RelationType.And,
            'Expresstype': ValueType.Value
        });
        return arr;
    };
    return NumberRangeHandler;
}());
export { NumberRangeHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycmFnZS5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL251bWJlcnJhZ2UuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBcUJBLENBQUM7SUFwQkcsb0NBQU8sR0FBUCxVQUFRLEVBQWtCO1FBQ3RCLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQU0sR0FBRyxHQUFJLEVBQUUsQ0FBQyxLQUEwQixDQUFDO1FBQzNDLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ2pDLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztZQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGNBQWM7WUFDdEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxVQUFVO1lBQ3hCLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRztZQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7U0FDakMsQ0FBQyxDQUFDO1FBQ0gsQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDL0IsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO1lBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsV0FBVztZQUNuQyxPQUFPLEVBQUcsR0FBRyxDQUFDLFFBQVE7WUFDdEIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO1lBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztTQUNqQyxDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFyQkQsSUFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIE51bWJlclJhbmdlVmFsdWUgfSBmcm9tIFwiQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTnVtYmVyUmFuZ2VIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcntcclxuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgY29uc3QgbnJ2ID0gKHFjLnZhbHVlIGFzIE51bWJlclJhbmdlVmFsdWUpO1xyXG4gICAgICAgIChucnYuc3RhcnRWYWx1ZSAhPSBudWxsKSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkdyZWF0ZXJPckVxdWFsLCAvL0dyZWF0ZXJPckVxdWFsXHJcbiAgICAgICAgICAgICdWYWx1ZScgOiBucnYuc3RhcnRWYWx1ZSxcclxuICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsIC8vYW5kXHJcbiAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIChucnYuZW5kVmFsdWUgIT0gbnVsbCkgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5MZXNzT3JFcXVhbCwgLy9MZXNzT3JFcXVhbFxyXG4gICAgICAgICAgICAnVmFsdWUnIDogbnJ2LmVuZFZhbHVlLFxyXG4gICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCwvL2FuZFxyXG4gICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxufSJdfQ==