import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var SmartHelpHandler = /** @class */ (function () {
    function SmartHelpHandler() {
    }
    SmartHelpHandler.prototype.convert = function (qc) {
        var shv = qc.value;
        if (shv.value.length == 0)
            return [];
        var arr = [];
        if (shv.isInputText || shv.valueField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Like,
                'Value': shv.textValue,
                'Relation': (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            shv.getOriginalValue().split(',').forEach(function (id) {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': (qc.compareType || qc.compareType === 0) ? qc.compareType : CompareType.Equal,
                    'Value': id,
                    'Relation': qc.compareType === CompareType.NotEqual ? RelationType.And : RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = qc.Lbracket ? (qc.Lbracket + '(') : '(';
                arr[arr.length - 1]['Rbracket'] = qc.Rbracket ? (qc.Rbracket + ')') : ')';
                arr[arr.length - 1]['Relation'] = (qc.relation || qc.relation === 0) ? qc.relation : RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    };
    return SmartHelpHandler;
}());
export { SmartHelpHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvcXVlcnktc29sdXRpb24vaGFuZGxlcnMvc21hcnRoZWxwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQ7SUFBQTtJQW1DQSxDQUFDO0lBbENHLGtDQUFPLEdBQVAsVUFBUSxFQUFrQjtRQUN0QixJQUFNLEdBQUcsR0FBSSxFQUFFLENBQUMsS0FBd0IsQ0FBQztRQUN6QyxJQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVwQyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixJQUFHLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUM7WUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDTCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQ3hGLE9BQU8sRUFBRyxHQUFHLENBQUMsU0FBUztnQkFDdkIsVUFBVSxFQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRztnQkFDaEYsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO2FBQ2hDLENBQUMsQ0FBQztZQUNILE9BQU8sR0FBRyxDQUFDO1NBQ2Q7YUFBSTtZQUNELEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxFQUFFO2dCQUN4QyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDWCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUs7b0JBQ3pGLE9BQU8sRUFBRyxFQUFFO29CQUNaLFVBQVUsRUFBRyxFQUFFLENBQUMsV0FBVyxLQUFLLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFO29CQUN6RixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztnQkFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFHLENBQUM7Z0JBQzVELEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUN6RSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDdEcsT0FBTyxHQUFHLENBQUM7YUFDZDtpQkFBSTtnQkFDRCxPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7SUFDTCxDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBbkNELElBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uLCBTbWFydEhlbHBWYWx1ZSB9IGZyb20gXCJAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvblwiO1xyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTbWFydEhlbHBIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcntcclxuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgY29uc3Qgc2h2ID0gKHFjLnZhbHVlIGFzIFNtYXJ0SGVscFZhbHVlKTtcclxuICAgICAgICBpZihzaHYudmFsdWUubGVuZ3RoID09IDApIHJldHVybiBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgaWYoc2h2LmlzSW5wdXRUZXh0IHx8IHNodi52YWx1ZUZpZWxkID09IG51bGwpe1xyXG4gICAgICAgICAgICBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogKHFjLmNvbXBhcmVUeXBlIHx8IHFjLmNvbXBhcmVUeXBlID09PSAwKSA/IHFjLmNvbXBhcmVUeXBlIDogQ29tcGFyZVR5cGUuTGlrZSxcclxuICAgICAgICAgICAgICAgICdWYWx1ZScgOiBzaHYudGV4dFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IChxYy5yZWxhdGlvbiB8fCBxYy5yZWxhdGlvbiA9PT0gMCkgPyBxYy5yZWxhdGlvbiA6IFJlbGF0aW9uVHlwZS5BbmQgLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzpWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHNodi5nZXRPcmlnaW5hbFZhbHVlKCkuc3BsaXQoJywnKS5mb3JFYWNoKGlkID0+IHtcclxuICAgICAgICAgICAgICAgIGlkICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IChxYy5jb21wYXJlVHlwZSB8fCBxYy5jb21wYXJlVHlwZSA9PT0gMCkgPyBxYy5jb21wYXJlVHlwZSA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZScgOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogcWMuY29tcGFyZVR5cGUgPT09IENvbXBhcmVUeXBlLk5vdEVxdWFsID8gUmVsYXRpb25UeXBlLkFuZCA6IFJlbGF0aW9uVHlwZS5PcixcclxuICAgICAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZihhcnIubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICBhcnJbMF1bJ0xicmFja2V0J10gPSBxYy5MYnJhY2tldCA/IChxYy5MYnJhY2tldCArICcoJykgOicoJztcclxuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0xXVsnUmJyYWNrZXQnXSA9IHFjLlJicmFja2V0ID8gKHFjLlJicmFja2V0ICsgJyknKSA6ICcpJztcclxuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV1bJ1JlbGF0aW9uJ10gPSAocWMucmVsYXRpb24gfHwgcWMucmVsYXRpb24gPT09IDApID8gcWMucmVsYXRpb24gOiBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19