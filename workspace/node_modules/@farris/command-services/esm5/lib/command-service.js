import { Injectable } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { AppContext, ViewModel } from '@farris/devkit';
/**
 * 命令服务
 * @scope FrameConmponent
 */
var CommandService = /** @class */ (function () {
    function CommandService(viewModel, appContext) {
        this.viewModel = viewModel;
        this.appContext = appContext;
    }
    Object.defineProperty(CommandService.prototype, "context", {
        /**
         * context取值方法
         */
        get: function () {
            return this.innerContext;
        },
        /**
         * context设值方法
         */
        set: function (context) {
            this.innerContext = context;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId 框架ID
     */
    CommandService.prototype.execute = function (commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        var viewModel = this.viewModel;
        if (frameId) {
            var targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    };
    /**
     * 等待BeSession创建
     * @returns 最新创建出来的BeSession
     */
    CommandService.prototype.waitForBeSession = function () {
        var frameContext = this.context.frameContext;
        var befRepository = frameContext.repository;
        var sessionService = befRepository.restService.sessionService;
        return sessionService.getBeSessionId().pipe(filter(function (beSessionId) {
            return beSessionId !== null;
        }), take(1));
    };
    /**
     * 提取某个任务的执行结果
     * @param taskName 任务名称
     * @reutrn 返回taskName对应任务的执行结果
     */
    CommandService.prototype.extractResult = function (taskName) {
        var results = this.context.results;
        return results[taskName];
    };
    /**
     * 暂停当前组件的行切换事件抛出
     */
    CommandService.prototype.suspendFrameContextRowSelectedEvent = function (frameId) {
        var frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = true;
        }
    };
    CommandService.prototype.resumeFrameContextRowSelectedEvent = function (frameId) {
        var frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = false;
        }
    };
    CommandService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandService.ctorParameters = function () { return [
        { type: ViewModel },
        { type: AppContext }
    ]; };
    return CommandService;
}());
export { CommandService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQXdDLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0Y7OztHQUdHO0FBQ0g7SUFzQkUsd0JBQ1UsU0FBb0IsRUFDcEIsVUFBc0I7UUFEdEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzVCLENBQUM7SUFkTCxzQkFBVyxtQ0FBTztRQUhsQjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7UUFFRDs7V0FFRzthQUNILFVBQW1CLE9BQXVCO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1FBQzlCLENBQUM7OztPQVBBO0lBY0Q7Ozs7T0FJRztJQUNJLGdDQUFPLEdBQWQsVUFBZSxXQUFtQixFQUFFLE9BQWdCO1FBQ2xELElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxLQUFLLEVBQUUsSUFBSSxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQ3JFLE9BQU87U0FDUjtRQUNELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZGLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0kseUNBQWdCLEdBQXZCO1FBQ0UsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDL0MsSUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDLFVBQW1DLENBQUM7UUFDdkUsSUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7UUFDaEUsT0FBTyxjQUFjLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUN6QyxNQUFNLENBQUMsVUFBQyxXQUFtQjtZQUN6QixPQUFPLFdBQVcsS0FBSyxJQUFJLENBQUM7UUFDOUIsQ0FBQyxDQUFDLEVBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLHNDQUFhLEdBQXBCLFVBQXFCLFFBQWdCO1FBQ25DLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3JDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7T0FFRztJQUNJLDREQUFtQyxHQUExQyxVQUEyQyxPQUFnQjtRQUN6RCxJQUFJLFlBQVksR0FBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDN0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hHO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsWUFBWSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7U0FDekQ7SUFFSCxDQUFDO0lBQ00sMkRBQWtDLEdBQXpDLFVBQTBDLE9BQWdCO1FBQ3hELElBQUksWUFBWSxHQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUM3RCxJQUFJLE9BQU8sRUFBRTtZQUNYLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEc7UUFDRCxJQUFJLFlBQVksRUFBRTtZQUNoQixZQUFZLENBQUMsV0FBVyxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztTQUMxRDtJQUNILENBQUM7O2dCQTFGRixVQUFVOzs7O2dCQVBVLFNBQVM7Z0JBQXJCLFVBQVU7O0lBa0duQixxQkFBQztDQUFBLEFBM0ZELElBMkZDO0FBRUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCwgVmlld01vZGVsLCBDb21tYW5kQ29udGV4dCwgRW50aXR5LCBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2JlZic7XHJcblxyXG4vKipcclxuICog5ZG95Luk5pyN5YqhXHJcbiAqIEBzY29wZSBGcmFtZUNvbm1wb25lbnRcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQ29tbWFuZFNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDlhoXpg6hjb3RuZXh0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbm5lckNvbnRleHQ6IENvbW1hbmRDb250ZXh0O1xyXG5cclxuICAvKipcclxuICAgKiBjb250ZXh05Y+W5YC85pa55rOVXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBjb250ZXh0KCk6IENvbW1hbmRDb250ZXh0IHtcclxuICAgIHJldHVybiB0aGlzLmlubmVyQ29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNvbnRleHTorr7lgLzmlrnms5VcclxuICAgKi9cclxuICBwdWJsaWMgc2V0IGNvbnRleHQoY29udGV4dDogQ29tbWFuZENvbnRleHQpIHtcclxuICAgIHRoaXMuaW5uZXJDb250ZXh0ID0gY29udGV4dDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSB2aWV3TW9kZWw6IFZpZXdNb2RlbCxcclxuICAgIHByaXZhdGUgYXBwQ29udGV4dDogQXBwQ29udGV4dFxyXG4gICkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJp+ihjOWRveS7pFxyXG4gICAqIEBwYXJhbSBjb21tYW5kTmFtZSDlkb3ku6TlkI3np7BcclxuICAgKiBAcGFyYW0gZnJhbWVJZCDmoYbmnrZJRFxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRlKGNvbW1hbmROYW1lOiBzdHJpbmcsIGZyYW1lSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFjb21tYW5kTmFtZSB8fCBjb21tYW5kTmFtZSA9PT0gJycgfHwgY29tbWFuZE5hbWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCB2aWV3TW9kZWwgPSB0aGlzLnZpZXdNb2RlbDtcclxuICAgIGlmIChmcmFtZUlkKSB7XHJcbiAgICAgIGNvbnN0IHRhcmdldENvbnRleHQgPSB0aGlzLmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgICB2aWV3TW9kZWwgPSB0YXJnZXRDb250ZXh0LnZpZXdNb2RlbDtcclxuICAgIH1cclxuICAgIHJldHVybiB2aWV3TW9kZWxbY29tbWFuZE5hbWVdKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnrYnlvoVCZVNlc3Npb27liJvlu7pcclxuICAgKiBAcmV0dXJucyDmnIDmlrDliJvlu7rlh7rmnaXnmoRCZVNlc3Npb25cclxuICAgKi9cclxuICBwdWJsaWMgd2FpdEZvckJlU2Vzc2lvbigpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZyYW1lQ29udGV4dDtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcbiAgICBjb25zdCBzZXNzaW9uU2VydmljZSA9IGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2Uuc2Vzc2lvblNlcnZpY2U7XHJcbiAgICByZXR1cm4gc2Vzc2lvblNlcnZpY2UuZ2V0QmVTZXNzaW9uSWQoKS5waXBlKFxyXG4gICAgICBmaWx0ZXIoKGJlU2Vzc2lvbklkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICByZXR1cm4gYmVTZXNzaW9uSWQgIT09IG51bGw7XHJcbiAgICAgIH0pLFxyXG4gICAgICB0YWtlKDEpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5o+Q5Y+W5p+Q5Liq5Lu75Yqh55qE5omn6KGM57uT5p6cXHJcbiAgICogQHBhcmFtIHRhc2tOYW1lIOS7u+WKoeWQjeensFxyXG4gICAqIEByZXV0cm4g6L+U5ZuedGFza05hbWXlr7nlupTku7vliqHnmoTmiafooYznu5PmnpxcclxuICAgKi9cclxuICBwdWJsaWMgZXh0cmFjdFJlc3VsdCh0YXNrTmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCByZXN1bHRzID0gdGhpcy5jb250ZXh0LnJlc3VsdHM7XHJcbiAgICByZXR1cm4gcmVzdWx0c1t0YXNrTmFtZV07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaaguWBnOW9k+WJjee7hOS7tueahOihjOWIh+aNouS6i+S7tuaKm+WHulxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdXNwZW5kRnJhbWVDb250ZXh0Um93U2VsZWN0ZWRFdmVudChmcmFtZUlkPzogc3RyaW5nKSB7XHJcbiAgICBsZXQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQ7XHJcbiAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICBmcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgIGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5yb3dTZWxlY3RlZEV2ZW50U3VzcGVuZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBwdWJsaWMgcmVzdW1lRnJhbWVDb250ZXh0Um93U2VsZWN0ZWRFdmVudChmcmFtZUlkPzogc3RyaW5nKSB7XHJcbiAgICBsZXQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQ7XHJcbiAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICBmcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgIGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5yb3dTZWxlY3RlZEV2ZW50U3VzcGVuZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZFNlcnZpY2UgfTtcclxuIl19