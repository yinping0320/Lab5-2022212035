import { Injectable, LOCALE_ID, Optional, Inject } from '@angular/core';
import { LanguageMessageFactory } from './languages/index';
/**
 * 多语言服务
 * @scope FormModule
 */
var LanguageService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function LanguageService(localeId) {
        // #endregion
        /**
         * 当前语言
         */
        this.language = 'zh-CHS';
        this.language = localeId || 'zh-CHS';
        this.extendProperties();
        LanguageService.innerInstance = this;
    }
    Object.defineProperty(LanguageService.prototype, "languageMessage", {
        /**
         * 当前语言包
         */
        get: function () {
            return LanguageMessageFactory.create(this.language);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实例
     */
    LanguageService.getInstance = function () {
        if (this.innerInstance) {
            return this.innerInstance;
        }
        var instance = new LanguageService('zh-CHS');
        LanguageService.innerInstance = instance;
        return instance;
    };
    /**
     * 扩展属性
     */
    LanguageService.prototype.extendProperties = function () {
        var _this = this;
        Object.keys(this.languageMessage).forEach(function (propName) {
            Object.defineProperty(_this, propName, {
                get: function () {
                    return _this.languageMessage[propName];
                }
            });
        });
    };
    /**
     * 单例对象
     */
    LanguageService.innerInstance = null;
    LanguageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LanguageService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return LanguageService;
}());
export { LanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2xhbmd1YWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBbUIsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc1RTs7O0dBR0c7QUFDSDtJQWtHRTs7T0FFRztJQUNILHlCQUEyQyxRQUFpQjtRQWpCNUQsYUFBYTtRQUViOztXQUVHO1FBQ08sYUFBUSxHQUFHLFFBQVEsQ0FBQztRQWE1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUM7UUFDckMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsZUFBZSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDdkMsQ0FBQztJQVhELHNCQUFjLDRDQUFlO1FBSDdCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsQ0FBQzs7O09BQUE7SUFXRDs7T0FFRztJQUNXLDJCQUFXLEdBQXpCO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUMzQjtRQUNELElBQU0sUUFBUSxHQUFHLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNLLDBDQUFnQixHQUF4QjtRQUFBLGlCQVFDO1FBUEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBZ0I7WUFDekQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFJLEVBQUUsUUFBUSxFQUFFO2dCQUNwQyxHQUFHLEVBQUU7b0JBQ0gsT0FBTyxLQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBL0hEOztPQUVHO0lBQ1ksNkJBQWEsR0FBb0IsSUFBSSxDQUFDOztnQkFOdEQsVUFBVTs7Ozs2Q0FxR0ksUUFBUSxZQUFJLE1BQU0sU0FBQyxTQUFTOztJQThCM0Msc0JBQUM7Q0FBQSxBQW5JRCxJQW1JQztBQUVELE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIExPQ0FMRV9JRCwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZU1lc3NhZ2UsIExhbmd1YWdlTWVzc2FnZUZhY3RvcnkgfSBmcm9tICcuL2xhbmd1YWdlcy9pbmRleCc7XHJcblxyXG5cclxuLyoqXHJcbiAqIOWkmuivreiogOacjeWKoVxyXG4gKiBAc2NvcGUgRm9ybU1vZHVsZVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBMYW5ndWFnZVNlcnZpY2UgaW1wbGVtZW50cyBMYW5ndWFnZU1lc3NhZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiDljZXkvovlr7nosaFcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBpbm5lckluc3RhbmNlOiBMYW5ndWFnZVNlcnZpY2UgPSBudWxsO1xyXG5cclxuICAvLyAjcmVnaW9uIOWunueOsExhbmd1YWdlTWVzc2FnZeaOpeWPo++8jOaWueS+v+S5puWGmVxyXG4gIHB1YmxpYyB5ZXM6IHN0cmluZztcclxuICBwdWJsaWMgbm86IHN0cmluZztcclxuICBwdWJsaWMgdW5zYXZlTm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgY2xpZW50Tm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgc2VydmVyTm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsQXBwcm92ZVN1Y2Nlc3M6IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsQXBwcm92ZUZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB1bmFsbG93RW1wdHlQcm9jZXNzSW5zdGFuY2VOYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHVuYWxsb3dFbXB0eUJpekJpbGxJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB1bmFsbG93RW1wdHlDaGlsZEJpekJpbGxJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBiaXpEZWZLZXlSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwcm9jSW5zSWRSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhZGRDaGlsZEZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhZGRTaWJsaW5nRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIGFkZFN1YkNoaWxkRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIGFkZFN1YlNpYmxpbmdGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgZGVsZXRlRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIG11bHRpU2F2ZUZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhcHBlbmRGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgcXVlcnlGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIHVwZGF0ZUZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhZGRGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgbG9hZEZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBzYXZlU3VjY2Vzczogc3RyaW5nO1xyXG4gIHB1YmxpYyBzYXZlRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIGRlbGV0ZVN1Y2Nlc3M6IHN0cmluZztcclxuICBwdWJsaWMgZGVsZXRlRmFpbGQ6IHN0cmluZztcclxuICBwdWJsaWMgY29uZmlybURlbGV0aW9uOiBzdHJpbmc7XHJcbiAgcHVibGljIHN1Ym1pdFN1Y2Nlc3M6IHN0cmluZztcclxuICBwdWJsaWMgc3VibWl0RmFpbGQ6IHN0cmluZztcclxuICBwdWJsaWMgbm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgaHR0cEVycm9yOiBzdHJpbmc7XHJcbiAgcHVibGljIGdyaWREYXRhTm90U2F2ZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBleGl0V2l0aG91dFNhdmU6IHN0cmluZztcclxuICBwdWJsaWMgbm90U3VwcG9ydE1lbnVUeXBlOiBzdHJpbmc7XHJcbiAgcHVibGljIGNhbmNlbFdpdGhvdXRTYXZlOiBzdHJpbmc7XHJcbiAgcHVibGljIHBsc1NlbGVjdERlbGV0ZURhdGE6IHN0cmluZztcclxuICBwdWJsaWMgZXJyb3JIaWVyYXJjaHlLZXk6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0UGFyZW50Tm9kZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBkZWxldGVDaGlsZEZpcnN0OiBzdHJpbmc7XHJcbiAgcHVibGljIGluY29ycmVjdEhpZXJhcmNoeUNvbmZpZzogc3RyaW5nO1xyXG4gIHB1YmxpYyBvcGVyYXRpb25GYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0RWRpdERhdGE6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0Vmlld0RhdGE6IHN0cmluZztcclxuICBwdWJsaWMgcGxzVXBsb2FkRmlyc3Q6IHN0cmluZztcclxuICBwdWJsaWMgZGVmYXVsdERpYWxvZ1RpdGxlOiBzdHJpbmc7XHJcbiAgcHVibGljIGNoYW5nZVRvRmlyc3Q6IHN0cmluZztcclxuICBwdWJsaWMgY2hhbmdlVG9MYXN0OiBzdHJpbmc7XHJcbiAgcHVibGljIG5vUHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZztcclxuICBwdWJsaWMgbm9EYXRhRXhpc3Q6IHN0cmluZztcclxuICBwdWJsaWMgbm9BdHRhY2htZW50OiBzdHJpbmc7XHJcbiAgcHVibGljIGNvbmZpcm06IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsOiBzdHJpbmc7XHJcbiAgcHVibGljIHBsc1NlbGVjdENvcHlEYXRhOiBzdHJpbmc7XHJcbiAgcHVibGljIGNvcHlGaWVsZHNSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwYXRoSXNSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwcm9wc0lzRW1wdHk6IHN0cmluZztcclxuICBwdWJsaWMgaGlzdG9yeUF0dGFjaG1lbnQ6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0RG93bmxvYWRBdHQ6IHN0cmluZztcclxuICBwdWJsaWMgbm9Eb3dubG9hZEF0dDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwbHNDaGVja0JhdGNoRWRpdFJvd3M6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0RGV0YWlsRm9ybURhdGE6IHN0cmluZztcclxuICBwdWJsaWMgZGF0YUFuZFN0YXRlQ2hhbmdlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBkYXRhQ2hhbmdlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBzdGF0ZUNoYW5nZWQ6IHN0cmluZztcclxuICBwdWJsaWMgZGVmYXVsdFN0YXRlTmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBjb3B5OiBzdHJpbmc7XHJcbiAgcHVibGljIGNvcHlTdWNjZXNzOiBzdHJpbmc7XHJcbiAgcHVibGljIGNvcHlGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgcm9nZXI6IHN0cmluZztcclxuICBwdWJsaWMgYXBwT3JGdW5jSWRSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB0YWJsZUNhbk5vdEVtcHR5OiBzdHJpbmc7XHJcbiAgcHVibGljIHBsc1NlbGVjdFJlbW92ZUF0dDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwbHNTZWxlY3RVcGRhdGVSb3c6IHN0cmluZztcclxuICAvLyAjZW5kcmVnaW9uXHJcblxyXG4gIC8qKlxyXG4gICAqIOW9k+WJjeivreiogFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBsYW5ndWFnZSA9ICd6aC1DSFMnO1xyXG5cclxuICAvKipcclxuICAgKiDlvZPliY3or63oqIDljIVcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0IGxhbmd1YWdlTWVzc2FnZSgpOiBMYW5ndWFnZU1lc3NhZ2Uge1xyXG4gICAgcmV0dXJuIExhbmd1YWdlTWVzc2FnZUZhY3RvcnkuY3JlYXRlKHRoaXMubGFuZ3VhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChMT0NBTEVfSUQpIGxvY2FsZUlkPzogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmxhbmd1YWdlID0gbG9jYWxlSWQgfHwgJ3poLUNIUyc7XHJcbiAgICB0aGlzLmV4dGVuZFByb3BlcnRpZXMoKTtcclxuICAgIExhbmd1YWdlU2VydmljZS5pbm5lckluc3RhbmNlID0gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICBpZiAodGhpcy5pbm5lckluc3RhbmNlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlubmVySW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBMYW5ndWFnZVNlcnZpY2UoJ3poLUNIUycpO1xyXG4gICAgTGFuZ3VhZ2VTZXJ2aWNlLmlubmVySW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgIHJldHVybiBpbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxleWxnuaAp1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0ZW5kUHJvcGVydGllcygpIHtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMubGFuZ3VhZ2VNZXNzYWdlKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wTmFtZSwge1xyXG4gICAgICAgIGdldDogKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VNZXNzYWdlW3Byb3BOYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfTtcclxuIl19