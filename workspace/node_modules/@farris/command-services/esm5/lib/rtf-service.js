import { Injectable } from '@angular/core';
import { EMPTY, Subject } from 'rxjs';
import { UID } from '@farris/devkit';
/*
 * @Author: aalizzwell
 * @Date: 2019-07-23 15:56:11
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-11-27 15:31:36
 */
/**
 * RuntimeFrameworkService
 * @scope @FormModule
 */
// tslint:disable: no-string-literal disable: max-line-length
var RuntimeFrameworkService = /** @class */ (function () {
    function RuntimeFrameworkService() {
        this.rtfService = this.getService();
    }
    /**
     * 遍历获取rtf服务
     */
    RuntimeFrameworkService.prototype.getService = function () {
        var env = window;
        while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {
            env = env.parent;
        }
        return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};
    };
    // #region 导航服务
    /**
     * 打开菜单或应用
     * @param options options
     */
    RuntimeFrameworkService.prototype.openMenu = function (options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenu'] === 'function') {
            this.rtfService.func.openMenu(options);
        }
    };
    /**
     * 打开菜单或应用
     * @param options options
     */
    RuntimeFrameworkService.prototype.openMenu$ = function (options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenuByStream'] === 'function') {
            return this.rtfService.func.openMenuByStream(options);
        }
        return EMPTY;
    };
    /**
     * 获取导航实体数据
     * @param tabId tabid
     * @param callback callback
     * @param once once
     */
    RuntimeFrameworkService.prototype.getEntityParam = function (tabId, callback, once) {
        if (once === void 0) { once = true; }
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getEntityParam'] === 'function') {
            this.rtfService.func.getEntityParam(tabId, callback, once);
        }
    };
    /**
     * 尝试关闭菜单或应用
     * @param options optins
     */
    RuntimeFrameworkService.prototype.beforeCloseMenu = function (options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['beforeClose'] === 'function') {
            this.rtfService.func.beforeClose(options);
        }
    };
    /**
     * 关闭菜单
     * @param options options
     */
    RuntimeFrameworkService.prototype.closeMenu = function (options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['close'] === 'function') {
            this.rtfService.func.close(options);
        }
    };
    /**
     * 获取菜单静态参数
     * @param funcId 菜单id
     * @param callback 回调
     */
    RuntimeFrameworkService.prototype.getMenuParams = function (funcId, callback) {
        if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getMenuParams'] === 'function') {
            this.rtfService.func.getMenuParams(funcId, callback);
        }
    };
    /**
     * 添加事件监听
     */
    RuntimeFrameworkService.prototype.addEventListener = function (token, handler, options) {
        if (this.rtfService && this.rtfService.hasOwnProperty('frmEvent') && typeof this.rtfService['frmEvent']['eventListener'] === 'function') {
            this.rtfService.frmEvent.eventListener(token, handler, options);
        }
    };
    /**
     * 获取运行框架菜单切换控制事件
     * @returns Observable<any>
     */
    RuntimeFrameworkService.prototype.getMenuSwitchControlEvent = function () {
        var subject = new Subject();
        var frmEvent = this.rtfService && this.rtfService.frmEvent || null;
        if (frmEvent) {
            var tabId_1 = this.tabId;
            var options_1 = this.params;
            window.setTimeout(function () {
                frmEvent.eventListener(tabId_1, function (response) {
                    var menuSwitchControl = response && response.menuSwitchControl || null;
                    if (menuSwitchControl && menuSwitchControl.key === tabId_1) {
                        subject.next(menuSwitchControl.value);
                    }
                    else {
                        subject.next(null);
                    }
                }, options_1);
            }, 0);
        }
        return subject;
    };
    Object.defineProperty(RuntimeFrameworkService.prototype, "params", {
        //#endregion
        // #region 适配层属性
        get: function () {
            if (this.rtfService && this.rtfService.hasOwnProperty('session') && typeof this.rtfService['session']['getCommonVariable'] === 'function') {
                return this.rtfService['session']['getCommonVariable']();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeFrameworkService.prototype, "tabId", {
        /**
         * 获取tabId
         */
        get: function () {
            return this.params && this.params['tabId'] || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeFrameworkService.prototype, "formToken", {
        /**
         * 获取formToken
         */
        get: function () {
            return this.params && this.params['formToken'] || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuntimeFrameworkService.prototype, "funcId", {
        /**
         * 获取funcId
         */
        get: function () {
            return this.params && this.params['funcId'] || null;
        },
        enumerable: true,
        configurable: true
    });
    // #endregion
    // #region 事件通信
    /**
     * 注册主题
     * @param code 主题的标识
     * @param options token生成规则
     * @param subject 自定义主题，默认使用Subject
     * @returns string 注册成功后返回主题的唯一标识
     */
    RuntimeFrameworkService.prototype.subjectRegister = function (code, options, subject) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRegister'] === 'function') {
            return this.rtfService.broadcast.subjectRegister(code, options, subject);
        }
        return null;
    };
    /**
     * 移除主题
     * @param token 主题唯一标识
     */
    RuntimeFrameworkService.prototype.subjectRemove = function (token) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRemove'] === 'function') {
            this.rtfService.broadcast.subjectRemove(token);
        }
    };
    /**
     * 给主题发送消息
     * @param token 主题标识
     * @param info 消息
     */
    RuntimeFrameworkService.prototype.subjectNotify = function (token, info) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['notify'] === 'function') {
            this.rtfService.broadcast.notify(token, info);
        }
    };
    /**
     * 注册主题监听器
     * @param token 主题标识
     * @param handler 主题处理器
     * @param observerToken 监听器id(可选)
     * @returns 监听器Id
     * @description 监听主题消息，监听成功返回当前监听者的唯一标识
     */
    RuntimeFrameworkService.prototype.subjectResponse = function (token, handler, observerToken) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['response'] === 'function') {
            var code = observerToken;
            if (typeof observerToken === 'undefined' || !observerToken || observerToken.length < 1) {
                code = UID.create();
            }
            this.rtfService.broadcast.response(token, code, handler);
            return code;
        }
        return null;
    };
    /**
     * 取消对主题的监听
     * @param token 主题标识
     * @param observerToken 监听器标识
     */
    RuntimeFrameworkService.prototype.responseUnSubscribe = function (token, observerToken) {
        if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['responseUnSubscribe'] === 'function') {
            this.rtfService.broadcast.responseUnSubscribe(token, observerToken);
        }
    };
    // #endregion
    // #region 工具函数
    /**
     * 是否同源
     * @param environment window
     */
    RuntimeFrameworkService.prototype.isSameOrigin = function (environment) {
        var host = window.location.host;
        try {
            if (environment && environment.location && typeof environment.location.host !== 'undefined') {
                return environment.location.host === host;
            }
        }
        catch (e) {
            return false;
        }
        return false;
    };
    RuntimeFrameworkService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RuntimeFrameworkService.ctorParameters = function () { return []; };
    return RuntimeFrameworkService;
}());
export { RuntimeFrameworkService };
//# sourceMappingURL=data:application/json;base64,