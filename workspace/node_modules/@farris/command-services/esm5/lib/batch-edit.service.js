import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { ViewModel, Repository, Entity, AppContext, EntityList } from '@farris/devkit';
import { from, EMPTY, concat, of, Subject, throwError } from 'rxjs';
import { concatMap, catchError, tap, switchMap, last, map, delay, takeLast } from 'rxjs/operators';
import { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { ComponentManagerService } from './component-manager.service';
import { FormLoadingService } from './form-loading/form-loading.service';
import { LanguageService } from './languag.service';
import { FormNotifyService } from './form-notify.service';
import { UploadService } from '@gsp-svc/formdoc-upload';
import { FormErrorService } from './error';
// tslint:disable: max-line-length
/**
 * 批量编辑服务
 */
var BatchEditService = /** @class */ (function () {
    function BatchEditService(injector, componentManagerService, viewModel, repository, batchEditDialogService, dateService, languageService, formNotifyService, fileUploadService) {
        var _this = this;
        this.injector = injector;
        this.componentManagerService = componentManagerService;
        this.viewModel = viewModel;
        this.repository = repository;
        this.batchEditDialogService = batchEditDialogService;
        this.dateService = dateService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.fileUploadService = fileUploadService;
        this.formLoadingService = this.injector.get(FormLoadingService, null);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (!this.formNotifyService) {
            this.formNotifyService = this.injector.get(FormNotifyService, null);
        }
        this.onHelpClose = new Subject();
        this.onHelpClose.subscribe(function (result) {
            var _a = result || {}, _b = _a.frameId, frameId = _b === void 0 ? '' : _b, _c = _a.mapFields, mapFields = _c === void 0 ? '' : _c, _d = _a.data, data = _d === void 0 ? [] : _d;
            _this.onHelpCloseHandler(frameId, mapFields, data);
        });
    }
    Object.defineProperty(BatchEditService.prototype, "formErrorService", {
        get: function () {
            return this.injector && this.injector.get(FormErrorService, null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 打开批量编辑对话框
     * @param frameId frameId
     */
    BatchEditService.prototype.openBatchEditDialog = function (frameId, enableDictPicking) {
        var _this = this;
        if (enableDictPicking === void 0) { enableDictPicking = false; }
        if (!frameId) {
            throw new Error('frameId is required.');
        }
        if (typeof enableDictPicking === 'string') {
            enableDictPicking = (enableDictPicking === 'true' ? true : false);
        }
        if (this.batchEditDialogService) {
            var columns = [];
            if (this.viewModel) {
                var gridFrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);
                var gridViewModel = gridFrameContext.viewModel;
                if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {
                    // tslint:disable-next-line: no-string-literal
                    var gridColumnsAttrName = gridViewModel['dataGridColumnsName'];
                    columns = gridViewModel[gridColumnsAttrName];
                }
                else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {
                    columns = gridViewModel['dataGridColumns'];
                }
                var ids_1 = gridViewModel.uiState['ids'] || [];
                if (!ids_1 || ids_1.length < 1) {
                    this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });
                    return EMPTY;
                }
                var dialogRef_1 = this.batchEditDialogService.batchEdit(columns, {
                    rows: ids_1.length,
                    enableDictPicking: enableDictPicking,
                    onConfirm: function (inputs) {
                        if (Array.isArray(ids_1) && ids_1.length > 0) {
                            // console.log('openBatchEditDialog', inputs);
                            var appContext = _this.viewModel.frameContext.appContext;
                            appContext.changeDetectionController.detach();
                            inputs.forEach(function (input) {
                                _this.updateBindingData(input, ids_1);
                            });
                            appContext.changeDetectionController.reattach();
                        }
                        dialogRef_1.close();
                    }
                });
            }
        }
    };
    /**
     * 打开隐藏帮助
     * @param helpId 帮助id
     */
    BatchEditService.prototype.openHiddenHelp = function (helpId) {
        if (!helpId) {
            throw new Error('Argument error,helpId can`t be empty');
        }
        var componentManagerService = this.componentManagerService.getControl(helpId);
        if (componentManagerService) {
            componentManagerService.showDialog();
        }
        else {
            throw new Error("the component which id is " + helpId + " can't be found!");
        }
    };
    /**
     * 清空帮助勾选（只能挂载到帮助前事件）
     */
    BatchEditService.prototype.clearHelpSelections = function () {
        var self = this;
        var helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (helpElement) {
            helpElement.displayValue = '';
        }
    };
    /**
     * 勾选当前行
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param primaryKeyValue 帮助主键字段
     */
    BatchEditService.prototype.checkCurrentRow = function (frameId, mapFields, primaryKeyValue) {
        var self = this;
        var helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (!primaryKeyValue) {
            primaryKeyValue = 'id';
        }
        var mappings = JSON.parse(mapFields);
        if (helpElement) {
            frameId = frameId || this.viewModel.frameContext.frameId;
            if (frameId) {
                var frameContext = this.getFrameContextById(frameId);
                if (frameContext) {
                    var bindingPath = frameContext.viewModel.bindingPath;
                    if (bindingPath) {
                        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                        var bindingList = frameContext.bindingData.getValue(bindingPaths);
                        var currentRow = bindingList.currentItem;
                        var path = mappings[primaryKeyValue];
                        if (path) {
                            var value = this.getValueByPath(currentRow, path);
                            helpElement.displayValue = value;
                        }
                    }
                }
            }
        }
    };
    /**
     * 以帮助勾选数据作为依据，批量新增主表数据
     * @param frameId 主表所在frame的id
     * @param mapFields 帮助字段与主表字段映射
     * @description 以帮助勾选数据作为依据，批量新增主表数据
     */
    BatchEditService.prototype.batchAppend = function (frameId, mapFields) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            var mappings_1 = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            var bindingPath = '/';
            var appContext = this.injector.get(AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            var defaultValues_1 = [];
            result.forEach(function (item) {
                var defaultValue = {};
                Object.keys(mappings_1).forEach(function (prop) {
                    var value = _this.getValueByPath(item, prop);
                    var fields = mappings_1[prop];
                    var groups = fields.split(',').filter(function (p) { return p; });
                    groups.forEach(function (group) {
                        var paths = group.split('.').filter(function (p) { return p; });
                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues_1.push(defaultValue);
            });
            this.formLoadingService.show();
            return this.repository.batchAppend(defaultValues_1).pipe(tap(function () { return _this.formLoadingService.hide(); }), map(function () { return true; }));
        }
        return of(true);
    };
    /**
     * 以帮助勾选数据作为依据，批量新增从表/从从表
     * @param frameId 从表/从从表所在frame的id
     * @param mapFields 帮助字段与从表/从从表字段映射
     * @description 以帮助勾选数据作为依据，批量新增从表/从从表
     */
    BatchEditService.prototype.batchAppendByPathBasedOnHelpSelections = function (frameId, mapFields) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            var mappings_2 = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            var bindingPath = '/';
            var appContext = this.injector.get(AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            var defaultValues_2 = [];
            result.forEach(function (item) {
                var defaultValue = {};
                Object.keys(mappings_2).forEach(function (prop) {
                    var value = _this.getValueByPath(item, prop);
                    var fields = mappings_2[prop];
                    var groups = fields.split(',').filter(function (p) { return p; });
                    groups.forEach(function (group) {
                        var paths = group.split('.').filter(function (p) { return p; });
                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues_2.push(defaultValue);
            });
            this.formLoadingService.show();
            var path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
            return this.repository.batchAppendByPath(path, defaultValues_2).pipe(tap(function () { return _this.formLoadingService.hide(); }), map(function () { return true; }));
        }
        return of(true);
    };
    /**
     * 批量新增带附件的从表或从从表数据
     * @param frameId
     * @param mapFields
     * @param attachmentInfoFieldPath 附件udt字段路径，可支持多个，以逗号分隔
     * @param rootId 附件存储根目录
     * @param path 附件存储目录
     * @description 批量新增带附件的从表或从从表数据与批量新增从表从从表数据一致，在批量新增数据的基础上增加了附件复制
     * @todo 目前附件复制在前端调用，会发起多个请求，且存在安全问题，后续应在vo集成
     */
    BatchEditService.prototype.batchAppendByPathWithAttachment = function (frameId, mapFields, attachmentInfoFieldPath, rootId, path) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (!attachmentInfoFieldPath) {
            throw new Error('附件udt字段路径不能为空');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            var mappings_3 = JSON.parse(mapFields);
            var bindingPath_1 = '/';
            var appContext = this.injector.get(AppContext, null);
            // 修正bindingPath
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath_1 = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            // 处理附件udt字段
            var attachmentFields_1 = attachmentInfoFieldPath.split(',').filter(function (p) { return p; }).map(function (path) { return path.split('/').pop(); });
            this.formLoadingService.show();
            // 先复制附件
            var copyFiles$ = from(result).pipe(concatMap((function (item) {
                return _this.copyRowFiles(item, attachmentFields_1, rootId, path).pipe(catchError(function (error) {
                    _this.formLoadingService.hide();
                    var cafError = error.error;
                    if (typeof cafError === 'string') {
                        cafError = JSON.parse(cafError);
                    }
                    if (_this.formErrorService) {
                        _this.formErrorService.exception(cafError.message || _this.languageService.copyFailed, error);
                    }
                    return throwError(error);
                }));
            })));
            return copyFiles$.pipe(takeLast(1)).pipe(switchMap(function () {
                // 拼装默认值
                var defaultValues = _this.buildDefaultValues(result, mappings_3);
                var path = _this.buildPath(bindingPath_1, _this.viewModel.bindingData.list.currentId);
                return _this.repository.batchAppendByPath(path, defaultValues).pipe(tap(function () { return _this.formLoadingService.hide(); }), map(function () { return true; }));
            }));
        }
        return of(true);
    };
    /**
     * 构造默认值数组
     * @param selectedValues
     * @param mapFields
     * @returns
     */
    BatchEditService.prototype.buildDefaultValues = function (selectedValues, mapFields) {
        var _this = this;
        var defaultValues = [];
        selectedValues.forEach(function (item) {
            var defaultValue = {};
            Object.keys(mapFields).forEach(function (prop) {
                // 帮助数据
                var value = _this.getValueByPath(item, prop);
                // 目标字段
                var fields = mapFields[prop];
                var groups = fields.split(',').filter(function (p) { return p; });
                groups.forEach(function (group) {
                    var paths = group.split('.').filter(function (p) { return p; });
                    _this.setValueByPath(defaultValue, paths.join('.'), value);
                });
            });
            defaultValues.push(defaultValue);
        });
        return defaultValues;
    };
    /**
     * 复制行中所有附件
     * @param row
     * @param attachmentFields
     * @param rootId
     * @param path
     * @returns
     */
    BatchEditService.prototype.copyRowFiles = function (row, attachmentFields, rootId, path) {
        var _this = this;
        return from(attachmentFields).pipe(concatMap(function (field) {
            var attachmentId = _this.getValueByPath(row, field + ".attachmentId");
            if (attachmentId) {
                // 发送复制附件的请求，获取附件id
                return _this.fileUploadService.copyFile(attachmentId, rootId, path).pipe(tap(function (attachmentId) {
                    // 复制成功
                    _this.setValueByPath(row, [field, 'attachmentId'].join('.'), attachmentId);
                }));
            }
            else {
                return of(null);
            }
        }));
    };
    /**
     * 行内帮助多选批量新增或替换子表数据
     * @param frameId frameId, optional,为空时使用命令执行时所在的上下文
     * @param mapFields 字段映射
     * @param primaryKey 帮助主键字段，默认为id
     * @returns
     */
    BatchEditService.prototype.batchAppendBasedOnRowHelpSelections = function (frameId, mapFields) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            return of(true);
        }
        var mappings = JSON.parse(mapFields);
        if (!mappings || !mappings.hasOwnProperty('id')) {
            return of(true);
        }
        frameId = frameId || this.viewModel.frameContext.frameId;
        if (!frameId) {
            return of(true);
        }
        var frameContext = this.getFrameContextById(frameId);
        if (!frameContext) {
            return of(true);
        }
        setTimeout(function () {
            _this.endEdit(frameContext).subscribe(function () {
                setTimeout(function () {
                    if (result && Array.isArray(result) && result.length > 0) {
                        var bindingPath_2 = frameContext.viewModel.bindingPath || '/';
                        var bindingPaths_1 = bindingPath_2.split('/').filter(function (p) { return p; });
                        var defaultValues_3 = [];
                        // 获取当前行
                        var bindingList_1 = frameContext.bindingData.getValue(bindingPaths_1);
                        var currentRow = bindingList_1.currentItem;
                        var currentRowId = bindingList_1.currentId;
                        var currentEntity = _this.getEntityByPath(frameContext, bindingPaths_1, currentRowId);
                        var headItem = result[0];
                        // 如果仅勾选一条，则应替换当前行的映射
                        if (result.length === 1) {
                            // this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                            var data_1 = headItem;
                            Object.keys(mappings).forEach(function (prop) {
                                var value = _this.getValueByPath(data_1, prop);
                                var fields = mappings[prop];
                                var groups = fields.split(',').filter(function (p) { return p; });
                                groups.forEach(function (group) {
                                    var paths = group.split('.').filter(function (p) { return p; });
                                    frameContext.bindingData.setValue(bindingPaths_1.concat(paths), value, true, true);
                                });
                            });
                            return of(true);
                        }
                        else {
                            var idMapField = mappings['id'];
                            var sourceItemId_1 = _this.getValueByPath(currentEntity, idMapField);
                            // 如果当前行没有映射或勾选结果中找不到当前行的映射
                            if (!sourceItemId_1 || result.findIndex(function (item) { return item[bindingList_1.primaryKey] === sourceItemId_1; }) === -1) {
                                // 重新映射当前行
                                _this.mappingRow(headItem, mappings, currentEntity, bindingPath_2);
                                result = result.slice(1);
                            }
                            else if (sourceItemId_1) {
                                var index = result.findIndex(function (item) { return item[bindingList_1.primaryKey] === sourceItemId_1; });
                                // 重新映射当前行
                                _this.mappingRow(result[index], mappings, currentEntity, bindingPath_2);
                                result.splice(index, 1);
                            }
                            // 当前行处理完成
                            // 处理未映射的行
                            var emptyRows_1 = bindingList_1.toArray().filter(function (bindingObject) {
                                var id = _this.getValueByPath(bindingObject, mappings[bindingList_1.primaryKey]);
                                return !id;
                            });
                            if (emptyRows_1 && emptyRows_1.length > 0) {
                                var rows = result;
                                if (result.length > emptyRows_1.length) {
                                    rows = result.slice(0, emptyRows_1.length);
                                    result = result.slice(emptyRows_1.length);
                                }
                                else {
                                    result = [];
                                }
                                rows.forEach(function (item, index) {
                                    var targetItem = emptyRows_1[index];
                                    var entity = _this.getEntityByPath(frameContext, bindingPaths_1, targetItem.primaryKeyValue);
                                    _this.mappingRow(item, mappings, entity, bindingPath_2);
                                });
                            }
                            // 处理剩余勾选
                            result.forEach(function (item) {
                                var defaultValue = {};
                                Object.keys(mappings).forEach(function (prop) {
                                    var value = _this.getValueByPath(item, prop);
                                    var fields = mappings[prop];
                                    var groups = fields.split(',').filter(function (p) { return p; });
                                    groups.forEach(function (group) {
                                        var paths = group.split('.').filter(function (p) { return p; });
                                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                                    });
                                });
                                defaultValues_3.push(defaultValue);
                            });
                            if (defaultValues_3.length > 0) {
                                _this.formLoadingService.show();
                                var path = _this.buildPath(bindingPath_2, _this.viewModel.bindingData.list.currentId);
                                _this.repository.batchAppendByPath(path, defaultValues_3).pipe(tap(function () { return _this.formLoadingService.hide(); })).subscribe();
                            }
                        }
                    }
                }, 350);
            });
        }, 50);
        return of(true);
    };
    /**
     * 复制主表数据
     * @param id 要复制的数据id
     * @param fields 要复制的字段
     * @description 仅支持复制主表数据
     * @deprecated 该方法已被废弃，请使用clone方法替代。
     */
    BatchEditService.prototype.copy = function (id) {
        var _this = this;
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        var befRepository = this.repository;
        var baseUri = befRepository.restService.baseUri;
        var url = baseUri + "/service/copymainobjvoaction";
        var requestInfo = befRepository.restService.buildRequestInfo();
        var body = {
            requestInfo: requestInfo,
            dataID: id
        };
        var options = {
            body: body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(function () {
            _this.formLoadingService.hide();
        }), map(function (responseInfo) {
            var returnValue = responseInfo.returnValue;
            var entity = _this.repository.buildEntity(returnValue);
            _this.repository.entityCollection.addEntity(entity);
            return entity;
        }));
    };
    /**
     * 复制数据（支持主表、从表、从从表）
     * @param id 要复制的行
     * @param path 请求路径
     * @returns
     */
    BatchEditService.prototype.clone = function (id, path) {
        var _this = this;
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!path) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        path = path.toLowerCase();
        var bindingPath = this.viewModel.bindingPath;
        var befRepository = this.repository;
        var baseUri = befRepository.restService.baseUri;
        var url = "" + baseUri + path;
        var requestInfo = befRepository.restService.buildRequestInfo();
        var ids = this.buildIds(bindingPath);
        ids.push(id);
        var body = {
            requestInfo: requestInfo,
            dataID: ids.join(',')
        };
        var options = {
            body: body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(function () {
            _this.formLoadingService.hide();
        }), map(function (responseInfo) {
            var returnValue = responseInfo.returnValue;
            var entity = null;
            if (bindingPath.split('/').filter(function (p) { return p; }).length === 0) {
                entity = _this.repository.buildEntity(returnValue);
                _this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                var fpath = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);
            }
            return entity;
        }));
    };
    /**
     * 带附件的复制
     * @param id
     * @param url
     * @param attachmentInfoFieldPath
     * @param rootId
     * @param path
     * @returns
     */
    BatchEditService.prototype.cloneWithAttachment = function (id, url, attachmentInfoFieldPath, rootId, path) {
        var _this = this;
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!url) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!attachmentInfoFieldPath) {
            throw new Error('附件udt字段路径不能为空');
        }
        if (!url.startsWith('/')) {
            url = '/' + url;
        }
        url = url.toLowerCase();
        var bindingPath = this.viewModel.bindingPath;
        var befRepository = this.repository;
        var baseUri = befRepository.restService.baseUri;
        var uri = "" + baseUri + url;
        var requestInfo = befRepository.restService.buildRequestInfo();
        var ids = this.buildIds(bindingPath);
        ids.push(id);
        var body = {
            requestInfo: requestInfo,
            dataID: ids.join(',')
        };
        var options = {
            body: body
        };
        this.formLoadingService.show();
        var attachmentFields = attachmentInfoFieldPath.split(',').filter(function (p) { return p; }).map(function (path) { return path.split('/').pop(); });
        return befRepository.proxy.request(uri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            var entityData = responseInfo.returnValue;
            var entity = null;
            if (bindingPath.split('/').filter(function (p) { return p; }).length === 0) {
                entity = _this.repository.buildEntity(entityData);
                _this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                var fpath = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, entityData, entityData, true);
            }
            // 复制附件
            return _this.copyRowFiles(entity, attachmentFields, rootId, path).pipe(switchMap(function () {
                _this.formLoadingService.hide();
                return _this.repository.updateAllChanges().pipe(map(function () {
                    return entity;
                }));
            }), catchError(function (error) {
                _this.formLoadingService.hide();
                // 清空实体附件属性
                _this.clearAttachmentInfo(entity, attachmentFields);
                var cafError = error.error;
                if (typeof cafError === 'string') {
                    cafError = JSON.parse(cafError);
                }
                if (_this.formErrorService) {
                    _this.formErrorService.exception(cafError.message || _this.languageService.copyFailed, error);
                }
                return EMPTY;
            }));
        }));
    };
    BatchEditService.prototype.clearAttachmentInfo = function (entity, attachmentFields) {
        var _this = this;
        try {
            attachmentFields.forEach(function (attachmentField) {
                _this.setValueByPath(entity, [attachmentField, 'attachmentId'].join('.'), null);
                _this.setValueByPath(entity, [attachmentField, 'fileName'].join('.'), null);
                _this.setValueByPath(entity, [attachmentField, 'fileCreateTime'].join('.'), null);
                _this.setValueByPath(entity, [attachmentField, 'fileSize'].join('.'), null);
            });
        }
        catch (e) {
            console.log(e);
        }
    };
    //#region 旧的实现
    /**
     * 复制行
     * @param frameId frameId
     * @param ignoreFields 复制时忽略字段
     * @param repeat 重复复制次数，默认为1
     */
    BatchEditService.prototype.copyRow = function (frameId, ignoreFields, repeat) {
        var _this = this;
        if (repeat === void 0) { repeat = 1; }
        if (typeof repeat !== 'number') {
            repeat = parseInt(repeat, 10);
        }
        if (repeat < 1) {
            throw new Error('ArgumentError: repeat must >= 1');
        }
        // 获取当前行
        var frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        var primaryValue = frameContext.bindingData.list.currentId;
        var bindingPath = frameContext.viewModel.bindingPath || '/';
        var bindingData = null;
        var currentItem = null;
        if (bindingPath === '/') {
            // 主表直接取当前行
            currentItem = frameContext.bindingData.list.currentItem;
        }
        else {
            // 取从表/从从表当前行
            var paths = bindingPath.split('/').filter(function (p) { return p; });
            currentItem = frameContext.bindingData.getValue(paths).currentItem;
        }
        bindingData = currentItem.toJSON();
        if (!currentItem.primaryKeyValue) {
            if (this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            }
            return EMPTY;
        }
        var ignoreFieldsArray = ignoreFields.split(',').filter(function (item) { return item; });
        var sources = new Array(repeat);
        return from(sources).pipe(concatMap(function () {
            var action$ = null;
            if (bindingPath !== '/') {
                var fullPath = _this.buildPath(bindingPath, primaryValue);
                action$ = _this.repository.appendByPath(fullPath);
            }
            else {
                action$ = _this.repository.append();
            }
            return action$.pipe(tap(function (entity) {
                // 修正实体主键
                bindingData[entity.primaryKey] = entity.primaryValue;
                // 忽略指定字段
                ignoreFieldsArray.forEach(function (field) {
                    var extractedFields = field.split('.').filter(function (item) { return item; });
                    if (extractedFields.length === 1) {
                        delete bindingData[field];
                    }
                    var parent = extractedFields.slice(0, -1).reduce(function (prev, current, index) {
                        return prev[current];
                    }, bindingData);
                    delete parent[extractedFields[extractedFields.length - 1]];
                });
                bindingData = Object.assign({}, entity.toJSON(), bindingData);
                entity.load(bindingData, { loadChild: false });
            }), catchError(function () {
                return EMPTY;
            }));
        }));
    };
    /**
     * 增量多选帮助批量赋值帮助后事件
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param associatedField 关联字段
     */
    BatchEditService.prototype.afterIncrementalSelectHelpClose = function (frameId, mapFields, associatedField) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        // tslint:disable-next-line: max-line-length
        // const mapping = '{"id":"userRef.userRef", "name":"name", "sex":"sex","age":"userRef.userRef_Age","address":"userRef.userRef_Address","birthday":"userRef.userRef_Birthday","height":"userRef.userRef_Height","isMarried":"userRef.userRef_IsMarried"}';
        if (!associatedField) {
            throw new Error('associated field can`t be empty.');
        }
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        var mappings = JSON.parse(mapFields);
        var foreignKey = associatedField;
        // 将选择人员保存到uistate中
        var rootFrameContext = this.viewModel.frameContext.root;
        // 不是bindingPath则按frameId处理
        var bindingPath = '/';
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            // 根据bindingPath获取bindingdata中现有数据
            var bindingPaths = bindingPath.split('/').filter(function (item) { return item; });
            var currentData_1 = this.viewModel.bindingData.getValue(bindingPaths);
            var currentDataArray_1 = currentData_1.toArray();
            // 找到result中有，但bindingData中没有的，为待新增项
            var appends = [];
            result.reduce(function (prev, item) {
                var itemId = item && item[currentData_1.primaryKey] || null;
                var isExist = currentDataArray_1.find(function (bindingObject) { return bindingObject[foreignKey][foreignKey] === itemId; });
                if (!isExist) {
                    prev.push(item);
                }
                return prev;
            }, appends);
            // 找到bindingData中有，result中没有的，为待删除项
            var removes = [];
            currentDataArray_1.reduce(function (results, item) {
                var index = result.findIndex(function (selectItem) { return selectItem[currentData_1.primaryKey] === item[foreignKey][foreignKey]; });
                if (index === -1) {
                    results.push(item.primaryKeyValue);
                }
                return results;
            }, removes);
            // console.log('addItems', appends, 'removeItems', removes);
            // 调用后端接口新增数据
            var addAction$ = from(appends).pipe(concatMap(function (item) {
                var path = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                return _this.repository.appendByPath(path).pipe(tap(function (entity) {
                    Object.keys(mappings).forEach(function (prop) {
                        var value = _this.getValueByPath(item, prop);
                        var fields = mappings[prop];
                        var groups = fields.split(',').filter(function (p) { return p; });
                        groups.forEach(function (group) {
                            var paths = group.split('.').filter(function (p) { return p; });
                            _this.setValueByPath(entity, paths.join('.'), value);
                        });
                    });
                }), catchError(function () {
                    return EMPTY;
                }));
            }));
            var removeAction$ = from(removes).pipe(concatMap(function (item) {
                var path = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                return _this.repository.removeByPath(path, item).pipe(tap(function () {
                    var befRepository = _this.repository;
                    befRepository.entityManager.removeEntityByPath(path, item);
                }), catchError(function () {
                    return EMPTY;
                }));
            }));
            if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {
                return of(true);
            }
            return concat(addAction$, removeAction$).pipe(catchError(function () { return EMPTY; }));
        }
        return of(true);
    };
    // todo:模拟用户操作，待后端接口支持主表批量新增后重写
    /**
     * 多选帮助批量赋值帮助前事件
     */
    BatchEditService.prototype.beforeMultiSelectHelpOpen = function () {
        return this.clearHelpSelections();
    };
    /**
     * 多选帮助批量赋值帮助后事件
     * @param frameId 绑定路径
     * @param mapFields 字段映射
     * @param commandFrameId 回调命令所在frameId
     * @param commandName 回调命令
     * @deprecated 模拟用户操作，待批量赋值支持主表后废弃
     */
    BatchEditService.prototype.afterMultiSelectHelpClose = function (frameId, mapFields, commandFrameId, commandName) {
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (result && Array.isArray(result)) {
            // 调用后端接口新增数据
            if (!result || result.length < 1) {
                return of(true);
            }
            this.onHelpClose.next({ frameId: frameId, mapFields: mapFields, data: result, commandFrameId: commandFrameId, commandName: commandName });
            return of(true);
        }
        return of(true);
    };
    /**
      * 帮助关闭后处理器
      * @param frameId frameid
      * @param mapFields mapFields
      * @param result 帮助数据结果
      */
    BatchEditService.prototype.onHelpCloseHandler = function (frameId, mapFields, result) {
        var _this = this;
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        var mappings = JSON.parse(mapFields);
        // 不是bindingPath则按frameId处理
        var bindingPath = '/';
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // 将选择人员保存到uistate中
        var rootFrameContext = this.viewModel.frameContext.root;
        var befRepository = this.repository;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            var addAction$ = from(result).pipe(concatMap(function (item) {
                var requestInfo = befRepository.restService.buildRequestInfo();
                if (bindingPaths.length > 0) {
                    var path_1 = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                    return befRepository.restService.createByPath(path_1, requestInfo).pipe(tap(function (responseInfo) {
                        var data = responseInfo.returnValue;
                        var newEntity = befRepository.entityManager.appendEntityByPath(path_1, data, data);
                        Object.keys(mappings).forEach(function (prop) {
                            var value = _this.getValueByPath(item, prop);
                            var fields = mappings[prop];
                            var groups = fields.split(',').filter(function (p) { return p; });
                            groups.forEach(function (group) {
                                var paths = group.split('.').filter(function (p) { return p; });
                                _this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        return newEntity;
                    }));
                }
                else {
                    return befRepository.restService.create(null, requestInfo).pipe(tap(function (responseInfo) {
                        var data = responseInfo.returnValue;
                        var newEntity = _this.repository.buildEntity(data);
                        Object.keys(mappings).forEach(function (prop) {
                            var value = _this.getValueByPath(item, prop);
                            var fields = mappings[prop];
                            var groups = fields.split(',').filter(function (p) { return p; });
                            groups.forEach(function (group) {
                                var paths = group.split('.').filter(function (p) { return p; });
                                _this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        _this.repository.entityCollection.addEntity(newEntity);
                        return newEntity;
                    }));
                }
            }));
            // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);
            if (this.formLoadingService) {
                this.suspendFrameContextEvent(frameId);
                this.formLoadingService.show();
                this.formLoadingService.setSuspend(true);
            }
            return addAction$.pipe(last()).pipe(switchMap(function () {
                var primaryValue = _this.viewModel.bindingData.list.currentId;
                if (primaryValue) {
                    return befRepository.updateChangesById(primaryValue);
                }
                else {
                    return of(null);
                }
            })).subscribe(function () {
                if (_this.formLoadingService) {
                    _this.resumeFrameContextEvent(frameId);
                    _this.formLoadingService.setSuspend(false);
                    _this.formLoadingService.hide();
                }
            }, function () {
                if (_this.formLoadingService) {
                    _this.resumeFrameContextEvent(frameId);
                    _this.formLoadingService.setSuspend(false);
                    _this.formLoadingService.hide();
                }
            });
        }
        return of(null);
    };
    BatchEditService.prototype.suspendFrameContextEvent = function (frameId) {
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = true;
        }
    };
    BatchEditService.prototype.resumeFrameContextEvent = function (frameId) {
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = false;
            frameContext.appContext.messagePipe.next('bindData');
        }
    };
    //#endregion
    BatchEditService.prototype.setValueByPath = function (target, path, value) {
        if (target) {
            var paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    BatchEditService.prototype.getValueByPath = function (target, path) {
        var paths = path.split('.');
        if (paths.length < 1) {
            return;
        }
        if (paths.length === 1) {
            return target[path];
        }
        var result = null;
        paths.forEach(function (prop, index) {
            if (index === 0) {
                result = target && target[prop] || null;
            }
            else {
                result = result && result[prop] || null;
            }
        });
        return result;
    };
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    BatchEditService.prototype.buildPath = function (bindingPath, id) {
        var path = '/' + id;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    /**
     * 获取绑定路径的当前行数组
     * @param bindingPath bindingPath
     * @returns
     */
    BatchEditService.prototype.buildIds = function (bindingPath) {
        var _this = this;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var primaryValue = this.viewModel.bindingData.list.currentId;
        var result = [];
        var paths = [];
        if (bindingPaths.length > 0) {
            result.push(primaryValue);
            // 从表或从从表要复制的行不一定是当前行，用户可以指定
            bindingPaths.pop();
            bindingPaths.forEach(function (path) {
                paths.push(path);
                var bindingList = _this.viewModel.bindingData.getValue(paths);
                if (bindingList) {
                    result.push(bindingList.currentId);
                }
            });
        }
        return result;
    };
    BatchEditService.prototype.updateBindingData = function (input, ids) {
        var _a = input || {}, _b = _a.controlType, controlType = _b === void 0 ? null : _b, _c = _a.value, value = _c === void 0 ? null : _c, _d = _a.options, options = _d === void 0 ? {} : _d, _e = _a.dataType, dataType = _e === void 0 ? null : _e;
        if (controlType) {
            // 对帮助做特殊处理
            if (controlType === 'lookup' || controlType === 'combo-lookup') {
                var mapFields = options.mapFields;
                this.updateLookupField(ids, value, mapFields);
            }
            else {
                this.updateSimpleField(ids, value, input);
            }
        }
    };
    BatchEditService.prototype.updateSimpleField = function (ids, value, column) {
        var _this = this;
        if (!column) {
            return;
        }
        var currentColumnType = column.dataType;
        // 存在行编辑器
        var result = value;
        if (currentColumnType === 'date') {
            var dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');
            if (!dateStr) {
                dateStr = '0001-01-01T00:00:00';
            }
            result = dateStr;
        }
        else if (currentColumnType === 'number') {
            result = Number(value) || 0;
        }
        var field = column.field;
        ids.forEach(function (id) {
            _this.updateBindingList(id, field, result);
        });
    };
    BatchEditService.prototype.updateLookupField = function (ids, helpData, mapFields) {
        var _this = this;
        if (!mapFields) {
            return;
        }
        var helpFields = Object.keys(mapFields);
        var idIndex = helpFields.findIndex(function (item) { return item === 'id'; });
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = tslib_1.__spread(['id'], helpFields);
        }
        if (!helpData) {
            helpFields.reverse();
        }
        helpFields.forEach(function (helpField) {
            var helpValue = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    helpValue = helpData.map(function (item) {
                        return _this.getValue(helpField, item);
                    }).join(',');
                }
                else {
                    helpValue = _this.getValue(helpField, helpData);
                }
            }
            ids.forEach(function (id) {
                _this.updateBindingList(id, mapFields[helpField], helpValue);
            });
        });
    };
    BatchEditService.prototype.updateBindingList = function (primaryValue, propertyName, value) {
        var viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        var propertyNames = propertyName.split('.').filter(function (item) { return item; });
        var bindingObject = this.bindingList.findById(primaryValue);
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            var targetBindingObject_1 = null;
            var fpaths = propertyNames.slice(0, propertyNames.length - 1);
            var targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(function (prop) {
                targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject_1.setValue(targetPropertyName, value, true, true);
        }
    };
    BatchEditService.prototype.getBindingPathArray = function () {
        var path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(function (n) { return n !== ''; });
        }
        return [];
    };
    BatchEditService.prototype.getValue = function (f, data) {
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce(function (a, b) {
                return a[b];
            }, data);
        }
        return val;
    };
    Object.defineProperty(BatchEditService.prototype, "bindingList", {
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.viewModel.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.viewModel.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据映射将数据赋值给bindingData
     * @param data
     * @param mapFields
     * @param bindingData
     */
    BatchEditService.prototype.mappingRow = function (data, mapFields, entity, bindingPath) {
        var _this = this;
        Object.keys(mapFields).forEach(function (prop) {
            var value = _this.getValueByPath(data, prop);
            var fields = mapFields[prop];
            var groups = fields.split(',').filter(function (p) { return p; });
            groups.forEach(function (group) {
                var paths = group.split('.').filter(function (p) { return p; });
                _this.setValueByPath(entity, paths.join('.'), value);
            });
        });
    };
    /**
     * 通过frameId获取对应的组件上下文
     * @param frameId frameId
     * @returns
     */
    BatchEditService.prototype.getFrameContextById = function (frameId) {
        if (!frameId) {
            return null;
        }
        var appContext = this.injector.get(AppContext, null);
        var frameContext = null;
        if (appContext) {
            frameContext = appContext.frameContextManager.getFrameContextById(frameId);
        }
        return frameContext;
    };
    BatchEditService.prototype.getEntityByPath = function (frameContext, bindingPaths, currentId) {
        bindingPaths = tslib_1.__spread(bindingPaths);
        var id = frameContext.bindingData.list.currentId;
        var entity = frameContext.repository.entityCollection.getEntityById(id);
        var item = entity;
        var paths = [];
        var tailPath = bindingPaths.pop();
        var parent = bindingPaths.reduce(function (object, path) {
            paths.push(path);
            if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {
                var value = object[path];
                if (value && value instanceof EntityList) {
                    var bindingList = frameContext.bindingData.getValue(paths);
                    var currentItemId = bindingList.currentId;
                    return value.get(currentItemId);
                }
                else {
                    return value;
                }
            }
            else {
                return null;
            }
        }, item);
        if (parent instanceof Entity) {
            var list = parent[tailPath];
            if (list) {
                return list.get(currentId);
            }
            else {
                throw new Error("\u65E0\u6548\u7684bindingPath.");
            }
        }
        else {
            throw new Error("\u65E0\u6548\u7684bindingPath.");
        }
    };
    BatchEditService.prototype.endEdit = function (frameContext) {
        var appContext = frameContext && frameContext.getFormAppContext();
        return of(null).pipe(tap(function () {
            if (appContext) {
                appContext.messagePipe.next({ type: 'endEdit' });
            }
        }), 
        // todo: 不应该使用delay，应该串流
        delay(5));
    };
    BatchEditService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BatchEditService.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentManagerService },
        { type: ViewModel },
        { type: Repository },
        { type: BatchEditDialogService },
        { type: DateTimeHelperService },
        { type: LanguageService },
        { type: FormNotifyService },
        { type: UploadService }
    ]; };
    return BatchEditService;
}());
export { BatchEditService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gtZWRpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2JhdGNoLWVkaXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFlLFNBQVMsRUFBaUIsVUFBVSxFQUFFLE1BQU0sRUFBNkIsVUFBVSxFQUFpRCxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3TCxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUzQyxrQ0FBa0M7QUFDbEM7O0dBRUc7QUFDSDtJQUlFLDBCQUNVLFFBQWtCLEVBQ2xC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QTBCO1FBQ3hDLElBQU0sVUFBVSxHQUFlLFlBQVksSUFBSSxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNoRixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ2xCLEdBQUcsQ0FBQztZQUNGLElBQUksVUFBVSxFQUFFO2dCQUNkLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7YUFDbEQ7UUFDSCxDQUFDLENBQUM7UUFDRix3QkFBd0I7UUFDeEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUNULENBQUM7SUFDSixDQUFDOztnQkExdENGLFVBQVU7Ozs7Z0JBbEJVLFFBQVE7Z0JBT3BCLHVCQUF1QjtnQkFOVixTQUFTO2dCQUFpQixVQUFVO2dCQUlqRCxzQkFBc0I7Z0JBQ3RCLHFCQUFxQjtnQkFHckIsZUFBZTtnQkFDZixpQkFBaUI7Z0JBQ2pCLGFBQWE7O0lBa3VDdEIsdUJBQUM7Q0FBQSxBQTN0Q0QsSUEydENDO1NBMXRDWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ0xpc3QsIFZpZXdNb2RlbCwgQmluZGluZ09iamVjdCwgUmVwb3NpdG9yeSwgRW50aXR5LCBGcmFtZUNvbnRleHQsIEJpbmRpbmdEYXRhLCBBcHBDb250ZXh0LCBCaW5kaW5nUHJvcGVydHksIERhdGFUeXBlSW5mbywgY3JlYXRlRW50aXRpZXMsIEVudGl0eUxpc3QgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IGZyb20sIEVNUFRZLCBjb25jYXQsIG9mLCBTdWJqZWN0LCBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNvbmNhdE1hcCwgY2F0Y2hFcnJvciwgdGFwLCBzd2l0Y2hNYXAsIGxhc3QsIG1hcCwgZGVsYXksIHRha2VMYXN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5LCBSZXNwb25zZUluZm8gfSBmcm9tICdAZmFycmlzL2JlZic7XHJcbmltcG9ydCB7IEJhdGNoRWRpdERpYWxvZ1NlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWJhdGNoLWVkaXQtZGlhbG9nJztcclxuaW1wb3J0IHsgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vZGF0ZSc7XHJcbmltcG9ydCB7IENvbXBvbmVudE1hbmFnZXJTZXJ2aWNlIH0gZnJvbSAnLi9jb21wb25lbnQtbWFuYWdlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybUxvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLWxvYWRpbmcvZm9ybS1sb2FkaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1Ob3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXBsb2FkU2VydmljZSB9IGZyb20gJ0Bnc3Atc3ZjL2Zvcm1kb2MtdXBsb2FkJztcclxuaW1wb3J0IHsgRm9ybUVycm9yU2VydmljZSB9IGZyb20gJy4vZXJyb3InO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxyXG4vKipcclxuICog5om56YeP57yW6L6R5pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXRjaEVkaXRTZXJ2aWNlIHtcclxuICBwcml2YXRlIGZvcm1Mb2FkaW5nU2VydmljZTogRm9ybUxvYWRpbmdTZXJ2aWNlO1xyXG4gIHByaXZhdGUgb25IZWxwQ2xvc2U6IFN1YmplY3Q8YW55PjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRNYW5hZ2VyU2VydmljZTogQ29tcG9uZW50TWFuYWdlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHZpZXdNb2RlbDogVmlld01vZGVsLFxyXG4gICAgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4sXHJcbiAgICBwcml2YXRlIGJhdGNoRWRpdERpYWxvZ1NlcnZpY2U6IEJhdGNoRWRpdERpYWxvZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGRhdGVTZXJ2aWNlOiBEYXRlVGltZUhlbHBlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBmb3JtTm90aWZ5U2VydmljZTogRm9ybU5vdGlmeVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZpbGVVcGxvYWRTZXJ2aWNlOiBVcGxvYWRTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PEZvcm1Mb2FkaW5nU2VydmljZT4oRm9ybUxvYWRpbmdTZXJ2aWNlLCBudWxsKTtcclxuICAgIGlmICghdGhpcy5sYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgICAgdGhpcy5sYW5ndWFnZVNlcnZpY2UgPSBMYW5ndWFnZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy5mb3JtTm90aWZ5U2VydmljZSkge1xyXG4gICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQ8Rm9ybU5vdGlmeVNlcnZpY2U+KEZvcm1Ob3RpZnlTZXJ2aWNlLCBudWxsKTtcclxuICAgIH1cclxuICAgIHRoaXMub25IZWxwQ2xvc2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICB0aGlzLm9uSGVscENsb3NlLnN1YnNjcmliZShyZXN1bHQgPT4ge1xyXG4gICAgICBjb25zdCB7IGZyYW1lSWQgPSAnJywgbWFwRmllbGRzID0gJycsIGRhdGEgPSBbXSB9ID0gcmVzdWx0IHx8IHt9O1xyXG4gICAgICB0aGlzLm9uSGVscENsb3NlSGFuZGxlcihmcmFtZUlkLCBtYXBGaWVsZHMsIGRhdGEpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IGZvcm1FcnJvclNlcnZpY2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pbmplY3RvciAmJiB0aGlzLmluamVjdG9yLmdldDxGb3JtRXJyb3JTZXJ2aWNlPihGb3JtRXJyb3JTZXJ2aWNlLCBudWxsKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5omT5byA5om56YeP57yW6L6R5a+56K+d5qGGXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcGVuQmF0Y2hFZGl0RGlhbG9nKGZyYW1lSWQ6IHN0cmluZywgZW5hYmxlRGljdFBpY2tpbmc6IGJvb2xlYW4gfCBzdHJpbmcgPSBmYWxzZSkge1xyXG4gICAgaWYgKCFmcmFtZUlkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignZnJhbWVJZCBpcyByZXF1aXJlZC4nKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZW5hYmxlRGljdFBpY2tpbmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGVuYWJsZURpY3RQaWNraW5nID0gKGVuYWJsZURpY3RQaWNraW5nID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuYmF0Y2hFZGl0RGlhbG9nU2VydmljZSkge1xyXG4gICAgICBsZXQgY29sdW1ucyA9IFtdO1xyXG4gICAgICBpZiAodGhpcy52aWV3TW9kZWwpIHtcclxuICAgICAgICBjb25zdCBncmlkRnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQucm9vdC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgICBjb25zdCBncmlkVmlld01vZGVsID0gZ3JpZEZyYW1lQ29udGV4dC52aWV3TW9kZWw7XHJcbiAgICAgICAgaWYgKGdyaWRWaWV3TW9kZWwgJiYgZ3JpZFZpZXdNb2RlbC5oYXNPd25Qcm9wZXJ0eSgnZGF0YUdyaWRDb2x1bW5zTmFtZScpKSB7XHJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgICBjb25zdCBncmlkQ29sdW1uc0F0dHJOYW1lID0gZ3JpZFZpZXdNb2RlbFsnZGF0YUdyaWRDb2x1bW5zTmFtZSddO1xyXG4gICAgICAgICAgY29sdW1ucyA9IGdyaWRWaWV3TW9kZWxbZ3JpZENvbHVtbnNBdHRyTmFtZV07XHJcbiAgICAgICAgfSBlbHNlIGlmIChncmlkVmlld01vZGVsICYmIGdyaWRWaWV3TW9kZWwuaGFzT3duUHJvcGVydHkoJ2RhdGFHcmlkQ29sdW1ucycpKSB7XHJcbiAgICAgICAgICBjb2x1bW5zID0gZ3JpZFZpZXdNb2RlbFsnZGF0YUdyaWRDb2x1bW5zJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlkczogc3RyaW5nW10gPSBncmlkVmlld01vZGVsLnVpU3RhdGVbJ2lkcyddIHx8IFtdO1xyXG4gICAgICAgIGlmICghaWRzIHx8IGlkcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzQ2hlY2tCYXRjaEVkaXRSb3dzLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGlhbG9nUmVmOiBhbnkgPSB0aGlzLmJhdGNoRWRpdERpYWxvZ1NlcnZpY2UuYmF0Y2hFZGl0KGNvbHVtbnMsIHtcclxuICAgICAgICAgIHJvd3M6IGlkcy5sZW5ndGgsXHJcbiAgICAgICAgICBlbmFibGVEaWN0UGlja2luZyxcclxuICAgICAgICAgIG9uQ29uZmlybTogKGlucHV0czogQXJyYXk8YW55PikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZHMpICYmIGlkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ29wZW5CYXRjaEVkaXREaWFsb2cnLCBpbnB1dHMpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuYXBwQ29udGV4dDtcclxuICAgICAgICAgICAgICBhcHBDb250ZXh0LmNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXIuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCaW5kaW5nRGF0YShpbnB1dCwgaWRzKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBhcHBDb250ZXh0LmNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXIucmVhdHRhY2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaWFsb2dSZWYuY2xvc2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmiZPlvIDpmpDol4/luK7liqlcclxuICAgKiBAcGFyYW0gaGVscElkIOW4ruWKqWlkXHJcbiAgICovXHJcbiAgcHVibGljIG9wZW5IaWRkZW5IZWxwKGhlbHBJZDogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWhlbHBJZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IGVycm9yLGhlbHBJZCBjYW5gdCBiZSBlbXB0eScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29tcG9uZW50TWFuYWdlclNlcnZpY2UgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXJTZXJ2aWNlLmdldENvbnRyb2woaGVscElkKTtcclxuICAgIGlmIChjb21wb25lbnRNYW5hZ2VyU2VydmljZSkge1xyXG4gICAgICBjb21wb25lbnRNYW5hZ2VyU2VydmljZS5zaG93RGlhbG9nKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoZSBjb21wb25lbnQgd2hpY2ggaWQgaXMgJHtoZWxwSWR9IGNhbid0IGJlIGZvdW5kIWApO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmuIXnqbrluK7liqnli77pgInvvIjlj6rog73mjILovb3liLDluK7liqnliY3kuovku7bvvIlcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXJIZWxwU2VsZWN0aW9ucygpIHtcclxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XHJcbiAgICBjb25zdCBoZWxwRWxlbWVudCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbS5pbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgaWYgKGhlbHBFbGVtZW50KSB7XHJcbiAgICAgIGhlbHBFbGVtZW50LmRpc3BsYXlWYWx1ZSA9ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDli77pgInlvZPliY3ooYxcclxuICAgKiBAcGFyYW0gZnJhbWVJZCBmcmFtZUlkXHJcbiAgICogQHBhcmFtIG1hcEZpZWxkcyDlrZfmrrXmmKDlsIRcclxuICAgKiBAcGFyYW0gcHJpbWFyeUtleVZhbHVlIOW4ruWKqeS4u+mUruWtl+autVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjaGVja0N1cnJlbnRSb3coZnJhbWVJZDogc3RyaW5nLCBtYXBGaWVsZHM6IHN0cmluZywgcHJpbWFyeUtleVZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XHJcbiAgICBjb25zdCBoZWxwRWxlbWVudCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbS5pbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgaWYgKCFwcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgcHJpbWFyeUtleVZhbHVlID0gJ2lkJztcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcHBpbmdzID0gSlNPTi5wYXJzZShtYXBGaWVsZHMpO1xyXG4gICAgaWYgKGhlbHBFbGVtZW50KSB7XHJcbiAgICAgIGZyYW1lSWQgPSBmcmFtZUlkIHx8IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5mcmFtZUlkO1xyXG4gICAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgICAgICBjb25zdCBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGg7XHJcbiAgICAgICAgICBpZiAoYmluZGluZ1BhdGgpIHtcclxuICAgICAgICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgY29uc3QgYmluZGluZ0xpc3QgPSBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUoYmluZGluZ1BhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdyA9IGJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbWFwcGluZ3NbcHJpbWFyeUtleVZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKHBhdGgpIHtcclxuICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoY3VycmVudFJvdywgcGF0aCk7XHJcbiAgICAgICAgICAgICAgaGVscEVsZW1lbnQuZGlzcGxheVZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Lul5biu5Yqp5Yu+6YCJ5pWw5o2u5L2c5Li65L6d5o2u77yM5om56YeP5paw5aKe5Li76KGo5pWw5o2uXHJcbiAgICogQHBhcmFtIGZyYW1lSWQg5Li76KGo5omA5ZyoZnJhbWXnmoRpZFxyXG4gICAqIEBwYXJhbSBtYXBGaWVsZHMg5biu5Yqp5a2X5q615LiO5Li76KGo5a2X5q615pig5bCEXHJcbiAgICogQGRlc2NyaXB0aW9uIOS7peW4ruWKqeWLvumAieaVsOaNruS9nOS4uuS+neaNru+8jOaJuemHj+aWsOWinuS4u+ihqOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBiYXRjaEFwcGVuZChmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gc2VsZi5jb250ZXh0ICYmIHNlbGYuY29udGV4dC5ldmVudFBhcmFtIHx8IFtdO1xyXG4gICAgaWYgKCFtYXBGaWVsZHMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXBGaWVsZHMgY2FuYHQgYmUgZW1wdHkuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0ICYmIEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBtYXBwaW5ncyA9IEpTT04ucGFyc2UobWFwRmllbGRzKTtcclxuICAgICAgLy8g5LiN5pivYmluZGluZ1BhdGjliJnmjIlmcmFtZUlk5aSE55CGXHJcbiAgICAgIGxldCBiaW5kaW5nUGF0aCA9ICcvJztcclxuICAgICAgY29uc3QgYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQsIG51bGwpO1xyXG4gICAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgICAgIGlmIChmcmFtZUNvbnRleHQpIHtcclxuICAgICAgICAgIGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZnJhbWVJZCBpcyBpbnZhbGlkIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0gW107XHJcbiAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMobWFwcGluZ3MpLmZvckVhY2goKHByb3A6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlQnlQYXRoKGl0ZW0sIHByb3ApO1xyXG4gICAgICAgICAgY29uc3QgZmllbGRzID0gbWFwcGluZ3NbcHJvcF07XHJcbiAgICAgICAgICBjb25zdCBncm91cHM6IGFueVtdID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gZ3JvdXAuc3BsaXQoJy4nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChkZWZhdWx0VmFsdWUsIHBhdGhzLmpvaW4oJy4nKSwgdmFsdWUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVmYXVsdFZhbHVlcy5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuYmF0Y2hBcHBlbmQoZGVmYXVsdFZhbHVlcykucGlwZShcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpKSxcclxuICAgICAgICBtYXAoKCkgPT4gdHJ1ZSlcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Lul5biu5Yqp5Yu+6YCJ5pWw5o2u5L2c5Li65L6d5o2u77yM5om56YeP5paw5aKe5LuO6KGoL+S7juS7juihqFxyXG4gICAqIEBwYXJhbSBmcmFtZUlkIOS7juihqC/ku47ku47ooajmiYDlnKhmcmFtZeeahGlkXHJcbiAgICogQHBhcmFtIG1hcEZpZWxkcyDluK7liqnlrZfmrrXkuI7ku47ooagv5LuO5LuO6KGo5a2X5q615pig5bCEXHJcbiAgICogQGRlc2NyaXB0aW9uIOS7peW4ruWKqeWLvumAieaVsOaNruS9nOS4uuS+neaNru+8jOaJuemHj+aWsOWinuS7juihqC/ku47ku47ooahcclxuICAgKi9cclxuICBwdWJsaWMgYmF0Y2hBcHBlbmRCeVBhdGhCYXNlZE9uSGVscFNlbGVjdGlvbnMoZnJhbWVJZDogc3RyaW5nLCBtYXBGaWVsZHM6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIGlmICghbWFwRmllbGRzKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFwRmllbGRzIGNhbmB0IGJlIGVtcHR5LicpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgbWFwcGluZ3MgPSBKU09OLnBhcnNlKG1hcEZpZWxkcyk7XHJcbiAgICAgIC8vIOS4jeaYr2JpbmRpbmdQYXRo5YiZ5oyJZnJhbWVJZOWkhOeQhlxyXG4gICAgICBsZXQgYmluZGluZ1BhdGggPSAnLyc7XHJcbiAgICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgICAgaWYgKGFwcENvbnRleHQpIHtcclxuICAgICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgICAgICBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggfHwgJy8nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZyYW1lSWQgaXMgaW52YWxpZCEnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IFtdO1xyXG4gICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG1hcHBpbmdzKS5mb3JFYWNoKChwcm9wOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChpdGVtLCBwcm9wKTtcclxuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IG1hcHBpbmdzW3Byb3BdO1xyXG4gICAgICAgICAgY29uc3QgZ3JvdXBzOiBhbnlbXSA9IGZpZWxkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoZGVmYXVsdFZhbHVlLCBwYXRocy5qb2luKCcuJyksIHZhbHVlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMucHVzaChkZWZhdWx0VmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkKTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5iYXRjaEFwcGVuZEJ5UGF0aChwYXRoLCBkZWZhdWx0VmFsdWVzKS5waXBlKFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5oaWRlKCkpLFxyXG4gICAgICAgIG1hcCgoKSA9PiB0cnVlKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmibnph4/mlrDlop7luKbpmYTku7bnmoTku47ooajmiJbku47ku47ooajmlbDmja5cclxuICAgKiBAcGFyYW0gZnJhbWVJZFxyXG4gICAqIEBwYXJhbSBtYXBGaWVsZHNcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGgg6ZmE5Lu2dWR05a2X5q616Lev5b6E77yM5Y+v5pSv5oyB5aSa5Liq77yM5Lul6YCX5Y+35YiG6ZqUXHJcbiAgICogQHBhcmFtIHJvb3RJZCDpmYTku7blrZjlgqjmoLnnm67lvZVcclxuICAgKiBAcGFyYW0gcGF0aCDpmYTku7blrZjlgqjnm67lvZVcclxuICAgKiBAZGVzY3JpcHRpb24g5om56YeP5paw5aKe5bim6ZmE5Lu255qE5LuO6KGo5oiW5LuO5LuO6KGo5pWw5o2u5LiO5om56YeP5paw5aKe5LuO6KGo5LuO5LuO6KGo5pWw5o2u5LiA6Ie077yM5Zyo5om56YeP5paw5aKe5pWw5o2u55qE5Z+656GA5LiK5aKe5Yqg5LqG6ZmE5Lu25aSN5Yi2XHJcbiAgICogQHRvZG8g55uu5YmN6ZmE5Lu25aSN5Yi25Zyo5YmN56uv6LCD55So77yM5Lya5Y+R6LW35aSa5Liq6K+35rGC77yM5LiU5a2Y5Zyo5a6J5YWo6Zeu6aKY77yM5ZCO57ut5bqU5Zyodm/pm4bmiJBcclxuICAgKi9cclxuICBwdWJsaWMgYmF0Y2hBcHBlbmRCeVBhdGhXaXRoQXR0YWNobWVudChmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nLCBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCByb290SWQ6IHN0cmluZywgcGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gc2VsZi5jb250ZXh0ICYmIHNlbGYuY29udGV4dC5ldmVudFBhcmFtIHx8IFtdO1xyXG4gICAgaWYgKCFtYXBGaWVsZHMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXBGaWVsZHMgY2FuYHQgYmUgZW1wdHkuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign6ZmE5Lu2dWR05a2X5q616Lev5b6E5LiN6IO95Li656m6Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0ICYmIEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBtYXBwaW5ncyA9IEpTT04ucGFyc2UobWFwRmllbGRzKTtcclxuICAgICAgbGV0IGJpbmRpbmdQYXRoID0gJy8nO1xyXG4gICAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5pbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICAgIC8vIOS/ruato2JpbmRpbmdQYXRoXHJcbiAgICAgIGlmIChhcHBDb250ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgZnJhbWVDb250ZXh0ID0gYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICAgICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICAgICAgYmluZGluZ1BhdGggPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoIHx8ICcvJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmcmFtZUlkIGlzIGludmFsaWQhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIOWkhOeQhumZhOS7tnVkdOWtl+autVxyXG4gICAgICBjb25zdCBhdHRhY2htZW50RmllbGRzID0gYXR0YWNobWVudEluZm9GaWVsZFBhdGguc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKS5tYXAocGF0aCA9PiBwYXRoLnNwbGl0KCcvJykucG9wKCkpO1xyXG4gICAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICAgIC8vIOWFiOWkjeWItumZhOS7tlxyXG4gICAgICBjb25zdCBjb3B5RmlsZXMkID0gZnJvbShyZXN1bHQpLnBpcGUoY29uY2F0TWFwKChpdGVtID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3B5Um93RmlsZXMoaXRlbSwgYXR0YWNobWVudEZpZWxkcywgcm9vdElkLCBwYXRoKS5waXBlKFxyXG4gICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgICBsZXQgY2FmRXJyb3IgPSBlcnJvci5lcnJvcjtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWZFcnJvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICBjYWZFcnJvciA9IEpTT04ucGFyc2UoY2FmRXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm1FcnJvclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKGNhZkVycm9yLm1lc3NhZ2UgfHwgdGhpcy5sYW5ndWFnZVNlcnZpY2UuY29weUZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfSkpKTtcclxuICAgICAgcmV0dXJuIGNvcHlGaWxlcyQucGlwZSh0YWtlTGFzdCgxKSkucGlwZShzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgIC8vIOaLvOijhem7mOiupOWAvFxyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZXMgPSB0aGlzLmJ1aWxkRGVmYXVsdFZhbHVlcyhyZXN1bHQsIG1hcHBpbmdzKTtcclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmJhdGNoQXBwZW5kQnlQYXRoKHBhdGgsIGRlZmF1bHRWYWx1ZXMpLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKCkgPT4gdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpKSxcclxuICAgICAgICAgIG1hcCgoKSA9PiB0cnVlKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg6buY6K6k5YC85pWw57uEXHJcbiAgICogQHBhcmFtIHNlbGVjdGVkVmFsdWVzXHJcbiAgICogQHBhcmFtIG1hcEZpZWxkc1xyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZERlZmF1bHRWYWx1ZXMoc2VsZWN0ZWRWYWx1ZXM6IGFueVtdLCBtYXBGaWVsZHM6IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogYW55W10ge1xyXG4gICAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IFtdO1xyXG4gICAgc2VsZWN0ZWRWYWx1ZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB7fTtcclxuICAgICAgT2JqZWN0LmtleXMobWFwRmllbGRzKS5mb3JFYWNoKChwcm9wOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAvLyDluK7liqnmlbDmja5cclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbSwgcHJvcCk7XHJcbiAgICAgICAgLy8g55uu5qCH5a2X5q61XHJcbiAgICAgICAgY29uc3QgZmllbGRzID0gbWFwRmllbGRzW3Byb3BdO1xyXG4gICAgICAgIGNvbnN0IGdyb3VwczogYW55W10gPSBmaWVsZHMuc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcbiAgICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICB0aGlzLnNldFZhbHVlQnlQYXRoKGRlZmF1bHRWYWx1ZSwgcGF0aHMuam9pbignLicpLCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBkZWZhdWx0VmFsdWVzLnB1c2goZGVmYXVsdFZhbHVlKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWkjeWItuihjOS4reaJgOaciemZhOS7tlxyXG4gICAqIEBwYXJhbSByb3dcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEZpZWxkc1xyXG4gICAqIEBwYXJhbSByb290SWRcclxuICAgKiBAcGFyYW0gcGF0aFxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb3B5Um93RmlsZXMocm93OiBhbnksIGF0dGFjaG1lbnRGaWVsZHM6IHN0cmluZ1tdLCByb290SWQ6IHN0cmluZywgcGF0aDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gZnJvbShhdHRhY2htZW50RmllbGRzKS5waXBlKFxyXG4gICAgICBjb25jYXRNYXAoKGZpZWxkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBhdHRhY2htZW50SWQgPSB0aGlzLmdldFZhbHVlQnlQYXRoKHJvdywgYCR7ZmllbGR9LmF0dGFjaG1lbnRJZGApO1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50SWQpIHtcclxuICAgICAgICAgIC8vIOWPkemAgeWkjeWItumZhOS7tueahOivt+axgu+8jOiOt+WPlumZhOS7tmlkXHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5maWxlVXBsb2FkU2VydmljZS5jb3B5RmlsZShhdHRhY2htZW50SWQsIHJvb3RJZCwgcGF0aCkucGlwZShcclxuICAgICAgICAgICAgdGFwKChhdHRhY2htZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIOWkjeWItuaIkOWKn1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgocm93LCBbZmllbGQsICdhdHRhY2htZW50SWQnXS5qb2luKCcuJyksIGF0dGFjaG1lbnRJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDooYzlhoXluK7liqnlpJrpgInmibnph4/mlrDlop7miJbmm7/mjaLlrZDooajmlbDmja5cclxuICAgKiBAcGFyYW0gZnJhbWVJZCBmcmFtZUlkLCBvcHRpb25hbCzkuLrnqbrml7bkvb/nlKjlkb3ku6TmiafooYzml7bmiYDlnKjnmoTkuIrkuIvmlodcclxuICAgKiBAcGFyYW0gbWFwRmllbGRzIOWtl+auteaYoOWwhFxyXG4gICAqIEBwYXJhbSBwcmltYXJ5S2V5IOW4ruWKqeS4u+mUruWtl+aute+8jOm7mOiupOS4umlkXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgYmF0Y2hBcHBlbmRCYXNlZE9uUm93SGVscFNlbGVjdGlvbnMoZnJhbWVJZDogc3RyaW5nLCBtYXBGaWVsZHM6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGxldCByZXN1bHQ6IGFueVtdID0gc2VsZi5jb250ZXh0ICYmIHNlbGYuY29udGV4dC5ldmVudFBhcmFtIHx8IFtdO1xyXG4gICAgaWYgKCFtYXBGaWVsZHMpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFwcGluZ3MgPSBKU09OLnBhcnNlKG1hcEZpZWxkcyk7XHJcbiAgICBpZiAoIW1hcHBpbmdzIHx8ICFtYXBwaW5ncy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBmcmFtZUlkID0gZnJhbWVJZCB8fCB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuZnJhbWVJZDtcclxuICAgIGlmICghZnJhbWVJZCkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSB0aGlzLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICBpZiAoIWZyYW1lQ29udGV4dCkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5lbmRFZGl0KGZyYW1lQ29udGV4dCkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGlmIChyZXN1bHQgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgLy8g6I635Y+W5b2T5YmN6KGMXHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCA9IGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShiaW5kaW5nUGF0aHMpIGFzIEJpbmRpbmdMaXN0O1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gYmluZGluZ0xpc3QuY3VycmVudEl0ZW07XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3dJZCA9IGJpbmRpbmdMaXN0LmN1cnJlbnRJZDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEVudGl0eSA9IHRoaXMuZ2V0RW50aXR5QnlQYXRoKGZyYW1lQ29udGV4dCwgYmluZGluZ1BhdGhzLCBjdXJyZW50Um93SWQpO1xyXG4gICAgICAgICAgICBjb25zdCBoZWFkSXRlbSA9IHJlc3VsdFswXTtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5LuF5Yu+6YCJ5LiA5p2h77yM5YiZ5bqU5pu/5o2i5b2T5YmN6KGM55qE5pig5bCEXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcy5tYXBwaW5nUm93KGhlYWRJdGVtLCBtYXBwaW5ncywgY3VycmVudEVudGl0eSwgYmluZGluZ1BhdGgpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBoZWFkSXRlbTtcclxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtYXBwaW5ncykuZm9yRWFjaCgocHJvcDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoZGF0YSwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBtYXBwaW5nc1twcm9wXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwczogYW55W10gPSBmaWVsZHMuc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBncm91cC5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuc2V0VmFsdWUoYmluZGluZ1BhdGhzLmNvbmNhdChwYXRocyksIHZhbHVlLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjb25zdCBpZE1hcEZpZWxkID0gbWFwcGluZ3NbJ2lkJ107XHJcbiAgICAgICAgICAgICAgY29uc3Qgc291cmNlSXRlbUlkID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChjdXJyZW50RW50aXR5LCBpZE1hcEZpZWxkKTtcclxuICAgICAgICAgICAgICAvLyDlpoLmnpzlvZPliY3ooYzmsqHmnInmmKDlsITmiJbli77pgInnu5PmnpzkuK3mib7kuI3liLDlvZPliY3ooYznmoTmmKDlsIRcclxuICAgICAgICAgICAgICBpZiAoIXNvdXJjZUl0ZW1JZCB8fCByZXN1bHQuZmluZEluZGV4KGl0ZW0gPT4gaXRlbVtiaW5kaW5nTGlzdC5wcmltYXJ5S2V5XSA9PT0gc291cmNlSXRlbUlkKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIOmHjeaWsOaYoOWwhOW9k+WJjeihjFxyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXBwaW5nUm93KGhlYWRJdGVtLCBtYXBwaW5ncywgY3VycmVudEVudGl0eSwgYmluZGluZ1BhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlSXRlbUlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHJlc3VsdC5maW5kSW5kZXgoaXRlbSA9PiBpdGVtW2JpbmRpbmdMaXN0LnByaW1hcnlLZXldID09PSBzb3VyY2VJdGVtSWQpO1xyXG4gICAgICAgICAgICAgICAgLy8g6YeN5paw5pig5bCE5b2T5YmN6KGMXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcHBpbmdSb3cocmVzdWx0W2luZGV4XSwgbWFwcGluZ3MsIGN1cnJlbnRFbnRpdHksIGJpbmRpbmdQYXRoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyDlvZPliY3ooYzlpITnkIblrozmiJBcclxuICAgICAgICAgICAgICAvLyDlpITnkIbmnKrmmKDlsITnmoTooYxcclxuICAgICAgICAgICAgICBjb25zdCBlbXB0eVJvd3MgPSBiaW5kaW5nTGlzdC50b0FycmF5KCkuZmlsdGVyKGJpbmRpbmdPYmplY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldFZhbHVlQnlQYXRoKGJpbmRpbmdPYmplY3QsIG1hcHBpbmdzW2JpbmRpbmdMaXN0LnByaW1hcnlLZXldKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhaWQ7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgaWYgKGVtcHR5Um93cyAmJiBlbXB0eVJvd3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJvd3MgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IGVtcHR5Um93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgcm93cyA9IHJlc3VsdC5zbGljZSgwLCBlbXB0eVJvd3MubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKGVtcHR5Um93cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByb3dzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEl0ZW0gPSBlbXB0eVJvd3NbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eUJ5UGF0aChmcmFtZUNvbnRleHQsIGJpbmRpbmdQYXRocywgdGFyZ2V0SXRlbS5wcmltYXJ5S2V5VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLm1hcHBpbmdSb3coaXRlbSwgbWFwcGluZ3MsIGVudGl0eSwgYmluZGluZ1BhdGgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIOWkhOeQhuWJqeS9meWLvumAiVxyXG4gICAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB7fTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1hcHBpbmdzKS5mb3JFYWNoKChwcm9wOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlQnlQYXRoKGl0ZW0sIHByb3ApO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBtYXBwaW5nc1twcm9wXTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBzOiBhbnlbXSA9IGZpZWxkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBncm91cC5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoZGVmYXVsdFZhbHVlLCBwYXRocy5qb2luKCcuJyksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZXMucHVzaChkZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aChiaW5kaW5nUGF0aCwgdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmJhdGNoQXBwZW5kQnlQYXRoKHBhdGgsIGRlZmF1bHRWYWx1ZXMpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgIHRhcCgoKSA9PiB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5oaWRlKCkpXHJcbiAgICAgICAgICAgICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDM1MCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgNTApO1xyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlpI3liLbkuLvooajmlbDmja5cclxuICAgKiBAcGFyYW0gaWQg6KaB5aSN5Yi255qE5pWw5o2uaWRcclxuICAgKiBAcGFyYW0gZmllbGRzIOimgeWkjeWItueahOWtl+autVxyXG4gICAqIEBkZXNjcmlwdGlvbiDku4XmlK/mjIHlpI3liLbkuLvooajmlbDmja5cclxuICAgKiBAZGVwcmVjYXRlZCDor6Xmlrnms5Xlt7Looqvlup/lvIPvvIzor7fkvb/nlKhjbG9uZeaWueazleabv+S7o+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3B5KGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0Q29weURhdGEsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeSA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICBjb25zdCBiYXNlVXJpID0gYmVmUmVwb3NpdG9yeS5yZXN0U2VydmljZS5iYXNlVXJpO1xyXG4gICAgY29uc3QgdXJsID0gYCR7YmFzZVVyaX0vc2VydmljZS9jb3B5bWFpbm9ianZvYWN0aW9uYDtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gYmVmUmVwb3NpdG9yeS5yZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKCk7XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICByZXF1ZXN0SW5mbyxcclxuICAgICAgZGF0YUlEOiBpZFxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHlcclxuICAgIH07XHJcbiAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICByZXR1cm4gYmVmUmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHVybCwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB9KSxcclxuICAgICAgbWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucmVwb3NpdG9yeS5idWlsZEVudGl0eShyZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uYWRkRW50aXR5KGVudGl0eSk7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlpI3liLbmlbDmja7vvIjmlK/mjIHkuLvooajjgIHku47ooajjgIHku47ku47ooajvvIlcclxuICAgKiBAcGFyYW0gaWQg6KaB5aSN5Yi255qE6KGMXHJcbiAgICogQHBhcmFtIHBhdGgg6K+35rGC6Lev5b6EXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgY2xvbmUoaWQ6IHN0cmluZywgcGF0aDogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3RDb3B5RGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGlmICghcGF0aCkge1xyXG4gICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGF0aElzUmVxdWlyZWQsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgIHBhdGggPSAnLycgKyBwYXRoO1xyXG4gICAgfVxyXG4gICAgcGF0aCA9IHBhdGgudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGg7XHJcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIGNvbnN0IGJhc2VVcmkgPSBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLmJhc2VVcmk7XHJcbiAgICBjb25zdCB1cmwgPSBgJHtiYXNlVXJpfSR7cGF0aH1gO1xyXG4gICAgY29uc3QgcmVxdWVzdEluZm8gPSBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLmJ1aWxkUmVxdWVzdEluZm8oKTtcclxuICAgIGNvbnN0IGlkcyA9IHRoaXMuYnVpbGRJZHMoYmluZGluZ1BhdGgpO1xyXG4gICAgaWRzLnB1c2goaWQpO1xyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgcmVxdWVzdEluZm8sXHJcbiAgICAgIGRhdGFJRDogaWRzLmpvaW4oJywnKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHlcclxuICAgIH07XHJcbiAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICByZXR1cm4gYmVmUmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHVybCwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB9KSxcclxuICAgICAgbWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlO1xyXG4gICAgICAgIGxldCBlbnRpdHkgPSBudWxsO1xyXG4gICAgICAgIGlmIChiaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgZW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmJ1aWxkRW50aXR5KHJldHVyblZhbHVlKTtcclxuICAgICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0eShlbnRpdHksIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBmcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICBlbnRpdHkgPSBiZWZSZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIuYXBwZW5kRW50aXR5QnlQYXRoKGZwYXRoLCByZXR1cm5WYWx1ZSwgcmV0dXJuVmFsdWUsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW50aXR5O1xyXG4gICAgICB9KSxcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOW4pumZhOS7tueahOWkjeWItlxyXG4gICAqIEBwYXJhbSBpZFxyXG4gICAqIEBwYXJhbSB1cmxcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGhcclxuICAgKiBAcGFyYW0gcm9vdElkXHJcbiAgICogQHBhcmFtIHBhdGhcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjbG9uZVdpdGhBdHRhY2htZW50KGlkOiBzdHJpbmcsIHVybDogc3RyaW5nLCBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCByb290SWQ6IHN0cmluZywgcGF0aDogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3RDb3B5RGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGlmICghdXJsKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wYXRoSXNSZXF1aXJlZCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGlmICghYXR0YWNobWVudEluZm9GaWVsZFBhdGgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfpmYTku7Z1ZHTlrZfmrrXot6/lvoTkuI3og73kuLrnqbonKTtcclxuICAgIH1cclxuICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICB1cmwgPSAnLycgKyB1cmw7XHJcbiAgICB9XHJcbiAgICB1cmwgPSB1cmwudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGg7XHJcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIGNvbnN0IGJhc2VVcmkgPSBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLmJhc2VVcmk7XHJcbiAgICBjb25zdCB1cmkgPSBgJHtiYXNlVXJpfSR7dXJsfWA7XHJcbiAgICBjb25zdCByZXF1ZXN0SW5mbyA9IGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpO1xyXG4gICAgY29uc3QgaWRzID0gdGhpcy5idWlsZElkcyhiaW5kaW5nUGF0aCk7XHJcbiAgICBpZHMucHVzaChpZCk7XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICByZXF1ZXN0SW5mbyxcclxuICAgICAgZGF0YUlEOiBpZHMuam9pbignLCcpXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgYm9keVxyXG4gICAgfTtcclxuICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRGaWVsZHMgPSBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aC5zcGxpdCgnLCcpLmZpbHRlcigocCkgPT4gcCkubWFwKChwYXRoKSA9PiBwYXRoLnNwbGl0KCcvJykucG9wKCkpO1xyXG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmksICdQVVQnLCBudWxsLCBvcHRpb25zKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKHJlc3BvbnNlSW5mbzogUmVzcG9uc2VJbmZvKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5RGF0YSA9IHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZTtcclxuICAgICAgICBsZXQgZW50aXR5ID0gbnVsbDtcclxuICAgICAgICBpZiAoYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIoKHApID0+IHApLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgZW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmJ1aWxkRW50aXR5KGVudGl0eURhdGEpO1xyXG4gICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uYWRkRW50aXR5KGVudGl0eSwgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGZwYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkKTtcclxuICAgICAgICAgIGVudGl0eSA9IGJlZlJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5hcHBlbmRFbnRpdHlCeVBhdGgoZnBhdGgsIGVudGl0eURhdGEsIGVudGl0eURhdGEsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlpI3liLbpmYTku7ZcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3B5Um93RmlsZXMoZW50aXR5LCBhdHRhY2htZW50RmllbGRzLCByb290SWQsIHBhdGgpLnBpcGUoXHJcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkudXBkYXRlQWxsQ2hhbmdlcygpLnBpcGUobWFwKCgpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gZW50aXR5O1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICAgICAgLy8g5riF56m65a6e5L2T6ZmE5Lu25bGe5oCnXHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJBdHRhY2htZW50SW5mbyhlbnRpdHksIGF0dGFjaG1lbnRGaWVsZHMpO1xyXG4gICAgICAgICAgICBsZXQgY2FmRXJyb3IgPSBlcnJvci5lcnJvcjtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWZFcnJvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICBjYWZFcnJvciA9IEpTT04ucGFyc2UoY2FmRXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm1FcnJvclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKGNhZkVycm9yLm1lc3NhZ2UgfHwgdGhpcy5sYW5ndWFnZVNlcnZpY2UuY29weUZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuICBwcml2YXRlIGNsZWFyQXR0YWNobWVudEluZm8oZW50aXR5OiBFbnRpdHksIGF0dGFjaG1lbnRGaWVsZHM6IHN0cmluZ1tdKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhdHRhY2htZW50RmllbGRzLmZvckVhY2goKGF0dGFjaG1lbnRGaWVsZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChlbnRpdHksIFthdHRhY2htZW50RmllbGQsICdhdHRhY2htZW50SWQnXS5qb2luKCcuJyksIG51bGwpO1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoZW50aXR5LCBbYXR0YWNobWVudEZpZWxkLCAnZmlsZU5hbWUnXS5qb2luKCcuJyksIG51bGwpO1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoZW50aXR5LCBbYXR0YWNobWVudEZpZWxkLCAnZmlsZUNyZWF0ZVRpbWUnXS5qb2luKCcuJyksIG51bGwpO1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoZW50aXR5LCBbYXR0YWNobWVudEZpZWxkLCAnZmlsZVNpemUnXS5qb2luKCcuJyksIG51bGwpO1xyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vI3JlZ2lvbiDml6fnmoTlrp7njrBcclxuXHJcbiAgLyoqXHJcbiAgICog5aSN5Yi26KGMXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEBwYXJhbSBpZ25vcmVGaWVsZHMg5aSN5Yi25pe25b+955Wl5a2X5q61XHJcbiAgICogQHBhcmFtIHJlcGVhdCDph43lpI3lpI3liLbmrKHmlbDvvIzpu5jorqTkuLoxXHJcbiAgICovXHJcbiAgcHVibGljIGNvcHlSb3coZnJhbWVJZDogc3RyaW5nLCBpZ25vcmVGaWVsZHM6IHN0cmluZywgcmVwZWF0OiBudW1iZXIgPSAxKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcGVhdCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgcmVwZWF0ID0gcGFyc2VJbnQocmVwZWF0LCAxMCk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVwZWF0IDwgMSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50RXJyb3I6IHJlcGVhdCBtdXN0ID49IDEnKTtcclxuICAgIH1cclxuICAgIC8vIOiOt+WPluW9k+WJjeihjFxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgY29uc3QgcHJpbWFyeVZhbHVlID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGggPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoIHx8ICcvJztcclxuICAgIGxldCBiaW5kaW5nRGF0YSA9IG51bGw7XHJcbiAgICBsZXQgY3VycmVudEl0ZW06IEJpbmRpbmdPYmplY3QgPSBudWxsO1xyXG4gICAgaWYgKGJpbmRpbmdQYXRoID09PSAnLycpIHtcclxuICAgICAgLy8g5Li76KGo55u05o6l5Y+W5b2T5YmN6KGMXHJcbiAgICAgIGN1cnJlbnRJdGVtID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudEl0ZW07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDlj5bku47ooagv5LuO5LuO6KGo5b2T5YmN6KGMXHJcbiAgICAgIGNvbnN0IHBhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgY3VycmVudEl0ZW0gPSAoZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhdGhzKSBhcyBCaW5kaW5nTGlzdCkuY3VycmVudEl0ZW07XHJcbiAgICB9XHJcbiAgICBiaW5kaW5nRGF0YSA9IGN1cnJlbnRJdGVtLnRvSlNPTigpO1xyXG4gICAgaWYgKCFjdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgaWYgKHRoaXMuZm9ybU5vdGlmeVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0Q29weURhdGEsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlnbm9yZUZpZWxkc0FycmF5ID0gaWdub3JlRmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcblxyXG4gICAgY29uc3Qgc291cmNlcyA9IG5ldyBBcnJheShyZXBlYXQpO1xyXG4gICAgcmV0dXJuIGZyb20oc291cmNlcykucGlwZShcclxuICAgICAgY29uY2F0TWFwKCgpID0+IHtcclxuICAgICAgICBsZXQgYWN0aW9uJCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdQYXRoICE9PSAnLycpIHtcclxuICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHByaW1hcnlWYWx1ZSk7XHJcbiAgICAgICAgICBhY3Rpb24kID0gdGhpcy5yZXBvc2l0b3J5LmFwcGVuZEJ5UGF0aChmdWxsUGF0aCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFjdGlvbiQgPSB0aGlzLnJlcG9zaXRvcnkuYXBwZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY3Rpb24kLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKGVudGl0eTogRW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOS/ruato+WunuS9k+S4u+mUrlxyXG4gICAgICAgICAgICBiaW5kaW5nRGF0YVtlbnRpdHkucHJpbWFyeUtleV0gPSBlbnRpdHkucHJpbWFyeVZhbHVlO1xyXG4gICAgICAgICAgICAvLyDlv73nlaXmjIflrprlrZfmrrVcclxuICAgICAgICAgICAgaWdub3JlRmllbGRzQXJyYXkuZm9yRWFjaCgoZmllbGQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGV4dHJhY3RlZEZpZWxkcyA9IGZpZWxkLnNwbGl0KCcuJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcbiAgICAgICAgICAgICAgaWYgKGV4dHJhY3RlZEZpZWxkcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBiaW5kaW5nRGF0YVtmaWVsZF07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGV4dHJhY3RlZEZpZWxkcy5zbGljZSgwLCAtMSkucmVkdWNlKChwcmV2LCBjdXJyZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZbY3VycmVudF07XHJcbiAgICAgICAgICAgICAgfSwgYmluZGluZ0RhdGEpO1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSBwYXJlbnRbZXh0cmFjdGVkRmllbGRzW2V4dHJhY3RlZEZpZWxkcy5sZW5ndGggLSAxXV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBiaW5kaW5nRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGVudGl0eS50b0pTT04oKSwgYmluZGluZ0RhdGEpO1xyXG4gICAgICAgICAgICBlbnRpdHkubG9hZChiaW5kaW5nRGF0YSwgeyBsb2FkQ2hpbGQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5aKe6YeP5aSa6YCJ5biu5Yqp5om56YeP6LWL5YC85biu5Yqp5ZCO5LqL5Lu2XHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEBwYXJhbSBtYXBGaWVsZHMg5a2X5q615pig5bCEXHJcbiAgICogQHBhcmFtIGFzc29jaWF0ZWRGaWVsZCDlhbPogZTlrZfmrrVcclxuICAgKi9cclxuICBwdWJsaWMgYWZ0ZXJJbmNyZW1lbnRhbFNlbGVjdEhlbHBDbG9zZShmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nLCBhc3NvY2lhdGVkRmllbGQ6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICAvLyBjb25zdCBtYXBwaW5nID0gJ3tcImlkXCI6XCJ1c2VyUmVmLnVzZXJSZWZcIiwgXCJuYW1lXCI6XCJuYW1lXCIsIFwic2V4XCI6XCJzZXhcIixcImFnZVwiOlwidXNlclJlZi51c2VyUmVmX0FnZVwiLFwiYWRkcmVzc1wiOlwidXNlclJlZi51c2VyUmVmX0FkZHJlc3NcIixcImJpcnRoZGF5XCI6XCJ1c2VyUmVmLnVzZXJSZWZfQmlydGhkYXlcIixcImhlaWdodFwiOlwidXNlclJlZi51c2VyUmVmX0hlaWdodFwiLFwiaXNNYXJyaWVkXCI6XCJ1c2VyUmVmLnVzZXJSZWZfSXNNYXJyaWVkXCJ9JztcclxuICAgIGlmICghYXNzb2NpYXRlZEZpZWxkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBmaWVsZCBjYW5gdCBiZSBlbXB0eS4nKTtcclxuICAgIH1cclxuICAgIGlmICghbWFwRmllbGRzKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFwRmllbGRzIGNhbmB0IGJlIGVtcHR5LicpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFwcGluZ3MgPSBKU09OLnBhcnNlKG1hcEZpZWxkcyk7XHJcbiAgICBjb25zdCBmb3JlaWduS2V5ID0gYXNzb2NpYXRlZEZpZWxkO1xyXG4gICAgLy8g5bCG6YCJ5oup5Lq65ZGY5L+d5a2Y5YiwdWlzdGF0ZeS4rVxyXG4gICAgY29uc3Qgcm9vdEZyYW1lQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yb290O1xyXG4gICAgLy8g5LiN5pivYmluZGluZ1BhdGjliJnmjIlmcmFtZUlk5aSE55CGXHJcbiAgICBsZXQgYmluZGluZ1BhdGggPSAnLyc7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5pbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICAgIGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmcmFtZUlkIGlzIGludmFsaWQhJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgIHJvb3RGcmFtZUNvbnRleHQudWlTdGF0ZVsnc2VsZWN0aW9ucyddID0gcmVzdWx0O1xyXG4gICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgLy8g5qC55o2uYmluZGluZ1BhdGjojrflj5ZiaW5kaW5nZGF0YeS4reeOsOacieaVsOaNrlxyXG4gICAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihpdGVtID0+IGl0ZW0pO1xyXG4gICAgICBjb25zdCBjdXJyZW50RGF0YTogQmluZGluZ0xpc3QgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShiaW5kaW5nUGF0aHMpO1xyXG4gICAgICBjb25zdCBjdXJyZW50RGF0YUFycmF5ID0gY3VycmVudERhdGEudG9BcnJheSgpO1xyXG4gICAgICAvLyDmib7liLByZXN1bHTkuK3mnInvvIzkvYZiaW5kaW5nRGF0YeS4reayoeacieeahO+8jOS4uuW+heaWsOWinumhuVxyXG4gICAgICBjb25zdCBhcHBlbmRzID0gW107XHJcbiAgICAgIHJlc3VsdC5yZWR1Y2UoKHByZXY6IEFycmF5PGFueT4sIGl0ZW0pID0+IHtcclxuICAgICAgICBjb25zdCBpdGVtSWQgPSBpdGVtICYmIGl0ZW1bY3VycmVudERhdGEucHJpbWFyeUtleV0gfHwgbnVsbDtcclxuICAgICAgICBjb25zdCBpc0V4aXN0ID0gY3VycmVudERhdGFBcnJheS5maW5kKChiaW5kaW5nT2JqZWN0OiBCaW5kaW5nT2JqZWN0KSA9PiBiaW5kaW5nT2JqZWN0W2ZvcmVpZ25LZXldW2ZvcmVpZ25LZXldID09PSBpdGVtSWQpO1xyXG4gICAgICAgIGlmICghaXNFeGlzdCkge1xyXG4gICAgICAgICAgcHJldi5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgfSwgYXBwZW5kcyk7XHJcblxyXG4gICAgICAvLyDmib7liLBiaW5kaW5nRGF0YeS4reacie+8jHJlc3VsdOS4reayoeacieeahO+8jOS4uuW+heWIoOmZpOmhuVxyXG4gICAgICBjb25zdCByZW1vdmVzID0gW107XHJcbiAgICAgIGN1cnJlbnREYXRhQXJyYXkucmVkdWNlKChyZXN1bHRzOiBhbnksIGl0ZW06IEJpbmRpbmdPYmplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHJlc3VsdC5maW5kSW5kZXgoc2VsZWN0SXRlbSA9PiBzZWxlY3RJdGVtW2N1cnJlbnREYXRhLnByaW1hcnlLZXldID09PSBpdGVtW2ZvcmVpZ25LZXldW2ZvcmVpZ25LZXldKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICByZXN1bHRzLnB1c2goaXRlbS5wcmltYXJ5S2V5VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgICAgfSwgcmVtb3Zlcyk7XHJcblxyXG4gICAgICAvLyBjb25zb2xlLmxvZygnYWRkSXRlbXMnLCBhcHBlbmRzLCAncmVtb3ZlSXRlbXMnLCByZW1vdmVzKTtcclxuICAgICAgLy8g6LCD55So5ZCO56uv5o6l5Y+j5paw5aKe5pWw5o2uXHJcbiAgICAgIGNvbnN0IGFkZEFjdGlvbiQgPSBmcm9tKGFwcGVuZHMpLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmFwcGVuZEJ5UGF0aChwYXRoKS5waXBlKFxyXG4gICAgICAgICAgICB0YXAoKGVudGl0eTogRW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXMobWFwcGluZ3MpLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbSwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBtYXBwaW5nc1twcm9wXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwczogYW55W10gPSBmaWVsZHMuc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBncm91cC5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlQnlQYXRoKGVudGl0eSwgcGF0aHMuam9pbignLicpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlbW92ZUFjdGlvbiQgPSBmcm9tKHJlbW92ZXMpLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LnJlbW92ZUJ5UGF0aChwYXRoLCBpdGVtKS5waXBlKFxyXG4gICAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGJlZlJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8YW55PiA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICAgICAgICAgICAgYmVmUmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLnJlbW92ZUVudGl0eUJ5UGF0aChwYXRoLCBpdGVtKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgICAgaWYgKCFhcHBlbmRzICYmICFyZW1vdmVzIHx8IGFwcGVuZHMgJiYgYXBwZW5kcy5sZW5ndGggPCAxICYmIHJlbW92ZXMgJiYgcmVtb3Zlcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjb25jYXQoYWRkQWN0aW9uJCwgcmVtb3ZlQWN0aW9uJCkucGlwZShcclxuICAgICAgICBjYXRjaEVycm9yKCgpID0+IEVNUFRZKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICAvLyB0b2RvOuaooeaLn+eUqOaIt+aTjeS9nO+8jOW+heWQjuerr+aOpeWPo+aUr+aMgeS4u+ihqOaJuemHj+aWsOWinuWQjumHjeWGmVxyXG4gIC8qKlxyXG4gICAqIOWkmumAieW4ruWKqeaJuemHj+i1i+WAvOW4ruWKqeWJjeS6i+S7tlxyXG4gICAqL1xyXG4gIHB1YmxpYyBiZWZvcmVNdWx0aVNlbGVjdEhlbHBPcGVuKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xlYXJIZWxwU2VsZWN0aW9ucygpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlpJrpgInluK7liqnmibnph4/otYvlgLzluK7liqnlkI7kuovku7ZcclxuICAgKiBAcGFyYW0gZnJhbWVJZCDnu5Hlrprot6/lvoRcclxuICAgKiBAcGFyYW0gbWFwRmllbGRzIOWtl+auteaYoOWwhFxyXG4gICAqIEBwYXJhbSBjb21tYW5kRnJhbWVJZCDlm57osIPlkb3ku6TmiYDlnKhmcmFtZUlkXHJcbiAgICogQHBhcmFtIGNvbW1hbmROYW1lIOWbnuiwg+WRveS7pFxyXG4gICAqIEBkZXByZWNhdGVkIOaooeaLn+eUqOaIt+aTjeS9nO+8jOW+heaJuemHj+i1i+WAvOaUr+aMgeS4u+ihqOWQjuW6n+W8g1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhZnRlck11bHRpU2VsZWN0SGVscENsb3NlKGZyYW1lSWQ6IHN0cmluZywgbWFwRmllbGRzOiBzdHJpbmcsIGNvbW1hbmRGcmFtZUlkPzogc3RyaW5nLCBjb21tYW5kTmFtZT86IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIGlmIChyZXN1bHQgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgIC8vIOiwg+eUqOWQjuerr+aOpeWPo+aWsOWinuaVsOaNrlxyXG4gICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm9uSGVscENsb3NlLm5leHQoeyBmcmFtZUlkLCBtYXBGaWVsZHMsIGRhdGE6IHJlc3VsdCwgY29tbWFuZEZyYW1lSWQsIGNvbW1hbmROYW1lIH0pO1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAgKiDluK7liqnlhbPpl63lkI7lpITnkIblmahcclxuICAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVpZFxyXG4gICAgKiBAcGFyYW0gbWFwRmllbGRzIG1hcEZpZWxkc1xyXG4gICAgKiBAcGFyYW0gcmVzdWx0IOW4ruWKqeaVsOaNrue7k+aenFxyXG4gICAgKi9cclxuICBwcml2YXRlIG9uSGVscENsb3NlSGFuZGxlcihmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nLCByZXN1bHQ6IGFueVtdKSB7XHJcbiAgICBpZiAoIW1hcEZpZWxkcykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcEZpZWxkcyBjYW5gdCBiZSBlbXB0eS4nKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcHBpbmdzID0gSlNPTi5wYXJzZShtYXBGaWVsZHMpO1xyXG4gICAgLy8g5LiN5pivYmluZGluZ1BhdGjliJnmjIlmcmFtZUlk5aSE55CGXHJcbiAgICBsZXQgYmluZGluZ1BhdGggPSAnLyc7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5pbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICAgIGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmcmFtZUlkIGlzIGludmFsaWQhJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWwhumAieaLqeS6uuWRmOS/neWtmOWIsHVpc3RhdGXkuK1cclxuICAgIGNvbnN0IHJvb3RGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQucm9vdDtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgIHJvb3RGcmFtZUNvbnRleHQudWlTdGF0ZVsnc2VsZWN0aW9ucyddID0gcmVzdWx0O1xyXG4gICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgY29uc3QgYWRkQWN0aW9uJCA9IGZyb20ocmVzdWx0KS5waXBlKFxyXG4gICAgICAgIGNvbmNhdE1hcChpdGVtID0+IHtcclxuICAgICAgICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gYmVmUmVwb3NpdG9yeS5yZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKCk7XHJcbiAgICAgICAgICBpZiAoYmluZGluZ1BhdGhzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLmNyZWF0ZUJ5UGF0aChwYXRoLCByZXF1ZXN0SW5mbykucGlwZShcclxuICAgICAgICAgICAgICB0YXAoKHJlc3BvbnNlSW5mbzogUmVzcG9uc2VJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RW50aXR5ID0gYmVmUmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLmFwcGVuZEVudGl0eUJ5UGF0aChwYXRoLCBkYXRhLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1hcHBpbmdzKS5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbSwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IG1hcHBpbmdzW3Byb3BdO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBncm91cHM6IGFueVtdID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChuZXdFbnRpdHksIHBhdGhzLmpvaW4oJy4nKSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0VudGl0eTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuY3JlYXRlKG51bGwsIHJlcXVlc3RJbmZvKS5waXBlKFxyXG4gICAgICAgICAgICAgIHRhcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZUluZm8ucmV0dXJuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdHkoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtYXBwaW5ncykuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlQnlQYXRoKGl0ZW0sIHByb3ApO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBtYXBwaW5nc1twcm9wXTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBzOiBhbnlbXSA9IGZpZWxkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBncm91cC5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgobmV3RW50aXR5LCBwYXRocy5qb2luKCcuJyksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0eShuZXdFbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0VudGl0eTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICAgIC8vIGNvbnN0IGZvcm1Mb2FkaW5nU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PEZvcm1Mb2FkaW5nU2VydmljZT4oRm9ybUxvYWRpbmdTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgaWYgKHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5zdXNwZW5kRnJhbWVDb250ZXh0RXZlbnQoZnJhbWVJZCk7XHJcbiAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNldFN1c3BlbmQodHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFkZEFjdGlvbiQucGlwZShcclxuICAgICAgICBsYXN0KCksXHJcbiAgICAgICkucGlwZShcclxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgcHJpbWFyeVZhbHVlID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgICAgICBpZiAocHJpbWFyeVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnVwZGF0ZUNoYW5nZXNCeUlkKHByaW1hcnlWYWx1ZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcm1Mb2FkaW5nU2VydmljZSkge1xyXG4gICAgICAgICAgdGhpcy5yZXN1bWVGcmFtZUNvbnRleHRFdmVudChmcmFtZUlkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNldFN1c3BlbmQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcm1Mb2FkaW5nU2VydmljZSkge1xyXG4gICAgICAgICAgdGhpcy5yZXN1bWVGcmFtZUNvbnRleHRFdmVudChmcmFtZUlkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNldFN1c3BlbmQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgc3VzcGVuZEZyYW1lQ29udGV4dEV2ZW50KGZyYW1lSWQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQsIG51bGwpO1xyXG4gICAgaWYgKGFwcENvbnRleHQpIHtcclxuICAgICAgY29uc3QgZnJhbWVDb250ZXh0ID0gYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICAgIGZyYW1lQ29udGV4dC5zdXNwZW5kID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSByZXN1bWVGcmFtZUNvbnRleHRFdmVudChmcmFtZUlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgIGlmIChhcHBDb250ZXh0KSB7XHJcbiAgICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgICBmcmFtZUNvbnRleHQuc3VzcGVuZCA9IGZhbHNlO1xyXG4gICAgICBmcmFtZUNvbnRleHQuYXBwQ29udGV4dC5tZXNzYWdlUGlwZS5uZXh0KCdiaW5kRGF0YScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8jZW5kcmVnaW9uXHJcbiAgcHJpdmF0ZSBzZXRWYWx1ZUJ5UGF0aCh0YXJnZXQ6IG9iamVjdCwgcGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgIGNvbnN0IHBhdGhzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgICBpZiAocGF0aHMubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICB0YXJnZXRbcGF0aF0gPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXRocy5zbGljZSgwLCAtMSkucmVkdWNlKChwcmV2LCBwYXRoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIShwcmV2Lmhhc093blByb3BlcnR5KHBhdGgpIHx8IHByZXZbJ19fcHJvdG9fXyddLmhhc093blByb3BlcnR5KHBhdGgpKSkge1xyXG4gICAgICAgICAgICBwcmV2W3BhdGhdID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcHJldltwYXRoXTtcclxuICAgICAgICB9LCB0YXJnZXQpW3BhdGhzW3BhdGhzLmxlbmd0aCAtIDFdXSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0VmFsdWVCeVBhdGgodGFyZ2V0OiBvYmplY3QsIHBhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgcGF0aHMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHJldHVybiB0YXJnZXRbcGF0aF07XHJcbiAgICB9XHJcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgIHBhdGhzLmZvckVhY2goKHByb3AsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRhcmdldCAmJiB0YXJnZXRbcHJvcF0gfHwgbnVsbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgcmVzdWx0W3Byb3BdIHx8IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5a2Q6KGo6Lev5b6EXHJcbiAgICogQHBhcmFtIGJpbmRpbmdQYXRoIOe7keWumui3r+W+hFxyXG4gICAqIEBwYXJhbSBpZCBpZFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRQYXRoKGJpbmRpbmdQYXRoOiBzdHJpbmcsIGlkOiBhbnkpIHtcclxuICAgIGxldCBwYXRoID0gJy8nICsgaWQ7XHJcbiAgICBjb25zdCBzdWJQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICBpZiAoc3ViUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyBlZzpiaW5kaW5nUGF0aOW9ouWmgi9lZHVzL2dyYWRlcyxzcGxpdOWQjuaYr1snJywgJ2VkdXMnLCAnZ3JhZGVzJ11cclxuICAgICAgLy8g5Zug5q2kaW5kZXjku44x5byA5aeLXHJcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBzdWJQYXRocy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3Qgc3ViUGF0aCA9IHN1YlBhdGhzW2luZGV4XTtcclxuICAgICAgICBjb25zdCBzdWJEYXRhID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGFbc3ViUGF0aF07XHJcbiAgICAgICAgaWYgKCFzdWJEYXRhIHx8ICFzdWJEYXRhLmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3IoYOiOt+WPluWtkOihqOWujOaVtOi3r+W+hOWHuumUme+8jOaJvuS4jeWIsCR7c3ViRGF0YX3lr7nlupTnmoTlrZDooajvvIzmiJblr7nlupTlrZDooajmsqHmnInlvZPliY3ooYzjgIJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0aCArPSBgLyR7c3ViUGF0aH0vJHtzdWJEYXRhLmN1cnJlbnRJZH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXRoICs9ICcvJyArIHN1YlBhdGhzW3N1YlBhdGhzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bnu5Hlrprot6/lvoTnmoTlvZPliY3ooYzmlbDnu4RcclxuICAgKiBAcGFyYW0gYmluZGluZ1BhdGggYmluZGluZ1BhdGhcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRJZHMoYmluZGluZ1BhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICBjb25zdCBwcmltYXJ5VmFsdWUgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgY29uc3QgcGF0aHMgPSBbXTtcclxuICAgIGlmIChiaW5kaW5nUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXN1bHQucHVzaChwcmltYXJ5VmFsdWUpO1xyXG4gICAgICAvLyDku47ooajmiJbku47ku47ooajopoHlpI3liLbnmoTooYzkuI3kuIDlrprmmK/lvZPliY3ooYzvvIznlKjmiLflj6/ku6XmjIflrppcclxuICAgICAgYmluZGluZ1BhdGhzLnBvcCgpO1xyXG4gICAgICBiaW5kaW5nUGF0aHMuZm9yRWFjaCgocGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcGF0aHMucHVzaChwYXRoKTtcclxuICAgICAgICBjb25zdCBiaW5kaW5nTGlzdCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICBpZiAoYmluZGluZ0xpc3QpIHtcclxuICAgICAgICAgIHJlc3VsdC5wdXNoKGJpbmRpbmdMaXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlQmluZGluZ0RhdGEoaW5wdXQ6IGFueSwgaWRzOiBBcnJheTxhbnk+KSB7XHJcbiAgICBjb25zdCB7IGNvbnRyb2xUeXBlID0gbnVsbCwgdmFsdWUgPSBudWxsLCBvcHRpb25zID0ge30sIGRhdGFUeXBlID0gbnVsbCB9ID0gaW5wdXQgfHwge307XHJcbiAgICBpZiAoY29udHJvbFR5cGUpIHtcclxuICAgICAgLy8g5a+55biu5Yqp5YGa54m55q6K5aSE55CGXHJcbiAgICAgIGlmIChjb250cm9sVHlwZSA9PT0gJ2xvb2t1cCcgfHwgY29udHJvbFR5cGUgPT09ICdjb21iby1sb29rdXAnKSB7XHJcbiAgICAgICAgY29uc3QgbWFwRmllbGRzID0gb3B0aW9ucy5tYXBGaWVsZHM7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMb29rdXBGaWVsZChpZHMsIHZhbHVlLCBtYXBGaWVsZHMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2ltcGxlRmllbGQoaWRzLCB2YWx1ZSwgaW5wdXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlU2ltcGxlRmllbGQoaWRzOiBBcnJheTxhbnk+LCB2YWx1ZTogYW55LCBjb2x1bW46IGFueSkge1xyXG4gICAgaWYgKCFjb2x1bW4pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3VycmVudENvbHVtblR5cGUgPSBjb2x1bW4uZGF0YVR5cGU7XHJcbiAgICAvLyDlrZjlnKjooYznvJbovpHlmahcclxuICAgIGxldCByZXN1bHQgPSB2YWx1ZTtcclxuICAgIGlmIChjdXJyZW50Q29sdW1uVHlwZSA9PT0gJ2RhdGUnKSB7XHJcbiAgICAgIGxldCBkYXRlU3RyID0gdGhpcy5kYXRlU2VydmljZS5mb3JtYXRUbyh2YWx1ZSwgJ3l5eXktTU0tZGQnKTtcclxuICAgICAgaWYgKCFkYXRlU3RyKSB7XHJcbiAgICAgICAgZGF0ZVN0ciA9ICcwMDAxLTAxLTAxVDAwOjAwOjAwJztcclxuICAgICAgfVxyXG4gICAgICByZXN1bHQgPSBkYXRlU3RyO1xyXG4gICAgfSBlbHNlIGlmIChjdXJyZW50Q29sdW1uVHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgcmVzdWx0ID0gTnVtYmVyKHZhbHVlKSB8fCAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZmllbGQgPSBjb2x1bW4uZmllbGQ7XHJcbiAgICBpZHMuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlQmluZGluZ0xpc3QoaWQsIGZpZWxkLCByZXN1bHQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlTG9va3VwRmllbGQoaWRzOiBBcnJheTxhbnk+LCBoZWxwRGF0YTogYW55LCBtYXBGaWVsZHM6IGFueSkge1xyXG4gICAgaWYgKCFtYXBGaWVsZHMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGhlbHBGaWVsZHMgPSBPYmplY3Qua2V5cyhtYXBGaWVsZHMpO1xyXG4gICAgY29uc3QgaWRJbmRleCA9IGhlbHBGaWVsZHMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbSA9PT0gJ2lkJyk7XHJcbiAgICBpZiAoaGVscEZpZWxkcy5pbmNsdWRlcygnaWQnKSAmJiBpZEluZGV4ICE9PSAwKSB7XHJcbiAgICAgIGhlbHBGaWVsZHMuc3BsaWNlKGlkSW5kZXgsIDEpO1xyXG4gICAgICBoZWxwRmllbGRzID0gWydpZCcsIC4uLmhlbHBGaWVsZHNdO1xyXG4gICAgfVxyXG4gICAgaWYgKCFoZWxwRGF0YSkge1xyXG4gICAgICBoZWxwRmllbGRzLnJldmVyc2UoKTtcclxuICAgIH1cclxuICAgIGhlbHBGaWVsZHMuZm9yRWFjaCgoaGVscEZpZWxkOiBhbnkpID0+IHtcclxuICAgICAgbGV0IGhlbHBWYWx1ZTogYW55ID0gJyc7XHJcbiAgICAgIGlmIChoZWxwRGF0YSkge1xyXG4gICAgICAgIGlmIChoZWxwRGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICBoZWxwVmFsdWUgPSBoZWxwRGF0YS5tYXAoKGl0ZW06IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShoZWxwRmllbGQsIGl0ZW0pO1xyXG4gICAgICAgICAgfSkuam9pbignLCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBoZWxwVmFsdWUgPSB0aGlzLmdldFZhbHVlKGhlbHBGaWVsZCwgaGVscERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZHMuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCaW5kaW5nTGlzdChpZCwgbWFwRmllbGRzW2hlbHBGaWVsZF0sIGhlbHBWYWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlQmluZGluZ0xpc3QocHJpbWFyeVZhbHVlOiBhbnksIHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCB2aWV3TW9kZWwgPSB0aGlzLnZpZXdNb2RlbCB8fCBudWxsO1xyXG4gICAgaWYgKCF2aWV3TW9kZWwgfHwgIXByb3BlcnR5TmFtZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyDmm7TmlrDkuLvooajpg6jliIbooYznmoTlrZfmrrVcclxuICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBwcm9wZXJ0eU5hbWUuc3BsaXQoJy4nKS5maWx0ZXIoaXRlbSA9PiBpdGVtKTtcclxuICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSB0aGlzLmJpbmRpbmdMaXN0LmZpbmRCeUlkKHByaW1hcnlWYWx1ZSk7XHJcblxyXG4gICAgaWYgKHByb3BlcnR5TmFtZXMubGVuZ3RoIDwgMikge1xyXG4gICAgICBiaW5kaW5nT2JqZWN0LnNldFZhbHVlKHByb3BlcnR5TmFtZSwgdmFsdWUsIHRydWUsIHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IHRhcmdldEJpbmRpbmdPYmplY3QgPSBudWxsO1xyXG4gICAgICBjb25zdCBmcGF0aHMgPSBwcm9wZXJ0eU5hbWVzLnNsaWNlKDAsIHByb3BlcnR5TmFtZXMubGVuZ3RoIC0gMSk7XHJcbiAgICAgIGNvbnN0IHRhcmdldFByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZXNbcHJvcGVydHlOYW1lcy5sZW5ndGggLSAxXTtcclxuICAgICAgZnBhdGhzLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgdGFyZ2V0QmluZGluZ09iamVjdCA9IHRhcmdldEJpbmRpbmdPYmplY3QgJiYgdGFyZ2V0QmluZGluZ09iamVjdFtwcm9wXSB8fCBiaW5kaW5nT2JqZWN0W3Byb3BdO1xyXG4gICAgICB9KTtcclxuICAgICAgLy8gdG9kbzrpnIDopoHmt7vliqDlgLzlj5jljJbkuovku7ZcclxuICAgICAgdGFyZ2V0QmluZGluZ09iamVjdC5zZXRWYWx1ZSh0YXJnZXRQcm9wZXJ0eU5hbWUsIHZhbHVlLCB0cnVlLCB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRCaW5kaW5nUGF0aEFycmF5KCk6IGFueVtdIHtcclxuICAgIGNvbnN0IHBhdGggPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aDtcclxuICAgIGlmIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKG4gPT4gbiAhPT0gJycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICBwcml2YXRlIGdldFZhbHVlKGY6IHN0cmluZywgZGF0YTogYW55KSB7XHJcbiAgICBsZXQgdmFsID0gJyc7XHJcbiAgICBpZiAoZi5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgIHZhbCA9IGRhdGFbZl07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YWwgPSBmLnNwbGl0KCcuJykucmVkdWNlKChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFbYl07XHJcbiAgICAgIH0sIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWw7XHJcbiAgfVxyXG4gIHByb3RlY3RlZCBnZXQgYmluZGluZ0xpc3QoKTogQmluZGluZ0xpc3Qge1xyXG4gICAgLy8g5qC55a6e5L2TXHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGggPT09ICcvJyB8fCAhdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3Q7XHJcbiAgICB9XHJcbiAgICAvLyDlrZDlrp7kvZNcclxuICAgIGxldCBiaW5kaW5nUGF0aCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoLnN1YnN0cigxKTtcclxuICAgIGJpbmRpbmdQYXRoID0gYmluZGluZ1BhdGhbMF0udG9Mb3dlckNhc2UoKSArIGJpbmRpbmdQYXRoLnN1YnN0cmluZygxLCBiaW5kaW5nUGF0aC5sZW5ndGgpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpO1xyXG5cclxuICAgIGNvbnN0IGZpbHRlcmVkUGF0aHMgPSBwYXRocy5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShmaWx0ZXJlZFBhdGhzKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u5pig5bCE5bCG5pWw5o2u6LWL5YC857uZYmluZGluZ0RhdGFcclxuICAgKiBAcGFyYW0gZGF0YVxyXG4gICAqIEBwYXJhbSBtYXBGaWVsZHNcclxuICAgKiBAcGFyYW0gYmluZGluZ0RhdGFcclxuICAgKi9cclxuICBwcml2YXRlIG1hcHBpbmdSb3coZGF0YTogYW55LCBtYXBGaWVsZHM6IGFueSwgZW50aXR5OiBFbnRpdHksIGJpbmRpbmdQYXRoOiBzdHJpbmcpIHtcclxuICAgIE9iamVjdC5rZXlzKG1hcEZpZWxkcykuZm9yRWFjaCgocHJvcDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChkYXRhLCBwcm9wKTtcclxuICAgICAgY29uc3QgZmllbGRzID0gbWFwRmllbGRzW3Byb3BdO1xyXG4gICAgICBjb25zdCBncm91cHM6IGFueVtdID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChlbnRpdHksIHBhdGhzLmpvaW4oJy4nKSwgdmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDpgJrov4dmcmFtZUlk6I635Y+W5a+55bqU55qE57uE5Lu25LiK5LiL5paHXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQ6IHN0cmluZyk6IEZyYW1lQ29udGV4dCB8IG51bGwge1xyXG4gICAgaWYgKCFmcmFtZUlkKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQsIG51bGwpO1xyXG4gICAgbGV0IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gbnVsbDtcclxuICAgIGlmIChhcHBDb250ZXh0KSB7XHJcbiAgICAgIGZyYW1lQ29udGV4dCA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZyYW1lQ29udGV4dDtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRFbnRpdHlCeVBhdGgoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIGJpbmRpbmdQYXRoczogYW55W10sIGN1cnJlbnRJZDogc3RyaW5nKSB7XHJcbiAgICBiaW5kaW5nUGF0aHMgPSBbLi4uYmluZGluZ1BhdGhzXTtcclxuICAgIGNvbnN0IGlkID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgY29uc3QgZW50aXR5OiBFbnRpdHkgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQoaWQpIGFzIEVudGl0eTtcclxuICAgIGxldCBpdGVtOiBFbnRpdHkgPSBlbnRpdHk7XHJcbiAgICBjb25zdCBwYXRocyA9IFtdO1xyXG4gICAgY29uc3QgdGFpbFBhdGggPSBiaW5kaW5nUGF0aHMucG9wKCk7XHJcbiAgICBjb25zdCBwYXJlbnQgPSBiaW5kaW5nUGF0aHMucmVkdWNlKChvYmplY3Q6IEVudGl0eSwgcGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHBhdGhzLnB1c2gocGF0aCk7XHJcbiAgICAgIGlmIChvYmplY3QgJiYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShwYXRoKSB8fCBvYmplY3RbJ19fcHJvdG9fXyddLmhhc093blByb3BlcnR5KHBhdGgpKSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W3BhdGhdO1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIEVudGl0eUxpc3QpIHtcclxuICAgICAgICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtSWQgPSBiaW5kaW5nTGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWUuZ2V0KGN1cnJlbnRJdGVtSWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9LCBpdGVtKTtcclxuICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBFbnRpdHkpIHtcclxuICAgICAgY29uc3QgbGlzdCA9IHBhcmVudFt0YWlsUGF0aF0gYXMgRW50aXR5TGlzdDxhbnk+O1xyXG4gICAgICBpZiAobGlzdCkge1xyXG4gICAgICAgIHJldHVybiBsaXN0LmdldChjdXJyZW50SWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg5peg5pWI55qEYmluZGluZ1BhdGguYCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihg5peg5pWI55qEYmluZGluZ1BhdGguYCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgZW5kRWRpdChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgY29uc3QgYXBwQ29udGV4dDogQXBwQ29udGV4dCA9IGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQuZ2V0Rm9ybUFwcENvbnRleHQoKTtcclxuICAgIHJldHVybiBvZihudWxsKS5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIGlmIChhcHBDb250ZXh0KSB7XHJcbiAgICAgICAgICBhcHBDb250ZXh0Lm1lc3NhZ2VQaXBlLm5leHQoeyB0eXBlOiAnZW5kRWRpdCcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSxcclxuICAgICAgLy8gdG9kbzog5LiN5bqU6K+l5L2/55SoZGVsYXnvvIzlupTor6XkuLLmtYFcclxuICAgICAgZGVsYXkoNSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==