/*
 * @Author: aalizzwell
 * @Date: 2019-08-05 11:48:27
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-08-06 15:01:53
 */
import { Injectable, Optional } from '@angular/core';
import { EMPTY, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FrameContext, ViewModel } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
import { BefRepositoryUtil } from '@farris/bef';
import { CommandService } from './command-service';
// tslint:disable: no-string-literal
/**
 * Grid中间件服务
 * @scope FrameComponent
 */
var GridMiddlewareService = /** @class */ (function () {
    function GridMiddlewareService(frameContext, msgService, languageService, viewModel, commandService) {
        this.frameContext = frameContext;
        this.msgService = msgService;
        this.languageService = languageService;
        this.viewModel = viewModel;
        this.commandService = commandService;
        this.repository = this.frameContext.repository;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 页码切换前
     */
    GridMiddlewareService.prototype.onPageChanging = function () {
        if (this.isChanged) {
            return this.msgService.question(this.languageService['gridDataNotSave']).pipe(switchMap(function (result) {
                if (!result) {
                    return EMPTY;
                }
                else {
                    return of(true);
                }
            }));
        }
        else {
            return of(true);
        }
    };
    /**
     * 表格过滤
     * @param commandName 命令名称
     * @param frameId frameId
     * @returns
     */
    GridMiddlewareService.prototype.filter = function (commandName, frameId) {
        var self = this;
        var filters = self.context && self.context.eventParam || [];
        if (typeof (filters) === 'string') {
            filters = JSON.parse(filters);
        }
        // 查询时重置页码为第一页
        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;
        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);
        return this.commandService.execute(commandName, frameId);
    };
    Object.defineProperty(GridMiddlewareService.prototype, "isChanged", {
        /**
         * 是否有未保存的变更
         */
        get: function () {
            var befRepository = this.repository;
            return BefRepositoryUtil.isExistUnsaveData(befRepository);
        },
        enumerable: true,
        configurable: true
    });
    GridMiddlewareService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GridMiddlewareService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FormMessageService },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: ViewModel },
        { type: CommandService }
    ]; };
    return GridMiddlewareService;
}());
export { GridMiddlewareService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5taWRkbGV3YXJlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZ3JpZC5taWRkbGV3YXJlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBYyxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFpQixNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsb0NBQW9DO0FBQ3BDOzs7R0FHRztBQUNIO0lBSUUsK0JBQ1UsWUFBMEIsRUFDMUIsVUFBOEIsRUFDbEIsZUFBZ0MsRUFDNUMsU0FBb0IsRUFDcEIsY0FBOEI7UUFKOUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDbEIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQzVDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBRXRDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBQ0Q7O09BRUc7SUFDSSw4Q0FBYyxHQUFyQjtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDM0UsU0FBUyxDQUFDLFVBQUMsTUFBZTtnQkFDeEIsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxPQUFPLEtBQUssQ0FBQztpQkFDZDtxQkFBTTtvQkFDTCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDakI7WUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksc0NBQU0sR0FBYixVQUFjLFdBQW1CLEVBQUUsT0FBZTtRQUNoRCxJQUFNLElBQUksR0FBUSxJQUFJLENBQUM7UUFDdkIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDNUQsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ2pDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsY0FBYztRQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakgsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUlELHNCQUFZLDRDQUFTO1FBSHJCOztXQUVHO2FBQ0g7WUFDRSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBZ0MsQ0FBQztZQUM1RCxPQUFPLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVELENBQUM7OztPQUFBOztnQkF6REYsVUFBVTs7OztnQkFYRixZQUFZO2dCQUNaLGtCQUFrQjtnQkFDbEIsZUFBZSx1QkFnQm5CLFFBQVE7Z0JBbEJzQixTQUFTO2dCQUluQyxjQUFjOztJQWlFdkIsNEJBQUM7Q0FBQSxBQTFERCxJQTBEQztTQXpEWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiBhYWxpenp3ZWxsXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTA1IDExOjQ4OjI3XHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBhYWxpenp3ZWxsXHJcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTktMDgtMDYgMTU6MDE6NTNcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFTVBUWSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQsIFJlcG9zaXRvcnksIFZpZXdNb2RlbCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRm9ybU1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vbGFuZ3VhZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeVV0aWwsIEJlZlJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2JlZic7XHJcbmltcG9ydCB7IENvbW1hbmRTZXJ2aWNlIH0gZnJvbSAnLi9jb21tYW5kLXNlcnZpY2UnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbi8qKlxyXG4gKiBHcmlk5Lit6Ze05Lu25pyN5YqhXHJcbiAqIEBzY29wZSBGcmFtZUNvbXBvbmVudFxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR3JpZE1pZGRsZXdhcmVTZXJ2aWNlIHtcclxuICBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBGb3JtTWVzc2FnZVNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSB2aWV3TW9kZWw6IFZpZXdNb2RlbCxcclxuICAgIHByaXZhdGUgY29tbWFuZFNlcnZpY2U6IENvbW1hbmRTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5O1xyXG4gICAgaWYgKCF0aGlzLmxhbmd1YWdlU2VydmljZSkge1xyXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDpobXnoIHliIfmjaLliY1cclxuICAgKi9cclxuICBwdWJsaWMgb25QYWdlQ2hhbmdpbmcoKSB7XHJcbiAgICBpZiAodGhpcy5pc0NoYW5nZWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubXNnU2VydmljZS5xdWVzdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZVsnZ3JpZERhdGFOb3RTYXZlJ10pLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKChyZXN1bHQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDooajmoLzov4fmu6RcclxuICAgKiBAcGFyYW0gY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaWx0ZXIoY29tbWFuZE5hbWU6IHN0cmluZywgZnJhbWVJZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xyXG4gICAgbGV0IGZpbHRlcnMgPSBzZWxmLmNvbnRleHQgJiYgc2VsZi5jb250ZXh0LmV2ZW50UGFyYW0gfHwgW107XHJcbiAgICBpZiAodHlwZW9mIChmaWx0ZXJzKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgZmlsdGVycyA9IEpTT04ucGFyc2UoZmlsdGVycyk7XHJcbiAgICB9XHJcbiAgICAvLyDmn6Xor6Lml7bph43nva7pobXnoIHkuLrnrKzkuIDpobVcclxuICAgIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucGFnZUluZGV4ID0gMTtcclxuICAgIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmZpbHRlckNvbmRpdGlvbk1hbmFnZXIuc2V0Q29uZGl0aW9ucyh0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aCwgZmlsdGVycyk7XHJcbiAgICByZXR1cm4gdGhpcy5jb21tYW5kU2VydmljZS5leGVjdXRlKGNvbW1hbmROYW1lLCBmcmFtZUlkKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5pyJ5pyq5L+d5a2Y55qE5Y+Y5pu0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXQgaXNDaGFuZ2VkKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeSA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICByZXR1cm4gQmVmUmVwb3NpdG9yeVV0aWwuaXNFeGlzdFVuc2F2ZURhdGEoYmVmUmVwb3NpdG9yeSk7XHJcbiAgfVxyXG59Il19