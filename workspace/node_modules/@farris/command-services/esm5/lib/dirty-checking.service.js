import { ApplicationRef, ChangeDetectorRef, Injectable, Injector } from "@angular/core";
/**
 * angular 脏值检查服务
 */
var DirtyCheckingService = /** @class */ (function () {
    function DirtyCheckingService(injector, cd, appRef) {
        this.injector = injector;
        this.cd = cd;
        this.appRef = appRef;
    }
    /**
     * Checks this view and its children.
     * @param global 是否全局检查
     */
    DirtyCheckingService.prototype.detectChanges = function (global) {
        global = (global === true || global === 'true') ? true : false;
        if (global && this.appRef) {
            this.appRef.tick();
        }
        else if (this.cd) {
            this.cd.detectChanges();
        }
    };
    /**
     * 在指定时间（ms）后触发Angular脏值检查
     * @param duration 超时时间(ms)
     * @param global 是否全局检查
     */
    DirtyCheckingService.prototype.detectChangesAfter = function (duration, global) {
        var _this = this;
        global = (global === true || global === 'true') ? true : false;
        if (isNaN(duration)) {
            return;
        }
        if (global && this.appRef) {
            window.setTimeout(function () {
                _this.appRef.tick();
            }, duration);
        }
        else if (this.cd) {
            window.setTimeout(function () {
                _this.cd.detectChanges();
            }, duration);
        }
    };
    DirtyCheckingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DirtyCheckingService.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: ApplicationRef }
    ]; };
    return DirtyCheckingService;
}());
export { DirtyCheckingService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlydHktY2hlY2tpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9kaXJ0eS1jaGVja2luZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4Rjs7R0FFRztBQUNIO0lBRUUsOEJBQW1CLFFBQWtCLEVBQVUsRUFBcUIsRUFBVSxNQUFzQjtRQUFqRixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUNwRyxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ksNENBQWEsR0FBcEIsVUFBcUIsTUFBeUI7UUFDNUMsTUFBTSxHQUFHLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNwQjthQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxpREFBa0IsR0FBekIsVUFBMEIsUUFBZ0IsRUFBRSxNQUF5QjtRQUFyRSxpQkFjQztRQWJDLE1BQU0sR0FBRyxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMvRCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNuQixPQUFPO1NBQ1I7UUFDRCxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxVQUFVLENBQUM7Z0JBQ2hCLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2Q7YUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDbEIsTUFBTSxDQUFDLFVBQVUsQ0FBQztnQkFDaEIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDZDtJQUNILENBQUM7O2dCQW5DRixVQUFVOzs7O2dCQUw2QyxRQUFRO2dCQUF2QyxpQkFBaUI7Z0JBQWpDLGNBQWM7O0lBeUN2QiwyQkFBQztDQUFBLEFBcENELElBb0NDO1NBbkNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuLyoqXHJcbiAqIGFuZ3VsYXIg6ISP5YC85qOA5p+l5pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEaXJ0eUNoZWNraW5nU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZikge1xyXG4gIH1cclxuICAvKipcclxuICAgKiBDaGVja3MgdGhpcyB2aWV3IGFuZCBpdHMgY2hpbGRyZW4uIFxyXG4gICAqIEBwYXJhbSBnbG9iYWwg5piv5ZCm5YWo5bGA5qOA5p+lXHJcbiAgICovXHJcbiAgcHVibGljIGRldGVjdENoYW5nZXMoZ2xvYmFsPzogYm9vbGVhbiB8IHN0cmluZykge1xyXG4gICAgZ2xvYmFsID0gKGdsb2JhbCA9PT0gdHJ1ZSB8fCBnbG9iYWwgPT09ICd0cnVlJykgPyB0cnVlIDogZmFsc2U7XHJcbiAgICBpZiAoZ2xvYmFsICYmIHRoaXMuYXBwUmVmKSB7XHJcbiAgICAgIHRoaXMuYXBwUmVmLnRpY2soKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jZCkge1xyXG4gICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Zyo5oyH5a6a5pe26Ze077yIbXPvvInlkI7op6blj5FBbmd1bGFy6ISP5YC85qOA5p+lXHJcbiAgICogQHBhcmFtIGR1cmF0aW9uIOi2heaXtuaXtumXtChtcylcclxuICAgKiBAcGFyYW0gZ2xvYmFsIOaYr+WQpuWFqOWxgOajgOafpVxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXRlY3RDaGFuZ2VzQWZ0ZXIoZHVyYXRpb246IG51bWJlciwgZ2xvYmFsPzogYm9vbGVhbiB8IHN0cmluZykge1xyXG4gICAgZ2xvYmFsID0gKGdsb2JhbCA9PT0gdHJ1ZSB8fCBnbG9iYWwgPT09ICd0cnVlJykgPyB0cnVlIDogZmFsc2U7XHJcbiAgICBpZiAoaXNOYU4oZHVyYXRpb24pKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChnbG9iYWwgJiYgdGhpcy5hcHBSZWYpIHtcclxuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXBwUmVmLnRpY2soKTtcclxuICAgICAgfSwgZHVyYXRpb24pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmNkKSB7XHJcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgfSwgZHVyYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxufSJdfQ==