import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { FORM_PATH_TOKEN } from "@farris/devkit";
import { share } from "rxjs/operators";
import { BasePathService } from "@farris/rtf";
var FormManifestService = /** @class */ (function () {
    function FormManifestService(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    FormManifestService.prototype.load = function () {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        var formManifestPath = BasePathService.convertPath(this.modulePath + "/expressions/form.manifest.json?version=" + new Date().valueOf().toString());
        var request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            var req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    };
    FormManifestService.mainfests = new Map();
    FormManifestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormManifestService.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
        { type: HttpClient }
    ]; };
    return FormManifestService;
}());
export { FormManifestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9tYW5pZmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL21hbmlmZXN0L2Zvcm1fbWFuaWZlc3Rfc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQXNDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUM7SUFHRSw2QkFDVSxRQUFrQixFQUNPLFVBQVUsRUFDbkMsVUFBc0I7UUFGdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQUE7UUFDbkMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBQ0Usa0NBQUksR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFDRCxJQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUksSUFBSSxDQUFDLFVBQVUsZ0RBQTJDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFJLENBQUMsQ0FBQztRQUNySixJQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBZSxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQW5CYyw2QkFBUyxHQUFHLElBQUksR0FBRyxFQUFvQyxDQUFDOztnQkFGeEUsVUFBVTs7OztnQkFOa0IsUUFBUTtnREFXaEMsTUFBTSxTQUFDLGVBQWU7Z0JBWmxCLFVBQVU7O0lBNkJuQiwwQkFBQztDQUFBLEFBdEJELElBc0JDO1NBckJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcclxuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBGT1JNX1BBVEhfVE9LRU4sIEZvcm1NYW5pZmVzdCwgSUZvcm1NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgc2hhcmUgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgQmFzZVBhdGhTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvcnRmXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGb3JtTWFuaWZlc3RTZXJ2aWNlIGltcGxlbWVudHMgSUZvcm1NYW5pZmVzdFNlcnZpY2Uge1xyXG4gIHByaXZhdGUgc3RhdGljIG1haW5mZXN0cyA9IG5ldyBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPEZvcm1NYW5pZmVzdD4+KCk7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIEBJbmplY3QoRk9STV9QQVRIX1RPS0VOKSBwcml2YXRlIG1vZHVsZVBhdGgsXHJcbiAgICBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnRcclxuICApIHsgfVxyXG4gIHB1YmxpYyBsb2FkKCk6IE9ic2VydmFibGU8Rm9ybU1hbmlmZXN0PiB7XHJcbiAgICBpZiAodGhpcy5tb2R1bGVQYXRoLmVuZHNXaXRoKCdcXC8nKSkge1xyXG4gICAgICB0aGlzLm1vZHVsZVBhdGggPSB0aGlzLm1vZHVsZVBhdGguc3Vic3RyaW5nKDAsIHRoaXMubW9kdWxlUGF0aC5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGZvcm1NYW5pZmVzdFBhdGggPSBCYXNlUGF0aFNlcnZpY2UuY29udmVydFBhdGgoYCR7dGhpcy5tb2R1bGVQYXRofS9leHByZXNzaW9ucy9mb3JtLm1hbmlmZXN0Lmpzb24/dmVyc2lvbj0ke25ldyBEYXRlKCkudmFsdWVPZigpLnRvU3RyaW5nKCl9YCk7XHJcbiAgICBjb25zdCByZXF1ZXN0JCA9IEZvcm1NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLmdldCh0aGlzLm1vZHVsZVBhdGgpO1xyXG4gICAgaWYgKHJlcXVlc3QkKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0JDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHJlcSQgPSB0aGlzLmh0dHBDbGllbnQuZ2V0PEZvcm1NYW5pZmVzdD4oZm9ybU1hbmlmZXN0UGF0aCwgeyByZXNwb25zZVR5cGU6ICdqc29uJyB9KS5waXBlKHNoYXJlKCkpO1xyXG4gICAgICBGb3JtTWFuaWZlc3RTZXJ2aWNlLm1haW5mZXN0cy5zZXQodGhpcy5tb2R1bGVQYXRoLCByZXEkKTtcclxuICAgICAgcmV0dXJuIHJlcSQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==