import { Inject, Injectable, Injector } from "@angular/core";
import { BigNumber } from 'bignumber.js';
import moment from 'moment';
import { UserSettingsToken } from "@farris/devkit";
var LocalizationService = /** @class */ (function () {
    function LocalizationService(injector, userSettings) {
        this.injector = injector;
        this.userSettings = userSettings;
    }
    Object.defineProperty(LocalizationService.prototype, "formats", {
        /**
         * 用户配置格式
         */
        get: function () {
            var _a = this.userSettings || {}, _b = _a.dateFormat, dateFormat = _b === void 0 ? null : _b, _c = _a.timeFormat, timeFormat = _c === void 0 ? null : _c;
            var dateTimeFormat = null;
            if (dateFormat && timeFormat) {
                dateTimeFormat = dateFormat + " " + timeFormat;
            }
            var date = {
                dateFormat: dateFormat,
                timeFormat: timeFormat,
                dateTimeFormat: dateTimeFormat
            };
            var _d = this.numberFormat || {}, _e = _d.negativeSign, negativeSign = _e === void 0 ? null : _e, _f = _d.numberDecimalDigits, numberDecimalDigits = _f === void 0 ? null : _f, _g = _d.numberDecimalSeparator, numberDecimalSeparator = _g === void 0 ? null : _g, _h = _d.numberGroupSeparator, numberGroupSeparator = _h === void 0 ? null : _h;
            var number = {
                negativeSign: negativeSign,
                numberDecimalDigits: numberDecimalDigits,
                numberDecimalSeparator: numberDecimalSeparator,
                numberGroupSeparator: numberGroupSeparator
            };
            return { date: date, number: number };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据数据类型本地化数据
     * @param value value
     * @param dataType 数据类型
     * @returns string
     */
    LocalizationService.prototype.localize = function (value, dataType) {
        if (dataType && value) {
            dataType = dataType.toLowerCase();
            if (dataType === 'date') {
                return this.transformDate(value);
            }
            else if (dataType === 'datetime') {
                return this.transformDateTime(value);
            }
            else if (dataType === 'number') {
                return this.transformNumber(value);
            }
            else {
                return value;
            }
        }
        else {
            return value;
        }
    };
    /**
     * 根据国际化类型获取格式化字符串
     * @param localizationType 国际化类型
     * @returns
     */
    LocalizationService.prototype.getFormat = function (localizationType) {
        if (localizationType) {
            localizationType = localizationType.toLowerCase();
        }
        if (localizationType === 'date') {
            return this.formats.date.dateFormat;
        }
        else if (localizationType === 'datetime') {
            return this.formats.date.dateTimeFormat;
        }
        else {
            return '';
        }
    };
    /**
     * 转换日期
     * @param value value
     */
    LocalizationService.prototype.transformDate = function (value) {
        var dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
        if (!dateFormat || !value) {
            return value;
        }
        var date = moment(value);
        var isValid = date.isValid();
        if (!isValid) {
            return value;
        }
        dateFormat = this.parseDateFormat(dateFormat);
        return date.format(dateFormat);
    };
    /**
     * 转换日期时间
     * @param value value
     * todo: 目前无法定义日期时间格式
     */
    LocalizationService.prototype.transformDateTime = function (value) {
        var dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
        var timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';
        if (!dateFormat || !timeFormat) {
            return value;
        }
        var dateTime = moment(value);
        var isValid = dateTime.isValid();
        if (!isValid) {
            return value;
        }
        if (dateFormat) {
            dateFormat = this.parseDateFormat(dateFormat);
        }
        if (timeFormat) {
            timeFormat = this.parseTimeFormat(timeFormat);
        }
        var dateTimeFormat = dateFormat + ' ' + timeFormat;
        return dateTime.format(dateTimeFormat);
    };
    /**
     * 转换数字
     * @param value value
     */
    LocalizationService.prototype.transformNumber = function (value) {
        if (value === null || value === undefined || value === '') {
            return '';
        }
        var bigNumber = new BigNumber(value);
        // 如果不是数字，不做任何处理
        if (!BigNumber.isBigNumber(bigNumber)) {
            return value;
        }
        var isNegative = bigNumber.isNegative();
        var format = this.buildNumberFormat();
        var _a = this.numberFormat || {}, _b = _a.negativeSign, negativeSign = _b === void 0 ? null : _b, _c = _a.numberDecimalDigits, numberDecimalDigits = _c === void 0 ? null : _c;
        if (isNegative) {
            if (negativeSign !== null) {
                format.prefix = negativeSign;
                return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);
            }
        }
        return bigNumber.toFormat(numberDecimalDigits, null, format);
    };
    /**
     * 转换日期格式规则为moment的format规则
     * @param format format
     */
    LocalizationService.prototype.parseDateFormat = function (format) {
        return format.replace(/y/g, 'Y').replace(/d/g, 'D');
    };
    /**
     * 转换时间格式规则为moment的format规则
     * @param format format
     */
    LocalizationService.prototype.parseTimeFormat = function (format) {
        return format.replace(/M/g, 'm');
    };
    /**
     * 构造bignumber数字格式化选项
     */
    LocalizationService.prototype.buildNumberFormat = function () {
        if (this.numberFormat) {
            var _a = this.numberFormat, _b = _a.numberDecimalSeparator, numberDecimalSeparator = _b === void 0 ? null : _b, _c = _a.numberGroupSeparator, numberGroupSeparator = _c === void 0 ? null : _c;
            var format = {
                groupSize: 3,
            };
            if (numberDecimalSeparator !== null) {
                format.decimalSeparator = numberDecimalSeparator;
            }
            if (numberGroupSeparator !== null) {
                format.groupSeparator = numberGroupSeparator;
            }
            return format;
        }
    };
    Object.defineProperty(LocalizationService.prototype, "numberFormat", {
        get: function () {
            return this.userSettings && this.userSettings.numberFormat || null;
        },
        enumerable: true,
        configurable: true
    });
    LocalizationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LocalizationService.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [UserSettingsToken,] }] }
    ]; };
    return LocalizationService;
}());
export { LocalizationService };
//# sourceMappingURL=data:application/json;base64,