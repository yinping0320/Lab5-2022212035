import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';
import { from } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
import { LanguageService } from './languag.service';
import { ExceptionFactory } from './error/index';
/**
 * 表单消息服务
 * @scope FormModule
 * @summary
 * 1、包装@farris/ui的消息服务；
 * 2、提供针对表单的快捷方法；
 */
var FormMessageService = /** @class */ (function () {
    /**
     * 构造函数
     * 注入@farris/ui的LoadingService
     */
    function FormMessageService(messagerService, languageService, curLanguage) {
        this.messagerService = messagerService;
        this.languageService = languageService;
        this.curLanguage = curLanguage;
        this.languageService = this.languageService || LanguageService.getInstance();
    }
    /**
     * question弹窗
     */
    FormMessageService.prototype.question = function (content) {
        var confirmResult$ = this.confirmPromise(content);
        return from(confirmResult$);
    };
    /**
     * 带默认焦点的弹出提示
     * @param content 内容
     */
    FormMessageService.prototype.question2 = function (content) {
        var _this = this;
        var promise$ = new Promise(function (resolve, reject) {
            var dialogRef = _this.messagerService.question2(content, [
                {
                    text: _this.languageService.no,
                    cls: 'btn btn-secondary',
                    handle: function () {
                        resolve(false);
                        dialogRef.close();
                    }
                },
                {
                    text: _this.languageService.yes,
                    cls: 'btn btn-primary',
                    defaultFocus: true,
                    handle: function () {
                        resolve(true);
                        dialogRef.close();
                    }
                }
            ]);
        });
        return from(promise$);
    };
    /**
     * 弹出输入对话框
     * @param title 标题
     */
    FormMessageService.prototype.prompt = function (title) {
        return this.messagerService.prompt(title);
    };
    /**
     * 使用Promise实例包装回调方法，以同步回调方法执行后结果
     * @param content
     */
    FormMessageService.prototype.confirmPromise = function (content) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.messagerService.question(content, function () { resolve(true); }, function () { resolve(false); });
        });
    };
    /**
     * 确认弹框
     * @param content 弹出内容提示
     */
    FormMessageService.prototype.confirm = function (content) {
        return this.messagerService.confirm(content);
    };
    /**
     * 消息弹框
     */
    FormMessageService.prototype.info = function (content) {
        this.messagerService.info(content);
    };
    /**
     * 错误弹框
     */
    FormMessageService.prototype.error = function (content) {
        this.messagerService.error(content);
    };
    /**
     * 警告弹框
     */
    FormMessageService.prototype.warning = function (content) {
        this.messagerService.warning(content);
    };
    /**
     * 服务器端异常提示弹框
     */
    FormMessageService.prototype.httpErrorInServer = function (httpError) {
        var error = httpError.error;
        if (typeof (error) === 'string') {
            try {
                error = JSON.parse(error);
            }
            catch (e) { }
        }
        if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
            this.messagerService.error(httpError.message);
            return;
        }
        var exceptionStrategy = ExceptionFactory.getInstance(this.messagerService, this.languageService).getExceptionHandleStrategy(error.Level);
        exceptionStrategy.handleException(error);
    };
    /**
     * 客户端异常提示弹框
     */
    FormMessageService.prototype.httpErrorInClient = function (httpError) {
        if (!httpError) {
            return;
        }
        var message = httpError.error && httpError.error.error && httpError.error.error.message;
        var exceptionMsg = message || httpError.message && httpError.message.replace(/http:\/\/[a-zA-Z0-9.:]{1,}/, '');
        var options = {
            // title: this.languageService.clientNotifyTitle,
            // showMaxButton: true,
            showHeader: false,
            width: 400,
            height: 200,
            safeHtml: false
        };
        this.messagerService.show('error', exceptionMsg, options);
    };
    /**
     * 401异常处理
     * 为了独立弹出重新登录提示框，切换到运行框架http服务后可以删除
     * @param httpError 异常
     */
    FormMessageService.prototype.http401Error = function (httpError) {
        var dialogShownKey = '401ErrorShownFlag';
        if (!httpError || window[dialogShownKey]) {
            return;
        }
        var i18n = {
            en: {
                title: 'Warning',
                sessionInvalid: 'Your login has expired, please login again.',
                ok: 'ok',
                cancel: 'cancel'
            },
            'zh-CHS': {
                title: '提示',
                sessionInvalid: '用户登录信息已失效，是否重新登录?',
                ok: '确认',
                cancel: '取消'
            }
        };
        this.curLanguage = this.curLanguage || 'zh-CHS';
        var messageOptions = {
            title: i18n[this.curLanguage].title,
            initialState: {
                okText: i18n[this.curLanguage].ok,
                okHandle: function () {
                    modalRef.close();
                    window[dialogShownKey] = false;
                    var eventResult = httpError && httpError.error || {};
                    var redirectUri = eventResult.redirect_uri || '/login.html';
                    window.location.href = "/logout.html#?logout-before-redirect=true&loginUri=" + redirectUri;
                },
                cancelText: i18n[this.curLanguage].cancel,
                cancelHandle: function () {
                    modalRef.close();
                    window[dialogShownKey] = false;
                }
            },
            showHeader: true,
            width: 420,
            height: 180,
            fitContent: false
        };
        var modalRef = this.messagerService.show('question', i18n[this.curLanguage].sessionInvalid, messageOptions);
        window[dialogShownKey] = true;
        if (modalRef && modalRef.dialog && modalRef.dialog.instance.closed) {
            modalRef.dialog.instance.closed.subscribe(function () {
                window[dialogShownKey] = false;
            });
        }
    };
    FormMessageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormMessageService.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return FormMessageService;
}());
export { FormMessageService };
//# sourceMappingURL=data:application/json;base64,