// https://github.com/typeslick/status-code-enum
var HttpStatusType;
(function (HttpStatusType) {
    HttpStatusType[HttpStatusType["Info"] = 1] = "Info";
    HttpStatusType[HttpStatusType["Success"] = 2] = "Success";
    HttpStatusType[HttpStatusType["Redirect"] = 3] = "Redirect";
    HttpStatusType[HttpStatusType["ClientError"] = 4] = "ClientError";
    HttpStatusType[HttpStatusType["ServerError"] = 5] = "ServerError";
})(HttpStatusType || (HttpStatusType = {}));
/**
 * http通用类
 */
var HttpUtil = /** @class */ (function () {
    function HttpUtil() {
    }
    /**
     * 基于http状态码返回状态类型
     * @param httpResponseSatus http请求返回状态码
     * @returns null | HttpStatusType
     */
    HttpUtil.getHttpStatusType = function (httpResponseSatus) {
        if (!httpResponseSatus) {
            return null;
        }
        var statusType = null; // 默认值为空
        if (httpResponseSatus < 100 || httpResponseSatus > 600) {
            statusType = null; // 不合理状态码
        }
        else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {
            statusType = HttpStatusType.Info;
        }
        else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {
            statusType = HttpStatusType.Success;
        }
        else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {
            statusType = HttpStatusType.Redirect;
        }
        else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {
            statusType = HttpStatusType.ClientError;
        }
        else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {
            statusType = HttpStatusType.ServerError;
        }
        return statusType;
    };
    return HttpUtil;
}());
export { HttpUtil, HttpStatusType };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsL2h0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELElBQUssY0FNSjtBQU5ELFdBQUssY0FBYztJQUNmLG1EQUFRLENBQUE7SUFDUix5REFBTyxDQUFBO0lBQ1AsMkRBQVEsQ0FBQTtJQUNSLGlFQUFXLENBQUE7SUFDWCxpRUFBVyxDQUFBO0FBQ2YsQ0FBQyxFQU5JLGNBQWMsS0FBZCxjQUFjLFFBTWxCO0FBRUQ7O0dBRUc7QUFDSDtJQUFBO0lBOEJBLENBQUM7SUE1Qkc7Ozs7T0FJRztJQUNXLDBCQUFpQixHQUEvQixVQUFnQyxpQkFBeUI7UUFDckQsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRO1FBRS9CLElBQUksaUJBQWlCLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUNwRCxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsU0FBUztTQUMvQjthQUFNLElBQUksaUJBQWlCLElBQUksR0FBRyxJQUFJLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUM1RCxVQUFVLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztTQUNwQzthQUFNLElBQUksaUJBQWlCLElBQUksR0FBRyxJQUFJLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUM1RCxVQUFVLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQztTQUN2QzthQUFNLElBQUksaUJBQWlCLElBQUksR0FBRyxJQUFJLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUM1RCxVQUFVLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUN4QzthQUFNLElBQUksaUJBQWlCLElBQUksR0FBRyxJQUFJLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUM1RCxVQUFVLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztTQUMzQzthQUFNLElBQUksaUJBQWlCLElBQUksR0FBRyxJQUFJLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUM1RCxVQUFVLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztTQUMzQztRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0FBQyxBQTlCRCxJQThCQztBQUVELE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdHlwZXNsaWNrL3N0YXR1cy1jb2RlLWVudW1cclxuZW51bSBIdHRwU3RhdHVzVHlwZSB7XHJcbiAgICBJbmZvID0gMSxcclxuICAgIFN1Y2Nlc3MsXHJcbiAgICBSZWRpcmVjdCxcclxuICAgIENsaWVudEVycm9yLFxyXG4gICAgU2VydmVyRXJyb3JcclxufVxyXG5cclxuLyoqXHJcbiAqIGh0dHDpgJrnlKjnsbtcclxuICovXHJcbmNsYXNzIEh0dHBVdGlsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWfuuS6jmh0dHDnirbmgIHnoIHov5Tlm57nirbmgIHnsbvlnotcclxuICAgICAqIEBwYXJhbSBodHRwUmVzcG9uc2VTYXR1cyBodHRw6K+35rGC6L+U5Zue54q25oCB56CBXHJcbiAgICAgKiBAcmV0dXJucyBudWxsIHwgSHR0cFN0YXR1c1R5cGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRIdHRwU3RhdHVzVHlwZShodHRwUmVzcG9uc2VTYXR1czogbnVtYmVyKTogYW55IHtcclxuICAgICAgICBpZiAoIWh0dHBSZXNwb25zZVNhdHVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgc3RhdHVzVHlwZSA9IG51bGw7IC8vIOm7mOiupOWAvOS4uuepulxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChodHRwUmVzcG9uc2VTYXR1cyA8IDEwMCB8fCBodHRwUmVzcG9uc2VTYXR1cyA+IDYwMCkge1xyXG4gICAgICAgICAgICBzdGF0dXNUeXBlID0gbnVsbDsgLy8g5LiN5ZCI55CG54q25oCB56CBXHJcbiAgICAgICAgfSBlbHNlIGlmIChodHRwUmVzcG9uc2VTYXR1cyA+PSAxMDAgJiYgaHR0cFJlc3BvbnNlU2F0dXMgPCAyMDApIHtcclxuICAgICAgICAgICAgc3RhdHVzVHlwZSA9IEh0dHBTdGF0dXNUeXBlLkluZm87XHJcbiAgICAgICAgfSBlbHNlIGlmIChodHRwUmVzcG9uc2VTYXR1cyA+PSAyMDAgJiYgaHR0cFJlc3BvbnNlU2F0dXMgPCAzMDApIHtcclxuICAgICAgICAgICAgc3RhdHVzVHlwZSA9IEh0dHBTdGF0dXNUeXBlLlN1Y2Nlc3M7XHJcbiAgICAgICAgfSBlbHNlIGlmIChodHRwUmVzcG9uc2VTYXR1cyA+PSAzMDAgJiYgaHR0cFJlc3BvbnNlU2F0dXMgPCA0MDApIHtcclxuICAgICAgICAgICAgc3RhdHVzVHlwZSA9IEh0dHBTdGF0dXNUeXBlLlJlZGlyZWN0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaHR0cFJlc3BvbnNlU2F0dXMgPj0gNDAwICYmIGh0dHBSZXNwb25zZVNhdHVzIDwgNTAwKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c1R5cGUgPSBIdHRwU3RhdHVzVHlwZS5DbGllbnRFcnJvcjtcclxuICAgICAgICB9IGVsc2UgaWYgKGh0dHBSZXNwb25zZVNhdHVzID49IDUwMCAmJiBodHRwUmVzcG9uc2VTYXR1cyA8IDYwMCkge1xyXG4gICAgICAgICAgICBzdGF0dXNUeXBlID0gSHR0cFN0YXR1c1R5cGUuU2VydmVyRXJyb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3RhdHVzVHlwZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgSHR0cFV0aWwsIEh0dHBTdGF0dXNUeXBlIH07Il19