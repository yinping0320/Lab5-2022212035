import { Injectable, Injector } from "@angular/core";
import { AppContext, Repository } from "@farris/devkit";
var BindingPathService = /** @class */ (function () {
    function BindingPathService(injector, appContext, repository) {
        this.injector = injector;
        this.appContext = appContext;
        this.repository = repository;
    }
    /**
     * 获取组件上下文的绑定路径
     * @param frameContext 组件上下文
     * @returns
     */
    BindingPathService.prototype.getBindingPathsByFrameContext = function (frameContext) {
        return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }) || null;
    };
    /**
     * 通过BE表名获取bindingPath
     * @param dataTypeInfo
     * @param tableName
     * @param paths
     * @param level
     * @returns
     */
    BindingPathService.prototype.getBindingPathsByTableName = function (dataTypeInfo, tableName, paths, level) {
        if (paths === void 0) { paths = []; }
        if (level === void 0) { level = 0; }
        level++;
        if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
            return paths;
        }
        var props = Array.from(dataTypeInfo.propInfoMap.values()).filter(function (p) { return p.typeInfo; });
        if (props.length < 1) {
            paths = [];
            return paths;
        }
        if (dataTypeInfo.entityInfo) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
        }
        for (var idx = 0; idx < props.length; idx++) {
            var dataTypeInfo_1 = props[idx].typeInfo;
            var path = this.getBindingPathsByTableName(dataTypeInfo_1, tableName, paths, level);
            if (!path || path.length < 1) {
                continue;
            }
            else {
                paths = paths.concat(path);
                return paths;
            }
        }
        return null;
    };
    /**
     * 获取属性路径中的绑定路径
     * @param paths paths
     * @param entityTypeInfo
     * @returns
     */
    BindingPathService.prototype.getBindingPathsByPath = function (paths, entityTypeInfo) {
        var nodeCodes = [];
        if (typeof paths === 'string') {
            paths = paths.split('/').filter(function (p) { return p; });
        }
        paths = paths.concat([]);
        while (paths.length > 0) {
            var dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
            if (dataPropInfo.group === 'List') {
                nodeCodes = paths;
                break;
            }
            paths.pop();
        }
        return nodeCodes;
    };
    /**
     * 获取属性路径信息
     * @param path 属性路径
     * @returns
     */
    BindingPathService.prototype.getPathInfo = function (path) {
        var paths = path.split('/').filter(function (p) { return p; });
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        var entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);
        var propertyName = paths.slice(entityPath.length).join('/');
        return { bindingPath: entityPath.join('/'), propertyName: propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(function (p) { return p; }) };
    };
    BindingPathService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BindingPathService.ctorParameters = function () { return [
        { type: Injector },
        { type: AppContext },
        { type: Repository }
    ]; };
    return BindingPathService;
}());
export { BindingPathService };
//# sourceMappingURL=data:application/json;base64,