import * as tslib_1 from "tslib";
import { Injectable, ComponentFactoryResolver, ReflectiveInjector, InjectFlags, Injector, Optional, forwardRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { FarrisFormService } from './farris-form.service';
import { FrameContext } from '@farris/devkit';
import { of, Subject } from 'rxjs';
import { LanguageService } from './languag.service';
import { switchMap } from 'rxjs/operators';
import { INSIDE_DIALOG_TOKEN, MODAL_REF } from './types';
/**
 * 弹窗服务
 * @scope FormModule
 */
var DialogService = /** @class */ (function () {
    function DialogService(modalService, farrisFormService, _componentFactoryResolver, frameContext, injector) {
        this.modalService = modalService;
        this.farrisFormService = farrisFormService;
        this._componentFactoryResolver = _componentFactoryResolver;
        this.frameContext = frameContext;
        this.injector = injector;
        this._providers = [];
        /**
         * 外部引用
         */
        this.refs = {};
        this.modals = {};
        this.setLanguageService();
    }
    /**
     * 设置语言服务
     */
    DialogService.prototype.setLanguageService = function () {
        // FrameContext不一定存在，不能直接用
        var frameContext = this.getFrameContext();
        if (frameContext) {
            var injector = this.frameContext.injector;
            this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        }
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    };
    /**
     * 兼容旧弹窗，获取frameContext
     */
    DialogService.prototype.getFrameContext = function () {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    };
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    DialogService.prototype.getComponentFactoryResolver = function () {
        var frameContext = this.getFrameContext();
        var componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    };
    /**
     * 获取config转换成对象类型的配置
     * @param config 配置项
     * @throws 填写对象格式或json字符串
     */
    DialogService.prototype.getObjectTypeConfig = function (config) {
        var objectTypeConfig;
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    };
    /**
     * 创建模态框内组件实例，并返回模态框实例；做了兼容老表单处理
     * @param config 弹窗配置
     * @param component 弹窗内组件
     * @param uiStateObject 绑定弹窗内组件uiState
     */
    DialogService.prototype.createModalComponentRef = function (config, component, uiStateObject) {
        var componentRef;
        var modalRef;
        var frameContext = this.getFrameContext();
        var componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            var contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);
            var injector = this.createInjector(this.refs, this.frameContext.injector);
            var modalContentInjector = ReflectiveInjector.resolveAndCreate(tslib_1.__spread(this._providers), injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach(function (item) {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
            modalRef = this.modalService.show(componentRef, config);
        }
        else {
            modalRef = this.modalService.show(component, config);
        }
        return modalRef;
    };
    /**
     *打开弹窗
     * @param config 模态框本身配置
     * @param modalId 模态框内组件的id
     * @param uiStateConfig 模态框内组件uiState上的字段及值
     * @param callback 回调
     */
    DialogService.prototype.openModal = function (config, modalId, uiStateConfig, callback) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (uiStateConfig === void 0) { uiStateConfig = {}; }
        var configObj = this.getObjectTypeConfig(config);
        var uiStateObject = this.getObjectTypeConfig(uiStateConfig);
        var innerCompopnent = this.farrisFormService.getControls(modalId);
        var modalRef;
        var modalConfig = {
            title: this.languageService.defaultDialogTitle,
            width: 760,
            height: 450,
            showButtons: false
        };
        modalConfig = Object.assign(modalConfig, configObj);
        var onClosingHandler = modalConfig.beforeClose;
        // tslint:disable: no-string-literal
        var cancelChanges = modalConfig['cancelChanges'] || false;
        modalConfig.beforeClose = function (ref) {
            // if (ref && ref.modalRef && ref.modalRef.content) {
            //   ref.modalRef.content.isDialogRootComponent = false;
            // }
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap(function (result) {
                    if (result) {
                        if (cancelChanges) {
                            return _this.cancelChanges(ref);
                        }
                    }
                    return of(result);
                }));
            }
            if (cancelChanges) {
                return _this.cancelChanges(ref);
            }
            else {
                return of(true);
            }
        };
        var remote = modalConfig.remote || false;
        if (remote) {
            this.createRemoteForm(modalConfig, uiStateObject).subscribe(function (modalRef) {
                _this.modalRef = modalRef;
                _this.refs.modalRef = modalRef;
                if (modalRef && !!modalRef.content) {
                    modalRef.content.isDialogRootComponent = true;
                    modalRef.content.dialogRef = modalRef;
                }
                callback(modalRef);
            });
        }
        else {
            if (!innerCompopnent) {
                console.error("\u83B7\u53D6\u63A7\u4EF6\u5931\u8D25\uFF0CmodalId=" + modalId);
                return;
            }
            if (typeof innerCompopnent === 'string') {
                modalConfig.dialogType = 'iframe';
                modalRef = this.modalService.show(innerCompopnent, modalConfig);
            }
            else if (typeof innerCompopnent === 'function') {
                modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);
            }
            else if (typeof innerCompopnent === 'object') {
                // 如果是对象 且使用独立js加载
                // {"useIsolateJs":true,"modalInstance":f()}
                if (innerCompopnent.useIsolateJs) {
                    var injector = this.createInjector(this.refs);
                    var parameter = {
                        injector: injector,
                        uiState: uiStateObject,
                        modalService: this.modalService,
                        dialogServiceInstance: this,
                        eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,
                        componentCallback: this.componentModify,
                        modalInstanceCallback: this.modalInstanceCallback.bind(this)
                    };
                    // 会在内部进行
                    var subject = innerCompopnent['modalInstance'](modalConfig, parameter);
                    return subject;
                }
                else {
                    modalRef = this.modalService.show(innerCompopnent, modalConfig);
                }
            }
            this.modalRef = modalRef;
            this.refs.modalRef = modalRef;
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    };
    DialogService.prototype.componentModify = function (cmpRef, parameter) {
        if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {
            if (parameter.uistate && typeof parameter.uistate === 'string') {
                parameter.uistate = JSON.parse(parameter.uistate);
            }
            if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {
                Object.keys(parameter.uistate).forEach(function (item) {
                    cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);
                });
            }
            // 附加isDialog参数
            cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
        }
    };
    DialogService.prototype.modalInstanceCallback = function (cmpRef, options, parameter) {
        if (parameter && parameter.modalService) {
            var modalRef = parameter.modalService.show(cmpRef, options);
            this.modalRef = modalRef;
            this.refs.modalRef = modalRef;
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    };
    /**
     * 打开类帮助表单
     * @param frameId
     * @param params
     * @param configs
     * @description 弹出表单和弹出远端表单区别为弹出表单需要配置字段映射
     */
    DialogService.prototype.openHelpModal = function (frameId, params, configs) {
        var _this = this;
        var events = this['context']['eventParam'] || {};
        // 卡片场景传递过来的事件是自定义对象，包含event和options。列表场景传递过来的事件参数是普通事件参数，在参数中携带了editor.options
        var event = events.event || events;
        var options = events.options || events.editor && events.editor.options || {};
        var context = events && events.context;
        var subject = new Subject();
        // modalId在两种场景下都需要，用来区分实例
        var _a = options.modalId, modalId = _a === void 0 ? null : _a;
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string' && configs.length > 0) {
            configs = JSON.parse(configs);
        }
        var _b = configs || {}, _c = _b.remote, remote = _c === void 0 ? false : _c, _d = _b.currentRow, currentRow = _d === void 0 ? false : _d, _e = _b.areaResponse, areaResponse = _e === void 0 ? undefined : _e;
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            var mapFields_1 = configs.mapFields || {};
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, function (dialogRef) {
                // 新增event参数（为了以后调用event中的formControl以适配列表中的智能输入框弹出表单）
                _this.modals[modalId] = { subject: subject, frameId: frameId, mapFields: mapFields_1, dialogRef: dialogRef, currentRow: currentRow, event: event, context: context };
            });
        }
        else {
            var dialogRef = this.openModal(options, modalId, params);
            var mapFields = options.mapFields || {};
            this.modals[modalId] = { subject: subject, frameId: frameId, mapFields: mapFields, dialogRef: dialogRef, currentRow: currentRow, event: event, context: context };
        }
        return subject;
    };
    /**
     * 打开带回调的弹窗
     * @param frameId frameId
     * @param params 参数
     * @param configs 配置
     * @returns
     */
    DialogService.prototype.openCallbackableModal = function (frameId, params, configs) {
        var _this = this;
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string') {
            configs = JSON.parse(configs);
        }
        var events = this['context'] && this['context']['eventParam'] || {};
        var options = events.options;
        options.showButtons = true;
        options.buttons = [
            { text: this.languageService.cancel, cls: 'btn', handle: function (event) { return _this.cancel(options); } },
            {
                text: this.languageService.confirm, cls: 'btn btn-primary', handle: function (event) {
                    var _a = (options || {}).modalId, modalId = _a === void 0 ? null : _a;
                    if (modalId) {
                        var modal = _this.modals[modalId];
                        var _b = modal || {}, _c = _b.subject, subject_1 = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d, _e = _b.frameId, frameId_1 = _e === void 0 ? null : _e, _f = _b.handle, handle_1 = _f === void 0 ? null : _f, _g = _b.currentRow, currentRow_1 = _g === void 0 ? false : _g;
                        var formCmp = dialogRef.content; // 弹窗表单实例
                        if (!formCmp) {
                            throw new Error('不支持的表单类型');
                        }
                        var selectedItems = [];
                        if (currentRow_1 === true) {
                            var frameComtext = void 0;
                            if (formCmp.context) {
                                frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId_1);
                            }
                            else {
                                frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId_1);
                            }
                            if (!frameComtext) {
                                throw new Error("\u65E0\u6548\u7684frameId\uFF1A" + frameId_1 + "\uFF0C\u8BF7\u786E\u8BA4\u547D\u4EE4\u4E2DframeId\u6B63\u786E\u3002");
                            }
                            var bindingList = frameComtext.bindingData.getList();
                            var item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                            selectedItems = [item];
                        }
                        else {
                            var rows = void 0;
                            // 如果context为空 那么尝试从对应的appcontext读取，主要目的是为了解析表单的弹出
                            if (formCmp.context) {
                                rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId_1).uiState.rows || new Map();
                            }
                            else {
                                rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId_1).uiState.rows || new Map();
                            }
                            selectedItems = Array.from(rows.values());
                        }
                        if (typeof handle_1 === 'function') {
                            handle_1(selectedItems);
                        }
                        if (subject_1) {
                            subject_1.next();
                        }
                        dialogRef.close(options);
                    }
                }
            }
        ];
        var subject = new Subject();
        var _a = options.modalId, modalId = _a === void 0 ? null : _a;
        var _b = configs.remote, remote = _b === void 0 ? null : _b, _c = configs.currentRow, currentRow = _c === void 0 ? false : _c, _d = configs.areaResponse, areaResponse = _d === void 0 ? undefined : _d;
        var handle = options.handle;
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, function (dialogRef) {
                _this.modals[modalId] = { subject: subject, frameId: frameId, dialogRef: dialogRef, handle: handle, currentRow: currentRow, event: events.event };
            });
        }
        else {
            var dialogRef = this.openModal(options, modalId, params);
            this.modals[modalId] = { subject: subject, frameId: frameId, dialogRef: dialogRef, handle: handle, currentRow: currentRow, event: events.event };
        }
        return subject;
    };
    /**
     * 确认按钮事件
     * @throws frameId
     */
    DialogService.prototype.confirm = function () {
        var _this = this;
        var events = this['context'] && this['context']['eventParam'] || {};
        var _a = (events || {}).modalId, modalId = _a === void 0 ? null : _a;
        if (modalId) {
            var modal = this.modals[modalId];
            var _b = modal || {}, _c = _b.subject, subject = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d, _e = _b.mapFields, mapFields_2 = _e === void 0 ? {} : _e, _f = _b.frameId, frameId = _f === void 0 ? null : _f, _g = _b.currentRow, currentRow = _g === void 0 ? false : _g, _h = _b.event, event_1 = _h === void 0 ? null : _h, _j = _b.context, context_1 = _j === void 0 ? null : _j;
            var formCmp = dialogRef.content; // 弹窗表单实例
            if (!formCmp) {
                throw new Error('不支持的表单类型');
            }
            // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;
            var selectedItems_1 = [];
            if (currentRow === true) {
                var frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                if (!frameComtext) {
                    throw new Error("\u65E0\u6548\u7684frameId\uFF1A" + frameId + "\uFF0C\u8BF7\u786E\u8BA4\u547D\u4EE4\u4E2DframeId\u6B63\u786E\u3002");
                }
                var bindingList = frameComtext.bindingData.getList();
                var item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                if (item && Object.keys(item).length > 0) {
                    selectedItems_1 = [item];
                }
            }
            else {
                var rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                selectedItems_1 = Array.from(rows.values());
            }
            // 映射字段数据
            // 获取触发弹框的编辑器的字段名称
            var editorField = undefined;
            if (event_1 && event_1.editor && event_1.editor.column) {
                editorField = event_1.editor.column.field;
            }
            if (selectedItems_1 && mapFields_2) {
                Object.keys(mapFields_2).forEach(function (k) {
                    var targetField = mapFields_2[k];
                    var sourceKeyArray = k.split('.').filter(function (p) { return p; }) || [];
                    var targetValue = selectedItems_1.map(function (r) {
                        return sourceKeyArray.reduce(function (target, key) {
                            if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {
                                return target[key];
                            }
                            else {
                                return '';
                            }
                        }, r);
                    }).join(',');
                    if (targetField) {
                        var bindingPaths_1 = _this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
                        var targetFields = targetField.split(',').filter(function (p) { return p; });
                        targetFields.forEach(function (target) {
                            if (context_1) {
                                _this.setValueByPath(context_1, target, targetValue);
                            }
                            else {
                                // 修复表格智能输入框选择值后智能输入框值丢失的问题
                                if (event_1.formControl && event_1.formControl.setValue && event_1.editor && event_1.editor.column && event_1.editor.column.field === target) {
                                    event_1.formControl.setValue(targetValue);
                                }
                                var targetPath = target.split('.');
                                _this.frameContext.bindingData.setValue(bindingPaths_1.concat(targetPath), targetValue, true, true);
                            }
                        });
                    }
                });
            }
            if (subject) {
                subject.next();
            }
            dialogRef.close();
        }
    };
    /**
     * 取消按钮事件
     * @param event
     */
    DialogService.prototype.cancel = function (event) {
        var events = event || this['context'] && this['context']['eventParam'] || {};
        var _a = (events || {}).modalId, modalId = _a === void 0 ? null : _a;
        if (modalId) {
            var modal = this.modals[modalId];
            var _b = modal || {}, _c = _b.subject, subject = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d;
            if (subject) {
                subject.next();
            }
            if (dialogRef) {
                dialogRef.close();
            }
        }
    };
    /**
     * 取消服务器变更集
     * @param ref
     */
    DialogService.prototype.cancelChanges = function (ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            var component = ref.modalRef.content;
            if (component && component.context) {
                var repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(function () { return of(true); }));
                }
            }
        }
        return of(true);
    };
    /**
     * 关闭该弹窗
     */
    DialogService.prototype.closeModal = function () {
        if (this.modalRef) {
            this.modalRef.close();
        }
    };
    /**
     * 创建远程表单实例
     * @param options dialog配置
     * @param uiState uistate
     */
    DialogService.prototype.createRemoteForm = function (options, uiState) {
        var _this = this;
        var remote = options.remote || false;
        var subject = new Subject();
        if (remote) {
            var moduleName_1 = options.moduleName || null;
            System.import(remote).then(function (module) {
                if (!moduleName_1) {
                    moduleName_1 = Object.keys(module).pop();
                }
                var moduleFactory = module[moduleName_1];
                var moduleRef = moduleFactory.create(_this.injector);
                var resolve = moduleRef && moduleRef.instance && moduleRef.instance.trans && typeof moduleRef.instance.trans.resolve === 'function' && moduleRef.instance.trans.resolve || (function () { return of(true); });
                resolve.apply(moduleRef.instance.trans).subscribe(function () {
                    var entryComponent = moduleRef['_bootstrapComponents'][0];
                    if (entryComponent) {
                        var compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                        var injector = _this.createInjector(_this.refs);
                        var componentRef_1 = compFactory.create(injector);
                        if (componentRef_1 && componentRef_1.instance && componentRef_1.instance.viewModel && componentRef_1.instance.viewModel.uiState) {
                            if (typeof uiState === 'object' && Object.keys(uiState).length) {
                                Object.keys(uiState).forEach(function (item) {
                                    componentRef_1.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);
                                });
                            }
                            // 附加isDialog参数
                            componentRef_1.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                        }
                        var modalRef = _this.modalService.show(componentRef_1, options);
                        subject.next(modalRef);
                    }
                    else {
                        throw new Error("\u65E0\u6CD5\u627E\u5230\u5165\u53E3\u8868\u5355\uFF01");
                    }
                });
            });
        }
        return subject;
    };
    DialogService.prototype.setValueByPath = function (target, path, value) {
        if (target) {
            var paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    DialogService.prototype.createInjector = function (modalRef, injector) {
        var providers = [
            { provide: INSIDE_DIALOG_TOKEN, useValue: true },
            {
                provide: MODAL_REF, useValue: forwardRef(function () { return modalRef; })
            }
        ];
        return Injector.create({ providers: providers, parent: injector || this.injector });
    };
    DialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: FarrisFormService },
        { type: ComponentFactoryResolver },
        { type: FrameContext },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return DialogService;
}());
export { DialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsa0JBQWtCLEVBQTBCLFdBQVcsRUFBbUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDNUwsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQStCLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0UsT0FBTyxFQUFFLEVBQUUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBR3pEOzs7R0FHRztBQUNIO0lBV0UsdUJBQ1UsWUFBNEIsRUFDNUIsaUJBQW9DLEVBQ3BDLHlCQUFtRCxFQUNuRCxZQUEyQixFQUNmLFFBQW1CO1FBSi9CLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUM1QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMEI7UUFDbkQsaUJBQVksR0FBWixZQUFZLENBQWU7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBZGpDLGVBQVUsR0FBZSxFQUFFLENBQUM7UUFDcEM7O1dBRUc7UUFDSyxTQUFJLEdBQVEsRUFBRSxDQUFDO1FBR2YsV0FBTSxHQUFRLEVBQUUsQ0FBQztRQVN2QixJQUFJ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QUFtQjtRQUM5RCxJQUFNLFNBQVMsR0FBRztZQUNoQixFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1lBQ2hEO2dCQUNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsUUFBUSxFQUFSLENBQVEsQ0FBQzthQUN6RDtTQUNGLENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLFdBQUEsRUFBRSxNQUFNLEVBQUUsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7O2dCQTVpQkYsVUFBVTs7OztnQkFiVSxjQUFjO2dCQUMxQixpQkFBaUI7Z0JBRkwsd0JBQXdCO2dCQUdwQyxZQUFZO2dCQUhvRyxRQUFRLHVCQThCNUgsUUFBUTs7SUE2aEJiLG9CQUFDO0NBQUEsQUE3aUJELElBNmlCQztBQUVELE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgUmVmbGVjdGl2ZUluamVjdG9yLCBQcm92aWRlciwgQ29tcG9uZW50UmVmLCBJbmplY3RGbGFncywgTmdNb2R1bGVGYWN0b3J5LCBJbmplY3RvciwgT3B0aW9uYWwsIGZvcndhcmRSZWYsIE5nTW9kdWxlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJzTW9kYWxSZWYsIEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IEZhcnJpc0Zvcm1TZXJ2aWNlIH0gZnJvbSAnLi9mYXJyaXMtZm9ybS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0LCBGcmFtZUNvbXBvbmVudCwgQmluZGluZ0xpc3QgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vbGFuZ3VhZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBJTlNJREVfRElBTE9HX1RPS0VOLCBNT0RBTF9SRUYgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmRlY2xhcmUgY29uc3QgU3lzdGVtOiBhbnk7XHJcbi8qKlxyXG4gKiDlvLnnqpfmnI3liqFcclxuICogQHNjb3BlIEZvcm1Nb2R1bGVcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRGlhbG9nU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBfcHJvdmlkZXJzOiBQcm92aWRlcltdID0gW107XHJcbiAgLyoqXHJcbiAgICog5aSW6YOo5byV55SoXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZWZzOiBhbnkgPSB7fTtcclxuICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlO1xyXG4gIHByaXZhdGUgbW9kYWxSZWY6IGFueTtcclxuICBwcml2YXRlIG1vZGFsczogYW55ID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBmYXJyaXNGb3JtU2VydmljZTogRmFycmlzRm9ybVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0PzogRnJhbWVDb250ZXh0LFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBpbmplY3Rvcj86IEluamVjdG9yXHJcbiAgKSB7XHJcbiAgICB0aGlzLnNldExhbmd1YWdlU2VydmljZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572u6K+t6KiA5pyN5YqhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXRMYW5ndWFnZVNlcnZpY2UoKSB7XHJcbiAgICAvLyBGcmFtZUNvbnRleHTkuI3kuIDlrprlrZjlnKjvvIzkuI3og73nm7TmjqXnlKhcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0KCk7XHJcbiAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3I7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0PExhbmd1YWdlU2VydmljZT4oTGFuZ3VhZ2VTZXJ2aWNlLCBudWxsLCBJbmplY3RGbGFncy5PcHRpb25hbCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLmxhbmd1YWdlU2VydmljZSkge1xyXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YW85a655pen5by556qX77yM6I635Y+WZnJhbWVDb250ZXh0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRGcmFtZUNvbnRleHQoKSB7XHJcbiAgICBpZiAodGhpcy5mcmFtZUNvbnRleHQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0O1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ2NvbnRleHQnXSAmJiB0aGlzWydjb250ZXh0J11bJ2ZyYW1lQ29udGV4dCddKSB7XHJcbiAgICAgIHJldHVybiB0aGlzWydjb250ZXh0J11bJ2ZyYW1lQ29udGV4dCddO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWFvOWuueaXp+W8ueeql++8jOiOt+WPlkNvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCkge1xyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy5nZXRGcmFtZUNvbnRleHQoKTtcclxuICAgIGxldCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IGFueTtcclxuICAgIGlmIChmcmFtZUNvbnRleHQpIHtcclxuICAgICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gZnJhbWVDb250ZXh0LmluamVjdG9yLmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlmNvbmZpZ+i9rOaNouaIkOWvueixoeexu+Wei+eahOmFjee9rlxyXG4gICAqIEBwYXJhbSBjb25maWcg6YWN572u6aG5XHJcbiAgICogQHRocm93cyDloavlhpnlr7nosaHmoLzlvI/miJZqc29u5a2X56ym5LiyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRPYmplY3RUeXBlQ29uZmlnKGNvbmZpZzogYW55KSB7XHJcbiAgICBsZXQgb2JqZWN0VHlwZUNvbmZpZzogYW55XHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgaWYgKGNvbmZpZy5sZW5ndGgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgb2JqZWN0VHlwZUNvbmZpZyA9IEpTT04ucGFyc2UoY29uZmlnKTtcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjb25maWcgKyAn5LiN5piv5ZCI5rOV55qEanNvbuWtl+espuS4sicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYmplY3RUeXBlQ29uZmlnID0ge307XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgb2JqZWN0VHlwZUNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+Whq+WGmeWvueixoeagvOW8j+aIlmpzb27lrZfnrKbkuLInKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvYmplY3RUeXBlQ29uZmlnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65qih5oCB5qGG5YaF57uE5Lu25a6e5L6L77yM5bm26L+U5Zue5qih5oCB5qGG5a6e5L6L77yb5YGa5LqG5YW85a656ICB6KGo5Y2V5aSE55CGXHJcbiAgICogQHBhcmFtIGNvbmZpZyDlvLnnqpfphY3nva5cclxuICAgKiBAcGFyYW0gY29tcG9uZW50IOW8ueeql+WGhee7hOS7tlxyXG4gICAqIEBwYXJhbSB1aVN0YXRlT2JqZWN0IOe7keWumuW8ueeql+WGhee7hOS7tnVpU3RhdGVcclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZU1vZGFsQ29tcG9uZW50UmVmKGNvbmZpZzogYW55LCBjb21wb25lbnQ6IGFueSwgdWlTdGF0ZU9iamVjdDogYW55KSB7XHJcbiAgICBsZXQgY29tcG9uZW50UmVmOiBhbnk7XHJcbiAgICBsZXQgbW9kYWxSZWY6IGFueTtcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0KCk7XHJcbiAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSB0aGlzLmdldENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcigpO1xyXG4gICAgaWYgKGZyYW1lQ29udGV4dCAmJiBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpIHtcclxuICAgICAgY29uc3QgY29udGVudENtcHRGYWN0b3J5ID0gY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCk7XHJcbiAgICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5jcmVhdGVJbmplY3Rvcih0aGlzLnJlZnMsIHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yKTtcclxuICAgICAgY29uc3QgbW9kYWxDb250ZW50SW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbLi4udGhpcy5fcHJvdmlkZXJzXSwgaW5qZWN0b3IpO1xyXG4gICAgICBjb21wb25lbnRSZWYgPSBjb250ZW50Q21wdEZhY3RvcnkuY3JlYXRlKG1vZGFsQ29udGVudEluamVjdG9yKTtcclxuICAgICAgaWYgKGNvbXBvbmVudFJlZiAmJiBjb21wb25lbnRSZWYuaW5zdGFuY2UgJiYgY29tcG9uZW50UmVmLmluc3RhbmNlLnZpZXdNb2RlbCAmJiBjb21wb25lbnRSZWYuaW5zdGFuY2Uudmlld01vZGVsLnVpU3RhdGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHVpU3RhdGVPYmplY3QgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHVpU3RhdGVPYmplY3QpLmxlbmd0aCkge1xyXG4gICAgICAgICAgT2JqZWN0LmtleXModWlTdGF0ZU9iamVjdCkuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uudmlld01vZGVsLnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZShpdGVtLCB1aVN0YXRlT2JqZWN0W2l0ZW1dKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDpmYTliqBpc0RpYWxvZ+WPguaVsFxyXG4gICAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS52aWV3TW9kZWwudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKCdERVZLSVRfRElBTE9HJywgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNvbXBvbmVudFJlZiwgY29uZmlnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wb25lbnQsIGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbW9kYWxSZWY7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAq5omT5byA5by556qXXHJcbiAgICogQHBhcmFtIGNvbmZpZyDmqKHmgIHmoYbmnKzouqvphY3nva5cclxuICAgKiBAcGFyYW0gbW9kYWxJZCDmqKHmgIHmoYblhoXnu4Tku7bnmoRpZFxyXG4gICAqIEBwYXJhbSB1aVN0YXRlQ29uZmlnIOaooeaAgeahhuWGhee7hOS7tnVpU3RhdGXkuIrnmoTlrZfmrrXlj4rlgLxcclxuICAgKiBAcGFyYW0gY2FsbGJhY2sg5Zue6LCDXHJcbiAgICovXHJcbiAgcHVibGljIG9wZW5Nb2RhbChjb25maWc6IGFueSA9IHt9LCBtb2RhbElkOiBzdHJpbmcsIHVpU3RhdGVDb25maWc6IGFueSA9IHt9LCBjYWxsYmFjaz86IChtb2RhbFJlZjogYW55KSA9PiBhbnkpIHtcclxuICAgIGNvbnN0IGNvbmZpZ09iaiA9IHRoaXMuZ2V0T2JqZWN0VHlwZUNvbmZpZyhjb25maWcpO1xyXG4gICAgY29uc3QgdWlTdGF0ZU9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0VHlwZUNvbmZpZyh1aVN0YXRlQ29uZmlnKTtcclxuICAgIGNvbnN0IGlubmVyQ29tcG9wbmVudCA9IHRoaXMuZmFycmlzRm9ybVNlcnZpY2UuZ2V0Q29udHJvbHMobW9kYWxJZCk7XHJcbiAgICBsZXQgbW9kYWxSZWY6IGFueTtcclxuICAgIGxldCBtb2RhbENvbmZpZzogYW55ID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVmYXVsdERpYWxvZ1RpdGxlLFxyXG4gICAgICB3aWR0aDogNzYwLFxyXG4gICAgICBoZWlnaHQ6IDQ1MCxcclxuICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgbW9kYWxDb25maWcgPSBPYmplY3QuYXNzaWduKG1vZGFsQ29uZmlnLCBjb25maWdPYmopO1xyXG4gICAgY29uc3Qgb25DbG9zaW5nSGFuZGxlciA9IG1vZGFsQ29uZmlnLmJlZm9yZUNsb3NlO1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbiAgICBjb25zdCBjYW5jZWxDaGFuZ2VzID0gbW9kYWxDb25maWdbJ2NhbmNlbENoYW5nZXMnXSB8fCBmYWxzZTtcclxuICAgIG1vZGFsQ29uZmlnLmJlZm9yZUNsb3NlID0gKHJlZikgPT4ge1xyXG4gICAgICAvLyBpZiAocmVmICYmIHJlZi5tb2RhbFJlZiAmJiByZWYubW9kYWxSZWYuY29udGVudCkge1xyXG4gICAgICAvLyAgIHJlZi5tb2RhbFJlZi5jb250ZW50LmlzRGlhbG9nUm9vdENvbXBvbmVudCA9IGZhbHNlO1xyXG4gICAgICAvLyB9XHJcbiAgICAgIGlmICghIW9uQ2xvc2luZ0hhbmRsZXIgJiYgdHlwZW9mIG9uQ2xvc2luZ0hhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gb25DbG9zaW5nSGFuZGxlcihyZWYpLnBpcGUoXHJcbiAgICAgICAgICBzd2l0Y2hNYXAoKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgaWYgKGNhbmNlbENoYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbmNlbENoYW5nZXMocmVmKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9mKHJlc3VsdCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNhbmNlbENoYW5nZXMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWxDaGFuZ2VzKHJlZik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVtb3RlID0gbW9kYWxDb25maWcucmVtb3RlIHx8IGZhbHNlO1xyXG4gICAgaWYgKHJlbW90ZSkge1xyXG4gICAgICB0aGlzLmNyZWF0ZVJlbW90ZUZvcm0obW9kYWxDb25maWcsIHVpU3RhdGVPYmplY3QpLnN1YnNjcmliZShcclxuICAgICAgICAobW9kYWxSZWY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5tb2RhbFJlZiA9IG1vZGFsUmVmO1xyXG4gICAgICAgICAgdGhpcy5yZWZzLm1vZGFsUmVmID0gbW9kYWxSZWY7XHJcbiAgICAgICAgICBpZiAobW9kYWxSZWYgJiYgISFtb2RhbFJlZi5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIG1vZGFsUmVmLmNvbnRlbnQuaXNEaWFsb2dSb290Q29tcG9uZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgbW9kYWxSZWYuY29udGVudC5kaWFsb2dSZWYgPSBtb2RhbFJlZjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhbGxiYWNrKG1vZGFsUmVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIWlubmVyQ29tcG9wbmVudCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYOiOt+WPluaOp+S7tuWksei0pe+8jG1vZGFsSWQ9JHttb2RhbElkfWApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIGlubmVyQ29tcG9wbmVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBtb2RhbENvbmZpZy5kaWFsb2dUeXBlID0gJ2lmcmFtZSc7XHJcbiAgICAgICAgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGlubmVyQ29tcG9wbmVudCwgbW9kYWxDb25maWcpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbm5lckNvbXBvcG5lbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBtb2RhbFJlZiA9IHRoaXMuY3JlYXRlTW9kYWxDb21wb25lbnRSZWYobW9kYWxDb25maWcsIGlubmVyQ29tcG9wbmVudCwgdWlTdGF0ZU9iamVjdCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlubmVyQ29tcG9wbmVudCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAvLyDlpoLmnpzmmK/lr7nosaEg5LiU5L2/55So54us56uLanPliqDovb1cclxuICAgICAgICAvLyB7XCJ1c2VJc29sYXRlSnNcIjp0cnVlLFwibW9kYWxJbnN0YW5jZVwiOmYoKX1cclxuICAgICAgICBpZiAoaW5uZXJDb21wb3BuZW50LnVzZUlzb2xhdGVKcykge1xyXG4gICAgICAgICAgY29uc3QgaW5qZWN0b3IgPSB0aGlzLmNyZWF0ZUluamVjdG9yKHRoaXMucmVmcyk7XHJcbiAgICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSB7XHJcbiAgICAgICAgICAgIGluamVjdG9yOiBpbmplY3RvcixcclxuICAgICAgICAgICAgdWlTdGF0ZTogdWlTdGF0ZU9iamVjdCxcclxuICAgICAgICAgICAgbW9kYWxTZXJ2aWNlOiB0aGlzLm1vZGFsU2VydmljZSxcclxuICAgICAgICAgICAgZGlhbG9nU2VydmljZUluc3RhbmNlOiB0aGlzLFxyXG4gICAgICAgICAgICBldmVudEJ1czogdGhpcy5mcmFtZUNvbnRleHQuZ2V0VmlydHVhbFJvb3RGcmFtZUNvbnRleHQoKS5ldmVudEJ1cyxcclxuICAgICAgICAgICAgY29tcG9uZW50Q2FsbGJhY2s6IHRoaXMuY29tcG9uZW50TW9kaWZ5LFxyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlQ2FsbGJhY2s6IHRoaXMubW9kYWxJbnN0YW5jZUNhbGxiYWNrLmJpbmQodGhpcylcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICAvLyDkvJrlnKjlhoXpg6jov5vooYxcclxuICAgICAgICAgIGNvbnN0IHN1YmplY3Q6IFN1YmplY3Q8YW55PiA9IGlubmVyQ29tcG9wbmVudFsnbW9kYWxJbnN0YW5jZSddKG1vZGFsQ29uZmlnLCBwYXJhbWV0ZXIpO1xyXG4gICAgICAgICAgcmV0dXJuIHN1YmplY3Q7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhpbm5lckNvbXBvcG5lbnQsIG1vZGFsQ29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMubW9kYWxSZWYgPSBtb2RhbFJlZjtcclxuICAgICAgdGhpcy5yZWZzLm1vZGFsUmVmID0gbW9kYWxSZWY7XHJcbiAgICAgIGlmIChtb2RhbFJlZiAmJiAhIW1vZGFsUmVmLmNvbnRlbnQpIHtcclxuICAgICAgICBtb2RhbFJlZi5jb250ZW50LmlzRGlhbG9nUm9vdENvbXBvbmVudCA9IHRydWU7XHJcbiAgICAgICAgbW9kYWxSZWYuY29udGVudC5kaWFsb2dSZWYgPSBtb2RhbFJlZjtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbW9kYWxSZWY7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgY29tcG9uZW50TW9kaWZ5KGNtcFJlZjogYW55LCBwYXJhbWV0ZXI6IHtcclxuICAgIHVpc3RhdGU6IGFueVxyXG4gIH0pIHtcclxuICAgIGlmIChjbXBSZWYgJiYgY21wUmVmLmluc3RhbmNlICYmIGNtcFJlZi5pbnN0YW5jZS52aWV3TW9kZWwgJiYgY21wUmVmLmluc3RhbmNlLnZpZXdNb2RlbC51aVN0YXRlKSB7XHJcbiAgICAgIGlmIChwYXJhbWV0ZXIudWlzdGF0ZSAmJiB0eXBlb2YgcGFyYW1ldGVyLnVpc3RhdGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcGFyYW1ldGVyLnVpc3RhdGUgPSBKU09OLnBhcnNlKHBhcmFtZXRlci51aXN0YXRlKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIHBhcmFtZXRlci51aXN0YXRlID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhwYXJhbWV0ZXIudWlzdGF0ZSkubGVuZ3RoKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1ldGVyLnVpc3RhdGUpLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgIGNtcFJlZi5pbnN0YW5jZS52aWV3TW9kZWwudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKGl0ZW0sIHBhcmFtZXRlci51aXN0YXRlW2l0ZW1dKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAvLyDpmYTliqBpc0RpYWxvZ+WPguaVsFxyXG4gICAgICBjbXBSZWYuaW5zdGFuY2Uudmlld01vZGVsLnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZSgnREVWS0lUX0RJQUxPRycsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBtb2RhbEluc3RhbmNlQ2FsbGJhY2soY21wUmVmOiBhbnksIG9wdGlvbnM6IGFueSwgcGFyYW1ldGVyOiBhbnkpIHtcclxuICAgIGlmIChwYXJhbWV0ZXIgJiYgcGFyYW1ldGVyLm1vZGFsU2VydmljZSkge1xyXG4gICAgICBjb25zdCBtb2RhbFJlZiA9IHBhcmFtZXRlci5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSZWYsIG9wdGlvbnMpO1xyXG4gICAgICB0aGlzLm1vZGFsUmVmID0gbW9kYWxSZWY7XHJcbiAgICAgIHRoaXMucmVmcy5tb2RhbFJlZiA9IG1vZGFsUmVmO1xyXG4gICAgICBpZiAobW9kYWxSZWYgJiYgISFtb2RhbFJlZi5jb250ZW50KSB7XHJcbiAgICAgICAgbW9kYWxSZWYuY29udGVudC5pc0RpYWxvZ1Jvb3RDb21wb25lbnQgPSB0cnVlO1xyXG4gICAgICAgIG1vZGFsUmVmLmNvbnRlbnQuZGlhbG9nUmVmID0gbW9kYWxSZWY7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG1vZGFsUmVmO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omT5byA57G75biu5Yqp6KGo5Y2VXHJcbiAgICogQHBhcmFtIGZyYW1lSWRcclxuICAgKiBAcGFyYW0gcGFyYW1zXHJcbiAgICogQHBhcmFtIGNvbmZpZ3NcclxuICAgKiBAZGVzY3JpcHRpb24g5by55Ye66KGo5Y2V5ZKM5by55Ye66L+c56uv6KGo5Y2V5Yy65Yir5Li65by55Ye66KGo5Y2V6ZyA6KaB6YWN572u5a2X5q615pig5bCEXHJcbiAgICovXHJcbiAgcHVibGljIG9wZW5IZWxwTW9kYWwoZnJhbWVJZDogc3RyaW5nLCBwYXJhbXM6IHN0cmluZywgY29uZmlncz86IGFueSkge1xyXG4gICAgY29uc3QgZXZlbnRzID0gdGhpc1snY29udGV4dCddWydldmVudFBhcmFtJ10gfHwge307XHJcbiAgICAvLyDljaHniYflnLrmma/kvKDpgJLov4fmnaXnmoTkuovku7bmmK/oh6rlrprkuYnlr7nosaHvvIzljIXlkKtldmVudOWSjG9wdGlvbnPjgILliJfooajlnLrmma/kvKDpgJLov4fmnaXnmoTkuovku7blj4LmlbDmmK/mma7pgJrkuovku7blj4LmlbDvvIzlnKjlj4LmlbDkuK3mkLrluKbkuoZlZGl0b3Iub3B0aW9uc1xyXG4gICAgY29uc3QgZXZlbnQgPSBldmVudHMuZXZlbnQgfHwgZXZlbnRzO1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGV2ZW50cy5vcHRpb25zIHx8IGV2ZW50cy5lZGl0b3IgJiYgZXZlbnRzLmVkaXRvci5vcHRpb25zIHx8IHt9O1xyXG4gICAgY29uc3QgY29udGV4dCA9IGV2ZW50cyAmJiBldmVudHMuY29udGV4dDtcclxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICAvLyBtb2RhbElk5Zyo5Lik56eN5Zy65pmv5LiL6YO96ZyA6KaB77yM55So5p2l5Yy65YiG5a6e5L6LXHJcbiAgICBjb25zdCB7IG1vZGFsSWQgPSBudWxsIH0gPSBvcHRpb25zO1xyXG4gICAgaWYgKCFjb25maWdzKSB7XHJcbiAgICAgIGNvbmZpZ3MgPSAne30nO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb25maWdzID09PSAnc3RyaW5nJyAmJiBjb25maWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uZmlncyA9IEpTT04ucGFyc2UoY29uZmlncyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IHJlbW90ZSA9IGZhbHNlLCBjdXJyZW50Um93ID0gZmFsc2UsIGFyZWFSZXNwb25zZSA9IHVuZGVmaW5lZCB9ID0gY29uZmlncyB8fCB7fTtcclxuICAgIC8vIOaUr+aMgWFyZWFSZXNwb25zZemFjee9rlxyXG4gICAgaWYgKGFyZWFSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuYXJlYVJlc3BvbnNlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5hcmVhUmVzcG9uc2UgPSBhcmVhUmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBpZiAocmVtb3RlKSB7XHJcbiAgICAgIGNvbnN0IG1hcEZpZWxkcyA9IGNvbmZpZ3MubWFwRmllbGRzIHx8IHt9O1xyXG4gICAgICBvcHRpb25zLnJlbW90ZSA9IHJlbW90ZSArICc/dj0nICsgbmV3IERhdGUoKS52YWx1ZU9mKCk7XHJcbiAgICAgIHRoaXMub3Blbk1vZGFsKG9wdGlvbnMsIG1vZGFsSWQsIHBhcmFtcywgKGRpYWxvZ1JlZjogYW55KSA9PiB7XHJcbiAgICAgICAgLy8g5paw5aKeZXZlbnTlj4LmlbDvvIjkuLrkuobku6XlkI7osIPnlKhldmVudOS4reeahGZvcm1Db250cm9s5Lul6YCC6YWN5YiX6KGo5Lit55qE5pm66IO96L6T5YWl5qGG5by55Ye66KGo5Y2V77yJXHJcbiAgICAgICAgdGhpcy5tb2RhbHNbbW9kYWxJZF0gPSB7IHN1YmplY3QsIGZyYW1lSWQ6IGZyYW1lSWQsIG1hcEZpZWxkcywgZGlhbG9nUmVmLCBjdXJyZW50Um93LCBldmVudDogZXZlbnQsIGNvbnRleHQgfTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBkaWFsb2dSZWYgPSB0aGlzLm9wZW5Nb2RhbChvcHRpb25zLCBtb2RhbElkLCBwYXJhbXMpO1xyXG4gICAgICBjb25zdCBtYXBGaWVsZHMgPSBvcHRpb25zLm1hcEZpZWxkcyB8fCB7fTtcclxuICAgICAgdGhpcy5tb2RhbHNbbW9kYWxJZF0gPSB7IHN1YmplY3QsIGZyYW1lSWQ6IGZyYW1lSWQsIG1hcEZpZWxkcywgZGlhbG9nUmVmLCBjdXJyZW50Um93LCBldmVudDogZXZlbnQsIGNvbnRleHQgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdWJqZWN0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omT5byA5bim5Zue6LCD55qE5by556qXXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg5Y+C5pWwXHJcbiAgICogQHBhcmFtIGNvbmZpZ3Mg6YWN572uXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgb3BlbkNhbGxiYWNrYWJsZU1vZGFsKGZyYW1lSWQ6IHN0cmluZywgcGFyYW1zPzogc3RyaW5nLCBjb25maWdzPzogYW55KSB7XHJcbiAgICBpZiAoIWNvbmZpZ3MpIHtcclxuICAgICAgY29uZmlncyA9ICd7fSc7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZ3MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbmZpZ3MgPSBKU09OLnBhcnNlKGNvbmZpZ3MpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXZlbnRzID0gdGhpc1snY29udGV4dCddICYmIHRoaXNbJ2NvbnRleHQnXVsnZXZlbnRQYXJhbSddIHx8IHt9O1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGV2ZW50cy5vcHRpb25zO1xyXG4gICAgb3B0aW9ucy5zaG93QnV0dG9ucyA9IHRydWU7XHJcbiAgICBvcHRpb25zLmJ1dHRvbnMgPSBbXHJcbiAgICAgIHsgdGV4dDogdGhpcy5sYW5ndWFnZVNlcnZpY2UuY2FuY2VsLCBjbHM6ICdidG4nLCBoYW5kbGU6IChldmVudDogYW55KSA9PiB0aGlzLmNhbmNlbChvcHRpb25zKSB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogdGhpcy5sYW5ndWFnZVNlcnZpY2UuY29uZmlybSwgY2xzOiAnYnRuIGJ0bi1wcmltYXJ5JywgaGFuZGxlOiAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeyBtb2RhbElkID0gbnVsbCB9ID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICAgIGlmIChtb2RhbElkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gdGhpcy5tb2RhbHNbbW9kYWxJZF07XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc3ViamVjdCA9IG51bGwsIGRpYWxvZ1JlZiA9IG51bGwsIGZyYW1lSWQgPSBudWxsLCBoYW5kbGUgPSBudWxsLCBjdXJyZW50Um93ID0gZmFsc2UgfSA9IG1vZGFsIHx8IHt9O1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtQ21wID0gZGlhbG9nUmVmLmNvbnRlbnQ7IC8vIOW8ueeql+ihqOWNleWunuS+i1xyXG4gICAgICAgICAgICBpZiAoIWZvcm1DbXApIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+S4jeaUr+aMgeeahOihqOWNleexu+WeiycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZEl0ZW1zID0gW107XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Um93ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgbGV0IGZyYW1lQ29tdGV4dDogRnJhbWVDb250ZXh0O1xyXG4gICAgICAgICAgICAgIGlmIChmb3JtQ21wLmNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGZyYW1lQ29tdGV4dCA9IGZvcm1DbXAuY29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKSBhcyBGcmFtZUNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZyYW1lQ29tdGV4dCA9IGZvcm1DbXAuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCkgYXMgRnJhbWVDb250ZXh0O1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgaWYgKCFmcmFtZUNvbXRleHQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5peg5pWI55qEZnJhbWVJZO+8miR7ZnJhbWVJZH3vvIzor7fnoa7orqTlkb3ku6TkuK1mcmFtZUlk5q2j56Gu44CCYCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gZnJhbWVDb210ZXh0LmJpbmRpbmdEYXRhLmdldExpc3QoKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgICAgICBjb25zdCBpdGVtID0gYmluZGluZ0xpc3QgJiYgYmluZGluZ0xpc3QuY3VycmVudEl0ZW0gJiYgYmluZGluZ0xpc3QuY3VycmVudEl0ZW0udG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtcyA9IFtpdGVtXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBsZXQgcm93czogTWFwPHN0cmluZywgYW55PjtcclxuICAgICAgICAgICAgICAvLyDlpoLmnpxjb250ZXh05Li656m6IOmCo+S5iOWwneivleS7juWvueW6lOeahGFwcGNvbnRleHTor7vlj5bvvIzkuLvopoHnm67nmoTmmK/kuLrkuobop6PmnpDooajljZXnmoTlvLnlh7pcclxuICAgICAgICAgICAgICBpZiAoZm9ybUNtcC5jb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICByb3dzID0gZm9ybUNtcC5jb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpLnVpU3RhdGUucm93cyB8fCBuZXcgTWFwPHN0cmluZywgYW55PigpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByb3dzID0gZm9ybUNtcC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKS51aVN0YXRlLnJvd3MgfHwgbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkSXRlbXMgPSBBcnJheS5mcm9tKHJvd3MudmFsdWVzKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgaGFuZGxlKHNlbGVjdGVkSXRlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdWJqZWN0KSB7XHJcbiAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlhbG9nUmVmLmNsb3NlKG9wdGlvbnMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgY29uc3QgeyBtb2RhbElkID0gbnVsbCB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHsgcmVtb3RlID0gbnVsbCwgY3VycmVudFJvdyA9IGZhbHNlLCBhcmVhUmVzcG9uc2UgPSB1bmRlZmluZWQgfSA9IGNvbmZpZ3M7XHJcbiAgICBjb25zdCBoYW5kbGUgPSBvcHRpb25zLmhhbmRsZTtcclxuICAgIC8vIOaUr+aMgWFyZWFSZXNwb25zZemFjee9rlxyXG4gICAgaWYgKGFyZWFSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuYXJlYVJlc3BvbnNlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5hcmVhUmVzcG9uc2UgPSBhcmVhUmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBpZiAocmVtb3RlKSB7XHJcbiAgICAgIG9wdGlvbnMucmVtb3RlID0gcmVtb3RlICsgJz92PScgKyBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcclxuICAgICAgdGhpcy5vcGVuTW9kYWwob3B0aW9ucywgbW9kYWxJZCwgcGFyYW1zLCAoZGlhbG9nUmVmOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLm1vZGFsc1ttb2RhbElkXSA9IHsgc3ViamVjdCwgZnJhbWVJZDogZnJhbWVJZCwgZGlhbG9nUmVmLCBoYW5kbGUsIGN1cnJlbnRSb3csIGV2ZW50OiBldmVudHMuZXZlbnQgfTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBkaWFsb2dSZWYgPSB0aGlzLm9wZW5Nb2RhbChvcHRpb25zLCBtb2RhbElkLCBwYXJhbXMpO1xyXG4gICAgICB0aGlzLm1vZGFsc1ttb2RhbElkXSA9IHsgc3ViamVjdCwgZnJhbWVJZDogZnJhbWVJZCwgZGlhbG9nUmVmLCBoYW5kbGUsIGN1cnJlbnRSb3csIGV2ZW50OiBldmVudHMuZXZlbnQgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdWJqZWN0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog56Gu6K6k5oyJ6ZKu5LqL5Lu2XHJcbiAgICogQHRocm93cyBmcmFtZUlkXHJcbiAgICovXHJcbiAgcHVibGljIGNvbmZpcm0oKSB7XHJcbiAgICBjb25zdCBldmVudHMgPSB0aGlzWydjb250ZXh0J10gJiYgdGhpc1snY29udGV4dCddWydldmVudFBhcmFtJ10gfHwge307XHJcbiAgICBjb25zdCB7IG1vZGFsSWQgPSBudWxsIH0gPSBldmVudHMgfHwge307XHJcbiAgICBpZiAobW9kYWxJZCkge1xyXG4gICAgICBjb25zdCBtb2RhbCA9IHRoaXMubW9kYWxzW21vZGFsSWRdO1xyXG4gICAgICBjb25zdCB7IHN1YmplY3QgPSBudWxsLCBkaWFsb2dSZWYgPSBudWxsLCBtYXBGaWVsZHMgPSB7fSwgZnJhbWVJZCA9IG51bGwsIGN1cnJlbnRSb3cgPSBmYWxzZSwgZXZlbnQgPSBudWxsLCBjb250ZXh0ID0gbnVsbCB9ID0gbW9kYWwgfHwge307XHJcbiAgICAgIGNvbnN0IGZvcm1DbXAgPSBkaWFsb2dSZWYuY29udGVudDsgLy8g5by556qX6KGo5Y2V5a6e5L6LXHJcbiAgICAgIGlmICghZm9ybUNtcCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcign5LiN5pSv5oyB55qE6KGo5Y2V57G75Z6LJyk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gY29uc3Qgc2VsZWN0ZWRJZHMgPSBmb3JtQ21wLmNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCkudWlTdGF0ZS5pZHM7XHJcblxyXG4gICAgICBsZXQgc2VsZWN0ZWRJdGVtcyA9IFtdO1xyXG4gICAgICBpZiAoY3VycmVudFJvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lQ29tdGV4dCA9IGZvcm1DbXAuY29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKSBhcyBGcmFtZUNvbnRleHQ7XHJcbiAgICAgICAgaWYgKCFmcmFtZUNvbXRleHQpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5peg5pWI55qEZnJhbWVJZO+8miR7ZnJhbWVJZH3vvIzor7fnoa7orqTlkb3ku6TkuK1mcmFtZUlk5q2j56Gu44CCYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gZnJhbWVDb210ZXh0LmJpbmRpbmdEYXRhLmdldExpc3QoKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICBjb25zdCBpdGVtID0gYmluZGluZ0xpc3QgJiYgYmluZGluZ0xpc3QuY3VycmVudEl0ZW0gJiYgYmluZGluZ0xpc3QuY3VycmVudEl0ZW0udG9KU09OKCk7XHJcbiAgICAgICAgaWYgKGl0ZW0gJiYgT2JqZWN0LmtleXMoaXRlbSkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgc2VsZWN0ZWRJdGVtcyA9IFtpdGVtXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgcm93czogTWFwPHN0cmluZywgYW55PiA9IGZvcm1DbXAuY29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKS51aVN0YXRlLnJvd3MgfHwgbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuICAgICAgICBzZWxlY3RlZEl0ZW1zID0gQXJyYXkuZnJvbShyb3dzLnZhbHVlcygpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5pig5bCE5a2X5q615pWw5o2uXHJcbiAgICAgIC8vIOiOt+WPluinpuWPkeW8ueahhueahOe8lui+keWZqOeahOWtl+auteWQjeensFxyXG4gICAgICBsZXQgZWRpdG9yRmllbGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5lZGl0b3IgJiYgZXZlbnQuZWRpdG9yLmNvbHVtbikge1xyXG4gICAgICAgIGVkaXRvckZpZWxkID0gZXZlbnQuZWRpdG9yLmNvbHVtbi5maWVsZDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoc2VsZWN0ZWRJdGVtcyAmJiBtYXBGaWVsZHMpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhtYXBGaWVsZHMpLmZvckVhY2goKGspID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldEZpZWxkOiBzdHJpbmcgPSBtYXBGaWVsZHNba107XHJcbiAgICAgICAgICBjb25zdCBzb3VyY2VLZXlBcnJheSA9IGsuc3BsaXQoJy4nKS5maWx0ZXIoKHApID0+IHApIHx8IFtdO1xyXG4gICAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBzZWxlY3RlZEl0ZW1zLm1hcCgocikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gc291cmNlS2V5QXJyYXkucmVkdWNlKCh0YXJnZXQsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgKHRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IHRhcmdldFsnX19wcm90b19fJ10uaGFzT3duUHJvcGVydHkoa2V5KSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgcik7XHJcbiAgICAgICAgICB9KS5qb2luKCcsJyk7XHJcbiAgICAgICAgICBpZiAodGFyZ2V0RmllbGQpIHtcclxuICAgICAgICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gdGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwKSA9PiBwKTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0RmllbGRzID0gdGFyZ2V0RmllbGQuc3BsaXQoJywnKS5maWx0ZXIoKHApID0+IHApO1xyXG4gICAgICAgICAgICB0YXJnZXRGaWVsZHMuZm9yRWFjaCgodGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoY29udGV4dCwgdGFyZ2V0LCB0YXJnZXRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOS/ruWkjeihqOagvOaZuuiDvei+k+WFpeahhumAieaLqeWAvOWQjuaZuuiDvei+k+WFpeahhuWAvOS4ouWkseeahOmXrumimFxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZvcm1Db250cm9sICYmIGV2ZW50LmZvcm1Db250cm9sLnNldFZhbHVlICYmIGV2ZW50LmVkaXRvciAmJiBldmVudC5lZGl0b3IuY29sdW1uICYmIGV2ZW50LmVkaXRvci5jb2x1bW4uZmllbGQgPT09IHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICBldmVudC5mb3JtQ29udHJvbC5zZXRWYWx1ZSh0YXJnZXRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRQYXRoID0gdGFyZ2V0LnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5zZXRWYWx1ZShiaW5kaW5nUGF0aHMuY29uY2F0KHRhcmdldFBhdGgpLCB0YXJnZXRWYWx1ZSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoc3ViamVjdCkge1xyXG4gICAgICAgIHN1YmplY3QubmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGRpYWxvZ1JlZi5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDlj5bmtojmjInpkq7kuovku7ZcclxuICAgKiBAcGFyYW0gZXZlbnRcclxuICAgKi9cclxuICBwdWJsaWMgY2FuY2VsKGV2ZW50PzogYW55KSB7XHJcbiAgICBjb25zdCBldmVudHMgPSBldmVudCB8fCB0aGlzWydjb250ZXh0J10gJiYgdGhpc1snY29udGV4dCddWydldmVudFBhcmFtJ10gfHwge307XHJcbiAgICBjb25zdCB7IG1vZGFsSWQgPSBudWxsIH0gPSBldmVudHMgfHwge307XHJcbiAgICBpZiAobW9kYWxJZCkge1xyXG4gICAgICBjb25zdCBtb2RhbCA9IHRoaXMubW9kYWxzW21vZGFsSWRdO1xyXG4gICAgICBjb25zdCB7IHN1YmplY3QgPSBudWxsLCBkaWFsb2dSZWYgPSBudWxsIH0gPSBtb2RhbCB8fCB7fTtcclxuICAgICAgaWYgKHN1YmplY3QpIHtcclxuICAgICAgICBzdWJqZWN0Lm5leHQoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZGlhbG9nUmVmKSB7XHJcbiAgICAgICAgZGlhbG9nUmVmLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Y+W5raI5pyN5Yqh5Zmo5Y+Y5pu06ZuGXHJcbiAgICogQHBhcmFtIHJlZlxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FuY2VsQ2hhbmdlcyhyZWY6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgaWYgKHJlZiAmJiByZWYubW9kYWxSZWYgJiYgcmVmLm1vZGFsUmVmLmNvbnRlbnQpIHtcclxuICAgICAgY29uc3QgY29tcG9uZW50OiBGcmFtZUNvbXBvbmVudCA9IHJlZi5tb2RhbFJlZi5jb250ZW50IGFzIEZyYW1lQ29tcG9uZW50O1xyXG4gICAgICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5jb250ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgcmVwb3NpdG9yeSA9IGNvbXBvbmVudC5jb250ZXh0LnJlcG9zaXRvcnkgfHwgbnVsbDtcclxuICAgICAgICBpZiAocmVwb3NpdG9yeSkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlcG9zaXRvcnkuY2FuY2VsQ2hhbmdlcygpLnBpcGUoc3dpdGNoTWFwKCgpID0+IG9mKHRydWUpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWFs+mXreivpeW8ueeql1xyXG4gICAqL1xyXG4gIGNsb3NlTW9kYWwoKSB7XHJcbiAgICBpZiAodGhpcy5tb2RhbFJlZikge1xyXG4gICAgICB0aGlzLm1vZGFsUmVmLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uui/nOeoi+ihqOWNleWunuS+i1xyXG4gICAqIEBwYXJhbSBvcHRpb25zIGRpYWxvZ+mFjee9rlxyXG4gICAqIEBwYXJhbSB1aVN0YXRlIHVpc3RhdGVcclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZVJlbW90ZUZvcm0ob3B0aW9uczogYW55LCB1aVN0YXRlOiBhbnkpOiBTdWJqZWN0PGFueT4ge1xyXG4gICAgY29uc3QgcmVtb3RlID0gb3B0aW9ucy5yZW1vdGUgfHwgZmFsc2U7XHJcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgaWYgKHJlbW90ZSkge1xyXG4gICAgICBsZXQgbW9kdWxlTmFtZSA9IG9wdGlvbnMubW9kdWxlTmFtZSB8fCBudWxsO1xyXG4gICAgICBTeXN0ZW0uaW1wb3J0KHJlbW90ZSkudGhlbigobW9kdWxlOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoIW1vZHVsZU5hbWUpIHtcclxuICAgICAgICAgIG1vZHVsZU5hbWUgPSBPYmplY3Qua2V5cyhtb2R1bGUpLnBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2R1bGVGYWN0b3J5ID0gbW9kdWxlW21vZHVsZU5hbWVdIGFzIE5nTW9kdWxlRmFjdG9yeTxhbnk+O1xyXG4gICAgICAgIGNvbnN0IG1vZHVsZVJlZjogTmdNb2R1bGVSZWY8eyB0cmFucz86IHsgcmVzb2x2ZT86ICgpID0+IE9ic2VydmFibGU8YW55PiB9IH0+ID0gbW9kdWxlRmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZSA9IG1vZHVsZVJlZiAmJiBtb2R1bGVSZWYuaW5zdGFuY2UgJiYgbW9kdWxlUmVmLmluc3RhbmNlLnRyYW5zICYmIHR5cGVvZiBtb2R1bGVSZWYuaW5zdGFuY2UudHJhbnMucmVzb2x2ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVSZWYuaW5zdGFuY2UudHJhbnMucmVzb2x2ZSB8fCAoKCkgPT4gb2YodHJ1ZSkpO1xyXG4gICAgICAgIHJlc29sdmUuYXBwbHkobW9kdWxlUmVmLmluc3RhbmNlLnRyYW5zKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZW50cnlDb21wb25lbnQgPSBtb2R1bGVSZWZbJ19ib290c3RyYXBDb21wb25lbnRzJ11bMF07XHJcbiAgICAgICAgICBpZiAoZW50cnlDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY29tcEZhY3RvcnkgPSBtb2R1bGVSZWYuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGVudHJ5Q29tcG9uZW50KTtcclxuICAgICAgICAgICAgY29uc3QgaW5qZWN0b3IgPSB0aGlzLmNyZWF0ZUluamVjdG9yKHRoaXMucmVmcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSBjb21wRmFjdG9yeS5jcmVhdGUoaW5qZWN0b3IpO1xyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50UmVmICYmIGNvbXBvbmVudFJlZi5pbnN0YW5jZSAmJiBjb21wb25lbnRSZWYuaW5zdGFuY2Uudmlld01vZGVsICYmIGNvbXBvbmVudFJlZi5pbnN0YW5jZS52aWV3TW9kZWwudWlTdGF0ZSkge1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdWlTdGF0ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModWlTdGF0ZSkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh1aVN0YXRlKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS52aWV3TW9kZWwudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKGl0ZW0sIHVpU3RhdGVbaXRlbV0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIOmZhOWKoGlzRGlhbG9n5Y+C5pWwXHJcbiAgICAgICAgICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLnZpZXdNb2RlbC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUoJ0RFVktJVF9ESUFMT0cnLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY29tcG9uZW50UmVmLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgc3ViamVjdC5uZXh0KG1vZGFsUmVmKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5peg5rOV5om+5Yiw5YWl5Y+j6KGo5Y2V77yBYCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1YmplY3Q7XHJcbiAgfVxyXG4gIHByaXZhdGUgc2V0VmFsdWVCeVBhdGgodGFyZ2V0OiBvYmplY3QsIHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICAgICAgaWYgKHBhdGhzLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgdGFyZ2V0W3BhdGhdID0gdmFsdWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGF0aHMuc2xpY2UoMCwgLTEpLnJlZHVjZSgocHJldiwgcGF0aCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCEocHJldi5oYXNPd25Qcm9wZXJ0eShwYXRoKSB8fCBwcmV2WydfX3Byb3RvX18nXS5oYXNPd25Qcm9wZXJ0eShwYXRoKSkpIHtcclxuICAgICAgICAgICAgcHJldltwYXRoXSA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHByZXZbcGF0aF07XHJcbiAgICAgICAgfSwgdGFyZ2V0KVtwYXRoc1twYXRocy5sZW5ndGggLSAxXV0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGNyZWF0ZUluamVjdG9yKG1vZGFsUmVmOiBCc01vZGFsUmVmLCBpbmplY3Rvcj86IEluamVjdG9yKSB7XHJcbiAgICBjb25zdCBwcm92aWRlcnMgPSBbXHJcbiAgICAgIHsgcHJvdmlkZTogSU5TSURFX0RJQUxPR19UT0tFTiwgdXNlVmFsdWU6IHRydWUgfSxcclxuICAgICAge1xyXG4gICAgICAgIHByb3ZpZGU6IE1PREFMX1JFRiwgdXNlVmFsdWU6IGZvcndhcmRSZWYoKCkgPT4gbW9kYWxSZWYpXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgICByZXR1cm4gSW5qZWN0b3IuY3JlYXRlKHsgcHJvdmlkZXJzLCBwYXJlbnQ6IGluamVjdG9yIHx8IHRoaXMuaW5qZWN0b3IgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBEaWFsb2dTZXJ2aWNlIH07XHJcbiJdfQ==