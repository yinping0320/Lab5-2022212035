import { Injectable } from '@angular/core';
import { Repository, FrameContext } from '@farris/devkit';
import { switchMap } from 'rxjs/operators';
import { EMPTY, Observable, Subject } from 'rxjs';
import { of } from 'rxjs/observable/of';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
var POSTER = 'iframePoster';
var RECEIVER = 'iframeReceiver';
var REPOSITORY = 'repository';
// window.hash中funcId的属性名
var FUNC_ID = 'funcId=';
var TAB_ID = 'tabId=';
/**
 * ChangeItemService
 * @scope FrameComponent
 */
var ChangeItemService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function ChangeItemService(repository, frameContext, notifyService, languageService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.top = top;
        this.itemChangePoster = new Subject();
        this.itemChangeReceiver = new Subject();
    }
    ChangeItemService.prototype.init = function () {
        this.top['topMap'] = this.top['topMap'] || {};
        this.changeItem = this.changeItem.bind(this);
    };
    ChangeItemService.prototype.setBykey = function (key, value) {
        this.top['topMap'] = this.top['topMap'] || {};
        this.top['topMap'][this.tabId] = this.top['topMap'][this.tabId] || {};
        var topObject = this.top['topMap'][this.tabId];
        topObject[key] = value;
    };
    ChangeItemService.prototype.getByKey = function (key) {
        var topObject = this.top['topMap'][this.tabId] || {};
        return topObject[key];
    };
    // 建立iframe通信
    ChangeItemService.prototype.setIframePoster = function () {
        if (this.getByKey[POSTER]) {
            return;
        }
        else {
            this.setBykey(POSTER, this.itemChangePoster);
        }
    };
    ChangeItemService.prototype.getIframePoster = function () {
        this.itemChangePoster = this.getByKey(RECEIVER);
        this.setBykey(RECEIVER, this.itemChangeReceiver);
    };
    ChangeItemService.prototype.changeItem = function (type, id, parentId) {
        var _this = this;
        // 根据是否是弹出式卡片取不同的tabId
        var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        var virtualRootComponent = virtualRootFrameContext.frameComponent;
        var isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;
        if (isDialogComponent) {
            this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));
        }
        else {
            this.tabId = parentId;
        }
        this.itemChangeReceiver = this.getByKey(RECEIVER);
        return Observable.create(function (subscriber) {
            _this.getNextItemByCurrentId(id, type).subscribe(function (result) {
                subscriber.next(result);
            });
        });
    };
    // 在list初始化时调用，缓存list的repository
    ChangeItemService.prototype.setRepository = function () {
        if (window.location.hash.includes(TAB_ID)) {
            this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));
            this.setBykey(REPOSITORY, this.frameContext.repository);
            this.setIframePoster();
            this.getIframePoster();
        }
    };
    // 根据类型和id获取相邻的数据
    ChangeItemService.prototype.getNextItemByCurrentId = function (currentId, type) {
        var repository = this.getByKey(REPOSITORY);
        var _a = repository.entityCollection.paginationInfo, pageSize = _a.pageSize, pageIndex = _a.pageIndex, total = _a.total;
        var currentIdx = null;
        var list = repository.entityCollection.getAllEntities();
        list.find(function (x, idx) {
            if (x.id === currentId) {
                currentIdx = idx;
            }
        });
        // 没有在列表中找到数据，返回空
        if (currentIdx === null) {
            // 新增取消当前无数据时点上一条下一条
            if (list.length) {
                switch (type) {
                    case 'prev':
                        return of(list[list.length - 1].id);
                        break;
                    case 'next':
                        this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });
                        return EMPTY;
                }
            }
            return of(null);
        }
        var nextIdx = currentIdx;
        switch (type) {
            case 'prev':
                // 当前页第一条,且非第一页,取上一页最后一条
                if (currentIdx === 0 && pageIndex !== 1) {
                    return repository.getEntities([], [], pageSize, pageIndex - 1).pipe(switchMap(function (result) {
                        nextIdx = pageSize - 1;
                        return of(result[nextIdx].id);
                    }));
                }
                // 第一页第一条，仍返回原有数据
                else if (currentIdx === 0 && pageIndex === 1) {
                    this.notifyService.info(this.languageService.changeToFirst, { hideTitle: true });
                    return of(list[nextIdx].id);
                }
                // 不是第一条，返回上一条
                else {
                    nextIdx = currentIdx - 1;
                    return of(list[nextIdx].id);
                }
                break;
            case 'next':
                // 超过当前页
                if (currentIdx + 1 + 1 > list.length) {
                    // 且非最后一条数据,取下一页第一条数据
                    if (((pageIndex - 1) * pageSize + currentIdx + 1) < total) {
                        return repository.getEntities([], [], pageSize, pageIndex + 1).pipe(switchMap(function (result) {
                            return of(result[0].id);
                        }));
                    }
                    // 最后一条数据，仍返回原数据
                    else {
                        this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });
                        return of(list[nextIdx].id);
                    }
                }
                else {
                    nextIdx = currentIdx + 1;
                    return of(list[nextIdx].id);
                }
                break;
        }
    };
    ChangeItemService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ChangeItemService.ctorParameters = function () { return [
        { type: Repository },
        { type: FrameContext },
        { type: FormNotifyService },
        { type: LanguageService }
    ]; };
    return ChangeItemService;
}());
export { ChangeItemService };
//# sourceMappingURL=data:application/json;base64,