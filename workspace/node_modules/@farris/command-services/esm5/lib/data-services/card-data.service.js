import { Injectable, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { of, empty, EMPTY, from, Subject } from 'rxjs';
import { tap, switchMap, concatMap, last } from 'rxjs/operators';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { LanguageService } from '../languag.service';
import { FormNotifyService } from '../form-notify.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { EditStateUtil } from './utils/index';
import { FormNotifyStrategyService } from '../form-notify-strategy.service';
import { RuntimeFrameworkService } from '../rtf-service';
import { WEB_FORM_ROUTE_PARAMS_KEY } from '../types';
import { CommandService } from '../command-service';
import { ValidationService } from '../validation.service';
import { DataChangeDetectionService } from '../data-change-detection.service';
// tslint:disable: no-string-literal
// tslint:disable: max-line-length
/**
 * 卡片仓库服务
 */
var CardDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CardDataService(formMessageService, frameContext, loadingService, formNotifyService, languageService, formErrorService, runtimeFrameworkService, commandService) {
        this.formMessageService = formMessageService;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.commandService = commandService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
    }
    /**
     * 加载数据
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    CardDataService.prototype.load = function (id) {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        this.frameContext.appContext.params.set("retrieveing", true);
        this.frameContext.appContext.params.delete('queryChild');
        var get$ = this.repository.getById(id);
        return get$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 加载前
     * @param id id
     * @param transitionActionParamName 状态迁移动作参数编号
     * @returns
     */
    CardDataService.prototype.onLoading = function (transitionActionParamName) {
        var _this = this;
        var tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;
        if (!tabId) {
            return;
        }
        var skip = true;
        var listening = this.frameContext.appContext.params.get(tabId) || false;
        transitionActionParamName = transitionActionParamName || 'transitionAction';
        if (!listening) {
            this.frameContext.appContext.params.set(tabId, true);
            this.runtimeFrameworkService.getEntityParam(tabId, function (options) {
                if (skip) {
                    skip = false;
                    return;
                }
                var params = _this.parseParams(options);
                if (params && params.sync) {
                    var action_1 = params.action;
                    var id = params.id;
                    var ngCommand = _this.frameContext && _this.frameContext.viewModel && _this.frameContext.viewModel.metadatas && _this.frameContext.viewModel.metadatas[action_1];
                    var actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;
                    var formPrimaryValue = _this.frameContext.bindingData.list.currentId;
                    var formState = _this.frameContext.stateMachine.context.state;
                    var state = null;
                    var stateName = void 0;
                    if (!actionName) {
                        // 可能是用户自己配置的命令，没有状态机切换，此时不再判断状态机
                        state = formState;
                    }
                    else {
                        var ngAction = _this.frameContext && _this.frameContext.stateMachine && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas.actions && _this.frameContext.stateMachine.metadatas.actions[actionName];
                        state = ngAction && ngAction.transitTo || formState;
                        stateName = _this.frameContext && _this.frameContext.stateMachine && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas.states[state] && _this.frameContext.stateMachine.metadatas.states[state].name || _this.languageService.defaultStateName;
                        if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {
                            var key = stateName.replace('{{', '').replace('}}', '');
                            stateName = _this.frameContext.translate.transform(key, null);
                        }
                    }
                    var primaryValueChanged = formPrimaryValue !== id;
                    var stateChanged = formState !== state;
                    if (primaryValueChanged && stateChanged) {
                        // 均发生变化
                        var message = _this.languageService.dataAndStateChanged.replace(/\$1/g, stateName);
                        _this.showLoadingConfirm(message).pipe(switchMap(function () {
                            return _this.resetForm(action_1);
                        })).subscribe();
                    }
                    else if (primaryValueChanged) {
                        // 主键发生变化
                        _this.showLoadingConfirm(_this.languageService.dataChanged).pipe(switchMap(function () {
                            return _this.resetForm(action_1);
                        })).subscribe();
                    }
                    else if (stateChanged) {
                        // 状态发生变化
                        var message = _this.languageService.stateChanged.replace(/\$1/g, stateName);
                        _this.showLoadingConfirm(message).pipe(switchMap(function () {
                            return _this.resetForm(action_1);
                        })).subscribe();
                    }
                    else {
                        // 数据及状态均未发生变化
                        return of(true);
                    }
                }
            }, false);
        }
    };
    /**
     * 新增
     */
    CardDataService.prototype.add = function () {
        var _this = this;
        var lastModifiedId = this.bindingData.list.currentId;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var create$ = this.repository.create();
        return create$.pipe(tap(function () {
            EditStateUtil.setEditState(_this.frameContext, lastModifiedId);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        }));
    };
    /**
     * 级联新增
     */
    CardDataService.prototype.cascadeAdd = function () {
        var _this = this;
        var subject = new Subject();
        // 找到所有viewmodel,拿到了所有的frameContext，可能有组合表单的
        var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        // 找到当前frameContext的公共namespace
        var currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;
        // 拿到当前命令所在frame的表单的所有frameContext
        var currentFormFrameContexts = frameContexts.filter(function (context) { return context.namespace === currentNamespace; }) || [];
        var bindingPaths = [];
        if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {
            // 找到所有下级frameContext
            var childFrameContexts = currentFormFrameContexts.filter(function (context) { return context.viewModel.bindingPath && context.viewModel.bindingPath !== '/'; });
            if (childFrameContexts && childFrameContexts.length > 0) {
                var childBindingPaths_1 = childFrameContexts.map(function (context) { return context.viewModel.bindingPath; });
                childBindingPaths_1 = childBindingPaths_1.filter(function (item, index) { return childBindingPaths_1.indexOf(item) === index; });
                if (childBindingPaths_1 && childBindingPaths_1.length > 0) {
                    bindingPaths = childBindingPaths_1.map(function (path) { return path.split('/').filter(function (p) { return p; }); }).sort(function (a, b) { return a.length - b.length; });
                }
            }
        }
        this.loadingService.show();
        this.repository.create().pipe(switchMap(function (entity) {
            var rid = entity.primaryValue;
            if (bindingPaths && bindingPaths.length > 0) {
                return from(bindingPaths).pipe(concatMap(function (bindingPath) {
                    var fpath = _this.getPath(_this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);
                    return _this.repository.appendByPath(fpath);
                }));
            }
            else {
                return of(entity);
            }
        })).pipe(last()).subscribe(function () {
            _this.loadingService.hide();
            subject.next();
        }, function (error) {
            _this.loadingService.hide();
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        });
        return subject;
    };
    /**
     * 编辑（更新数据并标记编辑状态）
     */
    CardDataService.prototype.edit = function (id) {
        var _this = this;
        var update$ = this.update();
        return update$.pipe(tap(function () {
            var currentId = _this.bindingData.list.currentId;
            EditStateUtil.setEditState(_this.frameContext, currentId);
        }));
    };
    /**
     * 更新
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    CardDataService.prototype.update = function (id) {
        var _this = this;
        // 获取id
        id = this.bindingData.list.currentId;
        if (!id) {
            return empty();
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var update$ = this.repository.updateById(id);
        this.frameContext.appContext.params.set("retrieveing", true);
        return update$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.updateFailed, error);
        }));
    };
    CardDataService.prototype.updateWithoutEmpty = function () {
        // 获取id
        var id = this.bindingData.list.currentId;
        if (!id) {
            return of(null);
        }
        else {
            return this.update();
        }
    };
    /**
     * 校验当前行是否存在
     * @returns
     */
    CardDataService.prototype.checkBeforeUpdate = function () {
        var bindingList = this.frameContext.bindingData.list;
        var id = bindingList && bindingList.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        return of(true);
    };
    /**
     * 已废弃
     * @returns
     */
    CardDataService.prototype.updateWithNotify = function () {
        // 获取id
        var id = this.bindingData.list.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        else {
            return this.update();
        }
    };
    /**
     * 加载卡片数据（分页加载子表数据）
     * @deprecated 方法已废弃，请勿使用
     */
    CardDataService.prototype.loadPaged = function (filter, sort) {
        var _this = this;
        // 获取id
        var id = this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // this.frameContext.root.params.set('updateWithPaging', true);
        var update$ = of(null); //this.repository.updateEntityById(id, true);
        return update$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.updateFailed, error);
        }));
    };
    /**
     * 保存
     */
    CardDataService.prototype.save = function (successMsg) {
        var _this = this;
        // 获取当前行
        var id = this.bindingData.list.currentId;
        if (!id) {
            return of(false);
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var update$ = this.repository.updateChangesById(id);
        var save$ = this.repository.applyChangesById(id);
        var result$ = update$.pipe(
        // update$ => save$
        switchMap(function (updateResult) {
            if (updateResult === false) {
                return of(false);
            }
            else {
                return save$;
            }
        }), 
        // 隐藏loading
        tap(function () {
            // 取消新增状态
            EditStateUtil.setEditState(_this.frameContext, id);
            _this.loadingService.hideDelayLoading(loadingTimerId);
            // this.formNotifyService.info(this.languageService.saveSuccess);
            if (successMsg && successMsg.trim()) {
                var showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        var options = JSON.parse(successMsg);
                        if (options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                FormNotifyStrategyService.success(_this.formNotifyService, _this.languageService.saveSuccess);
            }
            // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.saveFailed, error);
        }));
        return result$;
    };
    // #region 取消相关方法
    /**
     * 取消（默认取消）
     */
    CardDataService.prototype.cancel = function () {
        return this.cancelWithCheck();
    };
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    CardDataService.prototype.revert = function (options) {
        return this.cancelWithoutCheck(options);
    };
    /**
     * 取消（取消前检查未保存的变更）
     * @summary
     * 1、用户误操作：只需要做个提示就可以了；
     * 2、用户有意取消：点击取消就是要放弃所有变更，这时候询问人家是否要保存或者提示存在变更有点多此一举，确认一把即可。
     * 3、用户误操作：没有变更的情况下直接给取消了，用户会产生恐慌，因为用户有时候并不确定是否有变更，应该也确认一把。
     * @todo
     * 1、由于产品部很多代码误用了该方法，依赖了没有变更的时候直接取消，现在弹窗确认框来，不太合适；
     * 2、产品部需要用cancelWithoutCheck方法代替，目前先给兼容着，待删除。
     */
    CardDataService.prototype.cancelWithCheck = function () {
        var _this = this;
        var hasChange$ = DataChangeDetectionService.hasChange(this.frameContext);
        return hasChange$.pipe(switchMap(function (changed) {
            if (!changed) {
                return _this.cancelChanges();
            }
            else {
                // 确认是否取消
                var confirm$ = _this.formMessageService.question(_this.languageService['cancelWithoutSave']);
                var result$ = confirm$.pipe(switchMap(function (ifCancel) {
                    if (ifCancel === false) {
                        return EMPTY;
                    }
                    return _this.cancelChanges();
                }));
                return result$;
            }
        }));
    };
    /**
     * 取消（直接取消，不执行检查）
     */
    CardDataService.prototype.cancelWithoutCheck = function (options) {
        return this.cancelChanges(options);
    };
    /**
     * 取消
     */
    CardDataService.prototype.cancelChanges = function (options) {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var cancel$ = this.repository.cancelChanges(options);
        return cancel$.pipe(tap(function () {
            EditStateUtil.setEditState(_this.frameContext, '');
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.cancelFailed, error);
        }));
    };
    // #endregion
    /**
     * 重新加载（仅供卡片取消后重新加载数据，其他场景请勿使用）
     */
    CardDataService.prototype.reload = function () {
        var isAdd = EditStateUtil.getAddState(this.frameContext);
        var id;
        if (isAdd === true) {
            id = EditStateUtil.getLastModifiedId(this.frameContext);
        }
        else {
            id = this.bindingData.list.currentId;
        }
        if (!id) {
            this.repository.entityCollection.loadEntities([]);
            return;
        }
        return this.load(id);
    };
    CardDataService.prototype.getPath = function (viewModel, bindingPath, rid) {
        var path = '/' + rid;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    CardDataService.prototype.resetForm = function (action) {
        var _this = this;
        var validationService = this.frameContext.injector.get(ValidationService, null);
        return this.frameContext.repository.cancelChanges().pipe(switchMap(function () { return _this.commandService.execute(action).pipe(switchMap(function () {
            return validationService && validationService.resetValidation() || of(null);
        })); }));
    };
    CardDataService.prototype.parseParams = function (options) {
        if (options && Object.prototype.toString.call(options) === "[object Map]" /* map */) {
            var params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);
            if (params && typeof params === 'string') {
                params = decodeURIComponent(params);
                if (params.startsWith('{') && params.endsWith('}')) {
                    params = JSON.parse(params);
                }
                return {
                    action: params.action,
                    id: params.idToView || params.idToEdit || params.id,
                    sync: params.sync || false
                };
            }
        }
        return null;
    };
    CardDataService.prototype.showLoadingConfirm = function (message) {
        return this.formMessageService.confirm(message).pipe(switchMap(function (result) {
            if (result === true) {
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    };
    CardDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CardDataService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: FrameContext },
        { type: FormLoadingService },
        { type: FormNotifyService },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: FormErrorService },
        { type: RuntimeFrameworkService },
        { type: CommandService }
    ]; };
    return CardDataService;
}());
export { CardDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9jYXJkLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQXVCLFlBQVksRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBRTlFLE9BQU8sRUFBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBZSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBdUIsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFZLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztB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cEMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ2xELE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUM3QjtnQkFDRCxPQUFPO29CQUNMLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtvQkFDckIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsRUFBRTtvQkFDbkQsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQUksS0FBSztpQkFDM0IsQ0FBQzthQUNIO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTyw0Q0FBa0IsR0FBMUIsVUFBMkIsT0FBZTtRQUN4QyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNsRCxTQUFTLENBQUMsVUFBQyxNQUFlO1lBQ3hCLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOztnQkEvZkYsVUFBVTs7OztnQkFkRixrQkFBa0I7Z0JBUEcsWUFBWTtnQkFJakMsa0JBQWtCO2dCQUVsQixpQkFBaUI7Z0JBRGpCLGVBQWUsdUJBcUNuQixRQUFRO2dCQWxDSixnQkFBZ0I7Z0JBR2hCLHVCQUF1QjtnQkFFdkIsY0FBYzs7SUF3Z0J2QixzQkFBQztDQUFBLEFBaGdCRCxJQWdnQkM7QUFDRCxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFbnRpdHksIEJpbmRpbmdEYXRhLCBGcmFtZUNvbnRleHQsIFZpZXdNb2RlbCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSwgQmVmUmVwb3NpdG9yeVV0aWwgfSBmcm9tICdAZmFycmlzL2JlZic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBlbXB0eSwgRU1QVFksIGNvbmNhdCwgemlwLCBmcm9tLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCwgc3dpdGNoTWFwLCBjb25jYXRNYXAsIGNvbmNhdEFsbCwgdGFrZUxhc3QsIGxhc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZvcm1Mb2FkaW5nU2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbG9hZGluZy9mb3JtLWxvYWRpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1Ob3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS1ub3RpZnkuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1NZXNzYWdlU2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbWVzc2FnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybUVycm9yU2VydmljZSB9IGZyb20gJy4uL2Vycm9yL2Zvcm0tZXJyb3Iuc2VydmljZSc7XHJcbmltcG9ydCB7IEVkaXRTdGF0ZVV0aWwgfSBmcm9tICcuL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgRm9ybU5vdGlmeVN0cmF0ZWd5U2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbm90aWZ5LXN0cmF0ZWd5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSdW50aW1lRnJhbWV3b3JrU2VydmljZSB9IGZyb20gJy4uL3J0Zi1zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0YVR5cGUsIFdFQl9GT1JNX1JPVVRFX1BBUkFNU19LRVkgfSBmcm9tICcuLi90eXBlcyc7XHJcbmltcG9ydCB7IENvbW1hbmRTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbWFuZC1zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tICcuLi92YWxpZGF0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbmdlRGV0ZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL2RhdGEtY2hhbmdlLWRldGVjdGlvbi5zZXJ2aWNlJztcclxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbi8vIHRzbGludDpkaXNhYmxlOiBtYXgtbGluZS1sZW5ndGhcclxuLyoqXHJcbiAqIOWNoeeJh+S7k+W6k+acjeWKoVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDYXJkRGF0YVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPku5PlupNcclxuICAgKi9cclxuICBwcml2YXRlIHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PjtcclxuXHJcbiAgLyoqXHJcbiAgICog57uR5a6a5pWw5o2uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGE7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBmb3JtTWVzc2FnZVNlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBwcml2YXRlIGxvYWRpbmdTZXJ2aWNlOiBGb3JtTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZvcm1Ob3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZvcm1FcnJvclNlcnZpY2U6IEZvcm1FcnJvclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlOiBSdW50aW1lRnJhbWV3b3JrU2VydmljZSxcclxuICAgIHByaXZhdGUgY29tbWFuZFNlcnZpY2U6IENvbW1hbmRTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBpZiAoIWxhbmd1YWdlU2VydmljZSkge1xyXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliqDovb3mlbDmja5cclxuICAgKiBAcGFyYW0gaWQg5Li75a6e5L2TaWRcclxuICAgKiBAcGFyYW0gZW5hYmxlQ2hpbGRyZW5QYWdpbmF0aW9uIOWQr+eUqOWtkOihqOWIhumhtVxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0eT4ge1xyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LnBhcmFtcy5zZXQoXCJyZXRyaWV2ZWluZ1wiLCB0cnVlKTtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQucGFyYW1zLmRlbGV0ZSgncXVlcnlDaGlsZCcpO1xyXG4gICAgY29uc3QgZ2V0JCA9IHRoaXMucmVwb3NpdG9yeS5nZXRCeUlkKGlkKTtcclxuICAgIHJldHVybiBnZXQkLnBpcGUoXHJcbiAgICAgIHRhcChcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmxvYWRGYWlsZWQsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veWJjVxyXG4gICAqIEBwYXJhbSBpZCBpZFxyXG4gICAqIEBwYXJhbSB0cmFuc2l0aW9uQWN0aW9uUGFyYW1OYW1lIOeKtuaAgei/geenu+WKqOS9nOWPguaVsOe8luWPt1xyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHVibGljIG9uTG9hZGluZyh0cmFuc2l0aW9uQWN0aW9uUGFyYW1OYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHRhYklkID0gdGhpcy5ydW50aW1lRnJhbWV3b3JrU2VydmljZSAmJiB0aGlzLnJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlLnRhYklkIHx8IG51bGw7XHJcbiAgICBpZiAoIXRhYklkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBza2lwID0gdHJ1ZTtcclxuICAgIGNvbnN0IGxpc3RlbmluZyA9IHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQucGFyYW1zLmdldCh0YWJJZCkgfHwgZmFsc2U7XHJcbiAgICB0cmFuc2l0aW9uQWN0aW9uUGFyYW1OYW1lID0gdHJhbnNpdGlvbkFjdGlvblBhcmFtTmFtZSB8fCAndHJhbnNpdGlvbkFjdGlvbic7XHJcbiAgICBpZiAoIWxpc3RlbmluZykge1xyXG4gICAgICB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LnBhcmFtcy5zZXQodGFiSWQsIHRydWUpO1xyXG4gICAgICB0aGlzLnJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlLmdldEVudGl0eVBhcmFtKHRhYklkLCAob3B0aW9uczogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHNraXApIHtcclxuICAgICAgICAgIHNraXAgPSBmYWxzZTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5wYXJzZVBhcmFtcyhvcHRpb25zKTtcclxuICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5zeW5jKSB7XHJcbiAgICAgICAgICBjb25zdCBhY3Rpb24gPSBwYXJhbXMuYWN0aW9uO1xyXG4gICAgICAgICAgY29uc3QgaWQgPSBwYXJhbXMuaWQ7XHJcbiAgICAgICAgICBjb25zdCBuZ0NvbW1hbmQgPSB0aGlzLmZyYW1lQ29udGV4dCAmJiB0aGlzLmZyYW1lQ29udGV4dC52aWV3TW9kZWwgJiYgdGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLm1ldGFkYXRhcyAmJiB0aGlzLmZyYW1lQ29udGV4dC52aWV3TW9kZWwubWV0YWRhdGFzW2FjdGlvbl07XHJcbiAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gbmdDb21tYW5kLnBhcmFtcyAmJiBuZ0NvbW1hbmQucGFyYW1zW3RyYW5zaXRpb25BY3Rpb25QYXJhbU5hbWVdIHx8IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBmb3JtUHJpbWFyeVZhbHVlID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgICAgICBjb25zdCBmb3JtU3RhdGUgPSB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUuY29udGV4dC5zdGF0ZTtcclxuICAgICAgICAgIGxldCBzdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICBsZXQgc3RhdGVOYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgICBpZiAoIWFjdGlvbk5hbWUpIHtcclxuICAgICAgICAgICAgLy8g5Y+v6IO95piv55So5oi36Ieq5bex6YWN572u55qE5ZG95Luk77yM5rKh5pyJ54q25oCB5py65YiH5o2i77yM5q2k5pe25LiN5YaN5Yik5pat54q25oCB5py6XHJcbiAgICAgICAgICAgIHN0YXRlID0gZm9ybVN0YXRlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5nQWN0aW9uID0gdGhpcy5mcmFtZUNvbnRleHQgJiYgdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lICYmIHRoaXMuZnJhbWVDb250ZXh0LnN0YXRlTWFjaGluZS5tZXRhZGF0YXMgJiYgdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lLm1ldGFkYXRhcy5hY3Rpb25zICYmIHRoaXMuZnJhbWVDb250ZXh0LnN0YXRlTWFjaGluZS5tZXRhZGF0YXMuYWN0aW9uc1thY3Rpb25OYW1lXTtcclxuICAgICAgICAgICAgc3RhdGUgPSBuZ0FjdGlvbiAmJiBuZ0FjdGlvbi50cmFuc2l0VG8gfHwgZm9ybVN0YXRlO1xyXG4gICAgICAgICAgICBzdGF0ZU5hbWUgPSB0aGlzLmZyYW1lQ29udGV4dCAmJiB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUgJiYgdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lLm1ldGFkYXRhcyAmJiB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUubWV0YWRhdGFzICYmIHRoaXMuZnJhbWVDb250ZXh0LnN0YXRlTWFjaGluZS5tZXRhZGF0YXMuc3RhdGVzW3N0YXRlXSAmJiB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUubWV0YWRhdGFzLnN0YXRlc1tzdGF0ZV0ubmFtZSB8fCB0aGlzLmxhbmd1YWdlU2VydmljZS5kZWZhdWx0U3RhdGVOYW1lO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVOYW1lICYmIHN0YXRlTmFtZS5zdGFydHNXaXRoKCd7eycpICYmIHN0YXRlTmFtZS5lbmRzV2l0aCgnfX0nKSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlTmFtZS5yZXBsYWNlKCd7eycsICcnKS5yZXBsYWNlKCd9fScsICcnKTtcclxuICAgICAgICAgICAgICBzdGF0ZU5hbWUgPSB0aGlzLmZyYW1lQ29udGV4dC50cmFuc2xhdGUudHJhbnNmb3JtKGtleSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IHByaW1hcnlWYWx1ZUNoYW5nZWQgPSBmb3JtUHJpbWFyeVZhbHVlICE9PSBpZDtcclxuICAgICAgICAgIGNvbnN0IHN0YXRlQ2hhbmdlZCA9IGZvcm1TdGF0ZSAhPT0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgaWYgKHByaW1hcnlWYWx1ZUNoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIC8vIOWdh+WPkeeUn+WPmOWMllxyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZGF0YUFuZFN0YXRlQ2hhbmdlZC5yZXBsYWNlKC9cXCQxL2csIHN0YXRlTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmdDb25maXJtKG1lc3NhZ2UpLnBpcGUoc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNldEZvcm0oYWN0aW9uKTtcclxuICAgICAgICAgICAgfSkpLnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChwcmltYXJ5VmFsdWVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIC8vIOS4u+mUruWPkeeUn+WPmOWMllxyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nQ29uZmlybSh0aGlzLmxhbmd1YWdlU2VydmljZS5kYXRhQ2hhbmdlZCkucGlwZShzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc2V0Rm9ybShhY3Rpb24pO1xyXG4gICAgICAgICAgICB9KSkuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAvLyDnirbmgIHlj5HnlJ/lj5jljJZcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnN0YXRlQ2hhbmdlZC5yZXBsYWNlKC9cXCQxL2csIHN0YXRlTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmdDb25maXJtKG1lc3NhZ2UpLnBpcGUoc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNldEZvcm0oYWN0aW9uKTtcclxuICAgICAgICAgICAgfSkpLnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5pWw5o2u5Y+K54q25oCB5Z2H5pyq5Y+R55Sf5Y+Y5YyWXHJcbiAgICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWsOWinlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGxhc3RNb2RpZmllZElkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDtcclxuXHJcbiAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcclxuICAgIGNvbnN0IGNyZWF0ZSQgPSB0aGlzLnJlcG9zaXRvcnkuY3JlYXRlKCk7XHJcbiAgICByZXR1cm4gY3JlYXRlJC5waXBlKFxyXG4gICAgICB0YXAoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgRWRpdFN0YXRlVXRpbC5zZXRFZGl0U3RhdGUodGhpcy5mcmFtZUNvbnRleHQsIGxhc3RNb2RpZmllZElkKTtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuYWRkRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDnuqfogZTmlrDlop5cclxuICAgKi9cclxuICBwdWJsaWMgY2FzY2FkZUFkZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICAgIC8vIOaJvuWIsOaJgOaciXZpZXdtb2RlbCzmi7/liLDkuobmiYDmnInnmoRmcmFtZUNvbnRleHTvvIzlj6/og73mnInnu4TlkIjooajljZXnmoRcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0cygpO1xyXG4gICAgLy8g5om+5Yiw5b2T5YmNZnJhbWVDb250ZXh055qE5YWs5YWxbmFtZXNwYWNlXHJcbiAgICBjb25zdCBjdXJyZW50TmFtZXNwYWNlID0gdGhpcy5mcmFtZUNvbnRleHQuZ2V0VmlydHVhbFJvb3RGcmFtZUNvbnRleHQoKS5uYW1lc3BhY2U7XHJcbiAgICAvLyDmi7/liLDlvZPliY3lkb3ku6TmiYDlnKhmcmFtZeeahOihqOWNleeahOaJgOaciWZyYW1lQ29udGV4dFxyXG4gICAgY29uc3QgY3VycmVudEZvcm1GcmFtZUNvbnRleHRzID0gZnJhbWVDb250ZXh0cy5maWx0ZXIoKGNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4gY29udGV4dC5uYW1lc3BhY2UgPT09IGN1cnJlbnROYW1lc3BhY2UpIHx8IFtdO1xyXG4gICAgbGV0IGJpbmRpbmdQYXRocyA9IFtdO1xyXG4gICAgaWYgKGN1cnJlbnRGb3JtRnJhbWVDb250ZXh0cyAmJiBjdXJyZW50Rm9ybUZyYW1lQ29udGV4dHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyDmib7liLDmiYDmnInkuIvnuqdmcmFtZUNvbnRleHRcclxuICAgICAgY29uc3QgY2hpbGRGcmFtZUNvbnRleHRzID0gY3VycmVudEZvcm1GcmFtZUNvbnRleHRzLmZpbHRlcigoY29udGV4dDogRnJhbWVDb250ZXh0KSA9PiBjb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCAmJiBjb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCAhPT0gJy8nKTtcclxuICAgICAgaWYgKGNoaWxkRnJhbWVDb250ZXh0cyAmJiBjaGlsZEZyYW1lQ29udGV4dHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBjaGlsZEJpbmRpbmdQYXRocyA9IGNoaWxkRnJhbWVDb250ZXh0cy5tYXAoKGNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4gY29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGgpO1xyXG4gICAgICAgIGNoaWxkQmluZGluZ1BhdGhzID0gY2hpbGRCaW5kaW5nUGF0aHMuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4gY2hpbGRCaW5kaW5nUGF0aHMuaW5kZXhPZihpdGVtKSA9PT0gaW5kZXgpO1xyXG4gICAgICAgIGlmIChjaGlsZEJpbmRpbmdQYXRocyAmJiBjaGlsZEJpbmRpbmdQYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBiaW5kaW5nUGF0aHMgPSBjaGlsZEJpbmRpbmdQYXRocy5tYXAoKHBhdGgpID0+IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKHApID0+IHApKS5zb3J0KChhLCBiKSA9PiBhLmxlbmd0aCAtIGIubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5LmNyZWF0ZSgpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoZW50aXR5OiBFbnRpdHkpID0+IHtcclxuICAgICAgICBjb25zdCByaWQgPSBlbnRpdHkucHJpbWFyeVZhbHVlO1xyXG4gICAgICAgIGlmIChiaW5kaW5nUGF0aHMgJiYgYmluZGluZ1BhdGhzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHJldHVybiBmcm9tKGJpbmRpbmdQYXRocykucGlwZShcclxuICAgICAgICAgICAgY29uY2F0TWFwKChiaW5kaW5nUGF0aDogQXJyYXk8YW55PikgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGZwYXRoID0gdGhpcy5nZXRQYXRoKHRoaXMuZnJhbWVDb250ZXh0LnZpZXdNb2RlbCwgJy8nICsgYmluZGluZ1BhdGguam9pbignLycpLCByaWQpO1xyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuYXBwZW5kQnlQYXRoKGZwYXRoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBvZihlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICkucGlwZShsYXN0KCkpLnN1YnNjcmliZShcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIHN1YmplY3QubmV4dCgpO1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuYWRkRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gICAgcmV0dXJuIHN1YmplY3Q7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnvJbovpHvvIjmm7TmlrDmlbDmja7lubbmoIforrDnvJbovpHnirbmgIHvvIlcclxuICAgKi9cclxuICBwdWJsaWMgZWRpdChpZD86IHN0cmluZyk6IE9ic2VydmFibGU8RW50aXR5PiB7XHJcbiAgICBjb25zdCB1cGRhdGUkID0gdGhpcy51cGRhdGUoKTtcclxuICAgIHJldHVybiB1cGRhdGUkLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudElkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZFxyXG4gICAgICAgIEVkaXRTdGF0ZVV0aWwuc2V0RWRpdFN0YXRlKHRoaXMuZnJhbWVDb250ZXh0LCBjdXJyZW50SWQpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOabtOaWsFxyXG4gICAqIEBwYXJhbSBpZCDkuLvlrp7kvZNpZFxyXG4gICAqIEBwYXJhbSBlbmFibGVDaGlsZHJlblBhZ2luYXRpb24g5ZCv55So5a2Q6KGo5YiG6aG1XHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZShpZD86IHN0cmluZyk6IE9ic2VydmFibGU8RW50aXR5PiB7XHJcbiAgICAvLyDojrflj5ZpZFxyXG4gICAgaWQgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkIGFzIHN0cmluZztcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcclxuICAgIGNvbnN0IHVwZGF0ZSQgPSB0aGlzLnJlcG9zaXRvcnkudXBkYXRlQnlJZChpZCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LnBhcmFtcy5zZXQoXCJyZXRyaWV2ZWluZ1wiLCB0cnVlKTtcclxuICAgIHJldHVybiB1cGRhdGUkLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgfSxcclxuICAgICAgICAoZXJyb3IpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnVwZGF0ZUZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbiAgcHVibGljIHVwZGF0ZVdpdGhvdXRFbXB0eSgpIHtcclxuICAgIC8vIOiOt+WPlmlkXHJcbiAgICBjb25zdCBpZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qCh6aqM5b2T5YmN6KGM5piv5ZCm5a2Y5ZyoXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgY2hlY2tCZWZvcmVVcGRhdGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3Q7XHJcbiAgICBjb25zdCBpZCA9IGJpbmRpbmdMaXN0ICYmIGJpbmRpbmdMaXN0LmN1cnJlbnRJZDtcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vRGF0YUV4aXN0LCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlt7Llup/lvINcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVXaXRoTm90aWZ5KCkge1xyXG4gICAgLy8g6I635Y+WaWRcclxuICAgIGNvbnN0IGlkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCBhcyBzdHJpbmc7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5ub0RhdGFFeGlzdCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDliqDovb3ljaHniYfmlbDmja7vvIjliIbpobXliqDovb3lrZDooajmlbDmja7vvIlcclxuICAgKiBAZGVwcmVjYXRlZCDmlrnms5Xlt7Llup/lvIPvvIzor7fli7/kvb/nlKhcclxuICAgKi9cclxuICBwdWJsaWMgbG9hZFBhZ2VkKGZpbHRlcj86IHN0cmluZywgc29ydD86IHN0cmluZykge1xyXG4gICAgLy8g6I635Y+WaWRcclxuICAgIGNvbnN0IGlkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCBhcyBzdHJpbmc7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcclxuICAgIC8vIHRoaXMuZnJhbWVDb250ZXh0LnJvb3QucGFyYW1zLnNldCgndXBkYXRlV2l0aFBhZ2luZycsIHRydWUpO1xyXG4gICAgY29uc3QgdXBkYXRlJCA9IG9mKG51bGwpOy8vdGhpcy5yZXBvc2l0b3J5LnVwZGF0ZUVudGl0eUJ5SWQoaWQsIHRydWUpO1xyXG4gICAgcmV0dXJuIHVwZGF0ZSQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICB9LFxyXG4gICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UudXBkYXRlRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDkv53lrZhcclxuICAgKi9cclxuICBwdWJsaWMgc2F2ZShzdWNjZXNzTXNnPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAvLyDojrflj5blvZPliY3ooYxcclxuICAgIGNvbnN0IGlkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCBhcyBzdHJpbmc7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCB1cGRhdGUkID0gdGhpcy5yZXBvc2l0b3J5LnVwZGF0ZUNoYW5nZXNCeUlkKGlkKTtcclxuICAgIGNvbnN0IHNhdmUkID0gdGhpcy5yZXBvc2l0b3J5LmFwcGx5Q2hhbmdlc0J5SWQoaWQpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHVwZGF0ZSQucGlwZShcclxuXHJcbiAgICAgIC8vIHVwZGF0ZSQgPT4gc2F2ZSRcclxuICAgICAgc3dpdGNoTWFwKCh1cGRhdGVSZXN1bHQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHNhdmUkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSksXHJcblxyXG4gICAgICAvLyDpmpDol49sb2FkaW5nXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIOWPlua2iOaWsOWinueKtuaAgVxyXG4gICAgICAgIEVkaXRTdGF0ZVV0aWwuc2V0RWRpdFN0YXRlKHRoaXMuZnJhbWVDb250ZXh0LCBpZCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAvLyB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLmluZm8odGhpcy5sYW5ndWFnZVNlcnZpY2Uuc2F2ZVN1Y2Nlc3MpO1xyXG4gICAgICAgIGlmIChzdWNjZXNzTXNnICYmIHN1Y2Nlc3NNc2cudHJpbSgpKSB7XHJcbiAgICAgICAgICBsZXQgc2hvd01lc3NhZ2U6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgaWYgKHN1Y2Nlc3NNc2cuc3RhcnRzV2l0aCgneycpICYmIHN1Y2Nlc3NNc2cuZW5kc1dpdGgoJ30nKSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBKU09OLnBhcnNlKHN1Y2Nlc3NNc2cpO1xyXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dNZXNzYWdlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgc2hvd01lc3NhZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggeyB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc2hvd01lc3NhZ2UgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2VzcyhzdWNjZXNzTXNnLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgRm9ybU5vdGlmeVN0cmF0ZWd5U2VydmljZS5zdWNjZXNzKHRoaXMuZm9ybU5vdGlmeVNlcnZpY2UsIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNhdmVTdWNjZXNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9ybU5vdGlmeVN0cmF0ZWd5U2VydmljZS5zdWNjZXNzKHRoaXMuZm9ybU5vdGlmeVNlcnZpY2UsIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNhdmVTdWNjZXNzKTtcclxuICAgICAgfSxcclxuICAgICAgICAoZXJyb3IpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNhdmVGYWlsZWQsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gI3JlZ2lvbiDlj5bmtojnm7jlhbPmlrnms5VcclxuXHJcbiAgLyoqXHJcbiAgICog5Y+W5raI77yI6buY6K6k5Y+W5raI77yJXHJcbiAgICovXHJcbiAgcHVibGljIGNhbmNlbCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FuY2VsV2l0aENoZWNrKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov5jljp/lj5jmm7Tpm4ZcclxuICAgKiBAZGVzY3JpcHRpb24g5LiN5bim5Y+Y5pu05qOA5rWL5o+Q56S6XHJcbiAgICovXHJcbiAgcHVibGljIHJldmVydChvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNhbmNlbFdpdGhvdXRDaGVjayhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPlua2iO+8iOWPlua2iOWJjeajgOafpeacquS/neWtmOeahOWPmOabtO+8iVxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgeeUqOaIt+ivr+aTjeS9nO+8muWPqumcgOimgeWBmuS4quaPkOekuuWwseWPr+S7peS6hu+8m1xyXG4gICAqIDLjgIHnlKjmiLfmnInmhI/lj5bmtojvvJrngrnlh7vlj5bmtojlsLHmmK/opoHmlL7lvIPmiYDmnInlj5jmm7TvvIzov5nml7blgJnor6Lpl67kurrlrrbmmK/lkKbopoHkv53lrZjmiJbogIXmj5DnpLrlrZjlnKjlj5jmm7TmnInngrnlpJrmraTkuIDkuL7vvIznoa7orqTkuIDmiorljbPlj6/jgIJcclxuICAgKiAz44CB55So5oi36K+v5pON5L2c77ya5rKh5pyJ5Y+Y5pu055qE5oOF5Ya15LiL55u05o6l57uZ5Y+W5raI5LqG77yM55So5oi35Lya5Lqn55Sf5oGQ5oWM77yM5Zug5Li655So5oi35pyJ5pe25YCZ5bm25LiN56Gu5a6a5piv5ZCm5pyJ5Y+Y5pu077yM5bqU6K+l5Lmf56Gu6K6k5LiA5oqK44CCXHJcbiAgICogQHRvZG9cclxuICAgKiAx44CB55Sx5LqO5Lqn5ZOB6YOo5b6I5aSa5Luj56CB6K+v55So5LqG6K+l5pa55rOV77yM5L6d6LWW5LqG5rKh5pyJ5Y+Y5pu055qE5pe25YCZ55u05o6l5Y+W5raI77yM546w5Zyo5by556qX56Gu6K6k5qGG5p2l77yM5LiN5aSq5ZCI6YCC77ybXHJcbiAgICogMuOAgeS6p+WTgemDqOmcgOimgeeUqGNhbmNlbFdpdGhvdXRDaGVja+aWueazleS7o+abv++8jOebruWJjeWFiOe7meWFvOWuueedgO+8jOW+heWIoOmZpOOAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYW5jZWxXaXRoQ2hlY2soKSB7XHJcbiAgICBjb25zdCBoYXNDaGFuZ2UkID0gRGF0YUNoYW5nZURldGVjdGlvblNlcnZpY2UuaGFzQ2hhbmdlKHRoaXMuZnJhbWVDb250ZXh0KTtcclxuICAgIHJldHVybiBoYXNDaGFuZ2UkLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoY2hhbmdlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmICghY2hhbmdlZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsQ2hhbmdlcygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyDnoa7orqTmmK/lkKblj5bmtohcclxuICAgICAgICAgIGNvbnN0IGNvbmZpcm0kID0gdGhpcy5mb3JtTWVzc2FnZVNlcnZpY2UucXVlc3Rpb24odGhpcy5sYW5ndWFnZVNlcnZpY2VbJ2NhbmNlbFdpdGhvdXRTYXZlJ10pO1xyXG4gICAgICAgICAgY29uc3QgcmVzdWx0JCA9IGNvbmZpcm0kLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoaWZDYW5jZWw6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoaWZDYW5jZWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbmNlbENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0JDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+W5raI77yI55u05o6l5Y+W5raI77yM5LiN5omn6KGM5qOA5p+l77yJXHJcbiAgICovXHJcbiAgcHVibGljIGNhbmNlbFdpdGhvdXRDaGVjayhvcHRpb25zPzogYW55KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW5jZWxDaGFuZ2VzKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+W5raIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjYW5jZWxDaGFuZ2VzKG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCBjYW5jZWwkID0gdGhpcy5yZXBvc2l0b3J5LmNhbmNlbENoYW5nZXMob3B0aW9ucyk7XHJcbiAgICByZXR1cm4gY2FuY2VsJC5waXBlKFxyXG4gICAgICB0YXAoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgRWRpdFN0YXRlVXRpbC5zZXRFZGl0U3RhdGUodGhpcy5mcmFtZUNvbnRleHQsICcnKTtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoZXJyb3IpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNhbmNlbEZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vICNlbmRyZWdpb25cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOmHjeaWsOWKoOi9ve+8iOS7heS+m+WNoeeJh+WPlua2iOWQjumHjeaWsOWKoOi9veaVsOaNru+8jOWFtuS7luWcuuaZr+ivt+WLv+S9v+eUqO+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxvYWQoKSB7XHJcbiAgICBjb25zdCBpc0FkZCA9IEVkaXRTdGF0ZVV0aWwuZ2V0QWRkU3RhdGUodGhpcy5mcmFtZUNvbnRleHQpO1xyXG4gICAgbGV0IGlkO1xyXG4gICAgaWYgKGlzQWRkID09PSB0cnVlKSB7XHJcbiAgICAgIGlkID0gRWRpdFN0YXRlVXRpbC5nZXRMYXN0TW9kaWZpZWRJZCh0aGlzLmZyYW1lQ29udGV4dCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaWQpIHtcclxuICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ubG9hZEVudGl0aWVzKFtdKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmxvYWQoaWQpO1xyXG4gIH1cclxuICBwcml2YXRlIGdldFBhdGgodmlld01vZGVsOiBWaWV3TW9kZWwsIGJpbmRpbmdQYXRoOiBzdHJpbmcsIHJpZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCBwYXRoID0gJy8nICsgcmlkO1xyXG5cclxuICAgIGNvbnN0IHN1YlBhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKTtcclxuICAgIGlmIChzdWJQYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIGVnOmJpbmRpbmdQYXRo5b2i5aaCL2VkdXMvZ3JhZGVzLHNwbGl05ZCO5pivWycnLCAnZWR1cycsICdncmFkZXMnXVxyXG4gICAgICAvLyDlm6DmraRpbmRleOS7jjHlvIDlp4tcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IHN1YlBhdGhzLmxlbmd0aCAtIDE7IGluZGV4KyspIHtcclxuICAgICAgICBjb25zdCBzdWJQYXRoID0gc3ViUGF0aHNbaW5kZXhdO1xyXG4gICAgICAgIGNvbnN0IHN1YkRhdGEgPSB2aWV3TW9kZWwuYmluZGluZ0RhdGFbc3ViUGF0aF07XHJcbiAgICAgICAgaWYgKCFzdWJEYXRhIHx8ICFzdWJEYXRhLmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3IoYOiOt+WPluWtkOihqOWujOaVtOi3r+W+hOWHuumUme+8jOaJvuS4jeWIsCR7c3ViRGF0YX3lr7nlupTnmoTlrZDooajvvIzmiJblr7nlupTlrZDooajmsqHmnInlvZPliY3ooYzjgIJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0aCArPSBgLyR7c3ViUGF0aH0vJHtzdWJEYXRhLmN1cnJlbnRJZH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXRoICs9ICcvJyArIHN1YlBhdGhzW3N1YlBhdGhzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxuICBwcml2YXRlIHJlc2V0Rm9ybShhY3Rpb246IHN0cmluZykge1xyXG4gICAgY29uc3QgdmFsaWRhdGlvblNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8VmFsaWRhdGlvblNlcnZpY2U+KFZhbGlkYXRpb25TZXJ2aWNlLCBudWxsKTtcclxuICAgIHJldHVybiB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmNhbmNlbENoYW5nZXMoKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5jb21tYW5kU2VydmljZS5leGVjdXRlKGFjdGlvbikucGlwZShzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uU2VydmljZSAmJiB2YWxpZGF0aW9uU2VydmljZS5yZXNldFZhbGlkYXRpb24oKSB8fCBvZihudWxsKTtcclxuICAgICAgfSkpKSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgcGFyc2VQYXJhbXMob3B0aW9uczogYW55KTogeyBhY3Rpb246IHN0cmluZywgaWQ6IHN0cmluZywgc3luYzogYm9vbGVhbiB9IHwgbnVsbCB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob3B0aW9ucykgPT09IERhdGFUeXBlLm1hcCkge1xyXG4gICAgICBsZXQgcGFyYW1zID0gb3B0aW9ucy5nZXQoV0VCX0ZPUk1fUk9VVEVfUEFSQU1TX0tFWSk7XHJcbiAgICAgIGlmIChwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBwYXJhbXMgPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW1zKTtcclxuICAgICAgICBpZiAocGFyYW1zLnN0YXJ0c1dpdGgoJ3snKSAmJiBwYXJhbXMuZW5kc1dpdGgoJ30nKSkge1xyXG4gICAgICAgICAgcGFyYW1zID0gSlNPTi5wYXJzZShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgYWN0aW9uOiBwYXJhbXMuYWN0aW9uLFxyXG4gICAgICAgICAgaWQ6IHBhcmFtcy5pZFRvVmlldyB8fCBwYXJhbXMuaWRUb0VkaXQgfHwgcGFyYW1zLmlkLFxyXG4gICAgICAgICAgc3luYzogcGFyYW1zLnN5bmMgfHwgZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgcHJpdmF0ZSBzaG93TG9hZGluZ0NvbmZpcm0obWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtTWVzc2FnZVNlcnZpY2UuY29uZmlybShtZXNzYWdlKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKHJlc3VsdDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IENhcmREYXRhU2VydmljZSB9O1xyXG4iXX0=