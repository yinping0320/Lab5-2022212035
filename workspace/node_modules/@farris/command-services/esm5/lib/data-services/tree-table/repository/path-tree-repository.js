import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { FieldMetadataUtil } from '@farris/devkit';
/**
 * 路径树仓库
 */
var PathTreeRepository = /** @class */ (function () {
    function PathTreeRepository() {
    }
    /**
     * 添加兄弟节点
     */
    PathTreeRepository.prototype.addSibling = function (repository, id) {
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addSiblingUri = baseUri + "/service/pathhierarchycreatesibling";
        var body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    };
    /**
     * 添加兄弟节点
     */
    PathTreeRepository.prototype.addChild = function (repository, parentId) {
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addChildUri = baseUri + "/service/pathhierarchycreatechildlayer";
        var body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    };
    /**
     * 添加子表兄弟节点
     */
    PathTreeRepository.prototype.addSubSibling = function (repository, nodes, ids) {
        var _this = this;
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addSubSiblingUri = baseUri + "/service/childnodepathhierarchycreatesibling";
        var body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var path = _this.getPaths(nodes, ids);
            var entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    };
    /**
    * 添加子表子节点
    */
    PathTreeRepository.prototype.addSubChild = function (repository, nodes, ids) {
        var _this = this;
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addSubChildUri = baseUri + "/service/childnodepathhierarchycreatechildlayer";
        var body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var path = _this.getPaths(nodes, ids);
            var entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    };
    PathTreeRepository.prototype.getPaths = function (nodes, ids) {
        var paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (var i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + ("/" + ids[i]);
                    paths = paths + ("/" + nodes[i] + "s");
                }
            }
        }
        return paths;
    };
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    PathTreeRepository.prototype.loadByParentId = function (repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow, pagination, frameContext, reload) {
        var _this = this;
        if (frozenCurrentRow === void 0) { frozenCurrentRow = false; }
        if (reload === void 0) { reload = false; }
        var localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        var restService = repository.restService;
        var parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        var originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        var filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        var isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        var entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        var requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map(function (responseInfo) {
            var paginationInfo = _this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set("_NODE_" + parentId + "_PAGINATION_INFO_", paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            _this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            var listData = responseInfo.returnValue.result;
            var entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
            }
            else {
                repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
            }
            return entities;
        }));
    };
    // tslint:disable-next-line: max-line-length
    PathTreeRepository.prototype.loadFullTree = function (repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        var _this = this;
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var queryUrl = baseUri + "/service/parentidfulltreequery";
        var pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        var entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        var body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType: fullTreeType,
            loadType: loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap(function (responseInfo) {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                var frameContext = context.frameContext;
                var virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    var list = responseInfo.returnValue.result;
                    var selectedRowId_1 = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    var leafNodeInfo = list.find(function (item) { return item[repository.primaryKey] === selectedRowId_1; });
                    var hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    var ids = _this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId_1);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId_1);
                }
            }
        }), map(function (responseInfo) {
            var frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            _this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            var listData = responseInfo.returnValue.result;
            var entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });
            }
            else {
                repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });
            }
            return entities;
        }));
    };
    /**
     * 插入对父节点的过滤
     */
    PathTreeRepository.prototype.buildFiltersWithParent = function (originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        var relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        var parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        var parentFilterArray = [
            {
                "FilterField": originalHierarchyInfoKey + ".Layer",
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        // 父路径过滤，如果为空，则不添加（兼容oracle取数）
        var parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';
        if (parentPath) {
            parentFilterArray.push({
                "FilterField": originalHierarchyInfoKey + ".Path",
                "Value": parentPath,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 7
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    };
    PathTreeRepository.prototype.buildEntityFilter = function (filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter) {
            filter = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].Relation = 0;
        }
        var entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    };
    /**
     * 清空后代实体
     */
    PathTreeRepository.prototype.clearDescendantEntities = function (repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow) {
        if (frozenCurrentRow === void 0) { frozenCurrentRow = false; }
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        var fPath = parentHierarchyInfo.path;
        var fLayer = parentHierarchyInfo.layer;
        if (frozenCurrentRow) {
            repository.entityCollection.removeData(function (entity) {
                var hierarchyInfo = entity[hierarchyInfokey];
                var path = hierarchyInfo.path;
                var layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
        else {
            repository.entityCollection.removeEntities(function (entity) {
                var hierarchyInfo = entity[hierarchyInfokey];
                var path = hierarchyInfo.path;
                var layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
    };
    /**
     * 获取实体的分级信息
     */
    PathTreeRepository.prototype.getHierarchyInfoById = function (repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        var entity = repository.entityCollection.getEntityById(id);
        var hierarchyInfoEntity = entity[hierarchyInfokey];
        return hierarchyInfoEntity.toJSON();
    };
    /**
     * 获取分级码的原始的字段名
     */
    PathTreeRepository.prototype.getOriginalHierarchyInfoKey = function (repository, hierarchyInfokey) {
        var ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        var hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    };
    PathTreeRepository.prototype.getPaginationInfo = function (responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    };
    PathTreeRepository.prototype.findParent = function (hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(function (item) {
            var currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
        });
    };
    PathTreeRepository.prototype.getAllParentIds = function (hierarchyInfo, list, hierarchyInfoKey, repository) {
        var item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        var ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    };
    PathTreeRepository.prototype.getHierarchyInfo = function (entity, hierarchyInfoKey) {
        return entity[hierarchyInfoKey];
    };
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    PathTreeRepository.prototype.getChildren = function (repository, hierarchyInfoKey, id) {
        var _this = this;
        var hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        var layer = hierarchyInfo.layer;
        var path = hierarchyInfo.path;
        var entities = repository.entityCollection.getEntities(function (entity) {
            var hierarchyInfo = _this.getHierarchyInfo(entity, hierarchyInfoKey);
            var matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    };
    return PathTreeRepository;
}());
export { PathTreeRepository };
//# sourceMappingURL=data:application/json;base64,