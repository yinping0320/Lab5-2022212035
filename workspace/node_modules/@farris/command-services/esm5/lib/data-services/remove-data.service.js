import { Injectable } from '@angular/core';
import { of, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { FrameContext, } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { CommandService } from '../command-service';
import { ListDataService } from './list-data.service';
import { TreeDataService } from './tree-data.service';
/**
 * 删除服务
 */
var RemoveDataService = /** @class */ (function () {
    /**
     * 构造函数
     * @param frameContext 组件上下文
     */
    function RemoveDataService(frameContext) {
        this.frameContext = frameContext;
        this.notifyService = this.frameContext.injector.get(FormNotifyService, null);
        this.messageService = this.frameContext.injector.get(FormMessageService, null);
        this.errorService = this.frameContext.injector.get(FormErrorService, null);
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.commandService = this.frameContext.injector.get(CommandService, null);
        this.listDataService = this.frameContext.injector.get(ListDataService, null);
        this.treeDataService = this.frameContext.injector.get(TreeDataService, null);
        this.befRepository = this.frameContext.repository;
    }
    /**
     * 删除id对应的实体
     * @param id 要删除的数据id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（仅为兼容，新调用请勿设置）
     * @summary
     * enableRemoveAndSave存在的意义：
     * 1、老表单的可能没有delAndSave方法；
     * 2、为了将ListDataService中的remove方法迁移到此方法上，显示设置为false，保持和以前行为一致；
     * 3、该参数默认为true，并且在WebComponent层不暴露，新命令不需要传递，默认为true；
     */
    RemoveDataService.prototype.removeById = function (id, ifSave, enableRemoveAndSave, successMsg) {
        if (enableRemoveAndSave === void 0) { enableRemoveAndSave = true; }
        var msg = successMsg ? successMsg : '';
        return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);
    };
    RemoveDataService.prototype.removeByIds = function (ids) {
        throw new Error('Not Implemented');
    };
    /**
     * 删除id对应的实体，并执行保存
     */
    RemoveDataService.prototype.removeAndSaveById = function (id, successMsg) {
        var msg = successMsg ? successMsg : '';
        return this.innerRemoveById(id, true, true, msg);
    };
    /**
     * 删除并保存树节点数据
     */
    RemoveDataService.prototype.removeAndSaveByIdForTree = function (id, successMsg) {
        var _this = this;
        var msg = successMsg ? successMsg : '';
        // 检查要删除的id是否存在
        if (this.checkIdsToRemove([id]) === false) {
            this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return EMPTY;
        }
        // 检查是否有子节点
        var treeNodesData = this.befRepository.entityCollection.toJSON();
        if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {
            this.messageService.warning(this.languageService.deleteChildFirst);
            return EMPTY;
        }
        // 执行删除
        var remove$ = this.innerRemoveById(id, true, true, msg);
        var nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);
        ;
        var result$ = remove$.pipe(tap(function () {
            _this.treeDataService.setNextNodeAfterRemoving(nextNodeId);
        }));
        return result$;
    };
    /**
     * 批量删除并保存
     */
    RemoveDataService.prototype.removeAndSaveByIds = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 删除后的刷新
     */
    RemoveDataService.prototype.refreshAfterRemoving = function (loadCmdName, loadCmdFrameId) {
        if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {
            return;
        }
        var commandService = this.frameContext.injector.get(CommandService, null);
        return commandService.execute(loadCmdName, loadCmdFrameId);
    };
    /**
     * 删除id对应的实体
     * @param id 实体id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（老EAPI上没有此方法，通过开关进行兼容）
     * @summary
     * enableRemoveAndSave参数说明：
     * 1、老EAPI上没有delAndSave方法，只能发两次请求（删除和保存）；
     * 2、此开关用于选择使用哪种方式，兼容老表单。
     */
    RemoveDataService.prototype.innerRemoveById = function (id, ifSave, enableRemoveAndSave, successMsg) {
        var _this = this;
        // 检查要删除的id是否存在
        if (this.checkIdsToRemove([id]) === false) {
            this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return EMPTY;
        }
        var confirm$ = this.confirmToRemove();
        var remove$ = enableRemoveAndSave && ifSave ?
            this.befRepository.removeEntityAndSaveById(id) :
            this.befRepository.removeById(id, ifSave);
        var result$ = confirm$.pipe(concatMap(function (ifRemove) {
            if (ifRemove === false) {
                return EMPTY;
            }
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    var showMessage = true;
                    if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                        try {
                            var options = JSON.parse(successMsg);
                            if (options.showMessage === false) {
                                showMessage = false;
                            }
                        }
                        catch (_a) { }
                    }
                    if (showMessage !== false) {
                        _this.notifyService.success(successMsg, { hideTitle: true });
                    }
                }
                else {
                    _this.notifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.deleteFailed, error);
            }), switchMap(function () {
                var saved = enableRemoveAndSave && ifSave;
                if (!saved) {
                    return EMPTY;
                }
                else {
                    return of(null);
                }
            }));
        }));
        return result$;
    };
    /**
     * 检查要删除的ids是否为空
     */
    RemoveDataService.prototype.checkIdsToRemove = function (ids) {
        if (!ids) {
            return false;
        }
        var filteredIds = ids.filter(function (id) {
            return !!id;
        });
        if (filteredIds.length === 0) {
            return false;
        }
        return true;
    };
    /**
     * 确认删除
     */
    RemoveDataService.prototype.confirmToRemove = function () {
        var confirm$ = this.messageService.question(this.languageService.confirmDeletion);
        var result$ = confirm$.pipe(concatMap(function (ifRemove) {
            if (ifRemove === false) {
                return EMPTY;
            }
            else {
                return of(true);
            }
        }));
        return result$;
    };
    RemoveDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RemoveDataService.ctorParameters = function () { return [
        { type: FrameContext }
    ]; };
    return RemoveDataService;
}());
export { RemoveDataService };
//# sourceMappingURL=data:application/json;base64,