import * as tslib_1 from "tslib";
import { Optional } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { LanguageService } from '../languag.service';
import { DeviceAbility } from '../util/device-ability';
import moment from 'moment';
/**
 * 异常处理基类
 */
var ExceptionStrategy = /** @class */ (function () {
    function ExceptionStrategy(messagerService, languageService) {
        this.messagerService = messagerService;
        this.languageService = languageService;
    }
    /** @nocollapse */
    ExceptionStrategy.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return ExceptionStrategy;
}());
export { ExceptionStrategy };
/**
 * 信息级别异常处理
 */
var InfoExceptionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(InfoExceptionStrategy, _super);
    function InfoExceptionStrategy(messagerService, languageService) {
        return _super.call(this, messagerService, languageService) || this;
    }
    InfoExceptionStrategy.prototype.handleException = function (error) {
        if (!error) {
            return;
        }
        this.messagerService.info(error.Message);
    };
    /** @nocollapse */
    InfoExceptionStrategy.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return InfoExceptionStrategy;
}(ExceptionStrategy));
export { InfoExceptionStrategy };
/**
 * 警告级别异常处理
 */
var WarningExceptionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(WarningExceptionStrategy, _super);
    function WarningExceptionStrategy(messagerService, languageService) {
        return _super.call(this, messagerService, languageService) || this;
    }
    WarningExceptionStrategy.prototype.handleException = function (error) {
        if (!error) {
            return;
        }
        this.messagerService.warning(error.Message);
    };
    /** @nocollapse */
    WarningExceptionStrategy.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return WarningExceptionStrategy;
}(ExceptionStrategy));
export { WarningExceptionStrategy };
/**
 * 错误级别异常处理
 */
var ErrorExceptionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(ErrorExceptionStrategy, _super);
    function ErrorExceptionStrategy(messagerService, languageService) {
        var _this = _super.call(this, messagerService, languageService) || this;
        _this.langService = null;
        _this.langService = languageService;
        if (!_this.langService) {
            _this.langService = new LanguageService();
        }
        return _this;
    }
    ErrorExceptionStrategy.prototype.handleException = function (error) {
        if (!error) {
            return;
        }
        this.handleErrorLevel(error);
    };
    ErrorExceptionStrategy.prototype.handleErrorLevel = function (error) {
        var _this = this;
        var exceptionMsg = error.Message || '';
        var date = error.date || new Date();
        var localDate = moment(date).format('YYYY-MM-DD HH:mm:ss');
        var detail = error.Detail || error.Message + "\r\n\u53D1\u751F\u65F6\u95F4\uFF1A" + localDate + "\r\n\u8BE6\u7EC6\u4FE1\u606F\uFF1A" + error.innerMessage || '';
        var innerMessage = error.innerMessage || null;
        var bsModalRef;
        var options = {
            // title: this.languageService.serverNotifyTitle,
            showMaxButton: false,
            buttons: [
                {
                    text: this.langService.roger,
                    cls: 'btn btn-primary btn-lg',
                    handle: function () {
                        bsModalRef.close();
                    }
                }
            ],
            // showHeader: false,
            width: 440,
            height: 200,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: this.langService.copy,
                    onClick: function (e) {
                        var result = DeviceAbility.copyToClipboard(detail);
                        var text = result ? _this.langService.copySuccess : _this.langService.copyFailed;
                        bsModalRef.content.showMiniNotify(text, 1500);
                    }
                }
            }
        };
        this.displayError(error);
        bsModalRef = this.messagerService.show('exception', exceptionMsg, options);
    };
    /**
     * 在控制台中显示错误信息
     */
    ErrorExceptionStrategy.prototype.displayError = function (error) {
        if (!error) {
            return;
        }
        if (!console || !console.error) {
            return;
        }
        console.error(error);
    };
    /** @nocollapse */
    ErrorExceptionStrategy.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return ErrorExceptionStrategy;
}(ExceptionStrategy));
export { ErrorExceptionStrategy };
/**
 * 致命错误级别异常处理
 */
var FatalExceptionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(FatalExceptionStrategy, _super);
    function FatalExceptionStrategy(messagerService, languageService) {
        return _super.call(this, messagerService, languageService) || this;
    }
    FatalExceptionStrategy.prototype.handleException = function (error) {
        if (!error) {
            return;
        }
        this.messagerService.error(error.Message);
    };
    /** @nocollapse */
    FatalExceptionStrategy.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return FatalExceptionStrategy;
}(ExceptionStrategy));
export { FatalExceptionStrategy };
//# sourceMappingURL=data:application/json;base64,