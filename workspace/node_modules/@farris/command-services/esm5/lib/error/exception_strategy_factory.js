import { Optional, Injectable } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { LanguageService } from '../languag.service';
import { InfoExceptionStrategy, WarningExceptionStrategy, ErrorExceptionStrategy, FatalExceptionStrategy } from './exception_strategy';
var ExceptionFactory = /** @class */ (function () {
    /**
     * 构造函数
     * @param messagerService 消息服务
     * @param languageService 多语言服务
     */
    function ExceptionFactory(messagerService, languageService) {
        this.messagerService = messagerService;
        this.languageService = languageService;
    }
    /**
     * 获取工厂实例
     * @param messagerService 消息服务
     * @param languageService 多语言服务
     */
    ExceptionFactory.getInstance = function (messagerService, languageService) {
        if (!this.exceptionFactory) {
            this.exceptionFactory = new ExceptionFactory(messagerService, languageService);
        }
        return this.exceptionFactory;
    };
    /**
     * 获取异常处理策略
     * @param exceptionLevel 异常等级
     */
    ExceptionFactory.prototype.getExceptionHandleStrategy = function (exceptionLevel) {
        var exceptionStrategy;
        switch (exceptionLevel) {
            case 0 /* Info */:
                exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 1 /* Warning */:
                exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 2 /* Error */:
                exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 3 /* Fatal */:
                exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);
                break;
            default:
                // 默认异常等级是错误
                exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                break;
        }
        return exceptionStrategy;
    };
    /**
     * 异常工厂实例
     */
    ExceptionFactory.exceptionFactory = null;
    ExceptionFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExceptionFactory.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return ExceptionFactory;
}());
export { ExceptionFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9uX3N0cmF0ZWd5X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZXJyb3IvZXhjZXB0aW9uX3N0cmF0ZWd5X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCxPQUFPLEVBQ2UscUJBQXFCLEVBQUUsd0JBQXdCLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQ3BILE1BQU0sc0JBQXNCLENBQUM7QUFHOUI7SUFRRTs7OztPQUlHO0lBQ0gsMEJBQ1MsZUFBZ0MsRUFDbkIsZUFBZ0M7UUFEN0Msb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ25CLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUd0RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNXLDRCQUFXLEdBQXpCLFVBQTBCLGVBQWdDLEVBQUUsZUFBZ0M7UUFDMUYsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUMxQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDaEY7UUFFRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0kscURBQTBCLEdBQWpDLFVBQWtDLGNBQThCO1FBQzlELElBQUksaUJBQXFDLENBQUM7UUFFMUMsUUFBUSxjQUFjLEVBQUU7WUFDdEI7Z0JBQ0UsaUJBQWlCLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDMUYsTUFBTTtZQUNSO2dCQUNFLGlCQUFpQixHQUFHLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQzdGLE1BQU07WUFDUjtnQkFDRSxpQkFBaUIsR0FBRyxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUMzRixNQUFNO1lBQ1I7Z0JBQ0UsaUJBQWlCLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDM0YsTUFBTTtZQUNSO2dCQUVFLFlBQVk7Z0JBQ1osaUJBQWlCLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDM0YsTUFBTTtTQUNUO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0lBMUREOztPQUVHO0lBQ1ksaUNBQWdCLEdBQXFCLElBQUksQ0FBQzs7Z0JBTjFELFVBQVU7Ozs7Z0JBUkYsZUFBZTtnQkFDZixlQUFlLHVCQXNCbkIsUUFBUTs7SUErQ2IsdUJBQUM7Q0FBQSxBQTlERCxJQThEQztTQTdEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb25hbCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vbGFuZ3VhZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VydmVyRXhjZXB0aW9uRW50aXR5LCBFeGNlcHRpb25MZXZlbCB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gIElFeGNlcHRpb25TdHJhdGVneSwgSW5mb0V4Y2VwdGlvblN0cmF0ZWd5LCBXYXJuaW5nRXhjZXB0aW9uU3RyYXRlZ3ksIEVycm9yRXhjZXB0aW9uU3RyYXRlZ3ksIEZhdGFsRXhjZXB0aW9uU3RyYXRlZ3lcclxufSBmcm9tICcuL2V4Y2VwdGlvbl9zdHJhdGVneSc7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRXhjZXB0aW9uRmFjdG9yeSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOW8guW4uOW3peWOguWunuS+i1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGV4Y2VwdGlvbkZhY3Rvcnk6IEV4Y2VwdGlvbkZhY3RvcnkgPSBudWxsO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gbWVzc2FnZXJTZXJ2aWNlIOa2iOaBr+acjeWKoVxyXG4gICAqIEBwYXJhbSBsYW5ndWFnZVNlcnZpY2Ug5aSa6K+t6KiA5pyN5YqhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBtZXNzYWdlclNlcnZpY2U6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5bel5Y6C5a6e5L6LXHJcbiAgICogQHBhcmFtIG1lc3NhZ2VyU2VydmljZSDmtojmga/mnI3liqFcclxuICAgKiBAcGFyYW0gbGFuZ3VhZ2VTZXJ2aWNlIOWkmuivreiogOacjeWKoVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UobWVzc2FnZXJTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UsIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlKTogRXhjZXB0aW9uRmFjdG9yeSB7XHJcbiAgICBpZiAoIXRoaXMuZXhjZXB0aW9uRmFjdG9yeSkge1xyXG4gICAgICB0aGlzLmV4Y2VwdGlvbkZhY3RvcnkgPSBuZXcgRXhjZXB0aW9uRmFjdG9yeShtZXNzYWdlclNlcnZpY2UsIGxhbmd1YWdlU2VydmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZXhjZXB0aW9uRmFjdG9yeTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW8guW4uOWkhOeQhuetlueVpVxyXG4gICAqIEBwYXJhbSBleGNlcHRpb25MZXZlbCDlvILluLjnrYnnuqdcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RXhjZXB0aW9uSGFuZGxlU3RyYXRlZ3koZXhjZXB0aW9uTGV2ZWw6IEV4Y2VwdGlvbkxldmVsKTogSUV4Y2VwdGlvblN0cmF0ZWd5IHtcclxuICAgIGxldCBleGNlcHRpb25TdHJhdGVneTogSUV4Y2VwdGlvblN0cmF0ZWd5O1xyXG5cclxuICAgIHN3aXRjaCAoZXhjZXB0aW9uTGV2ZWwpIHtcclxuICAgICAgY2FzZSBFeGNlcHRpb25MZXZlbC5JbmZvOlxyXG4gICAgICAgIGV4Y2VwdGlvblN0cmF0ZWd5ID0gbmV3IEluZm9FeGNlcHRpb25TdHJhdGVneSh0aGlzLm1lc3NhZ2VyU2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEV4Y2VwdGlvbkxldmVsLldhcm5pbmc6XHJcbiAgICAgICAgZXhjZXB0aW9uU3RyYXRlZ3kgPSBuZXcgV2FybmluZ0V4Y2VwdGlvblN0cmF0ZWd5KHRoaXMubWVzc2FnZXJTZXJ2aWNlLCB0aGlzLmxhbmd1YWdlU2VydmljZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRXhjZXB0aW9uTGV2ZWwuRXJyb3I6XHJcbiAgICAgICAgZXhjZXB0aW9uU3RyYXRlZ3kgPSBuZXcgRXJyb3JFeGNlcHRpb25TdHJhdGVneSh0aGlzLm1lc3NhZ2VyU2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEV4Y2VwdGlvbkxldmVsLkZhdGFsOlxyXG4gICAgICAgIGV4Y2VwdGlvblN0cmF0ZWd5ID0gbmV3IEZhdGFsRXhjZXB0aW9uU3RyYXRlZ3kodGhpcy5tZXNzYWdlclNlcnZpY2UsIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgICAgLy8g6buY6K6k5byC5bi4562J57qn5piv6ZSZ6K+vXHJcbiAgICAgICAgZXhjZXB0aW9uU3RyYXRlZ3kgPSBuZXcgRXJyb3JFeGNlcHRpb25TdHJhdGVneSh0aGlzLm1lc3NhZ2VyU2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2UpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBleGNlcHRpb25TdHJhdGVneTtcclxuICB9XHJcbn1cclxuIl19