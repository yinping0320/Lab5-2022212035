import { Injectable, Optional } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { Repository } from '@farris/devkit';
import { FormLoadingService } from './form-loading/form-loading.service';
import { FormMessageService } from './form-message.service';
import { FormNotifyService } from './form-notify.service';
import { FormErrorService } from './error/form-error.service';
import { LanguageService } from './languag.service';
// tslint:disable: no-string-literal
/**
 * 列表仓库服务
 * @scope FrameComponent
 */
var BeActionService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BeActionService(repository, loadingService, msgService, notifyService, formErrorService, languageService) {
        this.repository = repository;
        this.loadingService = loadingService;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.formErrorService = formErrorService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 执行自定义动作
     */
    BeActionService.prototype.invokeAction = function (actionUri, httpMethod, httpHeaders, queryParams, body) {
        return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, true);
    };
    /**
     * 已弃用：请使用invokeAction代替
     * @deprecated
     * @summary
     * 迁移时请注意：invokeAction中body请传递满足BodyWithRequestInfo接口的格式，形如：
     * { requestInfo: reqeustInfoInstance, key1: value1, key2: value2 }
     */
    BeActionService.prototype.executeAction = function (actionUri, httpMethod, httpHeaders, queryParams, body) {
        // 1、不确定body中是否有RequestInfo对象
        // 2、restService的reqeust会根据body中是否有key为ReqeustInfo（大写开头）的参数来确定；
        // 3、如果body中没有key为ReqeustInfo的参数，不直接返回ResponseInfo，而是进一步解析，返回其中的returnValue。
        return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, false);
    };
    /**
     * 构造查询字符串
     */
    BeActionService.prototype.buildQueryParams = function (queryParams) {
        if (typeof queryParams === 'string') {
            queryParams = JSON.parse(queryParams);
        }
        var queryParamsString = '';
        Object.keys(queryParams).forEach(function (key) {
            queryParamsString += key + "=" + queryParams[key];
        });
        return queryParamsString;
    };
    /**
     * 获取Rest服务
     */
    BeActionService.prototype.getRestService = function () {
        var befRepository = this.repository;
        return befRepository.restService;
    };
    /**
     * 调用自定义动作
     */
    BeActionService.prototype.innerInvokeAction = function (actionUri, httpMethod, httpHeaders, queryParams, body, hasRequestInfo) {
        var _this = this;
        var options = {};
        var restService = this.getRestService();
        var baseUri = restService.baseUri;
        // 构造url
        var fullActionUri = baseUri + "/service/" + actionUri;
        if (queryParams && queryParams !== '') {
            var queryParamsString = this.buildQueryParams(queryParams);
            fullActionUri += queryParamsString;
        }
        // body构造
        if (body && body !== '') {
            if (typeof body === 'string' && body.startsWith('{') && body.endsWith('}')) {
                body = JSON.parse(body);
            }
            options['body'] = body;
        }
        // http头构造
        if (httpHeaders && httpHeaders !== '') {
            httpHeaders = JSON.parse(httpHeaders);
            // 如果没有设置Content-Type，默认用json格式
            if (!httpHeaders['Content-Type']) {
                httpHeaders['Content-Type'] = 'application/json';
            }
            options['headers'] = new HttpHeaders(httpHeaders);
        }
        else {
            options['headers'] = new HttpHeaders({ 'Content-Type': 'application/json' });
        }
        // 执行服务器端请求
        this.loadingService.show();
        // invoke方法
        // 1、RequestInfo=>报错
        // 2、requestInfo=>ResponseInfo
        // request方法
        // 1、RequestInfo=>ResponseInfo
        // 2、requestInfo=>returnValue
        var methodName = hasRequestInfo ? 'invoke' : 'request';
        var result$ = restService[methodName](fullActionUri, httpMethod, null, options);
        return result$.pipe(tap(function () {
            _this.loadingService.hide();
        }, function (error) {
            _this.loadingService.hide();
            var errorMsg = fullActionUri + _this.languageService['operationFailed'];
            _this.formErrorService.exception(errorMsg, error);
        }));
    };
    BeActionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BeActionService.ctorParameters = function () { return [
        { type: Repository },
        { type: FormLoadingService },
        { type: FormMessageService },
        { type: FormNotifyService },
        { type: FormErrorService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return BeActionService;
}());
export { BeActionService };
//# sourceMappingURL=data:application/json;base64,