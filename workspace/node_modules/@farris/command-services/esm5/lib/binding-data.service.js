import { Injectable } from '@angular/core';
import { AppContext, BindingData } from '@farris/devkit';
/**
 * 实体服务
 * @scope FrameComponent
 */
var BindingDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BindingDataService(bindingData, appContext) {
        this.bindingData = bindingData;
        this.appContext = appContext;
    }
    /**
     * 设置当前框架的当前行
     */
    BindingDataService.prototype.setCurrentId = function (id, frameId) {
        // let bindingData = this.bindingData;
        // if (frameId) {
        //   const targetContext = this.appContext.getFrameContext(frameId);
        //   bindingData = targetContext.bindingData;
        // }
        // bindingData.list.setCurrentId(id);
        // @todo：全部重新设置一遍
        var frameContexts = Array.from(this.appContext.getAllFrameContexts().values());
        frameContexts.forEach(function (frameContext) {
            var bindingData = frameContext.bindingData;
            bindingData.list.setCurrentId(id, true, false);
        });
    };
    BindingDataService.prototype.setCurrentRow = function (id, frameId) {
        var bindingData = this.bindingData;
        if (frameId) {
            var targetContext = this.appContext.getFrameContext(frameId);
            bindingData = targetContext.bindingData;
        }
        bindingData.getList().setCurrentId(id);
    };
    BindingDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BindingDataService.ctorParameters = function () { return [
        { type: BindingData },
        { type: AppContext }
    ]; };
    return BindingDataService;
}());
export { BindingDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2RTs7O0dBR0c7QUFDSDtJQUdFOztPQUVHO0lBQ0gsNEJBQ1UsV0FBd0IsRUFDeEIsVUFBc0I7UUFEdEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBRUw7O09BRUc7SUFDSCx5Q0FBWSxHQUFaLFVBQWEsRUFBVSxFQUFFLE9BQWU7UUFDdEMsc0NBQXNDO1FBQ3RDLGlCQUFpQjtRQUNqQixvRUFBb0U7UUFDcEUsNkNBQTZDO1FBQzdDLElBQUk7UUFDSixxQ0FBcUM7UUFFckMsaUJBQWlCO1FBQ2pCLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQTBCO1lBQy9DLElBQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDN0MsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSwwQ0FBYSxHQUFwQixVQUFxQixFQUFVLEVBQUUsT0FBZTtRQUM5QyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ25DLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0QsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7U0FDekM7UUFDRCxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7O2dCQXBDRixVQUFVOzs7O2dCQU5VLFdBQVc7Z0JBQXZCLFVBQVU7O0lBMkNuQix5QkFBQztDQUFBLEFBckNELElBcUNDO0FBRUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQsIEJpbmRpbmdEYXRhLCBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcblxyXG4vKipcclxuICog5a6e5L2T5pyN5YqhXHJcbiAqIEBzY29wZSBGcmFtZUNvbXBvbmVudFxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBCaW5kaW5nRGF0YVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhLFxyXG4gICAgcHJpdmF0ZSBhcHBDb250ZXh0OiBBcHBDb250ZXh0XHJcbiAgKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572u5b2T5YmN5qGG5p6255qE5b2T5YmN6KGMXHJcbiAgICovXHJcbiAgc2V0Q3VycmVudElkKGlkOiBzdHJpbmcsIGZyYW1lSWQ6IHN0cmluZykge1xyXG4gICAgLy8gbGV0IGJpbmRpbmdEYXRhID0gdGhpcy5iaW5kaW5nRGF0YTtcclxuICAgIC8vIGlmIChmcmFtZUlkKSB7XHJcbiAgICAvLyAgIGNvbnN0IHRhcmdldENvbnRleHQgPSB0aGlzLmFwcENvbnRleHQuZ2V0RnJhbWVDb250ZXh0KGZyYW1lSWQpO1xyXG4gICAgLy8gICBiaW5kaW5nRGF0YSA9IHRhcmdldENvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBiaW5kaW5nRGF0YS5saXN0LnNldEN1cnJlbnRJZChpZCk7XHJcblxyXG4gICAgLy8gQHRvZG/vvJrlhajpg6jph43mlrDorr7nva7kuIDpgY1cclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSBBcnJheS5mcm9tKHRoaXMuYXBwQ29udGV4dC5nZXRBbGxGcmFtZUNvbnRleHRzKCkudmFsdWVzKCkpO1xyXG4gICAgZnJhbWVDb250ZXh0cy5mb3JFYWNoKChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4ge1xyXG4gICAgICBjb25zdCBiaW5kaW5nRGF0YSA9IGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YTtcclxuICAgICAgYmluZGluZ0RhdGEubGlzdC5zZXRDdXJyZW50SWQoaWQsIHRydWUsIGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0Q3VycmVudFJvdyhpZDogc3RyaW5nLCBmcmFtZUlkOiBzdHJpbmcpIHtcclxuICAgIGxldCBiaW5kaW5nRGF0YSA9IHRoaXMuYmluZGluZ0RhdGE7XHJcbiAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5hcHBDb250ZXh0LmdldEZyYW1lQ29udGV4dChmcmFtZUlkKTtcclxuICAgICAgYmluZGluZ0RhdGEgPSB0YXJnZXRDb250ZXh0LmJpbmRpbmdEYXRhO1xyXG4gICAgfVxyXG4gICAgYmluZGluZ0RhdGEuZ2V0TGlzdCgpLnNldEN1cnJlbnRJZChpZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCaW5kaW5nRGF0YVNlcnZpY2UgfTtcclxuIl19