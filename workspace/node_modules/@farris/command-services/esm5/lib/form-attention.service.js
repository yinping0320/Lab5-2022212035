import { Injectable, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { EMPTY } from "rxjs";
import { AttentionService } from '@farris/ui-tooltip';
var FormAttentionService = /** @class */ (function () {
    function FormAttentionService(injector, frameContext, attentionService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.attentionService = attentionService;
    }
    /**
     * 闪烁按钮
     * @param ids id字符串或数组
     * @param duration 时间间隔
     * @returns
     */
    FormAttentionService.prototype.blink = function (ids, duration) {
        if (typeof ids === 'string') {
            ids = ids.split(',').filter(function (p) { return p; });
        }
        if (!Array.isArray(ids) || ids.length < 1) {
            return EMPTY;
        }
        if (typeof duration === 'string') {
            duration = duration.trim();
        }
        if (!duration) {
            duration = 600;
        }
        duration = parseInt(duration);
        if (isNaN(duration) || duration <= 0) {
            duration = 600;
        }
        var elements = ids.map(function (item) {
            return {
                idOrEl: item,
            };
        });
        this.attentionService.catchAttention(elements, duration);
    };
    FormAttentionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormAttentionService.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: AttentionService }
    ]; };
    return FormAttentionService;
}());
export { FormAttentionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1hdHRlbnRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtLWF0dGVudGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUd4RTtJQUVFLDhCQUFvQixRQUFrQixFQUFVLFlBQTBCLEVBQVUsZ0JBQWtDO1FBQWxHLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBSSxDQUFDO0lBQzNIOzs7OztPQUtHO0lBQ0ksb0NBQUssR0FBWixVQUFhLEdBQXNCLEVBQUUsUUFBYztRQUNqRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixRQUFRLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO1FBQ0QsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ3BDLFFBQVEsR0FBRyxHQUFHLENBQUM7U0FDaEI7UUFDRCxJQUFNLFFBQVEsR0FBdUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQVk7WUFDeEQsT0FBTztnQkFDTCxNQUFNLEVBQUUsSUFBSTthQUdiLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7O2dCQWxDRixVQUFVOzs7O2dCQU5VLFFBQVE7Z0JBQ3BCLFlBQVk7Z0JBRVosZ0JBQWdCOztJQXNDekIsMkJBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQWxDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEF0dGVudGlvblNlcnZpY2UsIEF0dGVudGlvbkVsZW1lbnQgfSBmcm9tICdAZmFycmlzL3VpLXRvb2x0aXAnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcm1BdHRlbnRpb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCwgcHJpdmF0ZSBhdHRlbnRpb25TZXJ2aWNlOiBBdHRlbnRpb25TZXJ2aWNlKSB7IH1cclxuICAvKipcclxuICAgKiDpl6rng4HmjInpkq5cclxuICAgKiBAcGFyYW0gaWRzIGlk5a2X56ym5Liy5oiW5pWw57uEXHJcbiAgICogQHBhcmFtIGR1cmF0aW9uIOaXtumXtOmXtOmalFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBibGluayhpZHM6IHN0cmluZyB8IHN0cmluZ1tdLCBkdXJhdGlvbj86IGFueSkge1xyXG4gICAgaWYgKHR5cGVvZiBpZHMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGlkcyA9IGlkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgfVxyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlkcykgfHwgaWRzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbi50cmltKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWR1cmF0aW9uKSB7XHJcbiAgICAgIGR1cmF0aW9uID0gNjAwO1xyXG4gICAgfVxyXG4gICAgZHVyYXRpb24gPSBwYXJzZUludChkdXJhdGlvbik7XHJcbiAgICBpZiAoaXNOYU4oZHVyYXRpb24pIHx8IGR1cmF0aW9uIDw9IDApIHtcclxuICAgICAgZHVyYXRpb24gPSA2MDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlbGVtZW50czogQXR0ZW50aW9uRWxlbWVudFtdID0gaWRzLm1hcCgoaXRlbTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWRPckVsOiBpdGVtLFxyXG4gICAgICAgIC8vIHR5cGU6JycsXHJcbiAgICAgICAgLy8gY2xhc3M6JydcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5hdHRlbnRpb25TZXJ2aWNlLmNhdGNoQXR0ZW50aW9uKGVsZW1lbnRzLCBkdXJhdGlvbik7XHJcbiAgfVxyXG59Il19