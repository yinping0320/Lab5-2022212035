import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FarrisSidebarService } from '@farris/ui-sidebar';
import { FrameContext } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
/**
 * 侧边栏服务
 * @scope FrameComponent
 */
var SidebarService = /** @class */ (function () {
    function SidebarService(frameContext, sidebarUIService, messageService, languageService) {
        this.frameContext = frameContext;
        this.sidebarUIService = sidebarUIService;
        this.messageService = messageService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    Object.defineProperty(SidebarService.prototype, "repository", {
        get: function () {
            return this.frameContext.repository;
        },
        enumerable: true,
        configurable: true
    });
    SidebarService.prototype.openSidebar = function () {
        this.sidebarUIService.sendIsOpen(true);
    };
    SidebarService.prototype.closeSidebar = function () {
        this.sidebarUIService.sendIsOpen(false);
    };
    /**
     * 关闭前先取消变更
     */
    SidebarService.prototype.confirmBeforeClosingSidebar = function () {
        // 检查是否有变更，没有变更直接关闭
        var ifChangesExist = this.repository.entityManager.checkAllEntityChanges();
        if (!ifChangesExist) {
            return of(true);
        }
        // 确认是否关闭
        var confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);
        var result$ = confirm$.pipe(switchMap(function (confirmResult) {
            if (confirmResult === false) {
                return of(false);
            }
            else {
                return of(true);
            }
        }));
        return result$;
    };
    /**
     * 继续关闭侧边栏
     */
    SidebarService.prototype.continueClosingSidebar = function () {
        return of(true);
    };
    /**
     * 阻止侧边栏关闭
     */
    SidebarService.prototype.stopClosingSidebar = function () {
        return of(false);
    };
    SidebarService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SidebarService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FarrisSidebarService },
        { type: FormMessageService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return SidebarService;
}());
export { SidebarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3NpZGViYXItc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLEVBQVUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR3BEOzs7R0FHRztBQUNIO0lBT0Usd0JBQ1UsWUFBMEIsRUFDMUIsZ0JBQXNDLEVBQ3RDLGNBQWtDLEVBQ3RCLGVBQWdDO1FBSDVDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBc0I7UUFDdEMsbUJBQWMsR0FBZCxjQUFjLENBQW9CO1FBQ3RCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFiRCxzQkFBWSxzQ0FBVTthQUF0QjtZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFtQyxDQUFDO1FBQy9ELENBQUM7OztPQUFBO0lBYUQsb0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNILG9EQUEyQixHQUEzQjtRQUVFLG1CQUFtQjtRQUNuQixJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFFRCxTQUFTO1FBQ1QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDdkYsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FDM0IsU0FBUyxDQUFDLFVBQUMsYUFBc0I7WUFDL0IsSUFBSSxhQUFhLEtBQUssS0FBSyxFQUFFO2dCQUMzQixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7UUFFRixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSSwrQ0FBc0IsR0FBN0I7UUFDRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQ7O09BRUc7SUFDSSwyQ0FBa0IsR0FBekI7UUFDRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDOztnQkFoRUYsVUFBVTs7OztnQkFWTSxZQUFZO2dCQURwQixvQkFBb0I7Z0JBR3BCLGtCQUFrQjtnQkFDbEIsZUFBZSx1QkFrQm5CLFFBQVE7O0lBc0RiLHFCQUFDO0NBQUEsQUFqRUQsSUFpRUM7QUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZhcnJpc1NpZGViYXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1zaWRlYmFyJztcclxuaW1wb3J0IHsgRW50aXR5LCBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2JlZic7XHJcbmltcG9ydCB7IEZvcm1NZXNzYWdlU2VydmljZSB9IGZyb20gJy4vZm9ybS1tZXNzYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2xhbmd1YWcuc2VydmljZSc7XHJcblxyXG5cclxuLyoqXHJcbiAqIOS+p+i+ueagj+acjeWKoVxyXG4gKiBAc2NvcGUgRnJhbWVDb21wb25lbnRcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgU2lkZWJhclNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIGdldCByZXBvc2l0b3J5KCk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PiB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBwcml2YXRlIHNpZGViYXJVSVNlcnZpY2U6IEZhcnJpc1NpZGViYXJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtZXNzYWdlU2VydmljZTogRm9ybU1lc3NhZ2VTZXJ2aWNlLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZSxcclxuICApIHtcclxuICAgIGlmICghdGhpcy5sYW5ndWFnZVNlcnZpY2UpIHtcclxuICAgICAgdGhpcy5sYW5ndWFnZVNlcnZpY2UgPSBMYW5ndWFnZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9wZW5TaWRlYmFyKCkge1xyXG4gICAgdGhpcy5zaWRlYmFyVUlTZXJ2aWNlLnNlbmRJc09wZW4odHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZVNpZGViYXIoKSB7XHJcbiAgICB0aGlzLnNpZGViYXJVSVNlcnZpY2Uuc2VuZElzT3BlbihmYWxzZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhbPpl63liY3lhYjlj5bmtojlj5jmm7RcclxuICAgKi9cclxuICBjb25maXJtQmVmb3JlQ2xvc2luZ1NpZGViYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcblxyXG4gICAgLy8g5qOA5p+l5piv5ZCm5pyJ5Y+Y5pu077yM5rKh5pyJ5Y+Y5pu055u05o6l5YWz6ZetXHJcbiAgICBjb25zdCBpZkNoYW5nZXNFeGlzdCA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLmNoZWNrQWxsRW50aXR5Q2hhbmdlcygpO1xyXG4gICAgaWYgKCFpZkNoYW5nZXNFeGlzdCkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g56Gu6K6k5piv5ZCm5YWz6ZetXHJcbiAgICBjb25zdCBjb25maXJtJCA9IHRoaXMubWVzc2FnZVNlcnZpY2UucXVlc3Rpb24odGhpcy5sYW5ndWFnZVNlcnZpY2VbJ2V4aXRXaXRob3V0U2F2ZSddKTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBjb25maXJtJC5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKGNvbmZpcm1SZXN1bHQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAoY29uZmlybVJlc3VsdCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog57un57ut5YWz6Zet5L6n6L655qCPXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRpbnVlQ2xvc2luZ1NpZGViYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpmLvmraLkvqfovrnmoI/lhbPpl61cclxuICAgKi9cclxuICBwdWJsaWMgc3RvcENsb3NpbmdTaWRlYmFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFNpZGViYXJTZXJ2aWNlIH07XHJcbiJdfQ==