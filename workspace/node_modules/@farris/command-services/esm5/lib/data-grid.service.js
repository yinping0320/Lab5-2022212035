import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { Service } from "./service";
import { DatagridComponent } from '@farris/ui-datagrid';
var DataGridService = /** @class */ (function (_super) {
    tslib_1.__extends(DataGridService, _super);
    function DataGridService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 清空所有勾选行
     * @description 取消勾选当前表单所有勾选行
     */
    DataGridService.prototype.clearChecks = function () {
        // const params = this.eventParam;
        // if (params && Array.isArray(params)) {
        // const param = params[0];
        // if (param instanceof QueryCondition) {
        var gridComponents = this.getFormGridComponents(this.context);
        if (gridComponents && gridComponents.length > 0) {
            gridComponents.forEach(function (gridComponent) {
                var clearSelections = true;
                if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {
                    clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];
                }
                if (clearSelections) {
                    gridComponent.clearCheckeds(true);
                }
            });
        }
        // }
        // }
    };
    /**
     * 取消勾选删除的行
     * @param ids ids
     * @returns
     * @description 取消勾选当前绑定路径下指定数据，清空下级表格中所有勾选行，仅供删除场景使用
     */
    DataGridService.prototype.uncheckDeletedRows = function (ids) {
        if (typeof ids === 'string') {
            if (ids.indexOf(',') !== -1) {
                ids = ids.split(',').filter(function (p) { return p; });
            }
            else {
                ids = [ids];
            }
        }
        if (!ids || ids.length < 1) {
            return;
        }
        // 获取bindingPath及ns
        var frameContext = this.context.frameContext;
        if (!frameContext) {
            return;
        }
        var appContext = frameContext.appContext;
        var ns = frameContext.namespace;
        var bindingPath = frameContext.viewModel && frameContext.viewModel.bindingPath;
        if (!appContext) {
            return;
        }
        // 根据bindingPath获取所有可能的frameContext
        var frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
        var frameContextsInCurrentBindingPath = frameContexts.filter(function (frameContext) { return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath === bindingPath; });
        // 获取这些frame中所有的表格组件map
        var gridInCurrentFrame = this.getGridComponentByFrameContexts(frameContextsInCurrentBindingPath);
        if (!gridInCurrentFrame) {
            return;
        }
        // 一个bindingPath下应该只有一个grid
        var grid = gridInCurrentFrame.pop();
        // 清空命令所在的frame下表格的指定勾选
        if (grid) {
            grid.unCheckRows(ids, true);
        }
        // 清空下级表格的所有勾选行数据
        var childrenFrameContexts = frameContexts.filter(function (frameContext) { return frameContext.viewModel.bindingPath !== bindingPath && frameContext.viewModel.bindingPath.startsWith(bindingPath); });
        var childrenGridComponents = this.getGridComponentByFrameContexts(childrenFrameContexts);
        // 清空命令所在frame
        if (childrenGridComponents && childrenGridComponents.length > 0) {
            childrenGridComponents.forEach(function (gridComponent) {
                // 清空所有勾选
                gridComponent.checkedRows = [];
            });
        }
    };
    /**
     * 取消勾选行
     * @param ids ids
     * @returns
     */
    DataGridService.prototype.uncheckRows = function (ids) {
        if (typeof ids === 'string') {
            ids = [ids];
        }
        if (!ids || ids.length < 1) {
            return;
        }
        var gridComponents = this.getFormGridComponents(this.context);
        if (gridComponents && gridComponents.length > 0) {
            gridComponents.forEach(function (gridComponent) {
                gridComponent.unCheckRows(ids, true);
            });
        }
    };
    /**
     * 根据命令上下文获取当前命令所在组件的表格实例
     * @param commandContext 命令上下文
     * @returns
     */
    DataGridService.prototype.getFormGridComponents = function (commandContext) {
        var grids = [];
        var frameContext = commandContext && commandContext.frameContext;
        var appContext = frameContext && frameContext.appContext || null;
        if (appContext) {
            var componentRefs = appContext.componentRefs;
            var collect = Array.from(componentRefs.values()); // [Map<string,any>,Map<string,any>]
            collect.forEach(function (item) {
                var components = Array.from(item.values());
                var bindingPath = frameContext;
                var gridComponents = components.filter(function (component) { return component instanceof DatagridComponent; });
                grids = grids.concat(gridComponents);
            });
        }
        return grids;
    };
    DataGridService.prototype.getGridComponentByFrameContexts = function (frameContexts) {
        return frameContexts.reduce(function (result, frameContext) {
            var appContext = frameContext.appContext;
            var frameId = frameContext.frameId;
            // 获取当前组件下所有的组件实例
            var componentsRef = appContext.componentRefs.get(frameId);
            var grids = componentsRef && Array.from(componentsRef.values()).filter(function (component) { return component instanceof DatagridComponent; });
            if (grids && grids.length > 0) {
                result = result.concat(grids);
            }
            return result;
        }, []);
    };
    DataGridService.decorators = [
        { type: Injectable }
    ];
    return DataGridService;
}(Service));
export { DataGridService };
//# sourceMappingURL=data:application/json;base64,