import { OnInit, ElementRef, EventEmitter, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { ControlValueAccessor } from '@angular/forms';
import { LocaleService } from '@farris/ui-locale';
export interface upImageFile {
    size: number;
    name: string;
    type: string;
    lastModified?: string;
    lastModifiedDate?: Date;
    state?: string;
    base64?: string;
}
export declare class AvatarComponent implements ControlValueAccessor, OnInit {
    private notifyService;
    localeService: LocaleService;
    private inject;
    private defaultImgSrc;
    private errorImgSrc;
    imgSrc: any;
    file: ElementRef;
    tReadOnly: boolean;
    readonly: boolean;
    size: number;
    imgTitle: string;
    avatarWidth: number;
    avatarHeight: number;
    imgShape: string;
    imgtitle: string;
    imgChange: EventEmitter<{}>;
    _type: any;
    type: any;
    _cover: any;
    cover: any;
    private onChangeCallback;
    private onTouchedCallback;
    private perfixStr;
    loadingImg: boolean;
    imgType: string;
    imgFileObj: upImageFile;
    currentImgType: string[];
    constructor(notifyService: NotifyService, localeService: LocaleService, inject: Injector);
    ngOnInit(): void;
    imgsrcInit(val: any): void;
    onClick(): void;
    getfiledata(event: any): void;
    getImgFileObj(): upImageFile;
    transformFile(getfile: any): void;
    read(file: File): Observable<string>;
    do(file: any): Observable<string>;
    writeValue(val: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    addBase64(val: any): string;
    removeBase64(val: any): any;
    isSrc(url: any): boolean;
    isBaseSrc(url: any): boolean;
    errorSrc(): void;
}
