/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { GSPFrameworkService } from './core/gsp-framework.service';
var BasePathService = /** @class */ (function () {
    function BasePathService() {
    }
    /**
     * @return {?}
     */
    BasePathService.getService = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();
        /** @type {?} */
        var service = gspFrameworkService && gspFrameworkService.common;
        return service;
    };
    /**
     * 获取基路径.
     * @param defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.
     * @returns
     */
    /**
     * 获取基路径.
     * @param {?=} defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.
     * @return {?}
     */
    BasePathService.getBasePath = /**
     * 获取基路径.
     * @param {?=} defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.
     * @return {?}
     */
    function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = ''; }
        /** @type {?} */
        var service = this.getService();
        if (service && service.getBasePath) {
            return service && service.getBasePath && service.getBasePath.get() || defaultValue;
        }
        else {
            /** @type {?} */
            var hash = window.location.hash;
            /** @type {?} */
            var params = this.parseParam(hash);
            /** @type {?} */
            var basePath = params['base-path'] || '';
            return basePath;
        }
    };
    /**
     * 在绝对路径的基础上增加基路径.
     * @param path - 原始地址.
     * @param defaultValue - 默认值.
     * @returns
     */
    /**
     * 在绝对路径的基础上增加基路径.
     * @param {?} path - 原始地址.
     * @param {?=} defaultValue - 默认值.
     * @return {?}
     */
    BasePathService.convertPath = /**
     * 在绝对路径的基础上增加基路径.
     * @param {?} path - 原始地址.
     * @param {?=} defaultValue - 默认值.
     * @return {?}
     */
    function (path, defaultValue) {
        if (defaultValue === void 0) { defaultValue = ''; }
        if (!path) {
            return path;
        }
        /** @type {?} */
        var basePath = this.getBasePath(defaultValue);
        if (basePath) {
            /** @type {?} */
            var basePaths = basePath.split('/').filter(function (p) { return p; });
            if (basePaths.length > 0) {
                /** @type {?} */
                var baseURL = basePaths.join('/');
                if (path.indexOf('://') > 0 || path.indexOf('//') === 0) {
                    // absolute url, like http://localhost:5200/api/runtime/xxx or http://localhost or //localhost
                    if (path.startsWith('//')) {
                        /** @type {?} */
                        var url = path.slice(2);
                        // url中是否包含基路径
                        if (url.indexOf('/') === -1) {
                            // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path
                            return path + '/' + baseURL;
                        }
                        else {
                            // 包含基路径
                            url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));
                            return '//' + url;
                        }
                    }
                    else {
                        // like http://localhost:5200
                        /** @type {?} */
                        var protocol = path.slice(0, path.indexOf(':') + 1);
                        /** @type {?} */
                        var url = path.slice(path.indexOf(':') + 1);
                        url = url.slice(2);
                        if (url.indexOf('/') === -1) {
                            // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path
                            return path + '/' + baseURL;
                        }
                        else {
                            // 包含基路径
                            url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));
                            return protocol + '//' + url;
                        }
                    }
                    // return path.endsWith('/') ? `${path}${baseURL}/` : `${path}/${baseURL}`;
                }
                else {
                    return path.startsWith('/') ? "/" + baseURL + path : "/" + baseURL + "/" + path;
                }
            }
            else {
                return path;
            }
        }
        else {
            return path;
        }
    };
    /**
     * @param {?} queryString
     * @return {?}
     */
    BasePathService.parseParam = /**
     * @param {?} queryString
     * @return {?}
     */
    function (queryString) {
        if (!queryString) {
            return {};
        }
        /** @type {?} */
        var hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce(function (params, hash) {
            var _a;
            /** @type {?} */
            var split = hash.indexOf('=');
            /** @type {?} */
            var key = hash.slice(0, split);
            /** @type {?} */
            var val = hash.slice(split + 1);
            return Object.assign(params, (_a = {}, _a[key] = decodeURIComponent(val), _a));
        }, {});
    };
    BasePathService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BasePathService.ctorParameters = function () { return []; };
    return BasePathService;
}());
export { BasePathService };
//# sourceMappingURL=data:application/json;base64,