/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { GSPFrameworkService } from './core/gsp-framework.service';
export class BasePathService {
    constructor() { }
    /**
     * @return {?}
     */
    static getService() {
        /** @type {?} */
        const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();
        /** @type {?} */
        const service = gspFrameworkService && gspFrameworkService.common;
        return service;
    }
    /**
     * 获取基路径.
     * @param {?=} defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.
     * @return {?}
     */
    static getBasePath(defaultValue = '') {
        /** @type {?} */
        const service = this.getService();
        if (service && service.getBasePath) {
            return service && service.getBasePath && service.getBasePath.get() || defaultValue;
        }
        else {
            /** @type {?} */
            const hash = window.location.hash;
            /** @type {?} */
            const params = this.parseParam(hash);
            /** @type {?} */
            const basePath = params['base-path'] || '';
            return basePath;
        }
    }
    /**
     * 在绝对路径的基础上增加基路径.
     * @param {?} path - 原始地址.
     * @param {?=} defaultValue - 默认值.
     * @return {?}
     */
    static convertPath(path, defaultValue = '') {
        if (!path) {
            return path;
        }
        /** @type {?} */
        const basePath = this.getBasePath(defaultValue);
        if (basePath) {
            /** @type {?} */
            const basePaths = basePath.split('/').filter((p) => p);
            if (basePaths.length > 0) {
                /** @type {?} */
                const baseURL = basePaths.join('/');
                if (path.indexOf('://') > 0 || path.indexOf('//') === 0) {
                    // absolute url, like http://localhost:5200/api/runtime/xxx or http://localhost or //localhost
                    if (path.startsWith('//')) {
                        /** @type {?} */
                        let url = path.slice(2);
                        // url中是否包含基路径
                        if (url.indexOf('/') === -1) {
                            // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path
                            return path + '/' + baseURL;
                        }
                        else {
                            // 包含基路径
                            url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));
                            return '//' + url;
                        }
                    }
                    else {
                        // like http://localhost:5200
                        /** @type {?} */
                        const protocol = path.slice(0, path.indexOf(':') + 1);
                        /** @type {?} */
                        let url = path.slice(path.indexOf(':') + 1);
                        url = url.slice(2);
                        if (url.indexOf('/') === -1) {
                            // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path
                            return path + '/' + baseURL;
                        }
                        else {
                            // 包含基路径
                            url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));
                            return protocol + '//' + url;
                        }
                    }
                    // return path.endsWith('/') ? `${path}${baseURL}/` : `${path}/${baseURL}`;
                }
                else {
                    return path.startsWith('/') ? `/${baseURL}${path}` : `/${baseURL}/${path}`;
                }
            }
            else {
                return path;
            }
        }
        else {
            return path;
        }
    }
    /**
     * @param {?} queryString
     * @return {?}
     */
    static parseParam(queryString) {
        if (!queryString) {
            return {};
        }
        /** @type {?} */
        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((params, hash) => {
            /** @type {?} */
            const split = hash.indexOf('=');
            /** @type {?} */
            const key = hash.slice(0, split);
            /** @type {?} */
            const val = hash.slice(split + 1);
            return Object.assign(params, { [key]: decodeURIComponent(val) });
        }, {});
    }
}
BasePathService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BasePathService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,