{"version":3,"file":"farris-rtf.umd.js.map","sources":["ng://@farris/rtf/lib/core/gsp-framework.service.ts","ng://@farris/rtf/lib/base-path.service.ts","ng://@farris/rtf/lib/common/gsp-framework-common.service.ts","ng://@farris/rtf/lib/providers.ts","ng://@farris/rtf/lib/farris-rtf.module.ts"],"sourcesContent":["import { IGSPFrameworkService } from \"../types\";\r\n\r\nexport class GSPFrameworkService {\r\n  private static gspFrameworkService: IGSPFrameworkService = null;\r\n  /**\r\n   * 获取gspFramework服务\r\n   * @returns\r\n   */\r\n  public static getGSPFrameworkService(): IGSPFrameworkService {\r\n    if (this.gspFrameworkService) {\r\n      return this.gspFrameworkService;\r\n    }\r\n    let env: Window = window;\r\n    while (!(env['gspframeworkService'] && env['gspframeworkService']['common']) && this.isSameOrigin(env) && env !== window.top) {\r\n      env = env.parent;\r\n    }\r\n    this.gspFrameworkService = env['gspframeworkService'];\r\n    return this.gspFrameworkService;\r\n  }\r\n\r\n  private static isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GSPFrameworkService } from './core/gsp-framework.service';\r\n\r\n@Injectable()\r\nexport class BasePathService {\r\n  constructor() { }\r\n  public static getService() {\r\n    const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();\r\n    const service = gspFrameworkService && gspFrameworkService.common;\r\n    return service;\r\n  }\r\n  /**\r\n   * 获取基路径.\r\n   * @param defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.\r\n   * @returns\r\n   */\r\n  public static getBasePath(defaultValue: string = '') {\r\n    const service = this.getService();\r\n    if (service && service.getBasePath) {\r\n      return service && service.getBasePath && service.getBasePath.get() || defaultValue;\r\n    } else {\r\n      const hash = window.location.hash;\r\n      const params = this.parseParam(hash);\r\n      const basePath = params['base-path'] || '';\r\n      return basePath;\r\n    }\r\n  }\r\n  /**\r\n   * 在绝对路径的基础上增加基路径.\r\n   * @param path - 原始地址.\r\n   * @param defaultValue - 默认值.\r\n   * @returns\r\n   */\r\n  public static convertPath(path: string, defaultValue: string = '') {\r\n    if (!path) {\r\n      return path;\r\n    }\r\n    const basePath = this.getBasePath(defaultValue);\r\n    if (basePath) {\r\n      const basePaths = basePath.split('/').filter((p) => p);\r\n      if (basePaths.length > 0) {\r\n        const baseURL = basePaths.join('/');\r\n        if (path.indexOf('://') > 0 || path.indexOf('//') === 0) {\r\n          // absolute url, like http://localhost:5200/api/runtime/xxx or http://localhost or //localhost\r\n          if (path.startsWith('//')) {\r\n            let url = path.slice(2);\r\n            // url中是否包含基路径\r\n            if (url.indexOf('/') === -1) {\r\n              // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path\r\n              return path + '/' + baseURL;\r\n            } else {\r\n              // 包含基路径\r\n              url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));\r\n              return '//' + url;\r\n            }\r\n          } else {\r\n            // like http://localhost:5200\r\n            const protocol = path.slice(0, path.indexOf(':') + 1);\r\n            let url = path.slice(path.indexOf(':') + 1);\r\n            url = url.slice(2);\r\n            if (url.indexOf('/') === -1) {\r\n              // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path\r\n              return path + '/' + baseURL;\r\n            } else {\r\n              // 包含基路径\r\n              url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));\r\n              return protocol + '//' + url;\r\n            }\r\n          }\r\n          // return path.endsWith('/') ? `${path}${baseURL}/` : `${path}/${baseURL}`;\r\n        } else {\r\n          return path.startsWith('/') ? `/${baseURL}${path}` : `/${baseURL}/${path}`;\r\n        }\r\n      } else {\r\n        return path;\r\n      }\r\n    } else {\r\n      return path;\r\n    }\r\n  }\r\n  public static parseParam(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { GSPFrameworkService } from \"../core/gsp-framework.service\";\r\n\r\n@Injectable()\r\nexport class GSPFrameworkCommonService {\r\n  private service = null;\r\n  constructor() {\r\n    const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();\r\n    this.service = gspFrameworkService && gspFrameworkService.common;\r\n  }\r\n  /**\r\n   * 从框架获取基路径\r\n   * @description 从框架获取失败时返回空字符\r\n   */\r\n  public get basePath() {\r\n    return this.service && this.service.getBasePath && this.service.getBasePath.get() || '';\r\n  }\r\n}\r\n","import { GSPFrameworkCommonService } from \"./common/gsp-framework-common.service\";\r\n\r\nexport function resolveBasePath(gspFrameworkCommonService: GSPFrameworkCommonService) {\r\n  return gspFrameworkCommonService && gspFrameworkCommonService.basePath || '';\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { GSPFrameworkCommonService } from './common/gsp-framework-common.service';\nimport { BasePathService } from './base-path.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [],\n  providers: [\n    BasePathService,\n    GSPFrameworkCommonService\n  ]\n})\nexport class FarrisRTFModule { }\n"],"names":["Injectable","NgModule"],"mappings":"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"}
