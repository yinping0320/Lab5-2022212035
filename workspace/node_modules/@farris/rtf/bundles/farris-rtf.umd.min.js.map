{"version":3,"sources":["ng://@farris/rtf/lib/core/gsp-framework.service.ts","ng://@farris/rtf/lib/base-path.service.ts","ng://@farris/rtf/lib/common/gsp-framework-common.service.ts","ng://@farris/rtf/lib/farris-rtf.module.ts","ng://@farris/rtf/lib/providers.ts"],"sourcesContent":["import { IGSPFrameworkService } from \"../types\";\r\n\r\nexport class GSPFrameworkService {\r\n  private static gspFrameworkService: IGSPFrameworkService = null;\r\n  /**\r\n   * 获取gspFramework服务\r\n   * @returns\r\n   */\r\n  public static getGSPFrameworkService(): IGSPFrameworkService {\r\n    if (this.gspFrameworkService) {\r\n      return this.gspFrameworkService;\r\n    }\r\n    let env: Window = window;\r\n    while (!(env['gspframeworkService'] && env['gspframeworkService']['common']) && this.isSameOrigin(env) && env !== window.top) {\r\n      env = env.parent;\r\n    }\r\n    this.gspFrameworkService = env['gspframeworkService'];\r\n    return this.gspFrameworkService;\r\n  }\r\n\r\n  private static isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GSPFrameworkService } from './core/gsp-framework.service';\r\n\r\n@Injectable()\r\nexport class BasePathService {\r\n  constructor() { }\r\n  public static getService() {\r\n    const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();\r\n    const service = gspFrameworkService && gspFrameworkService.common;\r\n    return service;\r\n  }\r\n  /**\r\n   * 获取基路径.\r\n   * @param defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.\r\n   * @returns\r\n   */\r\n  public static getBasePath(defaultValue: string = '') {\r\n    const service = this.getService();\r\n    if (service && service.getBasePath) {\r\n      return service && service.getBasePath && service.getBasePath.get() || defaultValue;\r\n    } else {\r\n      const hash = window.location.hash;\r\n      const params = this.parseParam(hash);\r\n      const basePath = params['base-path'] || '';\r\n      return basePath;\r\n    }\r\n  }\r\n  /**\r\n   * 在绝对路径的基础上增加基路径.\r\n   * @param path - 原始地址.\r\n   * @param defaultValue - 默认值.\r\n   * @returns\r\n   */\r\n  public static convertPath(path: string, defaultValue: string = '') {\r\n    if (!path) {\r\n      return path;\r\n    }\r\n    const basePath = this.getBasePath(defaultValue);\r\n    if (basePath) {\r\n      const basePaths = basePath.split('/').filter((p) => p);\r\n      if (basePaths.length > 0) {\r\n        const baseURL = basePaths.join('/');\r\n        if (path.indexOf('://') > 0 || path.indexOf('//') === 0) {\r\n          // absolute url, like http://localhost:5200/api/runtime/xxx or http://localhost or //localhost\r\n          if (path.startsWith('//')) {\r\n            let url = path.slice(2);\r\n            // url中是否包含基路径\r\n            if (url.indexOf('/') === -1) {\r\n              // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path\r\n              return path + '/' + baseURL;\r\n            } else {\r\n              // 包含基路径\r\n              url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));\r\n              return '//' + url;\r\n            }\r\n          } else {\r\n            // like http://localhost:5200\r\n            const protocol = path.slice(0, path.indexOf(':') + 1);\r\n            let url = path.slice(path.indexOf(':') + 1);\r\n            url = url.slice(2);\r\n            if (url.indexOf('/') === -1) {\r\n              // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path\r\n              return path + '/' + baseURL;\r\n            } else {\r\n              // 包含基路径\r\n              url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));\r\n              return protocol + '//' + url;\r\n            }\r\n          }\r\n          // return path.endsWith('/') ? `${path}${baseURL}/` : `${path}/${baseURL}`;\r\n        } else {\r\n          return path.startsWith('/') ? `/${baseURL}${path}` : `/${baseURL}/${path}`;\r\n        }\r\n      } else {\r\n        return path;\r\n      }\r\n    } else {\r\n      return path;\r\n    }\r\n  }\r\n  public static parseParam(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { GSPFrameworkService } from \"../core/gsp-framework.service\";\r\n\r\n@Injectable()\r\nexport class GSPFrameworkCommonService {\r\n  private service = null;\r\n  constructor() {\r\n    const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();\r\n    this.service = gspFrameworkService && gspFrameworkService.common;\r\n  }\r\n  /**\r\n   * 从框架获取基路径\r\n   * @description 从框架获取失败时返回空字符\r\n   */\r\n  public get basePath() {\r\n    return this.service && this.service.getBasePath && this.service.getBasePath.get() || '';\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { GSPFrameworkCommonService } from './common/gsp-framework-common.service';\nimport { BasePathService } from './base-path.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [],\n  providers: [\n    BasePathService,\n    GSPFrameworkCommonService\n  ]\n})\nexport class FarrisRTFModule { }\n","import { GSPFrameworkCommonService } from \"./common/gsp-framework-common.service\";\r\n\r\nexport function resolveBasePath(gspFrameworkCommonService: GSPFrameworkCommonService) {\r\n  return gspFrameworkCommonService && gspFrameworkCommonService.basePath || '';\r\n}\r\n"],"names":["GSPFrameworkService","getGSPFrameworkService","this","gspFrameworkService","env","window","isSameOrigin","top","parent","environment","host","location","e","BasePathService","getService","common","getBasePath","defaultValue","service","get","hash","parseParam","convertPath","path","protocol","url","basePath","basePaths","split","filter","p","length","baseURL","join","indexOf","startsWith","slice","queryString","reduce","params","key","val","Object","assign","_a","decodeURIComponent","Injectable","defineProperty","GSPFrameworkCommonService","prototype","NgModule","args","declarations","imports","exports","providers","FarrisRTFModule","gspFrameworkCommonService"],"mappings":"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"}