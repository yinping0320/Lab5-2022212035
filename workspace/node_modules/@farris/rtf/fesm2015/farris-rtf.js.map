{"version":3,"file":"farris-rtf.js.map","sources":["ng://@farris/rtf/lib/core/gsp-framework.service.ts","ng://@farris/rtf/lib/base-path.service.ts","ng://@farris/rtf/lib/common/gsp-framework-common.service.ts","ng://@farris/rtf/lib/providers.ts","ng://@farris/rtf/lib/farris-rtf.module.ts"],"sourcesContent":["import { IGSPFrameworkService } from \"../types\";\r\n\r\nexport class GSPFrameworkService {\r\n  private static gspFrameworkService: IGSPFrameworkService = null;\r\n  /**\r\n   * 获取gspFramework服务\r\n   * @returns\r\n   */\r\n  public static getGSPFrameworkService(): IGSPFrameworkService {\r\n    if (this.gspFrameworkService) {\r\n      return this.gspFrameworkService;\r\n    }\r\n    let env: Window = window;\r\n    while (!(env['gspframeworkService'] && env['gspframeworkService']['common']) && this.isSameOrigin(env) && env !== window.top) {\r\n      env = env.parent;\r\n    }\r\n    this.gspFrameworkService = env['gspframeworkService'];\r\n    return this.gspFrameworkService;\r\n  }\r\n\r\n  private static isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GSPFrameworkService } from './core/gsp-framework.service';\r\n\r\n@Injectable()\r\nexport class BasePathService {\r\n  constructor() { }\r\n  public static getService() {\r\n    const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();\r\n    const service = gspFrameworkService && gspFrameworkService.common;\r\n    return service;\r\n  }\r\n  /**\r\n   * 获取基路径.\r\n   * @param defaultValue - 当基路径为空或不存在时使用的默认值，默认为空字符.\r\n   * @returns\r\n   */\r\n  public static getBasePath(defaultValue: string = '') {\r\n    const service = this.getService();\r\n    if (service && service.getBasePath) {\r\n      return service && service.getBasePath && service.getBasePath.get() || defaultValue;\r\n    } else {\r\n      const hash = window.location.hash;\r\n      const params = this.parseParam(hash);\r\n      const basePath = params['base-path'] || '';\r\n      return basePath;\r\n    }\r\n  }\r\n  /**\r\n   * 在绝对路径的基础上增加基路径.\r\n   * @param path - 原始地址.\r\n   * @param defaultValue - 默认值.\r\n   * @returns\r\n   */\r\n  public static convertPath(path: string, defaultValue: string = '') {\r\n    if (!path) {\r\n      return path;\r\n    }\r\n    const basePath = this.getBasePath(defaultValue);\r\n    if (basePath) {\r\n      const basePaths = basePath.split('/').filter((p) => p);\r\n      if (basePaths.length > 0) {\r\n        const baseURL = basePaths.join('/');\r\n        if (path.indexOf('://') > 0 || path.indexOf('//') === 0) {\r\n          // absolute url, like http://localhost:5200/api/runtime/xxx or http://localhost or //localhost\r\n          if (path.startsWith('//')) {\r\n            let url = path.slice(2);\r\n            // url中是否包含基路径\r\n            if (url.indexOf('/') === -1) {\r\n              // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path\r\n              return path + '/' + baseURL;\r\n            } else {\r\n              // 包含基路径\r\n              url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));\r\n              return '//' + url;\r\n            }\r\n          } else {\r\n            // like http://localhost:5200\r\n            const protocol = path.slice(0, path.indexOf(':') + 1);\r\n            let url = path.slice(path.indexOf(':') + 1);\r\n            url = url.slice(2);\r\n            if (url.indexOf('/') === -1) {\r\n              // 不包含基路径，域名+端口, convert from //localhost:5200 to //localhost:5200/base_path\r\n              return path + '/' + baseURL;\r\n            } else {\r\n              // 包含基路径\r\n              url = url.slice(0, url.indexOf('/')) + '/' + baseURL + url.slice(url.indexOf('/'));\r\n              return protocol + '//' + url;\r\n            }\r\n          }\r\n          // return path.endsWith('/') ? `${path}${baseURL}/` : `${path}/${baseURL}`;\r\n        } else {\r\n          return path.startsWith('/') ? `/${baseURL}${path}` : `/${baseURL}/${path}`;\r\n        }\r\n      } else {\r\n        return path;\r\n      }\r\n    } else {\r\n      return path;\r\n    }\r\n  }\r\n  public static parseParam(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { GSPFrameworkService } from \"../core/gsp-framework.service\";\r\n\r\n@Injectable()\r\nexport class GSPFrameworkCommonService {\r\n  private service = null;\r\n  constructor() {\r\n    const gspFrameworkService = GSPFrameworkService.getGSPFrameworkService();\r\n    this.service = gspFrameworkService && gspFrameworkService.common;\r\n  }\r\n  /**\r\n   * 从框架获取基路径\r\n   * @description 从框架获取失败时返回空字符\r\n   */\r\n  public get basePath() {\r\n    return this.service && this.service.getBasePath && this.service.getBasePath.get() || '';\r\n  }\r\n}\r\n","import { GSPFrameworkCommonService } from \"./common/gsp-framework-common.service\";\r\n\r\nexport function resolveBasePath(gspFrameworkCommonService: GSPFrameworkCommonService) {\r\n  return gspFrameworkCommonService && gspFrameworkCommonService.basePath || '';\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { GSPFrameworkCommonService } from './common/gsp-framework-common.service';\nimport { BasePathService } from './base-path.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [],\n  providers: [\n    BasePathService,\n    GSPFrameworkCommonService\n  ]\n})\nexport class FarrisRTFModule { }\n"],"names":[],"mappings":"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"}
