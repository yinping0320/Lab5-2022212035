/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { LookupComponent } from '@farris/ui-lookup';
import { of } from 'rxjs';
export class LookupDirective {
    constructor() {
        this.onSelectRows = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.lookup) {
            this.lookup.dictPicked = (/**
             * @param {?} rows
             * @return {?}
             */
            (rows) => {
                if (this.onSelectRows) {
                    this.onSelectRows.emit({ code: this.code, rows: [].concat(rows) });
                }
                /** @type {?} */
                const result = {
                    closeDialog: true
                };
                return of(result);
            });
        }
    }
}
LookupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lookup-extra]'
            },] }
];
/** @nocollapse */
LookupDirective.ctorParameters = () => [];
LookupDirective.propDecorators = {
    code: [{ type: Input, args: ['lookup-extra',] }],
    lookup: [{ type: Input, args: ['ins',] }],
    onSelectRows: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LookupDirective.prototype.code;
    /** @type {?} */
    LookupDirective.prototype.lookup;
    /** @type {?} */
    LookupDirective.prototype.onSelectRows;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmVhdHVyZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvbG9va3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFLMUIsTUFBTSxPQUFPLGVBQWU7SUFLMUI7UUFEVSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRXBFLENBQUM7Ozs7SUFDRCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVOzs7O1lBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRTtnQkFDckMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtpQkFDbkU7O3NCQUNLLE1BQU0sR0FBRztvQkFDYixXQUFXLEVBQUUsSUFBSTtpQkFDbEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFBLENBQUM7U0FDSDtJQUNILENBQUM7OztZQXRCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7Ozs7bUJBRUUsS0FBSyxTQUFDLGNBQWM7cUJBRXBCLEtBQUssU0FBQyxLQUFLOzJCQUNYLE1BQU07Ozs7SUFIUCwrQkFDb0I7O0lBQ3BCLGlDQUFzQzs7SUFDdEMsdUNBQW9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExvb2t1cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2xvb2t1cC1leHRyYV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICBASW5wdXQoJ2xvb2t1cC1leHRyYScpXHJcbiAgcHVibGljIGNvZGU6IHN0cmluZztcclxuICBASW5wdXQoJ2lucycpIGxvb2t1cDogTG9va3VwQ29tcG9uZW50O1xyXG4gIEBPdXRwdXQoKSBvblNlbGVjdFJvd3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmxvb2t1cCkge1xyXG4gICAgICB0aGlzLmxvb2t1cC5kaWN0UGlja2VkID0gKHJvd3M6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm9uU2VsZWN0Um93cykge1xyXG4gICAgICAgICAgdGhpcy5vblNlbGVjdFJvd3MuZW1pdCh7IGNvZGU6IHRoaXMuY29kZSwgcm93czogW10uY29uY2F0KHJvd3MpIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICAgIGNsb3NlRGlhbG9nOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gb2YocmVzdWx0KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=