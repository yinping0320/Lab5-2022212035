/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, EventEmitter, Injectable, Injector, LOCALE_ID } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { LocaleService } from '@farris/ui-locale';
import { FeatureEditorComponent } from './feature-editor.component';
import { I18nService } from './i18n-service';
import { isObservable, of } from 'rxjs';
import { EventManager } from '@angular/platform-browser';
export class FeatureEditorService {
    /**
     * @param {?} injector
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} localeService
     * @param {?} languageService
     */
    constructor(injector, modalService, componentFactoryResolver, localeService, languageService) {
        this.injector = injector;
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.localeService = localeService;
        this.languageService = languageService;
        this.dialog = null;
        this.componentRef = null;
        this.keyDownHandler = null;
        this.onUserConfirmed = new EventEmitter();
        if (!this.languageService) {
            /** @type {?} */
            const localeId = this.injector.get(LOCALE_ID, 'zh-CHS');
            this.languageService = new I18nService(localeId);
        }
        this.eventManager = this.injector.get(EventManager, null);
    }
    /**
     * 弹出特性编辑器
     * @param {?} features 特征数组
     * @param {?=} options 弹窗配置
     * @return {?}
     */
    show(features, options) {
        if (!features || features.length < 1) {
            return;
        }
        this.canOpen(options).subscribe((/**
         * @param {?} canOpen
         * @return {?}
         */
        (canOpen) => {
            if (!canOpen) {
                return;
            }
            /** @type {?} */
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(FeatureEditorComponent);
            this.componentRef = componentFactory.create(this.injector);
            this.componentRef.instance.features = features;
            /** @type {?} */
            const titleText = this.languageService.title;
            /** @type {?} */
            const okText = this.localeService.getValue('batchEditDialog.okText');
            /** @type {?} */
            const cancelText = this.localeService.getValue('batchEditDialog.cancelText');
            const { width = 470, height = 500, title = titleText } = options || {};
            /** @type {?} */
            const modalOptions = {
                title,
                width,
                height,
                buttons: [
                    {
                        text: cancelText, cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dialog.close();
                        })
                    },
                    {
                        text: okText, cls: 'btn btn-primary',
                        handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.onConfirmClick(options);
                        })
                    }
                ],
                showButtons: true,
                areaResponse: true,
                opened: (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.registerShortcutKey(options, e.instance);
                }),
                closed: (/**
                 * @return {?}
                 */
                () => {
                    if (this.keyDownHandler) {
                        this.keyDownHandler();
                        this.keyDownHandler = null;
                    }
                })
            };
            this.dialog = this.modalService.show(this.componentRef, modalOptions);
        }));
    }
    /**
     * @private
     * @param {?} options
     * @param {?} dialogRef
     * @return {?}
     */
    registerShortcutKey(options, dialogRef) {
        // 回车，与确定按钮处理逻辑一至。
        /** @type {?} */
        const dlgContainerDom = dialogRef.dialog.location.nativeElement;
        if (dlgContainerDom && !this.keyDownHandler) {
            this.keyDownHandler = this.eventManager.addEventListener(dlgContainerDom, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                if (e.key === 'Enter') {
                    // if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {
                    //     return;
                    // }
                    this.onConfirmClick(options);
                }
                else if (e.key === 'Escape') {
                    this.dialog.close();
                }
                else if (e.key === 'Tab') {
                    this.onTabKeydownHandler(e.target);
                }
            }));
        }
        if (this.componentRef) {
            this.setFirstInputFocus();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFirstInputFocus() {
        /** @type {?} */
        const firstInputEl = this.componentRef.location.nativeElement.querySelector('input,textarea');
        if (firstInputEl) {
            firstInputEl.focus();
        }
    }
    /**
     * @private
     * @param {?} currentTarget
     * @return {?}
     */
    onTabKeydownHandler(currentTarget) {
        /** @type {?} */
        let allInputs = this.componentRef.location.nativeElement.querySelectorAll('input,textarea');
        allInputs = Array.from(allInputs);
        /** @type {?} */
        const currentInputIndex = allInputs.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === currentTarget));
        /** @type {?} */
        let nextInputIndex = currentInputIndex + 1;
        if (nextInputIndex >= allInputs.length) {
            nextInputIndex = 0;
        }
        /** @type {?} */
        const nextInputTarget = allInputs[nextInputIndex];
        if (nextInputTarget) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                nextInputTarget.focus();
            }));
        }
    }
    /**
     * 用户点击确认按钮
     * @private
     * @param {?=} options
     * @return {?}
     */
    onConfirmClick(options) {
        this.canClose(options).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result === true) {
                this.onConfirm(options);
            }
        }));
    }
    /**
     * 确认
     * @private
     * @param {?=} options options
     * @return {?}
     */
    onConfirm(options) {
        /** @type {?} */
        const features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];
        this.dialog.close();
        if (options.onConfirm && typeof options.onConfirm) {
            options.onConfirm(features);
        }
        this.onUserConfirmed.next(features);
    }
    /**
     * 是否可以关闭
     * @private
     * @param {?=} options options
     * @return {?}
     */
    canClose(options) {
        /** @type {?} */
        const features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];
        /** @type {?} */
        const onConfirmingRef = options && options.onConfirming || null;
        if (!onConfirmingRef) {
            return of(true);
        }
        // 有确认前事件
        /** @type {?} */
        const onConfirming = onConfirmingRef(features);
        if (isObservable(onConfirming)) {
            return onConfirming;
        }
        else {
            return of(onConfirming);
        }
    }
    /**
     * 是否可以弹出特性编辑器
     * @private
     * @param {?=} options options
     * @return {?}
     */
    canOpen(options) {
        /** @type {?} */
        const onOpeningHandlerRef = options && options.onOpening || null;
        if (!onOpeningHandlerRef) {
            return of(true);
        }
        /** @type {?} */
        const onOpeningHandler = onOpeningHandlerRef(options);
        if (isObservable(onOpeningHandler)) {
            return onOpeningHandler;
        }
        else {
            return of(onOpeningHandler);
        }
    }
}
FeatureEditorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureEditorService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: LocaleService },
    { type: I18nService }
];
if (false) {
    /** @type {?} */
    FeatureEditorService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.keyDownHandler;
    /** @type {?} */
    FeatureEditorService.prototype.onUserConfirmed;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.eventManager;
    /** @type {?} */
    FeatureEditorService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,