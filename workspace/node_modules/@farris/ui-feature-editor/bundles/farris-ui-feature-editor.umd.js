(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('rxjs/operators'), require('@angular/platform-browser'), require('@angular/common'), require('@angular/forms'), require('@farris/ui-forms'), require('@farris/ui-lookup'), require('@farris/ui-combo-list'), require('@farris/ui-input-group'), require('@farris/ui-modal'), require('@farris/ui-datepicker'), require('@farris/ui-number-spinner'), require('@farris/ui-time-picker'), require('@farris/ui-locale'), require('@farris/ui-switch'), require('@farris/ui-section'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-feature-editor', ['exports', '@angular/common/http', 'rxjs/operators', '@angular/platform-browser', '@angular/common', '@angular/forms', '@farris/ui-forms', '@farris/ui-lookup', '@farris/ui-combo-list', '@farris/ui-input-group', '@farris/ui-modal', '@farris/ui-datepicker', '@farris/ui-number-spinner', '@farris/ui-time-picker', '@farris/ui-locale', '@farris/ui-switch', '@farris/ui-section', '@angular/core', 'rxjs'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-feature-editor'] = {}),global.ng.common.http,global.rxjs.operators,global.ng.platformBrowser,global.ng.common,global.ng.forms,global.uiForms,global.uiLookup,global.uiComboList,global.uiInputGroup,global.uiModal,global.uiDatepicker,global.uiNumberSpinner,global.uiTimePicker,global.uiLocale,global.uiSwitch,global.uiSection,global.ng.core,global.rxjs));
}(this, (function (exports,http,operators,platformBrowser,common,forms,uiForms,uiLookup,uiComboList,uiInputGroup,uiModal,uiDatepicker,uiNumberSpinner,uiTimePicker,uiLocale,uiSwitch,uiSection,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var InputType = {
        Help: 'Help',
        String: 'String',
        Enum: 'Enum',
        Date: 'Date',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupService = /** @class */ (function () {
        function LookupService(http$$1) {
            this.http = http$$1;
        }
        /**
         * @param {?} url
         * @param {?} params
         * @return {?}
         */
        LookupService.prototype.getData = /**
         * @param {?} url
         * @param {?} params
         * @return {?}
         */
            function (url, params) {
                /** @type {?} */
                var urls = url.split(':');
                /** @type {?} */
                var realUrl = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';
                /** @type {?} */
                var helpID = urls[0] === '1' ? '9e2dca82-0aa2-4394-b26d-cb91164f44d5' : '344ffc53-7167-48d1-866b-a84083404e9e';
                /** @type {?} */
                var filter = 'setid:' + urls[1] + '&' + 'state_isenabled:1';
                /** @type {?} */
                var httpParams = {};
                if (params) {
                    if (params.pageIndex) {
                        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
                    }
                    if (params.pageSize) {
                        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
                    }
                    if (params.condition) {
                        httpParams['condition'] = JSON.stringify(params.condition);
                    }
                    if (params.searchValue) {
                        httpParams['search'] = params.searchValue;
                    }
                }
                return this.http.put(realUrl, {
                    helpID: helpID,
                    queryParam: JSON.stringify(httpParams),
                    filterStr: filter
                }).pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) { return JSON.parse(data.returnValue); })));
            };
        LookupService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LookupService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return LookupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeatureEditorComponent = /** @class */ (function () {
        function FeatureEditorComponent(localeService) {
            this.localeService = localeService;
            if (this.localeService) {
                this.localeId = this.localeService.localeId;
            }
        }
        /**
         * @return {?}
         */
        FeatureEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 帮助选择数据后的回调
         * @param event event
         */
        /**
         * 帮助选择数据后的回调
         * @param {?} event event
         * @return {?}
         */
        FeatureEditorComponent.prototype.onSelectRows = /**
         * 帮助选择数据后的回调
         * @param {?} event event
         * @return {?}
         */
            function (event) {
                var _a = event || {}, _b = _a.code, code = _b === void 0 ? null : _b, _c = _a.rows, rows = _c === void 0 ? [] : _c;
                if (code) {
                    /** @type {?} */
                    var item = this.features.find(( /**
                     * @param {?} feature
                     * @return {?}
                     */function (feature) { return feature.field === code; }));
                    item.results = rows;
                }
            };
        FeatureEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-feature-editor',
                        template: "<farris-section class=\"f-section-form f-section-in-mainsubcard\" [showHeader]=\"false\" [enableMaximize]=\"false\">\r\n  <div class=\"f-form-layout farris-form-controls-inline\" [class.farris-form-controls-inline]=\"true\">\r\n    <div class=\"col-12 col-md-6 col-xl-3 col-el-2\"  *ngFor=\"let feature of features;let row = index\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label class=\"col-form-label\" title=\"feature?.title\" for=\"{{feature?.id}}\"><span\r\n              class=\"farris-label-info text-danger\" *ngIf=\"feature?.options.required\">*</span><span\r\n              class=\"farris-label-text\">{{feature?.title}}</span></label>\r\n          <div class=\"farris-input-wrap\">\r\n            <!--\u5E2E\u52A9-->\r\n          <ng-template [ngIf]=\"feature?.editor?.controlType==='lookup'\">\r\n            <!-- <ng-container *ngTemplateOutlet=\"lookupTemplate;context:input\"></ng-container> -->\r\n            <farris-lookup-grid #lookupGrid [lookup-extra]=\"feature?.field\" [ins]=\"lookupGrid\" [enableClear]='feature?.options?.enableClear || false'\r\n              (onSelectRows)=\"onSelectRows($event)\" input-end-edit [uri]=\"feature?.options?.uri\" [editable]=\"feature?.options?.editable || false\"\r\n              [mapFields]=\"feature?.options?.mapFields\" [displayType]=\"feature?.options?.displayType || 'List'\"\r\n              [idField]=\"feature?.options?.idField\" [singleSelect]=\"feature?.options?.singleSelect || true\"\r\n              [pageSize]=\"feature?.options?.pageSize\" [pageIndex]=\"1\" [pagination]=\"feature?.options?.pagination\"\r\n              [textField]=\"feature?.options?.textField\" [valueField]=\"feature?.options?.valueField\"\r\n              [title]=\"feature?.options?.dialogTitle\" [showMaxButton]=\"feature?.options?.showMaxButton\"\r\n              [showCloseButton]=\"feature?.options?.showCloseButton\" [resizable]=\"feature?.options?.resizable\"\r\n              [context]=\"feature?.options?.context\" [expandLevel]=\"feature?.options?.expandLevel\"\r\n              [isRecordSize]=\"feature?.options?.isRecordSize\" [enableFullTree]=\"feature?.options?.enableFullTree\"\r\n              [loadTreeDataType]=\"'default'\" [(ngModel)]=\"feature.value\" [bindingData]=\"feature?.options?.data\" [dictPicking]=\"feature?.options?.dictPicking\" [dictPicked]=\"feature?.options?.dictPicked\">\r\n            </farris-lookup-grid>\r\n          </ng-template>\r\n          <!--\u8F93\u5165\u6846-->\r\n          <ng-template\r\n            [ngIf]=\"feature?.editor?.controlType==='textbox' ||feature?.editor?.controlType==='textarea' || feature?.editor?.controlType === 'input-group'\">\r\n            <!-- <ng-container *ngTemplateOutlet=\"textboxTemplate;context:input\"></ng-container> -->\r\n            <input-group [(ngModel)]=\"feature.value\"></input-group>\r\n          </ng-template>\r\n          <!--\u65E5\u671F-->\r\n          <ng-template [ngIf]=\"feature?.editor?.controlType === 'datepicker'\">\r\n            <!-- <ng-container *ngTemplateOutlet=\"datepickerTemplate;context:input\"></ng-container> -->\r\n            <farris-datepicker [(ngModel)]=\"feature.value\" [dateRange]=\"feature?.options?.dateRange\">\r\n            </farris-datepicker>\r\n          </ng-template>\r\n          <!--\u6570\u5B57-->\r\n          <ng-template [ngIf]=\"feature?.editor?.controlType === 'numberbox'\">\r\n            <!-- <ng-container *ngTemplateOutlet=\"numberboxTemplate;context:input\"></ng-container> -->\r\n            <farris-number-spinner [(ngModel)]=\"feature.value\" [min]=\"feature?.options?.min\"\r\n              [max]=\"feature?.options?.max\" [precision]=\"feature?.options?.precision\" [step]=\"feature?.options?.step\">\r\n            </farris-number-spinner>\r\n          </ng-template>\r\n          <!--\u4E0B\u62C9-->\r\n          <ng-template\r\n            [ngIf]=\"feature?.editor?.controlType === 'combolist' || feature?.editor?.controlType === 'select'\">\r\n            <!-- <ng-container *ngTemplateOutlet=\"combolistTemplate;context:input\"></ng-container> -->\r\n            <farris-combo-list [(ngModel)]=\"feature.value\"\r\n              [idField]=\"feature?.options?.valueField || feature?.options?.idField || 'id'\"\r\n              [textField]=\"feature?.options?.textField ||'label'\" [data]=\"feature?.options?.data\">\r\n            </farris-combo-list>\r\n          </ng-template>\r\n          <!--\u65F6\u95F4-->\r\n          <ng-template [ngIf]=\"feature?.editor?.controlType === 'timepicker'\">\r\n            <!-- <ng-container *ngTemplateOutlet=\"timepickerTemplate;context:input\"></ng-container> -->\r\n            <farris-time-picker [(ngModel)]=\"feature.value\" [use12Hours]=\"feature?.options?.use12Hours\">\r\n            </farris-time-picker>\r\n          </ng-template>\r\n          <!--\u590D\u9009\u6846-->\r\n          <ng-template [ngIf]=\"feature?.editor?.controlType === 'checkbox'\">\r\n            <div class=\"custom-control custom-checkbox f-checkradio-single pl-5\">\r\n              <input [id]=\"feature.id\" class=\"custom-control-input\" type=\"checkbox\" [(ngModel)]=\"feature.value\">\r\n              <label class=\"custom-control-label\" [for]=\"feature.id\"></label>\r\n            </div>\r\n          </ng-template>\r\n          <!--\u5F00\u5173-->\r\n          <ng-template [ngIf]=\"feature?.editor?.controlType === 'switch'\">\r\n            <farris-switch [(ngModel)]=\"feature.value\" class=\"ml-5\">\r\n            </farris-switch>\r\n          </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-section>",
                        styles: ['feature-editor.component.css']
                    }] }
        ];
        /** @nocollapse */
        FeatureEditorComponent.ctorParameters = function () {
            return [
                { type: uiLocale.LocaleService }
            ];
        };
        FeatureEditorComponent.propDecorators = {
            features: [{ type: core.Input }]
        };
        return FeatureEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nService = /** @class */ (function () {
        function I18nService(localeId) {
            this.localeId = localeId;
        }
        Object.defineProperty(I18nService.prototype, "title", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var result = '特性编辑器';
                switch (this.localeId) {
                    case 'en':
                        result = 'Feature Editor';
                        break;
                    case 'zh-CHT':
                        result = '特性編輯器';
                        break;
                    default: break;
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        I18nService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        I18nService.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.LOCALE_ID,] }] }
            ];
        };
        return I18nService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeatureEditorService = /** @class */ (function () {
        function FeatureEditorService(injector, modalService, componentFactoryResolver, localeService, languageService) {
            this.injector = injector;
            this.modalService = modalService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.localeService = localeService;
            this.languageService = languageService;
            this.dialog = null;
            this.componentRef = null;
            this.keyDownHandler = null;
            this.onUserConfirmed = new core.EventEmitter();
            if (!this.languageService) {
                /** @type {?} */
                var localeId = this.injector.get(core.LOCALE_ID, 'zh-CHS');
                this.languageService = new I18nService(localeId);
            }
            this.eventManager = this.injector.get(platformBrowser.EventManager, null);
        }
        /**
         * 弹出特性编辑器
         * @param features 特征数组
         * @param options 弹窗配置
         * @returns
         */
        /**
         * 弹出特性编辑器
         * @param {?} features 特征数组
         * @param {?=} options 弹窗配置
         * @return {?}
         */
        FeatureEditorService.prototype.show = /**
         * 弹出特性编辑器
         * @param {?} features 特征数组
         * @param {?=} options 弹窗配置
         * @return {?}
         */
            function (features, options) {
                var _this = this;
                if (!features || features.length < 1) {
                    return;
                }
                this.canOpen(options).subscribe(( /**
                 * @param {?} canOpen
                 * @return {?}
                 */function (canOpen) {
                    if (!canOpen) {
                        return;
                    }
                    /** @type {?} */
                    var componentFactory = _this.componentFactoryResolver.resolveComponentFactory(FeatureEditorComponent);
                    _this.componentRef = componentFactory.create(_this.injector);
                    _this.componentRef.instance.features = features;
                    /** @type {?} */
                    var titleText = _this.languageService.title;
                    /** @type {?} */
                    var okText = _this.localeService.getValue('batchEditDialog.okText');
                    /** @type {?} */
                    var cancelText = _this.localeService.getValue('batchEditDialog.cancelText');
                    var _a = options || {}, _b = _a.width, width = _b === void 0 ? 470 : _b, _c = _a.height, height = _c === void 0 ? 500 : _c, _d = _a.title, title = _d === void 0 ? titleText : _d;
                    /** @type {?} */
                    var modalOptions = {
                        title: title,
                        width: width,
                        height: height,
                        buttons: [
                            {
                                text: cancelText, cls: 'btn btn-secondary', handle: ( /**
                                 * @return {?}
                                 */function () {
                                    _this.dialog.close();
                                })
                            },
                            {
                                text: okText, cls: 'btn btn-primary',
                                handle: ( /**
                                 * @return {?}
                                 */function () {
                                    _this.onConfirmClick(options);
                                })
                            }
                        ],
                        showButtons: true,
                        areaResponse: true,
                        opened: ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            _this.registerShortcutKey(options, e.instance);
                        }),
                        closed: ( /**
                         * @return {?}
                         */function () {
                            if (_this.keyDownHandler) {
                                _this.keyDownHandler();
                                _this.keyDownHandler = null;
                            }
                        })
                    };
                    _this.dialog = _this.modalService.show(_this.componentRef, modalOptions);
                }));
            };
        /**
         * @private
         * @param {?} options
         * @param {?} dialogRef
         * @return {?}
         */
        FeatureEditorService.prototype.registerShortcutKey = /**
         * @private
         * @param {?} options
         * @param {?} dialogRef
         * @return {?}
         */
            function (options, dialogRef) {
                var _this = this;
                // 回车，与确定按钮处理逻辑一至。
                /** @type {?} */
                var dlgContainerDom = dialogRef.dialog.location.nativeElement;
                if (dlgContainerDom && !this.keyDownHandler) {
                    this.keyDownHandler = this.eventManager.addEventListener(dlgContainerDom, 'keydown', ( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        e.stopPropagation();
                        if (e.key === 'Enter') {
                            // if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {
                            //     return;
                            // }
                            _this.onConfirmClick(options);
                        }
                        else if (e.key === 'Escape') {
                            _this.dialog.close();
                        }
                        else if (e.key === 'Tab') {
                            _this.onTabKeydownHandler(e.target);
                        }
                    }));
                }
                if (this.componentRef) {
                    this.setFirstInputFocus();
                }
            };
        /**
         * @private
         * @return {?}
         */
        FeatureEditorService.prototype.setFirstInputFocus = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var firstInputEl = this.componentRef.location.nativeElement.querySelector('input,textarea');
                if (firstInputEl) {
                    firstInputEl.focus();
                }
            };
        /**
         * @private
         * @param {?} currentTarget
         * @return {?}
         */
        FeatureEditorService.prototype.onTabKeydownHandler = /**
         * @private
         * @param {?} currentTarget
         * @return {?}
         */
            function (currentTarget) {
                /** @type {?} */
                var allInputs = this.componentRef.location.nativeElement.querySelectorAll('input,textarea');
                allInputs = Array.from(allInputs);
                /** @type {?} */
                var currentInputIndex = allInputs.findIndex(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n === currentTarget; }));
                /** @type {?} */
                var nextInputIndex = currentInputIndex + 1;
                if (nextInputIndex >= allInputs.length) {
                    nextInputIndex = 0;
                }
                /** @type {?} */
                var nextInputTarget = allInputs[nextInputIndex];
                if (nextInputTarget) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        nextInputTarget.focus();
                    }));
                }
            };
        /**
         * 用户点击确认按钮
         */
        /**
         * 用户点击确认按钮
         * @private
         * @param {?=} options
         * @return {?}
         */
        FeatureEditorService.prototype.onConfirmClick = /**
         * 用户点击确认按钮
         * @private
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                this.canClose(options).subscribe(( /**
                 * @param {?} result
                 * @return {?}
                 */function (result) {
                    if (result === true) {
                        _this.onConfirm(options);
                    }
                }));
            };
        /**
         * 确认
         * @param options options
         */
        /**
         * 确认
         * @private
         * @param {?=} options options
         * @return {?}
         */
        FeatureEditorService.prototype.onConfirm = /**
         * 确认
         * @private
         * @param {?=} options options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];
                this.dialog.close();
                if (options.onConfirm && typeof options.onConfirm) {
                    options.onConfirm(features);
                }
                this.onUserConfirmed.next(features);
            };
        /**
         * 是否可以关闭
         * @param options options
         * @returns
         */
        /**
         * 是否可以关闭
         * @private
         * @param {?=} options options
         * @return {?}
         */
        FeatureEditorService.prototype.canClose = /**
         * 是否可以关闭
         * @private
         * @param {?=} options options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];
                /** @type {?} */
                var onConfirmingRef = options && options.onConfirming || null;
                if (!onConfirmingRef) {
                    return rxjs.of(true);
                }
                // 有确认前事件
                /** @type {?} */
                var onConfirming = onConfirmingRef(features);
                if (rxjs.isObservable(onConfirming)) {
                    return onConfirming;
                }
                else {
                    return rxjs.of(onConfirming);
                }
            };
        /**
         * 是否可以弹出特性编辑器
         * @param options options
         * @returns
         */
        /**
         * 是否可以弹出特性编辑器
         * @private
         * @param {?=} options options
         * @return {?}
         */
        FeatureEditorService.prototype.canOpen = /**
         * 是否可以弹出特性编辑器
         * @private
         * @param {?=} options options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var onOpeningHandlerRef = options && options.onOpening || null;
                if (!onOpeningHandlerRef) {
                    return rxjs.of(true);
                }
                /** @type {?} */
                var onOpeningHandler = onOpeningHandlerRef(options);
                if (rxjs.isObservable(onOpeningHandler)) {
                    return onOpeningHandler;
                }
                else {
                    return rxjs.of(onOpeningHandler);
                }
            };
        FeatureEditorService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FeatureEditorService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiModal.BsModalService },
                { type: core.ComponentFactoryResolver },
                { type: uiLocale.LocaleService },
                { type: I18nService }
            ];
        };
        return FeatureEditorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupDirective = /** @class */ (function () {
        function LookupDirective() {
            this.onSelectRows = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        LookupDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.lookup) {
                    this.lookup.dictPicked = ( /**
                     * @param {?} rows
                     * @return {?}
                     */function (rows) {
                        if (_this.onSelectRows) {
                            _this.onSelectRows.emit({ code: _this.code, rows: [].concat(rows) });
                        }
                        /** @type {?} */
                        var result = {
                            closeDialog: true
                        };
                        return rxjs.of(result);
                    });
                }
            };
        LookupDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lookup-extra]'
                    },] }
        ];
        /** @nocollapse */
        LookupDirective.ctorParameters = function () { return []; };
        LookupDirective.propDecorators = {
            code: [{ type: core.Input, args: ['lookup-extra',] }],
            lookup: [{ type: core.Input, args: ['ins',] }],
            onSelectRows: [{ type: core.Output }]
        };
        return LookupDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeatureEditorModule = /** @class */ (function () {
        function FeatureEditorModule() {
        }
        FeatureEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FeatureEditorComponent,
                            LookupDirective
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiForms.FarrisFormsModule,
                            uiLookup.LookupModule,
                            uiComboList.ComboListModule,
                            uiInputGroup.InputGroupModule,
                            uiModal.ModalModule,
                            uiDatepicker.FarrisDatePickerModule,
                            uiNumberSpinner.NumberSpinnerModule,
                            uiTimePicker.TimePickerModule,
                            uiSwitch.SwitchModule,
                            uiSection.FarrisSectionModule,
                            uiLocale.LocaleModule.forRoot(),
                        ],
                        exports: [
                            FeatureEditorComponent,
                            LookupDirective
                        ],
                        entryComponents: [
                            FeatureEditorComponent
                        ],
                        providers: [
                            I18nService
                        ]
                    },] }
        ];
        return FeatureEditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.InputType = InputType;
    exports.LookupService = LookupService;
    exports.FeatureEditorService = FeatureEditorService;
    exports.I18nService = I18nService;
    exports.FeatureEditorComponent = FeatureEditorComponent;
    exports.FeatureEditorModule = FeatureEditorModule;
    exports.ɵa = LookupDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-feature-editor.umd.js.map