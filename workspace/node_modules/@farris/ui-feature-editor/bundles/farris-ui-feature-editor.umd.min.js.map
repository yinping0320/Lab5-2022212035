{"version":3,"sources":["ng://@farris/ui-feature-editor/lib/lookup.service.ts","ng://@farris/ui-feature-editor/lib/feature-editor.component.ts","ng://@farris/ui-feature-editor/lib/i18n-service.ts","ng://@farris/ui-feature-editor/lib/feature-editor.service.ts","ng://@farris/ui-feature-editor/lib/lookup.directive.ts","ng://@farris/ui-feature-editor/lib/feature-editor.module.ts","ng://@farris/ui-feature-editor/lib/type.ts"],"names":["LookupService","prototype","getData","url","params","urls","split","helpID","filter","httpParams","pageIndex","JSON","stringify","pageSize","condition","searchValue","this","http","put","queryParam","filterStr","pipe","map","data","parse","returnValue","Injectable","HttpClient","FeatureEditorComponent","ngOnInit","onSelectRows","event","_a","_b","code","_c","rows","features","find","feature","field","results","Component","args","selector","template","LocaleService","Input","localeService","localeId","I18nService","Object","defineProperty","result","Optional","type","Inject","LOCALE_ID","FeatureEditorService","show","options","_this","length","canOpen","subscribe","componentFactory","componentFactoryResolver","resolveComponentFactory","componentRef","create","injector","instance","titleText","languageService","title","okText","getValue","cancelText","width","height","_d","modalOptions","buttons","text","cls","handle","dialog","close","onConfirmClick","showButtons","areaResponse","opened","e","registerShortcutKey","closed","keyDownHandler","modalService","dialogRef","dlgContainerDom","location","nativeElement","eventManager","addEventListener","stopPropagation","key","onTabKeydownHandler","target","setFirstInputFocus","firstInputEl","querySelector","focus","currentTarget","allInputs","querySelectorAll","nextInputIndex","Array","from","findIndex","n","nextInputTarget","setTimeout","canClose","onConfirm","onUserConfirmed","next","onConfirmingRef","onConfirming","of","isObservable","onOpeningHandlerRef","onOpening","onOpeningHandler","Injector","BsModalService","ComponentFactoryResolver","EventEmitter","get","EventManager","LookupDirective","ngAfterViewInit","lookup","dictPicked","emit","concat","closeDialog","Directive","Output","FeatureEditorModule","NgModule","declarations","imports","CommonModule","FormsModule","FarrisFormsModule","LookupModule","ComboListModule","InputGroupModule","ModalModule","FarrisDatePickerModule","NumberSpinnerModule","TimePickerModule","SwitchModule","FarrisSectionModule","LocaleModule","forRoot","exports","entryComponents","providers","Help","String","Enum","Date"],"mappings":"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","sourcesContent":["import { ILookupHttpService, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n@Injectable()\r\nexport class LookupService implements ILookupHttpService {\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n    getData(url: string, params: any): Observable<LookupGridResult> {\r\n        const urls = url.split(':');\r\n        const realUrl = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\r\n        const helpID = urls[0] === '1' ? '9e2dca82-0aa2-4394-b26d-cb91164f44d5' : '344ffc53-7167-48d1-866b-a84083404e9e';\r\n        const filter = 'setid:' + urls[1] + '&' + 'state_isenabled:1';\r\n        const httpParams: any = {};\r\n        if (params) {\r\n            if (params.pageIndex) {\r\n                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\r\n            }\r\n            if (params.pageSize) {\r\n                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\r\n            }\r\n            if (params.condition) {\r\n                httpParams['condition'] = JSON.stringify(params.condition);\r\n            }\r\n            if (params.searchValue) {\r\n                httpParams['search'] = params.searchValue;\r\n            }\r\n        }\r\n        return this.http.put(realUrl, {\r\n            helpID: helpID,\r\n            queryParam: JSON.stringify(httpParams),\r\n            filterStr: filter\r\n        }).pipe(map((data: any) => JSON.parse(data.returnValue)));\r\n\r\n    }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { ServerSideToken } from '@farris/ui-lookup';\r\nimport { LookupService } from './lookup.service';\r\nimport { IFeature } from './type';\r\n\r\n@Component({\r\n    selector: 'farris-feature-editor',\r\n    templateUrl: 'feature-editor.component.html',\r\n    styles: ['feature-editor.component.css'],\r\n    // providers: [\r\n    //   { provide: ServerSideToken, useClass: LookupService }\r\n    // ]\r\n})\r\nexport class FeatureEditorComponent implements OnInit {\r\n    public localeId: string;\r\n    /**\r\n     * ç¹æ§\r\n     */\r\n    @Input() features: Array<IFeature>;\r\n    constructor(\r\n        private localeService: LocaleService\r\n    ) {\r\n        if (this.localeService) {\r\n            this.localeId = this.localeService.localeId;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * å¸®å©éæ©æ°æ®åçåè°\r\n     * @param event event\r\n     */\r\n    public onSelectRows(event: any) {\r\n        const { code = null, rows = [] } = event || {};\r\n        if (code) {\r\n            const item = this.features.find((feature: IFeature) => feature.field === code);\r\n            item.results = rows;\r\n        }\r\n    }\r\n\r\n}\r\n","import { Inject, Injectable, LOCALE_ID, Optional } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class I18nService {\r\n  constructor(@Optional() @Inject(LOCALE_ID) public localeId: string) { }\r\n\r\n  public get title(): string {\r\n    let result = 'ç¹æ§ç¼è¾å¨';\r\n    switch (this.localeId) {\r\n      case 'en':\r\n        result = 'Feature Editor'; break;\r\n      case 'zh-CHT':\r\n        result = 'ç¹æ§ç·¨è¼¯å¨'; break;\r\n      default: break;\r\n    }\r\n    return result;\r\n  }\r\n}","import { ComponentFactoryResolver, ComponentRef, EventEmitter, Injectable, Injector, LOCALE_ID } from '@angular/core';\r\nimport { BsModalService, BsModalRef } from '@farris/ui-modal';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { IFeature, IFeatureEditorOptions } from './type';\r\nimport { FeatureEditorComponent } from './feature-editor.component';\r\nimport { I18nService } from './i18n-service';\r\nimport { isObservable, Observable, of } from 'rxjs';\r\nimport { EventManager } from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class FeatureEditorService {\r\n    public dialog: BsModalRef = null;\r\n    private componentRef: ComponentRef<FeatureEditorComponent> = null;\r\n    private keyDownHandler = null;\r\n    onUserConfirmed: EventEmitter<any> = new EventEmitter<any>();\r\n    private eventManager: EventManager;\r\n    constructor(\r\n        public injector: Injector,\r\n        private modalService: BsModalService,\r\n        private componentFactoryResolver: ComponentFactoryResolver,\r\n        private localeService: LocaleService,\r\n        private languageService: I18nService\r\n    ) {\r\n        if (!this.languageService) {\r\n            const localeId = this.injector.get<string>(LOCALE_ID, 'zh-CHS');\r\n            this.languageService = new I18nService(localeId);\r\n        }\r\n\r\n        this.eventManager = this.injector.get(EventManager, null);\r\n    }\r\n    /**\r\n     * å¼¹åºç¹æ§ç¼è¾å¨\r\n     * @param features ç¹å¾æ°ç»\r\n     * @param options å¼¹çªéç½®\r\n     * @returns \r\n     */\r\n    public show(features: Array<IFeature>, options?: IFeatureEditorOptions): void {\r\n        if (!features || features.length < 1) {\r\n            return;\r\n        }\r\n        this.canOpen(options).subscribe((canOpen: boolean) => {\r\n            if (!canOpen) {\r\n                return;\r\n            }\r\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(FeatureEditorComponent);\r\n            this.componentRef = componentFactory.create(this.injector);\r\n            this.componentRef.instance.features = features;\r\n            const titleText = this.languageService.title;\r\n            const okText = this.localeService.getValue('batchEditDialog.okText');\r\n            const cancelText = this.localeService.getValue('batchEditDialog.cancelText');\r\n            const { width = 470, height = 500, title = titleText } = options || {};\r\n            const modalOptions: any = {\r\n                title,\r\n                width,\r\n                height,\r\n                buttons: [\r\n                    {\r\n                        text: cancelText, cls: 'btn btn-secondary', handle: () => {\r\n                            this.dialog.close();\r\n                        }\r\n                    },\r\n                    {\r\n                        text: okText, cls: 'btn btn-primary',\r\n                        handle: () => {\r\n                            this.onConfirmClick(options);\r\n                        }\r\n                    }\r\n                ],\r\n                showButtons: true,\r\n                areaResponse: true,\r\n                opened: (e) => {\r\n                    this.registerShortcutKey(options, e.instance);\r\n                },\r\n                closed: () => {\r\n                    if (this.keyDownHandler) {\r\n                        this.keyDownHandler();\r\n                        this.keyDownHandler = null;\r\n                    }\r\n                }\r\n            };\r\n            this.dialog = this.modalService.show(this.componentRef, modalOptions);\r\n        });\r\n    }\r\n\r\n\r\n    private registerShortcutKey(options, dialogRef) {\r\n        // åè½¦ï¼ä¸ç¡®å®æé®å¤çé»è¾ä¸è³ã\r\n        const dlgContainerDom = dialogRef.dialog.location.nativeElement;\r\n\r\n        if (dlgContainerDom && !this.keyDownHandler) {\r\n            this.keyDownHandler = this.eventManager.addEventListener(dlgContainerDom, 'keydown', (e: KeyboardEvent) => {\r\n                e.stopPropagation();\r\n                if (e.key === 'Enter') {\r\n                    // if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {\r\n                    //     return;\r\n                    // }\r\n                    this.onConfirmClick(options);\r\n                } else if (e.key === 'Escape') {\r\n                    this.dialog.close();\r\n                } else if (e.key === 'Tab') {\r\n                    this.onTabKeydownHandler(e.target);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.componentRef) {\r\n            this.setFirstInputFocus();\r\n        }\r\n    }\r\n\r\n    private setFirstInputFocus() {\r\n        const firstInputEl = this.componentRef.location.nativeElement.querySelector('input,textarea');\r\n        if (firstInputEl) {\r\n            firstInputEl.focus();\r\n        }\r\n    }\r\n\r\n    private onTabKeydownHandler(currentTarget) {\r\n        let allInputs = this.componentRef.location.nativeElement.querySelectorAll('input,textarea');\r\n        allInputs = Array.from(allInputs);\r\n        const currentInputIndex = allInputs.findIndex(n => n === currentTarget);\r\n        let nextInputIndex = currentInputIndex + 1;\r\n        if (nextInputIndex >= allInputs.length) {\r\n            nextInputIndex = 0;\r\n        }\r\n        const nextInputTarget = allInputs[nextInputIndex];\r\n        if (nextInputTarget) {\r\n            setTimeout(() => {\r\n                nextInputTarget.focus();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ç¨æ·ç¹å»ç¡®è®¤æé®\r\n     */\r\n    private onConfirmClick(options?: IFeatureEditorOptions) {\r\n        this.canClose(options).subscribe((result: boolean) => {\r\n            if (result === true) {\r\n                this.onConfirm(options);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * ç¡®è®¤\r\n     * @param options options\r\n     */\r\n    private onConfirm(options?: IFeatureEditorOptions) {\r\n        const features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];\r\n        this.dialog.close();\r\n        if (options.onConfirm && typeof options.onConfirm) {\r\n            options.onConfirm(features);\r\n        }\r\n        this.onUserConfirmed.next(features);\r\n    }\r\n    /**\r\n     * æ¯å¦å¯ä»¥å³é­\r\n     * @param options options\r\n     * @returns \r\n     */\r\n    private canClose(options?: IFeatureEditorOptions): Observable<any> {\r\n        const features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];\r\n        const onConfirmingRef = options && options.onConfirming || null;\r\n        if (!onConfirmingRef) {\r\n            return of(true);\r\n        }\r\n        // æç¡®è®¤åäºä»¶\r\n        const onConfirming = onConfirmingRef(features);\r\n        if (isObservable(onConfirming)) {\r\n            return onConfirming;\r\n        } else {\r\n            return of(onConfirming);\r\n        }\r\n    }\r\n    /**\r\n     * æ¯å¦å¯ä»¥å¼¹åºç¹æ§ç¼è¾å¨\r\n     * @param options options\r\n     * @returns \r\n     */\r\n    private canOpen(options?: IFeatureEditorOptions): Observable<any> {\r\n        const onOpeningHandlerRef = options && options.onOpening || null;\r\n        if (!onOpeningHandlerRef) {\r\n            return of(true);\r\n        }\r\n        const onOpeningHandler = onOpeningHandlerRef(options);\r\n        if (isObservable(onOpeningHandler)) {\r\n            return onOpeningHandler;\r\n        } else {\r\n            return of(onOpeningHandler);\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, AfterViewInit, Injector } from '@angular/core';\r\nimport { LookupComponent } from '@farris/ui-lookup';\r\nimport { of } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[lookup-extra]'\r\n})\r\nexport class LookupDirective implements AfterViewInit {\r\n  @Input('lookup-extra')\r\n  public code: string;\r\n  @Input('ins') lookup: LookupComponent;\r\n  @Output() onSelectRows: EventEmitter<any> = new EventEmitter<any>();\r\n  constructor() {\r\n  }\r\n  ngAfterViewInit(): void {\r\n    if (this.lookup) {\r\n      this.lookup.dictPicked = (rows: any) => {\r\n        if (this.onSelectRows) {\r\n          this.onSelectRows.emit({ code: this.code, rows: [].concat(rows) })\r\n        }\r\n        const result = {\r\n          closeDialog: true\r\n        };\r\n        return of(result);\r\n      };\r\n    }\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\nimport { TimePickerModule } from '@farris/ui-time-picker';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { SwitchModule } from '@farris/ui-switch';\r\nimport { FarrisSectionModule } from '@farris/ui-section';\r\nimport { FeatureEditorComponent } from './feature-editor.component';\r\nimport { LookupDirective } from './lookup.directive';\r\nimport { I18nService } from './i18n-service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureEditorComponent,\r\n    LookupDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    FarrisFormsModule,\r\n    LookupModule,\r\n    ComboListModule,\r\n    InputGroupModule,\r\n    ModalModule,\r\n    FarrisDatePickerModule,\r\n    NumberSpinnerModule,\r\n    TimePickerModule,\r\n    SwitchModule,\r\n    FarrisSectionModule,\r\n    LocaleModule.forRoot(),\r\n  ],\r\n  exports: [\r\n    FeatureEditorComponent,\r\n    LookupDirective\r\n  ],\r\n  entryComponents: [\r\n    FeatureEditorComponent\r\n  ],\r\n  providers: [\r\n    I18nService\r\n  ]\r\n})\r\nexport class FeatureEditorModule { }\r\n","/**\r\n * ç¹æ§å±æ§\r\n */\r\n// export interface IFeatures {\r\n//   id: string;\r\n//   /**\r\n//    * ç¼å·\r\n//    */\r\n//   code: string;\r\n//   /**\r\n//    * åç§°\r\n//    */\r\n//   __name__: { \"zh-CHS\": string, \"zh-CHT\": string, en: string };\r\n//   name_chs: string;\r\n//   name_cht: string;\r\n//   name_en: string;\r\n//   /**\r\n//    * æ¯å¦å¿å¡«\r\n//    * @description å¯éå¼ \"1\" | \"0\"\r\n//    */\r\n//   isrequired: string;\r\n//   /**\r\n//    * è¾å¥æ§ä»¶ç±»å\r\n//    * @description å¯éå¼ Help | Number | Enum etc\r\n//    */\r\n//   inputtype: string;\r\n//   textfield: string;\r\n//   codefield: string;\r\n//   /**\r\n//    * è¿æ»¤æ¡ä»¶\r\n//    */\r\n//   filtercondition: string;\r\n//   /**\r\n//    * æä¸¾ä¿¡æ¯\r\n//    */\r\n//   enuminfo: string;\r\n//   /**\r\n//    * æä¸¾æ°æ®æº\r\n//    */\r\n//   __data__: Array<{ id: string, text: string }>;\r\n//   /**\r\n//    * ç²¾åº¦\r\n//    */\r\n//   digitalaccuracy: number;\r\n//   /**\r\n//    * ç¹å¾éid\r\n//    */\r\n//   setid: string;\r\n//   /**\r\n//    * æ¯å¦æ¯æ å¸®å©\r\n//    * @description å¯éå¼ \"0\" | \"1\"\r\n//    */\r\n//   setistree: string;\r\n//   /**\r\n//    * idpå¸®å©id\r\n//    */\r\n//   codesetid: string;\r\n//   /**\r\n//    * åªè¯»\r\n//    * @description å¯éå¼ \"0\" | \"1\"\r\n//    */\r\n//   isreadonly: string;\r\n//   /**\r\n//    * é¡ºåºå·\r\n//    */\r\n//   sortorder: number;\r\n//   value: string;\r\n//   helpid: string;\r\n\r\nimport { Observable } from \"rxjs\";\r\n\r\n// }\r\nexport interface IFeatureEditorOptions {\r\n  width?: number;\r\n  height?: number;\r\n  title?: string;\r\n  /**\r\n   * ç¡®è®¤äºä»¶\r\n   */\r\n  onConfirm?: (features: IFeature[]) => void;\r\n  /**\r\n   * ç¡®è®¤å\r\n   * @description æ¹æ³è¿åå¼å¯ä»¥ä¸º\r\n   */\r\n  onConfirming?: (features: IFeature[]) => Observable<boolean | any> | boolean;\r\n  /**\r\n   * ç¹æ§ç¼è¾å¨æå¼å\r\n   */\r\n  onOpening?: (options: any) => Observable<boolean | any> | boolean;\r\n}\r\nexport enum InputType {\r\n  Help = 'Help',\r\n  String = 'String',\r\n  Enum = 'Enum',\r\n  Date = 'Date'\r\n}\r\n/**\r\n * ç¼è¾å¨ç±»å\r\n */\r\nexport const enum EditorTypes {\r\n  TEXTAREA = 'textarea',\r\n  TEXTBOX = 'textbox',\r\n  CHECKBOX = 'checkbox',\r\n  DATEPICKER = 'datepicker',\r\n  INPUTGROUP = 'input-group',\r\n  SELECT = 'select',\r\n  LOOKUP = 'lookup',\r\n  NUMBERBOX = 'numberbox',\r\n  COMBOLIST = 'combolist',\r\n  SWITCH = 'switch',\r\n  TIMEPICKER = 'timepicker',\r\n  COMBOLOOKUP = 'combo-lookup',\r\n  LANGUAGETEXTBOX = 'language-textbox',\r\n  ENUMEDITOR = 'enum-editor',\r\n  FILTEREDITOR = 'filter-editor',\r\n  SORTEDITOR = 'sort-editor'\r\n};\r\nexport interface IEditor {\r\n  controlType: EditorTypes,\r\n  [prop: string]: any;\r\n}\r\n/**\r\n * æä¸¾ç¼è¾å¨\r\n */\r\nexport interface IEnumEditor extends IEditor {\r\n  controlType: EditorTypes.ENUMEDITOR,\r\n  idField: string;\r\n  textField: string;\r\n  multiSelect?: boolean;\r\n  items?: any[];\r\n};\r\n/**\r\n * æ°å­ç¼è¾å¨\r\n */\r\nexport interface INumberEditor extends IEditor {\r\n  controlType: EditorTypes.NUMBERBOX;\r\n  precision: number;\r\n  step?: number;\r\n  min?: number;\r\n  max?: number;\r\n};\r\n/**\r\n * æ¥æç¼è¾å¨\r\n */\r\nexport interface IDateEditor extends IEditor {\r\n  controlType: EditorTypes.DATEPICKER;\r\n  dateRange?: boolean;\r\n}\r\n/**\r\n * æ¶é´ç¼è¾å¨\r\n */\r\nexport interface ITimeEditor extends IEditor {\r\n  controlType: EditorTypes.TIMEPICKER,\r\n  use12Hours?: boolean;\r\n}\r\n/**\r\n * å¸®å©ç¼è¾å¨\r\n */\r\nexport interface ILookupEditor extends IEditor {\r\n  idField: string;\r\n  textField: string;\r\n  valueField: string;\r\n  displayType?: string;\r\n  singleSelect?: boolean;\r\n  multiSelect?: boolean;\r\n  mapFields?: string | object;\r\n  dialogTitle?: string;\r\n  hiddenInputName?: string;\r\n}\r\n/**\r\n * ç¹æ§æè¿°\r\n */\r\nexport interface IFeature {\r\n  id: any;\r\n  title: string;\r\n  field: string;\r\n  editor: IEditor | IEnumEditor | INumberEditor | IDateEditor | ITimeEditor | ILookupEditor;\r\n  value?: any;\r\n  results?: any;\r\n  options?: { [prop: string]: any };\r\n}"]}