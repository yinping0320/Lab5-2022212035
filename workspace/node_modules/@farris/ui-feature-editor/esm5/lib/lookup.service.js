/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { Injectable } from '@angular/core';
var LookupService = /** @class */ (function () {
    function LookupService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    LookupService.prototype.getData = /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    function (url, params) {
        /** @type {?} */
        var urls = url.split(':');
        /** @type {?} */
        var realUrl = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';
        /** @type {?} */
        var helpID = urls[0] === '1' ? '9e2dca82-0aa2-4394-b26d-cb91164f44d5' : '344ffc53-7167-48d1-866b-a84083404e9e';
        /** @type {?} */
        var filter = 'setid:' + urls[1] + '&' + 'state_isenabled:1';
        /** @type {?} */
        var httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        return this.http.put(realUrl, {
            helpID: helpID,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        }).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return JSON.parse(data.returnValue); })));
    };
    LookupService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LookupService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return LookupService;
}());
export { LookupService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZlYXR1cmUtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2xvb2t1cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7SUFFSSx1QkFDWSxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3hCLENBQUM7Ozs7OztJQUNMLCtCQUFPOzs7OztJQUFQLFVBQVEsR0FBVyxFQUFFLE1BQVc7O1lBQ3RCLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7WUFDckIsT0FBTyxHQUFHLDhEQUE4RDs7WUFDeEUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7O1lBQzFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxtQkFBbUI7O1lBQ3ZELFVBQVUsR0FBUSxFQUFFO1FBQzFCLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNsQixVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUNqQixVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1lBQ0QsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNsQixVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDOUQ7WUFDRCxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3BCLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO2FBQzdDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUMxQixNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUN0QyxTQUFTLEVBQUUsTUFBTTtTQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLElBQVMsSUFBSyxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUE1QixDQUE0QixFQUFDLENBQUMsQ0FBQztJQUU5RCxDQUFDOztnQkEvQkosVUFBVTs7OztnQkFIRixVQUFVOztJQW1DbkIsb0JBQUM7Q0FBQSxBQWhDRCxJQWdDQztTQS9CWSxhQUFhOzs7Ozs7SUFFbEIsNkJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUxvb2t1cEh0dHBTZXJ2aWNlLCBMb29rdXBHcmlkUmVzdWx0IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTG9va3VwU2VydmljZSBpbXBsZW1lbnRzIElMb29rdXBIdHRwU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnRcclxuICAgICkgeyB9XHJcbiAgICBnZXREYXRhKHVybDogc3RyaW5nLCBwYXJhbXM6IGFueSk6IE9ic2VydmFibGU8TG9va3VwR3JpZFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IHVybHMgPSB1cmwuc3BsaXQoJzonKTtcclxuICAgICAgICBjb25zdCByZWFsVXJsID0gJy9hcGkvc2NtL3NjbWZuZC92MS4wL3NjbWNvbW1vbmNtcHNlcnZpY2Uvc2VydmljZS9nZXRoZWxwZGF0YSc7XHJcbiAgICAgICAgY29uc3QgaGVscElEID0gdXJsc1swXSA9PT0gJzEnID8gJzllMmRjYTgyLTBhYTItNDM5NC1iMjZkLWNiOTExNjRmNDRkNScgOiAnMzQ0ZmZjNTMtNzE2Ny00OGQxLTg2NmItYTg0MDgzNDA0ZTllJztcclxuICAgICAgICBjb25zdCBmaWx0ZXIgPSAnc2V0aWQ6JyArIHVybHNbMV0gKyAnJicgKyAnc3RhdGVfaXNlbmFibGVkOjEnO1xyXG4gICAgICAgIGNvbnN0IGh0dHBQYXJhbXM6IGFueSA9IHt9O1xyXG4gICAgICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5wYWdlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGh0dHBQYXJhbXNbJ3BhZ2VJbmRleCddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLnBhZ2VJbmRleCAtIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMucGFnZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGh0dHBQYXJhbXNbJ3BhZ2VTaXplJ10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMucGFnZVNpemUgLSAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLmNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaHR0cFBhcmFtc1snY29uZGl0aW9uJ10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMuY29uZGl0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLnNlYXJjaFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBodHRwUGFyYW1zWydzZWFyY2gnXSA9IHBhcmFtcy5zZWFyY2hWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnB1dChyZWFsVXJsLCB7XHJcbiAgICAgICAgICAgIGhlbHBJRDogaGVscElELFxyXG4gICAgICAgICAgICBxdWVyeVBhcmFtOiBKU09OLnN0cmluZ2lmeShodHRwUGFyYW1zKSxcclxuICAgICAgICAgICAgZmlsdGVyU3RyOiBmaWx0ZXJcclxuICAgICAgICB9KS5waXBlKG1hcCgoZGF0YTogYW55KSA9PiBKU09OLnBhcnNlKGRhdGEucmV0dXJuVmFsdWUpKSk7XHJcblxyXG4gICAgfVxyXG59XHJcbiJdfQ==