/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { LookupComponent } from '@farris/ui-lookup';
import { of } from 'rxjs';
var LookupDirective = /** @class */ (function () {
    function LookupDirective() {
        this.onSelectRows = new EventEmitter();
    }
    /**
     * @return {?}
     */
    LookupDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lookup) {
            this.lookup.dictPicked = (/**
             * @param {?} rows
             * @return {?}
             */
            function (rows) {
                if (_this.onSelectRows) {
                    _this.onSelectRows.emit({ code: _this.code, rows: [].concat(rows) });
                }
                /** @type {?} */
                var result = {
                    closeDialog: true
                };
                return of(result);
            });
        }
    };
    LookupDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lookup-extra]'
                },] }
    ];
    /** @nocollapse */
    LookupDirective.ctorParameters = function () { return []; };
    LookupDirective.propDecorators = {
        code: [{ type: Input, args: ['lookup-extra',] }],
        lookup: [{ type: Input, args: ['ins',] }],
        onSelectRows: [{ type: Output }]
    };
    return LookupDirective;
}());
export { LookupDirective };
if (false) {
    /** @type {?} */
    LookupDirective.prototype.code;
    /** @type {?} */
    LookupDirective.prototype.lookup;
    /** @type {?} */
    LookupDirective.prototype.onSelectRows;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmVhdHVyZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvbG9va3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFMUI7SUFRRTtRQURVLGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFcEUsQ0FBQzs7OztJQUNELHlDQUFlOzs7SUFBZjtRQUFBLGlCQVlDO1FBWEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVOzs7O1lBQUcsVUFBQyxJQUFTO2dCQUNqQyxJQUFJLEtBQUksQ0FBQyxZQUFZLEVBQUU7b0JBQ3JCLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2lCQUNuRTs7b0JBQ0ssTUFBTSxHQUFHO29CQUNiLFdBQVcsRUFBRSxJQUFJO2lCQUNsQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUEsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Z0JBdEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7Ozs7dUJBRUUsS0FBSyxTQUFDLGNBQWM7eUJBRXBCLEtBQUssU0FBQyxLQUFLOytCQUNYLE1BQU07O0lBZ0JULHNCQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0FwQlksZUFBZTs7O0lBQzFCLCtCQUNvQjs7SUFDcEIsaUNBQXNDOztJQUN0Qyx1Q0FBb0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9va3VwQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbG9va3VwLWV4dHJhXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvb2t1cERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgnbG9va3VwLWV4dHJhJylcclxuICBwdWJsaWMgY29kZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgnaW5zJykgbG9va3VwOiBMb29rdXBDb21wb25lbnQ7XHJcbiAgQE91dHB1dCgpIG9uU2VsZWN0Um93czogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubG9va3VwKSB7XHJcbiAgICAgIHRoaXMubG9va3VwLmRpY3RQaWNrZWQgPSAocm93czogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMub25TZWxlY3RSb3dzKSB7XHJcbiAgICAgICAgICB0aGlzLm9uU2VsZWN0Um93cy5lbWl0KHsgY29kZTogdGhpcy5jb2RlLCByb3dzOiBbXS5jb25jYXQocm93cykgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgY2xvc2VEaWFsb2c6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBvZihyZXN1bHQpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxufSJdfQ==