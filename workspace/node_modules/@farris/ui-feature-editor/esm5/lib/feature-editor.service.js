/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, EventEmitter, Injectable, Injector, LOCALE_ID } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { LocaleService } from '@farris/ui-locale';
import { FeatureEditorComponent } from './feature-editor.component';
import { I18nService } from './i18n-service';
import { isObservable, of } from 'rxjs';
import { EventManager } from '@angular/platform-browser';
var FeatureEditorService = /** @class */ (function () {
    function FeatureEditorService(injector, modalService, componentFactoryResolver, localeService, languageService) {
        this.injector = injector;
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.localeService = localeService;
        this.languageService = languageService;
        this.dialog = null;
        this.componentRef = null;
        this.keyDownHandler = null;
        this.onUserConfirmed = new EventEmitter();
        if (!this.languageService) {
            /** @type {?} */
            var localeId = this.injector.get(LOCALE_ID, 'zh-CHS');
            this.languageService = new I18nService(localeId);
        }
        this.eventManager = this.injector.get(EventManager, null);
    }
    /**
     * 弹出特性编辑器
     * @param features 特征数组
     * @param options 弹窗配置
     * @returns
     */
    /**
     * 弹出特性编辑器
     * @param {?} features 特征数组
     * @param {?=} options 弹窗配置
     * @return {?}
     */
    FeatureEditorService.prototype.show = /**
     * 弹出特性编辑器
     * @param {?} features 特征数组
     * @param {?=} options 弹窗配置
     * @return {?}
     */
    function (features, options) {
        var _this = this;
        if (!features || features.length < 1) {
            return;
        }
        this.canOpen(options).subscribe((/**
         * @param {?} canOpen
         * @return {?}
         */
        function (canOpen) {
            if (!canOpen) {
                return;
            }
            /** @type {?} */
            var componentFactory = _this.componentFactoryResolver.resolveComponentFactory(FeatureEditorComponent);
            _this.componentRef = componentFactory.create(_this.injector);
            _this.componentRef.instance.features = features;
            /** @type {?} */
            var titleText = _this.languageService.title;
            /** @type {?} */
            var okText = _this.localeService.getValue('batchEditDialog.okText');
            /** @type {?} */
            var cancelText = _this.localeService.getValue('batchEditDialog.cancelText');
            var _a = options || {}, _b = _a.width, width = _b === void 0 ? 470 : _b, _c = _a.height, height = _c === void 0 ? 500 : _c, _d = _a.title, title = _d === void 0 ? titleText : _d;
            /** @type {?} */
            var modalOptions = {
                title: title,
                width: width,
                height: height,
                buttons: [
                    {
                        text: cancelText, cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dialog.close();
                        })
                    },
                    {
                        text: okText, cls: 'btn btn-primary',
                        handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.onConfirmClick(options);
                        })
                    }
                ],
                showButtons: true,
                areaResponse: true,
                opened: (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    _this.registerShortcutKey(options, e.instance);
                }),
                closed: (/**
                 * @return {?}
                 */
                function () {
                    if (_this.keyDownHandler) {
                        _this.keyDownHandler();
                        _this.keyDownHandler = null;
                    }
                })
            };
            _this.dialog = _this.modalService.show(_this.componentRef, modalOptions);
        }));
    };
    /**
     * @private
     * @param {?} options
     * @param {?} dialogRef
     * @return {?}
     */
    FeatureEditorService.prototype.registerShortcutKey = /**
     * @private
     * @param {?} options
     * @param {?} dialogRef
     * @return {?}
     */
    function (options, dialogRef) {
        var _this = this;
        // 回车，与确定按钮处理逻辑一至。
        /** @type {?} */
        var dlgContainerDom = dialogRef.dialog.location.nativeElement;
        if (dlgContainerDom && !this.keyDownHandler) {
            this.keyDownHandler = this.eventManager.addEventListener(dlgContainerDom, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                if (e.key === 'Enter') {
                    // if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {
                    //     return;
                    // }
                    _this.onConfirmClick(options);
                }
                else if (e.key === 'Escape') {
                    _this.dialog.close();
                }
                else if (e.key === 'Tab') {
                    _this.onTabKeydownHandler(e.target);
                }
            }));
        }
        if (this.componentRef) {
            this.setFirstInputFocus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FeatureEditorService.prototype.setFirstInputFocus = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstInputEl = this.componentRef.location.nativeElement.querySelector('input,textarea');
        if (firstInputEl) {
            firstInputEl.focus();
        }
    };
    /**
     * @private
     * @param {?} currentTarget
     * @return {?}
     */
    FeatureEditorService.prototype.onTabKeydownHandler = /**
     * @private
     * @param {?} currentTarget
     * @return {?}
     */
    function (currentTarget) {
        /** @type {?} */
        var allInputs = this.componentRef.location.nativeElement.querySelectorAll('input,textarea');
        allInputs = Array.from(allInputs);
        /** @type {?} */
        var currentInputIndex = allInputs.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === currentTarget; }));
        /** @type {?} */
        var nextInputIndex = currentInputIndex + 1;
        if (nextInputIndex >= allInputs.length) {
            nextInputIndex = 0;
        }
        /** @type {?} */
        var nextInputTarget = allInputs[nextInputIndex];
        if (nextInputTarget) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                nextInputTarget.focus();
            }));
        }
    };
    /**
     * 用户点击确认按钮
     */
    /**
     * 用户点击确认按钮
     * @private
     * @param {?=} options
     * @return {?}
     */
    FeatureEditorService.prototype.onConfirmClick = /**
     * 用户点击确认按钮
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        this.canClose(options).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (result === true) {
                _this.onConfirm(options);
            }
        }));
    };
    /**
     * 确认
     * @param options options
     */
    /**
     * 确认
     * @private
     * @param {?=} options options
     * @return {?}
     */
    FeatureEditorService.prototype.onConfirm = /**
     * 确认
     * @private
     * @param {?=} options options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];
        this.dialog.close();
        if (options.onConfirm && typeof options.onConfirm) {
            options.onConfirm(features);
        }
        this.onUserConfirmed.next(features);
    };
    /**
     * 是否可以关闭
     * @param options options
     * @returns
     */
    /**
     * 是否可以关闭
     * @private
     * @param {?=} options options
     * @return {?}
     */
    FeatureEditorService.prototype.canClose = /**
     * 是否可以关闭
     * @private
     * @param {?=} options options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var features = this.componentRef && this.componentRef.instance && this.componentRef.instance.features || [];
        /** @type {?} */
        var onConfirmingRef = options && options.onConfirming || null;
        if (!onConfirmingRef) {
            return of(true);
        }
        // 有确认前事件
        /** @type {?} */
        var onConfirming = onConfirmingRef(features);
        if (isObservable(onConfirming)) {
            return onConfirming;
        }
        else {
            return of(onConfirming);
        }
    };
    /**
     * 是否可以弹出特性编辑器
     * @param options options
     * @returns
     */
    /**
     * 是否可以弹出特性编辑器
     * @private
     * @param {?=} options options
     * @return {?}
     */
    FeatureEditorService.prototype.canOpen = /**
     * 是否可以弹出特性编辑器
     * @private
     * @param {?=} options options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var onOpeningHandlerRef = options && options.onOpening || null;
        if (!onOpeningHandlerRef) {
            return of(true);
        }
        /** @type {?} */
        var onOpeningHandler = onOpeningHandlerRef(options);
        if (isObservable(onOpeningHandler)) {
            return onOpeningHandler;
        }
        else {
            return of(onOpeningHandler);
        }
    };
    FeatureEditorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureEditorService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: LocaleService },
        { type: I18nService }
    ]; };
    return FeatureEditorService;
}());
export { FeatureEditorService };
if (false) {
    /** @type {?} */
    FeatureEditorService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.keyDownHandler;
    /** @type {?} */
    FeatureEditorService.prototype.onUserConfirmed;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.eventManager;
    /** @type {?} */
    FeatureEditorService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FeatureEditorService.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,