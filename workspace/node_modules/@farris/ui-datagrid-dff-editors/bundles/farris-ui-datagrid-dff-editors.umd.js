(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@farris/ui-forms'), require('@farris/ui-employee-selector'), require('@farris/ui-adminorganization-selector'), require('@angular/core'), require('@farris/ui-common'), require('@farris/ui-datagrid'), require('@farris/ui-datagrid-editors'), require('lodash-es')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-datagrid-dff-editors', ['exports', '@angular/common', '@angular/forms', '@farris/ui-forms', '@farris/ui-employee-selector', '@farris/ui-adminorganization-selector', '@angular/core', '@farris/ui-common', '@farris/ui-datagrid', '@farris/ui-datagrid-editors', 'lodash-es'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-datagrid-dff-editors'] = {}),global.ng.common,global.ng.forms,global.uiForms,global.uiEmployeeSelector,global.uiAdminorganizationSelector,global.ng.core,global.uiCommon,global.uiDatagrid,global.uiDatagridEditors,global._));
}(this, (function (exports,common,forms,uiForms,uiEmployeeSelector,uiAdminorganizationSelector,i0,uiCommon,uiDatagrid,uiDatagridEditors,_) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datagrid-dff-editors.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridDffEditorsService = /** @class */ (function () {
        function DatagridDffEditorsService() {
        }
        DatagridDffEditorsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DatagridDffEditorsService.ctorParameters = function () { return []; };
        /** @nocollapse */ DatagridDffEditorsService.ngInjectableDef = i0.defineInjectable({ factory: function DatagridDffEditorsService_Factory() { return new DatagridDffEditorsService(); }, token: DatagridDffEditorsService, providedIn: "root" });
        return DatagridDffEditorsService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datagrid-dff-editors.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridDffEditorsComponent = /** @class */ (function () {
        function DatagridDffEditorsComponent() {
        }
        /**
         * @return {?}
         */
        DatagridDffEditorsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        DatagridDffEditorsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-datagrid-dff-editors',
                        template: "\n    <p>\n      datagrid-dff-editors works!\n    </p>\n  "
                    }] }
        ];
        /** @nocollapse */
        DatagridDffEditorsComponent.ctorParameters = function () { return []; };
        return DatagridDffEditorsComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/grid-employee-selector/grid-employee-selector.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var employeeSelectorDefautOption = {
        absOrgType: 'System_organization',
        readonly: false,
        placeholder: '请选择',
        viewType: 'tag',
        busNum: 'common',
        idField: 'userId'
    };
    var DatagridEmployeeSelectorComponent = /** @class */ (function (_super) {
        __extends(DatagridEmployeeSelectorComponent, _super);
        function DatagridEmployeeSelectorComponent(render, el, rts, utils, injector) {
            var _this = _super.call(this, render, el, injector) || this;
            _this.rts = rts;
            _this.utils = utils;
            _this.lookupFieldMap = ( /**
             * @param {?} helpData
             * @param {?} mapFields
             * @param {?} dataObj
             * @return {?}
             */function (helpData, mapFields, dataObj) {
                if (mapFields) {
                    /** @type {?} */
                    var helpFields = Object.keys(mapFields);
                    helpFields.forEach(( /**
                     * @param {?} f
                     * @return {?}
                     */function (f) {
                        /** @type {?} */
                        var val = '';
                        if (helpData) {
                            if (helpData instanceof Array) {
                                val = helpData.map(( /**
                                 * @param {?} h
                                 * @return {?}
                                 */function (h) {
                                    return _this.utils.getValue(f, h);
                                })).join(',');
                            }
                            else {
                                val = _this.utils.getValue(f, helpData);
                            }
                        }
                        mapFields[f].split(',').forEach(( /**
                         * @param {?} ff
                         * @return {?}
                         */function (ff) {
                            /** @type {?} */
                            var field = _.trim(ff);
                            _this.utils.setValue(dataObj, field, val);
                        }));
                    }));
                }
            });
            return _this;
        }
        /**
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                // 这里添加了过滤 this.options 中null、undefined,万一 jit 生成了 undefined 的呢，
                this.options = Object.assign({}, employeeSelectorDefautOption, _.omitBy(this.options, ( /**
                 * @param {?} itemValue
                 * @return {?}
                 */function (itemValue) { return _.isUndefined(itemValue) || _.isNull(itemValue); })));
                this.instance.selectedData = new i0.EventEmitter();
                this.instance.clear = new i0.EventEmitter();
            };
        /**
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.inputElement = this.el.nativeElement;
                _super.prototype.ngAfterViewInit.call(this);
                if (this.instance.ngControl &&
                    this.instance.ngControl.formDirective &&
                    this.instance.ngControl.formDirective.form &&
                    this.instance.ngControl.formDirective.form.bindingData) {
                    this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
                    this.bindingData.setValue = ( /**
                     * @param {?} fieldPath
                     * @return {?}
                     */function (fieldPath) {
                        return _this.utils.setValue(fieldPath.join('.'), _this.bindingData, true);
                    });
                    this.bindingData.getValue = ( /**
                     * @param {?} fieldPath
                     * @return {?}
                     */function (fieldPath) {
                        return _this.utils.getValue(fieldPath.join('.'), _this.bindingData, true);
                    });
                }
            };
        /**
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.inputClear = /**
         * @return {?}
         */
            function () {
                this.updateControlValue(null);
                this.instance.clear.emit();
                if (this.options.inputClear) {
                    // 设计器上配置的清空事件
                    this.options.inputClear();
                }
            };
        /**
         * @param {?} removedItem
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.tagRemoved = /**
         * @param {?} removedItem
         * @return {?}
         */
            function (removedItem) {
                var _this = this;
                /** @type {?} */
                var mapFields = this.instance.mapFields;
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var bindingData = _.cloneDeep(this.bindingData);
                /** @type {?} */
                var selectedData = [];
                helpFields.forEach(( /**
                 * @param {?} key
                 * @return {?}
                 */function (key) {
                    /** @type {?} */
                    var value = _this.utils.getValue(mapFields[key], bindingData);
                    /** @type {?} */
                    var vArr = value.split(',');
                    vArr.splice(removedItem.deleteIndex, 1);
                    vArr.forEach(( /**
                     * @param {?} v
                     * @param {?} i
                     * @return {?}
                     */function (v, i) {
                        if (!selectedData[i]) {
                            selectedData.push({ index: i });
                            selectedData[i][key] = v;
                        }
                        else {
                            selectedData[i][key] = v;
                        }
                    }));
                    value = vArr.join(',');
                    _this.utils.setValue(_this.bindingData, mapFields[key], value);
                }));
                if (selectedData.length) {
                    this.instance.selectedData.emit(selectedData);
                }
                else {
                    this.instance.clear.emit();
                }
                // 设计器上配置的删除单个标签事件
                if (this.options.tagRemoved) {
                    this.options.tagRemoved(this.eventPrams(removedItem));
                }
            };
        /**
         * @param {?} changeData
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.selectionsChange = /**
         * @param {?} changeData
         * @return {?}
         */
            function (changeData) {
                /** @type {?} */
                var formedSelections = this.formSelectedRowData();
                this.updateControlValue(formedSelections);
                this.instance.selectedData.emit(formedSelections);
                // 设计器上配置的选中数据后事件
                if (this.options.selectionsChange) {
                    this.options.selectionsChange(this.eventPrams(changeData));
                }
            };
        /**
         * @param {?} selectedRow
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.updateControlValue = /**
         * @param {?} selectedRow
         * @return {?}
         */
            function (selectedRow) {
                if (this.instance.mapFields && this.bindingData) {
                    this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
                }
            };
        /**
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.formSelectedRowData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var selectedRowData = [];
                this.instance.selections.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    /** @type {?} */
                    var defaultDisplayName = _this.instance.displayField ? item[_this.instance.displayField] : "[" + item.code + "]" + item.name;
                    /** @type {?} */
                    var displayName = _this.instance.formatFn ? _this.instance.formatFn(item) : defaultDisplayName;
                    selectedRowData.push(Object.assign({}, item, { displayName: displayName }));
                }));
                return selectedRowData.length ? selectedRowData : null;
            };
        /**
         * @private
         * @param {?} $event
         * @return {?}
         */
        DatagridEmployeeSelectorComponent.prototype.eventPrams = /**
         * @private
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var p = this.eventParams($event);
                p['instance'] = this.instance;
                p['editor'] = this;
                return p;
            };
        DatagridEmployeeSelectorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-grid-employee-selector',
                        template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-employee-selector #selection style=\"width: 100%\"\r\n      [placeholder]=\"options.placeholder\" [enableQuick]=\"false\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\"\r\n      [viewType]=\"options.viewType\" [multiSelect]=\"options.multiSelect\" [busNum]=\"options.busNum\" [mapFields]=\"options.mapFields\"\r\n      [formatFn]=\"options.formatter\" [formControlName]=\"column.field\" [idField]=\"options.idField\" [displayField]=\"options.textField\"\r\n      [showTabIds]=\"options.showTabIds\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\" [filterId]=\"options.filterId\"\r\n      (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-employee-selector>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        DatagridEmployeeSelectorComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef },
                { type: uiCommon.RuntimeStateService },
                { type: uiCommon.CommonUtils },
                { type: i0.Injector }
            ];
        };
        DatagridEmployeeSelectorComponent.propDecorators = {
            instance: [{ type: i0.ViewChild, args: ['selection',] }]
        };
        return DatagridEmployeeSelectorComponent;
    }(uiDatagridEditors.DatagridBaseEditorDirective));
    /** @type {?} */
    var EmployeeSelectorDataGridEditorProvider = { provide: uiDatagrid.GRID_EDITORS, useValue: { name: 'EmployeeSelector', value: DatagridEmployeeSelectorComponent }, multi: true };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/grid-adminorganization-selector/grid-adminorganization-selector.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AdminOrganizationSelectorDefautOption = {
        absOrgType: 'System_organization',
        readonly: false,
        placeholder: '请选择',
        busNum: 'common',
        primaryField: 'orgId',
        displayField: 'name'
    };
    var DataGridAdminOrganizationSelectorComponent = /** @class */ (function (_super) {
        __extends(DataGridAdminOrganizationSelectorComponent, _super);
        function DataGridAdminOrganizationSelectorComponent(render, el, rts, utils, injector) {
            var _this = _super.call(this, render, el, injector) || this;
            _this.rts = rts;
            _this.utils = utils;
            _this.lookupFieldMap = ( /**
             * @param {?} helpData
             * @param {?} mapFields
             * @param {?} dataObj
             * @return {?}
             */function (helpData, mapFields, dataObj) {
                if (mapFields) {
                    /** @type {?} */
                    var helpFields = Object.keys(mapFields);
                    helpFields.forEach(( /**
                     * @param {?} helpField
                     * @return {?}
                     */function (helpField) {
                        /** @type {?} */
                        var val = '';
                        if (helpData) {
                            if (helpData instanceof Array) {
                                val = helpData.map(( /**
                                 * @param {?} data
                                 * @return {?}
                                 */function (data) { return _this.utils.getValue(helpField, data); })).join(',');
                            }
                            else {
                                val = _this.utils.getValue(helpField, helpData);
                            }
                        }
                        mapFields[helpField].split(',').forEach(( /**
                         * @param {?} ff
                         * @return {?}
                         */function (ff) {
                            /** @type {?} */
                            var formField = _.trim(ff);
                            _this.utils.setValue(dataObj, formField, val);
                        }));
                    }));
                }
            });
            return _this;
        }
        /**
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.options = Object.assign({}, AdminOrganizationSelectorDefautOption, _.omitBy(this.options, ( /**
                 * @param {?} itemValue
                 * @return {?}
                 */function (itemValue) { return _.isUndefined(itemValue) || _.isNull(itemValue); })));
                this.instance.selectedData = new i0.EventEmitter();
                this.instance.clear = new i0.EventEmitter();
            };
        /**
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.inputElement = this.el.nativeElement;
                _super.prototype.ngAfterViewInit.call(this);
                if (this.instance.ngControl &&
                    this.instance.ngControl.formDirective &&
                    this.instance.ngControl.formDirective.form &&
                    this.instance.ngControl.formDirective.form.bindingData) {
                    this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
                    this.bindingData.setValue = ( /**
                     * @param {?} fieldPath
                     * @return {?}
                     */function (fieldPath) {
                        return _this.utils.setValue(fieldPath.join('.'), _this.bindingData, true);
                    });
                    this.bindingData.getValue = ( /**
                     * @param {?} fieldPath
                     * @return {?}
                     */function (fieldPath) {
                        return _this.utils.getValue(fieldPath.join('.'), _this.bindingData, true);
                    });
                }
            };
        /**
         * @param {?} selectedRow
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.updateControlValue = /**
         * @param {?} selectedRow
         * @return {?}
         */
            function (selectedRow) {
                if (this.instance.mapFields && this.bindingData) {
                    this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
                }
            };
        /**
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.inputClear = /**
         * @return {?}
         */
            function () {
                this.updateControlValue(null);
                this.instance.clear.emit();
                // 设计器上配置的清空事件
                if (this.options.inputClear) {
                    this.options.inputClear();
                }
            };
        /**
         * @param {?} removedItem
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.tagRemoved = /**
         * @param {?} removedItem
         * @return {?}
         */
            function (removedItem) {
                var _this = this;
                /** @type {?} */
                var mapFields = this.instance.mapFields;
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var bindingData = _.cloneDeep(this.bindingData);
                /** @type {?} */
                var selectedData = [];
                helpFields.forEach(( /**
                 * @param {?} key
                 * @return {?}
                 */function (key) {
                    /** @type {?} */
                    var value = _this.utils.getValue(mapFields[key], bindingData);
                    /** @type {?} */
                    var vArr = value.split(',');
                    vArr.splice(removedItem.deleteIndex, 1);
                    vArr.forEach(( /**
                     * @param {?} v
                     * @param {?} i
                     * @return {?}
                     */function (v, i) {
                        if (!selectedData[i]) {
                            selectedData.push({ index: i });
                            selectedData[i][key] = v;
                        }
                        else {
                            selectedData[i][key] = v;
                        }
                    }));
                    value = vArr.join(',');
                    _this.utils.setValue(_this.bindingData, mapFields[key], value);
                }));
                if (selectedData.length) {
                    this.instance.selectedData.emit(selectedData);
                }
                else {
                    this.instance.clear.emit();
                }
                // 设计器上配置的删除单个标签事件
                if (this.options.tagRemoved) {
                    this.options.tagRemoved(this.eventPrams(removedItem));
                }
            };
        /**
         * @param {?} changeData
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.selectionsChange = /**
         * @param {?} changeData
         * @return {?}
         */
            function (changeData) {
                /** @type {?} */
                var formedSelections = this.formSelectedRowData();
                this.updateControlValue(formedSelections);
                this.instance.selectedData.emit(formedSelections);
                // 设计器上配置的选中数据后事件
                if (this.options.selectionsChange) {
                    this.options.selectionsChange(this.eventPrams(changeData));
                }
            };
        /**
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.formSelectedRowData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var selectedRowData = [];
                this.instance.selections.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    /** @type {?} */
                    var defaultDisplayName = _this.instance.displayField ? item[_this.instance.displayField] : "" + item.name;
                    /** @type {?} */
                    var displayName = _this.instance.formatFn ? _this.instance.formatFn(item) : defaultDisplayName;
                    selectedRowData.push(Object.assign({}, item, { displayName: displayName }));
                }));
                return selectedRowData.length ? selectedRowData : null;
            };
        /**
         * @private
         * @param {?} $event
         * @return {?}
         */
        DataGridAdminOrganizationSelectorComponent.prototype.eventPrams = /**
         * @private
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var p = this.eventParams($event);
                p['instance'] = this.instance;
                p['editor'] = this;
                return p;
            };
        DataGridAdminOrganizationSelectorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-grid-adminorganization-selector',
                        template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-adminorganization-selector #orgSelection style=\"width: 100%\"\r\n      [placeholder]=\"options.placeholder\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\" [multiSelect]=\"options.multiSelect\"\r\n      [mapFields]=\"options.mapFields\" [formControlName]=\"column.field\" [primaryField]=\"options.primaryField\" [displayField]=\"options.displayField\"\r\n      [formatFn]=\"options.formatter\" [layer]=\"options.expandLevel\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\"\r\n      [cascadeCheck]=\"options.cascadeCheck\" [cascadeDown]=\"options.cascadeDown\" [cascadeUp]=\"options.cascadeUp\"\r\n      [showTabIds]=\"options.showTabIds\" [activeTabId]=\"options.activeTabId\" [busNum]=\"options.busNum\"\r\n      (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-adminorganization-selector>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        DataGridAdminOrganizationSelectorComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef },
                { type: uiCommon.RuntimeStateService },
                { type: uiCommon.CommonUtils },
                { type: i0.Injector }
            ];
        };
        DataGridAdminOrganizationSelectorComponent.propDecorators = {
            instance: [{ type: i0.ViewChild, args: ['orgSelection',] }]
        };
        return DataGridAdminOrganizationSelectorComponent;
    }(uiDatagridEditors.DatagridBaseEditorDirective));
    /** @type {?} */
    var AdminOrganizationSelectorDataGridEditorProvider = { provide: uiDatagrid.GRID_EDITORS, useValue: { name: 'AdminOrganizationSelector', value: DataGridAdminOrganizationSelectorComponent }, multi: true };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datagrid-dff-editors.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridDffEditorsModule = /** @class */ (function () {
        function DatagridDffEditorsModule() {
        }
        DatagridDffEditorsModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            DatagridDffEditorsComponent,
                            DatagridEmployeeSelectorComponent,
                            DataGridAdminOrganizationSelectorComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            uiDatagrid.DatagridModule,
                            uiDatagridEditors.DatagridEditorsModule,
                            uiForms.FarrisFormsModule,
                            uiEmployeeSelector.EmployeeSelectorModule,
                            uiAdminorganizationSelector.AdminOrganizationSelectorModule
                        ],
                        providers: [],
                        entryComponents: [
                            DatagridEmployeeSelectorComponent,
                            DataGridAdminOrganizationSelectorComponent
                        ],
                        exports: [
                            DatagridDffEditorsComponent,
                            DatagridEmployeeSelectorComponent,
                            DataGridAdminOrganizationSelectorComponent
                        ]
                    },] }
        ];
        return DatagridDffEditorsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: farris-ui-datagrid-dff-editors.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DatagridDffEditorsService = DatagridDffEditorsService;
    exports.DatagridDffEditorsComponent = DatagridDffEditorsComponent;
    exports.DatagridDffEditorsModule = DatagridDffEditorsModule;
    exports.DatagridEmployeeSelectorComponent = DatagridEmployeeSelectorComponent;
    exports.EmployeeSelectorDataGridEditorProvider = EmployeeSelectorDataGridEditorProvider;
    exports.DataGridAdminOrganizationSelectorComponent = DataGridAdminOrganizationSelectorComponent;
    exports.AdminOrganizationSelectorDataGridEditorProvider = AdminOrganizationSelectorDataGridEditorProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-datagrid-dff-editors.umd.js.map