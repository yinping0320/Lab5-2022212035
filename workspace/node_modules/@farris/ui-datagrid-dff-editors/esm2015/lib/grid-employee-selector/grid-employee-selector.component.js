/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-employee-selector/grid-employee-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
const employeeSelectorDefautOption = {
    absOrgType: 'System_organization',
    readonly: false,
    placeholder: '请选择',
    viewType: 'tag',
    busNum: 'common',
    idField: 'userId'
};
export class DatagridEmployeeSelectorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} rts
     * @param {?} utils
     * @param {?} injector
     */
    constructor(render, el, rts, utils, injector) {
        super(render, el, injector);
        this.rts = rts;
        this.utils = utils;
        this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        (helpData, mapFields, dataObj) => {
            if (mapFields) {
                /** @type {?} */
                const helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                (f) => {
                    /** @type {?} */
                    let val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} h
                             * @return {?}
                             */
                            (h) => {
                                return this.utils.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = this.utils.getValue(f, helpData);
                        }
                    }
                    mapFields[f].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    (ff) => {
                        /** @type {?} */
                        const field = trim(ff);
                        this.utils.setValue(dataObj, field, val);
                    }));
                }));
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        // 这里添加了过滤 this.options 中null、undefined,万一 jit 生成了 undefined 的呢，
        this.options = Object.assign({}, employeeSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        (itemValue) => isUndefined(itemValue) || isNull(itemValue))));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.el.nativeElement;
        super.ngAfterViewInit();
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            (fieldPath) => {
                return this.utils.setValue(fieldPath.join('.'), this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            (fieldPath) => {
                return this.utils.getValue(fieldPath.join('.'), this.bindingData, true);
            });
        }
    }
    /**
     * @return {?}
     */
    inputClear() {
        this.updateControlValue(null);
        this.instance.clear.emit();
        if (this.options.inputClear) {
            // 设计器上配置的清空事件
            this.options.inputClear();
        }
    }
    /**
     * @param {?} removedItem
     * @return {?}
     */
    tagRemoved(removedItem) {
        /** @type {?} */
        const mapFields = this.instance.mapFields;
        /** @type {?} */
        const helpFields = Object.keys(mapFields);
        /** @type {?} */
        const bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        const selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            let value = this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            const vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            (v, i) => {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            this.utils.setValue(this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        // 设计器上配置的删除单个标签事件
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    }
    /**
     * @param {?} changeData
     * @return {?}
     */
    selectionsChange(changeData) {
        /** @type {?} */
        const formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        // 设计器上配置的选中数据后事件
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    }
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    updateControlValue(selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    }
    /**
     * @return {?}
     */
    formSelectedRowData() {
        /** @type {?} */
        let selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            const defaultDisplayName = this.instance.displayField ? item[this.instance.displayField] : `[${item.code}]${item.name}`;
            /** @type {?} */
            const displayName = this.instance.formatFn ? this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridEmployeeSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-grid-employee-selector',
                template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-employee-selector #selection style=\"width: 100%\"\r\n      [placeholder]=\"options.placeholder\" [enableQuick]=\"false\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\"\r\n      [viewType]=\"options.viewType\" [multiSelect]=\"options.multiSelect\" [busNum]=\"options.busNum\" [mapFields]=\"options.mapFields\"\r\n      [formatFn]=\"options.formatter\" [formControlName]=\"column.field\" [idField]=\"options.idField\" [displayField]=\"options.textField\"\r\n      [showTabIds]=\"options.showTabIds\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\" [filterId]=\"options.filterId\"\r\n      (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-employee-selector>\r\n</div>"
            }] }
];
/** @nocollapse */
DatagridEmployeeSelectorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: RuntimeStateService },
    { type: CommonUtils },
    { type: Injector }
];
DatagridEmployeeSelectorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['selection',] }]
};
if (false) {
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.instance;
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.bindingData;
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    DatagridEmployeeSelectorComponent.prototype.rts;
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.utils;
}
/** @type {?} */
export const EmployeeSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'EmployeeSelector', value: DatagridEmployeeSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,