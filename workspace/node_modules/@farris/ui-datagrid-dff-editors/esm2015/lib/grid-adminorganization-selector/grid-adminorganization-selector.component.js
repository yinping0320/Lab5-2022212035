/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-adminorganization-selector/grid-adminorganization-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
const AdminOrganizationSelectorDefautOption = {
    absOrgType: 'System_organization',
    readonly: false,
    placeholder: '请选择',
    busNum: 'common',
    primaryField: 'orgId',
    displayField: 'name'
};
export class DataGridAdminOrganizationSelectorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} rts
     * @param {?} utils
     * @param {?} injector
     */
    constructor(render, el, rts, utils, injector) {
        super(render, el, injector);
        this.rts = rts;
        this.utils = utils;
        this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        (helpData, mapFields, dataObj) => {
            if (mapFields) {
                /** @type {?} */
                const helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                (helpField) => {
                    /** @type {?} */
                    let val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} data
                             * @return {?}
                             */
                            (data) => { return this.utils.getValue(helpField, data); })).join(',');
                        }
                        else {
                            val = this.utils.getValue(helpField, helpData);
                        }
                    }
                    mapFields[helpField].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    (ff) => {
                        /** @type {?} */
                        const formField = trim(ff);
                        this.utils.setValue(dataObj, formField, val);
                    }));
                }));
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, AdminOrganizationSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        (itemValue) => isUndefined(itemValue) || isNull(itemValue))));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.el.nativeElement;
        super.ngAfterViewInit();
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            (fieldPath) => {
                return this.utils.setValue(fieldPath.join('.'), this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            (fieldPath) => {
                return this.utils.getValue(fieldPath.join('.'), this.bindingData, true);
            });
        }
    }
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    updateControlValue(selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    }
    /**
     * @return {?}
     */
    inputClear() {
        this.updateControlValue(null);
        this.instance.clear.emit();
        // 设计器上配置的清空事件
        if (this.options.inputClear) {
            this.options.inputClear();
        }
    }
    /**
     * @param {?} removedItem
     * @return {?}
     */
    tagRemoved(removedItem) {
        /** @type {?} */
        const mapFields = this.instance.mapFields;
        /** @type {?} */
        const helpFields = Object.keys(mapFields);
        /** @type {?} */
        const bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        const selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            let value = this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            const vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            (v, i) => {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            this.utils.setValue(this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        // 设计器上配置的删除单个标签事件
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    }
    /**
     * @param {?} changeData
     * @return {?}
     */
    selectionsChange(changeData) {
        /** @type {?} */
        const formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        // 设计器上配置的选中数据后事件
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    }
    /**
     * @return {?}
     */
    formSelectedRowData() {
        /** @type {?} */
        let selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            const defaultDisplayName = this.instance.displayField ? item[this.instance.displayField] : `${item.name}`;
            /** @type {?} */
            const displayName = this.instance.formatFn ? this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DataGridAdminOrganizationSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-grid-adminorganization-selector',
                template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-adminorganization-selector #orgSelection style=\"width: 100%\"\r\n      [placeholder]=\"options.placeholder\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\" [multiSelect]=\"options.multiSelect\"\r\n      [mapFields]=\"options.mapFields\" [formControlName]=\"column.field\" [primaryField]=\"options.primaryField\" [displayField]=\"options.displayField\"\r\n      [formatFn]=\"options.formatter\" [layer]=\"options.expandLevel\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\"\r\n      [cascadeCheck]=\"options.cascadeCheck\" [cascadeDown]=\"options.cascadeDown\" [cascadeUp]=\"options.cascadeUp\"\r\n      [showTabIds]=\"options.showTabIds\" [activeTabId]=\"options.activeTabId\" [busNum]=\"options.busNum\"\r\n      (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-adminorganization-selector>\r\n</div>"
            }] }
];
/** @nocollapse */
DataGridAdminOrganizationSelectorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: RuntimeStateService },
    { type: CommonUtils },
    { type: Injector }
];
DataGridAdminOrganizationSelectorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['orgSelection',] }]
};
if (false) {
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.instance;
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.bindingData;
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    DataGridAdminOrganizationSelectorComponent.prototype.rts;
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.utils;
}
/** @type {?} */
export const AdminOrganizationSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'AdminOrganizationSelector', value: DataGridAdminOrganizationSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,