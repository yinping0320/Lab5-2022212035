/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-employee-selector/grid-employee-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
var employeeSelectorDefautOption = {
    absOrgType: 'System_organization',
    readonly: false,
    placeholder: '请选择',
    viewType: 'tag',
    busNum: 'common',
    idField: 'userId'
};
var DatagridEmployeeSelectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridEmployeeSelectorComponent, _super);
    function DatagridEmployeeSelectorComponent(render, el, rts, utils, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.utils = utils;
        _this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        function (helpData, mapFields, dataObj) {
            if (mapFields) {
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} h
                             * @return {?}
                             */
                            function (h) {
                                return _this.utils.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = _this.utils.getValue(f, helpData);
                        }
                    }
                    mapFields[f].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    function (ff) {
                        /** @type {?} */
                        var field = trim(ff);
                        _this.utils.setValue(dataObj, field, val);
                    }));
                }));
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // 这里添加了过滤 this.options 中null、undefined,万一 jit 生成了 undefined 的呢，
        this.options = Object.assign({}, employeeSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        function (itemValue) { return isUndefined(itemValue) || isNull(itemValue); })));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    };
    /**
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inputElement = this.el.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.setValue(fieldPath.join('.'), _this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.getValue(fieldPath.join('.'), _this.bindingData, true);
            });
        }
    };
    /**
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.inputClear = /**
     * @return {?}
     */
    function () {
        this.updateControlValue(null);
        this.instance.clear.emit();
        if (this.options.inputClear) {
            // 设计器上配置的清空事件
            this.options.inputClear();
        }
    };
    /**
     * @param {?} removedItem
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.tagRemoved = /**
     * @param {?} removedItem
     * @return {?}
     */
    function (removedItem) {
        var _this = this;
        /** @type {?} */
        var mapFields = this.instance.mapFields;
        /** @type {?} */
        var helpFields = Object.keys(mapFields);
        /** @type {?} */
        var bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        var selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = _this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            var vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            function (v, i) {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            _this.utils.setValue(_this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        // 设计器上配置的删除单个标签事件
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    };
    /**
     * @param {?} changeData
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.selectionsChange = /**
     * @param {?} changeData
     * @return {?}
     */
    function (changeData) {
        /** @type {?} */
        var formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        // 设计器上配置的选中数据后事件
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    };
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.updateControlValue = /**
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    };
    /**
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.formSelectedRowData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var defaultDisplayName = _this.instance.displayField ? item[_this.instance.displayField] : "[" + item.code + "]" + item.name;
            /** @type {?} */
            var displayName = _this.instance.formatFn ? _this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName: displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridEmployeeSelectorComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridEmployeeSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-grid-employee-selector',
                    template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-employee-selector #selection style=\"width: 100%\"\r\n      [placeholder]=\"options.placeholder\" [enableQuick]=\"false\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\"\r\n      [viewType]=\"options.viewType\" [multiSelect]=\"options.multiSelect\" [busNum]=\"options.busNum\" [mapFields]=\"options.mapFields\"\r\n      [formatFn]=\"options.formatter\" [formControlName]=\"column.field\" [idField]=\"options.idField\" [displayField]=\"options.textField\"\r\n      [showTabIds]=\"options.showTabIds\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\" [filterId]=\"options.filterId\"\r\n      (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-employee-selector>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    DatagridEmployeeSelectorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: CommonUtils },
        { type: Injector }
    ]; };
    DatagridEmployeeSelectorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['selection',] }]
    };
    return DatagridEmployeeSelectorComponent;
}(DatagridBaseEditorDirective));
export { DatagridEmployeeSelectorComponent };
if (false) {
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.instance;
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.bindingData;
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    DatagridEmployeeSelectorComponent.prototype.rts;
    /** @type {?} */
    DatagridEmployeeSelectorComponent.prototype.utils;
}
/** @type {?} */
export var EmployeeSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'EmployeeSelector', value: DatagridEmployeeSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,