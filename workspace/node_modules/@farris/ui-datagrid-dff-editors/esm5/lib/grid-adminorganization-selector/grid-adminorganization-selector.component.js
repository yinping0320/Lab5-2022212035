/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-adminorganization-selector/grid-adminorganization-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
var AdminOrganizationSelectorDefautOption = {
    absOrgType: 'System_organization',
    readonly: false,
    placeholder: '请选择',
    busNum: 'common',
    primaryField: 'orgId',
    displayField: 'name'
};
var DataGridAdminOrganizationSelectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DataGridAdminOrganizationSelectorComponent, _super);
    function DataGridAdminOrganizationSelectorComponent(render, el, rts, utils, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.utils = utils;
        _this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        function (helpData, mapFields, dataObj) {
            if (mapFields) {
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} data
                             * @return {?}
                             */
                            function (data) { return _this.utils.getValue(helpField, data); })).join(',');
                        }
                        else {
                            val = _this.utils.getValue(helpField, helpData);
                        }
                    }
                    mapFields[helpField].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    function (ff) {
                        /** @type {?} */
                        var formField = trim(ff);
                        _this.utils.setValue(dataObj, formField, val);
                    }));
                }));
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, AdminOrganizationSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        function (itemValue) { return isUndefined(itemValue) || isNull(itemValue); })));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    };
    /**
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inputElement = this.el.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.setValue(fieldPath.join('.'), _this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.getValue(fieldPath.join('.'), _this.bindingData, true);
            });
        }
    };
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.updateControlValue = /**
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    };
    /**
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.inputClear = /**
     * @return {?}
     */
    function () {
        this.updateControlValue(null);
        this.instance.clear.emit();
        // 设计器上配置的清空事件
        if (this.options.inputClear) {
            this.options.inputClear();
        }
    };
    /**
     * @param {?} removedItem
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.tagRemoved = /**
     * @param {?} removedItem
     * @return {?}
     */
    function (removedItem) {
        var _this = this;
        /** @type {?} */
        var mapFields = this.instance.mapFields;
        /** @type {?} */
        var helpFields = Object.keys(mapFields);
        /** @type {?} */
        var bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        var selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = _this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            var vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            function (v, i) {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            _this.utils.setValue(_this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        // 设计器上配置的删除单个标签事件
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    };
    /**
     * @param {?} changeData
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.selectionsChange = /**
     * @param {?} changeData
     * @return {?}
     */
    function (changeData) {
        /** @type {?} */
        var formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        // 设计器上配置的选中数据后事件
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    };
    /**
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.formSelectedRowData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var defaultDisplayName = _this.instance.displayField ? item[_this.instance.displayField] : "" + item.name;
            /** @type {?} */
            var displayName = _this.instance.formatFn ? _this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName: displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DataGridAdminOrganizationSelectorComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DataGridAdminOrganizationSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-grid-adminorganization-selector',
                    template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-adminorganization-selector #orgSelection style=\"width: 100%\"\r\n      [placeholder]=\"options.placeholder\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\" [multiSelect]=\"options.multiSelect\"\r\n      [mapFields]=\"options.mapFields\" [formControlName]=\"column.field\" [primaryField]=\"options.primaryField\" [displayField]=\"options.displayField\"\r\n      [formatFn]=\"options.formatter\" [layer]=\"options.expandLevel\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\"\r\n      [cascadeCheck]=\"options.cascadeCheck\" [cascadeDown]=\"options.cascadeDown\" [cascadeUp]=\"options.cascadeUp\"\r\n      [showTabIds]=\"options.showTabIds\" [activeTabId]=\"options.activeTabId\" [busNum]=\"options.busNum\"\r\n      (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-adminorganization-selector>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    DataGridAdminOrganizationSelectorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: CommonUtils },
        { type: Injector }
    ]; };
    DataGridAdminOrganizationSelectorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['orgSelection',] }]
    };
    return DataGridAdminOrganizationSelectorComponent;
}(DatagridBaseEditorDirective));
export { DataGridAdminOrganizationSelectorComponent };
if (false) {
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.instance;
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.bindingData;
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    DataGridAdminOrganizationSelectorComponent.prototype.rts;
    /** @type {?} */
    DataGridAdminOrganizationSelectorComponent.prototype.utils;
}
/** @type {?} */
export var AdminOrganizationSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'AdminOrganizationSelector', value: DataGridAdminOrganizationSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,