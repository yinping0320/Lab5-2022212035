"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
class ExternalModuleIdStrategy {
    constructor(moduleFormat, dependencyList) {
        this.moduleFormat = moduleFormat;
        this.dependencyList = dependencyList;
    }
    /** Return true when moduleId is to be treated as external  */
    isExternalDependency(moduleId) {
        // more information about why we don't check for 'node_modules' path
        // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632
        if (path.isAbsolute(moduleId) || moduleId.startsWith('.') || moduleId.startsWith('/')) {
            // if it's either 'absolute', marked to embed, starts with a '.' or '/' or is the umd bundle and is tslib
            return false;
        }
        const externals = this.getNonBundledDependencies();
        if (Array.isArray(externals)
            ? !externals.some(x => x === moduleId || moduleId.startsWith(`${x}/`))
            : !externals.test(moduleId)) {
            return false;
        }
        return true;
    }
    /**
     * Returns a array of strings or a RegExp of non-bundled dependencies.
     */
    getNonBundledDependencies() {
        const { bundledDependencies = [], dependencies = [] } = this.dependencyList;
        // return catch all for when there are no 'bundledDependencies' is very important for secondary entry
        // as if this is not the case everything will be bundled in the secondary entry point
        // since no dependencies are defined.
        if (this.moduleFormat !== 'umd') {
            return /./; // catch all as external
        }
        // tslib should always be embeeded for umd modules
        if (bundledDependencies.length === 0) {
            return /^((?!tslib).)*$/;
        }
        // filter out dependencies that are meant to be external
        return dependencies.filter(x => bundledDependencies.indexOf(x) < 0);
    }
}
exports.ExternalModuleIdStrategy = ExternalModuleIdStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtbW9kdWxlLWlkLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwcm9qZWN0cy9mYXJyaXMtcm9sbHVwL3NyYy9idWlsZC9leHRlcm5hbC1tb2R1bGUtaWQtc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFVN0IsTUFBYSx3QkFBd0I7SUFDbkMsWUFBb0IsWUFBaUMsRUFBVSxjQUE4QjtRQUF6RSxpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRWpHLDhEQUE4RDtJQUM5RCxvQkFBb0IsQ0FBQyxRQUFnQjtRQUNuQyxvRUFBb0U7UUFDcEUseUZBQXlGO1FBQ3pGLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckYseUdBQXlHO1lBQ3pHLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUNuRCxJQUNFLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzdCO1lBQ0EsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gseUJBQXlCO1FBQ3ZCLE1BQU0sRUFBRSxtQkFBbUIsR0FBRyxFQUFFLEVBQUUsWUFBWSxHQUFHLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFNUUscUdBQXFHO1FBQ3JHLHFGQUFxRjtRQUNyRixxQ0FBcUM7UUFDckMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLEtBQUssRUFBRTtZQUMvQixPQUFPLEdBQUcsQ0FBQyxDQUFDLHdCQUF3QjtTQUNyQztRQUVELGtEQUFrRDtRQUNsRCxJQUFJLG1CQUFtQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDcEMsT0FBTyxpQkFBaUIsQ0FBQztTQUMxQjtRQUVELHdEQUF3RDtRQUN4RCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNGO0FBN0NELDREQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyByb2xsdXAgZnJvbSAncm9sbHVwJztcblxuZXhwb3J0IGludGVyZmFjZSBEZXBlbmRlbmN5TGlzdCB7XG4gIC8qKiBEaXJlY3QgZGVwZW5kZW5jaWVzIGluY2x1ZGluZyBwZWVyRGVwZW5kZW5jaWVzIGFuZCBvdGhlciBlbnRyeSBwb2ludHMuICovXG4gIGRlcGVuZGVuY2llcz86IHN0cmluZ1tdO1xuICAvKiogRGlyZWN0IGJ1bmRsZWQgZGVwZW5kZW5jaWVzICovXG4gIGJ1bmRsZWREZXBlbmRlbmNpZXM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEV4dGVybmFsTW9kdWxlSWRTdHJhdGVneSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kdWxlRm9ybWF0OiByb2xsdXAuTW9kdWxlRm9ybWF0LCBwcml2YXRlIGRlcGVuZGVuY3lMaXN0OiBEZXBlbmRlbmN5TGlzdCkge31cblxuICAvKiogUmV0dXJuIHRydWUgd2hlbiBtb2R1bGVJZCBpcyB0byBiZSB0cmVhdGVkIGFzIGV4dGVybmFsICAqL1xuICBpc0V4dGVybmFsRGVwZW5kZW5jeShtb2R1bGVJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgLy8gbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB3aHkgd2UgZG9uJ3QgY2hlY2sgZm9yICdub2RlX21vZHVsZXMnIHBhdGhcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlL2lzc3Vlcy8xMTAjaXNzdWVjb21tZW50LTM1MDM1MzYzMlxuICAgIGlmIChwYXRoLmlzQWJzb2x1dGUobW9kdWxlSWQpIHx8IG1vZHVsZUlkLnN0YXJ0c1dpdGgoJy4nKSB8fCBtb2R1bGVJZC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgIC8vIGlmIGl0J3MgZWl0aGVyICdhYnNvbHV0ZScsIG1hcmtlZCB0byBlbWJlZCwgc3RhcnRzIHdpdGggYSAnLicgb3IgJy8nIG9yIGlzIHRoZSB1bWQgYnVuZGxlIGFuZCBpcyB0c2xpYlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dGVybmFscyA9IHRoaXMuZ2V0Tm9uQnVuZGxlZERlcGVuZGVuY2llcygpO1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXh0ZXJuYWxzKVxuICAgICAgICA/ICFleHRlcm5hbHMuc29tZSh4ID0+IHggPT09IG1vZHVsZUlkIHx8IG1vZHVsZUlkLnN0YXJ0c1dpdGgoYCR7eH0vYCkpXG4gICAgICAgIDogIWV4dGVybmFscy50ZXN0KG1vZHVsZUlkKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBhcnJheSBvZiBzdHJpbmdzIG9yIGEgUmVnRXhwIG9mIG5vbi1idW5kbGVkIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGdldE5vbkJ1bmRsZWREZXBlbmRlbmNpZXMoKTogc3RyaW5nW10gfCBSZWdFeHAge1xuICAgIGNvbnN0IHsgYnVuZGxlZERlcGVuZGVuY2llcyA9IFtdLCBkZXBlbmRlbmNpZXMgPSBbXSB9ID0gdGhpcy5kZXBlbmRlbmN5TGlzdDtcblxuICAgIC8vIHJldHVybiBjYXRjaCBhbGwgZm9yIHdoZW4gdGhlcmUgYXJlIG5vICdidW5kbGVkRGVwZW5kZW5jaWVzJyBpcyB2ZXJ5IGltcG9ydGFudCBmb3Igc2Vjb25kYXJ5IGVudHJ5XG4gICAgLy8gYXMgaWYgdGhpcyBpcyBub3QgdGhlIGNhc2UgZXZlcnl0aGluZyB3aWxsIGJlIGJ1bmRsZWQgaW4gdGhlIHNlY29uZGFyeSBlbnRyeSBwb2ludFxuICAgIC8vIHNpbmNlIG5vIGRlcGVuZGVuY2llcyBhcmUgZGVmaW5lZC5cbiAgICBpZiAodGhpcy5tb2R1bGVGb3JtYXQgIT09ICd1bWQnKSB7XG4gICAgICByZXR1cm4gLy4vOyAvLyBjYXRjaCBhbGwgYXMgZXh0ZXJuYWxcbiAgICB9XG5cbiAgICAvLyB0c2xpYiBzaG91bGQgYWx3YXlzIGJlIGVtYmVlZGVkIGZvciB1bWQgbW9kdWxlc1xuICAgIGlmIChidW5kbGVkRGVwZW5kZW5jaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC9eKCg/IXRzbGliKS4pKiQvO1xuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgZGVwZW5kZW5jaWVzIHRoYXQgYXJlIG1lYW50IHRvIGJlIGV4dGVybmFsXG4gICAgcmV0dXJuIGRlcGVuZGVuY2llcy5maWx0ZXIoeCA9PiBidW5kbGVkRGVwZW5kZW5jaWVzLmluZGV4T2YoeCkgPCAwKTtcbiAgfVxufSJdfQ==