
const fs = require("fs");
const crypto = require("crypto");
const path = require("path");

function updateVersion(buildConfig) {

    return {
        name: 'updateversion',
        writeBundle: function (bundle) {
            if (bundle) {
                const projectRoot = buildConfig.root;
                const vesionFileOutputPath = buildConfig.options.outputPath;
                let initVersion = "0.0.1";
                const versionJsonFilePath = generateVersionJsonPath(projectRoot);
                // main.js 初始脚本
                let mainJsVersion = initVersion;
                const mainJSVersionKey = "main.js";
                let isMainJs = false;
                let mainJsChanged = false;

                // polyfill.js 脚本
                let polyfillJsVersion = initVersion;
                const polyfillVersionKey = "polyfill.js";
                let ispolyfill = false;
                let polyfillChanged = false;


                Object.keys(bundle).forEach((item) => {
                    const fileName = item;
                    const bundleContent = bundle[item];
                    if (fileName == mainJSVersionKey) {
                        isMainJs = true;
                    } else if (fileName == polyfillVersionKey) {
                        ispolyfill = true;
                    }


                    const sourceCode = bundleContent.code;
                    const sourceSha256 = cryptoVersionContent(sourceCode);
                    initVersion = sourceSha256;

                    const versionContent = readVersionJson(versionJsonFilePath);
                    if (versionContent && versionContent instanceof Array) {
                        let hasChanged = false;
                        let hasExists = false;

                        versionContent.forEach((item) => {
                            if (item && item.category == "form" && item.key == fileName.toLowerCase()) {
                                hasExists = true;

                                const newVersion = sourceSha256;//generate(item.value);
                                item.value = newVersion;
                                hasChanged = true;

                                // 设置mainJS的最新版本
                                if (isMainJs) {
                                    mainJsChanged = true;
                                    mainJsVersion = newVersion;
                                }

                                if (ispolyfill) {
                                    polyfillJsVersion = newVersion;
                                    polyfillChanged = true;
                                }

                            }
                        });

                        if (!hasExists) {
                            versionContent.push({
                                "autoIncre": true,
                                "category": "form",
                                "key": fileName,
                                "value": "" + initVersion,
                            });

                            // 设置mainJS的最新版本                            
                            if (isMainJs) {
                                mainJsChanged = true;
                                mainJsVersion = initVersion;
                            }

                            if (ispolyfill) {
                                polyfillJsVersion = initVersion;
                                polyfillChanged = true;
                            }
                        }

                        if (!hasExists || hasChanged) {
                            writeVersionJson(versionJsonFilePath, versionContent);
                        }
                    } else {
                        console.error("version.json file content parse failed,please make  sure has an array");
                    }
                });

                // 执行文件拷贝             
                const targetVersionJsonFilePath = path.normalize(path.resolve("./" + buildConfig.options.outputPath + "/version.json"));
                copyVersionJson(versionJsonFilePath, targetVersionJsonFilePath);

                // 生成后的index.html文件
                if (mainJsChanged || polyfillChanged) {
                    const targetIndexHtmlFilePath = path.normalize(path.resolve("./" + buildConfig.options.outputPath + "/index.html"));
                    updateIndexHtmlMainJsVersion(targetIndexHtmlFilePath, mainJsVersion, polyfillJsVersion);
                }
            }
        }
    };

};


/**
 * 更新index.html中main.js文件的版本
 *
 */
function updateIndexHtmlMainJsVersion(targetFilePath, mainJsVersion, polyfillJsVersion) {
    if (fs.existsSync(targetFilePath)) {
        if (!mainJsVersion) {
            mainJsVersion = "0.0.1";
        }
        if (!polyfillJsVersion) {
            polyfillJsVersion = "0.0.1";
        }
        let indexHtmlContent = fs.readFileSync(targetFilePath, "utf8");
        // 替换main.js脚本
        indexHtmlContent = indexHtmlContent.replace("System.import('./main.js');", "System.import('./main.js?version=" + mainJsVersion + "');");
        // 替换polyfill.js脚本
        indexHtmlContent = indexHtmlContent.replace('<script src="polyfills.js"></script>', '<script src="polyfills.js?version=' + polyfillJsVersion + '"></script>');

        fs.writeFileSync(targetFilePath, indexHtmlContent, "utf8");
    }
}

/**
 * 赋值版本控制文件 只有在版本发生变化时进行文件的拷贝
 *
 * @param {*} sourceJsonFilePath
 * @param {*} targetFilePath
 */
function copyVersionJson(sourceJsonFilePath, targetFilePath) {
    if (fs.existsSync(sourceJsonFilePath)) {
        fs.copyFileSync(sourceJsonFilePath, targetFilePath);
    }
}

/**
 * sourceCode 进行md5
 *
 * @param {*} source
 * @returns
 */
function cryptoVersionContent(source, returnLength) {
    if (!returnLength) {
        returnLength = 15;
    }
    if (!source) {
        return "000000";
    }
    const md5Crypto = crypto.createHash("sha256");
    const sha256Result = md5Crypto.update(source).digest('hex');
    if (sha256Result.length < returnLength) {
        return sha256Result;
    }
    return sha256Result.substring(0, returnLength - 1);
}

/**
 * 读取版本文件内容
 *
 * @returns
 */
function readVersionJson(versionJsonPath) {

    if (fs.existsSync(versionJsonPath)) {
        const versionJsonContent = fs.readFileSync(versionJsonPath, "utf8");
        return JSON.parse(versionJsonContent);
    }
    else {
        try {
            // 如果文件不存在 那么新建文件 包含一个空数组结构
            console.log("version.json file is not exists, create empty file,the path is  " + versionJsonPath);
            const emptyContent = [];
            writeVersionJson(versionJsonPath, emptyContent);
            return emptyContent;
        } catch (err) {
            console.log("version.json file is not exists, file path is " + versionJsonPath);
        }
    }
}

/**
 * 写入版本文件内容
 *
 * @param {*} versionJsonContent
 */
function writeVersionJson(versionJsonPath, versionJsonContent) {
    fs.writeFileSync(versionJsonPath, JSON.stringify(versionJsonContent), { encoding: 'utf8' });
}

/**
 * 生成version.json 文件路径
 *
 * @param {*} basePath
 * @param {*} fileName
 * @returns
 */
function generateVersionJsonPath(basePath, fileName) {
    if (!fileName) {
        fileName = "version.json";
    }
    if (basePath) {
        const versionJsonPath = path.normalize(path.resolve(basePath, fileName));
        return versionJsonPath;
    }
    return path.normalize(path.resolve(basePath, fileName));
}


/**
   * 当前生成文件的下一个版本
   *
   * @static
   * @param {string} oldVersion  旧版本
   * @returns {string} 新版本
   * @memberof BuildFileNextVersionGenerator
   */
function generate(oldVersion) {
    if (!oldVersion) {
        return "0.0.1";
    }

    // 三段式版本 0.0.0
    const arrOldVersion = oldVersion.split(".");
    const arrNewVersion = new Array(3);
    let hasGeneratedNewVersion = false;
    for (let i = 2; i >= 0; i--) {
        let newVersionStr = arrOldVersion[i];
        if (hasGeneratedNewVersion == false) {
            const newVersion = generateNextNumber(arrOldVersion[i]);
            if (newVersion != -1) {
                newVersionStr = newVersion.toString();
                // 标识已经进行了版本更改
                hasGeneratedNewVersion = true;
            }
        }
        arrNewVersion[i] = newVersionStr;
    }
    return arrNewVersion.join(".");
}


/**
 * 返回当前数字加1的数字  如果加1后数字大于等于1000  那么返回-1
 *
 * @private
 * @param {string} oldNumberStr
 * @memberof BuildFileNextVersionGenerator
 */
function generateNextNumber(oldNumberStr) {
    const oldNumber = Number.parseInt(oldNumberStr);
    const newNumber = oldNumber + 1;
    if (newNumber >= 1000) {
        return -1;
    }
    return newNumber;
}

exports.updateVersion = updateVersion;