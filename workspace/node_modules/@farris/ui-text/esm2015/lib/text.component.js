/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input, HostBinding, Output, EventEmitter, Injector, ElementRef, ViewChild, NgZone, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { NumberHelperService } from '@farris/ui-common/number';
import { DebugService } from '@farris/ui-common';
import { LocaleService } from '@farris/ui-locale';
export class TextComponent {
    /**
     * @param {?} dtHelper
     * @param {?} numberHelper
     * @param {?} injector
     * @param {?} ngzone
     */
    constructor(dtHelper, numberHelper, injector, ngzone) {
        this.dtHelper = dtHelper;
        this.numberHelper = numberHelper;
        this.injector = injector;
        this.ngzone = ngzone;
        this.cls = true;
        this.textChange = new EventEmitter();
        /**
         * 是否为密码输入
         */
        this.isPassword = false;
        // 是否多行文本
        this.isTextArea = false;
        // 是否启用自动尺寸
        this.autoSize = false;
        // 设置高度
        this.height = 0;
        // 是否是日期范围
        this.dateRange = false;
        // 千分位符号
        this.thousand = ',';
        // 小数点处符号
        this.decimal = '.';
        // 货币符号及值展现形式
        this.expression = '%s%v';
        this.textField = 'name';
        this.valueField = 'value';
        this.returnFormat = ''; // 从服务器端取值是格式化后的
        // 日期范围模式下input的显示分割符合
        this.dateRangeDelimiter = '~';
        this.enumDelimiter = ',';
        this._tshowType = 0;
        // 货币符号，默认是RMB
        this.currencySymbol = '￥';
        // 十进制前面填充的符号
        this.filledSymbol = '0';
        // 标签
        this.staticTitle = "";
        // 处理中英文情况， 因为多语言暂时不通过这个属性控制
        this.showTitle = false;
        /**
         * 日期多选
         */
        this.multiSelect = false;
        /**
         * 日期多选分隔符
         */
        this.separator = ',';
        this.beforeWriteValue = null;
        this.controlChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.controlTouch = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.debugSer = null;
        this.localeService = this.injector.get(LocaleService);
        this.debugSer = this.injector.get(DebugService, null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showType(value) {
        this._tshowType = value;
        // 如果是周
        if (value == 4) {
            this.dateRange = true;
        }
    }
    /**
     * @return {?}
     */
    get showType() {
        return this._tshowType;
    }
    // 普通文本输入值
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.text = this.formatValue(value);
        this.textChange.emit(this.text);
    }
    /**
     * @return {?}
     */
    get value() {
        return this.text;
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    changeTitle(ev) {
        if (!this.isTextArea && !this.isPassword) {
            this.mouseEnterChangeTitle();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set option(value) {
        this._option = value;
    }
    /**
     * @return {?}
     */
    get option() {
        return this._option;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isTextArea) {
            /** @type {?} */
            const clsName = this.textInnerEl.nativeElement.parentElement.className;
            this.textInnerEl.nativeElement.parentElement.className = clsName + ' f-cmp-text-is-textarea';
        }
    }
    /**
     * @private
     * @return {?}
     */
    mouseEnterChangeTitle() {
        /** @type {?} */
        let textEl = this.textInnerEl.nativeElement;
        if (Math.abs(textEl.scrollWidth - textEl.clientWidth) > 2 || Math.abs(textEl.scrollHeight - textEl.clientHeight) > 2) {
            this.staticTitle = this.text && this.text.length > 0 ? this.text : this.control;
        }
        else {
            this.staticTitle = '';
        }
    }
    /**
     * 处理多语言，待定
     * @param {?} value
     * @return {?}
     */
    formatLang(value) {
        return value && value[this.currentLanguage] ? value[this.currentLanguage] : '';
    }
    /**
     * C货币
     * D十进制
     * F浮点数
     * N数字，带千分位
     * P百分比
     * @param {?} value
     * @return {?}
     */
    getFormatNumberValue(value) {
        if (!this.format && !this._option) {
            return value.toString();
        }
        if (this._option && this._option.type && this._option.type == 'number') {
            if (this._option.formatter) {
                return this._option.formatter(value);
            }
            else {
                if (this._option.useThousands) {
                    if (this._option.precision != undefined) {
                        this.format = 'n' + this._option.precision;
                    }
                    else {
                        this.format = 'n2';
                    }
                }
                else {
                    if (this._option.precision != undefined) {
                        this.format = 'f' + this._option.precision;
                    }
                    else {
                        this.format = 'f2';
                    }
                }
            }
        }
        /** @type {?} */
        const firstLetter = this.currencyToUpperCase(this.format.substring(0, 1));
        /** @type {?} */
        const precision = Number(this.format.substring(1));
        /** @type {?} */
        let config = {};
        /** @type {?} */
        let result;
        if (!/C|D|F|N|P/g.test(firstLetter)) {
            if (this.debugSer) {
                this.debugSer.warn(`不支持format为 ${this.format} 类型的数字格式化`);
            }
            return;
        }
        if (this.thousand) {
            Object.assign(config, { thousand: this.thousand });
        }
        if (this.decimal) {
            Object.assign(config, { decimal: this.decimal });
        }
        if (this.expression) {
            Object.assign(config, { format: this.expression });
        }
        switch (firstLetter) {
            case 'C':
                Object.assign(config, { prefix: this.currencySymbol, precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'D':
                result = this.toDecimal(value, precision);
                break;
            case 'F':
                Object.assign(config, { prefix: '', thousand: '', precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'N':
                Object.assign(config, { prefix: '', precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'P':
                result = this.toPercent(value, precision);
                break;
        }
        return result;
    }
    /**
     * @param {?} value 转换成十进制的数字
     * @param {?} precision 十进制数字的长度
     * @return {?}
     */
    toDecimal(value, precision) {
        if (value.toString().indexOf('.') > -1) {
            if (this.debugSer) {
                this.debugSer.warn('十进制转换仅限整型类型');
            }
            return;
        }
        return (Array(precision).join(this.filledSymbol) + value).slice(-precision);
    }
    /**
     * @param {?} value 转换成百分数的数字
     * @param {?} precision
     * @return {?}
     */
    toPercent(value, precision) {
        return Number(value * 100).toFixed(Number(precision)) + '%';
    }
    /**
     * 将货币符号首字母转换成大写
     * @param {?} value
     * @return {?}
     */
    currencyToUpperCase(value) {
        return value.replace(/[a-z]+/g, (/**
         * @param {?} word
         * @return {?}
         */
        (word) => {
            return word.toUpperCase();
        }));
    }
    /**
     * 处理年，Y=>y, D=>d
     * @param {?} value
     * @return {?}
     */
    dateToUpperCase(value) {
        /** @type {?} */
        let newFormat;
        if (/Y/g.test(value) === true) {
            newFormat = value.replace(/Y/g, 'y');
        }
        else {
            newFormat = value;
        }
        if (/D/g.test(newFormat) === true) {
            newFormat = newFormat.replace(/D/g, 'd');
        }
        return newFormat;
    }
    /**
     * 枚举类型处理
     * @param {?} value
     * @return {?}
     */
    getFormatEnumValue(value) {
        if (value == undefined || value === null || value === '') {
            return '';
        }
        if (this.data && this.data.length) {
            // 可能存在多选枚举，作为分隔符  
            // let curVals = ('' + value).split(',');
            /** @type {?} */
            let curVals = ('' + value).split(this.enumDelimiter);
            /** @type {?} */
            let nameResult = [];
            for (let k = 0; k < curVals.length; k++) {
                /** @type {?} */
                let findObj = this.data.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item[this.valueField] == curVals[k];
                }));
                if (findObj) {
                    nameResult.push(findObj[this.textField]);
                }
                else {
                    nameResult.push(curVals[k]);
                }
            }
            if (nameResult.length > 0) {
                // return nameResult.join(',');
                return nameResult.join(this.enumDelimiter);
            }
            return '';
        }
        else {
            return value;
        }
    }
    /**
     * boolean值处理
     * @param {?} value
     * @return {?}
     */
    getFormatCheckBoxValue(value) {
        if (value === true) {
            return this.localeService.getValue('text.yes');
        }
        else if (value === false || value == null || typeof value === 'undefined') {
            return this.localeService.getValue('text.no');
        }
        else {
            return value;
        }
    }
    /**
     * @private
     * @param {?} value
     * @param {?} fmt
     * @param {?=} hourSystem
     * @return {?}
     */
    timeFormatTo(value, fmt, hourSystem = 12) {
    }
    /**
     * @private
     * @param {?} fmt
     * @return {?}
     */
    makeFormater(fmt) {
        return fmt;
    }
    /*
        * 日期格式化
        */
    /**
     * @param {?} value
     * @return {?}
     */
    dateformat(value) {
        /** @type {?} */
        let str;
        if (!this.format) {
            this.format = 'YYYY-MM-DD';
        }
        if (this.format === 'timeago') {
            return this.dtHelper.relativeTime(value, this.localeService.localeId || 'zh-CHS');
        }
        // 当前值是已经格式化后的日期字符串
        if (this.returnFormat && this.returnFormat != 'yyyy-MM-dd' && typeof value == 'string') {
            value = this.getDateFromFormatedString(value, this.returnFormat);
        }
        //
        if (this.format === 'hh:mm:ss' || this.format === 'HH:mm:ss') {
            // 格式化时间  临时处理
            str = value;
        }
        else {
            // if (this.showTime && value instanceof String) {
            //     str = value;
            // } else {
            //     const formArr = this.format.split(' ');
            //     if (this.showTime && formArr.length < 2) {
            //         formArr.push('HH:mm:ss');
            //         this.format = formArr.join(' ');
            //     }
            //     // 格式化日期
            //     str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
            // }
            if (this.multiSelect && value) {
                /** @type {?} */
                const fmtList = ['yyyy-MM-dd', 'yyyy/MM/dd', 'MM/dd/yyyy', 'yyyy年MM月dd日', 'yyyyMMdd'];
                if (!fmtList.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n === this.format))) {
                    this.format = 'yyyy-MM-dd';
                }
                str = value.split(this.separator).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n.indexOf('年') > -1) {
                        n = n.replace('年', '-');
                    }
                    if (n.indexOf('月') > -1) {
                        n = n.replace('月', '-');
                    }
                    if (n.indexOf('日') > -1) {
                        n = n.replace('日', '');
                    }
                    return this.dtHelper.formatTo(n, this.dateToUpperCase(this.format));
                })).join(this.separator);
            }
            else {
                str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
            }
        }
        return str;
    }
    /**
     * @private
     * @param {?} dateString
     * @param {?} format
     * @return {?}
     */
    getDateFromFormatedString(dateString, format) {
        /** @type {?} */
        var result = { year: 0, month: 0, day: 0, hour: 0, minite: 0, second: 0 };
        if (dateString) {
            format.replace(/y+|Y+|M+|d+|D+|h+|H+|m+|s+/g, (/**
             * @param {?} m
             * @param {?} a
             * @param {?} b
             * @param {?} c
             * @return {?}
             */
            function (m, a, b, c) {
                dateString.substring(a).replace(/\d+/, (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { c = parseInt(d, 10); }));
                if (/y+/i.test(m) && !result.year)
                    result.year = c;
                if (/M+/.test(m) && !result.month)
                    result.month = c;
                if (/d+/i.test(m) && !result.day)
                    result.day = c;
                if (/h+/i.test(m) && !result.hour)
                    result.hour = c;
                if (/m+/.test(m) && !result.minite)
                    result.minite = c;
                if (/s+/.test(m) && !result.second)
                    result.second = c;
            }));
        }
        /** @type {?} */
        var resultDate = new Date(result.year + '/' + result.month + '/' + result.day + ' ' + result.hour + ':' + result.minite + ':' + result.second);
        return resultDate;
    }
    /**
     * 格式化处理
     * @param {?} value
     * @return {?}
     */
    formatValue(value) {
        /** @type {?} */
        let str;
        if (this.currentLanguage) {
            return this.formatLang(value);
        }
        // if (!value) {
        //     return '';
        // }
        if (this.type !== 'boolean' && (value == null || typeof value === 'undefined')) {
            return '';
        }
        switch (this.type) {
            case 'string':
                str = value;
                break;
            case 'date':
            case 'datetime':
                if (!this.dateRange) {
                    // if (!this.format) {
                    //     this.format = 'YYYY-MM-DD';
                    // }
                    // if (this.format === 'hh:mm:ss') {
                    //     // 格式化时间  临时处理
                    //     str = value;
                    // } else {
                    //     if (this.showTime) {
                    //         str = value;
                    //     } else {
                    //         // 格式化日期
                    //         str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
                    //     }
                    // }
                    str = this.dateformat(value);
                }
                else {
                    /** @type {?} */
                    const dateValues = value.split(this.dateRangeDelimiter);
                    /** @type {?} */
                    let dataStr = [];
                    if (dateValues && dateValues.length) {
                        dateValues.forEach((/**
                         * @param {?} date
                         * @return {?}
                         */
                        date => {
                            /** @type {?} */
                            let val = this.dateformat(date);
                            dataStr.push(val);
                        }));
                    }
                    str = dataStr.join(this.dateRangeDelimiter);
                }
                break;
            // case 'dateTime':
            //     str = this.timeFormatTo(value, this.makeFormater(this.format));
            //     break;
            case 'number':
                str = this.getFormatNumberValue(value);
                break;
            case 'enum':
                str = this.getFormatEnumValue(value);
                break;
            case 'boolean':
                str = this.getFormatCheckBoxValue(value);
                break;
            default:
                break; // throw new Error(`暂不支持 ${this.type} 类型`);
        }
        return str;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setText2Star(value) {
        if (this.isPassword) {
            /** @type {?} */
            const star = value ? '******' : '';
            this.text = star;
            this.control = star;
            return true;
        }
        return false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // lucas 2021-08-27
        if (this.setText2Star(value)) {
            return;
        }
        // xia 2021-03-13
        if (this.beforeWriteValue) {
            /** @type {?} */
            const options = {
                localizationType: this.localizationType,
                showTime: this.showTime,
                ref: this
            };
            /** @type {?} */
            const text = this.beforeWriteValue(value, options);
            if (text !== undefined) {
                this.text = text;
                return;
            }
        }
        this.control = this.formatValue(value);
        this.controlChange(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.controlChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.controlTouch = fn;
    }
}
TextComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-text',
                template: `
        <span #textInner
            [ngClass]="{'f-form-control-text':!isTextArea,'f-form-control-textarea':isTextArea,'f-component-text-auto-size': this.autoSize}"
            [title]="staticTitle" [style.text-align]="textAlign"
            [style.height]="!autoSize&&height>0?height+'px':null" [style.minHeight]="autoSize&&height>0?height+'px':null"
            [style.maxHeight]="autoSize&&maxHeight>0?maxHeight+'px':null">{{text && text.length > 0 ?  text : control}}</span>
    `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TextComponent)),
                        multi: true,
                    }]
            }] }
];
/** @nocollapse */
TextComponent.ctorParameters = () => [
    { type: DateTimeHelperService },
    { type: NumberHelperService },
    { type: Injector },
    { type: NgZone }
];
TextComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-component-text',] }],
    textInnerEl: [{ type: ViewChild, args: ['textInner', { read: ElementRef },] }],
    textChange: [{ type: Output }],
    isPassword: [{ type: Input }],
    isTextArea: [{ type: Input }],
    autoSize: [{ type: Input }],
    maxHeight: [{ type: Input }],
    height: [{ type: Input }],
    type: [{ type: Input }],
    dateRange: [{ type: Input }],
    format: [{ type: Input }],
    lang: [{ type: Input }],
    data: [{ type: Input }],
    thousand: [{ type: Input }],
    decimal: [{ type: Input }],
    expression: [{ type: Input }],
    currentLanguage: [{ type: Input }],
    showTime: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    returnFormat: [{ type: Input }],
    textAlign: [{ type: Input }],
    dateRangeDelimiter: [{ type: Input }],
    enumDelimiter: [{ type: Input }],
    showType: [{ type: Input }],
    localizationType: [{ type: Input }],
    filledSymbol: [{ type: Input }],
    value: [{ type: Input }],
    changeTitle: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    showTitle: [{ type: Input }],
    option: [{ type: Input }],
    multiSelect: [{ type: Input }],
    separator: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextComponent.prototype.cls;
    /** @type {?} */
    TextComponent.prototype.textInnerEl;
    /** @type {?} */
    TextComponent.prototype.textChange;
    /**
     * 是否为密码输入
     * @type {?}
     */
    TextComponent.prototype.isPassword;
    /** @type {?} */
    TextComponent.prototype.isTextArea;
    /** @type {?} */
    TextComponent.prototype.autoSize;
    /** @type {?} */
    TextComponent.prototype.maxHeight;
    /** @type {?} */
    TextComponent.prototype.height;
    /** @type {?} */
    TextComponent.prototype.type;
    /** @type {?} */
    TextComponent.prototype.dateRange;
    /** @type {?} */
    TextComponent.prototype.format;
    /** @type {?} */
    TextComponent.prototype.lang;
    /** @type {?} */
    TextComponent.prototype.data;
    /** @type {?} */
    TextComponent.prototype.thousand;
    /** @type {?} */
    TextComponent.prototype.decimal;
    /** @type {?} */
    TextComponent.prototype.expression;
    /** @type {?} */
    TextComponent.prototype.currentLanguage;
    /** @type {?} */
    TextComponent.prototype.showTime;
    /** @type {?} */
    TextComponent.prototype.textField;
    /** @type {?} */
    TextComponent.prototype.valueField;
    /** @type {?} */
    TextComponent.prototype.returnFormat;
    /** @type {?} */
    TextComponent.prototype.textAlign;
    /** @type {?} */
    TextComponent.prototype.dateRangeDelimiter;
    /** @type {?} */
    TextComponent.prototype.enumDelimiter;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype._tshowType;
    /**
     * 国际化类型
     * @type {?}
     */
    TextComponent.prototype.localizationType;
    /** @type {?} */
    TextComponent.prototype.control;
    /** @type {?} */
    TextComponent.prototype.text;
    /** @type {?} */
    TextComponent.prototype.currencySymbol;
    /** @type {?} */
    TextComponent.prototype.filledSymbol;
    /** @type {?} */
    TextComponent.prototype.staticTitle;
    /** @type {?} */
    TextComponent.prototype.showTitle;
    /** @type {?} */
    TextComponent.prototype._option;
    /**
     * 日期多选
     * @type {?}
     */
    TextComponent.prototype.multiSelect;
    /**
     * 日期多选分隔符
     * @type {?}
     */
    TextComponent.prototype.separator;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.localeService;
    /** @type {?} */
    TextComponent.prototype.beforeWriteValue;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.dtHelper;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.numberHelper;
    /**
     * @type {?}
     * @private
     */
    TextComponent.prototype.injector;
    /** @type {?} */
    TextComponent.prototype.ngzone;
}
//# sourceMappingURL=data:application/json;base64,