{"version":3,"sources":["ng://@farris/ui-text/lib/text.component.service.ts","ng://@farris/ui-text/lib/text.component.ts","ng://@farris/ui-text/lib/text.module.ts"],"names":["StaticTextControlService","Injectable","args","providedIn","TextComponent","Object","defineProperty","prototype","this","_tshowType","value","dateRange","text","formatValue","textChange","emit","changeTitle","ev","isTextArea","isPassword","mouseEnterChangeTitle","_option","ngOnInit","ngOnDestroy","ngAfterViewInit","clsName","textInnerEl","nativeElement","parentElement","className","textEl","Math","abs","scrollWidth","clientWidth","scrollHeight","clientHeight","staticTitle","length","control","formatLang","currentLanguage","getFormatNumberValue","format","toString","type","formatter","useThousands","precision","undefined","result","firstLetter","currencyToUpperCase","substring","Number","config","test","thousand","assign","decimal","expression","prefix","currencySymbol","numberHelper","formatMoney","toDecimal","toPercent","debugSer","warn","indexOf","Array","join","filledSymbol","slice","toFixed","replace","word","toUpperCase","dateToUpperCase","newFormat","getFormatEnumValue","_this","data","curVals_1","split","enumDelimiter","nameResult","k","findObj","this_1","find","item","valueField","push","textField","getFormatCheckBoxValue","localeService","getValue","timeFormatTo","fmt","hourSystem","makeFormater","dateformat","dtHelper","relativeTime","localeId","returnFormat","getDateFromFormatedString","multiSelect","n","separator","map","formatTo","dateString","year","month","day","hour","minite","second","m","a","b","c","d","parseInt","Date","str","dateValues","dateRangeDelimiter","dataStr_1","forEach","date","val","setText2Star","star","writeValue","beforeWriteValue","options","localizationType","showTime","ref","controlChange","registerOnChange","fn","registerOnTouched","controlTouch","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DateTimeHelperService","NumberHelperService","Injector","NgZone","HostBinding","ViewChild","read","ElementRef","Output","Input","HostListener","injector","ngzone","cls","EventEmitter","autoSize","height","showTitle","get","LocaleService","DebugService","TextModule","NgModule","declarations","imports","CommonModule","LocaleModule","NumberHelperModule","DateHelperModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StaticTextControlService {\r\n\r\n  constructor() { }\r\n}\r\n","import {\r\n    Component, OnInit, forwardRef, Input, HostBinding, Output, EventEmitter, Injector,\r\n    SimpleChanges, ElementRef, ViewChild, NgZone, HostListener\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { NumberHelperService } from '@farris/ui-common/number';\r\nimport { DebugService } from '@farris/ui-common';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'farris-text',\r\n    template: `\r\n        <span #textInner\r\n            [ngClass]=\"{'f-form-control-text':!isTextArea,'f-form-control-textarea':isTextArea,'f-component-text-auto-size': this.autoSize}\"\r\n            [title]=\"staticTitle\" [style.text-align]=\"textAlign\"\r\n            [style.height]=\"!autoSize&&height>0?height+'px':null\" [style.minHeight]=\"autoSize&&height>0?height+'px':null\"\r\n            [style.maxHeight]=\"autoSize&&maxHeight>0?maxHeight+'px':null\">{{text && text.length > 0 ?  text : control}}</span>\r\n    `,\r\n    styles: [],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => TextComponent),\r\n        multi: true,\r\n    }]\r\n})\r\nexport class TextComponent implements OnInit, ControlValueAccessor {\r\n    @HostBinding('class.f-component-text') cls = true;\r\n    @ViewChild('textInner', { read: ElementRef }) textInnerEl: ElementRef;\r\n    @Output() textChange = new EventEmitter<any>();\r\n    /** æ¯å¦ä¸ºå¯ç è¾å¥ */\r\n    @Input() isPassword = false;\r\n    // æ¯å¦å¤è¡ææ¬\r\n    @Input() isTextArea = false;\r\n    // æ¯å¦å¯ç¨èªå¨å°ºå¯¸\r\n    @Input() autoSize = false;\r\n    // è®¾ç½®æå¤§é«åº¦\r\n    @Input() maxHeight: number;\r\n    // è®¾ç½®é«åº¦\r\n    @Input() height = 0;\r\n    // æ§ä»¶ç±»å\r\n    @Input() type: string;\r\n    // æ¯å¦æ¯æ¥æèå´\r\n    @Input() dateRange = false;\r\n    // éè¦è½¬åç±»åæ ¼å¼çè¡¨è¾¾å¼\r\n    @Input() format: any;\r\n    // å¤è¯­è¨\r\n    @Input() lang: string;\r\n    // è½¬æ¢ç±»åç¨å°çæ°æ®\r\n    @Input() data: any;\r\n    // ååä½ç¬¦å·\r\n    @Input() thousand = ',';\r\n    // å°æ°ç¹å¤ç¬¦å·\r\n    @Input() decimal = '.';\r\n    // è´§å¸ç¬¦å·åå¼å±ç°å½¢å¼\r\n    @Input() expression = '%s%v';\r\n    @Input() currentLanguage: string;\r\n    // formControlæ¾ç¤ºçææ¬\r\n    @Input() showTime: boolean;\r\n    @Input() textField = 'name';\r\n    @Input() valueField = 'value';\r\n    @Input() returnFormat = ''; // ä»æå¡å¨ç«¯åå¼æ¯æ ¼å¼ååç\r\n\r\n    // ææ¬æ¹å\r\n    @Input() textAlign;\r\n    // æ¥æèå´æ¨¡å¼ä¸inputçæ¾ç¤ºåå²ç¬¦å\r\n    @Input() dateRangeDelimiter = '~';\r\n    @Input() enumDelimiter = ',';\r\n    private _tshowType = 0;\r\n    @Input()\r\n    set showType(value: number) {\r\n        this._tshowType = value;\r\n        // å¦ææ¯å¨\r\n        if (value == 4) {\r\n            this.dateRange = true;\r\n        }\r\n    }\r\n    get showType(): number {\r\n        return this._tshowType;\r\n    }\r\n    /**\r\n     * å½éåç±»å\r\n     */\r\n    @Input() localizationType: string;\r\n    control: any;\r\n    // æ®éææ¬\r\n    text: any;\r\n    // è´§å¸ç¬¦å·ï¼é»è®¤æ¯RMB\r\n    currencySymbol = 'ï¿¥';\r\n    // åè¿å¶åé¢å¡«åçç¬¦å·\r\n    @Input() filledSymbol = '0';\r\n    // æ®éææ¬è¾å¥å¼\r\n    @Input()\r\n    set value(value: any) {\r\n        this.text = this.formatValue(value);\r\n        this.textChange.emit(this.text);\r\n    }\r\n    get value() {\r\n        return this.text;\r\n    }\r\n    @HostListener('mouseenter', ['$event']) changeTitle(ev) {\r\n        if (!this.isTextArea && !this.isPassword) {\r\n            this.mouseEnterChangeTitle();\r\n        }\r\n    }\r\n    // æ ç­¾\r\n    staticTitle = \"\";\r\n    // å¤çä¸­è±ææåµï¼ å ä¸ºå¤è¯­è¨ææ¶ä¸éè¿è¿ä¸ªå±æ§æ§å¶\r\n    @Input() showTitle = false;\r\n    //æ°å¼æ ¼å¼åæ°\r\n    _option;\r\n    @Input()\r\n    set option(value) {\r\n        this._option = value;\r\n    }\r\n    get option() {\r\n        return this._option;\r\n    }\r\n\r\n    /** æ¥æå¤é */\r\n    @Input() multiSelect = false;\r\n    /** æ¥æå¤éåéç¬¦ */\r\n    @Input() separator = ',';\r\n\r\n    private localeService: any;\r\n\r\n    beforeWriteValue: (val: any, options: any) => string = null;\r\n\r\n    private controlChange = (val) => { };\r\n    private controlTouch = (val) => { };\r\n    private debugSer: DebugService = null;\r\n    constructor(\r\n        private dtHelper: DateTimeHelperService,\r\n        private numberHelper: NumberHelperService,\r\n        private injector: Injector,\r\n        public ngzone: NgZone\r\n    ) {\r\n        this.localeService = this.injector.get(LocaleService);\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n    ngOnDestroy(): void {\r\n    }\r\n    ngAfterViewInit(): void {\r\n        if (this.isTextArea) {\r\n            const clsName = this.textInnerEl.nativeElement.parentElement.className;\r\n            this.textInnerEl.nativeElement.parentElement.className = clsName + ' f-cmp-text-is-textarea';\r\n        }\r\n    }\r\n    private mouseEnterChangeTitle() {\r\n        let textEl=this.textInnerEl.nativeElement;\r\n        if (Math.abs(textEl.scrollWidth - textEl.clientWidth) > 2 || Math.abs(textEl.scrollHeight - textEl.clientHeight) > 2) {\r\n            this.staticTitle = this.text && this.text.length > 0 ? this.text : this.control;\r\n        } else {\r\n            this.staticTitle = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¤çå¤è¯­è¨ï¼å¾å®\r\n     */\r\n    formatLang(value: any) {\r\n        return value && value[this.currentLanguage] ? value[this.currentLanguage] : '';\r\n    }\r\n    /**\r\n     * Cè´§å¸\r\n     * Dåè¿å¶\r\n     * Fæµ®ç¹æ°\r\n     * Næ°å­ï¼å¸¦ååä½\r\n     * Pç¾åæ¯\r\n     */\r\n    getFormatNumberValue(value: any) {\r\n        if (!this.format && !this._option) {\r\n            return value.toString();\r\n        }\r\n        if (this._option && this._option.type && this._option.type == 'number') {\r\n            if (this._option.formatter) {\r\n                return this._option.formatter(value);\r\n            } else {\r\n                if (this._option.useThousands) {\r\n                    if (this._option.precision != undefined) {\r\n                        this.format = 'n' + this._option.precision;\r\n                    } else {\r\n                        this.format = 'n2';\r\n                    }\r\n                } else {\r\n                    if (this._option.precision != undefined) {\r\n                        this.format = 'f' + this._option.precision;\r\n                    } else {\r\n                        this.format = 'f2';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const firstLetter = this.currencyToUpperCase(this.format.substring(0, 1));\r\n        const precision = Number(this.format.substring(1));\r\n        let config = {};\r\n        let result: any;\r\n        if (!/C|D|F|N|P/g.test(firstLetter)) {\r\n            if (this.debugSer) {\r\n                this.debugSer.warn(`ä¸æ¯æformatä¸º ${this.format} ç±»åçæ°å­æ ¼å¼å`);\r\n            }\r\n            return;\r\n        }\r\n        if (this.thousand) {\r\n            Object.assign(config, { thousand: this.thousand });\r\n        }\r\n        if (this.decimal) {\r\n            Object.assign(config, { decimal: this.decimal });\r\n        }\r\n        if (this.expression) {\r\n            Object.assign(config, { format: this.expression });\r\n        }\r\n        switch (firstLetter) {\r\n            case 'C':\r\n                Object.assign(config, { prefix: this.currencySymbol, precision });\r\n                result = this.numberHelper.formatMoney(value, config);\r\n                break;\r\n            case 'D':\r\n                result = this.toDecimal(value, precision);\r\n                break;\r\n            case 'F':\r\n                Object.assign(config, { prefix: '', thousand: '', precision });\r\n                result = this.numberHelper.formatMoney(value, config);\r\n                break;\r\n            case 'N':\r\n                Object.assign(config, { prefix: '', precision });\r\n                result = this.numberHelper.formatMoney(value, config);\r\n                break;\r\n            case 'P':\r\n                result = this.toPercent(value, precision);\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param value è½¬æ¢æåè¿å¶çæ°å­\r\n     * @param precision åè¿å¶æ°å­çé¿åº¦\r\n     */\r\n    toDecimal(value: any, precision: any) {\r\n        if (value.toString().indexOf('.') > -1) {\r\n            if(this.debugSer) {\r\n                this.debugSer.warn('åè¿å¶è½¬æ¢ä»éæ´åç±»å');\r\n            }\r\n            return;\r\n        }\r\n        return (Array(precision).join(this.filledSymbol) + value).slice(-precision);\r\n    }\r\n    /**\r\n     * @param value è½¬æ¢æç¾åæ°çæ°å­\r\n     * @param decimal å°æ°ç¹ä¿çå ä½\r\n     */\r\n    toPercent(value: any, precision: any) {\r\n        return Number(value * 100).toFixed(Number(precision)) + '%';\r\n    }\r\n\r\n    /**\r\n     * å°è´§å¸ç¬¦å·é¦å­æ¯è½¬æ¢æå¤§å\r\n     */\r\n    currencyToUpperCase(value: any) {\r\n        return value.replace(/[a-z]+/g, (word: any) => {\r\n            return word.toUpperCase();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * å¤çå¹´ï¼Y=>y, D=>d\r\n     */\r\n    dateToUpperCase(value: any) {\r\n        let newFormat: any;\r\n        if (/Y/g.test(value) === true) {\r\n            newFormat = value.replace(/Y/g, 'y');\r\n        } else {\r\n            newFormat = value;\r\n        }\r\n        if (/D/g.test(newFormat) === true) {\r\n            newFormat = newFormat.replace(/D/g, 'd');\r\n        }\r\n\r\n        return newFormat;\r\n    }\r\n    /**\r\n     * æä¸¾ç±»åå¤ç\r\n     */\r\n    getFormatEnumValue(value: any) {\r\n        if (value == undefined || value === null || value === '') {\r\n            return '';\r\n        }\r\n        if (this.data && this.data.length) {\r\n            // å¯è½å­å¨å¤éæä¸¾ï¼ä½ä¸ºåéç¬¦  \r\n            // let curVals = ('' + value).split(',');\r\n            let curVals = ('' + value).split(this.enumDelimiter);\r\n            let nameResult = [];\r\n            for (let k = 0; k < curVals.length; k++) {\r\n                let findObj = this.data.find(item => {\r\n                    return item[this.valueField] == curVals[k];\r\n                });\r\n                if (findObj) {\r\n                    nameResult.push(findObj[this.textField]);\r\n                }\r\n                else {\r\n                    nameResult.push(curVals[k]);\r\n                }\r\n            }\r\n            if (nameResult.length > 0) {\r\n                // return nameResult.join(',');\r\n                return nameResult.join(this.enumDelimiter);\r\n            }\r\n            return '';\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n    /**\r\n     * booleanå¼å¤ç\r\n     */\r\n    getFormatCheckBoxValue(value: boolean) {\r\n        if (value === true) {\r\n            return this.localeService.getValue('text.yes');\r\n        } else if (value === false || value == null || typeof value === 'undefined') {\r\n            return this.localeService.getValue('text.no');\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n\r\n    private timeFormatTo(value: any, fmt: string, hourSystem = 12) {\r\n\r\n    }\r\n\r\n    private makeFormater(fmt: string): string {\r\n        return fmt;\r\n    }\r\n    /*\r\n    * æ¥ææ ¼å¼å\r\n    */\r\n    dateformat(value) {\r\n        let str;\r\n        if (!this.format) {\r\n            this.format = 'YYYY-MM-DD';\r\n        }\r\n\r\n        if (this.format === 'timeago') {\r\n            return this.dtHelper.relativeTime(value, this.localeService.localeId || 'zh-CHS');\r\n        }\r\n\r\n        // å½åå¼æ¯å·²ç»æ ¼å¼ååçæ¥æå­ç¬¦ä¸²\r\n        if (this.returnFormat && this.returnFormat != 'yyyy-MM-dd' && typeof value == 'string') {\r\n            value = this.getDateFromFormatedString(value, this.returnFormat);\r\n        }\r\n        //\r\n        if (this.format === 'hh:mm:ss' || this.format === 'HH:mm:ss') {\r\n            // æ ¼å¼åæ¶é´  ä¸´æ¶å¤ç\r\n            str = value;\r\n        } else {\r\n            // if (this.showTime && value instanceof String) {\r\n            //     str = value;\r\n            // } else {\r\n            //     const formArr = this.format.split(' ');\r\n            //     if (this.showTime && formArr.length < 2) {\r\n            //         formArr.push('HH:mm:ss');\r\n            //         this.format = formArr.join(' ');\r\n            //     }\r\n            //     // æ ¼å¼åæ¥æ\r\n            //     str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));\r\n            // }\r\n\r\n            if (this.multiSelect && value) {\r\n                const fmtList = ['yyyy-MM-dd', 'yyyy/MM/dd','MM/dd/yyyy','yyyyå¹´MMæddæ¥','yyyyMMdd'];\r\n                if (!fmtList.find(n => n === this.format)) {\r\n                    this.format = 'yyyy-MM-dd';\r\n                }\r\n\r\n                str = value.split(this.separator).map(n => {\r\n                    if (n.indexOf('å¹´') > -1) {\r\n                        n = n.replace('å¹´', '-');\r\n                    }\r\n                    if (n.indexOf('æ') > -1) {\r\n                        n = n.replace('æ', '-');\r\n                    }\r\n                    if (n.indexOf('æ¥') > -1) {\r\n                        n = n.replace('æ¥', '');\r\n                    }\r\n                    return this.dtHelper.formatTo(n, this.dateToUpperCase(this.format))\r\n                }).join(this.separator);\r\n            } else {\r\n                str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    private getDateFromFormatedString(dateString, format) {\r\n        var result = { year: 0, month: 0, day: 0, hour: 0, minite: 0, second: 0 }; // å½ç¶è¿éå¯ä»¥é»è®¤1970-1-1æ¥\r\n        if (dateString) {\r\n            format.replace(/y+|Y+|M+|d+|D+|h+|H+|m+|s+/g, function (m, a, b, c) {// è¿éåªåäºå¹´ææ¥  å æ¶åç§ä¹æ¯å¯ä»¥ç\r\n                dateString.substring(a).replace(/\\d+/, function (d) { c = parseInt(d, 10) });\r\n                if (/y+/i.test(m) && !result.year) result.year = c;\r\n                if (/M+/.test(m) && !result.month) result.month = c;\r\n                if (/d+/i.test(m) && !result.day) result.day = c;\r\n                if (/h+/i.test(m) && !result.hour) result.hour = c;\r\n                if (/m+/.test(m) && !result.minite) result.minite = c;\r\n                if (/s+/.test(m) && !result.second) result.second = c;\r\n            });\r\n        }\r\n        var resultDate = new Date(result.year + '/' + result.month + '/' + result.day + ' ' + result.hour + ':' + result.minite + ':' + result.second);\r\n        return resultDate;\r\n    }\r\n    /**\r\n     * æ ¼å¼åå¤ç\r\n     */\r\n    formatValue(value: any) {\r\n        let str: any;\r\n        if (this.currentLanguage) {\r\n            return this.formatLang(value);\r\n        }\r\n        // if (!value) {\r\n        //     return '';\r\n        // }\r\n        if (this.type !== 'boolean' && (value == null || typeof value === 'undefined')) {\r\n            return '';\r\n        }\r\n        switch (this.type) {\r\n            case 'string':\r\n                str = value;\r\n                break;\r\n            case 'date':\r\n            case 'datetime':\r\n                if (!this.dateRange) {\r\n                    // if (!this.format) {\r\n                    //     this.format = 'YYYY-MM-DD';\r\n                    // }\r\n                    // if (this.format === 'hh:mm:ss') {\r\n                    //     // æ ¼å¼åæ¶é´  ä¸´æ¶å¤ç\r\n                    //     str = value;\r\n                    // } else {\r\n                    //     if (this.showTime) {\r\n                    //         str = value;\r\n                    //     } else {\r\n                    //         // æ ¼å¼åæ¥æ\r\n                    //         str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));\r\n                    //     }\r\n                    // }\r\n\r\n                    str = this.dateformat(value);\r\n                } else {\r\n                    const dateValues = value.split(this.dateRangeDelimiter);\r\n\r\n                    let dataStr = [];\r\n                    if (dateValues && dateValues.length) {\r\n                        dateValues.forEach(date => {\r\n                            let val = this.dateformat(date);\r\n                            dataStr.push(val);\r\n                        });\r\n                    }\r\n                    str = dataStr.join(this.dateRangeDelimiter);\r\n                }\r\n\r\n                break;\r\n            // case 'dateTime':\r\n            //     str = this.timeFormatTo(value, this.makeFormater(this.format));\r\n            //     break;\r\n            case 'number':\r\n                str = this.getFormatNumberValue(value);\r\n                break;\r\n            case 'enum':\r\n                str = this.getFormatEnumValue(value);\r\n                break;\r\n            case 'boolean':\r\n                str = this.getFormatCheckBoxValue(value);\r\n                break;\r\n            default:\r\n                break; // throw new Error(`æä¸æ¯æ ${this.type} ç±»å`);\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    private setText2Star(value) {\r\n        if (this.isPassword) {\r\n            const star = value ? '******' : '';\r\n            this.text = star;\r\n            this.control = star;\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    writeValue(value: any): void {\r\n        // lucas 2021-08-27\r\n        if (this.setText2Star(value)) {\r\n            return;\r\n        }\r\n\r\n        // xia 2021-03-13\r\n        if (this.beforeWriteValue) {\r\n            const options = {\r\n                localizationType: this.localizationType,\r\n                showTime: this.showTime,\r\n                ref: this\r\n            };\r\n            const text = this.beforeWriteValue(value, options);\r\n            if (text !== undefined) {\r\n                this.text = text;\r\n                return;\r\n            }\r\n        }\r\n        this.control = this.formatValue(value);\r\n        this.controlChange(value);\r\n    }\r\n\r\n    registerOnChange(fn: () => {}): void {\r\n        this.controlChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn): void {\r\n        this.controlTouch = fn;\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { TextComponent } from './text.component';\r\nimport { NumberHelperModule } from '@farris/ui-common/number';\r\nimport { DateHelperModule } from '@farris/ui-common/date';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LocaleModule,\r\n    NumberHelperModule,\r\n    DateHelperModule\r\n  ],\r\n  exports: [\r\n    TextComponent\r\n  ]\r\n})\r\nexport class TextModule { }\r\n"]}