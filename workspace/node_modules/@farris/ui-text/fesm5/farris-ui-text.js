import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DebugService } from '@farris/ui-common';
import { Injectable, Component, forwardRef, Input, HostBinding, Output, EventEmitter, Injector, ElementRef, ViewChild, NgZone, HostListener, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { NumberHelperService, NumberHelperModule } from '@farris/ui-common/number';
import { DateTimeHelperService, DateHelperModule } from '@farris/ui-common/date';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StaticTextControlService = /** @class */ (function () {
    function StaticTextControlService() {
    }
    StaticTextControlService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    StaticTextControlService.ctorParameters = function () { return []; };
    /** @nocollapse */ StaticTextControlService.ngInjectableDef = defineInjectable({ factory: function StaticTextControlService_Factory() { return new StaticTextControlService(); }, token: StaticTextControlService, providedIn: "root" });
    return StaticTextControlService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextComponent = /** @class */ (function () {
    function TextComponent(dtHelper, numberHelper, injector, ngzone) {
        this.dtHelper = dtHelper;
        this.numberHelper = numberHelper;
        this.injector = injector;
        this.ngzone = ngzone;
        this.cls = true;
        this.textChange = new EventEmitter();
        /**
         * 是否为密码输入
         */
        this.isPassword = false;
        // 是否多行文本
        this.isTextArea = false;
        // 是否启用自动尺寸
        this.autoSize = false;
        // 设置高度
        this.height = 0;
        // 是否是日期范围
        this.dateRange = false;
        // 千分位符号
        this.thousand = ',';
        // 小数点处符号
        this.decimal = '.';
        // 货币符号及值展现形式
        this.expression = '%s%v';
        this.textField = 'name';
        this.valueField = 'value';
        this.returnFormat = ''; // 从服务器端取值是格式化后的
        // 日期范围模式下input的显示分割符合
        this.dateRangeDelimiter = '~';
        this.enumDelimiter = ',';
        this._tshowType = 0;
        // 货币符号，默认是RMB
        this.currencySymbol = '￥';
        // 十进制前面填充的符号
        this.filledSymbol = '0';
        // 标签
        this.staticTitle = "";
        // 处理中英文情况， 因为多语言暂时不通过这个属性控制
        this.showTitle = false;
        /**
         * 日期多选
         */
        this.multiSelect = false;
        /**
         * 日期多选分隔符
         */
        this.separator = ',';
        this.beforeWriteValue = null;
        this.controlChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.controlTouch = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.debugSer = null;
        this.localeService = this.injector.get(LocaleService);
        this.debugSer = this.injector.get(DebugService, null);
    }
    Object.defineProperty(TextComponent.prototype, "showType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tshowType;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tshowType = value;
            // 如果是周
            if (value == 4) {
                this.dateRange = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.text;
        },
        // 普通文本输入值
        set: 
        // 普通文本输入值
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.text = this.formatValue(value);
            this.textChange.emit(this.text);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ev
     * @return {?}
     */
    TextComponent.prototype.changeTitle = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (!this.isTextArea && !this.isPassword) {
            this.mouseEnterChangeTitle();
        }
    };
    Object.defineProperty(TextComponent.prototype, "option", {
        get: /**
         * @return {?}
         */
        function () {
            return this._option;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._option = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TextComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TextComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.isTextArea) {
            /** @type {?} */
            var clsName = this.textInnerEl.nativeElement.parentElement.className;
            this.textInnerEl.nativeElement.parentElement.className = clsName + ' f-cmp-text-is-textarea';
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextComponent.prototype.mouseEnterChangeTitle = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var textEl = this.textInnerEl.nativeElement;
        if (Math.abs(textEl.scrollWidth - textEl.clientWidth) > 2 || Math.abs(textEl.scrollHeight - textEl.clientHeight) > 2) {
            this.staticTitle = this.text && this.text.length > 0 ? this.text : this.control;
        }
        else {
            this.staticTitle = '';
        }
    };
    /**
     * 处理多语言，待定
     */
    /**
     * 处理多语言，待定
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.formatLang = /**
     * 处理多语言，待定
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value[this.currentLanguage] ? value[this.currentLanguage] : '';
    };
    /**
     * C货币
     * D十进制
     * F浮点数
     * N数字，带千分位
     * P百分比
     */
    /**
     * C货币
     * D十进制
     * F浮点数
     * N数字，带千分位
     * P百分比
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.getFormatNumberValue = /**
     * C货币
     * D十进制
     * F浮点数
     * N数字，带千分位
     * P百分比
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.format && !this._option) {
            return value.toString();
        }
        if (this._option && this._option.type && this._option.type == 'number') {
            if (this._option.formatter) {
                return this._option.formatter(value);
            }
            else {
                if (this._option.useThousands) {
                    if (this._option.precision != undefined) {
                        this.format = 'n' + this._option.precision;
                    }
                    else {
                        this.format = 'n2';
                    }
                }
                else {
                    if (this._option.precision != undefined) {
                        this.format = 'f' + this._option.precision;
                    }
                    else {
                        this.format = 'f2';
                    }
                }
            }
        }
        /** @type {?} */
        var firstLetter = this.currencyToUpperCase(this.format.substring(0, 1));
        /** @type {?} */
        var precision = Number(this.format.substring(1));
        /** @type {?} */
        var config = {};
        /** @type {?} */
        var result;
        if (!/C|D|F|N|P/g.test(firstLetter)) {
            if (this.debugSer) {
                this.debugSer.warn("\u4E0D\u652F\u6301format\u4E3A " + this.format + " \u7C7B\u578B\u7684\u6570\u5B57\u683C\u5F0F\u5316");
            }
            return;
        }
        if (this.thousand) {
            Object.assign(config, { thousand: this.thousand });
        }
        if (this.decimal) {
            Object.assign(config, { decimal: this.decimal });
        }
        if (this.expression) {
            Object.assign(config, { format: this.expression });
        }
        switch (firstLetter) {
            case 'C':
                Object.assign(config, { prefix: this.currencySymbol, precision: precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'D':
                result = this.toDecimal(value, precision);
                break;
            case 'F':
                Object.assign(config, { prefix: '', thousand: '', precision: precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'N':
                Object.assign(config, { prefix: '', precision: precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'P':
                result = this.toPercent(value, precision);
                break;
        }
        return result;
    };
    /**
     * @param value 转换成十进制的数字
     * @param precision 十进制数字的长度
     */
    /**
     * @param {?} value 转换成十进制的数字
     * @param {?} precision 十进制数字的长度
     * @return {?}
     */
    TextComponent.prototype.toDecimal = /**
     * @param {?} value 转换成十进制的数字
     * @param {?} precision 十进制数字的长度
     * @return {?}
     */
    function (value, precision) {
        if (value.toString().indexOf('.') > -1) {
            if (this.debugSer) {
                this.debugSer.warn('十进制转换仅限整型类型');
            }
            return;
        }
        return (Array(precision).join(this.filledSymbol) + value).slice(-precision);
    };
    /**
     * @param value 转换成百分数的数字
     * @param decimal 小数点保留几位
     */
    /**
     * @param {?} value 转换成百分数的数字
     * @param {?} precision
     * @return {?}
     */
    TextComponent.prototype.toPercent = /**
     * @param {?} value 转换成百分数的数字
     * @param {?} precision
     * @return {?}
     */
    function (value, precision) {
        return Number(value * 100).toFixed(Number(precision)) + '%';
    };
    /**
     * 将货币符号首字母转换成大写
     */
    /**
     * 将货币符号首字母转换成大写
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.currencyToUpperCase = /**
     * 将货币符号首字母转换成大写
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(/[a-z]+/g, (/**
         * @param {?} word
         * @return {?}
         */
        function (word) {
            return word.toUpperCase();
        }));
    };
    /**
     * 处理年，Y=>y, D=>d
     */
    /**
     * 处理年，Y=>y, D=>d
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.dateToUpperCase = /**
     * 处理年，Y=>y, D=>d
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var newFormat;
        if (/Y/g.test(value) === true) {
            newFormat = value.replace(/Y/g, 'y');
        }
        else {
            newFormat = value;
        }
        if (/D/g.test(newFormat) === true) {
            newFormat = newFormat.replace(/D/g, 'd');
        }
        return newFormat;
    };
    /**
     * 枚举类型处理
     */
    /**
     * 枚举类型处理
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.getFormatEnumValue = /**
     * 枚举类型处理
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value == undefined || value === null || value === '') {
            return '';
        }
        if (this.data && this.data.length) {
            // 可能存在多选枚举，作为分隔符  
            // let curVals = ('' + value).split(',');
            /** @type {?} */
            var curVals_1 = ('' + value).split(this.enumDelimiter);
            /** @type {?} */
            var nameResult = [];
            var _loop_1 = function (k) {
                /** @type {?} */
                var findObj = this_1.data.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return item[_this.valueField] == curVals_1[k];
                }));
                if (findObj) {
                    nameResult.push(findObj[this_1.textField]);
                }
                else {
                    nameResult.push(curVals_1[k]);
                }
            };
            var this_1 = this;
            for (var k = 0; k < curVals_1.length; k++) {
                _loop_1(k);
            }
            if (nameResult.length > 0) {
                // return nameResult.join(',');
                return nameResult.join(this.enumDelimiter);
            }
            return '';
        }
        else {
            return value;
        }
    };
    /**
     * boolean值处理
     */
    /**
     * boolean值处理
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.getFormatCheckBoxValue = /**
     * boolean值处理
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === true) {
            return this.localeService.getValue('text.yes');
        }
        else if (value === false || value == null || typeof value === 'undefined') {
            return this.localeService.getValue('text.no');
        }
        else {
            return value;
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?} fmt
     * @param {?=} hourSystem
     * @return {?}
     */
    TextComponent.prototype.timeFormatTo = /**
     * @private
     * @param {?} value
     * @param {?} fmt
     * @param {?=} hourSystem
     * @return {?}
     */
    function (value, fmt, hourSystem) {
        if (hourSystem === void 0) { hourSystem = 12; }
    };
    /**
     * @private
     * @param {?} fmt
     * @return {?}
     */
    TextComponent.prototype.makeFormater = /**
     * @private
     * @param {?} fmt
     * @return {?}
     */
    function (fmt) {
        return fmt;
    };
    /*
    * 日期格式化
    */
    /*
        * 日期格式化
        */
    /**
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.dateformat = /*
        * 日期格式化
        */
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var str;
        if (!this.format) {
            this.format = 'YYYY-MM-DD';
        }
        if (this.format === 'timeago') {
            return this.dtHelper.relativeTime(value, this.localeService.localeId || 'zh-CHS');
        }
        // 当前值是已经格式化后的日期字符串
        if (this.returnFormat && this.returnFormat != 'yyyy-MM-dd' && typeof value == 'string') {
            value = this.getDateFromFormatedString(value, this.returnFormat);
        }
        //
        if (this.format === 'hh:mm:ss' || this.format === 'HH:mm:ss') {
            // 格式化时间  临时处理
            str = value;
        }
        else {
            // if (this.showTime && value instanceof String) {
            //     str = value;
            // } else {
            //     const formArr = this.format.split(' ');
            //     if (this.showTime && formArr.length < 2) {
            //         formArr.push('HH:mm:ss');
            //         this.format = formArr.join(' ');
            //     }
            //     // 格式化日期
            //     str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
            // }
            if (this.multiSelect && value) {
                /** @type {?} */
                var fmtList = ['yyyy-MM-dd', 'yyyy/MM/dd', 'MM/dd/yyyy', 'yyyy年MM月dd日', 'yyyyMMdd'];
                if (!fmtList.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n === _this.format; }))) {
                    this.format = 'yyyy-MM-dd';
                }
                str = value.split(this.separator).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    if (n.indexOf('年') > -1) {
                        n = n.replace('年', '-');
                    }
                    if (n.indexOf('月') > -1) {
                        n = n.replace('月', '-');
                    }
                    if (n.indexOf('日') > -1) {
                        n = n.replace('日', '');
                    }
                    return _this.dtHelper.formatTo(n, _this.dateToUpperCase(_this.format));
                })).join(this.separator);
            }
            else {
                str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
            }
        }
        return str;
    };
    /**
     * @private
     * @param {?} dateString
     * @param {?} format
     * @return {?}
     */
    TextComponent.prototype.getDateFromFormatedString = /**
     * @private
     * @param {?} dateString
     * @param {?} format
     * @return {?}
     */
    function (dateString, format) {
        /** @type {?} */
        var result = { year: 0, month: 0, day: 0, hour: 0, minite: 0, second: 0 };
        if (dateString) {
            format.replace(/y+|Y+|M+|d+|D+|h+|H+|m+|s+/g, (/**
             * @param {?} m
             * @param {?} a
             * @param {?} b
             * @param {?} c
             * @return {?}
             */
            function (m, a, b, c) {
                dateString.substring(a).replace(/\d+/, (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { c = parseInt(d, 10); }));
                if (/y+/i.test(m) && !result.year)
                    result.year = c;
                if (/M+/.test(m) && !result.month)
                    result.month = c;
                if (/d+/i.test(m) && !result.day)
                    result.day = c;
                if (/h+/i.test(m) && !result.hour)
                    result.hour = c;
                if (/m+/.test(m) && !result.minite)
                    result.minite = c;
                if (/s+/.test(m) && !result.second)
                    result.second = c;
            }));
        }
        /** @type {?} */
        var resultDate = new Date(result.year + '/' + result.month + '/' + result.day + ' ' + result.hour + ':' + result.minite + ':' + result.second);
        return resultDate;
    };
    /**
     * 格式化处理
     */
    /**
     * 格式化处理
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.formatValue = /**
     * 格式化处理
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var str;
        if (this.currentLanguage) {
            return this.formatLang(value);
        }
        // if (!value) {
        //     return '';
        // }
        if (this.type !== 'boolean' && (value == null || typeof value === 'undefined')) {
            return '';
        }
        switch (this.type) {
            case 'string':
                str = value;
                break;
            case 'date':
            case 'datetime':
                if (!this.dateRange) {
                    // if (!this.format) {
                    //     this.format = 'YYYY-MM-DD';
                    // }
                    // if (this.format === 'hh:mm:ss') {
                    //     // 格式化时间  临时处理
                    //     str = value;
                    // } else {
                    //     if (this.showTime) {
                    //         str = value;
                    //     } else {
                    //         // 格式化日期
                    //         str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
                    //     }
                    // }
                    str = this.dateformat(value);
                }
                else {
                    /** @type {?} */
                    var dateValues = value.split(this.dateRangeDelimiter);
                    /** @type {?} */
                    var dataStr_1 = [];
                    if (dateValues && dateValues.length) {
                        dateValues.forEach((/**
                         * @param {?} date
                         * @return {?}
                         */
                        function (date) {
                            /** @type {?} */
                            var val = _this.dateformat(date);
                            dataStr_1.push(val);
                        }));
                    }
                    str = dataStr_1.join(this.dateRangeDelimiter);
                }
                break;
            // case 'dateTime':
            //     str = this.timeFormatTo(value, this.makeFormater(this.format));
            //     break;
            case 'number':
                str = this.getFormatNumberValue(value);
                break;
            case 'enum':
                str = this.getFormatEnumValue(value);
                break;
            case 'boolean':
                str = this.getFormatCheckBoxValue(value);
                break;
            default:
                break; // throw new Error(`暂不支持 ${this.type} 类型`);
        }
        return str;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.setText2Star = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.isPassword) {
            /** @type {?} */
            var star = value ? '******' : '';
            this.text = star;
            this.control = star;
            return true;
        }
        return false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // lucas 2021-08-27
        if (this.setText2Star(value)) {
            return;
        }
        // xia 2021-03-13
        if (this.beforeWriteValue) {
            /** @type {?} */
            var options = {
                localizationType: this.localizationType,
                showTime: this.showTime,
                ref: this
            };
            /** @type {?} */
            var text = this.beforeWriteValue(value, options);
            if (text !== undefined) {
                this.text = text;
                return;
            }
        }
        this.control = this.formatValue(value);
        this.controlChange(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TextComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TextComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlTouch = fn;
    };
    TextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-text',
                    template: "\n        <span #textInner\n            [ngClass]=\"{'f-form-control-text':!isTextArea,'f-form-control-textarea':isTextArea,'f-component-text-auto-size': this.autoSize}\"\n            [title]=\"staticTitle\" [style.text-align]=\"textAlign\"\n            [style.height]=\"!autoSize&&height>0?height+'px':null\" [style.minHeight]=\"autoSize&&height>0?height+'px':null\"\n            [style.maxHeight]=\"autoSize&&maxHeight>0?maxHeight+'px':null\">{{text && text.length > 0 ?  text : control}}</span>\n    ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TextComponent; })),
                            multi: true,
                        }]
                }] }
    ];
    /** @nocollapse */
    TextComponent.ctorParameters = function () { return [
        { type: DateTimeHelperService },
        { type: NumberHelperService },
        { type: Injector },
        { type: NgZone }
    ]; };
    TextComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.f-component-text',] }],
        textInnerEl: [{ type: ViewChild, args: ['textInner', { read: ElementRef },] }],
        textChange: [{ type: Output }],
        isPassword: [{ type: Input }],
        isTextArea: [{ type: Input }],
        autoSize: [{ type: Input }],
        maxHeight: [{ type: Input }],
        height: [{ type: Input }],
        type: [{ type: Input }],
        dateRange: [{ type: Input }],
        format: [{ type: Input }],
        lang: [{ type: Input }],
        data: [{ type: Input }],
        thousand: [{ type: Input }],
        decimal: [{ type: Input }],
        expression: [{ type: Input }],
        currentLanguage: [{ type: Input }],
        showTime: [{ type: Input }],
        textField: [{ type: Input }],
        valueField: [{ type: Input }],
        returnFormat: [{ type: Input }],
        textAlign: [{ type: Input }],
        dateRangeDelimiter: [{ type: Input }],
        enumDelimiter: [{ type: Input }],
        showType: [{ type: Input }],
        localizationType: [{ type: Input }],
        filledSymbol: [{ type: Input }],
        value: [{ type: Input }],
        changeTitle: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        showTitle: [{ type: Input }],
        option: [{ type: Input }],
        multiSelect: [{ type: Input }],
        separator: [{ type: Input }]
    };
    return TextComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextModule = /** @class */ (function () {
    function TextModule() {
    }
    TextModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TextComponent
                    ],
                    imports: [
                        CommonModule,
                        LocaleModule,
                        NumberHelperModule,
                        DateHelperModule
                    ],
                    exports: [
                        TextComponent
                    ]
                },] }
    ];
    return TextModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { StaticTextControlService, TextComponent, TextModule };

//# sourceMappingURL=farris-ui-text.js.map