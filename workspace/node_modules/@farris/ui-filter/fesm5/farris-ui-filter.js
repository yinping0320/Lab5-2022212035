import { cloneDeep } from 'lodash-es';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { __assign } from 'tslib';
import { auditTime } from 'rxjs/operators';
import ResizeObserver from 'resize-observer-polyfill';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FarrisSidebarModule } from '@farris/ui-sidebar';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { InputGroupModule } from '@farris/ui-input-group';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { DatalistModule } from '@farris/ui-datalist';
import { ComboListModule } from '@farris/ui-combo-list';
import { LookupModule } from '@farris/ui-lookup';
import { FarrisFormsModule } from '@farris/ui-forms';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { IdService, OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { FilterPanelService, FilterPanelModule } from '@farris/ui-filter-panel';
import { QuerySolutionService, FilterConditionModule } from '@farris/ui-filter-condition';
import { fromEvent, of } from 'rxjs';
import { EventEmitter, Injectable, Pipe, NgModule, Component, Input, HostBinding, Output, InjectionToken, ElementRef, LOCALE_ID, InjectFlags, ViewEncapsulation, ChangeDetectorRef, Renderer2, NgZone, Injector, Optional, ViewChild, defineInjectable } from '@angular/core';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ControlType = {
    Text: 0,
    Help: 1,
    DropDown: 2,
    DateRange: 3,
    NumberRange: 4,
    Search: 5,
    Date: 6,
    CheckboxGroup: 7,
    DateRangeTime: 8,
    Radio: 9,
    Year: 10,
    Month: 11,
    MonthRange: 12,
    YearRange: 13,
    InputGroup: 14,
    Number: 15,
    FlexibleNumber: 16,
    FlexibleDate: 17,
    BoolCheck: 18,
};
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.Help] = 'Help';
ControlType[ControlType.DropDown] = 'DropDown';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.Search] = 'Search';
ControlType[ControlType.Date] = 'Date';
ControlType[ControlType.CheckboxGroup] = 'CheckboxGroup';
ControlType[ControlType.DateRangeTime] = 'DateRangeTime';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.Year] = 'Year';
ControlType[ControlType.Month] = 'Month';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.YearRange] = 'YearRange';
ControlType[ControlType.InputGroup] = 'InputGroup';
ControlType[ControlType.Number] = 'Number';
ControlType[ControlType.FlexibleNumber] = 'FlexibleNumber';
ControlType[ControlType.FlexibleDate] = 'FlexibleDate';
ControlType[ControlType.BoolCheck] = 'BoolCheck';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CheckboxGroupValue = /** @class */ (function () {
    function CheckboxGroupValue(value) {
        if (value === void 0) { value = { value: [] }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxGroupValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.CheckboxGroup;
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.value.length == 0;
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.value.join(',');
    };
    return CheckboxGroupValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HelpValue = /** @class */ (function () {
    function HelpValue(data) {
        if (data === void 0) { data = { value: [], valueField: undefined, textValue: undefined }; }
        this.clear$ = new EventEmitter();
        if (data.hasOwnProperty('textValue')) { // 新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { // 旧结构，value是对象
            this.valueField = data.valueField;
            this.value = data.value ? [data.value] : [];
            this.textValue = 'help-text-value-null'; // 旧结构无textValue属性
        }
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    HelpValue.getPropValue = /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    function (helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            var arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    };
    /**
     * @return {?}
     */
    HelpValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    HelpValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    HelpValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        if (this.valueField) {
            /** @type {?} */
            var args_1 = this.valueField.split('.');
            /** @type {?} */
            var valueArr = this.value.map((/**
             * @param {?} helpItem
             * @return {?}
             */
            function (helpItem) { return HelpValue.getPropValue(helpItem, cloneDeep(args_1)); }));
            return valueArr && valueArr.length ? valueArr.join(',') : '';
        }
        else {
            return '';
        }
    };
    /**
     * @return {?}
     */
    HelpValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Help;
    };
    /**
     * @return {?}
     */
    HelpValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.valueField;
    };
    /**
     * @param {?} textField
     * @return {?}
     */
    HelpValue.prototype.getTextValue = /**
     * @param {?} textField
     * @return {?}
     */
    function (textField) {
        /** @type {?} */
        var args = textField.split('.');
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        function (helpItem) { return HelpValue.getPropValue(helpItem, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @return {?}
     */
    HelpValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.textValue;
    };
    return HelpValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextValue = /** @class */ (function () {
    function TextValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @return {?}
     */
    TextValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Text;
    };
    /**
     * @return {?}
     */
    TextValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    TextValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    TextValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    TextValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return TextValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段配置
 */
var  /**
 * 字段配置
 */
FieldConfig = /** @class */ (function () {
    function FieldConfig() {
    }
    return FieldConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 文本控件
 */
var  /**
 * 文本控件
 */
TextControl = /** @class */ (function () {
    function TextControl() {
    }
    /**
     * 获取控件类型，返回值：文本控件类型
     */
    /**
     * 获取控件类型，返回值：文本控件类型
     * @return {?}
     */
    TextControl.prototype.getControlType = /**
     * 获取控件类型，返回值：文本控件类型
     * @return {?}
     */
    function () {
        return ControlType.Text;
    };
    return TextControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SearchValue = /** @class */ (function () {
    function SearchValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @return {?}
     */
    SearchValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Search;
    };
    /**
     * @return {?}
     */
    SearchValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SearchValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    SearchValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    SearchValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    SearchValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return SearchValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateValue = /** @class */ (function () {
    function DateValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value.formatted;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Date;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    DateValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (ctrl && ctrl.format) {
            return new DateTimeHelperService().formatTo(this.value, ctrl.format);
        }
        return this.value;
    };
    return DateValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateRangeValue = /** @class */ (function () {
    function DateRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    DateRangeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return DateRangeValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateRangeTimeValue = /** @class */ (function () {
    function DateRangeTimeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateRangeTimeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRangeTime;
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    DateRangeTimeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var fmt = ctrl.format;
                if (ctrl.controltype === 'datetime') {
                    if (ctrl.format.indexOf('HH:mm') === -1) {
                        fmt = ctrl.format + ' HH:mm:ss';
                    }
                }
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, fmt) + '~' + dateHlp.formatTo(this.endTime, fmt);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return DateRangeTimeValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var EnumType = {
    IntType: 0,
    StringType: 1,
    BoolType: 2,
};
EnumType[EnumType.IntType] = 'IntType';
EnumType[EnumType.StringType] = 'StringType';
EnumType[EnumType.BoolType] = 'BoolType';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Integer类型
 */
var  /**
 * 下拉列表Integer类型
 */
EnumIntegerValue = /** @class */ (function () {
    function EnumIntegerValue() {
    }
    /**
     * @return {?}
     */
    EnumIntegerValue.prototype.getEnumType = /**
     * @return {?}
     */
    function () {
        return EnumType.IntType;
    };
    /**
     * @return {?}
     */
    EnumIntegerValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    EnumIntegerValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return EnumIntegerValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表String类型
 */
var  /**
 * 下拉列表String类型
 */
EnumStringValue = /** @class */ (function () {
    function EnumStringValue() {
    }
    /**
     * @return {?}
     */
    EnumStringValue.prototype.getEnumType = /**
     * @return {?}
     */
    function () {
        return EnumType.StringType;
    };
    /**
     * @return {?}
     */
    EnumStringValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    EnumStringValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return EnumStringValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Bool类型
 */
var  /**
 * 下拉列表Bool类型
 */
EnumBoolValue = /** @class */ (function () {
    function EnumBoolValue() {
    }
    /**
     * @return {?}
     */
    EnumBoolValue.prototype.getEnumType = /**
     * @return {?}
     */
    function () {
        return EnumType.BoolType;
    };
    /**
     * @return {?}
     */
    EnumBoolValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    EnumBoolValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return EnumBoolValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EnumValueConvert = /** @class */ (function () {
    function EnumValueConvert() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    EnumValueConvert.prototype.convertJObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var enumType = enumValue.getEnumType();
        /** @type {?} */
        var jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    EnumValueConvert.prototype.initFromJobject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        var content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    };
    return EnumValueConvert;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DropDownListValue = /** @class */ (function () {
    function DropDownListValue(data) {
        if (data === void 0) { data = ''; }
        this.clear$ = new EventEmitter();
        this.value = data;
    }
    /**
     * @return {?}
     */
    DropDownListValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DropDownListValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    DropDownListValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    DropDownListValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DropDown;
    };
    /**
     * @return {?}
     */
    DropDownListValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    DropDownListValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return DropDownListValue;
}());
var DropDownListValueConvert = /** @class */ (function () {
    function DropDownListValueConvert() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DropDownListValueConvert.prototype.convertToObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        /** @type {?} */
        var convertor = new EnumValueConvert();
        if (!!(dropDownListValue.value)) {
            // jobj["value"]=convertor.convertJObject(dropDownListValue.value);
            jobj["value"] = dropDownListValue.value;
        }
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    DropDownListValueConvert.prototype.initFromObject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var dropDownListValue = new DropDownListValue();
        if (!!(jobj["value"])) {
            /** @type {?} */
            var convertor = new EnumValueConvert();
            // dropDownListValue.value=convertor.initFromJobject(jobj["value"]);
            dropDownListValue.value = jobj["value"];
        }
        return dropDownListValue;
    };
    return DropDownListValueConvert;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberRangeValue = /** @class */ (function () {
    function NumberRangeValue(data) {
        if (data === void 0) { data = { startValue: '', endValue: '' }; }
        this.clear$ = new EventEmitter();
        this.startValue = data.startValue ? parseFloat(data.startValue) : null;
        this.endValue = data.endValue ? parseFloat(data.endValue) : null;
    }
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.NumberRange;
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return (this.startValue == null && this.endValue == null);
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startValue = undefined;
        this.endValue = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        if (this.startValue == undefined && this.endValue == undefined) {
            return '';
        }
        else if (this.startValue == undefined) {
            return ('~' + this.endValue);
        }
        else if (this.endValue == undefined) {
            return (this.startValue + '~');
        }
        else {
            return (this.startValue + '~' + this.endValue);
        }
    };
    return NumberRangeValue;
}());
var NumberRangeValueConvertor = /** @class */ (function () {
    function NumberRangeValueConvertor() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    NumberRangeValueConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        jobj["startValue"] = dropDownListValue.startValue;
        jobj["endValue"] = dropDownListValue.endValue;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    NumberRangeValueConvertor.prototype.initFromObject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var numberRangeValue = new NumberRangeValue();
        if (!!(jobj["startValue"])) {
            numberRangeValue.startValue = (/** @type {?} */ (jobj["startValue"]));
        }
        if (!!(jobj["endValue"])) {
            numberRangeValue.endValue = (/** @type {?} */ (jobj["endValue"]));
        }
        return numberRangeValue;
    };
    return NumberRangeValueConvertor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
var  /**
 * 日期控件
 */
DateControl = /** @class */ (function () {
    function DateControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    DateControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.Date;
    };
    return DateControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
var  /**
 * 数字区间控件
 */
NumberRangeControl = /** @class */ (function () {
    function NumberRangeControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    NumberRangeControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.NumberRange;
    };
    return NumberRangeControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 搜索控件
 */
var  /**
 * 搜索控件
 */
SearchControl = /** @class */ (function () {
    function SearchControl() {
    }
    /**
     * 获取控件类型，返回值：搜索控件类型
     */
    /**
     * 获取控件类型，返回值：搜索控件类型
     * @return {?}
     */
    SearchControl.prototype.getControlType = /**
     * 获取控件类型，返回值：搜索控件类型
     * @return {?}
     */
    function () {
        return ControlType.Search;
    };
    return SearchControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表控件
 */
var  /**
 * 下拉列表控件
 */
DropDownControl = /** @class */ (function () {
    function DropDownControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    DropDownControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.DropDown;
    };
    return DropDownControl;
}());
/**
 * 下拉列表控件序列化与反序列化器
 */
var  /**
 * 下拉列表控件序列化与反序列化器
 */
DropDownListControlConvert = /** @class */ (function () {
    function DropDownListControlConvert() {
    }
    /**
     * 序列化
     * @param obj 下拉列表控件实体
     */
    /**
     * 序列化
     * @param {?} obj 下拉列表控件实体
     * @return {?}
     */
    DropDownListControlConvert.prototype.convertToObject = /**
     * 序列化
     * @param {?} obj 下拉列表控件实体
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var dropDownListControl = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        jobj["valueType"] = dropDownListControl.valueType;
        if (dropDownListControl.enumValues != null) {
            /** @type {?} */
            var jarray_1 = jobj["enumValues"] = [];
            /** @type {?} */
            var convertor_1 = new EnumValueConvert();
            dropDownListControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (dropDownListControl.valueType == EnumType.BoolType) {
                    jarray_1.push(convertor_1.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (dropDownListControl.valueType == EnumType.IntType) {
                    jarray_1.push(convertor_1.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray_1.push(convertor_1.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        return jobj;
    };
    /**
     * 反序列化
     * @param jobj 下拉列表控件实体序列化后的JSON对象
     */
    /**
     * 反序列化
     * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
     * @return {?}
     */
    DropDownListControlConvert.prototype.initFromObject = /**
     * 反序列化
     * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var control = new DropDownControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        return control;
    };
    return DropDownListControlConvert;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件
 */
var  /**
 * 帮助控件
 */
HelpContol = /** @class */ (function () {
    function HelpContol() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    HelpContol.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.Help;
    };
    return HelpContol;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
var  /**
 * 日期区间控件
 */
DateRangeControl = /** @class */ (function () {
    function DateRangeControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    DateRangeControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    return DateRangeControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间带时间控件
 */
var  /**
 * 日期区间带时间控件
 */
DateRangeTimeControl = /** @class */ (function () {
    function DateRangeTimeControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    DateRangeTimeControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.DateRangeTime;
    };
    return DateRangeTimeControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 多选组控件
 */
var  /**
 * 多选组控件
 */
CheckboxGroupControl = /** @class */ (function () {
    function CheckboxGroupControl() {
        this.boolcheck = false;
        this.enableSearch = false;
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    CheckboxGroupControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.CheckboxGroup;
    };
    return CheckboxGroupControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 多选组控件
 */
var  /**
 * 多选组控件
 */
RadioControl = /** @class */ (function () {
    function RadioControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    RadioControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.Radio;
    };
    return RadioControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RadioGroupValue = /** @class */ (function () {
    function RadioGroupValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @return {?}
     */
    RadioGroupValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioGroupValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    RadioGroupValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    RadioGroupValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Radio;
    };
    /**
     * @return {?}
     */
    RadioGroupValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    RadioGroupValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return RadioGroupValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var YearValue = /** @class */ (function () {
    function YearValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    YearValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value.formatted;
    };
    /**
     * @return {?}
     */
    YearValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    YearValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Date;
    };
    /**
     * @return {?}
     */
    YearValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    YearValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    YearValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (ctrl && ctrl.format) {
            return new DateTimeHelperService().formatTo(this.value, ctrl.format);
        }
        return this.value;
    };
    return YearValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MonthValue = /** @class */ (function () {
    function MonthValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MonthValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value.formatted;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Date;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    MonthValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (ctrl && ctrl.format) {
            return new DateTimeHelperService().formatTo(this.value, ctrl.format);
        }
        return this.value;
    };
    return MonthValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var YearRangeValue = /** @class */ (function () {
    function YearRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    YearRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    YearRangeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return YearRangeValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MonthRangeValue = /** @class */ (function () {
    function MonthRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MonthRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    MonthRangeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return MonthRangeValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年份控件
 */
var  /**
 * 年份控件
 */
YearControl = /** @class */ (function () {
    function YearControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    YearControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.Year;
    };
    return YearControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年月控件
 */
var  /**
 * 年月控件
 */
MonthControl = /** @class */ (function () {
    function MonthControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    MonthControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.Month;
    };
    return MonthControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年度区间控件
 */
var  /**
 * 年度区间控件
 */
YearRangeControl = /** @class */ (function () {
    function YearRangeControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    YearRangeControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.YearRange;
    };
    return YearRangeControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年月区间控件
 */
var  /**
 * 年月区间控件
 */
MonthRangeControl = /** @class */ (function () {
    function MonthRangeControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    MonthRangeControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.MonthRange;
    };
    return MonthRangeControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 智能输入框控件
 */
var  /**
 * 智能输入框控件
 */
InputGroupControl = /** @class */ (function () {
    function InputGroupControl() {
    }
    /**
     * 获取控件类型，返回值：智能输入框控件类型
     */
    /**
     * 获取控件类型，返回值：智能输入框控件类型
     * @return {?}
     */
    InputGroupControl.prototype.getControlType = /**
     * 获取控件类型，返回值：智能输入框控件类型
     * @return {?}
     */
    function () {
        return ControlType.InputGroup;
    };
    /**
     * @return {?}
     */
    InputGroupControl.prototype.isRequired = /**
     * @return {?}
     */
    function () {
        return !!this.required;
    };
    return InputGroupControl;
}());
var DialogConfig = /** @class */ (function () {
    function DialogConfig() {
    }
    return DialogConfig;
}());
var DialogButtonConfig = /** @class */ (function () {
    function DialogButtonConfig() {
    }
    return DialogButtonConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputGroupValue = /** @class */ (function () {
    function InputGroupValue(data) {
        if (data === void 0) { data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }; }
        this.clear$ = new EventEmitter();
        this.value = data.value;
        this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.InputGroup;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputGroupValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.textField) {
            /** @type {?} */
            var args_1 = this.textField.split('.');
            /** @type {?} */
            var textArr = this.value.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.getPropValue(item, cloneDeep(args_1)); }));
            return textArr && textArr.length ? textArr.join(',') : '';
        }
        else {
            return '';
        }
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.textValue;
    };
    /**
     * @param {?} targetField
     * @return {?}
     */
    InputGroupValue.prototype.getTextValue = /**
     * @param {?} targetField
     * @return {?}
     */
    function (targetField) {
        var _this = this;
        /** @type {?} */
        var args = targetField.split('.');
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.getPropValue(item, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    InputGroupValue.prototype.getPropValue = /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    function (item, args) {
        if (args.length > 1) {
            /** @type {?} */
            var arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        return this.textValue;
    };
    return InputGroupValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
var  /**
 * 数字区间控件
 */
NumberControl = /** @class */ (function () {
    function NumberControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    NumberControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.Number;
    };
    return NumberControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberValue = /** @class */ (function () {
    function NumberValue(value) {
        if (value === void 0) { value = { value: null }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @return {?}
     */
    NumberValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Number;
    };
    /**
     * @return {?}
     */
    NumberValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    NumberValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    NumberValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    NumberValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined' && this.value != 0)) {
            return this.value;
        }
        else {
            return '' + this.value;
        }
    };
    return NumberValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FlexibleNumberValue = /** @class */ (function () {
    function FlexibleNumberValue(value, single) {
        if (value === void 0) { value = { startValue: null, endValue: null, value: null }; }
        if (single === void 0) { single = true; }
        this.clear$ = new EventEmitter();
        this.startValue = value.startValue;
        this.endValue = value.endValue;
        this.value = value.value;
        this.single = single;
    }
    /**
     * @return {?}
     */
    FlexibleNumberValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.FlexibleNumber;
    };
    /**
     * @return {?}
     */
    FlexibleNumberValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (this.single) {
            return !this.value;
        }
        else
            return (this.startValue == null && this.endValue == null);
    };
    /**
     * @return {?}
     */
    FlexibleNumberValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startValue = undefined;
        this.endValue = undefined;
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FlexibleNumberValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    FlexibleNumberValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return {
            begin: this.startValue,
            end: this.endValue,
            value: this.value
        };
    };
    /**
     * @return {?}
     */
    FlexibleNumberValue.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        if (this.single) {
            if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined' && this.value != 0)) {
                return this.value;
            }
            else {
                return '' + this.value;
            }
        }
        else {
            if (this.startValue == undefined && this.endValue == undefined) {
                return '';
            }
            else if (this.startValue == undefined) {
                return ('~' + this.endValue);
            }
            else if (this.endValue == undefined) {
                return (this.startValue + '~');
            }
            else {
                return (this.startValue + '~' + this.endValue);
            }
        }
    };
    return FlexibleNumberValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
var  /**
 * 数字区间控件
 */
FlexibleNumberControl = /** @class */ (function () {
    function FlexibleNumberControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    FlexibleNumberControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.FlexibleNumber;
    };
    return FlexibleNumberControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FlexibleDateValue = /** @class */ (function () {
    function FlexibleDateValue(value, single) {
        if (value === void 0) { value = { startValue: null, endValue: null, value: null }; }
        if (single === void 0) { single = true; }
        this.clear$ = new EventEmitter();
        this.startValue = value.startValue;
        this.endValue = value.endValue;
        this.value = value.value;
        this.single = single;
    }
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.FlexibleDate;
    };
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (this.single) {
            return !this.value;
        }
        else {
            return (this.startValue == null && this.endValue == null);
        }
    };
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startValue = undefined;
        this.endValue = undefined;
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FlexibleDateValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return {
            begin: this.startValue,
            end: this.endValue,
            value: this.value
        };
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    FlexibleDateValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (this.single) {
            if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined')) {
                return this.value;
            }
            else {
                if (ctrl && ctrl.format) {
                    /** @type {?} */
                    var dateHlp = new DateTimeHelperService();
                    return dateHlp.formatTo(this.value, ctrl.format);
                }
                return this.value;
            }
        }
        else {
            if (this.startValue == undefined && this.endValue == undefined) {
                return '';
            }
            else {
                if (ctrl && ctrl.format) {
                    /** @type {?} */
                    var dateHlp = new DateTimeHelperService();
                    if (this.startValue == undefined) {
                        return ('~' + dateHlp.formatTo(this.endValue, ctrl.format));
                    }
                    else if (this.endValue == undefined) {
                        return (dateHlp.formatTo(this.startValue, ctrl.format) + '~');
                    }
                    else {
                        return dateHlp.formatTo(this.startValue, ctrl.format) + '~' + dateHlp.formatTo(this.endValue, ctrl.format);
                    }
                }
                else {
                    if (this.startValue == undefined) {
                        return ('~' + this.endValue);
                    }
                    else if (this.endValue == undefined) {
                        return (this.startValue + '~');
                    }
                    else {
                        return (this.startValue + '~' + this.endValue);
                    }
                }
            }
        }
    };
    return FlexibleDateValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
var  /**
 * 数字区间控件
 */
FlexibleDateControl = /** @class */ (function () {
    function FlexibleDateControl() {
    }
    /**
     * 获取控件类型
     */
    /**
     * 获取控件类型
     * @return {?}
     */
    FlexibleDateControl.prototype.getControlType = /**
     * 获取控件类型
     * @return {?}
     */
    function () {
        return ControlType.FlexibleDate;
    };
    return FlexibleDateControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterService = /** @class */ (function () {
    function FilterService() {
    }
    /**
     * @param {?} filedSchemas
     * @return {?}
     */
    FilterService.prototype.fieldSchemasConvert = /**
     * @param {?} filedSchemas
     * @return {?}
     */
    function (filedSchemas) {
        var _this = this;
        /** @type {?} */
        var fieldConfigs = new Array();
        if (!(filedSchemas) || filedSchemas.length <= 0) {
            return fieldConfigs;
        }
        else {
            filedSchemas.forEach((/**
             * @param {?} filedSchema
             * @return {?}
             */
            function (filedSchema) {
                /** @type {?} */
                var fieldConfig = new FieldConfig();
                fieldConfig.id = filedSchema.hasOwnProperty('id') ? filedSchema.id : '';
                fieldConfig.labelCode = filedSchema.labelCode;
                fieldConfig.code = filedSchema.hasOwnProperty('code') ? filedSchema.code : '';
                fieldConfig.placeHolder = filedSchema.placeHolder;
                fieldConfig.beginPlaceHolder = filedSchema.beginPlaceHolder;
                fieldConfig.endPlaceHolder = filedSchema.endPlaceHolder;
                fieldConfig.name = filedSchema.name || filedSchema.fieldName;
                if (filedSchema.value) {
                    fieldConfig.filled = true;
                }
                else {
                    fieldConfig.filled = false;
                }
                if (!(filedSchema.control) || !(filedSchema.control.controltype)) {
                    fieldConfig.control = new TextControl();
                    fieldConfig.value = new TextValue(filedSchema.value);
                }
                else {
                    if (filedSchema.control.controltype == 'text') {
                        fieldConfig.control = _this.getTextControl(filedSchema);
                        fieldConfig.value = new TextValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'search') {
                        fieldConfig.control = _this.getSearchControl(filedSchema);
                        fieldConfig.value = new SearchValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'singleDate') {
                        fieldConfig.control = _this.getDateControl(filedSchema);
                        fieldConfig.value = new DateValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'year') {
                        fieldConfig.control = _this.getYearControl(filedSchema);
                        fieldConfig.value = new YearValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'month') {
                        fieldConfig.control = _this.getMonthControl(filedSchema);
                        fieldConfig.value = new MonthValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'yearRange') {
                        fieldConfig.control = _this.getYearRangeControl(filedSchema);
                        fieldConfig.value = new YearRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'monthRange') {
                        fieldConfig.control = _this.getMonthRangeControl(filedSchema);
                        fieldConfig.value = new MonthRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'date') {
                        fieldConfig.control = _this.getDateRangeControl(filedSchema);
                        fieldConfig.value = new DateRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'datetime') {
                        fieldConfig.control = _this.getDateRangeTimeControl(filedSchema);
                        fieldConfig.value = new DateRangeTimeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'dropdown') {
                        fieldConfig.control = _this.getDropDownControl(filedSchema);
                        fieldConfig.value = new DropDownListValue(filedSchema.value);
                        // fieldConfig.control = this.getRadioControl(filedSchema);
                        // fieldConfig.value = new RadioGroupValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'number') {
                        fieldConfig.control = _this.getNumberRangeControl(filedSchema);
                        fieldConfig.value = new NumberRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'help') {
                        fieldConfig.control = _this.getLookUpEditControl(filedSchema);
                        fieldConfig.value = new HelpValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'checkboxgroup') {
                        fieldConfig.control = _this.getCheckboxGroupControl(filedSchema);
                        fieldConfig.value = new CheckboxGroupValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'radio') {
                        fieldConfig.control = _this.getRadioControl(filedSchema);
                        fieldConfig.value = new RadioGroupValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'input-group') {
                        fieldConfig.control = _this.getInputGroupControl(filedSchema);
                        fieldConfig.value = new InputGroupValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'singlenumber') {
                        fieldConfig.control = _this.getNumberControl(filedSchema);
                        fieldConfig.value = new NumberValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'flexibleNumber') {
                        fieldConfig.control = _this.getFlexibleNumberControl(filedSchema);
                        fieldConfig.value = new FlexibleNumberValue(filedSchema.value, fieldConfig.control['single']);
                    }
                    else if (filedSchema.control.controltype == 'flexibleDate') {
                        fieldConfig.control = _this.getFlexibleDateControl(filedSchema);
                        fieldConfig.value = new FlexibleDateValue(filedSchema.value, fieldConfig.control['single']);
                    }
                    else if (filedSchema.control.controltype == 'bool-check') {
                        filedSchema.control.enumValues = [{ value: "true", name: filedSchema.name }];
                        fieldConfig.control = _this.getCheckboxGroupControl(filedSchema, true);
                        fieldConfig.value = new CheckboxGroupValue(filedSchema.value);
                    }
                    else {
                        fieldConfig.control = _this.getTextControl(filedSchema);
                        fieldConfig.value = new TextValue(filedSchema.value);
                    }
                    if (filedSchema.control.enableClear == undefined) {
                        fieldConfig.control.enableClear = true;
                    }
                    else {
                        fieldConfig.control.enableClear = filedSchema.control.enableClear;
                    }
                }
                fieldConfig.valueText = fieldConfig.value.getValueText();
                // if(filedSchema.control.controltype == 'dropdown'){
                //   fieldConfig.control.controltype = 'radio'
                // }
                // else{
                fieldConfig.control.controltype = filedSchema.control.controltype;
                //  }
                fieldConfigs.push(fieldConfig);
            }));
        }
        return fieldConfigs;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getTextControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var textControl = new TextControl();
        textControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        textControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        textControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        textControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return textControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getInputGroupControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var inputGroupControl = new InputGroupControl();
        inputGroupControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        inputGroupControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        inputGroupControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        inputGroupControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        inputGroupControl.editable = filedSchema.control.hasOwnProperty('editable') ? filedSchema.control.editable : true;
        inputGroupControl.groupText = filedSchema.control.hasOwnProperty('groupText') ? filedSchema.control.groupText : '<span class="f-icon f-icon-lookup"></span>';
        inputGroupControl.usageMode = filedSchema.control.usageMode;
        inputGroupControl.dialogOptions = this.setInputGroupDialog(filedSchema.control.usageMode, filedSchema.control.modalConfig, filedSchema.id);
        inputGroupControl.click = filedSchema.control.click;
        return inputGroupControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getDateControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var dateControl = new DateControl();
        dateControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        dateControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dateControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dateControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        dateControl.format = filedSchema.control.format;
        dateControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
        // dateControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return dateControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getYearControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var yearControl = new YearControl();
        yearControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        yearControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        yearControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        yearControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        yearControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        yearControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
        // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return yearControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getMonthControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var monthControl = new MonthControl();
        monthControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        monthControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        monthControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        monthControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        monthControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        monthControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
        // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return monthControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getYearRangeControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var yearRangeControl = new YearRangeControl();
        yearRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        yearRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        yearRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        yearRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        yearRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        yearRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        yearRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        return yearRangeControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getMonthRangeControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var monthRangeControl = new MonthRangeControl();
        monthRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        monthRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        monthRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        monthRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        monthRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        monthRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        monthRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        return monthRangeControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getNumberRangeControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var numberRangeControl = new NumberRangeControl();
        numberRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        numberRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        numberRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        numberRangeControl.precision = filedSchema.control.hasOwnProperty('precision') ? filedSchema.control.precision : 2;
        numberRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        numberRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        numberRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        numberRangeControl.bigNumber = filedSchema.control.hasOwnProperty('bigNumber') ? filedSchema.control.bigNumber : false;
        return numberRangeControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getNumberControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var numberControl = new NumberControl();
        numberControl.precision = filedSchema.control.hasOwnProperty('precision') ? filedSchema.control.precision : 2;
        numberControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        numberControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        numberControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        numberControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        numberControl.bigNumber = filedSchema.control.hasOwnProperty('bigNumber') ? filedSchema.control.bigNumber : false;
        return numberControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getFlexibleNumberControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var flexiblenumberControl = new FlexibleNumberControl();
        flexiblenumberControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        flexiblenumberControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        flexiblenumberControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        flexiblenumberControl.precision = filedSchema.control.hasOwnProperty('precision') ? filedSchema.control.precision : 2;
        flexiblenumberControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        flexiblenumberControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        flexiblenumberControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        flexiblenumberControl.bigNumber = filedSchema.control.hasOwnProperty('bigNumber') ? filedSchema.control.bigNumber : false;
        flexiblenumberControl.single = filedSchema.control.hasOwnProperty('single') ? filedSchema.control.single : true;
        return flexiblenumberControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getFlexibleDateControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var flexibledateControl = new FlexibleDateControl();
        flexibledateControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        flexibledateControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        flexibledateControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        flexibledateControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        flexibledateControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        flexibledateControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        flexibledateControl.single = filedSchema.control.hasOwnProperty('single') ? filedSchema.control.single : true;
        flexibledateControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        flexibledateControl.showType = filedSchema.control.showType;
        flexibledateControl.showTime = filedSchema.control.showTime;
        return flexibledateControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getSearchControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var searchControl = new SearchControl();
        searchControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        searchControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        searchControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        searchControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return searchControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getDropDownControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var dropdowncontrol = new DropDownControl();
        dropdowncontrol.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        filedSchema.control.valueType = filedSchema.control.valueType ? filedSchema.control.valueType : '1';
        dropdowncontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dropdowncontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dropdowncontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        if (filedSchema.control.valueType == "1") {
            dropdowncontrol.valueType = EnumType.StringType;
            dropdowncontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        }
        else if (filedSchema.control.valueType == "2") {
            dropdowncontrol.valueType = EnumType.BoolType;
            dropdowncontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        }
        else if (filedSchema.control.valueType == "0") {
            dropdowncontrol.valueType = EnumType.IntType;
            dropdowncontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        }
        return dropdowncontrol;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getLookUpEditControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var lookupEdit = new HelpContol();
        if (!!(filedSchema.control.uri)) {
            lookupEdit.uri = filedSchema.control.uri;
        }
        lookupEdit.textField = filedSchema.control.textField;
        lookupEdit.valueField = filedSchema.control.valueField;
        lookupEdit.idField = filedSchema.control.idField;
        lookupEdit.helpId = filedSchema.control.helpId;
        lookupEdit.mapFields = filedSchema.control.mapFields;
        lookupEdit.context = filedSchema.control.context;
        lookupEdit.preEventCmd = filedSchema.control.preEventCmd;
        lookupEdit.postEventCmd = filedSchema.control.postEventCmd;
        lookupEdit.enableFullTree = filedSchema.control.enableFullTree;
        lookupEdit.loadTreeDataType = filedSchema.control.loadTreeDataType;
        //新增
        lookupEdit.singleSelect = filedSchema.control.hasOwnProperty('singleSelect') ? filedSchema.control.singleSelect : true;
        lookupEdit.expandLevel = filedSchema.control.expandLevel;
        lookupEdit.enableCascade = filedSchema.control.enableCascade;
        lookupEdit.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        lookupEdit.displayType = filedSchema.control.hasOwnProperty('displayType') ? filedSchema.control.displayType : "LIST";
        lookupEdit.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        lookupEdit.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        lookupEdit.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        return lookupEdit;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @param {?=} boolcheck
     * @return {?}
     */
    FilterService.prototype.getCheckboxGroupControl = /**
     * @private
     * @param {?} filedSchema
     * @param {?=} boolcheck
     * @return {?}
     */
    function (filedSchema, boolcheck) {
        if (boolcheck === void 0) { boolcheck = false; }
        /** @type {?} */
        var checkboxGroupcontrol = new CheckboxGroupControl();
        checkboxGroupcontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        checkboxGroupcontrol.enableSearch = filedSchema.control.hasOwnProperty('enableSearch') ? filedSchema.control.enableSearch : false;
        checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        if (boolcheck)
            checkboxGroupcontrol.boolcheck = true;
        return checkboxGroupcontrol;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getDateRangeControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var dateRangeControl = new DateRangeControl();
        dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        dateRangeControl.format = filedSchema.control.format;
        // dateRangeControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return dateRangeControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getDateRangeTimeControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var dateRangeControl = new DateRangeTimeControl();
        dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        dateRangeControl.format = filedSchema.control.format;
        return dateRangeControl;
    };
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    FilterService.prototype.getRadioControl = /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    function (filedSchema) {
        /** @type {?} */
        var checkboxGroupcontrol = new RadioControl();
        checkboxGroupcontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return checkboxGroupcontrol;
    };
    /**
   * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
   * @param usageMode 智能输入框控件使用模式
   * @param modalConfigData 表单配置JSON描述
   * @returns 弹出表单命令可接收的弹窗参数
   */
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} usageMode 智能输入框控件使用模式
     * @param {?} modalConfigData 表单配置JSON描述
     * @param {?} id
     * @return {?} 弹出表单命令可接收的弹窗参数
     */
    FilterService.prototype.setInputGroupDialog = /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} usageMode 智能输入框控件使用模式
     * @param {?} modalConfigData 表单配置JSON描述
     * @param {?} id
     * @return {?} 弹出表单命令可接收的弹窗参数
     */
    function (usageMode, modalConfigData, id) {
        if (usageMode == 'text' || usageMode == undefined || modalConfigData == undefined || id == undefined) {
            return undefined;
        }
        /** @type {?} */
        var dialogConfig = new DialogConfig();
        //dialogConfig.modalId = modalConfigData.modalId;
        dialogConfig.modalId = id;
        if (modalConfigData.mapFields) {
            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/\'/g, '"'));
        }
        if (modalConfigData.showHeader) {
            dialogConfig.title = modalConfigData.title;
        }
        dialogConfig.width = modalConfigData.width;
        dialogConfig.height = modalConfigData.height;
        // dialogConfig.showButtons = modalConfigData.showFooterButtons;
        // dialogConfig.buttons = this.setInputGroupDialogButtons(modalConfigData.footerButtons);
        return dialogConfig;
    };
    /**
    * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
    * @param buttonData 弹窗按钮组配置JSON描述
    * @returns 弹出表单命令可接收的弹窗按钮组参数
    */
    /**
     * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
     * @private
     * @param {?} buttonData 弹窗按钮组配置JSON描述
     * @return {?} 弹出表单命令可接收的弹窗按钮组参数
     */
    FilterService.prototype.setInputGroupDialogButtons = /**
     * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
     * @private
     * @param {?} buttonData 弹窗按钮组配置JSON描述
     * @return {?} 弹出表单命令可接收的弹窗按钮组参数
     */
    function (buttonData) {
        if (!buttonData) {
            return [];
        }
        /** @type {?} */
        var button;
        return buttonData.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            button = new DialogButtonConfig();
            button.text = item.text;
            if (item.appearance && item.appearance.class) {
                button.cls = item.appearance.class;
            }
            button.handle = item.click;
            return button;
        }));
    };
    //根据类型，new value值
    //根据类型，new value值
    /**
     * @param {?} controltype
     * @param {?} value
     * @param {?=} single
     * @return {?}
     */
    FilterService.prototype.setValues = 
    //根据类型，new value值
    /**
     * @param {?} controltype
     * @param {?} value
     * @param {?=} single
     * @return {?}
     */
    function (controltype, value, single) {
        if (single === void 0) { single = true; }
        if (controltype == 'input') {
            return new TextValue({ 'value': value });
        }
        else if (controltype == 'search') {
            return new SearchValue({ 'value': value });
        }
        else if (controltype == 'date') {
            return new DateValue({ 'value': value });
        }
        else if (controltype == 'year') {
            return new YearValue({ 'value': value });
        }
        else if (controltype == 'month') {
            return new MonthValue({ 'value': value });
        }
        else if (controltype == 'daterange') {
            return new DateRangeValue(value);
        }
        else if (controltype == 'daterangetime') {
            return new DateRangeTimeValue(value);
        }
        else if (controltype == 'yearrange') {
            return new YearRangeValue(value);
        }
        else if (controltype == 'monthrange') {
            return new MonthRangeValue(value);
        }
        else if (controltype == 'dropdown' || controltype == 'radio') {
            return new RadioGroupValue({ 'value': value });
        }
        else if (controltype == 'number') {
            return new NumberRangeValue(value);
        }
        else if (controltype == 'help') {
            return new HelpValue(value);
        }
        else if (controltype == 'checkboxgroup') {
            return new CheckboxGroupValue({ 'value': value });
        }
        else if (controltype == 'input-group') {
            return new InputGroupValue(value);
        }
        else if (controltype == 'singlenumber') {
            return new NumberValue({ 'value': value });
        }
        else if (controltype == 'flexiblenumber') {
            return new FlexibleNumberValue(value, single);
        }
        else if (controltype == 'flexibledate') {
            return new FlexibleDateValue(value, single);
        }
        else {
            return new TextValue({ 'value': value });
        }
    };
    FilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterService.ctorParameters = function () { return []; };
    /** @nocollapse */ FilterService.ngInjectableDef = defineInjectable({ factory: function FilterService_Factory() { return new FilterService(); }, token: FilterService, providedIn: "root" });
    return FilterService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 查询条件实体类
 */
var  /**
 * 查询条件实体类
 */
QueryCondition = /** @class */ (function () {
    function QueryCondition() {
    }
    return QueryCondition;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var CompareType = {
    /**
     * 等于
     */
    // Equal=1,
    Equal: 0,
    /**
     * 大于
     */
    GreaterThan: 2,
    /**
     * 大于或等于
     */
    GreaterThanOrEqual: 3,
    /**
     * 小于
     */
    LessThan: 4,
    /**
     * 小于或等于
     */
    LessThanOrEqual: 5,
    /**
     * 之间
     */
    BetWeen: 6,
};
CompareType[CompareType.Equal] = 'Equal';
CompareType[CompareType.GreaterThan] = 'GreaterThan';
CompareType[CompareType.GreaterThanOrEqual] = 'GreaterThanOrEqual';
CompareType[CompareType.LessThan] = 'LessThan';
CompareType[CompareType.LessThanOrEqual] = 'LessThanOrEqual';
CompareType[CompareType.BetWeen] = 'BetWeen';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ValueType = {
    /**
     *值类型
     */
    Value: 0,
    /**
     * 帮助类型
     */
    SmartHelp: 1,
    /**
     * 枚举类型
     */
    Enum: 2,
    /**
     * 表达式
     */
    Express: 3,
};
ValueType[ValueType.Value] = 'Value';
ValueType[ValueType.SmartHelp] = 'SmartHelp';
ValueType[ValueType.Enum] = 'Enum';
ValueType[ValueType.Express] = 'Express';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var RelationType = {
    /**
     * 与
     */
    // And=0,
    And: 1,
    /**
     * 或
     */
    // Or=1
    Or: 2,
};
RelationType[RelationType.And] = 'And';
RelationType[RelationType.Or] = 'Or';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CheckboxEnumValue = /** @class */ (function () {
    function CheckboxEnumValue() {
    }
    /**
     * @return {?}
     */
    CheckboxEnumValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    CheckboxEnumValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return CheckboxEnumValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConvertorService = /** @class */ (function () {
    function ConvertorService() {
    }
    // private solutionservice:SolutionService
    /**
    * 获取已选择的字段配置
    * @param selectedConditions
    */
    // private solutionservice:SolutionService
    /**
     * 获取已选择的字段配置
     * @param {?} selectedConditions
     * @return {?}
     */
    ConvertorService.prototype.getFeildConfigs = 
    // private solutionservice:SolutionService
    /**
     * 获取已选择的字段配置
     * @param {?} selectedConditions
     * @return {?}
     */
    function (selectedConditions) {
        /** @type {?} */
        var fieldsConfigs = new Array();
        if (!selectedConditions || selectedConditions.length <= 0) {
            return fieldsConfigs;
        }
        else {
            selectedConditions.forEach((/**
             * @param {?} condition
             * @return {?}
             */
            function (condition) {
                /** @type {?} */
                var fieldConfig = new FieldConfig();
                fieldConfig.id = condition.id;
                fieldConfig.labelCode = condition.fieldCode;
                fieldConfig.name = condition.fieldName;
                fieldConfig.control = condition.control;
                fieldsConfigs.push(fieldConfig);
            }));
        }
        return fieldsConfigs;
    };
    /**
     * @param {?} fileds
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getSelectedFieldConditions = /**
     * @param {?} fileds
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (fileds, selectedFieldConditions) {
        var _this = this;
        // console.log(selectedFieldConditions);
        /** @type {?} */
        var tempSelectedFieldConditions = new Array();
        tempSelectedFieldConditions = this.arrayClone(selectedFieldConditions);
        selectedFieldConditions = new Array();
        fileds.forEach((/**
         * @param {?} filed
         * @return {?}
         */
        function (filed) {
            filed.control = _this.getDropListEnumValues((/** @type {?} */ (filed.control)));
            // filed.control = this.getCheckGroupEnumValues(filed.control as CheckboxGroupControl);
            if (tempSelectedFieldConditions.length > 0) {
                /** @type {?} */
                var tempIndex = tempSelectedFieldConditions.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.id == filed.id; }));
                if (tempIndex != (-1)) {
                    selectedFieldConditions.push(tempSelectedFieldConditions[tempIndex]);
                }
                else {
                    selectedFieldConditions = _this.getNewFieldConditions(filed, selectedFieldConditions);
                }
            }
            else {
                selectedFieldConditions = _this.getNewFieldConditions(filed, selectedFieldConditions);
            }
        }));
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    ConvertorService.prototype.getDropListEnumValues = /**
     * @private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (control.valueType == EnumType.BoolType) {
            /** @type {?} */
            var enumValues_1 = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                enumValues_1.push(Object.assign(new EnumBoolValue(), element));
            }));
            control.enumValues = enumValues_1;
        }
        else if (control.valueType == EnumType.IntType) {
            /** @type {?} */
            var enumValues_2 = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                enumValues_2.push(Object.assign(new EnumIntegerValue(), element));
            }));
            control.enumValues = enumValues_2;
        }
        else if (control.valueType == EnumType.StringType) {
            /** @type {?} */
            var enumValues_3 = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                enumValues_3.push(Object.assign(new EnumStringValue(), element));
            }));
            control.enumValues = enumValues_3;
        }
        return control;
    };
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    ConvertorService.prototype.getCheckGroupEnumValues = /**
     * @private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var enumValues = new Array();
        control.enumValues.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            enumValues.push(Object.assign(new CheckboxEnumValue(), element));
        }));
        control.enumValues = enumValues;
        return control;
    };
    /**
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getNewFieldConditions = /**
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (filed, selectedFieldConditions) {
        /** @type {?} */
        var selectedFieldCondition = new QueryCondition();
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.filled = filed.filled;
        selectedFieldCondition.valueText = filed.valueText;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldCondition.labelCode = filed.labelCode;
        if (filed.control.getControlType() == ControlType.Text) {
            selectedFieldConditions = this.getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRangeTime) {
            selectedFieldConditions = this.getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.MonthRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.YearRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Year) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Month) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.NumberRange) {
            selectedFieldConditions = this.getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Help) {
            selectedFieldConditions = this.getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DropDown) {
            selectedFieldConditions = this.getDropDownValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Search) {
            selectedFieldConditions = this.getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Date) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.CheckboxGroup) {
            selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Radio) {
            selectedFieldConditions = this.getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.InputGroup) {
            selectedFieldConditions = this.getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Number) {
            selectedFieldConditions = this.getNumberValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.FlexibleNumber) {
            selectedFieldConditions = this.getFlexibleNumberValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.FlexibleDate) {
            selectedFieldConditions = this.getFlexibleDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.BoolCheck) {
            selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDropDownValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        this.getDropListEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getRadioValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getCheckboxGroupValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getSmartHelpValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getFlexibleNumberValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getFlexibleDateValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getNumberValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getNumberRangeValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDateRangeValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDateRangeTimeValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getTextValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDateValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getInputGroupValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getSearchValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    ConvertorService.prototype.arrayClone = /**
     * @private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    };
    ConvertorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ConvertorService.ctorParameters = function () { return []; };
    return ConvertorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FILTER_HANDLER_TOKEN = new InjectionToken('gsp-cmp/FILTER_HANDLER');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// export function deepCopy (data) {
//     return JSON.parse(JSON.stringify(data));
//   }
/**
 * @param {?} obj
 * @return {?}
 */
function deepCopy(obj) {
    /** @type {?} */
    var newobj = obj.constructor === Array ? [] : {};
    if (typeof obj !== 'object') {
        return obj;
    }
    else {
        for (var i in obj) {
            if (typeof obj[i] === 'object') { //判断对象的这条属性是否为对象
                //判断对象的这条属性是否为对象
                /** @type {?} */
                var type = Object.prototype.toString.call(obj[i]);
                if (type == '[object Null]') {
                    newobj[i] = obj[i];
                }
                else {
                    newobj[i] = deepCopy(obj[i]); //若是对象进行嵌套调用
                }
            }
            else {
                newobj[i] = obj[i];
            }
        }
    }
    return newobj; //返回深度克隆后的对象
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterComponent = /** @class */ (function () {
    function FilterComponent(filterPanelService, filterService, convertorService, handler, cd, render, ngzone, localeService, injector) {
        this.filterPanelService = filterPanelService;
        this.filterService = filterService;
        this.convertorService = convertorService;
        this.handler = handler;
        this.cd = cd;
        this.render = render;
        this.ngzone = ngzone;
        this.localeService = localeService;
        this.injector = injector;
        this._filterList = [];
        //是否禁用
        this.disabled = false;
        this.showReminder = false;
        /**
         * 是否启用侧边栏収折:
         * true-界面出现高级筛选文字按钮，点击按钮：过滤条件在侧边栏显示
         * false-界面出现筛选漏斗图标按钮，点击按钮：过滤条件在图标下方展示
         */
        this.floatFilter = true;
        // 启用自动宽度
        this._enableAutoWidth = false;
        // 清空已选
        this.clearSelectedText = '';
        this.localStorageKey = 'farrisSearchRecord';
        // 默认值是空值时执行查询，兼容旧方式
        this.defaultEmptyValueSearch = true;
        this.cla = true;
        this.query = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.resetChange = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.expandFilter = new EventEmitter();
        this.packupFilter = new EventEmitter();
        this.filterResize = new EventEmitter();
        // 条件变更时候触发
        this.conditionsChange = new EventEmitter();
        // 展开
        this.filterExtend = false;
        // 是否显示三个点
        this.filterEllipsis = false;
        // 是否显示展开收起
        this.filterExtendShow = false;
        this.filterExtendText = '展开';
        this.filterExtendIcon = 'f-icon-arrow-chevron-down';
        this.expandText = '展开';
        this.foldText = '收起';
        this.sidebarOpen = false;
        this.floatPanelOpen = false;
        this.showExpandTag = false;
        /**
         * 表单是否允许提交
         */
        this.canSubmit = false;
        /**
         * 表单是否允许提交,用于高级筛选清空后
         */
        this.advancedCanSubmit = true;
        /**
         * 默认展开项是否允许提交
         */
        this.showCanSubmit = true;
        /**
         * 是否显示清空已选
         */
        this.filledFilter = false;
        /**
         * 默认展开的筛选项
         */
        this.showFilterList = new Array();
        /**
         * 高级筛选
         */
        this.extendFilterList = new Array();
        this.extendFilterListStore = new Array();
        this.extendFilterListTemporary = new Array();
        /**
         * 已填写筛选数据
         */
        this.filledFilterList = new Array();
        /**
         * 高级筛选中已填写的
         */
        this.filledExtendFilterList = new Array();
        /** 没有填写的筛选项 */
        // unFilledFilterList:Array<QueryCondition> = new Array<QueryCondition>();
        /**
         * 高级筛选中必填项
         */
        this.extendRequiredList = new Array();
        /**
         * 默认筛选中必填项
         */
        this.showRequiredList = new Array();
        /**
         * 循环表单
         */
        this.listFilterConditions = new Array();
        /**
         * 默认展开＋高级筛选中已填写的
         */
        this.loopFilterList = new Array();
        /**
         * 用来存储setvalue前数据
         */
        this.stagListFilterConditions = new Array();
        /**
         * 显示中表单的必填项
         */
        this.requiredListFilter = [];
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.currentLocale = 'zh-CHS';
        this.isControlInline = true;
        this.reminderLeft = 0;
        this.floatPanelHeight = null;
        this.floatFilterIconBottom = 0;
        // 绑定大小变化响应
        this.ro = null;
        // 记录旧的宽度数据
        this.containerWidthRecord = 0;
        // 阈值
        this.distanceThreshold = 20;
        this.overLayService = null;
        if (this.injector) {
            this.currentLocale = this.injector.get(LOCALE_ID);
            this.filterHandler = this.injector.get(FILTER_HANDLER_TOKEN, null, InjectFlags.Optional);
            this.idService = this.injector.get(IdService);
        }
        this.overLayService = this.injector.get(OverLayHiddenService, null);
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    Object.defineProperty(FilterComponent.prototype, "filterList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterList;
        },
        set: /**
         * @param {?} filterList
         * @return {?}
         */
        function (filterList) {
            this._filterList = filterList || [];
            this.initFilterList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterComponent.prototype, "enableAutoWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableAutoWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._enableAutoWidth) {
                if (value) {
                    this.filterEllipsis = false;
                    this.filterExtendShow = false;
                }
                this._enableAutoWidth = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterComponent.prototype, "defaultValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultValue;
        },
        set: /**
         * @param {?} configs
         * @return {?}
         */
        function (configs) {
            var _this_1 = this;
            this._defaultValue = configs;
            // 如果允许空置时执行，或者不允许，但有条件
            /** @type {?} */
            var canFilter = this.defaultEmptyValueSearch || configs && configs.length > 0;
            if (canFilter) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this_1.setFilterValue(_this_1._defaultValue);
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.filterWrapperEl = this.filterListWrapper && this.filterListWrapper.nativeElement;
        // 绑定事件
        this.bindRoEvent();
        this.foldText = this.localeService.getValue('filterPanel.fold');
        this.expandText = this.localeService.getValue('filterPanel.expand');
        this.filterExtendText = this.expandText;
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        else {
            this.isControlInline = true;
        }
        fromEvent(window, 'resize').pipe(auditTime(50)).subscribe((/**
         * @return {?}
         */
        function () {
            _this_1.floatPanelHeight = window.innerHeight - _this_1.floatFilterIconBottom;
        }));
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.filterWrapperEl);
            this.ro = null;
        }
        if (this.floatPanel) {
            this.overLayService.destory(this.floatPanel.nativeElement);
        }
    };
    /**
     * 绑定监控大小的事件
     */
    /**
     * 绑定监控大小的事件
     * @private
     * @return {?}
     */
    FilterComponent.prototype.bindRoEvent = /**
     * 绑定监控大小的事件
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        if (!this.filterWrapper) {
            return;
        }
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            // 这样一直都绑定可能有性能问题
            _this_1.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                /** @type {?} */
                var tempWidth = entries[0].contentRect.width;
                if (Math.abs(tempWidth - _this_1.containerWidthRecord) >
                    _this_1.distanceThreshold) {
                    if (!_this_1.filterList.length)
                        return;
                    if (_this_1.enableAutoWidth) {
                        return;
                    }
                    _this_1.listEllipsisInit();
                    _this_1.containerWidthRecord = tempWidth;
                }
            }));
            _this_1.ro.observe(_this_1.filterWrapper.nativeElement);
            // fromEvent(window, 'resize')
            //     .pipe(debounceTime(50, animationFrame))
            //     .subscribe((): void => {
            //         this.ngzone.run(() => {
            //             // console.log('resize');
            //             if (!this.filterList.length) return;
            //             if (this.enableAutoWidth) {return;}
            //             this.listEllipsisInit();
            //         });
            //     });
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FilterComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // if (changes.filterList && !changes.filterList.isFirstChange()) {
        //   this.initFilterList();
        // }
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 初始化筛选项
     */
    /**
     * 初始化筛选项
     * @return {?}
     */
    FilterComponent.prototype.initFilterList = /**
     * 初始化筛选项
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.listFilterConditions = new Array();
        /** @type {?} */
        var filterDatas = this.filterService.fieldSchemasConvert(this.filterList);
        if (filterDatas && filterDatas.length) {
            this.listFilterConditions = this.convertorService.getSelectedFieldConditions(filterDatas, this.listFilterConditions);
        }
        this.stagListFilterConditions = this.listFilterConditions.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return (__assign({}, o)); }));
        this.filterListClassify();
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this_1.showReminder && _this_1.showFilterList && _this_1.showFilterList.length) {
                _this_1.showReminderItem = _this_1.showFilterList[0];
                if (_this_1.showReminderItem) {
                    /** @type {?} */
                    var filterlistItems = _this_1.filterListWrapper && _this_1.filterListWrapper.nativeElement.children;
                    if (filterlistItems && filterlistItems.length) {
                        /** @type {?} */
                        var showRemItem = void 0;
                        for (var i = 0; i < filterlistItems.length; i++) {
                            if (_this_1.showReminderItem['id'] == filterlistItems[i].getAttribute('id')) {
                                showRemItem = filterlistItems[i];
                            }
                        }
                        if (showRemItem) {
                            _this_1.reminderLeft = showRemItem.offsetLeft >= 0 ? showRemItem.offsetLeft : 0;
                        }
                    }
                }
            }
            else {
                _this_1.showReminderItem = null;
            }
        }), 0);
        this.cd.detectChanges();
    };
    /** 筛选项分类 */
    /**
     * 筛选项分类
     * @return {?}
     */
    FilterComponent.prototype.filterListClassify = /**
     * 筛选项分类
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.extendFilterList = [];
        this.extendFilterListStore = [];
        this.showFilterList = [];
        this.filledFilterList = [];
        this.filledExtendFilterList = [];
        this.loopFilterList = [];
        this.extendRequiredList = [];
        this.showRequiredList = [];
        // 必填
        /** @type {?} */
        var requiredList = this.listFilterConditions.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        function (listitem) {
            return listitem.control.required;
        }));
        if (requiredList && requiredList.length) {
            this.requiredListFilter = requiredList;
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
        }
        else {
            this.requiredListFilter = [];
            this.canSubmit = true;
        }
        // 几种类型分类
        this.listFilterConditions.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            if (field.control.isExtend && field['filled']) {
                _this_1.filledExtendFilterList.push(field);
            }
            if (field['filled']) {
                _this_1.filledFilterList.push(field);
            }
            // else if(!field.control.isExtend){
            //   this.unFilledFilterList.push(field);
            // }
            if (field.control.isExtend) {
                _this_1.extendFilterListStore.push(field);
            }
            else {
                _this_1.showFilterList.push(field);
            }
        }));
        if (this.filledFilterList.length) {
            this.filledFilter = true;
        }
        else {
            this.filledFilter = false;
        }
        /** @type {?} */
        var list = this.listFilterConditions.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return !item.control.isExtend || item['filled'];
        }));
        // this.loopFilterList = this.showFilterList.concat(this.filledExtendFilterList);
        this.loopFilterList = list ? list : [];
        this.loopFilterList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this_1.getValueText(item);
        }));
        this.extendFilterList = this.extendFilterListStore.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return (__assign({}, o)); }));
        /** @type {?} */
        var extendRequiredList = this.extendFilterList.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        function (listitem) {
            return listitem.control.required;
        }));
        if (extendRequiredList && extendRequiredList.length) {
            this.extendRequiredList = extendRequiredList;
        }
        /** @type {?} */
        var showrequiredList = this.showFilterList.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        function (listitem) {
            return listitem.control.required;
        }));
        if (showrequiredList && showrequiredList.length) {
            this.showRequiredList = showrequiredList;
        }
        this.showCanSubmit = this.canSubmitFilter(this.showRequiredList);
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        // console.log('已填写',this.filledExtendFilterList);
        // console.log('显示出来的',this.loopFilterList);
        // console.log('隐藏部分',this.extendFilterList);
        this.filterExtendShow = true;
        // 如果是支持自动宽度，就是不収折,判断涉及赋值时机
        if (!this.enableAutoWidth) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this_1.listEllipsisInit();
            }), 0);
        }
    };
    /**
     * 已填写筛选项点击
     * @param event
     * @param data
     */
    /**
     * 已填写筛选项点击
     * @param {?} event
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    FilterComponent.prototype.filterClick = /**
     * 已填写筛选项点击
     * @param {?} event
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (event, data, index) {
        var _this_1 = this;
        event.stopPropagation();
        if (this.disabled)
            return;
        if (data) {
            this.showReminderItem = null;
        }
        /** @type {?} */
        var instanceID = this.localStorageKey + '_' + data.id;
        if (data && this.currentFilterId != data.id) {
            /** @type {?} */
            var panelItem = deepCopy(data);
            this.currentFilterId = data.id;
            var _a = event.currentTarget.getBoundingClientRect(), left = _a.left, top_1 = _a.top, height = _a.height, right = _a.right;
            this.filterPanelContainer = this.filterPanelService.showPanel({
                left: left,
                top: top_1 + height + 2,
                right: right,
                item: panelItem,
                localStorageKey: instanceID
            });
            this.filterPanelContainer.hidePanel.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this_1.filterPanelService.hidePanel();
                _this_1.filterPanelContainer = null;
                _this_1.currentFilterId = null;
            }));
            this.filterPanelContainer.clearFilter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this_1.clearFilter.emit(e);
            }));
            //提交弹窗内
            /** @type {?} */
            var _this_2 = this;
            this.filterPanelContainer.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.filled = (e.valueText && e.valueText.length > 0) ? true : false;
                _this_2.loopFilterList[index] = e;
                /** @type {?} */
                var panelListIndex = _this_2.listFilterConditions.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return item['id'] == e['id'];
                }));
                if (panelListIndex >= 0) {
                    _this_2.listFilterConditions[panelListIndex] = e;
                }
                _this_1.conditionChangeHandler();
                _this_1.inSetCurrentFilterConditions();
                _this_1.filterListClassify();
                // valueText是有需要计算的，所以延后判断是否显示
                /** @type {?} */
                var findItem = _this_2.loopFilterList.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return item['id'] == e['id'];
                }));
                if (findItem) {
                    findItem['filled'] = findItem.valueText && findItem.valueText.length > 0 ? true : false;
                }
                _this_1.cd.markForCheck();
                _this_1.submit('panelFormData', _this_1.listFilterConditions, e);
                _this_1.filterPanelService.hidePanel();
                _this_1.filterPanelContainer = null;
                _this_1.currentFilterId = null;
            }));
        }
        else {
            this.filterPanelService.hidePanel();
            this.filterPanelContainer = null;
            this.currentFilterId = null;
        }
    };
    /**
     * 清空筛选项
     */
    /**
     * 清空筛选项
     * @param {?} data
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    FilterComponent.prototype.filterClear = /**
     * 清空筛选项
     * @param {?} data
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    function (data, index, event) {
        event.stopPropagation();
        this.filterPanelService.hidePanel();
        this.currentFilterId = null;
        this.resetListCondition(data);
        this.filterListClassify();
        this.cd.markForCheck();
        this.conditionChangeHandler();
        this.clearFilter.emit(data);
        this.inSetCurrentFilterConditions();
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        this.submit('panelFormData', this.listFilterConditions);
    };
    /**
     * 展开高级筛选
     */
    /**
     * 展开高级筛选
     * @return {?}
     */
    FilterComponent.prototype.advancedFilter = /**
     * 展开高级筛选
     * @return {?}
     */
    function () {
        this.showReminderItem = null;
        this.extendFilterListTemporary = deepCopy(this.extendFilterList);
        //this.farrissidebar.isOpen = true;
        this.farrissidebar.openSideBar();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.listCancel = /**
     * @return {?}
     */
    function () {
        this.extendFilterList = deepCopy(this.extendFilterListTemporary);
        // this.farrissidebar.isOpen = false;
        this.farrissidebar.closeSideBar();
        this.floatPanelOpen = false;
    };
    /**
     * 过滤按钮点开的面板
     */
    /**
     * 过滤按钮点开的面板
     * @return {?}
     */
    FilterComponent.prototype.advancedPanelClose = /**
     * 过滤按钮点开的面板
     * @return {?}
     */
    function () {
        this.extendFilterList = deepCopy(this.extendFilterListTemporary);
        this.floatPanelOpen = false;
    };
    /**
     * 打开面板高级筛选
     */
    /**
     * 打开面板高级筛选
     * @param {?} $evnet
     * @return {?}
     */
    FilterComponent.prototype.floatFilterOpen = /**
     * 打开面板高级筛选
     * @param {?} $evnet
     * @return {?}
     */
    function ($evnet) {
        var _this_1 = this;
        this.floatPanelOpen = !this.floatPanelOpen;
        if (this.floatPanelOpen) {
            // 解决已经操作过侧边栏后，又切换是否侧边栏展示的问题
            this.render.removeClass(this.filterWrapper.nativeElement.parentElement, 'f-sidebar-parent-collapse');
            this.extendFilterListTemporary = deepCopy(this.extendFilterList);
            if (!this.floatFilterIconBottom) {
                var bottom = ((/** @type {?} */ ($evnet.target))).getBoundingClientRect().bottom;
                this.floatFilterIconBottom = bottom + 100;
            }
            this.floatPanelHeight = window.innerHeight - this.floatFilterIconBottom;
            this.overLayService.registerMouseEvent(this.floatPanel.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (_this_1.floatPanel.nativeElement.contains(e.target)) {
                    return;
                }
                else {
                    if (e.target.nodeName === 'SPAN' && e.target.className.indexOf('f-icon-filtrate')) {
                        return;
                    }
                    /** @type {?} */
                    var cls = ['.f-datepicker-container', '.farris-timer-picker', '.farris-modal', '.f-combo-lookup', '.date-overlay-container'];
                    if (cls.find((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) { return e.target.closest(k); }))) {
                        return;
                    }
                }
                _this_1.floatPanelOpen = false;
                _this_1.overLayService.destory(_this_1.floatPanel.nativeElement);
            }));
            this.cd.detectChanges();
        }
        else {
            this.overLayService.destory(this.floatPanel.nativeElement);
        }
    };
    /**
     * 列表展示初始化
     */
    /**
     * 列表展示初始化
     * @return {?}
     */
    FilterComponent.prototype.listEllipsisInit = /**
     * 列表展示初始化
     * @return {?}
     */
    function () {
        if (this.enableAutoWidth)
            return;
        // if(this.filterExtend) return;
        /** @type {?} */
        var filterMainWidth = this.filterMain.nativeElement.offsetWidth;
        this.filterToolWidth = 0;
        // filterTool = this.filterTool.nativeElement.offsetWidth;
        if (this.filterTool) {
            this.filterToolWidth = this.filterTool.nativeElement.offsetWidth;
        }
        // 筛选条件区域最大宽度
        /** @type {?} */
        var filterListW;
        if (this.filterExtend) {
            filterListW = filterMainWidth - 26;
        }
        else {
            // filterListW = filterMainWidth- 48 - this.filterToolWidth - 26;
            filterListW = filterMainWidth - 48 - this.filterToolWidth - 26;
        }
        // const filterWrapper = this.filterListWrapper.nativeElement;
        // const filterWrapperWidth = filterWrapper.offsetWidth;
        // console.log(filterWrapperWidth);
        /** @type {?} */
        var filterItems = this.filterWrapperEl ? this.filterWrapperEl.children : [];
        /** @type {?} */
        var filterItemWidth = 0;
        if (filterItems && filterItems.length) {
            for (var i = 0, len = filterItems.length; i < len; i++) {
                this.render.setStyle(filterItems[i], 'display', 'flex');
                /** @type {?} */
                var width = filterItems[i].offsetWidth;
                filterItemWidth += width + 8;
                if (filterItemWidth >= filterListW && !this.filterExtend) {
                    this.render.setStyle(filterItems[i], 'display', 'none');
                }
                else {
                    this.render.setStyle(filterItems[i], 'display', 'flex');
                }
                // console.log(filterItemWidth,filterListW,i);
            }
        }
        // if(filterItemWidth > this.filterWrapperEl.offsetWidth){
        if (filterItemWidth >= filterListW) {
            this.filterEllipsis = true;
            this.filterExtendShow = true;
        }
        else {
            this.filterEllipsis = false;
            this.filterExtendShow = false;
        }
        if (filterItems.length)
            this.filterResize.emit();
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    };
    /**
     * 筛选项展开收起切换
     */
    /**
     * 筛选项展开收起切换
     * @return {?}
     */
    FilterComponent.prototype.filterExpand = /**
     * 筛选项展开收起切换
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.showReminderItem = null;
        this.filterExtend = !this.filterExtend;
        if (this.filterExtend) {
            this.filterEllipsis = false;
            this.filterExtendText = this.foldText;
            this.filterExtendIcon = 'f-icon-arrow-chevron-up';
            /** @type {?} */
            var filterItems = this.filterWrapperEl.children;
            if (filterItems && filterItems.length) {
                for (var i = 0, len = filterItems.length; i < len; i++) {
                    this.render.setStyle(filterItems[i], 'display', 'flex');
                }
            }
            this.render.setStyle(this.filterWrapperEl, 'flex-wrap', 'wrap');
            this.expandFilter.emit();
            this.cd.detectChanges();
        }
        else {
            this.filterExtendText = this.expandText;
            this.filterExtendIcon = 'f-icon-arrow-chevron-down';
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this_1.listEllipsisInit();
            }), 0);
            this.packupFilter.emit();
        }
    };
    /**
     * 高级筛选表单项搜索变化
     * @param $event
     * @param item
     */
    /**
     * 高级筛选表单项搜索变化
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    FilterComponent.prototype.onSearch = /**
     * 高级筛选表单项搜索变化
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        if (this.disabled) {
            return;
        }
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        // console.log(this.advancedCanSubmit,this.canSubmit);
        this.conditionChangeHandler(false);
        this.searchChange.emit({ item: item, conditions: this.listFilterConditions, instance: this });
    };
    /** 判断是否所有必填项都填写完毕 */
    /**
     * 判断是否所有必填项都填写完毕
     * @param {?} requirelist
     * @return {?}
     */
    FilterComponent.prototype.canSubmitFilter = /**
     * 判断是否所有必填项都填写完毕
     * @param {?} requirelist
     * @return {?}
     */
    function (requirelist) {
        /** @type {?} */
        var formCanSubmit = false;
        if (!requirelist || !requirelist.length) {
            formCanSubmit = true;
            return formCanSubmit;
        }
        else {
            for (var i = 0; i < requirelist.length; i++) {
                /** @type {?} */
                var item = requirelist[i];
                if (item.control.getControlType() === ControlType.Text) {
                    /** @type {?} */
                    var tv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(tv).length < 0 || !tv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Help) {
                    /** @type {?} */
                    var shv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(shv).length === 0 || !shv.value || !shv.valueField) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DropDown) {
                    /** @type {?} */
                    var ddv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(ddv).length === 0 || !ddv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRange) {
                    /** @type {?} */
                    var drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRangeTime) {
                    /** @type {?} */
                    var drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.MonthRange) {
                    /** @type {?} */
                    var mrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mrv).length === 0 || (!mrv.startTime && !mrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.YearRange) {
                    /** @type {?} */
                    var yrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yrv).length === 0 || (!yrv.startTime && !yrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.NumberRange) {
                    /** @type {?} */
                    var nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (nrv.startValue === null && nrv.endValue === null)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Search) {
                    /** @type {?} */
                    var sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Date) {
                    /** @type {?} */
                    var dv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(dv).length < 0 || !dv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Month) {
                    /** @type {?} */
                    var mv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mv).length < 0 || !mv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Year) {
                    /** @type {?} */
                    var yv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yv).length < 0 || !yv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.CheckboxGroup) {
                    /** @type {?} */
                    var cbgv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Radio) {
                    /** @type {?} */
                    var radiov = ((/** @type {?} */ (item.value)));
                    if (Object.keys(radiov).length < 0 || radiov.value === '') {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.InputGroup) {
                    /** @type {?} */
                    var sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.textValue) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Number) {
                    /** @type {?} */
                    var nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (nrv.value == null)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.FlexibleNumber) {
                    /** @type {?} */
                    var flexv = ((/** @type {?} */ (item.value)));
                    if (flexv.single) {
                        if (Object.keys(flexv).length < 0 || flexv.value == null) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                    else {
                        if (Object.keys(flexv).length === 0 || (flexv.startValue == null && flexv.endValue == null)) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                }
                else if (item.control.getControlType() === ControlType.FlexibleDate) {
                    /** @type {?} */
                    var flexdatev = ((/** @type {?} */ (item.value)));
                    if (flexdatev.single) {
                        if (Object.keys(flexdatev).length < 0 || !flexdatev.value) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                    else {
                        if (Object.keys(flexdatev).length === 0 || (!flexdatev.startValue && !flexdatev.endValue)) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                }
            }
            return formCanSubmit;
        }
    };
    /** 高级筛选点击确定提交 */
    /**
     * 高级筛选点击确定提交
     * @return {?}
     */
    FilterComponent.prototype.listSearch = /**
     * 高级筛选点击确定提交
     * @return {?}
     */
    function () {
        var _this_1 = this;
        if (this.disabled) {
            return;
        }
        this.extendFilterList.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            if ((field.control.getControlType() != ControlType.Date)
                && (field.control.getControlType() != ControlType.DateRange)
                && (field.control.getControlType() != ControlType.DateRangeTime)
                && (field.control.getControlType() != ControlType.FlexibleDate)) {
                if (!field.valueText) {
                    field.valueText = field.value.getValueText();
                }
            }
            // if(field.control.getControlType() == ControlType.Radio){
            //   console.log(field);
            // }
            field.filled = (field.valueText && field.valueText.length > 0) ? true : false;
            if (field.control.getControlType() == ControlType.Text) {
                /** @type {?} */
                var farrisSearchRecord = field.valueText;
                /** @type {?} */
                var farrisSearchRecordArray = [];
                /** @type {?} */
                var storagelabelCode = field.labelCode;
                /** @type {?} */
                var filterPanelArray = JSON.parse(localStorage.getItem(_this_1.localStorageKey));
                if (Array.isArray(filterPanelArray)) {
                    filterPanelArray = null;
                }
                if (!filterPanelArray || !filterPanelArray[storagelabelCode] || !filterPanelArray[storagelabelCode].length && farrisSearchRecord && farrisSearchRecord.length) {
                    farrisSearchRecordArray.push(farrisSearchRecord);
                }
                else {
                    farrisSearchRecordArray = filterPanelArray[storagelabelCode];
                    /** @type {?} */
                    var index = filterPanelArray[storagelabelCode].indexOf(farrisSearchRecord);
                    if (index < 0 && farrisSearchRecord && farrisSearchRecord.length) {
                        farrisSearchRecordArray.unshift(farrisSearchRecord);
                    }
                    farrisSearchRecordArray = farrisSearchRecordArray.slice(0, 6);
                }
                if (filterPanelArray == null)
                    filterPanelArray = {};
                filterPanelArray[storagelabelCode] = farrisSearchRecordArray;
                localStorage.setItem(_this_1.localStorageKey, JSON.stringify(filterPanelArray));
            }
        }));
        //判断高级筛选里是否已修改
        /** @type {?} */
        var extendAmendedList = this.extendFilterList.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.filled; }));
        if (extendAmendedList && extendAmendedList.length) {
            this.showExpandTag = true;
        }
        else {
            this.showExpandTag = false;
        }
        this.extendFilterListStore = this.extendFilterList.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return (__assign({}, o)); }));
        this.extendFilterListStore.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var extendListIndex = _this_1.listFilterConditions.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item['id'] == field['id'];
            }));
            if (extendListIndex >= 0) {
                _this_1.listFilterConditions[extendListIndex] = field;
            }
        }));
        // console.log(this.listFilterConditions);
        this.conditionChangeHandler();
        this.inSetCurrentFilterConditions();
        this.filterListClassify();
        this.farrissidebar.isOpen = false;
        this.floatPanelOpen = false;
        this.cd.markForCheck();
        this.submit('extendFormData', this.listFilterConditions);
    };
    /** 提交表单 */
    /**
     * 提交表单
     * @param {?} type
     * @param {?} filterlist
     * @param {?=} filterItem
     * @return {?}
     */
    FilterComponent.prototype.submit = /**
     * 提交表单
     * @param {?} type
     * @param {?} filterlist
     * @param {?=} filterItem
     * @return {?}
     */
    function (type, filterlist, filterItem) {
        if (filterItem === void 0) { filterItem = null; }
        if (this.disabled || !this.showCanSubmit || !this.advancedCanSubmit) {
            return;
        }
        /** @type {?} */
        var queryList = this.handler.setFilterConditions(filterlist);
        this.query.emit({ type: type, data: JSON.stringify(queryList), filterItem: filterItem });
    };
    /** 设置筛选初始值 */
    /**
     * 设置筛选初始值
     * @param {?} fieldConfigs
     * @return {?}
     */
    FilterComponent.prototype.setFilterValue = /**
     * 设置筛选初始值
     * @param {?} fieldConfigs
     * @return {?}
     */
    function (fieldConfigs) {
        // 在初始化筛选条条件列表时会给stagListFilterConditions赋值
        this.listFilterConditions = this.stagListFilterConditions.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return (__assign({}, o)); }));
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.setValues(this.listFilterConditions, fieldConfigs);
            /** @type {?} */
            var listFilter = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return (__assign({}, o)); }));
            this.listFilterConditions = listFilter;
            this.filterListClassify();
            this.conditionChangeHandler();
            this.inSetCurrentFilterConditions();
            // this.listSearch();
            this.cd.detectChanges();
            this.cd.markForCheck();
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
            if (!this.canSubmit) {
                return;
            }
            this.submit('showFormData', this.listFilterConditions);
        }
    };
    /**
     * 清空筛选某一项
     * @param labelCode 字段编号唯一标识
     */
    /**
     * 清空筛选某一项
     * @param {?} labelCode 字段编号唯一标识
     * @return {?}
     */
    FilterComponent.prototype.resetFilterValue = /**
     * 清空筛选某一项
     * @param {?} labelCode 字段编号唯一标识
     * @return {?}
     */
    function (labelCode) {
        if (labelCode && this.listFilterConditions && this.listFilterConditions.length) {
            /** @type {?} */
            var resetCondition = this.listFilterConditions.find((/**
             * @param {?} conditions
             * @return {?}
             */
            function (conditions) {
                return conditions['fieldCode'] === labelCode;
            }));
            if (resetCondition) {
                this.resetListCondition(resetCondition);
                this.filterListClassify();
                this.cd.markForCheck();
                this.conditionChangeHandler();
                this.inSetCurrentFilterConditions();
                this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
                this.submit('panelFormData', this.listFilterConditions);
            }
        }
    };
    // 设置value
    // 设置value
    /**
     * @param {?} conditions
     * @param {?} fieldConfigs
     * @return {?}
     */
    FilterComponent.prototype.setValues = 
    // 设置value
    /**
     * @param {?} conditions
     * @param {?} fieldConfigs
     * @return {?}
     */
    function (conditions, fieldConfigs) {
        var _this_1 = this;
        /** @type {?} */
        var qc;
        /** @type {?} */
        var controlType;
        if (fieldConfigs && fieldConfigs.length) {
            fieldConfigs.forEach((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.fieldCode == v.labelCode; }));
                if (qc) {
                    controlType = _this_1.getControlType(qc);
                    qc.value = _this_1.filterService.setValues(controlType, v.value, qc.control.single);
                    qc.valueText = qc.value.getValueText(qc.control);
                    if (v.value) {
                        qc.filled = true;
                    }
                }
            }));
        }
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    FilterComponent.prototype.getValue = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        /** @type {?} */
        var queryList = this.handler.setFilterConditions(this.listFilterConditions);
        /** @type {?} */
        var item = queryList.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n['FilterField'] === fieldName; }));
        if (item) {
            return item.value;
        }
        return undefined;
    };
    /**
     * 获取控件类型
     * @param selectedFieldCondition
     */
    /**
     * 获取控件类型
     * @param {?} selectedFieldCondition
     * @return {?}
     */
    FilterComponent.prototype.getControlType = /**
     * 获取控件类型
     * @param {?} selectedFieldCondition
     * @return {?}
     */
    function (selectedFieldCondition) {
        if (selectedFieldCondition) {
            if (selectedFieldCondition.control.getControlType() == ControlType.Text) {
                return 'input';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Search) {
                return 'search';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Date) {
                return 'date';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Month) {
                return 'month';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Year) {
                return 'year';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRange) {
                return 'daterange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.MonthRange) {
                return 'monthrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.YearRange) {
                return 'yearrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRangeTime) {
                return 'daterangetime';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DropDown) {
                return 'dropdown';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.NumberRange) {
                return 'number';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Help) {
                return 'help';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.CheckboxGroup) {
                return 'checkboxgroup';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Radio) {
                return 'radio';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.InputGroup) {
                return 'input-group';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Number) {
                return 'singlenumber';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.FlexibleNumber) {
                return 'flexiblenumber';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.FlexibleDate) {
                return 'flexibledate';
            }
            else {
                return 'input';
            }
        }
    };
    /**
     * 更新上下文中筛选数据
     */
    /**
     * 更新上下文中筛选数据
     * @return {?}
     */
    FilterComponent.prototype.inSetCurrentFilterConditions = /**
     * 更新上下文中筛选数据
     * @return {?}
     */
    function () {
        if (this.filterHandler) {
            this.filterHandler.setCurrentFilterConditions(this.listFilterConditions);
        }
    };
    /** 清空条件 */
    /**
     * 清空条件
     * @param {?} listFilterCondition
     * @return {?}
     */
    FilterComponent.prototype.resetListCondition = /**
     * 清空条件
     * @param {?} listFilterCondition
     * @return {?}
     */
    function (listFilterCondition) {
        if (listFilterCondition.control.getControlType() == ControlType.Text) {
            listFilterCondition.value = new TextValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Search) {
            listFilterCondition.value = new SearchValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Date) {
            listFilterCondition.value = new DateValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Month) {
            listFilterCondition.value = new MonthValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Year) {
            listFilterCondition.value = new YearValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.DateRange) {
            listFilterCondition.value = new DateRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.MonthRange) {
            listFilterCondition.value = new MonthRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.YearRange) {
            listFilterCondition.value = new YearRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.DropDown) {
            listFilterCondition.value = new DropDownListValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.NumberRange) {
            listFilterCondition.value = new NumberRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Help) {
            listFilterCondition.value = new HelpValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.CheckboxGroup) {
            listFilterCondition.value = new CheckboxGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Radio) {
            listFilterCondition.value = new RadioGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.InputGroup) {
            listFilterCondition.value = new InputGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Number) {
            listFilterCondition.value = new NumberValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.FlexibleNumber) {
            listFilterCondition.value = new FlexibleNumberValue({ startValue: null, endValue: null, value: null }, listFilterCondition.control.single);
        }
        else if (listFilterCondition.control.getControlType() == ControlType.FlexibleDate) {
            listFilterCondition.value = new FlexibleDateValue({ startValue: null, endValue: null, value: null }, listFilterCondition.control.single);
        }
        else {
            listFilterCondition.value = new TextValue();
        }
        listFilterCondition.valueText = '';
        listFilterCondition.filled = false;
        // return listFilterCondition;
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.resetSearch = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        if (this.disabled) {
            return;
        }
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.listFilterConditions.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            function (listFilterCondition) {
                _this_1.resetListCondition(listFilterCondition);
            }));
            this.listFilterConditions = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return (__assign({}, o)); }));
            this.filterListClassify();
            this.showCanSubmit = true;
            this.conditionChangeHandler(false);
            this.submit('panelFormData', this.listFilterConditions);
        }
        this.resetChange.emit();
        this.showExpandTag = false;
    };
    /**
     * 高级筛选清空筛选
     */
    /**
     * 高级筛选清空筛选
     * @return {?}
     */
    FilterComponent.prototype.resetAdvancedSearch = /**
     * 高级筛选清空筛选
     * @return {?}
     */
    function () {
        var _this_1 = this;
        if (this.extendFilterList && this.extendFilterList.length) {
            this.extendFilterList.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            function (listFilterCondition) {
                _this_1.resetListCondition(listFilterCondition);
            }));
            this.extendFilterList = this.extendFilterList.map((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return (__assign({}, o)); }));
        }
        if (this.extendRequiredList.length) {
            this.advancedCanSubmit = false;
        }
    };
    /**
     * valueText 特殊类型处理
     * @param item
     */
    /**
     * valueText 特殊类型处理
     * @param {?} item
     * @return {?}
     */
    FilterComponent.prototype.getValueText = /**
     * valueText 特殊类型处理
     * @param {?} item
     * @return {?}
     */
    function (item) {
        // console.log(item.fieldName,item.control.getControlType());
        if (item.control.getControlType() === ControlType.DropDown) {
            /** @type {?} */
            var enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            var value_1 = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length) {
                /** @type {?} */
                var texts = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return val['value'] == value_1;
                }));
                if (texts) {
                    item.valueText = texts['name'];
                }
            }
        }
        else if (item.control.getControlType() === ControlType.CheckboxGroup) {
            /** @type {?} */
            var enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            var value_2 = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length && value_2 && value_2['length'] > 0) {
                if (item.control.boolcheck) {
                    item.valueText = value_2[0].toString();
                    if (item.valueText == 'true') {
                        item.valueText = this.localeService.getValue('text.yes');
                    }
                    else if (item.valueText == 'false') {
                        item.valueText = this.localeService.getValue('text.no');
                    }
                }
                else {
                    /** @type {?} */
                    var texts = [];
                    var _loop_1 = function (i) {
                        /** @type {?} */
                        var enums = enumValue.find((/**
                         * @param {?} val
                         * @return {?}
                         */
                        function (val) {
                            return val['value'] == value_2[i];
                        }));
                        if (enums) {
                            texts.push(enums['name']);
                        }
                    };
                    for (var i = 0; i <= value_2['length']; i++) {
                        _loop_1(i);
                    }
                    item.valueText = texts.join(',');
                }
            }
        }
        else if (item.control.getControlType() === ControlType.Radio) {
            /** @type {?} */
            var enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            var value_3 = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length) {
                /** @type {?} */
                var texts = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return val['value'] == value_3;
                }));
                if (texts) {
                    item.valueText = texts['name'];
                    if (item.valueText == 'true') {
                        item.valueText = this.localeService.getValue('text.yes');
                    }
                    else if (item.valueText == 'false') {
                        item.valueText = this.localeService.getValue('text.no');
                    }
                }
            }
        }
        else if (item.control.getControlType() == ControlType.InputGroup) {
            item.valueText = item.value.getValueText();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FilterComponent.prototype.buildSmartHelpKey = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.idService) {
            /** @type {?} */
            var prefix = '';
            if (location.hash) {
                /** @type {?} */
                var pathArr = location.hash.split('?');
                prefix = pathArr ? pathArr[0] : '';
            }
            else {
                /** @type {?} */
                var pathArr = location.pathname.split('/');
                prefix = pathArr ? pathArr[pathArr.length - 1] : '';
            }
            return this.idService.encrypt(prefix + '/list-filter/' + value);
        }
        else {
            return 'list-filter/' + value;
        }
    };
    /**
     * @private
     * @param {?=} searchEmit
     * @return {?}
     */
    FilterComponent.prototype.conditionChangeHandler = /**
     * @private
     * @param {?=} searchEmit
     * @return {?}
     */
    function (searchEmit) {
        if (searchEmit === void 0) { searchEmit = true; }
        /** @type {?} */
        var queryList = this.handler.setFilterConditions(this.listFilterConditions);
        this.conditionsChange.emit({ data: JSON.stringify(queryList) });
        if (searchEmit) {
            this.searchChange.emit(this.listFilterConditions);
        }
    };
    FilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-filter',
                    template: "<div class=\"f-filter-wrapper\" #filterWrapper [style.display]=\"filterList&&filterList.length ? '': 'none'\">\r\n    <div class=\"f-filter-wrapper-inner f-utils-fill\">\r\n        <div class=\"f-filter-main f-utils-fill\" #filterMain>\r\n            <div class=\"f-filter-list-wrapper\" #listWrapper>\r\n                <div class=\"f-filter-list\"\r\n                [ngClass]=\"{'f-filter-list-extend': filterExtend && filterExtendShow}\"\r\n                 #filterListWrapper>\r\n                    <div class=\"f-filter-item\" \r\n                        *ngFor=\"let data of loopFilterList;let index = index;let last = last;let first = first;\"\r\n                        [ngClass]=\"{'f-filter-item-actived': data.filled,'f-filter-item-last':last,'f-filter-item-edit': data.id == currentFilterId}\"\r\n                        [id]=\"data['id']\"\r\n                        (click)=\"filterClick($event,data,index)\"\r\n                        >\r\n                            <div class=\"f-filter-item-inner\"\r\n                                farrisTooltip \r\n                                [showTip]=\"data.id !== currentFilterId && data.filled && data.valueText\" \r\n                                [placement]=\"'bottom'\" \r\n                                [content]=\"data.valueText\"\r\n                            >\r\n                                <span class=\"f-filter-item-required text-danger\" *ngIf=\"data.control.required\">*</span>\r\n                                <span class=\"f-filter-item-text\">\r\n                                    {{data.fieldName}}\r\n                                </span>\r\n                                <span class=\"f-filter-item-tip\" *ngIf=\"data.filled&&data.valueText\">\uFF1A</span>\r\n                                <span class=\"f-filter-item-content\" *ngIf=\"data.filled&&data.valueText\" >{{data.valueText}}</span>\r\n                                <!--  -->\r\n                                <span class=\"f-filter-item-arrow f-icon f-icon-arrow-chevron-down\"></span>\r\n                            </div>\r\n                            <span class=\"f-filter-item-clear\" *ngIf=\"!disabled&&data.filled&&data.valueText && data.control.enableClear\" (click)=\"filterClear(data,index,$event)\">\r\n                                <span class=\"f-icon f-icon-close-circle\"></span>\r\n                            </span>\r\n                    </div>                 \r\n                    <div class=\"f-filter-toolbars\" *ngIf=\"filterExtend\">\r\n                        <button class=\"btn btn-link\" (click)=\"advancedFilter()\" *ngIf=\"floatFilter && extendFilterList && extendFilterList.length > 0\">{{ 'filterPanel.advancedFilter' | locale }}</button>\r\n                        <button class=\"btn btn-link\" (click)=\"resetSearch()\" *ngIf=\"!showReminder && filledFilter\">{{clearSelectedText?clearSelectedText:('filterPanel.clear' | locale) }}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"f-filter-list-ellipsis\" *ngIf=\"filterEllipsis && !filterExtend && filterExtendShow\" (click)=\"filterExpand()\">...</div>\r\n            <div class=\"f-filter-toolbars\" #filterTool *ngIf=\"!filterExtend\">\r\n                <button class=\"btn btn-link\" (click)=\"advancedFilter()\" *ngIf=\"floatFilter && extendFilterList && extendFilterList.length > 0\">{{ 'filterPanel.advancedFilter' | locale }}</button>\r\n                <button class=\"btn btn-link\" (click)=\"resetSearch()\" *ngIf=\"!showReminder && filledFilter\">{{ clearSelectedText?clearSelectedText:('filterPanel.clear' | locale) }}</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-filter-extend-btn\" (click)=\"filterExpand()\" *ngIf=\"filterExtendShow\">\r\n            <button class=\"btn btn-link\">\r\n                <span class=\"extend-btn-text\">{{filterExtendText}}</span>\r\n                <span [class]=\"'extend-btn-arrow f-icon '+filterExtendIcon\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"f-filter-extend-btn-advanced\" *ngIf=\"!floatFilter && extendFilterList && extendFilterList.length > 0\" [class.active]=\"floatPanelOpen\" (click)=\"floatFilterOpen($event)\">\r\n            <span class=\"f-icon f-icon-filtrate\"></span>\r\n            <span class=\"filter-expand-tag\" *ngIf=\"showExpandTag\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-filter-inputs-extend position-absolute\" *ngIf=\"!floatFilter\" [hidden]=\"!floatPanelOpen\" #floatPanel>\r\n        <div class=\"f-filter-typelist-arrow\"></div>\r\n        <div class=\"f-filter-inputs-extend-list farris-form farris-form-auto\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\" >\r\n            <fieldset class=\"f-section-formgroup\" [style.maxHeight.px]=\"floatPanelHeight\" style=\"overflow:auto\">\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                  <div class=\"col-12\">\r\n                    <ng-container *ngFor=\"let item of extendFilterList\">\r\n                        <div class=\"filter-input-list farris-group-wrap\">\r\n                            <ng-container [ngTemplateOutlet]=\"filterInputTemplate\" [ngTemplateOutletContext]=\"{ item: item }\">\r\n                            </ng-container>\r\n                        </div>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n            </fieldset>\r\n          <div class=\"f-filter-form-btns d-flex\" style=\"justify-content: space-between\">\r\n            <button class=\"btn btn-link\" (click)=\"resetAdvancedSearch()\">{{ 'filterPanel.empty' | locale }}</button>\r\n            <!-- bugNum:456508 -->\r\n            <div>\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"advancedPanelClose()\">{{ 'filterPanel.cancel' | locale }}</button>\r\n                <button type=\"button\" class=\"f-sidebar-filter-btn-confirm btn btn-primary\" [ngClass]=\"{'disabled': disabled}\" (click)=\"listSearch()\">{{ 'filterPanel.confirm' | locale }}</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-filter-item-reminder\" *ngIf=\"showReminder && showReminderItem\" [ngStyle]=\"{'left': reminderLeft+'px'}\">\r\n        <span class=\"reminder-arrow\"></span>\r\n        <div class=\"reminder-inner\">\r\n            <span class=\"f-icon f-icon-help-01\"></span>\r\n            <span class=\"reminder-text\">{{ 'filterPanel.pleaseInput' | locale }}<span>{{showReminderItem.fieldName}}</span></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<farris-sidebar [title]=\"'filterPanel.advancedFilter' | locale\" #farrissidebar [resizeable]=\"true\" [mainCls]=\"'f-sidebar-filter-main'\"\r\n    [showEntry]=\"false\" [showHeader]=\"true\" [showFooter]=\"true\" [maskable]=\"true\" [maskClosable]=\"false\"\r\n    [showClose]=\"false\" [width]=\"468\" [isOpen]=\"sidebarOpen\" *ngIf=\"extendFilterList && extendFilterList.length > 0\">\r\n    <ng-template farrisSidebarToolbar></ng-template>\r\n    <ng-template farrisSidebarContent [contentCls]=\"'f-sidebar-filter-content'\">\r\n        <div class=\"f-sidebar-filter-list farris-form\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\">\r\n            <div class=\"filter-list-item farris-group-wrap\" *ngFor=\"let item of extendFilterList\">\r\n                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\" [ngTemplateOutletContext]=\"{ item: item }\">\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template farrisSidebarFooter [footerCls]=\"'f-sidebar-filter-footer'\">\r\n        <div class=\"f-sidebar-filter-clear\">\r\n            <button class=\"btn btn-link\" [class.disabled]=\"disabled\" [disabled]=\"disabled\" (click)=\"resetAdvancedSearch()\">{{ 'filterPanel.empty' | locale }}</button>\r\n        </div>\r\n        <div class=\"f-sidebar-filter-btns\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"listCancel()\">{{ 'filterPanel.cancel' | locale }}</button>\r\n            <button type=\"button\" class=\"f-sidebar-filter-btn-confirm btn btn-primary\" [class.disabled]=\"disabled\" [disabled]=\"disabled\" (click)=\"listSearch()\">{{ 'filterPanel.confirm' | locale }}</button>\r\n        </div>\r\n    </ng-template>\r\n</farris-sidebar>\r\n\r\n<ng-template #filterInputTemplate let-item=\"item\">\r\n    <ng-container [ngSwitch]=\"item | controlType\">\r\n        <div class=\"filter-input-item filter-type-input\" *ngSwitchCase=\"'input'\">\r\n            <app-filter-input [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-search\" *ngSwitchCase=\"'search'\">\r\n            <app-filter-search [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-search>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'date'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-year\" *ngSwitchCase=\"'year'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-month\" *ngSwitchCase=\"'month'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterangetime'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showTime]=\"true\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-monthrange\" *ngSwitchCase=\"'monthrange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-yearrange\" *ngSwitchCase=\"'yearrange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-dropdown\" *ngSwitchCase=\"'dropdown'\">\r\n            <app-filter-dropdown [item]=\"item\" [disabled]=\"disabled\" [enableClear]=\"item?.control?.enableClear\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-dropdown>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-number\" *ngSwitchCase=\"'number'\">\r\n            <app-filter-number [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-single-number\" *ngSwitchCase=\"'singlenumber'\">\r\n            <app-filter-single-number [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-single-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-help\" *ngSwitchCase=\"'help'\">\r\n            <app-filter-help [item]=\"item\" [disabled]=\"disabled\" [hostRef]=\"this\" [instanceId]=\"buildSmartHelpKey(item.fieldCode)\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-help>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-checkboxgroup\" *ngSwitchCase=\"'checkboxgroup'\">\r\n            <app-filter-checkbox [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'radio'\">\r\n            <app-filter-radio [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-radio>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-input-group\" *ngSwitchCase=\"'input-group'\">\r\n            <app-filter-inputgroup [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-inputgroup>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-flexiblenumbe\" *ngSwitchCase=\"'flexiblenumber'\">\r\n            <app-filter-flexiblenumber [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-flexiblenumber>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-flexiblenumbe\" *ngSwitchCase=\"'flexibledate'\">\r\n            <app-filter-flexibledate [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-flexibledate>\r\n        </div>\r\n        <!-- <div class=\"filter-input-item filter-type-boolcheckbox\" *ngSwitchCase=\"'bool-check'\">\r\n            <app-filter-checkbox [item]=\"item\" [disabled]=\"disabled\" [boolcheck]=\"true\"\r\n            (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n            style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div> -->\r\n        <div class=\"filter-input-item filter-type-default\" *ngSwitchDefault>\r\n            <app-filter-input [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        FilterPanelService
                    ]
                }] }
    ];
    /** @nocollapse */
    FilterComponent.ctorParameters = function () { return [
        { type: FilterPanelService },
        { type: FilterService },
        { type: ConvertorService },
        { type: QuerySolutionService },
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: LocaleService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FilterComponent.propDecorators = {
        filterList: [{ type: Input }],
        disabled: [{ type: Input }],
        showReminder: [{ type: Input }],
        floatFilter: [{ type: Input }],
        clearSelectedText: [{ type: Input }],
        enableAutoWidth: [{ type: Input }],
        localStorageKey: [{ type: Input }],
        defaultEmptyValueSearch: [{ type: Input }],
        defaultValue: [{ type: Input }],
        cla: [{ type: HostBinding, args: ['class.f-filter',] }],
        query: [{ type: Output }],
        searchChange: [{ type: Output }],
        resetChange: [{ type: Output }],
        clearFilter: [{ type: Output }],
        expandFilter: [{ type: Output }],
        packupFilter: [{ type: Output }],
        filterResize: [{ type: Output }],
        conditionsChange: [{ type: Output }],
        filterMain: [{ type: ViewChild, args: ['filterMain',] }],
        filterTool: [{ type: ViewChild, args: ['filterTool',] }],
        filterWrapper: [{ type: ViewChild, args: ['filterWrapper',] }],
        farrissidebar: [{ type: ViewChild, args: ['farrissidebar',] }],
        listWrapper: [{ type: ViewChild, args: ['listWrapper',] }],
        filterListWrapper: [{ type: ViewChild, args: ['filterListWrapper',] }],
        floatPanel: [{ type: ViewChild, args: ['floatPanel',] }]
    };
    return FilterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SolutionService = /** @class */ (function () {
    function SolutionService() {
    }
    /**
     * @return {?}
     */
    SolutionService.prototype.getGuid = /**
     * @return {?}
     */
    function () {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    };
    /**
     * @private
     * @return {?}
     */
    SolutionService.prototype.s4 = /**
     * @private
     * @return {?}
     */
    function () {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    /**
    * 根据字段获取Lable控件的Title
    * @param field
    */
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    SolutionService.prototype.getConditionItemTitle = /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    };
    /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param input
     */
    /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param {?} input
     * @return {?}
     */
    SolutionService.prototype.arrayClone = /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    };
    SolutionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SolutionService.ctorParameters = function () { return []; };
    return SolutionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputComponent = /** @class */ (function () {
    function InputComponent(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(InputComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //console.log(this.item);
        if (this.item) {
            this.placeholder = this.item.placeHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // if(!this.extend){
        //     const El = this.element.nativeElement;
        //     const itemWidth = El.clientWidth;
        //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';
        //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';
        // }
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    InputComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputComponent.prototype.InputChanged = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // let keycode = window.event ? e.keyCode : e.which;
        // if(keycode == 13){//回车键
        //     this.searchHandle.emit(this.item.value.value);
        // }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(this.item.value.value);
    };
    InputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-input',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input class=\"form-control\" \r\n    type=\"text\" \r\n    [disabled]=\"disabled\"\r\n    [(ngModel)]=\"item.value.value\" \r\n    [placeholder]=\"placeholder\"\r\n    (keyup.enter)=\"InputChanged($event)\"\r\n    (blur)=\"InputChanged($event)\"\r\n    >\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: ElementRef }
    ]; };
    InputComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return InputComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { NumberRangeValue } from '../../entity/conditionvalue/numberrangevaue';
var NumberComponent = /** @class */ (function () {
    function NumberComponent(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.canNull = true;
    }
    Object.defineProperty(NumberComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            this.precision = nr.control.precision;
            this.bigNumber = nr.control.bigNumber;
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
            this.constructMultiFieldNumberRange((/** @type {?} */ (nr.value)));
            if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {
                this.extend = this._item.control.isExtend;
                if (!this.extend) {
                    this.showlabel = this._item.control.showLabel;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item) {
            this.beginPlaceHolder = this.item.beginPlaceHolder || '';
            this.endPlaceHolder = this.item.endPlaceHolder || '';
        }
    };
    /**
     * @return {?}
     */
    NumberComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} field
     * @return {?}
     */
    NumberComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberComponent.prototype.constructMultiFieldNumberRange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NumberComponent.prototype.numberChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            /** @type {?} */
            var dataArray = event.split("~");
            this._item.value.startValue = dataArray[0] ? dataArray[0] : null;
            this._item.value.endValue = dataArray[1] ? dataArray[1] : null;
        }
        else {
            this._item.value.startValue = null;
            this._item.value.endValue = null;
        }
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NumberComponent.prototype.beginValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.beginValue = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NumberComponent.prototype.endValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.endValue = $event;
    };
    NumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-number',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap d-flex\">\r\n    <farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [disabled]=\"disabled\" [beginValue]=\"beginValue\" \r\n    [endValue]=\"endValue\" (beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" \r\n    (valueChange)=\"numberChange($event)\" [beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" \r\n    [precision]=\"precision\" [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"max\"></farris-number-range>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    NumberComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: ElementRef }
    ]; };
    NumberComponent.propDecorators = {
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
        item: [{ type: Input }]
    };
    return NumberComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DropDownComponent = /** @class */ (function () {
    function DropDownComponent(solutionService) {
        this.solutionService = solutionService;
        this.enableClear = true;
        this.searchHandle = new EventEmitter();
        this.dropDownListDataSource = new Array();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(DropDownComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DropDownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.getDataSource();
        // const initialValue = this.item.value as DropDownListValue;
        // initialValue.value && (this.selectedItemId = initialValue.value.getEnumValue());
        if (this.item) {
            this.placeholder = this.item.placeHolder;
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        this.getDataSource();
        /** @type {?} */
        var initialValue = (/** @type {?} */ (this.item.value));
        initialValue.value && (this.selectedItemId = initialValue.value);
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        // this.testId = this.solutionService.getGuid();
    };
    /**
     * @return {?}
     */
    DropDownComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
        //console.log(this.dropDownListDataSource);
    };
    /**
     * @return {?}
     */
    DropDownComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.item && this.item.value
            && this.item.control && this.item.control.getControlType() == ControlType.DropDown) {
            /** @type {?} */
            var dropDownList = ((/** @type {?} */ (this.item.control)));
            if (dropDownList.valueType == EnumType.BoolType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.dropDownListDataSource.push(Object.assign(new EnumBoolValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.IntType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.dropDownListDataSource.push(Object.assign(new EnumIntegerValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.StringType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.dropDownListDataSource.push(Object.assign(new EnumStringValue(), element));
                    }));
                }
            }
        }
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    DropDownComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropDownComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            ((/** @type {?} */ (this.item.value))).value = event.data.value;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropDownComponent.prototype.onClear = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        ((/** @type {?} */ (this.item.value))).value = '';
        this.searchHandle.emit();
    };
    DropDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-dropdown',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-combo-list\r\n        [idField]=\"'value'\"\r\n        [textField]=\"'name'\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [(ngModel)]=\"selectedItemId\"\r\n        [readonly]=\"disabled\"\r\n        [editable]=\"false\"\r\n        (selectChange)=\"onSearch($event)\"\r\n        (clear)=\"onClear($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [enableClear]=\"enableClear\"\r\n    ></farris-combo-list>\r\n\r\n</div>\r\n\r\n<!-- (valueChange)=\"onSearch($event)\" -->"
                }] }
    ];
    /** @nocollapse */
    DropDownComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    DropDownComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        enableClear: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return DropDownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SearchComponent = /** @class */ (function () {
    function SearchComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    Object.defineProperty(SearchComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item) {
            this.placeholder = this.item.placeHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    SearchComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchComponent.prototype.onSearch = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit($event);
    };
    SearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-search',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" \r\n    [(ngModel)]=\"item.value.value\" (clear)=\"onSearch($event)\" (blurHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SearchComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    SearchComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return SearchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * checboxgroup类型
 */
var  /**
 * checboxgroup类型
 */
CheckboxValue = /** @class */ (function () {
    function CheckboxValue() {
    }
    /**
     * @return {?}
     */
    CheckboxValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    CheckboxValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return CheckboxValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var filterCheckboxComponent = /** @class */ (function () {
    function filterCheckboxComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.boolcheck = false;
        this.indeterminate = true;
        this.boolCheckState = 'indeterminate';
        this.selectCheck = [];
        this.cla = true;
        this.checkboxDataSource = new Array();
    }
    Object.defineProperty(filterCheckboxComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterCheckboxComponent.prototype, "isCheckExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterCheckboxComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //this.checkValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            this.boolcheck = this.item.control.boolcheck;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.checkValue = this.item.value.getOriginalValue();
        if (this.boolcheck) {
            if (this.checkValue.length) {
                this.boolchecked = this.checkValue[0];
                if (this.boolchecked)
                    this.boolCheckState = 'checked';
                else
                    this.boolCheckState = 'unchecked';
            }
            else
                this.boolCheckState = 'indeterminate';
        }
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.CheckboxGroup) {
            /** @type {?} */
            var checkboxList = ((/** @type {?} */ (this.item.control)));
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.checkboxDataSource.push(Object.assign(new CheckboxValue(), element));
                }));
            }
        }
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
        //     this.extend = this.item.control.isExtend;
        // }
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    filterCheckboxComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    filterCheckboxComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            var checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.item.value.value = checkboxValue;
        }
        else {
            this.item.value.value = new CheckboxGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.handleClick = /**
     * @return {?}
     */
    function () {
        if (this.boolCheckState == 'indeterminate') {
            this.boolCheckState = 'checked';
            this.boolchecked = true;
            this.item.value.value = [true];
        }
        else if (this.boolCheckState == 'checked') {
            this.boolCheckState = 'unchecked';
            this.boolchecked = false;
            this.item.value.value = [false];
        }
        else if (this.boolCheckState == 'unchecked') {
            this.boolCheckState = 'indeterminate';
            this.boolchecked = null;
            this.item.value.value = [];
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    filterCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-checkbox',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel && !boolcheck\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\" *ngIf=\"!boolcheck\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <ng-container *ngIf=\"!boolcheck; else elseTemplate\">\r\n        <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\" [data]=\"checkboxDataSource\"\r\n            [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n        </farris-checkboxgroup>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"custom-control custom-checkbox custom-control-inline filter-bool-checkbox\">\r\n            <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"boolchecked\" [indeterminate]=\"boolCheckState == 'indeterminate'\">\r\n            <label class=\"custom-control-label\" (click)=\"handleClick()\">{{item.fieldName}}</label>\r\n        </div>\r\n    </ng-template>\r\n</div>"
                    // encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    filterCheckboxComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    filterCheckboxComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
        cla: [{ type: HostBinding, args: ['class.filter-item-checkboxgroup',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return filterCheckboxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateRangeComponent = /** @class */ (function () {
    function DateRangeComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        //TODO: need 2 placeholder text for date range
        // rangeDate = {
        //     begin:null,
        //     end:null
        // };
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(DateRangeComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateRangeComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DateRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initDate();
        if (this.item) {
            this.beginPlaceHolder = this.item.beginPlaceHolder || '';
            this.endPlaceHolder = this.item.endPlaceHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
            // const beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
            // if(beginplac == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.beginPlaceHolder = this.item.control.beginPlaceHolder;
            //     }
            // }
            // else{
            //     this.beginPlaceHolder = this.item.beginPlaceHolder;
            // }
            // const endplac = Object.prototype.toString.call(this.item.endPlaceHolder);
            // if(endplac == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.endPlaceHolder = this.item.control.endPlaceHolder;
            //     }
            // }
            // else{
            //     this.endPlaceHolder = this.item.endPlaceHolder;
            // }
        }
    };
    /**
     * @return {?}
     */
    DateRangeComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.initDate();
    };
    /**
     * @return {?}
     */
    DateRangeComponent.prototype.initDate = /**
     * @return {?}
     */
    function () {
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('format') && this.item.control.format){
        //     this.dateFormat = this.item.control.format;
        //     if(this.showTime){
        //         if(this.dateFormat.length > 0 && this.dateFormat.indexOf('HH:mm') == -1){
        //             this.dateFormat = this.dateFormat + ' HH:mm:ss';
        //         }
        //     }
        // }
        // else{
        //     this.dateFormat = this.showTime? 'yyyy-MM-dd HH:mm:ss':'yyyy-MM-dd';
        // }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('format')) {
            /** @type {?} */
            var itemDateFormat = this.item.control.format;
            if (this.showTime) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            var format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        /** @type {?} */
        var rangeDateValue = this.item && this.item.value;
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = rangeDateValue.startTime + "~" + rangeDateValue.endTime;
        }
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    DateRangeComponent.prototype.getDate = /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        // let arr1:Array<any> = dateString.split(" "); 
        // let sdate = arr1[0].split('-'); 
        // let date = new Date(sdate[0], sdate[1]-1, sdate[2]);
        /** @type {?} */
        var date = new Date(dateString);
        return date;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DateRangeComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.returnFormatted) {
            ((/** @type {?} */ (this.item.value))).startTime = event.returnFormatted.split('~')[0];
            ((/** @type {?} */ (this.item.value))).endTime = event.returnFormatted.split('~')[1];
        }
        else {
            // this.item.value = new DateRangeValue();
            this.item.value.startTime = '';
            this.item.value.endTime = '';
        }
        this.item.valueText = event.formatted;
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(event);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DateRangeComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    DateRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-daterange',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <!-- <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker> -->\r\n\r\n    <ng-container *ngIf=\"showTime;else defaultdate\">\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker>\r\n    </ng-container>\r\n    <ng-template #defaultdate>\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss': (showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd'))\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showType]=\"showType\"></farris-datepicker>\r\n    </ng-template>\r\n\r\n    <!-- <farris-datepicker [ngModel]=\"rangeDate\" [dateRange]=\"true\" [returnFormat]=\"'yyyy-MM-dd'\" [dateFormat]=\"item.control.format\" (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>\r\n<!-- [(ngModel)]=\"rangeDate\" -->"
                }] }
    ];
    /** @nocollapse */
    DateRangeComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    DateRangeComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        showTime: [{ type: Input }],
        showType: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return DateRangeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HelpComponent = /** @class */ (function () {
    function HelpComponent(solutionService) {
        var _this = this;
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.onSearch = (/**
         * @return {?}
         */
        function () {
            if (_this.disabled) {
                return;
            }
            _this.searchHandle.emit();
            return of(true);
        });
    }
    Object.defineProperty(HelpComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HelpComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HelpComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item) {
            this.placeholder = this.item.placeHolder;
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        this.getHelpBindingInfo();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    HelpComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getHelpBindingInfo();
    };
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    HelpComponent.prototype.selectedDataHandler = /**
     * @param {?} selectedItem
     * @return {?}
     */
    function (selectedItem) {
        // console.log(selectedItem);
        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
        //    let mapFieldsKeys=Object.keys(mapFields());
        //    (this.item.value as HelpValue).value=new Object();
        //    mapFieldsKeys.forEach(mapFeildKey => {
        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
        //    });
        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
        //    let textField=(this.item.control as HelpContol).textField;
        //    this.textValue=(this.item.value as HelpValue).value[textField];
        // console.log(selectedItem);
        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
        //    let mapFieldsKeys=Object.keys(mapFields());
        //    (this.item.value as HelpValue).value=new Object();
        //    mapFieldsKeys.forEach(mapFeildKey => {
        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
        //    });
        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
        //    let textField=(this.item.control as HelpContol).textField;
        //    this.textValue=(this.item.value as HelpValue).value[textField];
        /** @type {?} */
        var helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; //单选返回对象，多选返回数组
        helpValue.valueField = this.valueField;
        helpValue.textValue = helpValue.getTextValue(this.textField);
        this.textValue = helpValue.textValue;
        // this.conditionChange.emit();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    HelpComponent.prototype.getHelpBindingInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Help) {
            /** @type {?} */
            var helpList_1 = ((/** @type {?} */ (this.item.control)));
            this.uri = helpList_1.uri;
            this.textField = helpList_1.textField;
            this.valueField = helpList_1.valueField;
            this.idField = helpList_1.idField;
            this.mapFields = helpList_1.mapFields;
            this.context = helpList_1.context;
            this.preEventCmd = helpList_1.preEventCmd;
            this.postEventCmd = helpList_1.postEventCmd;
            if (helpList_1.preEventCmd) {
                this.preEventCmd = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    e['hostRef'] = _this.hostRef;
                    return helpList_1.preEventCmd(e);
                });
            }
            if (helpList_1.postEventCmd) {
                this.postEventCmd = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var selectItem = deepCopy(e);
                    selectItem['hostRef'] = _this.hostRef;
                    return helpList_1.postEventCmd(selectItem);
                });
            }
            this.singleSelect = helpList_1.singleSelect;
            this.enableFullTree = helpList_1.enableFullTree;
            this.loadTreeDataType = helpList_1.loadTreeDataType;
            this.expandLevel = helpList_1.expandLevel;
            this.enableCascade = helpList_1.enableCascade;
            this.helpId = helpList_1.helpId;
            /** @type {?} */
            var helpValue = ((/** @type {?} */ (this.item.value)));
            // if (helpValue && helpValue.value) {
            //     // this.textValue = (this.item.value as HelpValue).value[this.textField];
            //     this.textValue = HelpValue.getPropValue(helpValue.value, this.textField.split('.'));
            // }
            this.displayType = helpList_1.displayType;
            if (helpValue.textValue == 'help-text-value-null') { // 旧数据兼容
                this.textValue = helpValue.getTextValue(this.textField);
            }
            else {
                this.textValue = helpValue.textValue;
            }
        }
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    HelpComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    // clearData(event){
    //     (this.item.value as HelpValue).value = null;
    //     (this.item.value as HelpValue).valueField = null;
    //     this.searchHandle.emit();
    // }
    // clearData(event){
    //     (this.item.value as HelpValue).value = null;
    //     (this.item.value as HelpValue).valueField = null;
    //     this.searchHandle.emit();
    // }
    /**
     * @param {?} data
     * @return {?}
     */
    HelpComponent.prototype.clearData = 
    // clearData(event){
    //     (this.item.value as HelpValue).value = null;
    //     (this.item.value as HelpValue).valueField = null;
    //     this.searchHandle.emit();
    // }
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.searchHandle.emit();
    };
    HelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-help',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-lookup-grid\r\n        id=\"{{instanceId}}\"\r\n        [uri]=\"uri\" \r\n        [idField]=\"idField\" \r\n        [textField]=\"textField\" \r\n        [valueField]=\"valueField\" \r\n        [(ngModel)]=\"textValue\"\r\n        [displayType]=\"displayType\"\r\n        [editable]=\"false\"\r\n        [readonly]=\"disabled\"\r\n        (clear)=\"clearData($event)\"\r\n        (selectedData)=\"selectedDataHandler($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [mapFields]=\"mapFields\"\r\n        [dictPicking]=\"preEventCmd\"\r\n        [dictPicked]=\"postEventCmd\"\r\n        [context]=\"context\"\r\n        [enableFullTree]=\"enableFullTree\"\r\n        [loadTreeDataType]=\"loadTreeDataType\"\r\n        [singleSelect]=\"singleSelect\"\r\n        [expandLevel]=\"expandLevel\"\r\n        [enableCascade]=\"enableCascade\"\r\n        [useFavorite]=\"true\"\r\n    >\r\n    </farris-lookup-grid>\r\n\r\n    <!-- [dictPicked]=\"onSearch\" -->\r\n    <!-- (selectedData)=\"selectedDataHandler($event)\" -->\r\n</div>"
                    // providers: [{ provide: ServerSideToken, useClass: LookupHttpBeQueryService }]
                }] }
    ];
    /** @nocollapse */
    HelpComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    HelpComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        hostRef: [{ type: Input }],
        instanceId: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return HelpComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateComponent = /** @class */ (function () {
    function DateComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(DateComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initDate();
        if (this.item) {
            this.placeholder = this.item.placeHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    DateComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.initDate();
    };
    /**
     * @return {?}
     */
    DateComponent.prototype.initDate = /**
     * @return {?}
     */
    function () {
        // if(this.item && this.item.value.value){
        //     //this.time = this.getDate((this.item.value as DateValue).value);
        //     this.time = (this.item.value as DateValue).value;
        // }
        if (this.item && this.item.value
            && ((/** @type {?} */ (this.item.value))).value) {
            this.date = this.item.value.getOriginalValue();
        }
        else {
            this.date = undefined;
        }
        /** @type {?} */
        var format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
        this.dateFormat = this.item.control.format ? this.item.control.format : format;
    };
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    DateComponent.prototype.onDateChange = 
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log(event);
        if (event.returnFormatted) {
            ((/** @type {?} */ (this.item.value))).value = event.returnFormatted;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
            // this.item.value = new DateValue();
        }
        this.item.valueText = event.formatted;
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(event);
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    DateComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    DateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-date',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <!-- <farris-datepicker [(ngModel)]=\"date\" [returnFormat]=\"'yyyy-MM-dd'\" [editable]=\"false\" [dateFormat]=\"item.control.format\" [readonly]=\"disabled\" (valueChange)=\"onDateChange($event)\"\r\n    [placeholder]=\"placeholder\"></farris-datepicker> -->\r\n\r\n    <farris-datepicker [(ngModel)]=\"date\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n    [editable]=\"false\" [dateFormat]=\"dateFormat\" [readonly]=\"disabled\" (valueChange)=\"onDateChange($event)\" [showType]=\"showType\" [placeholder]=\"placeholder\"></farris-datepicker>\r\n    <!-- <farris-datepicker [ngModel]=\"date\"  (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    DateComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    DateComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        showType: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return DateComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ControlTypeXPipe = /** @class */ (function () {
    function ControlTypeXPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ControlTypeXPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var type;
        switch (value.control.getControlType()) {
            case ControlType.Text:
                type = 'input';
                break;
            case ControlType.Search:
                type = 'search';
                break;
            case ControlType.Date:
                type = 'date';
                break;
            case ControlType.Year:
                type = 'year';
                break;
            case ControlType.Month:
                type = 'month';
                break;
            case ControlType.MonthRange:
                type = 'monthrange';
                break;
            case ControlType.YearRange:
                type = 'yearrange';
                break;
            case ControlType.DateRange:
                type = 'daterange';
                break;
            case ControlType.DateRangeTime:
                type = 'daterangetime';
                break;
            case ControlType.DropDown:
                type = 'dropdown';
                break;
            case ControlType.NumberRange:
                type = 'number';
                break;
            case ControlType.Help:
                type = 'help';
                break;
            case ControlType.CheckboxGroup:
                type = 'checkboxgroup';
                break;
            case ControlType.Radio:
                type = 'radio';
                break;
            case ControlType.InputGroup:
                type = 'input-group';
                break;
            case ControlType.Number:
                type = 'singlenumber';
                break;
            case ControlType.FlexibleNumber:
                type = 'flexiblenumber';
                break;
            case ControlType.FlexibleDate:
                type = 'flexibledate';
                break;
            case ControlType.BoolCheck:
                type = 'bool-check';
                break;
            default:
                type = 'input';
                break;
        }
        return type;
    };
    ControlTypeXPipe.decorators = [
        { type: Pipe, args: [{ name: 'controlType' },] }
    ];
    return ControlTypeXPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * checboxgroup类型
 */
var  /**
 * checboxgroup类型
 */
RadioValue = /** @class */ (function () {
    function RadioValue() {
    }
    /**
     * @return {?}
     */
    RadioValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    RadioValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return RadioValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var filterRadioComponent = /** @class */ (function () {
    function filterRadioComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.cla = true;
        this.radioDataSource = new Array();
    }
    Object.defineProperty(filterRadioComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterRadioComponent.prototype, "isCheckExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterRadioComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    filterRadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
        this.radioValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    filterRadioComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    filterRadioComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Radio) {
            /** @type {?} */
            var radioboxList = ((/** @type {?} */ (this.item.control)));
            this.radioDataSource = Array();
            if (radioboxList.enumValues && radioboxList.enumValues.length > 0) {
                radioboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.radioDataSource.push(Object.assign(new RadioValue(), element));
                }));
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    filterRadioComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    filterRadioComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            this.item.value.value = event;
        }
        else {
            this.item.value.value = new RadioGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    filterRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-radio',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-radiogroup \r\n    [(ngModel)]=\"item.value.value\" \r\n    [horizontal]=\"true\" \r\n    [data]=\"radioDataSource\"\r\n    (changeValue)=\"onSearch($event)\">\r\n    </farris-radiogroup>\r\n</div>"
                    // encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    filterRadioComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    filterRadioComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
        cla: [{ type: HostBinding, args: ['class.filter-item-checkboxgroup',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return filterRadioComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SimpleInputGroupComponent = /** @class */ (function () {
    function SimpleInputGroupComponent(solutionService) {
        this.solutionService = solutionService;
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.searchHandle = new EventEmitter();
        this.isTextFromDialog = false;
    }
    Object.defineProperty(SimpleInputGroupComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this.constructTextItem(this._item);
        },
        set: /**
         * @param {?} textItem
         * @return {?}
         */
        function (textItem) {
            this._item = textItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleInputGroupComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleInputGroupComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} textItem
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.constructTextItem = /**
     * @param {?} textItem
     * @return {?}
     */
    function (textItem) {
        /** @type {?} */
        var textValueObj = (/** @type {?} */ (textItem.value));
        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
        textItem.value = textValueObj;
        return textItem;
    };
    /**
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.testId = this.solutionService.getGuid();
        this.getInputGroupBindingInfo();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.getInputGroupBindingInfo = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputGroupControl = ((/** @type {?} */ (this.item.control)));
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            /*
                example of dialogOptions = {
                   modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                   mapFields: {hDepartment: "Name"}
                   title: "测试标题栏"
                   width: 800
                   height: 600
                }
             */
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /*
        dialogOptions = {
            modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
            mapFields: {hDepartment: "Name"}
            title: "测试标题栏"
            width: 800
            height: 600
            showButtons: true
            buttons: [
                { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
            ]
        }
    */
    /*
            dialogOptions = {
                modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                mapFields: {hDepartment: "Name"}
                title: "测试标题栏"
                width: 800
                height: 600
                showButtons: true
                buttons: [
                    { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                    { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                ]
            }
        */
    /**
     * @param {?} event
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.onClick = /*
            dialogOptions = {
                modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                mapFields: {hDepartment: "Name"}
                title: "测试标题栏"
                width: 800
                height: 600
                showButtons: true
                buttons: [
                    { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                    { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                ]
            }
        */
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            var options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            function (selectedItem) {
                // let modalData = item[0];
                // this.item.value.value = modalData[this.targetField];
                /** @type {?} */
                var selectedItems = selectedItem.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                if (selectedItems && _this.textField) {
                    _this.item.value.value = selectedItems;
                    _this.item.value.textValue = _this.item.value.getTextValue(_this.textField);
                    _this.item.value.textField = _this.textField;
                    _this.item.value.isInputText = false;
                    _this.isTextFromDialog = true;
                    _this.textFormDialog = _this.item.value.textValue;
                }
            });
            this.item.control.click({ event: event, options: options });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.onBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disabled) {
            return;
        }
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.searchHandle.emit(event);
    };
    /**
     * @return {?}
     */
    SimpleInputGroupComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.searchHandle.emit();
    };
    SimpleInputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-inputgroup',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group \r\n        [(ngModel)]=\"item.value.textValue\" \r\n        name=\"{{item.fieldName}}\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"disabled\"\r\n        [groupText]=\"item.control.groupText\"\r\n        [editable]=\"item.control.editable\"\r\n        [placeholder]=\"item.placeHolder\"\r\n        (clickHandle)=\"onClick($event)\"\r\n        (blurHandle)=\"onBlur($event)\"\r\n        (enterHandle)=\"onBlur($event)\"\r\n        (clear)=\"onClear()\"\r\n        >\r\n    </input-group>\r\n</div>\r\n"
                }] }
    ];
    /** @nocollapse */
    SimpleInputGroupComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    SimpleInputGroupComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }]
    };
    return SimpleInputGroupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SingleNumberComponent = /** @class */ (function () {
    function SingleNumberComponent(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.canNull = true;
    }
    Object.defineProperty(SingleNumberComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleNumberComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleNumberComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            this.precision = nr.control.precision;
            this.bigNumber = nr.control.bigNumber;
            if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {
                this.extend = this._item.control.isExtend;
                if (!this.extend) {
                    this.showlabel = this._item.control.showLabel;
                }
            }
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SingleNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item) {
            this.placeholder = this.item.placeHolder;
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SingleNumberComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SingleNumberComponent.prototype.numberChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.item.value.value = event;
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    SingleNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-single-number',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap d-flex\">\r\n    <!-- <farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [disabled]=\"disabled\" [beginValue]=\"beginValue\" [endValue]=\"endValue\" (beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" (valueChange)=\"numberChange($event)\" [beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [precision]=\"precision\" [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"max\"></farris-number-range> -->\r\n\r\n    <farris-number-spinner\r\n        class=\"f-utils-fill-flex-row\"\r\n        [(ngModel)]=\"item.value.value\"\r\n        [canNull]=\"canNull\"\r\n        [precision]=\"precision\"\r\n        [bigNumber]=\"bigNumber\"\r\n        [min]=\"min\" \r\n        [max]=\"max\"\r\n        [placeholder]=\"placeholder\"\r\n        (valueChange)=\"numberChange($event)\"\r\n    ></farris-number-spinner>\r\n\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SingleNumberComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: ElementRef }
    ]; };
    SingleNumberComponent.propDecorators = {
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
        item: [{ type: Input }]
    };
    return SingleNumberComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FlexibleNumberComponent = /** @class */ (function () {
    function FlexibleNumberComponent(solutionService, element, localeService) {
        this.solutionService = solutionService;
        this.element = element;
        this.localeService = localeService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.canNull = true;
    }
    Object.defineProperty(FlexibleNumberComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexibleNumberComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexibleNumberComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            this.precision = nr.control.precision;
            this.bigNumber = nr.control.bigNumber;
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
            if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {
                this.extend = this._item.control.isExtend;
                if (!this.extend) {
                    this.showlabel = this._item.control.showLabel;
                }
            }
            this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.beginPlaceHolder');
            this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.endPlaceHolder');
            this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
            this.single = this._item.control.single;
            this._item.value.single = this.single;
            this.constructMultiFieldNumberRange((/** @type {?} */ (nr.value)));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FlexibleNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FlexibleNumberComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} field
     * @return {?}
     */
    FlexibleNumberComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FlexibleNumberComponent.prototype.constructMultiFieldNumberRange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.beginValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FlexibleNumberComponent.prototype.numberChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            this._item.value.value = event;
        }
        else {
            this._item.value.value = null;
        }
        if (Object.keys(this._item.value).length === 0) {
            this._item.valueText = '';
        }
        else {
            this._item.valueText = '' + this._item.value.value;
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FlexibleNumberComponent.prototype.beginValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.startValue = event;
        this.setValueText();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FlexibleNumberComponent.prototype.endValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.endValue = event;
        this.setValueText();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    FlexibleNumberComponent.prototype.setValueText = /**
     * @return {?}
     */
    function () {
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
    };
    FlexibleNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-flexiblenumber',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap d-flex\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <farris-number-spinner class=\"f-utils-fill-flex-row\" [(ngModel)]=\"value\" [canNull]=\"canNull\" [disabled]=\"disabled\"\r\n            [precision]=\"precision\" [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"max\" [placeholder]=\"placeholder\"\r\n            (valueChange)=\"numberChange($event)\" #numberText></farris-number-spinner>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex align-items-center\">\r\n            <farris-number-spinner [(ngModel)]=\"beginValue\" [canNull]=\"canNull\" [precision]=\"precision\" [disabled]=\"disabled\"\r\n                [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"endValue?endValue:max\" [placeholder]=\"beginPlaceHolder\"\r\n                (valueChange)=\"beginValueChange($event)\" #beginNumberText></farris-number-spinner>\r\n            <span class=\"f-icon f-icon-orientation-arrow f-filter-panel-flexible-icon\"></span>\r\n            <farris-number-spinner [(ngModel)]=\"endValue\" [canNull]=\"canNull\" [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\" [min]=\"beginValue?beginValue:min\" [max]=\"max\" [placeholder]=\"endPlaceHolder\"\r\n                (valueChange)=\"endValueChange($event)\"></farris-number-spinner>\r\n        </div>\r\n    </ng-template>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    FlexibleNumberComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: ElementRef },
        { type: LocaleService }
    ]; };
    FlexibleNumberComponent.propDecorators = {
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
        item: [{ type: Input }]
    };
    return FlexibleNumberComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FlexibleDateComponent = /** @class */ (function () {
    function FlexibleDateComponent(localeService, solutionService) {
        this.localeService = localeService;
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(FlexibleDateComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexibleDateComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexibleDateComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            if (this._item) {
                if (!this._item.hasOwnProperty('value')) {
                    this._item.value = {
                        startValue: null,
                        endValue: null,
                        value: null,
                        single: true
                    };
                }
                if (!this._item.control.hasOwnProperty('single')) {
                    this._item.control.single = true;
                }
                this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.dateBeginPlaceHolder');
                this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.dateEndPlaceHolder');
                this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
                this.single = this._item.control.single;
                this._item.value.single = this.single;
                this.showTime = (this._item.control.hasOwnProperty('showTime') && this._item.control.showTime) ? this._item.control.showTime : '';
                this.showType = (this._item.control.hasOwnProperty('showType') && this._item.control.showType) ? this._item.control.showType : '';
                /** @type {?} */
                var itemDateFormat = this._item.control.format;
                if (this.showTime && itemDateFormat) {
                    if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                        itemDateFormat = itemDateFormat + ' HH:mm:ss';
                    }
                }
                /** @type {?} */
                var format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
                this.dateFormat = itemDateFormat ? itemDateFormat : format;
            }
            this.constructMultiFieldDateRange(nr.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FlexibleDateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} field
     * @return {?}
     */
    FlexibleDateComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FlexibleDateComponent.prototype.constructMultiFieldDateRange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.startValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FlexibleDateComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.value = event.returnFormatted ? event.returnFormatted : null;
        this._item.valueText = event.formatted;
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FlexibleDateComponent.prototype.beginValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.startValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.startValueText = event.formatted;
        this.setValueText();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FlexibleDateComponent.prototype.endValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.endValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.endValueText = event.formatted;
        this.setValueText();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    FlexibleDateComponent.prototype.setValueText = /**
     * @return {?}
     */
    function () {
        if (Object.keys(this._item.value).length === 0 || (!this._item.value.startValue && !this._item.value.endValue)) {
            this._item.valueText = '';
        }
        else if (!this._item.value.startValueText) {
            this._item.valueText = '~' + this._item.value.endValueText;
        }
        else if (!this._item.value.endValueText) {
            this._item.valueText = this._item.value.startValueText + '~';
        }
        else {
            this._item.valueText = this._item.value.startValueText + '~' + this._item.value.endValueText;
        }
    };
    FlexibleDateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-flexibledate',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime;else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex align-items-center\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow f-filter-panel-flexible-icon\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    FlexibleDateComponent.ctorParameters = function () { return [
        { type: LocaleService },
        { type: SolutionService }
    ]; };
    FlexibleDateComponent.propDecorators = {
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
        item: [{ type: Input }]
    };
    return FlexibleDateComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SimpleFilterModule = /** @class */ (function () {
    function SimpleFilterModule() {
    }
    SimpleFilterModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FilterComponent,
                        DateComponent,
                        NumberComponent,
                        HelpComponent,
                        InputComponent,
                        DropDownComponent,
                        SearchComponent,
                        filterCheckboxComponent,
                        DateRangeComponent,
                        filterRadioComponent,
                        SimpleInputGroupComponent,
                        SingleNumberComponent,
                        FlexibleNumberComponent,
                        FlexibleDateComponent,
                        ControlTypeXPipe
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        FilterPanelModule,
                        FarrisSidebarModule,
                        FarrisTooltipModule,
                        InputGroupModule,
                        FarrisDatePickerModule,
                        DatalistModule,
                        ComboListModule,
                        LookupModule,
                        FarrisFormsModule,
                        NumberSpinnerModule,
                        PerfectScrollbarModule,
                        FilterConditionModule,
                        LocaleModule.forRoot(),
                        FarrisCommonModule
                    ],
                    exports: [
                        FilterComponent,
                        DateComponent,
                        NumberComponent,
                        HelpComponent,
                        InputComponent,
                        DropDownComponent,
                        SearchComponent,
                        filterCheckboxComponent,
                        DateRangeComponent,
                        filterRadioComponent,
                        SimpleInputGroupComponent,
                        SingleNumberComponent,
                        FlexibleNumberComponent,
                        FlexibleDateComponent,
                        ControlTypeXPipe
                    ],
                    providers: [
                        FilterService,
                        ConvertorService,
                        SolutionService,
                        QuerySolutionService
                    ],
                },] }
    ];
    return SimpleFilterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConditionValueConvert = /** @class */ (function () {
    function ConditionValueConvert() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ConditionValueConvert.prototype.convertToObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var conditionValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var controlType = conditionValue.getControlType();
        /** @type {?} */
        var jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType == ControlType.DropDown) {
            /** @type {?} */
            var convertor = new DropDownListValueConvert();
            jobj["Content"] = convertor.convertToObject(conditionValue);
        }
        else if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            var convertor = new NumberRangeValueConvertor();
            jobj["Content"] = convertor.convertToObject(conditionValue);
        }
        else {
            jobj["Content"] = conditionValue;
        }
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    ConditionValueConvert.prototype.initFromObject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var controlType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        var content = jobj["Content"];
        if (controlType == ControlType.Text) {
            return Object.assign(new TextValue(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            var convertor = new NumberRangeValueConvertor();
            return convertor.initFromObject(content);
        }
        else if (controlType == ControlType.DateRange) {
            return Object.assign(new DateRangeValue(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.DropDown) {
            /** @type {?} */
            var convertor = new DropDownListValueConvert();
            return convertor.initFromObject(content);
        }
        else if (controlType == ControlType.Help) {
            return Object.assign(new HelpValue(), (/** @type {?} */ (content)));
        }
    };
    return ConditionValueConvert;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RadioEnumValue = /** @class */ (function () {
    function RadioEnumValue() {
    }
    /**
     * @return {?}
     */
    RadioEnumValue.prototype.getEnumValueName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    RadioEnumValue.prototype.getEnumValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    return RadioEnumValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var DisplayType = {
    LIST: 0,
    TREELIST: 1,
};
DisplayType[DisplayType.LIST] = 'LIST';
DisplayType[DisplayType.TREELIST] = 'TREELIST';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ControlConvert = /** @class */ (function () {
    function ControlConvert() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ControlConvert.prototype.convertJObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var control = (/** @type {?} */ (obj));
        /** @type {?} */
        var controlType = control.getControlType();
        /** @type {?} */
        var jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType != ControlType.DropDown) {
            jobj["Content"] = control;
        }
        else {
            /** @type {?} */
            var convertor = new DropDownListControlConvert();
            jobj["Content"] = convertor.convertToObject((/** @type {?} */ (control)));
        }
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    ControlConvert.prototype.initFromJobject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var controlType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        var content = jobj["Content"];
        if (controlType == ControlType.Text) {
            return Object.assign(new TextControl(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.Search) {
            return Object.assign(new SearchControl(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.DateRange) {
            return Object.assign(new DateRangeControl(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.NumberRange) {
            return Object.assign(new NumberRangeControl(), (/** @type {?} */ (content)));
        }
        // else if(controlType==ControlType.DateTime){
        //     return Object.assign(new DateControl(),content as DateControl);
        // }
        else if (controlType == ControlType.DropDown) {
            /** @type {?} */
            var convert = new DropDownListControlConvert();
            return convert.initFromObject(content);
        }
        else if (controlType == ControlType.Help) {
            return Object.assign(new HelpContol(), (/** @type {?} */ (content)));
        }
    };
    return ControlConvert;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var listFilterItem = /** @class */ (function () {
    function listFilterItem(_id, _groupName) {
        this.id = _id;
        this.name = _groupName;
        this.width = 0;
        this.isExtend = false;
    }
    // 设置宽度
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    listFilterItem.prototype.setWidth = 
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.width = parseInt(value, 10);
    };
    // 获取宽度
    // 获取宽度
    /**
     * @return {?}
     */
    listFilterItem.prototype.getWidth = 
    // 获取宽度
    /**
     * @return {?}
     */
    function () {
        return this.width;
    };
    return listFilterItem;
}());
var listFilterGroup = /** @class */ (function () {
    function listFilterGroup() {
        this.responsedIndex = 0;
        this.listItems = [];
    }
    return listFilterGroup;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FilterService, FilterComponent, SimpleFilterModule, filterCheckboxComponent, DateComponent, DateRangeComponent, DropDownComponent, HelpComponent, InputComponent, NumberComponent, SearchComponent, filterRadioComponent, SimpleInputGroupComponent, SingleNumberComponent, FlexibleNumberComponent, FlexibleDateComponent, DateRangeValue, DropDownListValue, DropDownListValueConvert, ConditionValueConvert, NumberRangeValue, NumberRangeValueConvertor, HelpValue, TextValue, CheckboxGroupValue, DateValue, SearchValue, DateRangeTimeValue, RadioGroupValue, MonthValue, MonthRangeValue, YearValue, YearRangeValue, InputGroupValue, NumberValue, FlexibleNumberValue, FlexibleDateValue, CheckboxEnumValue, CheckboxGroupControl, CheckboxValue, DateRangeControl, DateControl, DateRangeTimeControl, RadioValue, RadioControl, RadioEnumValue, YearControl, MonthControl, YearRangeControl, MonthRangeControl, NumberControl, FlexibleDateControl, DropDownControl, DropDownListControlConvert, EnumBoolValue, EnumType, EnumValueConvert, EnumIntegerValue, EnumStringValue, HelpContol, DisplayType, NumberRangeControl, SearchControl, TextControl, InputGroupControl, DialogConfig, DialogButtonConfig, FlexibleNumberControl, ControlConvert, FieldConfig, CompareType, ControlType, listFilterItem, listFilterGroup, QueryCondition, RelationType, ValueType, SolutionService, ConvertorService, ControlTypeXPipe, FILTER_HANDLER_TOKEN, deepCopy };

//# sourceMappingURL=farris-ui-filter.js.map