import { OnInit, ElementRef, AfterViewInit, ChangeDetectorRef, Renderer2, NgZone, EventEmitter, Injector, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { FarrisSidebarComponent } from '@farris/ui-sidebar';
import { LocaleService } from '@farris/ui-locale';
import { FilterPanelService } from '@farris/ui-filter-panel';
import { QuerySolutionService } from '@farris/ui-filter-condition';
import { FilterService } from './filter.service';
import { ConvertorService } from './service/convertorservice';
import { QueryCondition } from './entity/querycondition';
import { FieldConfig } from './entity/fieldconfig/fieldconfig';
import { FilterHandler } from './interface/filterHandler';
export declare class FilterComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private filterPanelService;
    private filterService;
    private convertorService;
    private handler;
    private cd;
    private render;
    ngzone: NgZone;
    localeService: LocaleService;
    private injector;
    _filterList: Array<any>;
    filterList: Array<any>;
    disabled: boolean;
    showReminder: boolean;
    /**
     * 是否启用侧边栏収折:
     * true-界面出现高级筛选文字按钮，点击按钮：过滤条件在侧边栏显示
     * false-界面出现筛选漏斗图标按钮，点击按钮：过滤条件在图标下方展示
     */
    floatFilter: boolean;
    private _enableAutoWidth;
    clearSelectedText: string;
    enableAutoWidth: any;
    localStorageKey: string;
    _defaultValue: FieldConfig[];
    defaultEmptyValueSearch: boolean;
    defaultValue: FieldConfig[];
    cla: boolean;
    query: EventEmitter<{}>;
    searchChange: EventEmitter<{}>;
    resetChange: EventEmitter<{}>;
    clearFilter: EventEmitter<{}>;
    expandFilter: EventEmitter<{}>;
    packupFilter: EventEmitter<{}>;
    filterResize: EventEmitter<{}>;
    conditionsChange: EventEmitter<{}>;
    filterMain: ElementRef;
    filterTool: ElementRef;
    filterWrapper: ElementRef;
    farrissidebar: FarrisSidebarComponent;
    listWrapper: ElementRef;
    filterListWrapper: ElementRef;
    floatPanel: ElementRef;
    currentFilterId: any;
    filterExtend: boolean;
    filterEllipsis: boolean;
    filterExtendShow: boolean;
    filterExtendText: string;
    filterExtendIcon: string;
    expandText: string;
    foldText: string;
    filterWrapperEl: any;
    filterToolWidth: number;
    sidebarOpen: boolean;
    floatPanelOpen: boolean;
    showExpandTag: boolean;
    /** 表单是否允许提交 */
    canSubmit: boolean;
    /** 表单是否允许提交,用于高级筛选清空后 */
    advancedCanSubmit: boolean;
    /** 默认展开项是否允许提交 */
    showCanSubmit: boolean;
    /** 是否显示清空已选 */
    filledFilter: boolean;
    /** 默认展开的筛选项 */
    showFilterList: Array<QueryCondition>;
    /** 高级筛选 */
    extendFilterList: Array<QueryCondition>;
    extendFilterListStore: Array<QueryCondition>;
    extendFilterListTemporary: Array<QueryCondition>;
    /** 已填写筛选数据 */
    filledFilterList: Array<QueryCondition>;
    /** 高级筛选中已填写的 */
    filledExtendFilterList: Array<QueryCondition>;
    /** 没有填写的筛选项 */
    /** 高级筛选中必填项 */
    extendRequiredList: Array<QueryCondition>;
    /** 默认筛选中必填项 */
    showRequiredList: Array<QueryCondition>;
    /** 循环表单 */
    listFilterConditions: Array<QueryCondition>;
    /** 默认展开＋高级筛选中已填写的 */
    loopFilterList: Array<QueryCondition>;
    /** 用来存储setvalue前数据 */
    stagListFilterConditions: Array<QueryCondition>;
    /** 显示中表单的必填项 */
    requiredListFilter: Array<QueryCondition>;
    localeIds: {
        'en': string;
        'zh-CHS': string;
    };
    currentLocale: string;
    isControlInline: boolean;
    /**
     * 组件服务接口
     */
    filterHandler: FilterHandler;
    filterPanelContainer: any;
    showReminderItem: QueryCondition;
    reminderLeft: number;
    floatPanelHeight: any;
    floatFilterIconBottom: number;
    private ro;
    private containerWidthRecord;
    private distanceThreshold;
    private idService;
    private overLayService;
    constructor(filterPanelService: FilterPanelService, filterService: FilterService, convertorService: ConvertorService, handler: QuerySolutionService, cd: ChangeDetectorRef, render: Renderer2, ngzone: NgZone, localeService: LocaleService, injector: Injector);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * 绑定监控大小的事件
     */
    private bindRoEvent;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    /**
     * 初始化筛选项
     */
    initFilterList(): void;
    /** 筛选项分类 */
    filterListClassify(): void;
    /**
     * 已填写筛选项点击
     * @param event
     * @param data
     */
    filterClick(event: any, data: any, index: any): void;
    /**
     * 清空筛选项
     */
    filterClear(data: any, index: any, event: any): void;
    /**
     * 展开高级筛选
     */
    advancedFilter(): void;
    listCancel(): void;
    /**
     * 过滤按钮点开的面板
     */
    advancedPanelClose(): void;
    /**
     * 打开面板高级筛选
     */
    floatFilterOpen($evnet: MouseEvent): void;
    /**
     * 列表展示初始化
     */
    listEllipsisInit(): void;
    /**
     * 筛选项展开收起切换
     */
    filterExpand(): void;
    /**
     * 高级筛选表单项搜索变化
     * @param $event
     * @param item
     */
    onSearch($event: any, item: any): void;
    /** 判断是否所有必填项都填写完毕 */
    canSubmitFilter(requirelist: any): boolean;
    /** 高级筛选点击确定提交 */
    listSearch(): void;
    /** 提交表单 */
    submit(type: any, filterlist: any, filterItem?: any): void;
    /** 设置筛选初始值 */
    setFilterValue(fieldConfigs: FieldConfig[]): void;
    /**
     * 清空筛选某一项
     * @param labelCode 字段编号唯一标识
     */
    resetFilterValue(labelCode: string): void;
    setValues(conditions: any, fieldConfigs: FieldConfig[]): void;
    getValue(fieldName: string): any;
    /**
     * 获取控件类型
     * @param selectedFieldCondition
     */
    getControlType(selectedFieldCondition: QueryCondition): string;
    /**
     * 更新上下文中筛选数据
     */
    inSetCurrentFilterConditions(): void;
    /** 清空条件 */
    resetListCondition(listFilterCondition: QueryCondition): void;
    resetSearch(): void;
    /**
     * 高级筛选清空筛选
     */
    resetAdvancedSearch(): void;
    /**
     * valueText 特殊类型处理
     * @param item
     */
    getValueText(item: QueryCondition): void;
    buildSmartHelpKey(value: string): string;
    private conditionChangeHandler;
}
