/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { EnumType } from '../../entity/controltype/dropdownlist/enumtype';
import { EnumIntegerValue } from '../../entity/controltype/dropdownlist/integerenumvalue';
import { EnumStringValue } from '../../entity/controltype/dropdownlist/stringenumvalue';
import { EnumBoolValue } from '../../entity/controltype/dropdownlist/boolenumvalue';
import { SolutionService } from '../../service/solution.service';
export class DropDownComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.enableClear = true;
        this.searchHandle = new EventEmitter();
        this.dropDownListDataSource = new Array();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.getDataSource();
        // const initialValue = this.item.value as DropDownListValue;
        // initialValue.value && (this.selectedItemId = initialValue.value.getEnumValue());
        if (this.item) {
            this.placeholder = this.item.placeHolder;
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        this.getDataSource();
        /** @type {?} */
        const initialValue = (/** @type {?} */ (this.item.value));
        initialValue.value && (this.selectedItemId = initialValue.value);
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        // this.testId = this.solutionService.getGuid();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.getDataSource();
        //console.log(this.dropDownListDataSource);
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.value
            && this.item.control && this.item.control.getControlType() == ControlType.DropDown) {
            /** @type {?} */
            let dropDownList = ((/** @type {?} */ (this.item.control)));
            if (dropDownList.valueType == EnumType.BoolType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumBoolValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.IntType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumIntegerValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.StringType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumStringValue(), element));
                    }));
                }
            }
        }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            ((/** @type {?} */ (this.item.value))).value = event.data.value;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        ((/** @type {?} */ (this.item.value))).value = '';
        this.searchHandle.emit();
    }
}
DropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-dropdown',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-combo-list\r\n        [idField]=\"'value'\"\r\n        [textField]=\"'name'\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [(ngModel)]=\"selectedItemId\"\r\n        [readonly]=\"disabled\"\r\n        [editable]=\"false\"\r\n        (selectChange)=\"onSearch($event)\"\r\n        (clear)=\"onClear($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [enableClear]=\"enableClear\"\r\n    ></farris-combo-list>\r\n\r\n</div>\r\n\r\n<!-- (valueChange)=\"onSearch($event)\" -->"
            }] }
];
/** @nocollapse */
DropDownComponent.ctorParameters = () => [
    { type: SolutionService }
];
DropDownComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    enableClear: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    DropDownComponent.prototype.item;
    /** @type {?} */
    DropDownComponent.prototype.autoLabel;
    /** @type {?} */
    DropDownComponent.prototype.disabled;
    /** @type {?} */
    DropDownComponent.prototype.enableClear;
    /** @type {?} */
    DropDownComponent.prototype.searchHandle;
    /** @type {?} */
    DropDownComponent.prototype.dropDownListDataSource;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    DropDownComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    DropDownComponent.prototype.showlabel;
    /** @type {?} */
    DropDownComponent.prototype.selectedItemId;
    /** @type {?} */
    DropDownComponent.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    DropDownComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kcm9wZG93bmNvbXBvbmVudC9kcm9wZG93bi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0RyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDcEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBUWpFLE1BQU0sT0FBTyxpQkFBaUI7Ozs7SUE4QjFCLFlBQW9CLGVBQStCO1FBQS9CLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQXRCMUMsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFDSixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFMUQsMkJBQXNCLEdBQVksSUFBSSxLQUFLLEVBQU8sQ0FBQzs7OztRQUVuRCxXQUFNLEdBQVcsS0FBSyxDQUFDOzs7O1FBRXZCLGNBQVMsR0FBVyxJQUFJLENBQUM7SUFlNEIsQ0FBQzs7OztJQVR0RCxJQUNJLFFBQVE7UUFDUixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFDLENBQUM7Ozs7SUFDRCxJQUNJLFVBQVU7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FB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N0IsQ0FBQzs7O1lBM0hKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixnMUJBQXdDO2FBQzNDOzs7O1lBTlEsZUFBZTs7O21CQWFuQixLQUFLO3dCQUNMLEtBQUs7dUJBQ0wsS0FBSzswQkFDTCxLQUFLOzJCQUNMLE1BQU0sU0FBQyxjQUFjO3VCQVlyQixXQUFXLFNBQUMsd0JBQXdCO3lCQUlwQyxXQUFXLFNBQUMsK0JBQStCOzs7Ozs7O0lBcEI1QyxpQ0FBa0I7O0lBQ2xCLHNDQUEyQjs7SUFDM0IscUNBQTBCOztJQUMxQix3Q0FBNEI7O0lBQzVCLHlDQUEwRDs7SUFFMUQsbURBQW1EOzs7OztJQUVuRCxtQ0FBdUI7Ozs7O0lBRXZCLHNDQUF5Qjs7SUFFekIsMkNBQW9COztJQUNwQix3Q0FBb0I7Ozs7O0lBWVIsNENBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEhvc3RCaW5kaW5nLCBFdmVudEVtaXR0ZXIsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUnO1xyXG5pbXBvcnQgeyBEcm9wRG93bkNvbnRyb2wgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2Ryb3Bkb3duY29udHJvbCc7XHJcbmltcG9ydCB7IEVudW1UeXBlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlL2Ryb3Bkb3dubGlzdC9lbnVtdHlwZSc7XHJcbmltcG9ydCB7IEVudW1JbnRlZ2VyVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2ludGVnZXJlbnVtdmFsdWUnO1xyXG5pbXBvcnQgeyBFbnVtU3RyaW5nVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L3N0cmluZ2VudW12YWx1ZSc7XHJcbmltcG9ydCB7IEVudW1Cb29sVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2Jvb2xlbnVtdmFsdWUnO1xyXG5pbXBvcnQgeyBTb2x1dGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL3NvbHV0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEcm9wRG93bkxpc3RWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9kcm9wZG93bmxpc3R2YWx1ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLWZpbHRlci1kcm9wZG93bicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZHJvcGRvd24uY29tcG9uZW50Lmh0bWwnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRHJvcERvd25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25DaGFuZ2Vze1xyXG4gICBcclxuICAgIC8qKlxyXG4gICAgICogUXVlcnlDb25kaXRpb27nsbvlnotcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgaXRlbTphbnk7XHJcbiAgICBASW5wdXQoKSBhdXRvTGFiZWw6Ym9vbGVhbjtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOmJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBlbmFibGVDbGVhciA9IHRydWU7XHJcbiAgICBAT3V0cHV0KCdzZWFyY2hIYW5kbGUnKSBzZWFyY2hIYW5kbGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgZHJvcERvd25MaXN0RGF0YVNvdXJjZTpBcnJheTxhbnk+PW5ldyBBcnJheTxhbnk+KCk7XHJcbiAgICAvKirliKTmlq3mmK/lkKbmmK/lnKjmianlsZXljLrln5/lsZXnpLogKi9cclxuICAgIGV4dGVuZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKirliKTmlq3mmK/lkKbmmL7npLpsYWJlbCAqL1xyXG4gICAgc2hvd2xhYmVsOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgXHJcbiAgICBzZWxlY3RlZEl0ZW1JZDogYW55O1xyXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuXHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS13cmFwJylcclxuICAgIGdldCBpc0V4dGVuZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZXh0ZW5kICYmIHRoaXMuYXV0b0xhYmVsO1xyXG4gICAgfVxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS1oaWRkZW5sYWJlbCcpXHJcbiAgICBnZXQgaGlkZW5MYWJlbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuc2hvd2xhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc29sdXRpb25TZXJ2aWNlOlNvbHV0aW9uU2VydmljZSl7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHRoaXMuZ2V0RGF0YVNvdXJjZSgpO1xyXG4gICAgICAgIC8vIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZSBhcyBEcm9wRG93bkxpc3RWYWx1ZTtcclxuICAgICAgICAvLyBpbml0aWFsVmFsdWUudmFsdWUgJiYgKHRoaXMuc2VsZWN0ZWRJdGVtSWQgPSBpbml0aWFsVmFsdWUudmFsdWUuZ2V0RW51bVZhbHVlKCkpO1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbSl7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0ucGxhY2VIb2xkZXI7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5pdGVtLnBsYWNlSG9sZGVyKTtcclxuICAgICAgICAgICAgLy8gaWYodHlwZSA9PSAnW29iamVjdCBVbmRlZmluZWRdJyl7XHJcbiAgICAgICAgICAgIC8vICAgICBpZih0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgncGxhY2Vob2xkZXInKSl7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5jb250cm9sLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2V7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLnBsYWNlSG9sZGVyO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZSBhcyBEcm9wRG93bkxpc3RWYWx1ZTtcclxuICAgICAgICBpbml0aWFsVmFsdWUudmFsdWUgJiYgKHRoaXMuc2VsZWN0ZWRJdGVtSWQgPSBpbml0aWFsVmFsdWUudmFsdWUpO1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbSAmJiB0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnaXNFeHRlbmQnKSl7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kID0gdGhpcy5pdGVtLmNvbnRyb2wuaXNFeHRlbmQ7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmV4dGVuZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dsYWJlbCA9IHRoaXMuaXRlbS5jb250cm9sLnNob3dMYWJlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyB0aGlzLnRlc3RJZCA9IHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldEd1aWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdldERhdGFTb3VyY2UoKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuZHJvcERvd25MaXN0RGF0YVNvdXJjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YVNvdXJjZSgpe1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbSYmdGhpcy5pdGVtLnZhbHVlXHJcbiAgICAgICAgICAgICYmdGhpcy5pdGVtLmNvbnRyb2wmJnRoaXMuaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCk9PUNvbnRyb2xUeXBlLkRyb3BEb3duKXtcclxuICAgICAgICAgICAgICAgIGxldCBkcm9wRG93bkxpc3Q9KHRoaXMuaXRlbS5jb250cm9sIGFzIERyb3BEb3duQ29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICBpZihkcm9wRG93bkxpc3QudmFsdWVUeXBlPT1FbnVtVHlwZS5Cb29sVHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wRG93bkxpc3REYXRhU291cmNlPUFycmF5PEVudW1Cb29sVmFsdWU+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZHJvcERvd25MaXN0LmVudW1WYWx1ZXMmJmRyb3BEb3duTGlzdC5lbnVtVmFsdWVzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcERvd25MaXN0LmVudW1WYWx1ZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcERvd25MaXN0RGF0YVNvdXJjZS5wdXNoKE9iamVjdC5hc3NpZ24obmV3IEVudW1Cb29sVmFsdWUoKSxlbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoZHJvcERvd25MaXN0LnZhbHVlVHlwZT09RW51bVR5cGUuSW50VHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wRG93bkxpc3REYXRhU291cmNlPUFycmF5PEVudW1JbnRlZ2VyVmFsdWU+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZHJvcERvd25MaXN0LmVudW1WYWx1ZXMmJmRyb3BEb3duTGlzdC5lbnVtVmFsdWVzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcERvd25MaXN0LmVudW1WYWx1ZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcERvd25MaXN0RGF0YVNvdXJjZS5wdXNoKE9iamVjdC5hc3NpZ24obmV3IEVudW1JbnRlZ2VyVmFsdWUoKSxlbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoZHJvcERvd25MaXN0LnZhbHVlVHlwZT09RW51bVR5cGUuU3RyaW5nVHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wRG93bkxpc3REYXRhU291cmNlPUFycmF5PEVudW1TdHJpbmdWYWx1ZT4oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihkcm9wRG93bkxpc3QuZW51bVZhbHVlcyYmZHJvcERvd25MaXN0LmVudW1WYWx1ZXMubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wRG93bkxpc3QuZW51bVZhbHVlcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wRG93bkxpc3REYXRhU291cmNlLnB1c2goT2JqZWN0LmFzc2lnbihuZXcgRW51bVN0cmluZ1ZhbHVlKCksZWxlbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uLCBjb250cm9sVHlwZTogYW55KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1TdHlsZShmaWVsZCxjb250cm9sVHlwZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOlF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNlYXJjaChldmVudCl7XHJcbiAgICAgICAgaWYoZXZlbnQpe1xyXG4gICAgICAgICAgICAodGhpcy5pdGVtLnZhbHVlIGFzIERyb3BEb3duTGlzdFZhbHVlKS52YWx1ZSA9IGV2ZW50LmRhdGEudmFsdWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICh0aGlzLml0ZW0udmFsdWUgYXMgRHJvcERvd25MaXN0VmFsdWUpLnZhbHVlID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuZGlzYWJsZWQpe3JldHVybjt9XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXIoZXZlbnQpe1xyXG4gICAgICAgICh0aGlzLml0ZW0udmFsdWUgYXMgRHJvcERvd25MaXN0VmFsdWUpLnZhbHVlID0gJyc7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCgpO1xyXG4gICAgfVxyXG59Il19