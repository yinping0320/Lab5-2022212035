/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output, ElementRef } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
// import { NumberRangeValue } from '../../entity/conditionvalue/numberrangevaue';
export class NumberComponent {
    /**
     * @param {?} solutionService
     * @param {?} element
     */
    constructor(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.canNull = true;
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        this.precision = nr.control.precision;
        this.bigNumber = nr.control.bigNumber;
        if (!this.bigNumber) {
            this.min = -2147483648;
            this.max = 2147483647;
        }
        this.constructMultiFieldNumberRange((/** @type {?} */ (nr.value)));
        if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {
            this.extend = this._item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this._item.control.showLabel;
            }
        }
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            this.beginPlaceHolder = this.item.beginPlaceHolder || '';
            this.endPlaceHolder = this.item.endPlaceHolder || '';
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldNumberRange(value) {
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    numberChange(event) {
        if (event) {
            /** @type {?} */
            const dataArray = event.split("~");
            this._item.value.startValue = dataArray[0] ? dataArray[0] : null;
            this._item.value.endValue = dataArray[1] ? dataArray[1] : null;
        }
        else {
            this._item.value.startValue = null;
            this._item.value.endValue = null;
        }
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        this.endValue = $event;
    }
}
NumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-number',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap d-flex\">\r\n    <farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [disabled]=\"disabled\" [beginValue]=\"beginValue\" \r\n    [endValue]=\"endValue\" (beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" \r\n    (valueChange)=\"numberChange($event)\" [beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" \r\n    [precision]=\"precision\" [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"max\"></farris-number-range>\r\n</div>"
            }] }
];
/** @nocollapse */
NumberComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: ElementRef }
];
NumberComponent.propDecorators = {
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    item: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NumberComponent.prototype.autoLabel;
    /** @type {?} */
    NumberComponent.prototype.disabled;
    /** @type {?} */
    NumberComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    NumberComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    NumberComponent.prototype.showlabel;
    /** @type {?} */
    NumberComponent.prototype.canNull;
    /** @type {?} */
    NumberComponent.prototype.number;
    /** @type {?} */
    NumberComponent.prototype.beginValue;
    /** @type {?} */
    NumberComponent.prototype.endValue;
    /** @type {?} */
    NumberComponent.prototype.precision;
    /** @type {?} */
    NumberComponent.prototype.placeholder;
    /** @type {?} */
    NumberComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    NumberComponent.prototype.endPlaceHolder;
    /** @type {?} */
    NumberComponent.prototype.bigNumber;
    /** @type {?} */
    NumberComponent.prototype.max;
    /** @type {?} */
    NumberComponent.prototype.min;
    /** @type {?} */
    NumberComponent.prototype._item;
    /** @type {?} */
    NumberComponent.prototype.numberRange;
    /**
     * @type {?}
     * @private
     */
    NumberComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    NumberComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,