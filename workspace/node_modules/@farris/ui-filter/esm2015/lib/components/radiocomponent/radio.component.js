/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { SolutionService } from '../../service/solution.service';
import { RadioGroupValue } from '../../entity/conditionvalue/radiovalue';
import { RadioValue } from '../../entity/controltype/radio/radiovalue';
export class filterRadioComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.cla = true;
        this.radioDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get isCheckExtend() {
        return !this.extend;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        this.radioValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.getDataSource();
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Radio) {
            /** @type {?} */
            let radioboxList = ((/** @type {?} */ (this.item.control)));
            this.radioDataSource = Array();
            if (radioboxList.enumValues && radioboxList.enumValues.length > 0) {
                radioboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.radioDataSource.push(Object.assign(new RadioValue(), element));
                }));
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            this.item.value.value = event;
        }
        else {
            this.item.value.value = new RadioGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
}
filterRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-radio',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-radiogroup \r\n    [(ngModel)]=\"item.value.value\" \r\n    [horizontal]=\"true\" \r\n    [data]=\"radioDataSource\"\r\n    (changeValue)=\"onSearch($event)\">\r\n    </farris-radiogroup>\r\n</div>"
                // encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
filterRadioComponent.ctorParameters = () => [
    { type: SolutionService }
];
filterRadioComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
    cla: [{ type: HostBinding, args: ['class.filter-item-checkboxgroup',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    filterRadioComponent.prototype.item;
    /** @type {?} */
    filterRadioComponent.prototype.autoLabel;
    /** @type {?} */
    filterRadioComponent.prototype.disabled;
    /** @type {?} */
    filterRadioComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    filterRadioComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    filterRadioComponent.prototype.showlabel;
    /** @type {?} */
    filterRadioComponent.prototype.radioValue;
    /** @type {?} */
    filterRadioComponent.prototype.selectCheck;
    /** @type {?} */
    filterRadioComponent.prototype.cla;
    /** @type {?} */
    filterRadioComponent.prototype.radioDataSource;
    /**
     * @type {?}
     * @private
     */
    filterRadioComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9yYWRpb2NvbXBvbmVudC9yYWRpby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF3QyxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6SCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFTdkUsTUFBTSxPQUFPLG9CQUFvQjs7OztJQW1DN0IsWUFBb0IsZUFBK0I7UUFBL0Isb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBM0IzQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7Ozs7UUFFMUQsV0FBTSxHQUFXLEtBQUssQ0FBQzs7OztRQUV2QixjQUFTLEdBQVcsSUFBSSxDQUFDO1FBR3pCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBWStCLFFBQUcsR0FBRyxJQUFJLENBQUM7UUFNM0Qsb0JBQWUsR0FBWSxJQUFJLEtBQUssRUFBTyxDQUFDO0lBRVMsQ0FBQzs7OztJQWxCdEQsSUFDSSxRQUFRO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsSUFDSSxhQUFhO1FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDeEIsQ0FBQzs7OztJQUdELElBQ0ksVUFBVTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFNRCxRQUFRO1FBQ0osSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRCxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBQzlFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDO2dCQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2hEO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsYUFBYTtRQUNULElBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBRSxXQUFXLENBQUMsS0FBSyxFQUFDOztnQkFDbkYsWUFBWSxHQUFDLENBQUMsbUJBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQWdCLENBQUM7WUFDcEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLEVBQWMsQ0FBQztZQUUzQyxJQUFHLFlBQVksQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO2dCQUMzRCxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN2RSxDQUFDLEVBQUMsQ0FBQzthQUNOO1NBQ0o7SUFDTCxDQUFDOzs7OztJQUVELHFCQUFxQixDQUFDLEtBQW9CO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxLQUFLO1FBQ1YsSUFBRyxLQUFLLEVBQUM7WUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ2pDO2FBQ0c7WUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztTQUNqRDtRQUNELElBQUcsSUFBSSxDQUFDLFFBQVEsRUFBQztZQUFDLE9BQU87U0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7OztZQXBGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsd2lCQUFxQztnQkFDckMsd0NBQXdDO2FBQzNDOzs7O1lBVFEsZUFBZTs7O21CQWdCbkIsS0FBSzt3QkFDTCxLQUFLO3VCQUNMLEtBQUs7MkJBQ0wsTUFBTSxTQUFDLGNBQWM7dUJBU3JCLFdBQVcsU0FBQyx3QkFBd0I7NEJBS3BDLFdBQVcsU0FBQyxnQ0FBZ0M7a0JBSzVDLFdBQVcsU0FBQyxpQ0FBaUM7eUJBQzdDLFdBQVcsU0FBQywrQkFBK0I7Ozs7Ozs7SUF2QjVDLG9DQUFrQjs7SUFDbEIseUNBQTJCOztJQUMzQix3Q0FBMEI7O0lBQzFCLDRDQUEwRDs7Ozs7SUFFMUQsc0NBQXVCOzs7OztJQUV2Qix5Q0FBeUI7O0lBQ3pCLDBDQUFrQjs7SUFFbEIsMkNBQWlCOztJQVlqQixtQ0FBMkQ7O0lBTTNELCtDQUE0Qzs7Ozs7SUFFaEMsK0NBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uLCBIb3N0QmluZGluZywgRXZlbnRFbWl0dGVyLCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmFkaW9Hcm91cFZhbHVlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3JhZGlvdmFsdWUnO1xyXG5pbXBvcnQgeyBSYWRpb1ZhbHVlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlL3JhZGlvL3JhZGlvdmFsdWUnO1xyXG5pbXBvcnQgeyBSYWRpb0NvbnRyb2wgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvcmFkaW8vcmFkaW9jb250cm9sJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtZmlsdGVyLXJhZGlvJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9yYWRpby5jb21wb25lbnQuaHRtbCdcclxuICAgIC8vIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBmaWx0ZXJSYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCxPbkNoYW5nZXN7XHJcbiAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBRdWVyeUNvbmRpdGlvbuexu+Wei1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBpdGVtOmFueTtcclxuICAgIEBJbnB1dCgpIGF1dG9MYWJlbDpib29sZWFuO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6Ym9vbGVhbjtcclxuICAgIEBPdXRwdXQoJ3NlYXJjaEhhbmRsZScpIHNlYXJjaEhhbmRsZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIC8qKuWIpOaWreaYr+WQpuaYr+WcqOaJqeWxleWMuuWfn+WxleekuiAqL1xyXG4gICAgZXh0ZW5kOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKuWIpOaWreaYr+WQpuaYvuekumxhYmVsICovXHJcbiAgICBzaG93bGFiZWw6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICByYWRpb1ZhbHVlOiBhbnlbXTtcclxuXHJcbiAgICBzZWxlY3RDaGVjayA9IFtdO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0td3JhcCcpXHJcbiAgICBnZXQgaXNFeHRlbmQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmV4dGVuZCAmJiB0aGlzLmF1dG9MYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZpbHRlci1pdGVtLWNoZWNib3gtd3JhcCcpXHJcbiAgICBnZXQgaXNDaGVja0V4dGVuZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZXh0ZW5kO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0tY2hlY2tib3hncm91cCcpIGNsYSA9IHRydWU7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZpbHRlci1pdGVtLWhpZGRlbmxhYmVsJylcclxuICAgIGdldCBoaWRlbkxhYmVsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zaG93bGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgcmFkaW9EYXRhU291cmNlOkFycmF5PGFueT49bmV3IEFycmF5PGFueT4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvbHV0aW9uU2VydmljZTpTb2x1dGlvblNlcnZpY2Upe31cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdldERhdGFTb3VyY2UoKTtcclxuICAgICAgICB0aGlzLnJhZGlvVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbSAmJiB0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnaXNFeHRlbmQnKSl7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kID0gdGhpcy5pdGVtLmNvbnRyb2wuaXNFeHRlbmQ7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmV4dGVuZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dsYWJlbCA9IHRoaXMuaXRlbS5jb250cm9sLnNob3dMYWJlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdldERhdGFTb3VyY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhU291cmNlKCl7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtICYmIHRoaXMuaXRlbS5jb250cm9sICYmIHRoaXMuaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCk9PUNvbnRyb2xUeXBlLlJhZGlvKXtcclxuICAgICAgICAgICAgbGV0IHJhZGlvYm94TGlzdD0odGhpcy5pdGVtLmNvbnRyb2wgYXMgUmFkaW9Db250cm9sKTtcclxuICAgICAgICAgICAgdGhpcy5yYWRpb0RhdGFTb3VyY2UgPSBBcnJheTxSYWRpb1ZhbHVlPigpO1xyXG5cclxuICAgICAgICAgICAgaWYocmFkaW9ib3hMaXN0LmVudW1WYWx1ZXMgJiYgcmFkaW9ib3hMaXN0LmVudW1WYWx1ZXMubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICAgICAgcmFkaW9ib3hMaXN0LmVudW1WYWx1ZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhZGlvRGF0YVNvdXJjZS5wdXNoKE9iamVjdC5hc3NpZ24obmV3IFJhZGlvVmFsdWUoKSxlbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQ6UXVlcnlDb25kaXRpb24pe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU2VhcmNoKGV2ZW50KXtcclxuICAgICAgICBpZihldmVudCl7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbS52YWx1ZS52YWx1ZSA9IGV2ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLml0ZW0udmFsdWUudmFsdWUgPSBuZXcgUmFkaW9Hcm91cFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuZGlzYWJsZWQpe3JldHVybjt9XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCgpO1xyXG4gICAgfVxyXG59Il19