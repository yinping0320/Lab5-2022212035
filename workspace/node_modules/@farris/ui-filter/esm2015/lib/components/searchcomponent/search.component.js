/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
export class SearchComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            this.placeholder = this.item.placeHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearch($event) {
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit($event);
    }
}
SearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-search',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" \r\n    [(ngModel)]=\"item.value.value\" (clear)=\"onSearch($event)\" (blurHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
            }] }
];
/** @nocollapse */
SearchComponent.ctorParameters = () => [
    { type: SolutionService }
];
SearchComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    SearchComponent.prototype.item;
    /** @type {?} */
    SearchComponent.prototype.autoLabel;
    /** @type {?} */
    SearchComponent.prototype.disabled;
    /** @type {?} */
    SearchComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    SearchComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    SearchComponent.prototype.showlabel;
    /** @type {?} */
    SearchComponent.prototype.placeholder;
    /** @type {?} */
    SearchComponent.prototype.groupIcon;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc2VhcmNoY29tcG9uZW50L3NlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixXQUFXLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFPakUsTUFBTSxPQUFPLGVBQWU7Ozs7SUE0QnhCLFlBQW9CLGVBQStCO1FBQS9CLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQXBCM0IsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBRzFELFdBQU0sR0FBVyxLQUFLLENBQUM7Ozs7UUFFdkIsY0FBUyxHQUFXLElBQUksQ0FBQztRQWF6QixjQUFTLEdBQUcseUNBQXlDLENBQUM7SUFFRCxDQUFDOzs7O0lBWnRELElBQ0ksUUFBUTtRQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELElBQ0ksVUFBVTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFNRCxRQUFRO1FBQ0osSUFBRyxJQUFJLENBQUMsSUFBSSxFQUFDO1lBQ1QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7WUFDL0Msc0VBQXNFO1lBQ3RFLG9DQUFvQztZQUNwQyxnRkFBZ0Y7WUFDaEYsNERBQTREO1lBQzVELFFBQVE7WUFDUixJQUFJO1lBQ0osUUFBUTtZQUNSLGdEQUFnRDtZQUNoRCxJQUFJO1NBQ1A7UUFDRCxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBQzlFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDO2dCQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2hEO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztJQUVYLENBQUM7Ozs7Ozs7O0lBTUQscUJBQXFCLENBQUMsS0FBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLE1BQU07UUFDWCxJQUFHLElBQUksQ0FBQyxRQUFRLEVBQUM7WUFBQyxPQUFPO1NBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7O1lBdkVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QiwrbkJBQXNDO2FBQ3pDOzs7O1lBTFEsZUFBZTs7O21CQVluQixLQUFLO3dCQUNMLEtBQUs7dUJBQ0wsS0FBSzsyQkFDTCxNQUFNLFNBQUMsY0FBYzt1QkFRckIsV0FBVyxTQUFDLHdCQUF3Qjt5QkFLcEMsV0FBVyxTQUFDLCtCQUErQjs7Ozs7OztJQWhCNUMsK0JBQWtCOztJQUNsQixvQ0FBMkI7O0lBQzNCLG1DQUEwQjs7SUFDMUIsdUNBQTBEOzs7OztJQUcxRCxpQ0FBdUI7Ozs7O0lBRXZCLG9DQUF5Qjs7SUFDekIsc0NBQW9COztJQVlwQixvQ0FBc0Q7Ozs7O0lBRTFDLDBDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBIb3N0QmluZGluZywgT3V0cHV0LCBFdmVudEVtaXR0ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFNvbHV0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLWZpbHRlci1zZWFyY2gnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWFyY2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25DaGFuZ2Vze1xyXG4gICBcclxuICAgIC8qKlxyXG4gICAgICogUXVlcnlDb25kaXRpb27nsbvlnotcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgaXRlbTphbnk7XHJcbiAgICBASW5wdXQoKSBhdXRvTGFiZWw6Ym9vbGVhbjtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOmJvb2xlYW47XHJcbiAgICBAT3V0cHV0KCdzZWFyY2hIYW5kbGUnKSBzZWFyY2hIYW5kbGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgLyoq5Yik5pat5piv5ZCm5piv5Zyo5omp5bGV5Yy65Z+f5bGV56S6ICovXHJcbiAgICBleHRlbmQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoq5Yik5pat5piv5ZCm5pi+56S6bGFiZWwgKi9cclxuICAgIHNob3dsYWJlbDpib29sZWFuID0gdHJ1ZTtcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS13cmFwJylcclxuICAgIGdldCBpc0V4dGVuZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZXh0ZW5kICYmIHRoaXMuYXV0b0xhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0taGlkZGVubGFiZWwnKVxyXG4gICAgZ2V0IGhpZGVuTGFiZWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnNob3dsYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICBncm91cEljb24gPSAnPHNwYW4gY2xhc3M9XCJrLWljb24gay1pLXNlYXJjaFwiPjwvc3Bhbj4nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc29sdXRpb25TZXJ2aWNlOlNvbHV0aW9uU2VydmljZSl7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbSl7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0ucGxhY2VIb2xkZXIgfHwgJyc7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5pdGVtLnBsYWNlSG9sZGVyKTtcclxuICAgICAgICAgICAgLy8gaWYodHlwZSA9PSAnW29iamVjdCBVbmRlZmluZWRdJyl7XHJcbiAgICAgICAgICAgIC8vICAgICBpZih0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgncGxhY2Vob2xkZXInKSl7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5jb250cm9sLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2V7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLnBsYWNlSG9sZGVyO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuaXRlbSAmJiB0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnaXNFeHRlbmQnKSl7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kID0gdGhpcy5pdGVtLmNvbnRyb2wuaXNFeHRlbmQ7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmV4dGVuZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dsYWJlbCA9IHRoaXMuaXRlbS5jb250cm9sLnNob3dMYWJlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uLCBjb250cm9sVHlwZTogYW55KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1TdHlsZShmaWVsZCxjb250cm9sVHlwZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOlF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNlYXJjaCgkZXZlbnQpe1xyXG4gICAgICAgIGlmKHRoaXMuZGlzYWJsZWQpe3JldHVybjt9XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG59Il19