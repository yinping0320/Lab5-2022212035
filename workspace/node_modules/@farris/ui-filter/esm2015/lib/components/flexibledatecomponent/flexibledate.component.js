/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, HostBinding } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { SolutionService } from '../../service/solution.service';
export class FlexibleDateComponent {
    /**
     * @param {?} localeService
     * @param {?} solutionService
     */
    constructor(localeService, solutionService) {
        this.localeService = localeService;
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = {
                    startValue: null,
                    endValue: null,
                    value: null,
                    single: true
                };
            }
            if (!this._item.control.hasOwnProperty('single')) {
                this._item.control.single = true;
            }
            this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.dateBeginPlaceHolder');
            this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.dateEndPlaceHolder');
            this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
            this.single = this._item.control.single;
            this._item.value.single = this.single;
            this.showTime = (this._item.control.hasOwnProperty('showTime') && this._item.control.showTime) ? this._item.control.showTime : '';
            this.showType = (this._item.control.hasOwnProperty('showType') && this._item.control.showType) ? this._item.control.showType : '';
            /** @type {?} */
            let itemDateFormat = this._item.control.format;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        this.constructMultiFieldDateRange(nr.value);
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldDateRange(value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.startValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        this._item.value.value = event.returnFormatted ? event.returnFormatted : null;
        this._item.valueText = event.formatted;
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    beginValueChange(event) {
        this._item.value.startValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.startValueText = event.formatted;
        this.setValueText();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    endValueChange(event) {
        this._item.value.endValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.endValueText = event.formatted;
        this.setValueText();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    setValueText() {
        if (Object.keys(this._item.value).length === 0 || (!this._item.value.startValue && !this._item.value.endValue)) {
            this._item.valueText = '';
        }
        else if (!this._item.value.startValueText) {
            this._item.valueText = '~' + this._item.value.endValueText;
        }
        else if (!this._item.value.endValueText) {
            this._item.valueText = this._item.value.startValueText + '~';
        }
        else {
            this._item.valueText = this._item.value.startValueText + '~' + this._item.value.endValueText;
        }
    }
}
FlexibleDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-flexibledate',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime;else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex align-items-center\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow f-filter-panel-flexible-icon\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n</div>"
            }] }
];
/** @nocollapse */
FlexibleDateComponent.ctorParameters = () => [
    { type: LocaleService },
    { type: SolutionService }
];
FlexibleDateComponent.propDecorators = {
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    item: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FlexibleDateComponent.prototype.autoLabel;
    /** @type {?} */
    FlexibleDateComponent.prototype.disabled;
    /** @type {?} */
    FlexibleDateComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    FlexibleDateComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    FlexibleDateComponent.prototype.showlabel;
    /** @type {?} */
    FlexibleDateComponent.prototype.placeholder;
    /** @type {?} */
    FlexibleDateComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    FlexibleDateComponent.prototype.endPlaceHolder;
    /** @type {?} */
    FlexibleDateComponent.prototype.single;
    /** @type {?} */
    FlexibleDateComponent.prototype.showTime;
    /** @type {?} */
    FlexibleDateComponent.prototype.showType;
    /** @type {?} */
    FlexibleDateComponent.prototype.dateFormat;
    /** @type {?} */
    FlexibleDateComponent.prototype.value;
    /** @type {?} */
    FlexibleDateComponent.prototype.startValue;
    /** @type {?} */
    FlexibleDateComponent.prototype.endValue;
    /** @type {?} */
    FlexibleDateComponent.prototype._item;
    /**
     * @type {?}
     * @private
     */
    FlexibleDateComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FlexibleDateComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,