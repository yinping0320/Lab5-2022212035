/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output, ElementRef } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
export class InputComponent {
    /**
     * @param {?} solutionService
     * @param {?} element
     */
    constructor(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //console.log(this.item);
        if (this.item) {
            this.placeholder = this.item.placeHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // if(!this.extend){
        //     const El = this.element.nativeElement;
        //     const itemWidth = El.clientWidth;
        //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';
        //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';
        // }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    InputChanged(e) {
        // let keycode = window.event ? e.keyCode : e.which;
        // if(keycode == 13){//回车键
        //     this.searchHandle.emit(this.item.value.value);
        // }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(this.item.value.value);
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-input',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input class=\"form-control\" \r\n    type=\"text\" \r\n    [disabled]=\"disabled\"\r\n    [(ngModel)]=\"item.value.value\" \r\n    [placeholder]=\"placeholder\"\r\n    (keyup.enter)=\"InputChanged($event)\"\r\n    (blur)=\"InputChanged($event)\"\r\n    >\r\n</div>"
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: ElementRef }
];
InputComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    InputComponent.prototype.item;
    /** @type {?} */
    InputComponent.prototype.autoLabel;
    /** @type {?} */
    InputComponent.prototype.disabled;
    /** @type {?} */
    InputComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    InputComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    InputComponent.prototype.showlabel;
    /** @type {?} */
    InputComponent.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dGNvbXBvbmVudC9pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBaUIsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpJLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQU9qRSxNQUFNLE9BQU8sY0FBYzs7Ozs7SUF5QnZCLFlBQW9CLGVBQStCLEVBQWtCLE9BQW1CO1FBQXBFLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQUFrQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBakJoRSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7Ozs7UUFHMUQsV0FBTSxHQUFXLEtBQUssQ0FBQzs7OztRQUV2QixjQUFTLEdBQVcsSUFBSSxDQUFDO0lBWWlFLENBQUM7Ozs7SUFUM0YsSUFDSSxRQUFRO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBQ0QsSUFDSSxVQUFVO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0IsQ0FBQzs7OztJQUlELFFBQVE7UUFDSix5QkFBeUI7UUFDekIsSUFBRyxJQUFJLENBQUMsSUFBSSxFQUFDO1lBQ1QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7WUFDL0Msc0VBQXNFO1lBQ3RFLG9DQUFvQztZQUNwQyxnRkFBZ0Y7WUFDaEYsNERBQTREO1lBQzVELFFBQVE7WUFDUixJQUFJO1lBQ0osUUFBUTtZQUNSLGdEQUFnRDtZQUNoRCxJQUFJO1NBQ1A7UUFDRCxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQy9FLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDO2dCQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2hEO1NBQ0o7SUFDTCxDQUFDOzs7O0lBQ0QsZUFBZTtRQUNYLG9CQUFvQjtRQUNwQiw2Q0FBNkM7UUFDN0Msd0NBQXdDO1FBQ3hDLGtGQUFrRjtRQUNsRixpRkFBaUY7UUFDakYsSUFBSTtJQUNSLENBQUM7Ozs7SUFDRCxXQUFXO0lBRVgsQ0FBQzs7Ozs7Ozs7SUFNRCxxQkFBcUIsQ0FBQyxLQUFvQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsQ0FBQztRQUNWLG9EQUFvRDtRQUNwRCwwQkFBMEI7UUFDMUIscURBQXFEO1FBQ3JELElBQUk7UUFDSixJQUFHLElBQUksQ0FBQyxRQUFRLEVBQUM7WUFBQyxPQUFPO1NBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7O1lBaEZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixvbUJBQXFDO2FBQ3hDOzs7O1lBTFEsZUFBZTtZQUZ3RSxVQUFVOzs7bUJBY3JHLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLOzJCQUNMLE1BQU0sU0FBQyxjQUFjO3VCQVFyQixXQUFXLFNBQUMsd0JBQXdCO3lCQUlwQyxXQUFXLFNBQUMsK0JBQStCOzs7Ozs7O0lBZjVDLDhCQUFrQjs7SUFDbEIsbUNBQTJCOztJQUMzQixrQ0FBMEI7O0lBQzFCLHNDQUEwRDs7Ozs7SUFHMUQsZ0NBQXVCOzs7OztJQUV2QixtQ0FBeUI7O0lBQ3pCLHFDQUFvQjs7Ozs7SUFXUix5Q0FBdUM7Ozs7O0lBQUMsaUNBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEhvc3RCaW5kaW5nLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtZmlsdGVyLWlucHV0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCxPbkNoYW5nZXMsQWZ0ZXJWaWV3SW5pdHtcclxuICAgXHJcbiAgICAvKipcclxuICAgICAqIFF1ZXJ5Q29uZGl0aW9u57G75Z6LXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGl0ZW06YW55O1xyXG4gICAgQElucHV0KCkgYXV0b0xhYmVsOmJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDpib29sZWFuO1xyXG4gICAgQE91dHB1dCgnc2VhcmNoSGFuZGxlJykgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIC8qKuWIpOaWreaYr+WQpuaYr+WcqOaJqeWxleWMuuWfn+WxleekuiAqL1xyXG4gICAgZXh0ZW5kOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKuWIpOaWreaYr+WQpuaYvuekumxhYmVsICovXHJcbiAgICBzaG93bGFiZWw6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0td3JhcCcpXHJcbiAgICBnZXQgaXNFeHRlbmQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmV4dGVuZCAmJiB0aGlzLmF1dG9MYWJlbDtcclxuICAgIH1cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0taGlkZGVubGFiZWwnKVxyXG4gICAgZ2V0IGhpZGVuTGFiZWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnNob3dsYWJlbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb2x1dGlvblNlcnZpY2U6U29sdXRpb25TZXJ2aWNlLHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudFJlZil7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5pdGVtKTtcclxuICAgICAgICBpZih0aGlzLml0ZW0pe1xyXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLnBsYWNlSG9sZGVyIHx8ICcnO1xyXG4gICAgICAgICAgICAvLyBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMuaXRlbS5wbGFjZUhvbGRlcik7XHJcbiAgICAgICAgICAgIC8vIGlmKHR5cGUgPT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpe1xyXG4gICAgICAgICAgICAvLyAgICAgaWYodGhpcy5pdGVtLmNvbnRyb2wgJiYgdGhpcy5pdGVtLmNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ3BsYWNlaG9sZGVyJykpe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0uY29udHJvbC5wbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBlbHNle1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5wbGFjZUhvbGRlcjtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLml0ZW0gJiYgdGhpcy5pdGVtLmNvbnRyb2wgJiYgdGhpcy5pdGVtLmNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2lzRXh0ZW5kJykpIHtcclxuICAgICAgICAgICAgdGhpcy5leHRlbmQgPSB0aGlzLml0ZW0uY29udHJvbC5pc0V4dGVuZDtcclxuICAgICAgICAgICAgaWYoIXRoaXMuZXh0ZW5kKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd2xhYmVsID0gdGhpcy5pdGVtLmNvbnRyb2wuc2hvd0xhYmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIC8vIGlmKCF0aGlzLmV4dGVuZCl7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IEVsID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IGl0ZW1XaWR0aCA9IEVsLmNsaWVudFdpZHRoO1xyXG4gICAgICAgIC8vICAgICBFbC5xdWVyeVNlbGVjdG9yKCcubGlzdC1maWx0ZXItaW5wdXQtaXRlbScpLnN0eWxlLndpZHRoID0gaXRlbVdpZHRoICsgJ3B4JztcclxuICAgICAgICAvLyAgICAgRWwucXVlcnlTZWxlY3RvcignLmlucHV0LWl0ZW0tYnRucycpLnN0eWxlLndpZHRoID0gaXRlbVdpZHRoICsgMTAwICsgJ3B4JztcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uLCBjb250cm9sVHlwZTogYW55KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1TdHlsZShmaWVsZCxjb250cm9sVHlwZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOlF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBJbnB1dENoYW5nZWQoZSl7XHJcbiAgICAgICAgLy8gbGV0IGtleWNvZGUgPSB3aW5kb3cuZXZlbnQgPyBlLmtleUNvZGUgOiBlLndoaWNoO1xyXG4gICAgICAgIC8vIGlmKGtleWNvZGUgPT0gMTMpey8v5Zue6L2m6ZSuXHJcbiAgICAgICAgLy8gICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQodGhpcy5pdGVtLnZhbHVlLnZhbHVlKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgaWYodGhpcy5kaXNhYmxlZCl7cmV0dXJuO31cclxuICAgICAgICB0aGlzLnNlYXJjaEhhbmRsZS5lbWl0KHRoaXMuaXRlbS52YWx1ZS52YWx1ZSk7XHJcbiAgICB9XHJcbn0iXX0=