/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EnumType } from "./enumtype";
import { EnumIntegerValue } from "./integerenumvalue";
import { EnumStringValue } from "./stringenumvalue";
import { EnumBoolValue } from "./boolenumvalue";
/**
 * @record
 */
export function IEnumValue() { }
if (false) {
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumType = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValueName = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValue = function () { };
}
export class EnumValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let enumType = enumValue.getEnumType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWVudW12YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb250cm9sdHlwZS9kcm9wZG93bmxpc3QvaWVudW12YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBRWhELGdDQUlDOzs7OztJQUhHLG1EQUF1Qjs7OztJQUN2Qix3REFBMEI7Ozs7SUFDMUIsb0RBQW1COztBQUd2QixNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQUV6QixjQUFjLENBQUMsR0FBYzs7WUFDckIsU0FBUyxHQUFDLG1CQUFBLEdBQUcsRUFBYzs7WUFDM0IsUUFBUSxHQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7O1lBQ2hDLElBQUksR0FBQyxJQUFJLE1BQU0sRUFBRTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsUUFBUSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBQyxTQUFTLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsSUFBVzs7WUFDbkIsUUFBUSxHQUFDLG1CQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBWTs7WUFDakMsT0FBTyxHQUFDLG1CQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBYztRQUN6QyxJQUFHLFFBQVEsSUFBRSxRQUFRLENBQUMsT0FBTyxFQUFDO1lBQzFCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUU7U0FDekQ7YUFDSSxJQUFHLFFBQVEsSUFBRSxRQUFRLENBQUMsUUFBUSxFQUFDO1lBQ2hDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFFO1NBQ3REO2FBQ0c7WUFDQSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxlQUFlLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBRTtTQUN4RDtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudW1UeXBlIH0gZnJvbSBcIi4vZW51bXR5cGVcIjtcclxuaW1wb3J0IHsgRW51bUludGVnZXJWYWx1ZSB9IGZyb20gXCIuL2ludGVnZXJlbnVtdmFsdWVcIjtcclxuaW1wb3J0IHsgRW51bVN0cmluZ1ZhbHVlIH0gZnJvbSBcIi4vc3RyaW5nZW51bXZhbHVlXCI7XHJcbmltcG9ydCB7IEVudW1Cb29sVmFsdWUgfSBmcm9tIFwiLi9ib29sZW51bXZhbHVlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElFbnVtVmFsdWV7XHJcbiAgICBnZXRFbnVtVHlwZSgpOkVudW1UeXBlO1xyXG4gICAgZ2V0RW51bVZhbHVlTmFtZSgpOnN0cmluZztcclxuICAgIGdldEVudW1WYWx1ZSgpOmFueTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVudW1WYWx1ZUNvbnZlcnR7XHJcblxyXG4gICAgY29udmVydEpPYmplY3Qob2JqOklFbnVtVmFsdWUpOk9iamVjdHtcclxuICAgICAgICBsZXQgZW51bVZhbHVlPW9iaiBhcyBJRW51bVZhbHVlO1xyXG4gICAgICAgIGxldCBlbnVtVHlwZT1lbnVtVmFsdWUuZ2V0RW51bVR5cGUoKTtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgam9ialtcIlR5cGVcIl09ZW51bVR5cGU7XHJcbiAgICAgICAgam9ialtcIkNvbnRlbnRcIl09ZW51bVZhbHVlO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tSm9iamVjdChqb2JqOk9iamVjdCk6SUVudW1WYWx1ZXtcclxuICAgICAgICBsZXQgZW51bVR5cGU9am9ialtcIlR5cGVcIl0gYXMgRW51bVR5cGU7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ9am9ialtcIkNvbnRlbnRcIl0gYXMgSUVudW1WYWx1ZTtcclxuICAgICAgICBpZihlbnVtVHlwZT09RW51bVR5cGUuSW50VHlwZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFbnVtSW50ZWdlclZhbHVlKCksY29udGVudCkgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGVudW1UeXBlPT1FbnVtVHlwZS5Cb29sVHlwZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFbnVtQm9vbFZhbHVlKCksY29udGVudCkgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRW51bVN0cmluZ1ZhbHVlKCksY29udGVudCkgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==