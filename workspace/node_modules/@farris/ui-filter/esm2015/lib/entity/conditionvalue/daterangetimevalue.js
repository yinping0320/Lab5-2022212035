/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from "@farris/ui-common/date";
export class DateRangeTimeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRangeTime;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    getValueText(ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                let fmt = ctrl.format;
                if (ctrl.controltype === 'datetime') {
                    if (ctrl.format.indexOf('HH:mm') === -1) {
                        fmt = ctrl.format + ' HH:mm:ss';
                    }
                }
                /** @type {?} */
                const dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, fmt) + '~' + dateHlp.formatTo(this.endTime, fmt);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    }
}
if (false) {
    /** @type {?} */
    DateRangeTimeValue.prototype.startTime;
    /** @type {?} */
    DateRangeTimeValue.prototype.endTime;
    /** @type {?} */
    DateRangeTimeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdldGltZXZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2RhdGVyYW5nZXRpbWV2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUszQixZQUFZLFFBQWdELEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBRDFGLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUErQztRQUM1RCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUQ7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtJQUNMLENBQUM7Ozs7SUFDRCxnQkFBZ0I7UUFDWixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDckMsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFDRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBQ0QsWUFBWSxDQUFDLElBQVU7UUFDbkIsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBRSxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzFFLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O29CQUNqQixHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU07Z0JBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUU7b0JBQ2pDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQ3JDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQztxQkFDbkM7aUJBQ0o7O3NCQUVLLE9BQU8sR0FBRyxJQUFJLHFCQUFxQixFQUFFO2dCQUMzQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsR0FBRSxHQUFHLEdBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzFGO1lBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoRDthQUNJO1lBQ0QsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7Q0FDSjs7O0lBbERHLHVDQUFrQjs7SUFDbEIscUNBQWdCOztJQUNoQixvQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3VpLWNvbW1vbi9kYXRlXCI7XHJcbmV4cG9ydCBjbGFzcyBEYXRlUmFuZ2VUaW1lVmFsdWUgaW1wbGVtZW50cyBJVmFsdWUge1xyXG5cclxuICAgIHN0YXJ0VGltZTogc3RyaW5nO1xyXG4gICAgZW5kVGltZTogc3RyaW5nO1xyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IHsgc3RhcnRUaW1lOiBzdHJpbmcsIGVuZFRpbWU6IHN0cmluZyB9ID0geyBzdGFydFRpbWU6ICcnLCBlbmRUaW1lOiAnJyB9KSB7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB2YWx1ZS5zdGFydFRpbWU7XHJcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gdmFsdWUuZW5kVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiB7IGZvcm1hdHRlZDogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmZvcm1hdHRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzBdO1xyXG4gICAgICAgICAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5mb3JtYXR0ZWQuc3BsaXQodmFsdWUuZGVsaW1pdGVyKVsxXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXJ0VGltZX1+JHt0aGlzLmVuZFRpbWV9YDtcclxuICAgIH1cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuRGF0ZVJhbmdlVGltZTtcclxuICAgIH1cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnN0YXJ0VGltZSB8fCAhdGhpcy5lbmRUaW1lO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWVUZXh0KGN0cmw/OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIC8vIOWPr+iDveWtmOWcqHRoaXMuc3RhcnRUaW1l5pivdW5kZWZpbmVk55qE5oOF5Ya1XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRUaW1lJiZ0aGlzLnN0YXJ0VGltZS5sZW5ndGgmJnRoaXMuZW5kVGltZSYmdGhpcy5lbmRUaW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoY3RybCAmJiBjdHJsLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZtdCA9IGN0cmwuZm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0cmwuY29udHJvbHR5cGUgPT09ICdkYXRldGltZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5mb3JtYXQuaW5kZXhPZignSEg6bW0nKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm10ID0gY3RybC5mb3JtYXQgKyAnIEhIOm1tOnNzJztcclxuICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVIbHAgPSBuZXcgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUhscC5mb3JtYXRUbyh0aGlzLnN0YXJ0VGltZSwgZm10KSArJ34nKyBkYXRlSGxwLmZvcm1hdFRvKHRoaXMuZW5kVGltZSwgZm10KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRUaW1lICsgJ34nICsgdGhpcy5lbmRUaW1lKTsgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7ICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19