/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { cloneDeep } from 'lodash-es';
export class InputGroupValue {
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.clear$ = new EventEmitter();
        this.value = data.value;
        this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (this.textField) {
            /** @type {?} */
            const args = this.textField.split('.');
            /** @type {?} */
            const textArr = this.value.map((/**
             * @param {?} item
             * @return {?}
             */
            item => this.getPropValue(item, cloneDeep(args))));
            return textArr && textArr.length ? textArr.join(',') : '';
        }
        else {
            return '';
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    }
    /**
     * @return {?}
     */
    getValueText() {
        return this.textValue;
    }
}
if (false) {
    /** @type {?} */
    InputGroupValue.prototype.value;
    /** @type {?} */
    InputGroupValue.prototype.textValue;
    /** @type {?} */
    InputGroupValue.prototype.textField;
    /** @type {?} */
    InputGroupValue.prototype.isInputText;
    /** @type {?} */
    InputGroupValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb25kaXRpb252YWx1ZS9pbnB1dGdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE1BQU0sT0FBTyxlQUFlOzs7O0lBVXhCLFlBQVksT0FLUixFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUM7UUFObkYsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFPeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzdELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsZ0JBQWdCO1FBQ1osSUFBRyxJQUFJLENBQUMsU0FBUyxFQUFDOztrQkFDUixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztrQkFDaEMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUM7WUFDaEYsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzVEO2FBQ0k7WUFDRCxPQUFPLEVBQUUsQ0FBQztTQUNiO0lBQ0wsQ0FBQzs7OztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFHRCxZQUFZLENBQUMsV0FBbUI7O2NBQ3RCLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Y0FDN0IsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFDaEYsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdELENBQUM7Ozs7OztJQUVELFlBQVksQ0FBQyxJQUFTLEVBQUUsSUFBbUI7UUFDdkMsSUFBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQzs7a0JBQ1QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDeEIsSUFBRyxHQUFHLEVBQUM7Z0JBQ0gsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDOUQ7aUJBQ0k7Z0JBQ0QsT0FBTyxFQUFFLENBQUM7YUFDYjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztDQUNKOzs7SUExRUcsZ0NBQWE7O0lBRWIsb0NBQWtCOztJQUVsQixvQ0FBa0I7O0lBRWxCLHNDQUFxQjs7SUFDckIsaUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cFZhbHVlIGltcGxlbWVudHMgSVZhbHVle1xyXG4gICAgLy/lj6/og73mmK/nlKjmiLfmiYvliqjovpPlhaXnmoTlrZfnrKbkuLLvvIzkuZ/lj6/og73mmK/pgJrov4flvLnnqpfov5Tlm57nmoTlpJrkuKrlgLxcclxuICAgIHZhbHVlOiBhbnlbXTtcclxuICAgIC8v5o6n5Lu25YaF5pi+56S655qE5YC8XHJcbiAgICB0ZXh0VmFsdWU6IHN0cmluZztcclxuICAgIC8v5by556qX5qih5byP5LiL77yM5Y+W5by556qX5YiX6KGo5YaF5ZOq5Liq5a2X5q6155qE5YC85pig5bCE5Yiw5b2T5YmN5a2X5q61XHJcbiAgICB0ZXh0RmllbGQ6IHN0cmluZztcclxuICAgIC8v5piv5ZCm5piv5omL5Yqo6L6T5YWl55qE5YC8XHJcbiAgICBpc0lucHV0VGV4dDogYm9vbGVhbjtcclxuICAgIGNsZWFyJCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHtcclxuICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgIHRleHRWYWx1ZTogc3RyaW5nLFxyXG4gICAgICAgIHRleHRGaWVsZDogc3RyaW5nLFxyXG4gICAgICAgIGlzSW5wdXRUZXh0OiBib29sZWFuXHJcbiAgICB9ID0ge3ZhbHVlOiBbXSwgdGV4dFZhbHVlOiB1bmRlZmluZWQsIHRleHRGaWVsZDogdW5kZWZpbmVkLCBpc0lucHV0VGV4dDogdW5kZWZpbmVkfSl7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSBkYXRhLnRleHRWYWx1ZSA/IGRhdGEudGV4dFZhbHVlLnRyaW0oKSA6ICcnO1xyXG4gICAgICAgIHRoaXMudGV4dEZpZWxkID0gZGF0YS50ZXh0RmllbGQ7XHJcbiAgICAgICAgdGhpcy5pc0lucHV0VGV4dCA9IGRhdGEuaXNJbnB1dFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5JbnB1dEdyb3VwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICBpZih0aGlzLnRleHRGaWVsZCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnRleHRGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0QXJyID0gdGhpcy52YWx1ZS5tYXAoaXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShpdGVtLCBjbG9uZURlZXAoYXJncykpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHRBcnIgJiYgdGV4dEFyci5sZW5ndGggPyB0ZXh0QXJyLmpvaW4oJywnKTogJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMudGV4dFZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudGV4dEZpZWxkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaXNJbnB1dFRleHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jbGVhciQuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnRleHRWYWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0VGV4dFZhbHVlKHRhcmdldEZpZWxkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0YXJnZXRGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHRleHRBcnIgPSB0aGlzLnZhbHVlLm1hcChpdGVtID0+IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW0sIGNsb25lRGVlcChhcmdzKSkpO1xyXG4gICAgICAgIHJldHVybiB0ZXh0QXJyICYmIHRleHRBcnIubGVuZ3RoID8gdGV4dEFyci5qb2luKCcsJyk6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb3BWYWx1ZShpdGVtOiBhbnksIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBhbnl7XHJcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBpZihhcmcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bYXJnXSA/IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW1bYXJnXSwgYXJncykgOiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXRlbVthcmdzWzBdXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWYWx1ZVRleHQoKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dFZhbHVlO1xyXG4gICAgfVxyXG59Il19