/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
export class NumberRangeValue {
    /**
     * @param {?=} data
     */
    constructor(data = { startValue: '', endValue: '' }) {
        this.clear$ = new EventEmitter();
        this.startValue = data.startValue ? parseFloat(data.startValue) : null;
        this.endValue = data.endValue ? parseFloat(data.endValue) : null;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    }
    /**
     * @return {?}
     */
    getValueText() {
        if (this.startValue == undefined && this.endValue == undefined) {
            return '';
        }
        else if (this.startValue == undefined) {
            return ('~' + this.endValue);
        }
        else if (this.endValue == undefined) {
            return (this.startValue + '~');
        }
        else {
            return (this.startValue + '~' + this.endValue);
        }
    }
}
if (false) {
    /** @type {?} */
    NumberRangeValue.prototype.startValue;
    /** @type {?} */
    NumberRangeValue.prototype.endValue;
    /** @type {?} */
    NumberRangeValue.prototype.clear$;
}
export class NumberRangeValueConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["startValue"] = dropDownListValue.startValue;
        jobj["endValue"] = dropDownListValue.endValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let numberRangeValue = new NumberRangeValue();
        if (!!(jobj["startValue"])) {
            numberRangeValue.startValue = (/** @type {?} */ (jobj["startValue"]));
        }
        if (!!(jobj["endValue"])) {
            numberRangeValue.endValue = (/** @type {?} */ (jobj["endValue"]));
        }
        return numberRangeValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycmFuZ2V2YXVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL251bWJlcnJhbmdldmF1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0MsTUFBTSxPQUFPLGdCQUFnQjs7OztJQUl6QixZQUFZLE9BQWlELEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO1FBRDdGLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3JFLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsZ0JBQWdCLENBQUMsS0FBVTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGdCQUFnQjtRQUNaLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3JCLENBQUM7SUFDTixDQUFDOzs7O0lBRUQsWUFBWTtRQUNSLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDNUQsT0FBTyxFQUFFLENBQUM7U0FDYjthQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUU7WUFDbkMsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDaEM7YUFDSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFO1lBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ2xDO2FBQ0k7WUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQztDQUNKOzs7SUE1Q0csc0NBQW1COztJQUNuQixvQ0FBaUI7O0lBQ2pCLGtDQUE0Qjs7QUE0Q2hDLE1BQU0sT0FBTyx5QkFBeUI7Ozs7O0lBQ2xDLGVBQWUsQ0FBQyxHQUFXOztZQUNuQixpQkFBaUIsR0FBRyxtQkFBQSxHQUFHLEVBQW9COztZQUMzQyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsY0FBYyxDQUFDLElBQVk7O1lBQ25CLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUU7UUFDN0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRTtZQUN4QixnQkFBZ0IsQ0FBQyxVQUFVLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFVLENBQUM7U0FDOUQ7UUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3RCLGdCQUFnQixDQUFDLFFBQVEsR0FBRyxtQkFBQSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQVUsQ0FBQztTQUMxRDtRQUNELE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTnVtYmVyUmFuZ2VWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICBzdGFydFZhbHVlOiBudW1iZXI7XHJcbiAgICBlbmRWYWx1ZTogbnVtYmVyO1xyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogeyBzdGFydFZhbHVlOiBzdHJpbmcsIGVuZFZhbHVlOiBzdHJpbmcgfSA9IHsgc3RhcnRWYWx1ZTogJycsIGVuZFZhbHVlOiAnJyB9KSB7XHJcbiAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gZGF0YS5zdGFydFZhbHVlID8gcGFyc2VGbG9hdChkYXRhLnN0YXJ0VmFsdWUpIDogbnVsbDtcclxuICAgICAgICB0aGlzLmVuZFZhbHVlID0gZGF0YS5lbmRWYWx1ZSA/IHBhcnNlRmxvYXQoZGF0YS5lbmRWYWx1ZSkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuTnVtYmVyUmFuZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSA9PSBudWxsICYmIHRoaXMuZW5kVmFsdWUgPT0gbnVsbCk7XHJcbiAgICB9XHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmVuZFZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWdpbjogdGhpcy5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICBlbmQ6IHRoaXMuZW5kVmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZhbHVlVGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0VmFsdWUgPT0gdW5kZWZpbmVkICYmIHRoaXMuZW5kVmFsdWUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFydFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKCd+JyArIHRoaXMuZW5kVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmVuZFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSArICd+Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSArICd+JyArIHRoaXMuZW5kVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bWJlclJhbmdlVmFsdWVDb252ZXJ0b3Ige1xyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogSVZhbHVlKTogT2JqZWN0IHtcclxuICAgICAgICBsZXQgZHJvcERvd25MaXN0VmFsdWUgPSBvYmogYXMgTnVtYmVyUmFuZ2VWYWx1ZTtcclxuICAgICAgICBsZXQgam9iaiA9IG5ldyBPYmplY3QoKTtcclxuICAgICAgICBqb2JqW1wic3RhcnRWYWx1ZVwiXSA9IGRyb3BEb3duTGlzdFZhbHVlLnN0YXJ0VmFsdWU7XHJcbiAgICAgICAgam9ialtcImVuZFZhbHVlXCJdID0gZHJvcERvd25MaXN0VmFsdWUuZW5kVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3Qoam9iajogT2JqZWN0KTogTnVtYmVyUmFuZ2VWYWx1ZSB7XHJcbiAgICAgICAgbGV0IG51bWJlclJhbmdlVmFsdWUgPSBuZXcgTnVtYmVyUmFuZ2VWYWx1ZSgpO1xyXG4gICAgICAgIGlmICghIShqb2JqW1wic3RhcnRWYWx1ZVwiXSkpIHtcclxuICAgICAgICAgICAgbnVtYmVyUmFuZ2VWYWx1ZS5zdGFydFZhbHVlID0gam9ialtcInN0YXJ0VmFsdWVcIl0gYXMgbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISEoam9ialtcImVuZFZhbHVlXCJdKSkge1xyXG4gICAgICAgICAgICBudW1iZXJSYW5nZVZhbHVlLmVuZFZhbHVlID0gam9ialtcImVuZFZhbHVlXCJdIGFzIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlclJhbmdlVmFsdWU7XHJcbiAgICB9XHJcbn0iXX0=