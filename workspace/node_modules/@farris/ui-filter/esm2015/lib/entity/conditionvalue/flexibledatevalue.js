/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
export class FlexibleDateValue {
    /**
     * @param {?=} value
     * @param {?=} single
     */
    constructor(value = { startValue: null, endValue: null, value: null }, single = true) {
        this.clear$ = new EventEmitter();
        this.startValue = value.startValue;
        this.endValue = value.endValue;
        this.value = value.value;
        this.single = single;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.FlexibleDate;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (this.single) {
            return !this.value;
        }
        else {
            return (this.startValue == null && this.endValue == null);
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue,
            value: this.value
        };
    }
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    getValueText(ctrl) {
        if (this.single) {
            if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined')) {
                return this.value;
            }
            else {
                if (ctrl && ctrl.format) {
                    /** @type {?} */
                    const dateHlp = new DateTimeHelperService();
                    return dateHlp.formatTo(this.value, ctrl.format);
                }
                return this.value;
            }
        }
        else {
            if (this.startValue == undefined && this.endValue == undefined) {
                return '';
            }
            else {
                if (ctrl && ctrl.format) {
                    /** @type {?} */
                    const dateHlp = new DateTimeHelperService();
                    if (this.startValue == undefined) {
                        return ('~' + dateHlp.formatTo(this.endValue, ctrl.format));
                    }
                    else if (this.endValue == undefined) {
                        return (dateHlp.formatTo(this.startValue, ctrl.format) + '~');
                    }
                    else {
                        return dateHlp.formatTo(this.startValue, ctrl.format) + '~' + dateHlp.formatTo(this.endValue, ctrl.format);
                    }
                }
                else {
                    if (this.startValue == undefined) {
                        return ('~' + this.endValue);
                    }
                    else if (this.endValue == undefined) {
                        return (this.startValue + '~');
                    }
                    else {
                        return (this.startValue + '~' + this.endValue);
                    }
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    FlexibleDateValue.prototype.startValue;
    /** @type {?} */
    FlexibleDateValue.prototype.endValue;
    /** @type {?} */
    FlexibleDateValue.prototype.value;
    /** @type {?} */
    FlexibleDateValue.prototype.single;
    /** @type {?} */
    FlexibleDateValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,