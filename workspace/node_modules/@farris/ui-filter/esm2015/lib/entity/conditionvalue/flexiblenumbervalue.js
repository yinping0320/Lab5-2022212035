/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
export class FlexibleNumberValue {
    /**
     * @param {?=} value
     * @param {?=} single
     */
    constructor(value = { startValue: null, endValue: null, value: null }, single = true) {
        this.clear$ = new EventEmitter();
        this.startValue = value.startValue;
        this.endValue = value.endValue;
        this.value = value.value;
        this.single = single;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.FlexibleNumber;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (this.single) {
            return !this.value;
        }
        else
            return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue,
            value: this.value
        };
    }
    /**
     * @return {?}
     */
    getValueText() {
        if (this.single) {
            if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined' && this.value != 0)) {
                return this.value;
            }
            else {
                return '' + this.value;
            }
        }
        else {
            if (this.startValue == undefined && this.endValue == undefined) {
                return '';
            }
            else if (this.startValue == undefined) {
                return ('~' + this.endValue);
            }
            else if (this.endValue == undefined) {
                return (this.startValue + '~');
            }
            else {
                return (this.startValue + '~' + this.endValue);
            }
        }
    }
}
if (false) {
    /** @type {?} */
    FlexibleNumberValue.prototype.startValue;
    /** @type {?} */
    FlexibleNumberValue.prototype.endValue;
    /** @type {?} */
    FlexibleNumberValue.prototype.value;
    /** @type {?} */
    FlexibleNumberValue.prototype.single;
    /** @type {?} */
    FlexibleNumberValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleGlibGVudW1iZXJ2YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb25kaXRpb252YWx1ZS9mbGV4aWJsZW51bWJlcnZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxNQUFNLE9BQU8sbUJBQW1COzs7OztJQU81QixZQUFZLFFBQWlFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxTQUFrQixJQUFJO1FBRnRKLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsT0FBTyxXQUFXLENBQUMsY0FBYyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDdEI7O1lBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsZ0JBQWdCLENBQUMsS0FBVTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGdCQUFnQjtRQUNaLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ2xCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNwQixDQUFDO0lBQ04sQ0FBQzs7OztJQUdELFlBQVk7UUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ25HLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQzthQUNyQjtpQkFDSTtnQkFDRCxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQzFCO1NBQ0o7YUFDSTtZQUNELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUU7Z0JBQzVELE9BQU8sRUFBRSxDQUFDO2FBQ2I7aUJBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRTtnQkFDbkMsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDaEM7aUJBQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTtnQkFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUM7YUFDbEM7aUJBQ0k7Z0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNsRDtTQUNKO0lBQ0wsQ0FBQztDQUNKOzs7SUFqRUcseUNBQW1COztJQUNuQix1Q0FBaUI7O0lBQ2pCLG9DQUFjOztJQUNkLHFDQUFnQjs7SUFDaEIscUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmxleGlibGVOdW1iZXJWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICBzdGFydFZhbHVlOiBudW1iZXI7XHJcbiAgICBlbmRWYWx1ZTogbnVtYmVyO1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxuICAgIHNpbmdsZTogYm9vbGVhbjtcclxuICAgIGNsZWFyJCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyBzdGFydFZhbHVlOiBudW1iZXIsIGVuZFZhbHVlOiBudW1iZXIsIHZhbHVlOiBudW1iZXIgfSA9IHsgc3RhcnRWYWx1ZTogbnVsbCwgZW5kVmFsdWU6IG51bGwsIHZhbHVlOiBudWxsIH0sIHNpbmdsZTogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB2YWx1ZS5zdGFydFZhbHVlO1xyXG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSB2YWx1ZS5lbmRWYWx1ZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUudmFsdWU7XHJcbiAgICAgICAgdGhpcy5zaW5nbGUgPSBzaW5nbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5GbGV4aWJsZU51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbCAmJiB0aGlzLmVuZFZhbHVlID09IG51bGwpO1xyXG4gICAgfVxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWdpbjogdGhpcy5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICBlbmQ6IHRoaXMuZW5kVmFsdWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0VmFsdWVUZXh0KCk6IGFueSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09IHVuZGVmaW5lZCB8fCAoIXRoaXMudmFsdWUgJiYgdHlwZW9mICh0aGlzLnZhbHVlKSAhPSAndW5kZWZpbmVkJyAmJiB0aGlzLnZhbHVlICE9IDApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJyArIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0VmFsdWUgPT0gdW5kZWZpbmVkICYmIHRoaXMuZW5kVmFsdWUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFydFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgnficgKyB0aGlzLmVuZFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmVuZFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgKyAnficpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgKyAnficgKyB0aGlzLmVuZFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=