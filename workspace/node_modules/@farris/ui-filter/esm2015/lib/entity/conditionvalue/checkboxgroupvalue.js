/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
export class CheckboxGroupValue {
    /**
     * @param {?=} value
     */
    constructor(value = { value: [] }) {
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.CheckboxGroup;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.value.length == 0;
    }
    /**
     * @return {?}
     */
    getValueText() {
        return this.value.join(',');
    }
}
if (false) {
    /** @type {?} */
    CheckboxGroupValue.prototype.value;
    /** @type {?} */
    CheckboxGroupValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3hncm91cHZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2NoZWNrYm94Z3JvdXB2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0MsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUczQixZQUFZLFFBQTBCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQURuRCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsZ0JBQWdCLENBQUMsS0FBWTtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDOzs7O0lBQ0QsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFDRCxjQUFjO1FBQ1YsT0FBTyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUNELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDSjs7O0lBMUJHLG1DQUFhOztJQUNiLG9DQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gJy4vaXZhbHVlJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrYm94R3JvdXBWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICB2YWx1ZTogYW55W107XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyB2YWx1ZTogYW55W10gfSA9IHsgdmFsdWU6IFtdIH0pIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUudmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy5jbGVhciQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogYW55W10pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5DaGVja2JveEdyb3VwO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoID09IDA7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5qb2luKCcsJyk7XHJcbiAgICB9XHJcbn1cclxuIl19