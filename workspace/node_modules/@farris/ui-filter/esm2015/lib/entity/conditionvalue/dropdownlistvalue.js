/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { EnumValueConvert } from '../controltype/dropdownlist/ienumvalue';
export class DropDownListValue {
    /**
     * @param {?=} data
     */
    constructor(data = '') {
        this.clear$ = new EventEmitter();
        this.value = data;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDown;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
    /**
     * @return {?}
     */
    getValueText() {
        return this.value;
    }
}
if (false) {
    /** @type {?} */
    DropDownListValue.prototype.value;
    /** @type {?} */
    DropDownListValue.prototype.clear$;
}
export class DropDownListValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        /** @type {?} */
        let convertor = new EnumValueConvert();
        if (!!(dropDownListValue.value)) {
            // jobj["value"]=convertor.convertJObject(dropDownListValue.value);
            jobj["value"] = dropDownListValue.value;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let dropDownListValue = new DropDownListValue();
        if (!!(jobj["value"])) {
            /** @type {?} */
            let convertor = new EnumValueConvert();
            // dropDownListValue.value=convertor.initFromJobject(jobj["value"]);
            dropDownListValue.value = jobj["value"];
        }
        return dropDownListValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd25saXN0dmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZHJvcGRvd25saXN0dmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBYyxnQkFBZ0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXRGLE1BQU0sT0FBTyxpQkFBaUI7Ozs7SUFHMUIsWUFBWSxPQUFlLEVBQUU7UUFEN0IsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsZ0JBQWdCLENBQUMsS0FBVTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7O0lBQ0QsY0FBYztRQUNWLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsT0FBTztRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFDRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Q0FDSjs7O0lBekJHLGtDQUFjOztJQUNkLG1DQUE0Qjs7QUEwQmhDLE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBQ2pDLGVBQWUsQ0FBQyxHQUFXOztZQUNuQixpQkFBaUIsR0FBRyxtQkFBQSxHQUFHLEVBQXFCOztZQUM1QyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUU7O1lBQ25CLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixFQUFFO1FBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsbUVBQW1FO1lBQ25FLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7U0FDM0M7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxJQUFZOztZQUNuQixpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFO1FBQy9DLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7O2dCQUNmLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixFQUFFO1lBQ3RDLG9FQUFvRTtZQUNwRSxpQkFBaUIsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxpQkFBaUIsQ0FBQztJQUM3QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tICcuL2l2YWx1ZSc7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSAnLi4vY29udHJvbHR5cGUnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSUVudW1WYWx1ZSwgRW51bVZhbHVlQ29udmVydCB9IGZyb20gJy4uL2NvbnRyb2x0eXBlL2Ryb3Bkb3dubGlzdC9pZW51bXZhbHVlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wRG93bkxpc3RWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogc3RyaW5nID0gJycpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gZGF0YTtcclxuICAgIH1cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkRyb3BEb3duO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWVUZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wRG93bkxpc3RWYWx1ZUNvbnZlcnQge1xyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogSVZhbHVlKTogT2JqZWN0IHtcclxuICAgICAgICBsZXQgZHJvcERvd25MaXN0VmFsdWUgPSBvYmogYXMgRHJvcERvd25MaXN0VmFsdWU7XHJcbiAgICAgICAgbGV0IGpvYmogPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgbGV0IGNvbnZlcnRvciA9IG5ldyBFbnVtVmFsdWVDb252ZXJ0KCk7XHJcbiAgICAgICAgaWYgKCEhKGRyb3BEb3duTGlzdFZhbHVlLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAvLyBqb2JqW1widmFsdWVcIl09Y29udmVydG9yLmNvbnZlcnRKT2JqZWN0KGRyb3BEb3duTGlzdFZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgam9ialtcInZhbHVlXCJdID0gZHJvcERvd25MaXN0VmFsdWUudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGpvYmo6IE9iamVjdCk6IERyb3BEb3duTGlzdFZhbHVlIHtcclxuICAgICAgICBsZXQgZHJvcERvd25MaXN0VmFsdWUgPSBuZXcgRHJvcERvd25MaXN0VmFsdWUoKTtcclxuICAgICAgICBpZiAoISEoam9ialtcInZhbHVlXCJdKSkge1xyXG4gICAgICAgICAgICBsZXQgY29udmVydG9yID0gbmV3IEVudW1WYWx1ZUNvbnZlcnQoKTtcclxuICAgICAgICAgICAgLy8gZHJvcERvd25MaXN0VmFsdWUudmFsdWU9Y29udmVydG9yLmluaXRGcm9tSm9iamVjdChqb2JqW1widmFsdWVcIl0pO1xyXG4gICAgICAgICAgICBkcm9wRG93bkxpc3RWYWx1ZS52YWx1ZSA9IGpvYmpbXCJ2YWx1ZVwiXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRyb3BEb3duTGlzdFZhbHVlO1xyXG4gICAgfVxyXG59Il19