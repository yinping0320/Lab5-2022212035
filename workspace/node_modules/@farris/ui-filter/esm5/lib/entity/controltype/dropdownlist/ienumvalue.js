/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EnumType } from "./enumtype";
import { EnumIntegerValue } from "./integerenumvalue";
import { EnumStringValue } from "./stringenumvalue";
import { EnumBoolValue } from "./boolenumvalue";
/**
 * @record
 */
export function IEnumValue() { }
if (false) {
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumType = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValueName = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValue = function () { };
}
var EnumValueConvert = /** @class */ (function () {
    function EnumValueConvert() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    EnumValueConvert.prototype.convertJObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var enumType = enumValue.getEnumType();
        /** @type {?} */
        var jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    EnumValueConvert.prototype.initFromJobject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        var content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    };
    return EnumValueConvert;
}());
export { EnumValueConvert };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWVudW12YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb250cm9sdHlwZS9kcm9wZG93bmxpc3QvaWVudW12YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBRWhELGdDQUlDOzs7OztJQUhHLG1EQUF1Qjs7OztJQUN2Qix3REFBMEI7Ozs7SUFDMUIsb0RBQW1COztBQUd2QjtJQUFBO0lBd0JBLENBQUM7Ozs7O0lBdEJHLHlDQUFjOzs7O0lBQWQsVUFBZSxHQUFjOztZQUNyQixTQUFTLEdBQUMsbUJBQUEsR0FBRyxFQUFjOztZQUMzQixRQUFRLEdBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRTs7WUFDaEMsSUFBSSxHQUFDLElBQUksTUFBTSxFQUFFO1FBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxRQUFRLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFDLFNBQVMsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELDBDQUFlOzs7O0lBQWYsVUFBZ0IsSUFBVzs7WUFDbkIsUUFBUSxHQUFDLG1CQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBWTs7WUFDakMsT0FBTyxHQUFDLG1CQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBYztRQUN6QyxJQUFHLFFBQVEsSUFBRSxRQUFRLENBQUMsT0FBTyxFQUFDO1lBQzFCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUU7U0FDekQ7YUFDSSxJQUFHLFFBQVEsSUFBRSxRQUFRLENBQUMsUUFBUSxFQUFDO1lBQ2hDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFFO1NBQ3REO2FBQ0c7WUFDQSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxlQUFlLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBRTtTQUN4RDtJQUNMLENBQUM7SUFDTCx1QkFBQztBQUFELENBQUMsQUF4QkQsSUF3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnVtVHlwZSB9IGZyb20gXCIuL2VudW10eXBlXCI7XHJcbmltcG9ydCB7IEVudW1JbnRlZ2VyVmFsdWUgfSBmcm9tIFwiLi9pbnRlZ2VyZW51bXZhbHVlXCI7XHJcbmltcG9ydCB7IEVudW1TdHJpbmdWYWx1ZSB9IGZyb20gXCIuL3N0cmluZ2VudW12YWx1ZVwiO1xyXG5pbXBvcnQgeyBFbnVtQm9vbFZhbHVlIH0gZnJvbSBcIi4vYm9vbGVudW12YWx1ZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRW51bVZhbHVle1xyXG4gICAgZ2V0RW51bVR5cGUoKTpFbnVtVHlwZTtcclxuICAgIGdldEVudW1WYWx1ZU5hbWUoKTpzdHJpbmc7XHJcbiAgICBnZXRFbnVtVmFsdWUoKTphbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbnVtVmFsdWVDb252ZXJ0e1xyXG5cclxuICAgIGNvbnZlcnRKT2JqZWN0KG9iajpJRW51bVZhbHVlKTpPYmplY3R7XHJcbiAgICAgICAgbGV0IGVudW1WYWx1ZT1vYmogYXMgSUVudW1WYWx1ZTtcclxuICAgICAgICBsZXQgZW51bVR5cGU9ZW51bVZhbHVlLmdldEVudW1UeXBlKCk7XHJcbiAgICAgICAgbGV0IGpvYmo9bmV3IE9iamVjdCgpO1xyXG4gICAgICAgIGpvYmpbXCJUeXBlXCJdPWVudW1UeXBlO1xyXG4gICAgICAgIGpvYmpbXCJDb250ZW50XCJdPWVudW1WYWx1ZTtcclxuICAgICAgICByZXR1cm4gam9iajtcclxuICAgIH1cclxuXHJcbiAgICBpbml0RnJvbUpvYmplY3Qoam9iajpPYmplY3QpOklFbnVtVmFsdWV7XHJcbiAgICAgICAgbGV0IGVudW1UeXBlPWpvYmpbXCJUeXBlXCJdIGFzIEVudW1UeXBlO1xyXG4gICAgICAgIGxldCBjb250ZW50PWpvYmpbXCJDb250ZW50XCJdIGFzIElFbnVtVmFsdWU7XHJcbiAgICAgICAgaWYoZW51bVR5cGU9PUVudW1UeXBlLkludFR5cGUpe1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRW51bUludGVnZXJWYWx1ZSgpLGNvbnRlbnQpIDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihlbnVtVHlwZT09RW51bVR5cGUuQm9vbFR5cGUpe1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRW51bUJvb2xWYWx1ZSgpLGNvbnRlbnQpIDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVudW1TdHJpbmdWYWx1ZSgpLGNvbnRlbnQpIDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=