/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
var YearRangeValue = /** @class */ (function () {
    function YearRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    YearRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    YearRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    YearRangeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return YearRangeValue;
}());
export { YearRangeValue };
if (false) {
    /** @type {?} */
    YearRangeValue.prototype.startTime;
    /** @type {?} */
    YearRangeValue.prototype.endTime;
    /** @type {?} */
    YearRangeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhcnJhbmdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL3llYXJyYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFL0Q7SUFLSSx3QkFBWSxLQUE4RTtRQUE5RSxzQkFBQSxFQUFBLFVBQWtELFNBQVMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUQxRixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQseUNBQWdCOzs7O0lBQWhCLFVBQWlCLEtBQStDO1FBQzVELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1RDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCO0lBQ0wsQ0FBQzs7OztJQUNELHlDQUFnQjs7O0lBQWhCO1FBQ0ksT0FBVSxJQUFJLENBQUMsU0FBUyxTQUFJLElBQUksQ0FBQyxPQUFTLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELHVDQUFjOzs7SUFBZDtRQUNJLE9BQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUNqQyxDQUFDOzs7O0lBQ0QsbUNBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsZ0NBQU87OztJQUFQO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBQ0QscUNBQVk7Ozs7SUFBWixVQUFhLElBQVM7UUFDbEIsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBRSxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzFFLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O29CQUNmLE9BQU8sR0FBRyxJQUFJLHFCQUFxQixFQUFFO2dCQUMzQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUUsR0FBRyxHQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDMUc7WUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hEO2FBQ0k7WUFDRCxPQUFPLEVBQUUsQ0FBQztTQUNiO0lBQ0wsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQS9DRCxJQStDQzs7OztJQTdDRyxtQ0FBa0I7O0lBQ2xCLGlDQUFnQjs7SUFDaEIsZ0NBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2RhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFllYXJSYW5nZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuXHJcbiAgICBzdGFydFRpbWU6IHN0cmluZztcclxuICAgIGVuZFRpbWU6IHN0cmluZztcclxuICAgIGNsZWFyJCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHN0YXJ0VGltZTogc3RyaW5nLCBlbmRUaW1lOiBzdHJpbmcgfSA9IHsgc3RhcnRUaW1lOiAnJywgZW5kVGltZTogJycgfSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmVuZFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogeyBmb3JtYXR0ZWQ6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcgfSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh2YWx1ZS5mb3JtYXR0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB2YWx1ZS5mb3JtYXR0ZWQuc3BsaXQodmFsdWUuZGVsaW1pdGVyKVswXTtcclxuICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5zdGFydFRpbWV9fiR7dGhpcy5lbmRUaW1lfWA7XHJcbiAgICB9XHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkRhdGVSYW5nZTtcclxuICAgIH1cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zdGFydFRpbWUgfHwgIXRoaXMuZW5kVGltZTtcclxuICAgIH1cclxuICAgIGdldFZhbHVlVGV4dChjdHJsPzphbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIC8vIOWPr+iDveWtmOWcqHRoaXMuc3RhcnRUaW1l5pivdW5kZWZpbmVk55qE5oOF5Ya1XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRUaW1lJiZ0aGlzLnN0YXJ0VGltZS5sZW5ndGgmJnRoaXMuZW5kVGltZSYmdGhpcy5lbmRUaW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoY3RybCAmJiBjdHJsLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZUhscCA9IG5ldyBEYXRlVGltZUhlbHBlclNlcnZpY2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlSGxwLmZvcm1hdFRvKHRoaXMuc3RhcnRUaW1lLCBjdHJsLmZvcm1hdCkgKyd+JysgZGF0ZUhscC5mb3JtYXRUbyh0aGlzLmVuZFRpbWUsIGN0cmwuZm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VGltZSArICd+JyArIHRoaXMuZW5kVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19