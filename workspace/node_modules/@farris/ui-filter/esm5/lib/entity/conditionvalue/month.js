/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
var MonthValue = /** @class */ (function () {
    function MonthValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MonthValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value.formatted;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Date;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    MonthValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    MonthValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (ctrl && ctrl.format) {
            return new DateTimeHelperService().formatTo(this.value, ctrl.format);
        }
        return this.value;
    };
    return MonthValue;
}());
export { MonthValue };
if (false) {
    /** @type {?} */
    MonthValue.prototype.value;
    /** @type {?} */
    MonthValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvbW9udGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRS9EO0lBR0ksb0JBQVksS0FBd0M7UUFBeEMsc0JBQUEsRUFBQSxVQUE2QixLQUFLLEVBQUUsRUFBRSxFQUFFO1FBRHBELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELHFDQUFnQjs7OztJQUFoQixVQUFpQixLQUFVO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNqQyxDQUFDOzs7O0lBQ0QscUNBQWdCOzs7SUFBaEI7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQzs7OztJQUNELG1DQUFjOzs7SUFBZDtRQUNJLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsNEJBQU87OztJQUFQO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdkIsQ0FBQzs7OztJQUNELCtCQUFVOzs7SUFBVjtRQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFDRCxpQ0FBWTs7OztJQUFaLFVBQWEsSUFBVTtRQUNuQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxxQkFBcUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4RTtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQUFDLEFBOUJELElBOEJDOzs7O0lBN0JHLDJCQUFjOztJQUNkLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gJy4vaXZhbHVlJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRlVGltZUhlbHBlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9kYXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNb250aFZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyB2YWx1ZTogc3RyaW5nIH0gPSB7IHZhbHVlOiAnJyB9KSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZS5mb3JtYXR0ZWQ7XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5EYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuICAgIGdldFZhbHVlVGV4dChjdHJsPzogYW55KTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoY3RybCAmJiBjdHJsLmZvcm1hdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lSGVscGVyU2VydmljZSgpLmZvcm1hdFRvKHRoaXMudmFsdWUsIGN0cmwuZm9ybWF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIl19