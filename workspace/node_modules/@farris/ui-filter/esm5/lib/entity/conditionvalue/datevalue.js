/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
var DateValue = /** @class */ (function () {
    function DateValue(value) {
        if (value === void 0) { value = { value: '' }; }
        this.clear$ = new EventEmitter();
        this.value = value.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value.formatted;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.Date;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.value;
    };
    /**
     * @return {?}
     */
    DateValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    DateValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (ctrl && ctrl.format) {
            return new DateTimeHelperService().formatTo(this.value, ctrl.format);
        }
        return this.value;
    };
    return DateValue;
}());
export { DateValue };
if (false) {
    /** @type {?} */
    DateValue.prototype.value;
    /** @type {?} */
    DateValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2RhdGV2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0Q7SUFHSSxtQkFBWSxLQUF3QztRQUF4QyxzQkFBQSxFQUFBLFVBQTZCLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFEcEQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBQ0Qsb0NBQWdCOzs7O0lBQWhCLFVBQWlCLEtBQVU7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFDRCxvQ0FBZ0I7OztJQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7O0lBQ0Qsa0NBQWM7OztJQUFkO1FBQ0ksT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCwyQkFBTzs7O0lBQVA7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN2QixDQUFDOzs7O0lBQ0QsOEJBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUNELGdDQUFZOzs7O0lBQVosVUFBYSxJQUFVO1FBQ25CLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDckIsT0FBTyxJQUFJLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUE3QkQsSUE2QkM7Ozs7SUE1QkcsMEJBQWM7O0lBQ2QsMkJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2RhdGUnO1xyXG5leHBvcnQgY2xhc3MgRGF0ZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyB2YWx1ZTogc3RyaW5nIH0gPSB7IHZhbHVlOiAnJyB9KSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlLmZvcm1hdHRlZDtcclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jbGVhciQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWVUZXh0KGN0cmw/OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChjdHJsICYmIGN0cmwuZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlKCkuZm9ybWF0VG8odGhpcy52YWx1ZSwgY3RybC5mb3JtYXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH1cclxufSJdfQ==