/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from "@farris/ui-common/date";
var DateRangeTimeValue = /** @class */ (function () {
    function DateRangeTimeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateRangeTimeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRangeTime;
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    DateRangeTimeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var fmt = ctrl.format;
                if (ctrl.controltype === 'datetime') {
                    if (ctrl.format.indexOf('HH:mm') === -1) {
                        fmt = ctrl.format + ' HH:mm:ss';
                    }
                }
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, fmt) + '~' + dateHlp.formatTo(this.endTime, fmt);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return DateRangeTimeValue;
}());
export { DateRangeTimeValue };
if (false) {
    /** @type {?} */
    DateRangeTimeValue.prototype.startTime;
    /** @type {?} */
    DateRangeTimeValue.prototype.endTime;
    /** @type {?} */
    DateRangeTimeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdldGltZXZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2RhdGVyYW5nZXRpbWV2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0Q7SUFLSSw0QkFBWSxLQUE4RTtRQUE5RSxzQkFBQSxFQUFBLFVBQWtELFNBQVMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUQxRixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsNkNBQWdCOzs7O0lBQWhCLFVBQWlCLEtBQStDO1FBQzVELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1RDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCO0lBQ0wsQ0FBQzs7OztJQUNELDZDQUFnQjs7O0lBQWhCO1FBQ0ksT0FBVSxJQUFJLENBQUMsU0FBUyxTQUFJLElBQUksQ0FBQyxPQUFTLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELDJDQUFjOzs7SUFBZDtRQUNJLE9BQU8sV0FBVyxDQUFDLGFBQWEsQ0FBQztJQUNyQyxDQUFDOzs7O0lBQ0QsdUNBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBQ0Qsb0NBQU87OztJQUFQO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBQ0QseUNBQVk7Ozs7SUFBWixVQUFhLElBQVU7UUFDbkIsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBRSxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzFFLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O29CQUNqQixHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU07Z0JBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUU7b0JBQ2pDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQ3JDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQztxQkFDbkM7aUJBQ0o7O29CQUVLLE9BQU8sR0FBRyxJQUFJLHFCQUFxQixFQUFFO2dCQUMzQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsR0FBRSxHQUFHLEdBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzFGO1lBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoRDthQUNJO1lBQ0QsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFwREQsSUFvREM7Ozs7SUFsREcsdUNBQWtCOztJQUNsQixxQ0FBZ0I7O0lBQ2hCLG9DQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gXCIuL2l2YWx1ZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gXCIuLi9jb250cm9sdHlwZVwiO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvdWktY29tbW9uL2RhdGVcIjtcclxuZXhwb3J0IGNsYXNzIERhdGVSYW5nZVRpbWVWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcblxyXG4gICAgc3RhcnRUaW1lOiBzdHJpbmc7XHJcbiAgICBlbmRUaW1lOiBzdHJpbmc7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyBzdGFydFRpbWU6IHN0cmluZywgZW5kVGltZTogc3RyaW5nIH0gPSB7IHN0YXJ0VGltZTogJycsIGVuZFRpbWU6ICcnIH0pIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHZhbHVlLnN0YXJ0VGltZTtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5lbmRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IHsgZm9ybWF0dGVkOiBzdHJpbmcsIGRlbGltaXRlcjogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmFsdWUuZm9ybWF0dGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMF07XHJcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhcnRUaW1lfX4ke3RoaXMuZW5kVGltZX1gO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5EYXRlUmFuZ2VUaW1lO1xyXG4gICAgfVxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jbGVhciQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuc3RhcnRUaW1lIHx8ICF0aGlzLmVuZFRpbWU7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZVRleHQoY3RybD86IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgLy8g5Y+v6IO95a2Y5ZyodGhpcy5zdGFydFRpbWXmmK91bmRlZmluZWTnmoTmg4XlhrVcclxuICAgICAgICBpZiAodGhpcy5zdGFydFRpbWUmJnRoaXMuc3RhcnRUaW1lLmxlbmd0aCYmdGhpcy5lbmRUaW1lJiZ0aGlzLmVuZFRpbWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChjdHJsICYmIGN0cmwuZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm10ID0gY3RybC5mb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3RybC5jb250cm9sdHlwZSA9PT0gJ2RhdGV0aW1lJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLmZvcm1hdC5pbmRleE9mKCdISDptbScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbXQgPSBjdHJsLmZvcm1hdCArICcgSEg6bW06c3MnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZUhscCA9IG5ldyBEYXRlVGltZUhlbHBlclNlcnZpY2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlSGxwLmZvcm1hdFRvKHRoaXMuc3RhcnRUaW1lLCBmbXQpICsnficrIGRhdGVIbHAuZm9ybWF0VG8odGhpcy5lbmRUaW1lLCBmbXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zdGFydFRpbWUgKyAnficgKyB0aGlzLmVuZFRpbWUpOyBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJzsgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=