/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
var MonthRangeValue = /** @class */ (function () {
    function MonthRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MonthRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    MonthRangeValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        // 可能存在this.startTime是undefined的情况
        if (this.startTime && this.startTime.length && this.endTime && this.endTime.length) {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                var dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
        else {
            return '';
        }
    };
    return MonthRangeValue;
}());
export { MonthRangeValue };
if (false) {
    /** @type {?} */
    MonthRangeValue.prototype.startTime;
    /** @type {?} */
    MonthRangeValue.prototype.endTime;
    /** @type {?} */
    MonthRangeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhyYW5nZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb25kaXRpb252YWx1ZS9tb250aHJhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUvRDtJQUtJLHlCQUFZLEtBQThFO1FBQTlFLHNCQUFBLEVBQUEsVUFBa0QsU0FBUyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBRDFGLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCwwQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsS0FBK0M7UUFDNUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7O0lBQ0QsMENBQWdCOzs7SUFBaEI7UUFDSSxPQUFVLElBQUksQ0FBQyxTQUFTLFNBQUksSUFBSSxDQUFDLE9BQVMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBQ0Qsd0NBQWM7OztJQUFkO1FBQ0ksT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFDRCxvQ0FBVTs7O0lBQVY7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxpQ0FBTzs7O0lBQVA7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFDRCxzQ0FBWTs7OztJQUFaLFVBQWEsSUFBVTtRQUNuQixrQ0FBa0M7UUFDbEMsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFFLElBQUksQ0FBQyxPQUFPLElBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDMUUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTs7b0JBQ2YsT0FBTyxHQUFHLElBQUkscUJBQXFCLEVBQUU7Z0JBQzNDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRSxHQUFHLEdBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMxRztZQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDaEQ7YUFBTTtZQUNILE9BQU8sRUFBRSxDQUFDO1NBQ2I7SUFDTCxDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBOUNELElBOENDOzs7O0lBNUNHLG9DQUFrQjs7SUFDbEIsa0NBQWdCOztJQUNoQixpQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tICcuL2l2YWx1ZSc7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSAnLi4vY29udHJvbHR5cGUnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vZGF0ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9udGhSYW5nZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuXHJcbiAgICBzdGFydFRpbWU6IHN0cmluZztcclxuICAgIGVuZFRpbWU6IHN0cmluZztcclxuICAgIGNsZWFyJCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHN0YXJ0VGltZTogc3RyaW5nLCBlbmRUaW1lOiBzdHJpbmcgfSA9IHsgc3RhcnRUaW1lOiAnJywgZW5kVGltZTogJycgfSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmVuZFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogeyBmb3JtYXR0ZWQ6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcgfSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh2YWx1ZS5mb3JtYXR0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB2YWx1ZS5mb3JtYXR0ZWQuc3BsaXQodmFsdWUuZGVsaW1pdGVyKVswXTtcclxuICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5zdGFydFRpbWV9fiR7dGhpcy5lbmRUaW1lfWA7XHJcbiAgICB9XHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkRhdGVSYW5nZTtcclxuICAgIH1cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zdGFydFRpbWUgfHwgIXRoaXMuZW5kVGltZTtcclxuICAgIH1cclxuICAgIGdldFZhbHVlVGV4dChjdHJsPzogYW55KTogc3RyaW5nIHtcclxuICAgICAgICAvLyDlj6/og73lrZjlnKh0aGlzLnN0YXJ0VGltZeaYr3VuZGVmaW5lZOeahOaDheWGtVxyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0VGltZSYmdGhpcy5zdGFydFRpbWUubGVuZ3RoJiZ0aGlzLmVuZFRpbWUmJnRoaXMuZW5kVGltZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKGN0cmwgJiYgY3RybC5mb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVIbHAgPSBuZXcgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUhscC5mb3JtYXRUbyh0aGlzLnN0YXJ0VGltZSwgY3RybC5mb3JtYXQpICsnficrIGRhdGVIbHAuZm9ybWF0VG8odGhpcy5lbmRUaW1lLCBjdHJsLmZvcm1hdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zdGFydFRpbWUgKyAnficgKyB0aGlzLmVuZFRpbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19