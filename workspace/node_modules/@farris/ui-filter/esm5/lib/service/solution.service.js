/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var SolutionService = /** @class */ (function () {
    function SolutionService() {
    }
    /**
     * @return {?}
     */
    SolutionService.prototype.getGuid = /**
     * @return {?}
     */
    function () {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    };
    /**
     * @private
     * @return {?}
     */
    SolutionService.prototype.s4 = /**
     * @private
     * @return {?}
     */
    function () {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    /**
    * 根据字段获取Lable控件的Title
    * @param field
    */
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    SolutionService.prototype.getConditionItemTitle = /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    };
    /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param input
     */
    /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param {?} input
     * @return {?}
     */
    SolutionService.prototype.arrayClone = /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    };
    SolutionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SolutionService.ctorParameters = function () { return []; };
    return SolutionService;
}());
export { SolutionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQztJQUdFO0lBQWdCLENBQUM7Ozs7SUFFakIsaUNBQU87OztJQUFQO1FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakksQ0FBQzs7Ozs7SUFFTyw0QkFBRTs7OztJQUFWO1FBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBQ0Q7OztNQUdFOzs7Ozs7SUFDRiwrQ0FBcUI7Ozs7O0lBQXJCLFVBQXNCLEtBQXFCO1FBQ3pDLElBQUksS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUMvQixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSCxvQ0FBVTs7Ozs7SUFBVixVQUFXLEtBQWlCOztZQUN0QixNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQU87UUFDN0IsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsS0FBSyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLE9BQU87Z0JBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMxQyxDQUFDLEVBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Z0JBbENGLFVBQVU7Ozs7SUFtQ1gsc0JBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQWxDWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTb2x1dGlvblNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBnZXRHdWlkKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLnM0KCkgKyB0aGlzLnM0KCkgKyBcIi1cIiArIHRoaXMuczQoKSArIFwiLVwiICsgdGhpcy5zNCgpICsgXCItXCIgKyB0aGlzLnM0KCkgKyBcIi1cIiArIHRoaXMuczQoKSArIHRoaXMuczQoKSArIHRoaXMuczQoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHM0KCkge1xyXG4gICAgcmV0dXJuICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgKiDmoLnmja7lrZfmrrXojrflj5ZMYWJsZeaOp+S7tueahFRpdGxlXHJcbiAgKiBAcGFyYW0gZmllbGQgXHJcbiAgKi9cclxuICBnZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICBpZiAoZmllbGQuaWQgJiYgZmllbGQuaWQgIT09ICcnKSB7XHJcbiAgICAgIHJldHVybiBmaWVsZC5maWVsZE5hbWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmlbDnu4TlhYvpmoYg5Lmf5Y+v5L2/55SoSlNPTi5QYXJzZShKU09OLlN0cmluZ2lmeShbaW5wdXRdKSks5YmN5o+Q57G757uT5p6E5Lit5rKh5pyJ5YCf5Y+jXHJcbiAgICogQHBhcmFtIGlucHV0IFxyXG4gICAqL1xyXG4gIGFycmF5Q2xvbmUoaW5wdXQ6IEFycmF5PGFueT4pOiBBcnJheTxhbnk+IHtcclxuICAgIGxldCByZXN1bHQgPSBuZXcgQXJyYXk8YW55PigpO1xyXG4gICAgaWYgKGlucHV0ICYmIGlucHV0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgaW5wdXQuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICByZXN1bHQucHVzaChPYmplY3QuYXNzaWduKHt9LCBlbGVtZW50KSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIl19