/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
var SearchComponent = /** @class */ (function () {
    function SearchComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    Object.defineProperty(SearchComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item) {
            this.placeholder = this.item.placeHolder || '';
            // const type = Object.prototype.toString.call(this.item.placeHolder);
            // if(type == '[object Undefined]'){
            //     if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
            //         this.placeholder = this.item.control.placeholder;
            //     }
            // }
            // else{
            //     this.placeholder = this.item.placeHolder;
            // }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    SearchComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchComponent.prototype.onSearch = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit($event);
    };
    SearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-search',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" \r\n    [(ngModel)]=\"item.value.value\" (clear)=\"onSearch($event)\" (blurHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SearchComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    SearchComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return SearchComponent;
}());
export { SearchComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    SearchComponent.prototype.item;
    /** @type {?} */
    SearchComponent.prototype.autoLabel;
    /** @type {?} */
    SearchComponent.prototype.disabled;
    /** @type {?} */
    SearchComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    SearchComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    SearchComponent.prototype.showlabel;
    /** @type {?} */
    SearchComponent.prototype.placeholder;
    /** @type {?} */
    SearchComponent.prototype.groupIcon;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc2VhcmNoY29tcG9uZW50L3NlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixXQUFXLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFakU7SUFpQ0kseUJBQW9CLGVBQStCO1FBQS9CLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQXBCM0IsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBRzFELFdBQU0sR0FBVyxLQUFLLENBQUM7Ozs7UUFFdkIsY0FBUyxHQUFXLElBQUksQ0FBQztRQWF6QixjQUFTLEdBQUcseUNBQXlDLENBQUM7SUFFRCxDQUFDO0lBWnRELHNCQUNJLHFDQUFROzs7O1FBRFo7WUFFSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBRUQsc0JBQ0ksdUNBQVU7Ozs7UUFEZDtZQUVJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzNCLENBQUM7OztPQUFBOzs7O0lBTUQsa0NBQVE7OztJQUFSO1FBQ0ksSUFBRyxJQUFJLENBQUMsSUFBSSxFQUFDO1lBQ1QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7WUFDL0Msc0VBQXNFO1lBQ3RFLG9DQUFvQztZQUNwQyxnRkFBZ0Y7WUFDaEYsNERBQTREO1lBQzVELFFBQVE7WUFDUixJQUFJO1lBQ0osUUFBUTtZQUNSLGdEQUFnRDtZQUNoRCxJQUFJO1NBQ1A7UUFDRCxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBQzlFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDO2dCQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2hEO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQscUNBQVc7OztJQUFYO0lBRUEsQ0FBQztJQUVELG1FQUFtRTtJQUNuRSw0RUFBNEU7SUFDNUUsSUFBSTs7Ozs7Ozs7SUFFSiwrQ0FBcUI7Ozs7Ozs7O0lBQXJCLFVBQXNCLEtBQW9CO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7OztJQUVELGtDQUFROzs7O0lBQVIsVUFBUyxNQUFNO1FBQ1gsSUFBRyxJQUFJLENBQUMsUUFBUSxFQUFDO1lBQUMsT0FBTztTQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dCQXZFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsK25CQUFzQztpQkFDekM7Ozs7Z0JBTFEsZUFBZTs7O3VCQVluQixLQUFLOzRCQUNMLEtBQUs7MkJBQ0wsS0FBSzsrQkFDTCxNQUFNLFNBQUMsY0FBYzsyQkFRckIsV0FBVyxTQUFDLHdCQUF3Qjs2QkFLcEMsV0FBVyxTQUFDLCtCQUErQjs7SUE4Q2hELHNCQUFDO0NBQUEsQUF4RUQsSUF3RUM7U0FuRVksZUFBZTs7Ozs7O0lBS3hCLCtCQUFrQjs7SUFDbEIsb0NBQTJCOztJQUMzQixtQ0FBMEI7O0lBQzFCLHVDQUEwRDs7Ozs7SUFHMUQsaUNBQXVCOzs7OztJQUV2QixvQ0FBeUI7O0lBQ3pCLHNDQUFvQjs7SUFZcEIsb0NBQXNEOzs7OztJQUUxQywwQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIE9uQ2hhbmdlcywgSG9zdEJpbmRpbmcsIE91dHB1dCwgRXZlbnRFbWl0dGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBTb2x1dGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL3NvbHV0aW9uLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2FwcC1maWx0ZXItc2VhcmNoJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2guY29tcG9uZW50Lmh0bWwnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgU2VhcmNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LE9uQ2hhbmdlc3tcclxuICAgXHJcbiAgICAvKipcclxuICAgICAqIFF1ZXJ5Q29uZGl0aW9u57G75Z6LXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGl0ZW06YW55O1xyXG4gICAgQElucHV0KCkgYXV0b0xhYmVsOmJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDpib29sZWFuO1xyXG4gICAgQE91dHB1dCgnc2VhcmNoSGFuZGxlJykgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIC8qKuWIpOaWreaYr+WQpuaYr+WcqOaJqeWxleWMuuWfn+WxleekuiAqL1xyXG4gICAgZXh0ZW5kOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKuWIpOaWreaYr+WQpuaYvuekumxhYmVsICovXHJcbiAgICBzaG93bGFiZWw6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0td3JhcCcpXHJcbiAgICBnZXQgaXNFeHRlbmQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmV4dGVuZCAmJiB0aGlzLmF1dG9MYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZpbHRlci1pdGVtLWhpZGRlbmxhYmVsJylcclxuICAgIGdldCBoaWRlbkxhYmVsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zaG93bGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgZ3JvdXBJY29uID0gJzxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1zZWFyY2hcIj48L3NwYW4+JztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvbHV0aW9uU2VydmljZTpTb2x1dGlvblNlcnZpY2Upe31cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZih0aGlzLml0ZW0pe1xyXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLnBsYWNlSG9sZGVyIHx8ICcnO1xyXG4gICAgICAgICAgICAvLyBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMuaXRlbS5wbGFjZUhvbGRlcik7XHJcbiAgICAgICAgICAgIC8vIGlmKHR5cGUgPT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpe1xyXG4gICAgICAgICAgICAvLyAgICAgaWYodGhpcy5pdGVtLmNvbnRyb2wgJiYgdGhpcy5pdGVtLmNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ3BsYWNlaG9sZGVyJykpe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0uY29udHJvbC5wbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBlbHNle1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5wbGFjZUhvbGRlcjtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLml0ZW0gJiYgdGhpcy5pdGVtLmNvbnRyb2wgJiYgdGhpcy5pdGVtLmNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2lzRXh0ZW5kJykpe1xyXG4gICAgICAgICAgICB0aGlzLmV4dGVuZCA9IHRoaXMuaXRlbS5jb250cm9sLmlzRXh0ZW5kO1xyXG4gICAgICAgICAgICBpZighdGhpcy5leHRlbmQpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93bGFiZWwgPSB0aGlzLml0ZW0uY29udHJvbC5zaG93TGFiZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0Q29uZGl0aW9uSXRlbVN0eWxlKGZpZWxkOiBRdWVyeUNvbmRpdGlvbiwgY29udHJvbFR5cGU6IGFueSkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQsY29udHJvbFR5cGUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIGdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZDpRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWFyY2goJGV2ZW50KXtcclxuICAgICAgICBpZih0aGlzLmRpc2FibGVkKXtyZXR1cm47fVxyXG4gICAgICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxufSJdfQ==