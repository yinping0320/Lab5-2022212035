/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { SolutionService } from '../../service/solution.service';
import { CheckboxValue } from '../../entity/controltype/checkbox/checkboxvalue';
import { CheckboxGroupValue } from '../../entity/conditionvalue/checkboxgroupvalue';
var filterCheckboxComponent = /** @class */ (function () {
    function filterCheckboxComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.boolcheck = false;
        this.indeterminate = true;
        this.boolCheckState = 'indeterminate';
        this.selectCheck = [];
        this.cla = true;
        this.checkboxDataSource = new Array();
    }
    Object.defineProperty(filterCheckboxComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterCheckboxComponent.prototype, "isCheckExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterCheckboxComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //this.checkValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            this.boolcheck = this.item.control.boolcheck;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.checkValue = this.item.value.getOriginalValue();
        if (this.boolcheck) {
            if (this.checkValue.length) {
                this.boolchecked = this.checkValue[0];
                if (this.boolchecked)
                    this.boolCheckState = 'checked';
                else
                    this.boolCheckState = 'unchecked';
            }
            else
                this.boolCheckState = 'indeterminate';
        }
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.CheckboxGroup) {
            /** @type {?} */
            var checkboxList = ((/** @type {?} */ (this.item.control)));
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.checkboxDataSource.push(Object.assign(new CheckboxValue(), element));
                }));
            }
        }
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
        //     this.extend = this.item.control.isExtend;
        // }
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    filterCheckboxComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    filterCheckboxComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            var checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.item.value.value = checkboxValue;
        }
        else {
            this.item.value.value = new CheckboxGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    filterCheckboxComponent.prototype.handleClick = /**
     * @return {?}
     */
    function () {
        if (this.boolCheckState == 'indeterminate') {
            this.boolCheckState = 'checked';
            this.boolchecked = true;
            this.item.value.value = [true];
        }
        else if (this.boolCheckState == 'checked') {
            this.boolCheckState = 'unchecked';
            this.boolchecked = false;
            this.item.value.value = [false];
        }
        else if (this.boolCheckState == 'unchecked') {
            this.boolCheckState = 'indeterminate';
            this.boolchecked = null;
            this.item.value.value = [];
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    filterCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-checkbox',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel && !boolcheck\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\" *ngIf=\"!boolcheck\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <ng-container *ngIf=\"!boolcheck; else elseTemplate\">\r\n        <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\" [data]=\"checkboxDataSource\"\r\n            [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n        </farris-checkboxgroup>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"custom-control custom-checkbox custom-control-inline filter-bool-checkbox\">\r\n            <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"boolchecked\" [indeterminate]=\"boolCheckState == 'indeterminate'\">\r\n            <label class=\"custom-control-label\" (click)=\"handleClick()\">{{item.fieldName}}</label>\r\n        </div>\r\n    </ng-template>\r\n</div>"
                    // encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    filterCheckboxComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    filterCheckboxComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
        cla: [{ type: HostBinding, args: ['class.filter-item-checkboxgroup',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return filterCheckboxComponent;
}());
export { filterCheckboxComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    filterCheckboxComponent.prototype.item;
    /** @type {?} */
    filterCheckboxComponent.prototype.autoLabel;
    /** @type {?} */
    filterCheckboxComponent.prototype.disabled;
    /** @type {?} */
    filterCheckboxComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    filterCheckboxComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    filterCheckboxComponent.prototype.showlabel;
    /** @type {?} */
    filterCheckboxComponent.prototype.boolcheck;
    /** @type {?} */
    filterCheckboxComponent.prototype.checkValue;
    /** @type {?} */
    filterCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    filterCheckboxComponent.prototype.boolchecked;
    /** @type {?} */
    filterCheckboxComponent.prototype.boolCheckState;
    /** @type {?} */
    filterCheckboxComponent.prototype.selectCheck;
    /** @type {?} */
    filterCheckboxComponent.prototype.cla;
    /** @type {?} */
    filterCheckboxComponent.prototype.checkboxDataSource;
    /**
     * @type {?}
     * @private
     */
    filterCheckboxComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,