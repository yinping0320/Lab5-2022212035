import { Injectable, NgModule, Component, Input, Output, EventEmitter, ElementRef, HostBinding, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TagService = /** @class */ (function () {
    function TagService() {
    }
    TagService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TagService.ctorParameters = function () { return []; };
    /** @nocollapse */ TagService.ngInjectableDef = defineInjectable({ factory: function TagService_Factory() { return new TagService(); }, token: TagService, providedIn: "root" });
    return TagService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisTagComponent = /** @class */ (function () {
    function FarrisTagComponent(el) {
        this.el = el;
        /* 类型样式 */
        this.type = 'secondary';
        /* close emit事件 */
        this.close = new EventEmitter();
        this.exist = true;
        /* tag广播事件 */
        this.selectValue = new EventEmitter();
    }
    Object.defineProperty(FarrisTagComponent.prototype, "size", {
        /* 标签大小 */
        get: /* 标签大小 */
        /**
         * @return {?}
         */
        function () {
            if (this.nySize === 'small') {
                return 'sm';
            }
            else if (this.nySize === 'large') {
                return 'lg';
            }
            else {
                return 'md';
            }
        },
        set: /**
         * @param {?} size
         * @return {?}
         */
        function (size) {
            this.nySize = size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisTagComponent.prototype.tagClass = /**
     * @return {?}
     */
    function () {
        return true;
    };
    Object.defineProperty(FarrisTagComponent.prototype, "active", {
        /* tag 是否选中 */
        get: /* tag 是否选中 */
        /**
         * @return {?}
         */
        function () {
            return this.nyActive;
        },
        set: /**
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this.nyActive = active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisTagComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FarrisTagComponent.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.nyActive = !this.nyActive;
        this.selectValue.emit({
            value: this.value,
            active: this.active
        });
    };
    /**
     * @return {?}
     */
    FarrisTagComponent.prototype.hasParent = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.parentElement.classList.contains('farris-tag');
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FarrisTagComponent.prototype.closeHandler = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        this.exist = false;
        this.close.emit(this.value);
    };
    FarrisTagComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-tag',
                    template: "\n    <span [class]=\"'btn btn-'+ type +' btn-'+ size\"\n    [class.active]=\"active\"\n    [class.disabled]=\"disabled\"\n    [class.farris-tag-disabled]=\"disabled\"\n    (click)=\"getValue()\" *ngIf=\"exist\">\n      <ng-content></ng-content>\n      &nbsp;\n      <i class=\"k-icon k-i-close\" *ngIf=\"closable\" (click)=\"closeHandler($event)\"></i>\n    </span>\n  ",
                    styles: [".k-icon.k-i-close{font-size:12px}.k-icon.k-i-close:hover{cursor:pointer}:host .btn{margin-left:5px}:host .farris-tag-disabled{cursor:text}"]
                }] }
    ];
    /** @nocollapse */
    FarrisTagComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FarrisTagComponent.propDecorators = {
        size: [{ type: Input }],
        type: [{ type: Input }],
        text: [{ type: Input }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        closable: [{ type: Input }],
        close: [{ type: Output }],
        tagClass: [{ type: HostBinding, args: ['class.farris-tag',] }],
        selectValue: [{ type: Output }]
    };
    return FarrisTagComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisTagModule = /** @class */ (function () {
    function FarrisTagModule() {
    }
    FarrisTagModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FarrisTagComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [FarrisTagComponent]
                },] }
    ];
    return FarrisTagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TagService, FarrisTagComponent, FarrisTagModule };

//# sourceMappingURL=farris-ui-tag.js.map