import { Injectable, NgModule, Component, Input, Output, EventEmitter, ElementRef, HostBinding, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TagService {
    constructor() { }
}
TagService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TagService.ctorParameters = () => [];
/** @nocollapse */ TagService.ngInjectableDef = defineInjectable({ factory: function TagService_Factory() { return new TagService(); }, token: TagService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisTagComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        /* 类型样式 */
        this.type = 'secondary';
        /* close emit事件 */
        this.close = new EventEmitter();
        this.exist = true;
        /* tag广播事件 */
        this.selectValue = new EventEmitter();
    }
    /* 标签大小 */
    /**
     * @return {?}
     */
    get size() {
        if (this.nySize === 'small') {
            return 'sm';
        }
        else if (this.nySize === 'large') {
            return 'lg';
        }
        else {
            return 'md';
        }
    }
    /**
     * @param {?} size
     * @return {?}
     */
    set size(size) {
        this.nySize = size;
    }
    /**
     * @return {?}
     */
    tagClass() {
        return true;
    }
    /* tag 是否选中 */
    /**
     * @return {?}
     */
    get active() {
        return this.nyActive;
    }
    ;
    /**
     * @param {?} active
     * @return {?}
     */
    set active(active) {
        this.nyActive = active;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getValue() {
        if (this.disabled) {
            return;
        }
        this.nyActive = !this.nyActive;
        this.selectValue.emit({
            value: this.value,
            active: this.active
        });
    }
    /**
     * @return {?}
     */
    hasParent() {
        return this.el.nativeElement.parentElement.classList.contains('farris-tag');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    closeHandler(e) {
        e.preventDefault();
        this.exist = false;
        this.close.emit(this.value);
    }
}
FarrisTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-tag',
                template: `
    <span [class]="'btn btn-'+ type +' btn-'+ size"
    [class.active]="active"
    [class.disabled]="disabled"
    [class.farris-tag-disabled]="disabled"
    (click)="getValue()" *ngIf="exist">
      <ng-content></ng-content>
      &nbsp;
      <i class="k-icon k-i-close" *ngIf="closable" (click)="closeHandler($event)"></i>
    </span>
  `,
                styles: [".k-icon.k-i-close{font-size:12px}.k-icon.k-i-close:hover{cursor:pointer}:host .btn{margin-left:5px}:host .farris-tag-disabled{cursor:text}"]
            }] }
];
/** @nocollapse */
FarrisTagComponent.ctorParameters = () => [
    { type: ElementRef }
];
FarrisTagComponent.propDecorators = {
    size: [{ type: Input }],
    type: [{ type: Input }],
    text: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    closable: [{ type: Input }],
    close: [{ type: Output }],
    tagClass: [{ type: HostBinding, args: ['class.farris-tag',] }],
    selectValue: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisTagModule {
}
FarrisTagModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FarrisTagComponent],
                imports: [
                    CommonModule
                ],
                exports: [FarrisTagComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TagService, FarrisTagComponent, FarrisTagModule };

//# sourceMappingURL=farris-ui-tag.js.map