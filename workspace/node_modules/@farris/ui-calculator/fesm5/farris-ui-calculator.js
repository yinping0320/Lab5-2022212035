import { __spread } from 'tslib';
import { Injectable, Component, Directive, HostListener, Renderer2, ElementRef, ChangeDetectorRef, NgModule, defineInjectable } from '@angular/core';
import { NotifyService, NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CalculatorService = /** @class */ (function () {
    function CalculatorService() {
    }
    CalculatorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CalculatorService.ctorParameters = function () { return []; };
    /** @nocollapse */ CalculatorService.ngInjectableDef = defineInjectable({ factory: function CalculatorService_Factory() { return new CalculatorService(); }, token: CalculatorService, providedIn: "root" });
    return CalculatorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CalculatorComponent = /** @class */ (function () {
    function CalculatorComponent() {
    }
    /**
     * @return {?}
     */
    CalculatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    CalculatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-calculator',
                    template: "<div class=\"standard-main\" id=\"std-main\" #calculator farrisCalculator>\n  <div class=\"title\">\n    &nbsp;&nbsp;\u8BA1\u7B97\u5668\n  </div>\n  <!--\u7ED3\u679C\u663E\u793A\u533A\u57DF-->\n  <div class=\"result\">\n    <!--\u663E\u793A\u7C7B\u578B\u4FE1\u606F-->\n    <div class=\"type\" id=\"std-show-bar\">\n    \u2630&nbsp;&nbsp;&nbsp;Stanard\n    </div>\n    <!--\u4E0A\u4E00\u6B65\u7684\u7ED3\u679C-->\n    <div class=\"pre\">\n      <div class=\"pre_left\" style=\"display:none;\">&lt;</div>\n      <div class=\"pre_content\" id=\"std-pre-step\">\n        &nbsp;\n      </div>\n      <div class=\"pre_right\" style=\"display:none;\">&gt;</div>\n    </div>\n    <!--\u7B2C\u4E8C\u4E2A/\u8FD0\u7B97\u7ED3\u679C-->\n    <div class=\"res_out\">\n      <div class=\"second\" id=\"std-show-input\">0</div>\n    </div>\n  </div>\n  <!--\u6570\u5B57\u548C\u7B26\u53F7-->\n  <ul id=\"std-num-symbol\">\n    <li value=\"37\" class=\"letter\">CE</li>\n    <li value=\"38\" class=\"letter\">C</li>\n    <li value=\"39\" class=\"letter\">Back</li>\n    <li value=\"16\" class=\"operator\">\u00F7</li>\n    <li class=\"number\" value=\"7\">7</li>\n    <li class=\"number\" value=\"8\">8</li>\n    <li class=\"number\" value=\"9\">9</li>\n    <li value=\"15\" class=\"operator\">\u00D7</li>\n    <li class=\"number\" value=\"4\">4</li>\n    <li class=\"number\" value=\"5\">5</li>\n    <li class=\"number\" value=\"6\">6</li>\n    <li value=\"14\" class=\"operator\">-</li>\n    <li class=\"number\" value=\"1\">1</li>\n    <li class=\"number\" value=\"2\">2</li>\n    <li class=\"number\" value=\"3\">3</li>\n    <li value=\"13\" class=\"operator\">+</li>\n    <li value=\"11\">\u00B1</li>\n    <li class=\"number\" value=\"0\">0</li>\n    <li value=\"10\">.</li>\n    <li value=\"12\" class=\"operator\">=</li>\n  </ul>\n</div>\n  ",
                    styles: [".programmer-main,.science-main,.standard-main{background-color:#f1f1f1;margin:0 auto;box-shadow:0 0 15px #4d4d4d}ul{list-style:none;margin:0;padding:0}li{float:left;text-align:center;cursor:pointer}li img{height:14px}.title{padding:5px 0;height:30px;line-height:30px}.result{height:140px;text-align:right;width:100%}.res_out{width:335px;margin:0 5px;height:48px;overflow:hidden}.second{font-size:42px;font-weight:700;overflow-y:auto;white-space:nowrap;text-align:right}.pre{color:#a7a7a7;padding:0 20px;font-size:16px;height:24px;width:100%;overflow:hidden;position:relative;z-index:99}.pre .pre_left{width:16px;text-align:center;line-height:20px;height:24px;position:absolute;z-index:101;left:0;top:0;font-weight:600;cursor:pointer;background:#f1f1f1}.pre .pre_right{width:16px;text-align:center;line-height:20px;height:24px;position:absolute;z-index:101;right:0;top:0;font-weight:600;cursor:pointer;background:#f1f1f1}.pre .pre_content{text-align:right;height:24px;line-height:24px;white-space:nowrap;overflow-y:auto;overflow-x:hidden}.pre_left:hover,.pre_right:hover{color:#1853d1;background:#9b9b9b}.type{height:auto;text-align:left;font-weight:700;margin:10px 0 20px 10px;font-size:22px}.type-bar{display:none;height:90px;width:100px;position:absolute;top:110px;background-color:#e6e6e6}.type-bar li{float:left;width:100px;text-align:center;line-height:30px}.active{background-color:#cfcfcf}.number{font-weight:700;border:1px solid #fff!important;background:#fff!important}.number:hover{border:1px solid #f1f1f1!important;background:#c6c6c6!important}.operator:hover{border:1px solid #f1f1f1!important;background:#82bceb!important;color:#fff}.letter{font-size:16px}.standard-main{width:345px;height:460px}#std-num-symbol{height:270px;font-size:20px}#std-num-symbol li{line-height:48px;width:80px;margin:5px 0 0 5px;background:#dedede;border:1px solid #dedede}#std-num-symbol li:hover{background:#c6c6c6;border:1px solid #f1f1f1}"]
                }] }
    ];
    /** @nocollapse */
    CalculatorComponent.ctorParameters = function () { return []; };
    return CalculatorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @desc 解决浮动运算问题，避免小数点后产生多位数和计算精度损失。
 * 问题示例：2.3 + 2.4 = 4.699999999999999，1.0 - 0.9 = 0.09999999999999998
 */
/**
 * 把错误的数据转正
 * strip(0.09999999999999998)=0.1
 * @param {?} num
 * @param {?=} precision
 * @return {?}
 */
function strip(num, precision) {
    if (precision === void 0) { precision = 12; }
    return +parseFloat(num.toPrecision(precision));
}
/**
 * Return digits length of a number
 * @param {?} num Input number
 * @return {?}
 */
function digitLength(num) {
    // Get digit length of e
    /** @type {?} */
    var eSplit = num.toString().split(/[eE]/);
    /** @type {?} */
    var len = (eSplit[0].split('.')[1] || '').length - +(eSplit[1] || 0);
    return len > 0 ? len : 0;
}
/**
 * 把小数转成整数，支持科学计数法。如果是小数则放大成整数
 * @param {?} num 输入数
 * @return {?}
 */
function float2Fixed(num) {
    if (num.toString().indexOf('e') === -1) {
        return Number(num.toString().replace('.', ''));
    }
    /** @type {?} */
    var dLen = digitLength(num);
    return dLen > 0 ? strip(num * Math.pow(10, dLen)) : num;
}
/**
 * 检测数字是否越界，如果越界给出提示
 * @param {?} num 输入数
 * @return {?}
 */
function checkBoundary(num) {
    if (_boundaryCheckingState) {
        if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {
            console.warn(num + " is beyond boundary when transfer to integer, the results may not be accurate");
        }
    }
}
/**
 * 精确乘法
 * @param {?} num1
 * @param {?} num2
 * @param {...?} others
 * @return {?}
 */
function times(num1, num2) {
    var others = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        others[_i - 2] = arguments[_i];
    }
    if (others.length > 0) {
        return times.apply(void 0, __spread([times(num1, num2), others[0]], others.slice(1)));
    }
    /** @type {?} */
    var num1Changed = float2Fixed(num1);
    /** @type {?} */
    var num2Changed = float2Fixed(num2);
    /** @type {?} */
    var baseNum = digitLength(num1) + digitLength(num2);
    /** @type {?} */
    var leftValue = num1Changed * num2Changed;
    checkBoundary(leftValue);
    return leftValue / Math.pow(10, baseNum);
}
/**
 * 精确加法
 * @param {?} num1
 * @param {?} num2
 * @param {...?} others
 * @return {?}
 */
function plus(num1, num2) {
    var others = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        others[_i - 2] = arguments[_i];
    }
    if (others.length > 0) {
        return plus.apply(void 0, __spread([plus(num1, num2), others[0]], others.slice(1)));
    }
    /** @type {?} */
    var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
    return (times(num1, baseNum) + times(num2, baseNum)) / baseNum;
}
/**
 * 精确减法
 * @param {?} num1
 * @param {?} num2
 * @param {...?} others
 * @return {?}
 */
function minus(num1, num2) {
    var others = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        others[_i - 2] = arguments[_i];
    }
    if (others.length > 0) {
        return minus.apply(void 0, __spread([minus(num1, num2), others[0]], others.slice(1)));
    }
    /** @type {?} */
    var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
    return (times(num1, baseNum) - times(num2, baseNum)) / baseNum;
}
/**
 * 精确除法
 * @param {?} num1
 * @param {?} num2
 * @param {...?} others
 * @return {?}
 */
function divide(num1, num2) {
    var others = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        others[_i - 2] = arguments[_i];
    }
    if (others.length > 0) {
        return divide.apply(void 0, __spread([divide(num1, num2), others[0]], others.slice(1)));
    }
    /** @type {?} */
    var num1Changed = float2Fixed(num1);
    /** @type {?} */
    var num2Changed = float2Fixed(num2);
    checkBoundary(num1Changed);
    checkBoundary(num2Changed);
    return times(num1Changed / num2Changed, Math.pow(10, digitLength(num2) - digitLength(num1)));
}
/** @type {?} */
var _boundaryCheckingState = false;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CalculatorDirective = /** @class */ (function () {
    function CalculatorDirective(el, rd, notifyService, cdr) {
        this.el = el;
        this.rd = rd;
        this.notifyService = notifyService;
        this.cdr = cdr;
        this.number = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        //操作步骤缓存
        this.stepInputCache = '';
        //结果缓存
        this.resultInputCache = '0';
        //记录加减乘除的数字
        this.preNumber = [];
        //记录加减乘除符号
        this.preOperator = [];
    }
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selfEl = this.el.nativeElement;
        this.stepEl = this.selfEl.querySelector('#std-pre-step');
        this.resultEl = this.selfEl.querySelector('#std-show-input');
        this.symbolEl = this.selfEl.querySelector('#std-num-symbol');
        this.preEl = this.selfEl.querySelector('.pre');
        this.leftEl = this.selfEl.querySelector('.pre_left');
        this.rightEl = this.selfEl.querySelector('.pre_right');
        this.rd.listen(this.rightEl, 'click', (/**
         * @return {?}
         */
        function () {
            _this.stepEl.scrollLeft += 50;
        }));
        this.rd.listen(this.leftEl, 'click', (/**
         * @return {?}
         */
        function () {
            _this.stepEl.scrollLeft -= 50;
        }));
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.calculateWidth();
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.calculateWidth = /**
     * @return {?}
     */
    function () {
        if (this.stepEl.scrollWidth > this.preEl.offsetWidth) {
            this.leftEl.style.display = 'block';
            this.rightEl.style.display = 'block';
        }
        else {
            this.leftEl.style.display = 'none';
            this.rightEl.style.display = 'none';
        }
    };
    /**
     *
     * @param value 设置步骤显示区的内容
     */
    /**
     *
     * @param {?} value 设置步骤显示区的内容
     * @return {?}
     */
    CalculatorDirective.prototype.setStepInput = /**
     *
     * @param {?} value 设置步骤显示区的内容
     * @return {?}
     */
    function (value) {
        this.stepEl.innerHTML = value;
    };
    /**
     *
     * @param value 设置结果示区的内容
     */
    /**
     *
     * @param {?} value 设置结果示区的内容
     * @return {?}
     */
    CalculatorDirective.prototype.setResultInput = /**
     *
     * @param {?} value 设置结果示区的内容
     * @return {?}
     */
    function (value) {
        this.resultEl.innerHTML = value;
    };
    /**
     * 步骤操作视窗中，最后显示的是否是操作符
     */
    /**
     * 步骤操作视窗中，最后显示的是否是操作符
     * @return {?}
     */
    CalculatorDirective.prototype.stepInputEndIsOperator = /**
     * 步骤操作视窗中，最后显示的是否是操作符
     * @return {?}
     */
    function () {
        return this.stepInputCache.lastIndexOf('+') !== -1 ||
            this.stepInputCache.lastIndexOf('-') !== -1 ||
            this.stepInputCache.lastIndexOf('×') !== -1 ||
            this.stepInputCache.lastIndexOf('÷') !== -1;
    };
    /**
     * 加减乘除运算
     * @param f 第一个数字
     * @param s 第二个数字
     * @param o 操作符
     */
    /**
     * 加减乘除运算
     * @param {?} f 第一个数字
     * @param {?} s 第二个数字
     * @param {?} o 操作符
     * @return {?}
     */
    CalculatorDirective.prototype.calculate = /**
     * 加减乘除运算
     * @param {?} f 第一个数字
     * @param {?} s 第二个数字
     * @param {?} o 操作符
     * @return {?}
     */
    function (f, s, o) {
        /** @type {?} */
        var result;
        f = Number(f);
        s = Number(s);
        switch (o) {
            case '+':
                result = plus(f, s);
                break;
            case '-':
                result = minus(f, s);
                break;
            case '×':
                result = times(f, s);
                break;
            case '÷':
                result = divide(f, s);
                break;
        }
        return result;
    };
    /**
     * numberClick,dotClick,operatorClick,pnClick,equalClick,ceClick,cClick,backClick等，对应着点击相关的按钮操作
     * @param val
     */
    /**
     * numberClick,dotClick,operatorClick,pnClick,equalClick,ceClick,cClick,backClick等，对应着点击相关的按钮操作
     * @param {?} val
     * @return {?}
     */
    CalculatorDirective.prototype.numberClick = /**
     * numberClick,dotClick,operatorClick,pnClick,equalClick,ceClick,cClick,backClick等，对应着点击相关的按钮操作
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if ((this.resultInputCache.indexOf('0') === 0 && this.resultInputCache.indexOf('.') === -1) || this.firstInputToken === true) {
            this.resultInputCache = val;
        }
        else {
            this.resultInputCache += val;
        }
        this.firstInputToken = false;
        this.equalToken = false;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CalculatorDirective.prototype.dotClick = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (this.firstInputToken === true) {
            this.resultInputCache = '0' + val;
        }
        else {
            if (this.resultInputCache.indexOf('.') === -1) {
                this.resultInputCache += val;
            }
        }
        this.firstInputToken = false;
        this.equalToken = false;
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.pnClick = /**
     * @return {?}
     */
    function () {
        if (this.resultInputCache.indexOf('-') === -1 && this.resultInputCache !== '0') {
            this.resultInputCache = "-" + this.resultInputCache;
        }
        else if (this.resultInputCache.indexOf('-') > -1 && this.resultInputCache !== '0') {
            this.resultInputCache = this.resultInputCache.substring(1);
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CalculatorDirective.prototype.operatorClick = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (this.preNumber.length < 2 && (this.firstInputToken !== true || this.equalToken === true)) {
            this.resultInputCache = parseFloat(this.resultInputCache) + '';
            this.stepInputCache = this.stepInputCache + ' ' + this.resultInputCache + ' ' + val;
            this.preNumber.push(this.resultInputCache);
            this.preOperator.push(val);
            this.firstInputToken = true;
        }
        else if (this.preNumber.length < 2 && this.stepInputEndIsOperator()) {
            this.stepInputCache = this.stepInputCache.substring(0, this.stepInputCache.length - 1) + '' + val;
            this.preOperator.push(val);
        }
        if (this.preNumber.length === 2) {
            /** @type {?} */
            var operator = this.preOperator[this.preOperator.length - 2];
            if (this.preNumber[1] === '0' && operator === '÷') {
                this.preNumber = [];
                this.resultInputCache = '除数不能为零';
                this.stepInputCache = '';
                this.firstInputToken = true;
                return;
            }
            /** @type {?} */
            var res = this.calculate(this.preNumber[0], this.preNumber[1], operator);
            this.preNumber = [];
            this.preNumber.push(res);
            this.resultInputCache = res + '';
            this.firstInputToken = true;
        }
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.equalClick = /**
     * @return {?}
     */
    function () {
        if (this.preNumber.length > 0) {
            /** @type {?} */
            var operator = this.preOperator.pop();
            if (this.resultInputCache === '0' && operator === '÷') {
                this.preNumber = [];
                this.resultInputCache = '除数不能为零';
                this.stepInputCache = '';
                this.firstInputToken = true;
                this.equalToken = true;
                return;
            }
            /** @type {?} */
            var res = this.calculate(this.preNumber[0], this.resultInputCache, operator);
            this.preNumber = [];
            this.resultInputCache = res + '';
            this.stepInputCache = '';
            this.firstInputToken = true;
            this.equalToken = true;
        }
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.ceClick = /**
     * @return {?}
     */
    function () {
        this.resultInputCache = '0';
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.cClick = /**
     * @return {?}
     */
    function () {
        this.resultInputCache = '0';
        this.stepInputCache = '';
        this.firstInputToken = true;
        this.preNumber = [];
        this.preOperator = [];
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    CalculatorDirective.prototype.backClick = /**
     * @return {?}
     */
    function () {
        this.resultInputCache = this.resultInputCache.length > 1 ? this.resultInputCache.substring(0, this.resultInputCache.length - 1) : '0';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CalculatorDirective.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.symbolEl.contains(event.target)) {
            return;
        }
        /** @type {?} */
        var val = event.target.innerHTML;
        // if (this.resultInputCache.length > 12 && this.number.includes(val) && this.firstInputToken !== true) {
        //   this.notifyService.warning(`${this.resultInputCache}越界,该区域至多显示13位数字`);
        //   return;
        // }
        switch (val) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                this.numberClick(val);
                break;
            case '.':
                this.dotClick(val);
                break;
            case '±':
                this.pnClick();
                break;
            case '+':
            case '-':
            case '×':
            case '÷':
                this.operatorClick(val);
                break;
            case '=':
                this.equalClick();
                break;
            case 'CE':
                this.ceClick();
                break;
            case 'C':
                this.cClick();
                break;
            case 'Back':
                this.backClick();
                break;
        }
        this.setStepInput(this.stepInputCache);
        this.setResultInput(this.resultInputCache);
    };
    CalculatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisCalculator]'
                },] }
    ];
    /** @nocollapse */
    CalculatorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NotifyService },
        { type: ChangeDetectorRef }
    ]; };
    CalculatorDirective.propDecorators = {
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return CalculatorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CalculatorModule = /** @class */ (function () {
    function CalculatorModule() {
    }
    CalculatorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [CalculatorComponent, CalculatorDirective],
                    imports: [
                        NotifyModule
                    ],
                    exports: [CalculatorComponent, CalculatorDirective]
                },] }
    ];
    return CalculatorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CalculatorService, CalculatorComponent, CalculatorDirective, CalculatorModule };

//# sourceMappingURL=farris-ui-calculator.js.map