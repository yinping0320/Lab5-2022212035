import { OnDestroy, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
interface ScrollElement {
    element: HTMLElement;
    id: string;
}
interface ScrollSpy {
    elements: ScrollElement[];
    currentSectionId: string;
    subject: Subject<string>;
    clickChange?: boolean;
}
interface ScrollSpies {
    [scrollSpyId: string]: ScrollSpy;
}
interface ScrollFollow {
    element: HTMLElement;
    id: string;
}
interface ScrollFollowSpipes {
    [scrollFollowId: string]: ScrollFollow[];
}
interface ScrollContents {
    [scrollFollowId: string]: HTMLElement;
}
interface Offsets {
    [scrollFollowId: string]: number;
}
interface ScrollChange {
    [scrollFollowId: string]: Subject<any>;
}
interface CurrentId {
    subject: Subject<string>;
    idValue: string;
}
interface CurrentIdObj {
    [groupId: string]: CurrentId;
}
export declare class FarrisScrollSpyService implements OnDestroy {
    ngzone: NgZone;
    private scrollSpyPartActiveClsName;
    private fixedTabContainerClsName;
    private parentFixedTabContainerClsName;
    private scrollSubscription;
    /**被监听滚动的contents */
    scrollContents: ScrollContents;
    /**被监听滚动的sections*/
    scrollSpies: ScrollSpies;
    /**监听滚动的锚点部分 */
    scrollFollowSpipes: ScrollFollowSpipes;
    private scrollSpyListFollowTypeChanges;
    /**滚动监听偏移距离 */
    offsets: Offsets;
    /**默认监听分组名称 */
    defaultId: string;
    currentSectionIdObj: CurrentIdObj;
    getCurrentSectionId(groupId: string): Subject<string>;
    setCurrentSectionId(groupId: string, value: string): void;
    setCurrentSectionIdObj(groupId: string, value: string): void;
    scrollChange: ScrollChange;
    constructor(ngzone: NgZone);
    ngOnDestroy(): void;
    /**Observer部分 供指令初始化调用 */
    updateScrollGroup(scrollSpyId?: string): Subject<any>;
    private findMinInToViewElement;
    private getBoundaryInfo;
    /**content部分滚动事件监听 */
    private subscribeScroll;
    /**tab部分点击事件监听 */
    private subscribeClick;
    fScrollFollowClick(key: any, follow: any): void;
    /**添加需要被滚动监听部分 */
    addContentElement(element: HTMLElement, contentId?: string): void;
    /**移除需要被滚动监听部分元素 */
    removeContentElement(contentId?: string): void;
    /**添加滚动监听tab部分元素*/
    addFollowElement(element: HTMLElement, followId: any, followContentId?: string): void;
    /**移除滚动监听tab部分元素 */
    removeFollowElement(followId: any, followContentId?: string): void;
    /**添加滚动监听锚点部分元素 */
    addElement(element: HTMLElement, scrollId: string, scrollGroupId?: string): void;
    /**移除滚动监听锚点部分元素 */
    removeElement(scrollId: string, scrollGroupId?: string): void;
    /**判断scrollGroupId 是否有id名为elementId 的元素 */
    private hasElement;
    /**设置offset */
    setOffset(offset?: number, contentId?: string): void;
    setGroupId(groupid: any): void;
    getGroupId(): string;
    changeGroupIdFollowType(groupid: any, followTypeData: any): void;
    private updateContainerClsName;
    updateScrollSpiesActiveClsName(groupId: any, currentId: any): void;
    /**
     * 当追加ScrollSpy块的时候，判断是否是已经设置的当前
     * @param groupId
     * @param scrollEl
     */
    private updateScrollSpyActiveClsName;
}
export {};
