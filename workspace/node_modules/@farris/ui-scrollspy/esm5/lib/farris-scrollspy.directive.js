/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, EventEmitter, Output, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';
import { FarrisScrollSpyService } from './farris-scrollspy.service';
//锚点部分
var FarrisScrollSpyDirective = /** @class */ (function () {
    function FarrisScrollSpyDirective(elementRef, scrollSpy) {
        this.elementRef = elementRef;
        this.scrollSpy = scrollSpy;
    }
    /**
     * @return {?}
     */
    FarrisScrollSpyDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.className += ' f-scrollspy-part';
        if (!this.scrollGroupId) {
            this.scrollGroupId = this.scrollSpy.getGroupId();
        }
        //this.scrollSpy.addElement(this.elementRef.nativeElement, this.scrollId,this.scrollGroupId);
    };
    /**
     * @return {?}
     */
    FarrisScrollSpyDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.scrollSpy.addElement(this.elementRef.nativeElement, this.scrollId, this.scrollGroupId);
    };
    /**
     * @return {?}
     */
    FarrisScrollSpyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.scrollSpy.removeElement(this.scrollId, this.scrollGroupId);
    };
    FarrisScrollSpyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fScrollSpy]'
                },] }
    ];
    /** @nocollapse */
    FarrisScrollSpyDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FarrisScrollSpyService }
    ]; };
    FarrisScrollSpyDirective.propDecorators = {
        scrollId: [{ type: Input, args: ['fScrollSpy',] }],
        scrollGroupId: [{ type: Input, args: ['fScrollGroup',] }]
    };
    return FarrisScrollSpyDirective;
}());
export { FarrisScrollSpyDirective };
if (false) {
    /** @type {?} */
    FarrisScrollSpyDirective.prototype.scrollId;
    /** @type {?} */
    FarrisScrollSpyDirective.prototype.scrollGroupId;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyDirective.prototype.scrollSpy;
}
//跟随点击
var FscrollFollowElementDirective = /** @class */ (function () {
    function FscrollFollowElementDirective(elementRef, scrollSpy) {
        this.elementRef = elementRef;
        this.scrollSpy = scrollSpy;
    }
    /**
     * @return {?}
     */
    FscrollFollowElementDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.followGroupId) {
            this.followGroupId = this.scrollSpy.getGroupId();
        }
        this.scrollSpy.addFollowElement(this.elementRef.nativeElement, this.followId, this.followGroupId);
    };
    /**
     * @return {?}
     */
    FscrollFollowElementDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.scrollSpy.removeFollowElement(this.followId, this.followGroupId);
    };
    FscrollFollowElementDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fScrollFollowElement]'
                },] }
    ];
    /** @nocollapse */
    FscrollFollowElementDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FarrisScrollSpyService }
    ]; };
    FscrollFollowElementDirective.propDecorators = {
        followId: [{ type: Input, args: ['fScrollFollowElement',] }],
        followGroupId: [{ type: Input, args: ['fScrollElement',] }]
    };
    return FscrollFollowElementDirective;
}());
export { FscrollFollowElementDirective };
if (false) {
    /** @type {?} */
    FscrollFollowElementDirective.prototype.followId;
    /** @type {?} */
    FscrollFollowElementDirective.prototype.followGroupId;
    /**
     * @type {?}
     * @private
     */
    FscrollFollowElementDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FscrollFollowElementDirective.prototype.scrollSpy;
}
//监听滚动部分content
var FscrollSpyContainerDirective = /** @class */ (function () {
    function FscrollSpyContainerDirective(elementRef, scrollSpy, changeDetector) {
        this.elementRef = elementRef;
        this.scrollSpy = scrollSpy;
        this.changeDetector = changeDetector;
        this.fScrollChange = new EventEmitter;
        this.position = "relative";
    }
    /**
     * @return {?}
     */
    FscrollSpyContainerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.fScrollGroupId) {
            this.fScrollGroupId = this.scrollSpy.getGroupId();
        }
        this.elementRef.nativeElement.className += ' f-scrollspy-container';
        this.scrollSpy.addContentElement(this.elementRef.nativeElement, this.fScrollGroupId);
        this.scrollSpy.setOffset(this.fOffset, this.fScrollGroupId);
        this.scrollSpy.updateScrollGroup(this.fScrollGroupId).subscribe((/**
         * @param {?} currentSection
         * @return {?}
         */
        function (currentSection) {
            //console.log('111',currentSection);
            // bugNum:465991
            // console.log('section-group'+currentSection);
            _this.fScrollChange.emit(currentSection);
            // this.scrollSpy.setCurrentSectionId(this.fScrollGroupId,currentSection);
            // this.changeDetector.markForCheck();
        }));
    };
    /**
     * @return {?}
     */
    FscrollSpyContainerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // this.scrollSpy.getCurrentSection$(this.fScrollGroupId)
        // .subscribe((currentSection: string): void => {
        //   this.fScrollChange.next(currentSection);
        //   this.changeDetector.markForCheck();
        // });
    };
    /**
     * @return {?}
     */
    FscrollSpyContainerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.scrollSpy.removeContentElement(this.fScrollGroupId);
    };
    FscrollSpyContainerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fScrollSpyContainer]'
                },] }
    ];
    /** @nocollapse */
    FscrollSpyContainerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FarrisScrollSpyService },
        { type: ChangeDetectorRef }
    ]; };
    FscrollSpyContainerDirective.propDecorators = {
        fOffset: [{ type: Input }],
        fScrollGroupId: [{ type: Input, args: ['fScrollSpyContainer',] }],
        fScrollChange: [{ type: Output }],
        position: [{ type: HostBinding, args: ["style.position",] }]
    };
    return FscrollSpyContainerDirective;
}());
export { FscrollSpyContainerDirective };
if (false) {
    /** @type {?} */
    FscrollSpyContainerDirective.prototype.fOffset;
    /** @type {?} */
    FscrollSpyContainerDirective.prototype.fScrollGroupId;
    /** @type {?} */
    FscrollSpyContainerDirective.prototype.fScrollChange;
    /** @type {?} */
    FscrollSpyContainerDirective.prototype.position;
    /**
     * @type {?}
     * @private
     */
    FscrollSpyContainerDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FscrollSpyContainerDirective.prototype.scrollSpy;
    /**
     * @type {?}
     * @private
     */
    FscrollSpyContainerDirective.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,