/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { throttleTime, debounceTime } from 'rxjs/operators';
import { animationFrame } from 'rxjs/internal/scheduler/animationFrame';
import * as i0 from "@angular/core";
/**
 * @record
 */
function ScrollElement() { }
if (false) {
    /** @type {?} */
    ScrollElement.prototype.element;
    /** @type {?} */
    ScrollElement.prototype.id;
}
/**
 * @record
 */
function ScrollSpy() { }
if (false) {
    /** @type {?} */
    ScrollSpy.prototype.elements;
    /** @type {?} */
    ScrollSpy.prototype.currentSectionId;
    /** @type {?} */
    ScrollSpy.prototype.subject;
    /** @type {?|undefined} */
    ScrollSpy.prototype.clickChange;
}
/**
 * @record
 */
function ScrollSpies() { }
/**
 * @record
 */
function ScrollFollow() { }
if (false) {
    /** @type {?} */
    ScrollFollow.prototype.element;
    /** @type {?} */
    ScrollFollow.prototype.id;
}
/**
 * @record
 */
function ScrollFollowSpipes() { }
/**
 * @record
 */
function ScrollContents() { }
/**
 * @record
 */
function Offsets() { }
/**
 * @record
 */
function ScrollChange() { }
/**
 * @record
 */
function CurrentId() { }
if (false) {
    /** @type {?} */
    CurrentId.prototype.subject;
    /** @type {?} */
    CurrentId.prototype.idValue;
}
/**
 * @record
 */
function CurrentIdObj() { }
export class FarrisScrollSpyService {
    /**
     * @param {?} ngzone
     */
    constructor(ngzone) {
        this.ngzone = ngzone;
        // 监听区块当前时候的样式
        this.scrollSpyPartActiveClsName = 'f-scrollspy-part-active';
        this.fixedTabContainerClsName = 'f-scrollspy-container-fixed';
        this.parentFixedTabContainerClsName = 'f-scrollspy-container-fixed-parent';
        /**
         * 被监听滚动的contents
         */
        this.scrollContents = {};
        /**
         * 被监听滚动的sections
         */
        this.scrollSpies = {};
        /**
         * 监听滚动的锚点部分
         */
        this.scrollFollowSpipes = {};
        this.scrollSpyListFollowTypeChanges = {};
        /**
         * 滚动监听偏移距离
         */
        this.offsets = {};
        /**
         * 默认监听分组名称
         */
        this.defaultId = 'default';
        // currentSectionId: Subject<any> = new Subject();
        this.currentSectionIdObj = {};
        this.scrollChange = {};
    }
    //获取currentid
    /**
     * @param {?} groupId
     * @return {?}
     */
    getCurrentSectionId(groupId) {
        if (!groupId) {
            groupId = this.defaultId;
        }
        return this.currentSectionIdObj[groupId].subject;
        // return this.currentSectionId;
    }
    //滚动变化时改变currentid
    /**
     * @param {?} groupId
     * @param {?} value
     * @return {?}
     */
    setCurrentSectionId(groupId, value) {
        if (!groupId) {
            groupId = this.defaultId;
        }
        this.currentSectionIdObj[groupId].subject.next(value);
        //console.log(this.currentSectionIdObj);
        // this.currentSectionId.next(value);
    }
    //设置不同group组的currentid
    /**
     * @param {?} groupId
     * @param {?} value
     * @return {?}
     */
    setCurrentSectionIdObj(groupId, value) {
        if (!groupId) {
            groupId = this.defaultId;
        }
        if (!this.currentSectionIdObj[groupId]) {
            this.currentSectionIdObj[groupId] = (/** @type {?} */ ({
                subject: new Subject(),
                idValue: value
            }));
        }
        else {
            this.currentSectionIdObj[groupId].idValue = value;
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.scrollFollowSpipes[groupId] && this.scrollFollowSpipes[groupId].length) {
                /** @type {?} */
                let item = this.scrollFollowSpipes[groupId].find((/**
                 * @param {?} scrollFollowItem
                 * @return {?}
                 */
                scrollFollowItem => {
                    return scrollFollowItem['id'] == this.currentSectionIdObj[groupId].idValue;
                }));
                if (item) {
                    this.fScrollFollowClick(groupId, item);
                }
            }
        }), 0);
        // this.fScrollFollowClick(key,follow);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.scrollSubscription.unsubscribe();
    }
    /**
     * Observer部分 供指令初始化调用
     * @param {?=} scrollSpyId
     * @return {?}
     */
    // public getCurrentSection$(scrollSpyId: string = this.defaultId): Observable<string> {
    //   if(scrollSpyId !== ''){
    //     return this.scrollChange[scrollSpyId];
    //   }
    //   else{
    //     return this.scrollChange[this.defaultId];
    //   }
    // }
    updateScrollGroup(scrollSpyId = this.defaultId) {
        /** @type {?} */
        const groupId = scrollSpyId !== '' ? scrollSpyId : this.defaultId;
        if (!this.scrollChange[groupId]) {
            this.scrollChange[groupId] = new Subject();
        }
        return this.scrollChange[groupId];
    }
    /**
     * @private
     * @param {?} eles
     * @param {?} $scrollContainer
     * @param {?} offset
     * @return {?}
     */
    findMinInToViewElement(eles, $scrollContainer, offset) {
        // 获取信息
        /** @type {?} */
        let scrollInfo = this.getBoundaryInfo($scrollContainer, offset);
        /** @type {?} */
        let len = eles.length;
        // [{el:元素,top:顶,height:高度}]
        /** @type {?} */
        let recordEles = [];
        /** @type {?} */
        let result = [];
        // 判断是否在视口
        /** @type {?} */
        let findInView = false;
        for (var k = 0; k < len; k++) {
            recordEles.push({ id: eles[k].id, top: eles[k].element.offsetTop, height: eles[k].element.offsetHeight });
            // recordEles[k]['ratio']=(recordEles[k]['top']+recordEles[k]['height'])/scrollInfo.contentHeight
        }
        /** @type {?} */
        var minIndex;
        /** @type {?} */
        var temp;
        for (var i = 0; i < len - 1; i++) {
            minIndex = i;
            for (var j = i + 1; j < len; j++) {
                if (recordEles[j].top < recordEles[minIndex].top) { //寻找最小的数
                    minIndex = j; //将最小数的索引保存
                }
            }
            temp = recordEles[i];
            recordEles[i] = recordEles[minIndex];
            recordEles[minIndex] = temp;
        }
        if (scrollInfo.top > scrollInfo.min) {
            // scrollTop 滚动到最后剩下在界面上的元素多个元素不能根据offsetTop来判断，应该显示哪个，按照比例来计算
            /** @type {?} */
            let scrollTopRatio = (scrollInfo.top - scrollInfo.min) / scrollInfo.boundary;
            // 判断top的位置
            //let ratioReferHeight=scrollInfo.boundary+scrollInfo.fixedHeight;
            /** @type {?} */
            let elRatio = 0;
            for (var k = 0; k < len; k++) {
                //recordEles[k]['radio']=(recordEles[k]['top']+recordEles[k]['height']-scrollInfo.min)/ratioReferHeight;
                if (recordEles[k].top - scrollInfo.offset >= scrollInfo.top || recordEles[k].top + recordEles[k].height - scrollInfo.offset > scrollInfo.top) {
                    elRatio = (recordEles[k]['top'] + recordEles[k]['height']) / scrollInfo.contentHeight;
                    if (!findInView && scrollTopRatio <= elRatio) {
                        findInView = true;
                        result.push(recordEles[k].id);
                        break;
                    }
                }
            }
            if (result.length == 0) {
                // 没找到，就返回最大的
                return [recordEles[len - 1].id];
            }
            return [result[0]];
        }
        else {
            // 页面较长时，按照scrollTop和offsetTop比较
            for (var k = 0; k < len; k++) {
                // 小于等于，考虑到容器有内上间距的情况
                if (recordEles[k].top - scrollInfo.offset <= scrollInfo.top && recordEles[k].top + recordEles[k].height - scrollInfo.offset >= scrollInfo.top) {
                    result.push(recordEles[k].id);
                    break;
                }
            }
            if (result.length == 0) {
                // 没找到，就返回最小的
                return [recordEles[0].id];
            }
            return [result[result.length - 1]];
        }
    }
    /**
     * @private
     * @param {?} $scrollContainer
     * @param {?} offset
     * @return {?}
     */
    getBoundaryInfo($scrollContainer, offset) {
        /** @type {?} */
        let fixedHeight = $scrollContainer.offsetHeight;
        /** @type {?} */
        let realRatio = ($scrollContainer.scrollHeight - fixedHeight) / fixedHeight;
        /** @type {?} */
        let maxRound = Math.ceil(realRatio);
        /** @type {?} */
        let minRound = maxRound - 1 > 0 ? maxRound - 1 : 0;
        // // 上下间距,此处影响比例的计算，试想容器有内上间距，元素的offsetTop不可能为0，但是容器的scrollTop初始为0
        /** @type {?} */
        let scrollContainerPaddingTop = parseFloat(getComputedStyle($scrollContainer, null).paddingTop);
        // let(element.currentStyle? element.currentStyle : window.getComputedStyle(element, null)).height);
        return {
            offset: offset ? offset : scrollContainerPaddingTop,
            top: $scrollContainer.scrollTop,
            bottom: $scrollContainer.scrollTop + fixedHeight,
            fixedHeight: fixedHeight,
            contentHeight: $scrollContainer.scrollHeight,
            min: minRound * fixedHeight,
            boundary: $scrollContainer.scrollHeight - (minRound + 1) * fixedHeight
        }; // 以offsetHeight为度量，记录offsetTop不足一个高度的具体长度,
    }
    /**
     * content部分滚动事件监听
     * @private
     * @param {?} key
     * @return {?}
     */
    subscribeScroll(key) {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.scrollSubscription = fromEvent(this.scrollContents[key], 'scroll')
                .pipe(debounceTime(100, animationFrame))
                .subscribe((/**
             * @return {?}
             */
            () => {
                if (this.scrollSpies[key]) {
                    const { currentSectionId, elements, subject } = this.scrollSpies[key];
                    /** @type {?} */
                    const findMinInViewIds = this.findMinInToViewElement(elements, this.scrollContents[key], this.offsets[key]);
                    if (!findMinInViewIds || !findMinInViewIds.length) {
                        return;
                    }
                    /** @type {?} */
                    const topElementId = findMinInViewIds[0];
                    //判断 点击是否是点击引起的滚动
                    if (this.scrollSpies[key].clickChange) {
                        this.scrollSpies[key].clickChange = false;
                        return;
                    }
                    else {
                        this.scrollSpies[key].clickChange = false;
                        if (topElementId !== currentSectionId) {
                            this.scrollSpies[key].currentSectionId = topElementId;
                            this.ngzone.run((/**
                             * @return {?}
                             */
                            () => {
                                subject.next(topElementId);
                            }));
                        }
                    }
                }
            }));
        }));
    }
    /**
     * tab部分点击事件监听
     * @private
     * @param {?} key
     * @return {?}
     */
    subscribeClick(key) {
        //Object.keys(this.scrollFollowSpipes).forEach((key:string):void=>{
        if (this.scrollFollowSpipes[key] && this.scrollFollowSpipes[key].length) {
            this.scrollFollowSpipes[key].forEach((/**
             * @param {?} follow
             * @return {?}
             */
            (follow) => {
                fromEvent(follow.element, 'click')
                    .pipe(throttleTime(100))
                    .subscribe((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    event.stopPropagation();
                    this.fScrollFollowClick(key, follow);
                    // if(this.scrollSpies[key]){
                    //   const { currentSectionId, elements, subject } = this.scrollSpies[key];
                    //   this.scrollSpies[key].clickChange = true;
                    //   if(follow.id !== currentSectionId){
                    //     const topElementInView = elements.find(el => el.id === follow.id);
                    //     if(!topElementInView) { return; }
                    //     this.scrollSpies[key].currentSectionId = follow.id;
                    //     //this.scrollContents[key].offsetTop
                    //     this.scrollContents[key].scrollTop = Math.round(topElementInView.element.offsetTop - this.offsets[key]);
                    //     subject.next(follow.id);
                    //   }
                    // }
                }));
            }));
        }
        //});
    }
    /**
     * @param {?} key
     * @param {?} follow
     * @return {?}
     */
    fScrollFollowClick(key, follow) {
        if (this.scrollSpies[key]) {
            const { currentSectionId, elements, subject } = this.scrollSpies[key];
            this.scrollSpies[key].clickChange = true;
            if (follow.id !== currentSectionId) {
                /** @type {?} */
                const topElementInView = elements.find((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el.id === follow.id));
                if (!topElementInView) {
                    return;
                }
                this.scrollSpies[key].currentSectionId = follow.id;
                //this.scrollContents[key].offsetTop
                if (this.scrollContents[key]) {
                    // 内容去有滚动
                    this.scrollContents[key].scrollTop = Math.round(topElementInView.element.offsetTop - this.offsets[key] - parseInt(getComputedStyle(this.scrollContents[key]).paddingTop, 10));
                }
                subject.next(follow.id);
            }
        }
    }
    /**
     * 添加需要被滚动监听部分
     * @param {?} element
     * @param {?=} contentId
     * @return {?}
     */
    addContentElement(element, contentId = this.defaultId) {
        if (contentId !== '') {
            this.scrollContents[contentId] = element;
            this.subscribeScroll(contentId);
        }
        else {
            this.scrollContents[this.defaultId] = element;
            this.subscribeScroll(this.defaultId);
        }
        // 判断是有待改变的状态
        this.updateContainerClsName(contentId);
    }
    /**
     * 移除需要被滚动监听部分元素
     * @param {?=} contentId
     * @return {?}
     */
    removeContentElement(contentId = this.defaultId) {
        /** @type {?} */
        const removeId = contentId !== '' ? contentId : this.defaultId;
        delete this.scrollSpies[removeId];
    }
    /**
     * 添加滚动监听tab部分元素
     * @param {?} element
     * @param {?} followId
     * @param {?=} followContentId
     * @return {?}
     */
    addFollowElement(element, followId, followContentId = this.defaultId) {
        /** @type {?} */
        const groupId = followContentId !== '' ? followContentId : this.defaultId;
        /** @type {?} */
        const follow = {
            element: element,
            id: followId
        };
        if (!this.scrollFollowSpipes[groupId]) {
            this.scrollFollowSpipes[groupId] = [];
        }
        //-------------------------此处没有处理重复ID
        /** @type {?} */
        const follows = this.scrollFollowSpipes[groupId];
        follows.push(follow);
        this.scrollFollowSpipes[groupId] = follows;
        this.subscribeClick(groupId);
    }
    /**
     * 移除滚动监听tab部分元素
     * @param {?} followId
     * @param {?=} followContentId
     * @return {?}
     */
    removeFollowElement(followId, followContentId = this.defaultId) {
        /** @type {?} */
        const elements = this.scrollFollowSpipes[followContentId].filter((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            return el.id !== followId;
        }));
        if (!elements.length) {
            delete this.scrollFollowSpipes[followContentId];
            return;
        }
        this.scrollFollowSpipes[followContentId] = elements;
    }
    /**
     * 添加滚动监听锚点部分元素
     * @param {?} element
     * @param {?} scrollId
     * @param {?=} scrollGroupId
     * @return {?}
     */
    addElement(element, scrollId, scrollGroupId = this.defaultId) {
        if (!this.scrollSpies[scrollGroupId]) {
            this.scrollSpies[scrollGroupId] = (/** @type {?} */ ({
                elements: [],
                currentSectionId: '',
                subject: new Subject(),
            }));
            this.scrollSpies[scrollGroupId].subject
                .subscribe((/**
             * @param {?} currentSection
             * @return {?}
             */
            (currentSection) => {
                if (this.scrollChange[scrollGroupId]) {
                    this.scrollChange[scrollGroupId].next(currentSection);
                }
            }));
        }
        if (this.hasElement(scrollId, scrollGroupId)) {
            return;
        }
        /** @type {?} */
        const el = {
            element: element,
            id: scrollId
        }
        // 加入时，判断是否是当前
        ;
        // 加入时，判断是否是当前
        this.updateScrollSpyActiveClsName(scrollGroupId, el);
        /** @type {?} */
        const elements = this.scrollSpies[scrollGroupId].elements;
        elements.push(el);
        elements.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => b.element.getBoundingClientRect().top - a.element.getBoundingClientRect().top));
        this.scrollSpies[scrollGroupId].elements = elements;
    }
    /**
     * 移除滚动监听锚点部分元素
     * @param {?} scrollId
     * @param {?=} scrollGroupId
     * @return {?}
     */
    removeElement(scrollId, scrollGroupId = this.defaultId) {
        /** @type {?} */
        const elements = this.scrollSpies[scrollGroupId].elements.filter((/**
         * @param {?} el
         * @return {?}
         */
        (el) => {
            return el.id !== scrollId;
        }));
        if (!elements.length) {
            delete this.scrollSpies[scrollGroupId];
            return;
        }
        this.scrollSpies[scrollGroupId].elements = elements;
    }
    /**
     * 判断scrollGroupId 是否有id名为elementId 的元素
     * @private
     * @param {?} elementId
     * @param {?} scrollGroupId
     * @return {?}
     */
    hasElement(elementId, scrollGroupId) {
        return this.scrollSpies[scrollGroupId].elements.some((/**
         * @param {?} element
         * @return {?}
         */
        (element) => element.id === elementId));
    }
    /**
     * 设置offset
     * @param {?=} offset
     * @param {?=} contentId
     * @return {?}
     */
    setOffset(offset = 0, contentId = this.defaultId) {
        if (contentId !== '') {
            this.offsets[contentId] = offset;
        }
        else {
            this.offsets[this.defaultId] = offset;
        }
    }
    /*ScrollSpy组件(锚点列表区域）初始化预设defaultId */
    /**
     * @param {?} groupid
     * @return {?}
     */
    setGroupId(groupid) {
        if (groupid) {
            this.defaultId = groupid;
        }
    }
    /**
     * @return {?}
     */
    getGroupId() {
        return this.defaultId;
    }
    /*改变 ScrollSpy组件（锚点列表区域）的显示状态时 */
    /**
     * @param {?} groupid
     * @param {?} followTypeData
     * @return {?}
     */
    changeGroupIdFollowType(groupid, followTypeData) {
        this.scrollSpyListFollowTypeChanges[groupid] = followTypeData;
        this.updateContainerClsName(groupid);
    }
    /**
     * @private
     * @param {?} groupid
     * @return {?}
     */
    updateContainerClsName(groupid) {
        // 没有待更新变化
        if (!this.scrollSpyListFollowTypeChanges.hasOwnProperty(groupid)) {
            return;
        }
        // container并不存在的时候
        if (!this.scrollContents.hasOwnProperty(groupid)) {
            return;
        }
        /** @type {?} */
        let followTypeData = this.scrollSpyListFollowTypeChanges[groupid];
        /** @type {?} */
        let containerEl = this.scrollContents[groupid];
        // Container的Element 
        if (followTypeData['prev'] == 'fixedTab') {
            //移除class
            containerEl.className = containerEl.className.replace(this.fixedTabContainerClsName, '');
            containerEl.parentElement.classList.remove(this.parentFixedTabContainerClsName);
        }
        else if (followTypeData['next'] == 'fixedTab') {
            // 增加class
            containerEl.className += ' ' + this.fixedTabContainerClsName;
            // 给父元素增加高度
            containerEl.parentElement.classList.add(this.parentFixedTabContainerClsName);
        }
        this.scrollSpyListFollowTypeChanges[groupid] = null;
    }
    /**
     * @param {?} groupId
     * @param {?} currentId
     * @return {?}
     */
    updateScrollSpiesActiveClsName(groupId, currentId) {
        // 追加、移除class
        this.scrollSpies[groupId].elements.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (item.id == currentId) {
                // 找到当前
                if (item.element.className.indexOf(this.scrollSpyPartActiveClsName) < 0) {
                    item.element.className += ' ' + this.scrollSpyPartActiveClsName;
                }
            }
            else {
                // 其他
                item.element.className = item.element.className.replace(this.scrollSpyPartActiveClsName, '');
            }
        }));
    }
    /**
     * 当追加ScrollSpy块的时候，判断是否是已经设置的当前
     * @private
     * @param {?} groupId
     * @param {?} scrollEl
     * @return {?}
     */
    updateScrollSpyActiveClsName(groupId, scrollEl) {
        // 如果已设置
        if (this.currentSectionIdObj[groupId]) {
            if (this.currentSectionIdObj[groupId]['idValue'] == scrollEl.id) {
                scrollEl.element.className += ' ' + this.scrollSpyPartActiveClsName;
            }
        }
    }
}
FarrisScrollSpyService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FarrisScrollSpyService.ctorParameters = () => [
    { type: NgZone }
];
/** @nocollapse */ FarrisScrollSpyService.ngInjectableDef = i0.defineInjectable({ factory: function FarrisScrollSpyService_Factory() { return new FarrisScrollSpyService(i0.inject(i0.NgZone)); }, token: FarrisScrollSpyService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.scrollSpyPartActiveClsName;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.fixedTabContainerClsName;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.parentFixedTabContainerClsName;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.scrollSubscription;
    /**
     * 被监听滚动的contents
     * @type {?}
     */
    FarrisScrollSpyService.prototype.scrollContents;
    /**
     * 被监听滚动的sections
     * @type {?}
     */
    FarrisScrollSpyService.prototype.scrollSpies;
    /**
     * 监听滚动的锚点部分
     * @type {?}
     */
    FarrisScrollSpyService.prototype.scrollFollowSpipes;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.scrollSpyListFollowTypeChanges;
    /**
     * 滚动监听偏移距离
     * @type {?}
     */
    FarrisScrollSpyService.prototype.offsets;
    /**
     * 默认监听分组名称
     * @type {?}
     */
    FarrisScrollSpyService.prototype.defaultId;
    /** @type {?} */
    FarrisScrollSpyService.prototype.currentSectionIdObj;
    /** @type {?} */
    FarrisScrollSpyService.prototype.scrollChange;
    /** @type {?} */
    FarrisScrollSpyService.prototype.ngzone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLXNjcm9sbHNweS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1zY3JvbGxzcHkvIiwic291cmNlcyI6WyJsaWIvZmFycmlzLXNjcm9sbHNweS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBNEIsTUFBTSxNQUFNLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7O0FBRXhFLDRCQUdDOzs7SUFGQyxnQ0FBcUI7O0lBQ3JCLDJCQUFVOzs7OztBQUdaLHdCQUtDOzs7SUFKQyw2QkFBMEI7O0lBQzFCLHFDQUF5Qjs7SUFDekIsNEJBQXlCOztJQUN6QixnQ0FBcUI7Ozs7O0FBR3ZCLDBCQUVDOzs7O0FBRUQsMkJBR0M7OztJQUZDLCtCQUFxQjs7SUFDckIsMEJBQVU7Ozs7O0FBRVosaUNBRUM7Ozs7QUFFRCw2QkFFQzs7OztBQUNELHNCQUVDOzs7O0FBRUQsMkJBRUM7Ozs7QUFFRCx3QkFHQzs7O0lBRkMsNEJBQXlCOztJQUN6Qiw0QkFBZTs7Ozs7QUFFakIsMkJBRUM7QUFLRCxNQUFNLE9BQU8sc0JBQXNCOzs7O0lBdUVqQyxZQUFtQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTs7UUFyRXpCLCtCQUEwQixHQUFHLHlCQUF5QixDQUFDO1FBQ3ZELDZCQUF3QixHQUFHLDZCQUE2QixDQUFDO1FBQ3pELG1DQUE4QixHQUFDLG9DQUFvQyxDQUFDOzs7O1FBRzVFLG1CQUFjLEdBQW1CLEVBQUUsQ0FBQzs7OztRQUVwQyxnQkFBVyxHQUFnQixFQUFFLENBQUM7Ozs7UUFFOUIsdUJBQWtCLEdBQXVCLEVBQUUsQ0FB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O2dCQUMzRCxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBRSxHQUFHLEdBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDO2FBQ2pFO1NBQ0Y7SUFDSCxDQUFDOzs7WUFoYkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBbEQrQixNQUFNOzs7Ozs7OztJQXFEcEMsNERBQStEOzs7OztJQUMvRCwwREFBaUU7Ozs7O0lBQ2pFLGdFQUE0RTs7Ozs7SUFDNUUsb0RBQXlDOzs7OztJQUV6QyxnREFBb0M7Ozs7O0lBRXBDLDZDQUE4Qjs7Ozs7SUFFOUIsb0RBQTRDOzs7OztJQUM1QyxnRUFBNEM7Ozs7O0lBSTVDLHlDQUFzQjs7Ozs7SUFFdEIsMkNBQThCOztJQUk5QixxREFBdUM7O0lBOEN2Qyw4Q0FBZ0M7O0lBR3BCLHdDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGZyb21FdmVudCwgU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRocm90dGxlVGltZSwgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZSB9IGZyb20gJ3J4anMvaW50ZXJuYWwvc2NoZWR1bGVyL2FuaW1hdGlvbkZyYW1lJztcclxuXHJcbmludGVyZmFjZSBTY3JvbGxFbGVtZW50IHtcclxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICBpZDogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBTY3JvbGxTcHkge1xyXG4gIGVsZW1lbnRzOiBTY3JvbGxFbGVtZW50W107XHJcbiAgY3VycmVudFNlY3Rpb25JZDogc3RyaW5nO1xyXG4gIHN1YmplY3Q6IFN1YmplY3Q8c3RyaW5nPjtcclxuICBjbGlja0NoYW5nZT86IGJvb2xlYW4gLy/liKTmlq3mmK/lkKbmmK/ngrnlh7vlr7zoh7TnmoTpobXpnaLmu5rliqhcclxufVxyXG5cclxuaW50ZXJmYWNlIFNjcm9sbFNwaWVzIHtcclxuICBbc2Nyb2xsU3B5SWQ6IHN0cmluZ106IFNjcm9sbFNweVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU2Nyb2xsRm9sbG93IHtcclxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICBpZDogc3RyaW5nXHJcbn1cclxuaW50ZXJmYWNlIFNjcm9sbEZvbGxvd1NwaXBlcyB7XHJcbiAgW3Njcm9sbEZvbGxvd0lkOiBzdHJpbmddOiBTY3JvbGxGb2xsb3dbXVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU2Nyb2xsQ29udGVudHMge1xyXG4gIFtzY3JvbGxGb2xsb3dJZDogc3RyaW5nXTogSFRNTEVsZW1lbnRcclxufVxyXG5pbnRlcmZhY2UgT2Zmc2V0cyB7XHJcbiAgW3Njcm9sbEZvbGxvd0lkOiBzdHJpbmddOiBudW1iZXJcclxufVxyXG5cclxuaW50ZXJmYWNlIFNjcm9sbENoYW5nZSB7XHJcbiAgW3Njcm9sbEZvbGxvd0lkOiBzdHJpbmddOiBTdWJqZWN0PGFueT5cclxufVxyXG5cclxuaW50ZXJmYWNlIEN1cnJlbnRJZCB7XHJcbiAgc3ViamVjdDogU3ViamVjdDxzdHJpbmc+O1xyXG4gIGlkVmFsdWU6IHN0cmluZ1xyXG59XHJcbmludGVyZmFjZSBDdXJyZW50SWRPYmoge1xyXG4gIFtncm91cElkOiBzdHJpbmddOiBDdXJyZW50SWRcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzU2Nyb2xsU3B5U2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgLy8g55uR5ZCs5Yy65Z2X5b2T5YmN5pe25YCZ55qE5qC35byPXHJcbiAgcHJpdmF0ZSBzY3JvbGxTcHlQYXJ0QWN0aXZlQ2xzTmFtZSA9ICdmLXNjcm9sbHNweS1wYXJ0LWFjdGl2ZSc7XHJcbiAgcHJpdmF0ZSBmaXhlZFRhYkNvbnRhaW5lckNsc05hbWUgPSAnZi1zY3JvbGxzcHktY29udGFpbmVyLWZpeGVkJztcclxuICBwcml2YXRlIHBhcmVudEZpeGVkVGFiQ29udGFpbmVyQ2xzTmFtZT0nZi1zY3JvbGxzcHktY29udGFpbmVyLWZpeGVkLXBhcmVudCc7XHJcbiAgcHJpdmF0ZSBzY3JvbGxTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAvKirooqvnm5HlkKzmu5rliqjnmoRjb250ZW50cyAqL1xyXG4gIHNjcm9sbENvbnRlbnRzOiBTY3JvbGxDb250ZW50cyA9IHt9O1xyXG4gIC8qKuiiq+ebkeWQrOa7muWKqOeahHNlY3Rpb25zKi9cclxuICBzY3JvbGxTcGllczogU2Nyb2xsU3BpZXMgPSB7fTtcclxuICAvKirnm5HlkKzmu5rliqjnmoTplJrngrnpg6jliIYgKi9cclxuICBzY3JvbGxGb2xsb3dTcGlwZXM6IFNjcm9sbEZvbGxvd1NwaXBlcyA9IHt9O1xyXG4gIHByaXZhdGUgc2Nyb2xsU3B5TGlzdEZvbGxvd1R5cGVDaGFuZ2VzID0ge307XHJcblxyXG5cclxuICAvKirmu5rliqjnm5HlkKzlgY/np7vot53nprsgKi9cclxuICBvZmZzZXRzOiBPZmZzZXRzID0ge307XHJcbiAgLyoq6buY6K6k55uR5ZCs5YiG57uE5ZCN56ewICovXHJcbiAgZGVmYXVsdElkOiBzdHJpbmcgPSAnZGVmYXVsdCc7XHJcblxyXG4gIC8vIGN1cnJlbnRTZWN0aW9uSWQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XHJcblxyXG4gIGN1cnJlbnRTZWN0aW9uSWRPYmo6IEN1cnJlbnRJZE9iaiA9IHt9O1xyXG4gIC8v6I635Y+WY3VycmVudGlkXHJcbiAgZ2V0Q3VycmVudFNlY3Rpb25JZChncm91cElkOiBzdHJpbmcpIHtcclxuICAgIGlmICghZ3JvdXBJZCkge1xyXG4gICAgICBncm91cElkID0gdGhpcy5kZWZhdWx0SWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2VjdGlvbklkT2JqW2dyb3VwSWRdLnN1YmplY3Q7XHJcbiAgICAvLyByZXR1cm4gdGhpcy5jdXJyZW50U2VjdGlvbklkO1xyXG4gIH1cclxuICAvL+a7muWKqOWPmOWMluaXtuaUueWPmGN1cnJlbnRpZFxyXG4gIHNldEN1cnJlbnRTZWN0aW9uSWQoZ3JvdXBJZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWdyb3VwSWQpIHtcclxuICAgICAgZ3JvdXBJZCA9IHRoaXMuZGVmYXVsdElkO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJyZW50U2VjdGlvbklkT2JqW2dyb3VwSWRdLnN1YmplY3QubmV4dCh2YWx1ZSk7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuY3VycmVudFNlY3Rpb25JZE9iaik7XHJcbiAgICAvLyB0aGlzLmN1cnJlbnRTZWN0aW9uSWQubmV4dCh2YWx1ZSk7XHJcbiAgfVxyXG4gIC8v6K6+572u5LiN5ZCMZ3JvdXDnu4TnmoRjdXJyZW50aWRcclxuICBzZXRDdXJyZW50U2VjdGlvbklkT2JqKGdyb3VwSWQ6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgaWYgKCFncm91cElkKSB7XHJcbiAgICAgIGdyb3VwSWQgPSB0aGlzLmRlZmF1bHRJZDtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy5jdXJyZW50U2VjdGlvbklkT2JqW2dyb3VwSWRdKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFNlY3Rpb25JZE9ialtncm91cElkXSA9IHtcclxuICAgICAgICBzdWJqZWN0OiBuZXcgU3ViamVjdCgpLFxyXG4gICAgICAgIGlkVmFsdWU6IHZhbHVlXHJcbiAgICAgIH0gYXMgQ3VycmVudElkO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFNlY3Rpb25JZE9ialtncm91cElkXS5pZFZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaWYodGhpcy5zY3JvbGxGb2xsb3dTcGlwZXNbZ3JvdXBJZF0gJiYgdGhpcy5zY3JvbGxGb2xsb3dTcGlwZXNbZ3JvdXBJZF0ubGVuZ3RoKXtcclxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuc2Nyb2xsRm9sbG93U3BpcGVzW2dyb3VwSWRdLmZpbmQoc2Nyb2xsRm9sbG93SXRlbT0+e1xyXG4gICAgICAgICAgcmV0dXJuIHNjcm9sbEZvbGxvd0l0ZW1bJ2lkJ10gPT0gdGhpcy5jdXJyZW50U2VjdGlvbklkT2JqW2dyb3VwSWRdLmlkVmFsdWU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBpZihpdGVtKXtcclxuICAgICAgICAgIHRoaXMuZlNjcm9sbEZvbGxvd0NsaWNrKGdyb3VwSWQsaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCAwKTtcclxuICAgIC8vIHRoaXMuZlNjcm9sbEZvbGxvd0NsaWNrKGtleSxmb2xsb3cpO1xyXG4gIH1cclxuXHJcblxyXG4gIHNjcm9sbENoYW5nZTogU2Nyb2xsQ2hhbmdlID0ge307XHJcblxyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmd6b25lOiBOZ1pvbmUpIHsgfVxyXG5cclxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqT2JzZXJ2ZXLpg6jliIYg5L6b5oyH5Luk5Yid5aeL5YyW6LCD55SoICovXHJcbiAgLy8gcHVibGljIGdldEN1cnJlbnRTZWN0aW9uJChzY3JvbGxTcHlJZDogc3RyaW5nID0gdGhpcy5kZWZhdWx0SWQpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gIC8vICAgaWYoc2Nyb2xsU3B5SWQgIT09ICcnKXtcclxuICAvLyAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsQ2hhbmdlW3Njcm9sbFNweUlkXTtcclxuICAvLyAgIH1cclxuICAvLyAgIGVsc2V7XHJcbiAgLy8gICAgIHJldHVybiB0aGlzLnNjcm9sbENoYW5nZVt0aGlzLmRlZmF1bHRJZF07XHJcbiAgLy8gICB9XHJcbiAgLy8gfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlU2Nyb2xsR3JvdXAoc2Nyb2xsU3B5SWQ6IHN0cmluZyA9IHRoaXMuZGVmYXVsdElkKSB7XHJcbiAgICBjb25zdCBncm91cElkID0gc2Nyb2xsU3B5SWQgIT09ICcnID8gc2Nyb2xsU3B5SWQgOiB0aGlzLmRlZmF1bHRJZDtcclxuICAgIGlmICghdGhpcy5zY3JvbGxDaGFuZ2VbZ3JvdXBJZF0pIHtcclxuICAgICAgdGhpcy5zY3JvbGxDaGFuZ2VbZ3JvdXBJZF0gPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsQ2hhbmdlW2dyb3VwSWRdO1xyXG4gIH1cclxuICAgIHByaXZhdGUgZmluZE1pbkluVG9WaWV3RWxlbWVudChlbGVzLCAkc2Nyb2xsQ29udGFpbmVyLG9mZnNldCl7XHJcbiAgICAgLy8g6I635Y+W5L+h5oGvXHJcbiAgICAgbGV0IHNjcm9sbEluZm89dGhpcy5nZXRCb3VuZGFyeUluZm8oICRzY3JvbGxDb250YWluZXIsb2Zmc2V0KTtcclxuICAgICAgICAgICAgICBcclxuICAgICBsZXQgbGVuID0gZWxlcy5sZW5ndGg7XHJcbiAgICAgLy8gW3tlbDrlhYPntKAsdG9wOumhtixoZWlnaHQ66auY5bqmfV1cclxuICAgICBsZXQgcmVjb3JkRWxlcyA9IFtdO1xyXG4gICAgIGxldCByZXN1bHQ9W107XHJcbiAgICAgLy8g5Yik5pat5piv5ZCm5Zyo6KeG5Y+jXHJcbiAgICAgbGV0IGZpbmRJblZpZXcgPSBmYWxzZTtcclxuICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxlbjsgaysrKSB7XHJcbiAgICAgICByZWNvcmRFbGVzLnB1c2goeyBpZDogZWxlc1trXS5pZCwgdG9wOiBlbGVzW2tdLmVsZW1lbnQub2Zmc2V0VG9wLCBoZWlnaHQ6IGVsZXNba10uZWxlbWVudC5vZmZzZXRIZWlnaHR9KTtcclxuICAgICAgLy8gcmVjb3JkRWxlc1trXVsncmF0aW8nXT0ocmVjb3JkRWxlc1trXVsndG9wJ10rcmVjb3JkRWxlc1trXVsnaGVpZ2h0J10pL3Njcm9sbEluZm8uY29udGVudEhlaWdodFxyXG4gICAgIH1cclxuICAgICAgIHZhciBtaW5JbmRleCwgdGVtcDtcclxuICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgbWluSW5kZXggPSBpO1xyXG4gICAgICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgIGlmIChyZWNvcmRFbGVzW2pdLnRvcCA8IHJlY29yZEVsZXNbbWluSW5kZXhdLnRvcCkgey8v5a+75om+5pyA5bCP55qE5pWwXHJcbiAgICAgICAgICAgICAgICAgICBtaW5JbmRleCA9IGo7ICAvL+WwhuacgOWwj+aVsOeahOe0ouW8leS/neWtmFxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIHRlbXAgPSByZWNvcmRFbGVzW2ldO1xyXG4gICAgICAgICAgIHJlY29yZEVsZXNbaV0gPSByZWNvcmRFbGVzW21pbkluZGV4XTtcclxuICAgICAgICAgICByZWNvcmRFbGVzW21pbkluZGV4XSA9IHRlbXA7XHJcbiAgICAgICB9XHJcbiAgICAgaWYoc2Nyb2xsSW5mby50b3A+c2Nyb2xsSW5mby5taW4pe1xyXG4gICAgICAgICAvLyBzY3JvbGxUb3Ag5rua5Yqo5Yiw5pyA5ZCO5Ymp5LiL5Zyo55WM6Z2i5LiK55qE5YWD57Sg5aSa5Liq5YWD57Sg5LiN6IO95qC55o2ub2Zmc2V0VG9w5p2l5Yik5pat77yM5bqU6K+l5pi+56S65ZOq5Liq77yM5oyJ54Wn5q+U5L6L5p2l6K6h566XXHJcbiAgICAgICAgIGxldCBzY3JvbGxUb3BSYXRpbz0oc2Nyb2xsSW5mby50b3Atc2Nyb2xsSW5mby5taW4pL3Njcm9sbEluZm8uYm91bmRhcnk7XHJcbiAgICAgICAgICAgICAgICAvLyDliKTmlq10b3DnmoTkvY3nva5cclxuICAgICAgICAvL2xldCByYXRpb1JlZmVySGVpZ2h0PXNjcm9sbEluZm8uYm91bmRhcnkrc2Nyb2xsSW5mby5maXhlZEhlaWdodDtcclxuICAgICAgICBsZXQgZWxSYXRpbz0wO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBrPTA7azxsZW47aysrKXtcclxuICAgICAgICAgICAgLy9yZWNvcmRFbGVzW2tdWydyYWRpbyddPShyZWNvcmRFbGVzW2tdWyd0b3AnXStyZWNvcmRFbGVzW2tdWydoZWlnaHQnXS1zY3JvbGxJbmZvLm1pbikvcmF0aW9SZWZlckhlaWdodDtcclxuICAgICAgICAgICAgaWYocmVjb3JkRWxlc1trXS50b3Atc2Nyb2xsSW5mby5vZmZzZXQ+PXNjcm9sbEluZm8udG9wfHxyZWNvcmRFbGVzW2tdLnRvcCtyZWNvcmRFbGVzW2tdLmhlaWdodC1zY3JvbGxJbmZvLm9mZnNldD5zY3JvbGxJbmZvLnRvcCl7XHJcbiAgICAgICAgICAgICBlbFJhdGlvPShyZWNvcmRFbGVzW2tdWyd0b3AnXStyZWNvcmRFbGVzW2tdWydoZWlnaHQnXSkvc2Nyb2xsSW5mby5jb250ZW50SGVpZ2h0O1xyXG4gICAgICAgICAgICAgaWYoIWZpbmRJblZpZXcmJnNjcm9sbFRvcFJhdGlvPD1lbFJhdGlvKXtcclxuICAgICAgICAgICAgICAgZmluZEluVmlldz10cnVlO1xyXG4gICAgICAgICAgICAgICByZXN1bHQucHVzaChyZWNvcmRFbGVzW2tdLmlkKTtcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIGlmKHJlc3VsdC5sZW5ndGg9PTApe1xyXG4gICAgICAgICAvLyDmsqHmib7liLDvvIzlsLHov5Tlm57mnIDlpKfnmoRcclxuICAgICAgICAgcmV0dXJuIFtyZWNvcmRFbGVzW2xlbi0xXS5pZF07XHJcbiAgICAgICB9XHJcbiAgICAgICByZXR1cm4gW3Jlc3VsdFswXV07IFxyXG4gICAgIH1lbHNle1xyXG4gICAgICAgLy8g6aG16Z2i6L6D6ZW/5pe277yM5oyJ54Wnc2Nyb2xsVG9w5ZKMb2Zmc2V0VG9w5q+U6L6DXHJcbiAgICAgICBmb3IodmFyIGs9MDtrPGxlbjtrKyspe1xyXG4gICAgICAgICAvLyDlsI/kuo7nrYnkuo7vvIzogIPomZHliLDlrrnlmajmnInlhoXkuIrpl7Tot53nmoTmg4XlhrVcclxuICAgICAgICAgIGlmKHJlY29yZEVsZXNba10udG9wLXNjcm9sbEluZm8ub2Zmc2V0PD1zY3JvbGxJbmZvLnRvcCYmcmVjb3JkRWxlc1trXS50b3ArcmVjb3JkRWxlc1trXS5oZWlnaHQtc2Nyb2xsSW5mby5vZmZzZXQ+PXNjcm9sbEluZm8udG9wKXtcclxuICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlY29yZEVsZXNba10uaWQpO1xyXG4gICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIH1cclxuICAgICAgIH1cclxuICAgICAgIGlmKHJlc3VsdC5sZW5ndGg9PTApe1xyXG4gICAgICAgICAvLyDmsqHmib7liLDvvIzlsLHov5Tlm57mnIDlsI/nmoRcclxuICAgICAgICAgcmV0dXJuIFtyZWNvcmRFbGVzWzBdLmlkXTtcclxuICAgICAgIH0gICAgICAgXHJcbiAgICAgICByZXR1cm4gW3Jlc3VsdFtyZXN1bHQubGVuZ3RoLTFdXTsgXHJcbiAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICB9XHJcbiAgcHJpdmF0ZSBnZXRCb3VuZGFyeUluZm8oJHNjcm9sbENvbnRhaW5lcixvZmZzZXQpe1xyXG4gICAgbGV0IGZpeGVkSGVpZ2h0PSRzY3JvbGxDb250YWluZXIub2Zmc2V0SGVpZ2h0O1xyXG4gICAgbGV0IHJlYWxSYXRpbz0oJHNjcm9sbENvbnRhaW5lci5zY3JvbGxIZWlnaHQtZml4ZWRIZWlnaHQgKS9maXhlZEhlaWdodDtcclxuICAgICAgICBsZXQgbWF4Um91bmQ9TWF0aC5jZWlsKHJlYWxSYXRpbyk7XHJcbiAgICAgICAgbGV0IG1pblJvdW5kPW1heFJvdW5kLTE+MD9tYXhSb3VuZC0xOjA7XHJcbiAgICAvLyAvLyDkuIrkuIvpl7Tot50s5q2k5aSE5b2x5ZON5q+U5L6L55qE6K6h566X77yM6K+V5oOz5a655Zmo5pyJ5YaF5LiK6Ze06Led77yM5YWD57Sg55qEb2Zmc2V0VG9w5LiN5Y+v6IO95Li6MO+8jOS9huaYr+WuueWZqOeahHNjcm9sbFRvcOWIneWni+S4ujBcclxuICAgIGxldCBzY3JvbGxDb250YWluZXJQYWRkaW5nVG9wPXBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSgkc2Nyb2xsQ29udGFpbmVyLG51bGwpLnBhZGRpbmdUb3ApO1xyXG4gICAgLy8gbGV0KGVsZW1lbnQuY3VycmVudFN0eWxlPyBlbGVtZW50LmN1cnJlbnRTdHlsZSA6IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpKS5oZWlnaHQpO1xyXG4gICAgcmV0dXJuICB7XHJcbiAgICAgIG9mZnNldDpvZmZzZXQ/b2Zmc2V0OnNjcm9sbENvbnRhaW5lclBhZGRpbmdUb3AsXHJcbiAgICAgIHRvcDokc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCxcclxuICAgICAgYm90dG9tOiRzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wICsgZml4ZWRIZWlnaHQsXHJcbiAgICAgIGZpeGVkSGVpZ2h0OmZpeGVkSGVpZ2h0LFxyXG4gICAgICBjb250ZW50SGVpZ2h0OiRzY3JvbGxDb250YWluZXIuc2Nyb2xsSGVpZ2h0LFxyXG4gICAgICBtaW46bWluUm91bmQqZml4ZWRIZWlnaHQsXHJcbiAgICAgIGJvdW5kYXJ5OiRzY3JvbGxDb250YWluZXIuc2Nyb2xsSGVpZ2h0LShtaW5Sb3VuZCsxKSpmaXhlZEhlaWdodFxyXG4gICAgfS8vIOS7pW9mZnNldEhlaWdodOS4uuW6pumHj++8jOiusOW9lW9mZnNldFRvcOS4jei2s+S4gOS4qumrmOW6pueahOWFt+S9k+mVv+W6pixcclxuICB9XHJcbiAgLyoqY29udGVudOmDqOWIhua7muWKqOS6i+S7tuebkeWQrCAqL1xyXG4gIHByaXZhdGUgc3Vic2NyaWJlU2Nyb2xsKGtleTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLm5nem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsU3Vic2NyaXB0aW9uID0gZnJvbUV2ZW50KHRoaXMuc2Nyb2xsQ29udGVudHNba2V5XSwgJ3Njcm9sbCcpXHJcbiAgICAgICAgLnBpcGUoZGVib3VuY2VUaW1lKDEwMCwgYW5pbWF0aW9uRnJhbWUpKVxyXG4gICAgICAgIC5zdWJzY3JpYmUoKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2Nyb2xsU3BpZXNba2V5XSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGN1cnJlbnRTZWN0aW9uSWQsIGVsZW1lbnRzLCBzdWJqZWN0IH0gPSB0aGlzLnNjcm9sbFNwaWVzW2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbmRNaW5JblZpZXdJZHM9IHRoaXMuZmluZE1pbkluVG9WaWV3RWxlbWVudChlbGVtZW50cyx0aGlzLnNjcm9sbENvbnRlbnRzW2tleV0sdGhpcy5vZmZzZXRzW2tleV0pOyAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKCFmaW5kTWluSW5WaWV3SWRzIHx8ICFmaW5kTWluSW5WaWV3SWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0b3BFbGVtZW50SWQ6IHN0cmluZyA9ZmluZE1pbkluVmlld0lkc1swXTtcclxuICAgICAgICAgICAgLy/liKTmlq0g54K55Ye75piv5ZCm5piv54K55Ye75byV6LW355qE5rua5YqoXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbFNwaWVzW2tleV0uY2xpY2tDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICB0aGlzLnNjcm9sbFNwaWVzW2tleV0uY2xpY2tDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zY3JvbGxTcGllc1trZXldLmNsaWNrQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgaWYgKHRvcEVsZW1lbnRJZCAhPT0gY3VycmVudFNlY3Rpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxTcGllc1trZXldLmN1cnJlbnRTZWN0aW9uSWQgPSB0b3BFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5nem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQodG9wRWxlbWVudElkKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqdGFi6YOo5YiG54K55Ye75LqL5Lu255uR5ZCsICovXHJcbiAgcHJpdmF0ZSBzdWJzY3JpYmVDbGljayhrZXkpOiB2b2lkIHtcclxuICAgIC8vT2JqZWN0LmtleXModGhpcy5zY3JvbGxGb2xsb3dTcGlwZXMpLmZvckVhY2goKGtleTpzdHJpbmcpOnZvaWQ9PntcclxuICAgIGlmICh0aGlzLnNjcm9sbEZvbGxvd1NwaXBlc1trZXldICYmIHRoaXMuc2Nyb2xsRm9sbG93U3BpcGVzW2tleV0ubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsRm9sbG93U3BpcGVzW2tleV0uZm9yRWFjaCgoZm9sbG93KSA9PiB7XHJcbiAgICAgICAgZnJvbUV2ZW50KGZvbGxvdy5lbGVtZW50LCAnY2xpY2snKVxyXG4gICAgICAgICAgLnBpcGUodGhyb3R0bGVUaW1lKDEwMCkpXHJcbiAgICAgICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5mU2Nyb2xsRm9sbG93Q2xpY2soa2V5LCBmb2xsb3cpO1xyXG4gICAgICAgICAgICAvLyBpZih0aGlzLnNjcm9sbFNwaWVzW2tleV0pe1xyXG5cclxuICAgICAgICAgICAgLy8gICBjb25zdCB7IGN1cnJlbnRTZWN0aW9uSWQsIGVsZW1lbnRzLCBzdWJqZWN0IH0gPSB0aGlzLnNjcm9sbFNwaWVzW2tleV07XHJcbiAgICAgICAgICAgIC8vICAgdGhpcy5zY3JvbGxTcGllc1trZXldLmNsaWNrQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gICBpZihmb2xsb3cuaWQgIT09IGN1cnJlbnRTZWN0aW9uSWQpe1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc3QgdG9wRWxlbWVudEluVmlldyA9IGVsZW1lbnRzLmZpbmQoZWwgPT4gZWwuaWQgPT09IGZvbGxvdy5pZCk7XHJcbiAgICAgICAgICAgIC8vICAgICBpZighdG9wRWxlbWVudEluVmlldykgeyByZXR1cm47IH1cclxuICAgICAgICAgICAgLy8gICAgIHRoaXMuc2Nyb2xsU3BpZXNba2V5XS5jdXJyZW50U2VjdGlvbklkID0gZm9sbG93LmlkO1xyXG4gICAgICAgICAgICAvLyAgICAgLy90aGlzLnNjcm9sbENvbnRlbnRzW2tleV0ub2Zmc2V0VG9wXHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnNjcm9sbENvbnRlbnRzW2tleV0uc2Nyb2xsVG9wID0gTWF0aC5yb3VuZCh0b3BFbGVtZW50SW5WaWV3LmVsZW1lbnQub2Zmc2V0VG9wIC0gdGhpcy5vZmZzZXRzW2tleV0pO1xyXG4gICAgICAgICAgICAvLyAgICAgc3ViamVjdC5uZXh0KGZvbGxvdy5pZCk7XHJcbiAgICAgICAgICAgIC8vICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvL30pO1xyXG4gIH1cclxuXHJcbiAgZlNjcm9sbEZvbGxvd0NsaWNrKGtleSwgZm9sbG93KXtcclxuICAgIGlmKHRoaXMuc2Nyb2xsU3BpZXNba2V5XSl7XHJcbiAgICAgIGNvbnN0IHsgY3VycmVudFNlY3Rpb25JZCwgZWxlbWVudHMsIHN1YmplY3QgfSA9IHRoaXMuc2Nyb2xsU3BpZXNba2V5XTtcclxuICAgICAgdGhpcy5zY3JvbGxTcGllc1trZXldLmNsaWNrQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgaWYgKGZvbGxvdy5pZCAhPT0gY3VycmVudFNlY3Rpb25JZCkge1xyXG4gICAgICAgIGNvbnN0IHRvcEVsZW1lbnRJblZpZXcgPSBlbGVtZW50cy5maW5kKGVsID0+IGVsLmlkID09PSBmb2xsb3cuaWQpO1xyXG4gICAgICAgIGlmICghdG9wRWxlbWVudEluVmlldykgeyByZXR1cm47IH1cclxuICAgICAgICB0aGlzLnNjcm9sbFNwaWVzW2tleV0uY3VycmVudFNlY3Rpb25JZCA9IGZvbGxvdy5pZDtcclxuICAgICAgICAvL3RoaXMuc2Nyb2xsQ29udGVudHNba2V5XS5vZmZzZXRUb3BcclxuICAgICAgICBpZiAodGhpcy5zY3JvbGxDb250ZW50c1trZXldKSB7XHJcbiAgICAgICAgICAvLyDlhoXlrrnljrvmnInmu5rliqhcclxuICAgICAgICAgIHRoaXMuc2Nyb2xsQ29udGVudHNba2V5XS5zY3JvbGxUb3AgPSBNYXRoLnJvdW5kKHRvcEVsZW1lbnRJblZpZXcuZWxlbWVudC5vZmZzZXRUb3AgLSB0aGlzLm9mZnNldHNba2V5XS0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnNjcm9sbENvbnRlbnRzW2tleV0pLnBhZGRpbmdUb3AsMTApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3ViamVjdC5uZXh0KGZvbGxvdy5pZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKirmt7vliqDpnIDopoHooqvmu5rliqjnm5HlkKzpg6jliIYgKi9cclxuICBwdWJsaWMgYWRkQ29udGVudEVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRlbnRJZCA9IHRoaXMuZGVmYXVsdElkKTogdm9pZCB7XHJcbiAgICBpZiAoY29udGVudElkICE9PSAnJykge1xyXG4gICAgICB0aGlzLnNjcm9sbENvbnRlbnRzW2NvbnRlbnRJZF0gPSBlbGVtZW50O1xyXG4gICAgICB0aGlzLnN1YnNjcmliZVNjcm9sbChjb250ZW50SWQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsQ29udGVudHNbdGhpcy5kZWZhdWx0SWRdID0gZWxlbWVudDtcclxuICAgICAgdGhpcy5zdWJzY3JpYmVTY3JvbGwodGhpcy5kZWZhdWx0SWQpO1xyXG4gICAgfVxyXG4gICAgLy8g5Yik5pat5piv5pyJ5b6F5pS55Y+Y55qE54q25oCBXHJcbiAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lckNsc05hbWUoY29udGVudElkKTtcclxuICB9XHJcbiAgLyoq56e76Zmk6ZyA6KaB6KKr5rua5Yqo55uR5ZCs6YOo5YiG5YWD57SgICovXHJcbiAgcHVibGljIHJlbW92ZUNvbnRlbnRFbGVtZW50KGNvbnRlbnRJZCA9IHRoaXMuZGVmYXVsdElkKTogdm9pZCB7XHJcbiAgICBjb25zdCByZW1vdmVJZCA9IGNvbnRlbnRJZCAhPT0gJycgPyBjb250ZW50SWQgOiB0aGlzLmRlZmF1bHRJZDtcclxuICAgIGRlbGV0ZSB0aGlzLnNjcm9sbFNwaWVzW3JlbW92ZUlkXTtcclxuICB9XHJcbiAgLyoq5re75Yqg5rua5Yqo55uR5ZCsdGFi6YOo5YiG5YWD57SgKi9cclxuICBwdWJsaWMgYWRkRm9sbG93RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCwgZm9sbG93SWQsIGZvbGxvd0NvbnRlbnRJZCA9IHRoaXMuZGVmYXVsdElkKTogdm9pZCB7XHJcbiAgICBjb25zdCBncm91cElkID0gZm9sbG93Q29udGVudElkICE9PSAnJyA/IGZvbGxvd0NvbnRlbnRJZCA6IHRoaXMuZGVmYXVsdElkO1xyXG5cclxuICAgIGNvbnN0IGZvbGxvdyA9IHtcclxuICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgaWQ6IGZvbGxvd0lkXHJcbiAgICB9O1xyXG4gICAgaWYgKCF0aGlzLnNjcm9sbEZvbGxvd1NwaXBlc1tncm91cElkXSkge1xyXG4gICAgICB0aGlzLnNjcm9sbEZvbGxvd1NwaXBlc1tncm91cElkXSA9IFtdXHJcbiAgICB9XHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3mraTlpITmsqHmnInlpITnkIbph43lpI1JRFxyXG4gICAgY29uc3QgZm9sbG93cyA9IHRoaXMuc2Nyb2xsRm9sbG93U3BpcGVzW2dyb3VwSWRdO1xyXG4gICAgZm9sbG93cy5wdXNoKGZvbGxvdyk7XHJcbiAgICB0aGlzLnNjcm9sbEZvbGxvd1NwaXBlc1tncm91cElkXSA9IGZvbGxvd3M7XHJcbiAgICB0aGlzLnN1YnNjcmliZUNsaWNrKGdyb3VwSWQpO1xyXG4gIH1cclxuICAvKirnp7vpmaTmu5rliqjnm5HlkKx0YWLpg6jliIblhYPntKAgKi9cclxuICBwdWJsaWMgcmVtb3ZlRm9sbG93RWxlbWVudChmb2xsb3dJZCwgZm9sbG93Q29udGVudElkID0gdGhpcy5kZWZhdWx0SWQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5zY3JvbGxGb2xsb3dTcGlwZXNbZm9sbG93Q29udGVudElkXS5maWx0ZXIoZWwgPT4ge1xyXG4gICAgICByZXR1cm4gZWwuaWQgIT09IGZvbGxvd0lkO1xyXG4gICAgfSlcclxuICAgIGlmICghZWxlbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnNjcm9sbEZvbGxvd1NwaXBlc1tmb2xsb3dDb250ZW50SWRdO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnNjcm9sbEZvbGxvd1NwaXBlc1tmb2xsb3dDb250ZW50SWRdID0gZWxlbWVudHM7XHJcbiAgfVxyXG4gIC8qKua3u+WKoOa7muWKqOebkeWQrOmUmueCuemDqOWIhuWFg+e0oCAqL1xyXG4gIHB1YmxpYyBhZGRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzY3JvbGxJZDogc3RyaW5nLCBzY3JvbGxHcm91cElkOiBzdHJpbmcgPSB0aGlzLmRlZmF1bHRJZCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLnNjcm9sbFNwaWVzW3Njcm9sbEdyb3VwSWRdKSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsU3BpZXNbc2Nyb2xsR3JvdXBJZF0gPSB7XHJcbiAgICAgICAgZWxlbWVudHM6IFtdLFxyXG4gICAgICAgIGN1cnJlbnRTZWN0aW9uSWQ6ICcnLFxyXG4gICAgICAgIHN1YmplY3Q6IG5ldyBTdWJqZWN0KCksXHJcbiAgICAgIH0gYXMgU2Nyb2xsU3B5O1xyXG5cclxuICAgICAgdGhpcy5zY3JvbGxTcGllc1tzY3JvbGxHcm91cElkXS5zdWJqZWN0XHJcbiAgICAgICAgLnN1YnNjcmliZSgoY3VycmVudFNlY3Rpb246IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2Nyb2xsQ2hhbmdlW3Njcm9sbEdyb3VwSWRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ2hhbmdlW3Njcm9sbEdyb3VwSWRdLm5leHQoY3VycmVudFNlY3Rpb24pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5oYXNFbGVtZW50KHNjcm9sbElkLCBzY3JvbGxHcm91cElkKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWw6IFNjcm9sbEVsZW1lbnQgPSB7XHJcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgIGlkOiBzY3JvbGxJZFxyXG4gICAgfVxyXG4gICAgLy8g5Yqg5YWl5pe277yM5Yik5pat5piv5ZCm5piv5b2T5YmNXHJcbiAgICB0aGlzLnVwZGF0ZVNjcm9sbFNweUFjdGl2ZUNsc05hbWUoc2Nyb2xsR3JvdXBJZCxlbCk7XHJcbiAgICBjb25zdCBlbGVtZW50czogYW55W10gPSB0aGlzLnNjcm9sbFNwaWVzW3Njcm9sbEdyb3VwSWRdLmVsZW1lbnRzO1xyXG4gICAgZWxlbWVudHMucHVzaChlbCk7XHJcbiAgICBlbGVtZW50cy5zb3J0KChhLCBiKTogbnVtYmVyID0+IGIuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSBhLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKTtcclxuXHJcbiAgICB0aGlzLnNjcm9sbFNwaWVzW3Njcm9sbEdyb3VwSWRdLmVsZW1lbnRzID0gZWxlbWVudHM7XHJcbiAgfVxyXG4gIC8qKuenu+mZpOa7muWKqOebkeWQrOmUmueCuemDqOWIhuWFg+e0oCAqL1xyXG4gIHB1YmxpYyByZW1vdmVFbGVtZW50KHNjcm9sbElkOiBzdHJpbmcsIHNjcm9sbEdyb3VwSWQ6IHN0cmluZyA9IHRoaXMuZGVmYXVsdElkKTogdm9pZCB7XHJcbiAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuc2Nyb2xsU3BpZXNbc2Nyb2xsR3JvdXBJZF0uZWxlbWVudHMuZmlsdGVyKChlbCk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICByZXR1cm4gZWwuaWQgIT09IHNjcm9sbElkXHJcbiAgICB9XHJcbiAgICApO1xyXG4gICAgaWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgZGVsZXRlIHRoaXMuc2Nyb2xsU3BpZXNbc2Nyb2xsR3JvdXBJZF07XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuc2Nyb2xsU3BpZXNbc2Nyb2xsR3JvdXBJZF0uZWxlbWVudHMgPSBlbGVtZW50cztcclxuICB9XHJcbiAgLyoq5Yik5patc2Nyb2xsR3JvdXBJZCDmmK/lkKbmnIlpZOWQjeS4umVsZW1lbnRJZCDnmoTlhYPntKAgKi9cclxuICBwcml2YXRlIGhhc0VsZW1lbnQoZWxlbWVudElkOiBzdHJpbmcsIHNjcm9sbEdyb3VwSWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsU3BpZXNbc2Nyb2xsR3JvdXBJZF0uZWxlbWVudHMuc29tZSgoZWxlbWVudCk6IGJvb2xlYW4gPT4gZWxlbWVudC5pZCA9PT0gZWxlbWVudElkKTtcclxuICB9XHJcbiAgLyoq6K6+572ub2Zmc2V0ICovXHJcbiAgcHVibGljIHNldE9mZnNldChvZmZzZXQ6IG51bWJlciA9IDAsIGNvbnRlbnRJZDogc3RyaW5nID0gdGhpcy5kZWZhdWx0SWQpOiB2b2lkIHtcclxuICAgIGlmIChjb250ZW50SWQgIT09ICcnKSB7XHJcbiAgICAgIHRoaXMub2Zmc2V0c1tjb250ZW50SWRdID0gb2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub2Zmc2V0c1t0aGlzLmRlZmF1bHRJZF0gPSBvZmZzZXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qU2Nyb2xsU3B557uE5Lu2KOmUmueCueWIl+ihqOWMuuWfn++8ieWIneWni+WMlumihOiuvmRlZmF1bHRJZCAqL1xyXG4gIHNldEdyb3VwSWQoZ3JvdXBpZCkge1xyXG4gICAgaWYgKGdyb3VwaWQpIHtcclxuICAgICAgdGhpcy5kZWZhdWx0SWQgPSBncm91cGlkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0R3JvdXBJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmRlZmF1bHRJZDtcclxuICB9XHJcbiAgLyrmlLnlj5ggU2Nyb2xsU3B557uE5Lu277yI6ZSa54K55YiX6KGo5Yy65Z+f77yJ55qE5pi+56S654q25oCB5pe2ICovXHJcbiAgY2hhbmdlR3JvdXBJZEZvbGxvd1R5cGUoZ3JvdXBpZCwgZm9sbG93VHlwZURhdGEpIHtcclxuICAgIHRoaXMuc2Nyb2xsU3B5TGlzdEZvbGxvd1R5cGVDaGFuZ2VzW2dyb3VwaWRdID0gZm9sbG93VHlwZURhdGE7XHJcbiAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lckNsc05hbWUoZ3JvdXBpZCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlQ29udGFpbmVyQ2xzTmFtZShncm91cGlkKSB7XHJcbiAgICAvLyDmsqHmnInlvoXmm7TmlrDlj5jljJZcclxuICAgIGlmICghdGhpcy5zY3JvbGxTcHlMaXN0Rm9sbG93VHlwZUNoYW5nZXMuaGFzT3duUHJvcGVydHkoZ3JvdXBpZCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gY29udGFpbmVy5bm25LiN5a2Y5Zyo55qE5pe25YCZXHJcbiAgICBpZiAoIXRoaXMuc2Nyb2xsQ29udGVudHMuaGFzT3duUHJvcGVydHkoZ3JvdXBpZCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGZvbGxvd1R5cGVEYXRhID0gdGhpcy5zY3JvbGxTcHlMaXN0Rm9sbG93VHlwZUNoYW5nZXNbZ3JvdXBpZF07XHJcbiAgICBsZXQgY29udGFpbmVyRWwgPSB0aGlzLnNjcm9sbENvbnRlbnRzW2dyb3VwaWRdO1xyXG4gICAgLy8gQ29udGFpbmVy55qERWxlbWVudCBcclxuICAgIGlmIChmb2xsb3dUeXBlRGF0YVsncHJldiddID09ICdmaXhlZFRhYicpIHtcclxuICAgICAgLy/np7vpmaRjbGFzc1xyXG4gICAgICBjb250YWluZXJFbC5jbGFzc05hbWUgPSBjb250YWluZXJFbC5jbGFzc05hbWUucmVwbGFjZSh0aGlzLmZpeGVkVGFiQ29udGFpbmVyQ2xzTmFtZSwgJycpO1xyXG4gICAgICBjb250YWluZXJFbC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5wYXJlbnRGaXhlZFRhYkNvbnRhaW5lckNsc05hbWUpO1xyXG4gICAgfSBlbHNlIGlmIChmb2xsb3dUeXBlRGF0YVsnbmV4dCddID09ICdmaXhlZFRhYicpIHtcclxuICAgICAgLy8g5aKe5YqgY2xhc3NcclxuICAgICAgY29udGFpbmVyRWwuY2xhc3NOYW1lICs9ICcgJyArIHRoaXMuZml4ZWRUYWJDb250YWluZXJDbHNOYW1lO1xyXG4gICAgICAvLyDnu5nniLblhYPntKDlop7liqDpq5jluqZcclxuICAgICAgY29udGFpbmVyRWwucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMucGFyZW50Rml4ZWRUYWJDb250YWluZXJDbHNOYW1lKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2Nyb2xsU3B5TGlzdEZvbGxvd1R5cGVDaGFuZ2VzW2dyb3VwaWRdID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVNjcm9sbFNwaWVzQWN0aXZlQ2xzTmFtZShncm91cElkLGN1cnJlbnRJZCkge1xyXG4gICAgLy8g6L+95Yqg44CB56e76ZmkY2xhc3NcclxuICAgIHRoaXMuc2Nyb2xsU3BpZXNbZ3JvdXBJZF0uZWxlbWVudHMubWFwKChpdGVtOiBTY3JvbGxFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLmlkID09IGN1cnJlbnRJZCkge1xyXG4gICAgICAgIC8vIOaJvuWIsOW9k+WJjVxyXG4gICAgICAgIGlmIChpdGVtLmVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YodGhpcy5zY3JvbGxTcHlQYXJ0QWN0aXZlQ2xzTmFtZSkgPCAwKSB7XHJcbiAgICAgICAgICBpdGVtLmVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIHRoaXMuc2Nyb2xsU3B5UGFydEFjdGl2ZUNsc05hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIOWFtuS7llxyXG4gICAgICAgIGl0ZW0uZWxlbWVudC5jbGFzc05hbWUgPSBpdGVtLmVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UodGhpcy5zY3JvbGxTcHlQYXJ0QWN0aXZlQ2xzTmFtZSwgJycpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5b2T6L+95YqgU2Nyb2xsU3B55Z2X55qE5pe25YCZ77yM5Yik5pat5piv5ZCm5piv5bey57uP6K6+572u55qE5b2T5YmNXHJcbiAgICogQHBhcmFtIGdyb3VwSWQgXHJcbiAgICogQHBhcmFtIHNjcm9sbEVsIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgIHVwZGF0ZVNjcm9sbFNweUFjdGl2ZUNsc05hbWUoZ3JvdXBJZCxzY3JvbGxFbDpTY3JvbGxFbGVtZW50KXtcclxuICAgIC8vIOWmguaenOW3suiuvue9rlxyXG4gICAgaWYodGhpcy5jdXJyZW50U2VjdGlvbklkT2JqW2dyb3VwSWRdKXtcclxuICAgICAgaWYodGhpcy5jdXJyZW50U2VjdGlvbklkT2JqW2dyb3VwSWRdWydpZFZhbHVlJ109PXNjcm9sbEVsLmlkKXtcclxuICAgICAgICBzY3JvbGxFbC5lbGVtZW50LmNsYXNzTmFtZSs9JyAnK3RoaXMuc2Nyb2xsU3B5UGFydEFjdGl2ZUNsc05hbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==