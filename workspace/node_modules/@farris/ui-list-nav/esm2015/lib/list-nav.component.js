/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Directive, TemplateRef, ContentChild, Output, EventEmitter, ViewChild, ElementRef, Renderer2 } from '@angular/core';
export class listNavHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
listNavHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[listNavHeader]'
            },] }
];
/** @nocollapse */
listNavHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    listNavHeaderTemplateDirective.prototype.template;
}
export class listNavContentTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
listNavContentTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[listNavContent]'
            },] }
];
/** @nocollapse */
listNavContentTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    listNavContentTemplateDirective.prototype.template;
}
export class listNavFooterTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
listNavFooterTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[listNavFooter]'
            },] }
];
/** @nocollapse */
listNavFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    listNavFooterTemplateDirective.prototype.template;
}
export class ListNavComponent {
    /**
     *  原构造函数是没有参数的
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        /**
         * 收起折叠状态变化
         */
        this.navStateChange = new EventEmitter();
        /**
         * emitted when start resizing
         */
        this.rzStart = new EventEmitter();
        /**
         * emitted when start resizing
         */
        this.rzResizing = new EventEmitter();
        /**
         * emitted when stop resizing
         */
        this.rzStop = new EventEmitter();
        /**
         * listnav宽度
         * 不支持百分比，因为此处的宽度被用在内部是外部
         */
        this.listNavWidth = 218;
        // 初始收起状态
        this.initCollapse = false;
        // 显示入口
        this.showEntry = true;
        //--未使用
        this.hover = false;
        // 控件禁用
        this.disabled = false;
        this.position = 'left';
        // 拖拽到某个值时，自动收起的阈值。如果阈值设置小于0，则不处理自动收起
        this.resizeCollapseThreshold = 20;
        // 启用拖拽功能
        this.enableDraggable = false;
        // 设置拖拽的最小值
        this.rzMinWidth = null;
        // 设置拖拽的方向
        this.rzHandles = 'e';
        // 记录真实的iframe父容器
        this._relatedContainer = null;
        // 标记iframe父容器的样式属性position的值
        this._relatedContainerPosition = "";
        // 记录iframe在拖拽时的遮罩层
        this._relatedIframeOverlay = null;
        // 标记iframe遮罩层是否已显示
        this._iframeOverlayShownFlag = false;
        // collapse的动画样式名
        this.animateCls = "splitter-pane-collapse-animate";
        // 标记是否需要更新变量
        this.updateParamsFlag = false;
        // 标记拖拽时上次的大小
        this.resizeDistance = -1;
    }
    // 初始时，是否隐藏Nav
    /**
     * @param {?} value
     * @return {?}
     */
    set hideNav(value) {
        if (value !== undefined && value !== null) {
            if (this.initCollapse !== value) {
                this.initCollapse = value;
                // this.toggleInitCollapseState();
            }
        }
    }
    /**
     * @return {?}
     */
    get hideNav() {
        return this.initCollapse;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set relatedIframeParent(value) {
        this.getRelatedIframeParent(value);
    }
    /**
     * @return {?}
     */
    get relatedIframeParent() {
        return this._relatedContainer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.elementRef) {
            this.compatibleEl();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.el) {
            this.compatibleEl();
        }
    }
    /**
     * 兼容旧表单写法
     * @private
     * @return {?}
     */
    compatibleEl() {
        this.el = this.elementRef.nativeElement;
        // 设置了iframe容器，但是没有创建遮罩
        if (this._relatedIframeParent && !this._relatedIframeOverlay) {
            this.getRelatedIframeParent(this._relatedIframeParent);
        }
    }
    /**
     * 点击収折
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        event && event.stopPropagation();
        if (this.disabled) {
            return;
        }
        // 初始没有加上这个样式，是避免初始设置收起的时候，看到有収折的动画
        this.renderer && this.renderer.addClass(this.el.querySelector('.f-list-nav-in'), this.animateCls);
        this.initCollapse = !this.initCollapse;
        this.navStateChange.emit({ 'showNav': !this.hideNav });
    }
    //--未使用
    /**
     * @param {?} event
     * @return {?}
     */
    hoverToggle(event) {
        this.hideNav = !this.hideNav;
        this.navStateChange.emit({ 'showNav': !this.hideNav });
    }
    /**
     *  拖拽的变化中事件
     *  如果超过阈值，不处理
     *  暂未处理拖拽最大、最小值的问题
     * @param {?} pos
     * @return {?}
     */
    onRZResizing(pos) {
        if (pos && pos["size"]) {
            /** @type {?} */
            let changeProp = this.getStyleProp();
            /** @type {?} */
            let resizeDirection = "";
            if (this.resizeDistance >= 0) {
                // 开始记录后
                // 此次值比上次记录大，说明在expand
                resizeDirection =
                    pos["size"][changeProp] > this.resizeDistance
                        ? "expand"
                        : "collapse";
            }
            this.resizeDistance = pos["size"][changeProp];
            if (resizeDirection == "expand" && this.initCollapse) {
                this.initCollapse = false;
            }
            if (pos["size"][changeProp] > this.resizeCollapseThreshold ||
                !resizeDirection) {
                // 拖拽速度快的时候，会漏掉计算的时机
                return;
            }
            if (this.resizeCollapseThreshold > 0) {
                // 设置了自动収折阈值
                if (!this.initCollapse && resizeDirection == "collapse") {
                    // 处理拖拽収折过程中，自动收起；不处理展开过程中的，自动展开
                    if (pos["actions"] &&
                        pos["actions"].hasOwnProperty("stopResize")) {
                        pos["actions"]["stopResize"]();
                    }
                    this.toggle(null);
                }
            }
            else {
                // 未设置自动収折阈值，需要单独处理 即将收起时状态、即将展开时状态
                if (resizeDirection == "collapse") {
                    if (pos["size"][changeProp] < 3 && !this.initCollapse) {
                        this.initCollapse = true;
                    }
                }
            }
        }
        this.rzResizing.emit(pos);
    }
    // 拖拽的开始的事件
    /**
     * @param {?} pos
     * @return {?}
     */
    onRZStart(pos) {
        // 禁用収折
        if (this.draggableWrapper.nativeElement.className.indexOf(this.animateCls) > -1) {
            this.renderer.removeClass(this.draggableWrapper.nativeElement, this.animateCls);
        }
        // 如果有iframe遮罩并且没有显示
        if (this._relatedIframeOverlay && !this._iframeOverlayShownFlag) {
            if (["relative", "absolute"].indexOf(this._relatedContainerPosition) < 0) {
                this.renderer.setStyle(this._relatedContainer, "position", "relative");
            }
            this.renderer.setStyle(this._relatedIframeOverlay, "display", "block");
            this._iframeOverlayShownFlag = true;
        }
        if (!this.updateParamsFlag &&
            pos["actions"] &&
            pos["actions"].hasOwnProperty("updateParams")) {
            pos["actions"]["updateParams"]({ fixedEdge: true });
            this.updateParamsFlag = true;
        }
        this.rzStart.emit(pos);
    }
    // 拖拽的停止事件
    /**
     * @param {?} pos
     * @return {?}
     */
    onRZStop(pos) {
        this.resizeDistance = -1;
        // 如果有iframe遮罩并且显示了
        if (this._relatedIframeOverlay && this._iframeOverlayShownFlag) {
            if (["relative", "absolute"].indexOf(this._relatedContainerPosition) < 0) {
                this.renderer.setStyle(this._relatedContainer, "position", this._relatedContainerPosition);
            }
            this.renderer.setStyle(this._relatedIframeOverlay, "display", "none");
            this._iframeOverlayShownFlag = false;
        }
        this.rzStop.emit(pos);
    }
    /**
     * 布局排列不一样，影响到是设置宽度还是高度
     * @private
     * @return {?}
     */
    getStyleProp() {
        /** @type {?} */
        let hori = ["left", "right"].findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item == this.position));
        return hori > -1 ? "width" : "height";
    }
    /**
     * 规范获取iframe所在的父容器
     * @private
     * @param {?} content
     * @return {?}
     */
    getRelatedIframeParent(content) {
        if (!content || !this.elementRef) {
            this._relatedContainer = null;
        }
        if (content instanceof ElementRef) {
            this._relatedContainer = content.nativeElement;
        }
        else if (typeof content == "string") {
            this._relatedContainer = this.elementRef.nativeElement.parentElement.querySelector(content);
        }
        else {
            this._relatedContainer = content;
        }
        if (this._relatedContainer) {
            this._relatedContainerPosition = this._relatedContainer["style"]["position"];
            // 构造遮罩层
            this._relatedIframeOverlay = this.renderer.createElement("div");
            this._relatedIframeOverlay.className = "f-utils-absolute-all";
            this.renderer.setStyle(this._relatedIframeOverlay, "display", "none");
            this.renderer.appendChild(this._relatedContainer, this._relatedIframeOverlay);
        }
    }
}
ListNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-list-nav',
                template: "<div  [class]=\"'f-list-nav f-list-nav-'+position\">\r\n    <ng-container *ngIf=\"!enableDraggable;else draggableTmpl\">\r\n        <div class=\"f-list-nav-in\"  [ngStyle]=\"{'width': ['left','right'].indexOf(position)>-1?(!hideNav? listNavWidth +'px' : '0px'):'100%','height': ['top','bottom'].indexOf(position)>-1?(!hideNav? listNavWidth +'px' : '0px'):'100%'}\">\r\n            <ng-container [ngTemplateOutlet]=\"innerContent\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n<ng-template #innerContent>\r\n    <div class=\"f-list-nav-main\" [hidden]=\"hideNav\">\r\n        <div class=\"f-list-nav-header\" *ngIf=\"HeaderTemplate\">\r\n            <ng-container [ngTemplateOutlet]=\"HeaderTemplate\"></ng-container>\r\n        </div>\r\n        <div class=\"f-list-nav-header\" *ngIf=\"!HeaderTemplate && title\">\r\n            <div class=\"f-list-nav-title\">\r\n                {{title}}\r\n            </div>\r\n        </div>\r\n        <div class=\"f-list-nav-content\" *ngIf=\"NavContentTemplate\">\r\n            <ng-container [ngTemplateOutlet]=\"NavContentTemplate\"></ng-container>\r\n        </div>\r\n        <div class=\"f-list-nav-footer\" *ngIf=\"NavFooterTemplate\">\r\n            <ng-container [ngTemplateOutlet]=\"NavFooterTemplate\"></ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-list-nav-toggle-sidebar\" *ngIf=\"showEntry\"\r\n        [ngClass]=\"{'f-list-nav-toggle-disabled': disabled,'active': hideNav}\" (click)=\"toggle($event)\">\r\n        <span class=\"triangle\"></span>\r\n    </div>\r\n</ng-template>\r\n<ng-template #draggableTmpl>\r\n    <div class=\"f-list-nav-in\" #draggableWrapper  [ngStyle]=\"{'width': ['left','right'].indexOf(position)>-1?(!hideNav? listNavWidth +'px' : '0px'):'100%','height': ['top','bottom'].indexOf(position)>-1?(!hideNav? listNavWidth +'px' : '0px'):'100%'}\" [ngResizable]=\"true\"\r\n        [rzHandles]=\"rzHandles\" [rzMinWidth]=\"rzMinWidth\" [rzCls]=\"'resizable-handle-redefine'\" (rzResizing)=\"onRZResizing($event)\" (rzStart)=\"onRZStart($event)\" (rzStop)=\"onRZStop($event)\">\r\n        <ng-container [ngTemplateOutlet]=\"innerContent\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n",
                styles: [".f-list-nav{height:100%;min-height:200px}.f-list-nav .f-list-nav-in{position:relative;height:100%;background-color:#fff;box-shadow:1px 1px 8px 0 rgba(0,28,64,.08)}.f-list-nav .f-list-nav-main{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;height:100%;overflow-x:hidden}.f-list-nav .f-list-nav-main .f-list-nav-footer,.f-list-nav .f-list-nav-main .f-list-nav-header{flex-shrink:0}.f-list-nav .f-list-nav-main .f-list-nav-content{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;overflow-y:auto}.f-list-nav .f-list-nav-main .f-list-nav-header .f-list-nav-title{padding:1rem 3rem 1rem 2.5rem;line-height:1.375rem;font-size:1rem;color:#000;border-bottom:1px solid #e9e9e9;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.f-list-nav.f-list-nav-left{padding-right:.375rem}.f-list-nav.f-list-nav-right{padding-left:.375rem}"]
            }] }
];
/** @nocollapse */
ListNavComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ListNavComponent.propDecorators = {
    HeaderTemplate: [{ type: ContentChild, args: [listNavHeaderTemplateDirective, { read: TemplateRef },] }],
    NavContentTemplate: [{ type: ContentChild, args: [listNavContentTemplateDirective, { read: TemplateRef },] }],
    NavFooterTemplate: [{ type: ContentChild, args: [listNavFooterTemplateDirective, { read: TemplateRef },] }],
    navStateChange: [{ type: Output, args: ['navStateChange',] }],
    rzStart: [{ type: Output }],
    rzResizing: [{ type: Output }],
    rzStop: [{ type: Output }],
    draggableWrapper: [{ type: ViewChild, args: ['draggableWrapper',] }],
    title: [{ type: Input }],
    listNavWidth: [{ type: Input }],
    hideNav: [{ type: Input }],
    showEntry: [{ type: Input }],
    hover: [{ type: Input }],
    disabled: [{ type: Input }],
    position: [{ type: Input }],
    resizeCollapseThreshold: [{ type: Input }],
    enableDraggable: [{ type: Input }],
    rzMinWidth: [{ type: Input }],
    rzHandles: [{ type: Input }],
    relatedIframeParent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ListNavComponent.prototype.HeaderTemplate;
    /** @type {?} */
    ListNavComponent.prototype.NavContentTemplate;
    /** @type {?} */
    ListNavComponent.prototype.NavFooterTemplate;
    /**
     * 收起折叠状态变化
     * @type {?}
     */
    ListNavComponent.prototype.navStateChange;
    /**
     * emitted when start resizing
     * @type {?}
     */
    ListNavComponent.prototype.rzStart;
    /**
     * emitted when start resizing
     * @type {?}
     */
    ListNavComponent.prototype.rzResizing;
    /**
     * emitted when stop resizing
     * @type {?}
     */
    ListNavComponent.prototype.rzStop;
    /** @type {?} */
    ListNavComponent.prototype.draggableWrapper;
    /**
     * listnav 名称
     * @type {?}
     */
    ListNavComponent.prototype.title;
    /**
     * listnav宽度
     * 不支持百分比，因为此处的宽度被用在内部是外部
     * @type {?}
     */
    ListNavComponent.prototype.listNavWidth;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.initCollapse;
    /** @type {?} */
    ListNavComponent.prototype.showEntry;
    /** @type {?} */
    ListNavComponent.prototype.hover;
    /** @type {?} */
    ListNavComponent.prototype.disabled;
    /** @type {?} */
    ListNavComponent.prototype.position;
    /** @type {?} */
    ListNavComponent.prototype.resizeCollapseThreshold;
    /** @type {?} */
    ListNavComponent.prototype.enableDraggable;
    /** @type {?} */
    ListNavComponent.prototype.rzMinWidth;
    /** @type {?} */
    ListNavComponent.prototype.rzHandles;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype._relatedIframeParent;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype._relatedContainer;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype._relatedContainerPosition;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype._relatedIframeOverlay;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype._iframeOverlayShownFlag;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.animateCls;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.updateParamsFlag;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.resizeDistance;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ListNavComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,