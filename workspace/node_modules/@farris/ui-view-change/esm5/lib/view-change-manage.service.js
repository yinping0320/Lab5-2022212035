/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/**
 * @record
 */
function ViewItems() { }
if (false) {
    /** @type {?} */
    ViewItems.prototype.items;
}
/**
 * @record
 */
function viewContainer() { }
/**
 * @record
 */
function CurrentViewChange() { }
var ViewChangeManageService = /** @class */ (function () {
    function ViewChangeManageService() {
        /**
         * 默认视图切换分组名称
         */
        this.defaultId = 'default';
        //当前显示视图
        this.currentViewType = {};
        /**
         * contents
         */
        this.viewContainers = {};
        /**
         * 保存所有分组的监听对象，形如{分组Id:变更监听对象}
         */
        this.changeCurrentViewId = {};
    }
    /**
     * 添加视图项目
     * @param itemId
     * @param viewContainerId:对应的就是groupId
     */
    /**
     * 添加视图项目
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.addViewItem = /**
     * 添加视图项目
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (this.viewContainers[viewContainerId]) {
            if (this.hasElement(itemId, viewContainerId)) {
                return;
            }
            else {
                this.viewContainers[viewContainerId].items.push(itemId);
            }
        }
        else {
            this.viewContainers[viewContainerId] = (/** @type {?} */ ({
                items: []
            }));
            this.createViewContainerChange(viewContainerId);
            this.viewContainers[viewContainerId].items.push(itemId);
        }
    };
    /**
     *
     * @param itemId 内容的指令标记
     * @param viewContainerId fGroupId
     * @returns
     */
    /**
     *
     * @param {?} itemId 内容的指令标记
     * @param {?=} viewContainerId fGroupId
     * @return {?}
     */
    ViewChangeManageService.prototype.removeViewItem = /**
     *
     * @param {?} itemId 内容的指令标记
     * @param {?=} viewContainerId fGroupId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (this.viewContainers && this.viewContainers[viewContainerId]) {
            /** @type {?} */
            var leftItems = this.viewContainers[viewContainerId].items.filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                return el !== itemId;
            }));
            if (!leftItems.length) {
                // 如果当前分组下的项都不在
                delete this.viewContainers[viewContainerId];
                if (this.changeCurrentViewId[viewContainerId]) {
                    this.changeCurrentViewId[viewContainerId].unsubscribe();
                    this.changeCurrentViewId[viewContainerId] = null;
                    delete this.changeCurrentViewId[viewContainerId];
                }
                return;
            }
            this.viewContainers[viewContainerId].items = leftItems;
        }
    };
    /**存储currentpageid */
    /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.updateCurrentViewId = /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (type, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        this.currentViewType[viewContainerId] = type;
        /** @type {?} */
        var changeView = {};
        changeView[viewContainerId] = this.currentViewType[viewContainerId];
        this.createViewContainerChange(viewContainerId);
        this.changeCurrentViewId[viewContainerId].next(changeView);
    };
    /**
     * 获取所属分组的变更监听对象
     * @param viewContainerId
     * @returns
     */
    /**
     * 获取所属分组的变更监听对象
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.getChangeCurrentViewId = /**
     * 获取所属分组的变更监听对象
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        return this.changeCurrentViewId[viewContainerId];
    };
    /**
     * 提供给view-change组件使用
     * @param type
     * @param viewContainerId
     */
    /**
     * 提供给view-change组件使用
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.changeCurrentViewIdFromCMP = /**
     * 提供给view-change组件使用
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (type, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (!this.currentViewType[viewContainerId]) {
            this.currentViewType[viewContainerId] = type;
        }
        this.updateCurrentViewId(this.currentViewType[viewContainerId], viewContainerId);
    };
    /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    ViewChangeManageService.prototype.hasElement = /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    function (itemId, groupId) {
        return this.viewContainers[groupId].items.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === itemId; }));
    };
    /**
     * @private
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.createViewContainerChange = /**
     * @private
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (!this.changeCurrentViewId[viewContainerId]) {
            this.changeCurrentViewId[viewContainerId] = new BehaviorSubject(null);
        }
    };
    /**
     * @return {?}
     */
    ViewChangeManageService.prototype.hasViewContainer = /**
     * @return {?}
     */
    function () {
        return Object.keys(this.viewContainers).length == 0 && Object.keys(this.changeCurrentViewId).length == 0;
    };
    ViewChangeManageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ViewChangeManageService.ctorParameters = function () { return []; };
    return ViewChangeManageService;
}());
export { ViewChangeManageService };
if (false) {
    /**
     * 默认视图切换分组名称
     * @type {?}
     * @private
     */
    ViewChangeManageService.prototype.defaultId;
    /** @type {?} */
    ViewChangeManageService.prototype.currentViewType;
    /**
     * contents
     * @type {?}
     */
    ViewChangeManageService.prototype.viewContainers;
    /**
     * 保存所有分组的监听对象，形如{分组Id:变更监听对象}
     * @type {?}
     */
    ViewChangeManageService.prototype.changeCurrentViewId;
}
//# sourceMappingURL=data:application/json;base64,