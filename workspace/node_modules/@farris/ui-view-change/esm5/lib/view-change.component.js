/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, ViewEncapsulation, Optional, NgZone, Injector } from '@angular/core';
import ResizeObserver from "resize-observer-polyfill";
import { ViewChangeService } from './view-change.service';
var ViewChangeComponent = /** @class */ (function () {
    function ViewChangeComponent(_renderer, viewChangeService, inject) {
        this._renderer = _renderer;
        this.viewChangeService = viewChangeService;
        this.inject = inject;
        // 视图类型的呈现方式，tile小磁贴类型，dropdown下拉类型
        this.viewType = 'tile';
        // 视图组
        this.viewGroupId = 'default';
        // 视图类型切换时，抛出的事件
        this.toolTypeChange = new EventEmitter();
        // 记录Module的标记，用来获取当前module下的服务
        this.guid = "";
        // 处理ngzone
        this.ngZone = null;
        // 记录元素尺寸变更
        this.ro = null;
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
    }
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.guid = this.viewChangeService.createViewChangeCmp({ groupId: this.viewGroupId, count: this.toolbarData.length }, this.viewchangewrapper.nativeElement.parentElement);
        this.viewChangeManageSer = this.viewChangeService.getModuleInfo(this.guid);
        if (this.toolbarData && this.toolbarData.length) {
            if (this.defaultType) {
                /** @type {?} */
                var item = this.toolbarData.find((/**
                 * @param {?} bar
                 * @return {?}
                 */
                function (bar) {
                    return bar['type'] === _this.defaultType;
                }));
                this.activeTypeItem = item;
                this.toolTypeChange.emit(this.activeTypeItem);
            }
            else {
                this.activeTypeItem = this.toolbarData[0];
                this.toolTypeChange.emit(this.activeTypeItem);
            }
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.observerElement();
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.viewchangewrapper.nativeElement);
            this.ro = null;
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ViewChangeComponent.prototype.listItemClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.disable || this.activeTypeItem['type'] === item['type']) {
            return;
        }
        this.activeTypeItem = item;
        this.viewChangeManageSer.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
        this.toolTypeChange.emit(item);
        if (this.typelist) {
            this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseEnter = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseLeave = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
    };
    /**
     * 解决卡片和列表两个菜单同时打开，同步数据时候，当前的标签显示不对的问题
     */
    /**
     * 解决卡片和列表两个菜单同时打开，同步数据时候，当前的标签显示不对的问题
     * @private
     * @return {?}
     */
    ViewChangeComponent.prototype.observerElement = /**
     * 解决卡片和列表两个菜单同时打开，同步数据时候，当前的标签显示不对的问题
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.inject) {
            // 初始更新一次当前类型
            this.viewChangeManageSer['changeCurrentViewIdFromCMP'](this.activeTypeItem['type'], this.viewGroupId);
            return;
        }
        if (!this.ngZone) {
            this.ngZone = this.inject.get(NgZone, null);
        }
        if (!this.ro) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.ro = new ResizeObserver((/**
                 * @param {?} entries
                 * @param {?} observer
                 * @return {?}
                 */
                function (entries, observer) {
                    if (entries[0].contentRect.width > 0) {
                        _this.viewChangeManageSer['changeCurrentViewIdFromCMP'](_this.activeTypeItem['type'], _this.viewGroupId);
                    }
                }));
                _this.ro.observe(_this.viewchangewrapper.nativeElement);
            }));
        }
    };
    ViewChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-view-change',
                    template: "<div class=\"f-view-change\" #viewchangewrapper>\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                    encapsulation: ViewEncapsulation.None
                    // providers:[ ViewChangeService ]
                    ,
                    styles: [".f-viewchange-view-none{display:none!important}"]
                }] }
    ];
    /** @nocollapse */
    ViewChangeComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ViewChangeService, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    ViewChangeComponent.propDecorators = {
        toolbarData: [{ type: Input }],
        viewType: [{ type: Input }],
        defaultType: [{ type: Input }],
        viewGroupId: [{ type: Input }],
        toolTypeChange: [{ type: Output }],
        typelist: [{ type: ViewChild, args: ['typelist',] }],
        viewchangewrapper: [{ type: ViewChild, args: ['viewchangewrapper',] }]
    };
    return ViewChangeComponent;
}());
export { ViewChangeComponent };
if (false) {
    /** @type {?} */
    ViewChangeComponent.prototype.toolbarData;
    /** @type {?} */
    ViewChangeComponent.prototype.viewType;
    /** @type {?} */
    ViewChangeComponent.prototype.defaultType;
    /** @type {?} */
    ViewChangeComponent.prototype.viewGroupId;
    /** @type {?} */
    ViewChangeComponent.prototype.activeTypeItem;
    /** @type {?} */
    ViewChangeComponent.prototype.toolTypeChange;
    /** @type {?} */
    ViewChangeComponent.prototype.typelist;
    /** @type {?} */
    ViewChangeComponent.prototype.viewchangewrapper;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.guid;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.viewChangeManageSer;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.viewChangeService;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,