import ResizeObserver from 'resize-observer-polyfill';
import { CommonModule } from '@angular/common';
import { Injectable, Directive, Input, ElementRef, Renderer2, NgModule, Component, Output, EventEmitter, ViewChild, ViewEncapsulation, Optional, NgZone, Injector, defineInjectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewChangeManageService = /** @class */ (function () {
    function ViewChangeManageService() {
        /**
         * 默认视图切换分组名称
         */
        this.defaultId = 'default';
        //当前显示视图
        this.currentViewType = {};
        /**
         * contents
         */
        this.viewContainers = {};
        /**
         * 保存所有分组的监听对象，形如{分组Id:变更监听对象}
         */
        this.changeCurrentViewId = {};
    }
    /**
     * 添加视图项目
     * @param itemId
     * @param viewContainerId:对应的就是groupId
     */
    /**
     * 添加视图项目
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.addViewItem = /**
     * 添加视图项目
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (this.viewContainers[viewContainerId]) {
            if (this.hasElement(itemId, viewContainerId)) {
                return;
            }
            else {
                this.viewContainers[viewContainerId].items.push(itemId);
            }
        }
        else {
            this.viewContainers[viewContainerId] = (/** @type {?} */ ({
                items: []
            }));
            this.createViewContainerChange(viewContainerId);
            this.viewContainers[viewContainerId].items.push(itemId);
        }
    };
    /**
     *
     * @param itemId 内容的指令标记
     * @param viewContainerId fGroupId
     * @returns
     */
    /**
     *
     * @param {?} itemId 内容的指令标记
     * @param {?=} viewContainerId fGroupId
     * @return {?}
     */
    ViewChangeManageService.prototype.removeViewItem = /**
     *
     * @param {?} itemId 内容的指令标记
     * @param {?=} viewContainerId fGroupId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (this.viewContainers && this.viewContainers[viewContainerId]) {
            /** @type {?} */
            var leftItems = this.viewContainers[viewContainerId].items.filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                return el !== itemId;
            }));
            if (!leftItems.length) {
                // 如果当前分组下的项都不在
                delete this.viewContainers[viewContainerId];
                if (this.changeCurrentViewId[viewContainerId]) {
                    this.changeCurrentViewId[viewContainerId].unsubscribe();
                    this.changeCurrentViewId[viewContainerId] = null;
                    delete this.changeCurrentViewId[viewContainerId];
                }
                return;
            }
            this.viewContainers[viewContainerId].items = leftItems;
        }
    };
    /**存储currentpageid */
    /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.updateCurrentViewId = /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (type, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        this.currentViewType[viewContainerId] = type;
        /** @type {?} */
        var changeView = {};
        changeView[viewContainerId] = this.currentViewType[viewContainerId];
        this.createViewContainerChange(viewContainerId);
        this.changeCurrentViewId[viewContainerId].next(changeView);
    };
    /**
     * 获取所属分组的变更监听对象
     * @param viewContainerId
     * @returns
     */
    /**
     * 获取所属分组的变更监听对象
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.getChangeCurrentViewId = /**
     * 获取所属分组的变更监听对象
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        return this.changeCurrentViewId[viewContainerId];
    };
    /**
     * 提供给view-change组件使用
     * @param type
     * @param viewContainerId
     */
    /**
     * 提供给view-change组件使用
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.changeCurrentViewIdFromCMP = /**
     * 提供给view-change组件使用
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (type, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (!this.currentViewType[viewContainerId]) {
            this.currentViewType[viewContainerId] = type;
        }
        this.updateCurrentViewId(this.currentViewType[viewContainerId], viewContainerId);
    };
    /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    ViewChangeManageService.prototype.hasElement = /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    function (itemId, groupId) {
        return this.viewContainers[groupId].items.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === itemId; }));
    };
    /**
     * @private
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeManageService.prototype.createViewContainerChange = /**
     * @private
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (!this.changeCurrentViewId[viewContainerId]) {
            this.changeCurrentViewId[viewContainerId] = new BehaviorSubject(null);
        }
    };
    /**
     * @return {?}
     */
    ViewChangeManageService.prototype.hasViewContainer = /**
     * @return {?}
     */
    function () {
        return Object.keys(this.viewContainers).length == 0 && Object.keys(this.changeCurrentViewId).length == 0;
    };
    ViewChangeManageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ViewChangeManageService.ctorParameters = function () { return []; };
    return ViewChangeManageService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * ximena
 * 20240301修改
 * 1、此服务原本的功能被拆分到view-change-manage.service.ts里
 * 2、解决：在框架里打开不同表单，但是分组id一样引起的切换菜单后看不到界面的问题
 * 3、方式：拆分root的服务到一个普通服务里，root服务只用来区分Module
 * ----------------------------可能问题
 *  1、存在显示隐藏切换ngIf方式切换的view-change元素，归集不到一个模块id下
 * 归集到其他的模块下，但是不影响展示
 *
 */
/**
 * ximena
 * 20240410修改
 * 上次版本修改：利用module初始化，创建单一guid，区分不同表单下的多视图。
 * 缺点：
 * 1、module只能初始化一次，后面因为缓存机制，不会再次初始化，导致第二次打开单据可能出现问题
 * 2、同一个组件被多个菜单组合不支持
 * 本次修改方案：
 * 1、通过currentInfos，存储组件创建时的guid对象，当对应的指令初始化完毕，删除这个对象
 * 2、通过BehaviorSubject，组件创建时的guid对象时，next变量currentInfos
 * 3、通过storeDirectiveInstances，解决组件和指令创建顺序先后的问题
 * 4、通过storeViewChangeCmps，解决在标签页下，指令初始化一次，多视图组件会被多次初始化，此时双方无法匹配的问题
 * 支持的场景
 * 1、同一个组件被多个菜单组合，可以正常显示
 * 2、同个表单内，多个多视图，只要组件、指令匹配，无论groupid是否一样，可以正常显示
 * 3、同个表单内，在某个多视图的指令内再嵌套其他多视图，可以正常显示
 * 4、标签页上使用时，多个多视图，可以正常显示
 */
var ViewChangeService = /** @class */ (function () {
    function ViewChangeService() {
        /**
         * 每次view-change组件创建完会创建current对象，然后放到此处保存。
         * 当对应的指令都初始化后，开始销毁
         */
        this.currentInfos = [];
        this.current = {
            guid: '',
            groupId: '',
            count: 0
        };
        this.storeDirectiveInstances = [];
        this.currentDirectiveInstance = [];
        this.guidChangeSubject = new BehaviorSubject([{
                guid: '',
                groupId: '',
                count: 0
            }]);
        this.storeViewChangeSer = {};
        /**
         * 解决标签页上有组件和指令
         * 当组件销毁时，指令还存在，这样根据原来的逻辑找不到组件与指令的对应关系
         */
        this.storeViewChangeCmps = [];
    }
    /**
     * 获取当前模块信息
     * @param id
     */
    /**
     * 获取当前模块信息
     * @param {?=} id
     * @return {?}
     */
    ViewChangeService.prototype.getModuleInfo = /**
     * 获取当前模块信息
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id === void 0) { id = ''; }
        id = id ? id : this.current.guid;
        return this.storeViewChangeSer[id];
    };
    /**
     * 删除对应的模块信息
     * @param id
     */
    /**
     * 删除对应的模块信息
     * @param {?} guid
     * @return {?}
     */
    ViewChangeService.prototype.removeModuleInfo = /**
     * 删除对应的模块信息
     * @param {?} guid
     * @return {?}
     */
    function (guid) {
        if (guid && this.storeViewChangeSer.hasOwnProperty(guid)) {
            this.storeViewChangeSer[guid] = null;
            delete this.storeViewChangeSer[guid];
            /** @type {?} */
            var findCmpIndex = this.storeViewChangeCmps.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.guid == guid; }));
            this.storeViewChangeCmps.splice(findCmpIndex, 1);
        }
    };
    /**
     * 被用于指令绑定
     * @returns
     */
    /**
     * 被用于指令绑定
     * @return {?}
     */
    ViewChangeService.prototype.getModuleChange = /**
     * 被用于指令绑定
     * @return {?}
     */
    function () {
        return this.guidChangeSubject;
    };
    /**
     * 创建实例
     */
    /**
     * 创建实例
     * @param {?} moduleCount
     * @param {?} viewChangeCmpEl
     * @return {?}
     */
    ViewChangeService.prototype.createViewChangeCmp = /**
     * 创建实例
     * @param {?} moduleCount
     * @param {?} viewChangeCmpEl
     * @return {?}
     */
    function (moduleCount, viewChangeCmpEl) {
        // 比如场景标签页上有视图组件，但是标签页内容区域有指令，视图组件会初始化多次
        /** @type {?} */
        var existsGuid = this.getGuidFromStoreViewChangeCmp(moduleCount["groupId"], viewChangeCmpEl);
        if (existsGuid) {
            return existsGuid;
        }
        // 存在当前模型ID
        this.current = Object.assign({
            guid: this.createGuid(),
        }, moduleCount);
        // 创建对象
        if (!this.storeViewChangeSer.hasOwnProperty(this.current.guid)) {
            this.storeViewChangeSer[this.current.guid] = new ViewChangeManageService();
        }
        /** @type {?} */
        var tCurrent = Object.assign({}, this.current);
        // 保存当前对应信息
        this.currentInfos.push(tCurrent);
        // 存储起来
        this.storeViewChangeCmps.push(Object.assign({ cmpId: viewChangeCmpEl.id, cmpEl: viewChangeCmpEl, parentEl: null }, this.current));
        if (this.currentDirectiveInstance.length > 0) {
            // 当前指令实例存储区有值
            /** @type {?} */
            var curInsGroupId = this.currentDirectiveInstance[0]['fViewGroupId'];
            if (this.current.groupId == curInsGroupId) {
                // 属于同一个分组
                this.doDirectiveInstanceInit(this.currentDirectiveInstance, this.current.guid);
            }
            else {
                // 检查之前存储是否有值  
                this.storeDirectiveInstances.push({ groupId: curInsGroupId, instances: [].concat(this.currentDirectiveInstance) });
                this.currentDirectiveInstance = [];
                this.findInstoreDirectiveInstances();
            }
        }
        else {
            this.findInstoreDirectiveInstances();
        }
        this.guidChangeSubject.next(this.currentInfos);
        return tCurrent.guid;
    };
    /**
     *
     */
    /**
     *
     * @private
     * @return {?}
     */
    ViewChangeService.prototype.findInstoreDirectiveInstances = /**
     *
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //查找 已有的实例里面是否有对应的groupdId
        /** @type {?} */
        var findGroupIdIndex = this.storeDirectiveInstances.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item['groupId'] == _this.current.groupId; }));
        if (findGroupIdIndex > -1) {
            this.doDirectiveInstanceInit(this.storeDirectiveInstances[findGroupIdIndex]['instances'], this.current.guid);
        }
    };
    /**
     * 执行指令实例的初始化
     */
    /**
     * 执行指令实例的初始化
     * @private
     * @param {?} instances
     * @param {?} guid
     * @return {?}
     */
    ViewChangeService.prototype.doDirectiveInstanceInit = /**
     * 执行指令实例的初始化
     * @private
     * @param {?} instances
     * @param {?} guid
     * @return {?}
     */
    function (instances, guid) {
        /** @type {?} */
        var maxLen = instances.length;
        for (var k = 0; k < maxLen; k++) {
            if (!instances || instances.length != maxLen) {
                break;
            }
            else {
                instances[k]["viewChangeOnInit"](guid);
            }
        }
        if (instances && instances.length > 0) {
            if (instances.length != maxLen) {
                // 在外面被删除
                this.doDirectiveInstanceInit(instances, guid);
            }
        }
    };
    /**
     * 存储指令实例
     * @param tInstance
     */
    /**
     * 存储指令实例
     * @param {?} tInstance
     * @return {?}
     */
    ViewChangeService.prototype.storeViewChangeDirectiveInstance = /**
     * 存储指令实例
     * @param {?} tInstance
     * @return {?}
     */
    function (tInstance) {
        if (!this.current.groupId || this.current.groupId == tInstance['fViewGroupId']) {
            // 与当前匹配
            this.currentDirectiveInstance.push(tInstance);
        }
        else {
            // 与当前不匹配
            /** @type {?} */
            var findGroupInfo = this.storeDirectiveInstances.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item['groupId'] == tInstance['fViewGroupId']; }));
            if (findGroupInfo) {
                findGroupInfo.instances.push(tInstance);
            }
            else {
                this.storeDirectiveInstances.push({ groupId: tInstance['fViewGroupId'], instances: [tInstance] });
            }
        }
    };
    /**
     * 移除指令实例
     * @param tInstance
     */
    /**
     * 移除指令实例
     * @param {?} viewItemType
     * @param {?} guid
     * @return {?}
     */
    ViewChangeService.prototype.removeViewChangeDirectiveInstance = /**
     * 移除指令实例
     * @param {?} viewItemType
     * @param {?} guid
     * @return {?}
     */
    function (viewItemType, guid) {
        if (guid == this.current.guid) {
            if (this.currentDirectiveInstance.length > 0) {
                /** @type {?} */
                var tfindIndex = this.currentDirectiveInstance.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item['viewItemType'] == viewItemType; }));
                if (tfindIndex > -1) {
                    this.currentDirectiveInstance.splice(tfindIndex, 1);
                }
            }
        }
        /** @type {?} */
        var findModuleIndex = this.currentInfos.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.guid == guid; }));
        if (findModuleIndex > -1) {
            /** @type {?} */
            var findModuleInfo_1 = this.currentInfos[findModuleIndex];
            findModuleInfo_1['count'] = findModuleInfo_1['count'] - 1;
            if (findModuleInfo_1['count'] <= 0) {
                this.currentInfos.splice(findModuleIndex, 1);
                /** @type {?} */
                var findGroupIndex = this.storeDirectiveInstances.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item['groupId'] == findModuleInfo_1["groupId"]; }));
                this.storeDirectiveInstances.splice(findGroupIndex, 1);
                if (this.current.guid == guid) {
                    // 重置当前
                    this.current = { guid: '',
                        groupId: '',
                        count: 0
                    };
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ViewChangeService.prototype.createGuid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var S4 = (/**
         * @return {?}
         */
        function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
    };
    /**
     * 更新多视图组件
     * @param guid
     * @param groupId
     * @param viewChangeDirectiveEl
     */
    /**
     * 更新多视图组件
     * @param {?} guid
     * @param {?} groupId
     * @param {?} viewChangeDirectiveEl
     * @return {?}
     */
    ViewChangeService.prototype.updatedStoreViewChangeCmp = /**
     * 更新多视图组件
     * @param {?} guid
     * @param {?} groupId
     * @param {?} viewChangeDirectiveEl
     * @return {?}
     */
    function (guid, groupId, viewChangeDirectiveEl) {
        /** @type {?} */
        var findStoreViewChangeCmp = this.storeViewChangeCmps.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !item["parentEl"] && item['guid'] == guid; }));
        if (findStoreViewChangeCmp) {
            // 没有赋值的元素
            /** @type {?} */
            var findParent = this.findCommonParent(viewChangeDirectiveEl, findStoreViewChangeCmp.cmpEl);
            findStoreViewChangeCmp["parentEl"] = findParent;
            findStoreViewChangeCmp["cmpEl"] = null;
        }
    };
    /**
     * 找两个元素的公共父元素
     * @param element1
     * @param element2
     * @returns
     */
    /**
     * 找两个元素的公共父元素
     * @private
     * @param {?} element1
     * @param {?} element2
     * @return {?}
     */
    ViewChangeService.prototype.findCommonParent = /**
     * 找两个元素的公共父元素
     * @private
     * @param {?} element1
     * @param {?} element2
     * @return {?}
     */
    function (element1, element2) {
        /** @type {?} */
        var parent1 = element1;
        while (parent1 !== null) {
            if (parent1.contains(element2)) {
                return parent1;
            }
            parent1 = parent1.parentElement;
        }
        return null; // 如果没有共同父元素，则返回 null
    };
    /**
     * @private
     * @param {?} groupId
     * @param {?} cmpEl
     * @return {?}
     */
    ViewChangeService.prototype.getGuidFromStoreViewChangeCmp = /**
     * @private
     * @param {?} groupId
     * @param {?} cmpEl
     * @return {?}
     */
    function (groupId, cmpEl) {
        /** @type {?} */
        var findCmp = this.storeViewChangeCmps.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item["groupId"] == groupId && item["cmpId"] == cmpEl.id) {
                return item["parentEl"] ? item["parentEl"].contains(cmpEl) : false;
            }
        }));
        return findCmp ? findCmp["guid"] : "";
    };
    ViewChangeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ViewChangeService.ctorParameters = function () { return []; };
    /** @nocollapse */ ViewChangeService.ngInjectableDef = defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });
    return ViewChangeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewChangeComponent = /** @class */ (function () {
    function ViewChangeComponent(_renderer, viewChangeService, inject) {
        this._renderer = _renderer;
        this.viewChangeService = viewChangeService;
        this.inject = inject;
        // 视图类型的呈现方式，tile小磁贴类型，dropdown下拉类型
        this.viewType = 'tile';
        // 视图组
        this.viewGroupId = 'default';
        // 视图类型切换时，抛出的事件
        this.toolTypeChange = new EventEmitter();
        // 记录Module的标记，用来获取当前module下的服务
        this.guid = "";
        // 处理ngzone
        this.ngZone = null;
        // 记录元素尺寸变更
        this.ro = null;
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
    }
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.guid = this.viewChangeService.createViewChangeCmp({ groupId: this.viewGroupId, count: this.toolbarData.length }, this.viewchangewrapper.nativeElement.parentElement);
        this.viewChangeManageSer = this.viewChangeService.getModuleInfo(this.guid);
        if (this.toolbarData && this.toolbarData.length) {
            if (this.defaultType) {
                /** @type {?} */
                var item = this.toolbarData.find((/**
                 * @param {?} bar
                 * @return {?}
                 */
                function (bar) {
                    return bar['type'] === _this.defaultType;
                }));
                this.activeTypeItem = item;
                this.toolTypeChange.emit(this.activeTypeItem);
            }
            else {
                this.activeTypeItem = this.toolbarData[0];
                this.toolTypeChange.emit(this.activeTypeItem);
            }
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.observerElement();
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.viewchangewrapper.nativeElement);
            this.ro = null;
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ViewChangeComponent.prototype.listItemClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.disable || this.activeTypeItem['type'] === item['type']) {
            return;
        }
        this.activeTypeItem = item;
        this.viewChangeManageSer.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
        this.toolTypeChange.emit(item);
        if (this.typelist) {
            this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseEnter = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseLeave = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
    };
    /**
     * 解决卡片和列表两个菜单同时打开，同步数据时候，当前的标签显示不对的问题
     */
    /**
     * 解决卡片和列表两个菜单同时打开，同步数据时候，当前的标签显示不对的问题
     * @private
     * @return {?}
     */
    ViewChangeComponent.prototype.observerElement = /**
     * 解决卡片和列表两个菜单同时打开，同步数据时候，当前的标签显示不对的问题
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.inject) {
            // 初始更新一次当前类型
            this.viewChangeManageSer['changeCurrentViewIdFromCMP'](this.activeTypeItem['type'], this.viewGroupId);
            return;
        }
        if (!this.ngZone) {
            this.ngZone = this.inject.get(NgZone, null);
        }
        if (!this.ro) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.ro = new ResizeObserver((/**
                 * @param {?} entries
                 * @param {?} observer
                 * @return {?}
                 */
                function (entries, observer) {
                    if (entries[0].contentRect.width > 0) {
                        _this.viewChangeManageSer['changeCurrentViewIdFromCMP'](_this.activeTypeItem['type'], _this.viewGroupId);
                    }
                }));
                _this.ro.observe(_this.viewchangewrapper.nativeElement);
            }));
        }
    };
    ViewChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-view-change',
                    template: "<div class=\"f-view-change\" #viewchangewrapper>\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                    encapsulation: ViewEncapsulation.None
                    // providers:[ ViewChangeService ]
                    ,
                    styles: [".f-viewchange-view-none{display:none!important}"]
                }] }
    ];
    /** @nocollapse */
    ViewChangeComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ViewChangeService, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    ViewChangeComponent.propDecorators = {
        toolbarData: [{ type: Input }],
        viewType: [{ type: Input }],
        defaultType: [{ type: Input }],
        viewGroupId: [{ type: Input }],
        toolTypeChange: [{ type: Output }],
        typelist: [{ type: ViewChild, args: ['typelist',] }],
        viewchangewrapper: [{ type: ViewChild, args: ['viewchangewrapper',] }]
    };
    return ViewChangeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//视图区域
var FarrisViewItemDirective = /** @class */ (function () {
    function FarrisViewItemDirective(elementRef, viewChangeService, render) {
        this.elementRef = elementRef;
        this.viewChangeService = viewChangeService;
        this.render = render;
        // 当前项所属的组
        this.fViewGroupId = 'default';
        // 记录Module的标记，用来获取当前module下的服务
        this.guid = "";
        // 解决viewChangeOnInit与监听执行多条数据的先后顺序不一致
        this.hasInit = false;
        /**
         * 只要执行过初始方法，就调用。
         * 保证只执行一次
         */
        this.cancelSignal = new Subject();
    }
    /**
     * @return {?}
     */
    FarrisViewItemDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 先存储到服务里,在这个方法里可能会执行viewChangeOnInit,修改hasInit的值。
        this.viewChangeService['storeViewChangeDirectiveInstance'](this);
        // 解决组件与指令创建先后的问题
        this.viewChangeService.getModuleChange().pipe(takeUntil(this.cancelSignal)).subscribe((/**
         * @param {?} curModuleGroupdInfos
         * @return {?}
         */
        function (curModuleGroupdInfos) {
            if (_this.hasInit)
                return;
            /** @type {?} */
            var findModuleInfo = curModuleGroupdInfos.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item['groupId'] == _this.fViewGroupId; }));
            if (findModuleInfo) {
                _this.viewChangeOnInit(findModuleInfo['guid']);
            }
        }));
    };
    /**
     * 标记这个方法
     * @param guid
     * @returns
     */
    /**
     * 标记这个方法
     * @param {?} newGuid
     * @return {?}
     */
    FarrisViewItemDirective.prototype.viewChangeOnInit = /**
     * 标记这个方法
     * @param {?} newGuid
     * @return {?}
     */
    function (newGuid) {
        var _this = this;
        if (this.hasInit)
            return;
        this.guid = newGuid;
        this.hasInit = true;
        this.cancelSignal.next();
        this.cancelSignal.complete();
        this.viewChangeManageSer = this.viewChangeService.getModuleInfo(newGuid);
        // 保存
        this.viewChangeService.updatedStoreViewChangeCmp(this.guid, this.fViewGroupId, this.elementRef.nativeElement);
        // 删除
        this.viewChangeService['removeViewChangeDirectiveInstance'](this.viewItemType, this.guid);
        // 追加到服务中统一管理
        this.viewChangeManageSer['addViewItem'](this.viewItemType, this.fViewGroupId);
        this.viewChangeManageSer['getChangeCurrentViewId'](this.fViewGroupId).subscribe((/**
         * @param {?} currentViewType
         * @return {?}
         */
        function (currentViewType) {
            if (!currentViewType || !currentViewType[_this.fViewGroupId])
                return;
            if (currentViewType[_this.fViewGroupId] == _this.viewItemType) {
                _this.render.removeClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
            else {
                _this.render.addClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
        }));
    };
    /**
     * @return {?}
     */
    FarrisViewItemDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // 销毁时删除数据
        if (this.viewChangeManageSer) {
            this.viewChangeManageSer['removeViewItem'](this.viewItemType, this.fViewGroupId);
            if (this.viewChangeManageSer['hasViewContainer']()) {
                this.viewChangeService['removeModuleInfo'](this.guid);
            }
        }
        else {
            //未执行方法viewChangeOnInit
            this.cancelSignal = null;
        }
    };
    FarrisViewItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fViewItem]'
                },] }
    ];
    /** @nocollapse */
    FarrisViewItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewChangeService },
        { type: Renderer2 }
    ]; };
    FarrisViewItemDirective.propDecorators = {
        viewItemType: [{ type: Input, args: ['fViewItem',] }],
        fViewGroupId: [{ type: Input, args: ['fViewGroupId',] }]
    };
    return FarrisViewItemDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewChangeModule = /** @class */ (function () {
    function ViewChangeModule() {
    }
    ViewChangeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ViewChangeComponent, FarrisViewItemDirective],
                    imports: [
                        CommonModule
                    ],
                    providers: [
                        ViewChangeService, ViewChangeManageService
                    ],
                    exports: [ViewChangeComponent, FarrisViewItemDirective]
                },] }
    ];
    /** @nocollapse */
    ViewChangeModule.ctorParameters = function () { return []; };
    return ViewChangeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ViewChangeService, ViewChangeComponent, ViewChangeModule, FarrisViewItemDirective, ViewChangeManageService };

//# sourceMappingURL=farris-ui-view-change.js.map