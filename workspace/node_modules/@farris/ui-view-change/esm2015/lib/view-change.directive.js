/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { ViewChangeService } from './view-change.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
//视图区域
export class FarrisViewItemDirective {
    /**
     * @param {?} elementRef
     * @param {?} viewChangeService
     * @param {?} render
     */
    constructor(elementRef, viewChangeService, render) {
        this.elementRef = elementRef;
        this.viewChangeService = viewChangeService;
        this.render = render;
        // 当前项所属的组
        this.fViewGroupId = 'default';
        // 记录Module的标记，用来获取当前module下的服务
        this.guid = "";
        // 解决viewChangeOnInit与监听执行多条数据的先后顺序不一致
        this.hasInit = false;
        /**
         * 只要执行过初始方法，就调用。
         * 保证只执行一次
         */
        this.cancelSignal = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 先存储到服务里,在这个方法里可能会执行viewChangeOnInit,修改hasInit的值。
        this.viewChangeService['storeViewChangeDirectiveInstance'](this);
        // 解决组件与指令创建先后的问题
        this.viewChangeService.getModuleChange().pipe(takeUntil(this.cancelSignal)).subscribe((/**
         * @param {?} curModuleGroupdInfos
         * @return {?}
         */
        (curModuleGroupdInfos) => {
            if (this.hasInit)
                return;
            /** @type {?} */
            let findModuleInfo = curModuleGroupdInfos.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item['groupId'] == this.fViewGroupId));
            if (findModuleInfo) {
                this.viewChangeOnInit(findModuleInfo['guid']);
            }
        }));
    }
    /**
     * 标记这个方法
     * @param {?} newGuid
     * @return {?}
     */
    viewChangeOnInit(newGuid) {
        if (this.hasInit)
            return;
        this.guid = newGuid;
        this.hasInit = true;
        this.cancelSignal.next();
        this.cancelSignal.complete();
        this.viewChangeManageSer = this.viewChangeService.getModuleInfo(newGuid);
        // 保存
        this.viewChangeService.updatedStoreViewChangeCmp(this.guid, this.fViewGroupId, this.elementRef.nativeElement);
        // 删除
        this.viewChangeService['removeViewChangeDirectiveInstance'](this.viewItemType, this.guid);
        // 追加到服务中统一管理
        this.viewChangeManageSer['addViewItem'](this.viewItemType, this.fViewGroupId);
        this.viewChangeManageSer['getChangeCurrentViewId'](this.fViewGroupId).subscribe((/**
         * @param {?} currentViewType
         * @return {?}
         */
        (currentViewType) => {
            if (!currentViewType || !currentViewType[this.fViewGroupId])
                return;
            if (currentViewType[this.fViewGroupId] == this.viewItemType) {
                this.render.removeClass(this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
            else {
                this.render.addClass(this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // 销毁时删除数据
        if (this.viewChangeManageSer) {
            this.viewChangeManageSer['removeViewItem'](this.viewItemType, this.fViewGroupId);
            if (this.viewChangeManageSer['hasViewContainer']()) {
                this.viewChangeService['removeModuleInfo'](this.guid);
            }
        }
        else {
            //未执行方法viewChangeOnInit
            this.cancelSignal = null;
        }
    }
}
FarrisViewItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fViewItem]'
            },] }
];
/** @nocollapse */
FarrisViewItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewChangeService },
    { type: Renderer2 }
];
FarrisViewItemDirective.propDecorators = {
    viewItemType: [{ type: Input, args: ['fViewItem',] }],
    fViewGroupId: [{ type: Input, args: ['fViewGroupId',] }]
};
if (false) {
    /**
     * 使用方式
     * <div [fViewItem]="'type11'" [fViewGroupId]="'group2'">
     * 视图的内容区域
     * </div>
     * @type {?}
     */
    FarrisViewItemDirective.prototype.viewItemType;
    /** @type {?} */
    FarrisViewItemDirective.prototype.fViewGroupId;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.viewChangeManageSer;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.guid;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.hasInit;
    /**
     * 只要执行过初始方法，就调用。
     * 保证只执行一次
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.cancelSignal;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.viewChangeService;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,