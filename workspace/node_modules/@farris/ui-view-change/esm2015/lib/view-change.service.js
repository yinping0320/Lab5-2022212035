/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ViewChangeManageService } from './view-change-manage.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
function StoreViewService() { }
/**
 * @record
 */
function StoreCurrentInfo() { }
if (false) {
    /** @type {?} */
    StoreCurrentInfo.prototype.guid;
    /** @type {?} */
    StoreCurrentInfo.prototype.groupId;
    /** @type {?} */
    StoreCurrentInfo.prototype.count;
}
/**
 * @record
 */
function StoreCurrentDirectiveIns() { }
if (false) {
    /** @type {?} */
    StoreCurrentDirectiveIns.prototype.groupId;
    /** @type {?} */
    StoreCurrentDirectiveIns.prototype.instances;
}
/**
 * @record
 */
function StoreViewChangeCmp() { }
if (false) {
    /** @type {?} */
    StoreViewChangeCmp.prototype.groupId;
    /** @type {?} */
    StoreViewChangeCmp.prototype.cmpId;
    /** @type {?} */
    StoreViewChangeCmp.prototype.cmpEl;
    /** @type {?} */
    StoreViewChangeCmp.prototype.guid;
    /** @type {?} */
    StoreViewChangeCmp.prototype.count;
    /** @type {?} */
    StoreViewChangeCmp.prototype.parentEl;
}
/**
 * ximena
 * 20240301修改
 * 1、此服务原本的功能被拆分到view-change-manage.service.ts里
 * 2、解决：在框架里打开不同表单，但是分组id一样引起的切换菜单后看不到界面的问题
 * 3、方式：拆分root的服务到一个普通服务里，root服务只用来区分Module
 * ----------------------------可能问题
 *  1、存在显示隐藏切换ngIf方式切换的view-change元素，归集不到一个模块id下
 * 归集到其他的模块下，但是不影响展示
 *
 */
/**
 * ximena
 * 20240410修改
 * 上次版本修改：利用module初始化，创建单一guid，区分不同表单下的多视图。
 * 缺点：
 * 1、module只能初始化一次，后面因为缓存机制，不会再次初始化，导致第二次打开单据可能出现问题
 * 2、同一个组件被多个菜单组合不支持
 * 本次修改方案：
 * 1、通过currentInfos，存储组件创建时的guid对象，当对应的指令初始化完毕，删除这个对象
 * 2、通过BehaviorSubject，组件创建时的guid对象时，next变量currentInfos
 * 3、通过storeDirectiveInstances，解决组件和指令创建顺序先后的问题
 * 4、通过storeViewChangeCmps，解决在标签页下，指令初始化一次，多视图组件会被多次初始化，此时双方无法匹配的问题
 * 支持的场景
 * 1、同一个组件被多个菜单组合，可以正常显示
 * 2、同个表单内，多个多视图，只要组件、指令匹配，无论groupid是否一样，可以正常显示
 * 3、同个表单内，在某个多视图的指令内再嵌套其他多视图，可以正常显示
 * 4、标签页上使用时，多个多视图，可以正常显示
 */
export class ViewChangeService {
    constructor() {
        /**
         * 每次view-change组件创建完会创建current对象，然后放到此处保存。
         * 当对应的指令都初始化后，开始销毁
         */
        this.currentInfos = [];
        this.current = {
            guid: '',
            groupId: '',
            count: 0
        };
        this.storeDirectiveInstances = [];
        this.currentDirectiveInstance = [];
        this.guidChangeSubject = new BehaviorSubject([{
                guid: '',
                groupId: '',
                count: 0
            }]);
        this.storeViewChangeSer = {};
        /**
         * 解决标签页上有组件和指令
         * 当组件销毁时，指令还存在，这样根据原来的逻辑找不到组件与指令的对应关系
         */
        this.storeViewChangeCmps = [];
    }
    /**
     * 获取当前模块信息
     * @param {?=} id
     * @return {?}
     */
    getModuleInfo(id = '') {
        id = id ? id : this.current.guid;
        return this.storeViewChangeSer[id];
    }
    /**
     * 删除对应的模块信息
     * @param {?} guid
     * @return {?}
     */
    removeModuleInfo(guid) {
        if (guid && this.storeViewChangeSer.hasOwnProperty(guid)) {
            this.storeViewChangeSer[guid] = null;
            delete this.storeViewChangeSer[guid];
            /** @type {?} */
            let findCmpIndex = this.storeViewChangeCmps.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.guid == guid));
            this.storeViewChangeCmps.splice(findCmpIndex, 1);
        }
    }
    /**
     * 被用于指令绑定
     * @return {?}
     */
    getModuleChange() {
        return this.guidChangeSubject;
    }
    /**
     * 创建实例
     * @param {?} moduleCount
     * @param {?} viewChangeCmpEl
     * @return {?}
     */
    createViewChangeCmp(moduleCount, viewChangeCmpEl) {
        // 比如场景标签页上有视图组件，但是标签页内容区域有指令，视图组件会初始化多次
        /** @type {?} */
        let existsGuid = this.getGuidFromStoreViewChangeCmp(moduleCount["groupId"], viewChangeCmpEl);
        if (existsGuid) {
            return existsGuid;
        }
        // 存在当前模型ID
        this.current = Object.assign({
            guid: this.createGuid(),
        }, moduleCount);
        // 创建对象
        if (!this.storeViewChangeSer.hasOwnProperty(this.current.guid)) {
            this.storeViewChangeSer[this.current.guid] = new ViewChangeManageService();
        }
        /** @type {?} */
        let tCurrent = Object.assign({}, this.current);
        // 保存当前对应信息
        this.currentInfos.push(tCurrent);
        // 存储起来
        this.storeViewChangeCmps.push(Object.assign({ cmpId: viewChangeCmpEl.id, cmpEl: viewChangeCmpEl, parentEl: null }, this.current));
        if (this.currentDirectiveInstance.length > 0) {
            // 当前指令实例存储区有值
            /** @type {?} */
            let curInsGroupId = this.currentDirectiveInstance[0]['fViewGroupId'];
            if (this.current.groupId == curInsGroupId) {
                // 属于同一个分组
                this.doDirectiveInstanceInit(this.currentDirectiveInstance, this.current.guid);
            }
            else {
                // 检查之前存储是否有值  
                this.storeDirectiveInstances.push({ groupId: curInsGroupId, instances: [].concat(this.currentDirectiveInstance) });
                this.currentDirectiveInstance = [];
                this.findInstoreDirectiveInstances();
            }
        }
        else {
            this.findInstoreDirectiveInstances();
        }
        this.guidChangeSubject.next(this.currentInfos);
        return tCurrent.guid;
    }
    /**
     *
     * @private
     * @return {?}
     */
    findInstoreDirectiveInstances() {
        //查找 已有的实例里面是否有对应的groupdId
        /** @type {?} */
        let findGroupIdIndex = this.storeDirectiveInstances.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item['groupId'] == this.current.groupId));
        if (findGroupIdIndex > -1) {
            this.doDirectiveInstanceInit(this.storeDirectiveInstances[findGroupIdIndex]['instances'], this.current.guid);
        }
    }
    /**
     * 执行指令实例的初始化
     * @private
     * @param {?} instances
     * @param {?} guid
     * @return {?}
     */
    doDirectiveInstanceInit(instances, guid) {
        /** @type {?} */
        let maxLen = instances.length;
        for (var k = 0; k < maxLen; k++) {
            if (!instances || instances.length != maxLen) {
                break;
            }
            else {
                instances[k]["viewChangeOnInit"](guid);
            }
        }
        if (instances && instances.length > 0) {
            if (instances.length != maxLen) {
                // 在外面被删除
                this.doDirectiveInstanceInit(instances, guid);
            }
        }
    }
    /**
     * 存储指令实例
     * @param {?} tInstance
     * @return {?}
     */
    storeViewChangeDirectiveInstance(tInstance) {
        if (!this.current.groupId || this.current.groupId == tInstance['fViewGroupId']) {
            // 与当前匹配
            this.currentDirectiveInstance.push(tInstance);
        }
        else {
            // 与当前不匹配
            /** @type {?} */
            let findGroupInfo = this.storeDirectiveInstances.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item['groupId'] == tInstance['fViewGroupId']));
            if (findGroupInfo) {
                findGroupInfo.instances.push(tInstance);
            }
            else {
                this.storeDirectiveInstances.push({ groupId: tInstance['fViewGroupId'], instances: [tInstance] });
            }
        }
    }
    /**
     * 移除指令实例
     * @param {?} viewItemType
     * @param {?} guid
     * @return {?}
     */
    removeViewChangeDirectiveInstance(viewItemType, guid) {
        if (guid == this.current.guid) {
            if (this.currentDirectiveInstance.length > 0) {
                /** @type {?} */
                let tfindIndex = this.currentDirectiveInstance.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item['viewItemType'] == viewItemType));
                if (tfindIndex > -1) {
                    this.currentDirectiveInstance.splice(tfindIndex, 1);
                }
            }
        }
        /** @type {?} */
        let findModuleIndex = this.currentInfos.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item.guid == guid));
        if (findModuleIndex > -1) {
            /** @type {?} */
            let findModuleInfo = this.currentInfos[findModuleIndex];
            findModuleInfo['count'] = findModuleInfo['count'] - 1;
            if (findModuleInfo['count'] <= 0) {
                this.currentInfos.splice(findModuleIndex, 1);
                /** @type {?} */
                let findGroupIndex = this.storeDirectiveInstances.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item['groupId'] == findModuleInfo["groupId"]));
                this.storeDirectiveInstances.splice(findGroupIndex, 1);
                if (this.current.guid == guid) {
                    // 重置当前
                    this.current = { guid: '',
                        groupId: '',
                        count: 0
                    };
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    createGuid() {
        /** @type {?} */
        const S4 = (/**
         * @return {?}
         */
        function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
    }
    /**
     * 更新多视图组件
     * @param {?} guid
     * @param {?} groupId
     * @param {?} viewChangeDirectiveEl
     * @return {?}
     */
    updatedStoreViewChangeCmp(guid, groupId, viewChangeDirectiveEl) {
        /** @type {?} */
        let findStoreViewChangeCmp = this.storeViewChangeCmps.find((/**
         * @param {?} item
         * @return {?}
         */
        item => !item["parentEl"] && item['guid'] == guid));
        if (findStoreViewChangeCmp) {
            // 没有赋值的元素
            /** @type {?} */
            let findParent = this.findCommonParent(viewChangeDirectiveEl, findStoreViewChangeCmp.cmpEl);
            findStoreViewChangeCmp["parentEl"] = findParent;
            findStoreViewChangeCmp["cmpEl"] = null;
        }
    }
    /**
     * 找两个元素的公共父元素
     * @private
     * @param {?} element1
     * @param {?} element2
     * @return {?}
     */
    findCommonParent(element1, element2) {
        /** @type {?} */
        var parent1 = element1;
        while (parent1 !== null) {
            if (parent1.contains(element2)) {
                return parent1;
            }
            parent1 = parent1.parentElement;
        }
        return null; // 如果没有共同父元素，则返回 null
    }
    /**
     * @private
     * @param {?} groupId
     * @param {?} cmpEl
     * @return {?}
     */
    getGuidFromStoreViewChangeCmp(groupId, cmpEl) {
        /** @type {?} */
        let findCmp = this.storeViewChangeCmps.find((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item["groupId"] == groupId && item["cmpId"] == cmpEl.id) {
                return item["parentEl"] ? item["parentEl"].contains(cmpEl) : false;
            }
        }));
        return findCmp ? findCmp["guid"] : "";
    }
}
ViewChangeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ViewChangeService.ctorParameters = () => [];
/** @nocollapse */ ViewChangeService.ngInjectableDef = i0.defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });
if (false) {
    /**
     * 每次view-change组件创建完会创建current对象，然后放到此处保存。
     * 当对应的指令都初始化后，开始销毁
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.currentInfos;
    /**
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.current;
    /**
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.storeDirectiveInstances;
    /**
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.currentDirectiveInstance;
    /**
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.guidChangeSubject;
    /**
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.storeViewChangeSer;
    /**
     * 解决标签页上有组件和指令
     * 当组件销毁时，指令还存在，这样根据原来的逻辑找不到组件与指令的对应关系
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.storeViewChangeCmps;
}
//# sourceMappingURL=data:application/json;base64,