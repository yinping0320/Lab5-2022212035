{"version":3,"sources":["ng://@farris/ui-view-change/lib/view-change-manage.service.ts","ng://@farris/ui-view-change/lib/view-change.service.ts","ng://@farris/ui-view-change/lib/view-change.component.ts","ng://@farris/ui-view-change/lib/view-change.directive.ts","ng://@farris/ui-view-change/lib/view-change.module.ts"],"names":["ViewChangeManageService","prototype","addViewItem","itemId","viewContainerId","this","defaultId","viewContainers","hasElement","items","push","createViewContainerChange","removeViewItem","leftItems","filter","el","length","changeCurrentViewId","unsubscribe","updateCurrentViewId","type","currentViewType","changeView","next","getChangeCurrentViewId","changeCurrentViewIdFromCMP","groupId","some","item","BehaviorSubject","hasViewContainer","Object","keys","Injectable","ViewChangeService","getModuleInfo","id","current","guid","storeViewChangeSer","removeModuleInfo","hasOwnProperty","findCmpIndex","storeViewChangeCmps","findIndex","splice","getModuleChange","guidChangeSubject","createViewChangeCmp","moduleCount","viewChangeCmpEl","existsGuid","getGuidFromStoreViewChangeCmp","assign","createGuid","tCurrent","currentInfos","cmpId","cmpEl","parentEl","currentDirectiveInstance","curInsGroupId","doDirectiveInstanceInit","storeDirectiveInstances","instances","concat","findInstoreDirectiveInstances","_this","findGroupIdIndex","maxLen","k","storeViewChangeDirectiveInstance","tInstance","findGroupInfo","find","removeViewChangeDirectiveInstance","viewItemType","tfindIndex","findModuleIndex","findModuleInfo_1","findGroupIndex","count","S4","Math","random","toString","substring","updatedStoreViewChangeCmp","viewChangeDirectiveEl","findStoreViewChangeCmp","findParent","findCommonParent","element1","element2","parent1","contains","parentElement","findCmp","args","providedIn","ViewChangeComponent","ngOnInit","viewChangeService","viewGroupId","toolbarData","viewchangewrapper","nativeElement","viewChangeManageSer","defaultType","bar","activeTypeItem","toolTypeChange","emit","ngAfterViewInit","observerElement","ngOnDestroy","ro","unobserve","listItemClick","disable","typelist","_renderer","setStyle","dropdownMouseEnter","dropdownMouseLeave","inject","ngZone","get","NgZone","runOutsideAngular","ResizeObserver","entries","observer","contentRect","width","observe","Component","selector","template","encapsulation","ViewEncapsulation","None","Renderer2","decorators","Optional","Injector","Input","Output","ViewChild","viewType","EventEmitter","FarrisViewItemDirective","pipe","takeUntil","cancelSignal","subscribe","curModuleGroupdInfos","hasInit","findModuleInfo","fViewGroupId","viewChangeOnInit","newGuid","complete","elementRef","render","removeClass","addClass","Directive","ElementRef","Subject","ViewChangeModule","NgModule","declarations","imports","CommonModule","providers","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\n\r\ninterface ViewItems {\r\n  items: Array<string>;\r\n}\r\ninterface viewContainer {\r\n  [viewGroupIdId: string]: ViewItems;\r\n}\r\n\r\ninterface CurrentViewChange{\r\n  [viewGroupIdId: string]: BehaviorSubject<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class ViewChangeManageService {\r\n  /**é»è®¤è§å¾åæ¢åç»åç§° */\r\n  private readonly defaultId:string = 'default';\r\n  //å½åæ¾ç¤ºè§å¾\r\n  currentViewType:any = {};\r\n\r\n  /**contents */\r\n  viewContainers:viewContainer = {};\r\n  /**\r\n   * ä¿å­ææåç»ççå¬å¯¹è±¡ï¼å½¢å¦{åç»Id:åæ´çå¬å¯¹è±¡}\r\n   */\r\n  changeCurrentViewId:CurrentViewChange={};\r\n\r\n  constructor() {\r\n   }\r\n  /**\r\n   * æ·»å è§å¾é¡¹ç®\r\n   * @param itemId \r\n   * @param viewContainerId:å¯¹åºçå°±æ¯groupId \r\n   */\r\n  addViewItem(itemId:string, viewContainerId = this.defaultId){\r\n    if(this.viewContainers[viewContainerId]){\r\n      if (this.hasElement(itemId, viewContainerId)) {\r\n        return;\r\n      }\r\n      else{\r\n        this.viewContainers[viewContainerId].items.push(itemId);\r\n      }\r\n    }\r\n    else{\r\n      this.viewContainers[viewContainerId] = {\r\n        items: []\r\n      } as ViewItems;\r\n      this.createViewContainerChange(viewContainerId);\r\n      this.viewContainers[viewContainerId].items.push(itemId);\r\n    }\r\n  }\r\n  /**\r\n   * \r\n   * @param itemId åå®¹çæä»¤æ è®°\r\n   * @param viewContainerId fGroupId\r\n   * @returns \r\n   */\r\n  removeViewItem(itemId, viewContainerId = this.defaultId){\r\n    if(this.viewContainers && this.viewContainers[viewContainerId]){\r\n      const leftItems = this.viewContainers[viewContainerId].items.filter(el=>{\r\n        return el !== itemId;\r\n      });\r\n      if (!leftItems.length) {\r\n        // å¦æå½ååç»ä¸çé¡¹é½ä¸å¨\r\n        delete this.viewContainers[viewContainerId];\r\n        if(this.changeCurrentViewId[viewContainerId]){\r\n          this.changeCurrentViewId[viewContainerId].unsubscribe();\r\n          this.changeCurrentViewId[viewContainerId]=null;\r\n          delete this.changeCurrentViewId[viewContainerId];\r\n        }\r\n        return;\r\n      }\r\n      this.viewContainers[viewContainerId].items = leftItems;\r\n    }\r\n  }\r\n\r\n  /**å­å¨currentpageid */\r\n  updateCurrentViewId(type:string, viewContainerId = this.defaultId){\r\n    this.currentViewType[viewContainerId] = type;\r\n    let changeView={};\r\n    changeView[viewContainerId]=this.currentViewType[viewContainerId];\r\n    this.createViewContainerChange(viewContainerId);\r\n    this.changeCurrentViewId[viewContainerId].next(changeView);\r\n  }\r\n  /**\r\n   * è·åæå±åç»çåæ´çå¬å¯¹è±¡\r\n   * @param viewContainerId \r\n   * @returns \r\n   */\r\n  getChangeCurrentViewId(viewContainerId = this.defaultId){\r\n    return this.changeCurrentViewId[viewContainerId];\r\n  }\r\n  /**\r\n   * æä¾ç»view-changeç»ä»¶ä½¿ç¨\r\n   * @param type \r\n   * @param viewContainerId \r\n   */\r\n  changeCurrentViewIdFromCMP(type:string,viewContainerId = this.defaultId){\r\n      if(!this.currentViewType[viewContainerId]){\r\n        this.currentViewType[viewContainerId]=type;\r\n      }\r\n      this.updateCurrentViewId(this.currentViewType[viewContainerId],viewContainerId);\r\n  }\r\n\r\n  private hasElement(itemId: string, groupId: string): boolean {\r\n    return this.viewContainers[groupId].items.some((item): boolean => item === itemId);\r\n  }\r\n  private createViewContainerChange(viewContainerId = this.defaultId){\r\n    if(!this.changeCurrentViewId[viewContainerId]){\r\n      this.changeCurrentViewId[viewContainerId]= new BehaviorSubject<any>(null);\r\n    }\r\n  }\r\n  hasViewContainer(){\r\n    return Object.keys(this.viewContainers).length==0&&Object.keys(this.changeCurrentViewId).length==0;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ViewChangeManageService } from './view-change-manage.service';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\n\r\ninterface StoreViewService {\r\n  [guid: string]: ViewChangeManageService;\r\n}\r\n\r\ninterface StoreCurrentInfo {\r\n  guid: string;\r\n  groupId: string;\r\n  count: number;\r\n}\r\ninterface StoreCurrentDirectiveIns {\r\n  groupId: string;\r\n  instances: Array<any>;\r\n}\r\ninterface StoreViewChangeCmp{\r\n  groupId:string;\r\n  cmpId:string;\r\n  cmpEl:HTMLElement|null;\r\n  guid:string;\r\n  count:number;\r\n  parentEl:HTMLElement|null;//å½æä»¤åå§åä»¥åæ¬¡å±æ§æä¼æå¼\r\n}\r\n/**\r\n * ximena\r\n * 20240301ä¿®æ¹\r\n * 1ãæ­¤æå¡åæ¬çåè½è¢«æåå°view-change-manage.service.tsé\r\n * 2ãè§£å³ï¼å¨æ¡æ¶éæå¼ä¸åè¡¨åï¼ä½æ¯åç»idä¸æ ·å¼èµ·çåæ¢èååçä¸å°çé¢çé®é¢\r\n * 3ãæ¹å¼ï¼æårootçæå¡å°ä¸ä¸ªæ®éæå¡éï¼rootæå¡åªç¨æ¥åºåModule\r\n * ----------------------------å¯è½é®é¢\r\n *  1ãå­å¨æ¾ç¤ºéèåæ¢ngIfæ¹å¼åæ¢çview-changeåç´ ï¼å½éä¸å°ä¸ä¸ªæ¨¡åidä¸\r\n * å½éå°å¶ä»çæ¨¡åä¸ï¼ä½æ¯ä¸å½±åå±ç¤º\r\n * \r\n */\r\n/**\r\n * ximena\r\n * 20240410ä¿®æ¹\r\n * ä¸æ¬¡çæ¬ä¿®æ¹ï¼å©ç¨moduleåå§åï¼åå»ºåä¸guidï¼åºåä¸åè¡¨åä¸çå¤è§å¾ã\r\n * ç¼ºç¹ï¼\r\n * 1ãmoduleåªè½åå§åä¸æ¬¡ï¼åé¢å ä¸ºç¼å­æºå¶ï¼ä¸ä¼åæ¬¡åå§åï¼å¯¼è´ç¬¬äºæ¬¡æå¼åæ®å¯è½åºç°é®é¢\r\n * 2ãåä¸ä¸ªç»ä»¶è¢«å¤ä¸ªèåç»åä¸æ¯æ\r\n * æ¬æ¬¡ä¿®æ¹æ¹æ¡ï¼\r\n * 1ãéè¿currentInfosï¼å­å¨ç»ä»¶åå»ºæ¶çguidå¯¹è±¡ï¼å½å¯¹åºçæä»¤åå§åå®æ¯ï¼å é¤è¿ä¸ªå¯¹è±¡\r\n * 2ãéè¿BehaviorSubjectï¼ç»ä»¶åå»ºæ¶çguidå¯¹è±¡æ¶ï¼nextåécurrentInfos\r\n * 3ãéè¿storeDirectiveInstancesï¼è§£å³ç»ä»¶åæä»¤åå»ºé¡ºåºååçé®é¢\r\n * 4ãéè¿storeViewChangeCmpsï¼è§£å³å¨æ ç­¾é¡µä¸ï¼æä»¤åå§åä¸æ¬¡ï¼å¤è§å¾ç»ä»¶ä¼è¢«å¤æ¬¡åå§åï¼æ­¤æ¶åæ¹æ æ³å¹éçé®é¢ \r\n * æ¯æçåºæ¯\r\n * 1ãåä¸ä¸ªç»ä»¶è¢«å¤ä¸ªèåç»åï¼å¯ä»¥æ­£å¸¸æ¾ç¤º\r\n * 2ãåä¸ªè¡¨ååï¼å¤ä¸ªå¤è§å¾ï¼åªè¦ç»ä»¶ãæä»¤å¹éï¼æ è®ºgroupidæ¯å¦ä¸æ ·ï¼å¯ä»¥æ­£å¸¸æ¾ç¤º\r\n * 3ãåä¸ªè¡¨ååï¼å¨æä¸ªå¤è§å¾çæä»¤åååµå¥å¶ä»å¤è§å¾ï¼å¯ä»¥æ­£å¸¸æ¾ç¤º\r\n * 4ãæ ç­¾é¡µä¸ä½¿ç¨æ¶ï¼å¤ä¸ªå¤è§å¾ï¼å¯ä»¥æ­£å¸¸æ¾ç¤º\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ViewChangeService {\r\n  /**\r\n   * æ¯æ¬¡view-changeç»ä»¶åå»ºå®ä¼åå»ºcurrentå¯¹è±¡ï¼ç¶åæ¾å°æ­¤å¤ä¿å­ã\r\n   * å½å¯¹åºçæä»¤é½åå§ååï¼å¼å§éæ¯\r\n   */\r\n  private currentInfos: Array<StoreCurrentInfo> = [];\r\n  private current: StoreCurrentInfo = {\r\n    guid: '',\r\n    groupId: '',\r\n    count: 0\r\n  };\r\n  private storeDirectiveInstances: Array<StoreCurrentDirectiveIns> = [];\r\n  private currentDirectiveInstance = [];\r\n  private guidChangeSubject = new BehaviorSubject<Array<StoreCurrentInfo>>([{\r\n    guid: '',\r\n    groupId: '',\r\n    count: 0\r\n  }]);\r\n  private storeViewChangeSer: StoreViewService = {};\r\n  /**\r\n   * è§£å³æ ç­¾é¡µä¸æç»ä»¶åæä»¤\r\n   * å½ç»ä»¶éæ¯æ¶ï¼æä»¤è¿å­å¨ï¼è¿æ ·æ ¹æ®åæ¥çé»è¾æ¾ä¸å°ç»ä»¶ä¸æä»¤çå¯¹åºå³ç³»\r\n   */\r\n  private storeViewChangeCmps:Array<StoreViewChangeCmp>=[];\r\n\r\n  constructor() {}\r\n  /**\r\n   * è·åå½åæ¨¡åä¿¡æ¯\r\n   * @param id \r\n   */\r\n  getModuleInfo(id = '') {\r\n    id = id ? id : this.current.guid;\r\n    return this.storeViewChangeSer[id];\r\n  }\r\n  /**\r\n   * å é¤å¯¹åºçæ¨¡åä¿¡æ¯\r\n   * @param id \r\n   */\r\n  removeModuleInfo(guid) {\r\n    if (guid && this.storeViewChangeSer.hasOwnProperty(guid)) {\r\n      this.storeViewChangeSer[guid] = null;\r\n      delete this.storeViewChangeSer[guid];      \r\n      let findCmpIndex=this.storeViewChangeCmps.findIndex(item => item.guid == guid);\r\n      this.storeViewChangeCmps.splice(findCmpIndex, 1);  \r\n    }\r\n  }\r\n  /**\r\n   * è¢«ç¨äºæä»¤ç»å®\r\n   * @returns \r\n   */\r\n  getModuleChange() {\r\n    return this.guidChangeSubject;\r\n  }\r\n  /**\r\n   * åå»ºå®ä¾\r\n   */\r\n  createViewChangeCmp(moduleCount,viewChangeCmpEl:HTMLElement) {\r\n    // æ¯å¦åºæ¯æ ç­¾é¡µä¸æè§å¾ç»ä»¶ï¼ä½æ¯æ ç­¾é¡µåå®¹åºåææä»¤ï¼è§å¾ç»ä»¶ä¼åå§åå¤æ¬¡\r\n     let existsGuid=this.getGuidFromStoreViewChangeCmp(moduleCount[\"groupId\"],viewChangeCmpEl);\r\n     if(existsGuid){\r\n      return existsGuid\r\n     }\r\n    // å­å¨å½åæ¨¡åID\r\n    this.current = Object.assign({\r\n      guid: this.createGuid(),\r\n    }, moduleCount);\r\n    // åå»ºå¯¹è±¡\r\n    if (!this.storeViewChangeSer.hasOwnProperty(this.current.guid)) {\r\n      this.storeViewChangeSer[this.current.guid] = new ViewChangeManageService();\r\n    }\r\n    let tCurrent=Object.assign({},this.current);    \r\n    // ä¿å­å½åå¯¹åºä¿¡æ¯\r\n    this.currentInfos.push(tCurrent);\r\n    // å­å¨èµ·æ¥\r\n    this.storeViewChangeCmps.push(Object.assign({cmpId:viewChangeCmpEl.id,cmpEl:viewChangeCmpEl,parentEl:null},this.current));\r\n    if (this.currentDirectiveInstance.length > 0) {\r\n      // å½åæä»¤å®ä¾å­å¨åºæå¼\r\n      let curInsGroupId = this.currentDirectiveInstance[0]['fViewGroupId'];\r\n      if (this.current.groupId == curInsGroupId) {\r\n        // å±äºåä¸ä¸ªåç»\r\n        this.doDirectiveInstanceInit(this.currentDirectiveInstance, this.current.guid);\r\n      } else {\r\n        // æ£æ¥ä¹åå­å¨æ¯å¦æå¼  \r\n        this.storeDirectiveInstances.push({ groupId: curInsGroupId, instances: [].concat(this.currentDirectiveInstance) });\r\n        this.currentDirectiveInstance = [];\r\n        this.findInstoreDirectiveInstances();\r\n      }\r\n    } else {\r\n      this.findInstoreDirectiveInstances();\r\n    }    \r\n    this.guidChangeSubject.next(this.currentInfos);    \r\n    return tCurrent.guid;\r\n  }\r\n  /**\r\n   * \r\n   */\r\n  private findInstoreDirectiveInstances() {\r\n    //æ¥æ¾ å·²æçå®ä¾éé¢æ¯å¦æå¯¹åºçgroupdId\r\n    let findGroupIdIndex = this.storeDirectiveInstances.findIndex(item => item['groupId'] == this.current.groupId);\r\n    if (findGroupIdIndex > -1) {\r\n      this.doDirectiveInstanceInit(this.storeDirectiveInstances[findGroupIdIndex]['instances'], this.current.guid);\r\n    }\r\n  }\r\n  /**\r\n   * æ§è¡æä»¤å®ä¾çåå§å\r\n   */\r\n  private doDirectiveInstanceInit(instances, guid) {\r\n    let maxLen = instances.length;\r\n    for (var k = 0; k < maxLen; k++) {\r\n      if (!instances || instances.length != maxLen) {\r\n        break;\r\n      } else {\r\n        instances[k][\"viewChangeOnInit\"](guid);\r\n      }\r\n    }\r\n    if (instances && instances.length > 0) {\r\n      if (instances.length != maxLen) {\r\n        // å¨å¤é¢è¢«å é¤\r\n        this.doDirectiveInstanceInit(instances, guid);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * å­å¨æä»¤å®ä¾\r\n   * @param tInstance \r\n   */\r\n  storeViewChangeDirectiveInstance(tInstance) {\r\n    if (!this.current.groupId || this.current.groupId == tInstance['fViewGroupId']) {\r\n      // ä¸å½åå¹é\r\n      this.currentDirectiveInstance.push(tInstance);\r\n    } else {\r\n      // ä¸å½åä¸å¹é\r\n      let findGroupInfo = this.storeDirectiveInstances.find((item) => item['groupId'] == tInstance['fViewGroupId']);\r\n      if (findGroupInfo) {\r\n        findGroupInfo.instances.push(tInstance);\r\n      } else {\r\n        this.storeDirectiveInstances.push({ groupId: tInstance['fViewGroupId'], instances: [tInstance] })\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * ç§»é¤æä»¤å®ä¾\r\n   * @param tInstance \r\n   */\r\n  removeViewChangeDirectiveInstance(viewItemType: string, guid: string) {\r\n    if (guid == this.current.guid) {\r\n      if (this.currentDirectiveInstance.length > 0) {\r\n        let tfindIndex = this.currentDirectiveInstance.findIndex((item) => item['viewItemType'] == viewItemType);\r\n        if (tfindIndex > -1) {\r\n          this.currentDirectiveInstance.splice(tfindIndex, 1);\r\n        }\r\n      }\r\n    }\r\n    let findModuleIndex = this.currentInfos.findIndex(item => item.guid == guid);\r\n    if (findModuleIndex > -1) {\r\n      let findModuleInfo = this.currentInfos[findModuleIndex];\r\n      findModuleInfo['count'] = findModuleInfo['count'] - 1;\r\n      if (findModuleInfo['count'] <= 0) {\r\n        this.currentInfos.splice(findModuleIndex, 1);\r\n        let findGroupIndex = this.storeDirectiveInstances.findIndex((item) => item['groupId'] == findModuleInfo[\"groupId\"]);\r\n        this.storeDirectiveInstances.splice(findGroupIndex, 1);      \r\n        if(this.current.guid==guid){\r\n          // éç½®å½å\r\n          this.current={guid: '',\r\n            groupId: '',\r\n            count: 0\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private createGuid(){\r\n    const S4 = function () {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\r\n  }\r\n  /**\r\n   * æ´æ°å¤è§å¾ç»ä»¶\r\n   * @param guid \r\n   * @param groupId \r\n   * @param viewChangeDirectiveEl \r\n   */\r\n  updatedStoreViewChangeCmp(guid:string,groupId:string,viewChangeDirectiveEl:HTMLElement){\r\n      let findStoreViewChangeCmp=this.storeViewChangeCmps.find(item=>!item[\"parentEl\"]&&item['guid']==guid);\r\n      if(findStoreViewChangeCmp){\r\n        // æ²¡æèµå¼çåç´ \r\n        let findParent= this.findCommonParent(viewChangeDirectiveEl,findStoreViewChangeCmp.cmpEl);\r\n        findStoreViewChangeCmp[\"parentEl\"]=findParent;\r\n        findStoreViewChangeCmp[\"cmpEl\"]=null;\r\n      }   \r\n  }\r\n  /**\r\n   * æ¾ä¸¤ä¸ªåç´ çå¬å±ç¶åç´ \r\n   * @param element1 \r\n   * @param element2 \r\n   * @returns \r\n   */\r\n  private findCommonParent(element1, element2) {\r\n    var parent1 = element1;\r\n    \r\n    while (parent1 !== null) {\r\n      if (parent1.contains(element2)) {\r\n        return parent1;\r\n      }\r\n      parent1 = parent1.parentElement;\r\n    }    \r\n    return null; // å¦ææ²¡æå±åç¶åç´ ï¼åè¿å null\r\n  }\r\n\r\n  private getGuidFromStoreViewChangeCmp(groupId,cmpEl){\r\n    let findCmp=this.storeViewChangeCmps.find(item=>{\r\n      if(item[\"groupId\"]==groupId&&item[\"cmpId\"]==cmpEl.id){\r\n          return item[\"parentEl\"]?item[\"parentEl\"].contains(cmpEl):false;\r\n      } \r\n    });\r\n    return findCmp?findCmp[\"guid\"]:\"\"\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, AfterViewInit, ViewEncapsulation, Optional, NgZone, Injector, OnDestroy } from '@angular/core';\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\nimport { ViewChangeService } from './view-change.service';\r\n\r\n@Component({\r\n  selector: 'farris-view-change',\r\n  templateUrl: './view-change.component.html',\r\n  styleUrls: ['./view-change.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n  // providers:[ ViewChangeService ]\r\n})\r\nexport class ViewChangeComponent implements OnInit ,AfterViewInit,OnDestroy{\r\n\r\n  @Input() toolbarData;\r\n  // è§å¾ç±»åçåç°æ¹å¼ï¼tileå°ç£è´´ç±»åï¼dropdownä¸æç±»å\r\n  @Input() viewType: string = 'tile';\r\n  // é»è®¤çè§å¾ç±»å\r\n  @Input() defaultType: string;\r\n  // è§å¾ç»\r\n  @Input() viewGroupId:string = 'default';\r\n  activeTypeItem;\r\n  // è§å¾ç±»ååæ¢æ¶ï¼æåºçäºä»¶\r\n  @Output() toolTypeChange = new EventEmitter();\r\n\r\n  @ViewChild('typelist') typelist: ElementRef;\r\n  @ViewChild('viewchangewrapper') viewchangewrapper: ElementRef;\r\n  // è®°å½Moduleçæ è®°ï¼ç¨æ¥è·åå½åmoduleä¸çæå¡\r\n  private guid=\"\";\r\n // å¤çngzone\r\n private ngZone = null;\r\n // è®°å½åç´ å°ºå¯¸åæ´\r\n private ro: ResizeObserver | null = null;\r\n private viewChangeManageSer;\r\n \r\n\r\n  constructor(private _renderer: Renderer2,\r\n    @Optional() private viewChangeService: ViewChangeService, @Optional() private inject: Injector) { \r\n      if(!this.viewChangeService){\r\n        this.viewChangeService= new ViewChangeService();\r\n      }\r\n    }\r\n\r\n  ngOnInit() {\r\n    this.guid=this.viewChangeService.createViewChangeCmp({groupId:this.viewGroupId,count:this.toolbarData.length},this.viewchangewrapper.nativeElement.parentElement);\r\n    this.viewChangeManageSer=this.viewChangeService.getModuleInfo(this.guid);\r\n    if (this.toolbarData && this.toolbarData.length) {\r\n      if (this.defaultType) {\r\n        let item = this.toolbarData.find((bar) => {\r\n          return bar['type'] === this.defaultType;\r\n        })\r\n        this.activeTypeItem = item;\r\n        this.toolTypeChange.emit(this.activeTypeItem);\r\n      }\r\n      else {\r\n        this.activeTypeItem = this.toolbarData[0];\r\n        this.toolTypeChange.emit(this.activeTypeItem);\r\n      }         \r\n    }    \r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.observerElement();    \r\n  }\r\n  ngOnDestroy(): void {\r\n    if(this.ro){\r\n      this.ro.unobserve(this.viewchangewrapper.nativeElement);\r\n      this.ro = null;\r\n    }\r\n  }\r\n\r\n  listItemClick(item) {\r\n    if (item.disable || this.activeTypeItem['type'] === item['type']) {\r\n      return;\r\n    }\r\n    this.activeTypeItem = item;\r\n    this.viewChangeManageSer.updateCurrentViewId(this.activeTypeItem['type'],this.viewGroupId);\r\n    this.toolTypeChange.emit(item);\r\n    if (this.typelist) {\r\n      this._renderer.setStyle(\r\n        this.typelist.nativeElement,\r\n        'display',\r\n        'none'\r\n      );\r\n    }\r\n  }\r\n\r\n  dropdownMouseEnter() {\r\n    this._renderer.setStyle(\r\n      this.typelist.nativeElement,\r\n      'display',\r\n      'block'\r\n    );\r\n  }\r\n  dropdownMouseLeave() {\r\n    this._renderer.setStyle(\r\n      this.typelist.nativeElement,\r\n      'display',\r\n      'none'\r\n    );\r\n  }\r\n  /**\r\n   * è§£å³å¡çååè¡¨ä¸¤ä¸ªèååæ¶æå¼ï¼åæ­¥æ°æ®æ¶åï¼å½åçæ ç­¾æ¾ç¤ºä¸å¯¹çé®é¢\r\n   */\r\n  private observerElement() {\r\n        if(!this.inject){\r\n          // åå§æ´æ°ä¸æ¬¡å½åç±»å\r\n          this.viewChangeManageSer['changeCurrentViewIdFromCMP'](this.activeTypeItem['type'],this.viewGroupId);\r\n          return;\r\n        }\r\n        if (!this.ngZone) {\r\n            this.ngZone = this.inject.get<NgZone>(NgZone, null);\r\n        }\r\n        if (!this.ro) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    this.ro = new ResizeObserver((entries, observer) => {\r\n                      if(entries[0].contentRect.width>0){\r\n                        this.viewChangeManageSer['changeCurrentViewIdFromCMP'](this.activeTypeItem['type'],this.viewGroupId);\r\n                      }\r\n                    });\r\n                    this.ro.observe(this.viewchangewrapper.nativeElement);\r\n          });\r\n       }\r\n  }\r\n}\r\n","import { Directive, Input, ElementRef, OnInit, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { ViewChangeService } from './view-change.service';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\n//è§å¾åºå\r\n@Directive({\r\n    selector: '[fViewItem]'\r\n})\r\nexport class FarrisViewItemDirective implements OnInit, OnDestroy {\r\n    /**ä½¿ç¨æ¹å¼\r\n     * <div [fViewItem]=\"'type11'\" [fViewGroupId]=\"'group2'\">\r\n         è§å¾çåå®¹åºå\r\n       </div>\r\n     */\r\n    // å½åé¡¹çæ è®°\r\n    @Input('fViewItem') viewItemType: string;\r\n    // å½åé¡¹æå±çç»\r\n    @Input('fViewGroupId') fViewGroupId: string = 'default';\r\n    private viewChangeManageSer;\r\n    // è®°å½Moduleçæ è®°ï¼ç¨æ¥è·åå½åmoduleä¸çæå¡\r\n    private guid = \"\";\r\n    // è§£å³viewChangeOnInitä¸çå¬æ§è¡å¤æ¡æ°æ®çååé¡ºåºä¸ä¸è´\r\n    private hasInit=false;\r\n    /**\r\n     * åªè¦æ§è¡è¿åå§æ¹æ³ï¼å°±è°ç¨ã\r\n     * ä¿è¯åªæ§è¡ä¸æ¬¡\r\n     */\r\n    private cancelSignal = new Subject();\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private viewChangeService: ViewChangeService,\r\n        private render: Renderer2\r\n    ) {\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        // åå­å¨å°æå¡é,å¨è¿ä¸ªæ¹æ³éå¯è½ä¼æ§è¡viewChangeOnInit,ä¿®æ¹hasInitçå¼ã\r\n        this.viewChangeService['storeViewChangeDirectiveInstance'](this);\r\n        // è§£å³ç»ä»¶ä¸æä»¤åå»ºååçé®é¢\r\n        this.viewChangeService.getModuleChange().pipe(takeUntil(this.cancelSignal)).subscribe((curModuleGroupdInfos) => {\r\n            if(this.hasInit) return;\r\n            let findModuleInfo=curModuleGroupdInfos.find(item=>item['groupId'] == this.fViewGroupId)\r\n            if (findModuleInfo) {\r\n                this.viewChangeOnInit(findModuleInfo['guid']);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * æ è®°è¿ä¸ªæ¹æ³\r\n     * @param guid \r\n     * @returns \r\n     */\r\n    viewChangeOnInit(newGuid: string) {\r\n        if(this.hasInit) return;\r\n        this.guid = newGuid;\r\n        this.hasInit=true;\r\n        this.cancelSignal.next();\r\n        this.cancelSignal.complete();\r\n        this.viewChangeManageSer = this.viewChangeService.getModuleInfo(newGuid);\r\n        // ä¿å­\r\n        this.viewChangeService.updatedStoreViewChangeCmp(this.guid,this.fViewGroupId,this.elementRef.nativeElement)\r\n        // å é¤\r\n        this.viewChangeService['removeViewChangeDirectiveInstance'](this.viewItemType, this.guid);\r\n        // è¿½å å°æå¡ä¸­ç»ä¸ç®¡ç\r\n        this.viewChangeManageSer['addViewItem'](this.viewItemType, this.fViewGroupId);\r\n        this.viewChangeManageSer['getChangeCurrentViewId'](this.fViewGroupId).subscribe((currentViewType: any): void => {\r\n            if (!currentViewType||!currentViewType[this.fViewGroupId]) return;\r\n            if (currentViewType[this.fViewGroupId] == this.viewItemType) {\r\n                this.render.removeClass(this.elementRef.nativeElement, 'f-viewchange-view-none');\r\n                }\r\n            else {\r\n                this.render.addClass(this.elementRef.nativeElement, 'f-viewchange-view-none');\r\n                 }\r\n        });\r\n\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        // éæ¯æ¶å é¤æ°æ®\r\n        if(this.viewChangeManageSer){\r\n            this.viewChangeManageSer['removeViewItem'](this.viewItemType, this.fViewGroupId);\r\n            if (this.viewChangeManageSer['hasViewContainer']()) {\r\n                this.viewChangeService['removeModuleInfo'](this.guid);\r\n            }\r\n        }else{\r\n            //æªæ§è¡æ¹æ³viewChangeOnInit\r\n            this.cancelSignal=null;\r\n        }\r\n    }\r\n\r\n}","import { NgModule, Optional } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ViewChangeComponent } from './view-change.component';\r\nimport { FarrisViewItemDirective } from './view-change.directive';\r\nimport { ViewChangeService } from './view-change.service';\r\nimport {ViewChangeManageService} from './view-change-manage.service';\r\n\r\n@NgModule({\r\n  declarations: [ViewChangeComponent,FarrisViewItemDirective],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers:[\r\n    ViewChangeService,ViewChangeManageService\r\n  ],\r\n  exports: [ViewChangeComponent,FarrisViewItemDirective]\r\n})\r\nexport class ViewChangeModule {\r\n  constructor(){\r\n  }\r\n}\r\n"]}