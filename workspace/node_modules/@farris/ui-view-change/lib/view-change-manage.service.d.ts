import { BehaviorSubject } from 'rxjs';
interface ViewItems {
    items: Array<string>;
}
interface viewContainer {
    [viewGroupIdId: string]: ViewItems;
}
interface CurrentViewChange {
    [viewGroupIdId: string]: BehaviorSubject<any>;
}
export declare class ViewChangeManageService {
    /**默认视图切换分组名称 */
    private readonly defaultId;
    currentViewType: any;
    /**contents */
    viewContainers: viewContainer;
    /**
     * 保存所有分组的监听对象，形如{分组Id:变更监听对象}
     */
    changeCurrentViewId: CurrentViewChange;
    constructor();
    /**
     * 添加视图项目
     * @param itemId
     * @param viewContainerId:对应的就是groupId
     */
    addViewItem(itemId: string, viewContainerId?: string): void;
    /**
     *
     * @param itemId 内容的指令标记
     * @param viewContainerId fGroupId
     * @returns
     */
    removeViewItem(itemId: any, viewContainerId?: string): void;
    /**存储currentpageid */
    updateCurrentViewId(type: string, viewContainerId?: string): void;
    /**
     * 获取所属分组的变更监听对象
     * @param viewContainerId
     * @returns
     */
    getChangeCurrentViewId(viewContainerId?: string): BehaviorSubject<any>;
    /**
     * 提供给view-change组件使用
     * @param type
     * @param viewContainerId
     */
    changeCurrentViewIdFromCMP(type: string, viewContainerId?: string): void;
    private hasElement;
    private createViewContainerChange;
    hasViewContainer(): boolean;
}
export {};
