import { LookupUtils, ServerSideToken } from '@farris/ui-lookup';
import { BehaviorSubject, Subject, of, interval, fromEvent } from 'rxjs';
import { debounceTime, map, switchMap, catchError, tap, delay, takeUntil, filter, skip, throttle, take, throwIfEmpty } from 'rxjs/operators';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils, reqAnimFrame } from '@farris/ui-common';
import { EventManager } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { InjectionToken, Injectable, Injector, Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, NgZone, Component, forwardRef, ChangeDetectionStrategy, ViewEncapsulation, HostBinding, HostListener, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { InputGroupModule } from '@farris/ui-input-group';
import { DatalistModule } from '@farris/ui-datalist';
import { LoadingService, LoadingModule } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ComboServerSideToken = new InjectionToken('Combo Grid HTTP service');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboService {
    /**
     * @param {?} http
     * @param {?} loadingService
     * @param {?} injector
     */
    constructor(http, loadingService, injector) {
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.selections$ = new Subject();
        this.isOpen$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject('');
        this.serachValue$ = new Subject();
        this.loadSuccess$ = new Subject();
        this.treeInfo$ = new BehaviorSubject(null);
        this.displayType = 'LIST';
        this.separator = ',';
        this.columns = [];
        this.remoteSearch = true;
        this.panelElement = null;
        this.treeSearchHandler = null;
        // 树帮助加载设置
        this.treeloadconfig = null;
        this._data = [];
        this.serachValue$.pipe(debounceTime(300)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (!this.remoteSearch) {
                this.filterData(value, this.textField);
            }
            else {
                this.filterDataOnServer(value);
            }
        }));
    }
    /**
     * @return {?}
     */
    get uri() {
        return this._uri;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set uri(val) {
        this._uri = val;
        this.data$.next([]);
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value || [];
        if (Array.isArray(value)) {
            this.data$.next(value);
        }
    }
    /**
     * @return {?}
     */
    injectService() {
        if (this.injector && !this.comboHttp) {
            this.lookupUtils = this.injector.get(LookupUtils, null);
            if (this.displayType.indexOf('LOOKUP') > -1) {
                this.comboHttp = this.injector.get(ServerSideToken, null);
            }
            else {
                this.comboHttp = this.injector.get(ComboServerSideToken, null);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toBoolean(value) {
        return value != null && `${value}` !== 'false';
    }
    /**
     * @param {?} data
     * @param {?=} index
     * @param {?=} emitEvent
     * @return {?}
     */
    selectItem(data, index, emitEvent = true) {
        if (!this.multiSelect) {
            this.selections = [];
        }
        if (Array.isArray(data)) {
            data.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (this.selections.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => s[this.idField] === n[this.idField])) === -1) {
                    this.selections.push(n);
                }
            }));
        }
        else {
            if (this.selections.findIndex((/**
             * @param {?} s
             * @return {?}
             */
            s => s[this.idField] === data[this.idField])) === -1) {
                this.selections.push(data);
            }
        }
        if (emitEvent) {
            this.selections$.next({ action: 'clicked' });
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    unSelectItem(data) {
        this.selections = this.selections.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            // return item[this.idField] !== data[this.idField];
            return JSON.stringify(item) !== JSON.stringify(data);
        }));
        this.selections$.next({ action: 'clicked' });
    }
    /**
     * @param {?} datas
     * @return {?}
     */
    selectAll(datas) {
        (datas || []).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (!this.selections.find((/**
             * @param {?} i
             * @return {?}
             */
            i => i[this.idField] === n[this.idField]))) {
                this.selections.push(n);
            }
        }));
        // this.selections = datas;
        this.selections$.next({ action: 'clicked' });
    }
    /**
     * @param {?} datas
     * @return {?}
     */
    unSelectAll(datas) {
        // this.selections = [];
        datas = datas || [];
        this.selections = (this.selections || []).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => datas.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i[this.idField] === n[this.idField])) === -1));
        this.selections$.next({ action: 'clicked' });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    isSelect(id) {
        if (this.selections && this.selections.length) {
            return this.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item[this.idField] === id)) !== undefined;
        }
        return false;
    }
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} callback
     * @return {?}
     */
    loadData(data, selectValues = '', callback) {
        if (data) {
            if (selectValues === null || selectValues === undefined) {
                selectValues = '';
            }
            if (typeof selectValues === 'boolean') {
                selectValues = '' + selectValues;
            }
            // this.data$.next(data);
            if (selectValues) {
                /** @type {?} */
                let vals = [(selectValues + '')];
                if (this.multiSelect) {
                    vals = (selectValues + '').split(this.separator);
                }
                /** @type {?} */
                let selectedItems = vals.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return callback(data, val);
                }));
                selectedItems = selectedItems.filter((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el));
                if ((!this.selections || !this.selections.length) && selectedItems.length) {
                    this.selections = selectedItems;
                }
            }
            else {
                this.selections = [];
            }
            this.selections$.next({ action: 'initData' });
        }
    }
    /**
     * @param {?} params
     * @return {?}
     */
    filterDataOnServer(params) {
        this.getData(params).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            this.closeLoading();
            this.loadingService.clearAll();
            if (r && r.items) {
                switch (this.displayType) {
                    case 'LOOKUPLIST': {
                        this.loadLookUpDataTable(r, true);
                        break;
                    }
                    case 'LOOKUPTREELIST': {
                        this.loadLookUpDataTree(r);
                        break;
                    }
                }
            }
            else {
                this.data$.next([]);
            }
        }));
    }
    // 客户端过滤
    /**
     * @param {?} val
     * @param {?=} field
     * @return {?}
     */
    filterData(val, field = 'text') {
        if (val) {
            /** @type {?} */
            let data = [];
            if (this.displayType === 'LOOKUPLIST' || this.displayType === 'LIST') {
                data = this.data.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    let itemval = this.getValueByObj(field, item);
                    if (itemval != '' && itemval !== null && itemval !== undefined) {
                        itemval = String(itemval).toLowerCase();
                    }
                    return itemval.indexOf(val.toLowerCase()) > -1;
                }));
            }
            // const data = this.data
            //     ? this.data.filter(item => {
            //         if (this.getValueByObj(filed, item)) {
            //             return String(this.getValueByObj(filed, item)).indexOf(val) > -1;
            //         } else if (item.data && this.getValueByObj(filed, item.data)) {
            //             return String(this.getValueByObj(filed, item.data)).indexOf(val) > -1;
            //         }
            //     })
            //     : [];
            this.data$.next(data);
        }
        else {
            this.data$.next(this.data);
        }
    }
    /**
     * @return {?}
     */
    getSelections() {
        return this.selections;
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.selections = [];
    }
    /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    getValue(prop, selections) {
        selections = selections ? selections : this.selections;
        if (selections && selections.length) {
            /** @type {?} */
            const tmp = selections.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return this.getValueByObj(prop, item);
            }));
            if (tmp && (tmp.length > 1 || tmp.length === 0)) {
                return tmp.join(this.separator);
            }
            else {
                return tmp[0];
            }
        }
        return '';
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValueByObj(field, data) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1) {
            if (data.hasOwnProperty(field)) {
                resultVal = data[field];
            }
            else {
                // console.log(`%cError: The %c"${field}"%c is not in `,
                //         'color: #bb0000;font-weight: bold;', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', data);
                resultVal = null;
            }
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    // console.log(`%cError: The %c"${key}"%c is not in  `,
                    // 'color: #bb0000;font-weight: bold', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', obj);
                    return null;
                }
            }), data);
        }
        return resultVal;
    }
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} selectedIds
     * @return {?}
     */
    initData(params = {}, method = 'get', selectedIds = '') {
        switch (this.displayType) {
            case 'TreeList':
            case 'LIST': {
                if (params.data) {
                    params = params.data;
                }
                this.getData(params, method).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let __data = d;
                    if (!this.uri) {
                        __data = this.data;
                    }
                    if (this.displayType === 'TreeList') {
                        this.loadDataTree(__data);
                    }
                    else {
                        this.loadDataTable(__data);
                    }
                    this.loadSuccess$.next(true);
                }));
                break;
            }
            case 'LOOKUPLIST':
            case 'LOOKUPTREELIST': {
                // TFS 466104
                if (!selectedIds) {
                    this.selections = [];
                    this.selectedValues = '';
                }
                this.loadLookupData(params, selectedIds, 'get', this.displayType === 'LOOKUPTREELIST');
                break;
            }
        }
        return this.loadSuccess$;
    }
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    /**
     * @private
     * @param {?} treeNodes
     * @param {?=} arr
     * @return {?}
     */
    treeNodesToFlatData(treeNodes, arr = []) {
        treeNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            if (!n['addtional']) {
                arr.push(n.data);
            }
            if (n.children && n.children.length) {
                this.treeNodesToFlatData(n.children, arr);
            }
        }));
    }
    /**
     * @private
     * @param {?} params
     * @param {?} selectedIds
     * @param {?=} method
     * @param {?=} isTree
     * @return {?}
     */
    loadLookupData(params, selectedIds, method = 'get', isTree = false) {
        const { data, enableFullTree, loadTreeDataType, searchValue } = params;
        if (data) {
            params = { customData: data };
        }
        if (this.displayType === 'LOOKUPTREELIST' && !this['treeToList']) {
            params.enableFullTree = enableFullTree;
            // params.loadTreeDataType = 'loadall'; 
            params.searchValue = { "category": "all" };
            this.treeloadconfig = { enableFullTree, loadTreeDataType };
            if (!isNaN(Number(params.expandLevel))) {
                // 前端 -1 不展开   0 全展开
                // 后端  0 不展开  -1 全展开
                if (params.expandLevel) {
                    if (params.expandLevel === -1) {
                        params.expandLevel = 0;
                    }
                }
                else {
                    params.expandLevel = -1;
                }
                params.searchValue['layerNum'] = params.expandLevel;
            }
            params.searchValue = JSON.stringify(params.searchValue);
        }
        if (searchValue) {
            params.searchValue = searchValue;
        }
        if (this['treeToList']) {
            isTree = false;
            this.displayType = 'LOOKUPLIST';
        }
        this.getData(params, method).pipe(switchMap((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (selectedIds) {
                return this.getSelectedItems(selectedIds).pipe(map((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    if (d && d.items) {
                        // data.selectedItems = isTree ?  d.items.map(n => n.data) : d.items;
                        if (isTree) {
                            /** @type {?} */
                            const arr = [];
                            this.treeNodesToFlatData(d.items, arr);
                            data.selectedItems = arr;
                        }
                        else {
                            data.selectedItems = d.items;
                        }
                    }
                    else {
                        if (Array.isArray(d)) {
                            data.selectedItems = (selectedIds + '').split(this.separator).map((/**
                             * @param {?} val
                             * @return {?}
                             */
                            val => {
                                if (isTree) {
                                    return this.treeNodeToFlatData(d, val, this.idField);
                                }
                                else {
                                    return d.find((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    n => n[this.idField] + '' == val || n[this.textField] == val));
                                }
                            })).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n != undefined && n != null));
                        }
                    }
                    return data;
                })), catchError((/**
                 * @return {?}
                 */
                () => {
                    return of(data);
                })));
            }
            else {
                data.selectedItems = [];
            }
            return of(data);
        }))).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.loadingService.clearAll();
            if (data) {
                if (isTree) {
                    this.loadLookUpDataTree(data);
                }
                else {
                    this.loadLookUpDataTable(data);
                }
            }
            this.loadSuccess$.next(true);
        }));
    }
    /**
     * @param {?} selIds
     * @return {?}
     */
    getSelectedItems(selIds) {
        /** @type {?} */
        const searchParam = {
            category: 'fav', favoriteIds: ('' + selIds).split(this.separator)
        };
        /** @type {?} */
        const p = { searchValue: JSON.stringify(searchParam), enableFullTree: false, loadTreeDataType: 'default' };
        return this.getData(p);
    }
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} loadChild
     * @return {?}
     */
    getData(params = {}, method = 'get', loadChild = false) {
        if (this.uri) {
            // this.data = []
            // tfs 470519
            if (this.data && this.data.length && !loadChild) {
                this.data = [];
            }
            params['treeToList'] = this['treeToList'];
            params['navTreeToList'] = this['navTreeToList'];
            if (this['treeToList']) {
                this.displayType = 'LOOKUPLIST';
            }
            this.showLoading();
            if (this.comboHttp) {
                if (this.context) {
                    this.comboHttp.context = this.context;
                }
                return this.comboHttp.getData(this.uri, params, method).pipe(tap((/**
                 * @return {?}
                 */
                () => {
                    this.closeLoading();
                })));
            }
            else {
                return this.http.request(method, this.uri, params).pipe(tap((/**
                 * @return {?}
                 */
                () => {
                    this.closeLoading();
                })));
            }
        }
        else {
            if (this.data) {
                return of(this.data).pipe(delay(10));
            }
            else {
                return of([]).pipe(delay(10));
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadDataTable(data) {
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            return dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d[this.idField] + '' == val || d[this.textField] == val));
        }));
        this.closeLoading();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadDataTree(data) {
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            return eachData(dataArr, val, this.idField);
            /**
             * @param {?} paramData
             * @param {?} paramVal
             * @param {?} idField
             * @return {?}
             */
            function eachData(paramData, paramVal, idField) {
                /** @type {?} */
                let rtnData = '';
                paramData.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    if (d.data[idField] == paramVal) {
                        rtnData = d.data;
                        return true;
                    }
                    else if (d.children && d.children.length) {
                        rtnData = eachData(d.children, paramVal, idField);
                    }
                    else {
                        return false;
                    }
                }));
                return rtnData;
            }
        }));
        this.closeLoading();
    }
    /**
     * @param {?} resData
     * @param {?=} sortable
     * @return {?}
     */
    loadLookUpDataTable(resData, sortable = false) {
        this.closeLoading();
        if (typeof resData === 'object') {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            if (!sortable && resData.columns) {
                this.columns = resData.columns;
            }
            if (resData.pageInfo) {
                this.pageInfo = resData.pageInfo;
                this.pageInfo.total = resData.total ? resData.total : 0;
            }
            if (resData.items) {
                this.data = resData.items;
            }
        }
        if (resData && resData.selectedItems) {
            this.selections = resData.selectedItems || [];
        }
        if (this.selections) {
            /** @type {?} */
            const ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField])).join(this.separator);
            if (ids !== this['__SELECTEDIDS__']) {
                // this.selectedValues = ids;
                this['__SELECTEDIDS__'] = ids;
            }
        }
        this.loadData(this.data, this['__SELECTEDIDS__'], (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            /** @type {?} */
            let isMaped = dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d[this.idField] + '' == val));
            if (this.selections) {
                isMaped = !isMaped ? this.selections.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d[this.idField] + '' == val)) : isMaped;
            }
            return isMaped;
        }));
    }
    /**
     * @param {?} nodes
     * @param {?=} allData
     * @return {?}
     */
    checkNodeCanBeSelect(nodes, allData = true) {
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                if (node.hasOwnProperty('addtional')) {
                    node.selectable = !node['addtional'];
                }
                if (node.children && node.children.length) {
                    this.checkNodeCanBeSelect(node.children, allData);
                }
                else {
                    if (allData) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    }
    /**
     * @param {?} resData
     * @return {?}
     */
    loadLookUpDataTree(resData) {
        this.closeLoading();
        if (!resData) {
            return;
        }
        if (resData instanceof Array) {
            this.data = resData;
            if (resData['selectedItems']) {
                this.selections = resData['selectedItems'] || [];
            }
        }
        else {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            this.columns = resData.columns;
            this.treeInfo = resData.treeInfo;
            this.treeInfo$.next(this.treeInfo);
            if (resData.selectedItems) {
                this.selections = resData.selectedItems || [];
            }
            if (this.treeInfo && !this.treeInfo['treeDataIsInit']) {
                if (this.treeInfo.layerType.toLowerCase() === 'pathcode') {
                    this.data = this.lookupUtils.makeTree(resData.items, this.treeInfo);
                }
                else {
                    this.data = this.lookupUtils.makeTreeWithParentID(resData.items, '', `${this.treeInfo.dataField}.${this.treeInfo.parentField}`, this.idField);
                }
            }
            else if (resData.items) {
                // this.data = resData.items;
                /** @type {?} */
                const isLoadAllTreeData = (/**
                 * @return {?}
                 */
                () => {
                    if (this.treeloadconfig.loadTreeDataType === 'default') {
                        return this.treeInfo.loadDataType === 'all';
                    }
                    else {
                        return this.treeloadconfig.loadTreeDataType === 'loadall';
                    }
                });
                this.data = this.checkNodeCanBeSelect(resData.items, isLoadAllTreeData());
            }
        }
        if (this.selections) {
            /** @type {?} */
            const ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField])).join(this.separator);
            if (ids !== this['__SELECTEDIDS__']) {
                this['__SELECTEDIDS__'] = ids;
            }
        }
        this.loadData(this.data, this['__SELECTEDIDS__'], (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            return this.treeNodeToFlatData(dataArr, val, this.idField);
        }));
    }
    /**
     * @param {?} paramData
     * @param {?} paramVal
     * @param {?} idField
     * @return {?}
     */
    treeNodeToFlatData(paramData, paramVal, idField) {
        /** @type {?} */
        let rtnData = '';
        paramData.find((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            if ((d.data && d.data[idField] == paramVal) || d[idField] == paramVal) {
                rtnData = d.data;
                return true;
            }
            else if (d.children && d.children.length) {
                rtnData = this.treeNodeToFlatData(d.children, paramVal, idField);
                return rtnData ? true : false;
            }
            else {
                return false;
            }
        }));
        return rtnData;
    }
    /**
     * @private
     * @return {?}
     */
    showLoading() {
        this.loading = this.loadingService.show({ container: this.panelElement, delay: 100 });
    }
    /**
     * @return {?}
     */
    closeLoading() {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
    }
}
ComboService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComboService.ctorParameters = () => [
    { type: HttpClient },
    { type: LoadingService },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboLocaleService {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.localeConfig = {
            'ZH_CN': {
                placeholder: '请选择'
            },
            'EN_US': {
                placeholder: 'Please Select'
            }
        };
    }
    /**
     * @return {?}
     */
    getLocaleConfig() {
        /** @type {?} */
        const locale = this.localeService.localeId;
        this.localeConfig = this.localeService.getResources(`${locale}.combo`);
        return this.localeConfig;
        // if (locale && this.localeConfig[locale]) {
        //     return this.localeConfig[locale];
        // } else {
        //     return this.localeConfig.ZH_CN;
        // }
    }
}
ComboLocaleService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComboLocaleService.ctorParameters = () => [
    { type: LocaleService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextUniqueId = 0;
class BaseComboComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '';
        this.panelWidth = 300;
        this.panelHeight = 'auto';
        /**
         * 下拉面板宽度与输入框宽度保持一至， 默认为 true
         */
        this.autoWidth = true;
        this.enableClear = true;
        /**
         * 禁用只读时显示 placeholder
         */
        this.forcePlaceholder = false;
        /**
         * 任意输入 20210202
         */
        this.nosearch = false;
        // 鼠标滑过显示文本内容
        this.enableTitle = true;
        /**
         * 展示类型： text文本，tag标签。 默认 text
         */
        this.viewType = 'text';
        this.displayText = '';
        this.maxHeight = 200;
        this.enableCancelSelected = false;
        // 如果面板已打开， 点击清空按钮时是否关闭面板。true: 关闭； false: 不关闭；
        this.hidePanelOnClear = false;
        /**
         * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
         */
        this.useValue = false;
        /**
         * 分隔符
         */
        this.separator = ',';
        this.treeToList = false;
        this.navTreeToList = false;
        this.emptyMsg = '暂无数据';
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        this.isOpen = false;
        this.comPosition = {};
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this._cmbPanel = null;
        this._comboPanelCreated$ = new Subject();
        // private _hasPosited = false;
        // private _container: Element;
        this.willHide$ = new Subject();
        this.panelListener = null;
        this.ngZone = null;
        this.mouseWheelEvent = null;
        this.textChangeSubject = new Subject();
        this.initdataSubscription = null;
        this.customData = null;
        this.originalText = '';
        this.isTextChange = false;
        this.treeClientSearch = new Subject();
        this.ro = null;
        this.onChange = (/**
         * @return {?}
         */
        () => null);
        this.onTouched = (/**
         * @return {?}
         */
        () => null);
        this.initToggleAction();
        this.initSelectionsChangeAction();
        this.initDatasChangeAction();
        this.commonUtils = this.injector.get(CommonUtils, null);
        this.willHide$.pipe(takeUntil(this.destroy$), debounceTime(110)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (!this.nosearch && this.displayText !== this.originalText) {
                this.displayText = this.originalText;
                if (this.isLookup()) {
                    this.onChange(this.displayText);
                }
                else {
                    /** @type {?} */
                    const _displayText = this.comboService.getValue(this.textField);
                    this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
                }
            }
            this['_searchKeyWords'] = '';
            this.onTouched();
            this.hidePanel.emit(this);
        }));
        this.ngZone = this.injector.get(NgZone);
        this.eventMgr = this.injector.get(EventManager);
        this.emitTextChange();
        this.notifySer = this.injector.get(NotifyService, null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set context(value) {
        this.comboService.context = value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set mappingField(v) {
        this.mapFields = v;
    }
    /**
     * @return {?}
     */
    get mappingField() {
        return this.mapFields;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this.comboService.data = val;
    }
    /**
     * @return {?}
     */
    get data() {
        return this.comboService.data;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set idField(val) {
        this.comboService.idField = val;
    }
    /**
     * @return {?}
     */
    get idField() {
        return this.comboService.idField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set valueField(val) {
        this.comboService.valueField = val;
    }
    /**
     * @return {?}
     */
    get valueField() {
        return this.comboService.valueField ? this.comboService.valueField : this.idField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set textField(val) {
        this.comboService.textField = val;
    }
    /**
     * @return {?}
     */
    get textField() {
        return this.comboService.textField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set multiSelect(val) {
        this.comboService.multiSelect = val;
    }
    /**
     * @return {?}
     */
    get multiSelect() {
        return this.comboService.multiSelect;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set uri(val) {
        this.comboService.uri = val;
    }
    /**
     * @return {?}
     */
    get uri() {
        return this.comboService.uri;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set selectedValues(val) {
        this.comboService.selectedValues = val;
    }
    /**
     * @return {?}
     */
    get selectedValues() {
        return this.comboService.selectedValues;
    }
    /**
     * @return {?}
     */
    get selectedValuesStr() {
        if (this.selectedValues === null || this.selectedValues === undefined) {
            this.selectedValues = '';
        }
        return (this.selectedValues) + '';
    }
    /**
     * 远端过滤
     * @return {?}
     */
    get remoteSearch() {
        return this.comboService.remoteSearch;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set remoteSearch(val) {
        this.comboService.remoteSearch = val;
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmbPanel(cmp) {
        if (cmp) {
            this._cmbPanel = cmp;
            this.ro.observe(cmp.nativeElement);
            this._comboPanelCreated$.next(cmp);
        }
        else {
            this._cmbPanel = null;
            // this.ro.unobserve(this.el.nativeElement);
            if (this.ro) {
                this.ro.disconnect();
            }
            this._comboPanelCreated$.next(null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selections(value) {
        this.comboService.selections = value;
    }
    /**
     * @return {?}
     */
    get selections() {
        if (this.comboService.selections) {
            return this.comboService.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== null && n !== undefined));
        }
        return [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.localeService = this.injector.get(ComboLocaleService, '');
        if (this.localeService) {
            /** @type {?} */
            const localConfig = this.localeService.getLocaleConfig();
            if (localConfig) {
                if (!this.placeholder) {
                    this.placeholder = localConfig['placeholder'] || '请选择';
                }
                this.emptyMsg = localConfig['emptyMsg'] || '暂无数据';
            }
        }
        this.comboService.separator = this.separator;
        this.comboService['treeToList'] = this.treeToList;
        this.comboService['navTreeToList'] = this.navTreeToList;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const that = this;
        this.ngControl = this.injector.get(NgControl, null);
        fromEvent(window, 'resize').pipe(takeUntil(this.destroy$)).pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        ev => interval(100)))).subscribe((/**
         * @return {?}
         */
        () => {
            this.updatePanelWidth();
            if (this.isOpen) {
                this.comboService.isOpen$.next(false);
                this.willHide$.next();
            }
        }));
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    that.updatePanelWidth();
                }));
            }));
            /** @type {?} */
            let reszieTimer = null;
            this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    if (reszieTimer) {
                        clearTimeout(reszieTimer);
                    }
                    reszieTimer = setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        if (that._cmbPanel && that.panelElement) {
                            reqAnimFrame((/**
                             * @return {?}
                             */
                            () => {
                                that.updatePosition(that._cmbPanel.nativeElement);
                                if (that._cmbPanel.nativeElement.className.indexOf('f-area-show') === -1) {
                                    that.render.addClass(that._cmbPanel.nativeElement, 'f-area-show');
                                }
                            }));
                        }
                    }), 10);
                }));
            }));
        }
        this.comboService.injectService();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboService.serachValue$.unsubscribe();
        if (this.mouseWheelEvent) {
            this.mouseWheelEvent();
        }
    }
    /**
     * @private
     * @return {?}
     */
    updatePanelWidth() {
        const { width } = this.getInputSizeInfo();
        this.panelWidth = this.autoWidth ? width : this.panelWidth;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onClick($event = null) {
        if ($event) {
            if ($event.stopPropagation) {
                $event.stopPropagation();
            }
            else {
                if ($event.originalEvent) {
                    $event.originalEvent.stopPropagation();
                }
            }
        }
        // 重复执行面板关闭事件 故注释掉 20220917
        // if (this.isOpen) {
        //     this.willHide$.next();
        // } else {
        //     this.comboService.isOpen$.next(!this.isOpen);
        // }
        this.comboService.isOpen$.next(!this.isOpen);
        if (this.input && this.input.textbox) {
            this.input.textbox.nativeElement.focus();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        this.onTouched();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        // // 启用任意输入后，文本框得到焦点后不弹出下拉面板。2021/02/19
        // if (this.nosearch) {
        //     return ;
        // }
        // if (!this.isOpen) {
        //     this.comboService.isOpen$.next(true);
        //     // 延迟执行变更检测 更新弹出框位置
        // of('').pipe(debounceTime(0)).subscribe(() => {
        //     this.cdr.detectChanges();
        // });
        // } else {
        //     this.hide();
        // }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onInputclick($event) {
        if ($event && $event.stopPropagation) {
            $event.stopPropagation();
        }
        this.comboService.isOpen$.next(!this.isOpen);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnter(event) { }
    /**
     * @return {?}
     */
    blur() {
        this.input.textbox.nativeElement.blur();
    }
    /**
     * @return {?}
     */
    focus() {
        this.input.textbox.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.selectedValues = '';
        this.selections = [];
        this.comboService.selections = [];
        this.onValueChange({ text: '', value: '', selections: [] });
        this.clear.emit();
        if (this.isOpen && this.hidePanelOnClear) {
            // this.comboService.isOpen$.next(false);
            this.willHide$.next();
        }
        else {
            if (this.isOpen && this.comboService.displayType === 'LIST') {
                this.comboService.serachValue$.next('');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getInputSizeInfo() {
        /** @type {?} */
        const el = this.viewType === 'text' ? this.input.inputGroup : this.input2;
        return el.nativeElement.getBoundingClientRect();
    }
    /**
     * @private
     * @return {?}
     */
    emitTextChange() {
        return this.textChangeSubject.pipe(debounceTime(200)).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            /** @type {?} */
            const _selectedValues = this.selectedValues;
            /** @type {?} */
            const val = r ? r : this.displayText;
            if (r === '') {
                this.onClear();
            }
            else if (this.nosearch) {
                this.onValueChange({ text: r, value: '', selections: this.selections, nosearch: true });
            }
            if (!this.remoteSearch) {
                if (!this.multiSelect) {
                    if (this.comboService.displayType === 'LOOKUPTREELIST') {
                        this.treeClientSearch.next(val);
                    }
                    else {
                        this.comboService.serachValue$.next(val);
                    }
                }
                else {
                    /** @type {?} */
                    const valArr = (val + '').split(this.separator);
                    /** @type {?} */
                    const appendVal = valArr[valArr.length - 1] ? valArr[valArr.length - 1] : '';
                    this.comboService.serachValue$.next(appendVal);
                }
                // if (_selectedValues !== this.selectedValues) {
                //     this.onValueChange({ text: this.displayText, value: this.selectedValues, selections: this.selections });
                // }
            }
            else {
                this.filterDataOnServer(val, '*');
            }
        }));
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    __createPanel(value, searchParam = null) {
        /** @type {?} */
        let params = {};
        /** @type {?} */
        let method = 'get';
        if (value instanceof Object) {
            const { params: _p, data, method: _m, showDialog } = value;
            if (showDialog === false) {
                return;
            }
            if (data) {
                params = { data };
                this.customData = data;
            }
            else {
                if (_p) {
                    params = { data: _p };
                    this.customData = _p;
                }
                else {
                    this.customData = null;
                }
            }
            if (_m) {
                method = _m;
            }
        }
        else if (typeof value === 'boolean') {
            if (value === false) {
                return;
            }
        }
        this.initCreatPanelAction();
        if (this.uri) {
            this.updateSelectedValues();
            if (this.isLookup()) {
                this.isOpen = true;
            }
        }
        else {
            this.isOpen = true;
        }
        if (this.comboService.displayType === 'LOOKUPTREELIST') {
            params.enableFullTree = this['enableFullTree'];
            params.loadTreeDataType = this['loadTreeDataType'];
        }
        if (this.isLookup() && this.input && this.nosearch) {
            this.input.textbox.nativeElement.disabled = true;
        }
        /** @type {?} */
        const focusInput = (/**
         * @return {?}
         */
        () => {
            if (this.isLookup() && this.input && this.nosearch) {
                this.input.textbox.nativeElement.disabled = false;
                this.input.focus();
            }
        });
        if (searchParam) {
            params.searchValue = searchParam.searchValue;
        }
        /** @type {?} */
        let selectedIds = this.selectedValues;
        if (this.isLookup()) {
            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse'] ||
                (this.mapFields && !this.mapFields[this.idField])) {
                selectedIds = this.comboService['__SELECTEDIDS__'];
            }
            /** @type {?} */
            const _expLevel = this['expandLevel'];
            params['expandLevel'] = _expLevel;
        }
        this.initdataSubscription = this.comboService.initData(params, method, selectedIds).pipe(throwIfEmpty(focusInput)).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (!this.isOpen) {
                this.isOpen = true;
            }
            focusInput();
            this.cdr.detectChanges();
        }));
        // 禁止滚动
        // this.render.setStyle(this.containerElement, 'pointer-events', 'auto');
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.registerDocumentEvent();
        }));
    }
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    onBeforeShow() {
        if (!this.beforeShow) {
            this.beforeShow = (/**
             * @return {?}
             */
            () => of(''));
        }
        return this.beforeShow(this).pipe(take(1));
    }
    /**
     * @private
     * @return {?}
     */
    isLookup() {
        return this.comboService.displayType.indexOf('LOOKUP') > -1;
    }
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    onBeforeHide() {
        if (!this.beforeHide) {
            this.beforeHide = (/**
             * @return {?}
             */
            () => of(''));
        }
        this.beforeHide(this).pipe(take(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (typeof value === 'boolean') {
                if (value) {
                    this.hide(true);
                }
            }
            else if (typeof value === 'object') {
                if (value.hide) {
                    this.hide(true);
                }
                else {
                    if (value.message) {
                        if (this.notifySer) {
                            this.notifySer.warning(value.message);
                        }
                    }
                }
            }
            else {
                this.hide(true);
            }
        }));
    }
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    initToggleAction() {
        this.comboService.isOpen$.pipe(debounceTime(20), takeUntil(this.destroy$), skip(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (this.readonly || this.disabled) {
                return;
            }
            /** @type {?} */
            let open = value;
            /** @type {?} */
            let searchParam = null;
            if (typeof value === 'object') {
                open = value.isOpen;
                searchParam = value.search;
            }
            if (open) {
                this.onBeforeShow().subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => {
                    this.__createPanel(v, searchParam);
                }));
                return;
            }
            else {
                this.onBeforeHide();
            }
            this.cdr.detectChanges();
        }));
        this._comboPanelCreated$.pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} value
         * @return {?}
         */
        value => !!value))).subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        (cmp) => {
            cmp.nativeElement.style.display = '';
            this.initCreatPanelAction();
            this.panelElement.appendChild(cmp.nativeElement);
            /** @type {?} */
            let transitionFlag = true;
            cmp.nativeElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    this.showPanel.emit(this);
                }
            }));
            if (this.isLookup()) {
                cmp.nativeElement.style.width = `${this.panelWidth}px`;
                cmp.nativeElement.style.height = `${this.panelHeight}px`;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.render.addClass(cmp.nativeElement, 'f-area-show');
                }), 0);
            }
            // this.updatePosition(cmp.nativeElement);
            // this.cdr.detectChanges();
        }));
        this.destroy$.pipe(take(1)).subscribe((/**
         * @return {?}
         */
        () => {
            this.comboService.closeLoading();
            nextUniqueId = 0;
            if (this.panelListener) {
                this.panelListener();
            }
            if (this.initdataSubscription) {
                this.initdataSubscription.unsubscribe();
                this.initdataSubscription = null;
            }
            this.removePanelElement();
        }));
    }
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    iframeEventHandle(action) {
        /** @type {?} */
        const iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            for (const iframe of iframes) {
                /** @type {?} */
                const iframeDoc = iframe.contentDocument;
                if (iframeDoc) {
                    iframeDoc[action]('mousedown', this._documentClickEvent);
                    iframeDoc[action]('mousewheel', this._documentClickEvent);
                    iframeDoc[action]('DOMMouseScroll', this._documentClickEvent);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeDocumentListener() {
        if (this._documentClickEvent) {
            document.removeEventListener('mousedown', this._documentClickEvent, true);
            document.removeEventListener('mousewheel', this._documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', this._documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', this._documentClickEvent, true);
            }
            this.iframeEventHandle('removeEventListener');
            this._documentClickEvent = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerDocumentEvent() {
        // 注册 mousedown 事件 隐藏panel
        document.addEventListener('mousedown', (this._documentClickEvent = (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event.type === 'mousewheel' && this.el.nativeElement.contains(event.target)) {
                this.comboService.isOpen$.next(false);
                return;
            }
            if (!this.el.nativeElement.contains(event.target) && this._cmbPanel && !this.contains(this._cmbPanel, event)) {
                this.comboService.isOpen$.next(false);
                // this.willHide$.next();
            }
        })), true);
        document.addEventListener('mousewheel', this._documentClickEvent, true);
        document.addEventListener('DOMMouseScroll', this._documentClickEvent, true);
        if (top !== window) {
            top.document.body.addEventListener('mousedown', this._documentClickEvent, true);
        }
        this.iframeEventHandle('addEventListener');
    }
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    initCreatPanelAction() {
        if (this.panelElement) {
            return;
        }
        this.createPanel(document.body);
        this.panelListener = this.render.listen(this.panelElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removePanelElement() {
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            if (this.panelElement) {
                document.body.removeChild(this.panelElement);
                this.panelElement = null;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initSelectionsChangeAction() {
        this.comboService.selections$.pipe(takeUntil(this.destroy$), debounceTime(100)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value.action === 'initData') {
                this.onSelectionsChange(this.selections);
            }
            else {
                this.onSelectionsChangeDefault();
                if (this.isLookup()) {
                    this.updateSelectedValues();
                }
            }
        }));
    }
    /**
     * @protected
     * @return {?}
     */
    initDatasChangeAction() { }
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    onSelectionsChangeDefault() {
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        /** @type {?} */
        const _selectedValues = this.comboService.getValue(this.idField);
        if (this.displayText !== _displayText && !this.nosearch) {
            this.displayText = _displayText || this.displayText;
            this.displayText = this.displayText || '';
            this.originalText = _selectedValues ? _displayText : this.displayText;
        }
        if (this.input) {
            this.input.textbox.nativeElement.value = this.displayText;
        }
        this.selectedValues =
            (_selectedValues !== '' && _selectedValues !== undefined && _selectedValues !== null) ? _selectedValues : this.selectedValues;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    onSelectionsChange(v) { }
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    updateMappingFieldValue(clearMapFields = false) {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            if (clearMapFields) {
                this.selectedValues = '';
            }
            if (bindingData.setValue) {
                /** @type {?} */
                const bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                let pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n !== ''));
                }
                /** @type {?} */
                const mappingField = this.mappingField ? this.mappingField : '';
                bindingData.setValue(pathArr.concat(mappingField.split('.')), this.selectedValues, true, true);
            }
            else if (this.commonUtils) {
                this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            }
            // if (!bindingData.setValue && this.commonUtils) {
            //     this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            // }
        }
    }
    /**
     * @return {?}
     */
    updateSelectedValues() {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData.getValue) {
                /** @type {?} */
                const bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                let pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => value !== ''));
                }
                /** @type {?} */
                const mappingField = this.mappingField ? this.mappingField : '';
                this.selectedValues = bindingData.getValue(pathArr.concat(mappingField.split('.')));
            }
            else if (this.commonUtils) {
                this.selectedValues = this.commonUtils.getValue(this.mappingField, bindingData);
            }
        }
        else if (!this.mappingField) ;
    }
    /**
     * @param {?=} val
     * @return {?}
     */
    onTextChange(val) {
        this.isTextChange = true;
        if (this.nosearch) {
            this.selectedValues = val;
            this.updateMappingFieldValue(this.isLookup());
            this.onChange(val);
        }
        if (!this.isOpen && this.comboService.displayType === 'LIST') {
            this.isOpen = true;
        }
        this.textChangeSubject.next(val);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    onValueChange(changes) {
        this.displayText = changes.text;
        this.originalText = this.displayText;
        if (!this.uri && this.data && this.data.length > 0 && (!this['displayType'] || this.useValue)) {
            this.onChange(this.selectedValues);
        }
        else {
            this.onChange(this.displayText);
        }
        // if (!changes.nosearch) {
        // }
        this.valueChange.emit(changes);
        this.updateMappingFieldValue();
        this.onTouched();
        // if (this.isOpen && changes.emitHidePanel) { this.willHide$.next(); }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) { }
    /**
     * @param {?} item
     * @return {?}
     */
    onUnSelected(item) { }
    /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    hide(emit = true) {
        if (!this.isOpen) {
            return;
        }
        this.removeDocumentListener();
        this.isOpen = false;
        if (emit) {
            this.willHide$.next();
        }
        if (this.initdataSubscription) {
            this.initdataSubscription.unsubscribe();
            this.initdataSubscription = null;
        }
        this.removePanelElement();
    }
    /**
     * @return {?}
     */
    show() {
        if (this.isOpen) {
            return;
        }
        this.onBeforeShow().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.__createPanel(value);
        }));
        this.cdr.detectChanges();
    }
    /**
     * @private
     * @param {?} host
     * @return {?}
     */
    createPanel(host) {
        this.panelElement = this.document.createElement('div');
        this.panelElement.id = `overlay-${nextUniqueId++}`;
        this.panelElement.classList.add('overlay-pane');
        this.panelElement.style.display = 'none';
        host.appendChild(this.panelElement);
        this.comboService.panelElement = this.panelElement;
        if (this.isLookup()) {
            const { panelWidth, top, left } = this.getPanelSize();
            this.panelElement.style.width = `${panelWidth}px`;
            this.panelElement.style.height = `${this.panelHeight}px`;
            this.panelElement.style.top = `${top}px`;
            this.panelElement.style.left = `${left}px`;
        }
        else {
            this.panelElement.style.overflow = 'hidden';
            this.render.setStyle(this.panelElement, 'top', '0');
            this.render.setStyle(this.panelElement, 'left', '0');
        }
        /** @type {?} */
        const zindex = this.commonUtils.getFloatingLayerIndex();
        this.panelElement.style.zIndex = zindex;
        this.panelElement.classList.add('f-combo-lookup');
        this.panelElement.style.display = '';
    }
    /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    getPanelSize(target) {
        /** @type {?} */
        let panelHeight = this.panelHeight;
        this.innerPanelHeight = 202;
        if (this.autoWidth) {
            const { width } = this.getInputSizeInfo();
            this.panelWidth = width ? width : this.panelWidth;
        }
        // 如果taget高度存在 修改pnaelHeight 用于重定位弹出框位置
        if (target && target.tagName && panelHeight === 'auto') {
            /** @type {?} */
            const targetHeight = target.scrollHeight;
            /** @type {?} */
            const isNoRecord = !!target.querySelector('.f-table-norecords-content');
            // if (this.uri) {
            //     if (this.data && this.data.length) {
            //         if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
            //             this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
            //         } else {
            //             this.innerPanelHeight = targetHeight;
            //         }
            //     }
            // } else {
            //     this.innerPanelHeight = targetHeight && targetHeight > 10 && !isNoRecord ? Math.floor(targetHeight) : this.panelHeight;
            // }
            if (this.data && this.data.length) {
                if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
                    this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
                }
                else {
                    this.innerPanelHeight = targetHeight;
                }
            }
        }
        else if (target && target.tagName && panelHeight && !String(panelHeight).includes('px')) {
            panelHeight = panelHeight;
        }
        let { top, height, left, right } = this.el.nativeElement.getBoundingClientRect();
        height = height + 1;
        /** @type {?} */
        const bottom = window.innerHeight - height - top;
        if (panelHeight === 'auto') {
            if (this.maxHeight && this.maxHeight > this.innerPanelHeight) {
                panelHeight = this.innerPanelHeight;
            }
            else {
                panelHeight = this.maxHeight;
            }
        }
        /** @type {?} */
        const h = top > bottom ? top : bottom;
        /** @type {?} */
        const below = h === bottom;
        /** @type {?} */
        let fx = 'top';
        if (bottom > panelHeight) {
            top = top + height;
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                fx = 'bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        let panelWidth = this.panelWidth;
        if (window.innerWidth - left < this.panelWidth) {
            // left = right - 400;
            if (left + this.el.nativeElement.offsetWidth > this.panelWidth) {
                left = left + this.el.nativeElement.offsetWidth - this.panelWidth;
            }
            else {
                left = 0;
                panelWidth = window.innerWidth > this.panelWidth ? this.panelWidth : window.innerWidth - 10;
            }
        }
        return { panelWidth, panelHeight, top, left, below, fx };
    }
    /**
     * @private
     * @return {?}
     */
    compatibleScrollTop() {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollTop;
        }
        return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    }
    /**
     * @private
     * @return {?}
     */
    compatibleScrollLeft() {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollLeft;
        }
        return Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    }
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    updatePosition(target) {
        const { panelHeight, left, top, below, fx } = this.getPanelSize(target);
        if (!this.isLookup()) {
            /** @type {?} */
            let _top = top;
            /** @type {?} */
            let _height = panelHeight;
            if (top < 0) {
                _height = this.innerPanelHeight + top - 10;
                _top = 10;
            }
            _top += this.compatibleScrollTop();
            if (this.panelHeight !== 'auto') {
                if (this.maxHeight < _height) {
                    this.maxHeight = (/** @type {?} */ (_height));
                }
            }
            this.comPosition = {
                'left': left + this.compatibleScrollLeft(),
                'top': _top,
                'width': this.panelWidth,
                height: _height === 'auto' ? 'auto' : _height,
                'max-height': this.maxHeight
            };
        }
        else {
            this.comPosition = {
                'width': this.panelWidth,
                'height': panelHeight
            };
        }
        this.panelElement.style.overflow = '';
        target['style'].display = '';
        Object.keys(this.comPosition).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            let val = this.comPosition[n];
            if (val !== 'auto') {
                val += 'px';
            }
            this.render.setStyle(target, n, val);
        }));
        target.style.transformOrigin = '100% ' + fx;
        // target['style'].visibility = 'visible';
        return this.comPosition;
    }
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    contains(el, event) {
        return el.nativeElement.contains(event.target);
    }
    /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    filterSelections(value, data) {
        /** @type {?} */
        const selectedItems = String(value)
            .split(this.separator)
            .map((/**
         * @param {?} selectedItem
         * @return {?}
         */
        selectedItem => {
            /** @type {?} */
            const item = data.find((/**
             * @param {?} val
             * @return {?}
             */
            val => selectedItem == this.commonUtils.getValue(this.idField, val) + ''));
            return item ? this.commonUtils.getValue(this.textField, item) : '';
        }));
        return selectedItems.filter((/**
         * @param {?} el
         * @return {?}
         */
        el => el));
    }
    /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    updateSelections(selectedValues, data) {
        if (selectedValues === null || selectedValues === undefined) {
            this.selections = [];
        }
        if (typeof selectedValues === 'boolean' || typeof selectedValues === 'number') {
            selectedValues = '' + selectedValues;
        }
        /** @type {?} */
        const selectedItems = selectedValues ? String(selectedValues).split(this.separator).map((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (this.comboService.displayType === 'LOOKUPTREELIST') {
                return this.comboService.treeNodeToFlatData(data, val, this.idField);
            }
            return data.find((/**
             * @param {?} _data
             * @return {?}
             */
            _data => '' + val == this.commonUtils.getValue(this.idField, _data) + ''));
        })) : [];
        this.selections = selectedItems || [];
    }
    /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    getDisplayText(value, data) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            const selectedItems = this.filterSelections(value, data);
            if (!selectedItems || !selectedItems.length) {
                return value;
            }
            else {
                return selectedItems.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => !!v)).join(this.separator);
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        let data = [];
        if (this.data instanceof Array) {
            data = this.data;
        }
        else if (this.data) {
            data = ((/** @type {?} */ (this.data['items']))) instanceof Array ? this.data['items'] : data;
        }
        this.originalText = value;
        // 解决 uistate binding 中初次绑定时设置了 selectedValues 值 ，此处清空后导至下拉帮助获取选中记录不正确
        // this.selectedValues = '';
        if (!this.uri && data && data.length > 0) {
            if (this.isLookup()) {
                if (this.selectedValues === undefined || this.selectedValues === null) {
                    this.selectedValues = value;
                }
            }
            else {
                this.selectedValues = value;
            }
            this.updateSelections(this.selectedValues, data);
            this.displayText = this.getDisplayText(this.selectedValues, this.selections || []);
            if (this.isLookup()) {
                this.displayText = this.displayText === this.selectedValues ? value : this.displayText;
            }
            this.originalText = this.displayText;
        }
        else {
            // this.displayText = this.getDisplayText(value, this.selections);
            this.displayText = value;
            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse']) {
                this.comboService['__SELECTEDIDS__'] = this.selectedValues;
            }
            this.updateSelectedValues();
            if (this.selectedValues === undefined || this.selectedValues === null) {
                this.selectedValues = value;
            }
            if (this.viewType === 'tag' && this.multiSelect && (this.displayText !== null && this.displayText !== undefined)) {
                /** @type {?} */
                const txtArr = this.displayText.split(this.separator).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                this.selections = txtArr.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @param {?} i
                 * @return {?}
                 */
                (r, c, i) => {
                    r.push({ [this.textField]: c });
                    return r;
                }), []);
            }
        }
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    filterDataOnServer(searchValue, searchField) {
    }
}
/** @nocollapse */
BaseComboComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
BaseComboComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    placeholder: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelHeight: [{ type: Input }],
    autoWidth: [{ type: Input }],
    enableClear: [{ type: Input }],
    mapFields: [{ type: Input }],
    forcePlaceholder: [{ type: Input }],
    nosearch: [{ type: Input }],
    maxLength: [{ type: Input }],
    enableTitle: [{ type: Input }],
    viewType: [{ type: Input }],
    context: [{ type: Input }],
    mappingField: [{ type: Input }],
    data: [{ type: Input }],
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    multiSelect: [{ type: Input }],
    uri: [{ type: Input }],
    selectedValues: [{ type: Input }],
    displayText: [{ type: Input }],
    maxHeight: [{ type: Input }],
    enableCancelSelected: [{ type: Input }],
    remoteSearch: [{ type: Input }],
    beforeShow: [{ type: Input }],
    beforeHide: [{ type: Input }],
    hidePanelOnClear: [{ type: Input }],
    useValue: [{ type: Input }],
    separator: [{ type: Input }],
    treeToList: [{ type: Input }],
    navTreeToList: [{ type: Input }],
    emptyMsg: [{ type: Input }],
    showPanel: [{ type: Output }],
    hidePanel: [{ type: Output }],
    clear: [{ type: Output }],
    valueChange: [{ type: Output }],
    selectChange: [{ type: Output }],
    cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
    input: [{ type: ViewChild, args: ['input',] }],
    input2: [{ type: ViewChild, args: ['input2',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => ComboListComponent)),
    multi: true
};
class ComboListComponent extends BaseComboComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        super(el, cdr, document, render, comboService, injector);
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        /**
         * 数据中标识禁用的字段名称，默认为 disabled
         */
        this.disabledField = 'disabled';
        /**
         * 列表中是否显示已禁用的项，默认 true
         */
        this.showDisabledItem = true;
        /**
         * 显示面板方式： click | focus, 默认： click
         */
        this.showPanelType = 'click';
        this.cls = true;
        this.filterData = [];
    }
    /**
     * @return {?}
     */
    get clsTag() {
        return this.viewType === 'tag';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (this.multiSelect) {
            this.enableCancelSelected = this.multiSelect;
        }
        this.remoteSearch = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /**
         * 如果直接绑定一个数组作为列表数据并且 data 是异步数据，需要此方法，同步displayText与selectedValues
         */
        if (changes.data && !changes.data.firstChange && !this.uri && !this.nosearch) {
            /** @type {?} */
            const datas = changes.data.currentValue;
            /** @type {?} */
            let val = this.ngControl ? this.ngControl.value || this.selectedValues : this.selectedValues;
            if (this.selectedValues === undefined || this.selectedValues === null) {
                val = this.displayText;
            }
            if (val !== undefined && val !== null && datas && datas.length > 0) {
                /** @type {?} */
                const textArr = this.filterSelections(val, this.data);
                this.displayText = textArr.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => !!v)).join(this.separator);
                this.updateSelections(val, this.data);
                this.comboService.selections$.next({ action: 'initData' });
            }
            else {
                this.selections = [];
                this.displayText = '';
            }
        }
        // if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
        //     this.enableCancelSelected = this.multiSelect;
        // }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    registerKeyboardEvent($event) {
        if (this.multiSelect || (this.readonly || this.disabled)) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown' ||
            (!this.editable && !this.readonly && !this.disabled && $event.code === 'Space')) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        const selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            this.comboService.selectItem(data[index], index, false);
            /** @type {?} */
            const params = { data: data[index], index };
            if (this.isOpen) {
                this.scrollToCurrentItem(index);
            }
            this.updateSelectValues(params);
        });
        /** @type {?} */
        let data = this.filterData && this.filterData.length ? this.filterData : this.data;
        if (!this['_cmbPanel']) {
            data = this.data;
        }
        /** @type {?} */
        let _data = [];
        if (this.disabledField) {
            _data = data.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !this.commonUtils.getValue(this.disabledField, n)));
        }
        /** @type {?} */
        const getrealIndex = (/**
         * @param {?} idx
         * @param {?} nextIdx
         * @param {?=} isNext
         * @return {?}
         */
        (idx, nextIdx, isNext = true) => {
            if (data[nextIdx]) {
                // 判断下一项是否禁用
                /** @type {?} */
                const isDisabled = this.commonUtils.getValue(this.disabledField, data[nextIdx]);
                if (isDisabled) {
                    /** @type {?} */
                    const _idx = _data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, data[idx])));
                    if (isNext) {
                        nextIdx = _idx + 1;
                    }
                    else {
                        nextIdx = _idx - 1;
                    }
                    if (_data[nextIdx]) {
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, _data[nextIdx])));
                    }
                    else {
                        /** @type {?} */
                        const newIdex = nextIdx > 0 ? 0 : _data.length - 1;
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, _data[newIdex]) && !this.commonUtils.getValue(this.disabledField, n)));
                    }
                }
                return nextIdx;
            }
        });
        /** @type {?} */
        const idx = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => this.commonUtils.getValue(this.idField, n) == this.selectedValues));
        if ($event.code === 'ArrowUp') { // up
            // up
            /** @type {?} */
            let prevIdx = idx - 1;
            if (prevIdx < 0) {
                prevIdx = data.length - 1;
            }
            if (this.disabledField) {
                prevIdx = getrealIndex(idx, prevIdx, false);
            }
            selectItem(prevIdx);
        }
        if ($event.code === 'ArrowDown' || ($event.code === 'Space' && !this.editable)) { // down
            // down
            /** @type {?} */
            let nextIdx = idx + 1;
            if (nextIdx >= data.length) {
                nextIdx = 0;
            }
            if (this.disabledField) {
                nextIdx = getrealIndex(idx, nextIdx);
            }
            selectItem(nextIdx);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    escHandlerEvent($event) {
        if (this.isOpen) {
            this.hide(false);
        }
    }
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    onSelectionsChange(v) {
        if (this.uri) {
            if (this.selections && this.selections.length) {
                this.selectedValues = this.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField])).join(this.separator);
            }
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    updateSelectValues(item, emitEvent = true) {
        const { data, index } = Object.assign({}, item);
        this.comboService.selectItem(data, index);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        if (!this.multiSelect) {
            this.selectedValues = data[this.idField];
        }
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        if (emitEvent) {
            this.selectChange.emit({ data, index, instance: this, selections: this.selections });
            this.cdr.markForCheck();
            this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    scrollToCurrentItem(index) {
        if (this.dataListRef && this.dataListRef.el) {
            /** @type {?} */
            const ulEl = this.dataListRef.el.nativeElement.querySelector('ul.list-group');
            if (ulEl && ulEl.children && ulEl.children[index]) {
                ulEl.children[index].scrollIntoView({ block: 'nearest' });
            }
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) {
        this.updateSelectValues(item, true);
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUnSelected(value) {
        const { data } = Object.assign({}, value);
        this.comboService.unSelectItem(data);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        // if (!this.multiSelect) {
        //     this.selectedValues = data[this.idField];
        // }
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.cdr.markForCheck();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnter(event) {
        if (this.isOpen) {
            this.hide();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeyup($event) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydown($event) {
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (this.showPanelType === 'focus') {
            this.show();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    removeSelectItem($event, item) {
        if ($event) {
            $event.stopPropagation();
        }
        this.comboService.unSelectItem(item);
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.cdr.detectChanges();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @protected
     * @return {?}
     */
    initDatasChangeAction() {
        this.comboService.data$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.filterData = data;
            if (data && data.length && !this.editable) {
                if (typeof this.selectedValues === 'boolean') {
                    return;
                }
                if (this.selectedValues) {
                    /** @type {?} */
                    let idx = -1;
                    /** @type {?} */
                    let items = [];
                    if (typeof this.selectedValues === 'number' || typeof this.selectedValues === 'boolean') {
                        items = data.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        (n) => {
                            return n[this.idField] === this.selectedValues || n[this.textField] === this.selectedValues;
                        }));
                    }
                    else {
                        items = this.selectedValues.split(this.separator).map((/**
                         * @param {?} val
                         * @return {?}
                         */
                        val => {
                            return data.find((/**
                             * @param {?} n
                             * @param {?} i
                             * @return {?}
                             */
                            (n, i) => {
                                return n[this.idField] === val || n[this.textField] === val;
                            }));
                        }));
                    }
                    if (!this.selections || !this.selections.length) {
                        if (items && items.length) {
                            this.selectedValues = items.map((/**
                             * @param {?} i
                             * @return {?}
                             */
                            i => {
                                return this.commonUtils.getValue(this.idField, i);
                            })).join(this.separator);
                            this.selections = items;
                        }
                    }
                    idx = data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, this.selections[0]) ||
                            this.commonUtils.getValue(this.textField, n) === this.commonUtils.getValue(this.textField, this.selections[0]);
                    }));
                    if (idx > -1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            this.scrollToCurrentItem(idx);
                        }), 300);
                    }
                }
            }
        }));
    }
}
ComboListComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-combo-list',
                template: "<input-group *ngIf=\"!viewType || viewType === 'text'\"\r\n    #input\r\n    [attr.title]=\"enableTitle? displayText: ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"enableClear\"\r\n    [maxLength]=\"maxLength\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (enterHandle)=\"onEnter($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    style=\"display: block;\">\r\n</input-group>\r\n\r\n<div #input2 class=\"f-cmp-inputgroup\" *ngIf=\"viewType === 'tag'\" (click)=\"onClick($event)\" [attr.title]=\"displayText\">\r\n    <div class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\">\r\n        <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\">\r\n            <div class=\"multi--content\">\r\n                <span class=\"multi--item\" *ngFor=\"let it of selections\" >\r\n                    {{it[textField]}}\r\n                    <i class=\"f-icon multi--close\" *ngIf=\"!readonly && !disabled \" (click)=\"removeSelectItem($event, it)\"></i>\r\n                </span>\r\n            </div>\r\n            <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n                <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group-append\" >\r\n            <span class=\"input-group-text input-group-clear ng-star-inserted\" style=\"display: none;\">\r\n                <i class=\"f-icon modal_close\"></i>\r\n            </span>\r\n            <span class=\"input-group-text ng-star-inserted\" (click)=\"onClick($event)\">\r\n                <span class=\"f-icon f-icon-arrow-60-down\"></span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\" style=\"z-index: 99999;transition: transform 0.12s ease;\"  #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [itemHeight]=\"itemHeight\"\r\n        [height]=\"panelHeight\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [idField]=\"idField\"\r\n        [multiSelect]=\"multiSelect\"\r\n        [selectedValues]=\"selectedValuesStr\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        [enableCancelSelected]=\"enableCancelSelected\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n        [separator]=\"separator\"\r\n        style=\"position: relative;\"\r\n        [emptyMessage]=\"emptyMsg\"\r\n        [disabledField]=\"disabledField\"\r\n        [showDisabledItem]=\"showDisabledItem\"\r\n    >\r\n        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>\r\n        </ng-template>\r\n    </farris-datalist>\r\n</div>\r\n",
                // styleUrls: ['./combo-list.component.scss'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService]
            }] }
];
/** @nocollapse */
ComboListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
ComboListComponent.propDecorators = {
    itemTemplate: [{ type: Input }],
    disabledField: [{ type: Input }],
    showDisabledItem: [{ type: Input }],
    showPanelType: [{ type: Input }],
    dataListRef: [{ type: ViewChild, args: ['dl',] }],
    itemHeight: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class.f-combo-list',] }],
    clsTag: [{ type: HostBinding, args: ['class.f-combo-list--tag',] }],
    registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    escHandlerEvent: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboListModule {
}
ComboListModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ComboListComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    InputGroupModule,
                    LoadingModule.forRoot(),
                    DatalistModule,
                    NotifyModule.forRoot()
                ],
                exports: [ComboListComponent],
                providers: [ComboLocaleService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ComboService, INPUT_COMBO_VALUE_ACCESSOR, ComboListComponent, ComboListModule, BaseComboComponent, ComboServerSideToken, ComboLocaleService };

//# sourceMappingURL=farris-ui-combo-list.js.map