import { LookupUtils, ServerSideToken } from '@farris/ui-lookup';
import { __extends, __assign, __values } from 'tslib';
import { BehaviorSubject, Subject, of, interval, fromEvent } from 'rxjs';
import { debounceTime, map, switchMap, catchError, tap, delay, takeUntil, filter, skip, throttle, take, throwIfEmpty } from 'rxjs/operators';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils, reqAnimFrame } from '@farris/ui-common';
import { EventManager } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { InjectionToken, Injectable, Injector, Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, NgZone, Component, forwardRef, ChangeDetectionStrategy, ViewEncapsulation, HostBinding, HostListener, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { InputGroupModule } from '@farris/ui-input-group';
import { DatalistModule } from '@farris/ui-datalist';
import { LoadingService, LoadingModule } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ComboServerSideToken = new InjectionToken('Combo Grid HTTP service');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComboService = /** @class */ (function () {
    function ComboService(http, loadingService, injector) {
        var _this = this;
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.selections$ = new Subject();
        this.isOpen$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject('');
        this.serachValue$ = new Subject();
        this.loadSuccess$ = new Subject();
        this.treeInfo$ = new BehaviorSubject(null);
        this.displayType = 'LIST';
        this.separator = ',';
        this.columns = [];
        this.remoteSearch = true;
        this.panelElement = null;
        this.treeSearchHandler = null;
        // 树帮助加载设置
        this.treeloadconfig = null;
        this._data = [];
        this.serachValue$.pipe(debounceTime(300)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!_this.remoteSearch) {
                _this.filterData(value, _this.textField);
            }
            else {
                _this.filterDataOnServer(value);
            }
        }));
    }
    Object.defineProperty(ComboService.prototype, "uri", {
        get: /**
         * @return {?}
         */
        function () {
            return this._uri;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._uri = val;
            this.data$.next([]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboService.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value || [];
            if (Array.isArray(value)) {
                this.data$.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboService.prototype.injectService = /**
     * @return {?}
     */
    function () {
        if (this.injector && !this.comboHttp) {
            this.lookupUtils = this.injector.get(LookupUtils, null);
            if (this.displayType.indexOf('LOOKUP') > -1) {
                this.comboHttp = this.injector.get(ServerSideToken, null);
            }
            else {
                this.comboHttp = this.injector.get(ComboServerSideToken, null);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboService.prototype.toBoolean = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value != null && "" + value !== 'false';
    };
    /**
     * @param {?} data
     * @param {?=} index
     * @param {?=} emitEvent
     * @return {?}
     */
    ComboService.prototype.selectItem = /**
     * @param {?} data
     * @param {?=} index
     * @param {?=} emitEvent
     * @return {?}
     */
    function (data, index, emitEvent) {
        var _this = this;
        if (emitEvent === void 0) { emitEvent = true; }
        if (!this.multiSelect) {
            this.selections = [];
        }
        if (Array.isArray(data)) {
            data.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (_this.selections.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) { return s[_this.idField] === n[_this.idField]; })) === -1) {
                    _this.selections.push(n);
                }
            }));
        }
        else {
            if (this.selections.findIndex((/**
             * @param {?} s
             * @return {?}
             */
            function (s) { return s[_this.idField] === data[_this.idField]; })) === -1) {
                this.selections.push(data);
            }
        }
        if (emitEvent) {
            this.selections$.next({ action: 'clicked' });
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.unSelectItem = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.selections = this.selections.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            // return item[this.idField] !== data[this.idField];
            return JSON.stringify(item) !== JSON.stringify(data);
        }));
        this.selections$.next({ action: 'clicked' });
    };
    /**
     * @param {?} datas
     * @return {?}
     */
    ComboService.prototype.selectAll = /**
     * @param {?} datas
     * @return {?}
     */
    function (datas) {
        var _this = this;
        (datas || []).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!_this.selections.find((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i[_this.idField] === n[_this.idField]; }))) {
                _this.selections.push(n);
            }
        }));
        // this.selections = datas;
        this.selections$.next({ action: 'clicked' });
    };
    /**
     * @param {?} datas
     * @return {?}
     */
    ComboService.prototype.unSelectAll = /**
     * @param {?} datas
     * @return {?}
     */
    function (datas) {
        var _this = this;
        // this.selections = [];
        datas = datas || [];
        this.selections = (this.selections || []).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return datas.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i[_this.idField] === n[_this.idField]; })) === -1; }));
        this.selections$.next({ action: 'clicked' });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ComboService.prototype.isSelect = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (this.selections && this.selections.length) {
            return this.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item[_this.idField] === id; })) !== undefined;
        }
        return false;
    };
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} callback
     * @return {?}
     */
    ComboService.prototype.loadData = /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} callback
     * @return {?}
     */
    function (data, selectValues, callback) {
        if (selectValues === void 0) { selectValues = ''; }
        if (data) {
            if (selectValues === null || selectValues === undefined) {
                selectValues = '';
            }
            if (typeof selectValues === 'boolean') {
                selectValues = '' + selectValues;
            }
            // this.data$.next(data);
            if (selectValues) {
                /** @type {?} */
                var vals = [(selectValues + '')];
                if (this.multiSelect) {
                    vals = (selectValues + '').split(this.separator);
                }
                /** @type {?} */
                var selectedItems = vals.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return callback(data, val);
                }));
                selectedItems = selectedItems.filter((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return el; }));
                if ((!this.selections || !this.selections.length) && selectedItems.length) {
                    this.selections = selectedItems;
                }
            }
            else {
                this.selections = [];
            }
            this.selections$.next({ action: 'initData' });
        }
    };
    /**
     * @param {?} params
     * @return {?}
     */
    ComboService.prototype.filterDataOnServer = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        this.getData(params).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            _this.closeLoading();
            _this.loadingService.clearAll();
            if (r && r.items) {
                switch (_this.displayType) {
                    case 'LOOKUPLIST': {
                        _this.loadLookUpDataTable(r, true);
                        break;
                    }
                    case 'LOOKUPTREELIST': {
                        _this.loadLookUpDataTree(r);
                        break;
                    }
                }
            }
            else {
                _this.data$.next([]);
            }
        }));
    };
    // 客户端过滤
    // 客户端过滤
    /**
     * @param {?} val
     * @param {?=} field
     * @return {?}
     */
    ComboService.prototype.filterData = 
    // 客户端过滤
    /**
     * @param {?} val
     * @param {?=} field
     * @return {?}
     */
    function (val, field) {
        var _this = this;
        if (field === void 0) { field = 'text'; }
        if (val) {
            /** @type {?} */
            var data = [];
            if (this.displayType === 'LOOKUPLIST' || this.displayType === 'LIST') {
                data = this.data.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var itemval = _this.getValueByObj(field, item);
                    if (itemval != '' && itemval !== null && itemval !== undefined) {
                        itemval = String(itemval).toLowerCase();
                    }
                    return itemval.indexOf(val.toLowerCase()) > -1;
                }));
            }
            // const data = this.data
            //     ? this.data.filter(item => {
            //         if (this.getValueByObj(filed, item)) {
            //             return String(this.getValueByObj(filed, item)).indexOf(val) > -1;
            //         } else if (item.data && this.getValueByObj(filed, item.data)) {
            //             return String(this.getValueByObj(filed, item.data)).indexOf(val) > -1;
            //         }
            //     })
            //     : [];
            this.data$.next(data);
        }
        else {
            this.data$.next(this.data);
        }
    };
    /**
     * @return {?}
     */
    ComboService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        return this.selections;
    };
    /**
     * @return {?}
     */
    ComboService.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.selections = [];
    };
    /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    ComboService.prototype.getValue = /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    function (prop, selections) {
        var _this = this;
        selections = selections ? selections : this.selections;
        if (selections && selections.length) {
            /** @type {?} */
            var tmp = selections.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return _this.getValueByObj(prop, item);
            }));
            if (tmp && (tmp.length > 1 || tmp.length === 0)) {
                return tmp.join(this.separator);
            }
            else {
                return tmp[0];
            }
        }
        return '';
    };
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.getValueByObj = /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        var resultVal = '';
        if (field.indexOf('.') === -1) {
            if (data.hasOwnProperty(field)) {
                resultVal = data[field];
            }
            else {
                // console.log(`%cError: The %c"${field}"%c is not in `,
                //         'color: #bb0000;font-weight: bold;', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', data);
                resultVal = null;
            }
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    // console.log(`%cError: The %c"${key}"%c is not in  `,
                    // 'color: #bb0000;font-weight: bold', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', obj);
                    return null;
                }
            }), data);
        }
        return resultVal;
    };
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} selectedIds
     * @return {?}
     */
    ComboService.prototype.initData = /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} selectedIds
     * @return {?}
     */
    function (params, method, selectedIds) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'get'; }
        if (selectedIds === void 0) { selectedIds = ''; }
        switch (this.displayType) {
            case 'TreeList':
            case 'LIST': {
                if (params.data) {
                    params = params.data;
                }
                this.getData(params, method).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var __data = d;
                    if (!_this.uri) {
                        __data = _this.data;
                    }
                    if (_this.displayType === 'TreeList') {
                        _this.loadDataTree(__data);
                    }
                    else {
                        _this.loadDataTable(__data);
                    }
                    _this.loadSuccess$.next(true);
                }));
                break;
            }
            case 'LOOKUPLIST':
            case 'LOOKUPTREELIST': {
                // TFS 466104
                if (!selectedIds) {
                    this.selections = [];
                    this.selectedValues = '';
                }
                this.loadLookupData(params, selectedIds, 'get', this.displayType === 'LOOKUPTREELIST');
                break;
            }
        }
        return this.loadSuccess$;
    };
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    /**
     * @private
     * @param {?} treeNodes
     * @param {?=} arr
     * @return {?}
     */
    ComboService.prototype.treeNodesToFlatData = 
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    /**
     * @private
     * @param {?} treeNodes
     * @param {?=} arr
     * @return {?}
     */
    function (treeNodes, arr) {
        var _this = this;
        if (arr === void 0) { arr = []; }
        treeNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!n['addtional']) {
                arr.push(n.data);
            }
            if (n.children && n.children.length) {
                _this.treeNodesToFlatData(n.children, arr);
            }
        }));
    };
    /**
     * @private
     * @param {?} params
     * @param {?} selectedIds
     * @param {?=} method
     * @param {?=} isTree
     * @return {?}
     */
    ComboService.prototype.loadLookupData = /**
     * @private
     * @param {?} params
     * @param {?} selectedIds
     * @param {?=} method
     * @param {?=} isTree
     * @return {?}
     */
    function (params, selectedIds, method, isTree) {
        var _this = this;
        if (method === void 0) { method = 'get'; }
        if (isTree === void 0) { isTree = false; }
        var data = params.data, enableFullTree = params.enableFullTree, loadTreeDataType = params.loadTreeDataType, searchValue = params.searchValue;
        if (data) {
            params = { customData: data };
        }
        if (this.displayType === 'LOOKUPTREELIST' && !this['treeToList']) {
            params.enableFullTree = enableFullTree;
            // params.loadTreeDataType = 'loadall'; 
            params.searchValue = { "category": "all" };
            this.treeloadconfig = { enableFullTree: enableFullTree, loadTreeDataType: loadTreeDataType };
            if (!isNaN(Number(params.expandLevel))) {
                // 前端 -1 不展开   0 全展开
                // 后端  0 不展开  -1 全展开
                if (params.expandLevel) {
                    if (params.expandLevel === -1) {
                        params.expandLevel = 0;
                    }
                }
                else {
                    params.expandLevel = -1;
                }
                params.searchValue['layerNum'] = params.expandLevel;
            }
            params.searchValue = JSON.stringify(params.searchValue);
        }
        if (searchValue) {
            params.searchValue = searchValue;
        }
        if (this['treeToList']) {
            isTree = false;
            this.displayType = 'LOOKUPLIST';
        }
        this.getData(params, method).pipe(switchMap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (selectedIds) {
                return _this.getSelectedItems(selectedIds).pipe(map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (d && d.items) {
                        // data.selectedItems = isTree ?  d.items.map(n => n.data) : d.items;
                        if (isTree) {
                            /** @type {?} */
                            var arr = [];
                            _this.treeNodesToFlatData(d.items, arr);
                            data.selectedItems = arr;
                        }
                        else {
                            data.selectedItems = d.items;
                        }
                    }
                    else {
                        if (Array.isArray(d)) {
                            data.selectedItems = (selectedIds + '').split(_this.separator).map((/**
                             * @param {?} val
                             * @return {?}
                             */
                            function (val) {
                                if (isTree) {
                                    return _this.treeNodeToFlatData(d, val, _this.idField);
                                }
                                else {
                                    return d.find((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    function (n) { return n[_this.idField] + '' == val || n[_this.textField] == val; }));
                                }
                            })).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n != undefined && n != null; }));
                        }
                    }
                    return data;
                })), catchError((/**
                 * @return {?}
                 */
                function () {
                    return of(data);
                })));
            }
            else {
                data.selectedItems = [];
            }
            return of(data);
        }))).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.loadingService.clearAll();
            if (data) {
                if (isTree) {
                    _this.loadLookUpDataTree(data);
                }
                else {
                    _this.loadLookUpDataTable(data);
                }
            }
            _this.loadSuccess$.next(true);
        }));
    };
    /**
     * @param {?} selIds
     * @return {?}
     */
    ComboService.prototype.getSelectedItems = /**
     * @param {?} selIds
     * @return {?}
     */
    function (selIds) {
        /** @type {?} */
        var searchParam = {
            category: 'fav', favoriteIds: ('' + selIds).split(this.separator)
        };
        /** @type {?} */
        var p = { searchValue: JSON.stringify(searchParam), enableFullTree: false, loadTreeDataType: 'default' };
        return this.getData(p);
    };
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} loadChild
     * @return {?}
     */
    ComboService.prototype.getData = /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} loadChild
     * @return {?}
     */
    function (params, method, loadChild) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'get'; }
        if (loadChild === void 0) { loadChild = false; }
        if (this.uri) {
            // this.data = []
            // tfs 470519
            if (this.data && this.data.length && !loadChild) {
                this.data = [];
            }
            params['treeToList'] = this['treeToList'];
            params['navTreeToList'] = this['navTreeToList'];
            if (this['treeToList']) {
                this.displayType = 'LOOKUPLIST';
            }
            this.showLoading();
            if (this.comboHttp) {
                if (this.context) {
                    this.comboHttp.context = this.context;
                }
                return this.comboHttp.getData(this.uri, params, method).pipe(tap((/**
                 * @return {?}
                 */
                function () {
                    _this.closeLoading();
                })));
            }
            else {
                return this.http.request(method, this.uri, params).pipe(tap((/**
                 * @return {?}
                 */
                function () {
                    _this.closeLoading();
                })));
            }
        }
        else {
            if (this.data) {
                return of(this.data).pipe(delay(10));
            }
            else {
                return of([]).pipe(delay(10));
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.loadDataTable = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            return dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[_this.idField] + '' == val || d[_this.textField] == val; }));
        }));
        this.closeLoading();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.loadDataTree = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            return eachData(dataArr, val, _this.idField);
            /**
             * @param {?} paramData
             * @param {?} paramVal
             * @param {?} idField
             * @return {?}
             */
            function eachData(paramData, paramVal, idField) {
                /** @type {?} */
                var rtnData = '';
                paramData.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (d.data[idField] == paramVal) {
                        rtnData = d.data;
                        return true;
                    }
                    else if (d.children && d.children.length) {
                        rtnData = eachData(d.children, paramVal, idField);
                    }
                    else {
                        return false;
                    }
                }));
                return rtnData;
            }
        }));
        this.closeLoading();
    };
    /**
     * @param {?} resData
     * @param {?=} sortable
     * @return {?}
     */
    ComboService.prototype.loadLookUpDataTable = /**
     * @param {?} resData
     * @param {?=} sortable
     * @return {?}
     */
    function (resData, sortable) {
        var _this = this;
        if (sortable === void 0) { sortable = false; }
        this.closeLoading();
        if (typeof resData === 'object') {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            if (!sortable && resData.columns) {
                this.columns = resData.columns;
            }
            if (resData.pageInfo) {
                this.pageInfo = resData.pageInfo;
                this.pageInfo.total = resData.total ? resData.total : 0;
            }
            if (resData.items) {
                this.data = resData.items;
            }
        }
        if (resData && resData.selectedItems) {
            this.selections = resData.selectedItems || [];
        }
        if (this.selections) {
            /** @type {?} */
            var ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField]; })).join(this.separator);
            if (ids !== this['__SELECTEDIDS__']) {
                // this.selectedValues = ids;
                this['__SELECTEDIDS__'] = ids;
            }
        }
        this.loadData(this.data, this['__SELECTEDIDS__'], (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            /** @type {?} */
            var isMaped = dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[_this.idField] + '' == val; }));
            if (_this.selections) {
                isMaped = !isMaped ? _this.selections.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d[_this.idField] + '' == val; })) : isMaped;
            }
            return isMaped;
        }));
    };
    /**
     * @param {?} nodes
     * @param {?=} allData
     * @return {?}
     */
    ComboService.prototype.checkNodeCanBeSelect = /**
     * @param {?} nodes
     * @param {?=} allData
     * @return {?}
     */
    function (nodes, allData) {
        var _this = this;
        if (allData === void 0) { allData = true; }
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.hasOwnProperty('addtional')) {
                    node.selectable = !node['addtional'];
                }
                if (node.children && node.children.length) {
                    _this.checkNodeCanBeSelect(node.children, allData);
                }
                else {
                    if (allData) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    };
    /**
     * @param {?} resData
     * @return {?}
     */
    ComboService.prototype.loadLookUpDataTree = /**
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        var _this = this;
        this.closeLoading();
        if (!resData) {
            return;
        }
        if (resData instanceof Array) {
            this.data = resData;
            if (resData['selectedItems']) {
                this.selections = resData['selectedItems'] || [];
            }
        }
        else {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            this.columns = resData.columns;
            this.treeInfo = resData.treeInfo;
            this.treeInfo$.next(this.treeInfo);
            if (resData.selectedItems) {
                this.selections = resData.selectedItems || [];
            }
            if (this.treeInfo && !this.treeInfo['treeDataIsInit']) {
                if (this.treeInfo.layerType.toLowerCase() === 'pathcode') {
                    this.data = this.lookupUtils.makeTree(resData.items, this.treeInfo);
                }
                else {
                    this.data = this.lookupUtils.makeTreeWithParentID(resData.items, '', this.treeInfo.dataField + "." + this.treeInfo.parentField, this.idField);
                }
            }
            else if (resData.items) {
                // this.data = resData.items;
                /** @type {?} */
                var isLoadAllTreeData = (/**
                 * @return {?}
                 */
                function () {
                    if (_this.treeloadconfig.loadTreeDataType === 'default') {
                        return _this.treeInfo.loadDataType === 'all';
                    }
                    else {
                        return _this.treeloadconfig.loadTreeDataType === 'loadall';
                    }
                });
                this.data = this.checkNodeCanBeSelect(resData.items, isLoadAllTreeData());
            }
        }
        if (this.selections) {
            /** @type {?} */
            var ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField]; })).join(this.separator);
            if (ids !== this['__SELECTEDIDS__']) {
                this['__SELECTEDIDS__'] = ids;
            }
        }
        this.loadData(this.data, this['__SELECTEDIDS__'], (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            return _this.treeNodeToFlatData(dataArr, val, _this.idField);
        }));
    };
    /**
     * @param {?} paramData
     * @param {?} paramVal
     * @param {?} idField
     * @return {?}
     */
    ComboService.prototype.treeNodeToFlatData = /**
     * @param {?} paramData
     * @param {?} paramVal
     * @param {?} idField
     * @return {?}
     */
    function (paramData, paramVal, idField) {
        var _this = this;
        /** @type {?} */
        var rtnData = '';
        paramData.find((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if ((d.data && d.data[idField] == paramVal) || d[idField] == paramVal) {
                rtnData = d.data;
                return true;
            }
            else if (d.children && d.children.length) {
                rtnData = _this.treeNodeToFlatData(d.children, paramVal, idField);
                return rtnData ? true : false;
            }
            else {
                return false;
            }
        }));
        return rtnData;
    };
    /**
     * @private
     * @return {?}
     */
    ComboService.prototype.showLoading = /**
     * @private
     * @return {?}
     */
    function () {
        this.loading = this.loadingService.show({ container: this.panelElement, delay: 100 });
    };
    /**
     * @return {?}
     */
    ComboService.prototype.closeLoading = /**
     * @return {?}
     */
    function () {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
    };
    ComboService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComboService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LoadingService },
        { type: Injector }
    ]; };
    return ComboService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComboLocaleService = /** @class */ (function () {
    function ComboLocaleService(localeService) {
        this.localeService = localeService;
        this.localeConfig = {
            'ZH_CN': {
                placeholder: '请选择'
            },
            'EN_US': {
                placeholder: 'Please Select'
            }
        };
    }
    /**
     * @return {?}
     */
    ComboLocaleService.prototype.getLocaleConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var locale = this.localeService.localeId;
        this.localeConfig = this.localeService.getResources(locale + ".combo");
        return this.localeConfig;
        // if (locale && this.localeConfig[locale]) {
        //     return this.localeConfig[locale];
        // } else {
        //     return this.localeConfig.ZH_CN;
        // }
    };
    ComboLocaleService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComboLocaleService.ctorParameters = function () { return [
        { type: LocaleService }
    ]; };
    return ComboLocaleService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var nextUniqueId = 0;
var BaseComboComponent = /** @class */ (function () {
    function BaseComboComponent(el, cdr, document, render, comboService, injector) {
        var _this = this;
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '';
        this.panelWidth = 300;
        this.panelHeight = 'auto';
        /**
         * 下拉面板宽度与输入框宽度保持一至， 默认为 true
         */
        this.autoWidth = true;
        this.enableClear = true;
        /**
         * 禁用只读时显示 placeholder
         */
        this.forcePlaceholder = false;
        /**
         * 任意输入 20210202
         */
        this.nosearch = false;
        // 鼠标滑过显示文本内容
        this.enableTitle = true;
        /**
         * 展示类型： text文本，tag标签。 默认 text
         */
        this.viewType = 'text';
        this.displayText = '';
        this.maxHeight = 200;
        this.enableCancelSelected = false;
        // 如果面板已打开， 点击清空按钮时是否关闭面板。true: 关闭； false: 不关闭；
        this.hidePanelOnClear = false;
        /**
         * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
         */
        this.useValue = false;
        /**
         * 分隔符
         */
        this.separator = ',';
        this.treeToList = false;
        this.navTreeToList = false;
        this.emptyMsg = '暂无数据';
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        this.isOpen = false;
        this.comPosition = {};
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this._cmbPanel = null;
        this._comboPanelCreated$ = new Subject();
        // private _hasPosited = false;
        // private _container: Element;
        this.willHide$ = new Subject();
        this.panelListener = null;
        this.ngZone = null;
        this.mouseWheelEvent = null;
        this.textChangeSubject = new Subject();
        this.initdataSubscription = null;
        this.customData = null;
        this.originalText = '';
        this.isTextChange = false;
        this.treeClientSearch = new Subject();
        this.ro = null;
        this.onChange = (/**
         * @return {?}
         */
        function () { return null; });
        this.onTouched = (/**
         * @return {?}
         */
        function () { return null; });
        this.initToggleAction();
        this.initSelectionsChangeAction();
        this.initDatasChangeAction();
        this.commonUtils = this.injector.get(CommonUtils, null);
        this.willHide$.pipe(takeUntil(this.destroy$), debounceTime(110)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.nosearch && _this.displayText !== _this.originalText) {
                _this.displayText = _this.originalText;
                if (_this.isLookup()) {
                    _this.onChange(_this.displayText);
                }
                else {
                    /** @type {?} */
                    var _displayText = _this.comboService.getValue(_this.textField);
                    _this.onValueChange({ text: _displayText, value: _this.selectedValues, selections: _this.selections });
                }
            }
            _this['_searchKeyWords'] = '';
            _this.onTouched();
            _this.hidePanel.emit(_this);
        }));
        this.ngZone = this.injector.get(NgZone);
        this.eventMgr = this.injector.get(EventManager);
        this.emitTextChange();
        this.notifySer = this.injector.get(NotifyService, null);
    }
    Object.defineProperty(BaseComboComponent.prototype, "context", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.comboService.context = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "mappingField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mapFields;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.mapFields = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.data = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "idField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.idField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "valueField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.valueField ? this.comboService.valueField : this.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.valueField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "textField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.textField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.textField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "multiSelect", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.multiSelect;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.multiSelect = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "uri", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.uri;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.uri = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selectedValues", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.selectedValues;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.selectedValues = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selectedValuesStr", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.selectedValues === null || this.selectedValues === undefined) {
                this.selectedValues = '';
            }
            return (this.selectedValues) + '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "remoteSearch", {
        /** 远端过滤 */
        get: /**
         * 远端过滤
         * @return {?}
         */
        function () {
            return this.comboService.remoteSearch;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.remoteSearch = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "cmbPanel", {
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            if (cmp) {
                this._cmbPanel = cmp;
                this.ro.observe(cmp.nativeElement);
                this._comboPanelCreated$.next(cmp);
            }
            else {
                this._cmbPanel = null;
                // this.ro.unobserve(this.el.nativeElement);
                if (this.ro) {
                    this.ro.disconnect();
                }
                this._comboPanelCreated$.next(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.comboService.selections) {
                return this.comboService.selections.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== null && n !== undefined; }));
            }
            return [];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.comboService.selections = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.localeService = this.injector.get(ComboLocaleService, '');
        if (this.localeService) {
            /** @type {?} */
            var localConfig = this.localeService.getLocaleConfig();
            if (localConfig) {
                if (!this.placeholder) {
                    this.placeholder = localConfig['placeholder'] || '请选择';
                }
                this.emptyMsg = localConfig['emptyMsg'] || '暂无数据';
            }
        }
        this.comboService.separator = this.separator;
        this.comboService['treeToList'] = this.treeToList;
        this.comboService['navTreeToList'] = this.navTreeToList;
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var that = this;
        this.ngControl = this.injector.get(NgControl, null);
        fromEvent(window, 'resize').pipe(takeUntil(this.destroy$)).pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return interval(100); }))).subscribe((/**
         * @return {?}
         */
        function () {
            _this.updatePanelWidth();
            if (_this.isOpen) {
                _this.comboService.isOpen$.next(false);
                _this.willHide$.next();
            }
        }));
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    that.updatePanelWidth();
                }));
            }));
            /** @type {?} */
            var reszieTimer_1 = null;
            this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    if (reszieTimer_1) {
                        clearTimeout(reszieTimer_1);
                    }
                    reszieTimer_1 = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (that._cmbPanel && that.panelElement) {
                            reqAnimFrame((/**
                             * @return {?}
                             */
                            function () {
                                that.updatePosition(that._cmbPanel.nativeElement);
                                if (that._cmbPanel.nativeElement.className.indexOf('f-area-show') === -1) {
                                    that.render.addClass(that._cmbPanel.nativeElement, 'f-area-show');
                                }
                            }));
                        }
                    }), 10);
                }));
            }));
        }
        this.comboService.injectService();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboService.serachValue$.unsubscribe();
        if (this.mouseWheelEvent) {
            this.mouseWheelEvent();
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.updatePanelWidth = /**
     * @private
     * @return {?}
     */
    function () {
        var width = this.getInputSizeInfo().width;
        this.panelWidth = this.autoWidth ? width : this.panelWidth;
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    BaseComboComponent.prototype.onClick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event === void 0) { $event = null; }
        if ($event) {
            if ($event.stopPropagation) {
                $event.stopPropagation();
            }
            else {
                if ($event.originalEvent) {
                    $event.originalEvent.stopPropagation();
                }
            }
        }
        // 重复执行面板关闭事件 故注释掉 20220917
        // if (this.isOpen) {
        //     this.willHide$.next();
        // } else {
        //     this.comboService.isOpen$.next(!this.isOpen);
        // }
        this.comboService.isOpen$.next(!this.isOpen);
        if (this.input && this.input.textbox) {
            this.input.textbox.nativeElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onTouched();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // // 启用任意输入后，文本框得到焦点后不弹出下拉面板。2021/02/19
        // if (this.nosearch) {
        //     return ;
        // }
        // if (!this.isOpen) {
        //     this.comboService.isOpen$.next(true);
        //     // 延迟执行变更检测 更新弹出框位置
        // of('').pipe(debounceTime(0)).subscribe(() => {
        //     this.cdr.detectChanges();
        // });
        // } else {
        //     this.hide();
        // }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    BaseComboComponent.prototype.onInputclick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event && $event.stopPropagation) {
            $event.stopPropagation();
        }
        this.comboService.isOpen$.next(!this.isOpen);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.blur();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.selectedValues = '';
        this.selections = [];
        this.comboService.selections = [];
        this.onValueChange({ text: '', value: '', selections: [] });
        this.clear.emit();
        if (this.isOpen && this.hidePanelOnClear) {
            // this.comboService.isOpen$.next(false);
            this.willHide$.next();
        }
        else {
            if (this.isOpen && this.comboService.displayType === 'LIST') {
                this.comboService.serachValue$.next('');
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.viewType === 'text' ? this.input.inputGroup : this.input2;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.emitTextChange = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this.textChangeSubject.pipe(debounceTime(200)).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var _selectedValues = _this.selectedValues;
            /** @type {?} */
            var val = r ? r : _this.displayText;
            if (r === '') {
                _this.onClear();
            }
            else if (_this.nosearch) {
                _this.onValueChange({ text: r, value: '', selections: _this.selections, nosearch: true });
            }
            if (!_this.remoteSearch) {
                if (!_this.multiSelect) {
                    if (_this.comboService.displayType === 'LOOKUPTREELIST') {
                        _this.treeClientSearch.next(val);
                    }
                    else {
                        _this.comboService.serachValue$.next(val);
                    }
                }
                else {
                    /** @type {?} */
                    var valArr = (val + '').split(_this.separator);
                    /** @type {?} */
                    var appendVal = valArr[valArr.length - 1] ? valArr[valArr.length - 1] : '';
                    _this.comboService.serachValue$.next(appendVal);
                }
                // if (_selectedValues !== this.selectedValues) {
                //     this.onValueChange({ text: this.displayText, value: this.selectedValues, selections: this.selections });
                // }
            }
            else {
                _this.filterDataOnServer(val, '*');
            }
        }));
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    BaseComboComponent.prototype.__createPanel = /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    function (value, searchParam) {
        var _this = this;
        if (searchParam === void 0) { searchParam = null; }
        /** @type {?} */
        var params = {};
        /** @type {?} */
        var method = 'get';
        if (value instanceof Object) {
            var _p = value.params, data = value.data, _m = value.method, showDialog = value.showDialog;
            if (showDialog === false) {
                return;
            }
            if (data) {
                params = { data: data };
                this.customData = data;
            }
            else {
                if (_p) {
                    params = { data: _p };
                    this.customData = _p;
                }
                else {
                    this.customData = null;
                }
            }
            if (_m) {
                method = _m;
            }
        }
        else if (typeof value === 'boolean') {
            if (value === false) {
                return;
            }
        }
        this.initCreatPanelAction();
        if (this.uri) {
            this.updateSelectedValues();
            if (this.isLookup()) {
                this.isOpen = true;
            }
        }
        else {
            this.isOpen = true;
        }
        if (this.comboService.displayType === 'LOOKUPTREELIST') {
            params.enableFullTree = this['enableFullTree'];
            params.loadTreeDataType = this['loadTreeDataType'];
        }
        if (this.isLookup() && this.input && this.nosearch) {
            this.input.textbox.nativeElement.disabled = true;
        }
        /** @type {?} */
        var focusInput = (/**
         * @return {?}
         */
        function () {
            if (_this.isLookup() && _this.input && _this.nosearch) {
                _this.input.textbox.nativeElement.disabled = false;
                _this.input.focus();
            }
        });
        if (searchParam) {
            params.searchValue = searchParam.searchValue;
        }
        /** @type {?} */
        var selectedIds = this.selectedValues;
        if (this.isLookup()) {
            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse'] ||
                (this.mapFields && !this.mapFields[this.idField])) {
                selectedIds = this.comboService['__SELECTEDIDS__'];
            }
            /** @type {?} */
            var _expLevel = this['expandLevel'];
            params['expandLevel'] = _expLevel;
        }
        this.initdataSubscription = this.comboService.initData(params, method, selectedIds).pipe(throwIfEmpty(focusInput)).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!_this.isOpen) {
                _this.isOpen = true;
            }
            focusInput();
            _this.cdr.detectChanges();
        }));
        // 禁止滚动
        // this.render.setStyle(this.containerElement, 'pointer-events', 'auto');
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.registerDocumentEvent();
        }));
    };
    // 显示前事件
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onBeforeShow = 
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.beforeShow) {
            this.beforeShow = (/**
             * @return {?}
             */
            function () { return of(''); });
        }
        return this.beforeShow(this).pipe(take(1));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.isLookup = /**
     * @private
     * @return {?}
     */
    function () {
        return this.comboService.displayType.indexOf('LOOKUP') > -1;
    };
    // 隐藏前事件
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onBeforeHide = 
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.beforeHide) {
            this.beforeHide = (/**
             * @return {?}
             */
            function () { return of(''); });
        }
        this.beforeHide(this).pipe(take(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'boolean') {
                if (value) {
                    _this.hide(true);
                }
            }
            else if (typeof value === 'object') {
                if (value.hide) {
                    _this.hide(true);
                }
                else {
                    if (value.message) {
                        if (_this.notifySer) {
                            _this.notifySer.warning(value.message);
                        }
                    }
                }
            }
            else {
                _this.hide(true);
            }
        }));
    };
    // 显示或隐藏下拉框
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initToggleAction = 
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.isOpen$.pipe(debounceTime(20), takeUntil(this.destroy$), skip(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.readonly || _this.disabled) {
                return;
            }
            /** @type {?} */
            var open = value;
            /** @type {?} */
            var searchParam = null;
            if (typeof value === 'object') {
                open = value.isOpen;
                searchParam = value.search;
            }
            if (open) {
                _this.onBeforeShow().subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    _this.__createPanel(v, searchParam);
                }));
                return;
            }
            else {
                _this.onBeforeHide();
            }
            _this.cdr.detectChanges();
        }));
        this._comboPanelCreated$.pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return !!value; }))).subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            cmp.nativeElement.style.display = '';
            _this.initCreatPanelAction();
            _this.panelElement.appendChild(cmp.nativeElement);
            /** @type {?} */
            var transitionFlag = true;
            cmp.nativeElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    _this.showPanel.emit(_this);
                }
            }));
            if (_this.isLookup()) {
                cmp.nativeElement.style.width = _this.panelWidth + "px";
                cmp.nativeElement.style.height = _this.panelHeight + "px";
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.render.addClass(cmp.nativeElement, 'f-area-show');
                }), 0);
            }
            // this.updatePosition(cmp.nativeElement);
            // this.cdr.detectChanges();
        }));
        this.destroy$.pipe(take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.comboService.closeLoading();
            nextUniqueId = 0;
            if (_this.panelListener) {
                _this.panelListener();
            }
            if (_this.initdataSubscription) {
                _this.initdataSubscription.unsubscribe();
                _this.initdataSubscription = null;
            }
            _this.removePanelElement();
        }));
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    BaseComboComponent.prototype.iframeEventHandle = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var e_1, _a;
        /** @type {?} */
        var iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            try {
                for (var iframes_1 = __values(iframes), iframes_1_1 = iframes_1.next(); !iframes_1_1.done; iframes_1_1 = iframes_1.next()) {
                    var iframe = iframes_1_1.value;
                    /** @type {?} */
                    var iframeDoc = iframe.contentDocument;
                    if (iframeDoc) {
                        iframeDoc[action]('mousedown', this._documentClickEvent);
                        iframeDoc[action]('mousewheel', this._documentClickEvent);
                        iframeDoc[action]('DOMMouseScroll', this._documentClickEvent);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iframes_1_1 && !iframes_1_1.done && (_a = iframes_1.return)) _a.call(iframes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.removeDocumentListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._documentClickEvent) {
            document.removeEventListener('mousedown', this._documentClickEvent, true);
            document.removeEventListener('mousewheel', this._documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', this._documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', this._documentClickEvent, true);
            }
            this.iframeEventHandle('removeEventListener');
            this._documentClickEvent = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.registerDocumentEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 注册 mousedown 事件 隐藏panel
        document.addEventListener('mousedown', (this._documentClickEvent = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === 'mousewheel' && _this.el.nativeElement.contains(event.target)) {
                _this.comboService.isOpen$.next(false);
                return;
            }
            if (!_this.el.nativeElement.contains(event.target) && _this._cmbPanel && !_this.contains(_this._cmbPanel, event)) {
                _this.comboService.isOpen$.next(false);
                // this.willHide$.next();
            }
        })), true);
        document.addEventListener('mousewheel', this._documentClickEvent, true);
        document.addEventListener('DOMMouseScroll', this._documentClickEvent, true);
        if (top !== window) {
            top.document.body.addEventListener('mousedown', this._documentClickEvent, true);
        }
        this.iframeEventHandle('addEventListener');
    };
    // 创建下拉面板时事件
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initCreatPanelAction = 
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.panelElement) {
            return;
        }
        this.createPanel(document.body);
        this.panelListener = this.render.listen(this.panelElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            if (_this.panelElement) {
                document.body.removeChild(_this.panelElement);
                _this.panelElement = null;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initSelectionsChangeAction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.selections$.pipe(takeUntil(this.destroy$), debounceTime(100)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.action === 'initData') {
                _this.onSelectionsChange(_this.selections);
            }
            else {
                _this.onSelectionsChangeDefault();
                if (_this.isLookup()) {
                    _this.updateSelectedValues();
                }
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    BaseComboComponent.prototype.initDatasChangeAction = /**
     * @protected
     * @return {?}
     */
    function () { };
    // canNull 解决取消选中时依然显示
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onSelectionsChangeDefault = 
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        /** @type {?} */
        var _selectedValues = this.comboService.getValue(this.idField);
        if (this.displayText !== _displayText && !this.nosearch) {
            this.displayText = _displayText || this.displayText;
            this.displayText = this.displayText || '';
            this.originalText = _selectedValues ? _displayText : this.displayText;
        }
        if (this.input) {
            this.input.textbox.nativeElement.value = this.displayText;
        }
        this.selectedValues =
            (_selectedValues !== '' && _selectedValues !== undefined && _selectedValues !== null) ? _selectedValues : this.selectedValues;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    BaseComboComponent.prototype.onSelectionsChange = /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    function (v) { };
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    BaseComboComponent.prototype.updateMappingFieldValue = /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    function (clearMapFields) {
        if (clearMapFields === void 0) { clearMapFields = false; }
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            if (clearMapFields) {
                this.selectedValues = '';
            }
            if (bindingData.setValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n !== ''; }));
                }
                /** @type {?} */
                var mappingField = this.mappingField ? this.mappingField : '';
                bindingData.setValue(pathArr.concat(mappingField.split('.')), this.selectedValues, true, true);
            }
            else if (this.commonUtils) {
                this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            }
            // if (!bindingData.setValue && this.commonUtils) {
            //     this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            // }
        }
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.updateSelectedValues = /**
     * @return {?}
     */
    function () {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData.getValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return value !== ''; }));
                }
                /** @type {?} */
                var mappingField = this.mappingField ? this.mappingField : '';
                this.selectedValues = bindingData.getValue(pathArr.concat(mappingField.split('.')));
            }
            else if (this.commonUtils) {
                this.selectedValues = this.commonUtils.getValue(this.mappingField, bindingData);
            }
        }
        else if (!this.mappingField) ;
    };
    /**
     * @param {?=} val
     * @return {?}
     */
    BaseComboComponent.prototype.onTextChange = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        this.isTextChange = true;
        if (this.nosearch) {
            this.selectedValues = val;
            this.updateMappingFieldValue(this.isLookup());
            this.onChange(val);
        }
        if (!this.isOpen && this.comboService.displayType === 'LIST') {
            this.isOpen = true;
        }
        this.textChangeSubject.next(val);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseComboComponent.prototype.onValueChange = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.displayText = changes.text;
        this.originalText = this.displayText;
        if (!this.uri && this.data && this.data.length > 0 && (!this['displayType'] || this.useValue)) {
            this.onChange(this.selectedValues);
        }
        else {
            this.onChange(this.displayText);
        }
        // if (!changes.nosearch) {
        // }
        this.valueChange.emit(changes);
        this.updateMappingFieldValue();
        this.onTouched();
        // if (this.isOpen && changes.emitHidePanel) { this.willHide$.next(); }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseComboComponent.prototype.onSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) { };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseComboComponent.prototype.onUnSelected = /**
     * @param {?} item
     * @return {?}
     */
    function (item) { };
    /**
     * emit: 默认为 true;
     */
    /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    BaseComboComponent.prototype.hide = /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        if (!this.isOpen) {
            return;
        }
        this.removeDocumentListener();
        this.isOpen = false;
        if (emit) {
            this.willHide$.next();
        }
        if (this.initdataSubscription) {
            this.initdataSubscription.unsubscribe();
            this.initdataSubscription = null;
        }
        this.removePanelElement();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isOpen) {
            return;
        }
        this.onBeforeShow().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.__createPanel(value);
        }));
        this.cdr.detectChanges();
    };
    /**
     * @private
     * @param {?} host
     * @return {?}
     */
    BaseComboComponent.prototype.createPanel = /**
     * @private
     * @param {?} host
     * @return {?}
     */
    function (host) {
        this.panelElement = this.document.createElement('div');
        this.panelElement.id = "overlay-" + nextUniqueId++;
        this.panelElement.classList.add('overlay-pane');
        this.panelElement.style.display = 'none';
        host.appendChild(this.panelElement);
        this.comboService.panelElement = this.panelElement;
        if (this.isLookup()) {
            var _a = this.getPanelSize(), panelWidth = _a.panelWidth, top_1 = _a.top, left = _a.left;
            this.panelElement.style.width = panelWidth + "px";
            this.panelElement.style.height = this.panelHeight + "px";
            this.panelElement.style.top = top_1 + "px";
            this.panelElement.style.left = left + "px";
        }
        else {
            this.panelElement.style.overflow = 'hidden';
            this.render.setStyle(this.panelElement, 'top', '0');
            this.render.setStyle(this.panelElement, 'left', '0');
        }
        /** @type {?} */
        var zindex = this.commonUtils.getFloatingLayerIndex();
        this.panelElement.style.zIndex = zindex;
        this.panelElement.classList.add('f-combo-lookup');
        this.panelElement.style.display = '';
    };
    /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    BaseComboComponent.prototype.getPanelSize = /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        var panelHeight = this.panelHeight;
        this.innerPanelHeight = 202;
        if (this.autoWidth) {
            var width = this.getInputSizeInfo().width;
            this.panelWidth = width ? width : this.panelWidth;
        }
        // 如果taget高度存在 修改pnaelHeight 用于重定位弹出框位置
        if (target && target.tagName && panelHeight === 'auto') {
            /** @type {?} */
            var targetHeight = target.scrollHeight;
            /** @type {?} */
            var isNoRecord = !!target.querySelector('.f-table-norecords-content');
            // if (this.uri) {
            //     if (this.data && this.data.length) {
            //         if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
            //             this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
            //         } else {
            //             this.innerPanelHeight = targetHeight;
            //         }
            //     }
            // } else {
            //     this.innerPanelHeight = targetHeight && targetHeight > 10 && !isNoRecord ? Math.floor(targetHeight) : this.panelHeight;
            // }
            if (this.data && this.data.length) {
                if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
                    this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
                }
                else {
                    this.innerPanelHeight = targetHeight;
                }
            }
        }
        else if (target && target.tagName && panelHeight && !String(panelHeight).includes('px')) {
            panelHeight = panelHeight;
        }
        var _a = this.el.nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height, left = _a.left, right = _a.right;
        height = height + 1;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        if (panelHeight === 'auto') {
            if (this.maxHeight && this.maxHeight > this.innerPanelHeight) {
                panelHeight = this.innerPanelHeight;
            }
            else {
                panelHeight = this.maxHeight;
            }
        }
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        /** @type {?} */
        var below = h === bottom;
        /** @type {?} */
        var fx = 'top';
        if (bottom > panelHeight) {
            top = top + height;
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                fx = 'bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        var panelWidth = this.panelWidth;
        if (window.innerWidth - left < this.panelWidth) {
            // left = right - 400;
            if (left + this.el.nativeElement.offsetWidth > this.panelWidth) {
                left = left + this.el.nativeElement.offsetWidth - this.panelWidth;
            }
            else {
                left = 0;
                panelWidth = window.innerWidth > this.panelWidth ? this.panelWidth : window.innerWidth - 10;
            }
        }
        return { panelWidth: panelWidth, panelHeight: panelHeight, top: top, left: left, below: below, fx: fx };
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.compatibleScrollTop = /**
     * @private
     * @return {?}
     */
    function () {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollTop;
        }
        return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.compatibleScrollLeft = /**
     * @private
     * @return {?}
     */
    function () {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollLeft;
        }
        return Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    };
    // 设置弹出框位置
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    BaseComboComponent.prototype.updatePosition = 
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        var _this = this;
        var _a = this.getPanelSize(target), panelHeight = _a.panelHeight, left = _a.left, top = _a.top, below = _a.below, fx = _a.fx;
        if (!this.isLookup()) {
            /** @type {?} */
            var _top = top;
            /** @type {?} */
            var _height = panelHeight;
            if (top < 0) {
                _height = this.innerPanelHeight + top - 10;
                _top = 10;
            }
            _top += this.compatibleScrollTop();
            if (this.panelHeight !== 'auto') {
                if (this.maxHeight < _height) {
                    this.maxHeight = (/** @type {?} */ (_height));
                }
            }
            this.comPosition = {
                'left': left + this.compatibleScrollLeft(),
                'top': _top,
                'width': this.panelWidth,
                height: _height === 'auto' ? 'auto' : _height,
                'max-height': this.maxHeight
            };
        }
        else {
            this.comPosition = {
                'width': this.panelWidth,
                'height': panelHeight
            };
        }
        this.panelElement.style.overflow = '';
        target['style'].display = '';
        Object.keys(this.comPosition).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var val = _this.comPosition[n];
            if (val !== 'auto') {
                val += 'px';
            }
            _this.render.setStyle(target, n, val);
        }));
        target.style.transformOrigin = '100% ' + fx;
        // target['style'].visibility = 'visible';
        return this.comPosition;
    };
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.contains = /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    function (el, event) {
        return el.nativeElement.contains(event.target);
    };
    /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.filterSelections = /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    function (value, data) {
        var _this = this;
        /** @type {?} */
        var selectedItems = String(value)
            .split(this.separator)
            .map((/**
         * @param {?} selectedItem
         * @return {?}
         */
        function (selectedItem) {
            /** @type {?} */
            var item = data.find((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return selectedItem == _this.commonUtils.getValue(_this.idField, val) + ''; }));
            return item ? _this.commonUtils.getValue(_this.textField, item) : '';
        }));
        return selectedItems.filter((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return el; }));
    };
    /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.updateSelections = /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    function (selectedValues, data) {
        var _this = this;
        if (selectedValues === null || selectedValues === undefined) {
            this.selections = [];
        }
        if (typeof selectedValues === 'boolean' || typeof selectedValues === 'number') {
            selectedValues = '' + selectedValues;
        }
        /** @type {?} */
        var selectedItems = selectedValues ? String(selectedValues).split(this.separator).map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (_this.comboService.displayType === 'LOOKUPTREELIST') {
                return _this.comboService.treeNodeToFlatData(data, val, _this.idField);
            }
            return data.find((/**
             * @param {?} _data
             * @return {?}
             */
            function (_data) { return '' + val == _this.commonUtils.getValue(_this.idField, _data) + ''; }));
        })) : [];
        this.selections = selectedItems || [];
    };
    /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.getDisplayText = /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    function (value, data) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            var selectedItems = this.filterSelections(value, data);
            if (!selectedItems || !selectedItems.length) {
                return value;
            }
            else {
                return selectedItems.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return !!v; })).join(this.separator);
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseComboComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var data = [];
        if (this.data instanceof Array) {
            data = this.data;
        }
        else if (this.data) {
            data = ((/** @type {?} */ (this.data['items']))) instanceof Array ? this.data['items'] : data;
        }
        this.originalText = value;
        // 解决 uistate binding 中初次绑定时设置了 selectedValues 值 ，此处清空后导至下拉帮助获取选中记录不正确
        // this.selectedValues = '';
        if (!this.uri && data && data.length > 0) {
            if (this.isLookup()) {
                if (this.selectedValues === undefined || this.selectedValues === null) {
                    this.selectedValues = value;
                }
            }
            else {
                this.selectedValues = value;
            }
            this.updateSelections(this.selectedValues, data);
            this.displayText = this.getDisplayText(this.selectedValues, this.selections || []);
            if (this.isLookup()) {
                this.displayText = this.displayText === this.selectedValues ? value : this.displayText;
            }
            this.originalText = this.displayText;
        }
        else {
            // this.displayText = this.getDisplayText(value, this.selections);
            this.displayText = value;
            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse']) {
                this.comboService['__SELECTEDIDS__'] = this.selectedValues;
            }
            this.updateSelectedValues();
            if (this.selectedValues === undefined || this.selectedValues === null) {
                this.selectedValues = value;
            }
            if (this.viewType === 'tag' && this.multiSelect && (this.displayText !== null && this.displayText !== undefined)) {
                /** @type {?} */
                var txtArr = this.displayText.split(this.separator).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                this.selections = txtArr.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @param {?} i
                 * @return {?}
                 */
                function (r, c, i) {
                    var _a;
                    r.push((_a = {}, _a[_this.textField] = c, _a));
                    return r;
                }), []);
            }
        }
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseComboComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseComboComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    BaseComboComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    BaseComboComponent.prototype.filterDataOnServer = /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    function (searchValue, searchField) {
    };
    /** @nocollapse */
    BaseComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    BaseComboComponent.propDecorators = {
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        placeholder: [{ type: Input }],
        panelWidth: [{ type: Input }],
        panelHeight: [{ type: Input }],
        autoWidth: [{ type: Input }],
        enableClear: [{ type: Input }],
        mapFields: [{ type: Input }],
        forcePlaceholder: [{ type: Input }],
        nosearch: [{ type: Input }],
        maxLength: [{ type: Input }],
        enableTitle: [{ type: Input }],
        viewType: [{ type: Input }],
        context: [{ type: Input }],
        mappingField: [{ type: Input }],
        data: [{ type: Input }],
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        multiSelect: [{ type: Input }],
        uri: [{ type: Input }],
        selectedValues: [{ type: Input }],
        displayText: [{ type: Input }],
        maxHeight: [{ type: Input }],
        enableCancelSelected: [{ type: Input }],
        remoteSearch: [{ type: Input }],
        beforeShow: [{ type: Input }],
        beforeHide: [{ type: Input }],
        hidePanelOnClear: [{ type: Input }],
        useValue: [{ type: Input }],
        separator: [{ type: Input }],
        treeToList: [{ type: Input }],
        navTreeToList: [{ type: Input }],
        emptyMsg: [{ type: Input }],
        showPanel: [{ type: Output }],
        hidePanel: [{ type: Output }],
        clear: [{ type: Output }],
        valueChange: [{ type: Output }],
        selectChange: [{ type: Output }],
        cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
        input: [{ type: ViewChild, args: ['input',] }],
        input2: [{ type: ViewChild, args: ['input2',] }]
    };
    return BaseComboComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return ComboListComponent; })),
    multi: true
};
var ComboListComponent = /** @class */ (function (_super) {
    __extends(ComboListComponent, _super);
    function ComboListComponent(el, cdr, document, render, comboService, injector) {
        var _this = _super.call(this, el, cdr, document, render, comboService, injector) || this;
        _this.el = el;
        _this.cdr = cdr;
        _this.document = document;
        _this.render = render;
        _this.comboService = comboService;
        _this.injector = injector;
        /**
         * 数据中标识禁用的字段名称，默认为 disabled
         */
        _this.disabledField = 'disabled';
        /**
         * 列表中是否显示已禁用的项，默认 true
         */
        _this.showDisabledItem = true;
        /**
         * 显示面板方式： click | focus, 默认： click
         */
        _this.showPanelType = 'click';
        _this.cls = true;
        _this.filterData = [];
        return _this;
    }
    Object.defineProperty(ComboListComponent.prototype, "clsTag", {
        get: /**
         * @return {?}
         */
        function () {
            return this.viewType === 'tag';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (this.multiSelect) {
            this.enableCancelSelected = this.multiSelect;
        }
        this.remoteSearch = false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ComboListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /**
         * 如果直接绑定一个数组作为列表数据并且 data 是异步数据，需要此方法，同步displayText与selectedValues
         */
        if (changes.data && !changes.data.firstChange && !this.uri && !this.nosearch) {
            /** @type {?} */
            var datas = changes.data.currentValue;
            /** @type {?} */
            var val = this.ngControl ? this.ngControl.value || this.selectedValues : this.selectedValues;
            if (this.selectedValues === undefined || this.selectedValues === null) {
                val = this.displayText;
            }
            if (val !== undefined && val !== null && datas && datas.length > 0) {
                /** @type {?} */
                var textArr = this.filterSelections(val, this.data);
                this.displayText = textArr.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return !!v; })).join(this.separator);
                this.updateSelections(val, this.data);
                this.comboService.selections$.next({ action: 'initData' });
            }
            else {
                this.selections = [];
                this.displayText = '';
            }
        }
        // if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
        //     this.enableCancelSelected = this.multiSelect;
        // }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.registerKeyboardEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.multiSelect || (this.readonly || this.disabled)) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown' ||
            (!this.editable && !this.readonly && !this.disabled && $event.code === 'Space')) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        var selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            _this.comboService.selectItem(data[index], index, false);
            /** @type {?} */
            var params = { data: data[index], index: index };
            if (_this.isOpen) {
                _this.scrollToCurrentItem(index);
            }
            _this.updateSelectValues(params);
        });
        /** @type {?} */
        var data = this.filterData && this.filterData.length ? this.filterData : this.data;
        if (!this['_cmbPanel']) {
            data = this.data;
        }
        /** @type {?} */
        var _data = [];
        if (this.disabledField) {
            _data = data.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !_this.commonUtils.getValue(_this.disabledField, n); }));
        }
        /** @type {?} */
        var getrealIndex = (/**
         * @param {?} idx
         * @param {?} nextIdx
         * @param {?=} isNext
         * @return {?}
         */
        function (idx, nextIdx, isNext) {
            if (isNext === void 0) { isNext = true; }
            if (data[nextIdx]) {
                // 判断下一项是否禁用
                /** @type {?} */
                var isDisabled = _this.commonUtils.getValue(_this.disabledField, data[nextIdx]);
                if (isDisabled) {
                    /** @type {?} */
                    var _idx = _data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, data[idx]); }));
                    if (isNext) {
                        nextIdx = _idx + 1;
                    }
                    else {
                        nextIdx = _idx - 1;
                    }
                    if (_data[nextIdx]) {
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, _data[nextIdx]); }));
                    }
                    else {
                        /** @type {?} */
                        var newIdex_1 = nextIdx > 0 ? 0 : _data.length - 1;
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, _data[newIdex_1]) && !_this.commonUtils.getValue(_this.disabledField, n); }));
                    }
                }
                return nextIdx;
            }
        });
        /** @type {?} */
        var idx = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return _this.commonUtils.getValue(_this.idField, n) == _this.selectedValues; }));
        if ($event.code === 'ArrowUp') { // up
            // up
            /** @type {?} */
            var prevIdx = idx - 1;
            if (prevIdx < 0) {
                prevIdx = data.length - 1;
            }
            if (this.disabledField) {
                prevIdx = getrealIndex(idx, prevIdx, false);
            }
            selectItem(prevIdx);
        }
        if ($event.code === 'ArrowDown' || ($event.code === 'Space' && !this.editable)) { // down
            // down
            /** @type {?} */
            var nextIdx = idx + 1;
            if (nextIdx >= data.length) {
                nextIdx = 0;
            }
            if (this.disabledField) {
                nextIdx = getrealIndex(idx, nextIdx);
            }
            selectItem(nextIdx);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.escHandlerEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.isOpen) {
            this.hide(false);
        }
    };
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    ComboListComponent.prototype.onSelectionsChange = /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    function (v) {
        var _this = this;
        if (this.uri) {
            if (this.selections && this.selections.length) {
                this.selectedValues = this.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.idField]; })).join(this.separator);
            }
        }
    };
    /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    ComboListComponent.prototype.updateSelectValues = /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    function (item, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        var _a = __assign({}, item), data = _a.data, index = _a.index;
        this.comboService.selectItem(data, index);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        if (!this.multiSelect) {
            this.selectedValues = data[this.idField];
        }
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        if (emitEvent) {
            this.selectChange.emit({ data: data, index: index, instance: this, selections: this.selections });
            this.cdr.markForCheck();
            this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ComboListComponent.prototype.scrollToCurrentItem = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.dataListRef && this.dataListRef.el) {
            /** @type {?} */
            var ulEl = this.dataListRef.el.nativeElement.querySelector('ul.list-group');
            if (ulEl && ulEl.children && ulEl.children[index]) {
                ulEl.children[index].scrollIntoView({ block: 'nearest' });
            }
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ComboListComponent.prototype.onSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.updateSelectValues(item, true);
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboListComponent.prototype.onUnSelected = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var data = __assign({}, value).data;
        this.comboService.unSelectItem(data);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        // if (!this.multiSelect) {
        //     this.selectedValues = data[this.idField];
        // }
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        this.cdr.markForCheck();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboListComponent.prototype.onEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isOpen) {
            this.hide();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.onKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.onKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.showPanelType === 'focus') {
            this.show();
        }
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    ComboListComponent.prototype.removeSelectItem = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        if ($event) {
            $event.stopPropagation();
        }
        this.comboService.unSelectItem(item);
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        this.cdr.detectChanges();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    };
    /**
     * @protected
     * @return {?}
     */
    ComboListComponent.prototype.initDatasChangeAction = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.data$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.filterData = data;
            if (data && data.length && !_this.editable) {
                if (typeof _this.selectedValues === 'boolean') {
                    return;
                }
                if (_this.selectedValues) {
                    /** @type {?} */
                    var idx_1 = -1;
                    /** @type {?} */
                    var items = [];
                    if (typeof _this.selectedValues === 'number' || typeof _this.selectedValues === 'boolean') {
                        items = data.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return n[_this.idField] === _this.selectedValues || n[_this.textField] === _this.selectedValues;
                        }));
                    }
                    else {
                        items = _this.selectedValues.split(_this.separator).map((/**
                         * @param {?} val
                         * @return {?}
                         */
                        function (val) {
                            return data.find((/**
                             * @param {?} n
                             * @param {?} i
                             * @return {?}
                             */
                            function (n, i) {
                                return n[_this.idField] === val || n[_this.textField] === val;
                            }));
                        }));
                    }
                    if (!_this.selections || !_this.selections.length) {
                        if (items && items.length) {
                            _this.selectedValues = items.map((/**
                             * @param {?} i
                             * @return {?}
                             */
                            function (i) {
                                return _this.commonUtils.getValue(_this.idField, i);
                            })).join(_this.separator);
                            _this.selections = items;
                        }
                    }
                    idx_1 = data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, _this.selections[0]) ||
                            _this.commonUtils.getValue(_this.textField, n) === _this.commonUtils.getValue(_this.textField, _this.selections[0]);
                    }));
                    if (idx_1 > -1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.scrollToCurrentItem(idx_1);
                        }), 300);
                    }
                }
            }
        }));
    };
    ComboListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-combo-list',
                    template: "<input-group *ngIf=\"!viewType || viewType === 'text'\"\r\n    #input\r\n    [attr.title]=\"enableTitle? displayText: ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"enableClear\"\r\n    [maxLength]=\"maxLength\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (enterHandle)=\"onEnter($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    style=\"display: block;\">\r\n</input-group>\r\n\r\n<div #input2 class=\"f-cmp-inputgroup\" *ngIf=\"viewType === 'tag'\" (click)=\"onClick($event)\" [attr.title]=\"displayText\">\r\n    <div class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\">\r\n        <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\">\r\n            <div class=\"multi--content\">\r\n                <span class=\"multi--item\" *ngFor=\"let it of selections\" >\r\n                    {{it[textField]}}\r\n                    <i class=\"f-icon multi--close\" *ngIf=\"!readonly && !disabled \" (click)=\"removeSelectItem($event, it)\"></i>\r\n                </span>\r\n            </div>\r\n            <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n                <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group-append\" >\r\n            <span class=\"input-group-text input-group-clear ng-star-inserted\" style=\"display: none;\">\r\n                <i class=\"f-icon modal_close\"></i>\r\n            </span>\r\n            <span class=\"input-group-text ng-star-inserted\" (click)=\"onClick($event)\">\r\n                <span class=\"f-icon f-icon-arrow-60-down\"></span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\" style=\"z-index: 99999;transition: transform 0.12s ease;\"  #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [itemHeight]=\"itemHeight\"\r\n        [height]=\"panelHeight\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [idField]=\"idField\"\r\n        [multiSelect]=\"multiSelect\"\r\n        [selectedValues]=\"selectedValuesStr\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        [enableCancelSelected]=\"enableCancelSelected\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n        [separator]=\"separator\"\r\n        style=\"position: relative;\"\r\n        [emptyMessage]=\"emptyMsg\"\r\n        [disabledField]=\"disabledField\"\r\n        [showDisabledItem]=\"showDisabledItem\"\r\n    >\r\n        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>\r\n        </ng-template>\r\n    </farris-datalist>\r\n</div>\r\n",
                    // styleUrls: ['./combo-list.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService]
                }] }
    ];
    /** @nocollapse */
    ComboListComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    ComboListComponent.propDecorators = {
        itemTemplate: [{ type: Input }],
        disabledField: [{ type: Input }],
        showDisabledItem: [{ type: Input }],
        showPanelType: [{ type: Input }],
        dataListRef: [{ type: ViewChild, args: ['dl',] }],
        itemHeight: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class.f-combo-list',] }],
        clsTag: [{ type: HostBinding, args: ['class.f-combo-list--tag',] }],
        registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        escHandlerEvent: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]
    };
    return ComboListComponent;
}(BaseComboComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComboListModule = /** @class */ (function () {
    function ComboListModule() {
    }
    ComboListModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ComboListComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        InputGroupModule,
                        LoadingModule.forRoot(),
                        DatalistModule,
                        NotifyModule.forRoot()
                    ],
                    exports: [ComboListComponent],
                    providers: [ComboLocaleService]
                },] }
    ];
    return ComboListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ComboService, INPUT_COMBO_VALUE_ACCESSOR, ComboListComponent, ComboListModule, BaseComboComponent, ComboServerSideToken, ComboLocaleService };

//# sourceMappingURL=farris-ui-combo-list.js.map