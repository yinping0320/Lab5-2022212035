/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { BehaviorSubject, Subject, of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { debounceTime, map, switchMap, catchError, tap, delay } from 'rxjs/operators';
import { LoadingService } from '@farris/ui-loading';
import { LookupUtils, ServerSideToken } from '@farris/ui-lookup';
import { ComboServerSideToken } from './http/ComboHttpService';
var ComboService = /** @class */ (function () {
    function ComboService(http, loadingService, injector) {
        var _this = this;
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.selections$ = new Subject();
        this.isOpen$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject('');
        this.serachValue$ = new Subject();
        this.loadSuccess$ = new Subject();
        this.treeInfo$ = new BehaviorSubject(null);
        this.displayType = 'LIST';
        this.separator = ',';
        this.columns = [];
        this.remoteSearch = true;
        this.panelElement = null;
        this.treeSearchHandler = null;
        // 树帮助加载设置
        this.treeloadconfig = null;
        this._data = [];
        this.serachValue$.pipe(debounceTime(300)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!_this.remoteSearch) {
                _this.filterData(value, _this.textField);
            }
            else {
                _this.filterDataOnServer(value);
            }
        }));
    }
    Object.defineProperty(ComboService.prototype, "uri", {
        get: /**
         * @return {?}
         */
        function () {
            return this._uri;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._uri = val;
            this.data$.next([]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboService.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value || [];
            if (Array.isArray(value)) {
                this.data$.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboService.prototype.injectService = /**
     * @return {?}
     */
    function () {
        if (this.injector && !this.comboHttp) {
            this.lookupUtils = this.injector.get(LookupUtils, null);
            if (this.displayType.indexOf('LOOKUP') > -1) {
                this.comboHttp = this.injector.get(ServerSideToken, null);
            }
            else {
                this.comboHttp = this.injector.get(ComboServerSideToken, null);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboService.prototype.toBoolean = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value != null && "" + value !== 'false';
    };
    /**
     * @param {?} data
     * @param {?=} index
     * @param {?=} emitEvent
     * @return {?}
     */
    ComboService.prototype.selectItem = /**
     * @param {?} data
     * @param {?=} index
     * @param {?=} emitEvent
     * @return {?}
     */
    function (data, index, emitEvent) {
        var _this = this;
        if (emitEvent === void 0) { emitEvent = true; }
        if (!this.multiSelect) {
            this.selections = [];
        }
        if (Array.isArray(data)) {
            data.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (_this.selections.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) { return s[_this.idField] === n[_this.idField]; })) === -1) {
                    _this.selections.push(n);
                }
            }));
        }
        else {
            if (this.selections.findIndex((/**
             * @param {?} s
             * @return {?}
             */
            function (s) { return s[_this.idField] === data[_this.idField]; })) === -1) {
                this.selections.push(data);
            }
        }
        if (emitEvent) {
            this.selections$.next({ action: 'clicked' });
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.unSelectItem = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.selections = this.selections.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            // return item[this.idField] !== data[this.idField];
            return JSON.stringify(item) !== JSON.stringify(data);
        }));
        this.selections$.next({ action: 'clicked' });
    };
    /**
     * @param {?} datas
     * @return {?}
     */
    ComboService.prototype.selectAll = /**
     * @param {?} datas
     * @return {?}
     */
    function (datas) {
        var _this = this;
        (datas || []).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!_this.selections.find((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i[_this.idField] === n[_this.idField]; }))) {
                _this.selections.push(n);
            }
        }));
        // this.selections = datas;
        this.selections$.next({ action: 'clicked' });
    };
    /**
     * @param {?} datas
     * @return {?}
     */
    ComboService.prototype.unSelectAll = /**
     * @param {?} datas
     * @return {?}
     */
    function (datas) {
        var _this = this;
        // this.selections = [];
        datas = datas || [];
        this.selections = (this.selections || []).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return datas.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i[_this.idField] === n[_this.idField]; })) === -1; }));
        this.selections$.next({ action: 'clicked' });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ComboService.prototype.isSelect = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (this.selections && this.selections.length) {
            return this.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item[_this.idField] === id; })) !== undefined;
        }
        return false;
    };
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} callback
     * @return {?}
     */
    ComboService.prototype.loadData = /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} callback
     * @return {?}
     */
    function (data, selectValues, callback) {
        if (selectValues === void 0) { selectValues = ''; }
        if (data) {
            if (selectValues === null || selectValues === undefined) {
                selectValues = '';
            }
            if (typeof selectValues === 'boolean') {
                selectValues = '' + selectValues;
            }
            // this.data$.next(data);
            if (selectValues) {
                /** @type {?} */
                var vals = [(selectValues + '')];
                if (this.multiSelect) {
                    vals = (selectValues + '').split(this.separator);
                }
                /** @type {?} */
                var selectedItems = vals.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return callback(data, val);
                }));
                selectedItems = selectedItems.filter((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return el; }));
                if ((!this.selections || !this.selections.length) && selectedItems.length) {
                    this.selections = selectedItems;
                }
            }
            else {
                this.selections = [];
            }
            this.selections$.next({ action: 'initData' });
        }
    };
    /**
     * @param {?} params
     * @return {?}
     */
    ComboService.prototype.filterDataOnServer = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        this.getData(params).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            _this.closeLoading();
            _this.loadingService.clearAll();
            if (r && r.items) {
                switch (_this.displayType) {
                    case 'LOOKUPLIST': {
                        _this.loadLookUpDataTable(r, true);
                        break;
                    }
                    case 'LOOKUPTREELIST': {
                        _this.loadLookUpDataTree(r);
                        break;
                    }
                }
            }
            else {
                _this.data$.next([]);
            }
        }));
    };
    // 客户端过滤
    // 客户端过滤
    /**
     * @param {?} val
     * @param {?=} field
     * @return {?}
     */
    ComboService.prototype.filterData = 
    // 客户端过滤
    /**
     * @param {?} val
     * @param {?=} field
     * @return {?}
     */
    function (val, field) {
        var _this = this;
        if (field === void 0) { field = 'text'; }
        if (val) {
            /** @type {?} */
            var data = [];
            if (this.displayType === 'LOOKUPLIST' || this.displayType === 'LIST') {
                data = this.data.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var itemval = _this.getValueByObj(field, item);
                    if (itemval != '' && itemval !== null && itemval !== undefined) {
                        itemval = String(itemval).toLowerCase();
                    }
                    return itemval.indexOf(val.toLowerCase()) > -1;
                }));
            }
            // const data = this.data
            //     ? this.data.filter(item => {
            //         if (this.getValueByObj(filed, item)) {
            //             return String(this.getValueByObj(filed, item)).indexOf(val) > -1;
            //         } else if (item.data && this.getValueByObj(filed, item.data)) {
            //             return String(this.getValueByObj(filed, item.data)).indexOf(val) > -1;
            //         }
            //     })
            //     : [];
            this.data$.next(data);
        }
        else {
            this.data$.next(this.data);
        }
    };
    /**
     * @return {?}
     */
    ComboService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        return this.selections;
    };
    /**
     * @return {?}
     */
    ComboService.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.selections = [];
    };
    /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    ComboService.prototype.getValue = /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    function (prop, selections) {
        var _this = this;
        selections = selections ? selections : this.selections;
        if (selections && selections.length) {
            /** @type {?} */
            var tmp = selections.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return _this.getValueByObj(prop, item);
            }));
            if (tmp && (tmp.length > 1 || tmp.length === 0)) {
                return tmp.join(this.separator);
            }
            else {
                return tmp[0];
            }
        }
        return '';
    };
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.getValueByObj = /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        var resultVal = '';
        if (field.indexOf('.') === -1) {
            if (data.hasOwnProperty(field)) {
                resultVal = data[field];
            }
            else {
                // console.log(`%cError: The %c"${field}"%c is not in `,
                //         'color: #bb0000;font-weight: bold;', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', data);
                resultVal = null;
            }
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    // console.log(`%cError: The %c"${key}"%c is not in  `,
                    // 'color: #bb0000;font-weight: bold', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', obj);
                    return null;
                }
            }), data);
        }
        return resultVal;
    };
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} selectedIds
     * @return {?}
     */
    ComboService.prototype.initData = /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} selectedIds
     * @return {?}
     */
    function (params, method, selectedIds) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'get'; }
        if (selectedIds === void 0) { selectedIds = ''; }
        switch (this.displayType) {
            case 'TreeList':
            case 'LIST': {
                if (params.data) {
                    params = params.data;
                }
                this.getData(params, method).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var __data = d;
                    if (!_this.uri) {
                        __data = _this.data;
                    }
                    if (_this.displayType === 'TreeList') {
                        _this.loadDataTree(__data);
                    }
                    else {
                        _this.loadDataTable(__data);
                    }
                    _this.loadSuccess$.next(true);
                }));
                break;
            }
            case 'LOOKUPLIST':
            case 'LOOKUPTREELIST': {
                // TFS 466104
                if (!selectedIds) {
                    this.selections = [];
                    this.selectedValues = '';
                }
                this.loadLookupData(params, selectedIds, 'get', this.displayType === 'LOOKUPTREELIST');
                break;
            }
        }
        return this.loadSuccess$;
    };
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    /**
     * @private
     * @param {?} treeNodes
     * @param {?=} arr
     * @return {?}
     */
    ComboService.prototype.treeNodesToFlatData = 
    // 此方法用于筛选选中的数据
    // 进一步优化：需要服务器端提供一个不构造树结构、根据ID返回简单的列表即可
    /**
     * @private
     * @param {?} treeNodes
     * @param {?=} arr
     * @return {?}
     */
    function (treeNodes, arr) {
        var _this = this;
        if (arr === void 0) { arr = []; }
        treeNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!n['addtional']) {
                arr.push(n.data);
            }
            if (n.children && n.children.length) {
                _this.treeNodesToFlatData(n.children, arr);
            }
        }));
    };
    /**
     * @private
     * @param {?} params
     * @param {?} selectedIds
     * @param {?=} method
     * @param {?=} isTree
     * @return {?}
     */
    ComboService.prototype.loadLookupData = /**
     * @private
     * @param {?} params
     * @param {?} selectedIds
     * @param {?=} method
     * @param {?=} isTree
     * @return {?}
     */
    function (params, selectedIds, method, isTree) {
        var _this = this;
        if (method === void 0) { method = 'get'; }
        if (isTree === void 0) { isTree = false; }
        var data = params.data, enableFullTree = params.enableFullTree, loadTreeDataType = params.loadTreeDataType, searchValue = params.searchValue;
        if (data) {
            params = { customData: data };
        }
        if (this.displayType === 'LOOKUPTREELIST' && !this['treeToList']) {
            params.enableFullTree = enableFullTree;
            // params.loadTreeDataType = 'loadall'; 
            params.searchValue = { "category": "all" };
            this.treeloadconfig = { enableFullTree: enableFullTree, loadTreeDataType: loadTreeDataType };
            if (!isNaN(Number(params.expandLevel))) {
                // 前端 -1 不展开   0 全展开
                // 后端  0 不展开  -1 全展开
                if (params.expandLevel) {
                    if (params.expandLevel === -1) {
                        params.expandLevel = 0;
                    }
                }
                else {
                    params.expandLevel = -1;
                }
                params.searchValue['layerNum'] = params.expandLevel;
            }
            params.searchValue = JSON.stringify(params.searchValue);
        }
        if (searchValue) {
            params.searchValue = searchValue;
        }
        if (this['treeToList']) {
            isTree = false;
            this.displayType = 'LOOKUPLIST';
        }
        this.getData(params, method).pipe(switchMap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (selectedIds) {
                return _this.getSelectedItems(selectedIds).pipe(map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (d && d.items) {
                        // data.selectedItems = isTree ?  d.items.map(n => n.data) : d.items;
                        if (isTree) {
                            /** @type {?} */
                            var arr = [];
                            _this.treeNodesToFlatData(d.items, arr);
                            data.selectedItems = arr;
                        }
                        else {
                            data.selectedItems = d.items;
                        }
                    }
                    else {
                        if (Array.isArray(d)) {
                            data.selectedItems = (selectedIds + '').split(_this.separator).map((/**
                             * @param {?} val
                             * @return {?}
                             */
                            function (val) {
                                if (isTree) {
                                    return _this.treeNodeToFlatData(d, val, _this.idField);
                                }
                                else {
                                    return d.find((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    function (n) { return n[_this.idField] + '' == val || n[_this.textField] == val; }));
                                }
                            })).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n != undefined && n != null; }));
                        }
                    }
                    return data;
                })), catchError((/**
                 * @return {?}
                 */
                function () {
                    return of(data);
                })));
            }
            else {
                data.selectedItems = [];
            }
            return of(data);
        }))).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.loadingService.clearAll();
            if (data) {
                if (isTree) {
                    _this.loadLookUpDataTree(data);
                }
                else {
                    _this.loadLookUpDataTable(data);
                }
            }
            _this.loadSuccess$.next(true);
        }));
    };
    /**
     * @param {?} selIds
     * @return {?}
     */
    ComboService.prototype.getSelectedItems = /**
     * @param {?} selIds
     * @return {?}
     */
    function (selIds) {
        /** @type {?} */
        var searchParam = {
            category: 'fav', favoriteIds: ('' + selIds).split(this.separator)
        };
        /** @type {?} */
        var p = { searchValue: JSON.stringify(searchParam), enableFullTree: false, loadTreeDataType: 'default' };
        return this.getData(p);
    };
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} loadChild
     * @return {?}
     */
    ComboService.prototype.getData = /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} loadChild
     * @return {?}
     */
    function (params, method, loadChild) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'get'; }
        if (loadChild === void 0) { loadChild = false; }
        if (this.uri) {
            // this.data = []
            // tfs 470519
            if (this.data && this.data.length && !loadChild) {
                this.data = [];
            }
            params['treeToList'] = this['treeToList'];
            params['navTreeToList'] = this['navTreeToList'];
            if (this['treeToList']) {
                this.displayType = 'LOOKUPLIST';
            }
            this.showLoading();
            if (this.comboHttp) {
                if (this.context) {
                    this.comboHttp.context = this.context;
                }
                return this.comboHttp.getData(this.uri, params, method).pipe(tap((/**
                 * @return {?}
                 */
                function () {
                    _this.closeLoading();
                })));
            }
            else {
                return this.http.request(method, this.uri, params).pipe(tap((/**
                 * @return {?}
                 */
                function () {
                    _this.closeLoading();
                })));
            }
        }
        else {
            if (this.data) {
                return of(this.data).pipe(delay(10));
            }
            else {
                return of([]).pipe(delay(10));
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.loadDataTable = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            return dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[_this.idField] + '' == val || d[_this.textField] == val; }));
        }));
        this.closeLoading();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComboService.prototype.loadDataTree = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            return eachData(dataArr, val, _this.idField);
            /**
             * @param {?} paramData
             * @param {?} paramVal
             * @param {?} idField
             * @return {?}
             */
            function eachData(paramData, paramVal, idField) {
                /** @type {?} */
                var rtnData = '';
                paramData.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (d.data[idField] == paramVal) {
                        rtnData = d.data;
                        return true;
                    }
                    else if (d.children && d.children.length) {
                        rtnData = eachData(d.children, paramVal, idField);
                    }
                    else {
                        return false;
                    }
                }));
                return rtnData;
            }
        }));
        this.closeLoading();
    };
    /**
     * @param {?} resData
     * @param {?=} sortable
     * @return {?}
     */
    ComboService.prototype.loadLookUpDataTable = /**
     * @param {?} resData
     * @param {?=} sortable
     * @return {?}
     */
    function (resData, sortable) {
        var _this = this;
        if (sortable === void 0) { sortable = false; }
        this.closeLoading();
        if (typeof resData === 'object') {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            if (!sortable && resData.columns) {
                this.columns = resData.columns;
            }
            if (resData.pageInfo) {
                this.pageInfo = resData.pageInfo;
                this.pageInfo.total = resData.total ? resData.total : 0;
            }
            if (resData.items) {
                this.data = resData.items;
            }
        }
        if (resData && resData.selectedItems) {
            this.selections = resData.selectedItems || [];
        }
        if (this.selections) {
            /** @type {?} */
            var ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField]; })).join(this.separator);
            if (ids !== this['__SELECTEDIDS__']) {
                // this.selectedValues = ids;
                this['__SELECTEDIDS__'] = ids;
            }
        }
        this.loadData(this.data, this['__SELECTEDIDS__'], (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            /** @type {?} */
            var isMaped = dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[_this.idField] + '' == val; }));
            if (_this.selections) {
                isMaped = !isMaped ? _this.selections.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d[_this.idField] + '' == val; })) : isMaped;
            }
            return isMaped;
        }));
    };
    /**
     * @param {?} nodes
     * @param {?=} allData
     * @return {?}
     */
    ComboService.prototype.checkNodeCanBeSelect = /**
     * @param {?} nodes
     * @param {?=} allData
     * @return {?}
     */
    function (nodes, allData) {
        var _this = this;
        if (allData === void 0) { allData = true; }
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.hasOwnProperty('addtional')) {
                    node.selectable = !node['addtional'];
                }
                if (node.children && node.children.length) {
                    _this.checkNodeCanBeSelect(node.children, allData);
                }
                else {
                    if (allData) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    };
    /**
     * @param {?} resData
     * @return {?}
     */
    ComboService.prototype.loadLookUpDataTree = /**
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        var _this = this;
        this.closeLoading();
        if (!resData) {
            return;
        }
        if (resData instanceof Array) {
            this.data = resData;
            if (resData['selectedItems']) {
                this.selections = resData['selectedItems'] || [];
            }
        }
        else {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            this.columns = resData.columns;
            this.treeInfo = resData.treeInfo;
            this.treeInfo$.next(this.treeInfo);
            if (resData.selectedItems) {
                this.selections = resData.selectedItems || [];
            }
            if (this.treeInfo && !this.treeInfo['treeDataIsInit']) {
                if (this.treeInfo.layerType.toLowerCase() === 'pathcode') {
                    this.data = this.lookupUtils.makeTree(resData.items, this.treeInfo);
                }
                else {
                    this.data = this.lookupUtils.makeTreeWithParentID(resData.items, '', this.treeInfo.dataField + "." + this.treeInfo.parentField, this.idField);
                }
            }
            else if (resData.items) {
                // this.data = resData.items;
                /** @type {?} */
                var isLoadAllTreeData = (/**
                 * @return {?}
                 */
                function () {
                    if (_this.treeloadconfig.loadTreeDataType === 'default') {
                        return _this.treeInfo.loadDataType === 'all';
                    }
                    else {
                        return _this.treeloadconfig.loadTreeDataType === 'loadall';
                    }
                });
                this.data = this.checkNodeCanBeSelect(resData.items, isLoadAllTreeData());
            }
        }
        if (this.selections) {
            /** @type {?} */
            var ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField]; })).join(this.separator);
            if (ids !== this['__SELECTEDIDS__']) {
                this['__SELECTEDIDS__'] = ids;
            }
        }
        this.loadData(this.data, this['__SELECTEDIDS__'], (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        function (dataArr, val) {
            return _this.treeNodeToFlatData(dataArr, val, _this.idField);
        }));
    };
    /**
     * @param {?} paramData
     * @param {?} paramVal
     * @param {?} idField
     * @return {?}
     */
    ComboService.prototype.treeNodeToFlatData = /**
     * @param {?} paramData
     * @param {?} paramVal
     * @param {?} idField
     * @return {?}
     */
    function (paramData, paramVal, idField) {
        var _this = this;
        /** @type {?} */
        var rtnData = '';
        paramData.find((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if ((d.data && d.data[idField] == paramVal) || d[idField] == paramVal) {
                rtnData = d.data;
                return true;
            }
            else if (d.children && d.children.length) {
                rtnData = _this.treeNodeToFlatData(d.children, paramVal, idField);
                return rtnData ? true : false;
            }
            else {
                return false;
            }
        }));
        return rtnData;
    };
    /**
     * @private
     * @return {?}
     */
    ComboService.prototype.showLoading = /**
     * @private
     * @return {?}
     */
    function () {
        this.loading = this.loadingService.show({ container: this.panelElement, delay: 100 });
    };
    /**
     * @return {?}
     */
    ComboService.prototype.closeLoading = /**
     * @return {?}
     */
    function () {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
    };
    ComboService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComboService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LoadingService },
        { type: Injector }
    ]; };
    return ComboService;
}());
export { ComboService };
if (false) {
    /** @type {?} */
    ComboService.prototype.selections$;
    /** @type {?} */
    ComboService.prototype.isOpen$;
    /** @type {?} */
    ComboService.prototype.data$;
    /** @type {?} */
    ComboService.prototype.serachValue$;
    /** @type {?} */
    ComboService.prototype.loadSuccess$;
    /** @type {?} */
    ComboService.prototype.treeInfo$;
    /** @type {?} */
    ComboService.prototype.selections;
    /** @type {?} */
    ComboService.prototype.idField;
    /** @type {?} */
    ComboService.prototype.valueField;
    /** @type {?} */
    ComboService.prototype.textField;
    /** @type {?} */
    ComboService.prototype.multiSelect;
    /** @type {?} */
    ComboService.prototype.displayType;
    /** @type {?} */
    ComboService.prototype.separator;
    /** @type {?} */
    ComboService.prototype._uri;
    /** @type {?} */
    ComboService.prototype.selectedValues;
    /** @type {?} */
    ComboService.prototype.pageInfo;
    /** @type {?} */
    ComboService.prototype.treeInfo;
    /** @type {?} */
    ComboService.prototype.columns;
    /** @type {?} */
    ComboService.prototype.context;
    /** @type {?} */
    ComboService.prototype.remoteSearch;
    /** @type {?} */
    ComboService.prototype.panelElement;
    /** @type {?} */
    ComboService.prototype.treeSearchHandler;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.treeloadconfig;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype._data;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.lookupUtils;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.comboHttp;
    /** @type {?} */
    ComboService.prototype.http;
    /** @type {?} */
    ComboService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,