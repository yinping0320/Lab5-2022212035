/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NotifyService } from '@farris/ui-notify';
import { Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, Injector, NgZone } from '@angular/core';
import { Subject, interval, of, fromEvent } from 'rxjs';
import { NgControl } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { takeUntil, filter, skip, debounceTime, throttle, take, throwIfEmpty } from 'rxjs/operators';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
import { ComboLocaleService } from './services/combo.locale.service';
import { CommonUtils, reqAnimFrame } from '@farris/ui-common';
import { EventManager } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
var nextUniqueId = 0;
var BaseComboComponent = /** @class */ (function () {
    function BaseComboComponent(el, cdr, document, render, comboService, injector) {
        var _this = this;
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '';
        this.panelWidth = 300;
        this.panelHeight = 'auto';
        /**
         * 下拉面板宽度与输入框宽度保持一至， 默认为 true
         */
        this.autoWidth = true;
        this.enableClear = true;
        /**
         * 禁用只读时显示 placeholder
         */
        this.forcePlaceholder = false;
        /**
         * 任意输入 20210202
         */
        this.nosearch = false;
        // 鼠标滑过显示文本内容
        this.enableTitle = true;
        /**
         * 展示类型： text文本，tag标签。 默认 text
         */
        this.viewType = 'text';
        this.displayText = '';
        this.maxHeight = 200;
        this.enableCancelSelected = false;
        // 如果面板已打开， 点击清空按钮时是否关闭面板。true: 关闭； false: 不关闭；
        this.hidePanelOnClear = false;
        /**
         * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
         */
        this.useValue = false;
        /**
         * 分隔符
         */
        this.separator = ',';
        this.treeToList = false;
        this.navTreeToList = false;
        this.emptyMsg = '暂无数据';
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        this.isOpen = false;
        this.comPosition = {};
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this._cmbPanel = null;
        this._comboPanelCreated$ = new Subject();
        // private _hasPosited = false;
        // private _container: Element;
        this.willHide$ = new Subject();
        this.panelListener = null;
        this.ngZone = null;
        this.mouseWheelEvent = null;
        this.textChangeSubject = new Subject();
        this.initdataSubscription = null;
        this.customData = null;
        this.originalText = '';
        this.isTextChange = false;
        this.treeClientSearch = new Subject();
        this.ro = null;
        this.onChange = (/**
         * @return {?}
         */
        function () { return null; });
        this.onTouched = (/**
         * @return {?}
         */
        function () { return null; });
        this.initToggleAction();
        this.initSelectionsChangeAction();
        this.initDatasChangeAction();
        this.commonUtils = this.injector.get(CommonUtils, null);
        this.willHide$.pipe(takeUntil(this.destroy$), debounceTime(110)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.nosearch && _this.displayText !== _this.originalText) {
                _this.displayText = _this.originalText;
                if (_this.isLookup()) {
                    _this.onChange(_this.displayText);
                }
                else {
                    /** @type {?} */
                    var _displayText = _this.comboService.getValue(_this.textField);
                    _this.onValueChange({ text: _displayText, value: _this.selectedValues, selections: _this.selections });
                }
            }
            _this['_searchKeyWords'] = '';
            _this.onTouched();
            _this.hidePanel.emit(_this);
        }));
        this.ngZone = this.injector.get(NgZone);
        this.eventMgr = this.injector.get(EventManager);
        this.emitTextChange();
        this.notifySer = this.injector.get(NotifyService, null);
    }
    Object.defineProperty(BaseComboComponent.prototype, "context", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.comboService.context = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "mappingField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mapFields;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.mapFields = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.data = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "idField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.idField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "valueField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.valueField ? this.comboService.valueField : this.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.valueField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "textField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.textField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.textField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "multiSelect", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.multiSelect;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.multiSelect = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "uri", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.uri;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.uri = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selectedValues", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.selectedValues;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.selectedValues = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selectedValuesStr", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.selectedValues === null || this.selectedValues === undefined) {
                this.selectedValues = '';
            }
            return (this.selectedValues) + '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "remoteSearch", {
        /** 远端过滤 */
        get: /**
         * 远端过滤
         * @return {?}
         */
        function () {
            return this.comboService.remoteSearch;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.remoteSearch = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "cmbPanel", {
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            if (cmp) {
                this._cmbPanel = cmp;
                this.ro.observe(cmp.nativeElement);
                this._comboPanelCreated$.next(cmp);
            }
            else {
                this._cmbPanel = null;
                // this.ro.unobserve(this.el.nativeElement);
                if (this.ro) {
                    this.ro.disconnect();
                }
                this._comboPanelCreated$.next(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.comboService.selections) {
                return this.comboService.selections.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== null && n !== undefined; }));
            }
            return [];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.comboService.selections = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.localeService = this.injector.get(ComboLocaleService, '');
        if (this.localeService) {
            /** @type {?} */
            var localConfig = this.localeService.getLocaleConfig();
            if (localConfig) {
                if (!this.placeholder) {
                    this.placeholder = localConfig['placeholder'] || '请选择';
                }
                this.emptyMsg = localConfig['emptyMsg'] || '暂无数据';
            }
        }
        this.comboService.separator = this.separator;
        this.comboService['treeToList'] = this.treeToList;
        this.comboService['navTreeToList'] = this.navTreeToList;
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var that = this;
        this.ngControl = this.injector.get(NgControl, null);
        fromEvent(window, 'resize').pipe(takeUntil(this.destroy$)).pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return interval(100); }))).subscribe((/**
         * @return {?}
         */
        function () {
            _this.updatePanelWidth();
            if (_this.isOpen) {
                _this.comboService.isOpen$.next(false);
                _this.willHide$.next();
            }
        }));
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    that.updatePanelWidth();
                }));
            }));
            /** @type {?} */
            var reszieTimer_1 = null;
            this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    if (reszieTimer_1) {
                        clearTimeout(reszieTimer_1);
                    }
                    reszieTimer_1 = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (that._cmbPanel && that.panelElement) {
                            reqAnimFrame((/**
                             * @return {?}
                             */
                            function () {
                                that.updatePosition(that._cmbPanel.nativeElement);
                                if (that._cmbPanel.nativeElement.className.indexOf('f-area-show') === -1) {
                                    that.render.addClass(that._cmbPanel.nativeElement, 'f-area-show');
                                }
                            }));
                        }
                    }), 10);
                }));
            }));
        }
        this.comboService.injectService();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboService.serachValue$.unsubscribe();
        if (this.mouseWheelEvent) {
            this.mouseWheelEvent();
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.updatePanelWidth = /**
     * @private
     * @return {?}
     */
    function () {
        var width = this.getInputSizeInfo().width;
        this.panelWidth = this.autoWidth ? width : this.panelWidth;
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    BaseComboComponent.prototype.onClick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event === void 0) { $event = null; }
        if ($event) {
            if ($event.stopPropagation) {
                $event.stopPropagation();
            }
            else {
                if ($event.originalEvent) {
                    $event.originalEvent.stopPropagation();
                }
            }
        }
        // 重复执行面板关闭事件 故注释掉 20220917
        // if (this.isOpen) {
        //     this.willHide$.next();
        // } else {
        //     this.comboService.isOpen$.next(!this.isOpen);
        // }
        this.comboService.isOpen$.next(!this.isOpen);
        if (this.input && this.input.textbox) {
            this.input.textbox.nativeElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onTouched();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // // 启用任意输入后，文本框得到焦点后不弹出下拉面板。2021/02/19
        // if (this.nosearch) {
        //     return ;
        // }
        // if (!this.isOpen) {
        //     this.comboService.isOpen$.next(true);
        //     // 延迟执行变更检测 更新弹出框位置
        // of('').pipe(debounceTime(0)).subscribe(() => {
        //     this.cdr.detectChanges();
        // });
        // } else {
        //     this.hide();
        // }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    BaseComboComponent.prototype.onInputclick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event && $event.stopPropagation) {
            $event.stopPropagation();
        }
        this.comboService.isOpen$.next(!this.isOpen);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.blur();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.selectedValues = '';
        this.selections = [];
        this.comboService.selections = [];
        this.onValueChange({ text: '', value: '', selections: [] });
        this.clear.emit();
        if (this.isOpen && this.hidePanelOnClear) {
            // this.comboService.isOpen$.next(false);
            this.willHide$.next();
        }
        else {
            if (this.isOpen && this.comboService.displayType === 'LIST') {
                this.comboService.serachValue$.next('');
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.viewType === 'text' ? this.input.inputGroup : this.input2;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.emitTextChange = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this.textChangeSubject.pipe(debounceTime(200)).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var _selectedValues = _this.selectedValues;
            /** @type {?} */
            var val = r ? r : _this.displayText;
            if (r === '') {
                _this.onClear();
            }
            else if (_this.nosearch) {
                _this.onValueChange({ text: r, value: '', selections: _this.selections, nosearch: true });
            }
            if (!_this.remoteSearch) {
                if (!_this.multiSelect) {
                    if (_this.comboService.displayType === 'LOOKUPTREELIST') {
                        _this.treeClientSearch.next(val);
                    }
                    else {
                        _this.comboService.serachValue$.next(val);
                    }
                }
                else {
                    /** @type {?} */
                    var valArr = (val + '').split(_this.separator);
                    /** @type {?} */
                    var appendVal = valArr[valArr.length - 1] ? valArr[valArr.length - 1] : '';
                    _this.comboService.serachValue$.next(appendVal);
                }
                // if (_selectedValues !== this.selectedValues) {
                //     this.onValueChange({ text: this.displayText, value: this.selectedValues, selections: this.selections });
                // }
            }
            else {
                _this.filterDataOnServer(val, '*');
            }
        }));
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    BaseComboComponent.prototype.__createPanel = /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    function (value, searchParam) {
        var _this = this;
        if (searchParam === void 0) { searchParam = null; }
        /** @type {?} */
        var params = {};
        /** @type {?} */
        var method = 'get';
        if (value instanceof Object) {
            var _p = value.params, data = value.data, _m = value.method, showDialog = value.showDialog;
            if (showDialog === false) {
                return;
            }
            if (data) {
                params = { data: data };
                this.customData = data;
            }
            else {
                if (_p) {
                    params = { data: _p };
                    this.customData = _p;
                }
                else {
                    this.customData = null;
                }
            }
            if (_m) {
                method = _m;
            }
        }
        else if (typeof value === 'boolean') {
            if (value === false) {
                return;
            }
        }
        this.initCreatPanelAction();
        if (this.uri) {
            this.updateSelectedValues();
            if (this.isLookup()) {
                this.isOpen = true;
            }
        }
        else {
            this.isOpen = true;
        }
        if (this.comboService.displayType === 'LOOKUPTREELIST') {
            params.enableFullTree = this['enableFullTree'];
            params.loadTreeDataType = this['loadTreeDataType'];
        }
        if (this.isLookup() && this.input && this.nosearch) {
            this.input.textbox.nativeElement.disabled = true;
        }
        /** @type {?} */
        var focusInput = (/**
         * @return {?}
         */
        function () {
            if (_this.isLookup() && _this.input && _this.nosearch) {
                _this.input.textbox.nativeElement.disabled = false;
                _this.input.focus();
            }
        });
        if (searchParam) {
            params.searchValue = searchParam.searchValue;
        }
        /** @type {?} */
        var selectedIds = this.selectedValues;
        if (this.isLookup()) {
            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse'] ||
                (this.mapFields && !this.mapFields[this.idField])) {
                selectedIds = this.comboService['__SELECTEDIDS__'];
            }
            /** @type {?} */
            var _expLevel = this['expandLevel'];
            params['expandLevel'] = _expLevel;
        }
        this.initdataSubscription = this.comboService.initData(params, method, selectedIds).pipe(throwIfEmpty(focusInput)).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!_this.isOpen) {
                _this.isOpen = true;
            }
            focusInput();
            _this.cdr.detectChanges();
        }));
        // 禁止滚动
        // this.render.setStyle(this.containerElement, 'pointer-events', 'auto');
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.registerDocumentEvent();
        }));
    };
    // 显示前事件
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onBeforeShow = 
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.beforeShow) {
            this.beforeShow = (/**
             * @return {?}
             */
            function () { return of(''); });
        }
        return this.beforeShow(this).pipe(take(1));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.isLookup = /**
     * @private
     * @return {?}
     */
    function () {
        return this.comboService.displayType.indexOf('LOOKUP') > -1;
    };
    // 隐藏前事件
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onBeforeHide = 
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.beforeHide) {
            this.beforeHide = (/**
             * @return {?}
             */
            function () { return of(''); });
        }
        this.beforeHide(this).pipe(take(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'boolean') {
                if (value) {
                    _this.hide(true);
                }
            }
            else if (typeof value === 'object') {
                if (value.hide) {
                    _this.hide(true);
                }
                else {
                    if (value.message) {
                        if (_this.notifySer) {
                            _this.notifySer.warning(value.message);
                        }
                        else {
                            // console.info(value.message);
                        }
                    }
                }
            }
            else {
                _this.hide(true);
            }
        }));
    };
    // 显示或隐藏下拉框
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initToggleAction = 
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.isOpen$.pipe(debounceTime(20), takeUntil(this.destroy$), skip(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.readonly || _this.disabled) {
                return;
            }
            /** @type {?} */
            var open = value;
            /** @type {?} */
            var searchParam = null;
            if (typeof value === 'object') {
                open = value.isOpen;
                searchParam = value.search;
            }
            if (open) {
                _this.onBeforeShow().subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    _this.__createPanel(v, searchParam);
                }));
                return;
            }
            else {
                _this.onBeforeHide();
            }
            _this.cdr.detectChanges();
        }));
        this._comboPanelCreated$.pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return !!value; }))).subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            cmp.nativeElement.style.display = '';
            _this.initCreatPanelAction();
            _this.panelElement.appendChild(cmp.nativeElement);
            /** @type {?} */
            var transitionFlag = true;
            cmp.nativeElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    _this.showPanel.emit(_this);
                }
            }));
            if (_this.isLookup()) {
                cmp.nativeElement.style.width = _this.panelWidth + "px";
                cmp.nativeElement.style.height = _this.panelHeight + "px";
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.render.addClass(cmp.nativeElement, 'f-area-show');
                }), 0);
            }
            // this.updatePosition(cmp.nativeElement);
            // this.cdr.detectChanges();
        }));
        this.destroy$.pipe(take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.comboService.closeLoading();
            nextUniqueId = 0;
            if (_this.panelListener) {
                _this.panelListener();
            }
            if (_this.initdataSubscription) {
                _this.initdataSubscription.unsubscribe();
                _this.initdataSubscription = null;
            }
            _this.removePanelElement();
        }));
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    BaseComboComponent.prototype.iframeEventHandle = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var e_1, _a;
        /** @type {?} */
        var iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            try {
                for (var iframes_1 = tslib_1.__values(iframes), iframes_1_1 = iframes_1.next(); !iframes_1_1.done; iframes_1_1 = iframes_1.next()) {
                    var iframe = iframes_1_1.value;
                    /** @type {?} */
                    var iframeDoc = iframe.contentDocument;
                    if (iframeDoc) {
                        iframeDoc[action]('mousedown', this._documentClickEvent);
                        iframeDoc[action]('mousewheel', this._documentClickEvent);
                        iframeDoc[action]('DOMMouseScroll', this._documentClickEvent);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iframes_1_1 && !iframes_1_1.done && (_a = iframes_1.return)) _a.call(iframes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.removeDocumentListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._documentClickEvent) {
            document.removeEventListener('mousedown', this._documentClickEvent, true);
            document.removeEventListener('mousewheel', this._documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', this._documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', this._documentClickEvent, true);
            }
            this.iframeEventHandle('removeEventListener');
            this._documentClickEvent = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.registerDocumentEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 注册 mousedown 事件 隐藏panel
        document.addEventListener('mousedown', (this._documentClickEvent = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === 'mousewheel' && _this.el.nativeElement.contains(event.target)) {
                _this.comboService.isOpen$.next(false);
                return;
            }
            if (!_this.el.nativeElement.contains(event.target) && _this._cmbPanel && !_this.contains(_this._cmbPanel, event)) {
                _this.comboService.isOpen$.next(false);
                // this.willHide$.next();
            }
        })), true);
        document.addEventListener('mousewheel', this._documentClickEvent, true);
        document.addEventListener('DOMMouseScroll', this._documentClickEvent, true);
        if (top !== window) {
            top.document.body.addEventListener('mousedown', this._documentClickEvent, true);
        }
        this.iframeEventHandle('addEventListener');
    };
    // 创建下拉面板时事件
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initCreatPanelAction = 
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.panelElement) {
            return;
        }
        this.createPanel(document.body);
        this.panelListener = this.render.listen(this.panelElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            if (_this.panelElement) {
                document.body.removeChild(_this.panelElement);
                _this.panelElement = null;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initSelectionsChangeAction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.selections$.pipe(takeUntil(this.destroy$), debounceTime(100)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.action === 'initData') {
                _this.onSelectionsChange(_this.selections);
            }
            else {
                _this.onSelectionsChangeDefault();
                if (_this.isLookup()) {
                    _this.updateSelectedValues();
                }
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    BaseComboComponent.prototype.initDatasChangeAction = /**
     * @protected
     * @return {?}
     */
    function () { };
    // canNull 解决取消选中时依然显示
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onSelectionsChangeDefault = 
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        /** @type {?} */
        var _selectedValues = this.comboService.getValue(this.idField);
        if (this.displayText !== _displayText && !this.nosearch) {
            this.displayText = _displayText || this.displayText;
            this.displayText = this.displayText || '';
            this.originalText = _selectedValues ? _displayText : this.displayText;
        }
        if (this.input) {
            this.input.textbox.nativeElement.value = this.displayText;
        }
        this.selectedValues =
            (_selectedValues !== '' && _selectedValues !== undefined && _selectedValues !== null) ? _selectedValues : this.selectedValues;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    BaseComboComponent.prototype.onSelectionsChange = /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    function (v) { };
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    BaseComboComponent.prototype.updateMappingFieldValue = /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    function (clearMapFields) {
        if (clearMapFields === void 0) { clearMapFields = false; }
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            if (clearMapFields) {
                this.selectedValues = '';
            }
            if (bindingData.setValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n !== ''; }));
                }
                /** @type {?} */
                var mappingField = this.mappingField ? this.mappingField : '';
                bindingData.setValue(pathArr.concat(mappingField.split('.')), this.selectedValues, true, true);
            }
            else if (this.commonUtils) {
                this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            }
            // if (!bindingData.setValue && this.commonUtils) {
            //     this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            // }
        }
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.updateSelectedValues = /**
     * @return {?}
     */
    function () {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData.getValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return value !== ''; }));
                }
                /** @type {?} */
                var mappingField = this.mappingField ? this.mappingField : '';
                this.selectedValues = bindingData.getValue(pathArr.concat(mappingField.split('.')));
            }
            else if (this.commonUtils) {
                this.selectedValues = this.commonUtils.getValue(this.mappingField, bindingData);
            }
        }
        else if (!this.mappingField) {
            // this.selectedValues = this.displayText
        }
    };
    /**
     * @param {?=} val
     * @return {?}
     */
    BaseComboComponent.prototype.onTextChange = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        this.isTextChange = true;
        if (this.nosearch) {
            this.selectedValues = val;
            this.updateMappingFieldValue(this.isLookup());
            this.onChange(val);
        }
        if (!this.isOpen && this.comboService.displayType === 'LIST') {
            this.isOpen = true;
        }
        this.textChangeSubject.next(val);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseComboComponent.prototype.onValueChange = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.displayText = changes.text;
        this.originalText = this.displayText;
        if (!this.uri && this.data && this.data.length > 0 && (!this['displayType'] || this.useValue)) {
            this.onChange(this.selectedValues);
        }
        else {
            this.onChange(this.displayText);
        }
        // if (!changes.nosearch) {
        // }
        this.valueChange.emit(changes);
        this.updateMappingFieldValue();
        this.onTouched();
        // if (this.isOpen && changes.emitHidePanel) { this.willHide$.next(); }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseComboComponent.prototype.onSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) { };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseComboComponent.prototype.onUnSelected = /**
     * @param {?} item
     * @return {?}
     */
    function (item) { };
    /**
     * emit: 默认为 true;
     */
    /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    BaseComboComponent.prototype.hide = /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        if (!this.isOpen) {
            return;
        }
        this.removeDocumentListener();
        this.isOpen = false;
        if (emit) {
            this.willHide$.next();
        }
        if (this.initdataSubscription) {
            this.initdataSubscription.unsubscribe();
            this.initdataSubscription = null;
        }
        this.removePanelElement();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isOpen) {
            return;
        }
        this.onBeforeShow().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.__createPanel(value);
        }));
        this.cdr.detectChanges();
    };
    /**
     * @private
     * @param {?} host
     * @return {?}
     */
    BaseComboComponent.prototype.createPanel = /**
     * @private
     * @param {?} host
     * @return {?}
     */
    function (host) {
        this.panelElement = this.document.createElement('div');
        this.panelElement.id = "overlay-" + nextUniqueId++;
        this.panelElement.classList.add('overlay-pane');
        this.panelElement.style.display = 'none';
        host.appendChild(this.panelElement);
        this.comboService.panelElement = this.panelElement;
        if (this.isLookup()) {
            var _a = this.getPanelSize(), panelWidth = _a.panelWidth, top_1 = _a.top, left = _a.left;
            this.panelElement.style.width = panelWidth + "px";
            this.panelElement.style.height = this.panelHeight + "px";
            this.panelElement.style.top = top_1 + "px";
            this.panelElement.style.left = left + "px";
        }
        else {
            this.panelElement.style.overflow = 'hidden';
            this.render.setStyle(this.panelElement, 'top', '0');
            this.render.setStyle(this.panelElement, 'left', '0');
        }
        /** @type {?} */
        var zindex = this.commonUtils.getFloatingLayerIndex();
        this.panelElement.style.zIndex = zindex;
        this.panelElement.classList.add('f-combo-lookup');
        this.panelElement.style.display = '';
    };
    /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    BaseComboComponent.prototype.getPanelSize = /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        var panelHeight = this.panelHeight;
        this.innerPanelHeight = 202;
        if (this.autoWidth) {
            var width = this.getInputSizeInfo().width;
            this.panelWidth = width ? width : this.panelWidth;
        }
        // 如果taget高度存在 修改pnaelHeight 用于重定位弹出框位置
        if (target && target.tagName && panelHeight === 'auto') {
            /** @type {?} */
            var targetHeight = target.scrollHeight;
            /** @type {?} */
            var isNoRecord = !!target.querySelector('.f-table-norecords-content');
            // if (this.uri) {
            //     if (this.data && this.data.length) {
            //         if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
            //             this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
            //         } else {
            //             this.innerPanelHeight = targetHeight;
            //         }
            //     }
            // } else {
            //     this.innerPanelHeight = targetHeight && targetHeight > 10 && !isNoRecord ? Math.floor(targetHeight) : this.panelHeight;
            // }
            if (this.data && this.data.length) {
                if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
                    this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
                }
                else {
                    this.innerPanelHeight = targetHeight;
                }
            }
        }
        else if (target && target.tagName && panelHeight && !String(panelHeight).includes('px')) {
            panelHeight = panelHeight;
        }
        var _a = this.el.nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height, left = _a.left, right = _a.right;
        height = height + 1;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        if (panelHeight === 'auto') {
            if (this.maxHeight && this.maxHeight > this.innerPanelHeight) {
                panelHeight = this.innerPanelHeight;
            }
            else {
                panelHeight = this.maxHeight;
            }
        }
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        /** @type {?} */
        var below = h === bottom;
        /** @type {?} */
        var fx = 'top';
        if (bottom > panelHeight) {
            top = top + height;
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                fx = 'bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        var panelWidth = this.panelWidth;
        if (window.innerWidth - left < this.panelWidth) {
            // left = right - 400;
            if (left + this.el.nativeElement.offsetWidth > this.panelWidth) {
                left = left + this.el.nativeElement.offsetWidth - this.panelWidth;
            }
            else {
                left = 0;
                panelWidth = window.innerWidth > this.panelWidth ? this.panelWidth : window.innerWidth - 10;
            }
        }
        return { panelWidth: panelWidth, panelHeight: panelHeight, top: top, left: left, below: below, fx: fx };
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.compatibleScrollTop = /**
     * @private
     * @return {?}
     */
    function () {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollTop;
        }
        return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.compatibleScrollLeft = /**
     * @private
     * @return {?}
     */
    function () {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollLeft;
        }
        return Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    };
    // 设置弹出框位置
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    BaseComboComponent.prototype.updatePosition = 
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        var _this = this;
        var _a = this.getPanelSize(target), panelHeight = _a.panelHeight, left = _a.left, top = _a.top, below = _a.below, fx = _a.fx;
        if (!this.isLookup()) {
            /** @type {?} */
            var _top = top;
            /** @type {?} */
            var _height = panelHeight;
            if (top < 0) {
                _height = this.innerPanelHeight + top - 10;
                _top = 10;
            }
            _top += this.compatibleScrollTop();
            if (this.panelHeight !== 'auto') {
                if (this.maxHeight < _height) {
                    this.maxHeight = (/** @type {?} */ (_height));
                }
            }
            this.comPosition = {
                'left': left + this.compatibleScrollLeft(),
                'top': _top,
                'width': this.panelWidth,
                height: _height === 'auto' ? 'auto' : _height,
                'max-height': this.maxHeight
            };
        }
        else {
            this.comPosition = {
                'width': this.panelWidth,
                'height': panelHeight
            };
        }
        this.panelElement.style.overflow = '';
        target['style'].display = '';
        Object.keys(this.comPosition).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var val = _this.comPosition[n];
            if (val !== 'auto') {
                val += 'px';
            }
            _this.render.setStyle(target, n, val);
        }));
        target.style.transformOrigin = '100% ' + fx;
        // target['style'].visibility = 'visible';
        return this.comPosition;
    };
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.contains = /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    function (el, event) {
        return el.nativeElement.contains(event.target);
    };
    /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.filterSelections = /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    function (value, data) {
        var _this = this;
        /** @type {?} */
        var selectedItems = String(value)
            .split(this.separator)
            .map((/**
         * @param {?} selectedItem
         * @return {?}
         */
        function (selectedItem) {
            /** @type {?} */
            var item = data.find((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return selectedItem == _this.commonUtils.getValue(_this.idField, val) + ''; }));
            return item ? _this.commonUtils.getValue(_this.textField, item) : '';
        }));
        return selectedItems.filter((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return el; }));
    };
    /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.updateSelections = /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    function (selectedValues, data) {
        var _this = this;
        if (selectedValues === null || selectedValues === undefined) {
            this.selections = [];
        }
        if (typeof selectedValues === 'boolean' || typeof selectedValues === 'number') {
            selectedValues = '' + selectedValues;
        }
        /** @type {?} */
        var selectedItems = selectedValues ? String(selectedValues).split(this.separator).map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (_this.comboService.displayType === 'LOOKUPTREELIST') {
                return _this.comboService.treeNodeToFlatData(data, val, _this.idField);
            }
            return data.find((/**
             * @param {?} _data
             * @return {?}
             */
            function (_data) { return '' + val == _this.commonUtils.getValue(_this.idField, _data) + ''; }));
        })) : [];
        this.selections = selectedItems || [];
    };
    /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.getDisplayText = /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    function (value, data) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            var selectedItems = this.filterSelections(value, data);
            if (!selectedItems || !selectedItems.length) {
                return value;
            }
            else {
                return selectedItems.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return !!v; })).join(this.separator);
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseComboComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var data = [];
        if (this.data instanceof Array) {
            data = this.data;
        }
        else if (this.data) {
            data = ((/** @type {?} */ (this.data['items']))) instanceof Array ? this.data['items'] : data;
        }
        this.originalText = value;
        // 解决 uistate binding 中初次绑定时设置了 selectedValues 值 ，此处清空后导至下拉帮助获取选中记录不正确
        // this.selectedValues = '';
        if (!this.uri && data && data.length > 0) {
            if (this.isLookup()) {
                if (this.selectedValues === undefined || this.selectedValues === null) {
                    this.selectedValues = value;
                }
            }
            else {
                this.selectedValues = value;
            }
            this.updateSelections(this.selectedValues, data);
            this.displayText = this.getDisplayText(this.selectedValues, this.selections || []);
            if (this.isLookup()) {
                this.displayText = this.displayText === this.selectedValues ? value : this.displayText;
            }
            this.originalText = this.displayText;
        }
        else {
            // this.displayText = this.getDisplayText(value, this.selections);
            this.displayText = value;
            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse']) {
                this.comboService['__SELECTEDIDS__'] = this.selectedValues;
            }
            this.updateSelectedValues();
            if (this.selectedValues === undefined || this.selectedValues === null) {
                this.selectedValues = value;
            }
            if (this.viewType === 'tag' && this.multiSelect && (this.displayText !== null && this.displayText !== undefined)) {
                /** @type {?} */
                var txtArr = this.displayText.split(this.separator).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                this.selections = txtArr.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @param {?} i
                 * @return {?}
                 */
                function (r, c, i) {
                    var _a;
                    r.push((_a = {}, _a[_this.textField] = c, _a));
                    return r;
                }), []);
            }
        }
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseComboComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseComboComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    BaseComboComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    BaseComboComponent.prototype.filterDataOnServer = /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    function (searchValue, searchField) {
    };
    /** @nocollapse */
    BaseComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    BaseComboComponent.propDecorators = {
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        placeholder: [{ type: Input }],
        panelWidth: [{ type: Input }],
        panelHeight: [{ type: Input }],
        autoWidth: [{ type: Input }],
        enableClear: [{ type: Input }],
        mapFields: [{ type: Input }],
        forcePlaceholder: [{ type: Input }],
        nosearch: [{ type: Input }],
        maxLength: [{ type: Input }],
        enableTitle: [{ type: Input }],
        viewType: [{ type: Input }],
        context: [{ type: Input }],
        mappingField: [{ type: Input }],
        data: [{ type: Input }],
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        multiSelect: [{ type: Input }],
        uri: [{ type: Input }],
        selectedValues: [{ type: Input }],
        displayText: [{ type: Input }],
        maxHeight: [{ type: Input }],
        enableCancelSelected: [{ type: Input }],
        remoteSearch: [{ type: Input }],
        beforeShow: [{ type: Input }],
        beforeHide: [{ type: Input }],
        hidePanelOnClear: [{ type: Input }],
        useValue: [{ type: Input }],
        separator: [{ type: Input }],
        treeToList: [{ type: Input }],
        navTreeToList: [{ type: Input }],
        emptyMsg: [{ type: Input }],
        showPanel: [{ type: Output }],
        hidePanel: [{ type: Output }],
        clear: [{ type: Output }],
        valueChange: [{ type: Output }],
        selectChange: [{ type: Output }],
        cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
        input: [{ type: ViewChild, args: ['input',] }],
        input2: [{ type: ViewChild, args: ['input2',] }]
    };
    return BaseComboComponent;
}());
export { BaseComboComponent };
if (false) {
    /** @type {?} */
    BaseComboComponent.prototype.disabled;
    /** @type {?} */
    BaseComboComponent.prototype.readonly;
    /** @type {?} */
    BaseComboComponent.prototype.editable;
    /** @type {?} */
    BaseComboComponent.prototype.placeholder;
    /** @type {?} */
    BaseComboComponent.prototype.panelWidth;
    /** @type {?} */
    BaseComboComponent.prototype.panelHeight;
    /**
     * 下拉面板宽度与输入框宽度保持一至， 默认为 true
     * @type {?}
     */
    BaseComboComponent.prototype.autoWidth;
    /** @type {?} */
    BaseComboComponent.prototype.enableClear;
    /** @type {?} */
    BaseComboComponent.prototype.mapFields;
    /**
     * 禁用只读时显示 placeholder
     * @type {?}
     */
    BaseComboComponent.prototype.forcePlaceholder;
    /**
     * 任意输入 20210202
     * @type {?}
     */
    BaseComboComponent.prototype.nosearch;
    /**
     * 允许最大输入长度
     * @type {?}
     */
    BaseComboComponent.prototype.maxLength;
    /** @type {?} */
    BaseComboComponent.prototype.enableTitle;
    /**
     * 展示类型： text文本，tag标签。 默认 text
     * @type {?}
     */
    BaseComboComponent.prototype.viewType;
    /** @type {?} */
    BaseComboComponent.prototype.displayText;
    /** @type {?} */
    BaseComboComponent.prototype.maxHeight;
    /** @type {?} */
    BaseComboComponent.prototype.enableCancelSelected;
    /** @type {?} */
    BaseComboComponent.prototype.beforeShow;
    /** @type {?} */
    BaseComboComponent.prototype.beforeHide;
    /** @type {?} */
    BaseComboComponent.prototype.hidePanelOnClear;
    /**
     * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
     * @type {?}
     */
    BaseComboComponent.prototype.useValue;
    /**
     * 分隔符
     * @type {?}
     */
    BaseComboComponent.prototype.separator;
    /** @type {?} */
    BaseComboComponent.prototype.treeToList;
    /** @type {?} */
    BaseComboComponent.prototype.navTreeToList;
    /** @type {?} */
    BaseComboComponent.prototype.emptyMsg;
    /** @type {?} */
    BaseComboComponent.prototype.showPanel;
    /** @type {?} */
    BaseComboComponent.prototype.hidePanel;
    /** @type {?} */
    BaseComboComponent.prototype.clear;
    /** @type {?} */
    BaseComboComponent.prototype.valueChange;
    /** @type {?} */
    BaseComboComponent.prototype.selectChange;
    /** @type {?} */
    BaseComboComponent.prototype.input;
    /** @type {?} */
    BaseComboComponent.prototype.input2;
    /** @type {?} */
    BaseComboComponent.prototype.isOpen;
    /** @type {?} */
    BaseComboComponent.prototype.comPosition;
    /** @type {?} */
    BaseComboComponent.prototype.destroy$;
    /** @type {?} */
    BaseComboComponent.prototype.ngControl;
    /** @type {?} */
    BaseComboComponent.prototype.groupIcon;
    /** @type {?} */
    BaseComboComponent.prototype.localeService;
    /** @type {?} */
    BaseComboComponent.prototype.innerPanelHeight;
    /** @type {?} */
    BaseComboComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._cmbPanel;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._comboPanelCreated$;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.willHide$;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.containerElement;
    /**
     * overlay
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._documentClickEvent;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.panelListener;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.mouseWheelEvent;
    /** @type {?} */
    BaseComboComponent.prototype.textChangeSubject;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.initdataSubscription;
    /** @type {?} */
    BaseComboComponent.prototype.customData;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.originalText;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.isTextChange;
    /** @type {?} */
    BaseComboComponent.prototype.treeClientSearch;
    /** @type {?} */
    BaseComboComponent.prototype.eventMgr;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.ro;
    /** @type {?} */
    BaseComboComponent.prototype.onChange;
    /** @type {?} */
    BaseComboComponent.prototype.onTouched;
    /** @type {?} */
    BaseComboComponent.prototype.el;
    /** @type {?} */
    BaseComboComponent.prototype.cdr;
    /** @type {?} */
    BaseComboComponent.prototype.document;
    /** @type {?} */
    BaseComboComponent.prototype.render;
    /** @type {?} */
    BaseComboComponent.prototype.comboService;
    /** @type {?} */
    BaseComboComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,