/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, ChangeDetectorRef, Inject, Renderer2, forwardRef, ChangeDetectionStrategy, ViewEncapsulation, Input, Injector, ViewChild, HostBinding, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatalistComponent } from '@farris/ui-datalist';
import { BaseComboComponent } from './base-combo.component';
import { ComboService } from './combo.service';
/** @type {?} */
export var INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return ComboListComponent; })),
    multi: true
};
var ComboListComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ComboListComponent, _super);
    function ComboListComponent(el, cdr, document, render, comboService, injector) {
        var _this = _super.call(this, el, cdr, document, render, comboService, injector) || this;
        _this.el = el;
        _this.cdr = cdr;
        _this.document = document;
        _this.render = render;
        _this.comboService = comboService;
        _this.injector = injector;
        /**
         * 数据中标识禁用的字段名称，默认为 disabled
         */
        _this.disabledField = 'disabled';
        /**
         * 列表中是否显示已禁用的项，默认 true
         */
        _this.showDisabledItem = true;
        /**
         * 显示面板方式： click | focus, 默认： click
         */
        _this.showPanelType = 'click';
        _this.cls = true;
        _this.filterData = [];
        return _this;
    }
    Object.defineProperty(ComboListComponent.prototype, "clsTag", {
        get: /**
         * @return {?}
         */
        function () {
            return this.viewType === 'tag';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (this.multiSelect) {
            this.enableCancelSelected = this.multiSelect;
        }
        this.remoteSearch = false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ComboListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /**
         * 如果直接绑定一个数组作为列表数据并且 data 是异步数据，需要此方法，同步displayText与selectedValues
         */
        if (changes.data && !changes.data.firstChange && !this.uri && !this.nosearch) {
            /** @type {?} */
            var datas = changes.data.currentValue;
            /** @type {?} */
            var val = this.ngControl ? this.ngControl.value || this.selectedValues : this.selectedValues;
            if (this.selectedValues === undefined || this.selectedValues === null) {
                val = this.displayText;
            }
            if (val !== undefined && val !== null && datas && datas.length > 0) {
                /** @type {?} */
                var textArr = this.filterSelections(val, this.data);
                this.displayText = textArr.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return !!v; })).join(this.separator);
                this.updateSelections(val, this.data);
                this.comboService.selections$.next({ action: 'initData' });
            }
            else {
                this.selections = [];
                this.displayText = '';
            }
        }
        // if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
        //     this.enableCancelSelected = this.multiSelect;
        // }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.registerKeyboardEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.multiSelect || (this.readonly || this.disabled)) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown' ||
            (!this.editable && !this.readonly && !this.disabled && $event.code === 'Space')) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        var selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            _this.comboService.selectItem(data[index], index, false);
            /** @type {?} */
            var params = { data: data[index], index: index };
            if (_this.isOpen) {
                _this.scrollToCurrentItem(index);
            }
            _this.updateSelectValues(params);
        });
        /** @type {?} */
        var data = this.filterData && this.filterData.length ? this.filterData : this.data;
        if (!this['_cmbPanel']) {
            data = this.data;
        }
        /** @type {?} */
        var _data = [];
        if (this.disabledField) {
            _data = data.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !_this.commonUtils.getValue(_this.disabledField, n); }));
        }
        /** @type {?} */
        var getrealIndex = (/**
         * @param {?} idx
         * @param {?} nextIdx
         * @param {?=} isNext
         * @return {?}
         */
        function (idx, nextIdx, isNext) {
            if (isNext === void 0) { isNext = true; }
            if (data[nextIdx]) {
                // 判断下一项是否禁用
                /** @type {?} */
                var isDisabled = _this.commonUtils.getValue(_this.disabledField, data[nextIdx]);
                if (isDisabled) {
                    /** @type {?} */
                    var _idx = _data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, data[idx]); }));
                    if (isNext) {
                        nextIdx = _idx + 1;
                    }
                    else {
                        nextIdx = _idx - 1;
                    }
                    if (_data[nextIdx]) {
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, _data[nextIdx]); }));
                    }
                    else {
                        /** @type {?} */
                        var newIdex_1 = nextIdx > 0 ? 0 : _data.length - 1;
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, _data[newIdex_1]) && !_this.commonUtils.getValue(_this.disabledField, n); }));
                    }
                }
                return nextIdx;
            }
        });
        /** @type {?} */
        var idx = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return _this.commonUtils.getValue(_this.idField, n) == _this.selectedValues; }));
        if ($event.code === 'ArrowUp') { // up
            // up
            /** @type {?} */
            var prevIdx = idx - 1;
            if (prevIdx < 0) {
                prevIdx = data.length - 1;
            }
            if (this.disabledField) {
                prevIdx = getrealIndex(idx, prevIdx, false);
            }
            selectItem(prevIdx);
        }
        if ($event.code === 'ArrowDown' || ($event.code === 'Space' && !this.editable)) { // down
            // down
            /** @type {?} */
            var nextIdx = idx + 1;
            if (nextIdx >= data.length) {
                nextIdx = 0;
            }
            if (this.disabledField) {
                nextIdx = getrealIndex(idx, nextIdx);
            }
            selectItem(nextIdx);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.escHandlerEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.isOpen) {
            this.hide(false);
        }
    };
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    ComboListComponent.prototype.onSelectionsChange = /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    function (v) {
        var _this = this;
        if (this.uri) {
            if (this.selections && this.selections.length) {
                this.selectedValues = this.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.idField]; })).join(this.separator);
            }
        }
    };
    /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    ComboListComponent.prototype.updateSelectValues = /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    function (item, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        var _a = tslib_1.__assign({}, item), data = _a.data, index = _a.index;
        this.comboService.selectItem(data, index);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        if (!this.multiSelect) {
            this.selectedValues = data[this.idField];
        }
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        if (emitEvent) {
            this.selectChange.emit({ data: data, index: index, instance: this, selections: this.selections });
            this.cdr.markForCheck();
            this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ComboListComponent.prototype.scrollToCurrentItem = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.dataListRef && this.dataListRef.el) {
            /** @type {?} */
            var ulEl = this.dataListRef.el.nativeElement.querySelector('ul.list-group');
            if (ulEl && ulEl.children && ulEl.children[index]) {
                ulEl.children[index].scrollIntoView({ block: 'nearest' });
            }
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ComboListComponent.prototype.onSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.updateSelectValues(item, true);
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboListComponent.prototype.onUnSelected = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var data = tslib_1.__assign({}, value).data;
        this.comboService.unSelectItem(data);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        // if (!this.multiSelect) {
        //     this.selectedValues = data[this.idField];
        // }
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        this.cdr.markForCheck();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboListComponent.prototype.onEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isOpen) {
            this.hide();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.onKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.onKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboListComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.showPanelType === 'focus') {
            this.show();
        }
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    ComboListComponent.prototype.removeSelectItem = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        if ($event) {
            $event.stopPropagation();
        }
        this.comboService.unSelectItem(item);
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        this.cdr.detectChanges();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    };
    /**
     * @protected
     * @return {?}
     */
    ComboListComponent.prototype.initDatasChangeAction = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.data$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.filterData = data;
            if (data && data.length && !_this.editable) {
                if (typeof _this.selectedValues === 'boolean') {
                    return;
                }
                if (_this.selectedValues) {
                    /** @type {?} */
                    var idx_1 = -1;
                    /** @type {?} */
                    var items = [];
                    if (typeof _this.selectedValues === 'number' || typeof _this.selectedValues === 'boolean') {
                        items = data.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return n[_this.idField] === _this.selectedValues || n[_this.textField] === _this.selectedValues;
                        }));
                    }
                    else {
                        items = _this.selectedValues.split(_this.separator).map((/**
                         * @param {?} val
                         * @return {?}
                         */
                        function (val) {
                            return data.find((/**
                             * @param {?} n
                             * @param {?} i
                             * @return {?}
                             */
                            function (n, i) {
                                return n[_this.idField] === val || n[_this.textField] === val;
                            }));
                        }));
                    }
                    if (!_this.selections || !_this.selections.length) {
                        if (items && items.length) {
                            _this.selectedValues = items.map((/**
                             * @param {?} i
                             * @return {?}
                             */
                            function (i) {
                                return _this.commonUtils.getValue(_this.idField, i);
                            })).join(_this.separator);
                            _this.selections = items;
                        }
                    }
                    idx_1 = data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return _this.commonUtils.getValue(_this.idField, n) === _this.commonUtils.getValue(_this.idField, _this.selections[0]) ||
                            _this.commonUtils.getValue(_this.textField, n) === _this.commonUtils.getValue(_this.textField, _this.selections[0]);
                    }));
                    if (idx_1 > -1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.scrollToCurrentItem(idx_1);
                        }), 300);
                    }
                }
            }
        }));
    };
    ComboListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-combo-list',
                    template: "<input-group *ngIf=\"!viewType || viewType === 'text'\"\r\n    #input\r\n    [attr.title]=\"enableTitle? displayText: ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"enableClear\"\r\n    [maxLength]=\"maxLength\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (enterHandle)=\"onEnter($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    style=\"display: block;\">\r\n</input-group>\r\n\r\n<div #input2 class=\"f-cmp-inputgroup\" *ngIf=\"viewType === 'tag'\" (click)=\"onClick($event)\" [attr.title]=\"displayText\">\r\n    <div class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\">\r\n        <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\">\r\n            <div class=\"multi--content\">\r\n                <span class=\"multi--item\" *ngFor=\"let it of selections\" >\r\n                    {{it[textField]}}\r\n                    <i class=\"f-icon multi--close\" *ngIf=\"!readonly && !disabled \" (click)=\"removeSelectItem($event, it)\"></i>\r\n                </span>\r\n            </div>\r\n            <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n                <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group-append\" >\r\n            <span class=\"input-group-text input-group-clear ng-star-inserted\" style=\"display: none;\">\r\n                <i class=\"f-icon modal_close\"></i>\r\n            </span>\r\n            <span class=\"input-group-text ng-star-inserted\" (click)=\"onClick($event)\">\r\n                <span class=\"f-icon f-icon-arrow-60-down\"></span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\" style=\"z-index: 99999;transition: transform 0.12s ease;\"  #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [itemHeight]=\"itemHeight\"\r\n        [height]=\"panelHeight\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [idField]=\"idField\"\r\n        [multiSelect]=\"multiSelect\"\r\n        [selectedValues]=\"selectedValuesStr\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        [enableCancelSelected]=\"enableCancelSelected\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n        [separator]=\"separator\"\r\n        style=\"position: relative;\"\r\n        [emptyMessage]=\"emptyMsg\"\r\n        [disabledField]=\"disabledField\"\r\n        [showDisabledItem]=\"showDisabledItem\"\r\n    >\r\n        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>\r\n        </ng-template>\r\n    </farris-datalist>\r\n</div>\r\n",
                    // styleUrls: ['./combo-list.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService]
                }] }
    ];
    /** @nocollapse */
    ComboListComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    ComboListComponent.propDecorators = {
        itemTemplate: [{ type: Input }],
        disabledField: [{ type: Input }],
        showDisabledItem: [{ type: Input }],
        showPanelType: [{ type: Input }],
        dataListRef: [{ type: ViewChild, args: ['dl',] }],
        itemHeight: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class.f-combo-list',] }],
        clsTag: [{ type: HostBinding, args: ['class.f-combo-list--tag',] }],
        registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        escHandlerEvent: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]
    };
    return ComboListComponent;
}(BaseComboComponent));
export { ComboListComponent };
if (false) {
    /** @type {?} */
    ComboListComponent.prototype.itemTemplate;
    /**
     * 数据中标识禁用的字段名称，默认为 disabled
     * @type {?}
     */
    ComboListComponent.prototype.disabledField;
    /**
     * 列表中是否显示已禁用的项，默认 true
     * @type {?}
     */
    ComboListComponent.prototype.showDisabledItem;
    /**
     * 显示面板方式： click | focus, 默认： click
     * @type {?}
     */
    ComboListComponent.prototype.showPanelType;
    /** @type {?} */
    ComboListComponent.prototype.dataListRef;
    /** @type {?} */
    ComboListComponent.prototype.itemHeight;
    /** @type {?} */
    ComboListComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.filterData;
    /** @type {?} */
    ComboListComponent.prototype.el;
    /** @type {?} */
    ComboListComponent.prototype.cdr;
    /** @type {?} */
    ComboListComponent.prototype.document;
    /** @type {?} */
    ComboListComponent.prototype.render;
    /** @type {?} */
    ComboListComponent.prototype.comboService;
    /** @type {?} */
    ComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,