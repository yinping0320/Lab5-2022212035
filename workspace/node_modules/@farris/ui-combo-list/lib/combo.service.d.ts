import { Injector } from '@angular/core';
import { BehaviorSubject, Subject, Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { LoadingService } from '@farris/ui-loading';
import { NormalObject } from './combo.interface';
export declare class ComboService {
    http: HttpClient;
    loadingService: LoadingService;
    private injector;
    selections$: Subject<any>;
    isOpen$: BehaviorSubject<any>;
    data$: BehaviorSubject<any>;
    serachValue$: Subject<any>;
    loadSuccess$: Subject<{}>;
    treeInfo$: BehaviorSubject<any>;
    selections: NormalObject[];
    idField: string;
    valueField: string;
    textField: string;
    multiSelect: boolean;
    displayType: string;
    separator: string;
    _uri: string;
    uri: string;
    selectedValues: any;
    pageInfo: any;
    treeInfo: any;
    columns: NormalObject[];
    context: any;
    remoteSearch: boolean;
    panelElement: any;
    treeSearchHandler: any;
    private treeloadconfig;
    private _data;
    private loading;
    private lookupUtils;
    private comboHttp;
    data: NormalObject[];
    constructor(http: HttpClient, loadingService: LoadingService, injector: Injector);
    injectService(): void;
    toBoolean(value: any): boolean;
    selectItem(data: any, index?: number, emitEvent?: boolean): void;
    unSelectItem(data: any): void;
    selectAll(datas: any): void;
    unSelectAll(datas: any): void;
    isSelect(id: any): boolean;
    loadData(data: any, selectValues: string, callback: any): void;
    filterDataOnServer(params: any): void;
    filterData(val: string, field?: any): void;
    getSelections(): NormalObject[];
    clearSelections(): void;
    getValue(prop: string, selections?: any): string;
    getValueByObj(field: string, data: any): string;
    initData(params?: any, method?: string, selectedIds?: string): Subject<{}>;
    private treeNodesToFlatData;
    private loadLookupData;
    getSelectedItems(selIds: any): Observable<any>;
    getData(params?: {}, method?: string, loadChild?: boolean): Observable<any>;
    loadDataTable(data: any): void;
    loadDataTree(data: any): void;
    loadLookUpDataTable(resData: any, sortable?: boolean): void;
    checkNodeCanBeSelect(nodes: any, allData?: boolean): any;
    loadLookUpDataTree(resData: any): void;
    treeNodeToFlatData(paramData: any, paramVal: any, idField: any): any;
    private showLoading;
    closeLoading(): void;
}
