import { OnInit, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, AfterViewInit, OnDestroy, Injector } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
import { SelectItem, NormalObject, ComboChanges } from './combo.interface';
import { ComboLocaleService } from './services/combo.locale.service';
import { CommonUtils } from '@farris/ui-common';
import { EventManager } from '@angular/platform-browser';
export declare class BaseComboComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    cdr: ChangeDetectorRef;
    document: any;
    render: Renderer2;
    comboService: ComboService;
    injector: Injector;
    disabled: boolean;
    readonly: boolean;
    editable: boolean;
    placeholder: string;
    panelWidth: number;
    panelHeight: number | string;
    /** 下拉面板宽度与输入框宽度保持一至， 默认为 true */
    autoWidth: boolean;
    enableClear: boolean;
    mapFields: any;
    /** 禁用只读时显示 placeholder */
    forcePlaceholder: boolean;
    /** 任意输入 20210202 */
    nosearch: boolean;
    /** 允许最大输入长度 */
    maxLength: any;
    enableTitle: boolean;
    /** 展示类型： text文本，tag标签。 默认 text */
    viewType: 'text' | 'tag';
    context: any;
    mappingField: any;
    data: NormalObject[];
    idField: string;
    valueField: string;
    textField: string;
    multiSelect: boolean;
    uri: string;
    selectedValues: string;
    readonly selectedValuesStr: string;
    displayText: string;
    maxHeight: number;
    enableCancelSelected: boolean;
    /** 远端过滤 */
    remoteSearch: boolean;
    beforeShow: (instance?: this) => Observable<any>;
    beforeHide: (instance?: this) => Observable<any>;
    hidePanelOnClear: boolean;
    /** 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值 */
    useValue: boolean;
    /** 分隔符 */
    separator: string;
    treeToList: boolean;
    navTreeToList: boolean;
    emptyMsg: string;
    showPanel: EventEmitter<{}>;
    hidePanel: EventEmitter<{}>;
    clear: EventEmitter<{}>;
    valueChange: EventEmitter<ComboChanges>;
    selectChange: EventEmitter<SelectItem>;
    cmbPanel: ElementRef;
    input: InputGroupComponent;
    input2: ElementRef;
    isOpen: boolean;
    comPosition: {};
    destroy$: Subject<{}>;
    ngControl: NgControl | any;
    groupIcon: string;
    localeService: ComboLocaleService;
    innerPanelHeight: any;
    commonUtils: CommonUtils;
    private _cmbPanel;
    private _comboPanelCreated$;
    private willHide$;
    private containerElement;
    /** overlay */
    private panelElement;
    private _documentClickEvent;
    selections: NormalObject[];
    private panelListener;
    private ngZone;
    private mouseWheelEvent;
    textChangeSubject: Subject<{}>;
    private initdataSubscription;
    customData: any;
    private originalText;
    private isTextChange;
    treeClientSearch: Subject<{}>;
    eventMgr: EventManager;
    private notifySer;
    private ro;
    onChange: (value: string | string[]) => void;
    onTouched: () => void;
    constructor(el: ElementRef, cdr: ChangeDetectorRef, document: any, render: Renderer2, comboService: ComboService, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private updatePanelWidth;
    onClick($event?: any): void;
    onBlur(event: Event): void;
    onFocus(event: Event): void;
    onInputclick($event?: any): void;
    onEnter(event: Event): void;
    blur(): void;
    focus(): void;
    onClear(): void;
    private getInputSizeInfo;
    private emitTextChange;
    private __createPanel;
    private onBeforeShow;
    private isLookup;
    private onBeforeHide;
    private initToggleAction;
    private iframeEventHandle;
    private removeDocumentListener;
    private registerDocumentEvent;
    private initCreatPanelAction;
    private removePanelElement;
    private initSelectionsChangeAction;
    protected initDatasChangeAction(): void;
    private onSelectionsChangeDefault;
    protected onSelectionsChange(v: any[]): void;
    updateMappingFieldValue(clearMapFields?: boolean): void;
    updateSelectedValues(): void;
    onTextChange(val?: string): void;
    onValueChange(changes: ComboChanges): void;
    onSelect(item: any): void;
    onUnSelected(item: any): void;
    /**
     * emit: 默认为 true;
     */
    hide(emit?: boolean): void;
    show(): void;
    private createPanel;
    private getPanelSize;
    private compatibleScrollTop;
    private compatibleScrollLeft;
    updatePosition(target: any): {};
    contains(el: ElementRef, event: any): any;
    protected filterSelections(value: string, data: any[]): any[];
    protected updateSelections(selectedValues: string, data: any[]): void;
    private getDisplayText;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    filterDataOnServer(searchValue: any, searchField: any): void;
}
