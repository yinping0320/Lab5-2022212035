/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, ChangeDetectorRef, Inject, Renderer2, forwardRef, ChangeDetectionStrategy, ViewEncapsulation, Input, Injector, ViewChild, HostBinding, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatalistComponent } from '@farris/ui-datalist';
import { BaseComboComponent } from './base-combo.component';
import { ComboService } from './combo.service';
/** @type {?} */
export const INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => ComboListComponent)),
    multi: true
};
export class ComboListComponent extends BaseComboComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        super(el, cdr, document, render, comboService, injector);
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        /**
         * 数据中标识禁用的字段名称，默认为 disabled
         */
        this.disabledField = 'disabled';
        /**
         * 列表中是否显示已禁用的项，默认 true
         */
        this.showDisabledItem = true;
        /**
         * 显示面板方式： click | focus, 默认： click
         */
        this.showPanelType = 'click';
        this.cls = true;
        this.filterData = [];
    }
    /**
     * @return {?}
     */
    get clsTag() {
        return this.viewType === 'tag';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (this.multiSelect) {
            this.enableCancelSelected = this.multiSelect;
        }
        this.remoteSearch = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /**
         * 如果直接绑定一个数组作为列表数据并且 data 是异步数据，需要此方法，同步displayText与selectedValues
         */
        if (changes.data && !changes.data.firstChange && !this.uri && !this.nosearch) {
            /** @type {?} */
            const datas = changes.data.currentValue;
            /** @type {?} */
            let val = this.ngControl ? this.ngControl.value || this.selectedValues : this.selectedValues;
            if (this.selectedValues === undefined || this.selectedValues === null) {
                val = this.displayText;
            }
            if (val !== undefined && val !== null && datas && datas.length > 0) {
                /** @type {?} */
                const textArr = this.filterSelections(val, this.data);
                this.displayText = textArr.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => !!v)).join(this.separator);
                this.updateSelections(val, this.data);
                this.comboService.selections$.next({ action: 'initData' });
            }
            else {
                this.selections = [];
                this.displayText = '';
            }
        }
        // if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
        //     this.enableCancelSelected = this.multiSelect;
        // }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    registerKeyboardEvent($event) {
        if (this.multiSelect || (this.readonly || this.disabled)) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown' ||
            (!this.editable && !this.readonly && !this.disabled && $event.code === 'Space')) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        const selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            this.comboService.selectItem(data[index], index, false);
            /** @type {?} */
            const params = { data: data[index], index };
            if (this.isOpen) {
                this.scrollToCurrentItem(index);
            }
            this.updateSelectValues(params);
        });
        /** @type {?} */
        let data = this.filterData && this.filterData.length ? this.filterData : this.data;
        if (!this['_cmbPanel']) {
            data = this.data;
        }
        /** @type {?} */
        let _data = [];
        if (this.disabledField) {
            _data = data.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !this.commonUtils.getValue(this.disabledField, n)));
        }
        /** @type {?} */
        const getrealIndex = (/**
         * @param {?} idx
         * @param {?} nextIdx
         * @param {?=} isNext
         * @return {?}
         */
        (idx, nextIdx, isNext = true) => {
            if (data[nextIdx]) {
                // 判断下一项是否禁用
                /** @type {?} */
                const isDisabled = this.commonUtils.getValue(this.disabledField, data[nextIdx]);
                if (isDisabled) {
                    /** @type {?} */
                    const _idx = _data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, data[idx])));
                    if (isNext) {
                        nextIdx = _idx + 1;
                    }
                    else {
                        nextIdx = _idx - 1;
                    }
                    if (_data[nextIdx]) {
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, _data[nextIdx])));
                    }
                    else {
                        /** @type {?} */
                        const newIdex = nextIdx > 0 ? 0 : _data.length - 1;
                        return data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, _data[newIdex]) && !this.commonUtils.getValue(this.disabledField, n)));
                    }
                }
                return nextIdx;
            }
        });
        /** @type {?} */
        const idx = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => this.commonUtils.getValue(this.idField, n) == this.selectedValues));
        if ($event.code === 'ArrowUp') { // up
            // up
            /** @type {?} */
            let prevIdx = idx - 1;
            if (prevIdx < 0) {
                prevIdx = data.length - 1;
            }
            if (this.disabledField) {
                prevIdx = getrealIndex(idx, prevIdx, false);
            }
            selectItem(prevIdx);
        }
        if ($event.code === 'ArrowDown' || ($event.code === 'Space' && !this.editable)) { // down
            // down
            /** @type {?} */
            let nextIdx = idx + 1;
            if (nextIdx >= data.length) {
                nextIdx = 0;
            }
            if (this.disabledField) {
                nextIdx = getrealIndex(idx, nextIdx);
            }
            selectItem(nextIdx);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    escHandlerEvent($event) {
        if (this.isOpen) {
            this.hide(false);
        }
    }
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    onSelectionsChange(v) {
        if (this.uri) {
            if (this.selections && this.selections.length) {
                this.selectedValues = this.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField])).join(this.separator);
            }
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    updateSelectValues(item, emitEvent = true) {
        const { data, index } = Object.assign({}, item);
        this.comboService.selectItem(data, index);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        if (!this.multiSelect) {
            this.selectedValues = data[this.idField];
        }
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        if (emitEvent) {
            this.selectChange.emit({ data, index, instance: this, selections: this.selections });
            this.cdr.markForCheck();
            this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    scrollToCurrentItem(index) {
        if (this.dataListRef && this.dataListRef.el) {
            /** @type {?} */
            const ulEl = this.dataListRef.el.nativeElement.querySelector('ul.list-group');
            if (ulEl && ulEl.children && ulEl.children[index]) {
                ulEl.children[index].scrollIntoView({ block: 'nearest' });
            }
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) {
        this.updateSelectValues(item, true);
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUnSelected(value) {
        const { data } = Object.assign({}, value);
        this.comboService.unSelectItem(data);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        // if (!this.multiSelect) {
        //     this.selectedValues = data[this.idField];
        // }
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.cdr.markForCheck();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnter(event) {
        if (this.isOpen) {
            this.hide();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeyup($event) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydown($event) {
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (this.showPanelType === 'focus') {
            this.show();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    removeSelectItem($event, item) {
        if ($event) {
            $event.stopPropagation();
        }
        this.comboService.unSelectItem(item);
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.cdr.detectChanges();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @protected
     * @return {?}
     */
    initDatasChangeAction() {
        this.comboService.data$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.filterData = data;
            if (data && data.length && !this.editable) {
                if (typeof this.selectedValues === 'boolean') {
                    return;
                }
                if (this.selectedValues) {
                    /** @type {?} */
                    let idx = -1;
                    /** @type {?} */
                    let items = [];
                    if (typeof this.selectedValues === 'number' || typeof this.selectedValues === 'boolean') {
                        items = data.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        (n) => {
                            return n[this.idField] === this.selectedValues || n[this.textField] === this.selectedValues;
                        }));
                    }
                    else {
                        items = this.selectedValues.split(this.separator).map((/**
                         * @param {?} val
                         * @return {?}
                         */
                        val => {
                            return data.find((/**
                             * @param {?} n
                             * @param {?} i
                             * @return {?}
                             */
                            (n, i) => {
                                return n[this.idField] === val || n[this.textField] === val;
                            }));
                        }));
                    }
                    if (!this.selections || !this.selections.length) {
                        if (items && items.length) {
                            this.selectedValues = items.map((/**
                             * @param {?} i
                             * @return {?}
                             */
                            i => {
                                return this.commonUtils.getValue(this.idField, i);
                            })).join(this.separator);
                            this.selections = items;
                        }
                    }
                    idx = data.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return this.commonUtils.getValue(this.idField, n) === this.commonUtils.getValue(this.idField, this.selections[0]) ||
                            this.commonUtils.getValue(this.textField, n) === this.commonUtils.getValue(this.textField, this.selections[0]);
                    }));
                    if (idx > -1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            this.scrollToCurrentItem(idx);
                        }), 300);
                    }
                }
            }
        }));
    }
}
ComboListComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-combo-list',
                template: "<input-group *ngIf=\"!viewType || viewType === 'text'\"\r\n    #input\r\n    [attr.title]=\"enableTitle? displayText: ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"enableClear\"\r\n    [maxLength]=\"maxLength\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (enterHandle)=\"onEnter($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    style=\"display: block;\">\r\n</input-group>\r\n\r\n<div #input2 class=\"f-cmp-inputgroup\" *ngIf=\"viewType === 'tag'\" (click)=\"onClick($event)\" [attr.title]=\"displayText\">\r\n    <div class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\">\r\n        <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\">\r\n            <div class=\"multi--content\">\r\n                <span class=\"multi--item\" *ngFor=\"let it of selections\" >\r\n                    {{it[textField]}}\r\n                    <i class=\"f-icon multi--close\" *ngIf=\"!readonly && !disabled \" (click)=\"removeSelectItem($event, it)\"></i>\r\n                </span>\r\n            </div>\r\n            <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n                <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group-append\" >\r\n            <span class=\"input-group-text input-group-clear ng-star-inserted\" style=\"display: none;\">\r\n                <i class=\"f-icon modal_close\"></i>\r\n            </span>\r\n            <span class=\"input-group-text ng-star-inserted\" (click)=\"onClick($event)\">\r\n                <span class=\"f-icon f-icon-arrow-60-down\"></span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\" style=\"z-index: 99999;transition: transform 0.12s ease;\"  #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [itemHeight]=\"itemHeight\"\r\n        [height]=\"panelHeight\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [idField]=\"idField\"\r\n        [multiSelect]=\"multiSelect\"\r\n        [selectedValues]=\"selectedValuesStr\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        [enableCancelSelected]=\"enableCancelSelected\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n        [separator]=\"separator\"\r\n        style=\"position: relative;\"\r\n        [emptyMessage]=\"emptyMsg\"\r\n        [disabledField]=\"disabledField\"\r\n        [showDisabledItem]=\"showDisabledItem\"\r\n    >\r\n        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>\r\n        </ng-template>\r\n    </farris-datalist>\r\n</div>\r\n",
                // styleUrls: ['./combo-list.component.scss'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService]
            }] }
];
/** @nocollapse */
ComboListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
ComboListComponent.propDecorators = {
    itemTemplate: [{ type: Input }],
    disabledField: [{ type: Input }],
    showDisabledItem: [{ type: Input }],
    showPanelType: [{ type: Input }],
    dataListRef: [{ type: ViewChild, args: ['dl',] }],
    itemHeight: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class.f-combo-list',] }],
    clsTag: [{ type: HostBinding, args: ['class.f-combo-list--tag',] }],
    registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    escHandlerEvent: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ComboListComponent.prototype.itemTemplate;
    /**
     * 数据中标识禁用的字段名称，默认为 disabled
     * @type {?}
     */
    ComboListComponent.prototype.disabledField;
    /**
     * 列表中是否显示已禁用的项，默认 true
     * @type {?}
     */
    ComboListComponent.prototype.showDisabledItem;
    /**
     * 显示面板方式： click | focus, 默认： click
     * @type {?}
     */
    ComboListComponent.prototype.showPanelType;
    /** @type {?} */
    ComboListComponent.prototype.dataListRef;
    /** @type {?} */
    ComboListComponent.prototype.itemHeight;
    /** @type {?} */
    ComboListComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.filterData;
    /** @type {?} */
    ComboListComponent.prototype.el;
    /** @type {?} */
    ComboListComponent.prototype.cdr;
    /** @type {?} */
    ComboListComponent.prototype.document;
    /** @type {?} */
    ComboListComponent.prototype.render;
    /** @type {?} */
    ComboListComponent.prototype.comboService;
    /** @type {?} */
    ComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8tbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWNvbWJvLWxpc3QvIiwic291cmNlcyI6WyJsaWIvY29tYm8tbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUNoRyxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFvQyxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUkvQyxNQUFNLE9BQU8sMEJBQTBCLEdBQVE7SUFDM0MsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7SUFDakQsS0FBSyxFQUFFLElBQUk7Q0FDZDtBQVNELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxrQkFBa0I7Ozs7Ozs7OztJQXFCdEQsWUFDVyxFQUFjLEVBQ2QsR0FBc0IsRUFDSixRQUFhLEVBQy9CLE1BQWlCLEVBQ2pCLFlBQTBCLEVBQzFCLFFBQWtCO1FBRXpCLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBUGxELE9BQUUsR0FBRixFQUFFLENB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VyxTQUFDLHlCQUF5QjtvQ0FxRHJDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7OEJBd0ZsQyxZQUFZLFNBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBM0p2QywwQ0FBMkI7Ozs7O0lBRzNCLDJDQUFvQzs7Ozs7SUFFcEMsOENBQWlDOzs7OztJQUtqQywyQ0FBa0Q7O0lBQ2xELHlDQUFnRDs7SUFDaEQsd0NBQTRCOztJQUM1QixpQ0FBOEM7Ozs7O0lBTTlDLHdDQUErQjs7SUFFM0IsZ0NBQXFCOztJQUNyQixpQ0FBNkI7O0lBQzdCLHNDQUFzQzs7SUFDdEMsb0NBQXdCOztJQUN4QiwwQ0FBaUM7O0lBQ2pDLHNDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmLCBJbmplY3QsIFJlbmRlcmVyMiwgZm9yd2FyZFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICAgICAgIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgSW5qZWN0b3IsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRGF0YWxpc3RDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFsaXN0JztcclxuaW1wb3J0IHsgQmFzZUNvbWJvQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlLWNvbWJvLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNlbGVjdEl0ZW0gfSBmcm9tICcuL2NvbWJvLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IENvbWJvU2VydmljZSB9IGZyb20gJy4vY29tYm8uc2VydmljZSc7XHJcbmltcG9ydCB7IGZpbHRlciwgdGFrZSwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBJTlBVVF9DT01CT19WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDb21ib0xpc3RDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1jb21iby1saXN0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb21iby1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICAgIC8vIHN0eWxlVXJsczogWycuL2NvbWJvLWxpc3QuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAgIHByb3ZpZGVyczogW0lOUFVUX0NPTUJPX1ZBTFVFX0FDQ0VTU09SLCBDb21ib1NlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb21ib0xpc3RDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tYm9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICBASW5wdXQoKSBpdGVtVGVtcGxhdGU6IGFueTtcclxuXHJcbiAgICAvKiog5pWw5o2u5Lit5qCH6K+G56aB55So55qE5a2X5q615ZCN56ew77yM6buY6K6k5Li6IGRpc2FibGVkICovXHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZEZpZWxkID0gJ2Rpc2FibGVkJztcclxuICAgIC8qKiDliJfooajkuK3mmK/lkKbmmL7npLrlt7LnpoHnlKjnmoTpobnvvIzpu5jorqQgdHJ1ZSAqL1xyXG4gICAgQElucHV0KCkgc2hvd0Rpc2FibGVkSXRlbSA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmL7npLrpnaLmnb/mlrnlvI/vvJogY2xpY2sgfCBmb2N1cywg6buY6K6k77yaIGNsaWNrXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHNob3dQYW5lbFR5cGU6ICdjbGljayd8J2ZvY3VzJyA9ICdjbGljayc7XHJcbiAgICBAVmlld0NoaWxkKCdkbCcpIGRhdGFMaXN0UmVmOiBEYXRhbGlzdENvbXBvbmVudDtcclxuICAgIEBJbnB1dCgpIGl0ZW1IZWlnaHQ6IG51bWJlcjtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1jb21iby1saXN0JykgY2xzID0gdHJ1ZTtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1jb21iby1saXN0LS10YWcnKVxyXG4gICAgZ2V0IGNsc1RhZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3VHlwZSA9PT0gJ3RhZyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaWx0ZXJEYXRhOiBhbnlbXSA9IFtdO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHB1YmxpYyBkb2N1bWVudDogYW55LFxyXG4gICAgICAgIHB1YmxpYyByZW5kZXI6IFJlbmRlcmVyMixcclxuICAgICAgICBwdWJsaWMgY29tYm9TZXJ2aWNlOiBDb21ib1NlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoZWwsIGNkciwgZG9jdW1lbnQsIHJlbmRlciwgY29tYm9TZXJ2aWNlLCBpbmplY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgaWYgKHRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVDYW5jZWxTZWxlY3RlZCA9IHRoaXMubXVsdGlTZWxlY3Q7XHJcbiAgICAgICB9XHJcbiAgICAgICB0aGlzLnJlbW90ZVNlYXJjaCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpoLmnpznm7TmjqXnu5HlrprkuIDkuKrmlbDnu4TkvZzkuLrliJfooajmlbDmja7lubbkuJQgZGF0YSDmmK/lvILmraXmlbDmja7vvIzpnIDopoHmraTmlrnms5XvvIzlkIzmraVkaXNwbGF5VGV4dOS4jnNlbGVjdGVkVmFsdWVzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZGF0YSAmJiAhY2hhbmdlcy5kYXRhLmZpcnN0Q2hhbmdlICYmICF0aGlzLnVyaSAmJiAhdGhpcy5ub3NlYXJjaCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhcyA9IGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIGxldCB2YWwgPSB0aGlzLm5nQ29udHJvbCA/IHRoaXMubmdDb250cm9sLnZhbHVlIHx8IHRoaXMuc2VsZWN0ZWRWYWx1ZXMgOiB0aGlzLnNlbGVjdGVkVmFsdWVzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnNlbGVjdGVkVmFsdWVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmRpc3BsYXlUZXh0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBudWxsICYmIGRhdGFzICYmIGRhdGFzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRBcnIgPSB0aGlzLmZpbHRlclNlbGVjdGlvbnModmFsLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9IHRleHRBcnIuZmlsdGVyKHYgPT4gISF2KS5qb2luKHRoaXMuc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2VsZWN0aW9ucyh2YWwsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5zZWxlY3Rpb25zJC5uZXh0KHthY3Rpb246ICdpbml0RGF0YSd9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiAoY2hhbmdlcy5tdWx0aVNlbGVjdCAmJiAhY2hhbmdlcy5tdWx0aVNlbGVjdC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5lbmFibGVDYW5jZWxTZWxlY3RlZCA9IHRoaXMubXVsdGlTZWxlY3Q7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxyXG4gICAgcmVnaXN0ZXJLZXlib2FyZEV2ZW50KCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCB8fCAodGhpcy5yZWFkb25seSB8fCB0aGlzLmRpc2FibGVkKSkgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCRldmVudC5jb2RlID09PSAnQXJyb3dVcCcgfHwgJGV2ZW50LmNvZGUgPT09ICdBcnJvd0Rvd24nIHx8XHJcbiAgICAgICAgICAgICghdGhpcy5lZGl0YWJsZSAmJiAhdGhpcy5yZWFkb25seSAmJiAhdGhpcy5kaXNhYmxlZCAmJiAkZXZlbnQuY29kZSA9PT0gJ1NwYWNlJykpIHtcclxuICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdEl0ZW0gPSAoaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb21ib1NlcnZpY2Uuc2VsZWN0SXRlbShkYXRhW2luZGV4XSwgaW5kZXgsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge2RhdGE6IGRhdGFbaW5kZXhdLCBpbmRleH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0N1cnJlbnRJdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdFZhbHVlcyhwYXJhbXMpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZmlsdGVyRGF0YSAmJiB0aGlzLmZpbHRlckRhdGEubGVuZ3RoID8gdGhpcy5maWx0ZXJEYXRhIDogdGhpcy5kYXRhO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXNbJ19jbWJQYW5lbCddKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgX2RhdGEgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWRGaWVsZCkge1xyXG4gICAgICAgICAgICBfZGF0YSA9IGRhdGEuZmlsdGVyKG4gPT4gIXRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy5kaXNhYmxlZEZpZWxkLCBuKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdldHJlYWxJbmRleCA9IChpZHgsIG5leHRJZHgsIGlzTmV4dCA9IHRydWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbbmV4dElkeF0pIHtcclxuICAgICAgICAgICAgICAgIC8vIOWIpOaWreS4i+S4gOmhueaYr+WQpuemgeeUqFxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy5kaXNhYmxlZEZpZWxkLCBkYXRhW25leHRJZHhdKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0Rpc2FibGVkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9pZHggPSBfZGF0YS5maW5kSW5kZXgobiA9PiB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgbikgPT09IHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy5pZEZpZWxkLCBkYXRhW2lkeF0pKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJZHggPSBfaWR4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0SWR4ID0gX2lkeCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGF0YVtuZXh0SWR4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5maW5kSW5kZXgobiA9PiB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgbikgPT09IHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy5pZEZpZWxkLCBfZGF0YVtuZXh0SWR4XSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0lkZXggPSBuZXh0SWR4ID4gMCA/IDAgOiBfZGF0YS5sZW5ndGggLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmZpbmRJbmRleChuID0+IHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy5pZEZpZWxkLCBuKSA9PT0gdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSh0aGlzLmlkRmllbGQsIF9kYXRhW25ld0lkZXhdKSAmJiAhdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSh0aGlzLmRpc2FibGVkRmllbGQsIG4pKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SWR4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpZHggPSBkYXRhLmZpbmRJbmRleChuID0+IHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy5pZEZpZWxkLCBuKSA9PSB0aGlzLnNlbGVjdGVkVmFsdWVzKTtcclxuXHJcbiAgICAgICAgaWYgKCRldmVudC5jb2RlID09PSAnQXJyb3dVcCcpIHsgIC8vIHVwXHJcbiAgICAgICAgICAgIGxldCBwcmV2SWR4ID0gaWR4IC0gMTtcclxuICAgICAgICAgICAgaWYgKHByZXZJZHggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2SWR4ID0gZGF0YS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2SWR4ID0gZ2V0cmVhbEluZGV4KGlkeCxwcmV2SWR4LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGVjdEl0ZW0ocHJldklkeCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkZXZlbnQuY29kZSA9PT0gJ0Fycm93RG93bicgfHwgKCRldmVudC5jb2RlID09PSAnU3BhY2UnICYmICF0aGlzLmVkaXRhYmxlKSkgeyAvLyBkb3duXHJcbiAgICAgICAgICAgIGxldCBuZXh0SWR4ID0gaWR4ICsgMTtcclxuICAgICAgICAgICAgaWYgKG5leHRJZHggPj0gZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIG5leHRJZHggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0SWR4ID0gZ2V0cmVhbEluZGV4KGlkeCxuZXh0SWR4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZWN0SXRlbShuZXh0SWR4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVzYycsIFsnJGV2ZW50J10pXHJcbiAgICBlc2NIYW5kbGVyRXZlbnQoJGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25TZWxlY3Rpb25zQ2hhbmdlKHY6IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXJpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbnMgJiYgdGhpcy5zZWxlY3Rpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IHRoaXMuc2VsZWN0aW9ucy5tYXAobiA9PiBuW3RoaXMuaWRGaWVsZF0pLmpvaW4odGhpcy5zZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlU2VsZWN0VmFsdWVzKGl0ZW06IFNlbGVjdEl0ZW0sIGVtaXRFdmVudCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCB7IGRhdGEsIGluZGV4IH0gPSB7IC4uLml0ZW0gfTtcclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5zZWxlY3RJdGVtKGRhdGEsIGluZGV4KTtcclxuICAgICAgICBpZiAodGhpcy5kYXRhTGlzdFJlZikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gdGhpcy5kYXRhTGlzdFJlZi5zZWxlY3RlZFZhbHVlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSBkYXRhW3RoaXMuaWRGaWVsZF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBfZGlzcGxheVRleHQgPSB0aGlzLmNvbWJvU2VydmljZS5nZXRWYWx1ZSh0aGlzLnRleHRGaWVsZCk7XHJcbiAgICAgICAgaWYgKGVtaXRFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdENoYW5nZS5lbWl0KHsgZGF0YSwgaW5kZXgsIGluc3RhbmNlOiB0aGlzLCBzZWxlY3Rpb25zOiB0aGlzLnNlbGVjdGlvbnMgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2UoeyB0ZXh0OiBfZGlzcGxheVRleHQsIHZhbHVlOiB0aGlzLnNlbGVjdGVkVmFsdWVzLCBzZWxlY3Rpb25zOiB0aGlzLnNlbGVjdGlvbnMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2Nyb2xsVG9DdXJyZW50SXRlbShpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YUxpc3RSZWYgJiYgdGhpcy5kYXRhTGlzdFJlZi5lbCkge1xyXG4gICAgICAgICAgICBjb25zdCB1bEVsID0gdGhpcy5kYXRhTGlzdFJlZi5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsLmxpc3QtZ3JvdXAnKTtcclxuICAgICAgICAgICAgaWYgKHVsRWwgJiYgdWxFbC5jaGlsZHJlbiAmJiB1bEVsLmNoaWxkcmVuW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgdWxFbC5jaGlsZHJlbltpbmRleF0uc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiAnbmVhcmVzdCd9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblNlbGVjdChpdGVtOiBTZWxlY3RJdGVtKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RWYWx1ZXMoaXRlbSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5pc09wZW4kLm5leHQoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblVuU2VsZWN0ZWQodmFsdWU6IFNlbGVjdEl0ZW0pIHtcclxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHsgLi4udmFsdWUgfTtcclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS51blNlbGVjdEl0ZW0oZGF0YSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YUxpc3RSZWYpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IHRoaXMuZGF0YUxpc3RSZWYuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmICghdGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gZGF0YVt0aGlzLmlkRmllbGRdO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBjb25zdCBfZGlzcGxheVRleHQgPSB0aGlzLmNvbWJvU2VydmljZS5nZXRWYWx1ZSh0aGlzLnRleHRGaWVsZCk7XHJcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKHsgdGV4dDogX2Rpc3BsYXlUZXh0LCB2YWx1ZTogdGhpcy5zZWxlY3RlZFZhbHVlcywgc2VsZWN0aW9uczogdGhpcy5zZWxlY3Rpb25zIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRW50ZXIoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbktleXVwKCRldmVudCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbktleWRvd24oJGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCRldmVudC5jb2RlID09PSAnVGFiJykge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkZvY3VzKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dQYW5lbFR5cGUgPT09ICdmb2N1cycpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVNlbGVjdEl0ZW0oJGV2ZW50OiBNb3VzZUV2ZW50LCBpdGVtKSB7XHJcbiAgICAgICAgaWYgKCRldmVudCkge1xyXG4gICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLnVuU2VsZWN0SXRlbShpdGVtKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gdGhpcy5jb21ib1NlcnZpY2UuZ2V0VmFsdWUodGhpcy5pZEZpZWxkKTtcclxuICAgICAgICBjb25zdCBfZGlzcGxheVRleHQgPSB0aGlzLmNvbWJvU2VydmljZS5nZXRWYWx1ZSh0aGlzLnRleHRGaWVsZCk7XHJcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSh7IHRleHQ6IF9kaXNwbGF5VGV4dCwgdmFsdWU6IHRoaXMuc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGlvbnM6IHRoaXMuc2VsZWN0aW9ucyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgaW5pdERhdGFzQ2hhbmdlQWN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLmRhdGEkLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gZGF0YTtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCAmJiAhdGhpcy5lZGl0YWJsZSkge1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdGVkVmFsdWVzID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRWYWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWR4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdGVkVmFsdWVzID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdGhpcy5zZWxlY3RlZFZhbHVlcyA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gZGF0YS5maWx0ZXIoKG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuW3RoaXMuaWRGaWVsZF0gPT09IHRoaXMuc2VsZWN0ZWRWYWx1ZXMgfHwgblt0aGlzLnRleHRGaWVsZF0gPT09IHRoaXMuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5zZWxlY3RlZFZhbHVlcy5zcGxpdCh0aGlzLnNlcGFyYXRvcikubWFwKHZhbCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5maW5kKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5bdGhpcy5pZEZpZWxkXSA9PT0gdmFsIHx8IG5bdGhpcy50ZXh0RmllbGRdID09PSB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbnMgfHwgIXRoaXMuc2VsZWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IGl0ZW1zLm1hcChpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSh0aGlzLmlkRmllbGQsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbih0aGlzLnNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBpdGVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZHggPSBkYXRhLmZpbmRJbmRleChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgbikgID09PSB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgdGhpcy5zZWxlY3Rpb25zWzBdKSB8fCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSh0aGlzLnRleHRGaWVsZCwgbikgPT09IHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy50ZXh0RmllbGQsIHRoaXMuc2VsZWN0aW9uc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpZHggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9DdXJyZW50SXRlbShpZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbiJdfQ==