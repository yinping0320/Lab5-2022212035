import { Directive, Input, HostBinding, ElementRef, Renderer2, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisFlexDirective = /** @class */ (function () {
    function FarrisFlexDirective(el, render) {
        this.el = el;
        this.render = render;
        this.fill = false;
        this.direction = 'row';
        this.type = 'flex';
        this.justifyContent = 'start';
        this.alignItems = 'start';
        this.displayFlex = this.type === 'flex';
        this.nativeClass = ' ';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    Object.defineProperty(FarrisFlexDirective.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: /**
         * @param {?} width
         * @return {?}
         */
        function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFlexDirective.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFlexDirective.prototype, "currentStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeClass + " " + this.getDirection() + " " + this.getJsutifyClass() + " " + this.getAlignClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFlexDirective.prototype, "flexFill", {
        get: /**
         * @return {?}
         */
        function () {
            return this.fill;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisFlexDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    };
    /**
     * @return {?}
     */
    FarrisFlexDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    FarrisFlexDirective.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    /**
     * @return {?}
     */
    FarrisFlexDirective.prototype.getDirection = /**
     * @return {?}
     */
    function () {
        return this.direction !== 'row' ? "flex-" + this.direction : '';
    };
    /* 获取flex 主轴排列方式类 */
    /* 获取flex 主轴排列方式类 */
    /**
     * @return {?}
     */
    FarrisFlexDirective.prototype.getJsutifyClass = /* 获取flex 主轴排列方式类 */
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isJustify = this.justifyContent !== 'start';
        return isJustify ? "justify-content-" + this.justifyContent : '';
    };
    /* 获取flex交叉轴 排列方式类 */
    /* 获取flex交叉轴 排列方式类 */
    /**
     * @return {?}
     */
    FarrisFlexDirective.prototype.getAlignClass = /* 获取flex交叉轴 排列方式类 */
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isAlign = this.alignItems !== 'start';
        return isAlign ? "align-items-" + this.alignItems : '';
    };
    FarrisFlexDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-flex]'
                },] }
    ];
    /** @nocollapse */
    FarrisFlexDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FarrisFlexDirective.propDecorators = {
        fill: [{ type: Input }],
        direction: [{ type: Input }],
        type: [{ type: Input }],
        justifyContent: [{ type: Input, args: ['justify',] }],
        alignItems: [{ type: Input, args: ['align',] }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        currentStyle: [{ type: HostBinding, args: ["class",] }],
        flexFill: [{ type: HostBinding, args: ['class.flex-fill',] }],
        displayFlex: [{ type: HostBinding, args: ['class.d-flex',] }]
    };
    return FarrisFlexDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FlexLayoutModule = /** @class */ (function () {
    function FlexLayoutModule() {
    }
    FlexLayoutModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        FarrisFlexDirective
                    ],
                    exports: [
                        FarrisFlexDirective
                    ]
                },] }
    ];
    return FlexLayoutModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisFlexDirective, FlexLayoutModule };

//# sourceMappingURL=farris-ui-flex-layout.js.map