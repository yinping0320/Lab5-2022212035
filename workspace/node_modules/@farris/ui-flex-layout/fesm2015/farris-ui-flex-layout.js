import { Directive, Input, HostBinding, ElementRef, Renderer2, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisFlexDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.fill = false;
        this.direction = 'row';
        this.type = 'flex';
        this.justifyContent = 'start';
        this.alignItems = 'start';
        this.displayFlex = this.type === 'flex';
        this.nativeClass = ' ';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    /**
     * @return {?}
     */
    get width() {
        // 对各个单位进行处理
        return this._width;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    set width(width) {
        this._width = this.resolveSize(width);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = this.resolveSize(height);
    }
    /**
     * @return {?}
     */
    get currentStyle() {
        return `${this.nativeClass} ${this.getDirection()} ${this.getJsutifyClass()} ${this.getAlignClass()}`;
    }
    /**
     * @return {?}
     */
    get flexFill() {
        return this.fill;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? `${parseInt(size, 10)}${size.match(regex)[0]}` : `${size}px`;
    }
    /**
     * @return {?}
     */
    getDirection() {
        return this.direction !== 'row' ? `flex-${this.direction}` : '';
    }
    /* 获取flex 主轴排列方式类 */
    /**
     * @return {?}
     */
    getJsutifyClass() {
        /** @type {?} */
        const isJustify = this.justifyContent !== 'start';
        return isJustify ? `justify-content-${this.justifyContent}` : '';
    }
    /* 获取flex交叉轴 排列方式类 */
    /**
     * @return {?}
     */
    getAlignClass() {
        /** @type {?} */
        const isAlign = this.alignItems !== 'start';
        return isAlign ? `align-items-${this.alignItems}` : '';
    }
}
FarrisFlexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-flex]'
            },] }
];
/** @nocollapse */
FarrisFlexDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisFlexDirective.propDecorators = {
    fill: [{ type: Input }],
    direction: [{ type: Input }],
    type: [{ type: Input }],
    justifyContent: [{ type: Input, args: ['justify',] }],
    alignItems: [{ type: Input, args: ['align',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    currentStyle: [{ type: HostBinding, args: [`class`,] }],
    flexFill: [{ type: HostBinding, args: ['class.flex-fill',] }],
    displayFlex: [{ type: HostBinding, args: ['class.d-flex',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FlexLayoutModule {
}
FlexLayoutModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    FarrisFlexDirective
                ],
                exports: [
                    FarrisFlexDirective
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisFlexDirective, FlexLayoutModule };

//# sourceMappingURL=farris-ui-flex-layout.js.map