/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
export class FarrisFlexDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.fill = false;
        this.direction = 'row';
        this.type = 'flex';
        this.justifyContent = 'start';
        this.alignItems = 'start';
        this.displayFlex = this.type === 'flex';
        this.nativeClass = ' ';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    /**
     * @return {?}
     */
    get width() {
        // 对各个单位进行处理
        return this._width;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    set width(width) {
        this._width = this.resolveSize(width);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = this.resolveSize(height);
    }
    /**
     * @return {?}
     */
    get currentStyle() {
        return `${this.nativeClass} ${this.getDirection()} ${this.getJsutifyClass()} ${this.getAlignClass()}`;
    }
    /**
     * @return {?}
     */
    get flexFill() {
        return this.fill;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? `${parseInt(size, 10)}${size.match(regex)[0]}` : `${size}px`;
    }
    /**
     * @return {?}
     */
    getDirection() {
        return this.direction !== 'row' ? `flex-${this.direction}` : '';
    }
    /* 获取flex 主轴排列方式类 */
    /**
     * @return {?}
     */
    getJsutifyClass() {
        /** @type {?} */
        const isJustify = this.justifyContent !== 'start';
        return isJustify ? `justify-content-${this.justifyContent}` : '';
    }
    /* 获取flex交叉轴 排列方式类 */
    /**
     * @return {?}
     */
    getAlignClass() {
        /** @type {?} */
        const isAlign = this.alignItems !== 'start';
        return isAlign ? `align-items-${this.alignItems}` : '';
    }
}
FarrisFlexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-flex]'
            },] }
];
/** @nocollapse */
FarrisFlexDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisFlexDirective.propDecorators = {
    fill: [{ type: Input }],
    direction: [{ type: Input }],
    type: [{ type: Input }],
    justifyContent: [{ type: Input, args: ['justify',] }],
    alignItems: [{ type: Input, args: ['align',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    currentStyle: [{ type: HostBinding, args: [`class`,] }],
    flexFill: [{ type: HostBinding, args: ['class.flex-fill',] }],
    displayFlex: [{ type: HostBinding, args: ['class.d-flex',] }]
};
if (false) {
    /** @type {?} */
    FarrisFlexDirective.prototype.fill;
    /** @type {?} */
    FarrisFlexDirective.prototype.direction;
    /** @type {?} */
    FarrisFlexDirective.prototype.type;
    /** @type {?} */
    FarrisFlexDirective.prototype.justifyContent;
    /** @type {?} */
    FarrisFlexDirective.prototype.alignItems;
    /** @type {?} */
    FarrisFlexDirective.prototype._width;
    /** @type {?} */
    FarrisFlexDirective.prototype._height;
    /** @type {?} */
    FarrisFlexDirective.prototype.displayFlex;
    /** @type {?} */
    FarrisFlexDirective.prototype.nativeClass;
    /**
     * @type {?}
     * @private
     */
    FarrisFlexDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisFlexDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZsZXgtbGF5b3V0LyIsInNvdXJjZXMiOlsibGliL2ZsZXgtZGlyZWN0aXZlL2ZsZXguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQVUsVUFBVSxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFJNUcsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUFtQzVCLFlBQW9CLEVBQWMsRUFBVSxNQUFpQjtRQUF6QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQWxDcEQsU0FBSSxHQUFZLEtBQUssQ0FBQztRQUN0QixjQUFTLEdBQVcsS0FBSyxDQUFDO1FBQzFCLFNBQUksR0FBVyxNQUFNLENBQUM7UUFDYixtQkFBYyxHQUFXLE9BQU8sQ0FBQztRQUNuQyxlQUFVLEdBQVcsT0FBTyxDQUFDO1FBNEJoQixnQkFBVyxHQUFZLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDO1FBQ3pFLGdCQUFXLEdBQUcsR0FBRyxDQUFDO1FBRWQsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQzlELENBQUM7Ozs7SUEzQkQsSUFDSSxLQUFLO1FBQ0wsWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDOzs7OztJQUNELElBQUksS0FBSyxDQUFDLEtBQVU7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7SUFDRCxJQUNJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFXO1FBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7O0lBQ0QsSUFDSSxZQUFZO1FBQ1osT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztJQUMxRyxDQUFDOzs7O0lBQ0QsSUFDSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFNRCxRQUFRO1FBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Ozs7SUFDRCxlQUFlO0lBRWYsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLElBQUk7O2NBQ04sS0FBSyxHQUFHLGdCQUFnQjtRQUM5QixTQUFTO1FBQ1QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDO0lBQzNGLENBQUM7Ozs7SUFDRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNwRSxDQUFDOzs7OztJQUVELGVBQWU7O2NBQ0wsU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLEtBQUssT0FBTztRQUVqRCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JFLENBQUM7Ozs7O0lBRUQsYUFBYTs7Y0FDSCxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxPQUFPO1FBQzNDLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNELENBQUM7OztZQW5FSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7YUFDNUI7Ozs7WUFIK0MsVUFBVTtZQUFFLFNBQVM7OzttQkFLaEUsS0FBSzt3QkFDTCxLQUFLO21CQUNMLEtBQUs7NkJBQ0wsS0FBSyxTQUFDLFNBQVM7eUJBQ2YsS0FBSyxTQUFDLE9BQU87b0JBS2IsS0FBSztxQkFRTCxLQUFLOzJCQU9MLFdBQVcsU0FBQyxPQUFPO3VCQUluQixXQUFXLFNBQUMsaUJBQWlCOzBCQUk3QixXQUFXLFNBQUMsY0FBYzs7OztJQWhDM0IsbUNBQStCOztJQUMvQix3Q0FBbUM7O0lBQ25DLG1DQUErQjs7SUFDL0IsNkNBQW1EOztJQUNuRCx5Q0FBNkM7O0lBRzdDLHFDQUF3Qjs7SUFDeEIsc0NBQXlCOztJQXdCekIsMENBQXlFOztJQUN6RSwwQ0FBa0I7Ozs7O0lBQ04saUNBQXNCOzs7OztJQUFFLHFDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RCaW5kaW5nLCBPbkluaXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbZmFycmlzLWZsZXhdJ1xufSlcbmV4cG9ydCBjbGFzcyBGYXJyaXNGbGV4RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICBASW5wdXQoKSBmaWxsOiBib29sZWFuID0gZmFsc2U7XG4gICAgQElucHV0KCkgZGlyZWN0aW9uOiBzdHJpbmcgPSAncm93JztcbiAgICBASW5wdXQoKSB0eXBlOiBzdHJpbmcgPSAnZmxleCc7XG4gICAgQElucHV0KCdqdXN0aWZ5JykganVzdGlmeUNvbnRlbnQ6IHN0cmluZyA9ICdzdGFydCc7XG4gICAgQElucHV0KCdhbGlnbicpIGFsaWduSXRlbXM6IHN0cmluZyA9ICdzdGFydCc7XG4gICAgLy8g5Y+v5Lul6K6+572u5a695bqm5ZKM6auY5bqmXG4gICAgLy8g6K6+572u5a69IOmrmOWxnuaAp1xuICAgIF93aWR0aDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIF9oZWlnaHQ6IHN0cmluZyB8IG51bWJlcjtcbiAgICBASW5wdXQoKVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgLy8g5a+55ZCE5Liq5Y2V5L2N6L+b6KGM5aSE55CGXG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgICB9XG4gICAgc2V0IHdpZHRoKHdpZHRoOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB0aGlzLnJlc29sdmVTaXplKHdpZHRoKTtcbiAgICB9XG4gICAgQElucHV0KClcbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICAgIH1cbiAgICBzZXQgaGVpZ2h0KGhlaWdodDogYW55KSB7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IHRoaXMucmVzb2x2ZVNpemUoaGVpZ2h0KTtcbiAgICB9XG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzc2ApXG4gICAgZ2V0IGN1cnJlbnRTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubmF0aXZlQ2xhc3N9ICR7dGhpcy5nZXREaXJlY3Rpb24oKX0gJHt0aGlzLmdldEpzdXRpZnlDbGFzcygpfSAke3RoaXMuZ2V0QWxpZ25DbGFzcygpfWA7XG4gICAgfVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmxleC1maWxsJylcbiAgICBnZXQgZmxleEZpbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGw7XG4gICAgfVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZC1mbGV4JykgZGlzcGxheUZsZXg6IGJvb2xlYW4gPSB0aGlzLnR5cGUgPT09ICdmbGV4JztcbiAgICBuYXRpdmVDbGFzcyA9ICcgJztcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XG4gICAgICAgIHRoaXMubmF0aXZlQ2xhc3MgKz0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC52YWx1ZTtcbiAgICB9XG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3dpZHRoJywgdGhpcy53aWR0aCk7XG4gICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuXG4gICAgfVxuICAgIC8q5a696auY57G75Z6L5pivIHN0cmluZ+aIluiAhW51bWJlciDop6PmnpDlrr3pq5ggIOWwuuWvuCAqL1xuICAgIHJlc29sdmVTaXplKHNpemUpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSAvcHh8ZW18cmVtfHB0fCUvO1xuICAgICAgICAvLyDor7TmmI7mmK/lrZfnrKbkuLJcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3Qoc2l6ZSkgPyBgJHtwYXJzZUludChzaXplLCAxMCl9JHtzaXplLm1hdGNoKHJlZ2V4KVswXX1gIDogYCR7c2l6ZX1weGA7XG4gICAgfVxuICAgIGdldERpcmVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uICE9PSAncm93JyA/IGBmbGV4LSR7dGhpcy5kaXJlY3Rpb259YCA6ICcnO1xuICAgIH1cbiAgICAvKiDojrflj5ZmbGV4IOS4u+i9tOaOkuWIl+aWueW8j+exuyAqL1xuICAgIGdldEpzdXRpZnlDbGFzcygpIHtcbiAgICAgICAgY29uc3QgaXNKdXN0aWZ5ID0gdGhpcy5qdXN0aWZ5Q29udGVudCAhPT0gJ3N0YXJ0JztcblxuICAgICAgICByZXR1cm4gaXNKdXN0aWZ5ID8gYGp1c3RpZnktY29udGVudC0ke3RoaXMuanVzdGlmeUNvbnRlbnR9YCA6ICcnO1xuICAgIH1cbiAgICAvKiDojrflj5ZmbGV45Lqk5Y+J6L20IOaOkuWIl+aWueW8j+exuyAqL1xuICAgIGdldEFsaWduQ2xhc3MoKSB7XG4gICAgICAgIGNvbnN0IGlzQWxpZ24gPSB0aGlzLmFsaWduSXRlbXMgIT09ICdzdGFydCc7XG4gICAgICAgIHJldHVybiBpc0FsaWduID8gYGFsaWduLWl0ZW1zLSR7dGhpcy5hbGlnbkl0ZW1zfWAgOiAnJztcbiAgICB9XG59XG4iXX0=