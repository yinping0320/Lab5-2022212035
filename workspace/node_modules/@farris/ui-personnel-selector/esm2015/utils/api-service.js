/**
 * @fileoverview added by tsickle
 * Generated from: utils/api-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { BasePathService } from '@farris/rtf';
export class ApiLocalService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    filterGroupLeader(param) {
        /** @type {?} */
        const url = BasePathService.convertPath('/api/runtime/sys/v1.0/absRecentContacts/modify');
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url, param, options);
    }
    /**
     * @param {?} param
     * @return {?}
     */
    getGroupLeaderStatus(param) {
        /** @type {?} */
        const url = BasePathService.convertPath('/api/runtime/sys/v1.0/absRecentContacts/getRecentContacts');
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url, param, options);
    }
    /**
     * 获取行政组织
     * @param {?} url
     * @param {?} param
     * @return {?} observable
     */
    getOrganization(url, param) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url + '/org', param, options);
    }
    /**
     * 获取系统用户分组
     * @param {?} param
     * @return {?} observable
     */
    getSysUserGroup(param) {
        /** @type {?} */
        const url = BasePathService.convertPath('/api/runtime/sys/v1.0/usergroups');
        /** @type {?} */
        const paramStr = JSON.stringify(param);
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
            params: {
                param: paramStr,
            }
        };
        return this.http.get(url, options);
    }
    /**
     *
     * @param {?} url url地址
     * @param {?} absOrgType 系统组织
     * @param {?} orgId 组织id
     * @param {?} requestParam 请求参数
     * @return {?} observable
     */
    getPersonnelByOrgId(url, absOrgType, orgId, requestParam) {
        /** @type {?} */
        const body = {
            absOrgType,
            // 组织类型，默认为系统组织
            pageIndex: requestParam.pageIndex,
            // 当前页
            pageSize: requestParam.pageSize,
            // 每页记录数
            getUserInfo: true,
            orgId,
            // 组织id，获取当前组织下的用户
            withAllOrg: requestParam.withAllOrg,
            // 获取组织及其所有下级组织下的用户，默认false
            notGetStopUser: requestParam.notGetStopUser,
            // 是否获取停用用户，默认为false，
            notGetCurrentUser: requestParam.notGetCurrentUser,
            // 是否获取当前用户，默认为true，
            orderField: requestParam.orderField,
            // 排序
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            posId: requestParam.posId,
            withPermission: requestParam.withPermission,
            authOp: requestParam.authOp,
            securityControl: requestParam.securityControl,
            securityLevel: requestParam.securityLevel
        };
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url + '/user', body, options);
    }
    // 根据系统用户分组id获取分组下成员
    /**
     * @param {?} url
     * @param {?} requestParam
     * @return {?}
     */
    getPersonnelByUserGroupId(url, requestParam) {
        /** @type {?} */
        const body = {
            pageIndex: requestParam.pageIndex,
            // 当前页
            pageSize: requestParam.pageSize,
            // 每页记录数
            getUserInfo: true,
            // 是否获取用户头像
            withAllGroup: requestParam.withAllGroup,
            withAllOrg: requestParam.withAllOrg,
            notGetStopUser: requestParam.notGetStopUser,
            // 是否获取停用用户，默认为false，
            notGetCurrentUser: requestParam.notGetCurrentUser,
            // 是否获取当前用户，默认为true，
            orderField: requestParam.orderField,
            // 排序
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            groupId: requestParam.groupId,
            withPermission: requestParam.withPermission,
            authOp: requestParam.authOp,
            securityControl: requestParam.securityControl,
            securityLevel: requestParam.securityLevel
        };
        // 需要根据组织进行人员二次过滤
        if (requestParam.orgId) {
            body['orgId'] = requestParam.orgId;
        }
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url + '/user', body, options);
    }
    /**
     * 查询行政人员（根据人员id返回相关数据）
     * @param {?} url url地址
     * @param {?} searchParam
     * @return {?} observable
     */
    getPersonnelByUserIds(url, searchParam) {
        /** @type {?} */
        let idsArr = [];
        /** @type {?} */
        const userIds = searchParam.ids;
        if (userIds) {
            /** @type {?} */
            const lastChar = userIds.substring(userIds.length - 1);
            if (lastChar == ',') {
                /** @type {?} */
                const fixedIds = userIds.substring(0, userIds.length - 1);
                idsArr = fixedIds.split(',');
            }
            else {
                idsArr = userIds.split(',');
            }
        }
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        if (searchParam.absOrgType == 'System_organization' && searchParam.securityControl) {
            /** @type {?} */
            const searchRequestBody = {
                securityControl: searchParam.securityControl,
                securityLevel: searchParam.securityLevel,
                idList: idsArr
            };
            return this.http.post(`${url}/user/orgType/${searchParam.absOrgType}`, searchRequestBody, options);
        }
        else {
            return this.http.post(`${url}/user/${searchParam.absOrgType}`, idsArr, options);
        }
    }
    /**
     * 搜索行政人员（根据名称、编号搜索）
     * @param {?} url 传入的url
     * @param {?} absOrgType 数据源类型
     * @param {?} codeOrName 传入的搜索内容
     * @param {?} requestParam 请求参数
     * @return {?} observable
     */
    getPersonnelBySearch(url, absOrgType, codeOrName, requestParam) {
        /** @type {?} */
        const body = {
            absOrgType,
            // 组织类型，默认为系统组织
            getUserInfo: true,
            codeOrName,
            // 搜索内容
            withAllOrg: requestParam.withAllOrg,
            // 获取组织及其所有下级组织下的用户，默认false
            notGetStopUser: requestParam.notGetStopUser,
            // 是否获取停用用户，默认为false，
            notGetCurrentUser: requestParam.notGetCurrentUser,
            // 是否获取当前用户，默认为true，
            orderField: requestParam.orderField,
            // 排序
            userTypeMode: requestParam.userTypeMode,
            searchMode: 'or',
            pinyin: codeOrName,
            initials: codeOrName,
            filterId: requestParam.filterId,
            withPermission: requestParam.withPermission,
            authOp: requestParam.authOp,
            securityControl: requestParam.securityControl,
            securityLevel: requestParam.securityLevel
            // 暂无法提交测试
            //reverseOrgAllPath: requestParam.reverseOrgAllPath
        };
        if (requestParam.orgId) {
            body.orgId = requestParam.orgId;
        }
        if (requestParam.pageSize) {
            body.pageSize = requestParam.pageSize;
        }
        if (requestParam.pageIndex) {
            body.pageIndex = requestParam.pageIndex;
        }
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url + '/user', body, options);
    }
    /**
     * 获取群组信息
     * @param {?} url 接口地址
     * @param {?=} param
     * @return {?} observable
     */
    getGroupOrGroupPersonnel(url, param) {
        /** @type {?} */
        let baseUrl = url;
        if (param.parentid) {
            baseUrl += '?iseanble=' + param.isenable + '&parentid=' + param.parentid;
        }
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.get(baseUrl, options);
    }
    // 获取选人组件全局配置参数
    /**
     * @param {?} url
     * @return {?}
     */
    getGlobalParamConfig(url) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, options);
    }
    // 获取组织架构下所有成员所属的岗位，用于人员二次过滤
    /**
     * @param {?} url
     * @param {?} absOrgType
     * @param {?} requestParam
     * @return {?}
     */
    getFilterPosition(url, absOrgType, requestParam) {
        /** @type {?} */
        const body = {
            absOrgType,
            withAllOrg: requestParam.withAllOrg,
            getUserInfo: requestParam.getUserInfo,
            notGetStopUser: requestParam.notGetStopUser,
            notGetCurrentUser: requestParam.notGetCurrentUser,
            orderField: requestParam.orderField,
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            curUser: false,
            orgId: requestParam.orgId,
        };
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, body, options);
    }
    // 获取用户分组下所有成员所属的组织，用于人员二次过滤
    /**
     * @param {?} url
     * @param {?} absOrgType
     * @param {?} requestParam
     * @return {?}
     */
    getFilterOrganization(url, absOrgType, requestParam) {
        /** @type {?} */
        const body = {
            absOrgType,
            withAllOrg: requestParam.withAllOrg,
            getUserInfo: requestParam.getUserInfo,
            notGetStopUser: requestParam.notGetStopUser,
            notGetCurrentUser: requestParam.notGetCurrentUser,
            orderField: requestParam.orderField,
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            curUser: false,
            groupId: requestParam.groupId,
            orgId: requestParam.orgId,
        };
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, body, options);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getUserPositionInfo(url) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url + '/userPosition', options);
    }
    /**
     * @param {?} url
     * @param {?} requestParam
     * @return {?}
     */
    getAssignQueryResult(url, requestParam) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url, requestParam, options);
    }
    /**
     * @param {?} url
     * @param {?} requestParam
     * @return {?}
     */
    getUserManageAssignResult(url, requestParam) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url + '/userManageResult', requestParam, options);
    }
}
ApiLocalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApiLocalService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    ApiLocalService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,