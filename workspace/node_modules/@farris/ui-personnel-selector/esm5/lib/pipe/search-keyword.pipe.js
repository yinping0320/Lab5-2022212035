/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipe/search-keyword.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var SearchKeywordPipe = /** @class */ (function () {
    function SearchKeywordPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} value
     * @param {?} keyword
     * @return {?}
     */
    SearchKeywordPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} keyword
     * @return {?}
     */
    function (value, keyword) {
        if (!value || !keyword) {
            return value;
        }
        /** @type {?} */
        var Reg = new RegExp(keyword, 'i');
        /** @type {?} */
        var res = value.replace(Reg, "<a style=\"color: #2A87FF;\">" + keyword + "</a>");
        //console.log(res);
        return this.sanitizer.bypassSecurityTrustHtml(res);
    };
    SearchKeywordPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'keyword'
                },] }
    ];
    /** @nocollapse */
    SearchKeywordPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return SearchKeywordPipe;
}());
export { SearchKeywordPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchKeywordPipe.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWtleXdvcmQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktcGVyc29ubmVsLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsibGliL3BpcGUvc2VhcmNoLWtleXdvcmQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RDtJQUtFLDJCQUFvQixTQUF1QjtRQUF2QixjQUFTLEdBQVQsU0FBUyxDQUFjO0lBRTNDLENBQUM7Ozs7OztJQUVELHFDQUFTOzs7OztJQUFULFVBQVUsS0FBVSxFQUFFLE9BQWU7UUFDcEMsSUFBRyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN0QixPQUFPLEtBQUssQ0FBQztTQUNiOztZQUNLLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDOztZQUM5QixHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsa0NBQThCLE9BQU8sU0FBTSxDQUFDO1FBQzNFLG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Z0JBakJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsU0FBUztpQkFDaEI7Ozs7Z0JBSlEsWUFBWTs7SUFxQnJCLHdCQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FoQlksaUJBQWlCOzs7Ozs7SUFFaEIsc0NBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAna2V5d29yZCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNlYXJjaEtleXdvcmRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuXHJcbiAgfVxyXG5cclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwga2V5d29yZDogc3RyaW5nKTogYW55IHtcclxuXHQgIGlmKCF2YWx1ZSB8fCAha2V5d29yZCkge1xyXG5cdFx0ICByZXR1cm4gdmFsdWU7XHJcblx0ICB9XHJcblx0ICBjb25zdCBSZWcgPSBuZXcgUmVnRXhwKGtleXdvcmQsICdpJyk7XHJcblx0ICBjb25zdCByZXMgPSB2YWx1ZS5yZXBsYWNlKFJlZywgYDxhIHN0eWxlPVwiY29sb3I6ICMyQTg3RkY7XCI+JHtrZXl3b3JkfTwvYT5gKTtcclxuXHQgIC8vY29uc29sZS5sb2cocmVzKTtcclxuXHQgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChyZXMpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19