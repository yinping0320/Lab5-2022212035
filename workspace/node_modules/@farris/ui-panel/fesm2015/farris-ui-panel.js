import { CommonModule } from '@angular/common';
import { Component, Input, ViewEncapsulation, Output, EventEmitter, ElementRef, Renderer2, ViewChild, ContentChild, Optional, ChangeDetectorRef, HostBinding, NgModule } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisPanelComponent {
    /**
     * @param {?} render
     */
    constructor(render) {
        this.render = render;
        /* 自定义className */
        this.className = [];
        /* 面板是否可收折  默认收折*/
        this.foldable = true;
        // 设置手风琴模式  至多只有一个panel可以被选中
        this.accordion = false;
        this.modelChange = new EventEmitter();
        // @HostBinding('class.farris-panel') isPanel =
        // 双向绑定  当model数组改变时，相应的active状态的panel也要改变 从而改变视图
        // 双向绑定 用于存取active状态的panel
        this.modelValue = [];
        this.subscriber = [];
    }
    /* panel数据存储 */
    /**
     * @return {?}
     */
    get model() {
        return this.modelValue;
    }
    /**
     * @param {?} modelValue
     * @return {?}
     */
    set model(modelValue) {
        // 获取用户输入的值
        this.modelValue = modelValue;
        this.updateSubscriber();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 添加class名
        if (this.className.length) {
            this.className.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                this.render.addClass(this.farrisPanel.nativeElement, ele);
            }));
        }
        this.updateSubscriber();
    }
    /**
     * @param {?} value panel存储激活值
     * @return {?}
     */
    updateModel(value) {
        /** @type {?} */
        const index = this.modelValue.findIndex((/**
         * @param {?} val
         * @return {?}
         */
        val => val === value));
        // 如果没有匹配到点击的panel值  可能model里面不存在 可能model为空
        if (index < 0) {
            // 若是手风琴模式  先把所有panel处于未激活状态
            if (this.accordion) {
                this.model = [];
            }
            // 如果不是手风琴模式  直接激活即可
            this.modelValue.push(value);
            this.updateSubscriber();
            return this.modelChange.emit(this.modelValue);
        }
        // 如果index不为-1
        // 手风琴模式  关闭所有激活状态
        if (this.accordion) {
            this.model = [];
        }
        else {
            // 非手风琴模式 直接关闭当前panel即可
            this.modelValue.splice(index, 1);
        }
        this.updateSubscriber();
        this.modelChange.emit(this.modelValue);
    }
    /* 函数分发 */
    /**
     * @private
     * @return {?}
     */
    updateSubscriber() {
        this.subscriber.forEach((/**
         * @param {?} handle
         * @return {?}
         */
        handle => handle()));
    }
}
FarrisPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-panel',
                template: "<div #farrisPanel class=\"farris-panel\" [class.accordion]=\"accordion\" [style.width]=\"width+'px'\" [style.height]=\"height+'px'\">\r\n    <ng-content>\r\n    </ng-content>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".farris-panel{border:1px solid rgba(0,0,0,.125)}"]
            }] }
];
/** @nocollapse */
FarrisPanelComponent.ctorParameters = () => [
    { type: Renderer2 }
];
FarrisPanelComponent.propDecorators = {
    farrisPanel: [{ type: ViewChild, args: ['farrisPanel',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    className: [{ type: Input }],
    foldable: [{ type: Input }],
    defaultExpand: [{ type: Input }],
    accordion: [{ type: Input }],
    model: [{ type: Input }],
    modelChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const dropAnimation = trigger('dropAnimation', [
    state('active', style({
        'height': '*',
    })),
    state('inactive', style({
        'height': '0',
        'overflow': 'hidden'
    })),
    transition('active<=>inactive', animate(`.35s ease`)),
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisPanelItemComponent {
    /**
     * @param {?} panel
     * @param {?} changeRef
     * @param {?} render
     * @param {?} el
     */
    constructor(panel, changeRef, render, el) {
        this.panel = panel;
        this.changeRef = changeRef;
        this.render = render;
        this.el = el;
        this.isPanelItem = true;
        this.isCard = true;
        // 默认非激活状态
        this.active = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 全部展开
        if (this.panel.defaultExpand) {
            if (this.value === null || this.value === undefined) {
                this.value = this.generateRandomId();
            }
            this.panel.updateModel(this.value);
        }
        // 收折变换
        /** @type {?} */
        const updateHandle = (/**
         * @return {?}
         */
        () => this.setActive());
        this.panel.subscriber.push(updateHandle);
    }
    /* 设置panel的激活状态 */
    /**
     * @return {?}
     */
    setActive() {
        this.active = this.panel.model.some((/**
         * @param {?} val
         * @return {?}
         */
        val => this.value === val));
        // 添加删除类名
        this.active ? this.render.addClass(this.el.nativeElement, 'f-state-selected') :
            this.render.removeClass(this.el.nativeElement, 'f-state-selected');
        this.changeRef.detectChanges();
        this.changeRef.markForCheck();
    }
    /* 生成随机Id */
    /**
     * @return {?}
     */
    generateRandomId() {
        return Math.random().toString(16).substring(2, 10);
    }
    /**
     * TODO 禁止事件捕获  不够完善
     * 激活 失去焦点 面板
     * @param {?} e
     * @return {?}
     */
    selectPanelItem(e) {
        // 设置不可收折不可收折
        if (!this.panel.foldable) {
            return;
        }
        // value 若为空  初始化随机数字符串
        if (this.value === null || this.value === undefined) {
            this.value = Math.random().toString(16).substring(2, 10);
        }
        this.panel.updateModel(this.value);
    }
}
FarrisPanelItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-panel-item',
                template: "<!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n\r\n<div class=\"card-header\" (click)=\"selectPanelItem($event)\">\r\n    <!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n    <div class=\"panel-item-title\">\r\n        <span *ngIf=\"!headRef;else head\">\r\n            {{tabTitle}}\r\n        </span>\r\n        <ng-template #head [ngTemplateOutlet]=\"headRef\"></ng-template>\r\n        <span class=\"f-icon f-accordion-collapse\" *ngIf=\"!active\"></span>\r\n        <span class=\"f-icon f-accordion-expand\" *ngIf=\"active\"></span>\r\n    </div>\r\n    <div class=\"panel-item-tool\">\r\n        <ng-template [ngTemplateOutlet]=\"toolTempl\"></ng-template>\r\n    </div>\r\n    <div class=\"panel-item-clear\">\r\n    </div>\r\n</div>\r\n<!-- panel\u5185\u5BB9\u6A21\u677F -->\r\n<div [@dropAnimation]=\"active?'active':'inactive'\">\r\n    <div class=\"card-body\">\r\n        <ng-template [ngTemplateOutlet]=\"contentRef\">\r\n\r\n        </ng-template>\r\n    </div>\r\n</div>",
                animations: [dropAnimation],
                encapsulation: ViewEncapsulation.None,
                styles: [".card-header{cursor:pointer}.panel-item-title{float:left}.panel-item-tool{float:right}.panel-item-clear{clear:both}.f-state-disable{pointer-events:none}.card{border-left:0;border-right:0}"]
            }] }
];
/** @nocollapse */
FarrisPanelItemComponent.ctorParameters = () => [
    { type: FarrisPanelComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
FarrisPanelItemComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    value: [{ type: Input }],
    tabTitle: [{ type: Input, args: ['title',] }],
    disable: [{ type: Input }, { type: HostBinding, args: ['class.f-state-disable',] }],
    headRef: [{ type: ContentChild, args: ['headTempl',] }],
    toolTempl: [{ type: ContentChild, args: ['toolTempl',] }],
    contentRef: [{ type: ContentChild, args: ['contentTempl',] }],
    isPanelItem: [{ type: HostBinding, args: ['class.farris-panel-item',] }],
    isCard: [{ type: HostBinding, args: ['class.card',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisPanelModule {
}
FarrisPanelModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    FarrisPanelItemComponent,
                    FarrisPanelComponent,
                ],
                exports: [
                    FarrisPanelItemComponent,
                    FarrisPanelComponent
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisPanelModule, FarrisPanelComponent, FarrisPanelItemComponent, dropAnimation };

//# sourceMappingURL=farris-ui-panel.js.map