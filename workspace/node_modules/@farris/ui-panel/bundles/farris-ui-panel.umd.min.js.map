{"version":3,"sources":["ng://@farris/ui-panel/lib/panel/panel-item-list.component.ts","ng://@farris/ui-panel/lib/util/drop.animation.ts","ng://@farris/ui-panel/lib/panel-item/panel-item.component.ts","ng://@farris/ui-panel/lib/panel.module.ts"],"names":["FarrisPanelComponent","render","this","className","foldable","accordion","modelChange","EventEmitter","modelValue","subscriber","Object","defineProperty","prototype","updateSubscriber","ngOnInit","ngAfterViewInit","_this","length","forEach","ele","addClass","farrisPanel","nativeElement","updateModel","value","index","findIndex","val","model","push","emit","splice","handle","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Renderer2","ViewChild","Input","Output","dropAnimation","trigger","state","style","height","overflow","transition","animate","FarrisPanelItemComponent","panel","changeRef","el","isPanelItem","isCard","active","defaultExpand","undefined","generateRandomId","setActive","some","removeClass","detectChanges","markForCheck","Math","random","toString","substring","selectPanelItem","e","animations","decorators","type","Optional","ChangeDetectorRef","ElementRef","HostBinding","ContentChild","FarrisPanelModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n    Component, Input, AfterViewInit,\r\n    ViewEncapsulation, Output, EventEmitter, ElementRef, Renderer2, OnInit, ViewChild\r\n} from '@angular/core';\r\n@Component({\r\n    selector: 'farris-panel',\r\n    templateUrl: './panel-item-list.component.html',\r\n    styleUrls: ['./panel-item-list.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class FarrisPanelComponent implements AfterViewInit, OnInit {\r\n\r\n    @ViewChild('farrisPanel') farrisPanel: ElementRef;\r\n\r\n    /* è®¾ç½®å®½é« */\r\n    @Input() width: number;\r\n    @Input() height: number;\r\n\r\n\r\n\r\n    /* èªå®ä¹className */\r\n    @Input() className = [];\r\n\r\n    /* é¢æ¿æ¯å¦å¯æ¶æ  é»è®¤æ¶æ*/\r\n    @Input() foldable = true;\r\n\r\n    /* é¢æ¿æ¯å¦å¨é¨å±å¼  é»è®¤ä¸æ¯å¨é¨å±å¼*/\r\n    @Input() defaultExpand: false;\r\n\r\n    // è®¾ç½®æé£ç´æ¨¡å¼  è³å¤åªæä¸ä¸ªpanelå¯ä»¥è¢«éä¸­\r\n    @Input() accordion = false;\r\n\r\n    /* panelæ°æ®å­å¨ */\r\n    @Input() get model() {\r\n        return this.modelValue;\r\n    }\r\n\r\n    set model(modelValue) {\r\n        // è·åç¨æ·è¾å¥çå¼\r\n        this.modelValue = modelValue;\r\n        this.updateSubscriber();\r\n    }\r\n\r\n\r\n    @Output() modelChange: EventEmitter<Array<string | number>> = new EventEmitter<Array<string | number>>();\r\n\r\n    // @HostBinding('class.farris-panel') isPanel =\r\n\r\n    // ååç»å®  å½modelæ°ç»æ¹åæ¶ï¼ç¸åºçactiveç¶æçpanelä¹è¦æ¹å ä»èæ¹åè§å¾\r\n    // ååç»å® ç¨äºå­åactiveç¶æçpanel\r\n    modelValue: Array<string | number> = [];\r\n    subscriber: Array<() => void> = [];\r\n\r\n    constructor(\r\n        private render: Renderer2) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // æ·»å classå\r\n        if (this.className.length) {\r\n            this.className.forEach(ele => {\r\n                this.render.addClass(this.farrisPanel.nativeElement, ele);\r\n            });\r\n        }\r\n        this.updateSubscriber();\r\n    }\r\n\r\n    /**\r\n     * @param value panelå­å¨æ¿æ´»å¼\r\n     */\r\n    updateModel(value: string) {\r\n        const index = this.modelValue.findIndex(val => val === value);\r\n        // å¦ææ²¡æå¹éå°ç¹å»çpanelå¼  å¯è½modeléé¢ä¸å­å¨ å¯è½modelä¸ºç©º\r\n        if (index < 0) {\r\n            // è¥æ¯æé£ç´æ¨¡å¼  åæææpanelå¤äºæªæ¿æ´»ç¶æ\r\n            if (this.accordion) {\r\n                this.model = [];\r\n            }\r\n            // å¦æä¸æ¯æé£ç´æ¨¡å¼  ç´æ¥æ¿æ´»å³å¯\r\n            this.modelValue.push(value);\r\n            this.updateSubscriber();\r\n            return this.modelChange.emit(this.modelValue);\r\n        }\r\n        // å¦æindexä¸ä¸º-1\r\n        // æé£ç´æ¨¡å¼  å³é­æææ¿æ´»ç¶æ\r\n        if (this.accordion) {\r\n            this.model = [];\r\n        } else {\r\n            // éæé£ç´æ¨¡å¼ ç´æ¥å³é­å½åpanelå³å¯\r\n            this.modelValue.splice(index, 1);\r\n        }\r\n        this.updateSubscriber();\r\n        this.modelChange.emit(this.modelValue);\r\n    }\r\n\r\n    /* å½æ°åå */\r\n    private updateSubscriber(): void {\r\n        this.subscriber.forEach(handle => handle());\r\n    }\r\n}\r\n","import { AnimationTriggerMetadata, trigger, state, style, animate, transition } from '@angular/animations';\r\nexport const dropAnimation: AnimationTriggerMetadata = trigger(\r\n    'dropAnimation', [\r\n        state('active', style({\r\n            'height': '*',\r\n        })),\r\n        state('inactive', style({\r\n            'height': '0',\r\n            'overflow': 'hidden'\r\n        })),\r\n        transition('active<=>inactive', animate(`.35s ease`)),\r\n    ]);\r\n","import {\r\n    Component, Input, ContentChild, TemplateRef, Optional, OnInit,\r\n    ViewEncapsulation, AfterViewInit, ChangeDetectorRef, HostBinding, Renderer2, ElementRef\r\n} from '@angular/core';\r\nimport { dropAnimation } from '../util/drop.animation';\r\nimport { FarrisPanelComponent } from '../panel/panel-item-list.component';\r\n@Component({\r\n    selector: 'farris-panel-item',\r\n    templateUrl: './panel-item.component.html',\r\n    styleUrls: ['./panel-item.component.css'],\r\n    animations: [dropAnimation],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FarrisPanelItemComponent implements OnInit, AfterViewInit {\r\n\r\n    // è®¾ç½®å®½ é«å±æ§\r\n    @Input() width: number;\r\n    @Input() height: number;\r\n\r\n    /* panelItem */\r\n    @Input() value: any;\r\n\r\n    // é»è®¤tab æ é¢ æèæ¯éä¸­æ é¢\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('title') tabTitle: string;\r\n\r\n    /* ç¦ç¨ */\r\n    @Input()\r\n    @HostBinding('class.f-state-disable')\r\n    disable: boolean;\r\n\r\n    /* å¤´é¨æ¨¡æ¿ */\r\n    @ContentChild('headTempl') headRef: TemplateRef<any>;\r\n\r\n    /* å·¥å·æé®æ¨¡æ¿ */\r\n    @ContentChild('toolTempl') toolTempl: TemplateRef<any>;\r\n\r\n    /* åå®¹æ¨¡æ¿ */\r\n    @ContentChild('contentTempl') contentRef: TemplateRef<any>;\r\n\r\n    @HostBinding('class.farris-panel-item') isPanelItem = true;\r\n    @HostBinding('class.card') isCard = true;\r\n\r\n    // é»è®¤éæ¿æ´»ç¶æ\r\n    active = false;\r\n    constructor(\r\n        @Optional() public panel: FarrisPanelComponent,\r\n        private changeRef: ChangeDetectorRef,\r\n        private render: Renderer2,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngAfterViewInit() {\r\n        // å¨é¨å±å¼\r\n        if (this.panel.defaultExpand) {\r\n            if (this.value === null || this.value === undefined) {\r\n                this.value = this.generateRandomId();\r\n            }\r\n            this.panel.updateModel(this.value);\r\n        }\r\n        // æ¶æåæ¢\r\n        const updateHandle: () => void = () => this.setActive();\r\n        this.panel.subscriber.push(updateHandle);\r\n    }\r\n\r\n    /* è®¾ç½®panelçæ¿æ´»ç¶æ */\r\n    setActive() {\r\n        this.active = this.panel.model.some(val => this.value === val);\r\n        // æ·»å å é¤ç±»å\r\n        this.active ? this.render.addClass(this.el.nativeElement, 'f-state-selected') :\r\n            this.render.removeClass(this.el.nativeElement, 'f-state-selected');\r\n        this.changeRef.detectChanges();\r\n        this.changeRef.markForCheck();\r\n    }\r\n\r\n    /* çæéæºId */\r\n    generateRandomId() {\r\n        return Math.random().toString(16).substring(2, 10);\r\n    }\r\n\r\n    /**\r\n     * TODO ç¦æ­¢äºä»¶æè·  ä¸å¤å®å\r\n     * æ¿æ´» å¤±å»ç¦ç¹ é¢æ¿\r\n     * @param event äºä»¶å¯¹è±¡\r\n     */\r\n    selectPanelItem(e: MouseEvent) {\r\n        // è®¾ç½®ä¸å¯æ¶æä¸å¯æ¶æ\r\n        if (!this.panel.foldable) {\r\n            return;\r\n        }\r\n        // value è¥ä¸ºç©º  åå§åéæºæ°å­ç¬¦ä¸²\r\n        if (this.value === null || this.value === undefined) {\r\n            this.value = Math.random().toString(16).substring(2, 10);\r\n        }\r\n        this.panel.updateModel(this.value);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FarrisPanelComponent } from './panel/panel-item-list.component';\r\nimport { FarrisPanelItemComponent } from './panel-item/panel-item.component';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        FarrisPanelItemComponent,\r\n        FarrisPanelComponent,\r\n    ],\r\n    exports: [\r\n        FarrisPanelItemComponent,\r\n        FarrisPanelComponent\r\n    ],\r\n})\r\nexport class FarrisPanelModule {\r\n\r\n}\r\n"]}