/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChild, TemplateRef, Optional, ViewEncapsulation, ChangeDetectorRef, HostBinding, Renderer2, ElementRef } from '@angular/core';
import { dropAnimation } from '../util/drop.animation';
import { FarrisPanelComponent } from '../panel/panel-item-list.component';
export class FarrisPanelItemComponent {
    /**
     * @param {?} panel
     * @param {?} changeRef
     * @param {?} render
     * @param {?} el
     */
    constructor(panel, changeRef, render, el) {
        this.panel = panel;
        this.changeRef = changeRef;
        this.render = render;
        this.el = el;
        this.isPanelItem = true;
        this.isCard = true;
        // 默认非激活状态
        this.active = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 全部展开
        if (this.panel.defaultExpand) {
            if (this.value === null || this.value === undefined) {
                this.value = this.generateRandomId();
            }
            this.panel.updateModel(this.value);
        }
        // 收折变换
        /** @type {?} */
        const updateHandle = (/**
         * @return {?}
         */
        () => this.setActive());
        this.panel.subscriber.push(updateHandle);
    }
    /* 设置panel的激活状态 */
    /**
     * @return {?}
     */
    setActive() {
        this.active = this.panel.model.some((/**
         * @param {?} val
         * @return {?}
         */
        val => this.value === val));
        // 添加删除类名
        this.active ? this.render.addClass(this.el.nativeElement, 'f-state-selected') :
            this.render.removeClass(this.el.nativeElement, 'f-state-selected');
        this.changeRef.detectChanges();
        this.changeRef.markForCheck();
    }
    /* 生成随机Id */
    /**
     * @return {?}
     */
    generateRandomId() {
        return Math.random().toString(16).substring(2, 10);
    }
    /**
     * TODO 禁止事件捕获  不够完善
     * 激活 失去焦点 面板
     * @param {?} e
     * @return {?}
     */
    selectPanelItem(e) {
        // 设置不可收折不可收折
        if (!this.panel.foldable) {
            return;
        }
        // value 若为空  初始化随机数字符串
        if (this.value === null || this.value === undefined) {
            this.value = Math.random().toString(16).substring(2, 10);
        }
        this.panel.updateModel(this.value);
    }
}
FarrisPanelItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-panel-item',
                template: "<!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n\r\n<div class=\"card-header\" (click)=\"selectPanelItem($event)\">\r\n    <!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n    <div class=\"panel-item-title\">\r\n        <span *ngIf=\"!headRef;else head\">\r\n            {{tabTitle}}\r\n        </span>\r\n        <ng-template #head [ngTemplateOutlet]=\"headRef\"></ng-template>\r\n        <span class=\"f-icon f-accordion-collapse\" *ngIf=\"!active\"></span>\r\n        <span class=\"f-icon f-accordion-expand\" *ngIf=\"active\"></span>\r\n    </div>\r\n    <div class=\"panel-item-tool\">\r\n        <ng-template [ngTemplateOutlet]=\"toolTempl\"></ng-template>\r\n    </div>\r\n    <div class=\"panel-item-clear\">\r\n    </div>\r\n</div>\r\n<!-- panel\u5185\u5BB9\u6A21\u677F -->\r\n<div [@dropAnimation]=\"active?'active':'inactive'\">\r\n    <div class=\"card-body\">\r\n        <ng-template [ngTemplateOutlet]=\"contentRef\">\r\n\r\n        </ng-template>\r\n    </div>\r\n</div>",
                animations: [dropAnimation],
                encapsulation: ViewEncapsulation.None,
                styles: [".card-header{cursor:pointer}.panel-item-title{float:left}.panel-item-tool{float:right}.panel-item-clear{clear:both}.f-state-disable{pointer-events:none}.card{border-left:0;border-right:0}"]
            }] }
];
/** @nocollapse */
FarrisPanelItemComponent.ctorParameters = () => [
    { type: FarrisPanelComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
FarrisPanelItemComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    value: [{ type: Input }],
    tabTitle: [{ type: Input, args: ['title',] }],
    disable: [{ type: Input }, { type: HostBinding, args: ['class.f-state-disable',] }],
    headRef: [{ type: ContentChild, args: ['headTempl',] }],
    toolTempl: [{ type: ContentChild, args: ['toolTempl',] }],
    contentRef: [{ type: ContentChild, args: ['contentTempl',] }],
    isPanelItem: [{ type: HostBinding, args: ['class.farris-panel-item',] }],
    isCard: [{ type: HostBinding, args: ['class.card',] }]
};
if (false) {
    /** @type {?} */
    FarrisPanelItemComponent.prototype.width;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.height;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.value;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.tabTitle;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.disable;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.headRef;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.toolTempl;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.contentRef;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.isPanelItem;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.isCard;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.active;
    /** @type {?} */
    FarrisPanelItemComponent.prototype.panel;
    /**
     * @type {?}
     * @private
     */
    FarrisPanelItemComponent.prototype.changeRef;
    /**
     * @type {?}
     * @private
     */
    FarrisPanelItemComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FarrisPanelItemComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,