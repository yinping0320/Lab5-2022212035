/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation, Output, EventEmitter, ElementRef, Renderer2, ViewChild } from '@angular/core';
var FarrisPanelComponent = /** @class */ (function () {
    function FarrisPanelComponent(render) {
        this.render = render;
        /* 自定义className */
        this.className = [];
        /* 面板是否可收折  默认收折*/
        this.foldable = true;
        // 设置手风琴模式  至多只有一个panel可以被选中
        this.accordion = false;
        this.modelChange = new EventEmitter();
        // @HostBinding('class.farris-panel') isPanel =
        // 双向绑定  当model数组改变时，相应的active状态的panel也要改变 从而改变视图
        // 双向绑定 用于存取active状态的panel
        this.modelValue = [];
        this.subscriber = [];
    }
    Object.defineProperty(FarrisPanelComponent.prototype, "model", {
        /* panel数据存储 */
        get: /* panel数据存储 */
        /**
         * @return {?}
         */
        function () {
            return this.modelValue;
        },
        set: /**
         * @param {?} modelValue
         * @return {?}
         */
        function (modelValue) {
            // 获取用户输入的值
            this.modelValue = modelValue;
            this.updateSubscriber();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FarrisPanelComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 添加class名
        if (this.className.length) {
            this.className.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            function (ele) {
                _this.render.addClass(_this.farrisPanel.nativeElement, ele);
            }));
        }
        this.updateSubscriber();
    };
    /**
     * @param value panel存储激活值
     */
    /**
     * @param {?} value panel存储激活值
     * @return {?}
     */
    FarrisPanelComponent.prototype.updateModel = /**
     * @param {?} value panel存储激活值
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.modelValue.findIndex((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return val === value; }));
        // 如果没有匹配到点击的panel值  可能model里面不存在 可能model为空
        if (index < 0) {
            // 若是手风琴模式  先把所有panel处于未激活状态
            if (this.accordion) {
                this.model = [];
            }
            // 如果不是手风琴模式  直接激活即可
            this.modelValue.push(value);
            this.updateSubscriber();
            return this.modelChange.emit(this.modelValue);
        }
        // 如果index不为-1
        // 手风琴模式  关闭所有激活状态
        if (this.accordion) {
            this.model = [];
        }
        else {
            // 非手风琴模式 直接关闭当前panel即可
            this.modelValue.splice(index, 1);
        }
        this.updateSubscriber();
        this.modelChange.emit(this.modelValue);
    };
    /* 函数分发 */
    /* 函数分发 */
    /**
     * @private
     * @return {?}
     */
    FarrisPanelComponent.prototype.updateSubscriber = /* 函数分发 */
    /**
     * @private
     * @return {?}
     */
    function () {
        this.subscriber.forEach((/**
         * @param {?} handle
         * @return {?}
         */
        function (handle) { return handle(); }));
    };
    FarrisPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-panel',
                    template: "<div #farrisPanel class=\"farris-panel\" [class.accordion]=\"accordion\" [style.width]=\"width+'px'\" [style.height]=\"height+'px'\">\r\n    <ng-content>\r\n    </ng-content>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".farris-panel{border:1px solid rgba(0,0,0,.125)}"]
                }] }
    ];
    /** @nocollapse */
    FarrisPanelComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    FarrisPanelComponent.propDecorators = {
        farrisPanel: [{ type: ViewChild, args: ['farrisPanel',] }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        className: [{ type: Input }],
        foldable: [{ type: Input }],
        defaultExpand: [{ type: Input }],
        accordion: [{ type: Input }],
        model: [{ type: Input }],
        modelChange: [{ type: Output }]
    };
    return FarrisPanelComponent;
}());
export { FarrisPanelComponent };
if (false) {
    /** @type {?} */
    FarrisPanelComponent.prototype.farrisPanel;
    /** @type {?} */
    FarrisPanelComponent.prototype.width;
    /** @type {?} */
    FarrisPanelComponent.prototype.height;
    /** @type {?} */
    FarrisPanelComponent.prototype.className;
    /** @type {?} */
    FarrisPanelComponent.prototype.foldable;
    /** @type {?} */
    FarrisPanelComponent.prototype.defaultExpand;
    /** @type {?} */
    FarrisPanelComponent.prototype.accordion;
    /** @type {?} */
    FarrisPanelComponent.prototype.modelChange;
    /** @type {?} */
    FarrisPanelComponent.prototype.modelValue;
    /** @type {?} */
    FarrisPanelComponent.prototype.subscriber;
    /**
     * @type {?}
     * @private
     */
    FarrisPanelComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtaXRlbS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktcGFuZWwvIiwic291cmNlcyI6WyJsaWIvcGFuZWwvcGFuZWwtaXRlbS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFBRSxLQUFLLEVBQ2hCLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQ3BGLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCO0lBa0RJLDhCQUNZLE1BQWlCO1FBQWpCLFdBQU0sR0FBTixNQUFNLENBQVc7O1FBakNwQixjQUFTLEdBQUcsRUFBRSxDQUFDOztRQUdmLGFBQVEsR0FBRyxJQUFJLENBQUM7O1FBTWhCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFjakIsZ0JBQVcsR0FBeUMsSUFBSSxZQUFZLEVBQTBCLENBQUM7Ozs7UUFNekcsZUFBVSxHQUEyQixFQUFFLENBQUM7UUFDeEMsZUFBVSxHQUFzQixFQUFFLENBQUM7SUFLbkMsQ0FBQztJQXZCRCxzQkFBYSx1Q0FBSztRQURsQixlQUFlOzs7OztRQUNmO1lBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNCLENBQUM7Ozs7O1FBRUQsVUFBVSxVQUFVO1lBQ2hCLFdBQVc7WUFDWCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUM3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM1QixDQUFDOzs7T0FOQTs7OztJQXVCRCx1Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsOENBQWU7OztJQUFmO1FBQUEsaUJBUUM7UUFQRyxXQUFXO1FBQ1gsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLEdBQUc7Z0JBQ3RCLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlELENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsMENBQVc7Ozs7SUFBWCxVQUFZLEtBQWE7O1lBQ2YsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxLQUFLLEtBQUssRUFBYixDQUFhLEVBQUM7UUFDN0QsMkNBQTJDO1FBQzNDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNYLDRCQUE0QjtZQUM1QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO2FBQ25CO1lBQ0Qsb0JBQW9CO1lBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsY0FBYztRQUNkLGtCQUFrQjtRQUNsQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDbkI7YUFBTTtZQUNILHVCQUF1QjtZQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFVBQVU7Ozs7OztJQUNGLCtDQUFnQjs7Ozs7SUFBeEI7UUFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sRUFBRSxFQUFSLENBQVEsRUFBQyxDQUFDO0lBQ2hELENBQUM7O2dCQW5HSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLG9NQUErQztvQkFFL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkFQd0QsU0FBUzs7OzhCQVc3RCxTQUFTLFNBQUMsYUFBYTt3QkFHdkIsS0FBSzt5QkFDTCxLQUFLOzRCQUtMLEtBQUs7MkJBR0wsS0FBSztnQ0FHTCxLQUFLOzRCQUdMLEtBQUs7d0JBR0wsS0FBSzs4QkFXTCxNQUFNOztJQTJEWCwyQkFBQztDQUFBLEFBcEdELElBb0dDO1NBN0ZZLG9CQUFvQjs7O0lBRTdCLDJDQUFrRDs7SUFHbEQscUNBQXVCOztJQUN2QixzQ0FBd0I7O0lBS3hCLHlDQUF3Qjs7SUFHeEIsd0NBQXlCOztJQUd6Qiw2Q0FBOEI7O0lBRzlCLHlDQUEyQjs7SUFjM0IsMkNBQXlHOztJQU16RywwQ0FBd0M7O0lBQ3hDLDBDQUFtQzs7Ozs7SUFHL0Isc0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgSW5wdXQsIEFmdGVyVmlld0luaXQsXHJcbiAgICBWaWV3RW5jYXBzdWxhdGlvbiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25Jbml0LCBWaWV3Q2hpbGRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1wYW5lbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGFuZWwtaXRlbS1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL3BhbmVsLWl0ZW0tbGlzdC5jb21wb25lbnQuY3NzJ10sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmFycmlzUGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2ZhcnJpc1BhbmVsJykgZmFycmlzUGFuZWw6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgLyog6K6+572u5a696auYICovXHJcbiAgICBASW5wdXQoKSB3aWR0aDogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG5cclxuXHJcbiAgICAvKiDoh6rlrprkuYljbGFzc05hbWUgKi9cclxuICAgIEBJbnB1dCgpIGNsYXNzTmFtZSA9IFtdO1xyXG5cclxuICAgIC8qIOmdouadv+aYr+WQpuWPr+aUtuaKmCAg6buY6K6k5pS25oqYKi9cclxuICAgIEBJbnB1dCgpIGZvbGRhYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAvKiDpnaLmnb/mmK/lkKblhajpg6jlsZXlvIAgIOm7mOiupOS4jeaYr+WFqOmDqOWxleW8gCovXHJcbiAgICBASW5wdXQoKSBkZWZhdWx0RXhwYW5kOiBmYWxzZTtcclxuXHJcbiAgICAvLyDorr7nva7miYvpo47nkLTmqKHlvI8gIOiHs+WkmuWPquacieS4gOS4qnBhbmVs5Y+v5Lul6KKr6YCJ5LitXHJcbiAgICBASW5wdXQoKSBhY2NvcmRpb24gPSBmYWxzZTtcclxuXHJcbiAgICAvKiBwYW5lbOaVsOaNruWtmOWCqCAqL1xyXG4gICAgQElucHV0KCkgZ2V0IG1vZGVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1vZGVsKG1vZGVsVmFsdWUpIHtcclxuICAgICAgICAvLyDojrflj5bnlKjmiLfovpPlhaXnmoTlgLxcclxuICAgICAgICB0aGlzLm1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaWJlcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBAT3V0cHV0KCkgbW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxzdHJpbmcgfCBudW1iZXI+PiA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8c3RyaW5nIHwgbnVtYmVyPj4oKTtcclxuXHJcbiAgICAvLyBASG9zdEJpbmRpbmcoJ2NsYXNzLmZhcnJpcy1wYW5lbCcpIGlzUGFuZWwgPVxyXG5cclxuICAgIC8vIOWPjOWQkee7keWumiAg5b2TbW9kZWzmlbDnu4TmlLnlj5jml7bvvIznm7jlupTnmoRhY3RpdmXnirbmgIHnmoRwYW5lbOS5n+imgeaUueWPmCDku47ogIzmlLnlj5jop4blm75cclxuICAgIC8vIOWPjOWQkee7keWumiDnlKjkuo7lrZjlj5ZhY3RpdmXnirbmgIHnmoRwYW5lbFxyXG4gICAgbW9kZWxWYWx1ZTogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiA9IFtdO1xyXG4gICAgc3Vic2NyaWJlcjogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDmt7vliqBjbGFzc+WQjVxyXG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUuZm9yRWFjaChlbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5mYXJyaXNQYW5lbC5uYXRpdmVFbGVtZW50LCBlbGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgcGFuZWzlrZjlgqjmv4DmtLvlgLxcclxuICAgICAqL1xyXG4gICAgdXBkYXRlTW9kZWwodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5tb2RlbFZhbHVlLmZpbmRJbmRleCh2YWwgPT4gdmFsID09PSB2YWx1ZSk7XHJcbiAgICAgICAgLy8g5aaC5p6c5rKh5pyJ5Yy56YWN5Yiw54K55Ye755qEcGFuZWzlgLwgIOWPr+iDvW1vZGVs6YeM6Z2i5LiN5a2Y5ZyoIOWPr+iDvW1vZGVs5Li656m6XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAvLyDoi6XmmK/miYvpo47nkLTmqKHlvI8gIOWFiOaKiuaJgOaciXBhbmVs5aSE5LqO5pyq5r+A5rS754q25oCBXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjY29yZGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOWmguaenOS4jeaYr+aJi+mjjueQtOaooeW8jyAg55u05o6l5r+A5rS75Y2z5Y+vXHJcbiAgICAgICAgICAgIHRoaXMubW9kZWxWYWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsQ2hhbmdlLmVtaXQodGhpcy5tb2RlbFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5aaC5p6caW5kZXjkuI3kuLotMVxyXG4gICAgICAgIC8vIOaJi+mjjueQtOaooeW8jyAg5YWz6Zet5omA5pyJ5r+A5rS754q25oCBXHJcbiAgICAgICAgaWYgKHRoaXMuYWNjb3JkaW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDpnZ7miYvpo47nkLTmqKHlvI8g55u05o6l5YWz6Zet5b2T5YmNcGFuZWzljbPlj69cclxuICAgICAgICAgICAgdGhpcy5tb2RlbFZhbHVlLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaWJlcigpO1xyXG4gICAgICAgIHRoaXMubW9kZWxDaGFuZ2UuZW1pdCh0aGlzLm1vZGVsVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIOWHveaVsOWIhuWPkSAqL1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVTdWJzY3JpYmVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlci5mb3JFYWNoKGhhbmRsZSA9PiBoYW5kbGUoKSk7XHJcbiAgICB9XHJcbn1cclxuIl19