{"version":3,"sources":["ng://@farris/ui-messager/lib/farris-default-focus.directive.ts","ng://@farris/ui-messager/lib/messager.config.ts","ng://@farris/ui-messager/lib/messager.component.ts","ng://@farris/ui-messager/lib/messager.service.ts","ng://@farris/ui-messager/lib/messager.module.ts"],"names":["FarrisDefaultFocusDirective","prototype","ngOnInit","ngAfterViewInit","_this","this","button","defaultFocus","ngZone","runOutsideAngular","setTimeout","el","nativeElement","focus","Directive","args","selector","ElementRef","NgZone","Input","MessagerDefaultConfig","title","MESSAGER_DEFAULT_CONFIG","InjectionToken","MessagerComponent","Object","defineProperty","_message","str","undefined","type","utils","unescapeHtml","localeService","getValue","window","innerHeight","enableWordCount","promptText","onTextChange","exception","realWidth","excepMsgEl","getBoundingClientRect","width","toFixed","render","setStyle","allexcepEl","needShowExpand","offsetHeight","onFontSizeChange","val","textAreaEl","getWordsTotal","countType","value","length","maxLength","$event","wordsTotal","wrodsTotalTips","replace","expandMsg","t","stopPropagation","removeStyle","showLines","expand","onCopyClick","copyButton","onClick","event","cmpRef","showMiniNotify","msg","timeout","miniNotifyEl","innerText","Component","template","Injector","HostBinding","ViewChild","injector","showFontSize","cls","okText","cancelText","showOkButton","showCancelButton","readonly","fontSize","inputType","placeholder","buttons","get","CommonUtils","LocaleService","Renderer2","MessagerService","escapeHtml","show","msgtype","message","opts","submsg","document","activeElement","blur","defaultOpts","safeHtml","titleText","height","showButtons","showMaxButton","resizable","initialState","okHandle","close","class","showHeader","assign","defaultMessagerConfig","extendOpts","modalHeight","errorTitle","fitContent","_modal","bsModalService","confirmSubject","Subject","modals","modalContainerComponent","dialog","instance","isShown","moveTo","btnOk","content","btnOkEl","btns","location","querySelectorAll","item","maxZindex","commonUtils","getFloatingLayerIndex","style","zIndex","msgMgr","ref","id","getModalsCount","push","getModalById","getModalCmp","closed","subscribe","level","removeMessager","unsubscribe","currentId","question","okCallback","cancelCallback","questionDlg","yesText","noText","cancelHandle","question2","messager","prompt","promptSubject","dlg","mc","next","prompt2","_opts","showCloseButton","saveSize","closeWhenever","dialogOpts","opened","textareaEle","closest","padding","resize","readOnly","beforeClose","modalRef","isMax","data","config","saveTextAreaSizeInfo","of","getKeyString","localStorage","key","setItem","JSON","stringify","confirm","_msg","confirmDlg","asObservable","info","callback","infoDlg","success","successDlg","error","errorDlg","warning","warningDlg","showHtmlMsg","msgDlg","msgbox","find","getCurrentModalContainer","filter","n","copyToClipboard","text","windowRef","clipboardData","setData","queryCommandSupported","textarea","createElement","textContent","position","body","appendChild","select","execCommand","ex","removeChild","getServerExceptionEntity","requestFailedInfo","status","serverExceptionEntity_1","Message","serverExceptionEntity","parse","console","exceptionWithHttpInfo","_error","log","bsModalRef","exceptionMsg","localDate","date","format","Date","happenedTime","detailInfo","detail","Detail","innerMessage","defaultOptions","exoptions","options","handle","e","Injectable","BsModalService","version","MessagerModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","LocaleModule","ModalModule","declarations","entryComponents"],"mappings":"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","sourcesContent":["import { Directive, Input, ElementRef, OnInit, AfterViewInit, NgZone } from '@angular/core';\r\nimport { DialogButton } from '@farris/ui-modal';\r\n\r\n@Directive({\r\n    selector: '[farris-default-focus]'\r\n})\r\nexport class FarrisDefaultFocusDirective implements OnInit, AfterViewInit {\r\n    @Input('farris-default-focus') button: DialogButton;\r\n\r\n    constructor(private el: ElementRef, private ngZone: NgZone) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.button.defaultFocus) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    this.el.nativeElement.focus();\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface MessagerConfig {\r\n    width?: number;\r\n    height?: number;\r\n    title?: string;\r\n    showHeader?: boolean;\r\n}\r\n\r\nexport const MessagerDefaultConfig = {\r\n    // width: 340,\r\n    // height: 220,\r\n    title: 'ç³»ç»æç¤º'\r\n};\r\n\r\nexport const MESSAGER_DEFAULT_CONFIG = new InjectionToken<MessagerConfig>('Messager default options.');\r\n\r\n/**\r\n * æå¡å¨ç«¯å¼å¸¸ç­çº§\r\n */\r\n export const enum ExceptionLevel {\r\n\r\n    /**\r\n     * æç¤ºä¿¡æ¯\r\n     */\r\n    Info = 0,\r\n  \r\n    /**\r\n     * è­¦å\r\n     */\r\n    Warning,\r\n  \r\n    /**\r\n     * éè¯¯\r\n     */\r\n    Error,\r\n  \r\n    /**\r\n     * è´å½éè¯¯\r\n     */\r\n    Fatal\r\n}\r\n\r\nexport interface ServerExceptionEntity {\r\n\r\n    Code: string;\r\n  \r\n    Level: ExceptionLevel;\r\n  \r\n    Message: string;\r\n  \r\n    Detail: string;\r\n  \r\n    RequestId: string;\r\n  \r\n    date?: string;\r\n  \r\n    innerMessage?: string;\r\n}\r\n\r\nexport interface HttpRequestFaildInfo {\r\n    headers: {\r\n        normalizedNames: any,\r\n        lazyUpdate: any\r\n    };\r\n    status: number;\r\n    statusText: string;\r\n    url: string;\r\n    ok: boolean;\r\n    name: string;\r\n    message: string;\r\n    error: ServerExceptionEntity;\r\n}","import { LocaleService } from '@farris/ui-locale';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n/*\r\n * @Author: Lucas.Huangï¼ç¯çç§æï¼\r\n * @Date: 2018-10-13 11:11:50\r\n * @Last Modified by:   Lucas.Huangï¼ç¯çç§æï¼\r\n * @Last Modified time: 2018-10-13 11:11:50\r\n */\r\nimport { ElementRef, Component, OnInit, Input, Injector, HostBinding, ViewChild, AfterViewInit, Renderer2 } from '@angular/core';\r\nimport { DialogButton } from '@farris/ui-modal';\r\n\r\n@Component({\r\n    selector: 'farris-messager',\r\n    templateUrl: './messager.component.html'\r\n})\r\nexport class MessagerComponent implements OnInit, AfterViewInit {\r\n    @Input() type: string;\r\n    @Input() showFontSize = false;\r\n\r\n    private _message = '';\r\n    get message() {\r\n        return this._message;\r\n    }\r\n\r\n    @Input() set message(str) {\r\n        this._message = (str === undefined || str === null) ? '' : '' + str;\r\n        if (this.type === 'prompt' && this.utils) {\r\n            this._message = this.utils.unescapeHtml(this._message);\r\n        }\r\n    }\r\n\r\n    @Input() msg = '';\r\n    utils: CommonUtils;\r\n    localeService: LocaleService;\r\n    render: Renderer2;\r\n    constructor(private injector: Injector) {\r\n        this.utils = this.injector.get(CommonUtils);\r\n        this.localeService = this.injector.get(LocaleService);\r\n        this.render = this.injector.get(Renderer2);\r\n    }\r\n\r\n    @HostBinding('class') cls = 'farris-messager';\r\n\r\n    @Input() okText = '';\r\n    @Input() cancelText = '';\r\n    @Input() showOkButton = true;\r\n    @Input() showCancelButton = true;\r\n\r\n    @Input() readonly = false;\r\n\r\n    @Input() okHandle: () => {};\r\n    @Input() cancelHandle: () => {};\r\n\r\n\r\n    @Input() enableWordCount = false;\r\n    @Input() countType = 'length';\r\n    @Input() maxLength: number;\r\n\r\n    @Input() exception = null;\r\n    @Input() showLines = 4;\r\n\r\n    @ViewChild('promptText') promptText: ElementRef;\r\n    @ViewChild('fontSizeEl') fontSizeEl: ElementRef;\r\n    @ViewChild('wordCount') wordCountEl: ElementRef;\r\n    @ViewChild('excepMsg') excepMsgEl: ElementRef;\r\n    @ViewChild('allexcep') allexcepEl: ElementRef;\r\n    @ViewChild('miniNotify') miniNotifyEl: ElementRef;\r\n    @ViewChild('btnOkEl') btnOkEl: ElementRef;\r\n\r\n    @Input() fontSize = '18';\r\n\r\n    @Input() inputType = 'textarea';\r\n    @Input() placeholder = '';\r\n\r\n    @Input() buttons: DialogButton[] = [];\r\n\r\n    get fontsizeName() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.name');\r\n    }\r\n    get fontSmall() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.small');\r\n    }\r\n    get fontMiddle() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.middle');\r\n    }\r\n    get fontBig() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.big');\r\n    }\r\n    get fontLarge() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.large');\r\n    }\r\n    get fontHuge() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.huge');\r\n    }\r\n\r\n    get expandText() {\r\n        return this.localeService.getValue('messager.exception.expand');\r\n    }\r\n\r\n    get collapseText() {\r\n        return this.localeService.getValue('messager.exception.collapse');\r\n    }\r\n\r\n    get happend() {\r\n        return this.localeService.getValue('messager.exception.happend');\r\n    }\r\n\r\n    get detail() {\r\n        return this.localeService.getValue('messager.exception.detail');\r\n    }\r\n\r\n    get exceptionMsgMaxHeight () {\r\n        return window.innerHeight -10 -10 - 100 -100 -16;\r\n    }\r\n\r\n\r\n    expand = false;\r\n    needShowExpand = false;\r\n\r\n    wordsTotal = '';\r\n    wrodsTotalTips = '';\r\n\r\n    ngOnInit() {\r\n        setTimeout(() => {\r\n            if (this.enableWordCount && this.promptText) {\r\n                this.onTextChange(null);\r\n            }\r\n        });\r\n\r\n        this.type = this.type === 'exception' ? 'error' : this.type;\r\n    }\r\n\r\n    get icon() {\r\n        return 'f-icon-' + (this.type === 'exception' ? 'error' : this.type);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            if (this.exception && this.exception['message']) {\r\n                const realWidth = this.excepMsgEl.nativeElement.getBoundingClientRect().width.toFixed(2) + 'px';\r\n                this.render.setStyle(this.allexcepEl.nativeElement, 'width', realWidth);\r\n                this.needShowExpand = this.allexcepEl.nativeElement.offsetHeight > this.excepMsgEl.nativeElement.offsetHeight;\r\n            } else {\r\n                this.needShowExpand = false;\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    onFontSizeChange(val, textAreaEl) {\r\n        // this.promptText.nativeElement\r\n        // textAreaEl.nativeElement.style['font-size'] = val;\r\n    }\r\n\r\n    private getWordsTotal() {\r\n        const c = this.countType === 'length' ? this.promptText.nativeElement.value.length\r\n                                            : this.maxLength - this.promptText.nativeElement.value.length;\r\n        return c;\r\n    }\r\n\r\n    onTextChange($event) {\r\n        this.wordsTotal = this.getWordsTotal();\r\n        this.wrodsTotalTips = this.localeService.getValue('messager.prompt.tips.' + this.countType).replace('{0}', this.wordsTotal);\r\n    }\r\n\r\n    expandMsg(t: boolean, $event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (t) {\r\n            this.render.setStyle(this.excepMsgEl.nativeElement, 'overflow', 'auto');\r\n            this.render.removeStyle(this.excepMsgEl.nativeElement, '-webkit-line-clamp');\r\n        } else {\r\n            this.render.setStyle(this.excepMsgEl.nativeElement, 'overflow', 'hidden');\r\n            this.render.setStyle(this.excepMsgEl.nativeElement, '-webkit-line-clamp', this.showLines);\r\n        }\r\n\r\n        this.expand = t;\r\n    }\r\n\r\n\r\n    onCopyClick($event) {\r\n        $event.stopPropagation();\r\n        if (this.exception && this.exception.copyButton) {\r\n            this.exception.copyButton.onClick({ event: $event, cmpRef: this });\r\n        }\r\n    }\r\n\r\n    showMiniNotify(msg, timeout = 700) {\r\n        if (this.miniNotifyEl) {\r\n            this.miniNotifyEl.nativeElement.innerText = msg;\r\n            this.render.setStyle(this.miniNotifyEl.nativeElement, 'display', '');\r\n            this.render.setStyle(this.miniNotifyEl.nativeElement, 'opacity', 0.8);\r\n\r\n            setTimeout(() => {\r\n                this.render.setStyle(this.miniNotifyEl.nativeElement, 'opacity', 0);\r\n                this.render.setStyle(this.miniNotifyEl.nativeElement, 'display', 'none');\r\n            }, timeout);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @Company: Inspur\r\n * @Version: v0.0.15\r\n * @Date: 2019-04-02 11:48:08\r\n * @LastEditTime: 2019-10-26 16:38:34\r\n */\r\n\r\nimport { Injectable, Injector, NgZone } from \"@angular/core\";\r\nimport { Subject, Observable, of } from \"rxjs\";\r\nimport { BsModalService, BsModalRef, DialogButton } from \"@farris/ui-modal\";\r\nimport {\r\n    HttpRequestFaildInfo,\r\n    MessagerConfig,\r\n    MessagerDefaultConfig,\r\n    MESSAGER_DEFAULT_CONFIG,\r\n    ServerExceptionEntity,\r\n} from \"./messager.config\";\r\nimport { MessagerComponent } from \"./messager.component\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { unescapeIdentifier } from \"@angular/compiler\";\r\nimport { format } from \"date-fns\";\r\nimport { CommonUtils } from \"@farris/ui-common\";\r\n\r\n@Injectable()\r\nexport class MessagerService {\r\n    version = \"0.0.15\";\r\n    currentId = -1;\r\n    modals: { id: number; ref: BsModalRef }[] = [];\r\n    private defaultMessagerConfig: MessagerConfig = null;\r\n\r\n    private confirmSubject;\r\n    private ngZone: NgZone;\r\n\r\n    private localeService: LocaleService;\r\n    private commonUtils: CommonUtils\r\n    constructor(\r\n        private bsModalService: BsModalService,\r\n        private injector: Injector\r\n    ) {\r\n        const config =\r\n            this.injector.get(MESSAGER_DEFAULT_CONFIG) || MessagerDefaultConfig;\r\n        this.defaultMessagerConfig = Object.assign(\r\n            {},\r\n            MessagerDefaultConfig,\r\n            config\r\n        );\r\n        this.ngZone = this.injector.get(NgZone);\r\n        this.localeService = this.injector.get(LocaleService);\r\n        this.commonUtils = this.injector.get(CommonUtils, null);\r\n    }\r\n    get okText() {\r\n        return this.localeService.getValue(\"messager.ok\");\r\n    }\r\n    get cancelText() {\r\n        return this.localeService.getValue(\"messager.cancel\");\r\n    }\r\n    get yesText() {\r\n        return this.localeService.getValue(\"messager.yes\");\r\n    }\r\n    get noText() {\r\n        return this.localeService.getValue(\"messager.no\");\r\n    }\r\n    get titleText() {\r\n        return this.localeService.getValue(\"messager.title\");\r\n    }\r\n    get errorTitle() {\r\n        return this.localeService.getValue(\"messager.errorTitle\");\r\n    }\r\n\r\n    escapeHtml(str) {\r\n        if (str === null || str === undefined) {\r\n            return \"\";\r\n        }\r\n        return str\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\\\"/g, \"&quot;\")\r\n            .replace(/\\'/g, \"&#39;\")\r\n            .replace(/\\//g, \"&#x2F;\");\r\n    }\r\n\r\n    /**\r\n     * æ¾ç¤ºä¿¡æ¯æç¤ºæ¡\r\n     * @param msgtype æ¶æ¯ç±»å«\r\n     * @param message æç¤ºæ¶æ¯ä¸\r\n     * @param opts åæ° æä¾å±æ§ fitContent:trueæ¯æèªå¨éåºå®½åº¦\r\n     * @param submsg æç¤ºæ¶æ¯äºçº§\r\n     */\r\n    show(msgtype: string, message: string, opts?: {}, submsg = \"\") {\r\n        if (document.activeElement) {\r\n            (document.activeElement as any).blur();\r\n        }\r\n        const modalHeight = 180;\r\n        let defaultOpts = {\r\n            safeHtml: true,\r\n            title: this.titleText,\r\n            width: 390,\r\n            height: modalHeight,\r\n            showButtons: false,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    this.close();\r\n                },\r\n            },\r\n            class:\r\n                \"modal-message \" +\r\n                (msgtype ? \"modal-message-type-\" + msgtype : \"\"),\r\n            showHeader: false,\r\n        };\r\n        defaultOpts = Object.assign(\r\n            {},\r\n            this.defaultMessagerConfig,\r\n            defaultOpts\r\n        );\r\n        let extendOpts = {};\r\n\r\n        switch (msgtype) {\r\n            case \"prompt\":\r\n                // å¼¹åºå¯¹è¯ç±»å\r\n                extendOpts = { showHeader: true, modalHeight: 260 };\r\n                break;\r\n            case \"error\":\r\n                // éè¯¯\r\n                extendOpts = {\r\n                    title: this.errorTitle,\r\n                    width: 446,\r\n                    showHeader: true,\r\n                    showMaxButton: true,\r\n                    fitContent: true,\r\n                };\r\n                break;\r\n            case \"exception\":\r\n                extendOpts = {\r\n                    safeHtml: false,\r\n                    title: this.errorTitle,\r\n                    width: 446,\r\n                    showHeader: true,\r\n                    fitContent: true,\r\n                };\r\n                break;\r\n            default:\r\n                // é»è®¤å¶ä»\r\n                extendOpts = { width: submsg ? 446 : 390, fitContent: true };\r\n        }\r\n        Object.assign(defaultOpts, extendOpts);\r\n        if (opts) {\r\n            Object.assign(defaultOpts, opts);\r\n        }\r\n\r\n        if (message && defaultOpts.safeHtml) {\r\n            message = this.escapeHtml(message);\r\n        }\r\n\r\n        Object.assign(defaultOpts.initialState, {\r\n            type: msgtype,\r\n            message,\r\n            msg: submsg,\r\n            exception: opts && opts[\"exception\"] ? opts[\"exception\"] : null,\r\n            showLines: opts && opts[\"showLines\"] ? opts[\"showLines\"] : 3,\r\n            readonly: opts && opts[\"readonly\"] ? opts[\"readonly\"] : false,\r\n        });\r\n\r\n        if (defaultOpts[\"buttons\"] && defaultOpts[\"buttons\"].length) {\r\n            if (\r\n                !defaultOpts.initialState[\"buttons\"] ||\r\n                !defaultOpts.initialState[\"buttons\"].length\r\n            ) {\r\n                defaultOpts.initialState[\"buttons\"] = defaultOpts[\"buttons\"];\r\n            }\r\n        }\r\n        const _modal = this.bsModalService.show(MessagerComponent, defaultOpts);\r\n        // _modal.content.buttons = defaultOpts['buttons'] || [];\r\n        this.confirmSubject = new Subject<boolean>();\r\n        if (this.modals.length > 0) {\r\n            const modalContainerComponent = _modal.dialog;\r\n            modalContainerComponent.instance.isShown = true;\r\n            modalContainerComponent.instance.moveTo(\r\n                15 * this.modals.length,\r\n                15 * this.modals.length\r\n            );\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // ç¬¬1ä¸ªæé®è·åç¦ç¹\r\n            setTimeout(() => {\r\n                const btnOk = _modal.content.btnOkEl\r\n                    ? _modal.content.btnOkEl.nativeElement\r\n                    : null;\r\n                if (btnOk) {\r\n                    btnOk[\"focus\"]();\r\n                } else {\r\n                    const btns =\r\n                        _modal.dialog.location.nativeElement.querySelectorAll(\r\n                            \".modal-footer button\"\r\n                        );\r\n                    if (btns.length) {\r\n                        btns.item(0)[\"focus\"]();\r\n                    }\r\n                }\r\n\r\n                // const overlays = Array.from(document.body.querySelectorAll('body>div, body>farris-dialog>.farris-modal,body>.farris-modal')).filter(n => n).map(n => {\r\n                //     return window.getComputedStyle(n).zIndex;\r\n                // }).filter(n => n && n!== 'auto').map(n => {\r\n                //     return parseInt(n, 10);\r\n                // });\r\n                const maxZindex = this.commonUtils.getFloatingLayerIndex();\r\n                _modal.dialog.location.nativeElement.style.zIndex = maxZindex;\r\n            });\r\n        });\r\n\r\n        this.msgMgr(_modal);\r\n        return _modal;\r\n    }\r\n\r\n    private msgMgr(ref: BsModalRef) {\r\n        const id = this.bsModalService.getModalsCount() + 1000;\r\n        if (this.modals.length === 0) {\r\n            this.modals.push({ id, ref });\r\n        } else {\r\n            if (!this.getModalById(id)) {\r\n                this.modals.push({ id, ref });\r\n            } else {\r\n                this.getModalById(id).ref = ref;\r\n            }\r\n        }\r\n\r\n        const cmp = this.getModalCmp();\r\n\r\n        cmp.closed.subscribe((level: number) => {\r\n            this.removeMessager(id);\r\n            this.confirmSubject.unsubscribe();\r\n        });\r\n\r\n        this.currentId = id;\r\n    }\r\n\r\n    question(\r\n        message: string,\r\n        okCallback: () => void,\r\n        cancelCallback?: () => void,\r\n        msg?: string,\r\n        fitContent = true\r\n    ) {\r\n        const questionDlg = this.show(\r\n            \"question\",\r\n            message,\r\n            {\r\n                initialState: {\r\n                    okText: this.yesText,\r\n                    okHandle: () => {\r\n                        questionDlg.close();\r\n                        if (okCallback) {\r\n                            okCallback();\r\n                        }\r\n                    },\r\n                    cancelText: this.noText,\r\n                    cancelHandle: () => {\r\n                        questionDlg.close();\r\n                        if (cancelCallback) {\r\n                            cancelCallback();\r\n                        }\r\n                    },\r\n                },\r\n                fitContent,\r\n            },\r\n            msg\r\n        );\r\n        return questionDlg;\r\n    }\r\n\r\n    question2(\r\n        messager: string,\r\n        btns: DialogButton[],\r\n        msg?: string,\r\n        fitContent = true\r\n    ) {\r\n        return this.show(\r\n            \"question\",\r\n            messager,\r\n            {\r\n                initialState: {\r\n                    buttons: btns,\r\n                },\r\n                fitContent,\r\n            },\r\n            msg\r\n        );\r\n    }\r\n    /**\r\n     * 2020å¹´3æ7æ¥å ä¸ºtextareaé«åº¦å¨ä¸åæµè§å¨ä¸ä¸ä¸æ ·ï¼åºå®é«åº¦å¯è½ä¼åºç°æ»å¨æ¡\r\n     * @param title æ é¢\r\n     * @param msg ä¿¡æ¯\r\n     * @param fitContent èªéåºåå®¹\r\n     */\r\n    prompt(title: string, msg?: string, fitContent = true) {\r\n        const promptSubject = new Subject();\r\n        const dlg = this.show(\r\n            \"prompt\",\r\n            msg,\r\n            {\r\n                title,\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        const mc = dlg.content as MessagerComponent;\r\n                        dlg.close();\r\n                        promptSubject.next(mc.promptText.nativeElement.value);\r\n                    },\r\n                    cancelText: this.cancelText,\r\n                    cancelHandle: () => {\r\n                        dlg.close();\r\n                        promptSubject.next(false);\r\n                    },\r\n                },\r\n                fitContent,\r\n                closed: () => {\r\n                    promptSubject.unsubscribe();\r\n                },\r\n            },\r\n            msg\r\n        );\r\n\r\n        return promptSubject;\r\n    }\r\n\r\n    prompt2(title: string, msg?: string, opts?: any) {\r\n        const promptSubject = new Subject();\r\n\r\n        const _opts = {\r\n            showOkButton: true,\r\n            showCloseButton: true,\r\n            showFontSize: false,\r\n            fontSize: 18,\r\n            readonly: false,\r\n            saveSize: false,\r\n            closeWhenever: true,\r\n        };\r\n        if (!opts) {\r\n            opts = _opts;\r\n        } else {\r\n            opts = Object.assign(_opts, opts);\r\n        }\r\n\r\n        const _dialogOpts = {\r\n            title,\r\n            initialState: {\r\n                showOkButton:\r\n                    opts.showOkButton === undefined ? true : opts.showOkButton,\r\n                showCancelButton:\r\n                    opts.showCancelButton === undefined\r\n                        ? true\r\n                        : opts.showCancelButton,\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    const mc = dlg.content as MessagerComponent;\r\n                    const val = mc.promptText.nativeElement.value;\r\n                    if (opts.closeWhenever) {\r\n                        dlg.close();\r\n                        promptSubject.next(val);\r\n                    } else {\r\n                        promptSubject.next({ val, dlg });\r\n                    }\r\n                },\r\n                cancelText: this.cancelText,\r\n                cancelHandle: () => {\r\n                    dlg.close();\r\n                    promptSubject.next(false);\r\n                },\r\n                showFontSize: opts.showFontSize,\r\n                fontSize: opts.fontSize || 18,\r\n                enableWordCount: !!opts.enableWordCount,\r\n                countType: opts.countType || \"length\",\r\n                maxLength: opts.maxLength,\r\n                inputType: opts.inputType || \"textarea\",\r\n                placeholder: opts.placeholder || \"\",\r\n            },\r\n            fitContent: false,\r\n            showMaxButton: true,\r\n            resizable: true,\r\n            class: \"\",\r\n            closed: () => {\r\n                promptSubject.unsubscribe();\r\n            },\r\n            opened: () => {\r\n                if (opts.inputType !== \"textarea\") {\r\n                    return;\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const textareaEle =\r\n                            dlg.content.promptText.nativeElement;\r\n                        textareaEle.closest(\"section\").style.padding = \"15px\";\r\n                        textareaEle.style.resize = \"none\";\r\n                        textareaEle.style.height = \"100%\";\r\n\r\n                        if (opts.readonly) {\r\n                            textareaEle.readOnly = true;\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            beforeClose: (modalRef: any) => {\r\n                if (opts.saveSize && !dlg.dialog.instance.isMax) {\r\n                    const data = {\r\n                        fontSize: dlg.content.fontSize,\r\n                        width: modalRef.config.width,\r\n                        height: modalRef.config.height,\r\n                    };\r\n                    this.saveTextAreaSizeInfo(data);\r\n                }\r\n                return of(true);\r\n            },\r\n        };\r\n        let dialogOpts = _dialogOpts;\r\n        if (opts) {\r\n            dialogOpts = Object.assign(dialogOpts, opts);\r\n        }\r\n\r\n        const dlg = this.show(\"prompt\", msg, dialogOpts, msg);\r\n\r\n        if (opts.inputType && dlg.content.promptText) {\r\n            dlg.content.promptText.nativeElement.focus();\r\n        }\r\n\r\n        return promptSubject;\r\n    }\r\n\r\n    getKeyString() {\r\n        // ä¸å°ç»ç«¯å±ç¨ä¸ä¸ªéç½®\r\n        // ä¿çæåä¸æ¬¡çè®¾ç½®ï¼\r\n        // ä¿å­çªå£å¤§å°ï¼å­ä½å¤§å°\r\n        return \"IGIX-FARRIS-UI-TEXTAREA-ZOOM-SETTINGS\";\r\n    }\r\n\r\n    private saveTextAreaSizeInfo(data) {\r\n        if (window.localStorage) {\r\n            const key = this.getKeyString();\r\n            localStorage.setItem(key, JSON.stringify(data));\r\n        }\r\n    }\r\n\r\n    confirm(message: string): Observable<any>;\r\n    confirm(message: string, msg?: string | number, fitContent?: boolean): Observable<any>;\r\n    confirm(message: string, msg?: string, fitContent = true): Observable<any> {\r\n        const confirmSubject = new Subject();\r\n\r\n        const _msg = typeof msg === \"number\" ? null : msg;\r\n        const confirmDlg = this.show(\r\n            \"question\",\r\n            message,\r\n            {\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        confirmDlg.close();\r\n                        confirmSubject.next(true);\r\n                    },\r\n                    cancelText: this.cancelText,\r\n                    cancelHandle: () => {\r\n                        confirmDlg.close();\r\n                        confirmSubject.next(false);\r\n                    },\r\n                },\r\n                fitContent,\r\n                closed: () => {\r\n                    confirmSubject.unsubscribe();\r\n                },\r\n            },\r\n            _msg\r\n        );\r\n\r\n        if (msg && typeof msg === \"number\") {\r\n            confirmDlg.dialog.location.nativeElement.style.zIndex = msg;\r\n        }\r\n\r\n        return confirmSubject.asObservable();\r\n    }\r\n\r\n    info(\r\n        message: string,\r\n        callback?: () => void,\r\n        msg?: string,\r\n        fitContent = true\r\n    ) {\r\n        const infoDlg = this.show(\r\n            \"info\",\r\n            message,\r\n            {\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        infoDlg.close();\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    },\r\n                },\r\n                fitContent,\r\n            },\r\n            msg\r\n        );\r\n        return infoDlg;\r\n    }\r\n\r\n    /** æä½æåæç¤ºï¼\r\n     * message: æç¤ºä¿¡æ¯\r\n     * msg: 2çº§ä¿¡æ¯\r\n     * fitCountent: é»è®¤ä¸ºtrue\r\n     * callback: ç¡®å®äºä»¶åè°\r\n     */\r\n    success(\r\n        message: string,\r\n        msg?: string,\r\n        fitContent = true,\r\n        callback: () => void = null\r\n    ) {\r\n        const successDlg = this.show(\r\n            \"success\",\r\n            message,\r\n            {\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        successDlg.close();\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    },\r\n                },\r\n                fitContent,\r\n            },\r\n            msg\r\n        );\r\n\r\n        return successDlg;\r\n    }\r\n    /** æç¤ºéè¯¯ä¿¡æ¯ï¼\r\n     * message: æç¤ºä¿¡æ¯\r\n     * msg: 2çº§ä¿¡æ¯\r\n     * fitCountent: é»è®¤ä¸ºtrue\r\n     * callback: ç¡®å®äºä»¶åè°\r\n     */\r\n    error(\r\n        message: string,\r\n        msg?: string,\r\n        fitContent = true,\r\n        callback: () => void = null,\r\n        safeHtml = true\r\n    ) {\r\n        const errorDlg = this.show(\r\n            \"error\",\r\n            message,\r\n            {\r\n                safeHtml,\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        errorDlg.close();\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    },\r\n                },\r\n                fitContent,\r\n            },\r\n            msg\r\n        );\r\n\r\n        return errorDlg;\r\n    }\r\n\r\n    warning(\r\n        message: string,\r\n        msg?: string,\r\n        fitContent = true,\r\n        callback: () => void = null\r\n    ) {\r\n        const warningDlg = this.show(\r\n            \"warning\",\r\n            message,\r\n            {\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        warningDlg.close();\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    },\r\n                },\r\n                fitContent,\r\n            },\r\n            msg\r\n        );\r\n        return warningDlg;\r\n    }\r\n\r\n    showHtmlMsg(\r\n        type: \"warning\" | \"info\" | \"error\" | \"success\",\r\n        title: string,\r\n        message?: string,\r\n        callback: () => void = null\r\n    ) {\r\n        const msgDlg = this.show(\r\n            type,\r\n            title,\r\n            {\r\n                safeHtml: false,\r\n                initialState: {\r\n                    okText: this.okText,\r\n                    okHandle: () => {\r\n                        msgDlg.close();\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    },\r\n                },\r\n                fitContent: true,\r\n            },\r\n            message\r\n        );\r\n        return msgDlg;\r\n    }\r\n\r\n    private close() {\r\n        if (this.modals.length) {\r\n            const msgbox = this.getModalById(this.currentId);\r\n            if (msgbox) {\r\n                msgbox.ref.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getModalById(id: number) {\r\n        return this.modals.find((item) => item.id === id);\r\n    }\r\n\r\n    private getModalCmp() {\r\n        return this.bsModalService.getCurrentModalContainer().instance;\r\n    }\r\n\r\n    private removeMessager(id) {\r\n        this.modals = this.modals.filter((n) => n.id !== id);\r\n        if (!this.modals.length) {\r\n            this.currentId = -1;\r\n        } else {\r\n            this.currentId = this.modals[this.modals.length - 1].id;\r\n        }\r\n    }\r\n\r\n    private copyToClipboard(text): boolean {\r\n        const windowRef: any = window;\r\n        if (windowRef.clipboardData && windowRef.clipboardData.setData) {\r\n            return windowRef.clipboardData.setData(\"Text\", text);\r\n        } else if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\r\n            var textarea = document.createElement(\"textarea\");\r\n            textarea.textContent = text;\r\n            textarea.style.position = \"fixed\";\r\n            document.body.appendChild(textarea);\r\n            textarea.select();\r\n            try {\r\n                return document.execCommand(\"copy\");\r\n            } catch (ex) {\r\n            } finally {\r\n                document.body.removeChild(textarea);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** å°è¯·æ±å¼å¸¸ä¿¡æ¯ä½æ ¼å¼åä¸ºobject */\r\n    private getServerExceptionEntity(requestFailedInfo: HttpRequestFaildInfo): ServerExceptionEntity {\r\n        if (requestFailedInfo.status == 404) {\r\n            const serverExceptionEntity = {} as ServerExceptionEntity;\r\n            serverExceptionEntity.Message = (requestFailedInfo && requestFailedInfo.message) || 'Request Failed!';\r\n            return serverExceptionEntity;\r\n        }\r\n        const serverExceptionEntity = requestFailedInfo && requestFailedInfo.error;\r\n        if (serverExceptionEntity) {\r\n            switch (typeof serverExceptionEntity) {\r\n                case 'string':\r\n                    return JSON.parse(serverExceptionEntity);\r\n                case 'object':\r\n                    return serverExceptionEntity;\r\n                default:\r\n                    console.error('ä¸æ¯æçè¯·æ±å¼å¸¸æ°æ®æ ¼å¼ï¼' + typeof serverExceptionEntity);\r\n                    console.error(serverExceptionEntity);\r\n                    return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    exceptionWithHttpInfo(_error: HttpRequestFaildInfo, opts = { width: 440, height: 200, log: false }) {\r\n        let error: ServerExceptionEntity =  this.getServerExceptionEntity(_error);;\r\n        this.exception(error, opts)\r\n    }\r\n\r\n    exception(error: ServerExceptionEntity, opts = { width: 440, height: 200, log: false }): void {\r\n        const exceptionMsg = error.Message || \"\";\r\n        const date = error.date || format(new Date(), 'yyyy-MM-dd HH:mm:ss')\r\n        const localDate = date;\r\n        // åçæ¶é´\r\n        const happenedTime = this.localeService.getValue('messager.exception.happend');\r\n        // è¯¦ç»ä¿¡æ¯\r\n        const detailInfo = this.localeService.getValue('messager.exception.detail');\r\n        const detail =\r\n            error.Detail ||\r\n            `${error.Message}\\r\\n${happenedTime}ï¼${localDate}\\r\\n${detailInfo}ï¼${error.innerMessage}` ||\r\n            \"\";\r\n\r\n        const innerMessage = error.innerMessage || null;\r\n\r\n        const defaultOptions = { width: 440, height: 200, log: false };\r\n        let exoptions = defaultOptions;\r\n        if (opts) {\r\n            exoptions = Object.assign({}, defaultOptions, opts);\r\n        }\r\n\r\n        let bsModalRef: BsModalRef;\r\n        const options = {\r\n            showMaxButton: false,\r\n            buttons: [\r\n                {\r\n                    text: this.localeService.getValue('messager.exception.roger'),\r\n                    cls: \"btn btn-primary btn-lg\",\r\n                    handle: () => {\r\n                        bsModalRef.close();\r\n                    },\r\n                },\r\n            ],\r\n            // showHeader: false,\r\n            width: exoptions.width,\r\n            height: exoptions.height,\r\n            safeHtml: false,\r\n            exception: {\r\n                date: localDate,\r\n                message: innerMessage,\r\n                copyButton: {\r\n                    text: this.localeService.getValue('messager.exception.copy'),\r\n                    onClick: (e) => {\r\n                        const result = this.copyToClipboard(detail);\r\n                        const text = result\r\n                            ? this.localeService.getValue('messager.exception.copySuccess')\r\n                            : this.localeService.getValue('messager.exception.copyFailed');\r\n                        bsModalRef.content.showMiniNotify(text, 1500);\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        if (exoptions.log) {\r\n            console.error(error);\r\n        }\r\n        // this.displayError(error);\r\n        bsModalRef = this.show(\r\n            \"exception\",\r\n            exceptionMsg,\r\n            options\r\n        );\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\n// import { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n\r\nimport { MessagerComponent } from './messager.component';\r\nimport { MessagerService } from './messager.service';\r\nimport { MessagerConfig, MESSAGER_DEFAULT_CONFIG, MessagerDefaultConfig } from './messager.config';\r\nimport { FarrisDefaultFocusDirective } from './farris-default-focus.directive';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        // FarrisFormsModule,\r\n        LocaleModule,\r\n        ModalModule.forRoot()\r\n    ],\r\n    declarations: [\r\n        FarrisDefaultFocusDirective,\r\n        MessagerComponent\r\n    ],\r\n    entryComponents: [\r\n        MessagerComponent\r\n    ]\r\n})\r\nexport class MessagerModule {\r\n    static forRoot(config?: MessagerConfig): ModuleWithProviders {\r\n        return {\r\n            ngModule: MessagerModule,\r\n            providers: [\r\n                {provide: MESSAGER_DEFAULT_CONFIG, useValue: config || MessagerDefaultConfig },\r\n                MessagerService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}