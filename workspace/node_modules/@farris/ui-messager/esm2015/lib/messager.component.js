/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
/*
 * @Author: Lucas.Huang（疯狂秀才）
 * @Date: 2018-10-13 11:11:50
 * @Last Modified by:   Lucas.Huang（疯狂秀才）
 * @Last Modified time: 2018-10-13 11:11:50
 */
import { ElementRef, Component, Input, Injector, HostBinding, ViewChild, Renderer2 } from '@angular/core';
export class MessagerComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.showFontSize = false;
        this._message = '';
        this.msg = '';
        this.cls = 'farris-messager';
        this.okText = '';
        this.cancelText = '';
        this.showOkButton = true;
        this.showCancelButton = true;
        this.readonly = false;
        this.enableWordCount = false;
        this.countType = 'length';
        this.exception = null;
        this.showLines = 4;
        this.fontSize = '18';
        this.inputType = 'textarea';
        this.placeholder = '';
        this.buttons = [];
        this.expand = false;
        this.needShowExpand = false;
        this.wordsTotal = '';
        this.wrodsTotalTips = '';
        this.utils = this.injector.get(CommonUtils);
        this.localeService = this.injector.get(LocaleService);
        this.render = this.injector.get(Renderer2);
    }
    /**
     * @return {?}
     */
    get message() {
        return this._message;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    set message(str) {
        this._message = (str === undefined || str === null) ? '' : '' + str;
        if (this.type === 'prompt' && this.utils) {
            this._message = this.utils.unescapeHtml(this._message);
        }
    }
    /**
     * @return {?}
     */
    get fontsizeName() {
        return this.localeService.getValue('messager.prompt.fontSize.name');
    }
    /**
     * @return {?}
     */
    get fontSmall() {
        return this.localeService.getValue('messager.prompt.fontSize.small');
    }
    /**
     * @return {?}
     */
    get fontMiddle() {
        return this.localeService.getValue('messager.prompt.fontSize.middle');
    }
    /**
     * @return {?}
     */
    get fontBig() {
        return this.localeService.getValue('messager.prompt.fontSize.big');
    }
    /**
     * @return {?}
     */
    get fontLarge() {
        return this.localeService.getValue('messager.prompt.fontSize.large');
    }
    /**
     * @return {?}
     */
    get fontHuge() {
        return this.localeService.getValue('messager.prompt.fontSize.huge');
    }
    /**
     * @return {?}
     */
    get expandText() {
        return this.localeService.getValue('messager.exception.expand');
    }
    /**
     * @return {?}
     */
    get collapseText() {
        return this.localeService.getValue('messager.exception.collapse');
    }
    /**
     * @return {?}
     */
    get happend() {
        return this.localeService.getValue('messager.exception.happend');
    }
    /**
     * @return {?}
     */
    get detail() {
        return this.localeService.getValue('messager.exception.detail');
    }
    /**
     * @return {?}
     */
    get exceptionMsgMaxHeight() {
        return window.innerHeight - 10 - 10 - 100 - 100 - 16;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.enableWordCount && this.promptText) {
                this.onTextChange(null);
            }
        }));
        this.type = this.type === 'exception' ? 'error' : this.type;
    }
    /**
     * @return {?}
     */
    get icon() {
        return 'f-icon-' + (this.type === 'exception' ? 'error' : this.type);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.exception && this.exception['message']) {
                /** @type {?} */
                const realWidth = this.excepMsgEl.nativeElement.getBoundingClientRect().width.toFixed(2) + 'px';
                this.render.setStyle(this.allexcepEl.nativeElement, 'width', realWidth);
                this.needShowExpand = this.allexcepEl.nativeElement.offsetHeight > this.excepMsgEl.nativeElement.offsetHeight;
            }
            else {
                this.needShowExpand = false;
            }
        }), 10);
    }
    /**
     * @param {?} val
     * @param {?} textAreaEl
     * @return {?}
     */
    onFontSizeChange(val, textAreaEl) {
        // this.promptText.nativeElement
        // textAreaEl.nativeElement.style['font-size'] = val;
    }
    /**
     * @private
     * @return {?}
     */
    getWordsTotal() {
        /** @type {?} */
        const c = this.countType === 'length' ? this.promptText.nativeElement.value.length
            : this.maxLength - this.promptText.nativeElement.value.length;
        return c;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTextChange($event) {
        this.wordsTotal = this.getWordsTotal();
        this.wrodsTotalTips = this.localeService.getValue('messager.prompt.tips.' + this.countType).replace('{0}', this.wordsTotal);
    }
    /**
     * @param {?} t
     * @param {?} $event
     * @return {?}
     */
    expandMsg(t, $event) {
        $event.stopPropagation();
        if (t) {
            this.render.setStyle(this.excepMsgEl.nativeElement, 'overflow', 'auto');
            this.render.removeStyle(this.excepMsgEl.nativeElement, '-webkit-line-clamp');
        }
        else {
            this.render.setStyle(this.excepMsgEl.nativeElement, 'overflow', 'hidden');
            this.render.setStyle(this.excepMsgEl.nativeElement, '-webkit-line-clamp', this.showLines);
        }
        this.expand = t;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCopyClick($event) {
        $event.stopPropagation();
        if (this.exception && this.exception.copyButton) {
            this.exception.copyButton.onClick({ event: $event, cmpRef: this });
        }
    }
    /**
     * @param {?} msg
     * @param {?=} timeout
     * @return {?}
     */
    showMiniNotify(msg, timeout = 700) {
        if (this.miniNotifyEl) {
            this.miniNotifyEl.nativeElement.innerText = msg;
            this.render.setStyle(this.miniNotifyEl.nativeElement, 'display', '');
            this.render.setStyle(this.miniNotifyEl.nativeElement, 'opacity', 0.8);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.render.setStyle(this.miniNotifyEl.nativeElement, 'opacity', 0);
                this.render.setStyle(this.miniNotifyEl.nativeElement, 'display', 'none');
            }), timeout);
        }
    }
}
MessagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-messager',
                template: "<!-- <section class=\"modal-tips d-flex flex-row\" *ngIf=\"type!=='prompt'\">\r\n    <div class=\"modal-tips-iconwrap\">\r\n        <span class=\"f-icon\" [ngClass]=\"icon\"></span>\r\n    </div>\r\n    <div class=\"modal-tips-content flex-fill fixdiv\">\r\n        <p class=\"toast-msg\" [innerHTML]=\"message\"></p>\r\n    </div>\r\n</section> -->\r\n\r\n<section class=\"modal-tips d-flex flex-row\" *ngIf=\"type!=='prompt'\" [ngClass]=\"'messager-type-'+type\">\r\n    <div class=\"float-left modal-tips-iconwrap\">\r\n        <span class=\"f-icon\" [ngClass]=\" icon\"></span>\r\n    </div>\r\n    <div class=\"modal-tips-content\">\r\n        <p class=\"toast-msg-title\" [innerHTML]=\"message | safe: 'html'\"></p>\r\n        <p class=\"toast-msg-detail\" [innerHTML]=\"msg | safe: 'html'\" *ngIf=\"msg !=='' && !exception\"></p>\r\n        <div class=\"toast-msg-detail\" *ngIf=\"exception\">\r\n            <div *ngIf=\"exception?.date\">{{happend}}: {{exception?.date}}</div>\r\n            <div id=\"exception_error_msg\" #excepMsg *ngIf=\"exception?.message\"\r\n                style=\"overflow: hidden;text-overflow: ellipsis;display: -webkit-box;-webkit-box-orient: vertical;\"\r\n                [style.-webkit-line-clamp]=\"showLines\" [style.max-height.px]=\"exceptionMsgMaxHeight\">\r\n                {{detail}}: <span [innerHTML]=\"exception?.message | safe: 'html'\"></span>\r\n            </div>\r\n            <span style=\"display: block; text-align: right;color:#2A87FF;\" *ngIf=\"needShowExpand\">\r\n                <span (click)=\"expandMsg(true, $event)\" style=\"cursor: pointer;\" *ngIf=\"!expand\">{{expandText}}</span>\r\n                <span (click)=\"expandMsg(false,  $event)\" style=\"cursor: pointer;\" *ngIf=\"expand\">{{collapseText}}</span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</section>\r\n<section class=\"modal-tips d-flex flex-row\"  *ngIf=\"type==='prompt'\">\r\n    <div class=\"flex-fill fixdiv mb-1 mr-3\" *ngIf=\"inputType === 'textarea'\">\r\n        <textarea #promptText name=\"promptMessage\" class=\"form-control\" [style.fontSize.px]=\"fontSize\"  style=\"height: 100%;resize: none\"\r\n            id=\"exampleFormControlTextarea1\" rows=\"4\" [attr.maxLength]=\"maxLength\" (input)=\"onTextChange($event)\" \r\n            >{{ message }}</textarea>\r\n        \r\n    </div>\r\n    <div class=\"flex-fill fixdiv mr-4 d-flex\" style=\"align-items: center;\" *ngIf=\"inputType !== 'textarea'\">\r\n        <input #promptText type=\"text\" class=\"form-control\" [attr.maxLength]=\"maxLength\"  (input)=\"onTextChange($event)\" [value]=\"message\"\r\n        placeholder=\"{{ placeholder }}\">\r\n    </div>\r\n\r\n</section>\r\n<span #wordCount class=\"textarea-wordcount\" *ngIf=\"enableWordCount && maxLength && maxLength > 0\" [attr.title]=\"wrodsTotalTips\"\r\n    style=\"position: relative;bottom: 10px;right: 20px;cursor: pointer;text-align: right;\">\r\n    {{ wordsTotal  + ' / ' + maxLength }}\r\n</span>\r\n\r\n<div class=\"modal-footer\" *ngIf=\"!(buttons && buttons.length) && (okText || cancelText)\">\r\n    <div class=\"d-flex flex-fill textarea-font-size\" style=\"text-align: left\" *ngIf=\"type==='prompt' && showFontSize\">\r\n        <span style=\"width:75px\">{{fontsizeName}}</span>\r\n        <select #fontSizeEl class=\"form-control\" style=\"max-width:100px\" [(ngModel)]=\"fontSize\" (change)=\"onFontSizeChange($event.target.value, promptText)\">\r\n            <option value=\"14\">{{fontSmall}}</option>\r\n            <option value=\"18\">{{fontMiddle}}</option>\r\n            <option value=\"24\">{{fontBig}}</option>\r\n            <option value=\"36\">{{fontLarge}}</option>\r\n            <option value=\"48\">{{fontHuge}}</option>\r\n        </select>\r\n    </div>\r\n\r\n    <button *ngIf=\"cancelText && showCancelButton\" type=\"button\" class=\"btn btn-secondary  btn-lg\" (click)=\"cancelHandle()\">{{ cancelText }}</button>\r\n    <button #btnOkEl *ngIf=\"okText && showOkButton\" type=\"button\" class=\"btn btn-primary btn-lg\" (click)=\"okHandle()\">{{ okText }}</button>\r\n</div>\r\n    \r\n    \r\n<div class=\"modal-footer\" *ngIf=\"buttons && buttons.length\">\r\n    <span *ngIf=\"exception && exception.copyButton && exception.copyButton.text\" style=\"width: 100%;color: #2A87FF;padding-left: 37px;\">\r\n        <span (click)=\"onCopyClick($event)\" style=\"cursor: pointer;\">{{exception.copyButton.text}}</span></span>\r\n    <button type=\"button\"  *ngFor=\"let btn of buttons\"  (click)=\"btn.handle()\" [farris-default-focus]=\"btn\" [class]=\"btn.cls\"><span [class]=\"btn.iconCls\" *ngIf=\"btn.iconCls\"></span>{{ btn.text}}</button>\r\n</div>\r\n\r\n\r\n<div style=\"position: absolute;left: -21990px;top: -20000px; word-break: break-all;\r\ncolor: #747B8B;font-size: .875rem;\" *ngIf=\"exception\" #allexcep>\r\n{{detail}}: <span [innerHTML]=\"exception?.message | safe: 'html'\"></span>\r\n</div>\r\n\r\n<div style=\"position: absolute;\r\nleft: 50%;\r\ntop: 50%;\r\nwidth: 100px;\r\nheight: 40px;\r\nbackground: #303C53;\r\nline-height: 40px;\r\ntext-align: center;\r\nmargin-left: -30px;\r\nmargin-top: -50px;\r\nborder-radius: 10px;\r\nbox-shadow: 0px 2px 8px 0px;\r\nopacity: 0;\r\ncolor: #fff;\r\ntransition: all .3s ease; display: none\" #miniNotify>\r\n\r\n</div>\r\n\r\n"
            }] }
];
/** @nocollapse */
MessagerComponent.ctorParameters = () => [
    { type: Injector }
];
MessagerComponent.propDecorators = {
    type: [{ type: Input }],
    showFontSize: [{ type: Input }],
    message: [{ type: Input }],
    msg: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    okText: [{ type: Input }],
    cancelText: [{ type: Input }],
    showOkButton: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    readonly: [{ type: Input }],
    okHandle: [{ type: Input }],
    cancelHandle: [{ type: Input }],
    enableWordCount: [{ type: Input }],
    countType: [{ type: Input }],
    maxLength: [{ type: Input }],
    exception: [{ type: Input }],
    showLines: [{ type: Input }],
    promptText: [{ type: ViewChild, args: ['promptText',] }],
    fontSizeEl: [{ type: ViewChild, args: ['fontSizeEl',] }],
    wordCountEl: [{ type: ViewChild, args: ['wordCount',] }],
    excepMsgEl: [{ type: ViewChild, args: ['excepMsg',] }],
    allexcepEl: [{ type: ViewChild, args: ['allexcep',] }],
    miniNotifyEl: [{ type: ViewChild, args: ['miniNotify',] }],
    btnOkEl: [{ type: ViewChild, args: ['btnOkEl',] }],
    fontSize: [{ type: Input }],
    inputType: [{ type: Input }],
    placeholder: [{ type: Input }],
    buttons: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MessagerComponent.prototype.type;
    /** @type {?} */
    MessagerComponent.prototype.showFontSize;
    /**
     * @type {?}
     * @private
     */
    MessagerComponent.prototype._message;
    /** @type {?} */
    MessagerComponent.prototype.msg;
    /** @type {?} */
    MessagerComponent.prototype.utils;
    /** @type {?} */
    MessagerComponent.prototype.localeService;
    /** @type {?} */
    MessagerComponent.prototype.render;
    /** @type {?} */
    MessagerComponent.prototype.cls;
    /** @type {?} */
    MessagerComponent.prototype.okText;
    /** @type {?} */
    MessagerComponent.prototype.cancelText;
    /** @type {?} */
    MessagerComponent.prototype.showOkButton;
    /** @type {?} */
    MessagerComponent.prototype.showCancelButton;
    /** @type {?} */
    MessagerComponent.prototype.readonly;
    /** @type {?} */
    MessagerComponent.prototype.okHandle;
    /** @type {?} */
    MessagerComponent.prototype.cancelHandle;
    /** @type {?} */
    MessagerComponent.prototype.enableWordCount;
    /** @type {?} */
    MessagerComponent.prototype.countType;
    /** @type {?} */
    MessagerComponent.prototype.maxLength;
    /** @type {?} */
    MessagerComponent.prototype.exception;
    /** @type {?} */
    MessagerComponent.prototype.showLines;
    /** @type {?} */
    MessagerComponent.prototype.promptText;
    /** @type {?} */
    MessagerComponent.prototype.fontSizeEl;
    /** @type {?} */
    MessagerComponent.prototype.wordCountEl;
    /** @type {?} */
    MessagerComponent.prototype.excepMsgEl;
    /** @type {?} */
    MessagerComponent.prototype.allexcepEl;
    /** @type {?} */
    MessagerComponent.prototype.miniNotifyEl;
    /** @type {?} */
    MessagerComponent.prototype.btnOkEl;
    /** @type {?} */
    MessagerComponent.prototype.fontSize;
    /** @type {?} */
    MessagerComponent.prototype.inputType;
    /** @type {?} */
    MessagerComponent.prototype.placeholder;
    /** @type {?} */
    MessagerComponent.prototype.buttons;
    /** @type {?} */
    MessagerComponent.prototype.expand;
    /** @type {?} */
    MessagerComponent.prototype.needShowExpand;
    /** @type {?} */
    MessagerComponent.prototype.wordsTotal;
    /** @type {?} */
    MessagerComponent.prototype.wrodsTotalTips;
    /**
     * @type {?}
     * @private
     */
    MessagerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,