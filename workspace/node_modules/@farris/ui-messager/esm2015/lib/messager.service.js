/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.15
 * @Date: 2019-04-02 11:48:08
 * @LastEditTime: 2019-10-26 16:38:34
 */
import { Injectable, Injector, NgZone } from "@angular/core";
import { Subject, of } from "rxjs";
import { BsModalService } from "@farris/ui-modal";
import { MessagerDefaultConfig, MESSAGER_DEFAULT_CONFIG, } from "./messager.config";
import { MessagerComponent } from "./messager.component";
import { LocaleService } from "@farris/ui-locale";
import { format } from "date-fns";
import { CommonUtils } from "@farris/ui-common";
export class MessagerService {
    /**
     * @param {?} bsModalService
     * @param {?} injector
     */
    constructor(bsModalService, injector) {
        this.bsModalService = bsModalService;
        this.injector = injector;
        this.version = "0.0.15";
        this.currentId = -1;
        this.modals = [];
        this.defaultMessagerConfig = null;
        /** @type {?} */
        const config = this.injector.get(MESSAGER_DEFAULT_CONFIG) || MessagerDefaultConfig;
        this.defaultMessagerConfig = Object.assign({}, MessagerDefaultConfig, config);
        this.ngZone = this.injector.get(NgZone);
        this.localeService = this.injector.get(LocaleService);
        this.commonUtils = this.injector.get(CommonUtils, null);
    }
    /**
     * @return {?}
     */
    get okText() {
        return this.localeService.getValue("messager.ok");
    }
    /**
     * @return {?}
     */
    get cancelText() {
        return this.localeService.getValue("messager.cancel");
    }
    /**
     * @return {?}
     */
    get yesText() {
        return this.localeService.getValue("messager.yes");
    }
    /**
     * @return {?}
     */
    get noText() {
        return this.localeService.getValue("messager.no");
    }
    /**
     * @return {?}
     */
    get titleText() {
        return this.localeService.getValue("messager.title");
    }
    /**
     * @return {?}
     */
    get errorTitle() {
        return this.localeService.getValue("messager.errorTitle");
    }
    /**
     * @param {?} str
     * @return {?}
     */
    escapeHtml(str) {
        if (str === null || str === undefined) {
            return "";
        }
        return str
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/\"/g, "&quot;")
            .replace(/\'/g, "&#39;")
            .replace(/\//g, "&#x2F;");
    }
    /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    show(msgtype, message, opts, submsg = "") {
        if (document.activeElement) {
            ((/** @type {?} */ (document.activeElement))).blur();
        }
        /** @type {?} */
        const modalHeight = 180;
        /** @type {?} */
        let defaultOpts = {
            safeHtml: true,
            title: this.titleText,
            width: 390,
            height: modalHeight,
            showButtons: false,
            showMaxButton: false,
            resizable: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    this.close();
                }),
            },
            class: "modal-message " +
                (msgtype ? "modal-message-type-" + msgtype : ""),
            showHeader: false,
        };
        defaultOpts = Object.assign({}, this.defaultMessagerConfig, defaultOpts);
        /** @type {?} */
        let extendOpts = {};
        switch (msgtype) {
            case "prompt":
                // 弹出对话类型
                extendOpts = { showHeader: true, modalHeight: 260 };
                break;
            case "error":
                // 错误
                extendOpts = {
                    title: this.errorTitle,
                    width: 446,
                    showHeader: true,
                    showMaxButton: true,
                    fitContent: true,
                };
                break;
            case "exception":
                extendOpts = {
                    safeHtml: false,
                    title: this.errorTitle,
                    width: 446,
                    showHeader: true,
                    fitContent: true,
                };
                break;
            default:
                // 默认其他
                extendOpts = { width: submsg ? 446 : 390, fitContent: true };
        }
        Object.assign(defaultOpts, extendOpts);
        if (opts) {
            Object.assign(defaultOpts, opts);
        }
        if (message && defaultOpts.safeHtml) {
            message = this.escapeHtml(message);
        }
        Object.assign(defaultOpts.initialState, {
            type: msgtype,
            message,
            msg: submsg,
            exception: opts && opts["exception"] ? opts["exception"] : null,
            showLines: opts && opts["showLines"] ? opts["showLines"] : 3,
            readonly: opts && opts["readonly"] ? opts["readonly"] : false,
        });
        if (defaultOpts["buttons"] && defaultOpts["buttons"].length) {
            if (!defaultOpts.initialState["buttons"] ||
                !defaultOpts.initialState["buttons"].length) {
                defaultOpts.initialState["buttons"] = defaultOpts["buttons"];
            }
        }
        /** @type {?} */
        const _modal = this.bsModalService.show(MessagerComponent, defaultOpts);
        // _modal.content.buttons = defaultOpts['buttons'] || [];
        this.confirmSubject = new Subject();
        if (this.modals.length > 0) {
            /** @type {?} */
            const modalContainerComponent = _modal.dialog;
            modalContainerComponent.instance.isShown = true;
            modalContainerComponent.instance.moveTo(15 * this.modals.length, 15 * this.modals.length);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            // 第1个按钮获取焦点
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const btnOk = _modal.content.btnOkEl
                    ? _modal.content.btnOkEl.nativeElement
                    : null;
                if (btnOk) {
                    btnOk["focus"]();
                }
                else {
                    /** @type {?} */
                    const btns = _modal.dialog.location.nativeElement.querySelectorAll(".modal-footer button");
                    if (btns.length) {
                        btns.item(0)["focus"]();
                    }
                }
                // const overlays = Array.from(document.body.querySelectorAll('body>div, body>farris-dialog>.farris-modal,body>.farris-modal')).filter(n => n).map(n => {
                //     return window.getComputedStyle(n).zIndex;
                // }).filter(n => n && n!== 'auto').map(n => {
                //     return parseInt(n, 10);
                // });
                /** @type {?} */
                const maxZindex = this.commonUtils.getFloatingLayerIndex();
                _modal.dialog.location.nativeElement.style.zIndex = maxZindex;
            }));
        }));
        this.msgMgr(_modal);
        return _modal;
    }
    /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    msgMgr(ref) {
        /** @type {?} */
        const id = this.bsModalService.getModalsCount() + 1000;
        if (this.modals.length === 0) {
            this.modals.push({ id, ref });
        }
        else {
            if (!this.getModalById(id)) {
                this.modals.push({ id, ref });
            }
            else {
                this.getModalById(id).ref = ref;
            }
        }
        /** @type {?} */
        const cmp = this.getModalCmp();
        cmp.closed.subscribe((/**
         * @param {?} level
         * @return {?}
         */
        (level) => {
            this.removeMessager(id);
            this.confirmSubject.unsubscribe();
        }));
        this.currentId = id;
    }
    /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    question(message, okCallback, cancelCallback, msg, fitContent = true) {
        /** @type {?} */
        const questionDlg = this.show("question", message, {
            initialState: {
                okText: this.yesText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    questionDlg.close();
                    if (okCallback) {
                        okCallback();
                    }
                }),
                cancelText: this.noText,
                cancelHandle: (/**
                 * @return {?}
                 */
                () => {
                    questionDlg.close();
                    if (cancelCallback) {
                        cancelCallback();
                    }
                }),
            },
            fitContent,
        }, msg);
        return questionDlg;
    }
    /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    question2(messager, btns, msg, fitContent = true) {
        return this.show("question", messager, {
            initialState: {
                buttons: btns,
            },
            fitContent,
        }, msg);
    }
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    prompt(title, msg, fitContent = true) {
        /** @type {?} */
        const promptSubject = new Subject();
        /** @type {?} */
        const dlg = this.show("prompt", msg, {
            title,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const mc = (/** @type {?} */ (dlg.content));
                    dlg.close();
                    promptSubject.next(mc.promptText.nativeElement.value);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                () => {
                    dlg.close();
                    promptSubject.next(false);
                }),
            },
            fitContent,
            closed: (/**
             * @return {?}
             */
            () => {
                promptSubject.unsubscribe();
            }),
        }, msg);
        return promptSubject;
    }
    /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    prompt2(title, msg, opts) {
        /** @type {?} */
        const promptSubject = new Subject();
        /** @type {?} */
        const _opts = {
            showOkButton: true,
            showCloseButton: true,
            showFontSize: false,
            fontSize: 18,
            readonly: false,
            saveSize: false,
            closeWhenever: true,
        };
        if (!opts) {
            opts = _opts;
        }
        else {
            opts = Object.assign(_opts, opts);
        }
        /** @type {?} */
        const _dialogOpts = {
            title,
            initialState: {
                showOkButton: opts.showOkButton === undefined ? true : opts.showOkButton,
                showCancelButton: opts.showCancelButton === undefined
                    ? true
                    : opts.showCancelButton,
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const mc = (/** @type {?} */ (dlg.content));
                    /** @type {?} */
                    const val = mc.promptText.nativeElement.value;
                    if (opts.closeWhenever) {
                        dlg.close();
                        promptSubject.next(val);
                    }
                    else {
                        promptSubject.next({ val, dlg });
                    }
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                () => {
                    dlg.close();
                    promptSubject.next(false);
                }),
                showFontSize: opts.showFontSize,
                fontSize: opts.fontSize || 18,
                enableWordCount: !!opts.enableWordCount,
                countType: opts.countType || "length",
                maxLength: opts.maxLength,
                inputType: opts.inputType || "textarea",
                placeholder: opts.placeholder || "",
            },
            fitContent: false,
            showMaxButton: true,
            resizable: true,
            class: "",
            closed: (/**
             * @return {?}
             */
            () => {
                promptSubject.unsubscribe();
            }),
            opened: (/**
             * @return {?}
             */
            () => {
                if (opts.inputType !== "textarea") {
                    return;
                }
                else {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        /** @type {?} */
                        const textareaEle = dlg.content.promptText.nativeElement;
                        textareaEle.closest("section").style.padding = "15px";
                        textareaEle.style.resize = "none";
                        textareaEle.style.height = "100%";
                        if (opts.readonly) {
                            textareaEle.readOnly = true;
                        }
                    }));
                }
            }),
            beforeClose: (/**
             * @param {?} modalRef
             * @return {?}
             */
            (modalRef) => {
                if (opts.saveSize && !dlg.dialog.instance.isMax) {
                    /** @type {?} */
                    const data = {
                        fontSize: dlg.content.fontSize,
                        width: modalRef.config.width,
                        height: modalRef.config.height,
                    };
                    this.saveTextAreaSizeInfo(data);
                }
                return of(true);
            }),
        };
        /** @type {?} */
        let dialogOpts = _dialogOpts;
        if (opts) {
            dialogOpts = Object.assign(dialogOpts, opts);
        }
        /** @type {?} */
        const dlg = this.show("prompt", msg, dialogOpts, msg);
        if (opts.inputType && dlg.content.promptText) {
            dlg.content.promptText.nativeElement.focus();
        }
        return promptSubject;
    }
    /**
     * @return {?}
     */
    getKeyString() {
        // 一台终端共用一个配置
        // 保留最后一次的设置，
        // 保存窗口大小，字体大小
        return "IGIX-FARRIS-UI-TEXTAREA-ZOOM-SETTINGS";
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    saveTextAreaSizeInfo(data) {
        if (window.localStorage) {
            /** @type {?} */
            const key = this.getKeyString();
            localStorage.setItem(key, JSON.stringify(data));
        }
    }
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    confirm(message, msg, fitContent = true) {
        /** @type {?} */
        const confirmSubject = new Subject();
        /** @type {?} */
        const _msg = typeof msg === "number" ? null : msg;
        /** @type {?} */
        const confirmDlg = this.show("question", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    confirmDlg.close();
                    confirmSubject.next(true);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                () => {
                    confirmDlg.close();
                    confirmSubject.next(false);
                }),
            },
            fitContent,
            closed: (/**
             * @return {?}
             */
            () => {
                confirmSubject.unsubscribe();
            }),
        }, _msg);
        if (msg && typeof msg === "number") {
            confirmDlg.dialog.location.nativeElement.style.zIndex = msg;
        }
        return confirmSubject.asObservable();
    }
    /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    info(message, callback, msg, fitContent = true) {
        /** @type {?} */
        const infoDlg = this.show("info", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    infoDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent,
        }, msg);
        return infoDlg;
    }
    /**
     * 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    success(message, msg, fitContent = true, callback = null) {
        /** @type {?} */
        const successDlg = this.show("success", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    successDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent,
        }, msg);
        return successDlg;
    }
    /**
     * 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @param {?=} safeHtml
     * @return {?}
     */
    error(message, msg, fitContent = true, callback = null, safeHtml = true) {
        /** @type {?} */
        const errorDlg = this.show("error", message, {
            safeHtml,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    errorDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent,
        }, msg);
        return errorDlg;
    }
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    warning(message, msg, fitContent = true, callback = null) {
        /** @type {?} */
        const warningDlg = this.show("warning", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    warningDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent,
        }, msg);
        return warningDlg;
    }
    /**
     * @param {?} type
     * @param {?} title
     * @param {?=} message
     * @param {?=} callback
     * @return {?}
     */
    showHtmlMsg(type, title, message, callback = null) {
        /** @type {?} */
        const msgDlg = this.show(type, title, {
            safeHtml: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                () => {
                    msgDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent: true,
        }, message);
        return msgDlg;
    }
    /**
     * @private
     * @return {?}
     */
    close() {
        if (this.modals.length) {
            /** @type {?} */
            const msgbox = this.getModalById(this.currentId);
            if (msgbox) {
                msgbox.ref.close();
            }
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getModalById(id) {
        return this.modals.find((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.id === id));
    }
    /**
     * @private
     * @return {?}
     */
    getModalCmp() {
        return this.bsModalService.getCurrentModalContainer().instance;
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    removeMessager(id) {
        this.modals = this.modals.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.id !== id));
        if (!this.modals.length) {
            this.currentId = -1;
        }
        else {
            this.currentId = this.modals[this.modals.length - 1].id;
        }
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    copyToClipboard(text) {
        /** @type {?} */
        const windowRef = window;
        if (windowRef.clipboardData && windowRef.clipboardData.setData) {
            return windowRef.clipboardData.setData("Text", text);
        }
        else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            /** @type {?} */
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");
            }
            catch (ex) {
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return false;
    }
    /**
     * 将请求异常信息体格式化为object
     * @private
     * @param {?} requestFailedInfo
     * @return {?}
     */
    getServerExceptionEntity(requestFailedInfo) {
        if (requestFailedInfo.status == 404) {
            /** @type {?} */
            const serverExceptionEntity = (/** @type {?} */ ({}));
            serverExceptionEntity.Message = (requestFailedInfo && requestFailedInfo.message) || 'Request Failed!';
            return serverExceptionEntity;
        }
        /** @type {?} */
        const serverExceptionEntity = requestFailedInfo && requestFailedInfo.error;
        if (serverExceptionEntity) {
            switch (typeof serverExceptionEntity) {
                case 'string':
                    return JSON.parse(serverExceptionEntity);
                case 'object':
                    return serverExceptionEntity;
                default:
                    console.error('不支持的请求异常数据格式：' + typeof serverExceptionEntity);
                    console.error(serverExceptionEntity);
                    return null;
            }
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} _error
     * @param {?=} opts
     * @return {?}
     */
    exceptionWithHttpInfo(_error, opts = { width: 440, height: 200, log: false }) {
        /** @type {?} */
        let error = this.getServerExceptionEntity(_error);
        ;
        this.exception(error, opts);
    }
    /**
     * @param {?} error
     * @param {?=} opts
     * @return {?}
     */
    exception(error, opts = { width: 440, height: 200, log: false }) {
        /** @type {?} */
        const exceptionMsg = error.Message || "";
        /** @type {?} */
        const date = error.date || format(new Date(), 'yyyy-MM-dd HH:mm:ss');
        /** @type {?} */
        const localDate = date;
        // 发生时间
        /** @type {?} */
        const happenedTime = this.localeService.getValue('messager.exception.happend');
        // 详细信息
        /** @type {?} */
        const detailInfo = this.localeService.getValue('messager.exception.detail');
        /** @type {?} */
        const detail = error.Detail ||
            `${error.Message}\r\n${happenedTime}：${localDate}\r\n${detailInfo}：${error.innerMessage}` ||
            "";
        /** @type {?} */
        const innerMessage = error.innerMessage || null;
        /** @type {?} */
        const defaultOptions = { width: 440, height: 200, log: false };
        /** @type {?} */
        let exoptions = defaultOptions;
        if (opts) {
            exoptions = Object.assign({}, defaultOptions, opts);
        }
        /** @type {?} */
        let bsModalRef;
        /** @type {?} */
        const options = {
            showMaxButton: false,
            buttons: [
                {
                    text: this.localeService.getValue('messager.exception.roger'),
                    cls: "btn btn-primary btn-lg",
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        bsModalRef.close();
                    }),
                },
            ],
            // showHeader: false,
            width: exoptions.width,
            height: exoptions.height,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: this.localeService.getValue('messager.exception.copy'),
                    onClick: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        const result = this.copyToClipboard(detail);
                        /** @type {?} */
                        const text = result
                            ? this.localeService.getValue('messager.exception.copySuccess')
                            : this.localeService.getValue('messager.exception.copyFailed');
                        bsModalRef.content.showMiniNotify(text, 1500);
                    }),
                },
            },
        };
        if (exoptions.log) {
            console.error(error);
        }
        // this.displayError(error);
        bsModalRef = this.show("exception", exceptionMsg, options);
    }
}
MessagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MessagerService.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    MessagerService.prototype.version;
    /** @type {?} */
    MessagerService.prototype.currentId;
    /** @type {?} */
    MessagerService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.defaultMessagerConfig;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.confirmSubject;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.bsModalService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,