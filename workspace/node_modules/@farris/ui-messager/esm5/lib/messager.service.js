/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.15
 * @Date: 2019-04-02 11:48:08
 * @LastEditTime: 2019-10-26 16:38:34
 */
import { Injectable, Injector, NgZone } from "@angular/core";
import { Subject, of } from "rxjs";
import { BsModalService } from "@farris/ui-modal";
import { MessagerDefaultConfig, MESSAGER_DEFAULT_CONFIG, } from "./messager.config";
import { MessagerComponent } from "./messager.component";
import { LocaleService } from "@farris/ui-locale";
import { format } from "date-fns";
import { CommonUtils } from "@farris/ui-common";
var MessagerService = /** @class */ (function () {
    function MessagerService(bsModalService, injector) {
        this.bsModalService = bsModalService;
        this.injector = injector;
        this.version = "0.0.15";
        this.currentId = -1;
        this.modals = [];
        this.defaultMessagerConfig = null;
        /** @type {?} */
        var config = this.injector.get(MESSAGER_DEFAULT_CONFIG) || MessagerDefaultConfig;
        this.defaultMessagerConfig = Object.assign({}, MessagerDefaultConfig, config);
        this.ngZone = this.injector.get(NgZone);
        this.localeService = this.injector.get(LocaleService);
        this.commonUtils = this.injector.get(CommonUtils, null);
    }
    Object.defineProperty(MessagerService.prototype, "okText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue("messager.ok");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "cancelText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue("messager.cancel");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "yesText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue("messager.yes");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "noText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue("messager.no");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "titleText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue("messager.title");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "errorTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue("messager.errorTitle");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} str
     * @return {?}
     */
    MessagerService.prototype.escapeHtml = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str === null || str === undefined) {
            return "";
        }
        return str
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/\"/g, "&quot;")
            .replace(/\'/g, "&#39;")
            .replace(/\//g, "&#x2F;");
    };
    /**
     * 显示信息提示框
     * @param msgtype 消息类别
     * @param message 提示消息一
     * @param opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param submsg 提示消息二级
     */
    /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    MessagerService.prototype.show = /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    function (msgtype, message, opts, submsg) {
        var _this = this;
        if (submsg === void 0) { submsg = ""; }
        if (document.activeElement) {
            ((/** @type {?} */ (document.activeElement))).blur();
        }
        /** @type {?} */
        var modalHeight = 180;
        /** @type {?} */
        var defaultOpts = {
            safeHtml: true,
            title: this.titleText,
            width: 390,
            height: modalHeight,
            showButtons: false,
            showMaxButton: false,
            resizable: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    _this.close();
                }),
            },
            class: "modal-message " +
                (msgtype ? "modal-message-type-" + msgtype : ""),
            showHeader: false,
        };
        defaultOpts = Object.assign({}, this.defaultMessagerConfig, defaultOpts);
        /** @type {?} */
        var extendOpts = {};
        switch (msgtype) {
            case "prompt":
                // 弹出对话类型
                extendOpts = { showHeader: true, modalHeight: 260 };
                break;
            case "error":
                // 错误
                extendOpts = {
                    title: this.errorTitle,
                    width: 446,
                    showHeader: true,
                    showMaxButton: true,
                    fitContent: true,
                };
                break;
            case "exception":
                extendOpts = {
                    safeHtml: false,
                    title: this.errorTitle,
                    width: 446,
                    showHeader: true,
                    fitContent: true,
                };
                break;
            default:
                // 默认其他
                extendOpts = { width: submsg ? 446 : 390, fitContent: true };
        }
        Object.assign(defaultOpts, extendOpts);
        if (opts) {
            Object.assign(defaultOpts, opts);
        }
        if (message && defaultOpts.safeHtml) {
            message = this.escapeHtml(message);
        }
        Object.assign(defaultOpts.initialState, {
            type: msgtype,
            message: message,
            msg: submsg,
            exception: opts && opts["exception"] ? opts["exception"] : null,
            showLines: opts && opts["showLines"] ? opts["showLines"] : 3,
            readonly: opts && opts["readonly"] ? opts["readonly"] : false,
        });
        if (defaultOpts["buttons"] && defaultOpts["buttons"].length) {
            if (!defaultOpts.initialState["buttons"] ||
                !defaultOpts.initialState["buttons"].length) {
                defaultOpts.initialState["buttons"] = defaultOpts["buttons"];
            }
        }
        /** @type {?} */
        var _modal = this.bsModalService.show(MessagerComponent, defaultOpts);
        // _modal.content.buttons = defaultOpts['buttons'] || [];
        this.confirmSubject = new Subject();
        if (this.modals.length > 0) {
            /** @type {?} */
            var modalContainerComponent = _modal.dialog;
            modalContainerComponent.instance.isShown = true;
            modalContainerComponent.instance.moveTo(15 * this.modals.length, 15 * this.modals.length);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            // 第1个按钮获取焦点
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var btnOk = _modal.content.btnOkEl
                    ? _modal.content.btnOkEl.nativeElement
                    : null;
                if (btnOk) {
                    btnOk["focus"]();
                }
                else {
                    /** @type {?} */
                    var btns = _modal.dialog.location.nativeElement.querySelectorAll(".modal-footer button");
                    if (btns.length) {
                        btns.item(0)["focus"]();
                    }
                }
                // const overlays = Array.from(document.body.querySelectorAll('body>div, body>farris-dialog>.farris-modal,body>.farris-modal')).filter(n => n).map(n => {
                //     return window.getComputedStyle(n).zIndex;
                // }).filter(n => n && n!== 'auto').map(n => {
                //     return parseInt(n, 10);
                // });
                /** @type {?} */
                var maxZindex = _this.commonUtils.getFloatingLayerIndex();
                _modal.dialog.location.nativeElement.style.zIndex = maxZindex;
            }));
        }));
        this.msgMgr(_modal);
        return _modal;
    };
    /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    MessagerService.prototype.msgMgr = /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    function (ref) {
        var _this = this;
        /** @type {?} */
        var id = this.bsModalService.getModalsCount() + 1000;
        if (this.modals.length === 0) {
            this.modals.push({ id: id, ref: ref });
        }
        else {
            if (!this.getModalById(id)) {
                this.modals.push({ id: id, ref: ref });
            }
            else {
                this.getModalById(id).ref = ref;
            }
        }
        /** @type {?} */
        var cmp = this.getModalCmp();
        cmp.closed.subscribe((/**
         * @param {?} level
         * @return {?}
         */
        function (level) {
            _this.removeMessager(id);
            _this.confirmSubject.unsubscribe();
        }));
        this.currentId = id;
    };
    /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.question = /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, okCallback, cancelCallback, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var questionDlg = this.show("question", message, {
            initialState: {
                okText: this.yesText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    questionDlg.close();
                    if (okCallback) {
                        okCallback();
                    }
                }),
                cancelText: this.noText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    questionDlg.close();
                    if (cancelCallback) {
                        cancelCallback();
                    }
                }),
            },
            fitContent: fitContent,
        }, msg);
        return questionDlg;
    };
    /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.question2 = /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (messager, btns, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        return this.show("question", messager, {
            initialState: {
                buttons: btns,
            },
            fitContent: fitContent,
        }, msg);
    };
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param title 标题
     * @param msg 信息
     * @param fitContent 自适应内容
     */
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    MessagerService.prototype.prompt = /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    function (title, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var promptSubject = new Subject();
        /** @type {?} */
        var dlg = this.show("prompt", msg, {
            title: title,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var mc = (/** @type {?} */ (dlg.content));
                    dlg.close();
                    promptSubject.next(mc.promptText.nativeElement.value);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    dlg.close();
                    promptSubject.next(false);
                }),
            },
            fitContent: fitContent,
            closed: (/**
             * @return {?}
             */
            function () {
                promptSubject.unsubscribe();
            }),
        }, msg);
        return promptSubject;
    };
    /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    MessagerService.prototype.prompt2 = /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    function (title, msg, opts) {
        var _this = this;
        /** @type {?} */
        var promptSubject = new Subject();
        /** @type {?} */
        var _opts = {
            showOkButton: true,
            showCloseButton: true,
            showFontSize: false,
            fontSize: 18,
            readonly: false,
            saveSize: false,
            closeWhenever: true,
        };
        if (!opts) {
            opts = _opts;
        }
        else {
            opts = Object.assign(_opts, opts);
        }
        /** @type {?} */
        var _dialogOpts = {
            title: title,
            initialState: {
                showOkButton: opts.showOkButton === undefined ? true : opts.showOkButton,
                showCancelButton: opts.showCancelButton === undefined
                    ? true
                    : opts.showCancelButton,
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var mc = (/** @type {?} */ (dlg.content));
                    /** @type {?} */
                    var val = mc.promptText.nativeElement.value;
                    if (opts.closeWhenever) {
                        dlg.close();
                        promptSubject.next(val);
                    }
                    else {
                        promptSubject.next({ val: val, dlg: dlg });
                    }
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    dlg.close();
                    promptSubject.next(false);
                }),
                showFontSize: opts.showFontSize,
                fontSize: opts.fontSize || 18,
                enableWordCount: !!opts.enableWordCount,
                countType: opts.countType || "length",
                maxLength: opts.maxLength,
                inputType: opts.inputType || "textarea",
                placeholder: opts.placeholder || "",
            },
            fitContent: false,
            showMaxButton: true,
            resizable: true,
            class: "",
            closed: (/**
             * @return {?}
             */
            function () {
                promptSubject.unsubscribe();
            }),
            opened: (/**
             * @return {?}
             */
            function () {
                if (opts.inputType !== "textarea") {
                    return;
                }
                else {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var textareaEle = dlg.content.promptText.nativeElement;
                        textareaEle.closest("section").style.padding = "15px";
                        textareaEle.style.resize = "none";
                        textareaEle.style.height = "100%";
                        if (opts.readonly) {
                            textareaEle.readOnly = true;
                        }
                    }));
                }
            }),
            beforeClose: (/**
             * @param {?} modalRef
             * @return {?}
             */
            function (modalRef) {
                if (opts.saveSize && !dlg.dialog.instance.isMax) {
                    /** @type {?} */
                    var data = {
                        fontSize: dlg.content.fontSize,
                        width: modalRef.config.width,
                        height: modalRef.config.height,
                    };
                    _this.saveTextAreaSizeInfo(data);
                }
                return of(true);
            }),
        };
        /** @type {?} */
        var dialogOpts = _dialogOpts;
        if (opts) {
            dialogOpts = Object.assign(dialogOpts, opts);
        }
        /** @type {?} */
        var dlg = this.show("prompt", msg, dialogOpts, msg);
        if (opts.inputType && dlg.content.promptText) {
            dlg.content.promptText.nativeElement.focus();
        }
        return promptSubject;
    };
    /**
     * @return {?}
     */
    MessagerService.prototype.getKeyString = /**
     * @return {?}
     */
    function () {
        // 一台终端共用一个配置
        // 保留最后一次的设置，
        // 保存窗口大小，字体大小
        return "IGIX-FARRIS-UI-TEXTAREA-ZOOM-SETTINGS";
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    MessagerService.prototype.saveTextAreaSizeInfo = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (window.localStorage) {
            /** @type {?} */
            var key = this.getKeyString();
            localStorage.setItem(key, JSON.stringify(data));
        }
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.confirm = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var confirmSubject = new Subject();
        /** @type {?} */
        var _msg = typeof msg === "number" ? null : msg;
        /** @type {?} */
        var confirmDlg = this.show("question", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    confirmDlg.close();
                    confirmSubject.next(true);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    confirmDlg.close();
                    confirmSubject.next(false);
                }),
            },
            fitContent: fitContent,
            closed: (/**
             * @return {?}
             */
            function () {
                confirmSubject.unsubscribe();
            }),
        }, _msg);
        if (msg && typeof msg === "number") {
            confirmDlg.dialog.location.nativeElement.style.zIndex = msg;
        }
        return confirmSubject.asObservable();
    };
    /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.info = /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, callback, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var infoDlg = this.show("info", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    infoDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent: fitContent,
        }, msg);
        return infoDlg;
    };
    /** 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     */
    /**
     * 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.success = /**
     * 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    function (message, msg, fitContent, callback) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var successDlg = this.show("success", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    successDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent: fitContent,
        }, msg);
        return successDlg;
    };
    /** 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     */
    /**
     * 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @param {?=} safeHtml
     * @return {?}
     */
    MessagerService.prototype.error = /**
     * 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @param {?=} safeHtml
     * @return {?}
     */
    function (message, msg, fitContent, callback, safeHtml) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        if (safeHtml === void 0) { safeHtml = true; }
        /** @type {?} */
        var errorDlg = this.show("error", message, {
            safeHtml: safeHtml,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    errorDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent: fitContent,
        }, msg);
        return errorDlg;
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.warning = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    function (message, msg, fitContent, callback) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var warningDlg = this.show("warning", message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    warningDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent: fitContent,
        }, msg);
        return warningDlg;
    };
    /**
     * @param {?} type
     * @param {?} title
     * @param {?=} message
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.showHtmlMsg = /**
     * @param {?} type
     * @param {?} title
     * @param {?=} message
     * @param {?=} callback
     * @return {?}
     */
    function (type, title, message, callback) {
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var msgDlg = this.show(type, title, {
            safeHtml: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    msgDlg.close();
                    if (callback) {
                        callback();
                    }
                }),
            },
            fitContent: true,
        }, message);
        return msgDlg;
    };
    /**
     * @private
     * @return {?}
     */
    MessagerService.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.modals.length) {
            /** @type {?} */
            var msgbox = this.getModalById(this.currentId);
            if (msgbox) {
                msgbox.ref.close();
            }
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    MessagerService.prototype.getModalById = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.modals.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id === id; }));
    };
    /**
     * @private
     * @return {?}
     */
    MessagerService.prototype.getModalCmp = /**
     * @private
     * @return {?}
     */
    function () {
        return this.bsModalService.getCurrentModalContainer().instance;
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    MessagerService.prototype.removeMessager = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.modals = this.modals.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id !== id; }));
        if (!this.modals.length) {
            this.currentId = -1;
        }
        else {
            this.currentId = this.modals[this.modals.length - 1].id;
        }
    };
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    MessagerService.prototype.copyToClipboard = /**
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        /** @type {?} */
        var windowRef = window;
        if (windowRef.clipboardData && windowRef.clipboardData.setData) {
            return windowRef.clipboardData.setData("Text", text);
        }
        else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            /** @type {?} */
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");
            }
            catch (ex) {
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return false;
    };
    /** 将请求异常信息体格式化为object */
    /**
     * 将请求异常信息体格式化为object
     * @private
     * @param {?} requestFailedInfo
     * @return {?}
     */
    MessagerService.prototype.getServerExceptionEntity = /**
     * 将请求异常信息体格式化为object
     * @private
     * @param {?} requestFailedInfo
     * @return {?}
     */
    function (requestFailedInfo) {
        if (requestFailedInfo.status == 404) {
            /** @type {?} */
            var serverExceptionEntity_1 = (/** @type {?} */ ({}));
            serverExceptionEntity_1.Message = (requestFailedInfo && requestFailedInfo.message) || 'Request Failed!';
            return serverExceptionEntity_1;
        }
        /** @type {?} */
        var serverExceptionEntity = requestFailedInfo && requestFailedInfo.error;
        if (serverExceptionEntity) {
            switch (typeof serverExceptionEntity) {
                case 'string':
                    return JSON.parse(serverExceptionEntity);
                case 'object':
                    return serverExceptionEntity;
                default:
                    console.error('不支持的请求异常数据格式：' + typeof serverExceptionEntity);
                    console.error(serverExceptionEntity);
                    return null;
            }
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} _error
     * @param {?=} opts
     * @return {?}
     */
    MessagerService.prototype.exceptionWithHttpInfo = /**
     * @param {?} _error
     * @param {?=} opts
     * @return {?}
     */
    function (_error, opts) {
        if (opts === void 0) { opts = { width: 440, height: 200, log: false }; }
        /** @type {?} */
        var error = this.getServerExceptionEntity(_error);
        ;
        this.exception(error, opts);
    };
    /**
     * @param {?} error
     * @param {?=} opts
     * @return {?}
     */
    MessagerService.prototype.exception = /**
     * @param {?} error
     * @param {?=} opts
     * @return {?}
     */
    function (error, opts) {
        var _this = this;
        if (opts === void 0) { opts = { width: 440, height: 200, log: false }; }
        /** @type {?} */
        var exceptionMsg = error.Message || "";
        /** @type {?} */
        var date = error.date || format(new Date(), 'yyyy-MM-dd HH:mm:ss');
        /** @type {?} */
        var localDate = date;
        // 发生时间
        /** @type {?} */
        var happenedTime = this.localeService.getValue('messager.exception.happend');
        // 详细信息
        /** @type {?} */
        var detailInfo = this.localeService.getValue('messager.exception.detail');
        /** @type {?} */
        var detail = error.Detail ||
            error.Message + "\r\n" + happenedTime + "\uFF1A" + localDate + "\r\n" + detailInfo + "\uFF1A" + error.innerMessage ||
            "";
        /** @type {?} */
        var innerMessage = error.innerMessage || null;
        /** @type {?} */
        var defaultOptions = { width: 440, height: 200, log: false };
        /** @type {?} */
        var exoptions = defaultOptions;
        if (opts) {
            exoptions = Object.assign({}, defaultOptions, opts);
        }
        /** @type {?} */
        var bsModalRef;
        /** @type {?} */
        var options = {
            showMaxButton: false,
            buttons: [
                {
                    text: this.localeService.getValue('messager.exception.roger'),
                    cls: "btn btn-primary btn-lg",
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        bsModalRef.close();
                    }),
                },
            ],
            // showHeader: false,
            width: exoptions.width,
            height: exoptions.height,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: this.localeService.getValue('messager.exception.copy'),
                    onClick: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var result = _this.copyToClipboard(detail);
                        /** @type {?} */
                        var text = result
                            ? _this.localeService.getValue('messager.exception.copySuccess')
                            : _this.localeService.getValue('messager.exception.copyFailed');
                        bsModalRef.content.showMiniNotify(text, 1500);
                    }),
                },
            },
        };
        if (exoptions.log) {
            console.error(error);
        }
        // this.displayError(error);
        bsModalRef = this.show("exception", exceptionMsg, options);
    };
    MessagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MessagerService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: Injector }
    ]; };
    return MessagerService;
}());
export { MessagerService };
if (false) {
    /** @type {?} */
    MessagerService.prototype.version;
    /** @type {?} */
    MessagerService.prototype.currentId;
    /** @type {?} */
    MessagerService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.defaultMessagerConfig;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.confirmSubject;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.bsModalService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbWVzc2FnZXIvIiwic291cmNlcyI6WyJsaWIvbWVzc2FnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBNEIsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RSxPQUFPLEVBR0gscUJBQXFCLEVBQ3JCLHVCQUF1QixHQUUxQixNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVoRDtJQVlJLHlCQUNZLGNBQThCLEVBQzlCLFFBQWtCO1FBRGxCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWjlCLFlBQU8sR0FBRyxRQUFRLENBQUM7UUFDbkIsY0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2YsV0FBTSxHQUFzQyxFQUFFLENBQUM7UUFDdkMsMEJBQXFCLEdBQW1CLElBQUksQ0FBQzs7WUFXM0MsTUFBTSxHQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUkscUJBQXFCO1FBQ3ZFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUN0QyxFQUFFLEVBQ0YscUJBQXFCLEVBQ3JCLE1BQU0sQ0FDVCxDQUFD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YUFBYSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQztvQkFDNUQsT0FBTzs7OztvQkFBRSxVQUFDLENBQUM7OzRCQUNELE1BQU0sR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQzs7NEJBQ3JDLElBQUksR0FBRyxNQUFNOzRCQUNmLENBQUMsQ0FBQyxLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FBQzs0QkFDL0QsQ0FBQyxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLCtCQUErQixDQUFDO3dCQUNsRSxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ2xELENBQUMsQ0FBQTtpQkFDSjthQUNKO1NBQ0o7UUFDRCxJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsNEJBQTRCO1FBQzVCLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUNsQixXQUFXLEVBQ1gsWUFBWSxFQUNaLE9BQU8sQ0FDVixDQUFDO0lBQ04sQ0FBQzs7Z0JBcHVCSixVQUFVOzs7O2dCQWRGLGNBQWM7Z0JBRkYsUUFBUTs7SUFxdkI3QixzQkFBQztDQUFBLEFBcnVCRCxJQXF1QkM7U0FwdUJZLGVBQWU7OztJQUN4QixrQ0FBbUI7O0lBQ25CLG9DQUFlOztJQUNmLGlDQUErQzs7Ozs7SUFDL0MsZ0RBQXFEOzs7OztJQUVyRCx5Q0FBdUI7Ozs7O0lBQ3ZCLGlDQUF1Qjs7Ozs7SUFFdkIsd0NBQXFDOzs7OztJQUNyQyxzQ0FBZ0M7Ozs7O0lBRTVCLHlDQUFzQzs7Ozs7SUFDdEMsbUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xNVxyXG4gKiBARGF0ZTogMjAxOS0wNC0wMiAxMTo0ODowOFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTI2IDE2OjM4OjM0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE5nWm9uZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UsIEJzTW9kYWxSZWYsIERpYWxvZ0J1dHRvbiB9IGZyb20gXCJAZmFycmlzL3VpLW1vZGFsXCI7XHJcbmltcG9ydCB7XHJcbiAgICBIdHRwUmVxdWVzdEZhaWxkSW5mbyxcclxuICAgIE1lc3NhZ2VyQ29uZmlnLFxyXG4gICAgTWVzc2FnZXJEZWZhdWx0Q29uZmlnLFxyXG4gICAgTUVTU0FHRVJfREVGQVVMVF9DT05GSUcsXHJcbiAgICBTZXJ2ZXJFeGNlcHRpb25FbnRpdHksXHJcbn0gZnJvbSBcIi4vbWVzc2FnZXIuY29uZmlnXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VyQ29tcG9uZW50IH0gZnJvbSBcIi4vbWVzc2FnZXIuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy91aS1sb2NhbGVcIjtcclxuaW1wb3J0IHsgdW5lc2NhcGVJZGVudGlmaWVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvbXBpbGVyXCI7XHJcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gXCJkYXRlLWZuc1wiO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gXCJAZmFycmlzL3VpLWNvbW1vblwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZXJTZXJ2aWNlIHtcclxuICAgIHZlcnNpb24gPSBcIjAuMC4xNVwiO1xyXG4gICAgY3VycmVudElkID0gLTE7XHJcbiAgICBtb2RhbHM6IHsgaWQ6IG51bWJlcjsgcmVmOiBCc01vZGFsUmVmIH1bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0TWVzc2FnZXJDb25maWc6IE1lc3NhZ2VyQ29uZmlnID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGNvbmZpcm1TdWJqZWN0O1xyXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZTtcclxuXHJcbiAgICBwcml2YXRlIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGNvbW1vblV0aWxzOiBDb21tb25VdGlsc1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBic01vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9XHJcbiAgICAgICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KE1FU1NBR0VSX0RFRkFVTFRfQ09ORklHKSB8fCBNZXNzYWdlckRlZmF1bHRDb25maWc7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0TWVzc2FnZXJDb25maWcgPSBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgTWVzc2FnZXJEZWZhdWx0Q29uZmlnLFxyXG4gICAgICAgICAgICBjb25maWdcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubmdab25lID0gdGhpcy5pbmplY3Rvci5nZXQoTmdab25lKTtcclxuICAgICAgICB0aGlzLmxvY2FsZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGVTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNvbW1vblV0aWxzID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tbW9uVXRpbHMsIG51bGwpO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9rVGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwibWVzc2FnZXIub2tcIik7XHJcbiAgICB9XHJcbiAgICBnZXQgY2FuY2VsVGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwibWVzc2FnZXIuY2FuY2VsXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHllc1RleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcIm1lc3NhZ2VyLnllc1wiKTtcclxuICAgIH1cclxuICAgIGdldCBub1RleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcIm1lc3NhZ2VyLm5vXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRpdGxlVGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwibWVzc2FnZXIudGl0bGVcIik7XHJcbiAgICB9XHJcbiAgICBnZXQgZXJyb3JUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwibWVzc2FnZXIuZXJyb3JUaXRsZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBlc2NhcGVIdG1sKHN0cikge1xyXG4gICAgICAgIGlmIChzdHIgPT09IG51bGwgfHwgc3RyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHJcclxuICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvPC9nLCBcIiZsdDtcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFwiL2csIFwiJnF1b3Q7XCIpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCcvZywgXCImIzM5O1wiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiJiN4MkY7XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pi+56S65L+h5oGv5o+Q56S65qGGXHJcbiAgICAgKiBAcGFyYW0gbXNndHlwZSDmtojmga/nsbvliKtcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIOaPkOekuua2iOaBr+S4gFxyXG4gICAgICogQHBhcmFtIG9wdHMg5Y+C5pWwIOaPkOS+m+WxnuaApyBmaXRDb250ZW50OnRydWXmlK/mjIHoh6rliqjpgILlupTlrr3luqZcclxuICAgICAqIEBwYXJhbSBzdWJtc2cg5o+Q56S65raI5oGv5LqM57qnXHJcbiAgICAgKi9cclxuICAgIHNob3cobXNndHlwZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIG9wdHM/OiB7fSwgc3VibXNnID0gXCJcIikge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50IGFzIGFueSkuYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2RhbEhlaWdodCA9IDE4MDtcclxuICAgICAgICBsZXQgZGVmYXVsdE9wdHMgPSB7XHJcbiAgICAgICAgICAgIHNhZmVIdG1sOiB0cnVlLFxyXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZVRleHQsXHJcbiAgICAgICAgICAgIHdpZHRoOiAzOTAsXHJcbiAgICAgICAgICAgIGhlaWdodDogbW9kYWxIZWlnaHQsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgIG9rSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xhc3M6XHJcbiAgICAgICAgICAgICAgICBcIm1vZGFsLW1lc3NhZ2UgXCIgK1xyXG4gICAgICAgICAgICAgICAgKG1zZ3R5cGUgPyBcIm1vZGFsLW1lc3NhZ2UtdHlwZS1cIiArIG1zZ3R5cGUgOiBcIlwiKSxcclxuICAgICAgICAgICAgc2hvd0hlYWRlcjogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBkZWZhdWx0T3B0cyA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRNZXNzYWdlckNvbmZpZyxcclxuICAgICAgICAgICAgZGVmYXVsdE9wdHNcclxuICAgICAgICApO1xyXG4gICAgICAgIGxldCBleHRlbmRPcHRzID0ge307XHJcblxyXG4gICAgICAgIHN3aXRjaCAobXNndHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwicHJvbXB0XCI6XHJcbiAgICAgICAgICAgICAgICAvLyDlvLnlh7rlr7nor53nsbvlnotcclxuICAgICAgICAgICAgICAgIGV4dGVuZE9wdHMgPSB7IHNob3dIZWFkZXI6IHRydWUsIG1vZGFsSGVpZ2h0OiAyNjAgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcclxuICAgICAgICAgICAgICAgIC8vIOmUmeivr1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kT3B0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5lcnJvclRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0NDYsXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0hlYWRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBzaG93TWF4QnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpdENvbnRlbnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJleGNlcHRpb25cIjpcclxuICAgICAgICAgICAgICAgIGV4dGVuZE9wdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2FmZUh0bWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLmVycm9yVGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQ0NixcclxuICAgICAgICAgICAgICAgICAgICBzaG93SGVhZGVyOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpdENvbnRlbnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAvLyDpu5jorqTlhbbku5ZcclxuICAgICAgICAgICAgICAgIGV4dGVuZE9wdHMgPSB7IHdpZHRoOiBzdWJtc2cgPyA0NDYgOiAzOTAsIGZpdENvbnRlbnQ6IHRydWUgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihkZWZhdWx0T3B0cywgZXh0ZW5kT3B0cyk7XHJcbiAgICAgICAgaWYgKG9wdHMpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkZWZhdWx0T3B0cywgb3B0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobWVzc2FnZSAmJiBkZWZhdWx0T3B0cy5zYWZlSHRtbCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gdGhpcy5lc2NhcGVIdG1sKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihkZWZhdWx0T3B0cy5pbml0aWFsU3RhdGUsIHtcclxuICAgICAgICAgICAgdHlwZTogbXNndHlwZSxcclxuICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgbXNnOiBzdWJtc2csXHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbjogb3B0cyAmJiBvcHRzW1wiZXhjZXB0aW9uXCJdID8gb3B0c1tcImV4Y2VwdGlvblwiXSA6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3dMaW5lczogb3B0cyAmJiBvcHRzW1wic2hvd0xpbmVzXCJdID8gb3B0c1tcInNob3dMaW5lc1wiXSA6IDMsXHJcbiAgICAgICAgICAgIHJlYWRvbmx5OiBvcHRzICYmIG9wdHNbXCJyZWFkb25seVwiXSA/IG9wdHNbXCJyZWFkb25seVwiXSA6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoZGVmYXVsdE9wdHNbXCJidXR0b25zXCJdICYmIGRlZmF1bHRPcHRzW1wiYnV0dG9uc1wiXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgIWRlZmF1bHRPcHRzLmluaXRpYWxTdGF0ZVtcImJ1dHRvbnNcIl0gfHxcclxuICAgICAgICAgICAgICAgICFkZWZhdWx0T3B0cy5pbml0aWFsU3RhdGVbXCJidXR0b25zXCJdLmxlbmd0aFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRzLmluaXRpYWxTdGF0ZVtcImJ1dHRvbnNcIl0gPSBkZWZhdWx0T3B0c1tcImJ1dHRvbnNcIl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgX21vZGFsID0gdGhpcy5ic01vZGFsU2VydmljZS5zaG93KE1lc3NhZ2VyQ29tcG9uZW50LCBkZWZhdWx0T3B0cyk7XHJcbiAgICAgICAgLy8gX21vZGFsLmNvbnRlbnQuYnV0dG9ucyA9IGRlZmF1bHRPcHRzWydidXR0b25zJ10gfHwgW107XHJcbiAgICAgICAgdGhpcy5jb25maXJtU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kYWxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kYWxDb250YWluZXJDb21wb25lbnQgPSBfbW9kYWwuZGlhbG9nO1xyXG4gICAgICAgICAgICBtb2RhbENvbnRhaW5lckNvbXBvbmVudC5pbnN0YW5jZS5pc1Nob3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgbW9kYWxDb250YWluZXJDb21wb25lbnQuaW5zdGFuY2UubW92ZVRvKFxyXG4gICAgICAgICAgICAgICAgMTUgKiB0aGlzLm1vZGFscy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAxNSAqIHRoaXMubW9kYWxzLmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDnrKwx5Liq5oyJ6ZKu6I635Y+W54Sm54K5XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnRuT2sgPSBfbW9kYWwuY29udGVudC5idG5Pa0VsXHJcbiAgICAgICAgICAgICAgICAgICAgPyBfbW9kYWwuY29udGVudC5idG5Pa0VsLm5hdGl2ZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnRuT2spIHtcclxuICAgICAgICAgICAgICAgICAgICBidG5Pa1tcImZvY3VzXCJdKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ0bnMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbW9kYWwuZGlhbG9nLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLm1vZGFsLWZvb3RlciBidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidG5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5zLml0ZW0oMClbXCJmb2N1c1wiXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBvdmVybGF5cyA9IEFycmF5LmZyb20oZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCdib2R5PmRpdiwgYm9keT5mYXJyaXMtZGlhbG9nPi5mYXJyaXMtbW9kYWwsYm9keT4uZmFycmlzLW1vZGFsJykpLmZpbHRlcihuID0+IG4pLm1hcChuID0+IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUobikuekluZGV4O1xyXG4gICAgICAgICAgICAgICAgLy8gfSkuZmlsdGVyKG4gPT4gbiAmJiBuIT09ICdhdXRvJykubWFwKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiBwYXJzZUludChuLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1heFppbmRleCA9IHRoaXMuY29tbW9uVXRpbHMuZ2V0RmxvYXRpbmdMYXllckluZGV4KCk7XHJcbiAgICAgICAgICAgICAgICBfbW9kYWwuZGlhbG9nLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQuc3R5bGUuekluZGV4ID0gbWF4WmluZGV4O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tc2dNZ3IoX21vZGFsKTtcclxuICAgICAgICByZXR1cm4gX21vZGFsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbXNnTWdyKHJlZjogQnNNb2RhbFJlZikge1xyXG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5ic01vZGFsU2VydmljZS5nZXRNb2RhbHNDb3VudCgpICsgMTAwMDtcclxuICAgICAgICBpZiAodGhpcy5tb2RhbHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxzLnB1c2goeyBpZCwgcmVmIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5nZXRNb2RhbEJ5SWQoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFscy5wdXNoKHsgaWQsIHJlZiB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TW9kYWxCeUlkKGlkKS5yZWYgPSByZWY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNtcCA9IHRoaXMuZ2V0TW9kYWxDbXAoKTtcclxuXHJcbiAgICAgICAgY21wLmNsb3NlZC5zdWJzY3JpYmUoKGxldmVsOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVNZXNzYWdlcihpZCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlybVN1YmplY3QudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50SWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICBxdWVzdGlvbihcclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgICAgICAgb2tDYWxsYmFjazogKCkgPT4gdm9pZCxcclxuICAgICAgICBjYW5jZWxDYWxsYmFjaz86ICgpID0+IHZvaWQsXHJcbiAgICAgICAgbXNnPzogc3RyaW5nLFxyXG4gICAgICAgIGZpdENvbnRlbnQgPSB0cnVlXHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCBxdWVzdGlvbkRsZyA9IHRoaXMuc2hvdyhcclxuICAgICAgICAgICAgXCJxdWVzdGlvblwiLFxyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBva1RleHQ6IHRoaXMueWVzVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbkRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2tDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxUZXh0OiB0aGlzLm5vVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25EbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmNlbENhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmaXRDb250ZW50LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtc2dcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbkRsZztcclxuICAgIH1cclxuXHJcbiAgICBxdWVzdGlvbjIoXHJcbiAgICAgICAgbWVzc2FnZXI6IHN0cmluZyxcclxuICAgICAgICBidG5zOiBEaWFsb2dCdXR0b25bXSxcclxuICAgICAgICBtc2c/OiBzdHJpbmcsXHJcbiAgICAgICAgZml0Q29udGVudCA9IHRydWVcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNob3coXHJcbiAgICAgICAgICAgIFwicXVlc3Rpb25cIixcclxuICAgICAgICAgICAgbWVzc2FnZXIsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IGJ0bnMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZml0Q29udGVudCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbXNnXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogMjAyMOW5tDPmnIg35pel5Zug5Li6dGV4dGFyZWHpq5jluqblnKjkuI3lkIzmtY/op4jlmajkuIvkuI3kuIDmoLfvvIzlm7rlrprpq5jluqblj6/og73kvJrlh7rnjrDmu5rliqjmnaFcclxuICAgICAqIEBwYXJhbSB0aXRsZSDmoIfpophcclxuICAgICAqIEBwYXJhbSBtc2cg5L+h5oGvXHJcbiAgICAgKiBAcGFyYW0gZml0Q29udGVudCDoh6rpgILlupTlhoXlrrlcclxuICAgICAqL1xyXG4gICAgcHJvbXB0KHRpdGxlOiBzdHJpbmcsIG1zZz86IHN0cmluZywgZml0Q29udGVudCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCBwcm9tcHRTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuICAgICAgICBjb25zdCBkbGcgPSB0aGlzLnNob3coXHJcbiAgICAgICAgICAgIFwicHJvbXB0XCIsXHJcbiAgICAgICAgICAgIG1zZyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBva1RleHQ6IHRoaXMub2tUZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9rSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1jID0gZGxnLmNvbnRlbnQgYXMgTWVzc2FnZXJDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9tcHRTdWJqZWN0Lm5leHQobWMucHJvbXB0VGV4dC5uYXRpdmVFbGVtZW50LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ6IHRoaXMuY2FuY2VsVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmaXRDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgY2xvc2VkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0U3ViamVjdC51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbXNnXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb21wdFN1YmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvbXB0Mih0aXRsZTogc3RyaW5nLCBtc2c/OiBzdHJpbmcsIG9wdHM/OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwcm9tcHRTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgICAgICAgY29uc3QgX29wdHMgPSB7XHJcbiAgICAgICAgICAgIHNob3dPa0J1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93Rm9udFNpemU6IGZhbHNlLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogMTgsXHJcbiAgICAgICAgICAgIHJlYWRvbmx5OiBmYWxzZSxcclxuICAgICAgICAgICAgc2F2ZVNpemU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjbG9zZVdoZW5ldmVyOiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFvcHRzKSB7XHJcbiAgICAgICAgICAgIG9wdHMgPSBfb3B0cztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRzID0gT2JqZWN0LmFzc2lnbihfb3B0cywgb3B0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBfZGlhbG9nT3B0cyA9IHtcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgc2hvd09rQnV0dG9uOlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuc2hvd09rQnV0dG9uID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5zaG93T2tCdXR0b24sXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuc2hvd0NhbmNlbEJ1dHRvbiA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wdHMuc2hvd0NhbmNlbEJ1dHRvbixcclxuICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy5va1RleHQsXHJcbiAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1jID0gZGxnLmNvbnRlbnQgYXMgTWVzc2FnZXJDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gbWMucHJvbXB0VGV4dC5uYXRpdmVFbGVtZW50LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsb3NlV2hlbmV2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QubmV4dCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QubmV4dCh7IHZhbCwgZGxnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxUZXh0OiB0aGlzLmNhbmNlbFRleHQsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9tcHRTdWJqZWN0Lm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNob3dGb250U2l6ZTogb3B0cy5zaG93Rm9udFNpemUsXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogb3B0cy5mb250U2l6ZSB8fCAxOCxcclxuICAgICAgICAgICAgICAgIGVuYWJsZVdvcmRDb3VudDogISFvcHRzLmVuYWJsZVdvcmRDb3VudCxcclxuICAgICAgICAgICAgICAgIGNvdW50VHlwZTogb3B0cy5jb3VudFR5cGUgfHwgXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgIG1heExlbmd0aDogb3B0cy5tYXhMZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBpbnB1dFR5cGU6IG9wdHMuaW5wdXRUeXBlIHx8IFwidGV4dGFyZWFcIixcclxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnBsYWNlaG9sZGVyIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpdENvbnRlbnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaG93TWF4QnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNpemFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNsYXNzOiBcIlwiLFxyXG4gICAgICAgICAgICBjbG9zZWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3BlbmVkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5pbnB1dFR5cGUgIT09IFwidGV4dGFyZWFcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhRWxlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRsZy5jb250ZW50LnByb21wdFRleHQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWFFbGUuY2xvc2VzdChcInNlY3Rpb25cIikuc3R5bGUucGFkZGluZyA9IFwiMTVweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYUVsZS5zdHlsZS5yZXNpemUgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWFFbGUuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZWFkb25seSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWFFbGUucmVhZE9ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJlZm9yZUNsb3NlOiAobW9kYWxSZWY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc2F2ZVNpemUgJiYgIWRsZy5kaWFsb2cuaW5zdGFuY2UuaXNNYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogZGxnLmNvbnRlbnQuZm9udFNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBtb2RhbFJlZi5jb25maWcud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogbW9kYWxSZWYuY29uZmlnLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVRleHRBcmVhU2l6ZUluZm8oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgZGlhbG9nT3B0cyA9IF9kaWFsb2dPcHRzO1xyXG4gICAgICAgIGlmIChvcHRzKSB7XHJcbiAgICAgICAgICAgIGRpYWxvZ09wdHMgPSBPYmplY3QuYXNzaWduKGRpYWxvZ09wdHMsIG9wdHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGxnID0gdGhpcy5zaG93KFwicHJvbXB0XCIsIG1zZywgZGlhbG9nT3B0cywgbXNnKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdHMuaW5wdXRUeXBlICYmIGRsZy5jb250ZW50LnByb21wdFRleHQpIHtcclxuICAgICAgICAgICAgZGxnLmNvbnRlbnQucHJvbXB0VGV4dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcHJvbXB0U3ViamVjdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRLZXlTdHJpbmcoKSB7XHJcbiAgICAgICAgLy8g5LiA5Y+w57uI56uv5YWx55So5LiA5Liq6YWN572uXHJcbiAgICAgICAgLy8g5L+d55WZ5pyA5ZCO5LiA5qyh55qE6K6+572u77yMXHJcbiAgICAgICAgLy8g5L+d5a2Y56qX5Y+j5aSn5bCP77yM5a2X5L2T5aSn5bCPXHJcbiAgICAgICAgcmV0dXJuIFwiSUdJWC1GQVJSSVMtVUktVEVYVEFSRUEtWk9PTS1TRVRUSU5HU1wiO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2F2ZVRleHRBcmVhU2l6ZUluZm8oZGF0YSkge1xyXG4gICAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0S2V5U3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25maXJtKG1lc3NhZ2U6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIGNvbmZpcm0obWVzc2FnZTogc3RyaW5nLCBtc2c/OiBzdHJpbmcgfCBudW1iZXIsIGZpdENvbnRlbnQ/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgY29uZmlybShtZXNzYWdlOiBzdHJpbmcsIG1zZz86IHN0cmluZywgZml0Q29udGVudCA9IHRydWUpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpcm1TdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgICAgICAgY29uc3QgX21zZyA9IHR5cGVvZiBtc2cgPT09IFwibnVtYmVyXCIgPyBudWxsIDogbXNnO1xyXG4gICAgICAgIGNvbnN0IGNvbmZpcm1EbGcgPSB0aGlzLnNob3coXHJcbiAgICAgICAgICAgIFwicXVlc3Rpb25cIixcclxuICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtRGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1TdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxUZXh0OiB0aGlzLmNhbmNlbFRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1EbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybVN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmaXRDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgY2xvc2VkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybVN1YmplY3QudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9tc2dcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAobXNnICYmIHR5cGVvZiBtc2cgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgY29uZmlybURsZy5kaWFsb2cubG9jYXRpb24ubmF0aXZlRWxlbWVudC5zdHlsZS56SW5kZXggPSBtc2c7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29uZmlybVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5mbyhcclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgICAgICAgY2FsbGJhY2s/OiAoKSA9PiB2b2lkLFxyXG4gICAgICAgIG1zZz86IHN0cmluZyxcclxuICAgICAgICBmaXRDb250ZW50ID0gdHJ1ZVxyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc3QgaW5mb0RsZyA9IHRoaXMuc2hvdyhcclxuICAgICAgICAgICAgXCJpbmZvXCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy5va1RleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2tIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb0RsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZpdENvbnRlbnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1zZ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGluZm9EbGc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaTjeS9nOaIkOWKn+aPkOekuu+8jFxyXG4gICAgICogbWVzc2FnZTog5o+Q56S65L+h5oGvXHJcbiAgICAgKiBtc2c6IDLnuqfkv6Hmga9cclxuICAgICAqIGZpdENvdW50ZW50OiDpu5jorqTkuLp0cnVlXHJcbiAgICAgKiBjYWxsYmFjazog56Gu5a6a5LqL5Lu25Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHN1Y2Nlc3MoXHJcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgICAgIG1zZz86IHN0cmluZyxcclxuICAgICAgICBmaXRDb250ZW50ID0gdHJ1ZSxcclxuICAgICAgICBjYWxsYmFjazogKCkgPT4gdm9pZCA9IG51bGxcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NEbGcgPSB0aGlzLnNob3coXHJcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBva1RleHQ6IHRoaXMub2tUZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9rSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NEbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmaXRDb250ZW50LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtc2dcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gc3VjY2Vzc0RsZztcclxuICAgIH1cclxuICAgIC8qKiDmj5DnpLrplJnor6/kv6Hmga/vvIxcclxuICAgICAqIG1lc3NhZ2U6IOaPkOekuuS/oeaBr1xyXG4gICAgICogbXNnOiAy57qn5L+h5oGvXHJcbiAgICAgKiBmaXRDb3VudGVudDog6buY6K6k5Li6dHJ1ZVxyXG4gICAgICogY2FsbGJhY2s6IOehruWumuS6i+S7tuWbnuiwg1xyXG4gICAgICovXHJcbiAgICBlcnJvcihcclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgICAgICAgbXNnPzogc3RyaW5nLFxyXG4gICAgICAgIGZpdENvbnRlbnQgPSB0cnVlLFxyXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB2b2lkID0gbnVsbCxcclxuICAgICAgICBzYWZlSHRtbCA9IHRydWVcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRGxnID0gdGhpcy5zaG93KFxyXG4gICAgICAgICAgICBcImVycm9yXCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNhZmVIdG1sLFxyXG4gICAgICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZpdENvbnRlbnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1zZ1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBlcnJvckRsZztcclxuICAgIH1cclxuXHJcbiAgICB3YXJuaW5nKFxyXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcclxuICAgICAgICBtc2c/OiBzdHJpbmcsXHJcbiAgICAgICAgZml0Q29udGVudCA9IHRydWUsXHJcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHZvaWQgPSBudWxsXHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCB3YXJuaW5nRGxnID0gdGhpcy5zaG93KFxyXG4gICAgICAgICAgICBcIndhcm5pbmdcIixcclxuICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nRGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZml0Q29udGVudCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbXNnXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gd2FybmluZ0RsZztcclxuICAgIH1cclxuXHJcbiAgICBzaG93SHRtbE1zZyhcclxuICAgICAgICB0eXBlOiBcIndhcm5pbmdcIiB8IFwiaW5mb1wiIHwgXCJlcnJvclwiIHwgXCJzdWNjZXNzXCIsXHJcbiAgICAgICAgdGl0bGU6IHN0cmluZyxcclxuICAgICAgICBtZXNzYWdlPzogc3RyaW5nLFxyXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB2b2lkID0gbnVsbFxyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc3QgbXNnRGxnID0gdGhpcy5zaG93KFxyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2FmZUh0bWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2dEbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmaXRDb250ZW50OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gbXNnRGxnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kYWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBtc2dib3ggPSB0aGlzLmdldE1vZGFsQnlJZCh0aGlzLmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICAgIGlmIChtc2dib3gpIHtcclxuICAgICAgICAgICAgICAgIG1zZ2JveC5yZWYuY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE1vZGFsQnlJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kYWxzLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE1vZGFsQ21wKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJzTW9kYWxTZXJ2aWNlLmdldEN1cnJlbnRNb2RhbENvbnRhaW5lcigpLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlTWVzc2FnZXIoaWQpIHtcclxuICAgICAgICB0aGlzLm1vZGFscyA9IHRoaXMubW9kYWxzLmZpbHRlcigobikgPT4gbi5pZCAhPT0gaWQpO1xyXG4gICAgICAgIGlmICghdGhpcy5tb2RhbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudElkID0gLTE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SWQgPSB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXS5pZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb3B5VG9DbGlwYm9hcmQodGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHdpbmRvd1JlZjogYW55ID0gd2luZG93O1xyXG4gICAgICAgIGlmICh3aW5kb3dSZWYuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3dSZWYuY2xpcGJvYXJkRGF0YS5zZXREYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3dSZWYuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwiVGV4dFwiLCB0ZXh0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZCAmJiBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQoXCJjb3B5XCIpKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcclxuICAgICAgICAgICAgdGV4dGFyZWEudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7XHJcbiAgICAgICAgICAgIHRleHRhcmVhLnNlbGVjdCgpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGV4dGFyZWEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5bCG6K+35rGC5byC5bi45L+h5oGv5L2T5qC85byP5YyW5Li6b2JqZWN0ICovXHJcbiAgICBwcml2YXRlIGdldFNlcnZlckV4Y2VwdGlvbkVudGl0eShyZXF1ZXN0RmFpbGVkSW5mbzogSHR0cFJlcXVlc3RGYWlsZEluZm8pOiBTZXJ2ZXJFeGNlcHRpb25FbnRpdHkge1xyXG4gICAgICAgIGlmIChyZXF1ZXN0RmFpbGVkSW5mby5zdGF0dXMgPT0gNDA0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlckV4Y2VwdGlvbkVudGl0eSA9IHt9IGFzIFNlcnZlckV4Y2VwdGlvbkVudGl0eTtcclxuICAgICAgICAgICAgc2VydmVyRXhjZXB0aW9uRW50aXR5Lk1lc3NhZ2UgPSAocmVxdWVzdEZhaWxlZEluZm8gJiYgcmVxdWVzdEZhaWxlZEluZm8ubWVzc2FnZSkgfHwgJ1JlcXVlc3QgRmFpbGVkISc7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJFeGNlcHRpb25FbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNlcnZlckV4Y2VwdGlvbkVudGl0eSA9IHJlcXVlc3RGYWlsZWRJbmZvICYmIHJlcXVlc3RGYWlsZWRJbmZvLmVycm9yO1xyXG4gICAgICAgIGlmIChzZXJ2ZXJFeGNlcHRpb25FbnRpdHkpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2Ygc2VydmVyRXhjZXB0aW9uRW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHNlcnZlckV4Y2VwdGlvbkVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJFeGNlcHRpb25FbnRpdHk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+S4jeaUr+aMgeeahOivt+axguW8guW4uOaVsOaNruagvOW8j++8micgKyB0eXBlb2Ygc2VydmVyRXhjZXB0aW9uRW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHNlcnZlckV4Y2VwdGlvbkVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhjZXB0aW9uV2l0aEh0dHBJbmZvKF9lcnJvcjogSHR0cFJlcXVlc3RGYWlsZEluZm8sIG9wdHMgPSB7IHdpZHRoOiA0NDAsIGhlaWdodDogMjAwLCBsb2c6IGZhbHNlIH0pIHtcclxuICAgICAgICBsZXQgZXJyb3I6IFNlcnZlckV4Y2VwdGlvbkVudGl0eSA9ICB0aGlzLmdldFNlcnZlckV4Y2VwdGlvbkVudGl0eShfZXJyb3IpOztcclxuICAgICAgICB0aGlzLmV4Y2VwdGlvbihlcnJvciwgb3B0cylcclxuICAgIH1cclxuXHJcbiAgICBleGNlcHRpb24oZXJyb3I6IFNlcnZlckV4Y2VwdGlvbkVudGl0eSwgb3B0cyA9IHsgd2lkdGg6IDQ0MCwgaGVpZ2h0OiAyMDAsIGxvZzogZmFsc2UgfSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGV4Y2VwdGlvbk1zZyA9IGVycm9yLk1lc3NhZ2UgfHwgXCJcIjtcclxuICAgICAgICBjb25zdCBkYXRlID0gZXJyb3IuZGF0ZSB8fCBmb3JtYXQobmV3IERhdGUoKSwgJ3l5eXktTU0tZGQgSEg6bW06c3MnKVxyXG4gICAgICAgIGNvbnN0IGxvY2FsRGF0ZSA9IGRhdGU7XHJcbiAgICAgICAgLy8g5Y+R55Sf5pe26Ze0XHJcbiAgICAgICAgY29uc3QgaGFwcGVuZWRUaW1lID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdtZXNzYWdlci5leGNlcHRpb24uaGFwcGVuZCcpO1xyXG4gICAgICAgIC8vIOivpue7huS/oeaBr1xyXG4gICAgICAgIGNvbnN0IGRldGFpbEluZm8gPSB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ21lc3NhZ2VyLmV4Y2VwdGlvbi5kZXRhaWwnKTtcclxuICAgICAgICBjb25zdCBkZXRhaWwgPVxyXG4gICAgICAgICAgICBlcnJvci5EZXRhaWwgfHxcclxuICAgICAgICAgICAgYCR7ZXJyb3IuTWVzc2FnZX1cXHJcXG4ke2hhcHBlbmVkVGltZX3vvJoke2xvY2FsRGF0ZX1cXHJcXG4ke2RldGFpbEluZm9977yaJHtlcnJvci5pbm5lck1lc3NhZ2V9YCB8fFxyXG4gICAgICAgICAgICBcIlwiO1xyXG5cclxuICAgICAgICBjb25zdCBpbm5lck1lc3NhZ2UgPSBlcnJvci5pbm5lck1lc3NhZ2UgfHwgbnVsbDtcclxuXHJcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7IHdpZHRoOiA0NDAsIGhlaWdodDogMjAwLCBsb2c6IGZhbHNlIH07XHJcbiAgICAgICAgbGV0IGV4b3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xyXG4gICAgICAgIGlmIChvcHRzKSB7XHJcbiAgICAgICAgICAgIGV4b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBic01vZGFsUmVmOiBCc01vZGFsUmVmO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNob3dNYXhCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICBidXR0b25zOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdtZXNzYWdlci5leGNlcHRpb24ucm9nZXInKSxcclxuICAgICAgICAgICAgICAgICAgICBjbHM6IFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBic01vZGFsUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIC8vIHNob3dIZWFkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICB3aWR0aDogZXhvcHRpb25zLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGV4b3B0aW9ucy5oZWlnaHQsXHJcbiAgICAgICAgICAgIHNhZmVIdG1sOiBmYWxzZSxcclxuICAgICAgICAgICAgZXhjZXB0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiBsb2NhbERhdGUsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBpbm5lck1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICBjb3B5QnV0dG9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdtZXNzYWdlci5leGNlcHRpb24uY29weScpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29weVRvQ2xpcGJvYXJkKGRldGFpbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSByZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdtZXNzYWdlci5leGNlcHRpb24uY29weVN1Y2Nlc3MnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ21lc3NhZ2VyLmV4Y2VwdGlvbi5jb3B5RmFpbGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJzTW9kYWxSZWYuY29udGVudC5zaG93TWluaU5vdGlmeSh0ZXh0LCAxNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChleG9wdGlvbnMubG9nKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLmRpc3BsYXlFcnJvcihlcnJvcik7XHJcbiAgICAgICAgYnNNb2RhbFJlZiA9IHRoaXMuc2hvdyhcclxuICAgICAgICAgICAgXCJleGNlcHRpb25cIixcclxuICAgICAgICAgICAgZXhjZXB0aW9uTXNnLFxyXG4gICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=