/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, NgZone } from '@angular/core';
var FarrisDefaultFocusDirective = /** @class */ (function () {
    function FarrisDefaultFocusDirective(el, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
    }
    /**
     * @return {?}
     */
    FarrisDefaultFocusDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FarrisDefaultFocusDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.button.defaultFocus) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.el.nativeElement.focus();
                }));
            }));
        }
    };
    FarrisDefaultFocusDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-default-focus]'
                },] }
    ];
    /** @nocollapse */
    FarrisDefaultFocusDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    FarrisDefaultFocusDirective.propDecorators = {
        button: [{ type: Input, args: ['farris-default-focus',] }]
    };
    return FarrisDefaultFocusDirective;
}());
export { FarrisDefaultFocusDirective };
if (false) {
    /** @type {?} */
    FarrisDefaultFocusDirective.prototype.button;
    /**
     * @type {?}
     * @private
     */
    FarrisDefaultFocusDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisDefaultFocusDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWRlZmF1bHQtZm9jdXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1tZXNzYWdlci8iLCJzb3VyY2VzIjpbImxpYi9mYXJyaXMtZGVmYXVsdC1mb2N1cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBeUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVGO0lBTUkscUNBQW9CLEVBQWMsRUFBVSxNQUFjO1FBQXRDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUksQ0FBQzs7OztJQUUvRCw4Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQscURBQWU7OztJQUFmO1FBQUEsaUJBUUM7UUFQRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7WUFBQztnQkFDMUIsVUFBVTs7O2dCQUFDO29CQUNQLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNsQyxDQUFDLEVBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOztnQkFuQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0I7aUJBQ3JDOzs7O2dCQUwwQixVQUFVO2dCQUF5QixNQUFNOzs7eUJBTy9ELEtBQUssU0FBQyxzQkFBc0I7O0lBZ0JqQyxrQ0FBQztDQUFBLEFBcEJELElBb0JDO1NBakJZLDJCQUEyQjs7O0lBQ3BDLDZDQUFvRDs7Ozs7SUFFeEMseUNBQXNCOzs7OztJQUFFLDZDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERpYWxvZ0J1dHRvbiB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmYXJyaXMtZGVmYXVsdC1mb2N1c10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNEZWZhdWx0Rm9jdXNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gICAgQElucHV0KCdmYXJyaXMtZGVmYXVsdC1mb2N1cycpIGJ1dHRvbjogRGlhbG9nQnV0dG9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5idXR0b24uZGVmYXVsdEZvY3VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=