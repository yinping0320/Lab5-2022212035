import { Injector } from "@angular/core";
import { Subject, Observable } from "rxjs";
import { BsModalService, BsModalRef, DialogButton } from "@farris/ui-modal";
import { HttpRequestFaildInfo, ServerExceptionEntity } from "./messager.config";
export declare class MessagerService {
    private bsModalService;
    private injector;
    version: string;
    currentId: number;
    modals: {
        id: number;
        ref: BsModalRef;
    }[];
    private defaultMessagerConfig;
    private confirmSubject;
    private ngZone;
    private localeService;
    private commonUtils;
    constructor(bsModalService: BsModalService, injector: Injector);
    readonly okText: any;
    readonly cancelText: any;
    readonly yesText: any;
    readonly noText: any;
    readonly titleText: any;
    readonly errorTitle: any;
    escapeHtml(str: any): any;
    /**
     * 显示信息提示框
     * @param msgtype 消息类别
     * @param message 提示消息一
     * @param opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param submsg 提示消息二级
     */
    show(msgtype: string, message: string, opts?: {}, submsg?: string): BsModalRef;
    private msgMgr;
    question(message: string, okCallback: () => void, cancelCallback?: () => void, msg?: string, fitContent?: boolean): BsModalRef;
    question2(messager: string, btns: DialogButton[], msg?: string, fitContent?: boolean): BsModalRef;
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param title 标题
     * @param msg 信息
     * @param fitContent 自适应内容
     */
    prompt(title: string, msg?: string, fitContent?: boolean): Subject<{}>;
    prompt2(title: string, msg?: string, opts?: any): Subject<{}>;
    getKeyString(): string;
    private saveTextAreaSizeInfo;
    confirm(message: string): Observable<any>;
    confirm(message: string, msg?: string | number, fitContent?: boolean): Observable<any>;
    info(message: string, callback?: () => void, msg?: string, fitContent?: boolean): BsModalRef;
    /** 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     */
    success(message: string, msg?: string, fitContent?: boolean, callback?: () => void): BsModalRef;
    /** 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     */
    error(message: string, msg?: string, fitContent?: boolean, callback?: () => void, safeHtml?: boolean): BsModalRef;
    warning(message: string, msg?: string, fitContent?: boolean, callback?: () => void): BsModalRef;
    showHtmlMsg(type: "warning" | "info" | "error" | "success", title: string, message?: string, callback?: () => void): BsModalRef;
    private close;
    private getModalById;
    private getModalCmp;
    private removeMessager;
    private copyToClipboard;
    /** 将请求异常信息体格式化为object */
    private getServerExceptionEntity;
    exceptionWithHttpInfo(_error: HttpRequestFaildInfo, opts?: {
        width: number;
        height: number;
        log: boolean;
    }): void;
    exception(error: ServerExceptionEntity, opts?: {
        width: number;
        height: number;
        log: boolean;
    }): void;
}
