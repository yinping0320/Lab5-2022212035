import { FilterRelation, Compare, ExpressValueType } from '@farris/ui-common/types';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FarrisButtonModule } from '@farris/ui-button';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
import { PositioningService } from '@farris/ui-modal/positioning';
import { InputGroupModule } from '@farris/ui-input-group';
import { FilterModule, FilterService } from '@farris/ui-filter-editor';
import { LookupModule } from '@farris/ui-lookup';
import { GridModule } from '@progress/kendo-angular-grid';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { FarrisCommonModule } from '@farris/ui-common';
import { CommonSharedModule, HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService, MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { TreeTableModule } from '@farris/ui-treetable';
import { ComboListModule } from '@farris/ui-combo-list';
import { Component, Output, EventEmitter, Input, Injectable, Injector, NgModule, ComponentFactoryResolver, ViewChild, HostBinding, NgZone, defineInjectable, inject, INJECTOR } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { LoadingModule, LoadingService } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/lookup-config-metadata.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookupConfigMetaDataComponent {
    constructor() {
        // metadataPath = '';
        this.HelpMetadata = 'HelpMetadata';
        this.isDeisgnerEnv = false;
        this.selectedMeta = new EventEmitter();
        this.closeModal = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectedMetadata(event) {
        this.selectedMeta.emit(event);
    }
    /**
     * @return {?}
     */
    closeModalEmitter() {
        this.closeModal.emit();
    }
}
LookupConfigMetaDataComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-lookup-config-metadata',
                template: "<div class=\"f-lookup-config-metadata\">\r\n    <div class=\"f-lookup-config-metadata-inner\">\r\n        <app-select-metadatart typeList=\"HelpMetadata\" (selectedMetadata)=\"selectedMetadata($event)\"\r\n            (closeModalEmitter)=\"closeModalEmitter()\">\r\n        </app-select-metadatart>\r\n    </div> \r\n</div>"
            }] }
];
/** @nocollapse */
LookupConfigMetaDataComponent.ctorParameters = () => [];
LookupConfigMetaDataComponent.propDecorators = {
    metadataPath: [{ type: Input }],
    isDeisgnerEnv: [{ type: Input }],
    selectedMeta: [{ type: Output, args: ['selectedMeta',] }],
    closeModal: [{ type: Output, args: ['closeModal',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConfigService {
    // httpUrl = 'http://10.25.11.67:5200';
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.getHelpConfig_Path = '/api/runtime/bcc/v1.0/helpconfig';
        this.saveHelpConfig_Path = '/api/runtime/bcc/v1.0/helpconfig';
    }
    /**
     * 通过configId获取回显数据
     * @param {?} configId 配置id
     * @return {?}
     */
    getHelpConfig(configId) {
        /** @type {?} */
        const url = this.getHelpConfig_Path + '/' + configId;
        return this.http.get(url);
        //return this.http.get('assets/data/helpconfig.json');
    }
    /**
     * 保存帮助配置
     * @param {?} params 参数
     * @return {?}
     */
    saveHelpConfig(params) {
        /** @type {?} */
        const saveUrl = this.saveHelpConfig_Path;
        /** @type {?} */
        const thisParams = Object.assign({}, params);
        thisParams.queryParam = JSON.stringify(thisParams.queryParam);
        //console.log('save',thisParams)
        return this.http.put(saveUrl, thisParams);
        //return this.http.get('assets/data/savehelpconfig.json');
    }
}
ConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ConfigService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ConfigService.ngInjectableDef = defineInjectable({ factory: function ConfigService_Factory() { return new ConfigService(inject(HttpClient)); }, token: ConfigService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/select-help-text-field/select-help-text-field.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectHelpTextFieldComponent {
    /**
     * @param {?} notifyService
     * @param {?} ngZone
     * @param {?} localeService
     */
    constructor(notifyService, ngZone, localeService) {
        this.notifyService = notifyService;
        this.ngZone = ngZone;
        this.localeService = localeService;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.helpId = '';
        this.class = 'd-flex f-utils-fill-flex-column h-100';
        this.modalConfig = {
            title: '字段选择器',
            width: 900,
            height: 500,
            showButtons: true,
            showMaxButton: false
        };
        // 树表数据
        this.helpTreeData = [];
        // 树表列配置
        this.treeCols = [{ field: 'name', title: '名称' }, { field: 'label', title: '编号' }, { field: 'bindingPath', title: '绑定字段' }];
        this.fieldName = '名称';
        this.fieldLabel = '编号';
        this.fieldTitle = '绑定字段';
        this.fieldError = '已绑定字段不存在！';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.fieldName = this.localeService.getValue('lookupConfig.name');
        this.fieldLabel = this.localeService.getValue('lookupConfig.code');
        this.fieldTitle = this.localeService.getValue('lookupConfig.bindingPath');
        this.fieldError = this.localeService.getValue('lookupConfig.fieldError');
        this.treeCols = [{ field: 'name', title: this.fieldName }, { field: 'label', title: this.fieldLabel }, { field: 'bindingPath', title: this.fieldTitle }];
        if (!this.schemaData) {
            return;
        }
        this.getHelpFields(this.schemaData);
    }
    /**
     * 获取帮助schema字段
     * @param {?} schema schema
     * @return {?}
     */
    getHelpFields(schema) {
        if (!schema || !schema.entities || schema.entities.length === 0) {
            return;
        }
        /** @type {?} */
        const mainTable = schema.entities[0];
        if (mainTable.type && mainTable.type.fields) {
            this.helpTreeData = this.assembleFields2Tree(mainTable.type.fields);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (!this.value) {
                    return;
                }
                try {
                    this.treeTable.selectNode(this.value);
                }
                catch (e) {
                    this.treeTable.clearSelections();
                    this.notifyService.error(this.fieldError);
                }
            }));
        }));
    }
    /**
     * schema字段集合组装成树
     * @param {?} fields schema字段集合
     * @return {?}
     */
    assembleFields2Tree(fields) {
        /** @type {?} */
        const treeData = [];
        fields.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            // 关联表字段 / UDT字段
            /** @type {?} */
            let children = [];
            if (element.type && element.type.fields && element.type.fields.length > 0) {
                children = this.assembleFields2Tree(element.type.fields);
            }
            // 适配旧的帮助元数据没有bindingPath属性
            if (!element.bindingPath) {
                element.bindingPath = element['parentPath'] ? element['parentPath'] + '.' + element.label : element.label;
            }
            treeData.push({
                data: element,
                children,
                expanded: true,
                selectable: children.length > 0 ? false : true
            });
        }));
        return treeData;
    }
    /**
     * 取消
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * 确定
     * @return {?}
     */
    clickConfirm() {
        if (!this.treeTable.selectedRow) {
            this.notifyService.warning('请选择字段');
            return;
        }
        /** @type {?} */
        const selectedData = this.treeTable.selectedRow.data;
        this.submitModal.emit({ value: selectedData.bindingPath, name: selectedData.name });
    }
}
SelectHelpTextFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-select-help-text-field',
                template: "<farris-treetable #treeTable [data]=\"helpTreeData\" [columns]=\"treeCols\" [idField]=\"'bindingPath'\" [fixedHeader]=\"true\"\r\n    [fit]=\"true\" [singleSelect]=\"true\" [showFilterBar]=\"false\" [resizableColumns]=\"true\"\r\n    [showCheckAll]=\"false\" [showCheckbox]=\"false\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n</farris-treetable>\r\n\r\n<ng-template #modalFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clickCancel()\">{{ 'lookupConfig.cancel' | locale }}</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"clickConfirm()\">{{ 'lookupConfig.sure' | locale }}</button>\r\n</ng-template>"
            }] }
];
/** @nocollapse */
SelectHelpTextFieldComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: NgZone },
    { type: LocaleService }
];
SelectHelpTextFieldComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    helpId: [{ type: Input }],
    schemaData: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['modalFooter',] }],
    class: [{ type: HostBinding, args: ['class',] }],
    treeTable: [{ type: ViewChild, args: ['treeTable',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-config.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookupConfigComponent {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} modalService
     * @param {?} configService
     * @param {?} http
     * @param {?} notifyService
     * @param {?} GSPService
     */
    constructor(cfr, injector, modalService, configService, http, notifyService, GSPService) {
        this.cfr = cfr;
        this.injector = injector;
        this.modalService = modalService;
        this.configService = configService;
        this.http = http;
        this.notifyService = notifyService;
        this.GSPService = GSPService;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.metaDataName = ''; //元数据显示name
        this.metaDataTextFieldCloumns = [];
        this.isDeisgnerEnv = false;
        this.readonly = false;
        this.filterConditions = []; //筛选初始值
        //筛选初始值
        this.filterColumns = []; //筛选项
        //提交的数据
        this.lookupConfigData = {
            configId: '',
            code: '',
            name: '',
            filter: [],
            // metadata:{}
            helpId: '',
            textField: '',
            loadDataType: '' //加载方式
        };
        this.configCode = '';
        this.configName = '';
        //帮助数据
        this.configData = {};
        this.placeholder = '选择表单元数据';
        this.selectTitle = '帮助元数据选择';
        this.fileNamePlaceholder = '选择帮助文本字段';
        this.selectFileNameTitle = '文本字段选择器';
        this.isTreeList = false;
        this.typeNumValues = [
            {
                value: "default",
                name: "默认"
            },
            {
                value: "loadall",
                name: "全部加载"
            },
            {
                value: "layerload",
                name: "分层加载"
            }
        ];
        this.localeService = this.injector.get(LocaleService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /**
         * 运行时根据configid获取元数据信息
         */
        // if(!this.isDeisgnerEnv && this.configId !== '' && typeof(this.configId) != "undefined"){
        //   this.GSPService.GetMetadataRT(this.configId).subscribe((data: any) => {
        //   //this.http.get('assets/data/lookupconfig.json').subscribe((data: any) => {
        //     if(data && data.content){
        //       const metadataObject = JSON.parse(data.content); 
        //       const metadataSchema = metadataObject.schema.main;
        //       if (!metadataSchema || !metadataSchema.entities || metadataSchema.entities.length === 0) {
        //           return;
        //       }
        //       const metadatamainTable = metadataSchema.entities[0];
        //       if (metadatamainTable.type && metadatamainTable.type.fields) {
        //           this.getPlainFields(metadatamainTable.type.fields);
        //       }
        //     }
        //   },
        //   error => {
        //     if(error.message){
        //       this.notifyService.error(error.message);
        //     }
        //   }
        //   )
        // }
        /**
         * 根据configid获取回显数据
         */
        if (this.configId !== '' && typeof (this.configId) != "undefined") {
            this.configService.getHelpConfig(this.configId).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data) {
                    this.configData = data;
                    this.configCode = data.code;
                    this.configName = data.name;
                    this.metaDataName = data.helpName;
                    this.lookupConfigData.helpId = data.helpId;
                    /** @type {?} */
                    const queryParams = JSON.parse(data.queryParam);
                    if (queryParams['filter'] && queryParams['filter']['filterConditions'] && queryParams['filter']['filterConditions'].length) {
                        this.filterConditions = queryParams['filter']['filterConditions'];
                    }
                    if (queryParams['loadTreeDataType']) {
                        this.loadDataType = queryParams['loadTreeDataType'];
                    }
                    if (queryParams['textField']) {
                        this.metaDataTextFieldValue = queryParams['textField'];
                    }
                    if (!this.isDeisgnerEnv && typeof (data.helpId) != "undefined") {
                        this.getMetadataRT(data.helpId);
                    }
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                if (error.message) {
                    this.notifyService.error(error.message);
                }
            }));
        }
        this.placeholder = this.localeService.getValue('lookupConfig.placeholder');
        this.selectTitle = this.localeService.getValue('lookupConfig.selectTitle');
        this.fileNamePlaceholder = this.localeService.getValue('lookupConfig.fileNamePlaceholder');
        this.selectFileNameTitle = this.localeService.getValue('lookupConfig.selectFileNameTitle');
        this.typeNumValues = [
            {
                value: "default",
                name: this.localeService.getValue('lookupConfig.loadTypeList.default')
            },
            {
                value: "loadall",
                name: this.localeService.getValue('lookupConfig.loadTypeList.all')
            },
            {
                value: "layerload",
                name: this.localeService.getValue('lookupConfig.loadTypeList.layer')
            }
        ];
    }
    /**
     * 运行时根据configid获取元数据信息
     * @param {?} helpId
     * @return {?}
     */
    getMetadataRT(helpId) {
        this.GSPService.GetMetadataRT(helpId).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            //this.http.get('assets/data/lookupconfig.json').subscribe((data: any) => {
            //console.log(data);
            this.metaDataTextFieldCloumns = [];
            if (data && data.content) {
                /** @type {?} */
                const metadataObject = JSON.parse(data.content);
                this.metaData = metadataObject;
                this.isTreeList = (metadataObject.displayType.toLowerCase() === 'treelist');
                /** @type {?} */
                const metadataSchema = metadataObject.schema.main;
                if (!metadataSchema || !metadataSchema.entities || metadataSchema.entities.length === 0) {
                    return;
                }
                /** @type {?} */
                const metadatamainTable = metadataSchema.entities[0];
                if (metadatamainTable.type && metadatamainTable.type.fields) {
                    this.getPlainFields(metadatamainTable.type.fields);
                    this.getTextField(metadatamainTable.type.fields);
                    if (this.metaDataTextFieldCloumns && this.metaDataTextFieldCloumns.length) {
                        /** @type {?} */
                        let textField = this.metaDataTextFieldCloumns.find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            return item.value.toLowerCase() == this.metaDataTextFieldValue.toLowerCase();
                        }));
                        this.metaDataTextField = textField ? textField.label : '';
                    }
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            if (error.message) {
                this.notifyService.error(error.message);
            }
        }));
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    getTextField(fields) {
        fields.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.metaDataTextFieldCloumns.push({
                label: element.name,
                value: element.path
            });
            if (element.type && element.type.fields && element.type.fields.length > 0) {
                this.getTextField(element.type.fields);
            }
        }));
    }
    /**
     * 获取元数据弹窗
     * @return {?}
     */
    getMetadata() {
        /** @type {?} */
        const metaDataFac = this.cfr.resolveComponentFactory(LookupConfigMetaDataComponent);
        /** @type {?} */
        const metaDataRef = metaDataFac.create(this.injector);
        metaDataRef.instance.metadataPath = this.metadataPath;
        // metaDataRef.instance.isDeisgnerEnv = this.isDeisgnerEnv;
        this.metadataDialog = this.modalService.show(metaDataRef, {
            title: this.selectTitle,
            width: 940,
            height: 600,
            showButtons: false,
            showMaxButton: false
        });
        metaDataRef.instance.selectedMeta.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            if (!$event || !$event.metadata) {
                return;
            }
            this.metedataInit($event);
            this.closeMetadataDlg();
        }));
        metaDataRef.instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            //测试
            //this.metedataInit(1);
            this.closeMetadataDlg();
        }));
    }
    /**
     * 供服务使用的获取提交数据
     * @return {?}
     */
    getdata() {
        //this.lookupConfigData.filter = this.fg.conditions;
        /** @type {?} */
        let conditions = this.fg.conditions.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.filterField));
        this.lookupConfigData.filter = conditions;
        this.lookupConfigData.configId = this.configId;
        this.lookupConfigData.code = this.configCode;
        this.lookupConfigData.name = this.configName;
        this.lookupConfigData.textField = this.metaDataTextFieldValue;
        this.lookupConfigData.loadDataType = this.loadDataType;
        return this.lookupConfigData;
    }
    /**
     * 关闭弹窗
     * @return {?}
     */
    closeMetadataDlg() {
        if (this.metadataDialog) {
            this.metadataDialog.close();
        }
    }
    /**
     * 获取帮助schema字段
     * @param {?} schema schema
     * @return {?}
     */
    getHelpFields(schema) {
        if (!schema || !schema.entities || schema.entities.length === 0) {
            return;
        }
        /** @type {?} */
        const mainTable = schema.entities[0];
        if (mainTable.type && mainTable.type.fields) {
            this.getPlainFields(mainTable.type.fields);
        }
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    getPlainFields(fields) {
        this.filterColumns = [];
        fields.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.filterColumns = this.filterColumns.concat({
                label: element.name,
                value: element.path
            });
            // 关联表字段 / UDT字段
            if (element.type && element.type.fields && element.type.fields.length > 0) {
                this.getPlainFields(element.type.fields);
            }
        }));
    }
    /**
     * 帮助元数据中存储的relation等字段需要转成枚举值
     * @private
     * @param {?} conditions
     * @return {?}
     */
    adaptHelpConditions(conditions) {
        if (!conditions || !conditions.length) {
            return [];
        }
        conditions.forEach((/**
         * @param {?} cd
         * @return {?}
         */
        cd => {
            if (typeof (cd.relation) !== 'number') {
                cd.relation = (/** @type {?} */ (FilterRelation[cd.relation]));
            }
            if (typeof (cd.compare) !== 'number') {
                cd.compare = (/** @type {?} */ (Compare[cd.compare]));
            }
            if (typeof (cd.expresstype) !== 'number') {
                if (ExpressValueType) {
                    cd.expresstype = (/** @type {?} */ (ExpressValueType[cd.expresstype]));
                }
                else {
                    cd.expresstype = cd.expresstype === 'Value' ? 0 : 1;
                }
            }
        }));
        return conditions;
    }
    /**
     * 元数据信息初始化
     * @param {?} event
     * @return {?}
     */
    metedataInit(event) {
        /** @type {?} */
        const helpObject = JSON.parse(event.metadata.content);
        this.metaData = helpObject;
        this.filterConditions = this.adaptHelpConditions(helpObject.dataSource.conditions);
        this.getHelpFields(helpObject.schema.main);
        if (event.metadata.name) {
            this.metaDataName = event.metadata.name;
        }
        this.metaDataTextField = helpObject.textFieldName;
        this.metaDataTextFieldValue = helpObject.textField;
        this.isTreeList = (helpObject.displayType.toLowerCase() === 'treelist');
        //this.loadDataType = helpObject['dataSource']['treeInfo']['loadDataType'];
        /** @type {?} */
        let metedataLoadDataType = helpObject['dataSource']['treeInfo']['loadDataType'];
        if (metedataLoadDataType == 'all')
            this.loadDataType = 'loadall';
        else if (metedataLoadDataType == 'async')
            this.loadDataType = 'layerload';
        this.lookupConfigData.helpId = event.metadata.id;
        //模拟数据获取
        // let event2: any;
        // this.http.get('assets/data/lookupconfig2.json').subscribe((data: any) => {
        //   event2 = data;
        //   const helpObject = JSON.parse(event2.metadata.content);
        //   this.metaData = helpObject;
        //   this.filterConditions = this.adaptHelpConditions(helpObject.dataSource.conditions);
        //   this.getHelpFields(helpObject.schema.main);
        //   if (event2.metadata.fileName) {
        //     this.metaDataName = event2.metadata.fileName;
        //   }
        //   this.metaDataTextField = helpObject.textField
        //   this.isTreeList = (helpObject.displayType.toLowerCase() === 'treelist')
        //   this.loadDataType = helpObject['dataSource']['treeInfo']['loadDataType'];
        //   this.lookupConfigData.helpId = event2.metadata.id;
        //   console.log(helpObject);
        // }
        // );
    }
    /**
     * 帮助文本字段弹窗
     * @return {?}
     */
    getTextFieldName() {
        /** @type {?} */
        const fileNameDataFac = this.cfr.resolveComponentFactory(SelectHelpTextFieldComponent);
        /** @type {?} */
        const fileNameDataRef = fileNameDataFac.create(this.injector);
        if (!this.metaData)
            return;
        fileNameDataRef.instance.helpId = this.metaData.id;
        fileNameDataRef.instance.value = this.metaDataTextFieldValue;
        fileNameDataRef.instance.schemaData = this.metaData.schema.main;
        this.textFieldDialog = this.modalService.show(fileNameDataRef, {
            title: this.selectFileNameTitle,
            width: 900,
            height: 600,
            showButtons: true,
            buttons: fileNameDataRef.instance.modalFooter
        });
        fileNameDataRef.instance.submitModal.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            if ($event.value) {
                //this.metaDataTextField = $event.value;
                this.metaDataTextField = $event.name;
                this.metaDataTextFieldValue = $event.value;
                this.lookupConfigData.textField = this.metaDataTextFieldValue;
            }
            this.closeTextFieldDlg();
        }));
        fileNameDataRef.instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            this.closeTextFieldDlg();
        }));
    }
    /**
     * @return {?}
     */
    closeTextFieldDlg() {
        if (this.textFieldDialog) {
            this.textFieldDialog.close();
        }
    }
}
LookupConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-lookup-config',
                template: "<div class=\"f-lookup-config-wrapper\">\r\n    <div class=\"f-lookup-config-inner farris-overflow-y-auto\">\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.code' | locale:'\u7F16\u53F7' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [(ngModel)]=\"configCode\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.name' | locale:'\u540D\u79F0' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [(ngModel)]=\"configName\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.select' | locale:'\u9009\u62E9\u5E2E\u52A9\u5143\u6570\u636E' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon\"\r\n                        [enableClear]=\"false\" (clickHandle)=\"getMetadata()\" [ngModel]=\"metaDataName\"\r\n                        [placeholder]=\"placeholder\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\" *ngIf=\"isTreeList\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.loadTypeTitle' | locale:'\u9009\u62E9\u52A0\u8F7D\u65B9\u5F0F' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <farris-combo-list\r\n                        [(ngModel)]=\"loadDataType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'name'\"\r\n                        [data]=\"typeNumValues\"\r\n                    ></farris-combo-list>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\" *ngIf=\"metaDataName || metaDataTextField\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.textFieldLable' | locale:'\u5E2E\u52A9\u6587\u672C\u5B57\u6BB5' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon\"\r\n                        [enableClear]=\"false\" (clickHandle)=\"getTextFieldName()\" [ngModel]=\"metaDataTextField\"\r\n                        [placeholder]=\"placeholder\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.filter' | locale }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-filter-wrapper\">\r\n                    <filter-grid #fg [conditions]=\"filterConditions\" [columns]=\"filterColumns\"></filter-grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- <button class=\"btn btn-primary\" (click)=\"getdata()\">\u83B7\u53D6</button> -->\r\n        <!-- <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">\u6743\u9650\u53C2\u6570</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-permission-wrapper farris-form farris-form-controls-inline\">\r\n                    <div class=\"permission-input-item farris-group-wrap f-form-lable-auto\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\">\r\n                                <span class=\"farris-label-text\">\u4E1A\u52A1\u5BF9\u8C61</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                                <farris-lookup-grid\r\n                                    #lookup\r\n                                ></farris-lookup-grid>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"permission-input-item farris-group-wrap f-form-lable-auto\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\">\r\n                                <span class=\"farris-label-text\">\u4E1A\u52A1\u64CD\u4F5C</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                                <input class=\"form-control\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"permission-input-item farris-group-wrap f-form-lable-auto\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\">\r\n                                <span class=\"farris-label-text\">\u6388\u6743\u5BF9\u8C61</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                                <input class=\"form-control\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> -->\r\n    </div>\r\n</div>",
                styles: [".f-lookup-config-wrapper .f-lookup-config-inner{padding:14px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item{padding-bottom:16px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-title{margin-bottom:10px;font-size:16px;color:rgba(0,0,0,.85);font-weight:500}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-title .f-icon{margin-right:4px;font-size:16px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-content{padding-left:16px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-content .config-item-input-wrapper{max-width:360px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-content .config-item-filter-wrapper{padding-top:10px}"]
            }] }
];
/** @nocollapse */
LookupConfigComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ConfigService },
    { type: HttpClient },
    { type: NotifyService },
    { type: GSPMetadataRTService }
];
LookupConfigComponent.propDecorators = {
    configId: [{ type: Input }],
    metadataPath: [{ type: Input }],
    isDeisgnerEnv: [{ type: Input }],
    readonly: [{ type: Input }],
    fg: [{ type: ViewChild, args: ['fg',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookupConfigService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} modalService
     * @param {?} notifyService
     * @param {?} configService
     * @param {?} http
     */
    constructor(cfr, injector, modalService, notifyService, configService, http) {
        this.cfr = cfr;
        this.injector = injector;
        this.modalService = modalService;
        this.notifyService = notifyService;
        this.configService = configService;
        this.http = http;
        this.lookupconfigData = new Subject();
        this.lookupconfigDatas = new Subject();
        this.lookupTitle = '帮助配置';
        this.modalSure = '确定';
        this.modalCancel = '取消';
        this.successSave = '保存成功';
        this.helpIdError = '请选择帮助元数据';
        this.localeService = this.injector.get(LocaleService);
        this.lookupTitle = this.localeService.getValue('lookupConfig.lookupTitle');
        this.modalSure = this.localeService.getValue('lookupConfig.sure');
        this.modalCancel = this.localeService.getValue('lookupConfig.cancel');
        this.successSave = this.localeService.getValue('lookupConfig.successSave');
        this.helpIdError = this.localeService.getValue('lookupConfig.helpIdError');
        // this.injectService();
    }
    /**
     * @param {?} option
     * @return {?}
     */
    showConfig(option) {
        /** @type {?} */
        const LookupConfigF = this.cfr.resolveComponentFactory(LookupConfigComponent);
        /** @type {?} */
        const LookupConfigR = LookupConfigF.create(this.injector);
        LookupConfigR.instance.configId = option.configId;
        if (option.hasOwnProperty('metadataPath')) {
            LookupConfigR.instance.metadataPath = option.metadataPath;
        }
        if (option.hasOwnProperty('readonly')) {
            LookupConfigR.instance.readonly = option.readonly;
        }
        // if (option.hasOwnProperty('isDeisgnerEnv')) {
        //   LookupConfigR.instance.isDeisgnerEnv = option.isDeisgnerEnv;
        // }
        this.lookupDlg = this.modalService.show(LookupConfigR, {
            title: this.lookupTitle,
            width: 1000,
            height: 800,
            buttons: [
                {
                    text: this.modalSure, cls: 'btn btn-primary', handle: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        this.lookupData = LookupConfigR.instance.getdata();
                        if (this.lookupData.helpId === '') {
                            this.notifyService.error(this.helpIdError);
                        }
                        else {
                            /** @type {?} */
                            let params = this.configDataInit(this.lookupData);
                            this.configService.saveHelpConfig(params).subscribe((/**
                             * @param {?} metadata
                             * @return {?}
                             */
                            metadata => {
                                if (metadata) {
                                    this.lookupconfigData.next(metadata['id']);
                                    this.lookupconfigDatas.next(metadata);
                                    this.notifyService.success(this.successSave);
                                }
                                this.lookupDlg.close();
                            }), (/**
                             * @param {?} error
                             * @return {?}
                             */
                            error => {
                                if (error.message) {
                                    this.notifyService.error(error.message);
                                }
                            }));
                            // this.lookupconfigData.next(this.lookupData);
                        }
                    })
                },
                {
                    text: this.modalCancel, cls: 'btn btn-secondary', handle: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        this.lookupDlg.close();
                    })
                }
            ],
            showButtons: true
        });
        // return this.el;
    }
    /**
     * @return {?}
     */
    getLookupData() {
        return this.lookupconfigData;
    }
    /**
     * @return {?}
     */
    getLookUpDatas() {
        return this.lookupconfigDatas;
    }
    /**
     * @param {?} lookupData
     * @return {?}
     */
    configDataInit(lookupData) {
        /** @type {?} */
        let data = {
            id: lookupData.configId,
            name: lookupData.name,
            code: lookupData.code,
            helpId: lookupData.helpId,
            queryParam: {
                filter: {
                    isUsePagination: false,
                    filterConditions: lookupData.filter
                },
                textField: lookupData.textField,
                loadTreeDataType: lookupData.loadDataType
            }
        };
        return data;
    }
}
LookupConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LookupConfigService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: NotifyService },
    { type: ConfigService },
    { type: HttpClient }
];
/** @nocollapse */ LookupConfigService.ngInjectableDef = defineInjectable({ factory: function LookupConfigService_Factory() { return new LookupConfigService(inject(ComponentFactoryResolver), inject(INJECTOR), inject(BsModalService), inject(NotifyService), inject(ConfigService), inject(HttpClient)); }, token: LookupConfigService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-config.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookupConfigModule {
}
LookupConfigModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LookupConfigComponent, LookupConfigMetaDataComponent, SelectHelpTextFieldComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    ModalModule,
                    HttpClientModule,
                    FarrisDialogModule,
                    FarrisButtonModule,
                    InputGroupModule,
                    FilterModule,
                    LookupModule,
                    NotifyModule,
                    GridModule,
                    InputsModule,
                    FarrisCommonModule,
                    MetadataRTSelectModule,
                    GSPMetadataRTServiceModule.forRoot(''),
                    CommonSharedModule,
                    LoadingModule.forRoot(),
                    LocaleModule,
                    TreeTableModule,
                    ComboListModule
                ],
                exports: [LookupConfigComponent],
                providers: [
                    BsModalService,
                    LookupConfigService,
                    ComponentLoaderFactory,
                    PositioningService,
                    FilterService,
                    ConfigService,
                    GSPMetadataRTService,
                    HttpService,
                    SessionService
                ],
                entryComponents: [LookupConfigComponent, LookupConfigMetaDataComponent, SelectHelpTextFieldComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookupDataService {
    /**
     * @param {?} http
     * @param {?} injector
     * @param {?} notifyService
     * @param {?} loading
     */
    constructor(http, injector, notifyService, loading) {
        this.http = http;
        this.injector = injector;
        this.notifyService = notifyService;
        this.loading = loading;
    }
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    getData(url, params) {
        if (!params || !params.helpId) {
            this.notifyService.error('helpId不能为空');
            this.loading.clearAll();
            return;
        }
        /** @type {?} */
        const _url = `/api/runtime/bcc/v1.0/helpconfig/data/${params.helpId}`;
        params = Object.assign(params || {}, { withSpecificField: true });
        return this.http.get(_url, { params: { queryParam: JSON.stringify(params) } });
    }
}
LookupDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LookupDataService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector },
    { type: NotifyService },
    { type: LoadingService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-lookup-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LookupConfigService, LookupConfigComponent, LookupConfigModule, LookupConfigMetaDataComponent, ConfigService, LookupDataService, SelectHelpTextFieldComponent };

//# sourceMappingURL=farris-lookup-config.js.map