/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { LookupConfigComponent } from './lookup-config.component';
import { BsModalService } from '@farris/ui-modal';
import { Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { ConfigService } from './config.service';
import { HttpClient } from '@angular/common/http';
import { LocaleService } from '@farris/ui-locale';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "@farris/ui-notify";
import * as i3 from "./config.service";
import * as i4 from "@angular/common/http";
export class LookupConfigService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} modalService
     * @param {?} notifyService
     * @param {?} configService
     * @param {?} http
     */
    constructor(cfr, injector, modalService, notifyService, configService, http) {
        this.cfr = cfr;
        this.injector = injector;
        this.modalService = modalService;
        this.notifyService = notifyService;
        this.configService = configService;
        this.http = http;
        this.lookupconfigData = new Subject();
        this.lookupconfigDatas = new Subject();
        this.lookupTitle = '帮助配置';
        this.modalSure = '确定';
        this.modalCancel = '取消';
        this.successSave = '保存成功';
        this.helpIdError = '请选择帮助元数据';
        this.localeService = this.injector.get(LocaleService);
        this.lookupTitle = this.localeService.getValue('lookupConfig.lookupTitle');
        this.modalSure = this.localeService.getValue('lookupConfig.sure');
        this.modalCancel = this.localeService.getValue('lookupConfig.cancel');
        this.successSave = this.localeService.getValue('lookupConfig.successSave');
        this.helpIdError = this.localeService.getValue('lookupConfig.helpIdError');
        // this.injectService();
    }
    /**
     * @param {?} option
     * @return {?}
     */
    showConfig(option) {
        /** @type {?} */
        const LookupConfigF = this.cfr.resolveComponentFactory(LookupConfigComponent);
        /** @type {?} */
        const LookupConfigR = LookupConfigF.create(this.injector);
        LookupConfigR.instance.configId = option.configId;
        if (option.hasOwnProperty('metadataPath')) {
            LookupConfigR.instance.metadataPath = option.metadataPath;
        }
        if (option.hasOwnProperty('readonly')) {
            LookupConfigR.instance.readonly = option.readonly;
        }
        // if (option.hasOwnProperty('isDeisgnerEnv')) {
        //   LookupConfigR.instance.isDeisgnerEnv = option.isDeisgnerEnv;
        // }
        this.lookupDlg = this.modalService.show(LookupConfigR, {
            title: this.lookupTitle,
            width: 1000,
            height: 800,
            buttons: [
                {
                    text: this.modalSure, cls: 'btn btn-primary', handle: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        this.lookupData = LookupConfigR.instance.getdata();
                        if (this.lookupData.helpId === '') {
                            this.notifyService.error(this.helpIdError);
                        }
                        else {
                            /** @type {?} */
                            let params = this.configDataInit(this.lookupData);
                            this.configService.saveHelpConfig(params).subscribe((/**
                             * @param {?} metadata
                             * @return {?}
                             */
                            metadata => {
                                if (metadata) {
                                    this.lookupconfigData.next(metadata['id']);
                                    this.lookupconfigDatas.next(metadata);
                                    this.notifyService.success(this.successSave);
                                }
                                this.lookupDlg.close();
                            }), (/**
                             * @param {?} error
                             * @return {?}
                             */
                            error => {
                                if (error.message) {
                                    this.notifyService.error(error.message);
                                }
                            }));
                            // this.lookupconfigData.next(this.lookupData);
                        }
                    })
                },
                {
                    text: this.modalCancel, cls: 'btn btn-secondary', handle: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        this.lookupDlg.close();
                    })
                }
            ],
            showButtons: true
        });
        // return this.el;
    }
    /**
     * @return {?}
     */
    getLookupData() {
        return this.lookupconfigData;
    }
    /**
     * @return {?}
     */
    getLookUpDatas() {
        return this.lookupconfigDatas;
    }
    /**
     * @param {?} lookupData
     * @return {?}
     */
    configDataInit(lookupData) {
        /** @type {?} */
        let data = {
            id: lookupData.configId,
            name: lookupData.name,
            code: lookupData.code,
            helpId: lookupData.helpId,
            queryParam: {
                filter: {
                    isUsePagination: false,
                    filterConditions: lookupData.filter
                },
                textField: lookupData.textField,
                loadTreeDataType: lookupData.loadDataType
            }
        };
        return data;
    }
}
LookupConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LookupConfigService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: NotifyService },
    { type: ConfigService },
    { type: HttpClient }
];
/** @nocollapse */ LookupConfigService.ngInjectableDef = i0.defineInjectable({ factory: function LookupConfigService_Factory() { return new LookupConfigService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i1.BsModalService), i0.inject(i2.NotifyService), i0.inject(i3.ConfigService), i0.inject(i4.HttpClient)); }, token: LookupConfigService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LookupConfigService.prototype.lookupDlg;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.lookupconfigData;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.lookupconfigDatas;
    /** @type {?} */
    LookupConfigService.prototype.lookupData;
    /** @type {?} */
    LookupConfigService.prototype.localeService;
    /** @type {?} */
    LookupConfigService.prototype.lookupTitle;
    /** @type {?} */
    LookupConfigService.prototype.modalSure;
    /** @type {?} */
    LookupConfigService.prototype.modalCancel;
    /** @type {?} */
    LookupConfigService.prototype.successSave;
    /** @type {?} */
    LookupConfigService.prototype.helpIdError;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    LookupConfigService.prototype.configService;
    /** @type {?} */
    LookupConfigService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,