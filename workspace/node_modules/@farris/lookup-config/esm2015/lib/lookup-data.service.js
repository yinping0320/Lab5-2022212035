/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NotifyService } from '@farris/ui-notify';
import { LoadingService } from '@farris/ui-loading';
export class LookupDataService {
    /**
     * @param {?} http
     * @param {?} injector
     * @param {?} notifyService
     * @param {?} loading
     */
    constructor(http, injector, notifyService, loading) {
        this.http = http;
        this.injector = injector;
        this.notifyService = notifyService;
        this.loading = loading;
    }
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    getData(url, params) {
        if (!params || !params.helpId) {
            this.notifyService.error('helpId不能为空');
            this.loading.clearAll();
            return;
        }
        /** @type {?} */
        const _url = `/api/runtime/bcc/v1.0/helpconfig/data/${params.helpId}`;
        params = Object.assign(params || {}, { withSpecificField: true });
        return this.http.get(_url, { params: { queryParam: JSON.stringify(params) } });
    }
}
LookupDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LookupDataService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector },
    { type: NotifyService },
    { type: LoadingService }
];
if (false) {
    /** @type {?} */
    LookupDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LookupDataService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupDataService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    LookupDataService.prototype.loading;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbG9va3VwLWNvbmZpZy8iLCJzb3VyY2VzIjpbImxpYi9sb29rdXAtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHcEQsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7OztJQUM1QixZQUNTLElBQWdCLEVBQ2YsUUFBa0IsRUFDbEIsYUFBNEIsRUFDNUIsT0FBdUI7UUFIeEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNmLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7SUFFakMsQ0FBQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFvQjtRQUMvQixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLE9BQU87U0FDUjs7Y0FDSyxJQUFJLEdBQUcseUNBQXlDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFFckUsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqRixDQUFDOzs7WUFwQkYsVUFBVTs7OztZQUxGLFVBQVU7WUFGRSxRQUFRO1lBSXBCLGFBQWE7WUFDYixjQUFjOzs7O0lBS25CLGlDQUF1Qjs7Ozs7SUFDdkIscUNBQTBCOzs7OztJQUMxQiwwQ0FBb0M7Ozs7O0lBQ3BDLG9DQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgUmVtb3RlUGFyYW1zLCBJTG9va3VwSHR0cFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvb2t1cCc7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IExvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExvb2t1cERhdGFTZXJ2aWNlIGltcGxlbWVudHMgSUxvb2t1cEh0dHBTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmeVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGxvYWRpbmc6IExvYWRpbmdTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhKHVybCwgcGFyYW1zOiBSZW1vdGVQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy5oZWxwSWQpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCdoZWxwSWTkuI3og73kuLrnqbonKTtcclxuICAgICAgdGhpcy5sb2FkaW5nLmNsZWFyQWxsKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IF91cmwgPSBgL2FwaS9ydW50aW1lL2JjYy92MS4wL2hlbHBjb25maWcvZGF0YS8ke3BhcmFtcy5oZWxwSWR9YDtcclxuXHJcbiAgICBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHBhcmFtcyB8fCB7fSwgeyB3aXRoU3BlY2lmaWNGaWVsZDogdHJ1ZSB9KTtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KF91cmwsIHsgcGFyYW1zOiB7IHF1ZXJ5UGFyYW06IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSB9KTtcclxuICB9XHJcbn1cclxuIl19