import { OnInit, ComponentFactoryResolver, Injector } from '@angular/core';
import { BsModalService, BsModalRef } from '@farris/ui-modal';
import { FilterGridComponent } from '@farris/ui-filter-editor';
import { ConfigService } from './config.service';
import { HttpClient } from '@angular/common/http';
import { NotifyService } from '@farris/ui-notify';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { LocaleService } from '@farris/ui-locale';
export declare class LookupConfigComponent implements OnInit {
    private cfr;
    private injector;
    private modalService;
    private configService;
    private http;
    private notifyService;
    private GSPService;
    groupIcon: string;
    metaDataName: string;
    metaDataTextField: any;
    metaDataTextFieldValue: any;
    metaDataTextFieldCloumns: any[];
    metaData: any;
    configId: any;
    metadataPath: any;
    isDeisgnerEnv: boolean;
    readonly: boolean;
    fg: FilterGridComponent;
    filterConditions: any[];
    filterColumns: any[];
    metadataDialog: BsModalRef;
    textFieldDialog: BsModalRef;
    lookupConfigData: {
        configId: string;
        code: string;
        name: string;
        filter: any[];
        helpId: string;
        textField: string;
        loadDataType: string;
    };
    configCode: string;
    configName: string;
    configData: {};
    localeService: LocaleService;
    placeholder: string;
    selectTitle: string;
    fileNamePlaceholder: string;
    selectFileNameTitle: string;
    isTreeList: boolean;
    loadDataType: string;
    typeNumValues: {
        value: string;
        name: string;
    }[];
    constructor(cfr: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, configService: ConfigService, http: HttpClient, notifyService: NotifyService, GSPService: GSPMetadataRTService);
    ngOnInit(): void;
    /**
     * 运行时根据configid获取元数据信息
     */
    getMetadataRT(helpId: any): void;
    getTextField(fields: any): void;
    /**
     * 获取元数据弹窗
     */
    getMetadata(): void;
    /**
     * 供服务使用的获取提交数据
     */
    getdata(): {
        configId: string;
        code: string;
        name: string;
        filter: any[];
        helpId: string;
        textField: string;
        loadDataType: string;
    };
    /**
     * 关闭弹窗
     */
    closeMetadataDlg(): void;
    /**
       * 获取帮助schema字段
       * @param schema schema
       */
    getHelpFields(schema: any): void;
    getPlainFields(fields: any): void;
    /**
     * 帮助元数据中存储的relation等字段需要转成枚举值
     */
    private adaptHelpConditions;
    /**
     * 元数据信息初始化
     * @param event
     */
    metedataInit(event: any): void;
    /**
     * 帮助文本字段弹窗
     */
    getTextFieldName(): void;
    closeTextFieldDlg(): void;
}
