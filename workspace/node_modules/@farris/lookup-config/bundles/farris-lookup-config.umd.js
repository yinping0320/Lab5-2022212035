(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-common/types'), require('rxjs'), require('@angular/common'), require('@angular/forms'), require('@farris/ui-dialog'), require('@farris/ui-button'), require('@farris/ui-modal'), require('@farris/ui-modal/component-loader'), require('@farris/ui-modal/positioning'), require('@farris/ui-input-group'), require('@farris/ui-filter-editor'), require('@farris/ui-lookup'), require('@progress/kendo-angular-grid'), require('@progress/kendo-angular-inputs'), require('@farris/ui-common'), require('@ecp-caf/caf-common'), require('@gsp-lcm/metadatart-selector'), require('@farris/ui-locale'), require('@farris/ui-treetable'), require('@farris/ui-combo-list'), require('@angular/core'), require('@angular/common/http'), require('@farris/ui-notify'), require('@farris/ui-loading')) :
    typeof define === 'function' && define.amd ? define('@farris/lookup-config', ['exports', '@farris/ui-common/types', 'rxjs', '@angular/common', '@angular/forms', '@farris/ui-dialog', '@farris/ui-button', '@farris/ui-modal', '@farris/ui-modal/component-loader', '@farris/ui-modal/positioning', '@farris/ui-input-group', '@farris/ui-filter-editor', '@farris/ui-lookup', '@progress/kendo-angular-grid', '@progress/kendo-angular-inputs', '@farris/ui-common', '@ecp-caf/caf-common', '@gsp-lcm/metadatart-selector', '@farris/ui-locale', '@farris/ui-treetable', '@farris/ui-combo-list', '@angular/core', '@angular/common/http', '@farris/ui-notify', '@farris/ui-loading'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['lookup-config'] = {}),global.types,global.rxjs,global.ng.common,global.ng.forms,global.uiDialog,global.uiButton,global.i1,global.componentLoader,global.positioning,global.uiInputGroup,global.uiFilterEditor,global.uiLookup,global.kendoAngularGrid,global.kendoAngularInputs,global.uiCommon,global.cafCommon,global.metadatartSelector,global.uiLocale,global.uiTreetable,global.uiComboList,global.ng.core,global.ng.common.http,global.i2,global.uiLoading));
}(this, (function (exports,types,rxjs,common,forms,uiDialog,uiButton,i1,componentLoader,positioning,uiInputGroup,uiFilterEditor,uiLookup,kendoAngularGrid,kendoAngularInputs,uiCommon,cafCommon,metadatartSelector,uiLocale,uiTreetable,uiComboList,i0,i1$1,i2,uiLoading) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/lookup-config-metadata.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupConfigMetaDataComponent = /** @class */ (function () {
        function LookupConfigMetaDataComponent() {
            // metadataPath = '';
            this.HelpMetadata = 'HelpMetadata';
            this.isDeisgnerEnv = false;
            this.selectedMeta = new i0.EventEmitter();
            this.closeModal = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        LookupConfigMetaDataComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} event
         * @return {?}
         */
        LookupConfigMetaDataComponent.prototype.selectedMetadata = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.selectedMeta.emit(event);
            };
        /**
         * @return {?}
         */
        LookupConfigMetaDataComponent.prototype.closeModalEmitter = /**
         * @return {?}
         */
            function () {
                this.closeModal.emit();
            };
        LookupConfigMetaDataComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-lookup-config-metadata',
                        template: "<div class=\"f-lookup-config-metadata\">\r\n    <div class=\"f-lookup-config-metadata-inner\">\r\n        <app-select-metadatart typeList=\"HelpMetadata\" (selectedMetadata)=\"selectedMetadata($event)\"\r\n            (closeModalEmitter)=\"closeModalEmitter()\">\r\n        </app-select-metadatart>\r\n    </div> \r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        LookupConfigMetaDataComponent.ctorParameters = function () { return []; };
        LookupConfigMetaDataComponent.propDecorators = {
            metadataPath: [{ type: i0.Input }],
            isDeisgnerEnv: [{ type: i0.Input }],
            selectedMeta: [{ type: i0.Output, args: ['selectedMeta',] }],
            closeModal: [{ type: i0.Output, args: ['closeModal',] }]
        };
        return LookupConfigMetaDataComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/config.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConfigService = /** @class */ (function () {
        // httpUrl = 'http://10.25.11.67:5200';
        function ConfigService(http) {
            this.http = http;
            this.getHelpConfig_Path = '/api/runtime/bcc/v1.0/helpconfig';
            this.saveHelpConfig_Path = '/api/runtime/bcc/v1.0/helpconfig';
        }
        /**
         * 通过configId获取回显数据
         * @param configId 配置id
         */
        /**
         * 通过configId获取回显数据
         * @param {?} configId 配置id
         * @return {?}
         */
        ConfigService.prototype.getHelpConfig = /**
         * 通过configId获取回显数据
         * @param {?} configId 配置id
         * @return {?}
         */
            function (configId) {
                /** @type {?} */
                var url = this.getHelpConfig_Path + '/' + configId;
                return this.http.get(url);
                //return this.http.get('assets/data/helpconfig.json');
            };
        /**
         * 保存帮助配置
         * @param params 参数
         */
        /**
         * 保存帮助配置
         * @param {?} params 参数
         * @return {?}
         */
        ConfigService.prototype.saveHelpConfig = /**
         * 保存帮助配置
         * @param {?} params 参数
         * @return {?}
         */
            function (params) {
                /** @type {?} */
                var saveUrl = this.saveHelpConfig_Path;
                /** @type {?} */
                var thisParams = Object.assign({}, params);
                thisParams.queryParam = JSON.stringify(thisParams.queryParam);
                //console.log('save',thisParams)
                return this.http.put(saveUrl, thisParams);
                //return this.http.get('assets/data/savehelpconfig.json');
            };
        ConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ConfigService.ctorParameters = function () {
            return [
                { type: i1$1.HttpClient }
            ];
        };
        /** @nocollapse */ ConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ConfigService_Factory() { return new ConfigService(i0.inject(i1$1.HttpClient)); }, token: ConfigService, providedIn: "root" });
        return ConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/select-help-text-field/select-help-text-field.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectHelpTextFieldComponent = /** @class */ (function () {
        function SelectHelpTextFieldComponent(notifyService, ngZone, localeService) {
            this.notifyService = notifyService;
            this.ngZone = ngZone;
            this.localeService = localeService;
            this.closeModal = new i0.EventEmitter();
            this.submitModal = new i0.EventEmitter();
            this.helpId = '';
            this.class = 'd-flex f-utils-fill-flex-column h-100';
            this.modalConfig = {
                title: '字段选择器',
                width: 900,
                height: 500,
                showButtons: true,
                showMaxButton: false
            };
            // 树表数据
            this.helpTreeData = [];
            // 树表列配置
            this.treeCols = [{ field: 'name', title: '名称' }, { field: 'label', title: '编号' }, { field: 'bindingPath', title: '绑定字段' }];
            this.fieldName = '名称';
            this.fieldLabel = '编号';
            this.fieldTitle = '绑定字段';
            this.fieldError = '已绑定字段不存在！';
        }
        /**
         * @return {?}
         */
        SelectHelpTextFieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.fieldName = this.localeService.getValue('lookupConfig.name');
                this.fieldLabel = this.localeService.getValue('lookupConfig.code');
                this.fieldTitle = this.localeService.getValue('lookupConfig.bindingPath');
                this.fieldError = this.localeService.getValue('lookupConfig.fieldError');
                this.treeCols = [{ field: 'name', title: this.fieldName }, { field: 'label', title: this.fieldLabel }, { field: 'bindingPath', title: this.fieldTitle }];
                if (!this.schemaData) {
                    return;
                }
                this.getHelpFields(this.schemaData);
            };
        /**
         * 获取帮助schema字段
         * @param schema schema
         */
        /**
         * 获取帮助schema字段
         * @param {?} schema schema
         * @return {?}
         */
        SelectHelpTextFieldComponent.prototype.getHelpFields = /**
         * 获取帮助schema字段
         * @param {?} schema schema
         * @return {?}
         */
            function (schema) {
                var _this = this;
                if (!schema || !schema.entities || schema.entities.length === 0) {
                    return;
                }
                /** @type {?} */
                var mainTable = schema.entities[0];
                if (mainTable.type && mainTable.type.fields) {
                    this.helpTreeData = this.assembleFields2Tree(mainTable.type.fields);
                }
                this.ngZone.runOutsideAngular(( /**
                 * @return {?}
                 */function () {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        if (!_this.value) {
                            return;
                        }
                        try {
                            _this.treeTable.selectNode(_this.value);
                        }
                        catch (e) {
                            _this.treeTable.clearSelections();
                            _this.notifyService.error(_this.fieldError);
                        }
                    }));
                }));
            };
        /**
         * schema字段集合组装成树
         * @param fields schema字段集合
         */
        /**
         * schema字段集合组装成树
         * @param {?} fields schema字段集合
         * @return {?}
         */
        SelectHelpTextFieldComponent.prototype.assembleFields2Tree = /**
         * schema字段集合组装成树
         * @param {?} fields schema字段集合
         * @return {?}
         */
            function (fields) {
                var _this = this;
                /** @type {?} */
                var treeData = [];
                fields.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    // 关联表字段 / UDT字段
                    /** @type {?} */
                    var children = [];
                    if (element.type && element.type.fields && element.type.fields.length > 0) {
                        children = _this.assembleFields2Tree(element.type.fields);
                    }
                    // 适配旧的帮助元数据没有bindingPath属性
                    if (!element.bindingPath) {
                        element.bindingPath = element['parentPath'] ? element['parentPath'] + '.' + element.label : element.label;
                    }
                    treeData.push({
                        data: element,
                        children: children,
                        expanded: true,
                        selectable: children.length > 0 ? false : true
                    });
                }));
                return treeData;
            };
        /**
         * 取消
         */
        /**
         * 取消
         * @return {?}
         */
        SelectHelpTextFieldComponent.prototype.clickCancel = /**
         * 取消
         * @return {?}
         */
            function () {
                this.closeModal.emit();
            };
        /**
         * 确定
         */
        /**
         * 确定
         * @return {?}
         */
        SelectHelpTextFieldComponent.prototype.clickConfirm = /**
         * 确定
         * @return {?}
         */
            function () {
                if (!this.treeTable.selectedRow) {
                    this.notifyService.warning('请选择字段');
                    return;
                }
                /** @type {?} */
                var selectedData = this.treeTable.selectedRow.data;
                this.submitModal.emit({ value: selectedData.bindingPath, name: selectedData.name });
            };
        SelectHelpTextFieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-select-help-text-field',
                        template: "<farris-treetable #treeTable [data]=\"helpTreeData\" [columns]=\"treeCols\" [idField]=\"'bindingPath'\" [fixedHeader]=\"true\"\r\n    [fit]=\"true\" [singleSelect]=\"true\" [showFilterBar]=\"false\" [resizableColumns]=\"true\"\r\n    [showCheckAll]=\"false\" [showCheckbox]=\"false\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n</farris-treetable>\r\n\r\n<ng-template #modalFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clickCancel()\">{{ 'lookupConfig.cancel' | locale }}</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"clickConfirm()\">{{ 'lookupConfig.sure' | locale }}</button>\r\n</ng-template>"
                    }] }
        ];
        /** @nocollapse */
        SelectHelpTextFieldComponent.ctorParameters = function () {
            return [
                { type: i2.NotifyService },
                { type: i0.NgZone },
                { type: uiLocale.LocaleService }
            ];
        };
        SelectHelpTextFieldComponent.propDecorators = {
            closeModal: [{ type: i0.Output }],
            submitModal: [{ type: i0.Output }],
            value: [{ type: i0.Input }],
            helpId: [{ type: i0.Input }],
            schemaData: [{ type: i0.Input }],
            modalFooter: [{ type: i0.ViewChild, args: ['modalFooter',] }],
            class: [{ type: i0.HostBinding, args: ['class',] }],
            treeTable: [{ type: i0.ViewChild, args: ['treeTable',] }]
        };
        return SelectHelpTextFieldComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/lookup-config.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupConfigComponent = /** @class */ (function () {
        function LookupConfigComponent(cfr, injector, modalService, configService, http, notifyService, GSPService) {
            this.cfr = cfr;
            this.injector = injector;
            this.modalService = modalService;
            this.configService = configService;
            this.http = http;
            this.notifyService = notifyService;
            this.GSPService = GSPService;
            this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
            this.metaDataName = ''; //元数据显示name
            this.metaDataTextFieldCloumns = [];
            this.isDeisgnerEnv = false;
            this.readonly = false;
            this.filterConditions = []; //筛选初始值
            //筛选初始值
            this.filterColumns = []; //筛选项
            //提交的数据
            this.lookupConfigData = {
                configId: '',
                code: '',
                name: '',
                filter: [],
                // metadata:{}
                helpId: '',
                textField: '',
                loadDataType: '' //加载方式
            };
            this.configCode = '';
            this.configName = '';
            //帮助数据
            this.configData = {};
            this.placeholder = '选择表单元数据';
            this.selectTitle = '帮助元数据选择';
            this.fileNamePlaceholder = '选择帮助文本字段';
            this.selectFileNameTitle = '文本字段选择器';
            this.isTreeList = false;
            this.typeNumValues = [
                {
                    value: "default",
                    name: "默认"
                },
                {
                    value: "loadall",
                    name: "全部加载"
                },
                {
                    value: "layerload",
                    name: "分层加载"
                }
            ];
            this.localeService = this.injector.get(uiLocale.LocaleService);
        }
        /**
         * @return {?}
         */
        LookupConfigComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /**
                 * 运行时根据configid获取元数据信息
                 */
                // if(!this.isDeisgnerEnv && this.configId !== '' && typeof(this.configId) != "undefined"){
                //   this.GSPService.GetMetadataRT(this.configId).subscribe((data: any) => {
                //   //this.http.get('assets/data/lookupconfig.json').subscribe((data: any) => {
                //     if(data && data.content){
                //       const metadataObject = JSON.parse(data.content); 
                //       const metadataSchema = metadataObject.schema.main;
                //       if (!metadataSchema || !metadataSchema.entities || metadataSchema.entities.length === 0) {
                //           return;
                //       }
                //       const metadatamainTable = metadataSchema.entities[0];
                //       if (metadatamainTable.type && metadatamainTable.type.fields) {
                //           this.getPlainFields(metadatamainTable.type.fields);
                //       }
                //     }
                //   },
                //   error => {
                //     if(error.message){
                //       this.notifyService.error(error.message);
                //     }
                //   }
                //   )
                // }
                /**
                 * 根据configid获取回显数据
                 */
                if (this.configId !== '' && typeof (this.configId) != "undefined") {
                    this.configService.getHelpConfig(this.configId).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data) {
                            _this.configData = data;
                            _this.configCode = data.code;
                            _this.configName = data.name;
                            _this.metaDataName = data.helpName;
                            _this.lookupConfigData.helpId = data.helpId;
                            /** @type {?} */
                            var queryParams = JSON.parse(data.queryParam);
                            if (queryParams['filter'] && queryParams['filter']['filterConditions'] && queryParams['filter']['filterConditions'].length) {
                                _this.filterConditions = queryParams['filter']['filterConditions'];
                            }
                            if (queryParams['loadTreeDataType']) {
                                _this.loadDataType = queryParams['loadTreeDataType'];
                            }
                            if (queryParams['textField']) {
                                _this.metaDataTextFieldValue = queryParams['textField'];
                            }
                            if (!_this.isDeisgnerEnv && typeof (data.helpId) != "undefined") {
                                _this.getMetadataRT(data.helpId);
                            }
                        }
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        if (error.message) {
                            _this.notifyService.error(error.message);
                        }
                    }));
                }
                this.placeholder = this.localeService.getValue('lookupConfig.placeholder');
                this.selectTitle = this.localeService.getValue('lookupConfig.selectTitle');
                this.fileNamePlaceholder = this.localeService.getValue('lookupConfig.fileNamePlaceholder');
                this.selectFileNameTitle = this.localeService.getValue('lookupConfig.selectFileNameTitle');
                this.typeNumValues = [
                    {
                        value: "default",
                        name: this.localeService.getValue('lookupConfig.loadTypeList.default')
                    },
                    {
                        value: "loadall",
                        name: this.localeService.getValue('lookupConfig.loadTypeList.all')
                    },
                    {
                        value: "layerload",
                        name: this.localeService.getValue('lookupConfig.loadTypeList.layer')
                    }
                ];
            };
        /**
         * 运行时根据configid获取元数据信息
         */
        /**
         * 运行时根据configid获取元数据信息
         * @param {?} helpId
         * @return {?}
         */
        LookupConfigComponent.prototype.getMetadataRT = /**
         * 运行时根据configid获取元数据信息
         * @param {?} helpId
         * @return {?}
         */
            function (helpId) {
                var _this = this;
                this.GSPService.GetMetadataRT(helpId).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    //this.http.get('assets/data/lookupconfig.json').subscribe((data: any) => {
                    //console.log(data);
                    _this.metaDataTextFieldCloumns = [];
                    if (data && data.content) {
                        /** @type {?} */
                        var metadataObject = JSON.parse(data.content);
                        _this.metaData = metadataObject;
                        _this.isTreeList = (metadataObject.displayType.toLowerCase() === 'treelist');
                        /** @type {?} */
                        var metadataSchema = metadataObject.schema.main;
                        if (!metadataSchema || !metadataSchema.entities || metadataSchema.entities.length === 0) {
                            return;
                        }
                        /** @type {?} */
                        var metadatamainTable = metadataSchema.entities[0];
                        if (metadatamainTable.type && metadatamainTable.type.fields) {
                            _this.getPlainFields(metadatamainTable.type.fields);
                            _this.getTextField(metadatamainTable.type.fields);
                            if (_this.metaDataTextFieldCloumns && _this.metaDataTextFieldCloumns.length) {
                                /** @type {?} */
                                var textField = _this.metaDataTextFieldCloumns.find(( /**
                                 * @param {?} item
                                 * @return {?}
                                 */function (item) {
                                    return item.value.toLowerCase() == _this.metaDataTextFieldValue.toLowerCase();
                                }));
                                _this.metaDataTextField = textField ? textField.label : '';
                            }
                        }
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    if (error.message) {
                        _this.notifyService.error(error.message);
                    }
                }));
            };
        /**
         * @param {?} fields
         * @return {?}
         */
        LookupConfigComponent.prototype.getTextField = /**
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                var _this = this;
                fields.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    _this.metaDataTextFieldCloumns.push({
                        label: element.name,
                        value: element.path
                    });
                    if (element.type && element.type.fields && element.type.fields.length > 0) {
                        _this.getTextField(element.type.fields);
                    }
                }));
            };
        /**
         * 获取元数据弹窗
         */
        /**
         * 获取元数据弹窗
         * @return {?}
         */
        LookupConfigComponent.prototype.getMetadata = /**
         * 获取元数据弹窗
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var metaDataFac = this.cfr.resolveComponentFactory(LookupConfigMetaDataComponent);
                /** @type {?} */
                var metaDataRef = metaDataFac.create(this.injector);
                metaDataRef.instance.metadataPath = this.metadataPath;
                // metaDataRef.instance.isDeisgnerEnv = this.isDeisgnerEnv;
                this.metadataDialog = this.modalService.show(metaDataRef, {
                    title: this.selectTitle,
                    width: 940,
                    height: 600,
                    showButtons: false,
                    showMaxButton: false
                });
                metaDataRef.instance.selectedMeta.subscribe(( /**
                 * @param {?} $event
                 * @return {?}
                 */function ($event) {
                    if (!$event || !$event.metadata) {
                        return;
                    }
                    _this.metedataInit($event);
                    _this.closeMetadataDlg();
                }));
                metaDataRef.instance.closeModal.subscribe(( /**
                 * @return {?}
                 */function () {
                    //测试
                    //this.metedataInit(1);
                    _this.closeMetadataDlg();
                }));
            };
        /**
         * 供服务使用的获取提交数据
         */
        /**
         * 供服务使用的获取提交数据
         * @return {?}
         */
        LookupConfigComponent.prototype.getdata = /**
         * 供服务使用的获取提交数据
         * @return {?}
         */
            function () {
                //this.lookupConfigData.filter = this.fg.conditions;
                /** @type {?} */
                var conditions = this.fg.conditions.filter(( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) { return c.filterField; }));
                this.lookupConfigData.filter = conditions;
                this.lookupConfigData.configId = this.configId;
                this.lookupConfigData.code = this.configCode;
                this.lookupConfigData.name = this.configName;
                this.lookupConfigData.textField = this.metaDataTextFieldValue;
                this.lookupConfigData.loadDataType = this.loadDataType;
                return this.lookupConfigData;
            };
        /**
         * 关闭弹窗
         */
        /**
         * 关闭弹窗
         * @return {?}
         */
        LookupConfigComponent.prototype.closeMetadataDlg = /**
         * 关闭弹窗
         * @return {?}
         */
            function () {
                if (this.metadataDialog) {
                    this.metadataDialog.close();
                }
            };
        /**
           * 获取帮助schema字段
           * @param schema schema
           */
        /**
         * 获取帮助schema字段
         * @param {?} schema schema
         * @return {?}
         */
        LookupConfigComponent.prototype.getHelpFields = /**
         * 获取帮助schema字段
         * @param {?} schema schema
         * @return {?}
         */
            function (schema) {
                if (!schema || !schema.entities || schema.entities.length === 0) {
                    return;
                }
                /** @type {?} */
                var mainTable = schema.entities[0];
                if (mainTable.type && mainTable.type.fields) {
                    this.getPlainFields(mainTable.type.fields);
                }
            };
        /**
         * @param {?} fields
         * @return {?}
         */
        LookupConfigComponent.prototype.getPlainFields = /**
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                var _this = this;
                this.filterColumns = [];
                fields.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    _this.filterColumns = _this.filterColumns.concat({
                        label: element.name,
                        value: element.path
                    });
                    // 关联表字段 / UDT字段
                    if (element.type && element.type.fields && element.type.fields.length > 0) {
                        _this.getPlainFields(element.type.fields);
                    }
                }));
            };
        /**
         * 帮助元数据中存储的relation等字段需要转成枚举值
         */
        /**
         * 帮助元数据中存储的relation等字段需要转成枚举值
         * @private
         * @param {?} conditions
         * @return {?}
         */
        LookupConfigComponent.prototype.adaptHelpConditions = /**
         * 帮助元数据中存储的relation等字段需要转成枚举值
         * @private
         * @param {?} conditions
         * @return {?}
         */
            function (conditions) {
                if (!conditions || !conditions.length) {
                    return [];
                }
                conditions.forEach(( /**
                 * @param {?} cd
                 * @return {?}
                 */function (cd) {
                    if (typeof (cd.relation) !== 'number') {
                        cd.relation = ( /** @type {?} */(types.FilterRelation[cd.relation]));
                    }
                    if (typeof (cd.compare) !== 'number') {
                        cd.compare = ( /** @type {?} */(types.Compare[cd.compare]));
                    }
                    if (typeof (cd.expresstype) !== 'number') {
                        if (types.ExpressValueType) {
                            cd.expresstype = ( /** @type {?} */(types.ExpressValueType[cd.expresstype]));
                        }
                        else {
                            cd.expresstype = cd.expresstype === 'Value' ? 0 : 1;
                        }
                    }
                }));
                return conditions;
            };
        /**
         * 元数据信息初始化
         * @param event
         */
        /**
         * 元数据信息初始化
         * @param {?} event
         * @return {?}
         */
        LookupConfigComponent.prototype.metedataInit = /**
         * 元数据信息初始化
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var helpObject = JSON.parse(event.metadata.content);
                this.metaData = helpObject;
                this.filterConditions = this.adaptHelpConditions(helpObject.dataSource.conditions);
                this.getHelpFields(helpObject.schema.main);
                if (event.metadata.name) {
                    this.metaDataName = event.metadata.name;
                }
                this.metaDataTextField = helpObject.textFieldName;
                this.metaDataTextFieldValue = helpObject.textField;
                this.isTreeList = (helpObject.displayType.toLowerCase() === 'treelist');
                //this.loadDataType = helpObject['dataSource']['treeInfo']['loadDataType'];
                /** @type {?} */
                var metedataLoadDataType = helpObject['dataSource']['treeInfo']['loadDataType'];
                if (metedataLoadDataType == 'all')
                    this.loadDataType = 'loadall';
                else if (metedataLoadDataType == 'async')
                    this.loadDataType = 'layerload';
                this.lookupConfigData.helpId = event.metadata.id;
                //模拟数据获取
                // let event2: any;
                // this.http.get('assets/data/lookupconfig2.json').subscribe((data: any) => {
                //   event2 = data;
                //   const helpObject = JSON.parse(event2.metadata.content);
                //   this.metaData = helpObject;
                //   this.filterConditions = this.adaptHelpConditions(helpObject.dataSource.conditions);
                //   this.getHelpFields(helpObject.schema.main);
                //   if (event2.metadata.fileName) {
                //     this.metaDataName = event2.metadata.fileName;
                //   }
                //   this.metaDataTextField = helpObject.textField
                //   this.isTreeList = (helpObject.displayType.toLowerCase() === 'treelist')
                //   this.loadDataType = helpObject['dataSource']['treeInfo']['loadDataType'];
                //   this.lookupConfigData.helpId = event2.metadata.id;
                //   console.log(helpObject);
                // }
                // );
            };
        /**
         * 帮助文本字段弹窗
         */
        /**
         * 帮助文本字段弹窗
         * @return {?}
         */
        LookupConfigComponent.prototype.getTextFieldName = /**
         * 帮助文本字段弹窗
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var fileNameDataFac = this.cfr.resolveComponentFactory(SelectHelpTextFieldComponent);
                /** @type {?} */
                var fileNameDataRef = fileNameDataFac.create(this.injector);
                if (!this.metaData)
                    return;
                fileNameDataRef.instance.helpId = this.metaData.id;
                fileNameDataRef.instance.value = this.metaDataTextFieldValue;
                fileNameDataRef.instance.schemaData = this.metaData.schema.main;
                this.textFieldDialog = this.modalService.show(fileNameDataRef, {
                    title: this.selectFileNameTitle,
                    width: 900,
                    height: 600,
                    showButtons: true,
                    buttons: fileNameDataRef.instance.modalFooter
                });
                fileNameDataRef.instance.submitModal.subscribe(( /**
                 * @param {?} $event
                 * @return {?}
                 */function ($event) {
                    if ($event.value) {
                        //this.metaDataTextField = $event.value;
                        _this.metaDataTextField = $event.name;
                        _this.metaDataTextFieldValue = $event.value;
                        _this.lookupConfigData.textField = _this.metaDataTextFieldValue;
                    }
                    _this.closeTextFieldDlg();
                }));
                fileNameDataRef.instance.closeModal.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.closeTextFieldDlg();
                }));
            };
        /**
         * @return {?}
         */
        LookupConfigComponent.prototype.closeTextFieldDlg = /**
         * @return {?}
         */
            function () {
                if (this.textFieldDialog) {
                    this.textFieldDialog.close();
                }
            };
        LookupConfigComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-lookup-config',
                        template: "<div class=\"f-lookup-config-wrapper\">\r\n    <div class=\"f-lookup-config-inner farris-overflow-y-auto\">\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.code' | locale:'\u7F16\u53F7' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [(ngModel)]=\"configCode\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.name' | locale:'\u540D\u79F0' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [(ngModel)]=\"configName\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.select' | locale:'\u9009\u62E9\u5E2E\u52A9\u5143\u6570\u636E' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon\"\r\n                        [enableClear]=\"false\" (clickHandle)=\"getMetadata()\" [ngModel]=\"metaDataName\"\r\n                        [placeholder]=\"placeholder\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\" *ngIf=\"isTreeList\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.loadTypeTitle' | locale:'\u9009\u62E9\u52A0\u8F7D\u65B9\u5F0F' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <farris-combo-list\r\n                        [(ngModel)]=\"loadDataType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'name'\"\r\n                        [data]=\"typeNumValues\"\r\n                    ></farris-combo-list>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\" *ngIf=\"metaDataName || metaDataTextField\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.textFieldLable' | locale:'\u5E2E\u52A9\u6587\u672C\u5B57\u6BB5' }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-input-wrapper\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon\"\r\n                        [enableClear]=\"false\" (clickHandle)=\"getTextFieldName()\" [ngModel]=\"metaDataTextField\"\r\n                        [placeholder]=\"placeholder\" [readonly]=\"readonly\"></input-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">{{ 'lookupConfig.filter' | locale }}</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-filter-wrapper\">\r\n                    <filter-grid #fg [conditions]=\"filterConditions\" [columns]=\"filterColumns\"></filter-grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- <button class=\"btn btn-primary\" (click)=\"getdata()\">\u83B7\u53D6</button> -->\r\n        <!-- <div class=\"f-lookup-config-item\">\r\n            <div class=\"config-item-title\">\r\n                <span class=\"config-item-title-text\">\u6743\u9650\u53C2\u6570</span>\r\n            </div>\r\n            <div class=\"config-item-content\">\r\n                <div class=\"config-item-permission-wrapper farris-form farris-form-controls-inline\">\r\n                    <div class=\"permission-input-item farris-group-wrap f-form-lable-auto\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\">\r\n                                <span class=\"farris-label-text\">\u4E1A\u52A1\u5BF9\u8C61</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                                <farris-lookup-grid\r\n                                    #lookup\r\n                                ></farris-lookup-grid>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"permission-input-item farris-group-wrap f-form-lable-auto\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\">\r\n                                <span class=\"farris-label-text\">\u4E1A\u52A1\u64CD\u4F5C</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                                <input class=\"form-control\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"permission-input-item farris-group-wrap f-form-lable-auto\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\">\r\n                                <span class=\"farris-label-text\">\u6388\u6743\u5BF9\u8C61</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                                <input class=\"form-control\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> -->\r\n    </div>\r\n</div>",
                        styles: [".f-lookup-config-wrapper .f-lookup-config-inner{padding:14px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item{padding-bottom:16px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-title{margin-bottom:10px;font-size:16px;color:rgba(0,0,0,.85);font-weight:500}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-title .f-icon{margin-right:4px;font-size:16px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-content{padding-left:16px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-content .config-item-input-wrapper{max-width:360px}.f-lookup-config-wrapper .f-lookup-config-inner .f-lookup-config-item .config-item-content .config-item-filter-wrapper{padding-top:10px}"]
                    }] }
        ];
        /** @nocollapse */
        LookupConfigComponent.ctorParameters = function () {
            return [
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: ConfigService },
                { type: i1$1.HttpClient },
                { type: i2.NotifyService },
                { type: metadatartSelector.GSPMetadataRTService }
            ];
        };
        LookupConfigComponent.propDecorators = {
            configId: [{ type: i0.Input }],
            metadataPath: [{ type: i0.Input }],
            isDeisgnerEnv: [{ type: i0.Input }],
            readonly: [{ type: i0.Input }],
            fg: [{ type: i0.ViewChild, args: ['fg',] }]
        };
        return LookupConfigComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/lookup-config.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupConfigService = /** @class */ (function () {
        function LookupConfigService(cfr, injector, modalService, notifyService, configService, http) {
            this.cfr = cfr;
            this.injector = injector;
            this.modalService = modalService;
            this.notifyService = notifyService;
            this.configService = configService;
            this.http = http;
            this.lookupconfigData = new rxjs.Subject();
            this.lookupconfigDatas = new rxjs.Subject();
            this.lookupTitle = '帮助配置';
            this.modalSure = '确定';
            this.modalCancel = '取消';
            this.successSave = '保存成功';
            this.helpIdError = '请选择帮助元数据';
            this.localeService = this.injector.get(uiLocale.LocaleService);
            this.lookupTitle = this.localeService.getValue('lookupConfig.lookupTitle');
            this.modalSure = this.localeService.getValue('lookupConfig.sure');
            this.modalCancel = this.localeService.getValue('lookupConfig.cancel');
            this.successSave = this.localeService.getValue('lookupConfig.successSave');
            this.helpIdError = this.localeService.getValue('lookupConfig.helpIdError');
            // this.injectService();
        }
        /**
         * @param {?} option
         * @return {?}
         */
        LookupConfigService.prototype.showConfig = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                var _this = this;
                /** @type {?} */
                var LookupConfigF = this.cfr.resolveComponentFactory(LookupConfigComponent);
                /** @type {?} */
                var LookupConfigR = LookupConfigF.create(this.injector);
                LookupConfigR.instance.configId = option.configId;
                if (option.hasOwnProperty('metadataPath')) {
                    LookupConfigR.instance.metadataPath = option.metadataPath;
                }
                if (option.hasOwnProperty('readonly')) {
                    LookupConfigR.instance.readonly = option.readonly;
                }
                // if (option.hasOwnProperty('isDeisgnerEnv')) {
                //   LookupConfigR.instance.isDeisgnerEnv = option.isDeisgnerEnv;
                // }
                this.lookupDlg = this.modalService.show(LookupConfigR, {
                    title: this.lookupTitle,
                    width: 1000,
                    height: 800,
                    buttons: [
                        {
                            text: this.modalSure, cls: 'btn btn-primary', handle: ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                _this.lookupData = LookupConfigR.instance.getdata();
                                if (_this.lookupData.helpId === '') {
                                    _this.notifyService.error(_this.helpIdError);
                                }
                                else {
                                    /** @type {?} */
                                    var params = _this.configDataInit(_this.lookupData);
                                    _this.configService.saveHelpConfig(params).subscribe(( /**
                                     * @param {?} metadata
                                     * @return {?}
                                     */function (metadata) {
                                        if (metadata) {
                                            _this.lookupconfigData.next(metadata['id']);
                                            _this.lookupconfigDatas.next(metadata);
                                            _this.notifyService.success(_this.successSave);
                                        }
                                        _this.lookupDlg.close();
                                    }), ( /**
                                     * @param {?} error
                                     * @return {?}
                                     */function (error) {
                                        if (error.message) {
                                            _this.notifyService.error(error.message);
                                        }
                                    }));
                                    // this.lookupconfigData.next(this.lookupData);
                                }
                            })
                        },
                        {
                            text: this.modalCancel, cls: 'btn btn-secondary', handle: ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                _this.lookupDlg.close();
                            })
                        }
                    ],
                    showButtons: true
                });
                // return this.el;
            };
        /**
         * @return {?}
         */
        LookupConfigService.prototype.getLookupData = /**
         * @return {?}
         */
            function () {
                return this.lookupconfigData;
            };
        /**
         * @return {?}
         */
        LookupConfigService.prototype.getLookUpDatas = /**
         * @return {?}
         */
            function () {
                return this.lookupconfigDatas;
            };
        /**
         * @param {?} lookupData
         * @return {?}
         */
        LookupConfigService.prototype.configDataInit = /**
         * @param {?} lookupData
         * @return {?}
         */
            function (lookupData) {
                /** @type {?} */
                var data = {
                    id: lookupData.configId,
                    name: lookupData.name,
                    code: lookupData.code,
                    helpId: lookupData.helpId,
                    queryParam: {
                        filter: {
                            isUsePagination: false,
                            filterConditions: lookupData.filter
                        },
                        textField: lookupData.textField,
                        loadTreeDataType: lookupData.loadDataType
                    }
                };
                return data;
            };
        LookupConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LookupConfigService.ctorParameters = function () {
            return [
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: i2.NotifyService },
                { type: ConfigService },
                { type: i1$1.HttpClient }
            ];
        };
        /** @nocollapse */ LookupConfigService.ngInjectableDef = i0.defineInjectable({ factory: function LookupConfigService_Factory() { return new LookupConfigService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i1.BsModalService), i0.inject(i2.NotifyService), i0.inject(ConfigService), i0.inject(i1$1.HttpClient)); }, token: LookupConfigService, providedIn: "root" });
        return LookupConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/lookup-config.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupConfigModule = /** @class */ (function () {
        function LookupConfigModule() {
        }
        LookupConfigModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [LookupConfigComponent, LookupConfigMetaDataComponent, SelectHelpTextFieldComponent],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            i1.ModalModule,
                            i1$1.HttpClientModule,
                            uiDialog.FarrisDialogModule,
                            uiButton.FarrisButtonModule,
                            uiInputGroup.InputGroupModule,
                            uiFilterEditor.FilterModule,
                            uiLookup.LookupModule,
                            i2.NotifyModule,
                            kendoAngularGrid.GridModule,
                            kendoAngularInputs.InputsModule,
                            uiCommon.FarrisCommonModule,
                            metadatartSelector.MetadataRTSelectModule,
                            metadatartSelector.GSPMetadataRTServiceModule.forRoot(''),
                            cafCommon.CommonSharedModule,
                            uiLoading.LoadingModule.forRoot(),
                            uiLocale.LocaleModule,
                            uiTreetable.TreeTableModule,
                            uiComboList.ComboListModule
                        ],
                        exports: [LookupConfigComponent],
                        providers: [
                            i1.BsModalService,
                            LookupConfigService,
                            componentLoader.ComponentLoaderFactory,
                            positioning.PositioningService,
                            uiFilterEditor.FilterService,
                            ConfigService,
                            metadatartSelector.GSPMetadataRTService,
                            cafCommon.HttpService,
                            cafCommon.SessionService
                        ],
                        entryComponents: [LookupConfigComponent, LookupConfigMetaDataComponent, SelectHelpTextFieldComponent]
                    },] }
        ];
        return LookupConfigModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/lookup-data.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LookupDataService = /** @class */ (function () {
        function LookupDataService(http, injector, notifyService, loading) {
            this.http = http;
            this.injector = injector;
            this.notifyService = notifyService;
            this.loading = loading;
        }
        /**
         * @param {?} url
         * @param {?} params
         * @return {?}
         */
        LookupDataService.prototype.getData = /**
         * @param {?} url
         * @param {?} params
         * @return {?}
         */
            function (url, params) {
                if (!params || !params.helpId) {
                    this.notifyService.error('helpId不能为空');
                    this.loading.clearAll();
                    return;
                }
                /** @type {?} */
                var _url = "/api/runtime/bcc/v1.0/helpconfig/data/" + params.helpId;
                params = Object.assign(params || {}, { withSpecificField: true });
                return this.http.get(_url, { params: { queryParam: JSON.stringify(params) } });
            };
        LookupDataService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        LookupDataService.ctorParameters = function () {
            return [
                { type: i1$1.HttpClient },
                { type: i0.Injector },
                { type: i2.NotifyService },
                { type: uiLoading.LoadingService }
            ];
        };
        return LookupDataService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: farris-lookup-config.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.LookupConfigService = LookupConfigService;
    exports.LookupConfigComponent = LookupConfigComponent;
    exports.LookupConfigModule = LookupConfigModule;
    exports.LookupConfigMetaDataComponent = LookupConfigMetaDataComponent;
    exports.ConfigService = ConfigService;
    exports.LookupDataService = LookupDataService;
    exports.SelectHelpTextFieldComponent = SelectHelpTextFieldComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-lookup-config.umd.js.map