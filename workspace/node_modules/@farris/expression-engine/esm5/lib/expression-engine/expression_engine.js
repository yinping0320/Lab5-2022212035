import * as tslib_1 from "tslib";
import { ExpressionContext } from "../context/index";
import { Expression } from "../expression/index";
import { AbstractExpressionEngine } from "./abstract_expression_engine";
var ExpressionEngine = (function (_super) {
    tslib_1.__extends(ExpressionEngine, _super);
    function ExpressionEngine(context) {
        return _super.call(this, context) || this;
    }
    ExpressionEngine.prototype.eval = function (expr) {
        var expression = new Expression(expr);
        return expression.eval(this.getContext());
    };
    ExpressionEngine.prototype.getContext = function () {
        if (!this.context) {
            this.context = new ExpressionContext();
        }
        return this.context;
    };
    ExpressionEngine.prototype.addFun = function (name, func) {
        if (name && typeof func === 'function') {
            this.getContext().set(name, func);
        }
    };
    return ExpressionEngine;
}(AbstractExpressionEngine));
export { ExpressionEngine };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9lbmdpbmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4cHJlc3Npb24tZW5naW5lLyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24tZW5naW5lL2V4cHJlc3Npb25fZW5naW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFeEU7SUFBc0MsNENBQXdCO0lBRTVELDBCQUFZLE9BQTRCO2VBQ3RDLGtCQUFNLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBTU0sK0JBQUksR0FBWCxVQUFZLElBQVk7UUFDdEIsSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFLTSxxQ0FBVSxHQUFqQjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFNTSxpQ0FBTSxHQUFiLFVBQWMsSUFBWSxFQUFFLElBQThCO1FBQ3hELElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUN0QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFsQ0QsQ0FBc0Msd0JBQXdCLEdBa0M3RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb25Db250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHQvaW5kZXhcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbkNvbW1vbkZ1bmN0aW9uLCBJRXhwcmVzc2lvbkNvbnRleHQgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24vaW5kZXhcIjtcclxuaW1wb3J0IHsgQWJzdHJhY3RFeHByZXNzaW9uRW5naW5lIH0gZnJvbSBcIi4vYWJzdHJhY3RfZXhwcmVzc2lvbl9lbmdpbmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uRW5naW5lIGV4dGVuZHMgQWJzdHJhY3RFeHByZXNzaW9uRW5naW5lIHtcclxuICBwcm90ZWN0ZWQgY29udGV4dDogSUV4cHJlc3Npb25Db250ZXh0O1xyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ/OiBJRXhwcmVzc2lvbkNvbnRleHQpIHtcclxuICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDorqHnrpfooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXhwciDooajovr7lvI9cclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZXZhbChleHByOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgY29uc3QgZXhwcmVzc2lvbiA9IG5ldyBFeHByZXNzaW9uKGV4cHIpO1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb24uZXZhbCh0aGlzLmdldENvbnRleHQoKSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluihqOi+vuW8j+S4iuS4i+aWh1xyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDb250ZXh0KCk6IElFeHByZXNzaW9uQ29udGV4dCB7XHJcbiAgICBpZiAoIXRoaXMuY29udGV4dCkge1xyXG4gICAgICB0aGlzLmNvbnRleHQgPSBuZXcgRXhwcmVzc2lvbkNvbnRleHQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmNvbnRleHQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa3u+WKoOiHquWumuS5ieaWueazlVxyXG4gICAqIEBwYXJhbSBuYW1lIOaWueazleWQjVxyXG4gICAqIEBwYXJhbSBmdW5jIOaWueazleS9k1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGRGdW4obmFtZTogc3RyaW5nLCBmdW5jOiBFeHByZXNzaW9uQ29tbW9uRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgIGlmIChuYW1lICYmIHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMuZ2V0Q29udGV4dCgpLnNldChuYW1lLCBmdW5jKTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=