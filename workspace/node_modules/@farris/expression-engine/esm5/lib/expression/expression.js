import * as tslib_1 from "tslib";
import { Compiler } from "../compiler/index";
import { Evaler } from "../evaler/index";
import { DefaultFunctions } from "../function/index";
var Expression = (function () {
    function Expression(expr, context) {
        this.expr = expr;
        this.context = context;
    }
    Expression.prototype.eval = function (context) {
        context = context || this.context;
        var args = context && context.contexts && context.contexts.arguments || {};
        if (this.factory) {
            var ctx = this.buildContext(context);
            var result = this.factory(ctx.contexts)(args);
            return result;
        }
        else {
            var evaler = new Evaler();
            var factory = evaler.eval(this.expr, context);
            var result = factory.apply(void 0, tslib_1.__spread(Object.values(args)));
            return result;
        }
    };
    Expression.prototype.compile = function (context) {
        context = context || this.context;
        var compiler = new Compiler();
        this.factory = compiler.compile(this.expr, context);
        return this;
    };
    Expression.prototype.buildContext = function (context) {
        var contexts = context && context.contexts || {};
        var defaultFunction = new DefaultFunctions(context);
        contexts['DefaultFunction'] = defaultFunction;
        return context;
    };
    return Expression;
}());
export { Expression };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXhwcmVzc2lvbi1lbmdpbmUvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXJEO0lBSUUsb0JBQVksSUFBWSxFQUFFLE9BQTRCO1FBQ3BELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFNTSx5QkFBSSxHQUFYLFVBQVksT0FBNEI7UUFDdEMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2xDLElBQU0sSUFBSSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUM3RSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRCxPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU07WUFDTCxJQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQzVCLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFNLE1BQU0sR0FBRyxPQUFPLGdDQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQztZQUMvQyxPQUFPLE1BQU0sQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQU1NLDRCQUFPLEdBQWQsVUFBZSxPQUE0QjtRQUN6QyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbEMsSUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTyxpQ0FBWSxHQUFwQixVQUFxQixPQUE0QjtRQUMvQyxJQUFNLFFBQVEsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7UUFDbkQsSUFBTSxlQUFlLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxRQUFRLENBQUMsaUJBQWlCLENBQUMsR0FBRyxlQUFlLENBQUM7UUFDOUMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVyIH0gZnJvbSBcIi4uL2NvbXBpbGVyL2luZGV4XCI7XHJcbmltcG9ydCB7IElFeHByZXNzaW9uLCBJRXhwcmVzc2lvbkNvbnRleHQgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBFdmFsZXIgfSBmcm9tIFwiLi4vZXZhbGVyL2luZGV4XCI7XHJcbmltcG9ydCB7IERlZmF1bHRGdW5jdGlvbnMgfSBmcm9tIFwiLi4vZnVuY3Rpb24vaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSUV4cHJlc3Npb24ge1xyXG4gIHByaXZhdGUgZXhwcjogc3RyaW5nO1xyXG4gIHByaXZhdGUgZmFjdG9yeTogRnVuY3Rpb247XHJcbiAgcHJpdmF0ZSBjb250ZXh0OiBJRXhwcmVzc2lvbkNvbnRleHQ7XHJcbiAgY29uc3RydWN0b3IoZXhwcjogc3RyaW5nLCBjb250ZXh0PzogSUV4cHJlc3Npb25Db250ZXh0KSB7XHJcbiAgICB0aGlzLmV4cHIgPSBleHByO1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5omn6KGM6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGNvbnRleHQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGV2YWwoY29udGV4dD86IElFeHByZXNzaW9uQ29udGV4dCkge1xyXG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcy5jb250ZXh0O1xyXG4gICAgY29uc3QgYXJncyA9IGNvbnRleHQgJiYgY29udGV4dC5jb250ZXh0cyAmJiBjb250ZXh0LmNvbnRleHRzLmFyZ3VtZW50cyB8fCB7fTtcclxuICAgIGlmICh0aGlzLmZhY3RvcnkpIHtcclxuICAgICAgY29uc3QgY3R4ID0gdGhpcy5idWlsZENvbnRleHQoY29udGV4dCk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZmFjdG9yeShjdHguY29udGV4dHMpKGFyZ3MpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZXZhbGVyID0gbmV3IEV2YWxlcigpO1xyXG4gICAgICBjb25zdCBmYWN0b3J5ID0gZXZhbGVyLmV2YWwodGhpcy5leHByLCBjb250ZXh0KTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gZmFjdG9yeSguLi5PYmplY3QudmFsdWVzKGFyZ3MpKTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog57yW6K+R6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBpbGUoY29udGV4dD86IElFeHByZXNzaW9uQ29udGV4dCk6IEV4cHJlc3Npb24ge1xyXG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcy5jb250ZXh0O1xyXG4gICAgY29uc3QgY29tcGlsZXIgPSBuZXcgQ29tcGlsZXIoKTtcclxuICAgIHRoaXMuZmFjdG9yeSA9IGNvbXBpbGVyLmNvbXBpbGUodGhpcy5leHByLCBjb250ZXh0KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBwcml2YXRlIGJ1aWxkQ29udGV4dChjb250ZXh0PzogSUV4cHJlc3Npb25Db250ZXh0KSB7XHJcbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQgJiYgY29udGV4dC5jb250ZXh0cyB8fCB7fTtcclxuICAgIGNvbnN0IGRlZmF1bHRGdW5jdGlvbiA9IG5ldyBEZWZhdWx0RnVuY3Rpb25zKGNvbnRleHQpO1xyXG4gICAgY29udGV4dHNbJ0RlZmF1bHRGdW5jdGlvbiddID0gZGVmYXVsdEZ1bmN0aW9uO1xyXG4gICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgfVxyXG59Il19