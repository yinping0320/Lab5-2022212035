(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@farris/expression-engine', ['exports'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['expression-engine'] = {})));
}(this, (function (exports) { 'use strict';

    var ExpressionContext = (function () {
        function ExpressionContext() {
            this._contexts = {};
        }
        Object.defineProperty(ExpressionContext.prototype, "contexts", {
            get: function () {
                return this._contexts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExpressionContext.prototype, "arguments", {
            get: function () {
                return this._arguments;
            },
            enumerable: true,
            configurable: true
        });
        ExpressionContext.prototype.set = function (key, value) {
            this._contexts[key] = value;
        };
        ExpressionContext.prototype.setArgument = function (key, value) {
            this._arguments[key] = value;
        };
        ExpressionContext.prototype.clear = function () {
            this._arguments = {};
        };
        return ExpressionContext;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var DefaultFunctions = (function () {
        function DefaultFunctions(context) {
            this.context = context;
        }
        DefaultFunctions.prototype.GetChainedPropertyValue = function (chainedPropName) {
            return this.eval(chainedPropName + ";")();
        };
        DefaultFunctions.prototype.GetContextParameter = function (propertyName) {
            return this.eval("" + propertyName)();
        };
        DefaultFunctions.prototype.GetSessionValue = function (propertyName) {
            return this.eval("" + propertyName);
        };
        DefaultFunctions.prototype.eval = function (expr) {
            var contexts = this.context && this.context.contexts || {};
            var args = contexts.arguments || {};
            var signature = Object.keys(args).join(',');
            var hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
            if (!hasReturnStatement) {
                expr = "return " + expr;
            }
            var scopeNames = Object.getOwnPropertyNames(contexts);
            var scopeVariable = "__scope__" + new Date().valueOf();
            return new Function(scopeVariable, "\n      " + scopeNames.map(function (key) { return "var " + key + " = " + scopeVariable + "['" + key + "'];"; }).join('\r\n') + "\n      return function anonymous(" + signature + ") {\n        try{ \n" + expr + "\n }catch(e){console.error(e);}\n      };")(contexts);
        };
        DefaultFunctions.prototype.GetComputeJsonData = function (setName, propName) {
            console.warn("GetComputeJsonData\u4E0D\u652F\u6301");
            return null;
        };
        DefaultFunctions.prototype.GetInjectedEntity = function (name) {
            console.warn("GetInjectedEntity\u4E0D\u652F\u6301");
            return null;
        };
        DefaultFunctions.prototype.Sum = function (paramArray) {
            var sum = 0;
            for (var i = 0; i < paramArray.length; i++) {
                sum += paramArray[i];
            }
            return sum;
        };
        DefaultFunctions.prototype.SumByProp = function (chainedPropName, propertyName) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    var result = array.reduce((total,item)=>{\n      const value = DefaultFunction.getPropValue(item,\"" + propertyName + "\");\n      if(Object.prototype.toString.call(value) === '[object Number]'){\n        total = total + value;\n      }\n      return total;\n    },0);\n    return result;\n    ")();
        };
        DefaultFunctions.prototype.CountByProp = function (chainedPropName, propertyName) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    var result = array.reduce((count,item)=>{\n      const isPropExist = DefaultFunction.hasProp(item,\"" + propertyName + "\");\n      if(isPropExist){\n        count ++;\n      }\n      return count;\n    },0);\n    return result;\n    ")();
        };
        DefaultFunctions.prototype.AvgByProp = function (chainedPropName, propertyName) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    var result = array.reduce((total,item)=>{\n      var value = DefaultFunction.getPropValue(item,\"" + propertyName + "\");\n      if(Object.prototype.toString.call(value) === '[object Number]'){\n        total = total + value;\n      }\n      return total;\n    },0);\n    return parseFloat((result/array.length).toFixed(2));\n    ")();
        };
        DefaultFunctions.prototype.MaxByProp = function (chainedPropName, propertyName) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    var result = array.reduce((max,item)=>{\n      var value = DefaultFunction.getPropValue(item,\"" + propertyName + "\");\n      if(value!==undefined){\n        if(Object.prototype.toString.apply(value)!==\"[object Number]\"){\n          console.warn(\"\u5BF9\u8C61\"+JSON.stringify(item) + \"\u4E2D\uFF0C\u5C5E\u6027 " + propertyName + " \u4E0D\u662F\u6570\u5B57\u3002\");\n        }\n        max = max>=value?max:value;\n      }\n      return max;\n    },0);\n    return result;\n    ")();
        };
        DefaultFunctions.prototype.MinByProp = function (chainedPropName, propertyName) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    var result = array.reduce((min,item)=>{\n      var value = DefaultFunction.getPropValue(item,\"" + propertyName + "\");\n      if(value!==undefined){\n        if(Object.prototype.toString.apply(value)!==\"[object Number]\"){\n          console.warn(\"\u5BF9\u8C61\"+JSON.stringify(item) + \"\u4E2D\uFF0C\u5C5E\u6027 " + propertyName + " \u4E0D\u662F\u6570\u5B57\u3002\");\n        }\n        min = min<=value?min:value;\n      }\n      return min;\n    },undefined);\n    return result;\n    ")();
        };
        DefaultFunctions.prototype.getIterable = function (item) {
            if (item && item.hasOwnProperty('__type__') && item['__type__'] === 'BindingList') {
                return item.toArray() || [];
            }
            else if (item && item.hasOwnProperty('__type__') && item['__type__'] === 'EntityList') {
                return item.items || [];
            }
            else if (item && item.hasOwnProperty('__type__') && (item['__type__'] === 'List' || item['__type__'] === 'Entity')) {
                return item['__items__'] || [];
            }
            else if (Object.prototype.toString.apply(item) === "[object Array]") {
                return item;
            }
            else {
                return [];
            }
        };
        DefaultFunctions.prototype.getPropValue = function (target, prop) {
            var paths = prop.split('.').filter(function (p) { return p; });
            return paths && paths.reduce(function (result, path) {
                if (result && result.hasOwnProperty(path)) {
                    return result[path];
                }
                else {
                    return undefined;
                }
            }, target);
        };
        DefaultFunctions.prototype.hasProp = function (target, prop) {
            var paths = prop.split('.').filter(function (p) { return p; });
            var isPropExist = true;
            if (paths) {
                for (var idx = 0; idx < paths.length; idx++) {
                    var path = paths[idx];
                    if (!target.hasOwnProperty(path)) {
                        isPropExist = false;
                        break;
                    }
                    target = target[path];
                }
            }
            else {
                isPropExist = false;
            }
            return isPropExist;
        };
        DefaultFunctions.prototype.StringSubstring = function (originalString, startIndex, length) {
            if (!originalString) {
                return originalString;
            }
            return originalString.substring(startIndex, length);
        };
        DefaultFunctions.prototype.Length = function (originalString) {
            return originalString && originalString.hasOwnProperty('length') && originalString.length || 0;
        };
        DefaultFunctions.prototype.StringLength = function (originalString) {
            return originalString && originalString.hasOwnProperty('length') && originalString.length || 0;
        };
        DefaultFunctions.prototype.StringReplace = function (originalString, oldValue, newValue) {
            return originalString.replace(new RegExp(oldValue, 'g'), newValue);
        };
        DefaultFunctions.prototype.ToUpper = function (originalString) {
            if (!originalString) {
                return originalString;
            }
            return originalString.toUpperCase();
        };
        DefaultFunctions.prototype.ToLower = function (originalString) {
            if (!originalString) {
                return originalString;
            }
            return originalString.toLowerCase();
        };
        DefaultFunctions.prototype.IndexOf = function (originalString, value) {
            if (originalString) {
                return originalString.indexOf(value);
            }
            else {
                return -1;
            }
        };
        DefaultFunctions.prototype.LastIndexOf = function (originalString, value) {
            return originalString.lastIndexOf(value);
        };
        DefaultFunctions.prototype.TrimStart = function (originalString) {
            return originalString && originalString.trimLeft();
        };
        DefaultFunctions.prototype.TrimEnd = function (originalString) {
            return originalString && originalString.trimRight();
        };
        DefaultFunctions.prototype.Trim = function (originalString) {
            return originalString.trim();
        };
        DefaultFunctions.prototype.SubString = function (originalString, startIndex, length) {
            return this.StringSubstring(originalString, startIndex, length);
        };
        DefaultFunctions.prototype.GetStringLength = function (obj) {
            return this.StringLength(obj);
        };
        DefaultFunctions.prototype.Replace = function (originalString, oldValue, newValue) {
            return this.StringReplace(originalString, oldValue, newValue);
        };
        DefaultFunctions.prototype.CreateGuid = function () {
            var d = new Date().getTime();
            var uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, (function (c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            }));
            return uuid.toUpperCase();
        };
        DefaultFunctions.prototype.CaseToSql = function (col) {
            if (col == null || col == "")
                return ("参数为空");
            var parameter = col.split(",");
            if (parameter.length == 0 || parameter.length == 1) {
                return ("函数CaseToSql,参数个数不正确");
            }
            var resultSql = " case " + parameter[0];
            var temp = "";
            for (var i = 1; i <= parameter.length; i++) {
                temp = parameter[i].replace("{", "");
                temp = temp.replace("}", "");
                var valueStr = temp.split(",");
                resultSql = resultSql + " when " + valueStr[0] + " then " + valueStr[1];
            }
            resultSql = resultSql + "end ";
            return resultSql;
        };
        DefaultFunctions.prototype.IsNullEmpty = function (str) {
            if (str != null && str != "") {
                return true;
            }
            else {
                return false;
            }
        };
        DefaultFunctions.prototype.Add = function () {
            var str = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                str[_i] = arguments[_i];
            }
            var strTem = "";
            for (var i = 0; i < str.length; i++) {
                strTem += str[i];
            }
            return strTem;
        };
        DefaultFunctions.prototype.ToByte = function (obj) {
            return obj >> 0;
        };
        DefaultFunctions.prototype.ToStringX = function (obj) {
            return JSON.stringify(obj);
        };
        DefaultFunctions.prototype.ToDateTime = function (obj) {
            return new Date(obj);
        };
        DefaultFunctions.prototype.ToBoolean = function (obj) {
            return ((JSON.stringify(obj) != null) && JSON.stringify(obj) == "true");
        };
        DefaultFunctions.prototype.ToDecimal = function (obj) {
            return Number(obj);
        };
        DefaultFunctions.prototype.ToBigDecimal = function (value) {
            return Number(value);
        };
        DefaultFunctions.prototype.ToDouble = function (obj) {
            return Number(obj);
        };
        DefaultFunctions.prototype.ToFloat = function (obj) {
            return Number(obj);
        };
        DefaultFunctions.prototype.ToInt16 = function (obj) {
            return Number(obj);
        };
        DefaultFunctions.prototype.ToInt32 = function (obj) {
            return Number(obj);
        };
        DefaultFunctions.prototype.ToChineseMoney = function (money) {
            var cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
            var cnIntRadice = new Array('', '拾', '佰', '仟');
            var cnIntUnits = new Array('', '万', '亿', '兆');
            var cnDecUnits = new Array('角', '分', '毫', '厘');
            var cnInteger = '整';
            var cnIntLast = '元';
            var maxNum = 999999999999999.9999;
            var integerNum;
            var decimalNum;
            var chineseStr = '';
            var parts;
            if (money >= maxNum) {
                return '';
            }
            if (money == 0) {
                chineseStr = cnNums[0] + cnIntLast + cnInteger;
                return chineseStr;
            }
            var moneyStr = money.toString();
            if (moneyStr.indexOf('.') == -1) {
                integerNum = moneyStr;
                decimalNum = '';
            }
            else {
                parts = moneyStr.split('.');
                integerNum = parts[0];
                decimalNum = parts[1].substr(0, 4);
            }
            if (parseInt(integerNum, 10) > 0) {
                var zeroCount = 0;
                var IntLen = integerNum.length;
                for (var i = 0; i < IntLen; i++) {
                    var n = integerNum.substr(i, 1);
                    var p = IntLen - i - 1;
                    var q = p / 4;
                    var m = p % 4;
                    if (n == '0') {
                        zeroCount++;
                    }
                    else {
                        if (zeroCount > 0) {
                            chineseStr += cnNums[0];
                        }
                        zeroCount = 0;
                        chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];
                    }
                    if (m == 0 && zeroCount < 4) {
                        chineseStr += cnIntUnits[q];
                    }
                }
                chineseStr += cnIntLast;
            }
            if (decimalNum != '') {
                var decLen = decimalNum.length;
                for (var i = 0; i < decLen; i++) {
                    var n = decimalNum.substr(i, 1);
                    if (n != '0') {
                        chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                    }
                }
            }
            if (chineseStr == '') {
                chineseStr += cnNums[0] + cnIntLast + cnInteger;
            }
            else if (decimalNum == '') {
                chineseStr += cnInteger;
            }
            return chineseStr;
        };
        DefaultFunctions.prototype.IsNull = function (obj) {
            return obj == null;
        };
        DefaultFunctions.prototype.IsNullOrWhiteSpace = function (obj) {
            if (obj == null || obj == "" || obj.trim() == "") {
                return true;
            }
            return false;
        };
        DefaultFunctions.prototype.IsNaN = function (obj) {
            return isNaN(Number(obj));
        };
        DefaultFunctions.prototype.IsNumber = function (obj) {
            return !isNaN(Number(obj));
        };
        DefaultFunctions.prototype.sin = function (value) {
            return Math.sin(value);
        };
        DefaultFunctions.prototype.cos = function (value) {
            return Math.cos(value);
        };
        DefaultFunctions.prototype.random = function (value) {
            return Math.random();
        };
        DefaultFunctions.prototype.ceil = function (value) {
            return Math.ceil(value);
        };
        DefaultFunctions.prototype.abs = function (value) {
            return Math.abs(value);
        };
        DefaultFunctions.prototype.floor = function (value) {
            return Math.floor(value);
        };
        DefaultFunctions.prototype.round = function (value, digits) {
            return Math.round(value * Math.pow(10, digits)) / Math.pow(10, digits);
        };
        DefaultFunctions.prototype.bankerRound = function (value, num) {
            if (typeof value !== "number") {
                console.error("输入值必须是数字！");
                return undefined;
            }
            return value.toFixed(num);
        };
        DefaultFunctions.prototype.GetBirthday = function (idCard) {
            var ret = this.IsIDcard(idCard);
            if (!ret) {
                return null;
            }
            var birthdayValue = "";
            if (15 == idCard.length) {
                birthdayValue = idCard.substring(6, 8);
                if (Number(birthdayValue) < 10) {
                    birthdayValue = "20" + birthdayValue;
                }
                else {
                    birthdayValue = "19" + birthdayValue;
                }
                birthdayValue = birthdayValue + '-' + idCard.substring(8, 10) + '-' + idCard.substring(10, 12);
            }
            else if (18 == idCard.length) {
                return idCard.substr(6, 4) + "-" + idCard.substr(10, 2) + "-" + idCard.substr(12, 2);
            }
            return birthdayValue;
        };
        DefaultFunctions.prototype.GetAge = function (idCard) {
            if (!idCard) {
                return;
            }
            var birthDay = this.GetBirthday(idCard);
            if (birthDay == null || birthDay == "") {
                return -1;
            }
            var birthDate = new Date(birthDay.replace(/-/g, "/"));
            var nowDate = new Date();
            var age = nowDate.getFullYear() - birthDate.getFullYear();
            if (nowDate.getMonth() < birthDate.getMonth() || (nowDate.getMonth() == birthDate.getMonth()
                && nowDate.getDate() < birthDate.getDate())) {
                age--;
            }
            return age;
        };
        DefaultFunctions.prototype.GetSex = function (idCard) {
            if (this.IsIDcard(idCard) == false) {
                return null;
            }
            var strSex = "";
            if (idCard.length == 18) {
                strSex = idCard.substring(14, 17);
            }
            else if (idCard.length == 15) {
                strSex = idCard.substring(12, 15);
            }
            if (Number(strSex) % 2 == 0) {
                strSex = "女";
            }
            else {
                strSex = "男";
            }
            return strSex;
        };
        DefaultFunctions.prototype.IsIDcard = function (idcard) {
            var regularExpression = /(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$)|([1-9][0-9]{5}[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{3})/;
            return regularExpression.test(idcard);
        };
        DefaultFunctions.prototype.DateTimeAddDays = function (date, value) {
            if (!date) {
                return date;
            }
            var tempDate = new Date(date.replace(/-/g, "/"));
            tempDate.setDate(tempDate.getDate() + value);
            return tempDate;
        };
        DefaultFunctions.prototype.DateTimeAddMonths = function (date, value) {
            if (!date) {
                return date;
            }
            var tempDate = new Date(date.replace(/-/g, "/"));
            tempDate.setMonth(tempDate.getMonth() + value);
            return tempDate;
        };
        DefaultFunctions.prototype.DateTimeAddYears = function (date, value) {
            if (!date) {
                return date;
            }
            var tempDate = new Date(date.replace(/-/g, "/"));
            tempDate.setFullYear(tempDate.getFullYear() + value);
            return tempDate;
        };
        DefaultFunctions.prototype.GetFirstDayOfMonth = function (date) {
            if (!date) {
                return date;
            }
            var tempDate = new Date(date.replace(/-/g, "/"));
            tempDate.setDate(1);
            return tempDate;
        };
        DefaultFunctions.prototype.GetLastDayOfMonth = function (date) {
            if (!date) {
                return date;
            }
            var endDate = new Date(date.replace(/-/g, "/"));
            var month = endDate.getMonth();
            var nextMonth = ++month;
            var nextMonthFirstDay = new Date(endDate.getFullYear(), nextMonth, 1);
            var oneDay = 1000 * 60 * 60 * 24;
            return new Date(Number(nextMonthFirstDay) - oneDay);
        };
        DefaultFunctions.prototype.GetDateTimeNow = function () {
            return new Date();
        };
        DefaultFunctions.prototype.CompareDate = function (str1, str2) {
            if (!str1 || !str2) {
                return;
            }
            var tempDate1 = new Date(str1.replace(/-/g, "/"));
            var tempDate2 = new Date(str2.replace(/-/g, "/"));
            if (tempDate1.getTime() > tempDate2.getTime()) {
                return 1;
            }
            if (tempDate1.getTime() == tempDate2.getTime()) {
                return 0;
            }
            if (tempDate1.getTime() < tempDate2.getTime()) {
                return -1;
            }
        };
        DefaultFunctions.prototype.FormatDate = function (format) {
            format = format || 'yyyy-MM-dd';
            return this.FormatDefineDate(format, new Date());
        };
        DefaultFunctions.prototype.FormatDefineDate = function (format, datesStr) {
            if (datesStr === void 0) {
                datesStr = null;
            }
            var dates;
            if (datesStr == null) {
                dates = new Date();
            }
            else {
                if (typeof datesStr === 'string') {
                    dates = new Date(datesStr.replace(/-/g, "/"));
                }
                else if (Object.prototype.toString.call(datesStr) === '[object Date]') {
                    dates = datesStr;
                }
                else {
                    console.error('日期参数仅支持日期字符串或日期对象');
                    return null;
                }
            }
            var o = {
                "M+": dates.getMonth() + 1,
                "d+": dates.getDate(),
                "H+": dates.getHours(),
                "m+": dates.getMinutes(),
                "s+": dates.getSeconds(),
                "q+": Math.floor((dates.getMonth() + 3) / 3),
                "S": dates.getMilliseconds()
            };
            if (/(y+)/.test(format)) {
                format = format.replace(RegExp.$1, (dates.getFullYear() + "").substr(4 - RegExp.$1.length));
            }
            for (var k in o) {
                if (new RegExp("(" + k + ")").test(format)) {
                    format = format.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
                }
            }
            return format;
        };
        DefaultFunctions.prototype.Today = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var day2 = new Date();
                day2.setTime(day2.getTime());
                return this.FormatDefineDate('yyyy-MM-dd', day2);
            }
            else {
                var dd = new Date(date);
                dd.setDate(dd.getDate());
                return this.FormatDefineDate('yyyy-MM-dd', dd);
            }
        };
        DefaultFunctions.prototype.Yesterday = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var day1 = new Date();
                day1.setTime(day1.getTime() - 24 * 60 * 60 * 1000);
                return this.FormatDefineDate('yyyy-MM-dd', day1);
            }
            else {
                var dd = new Date(date);
                dd.setDate(dd.getDate() - 1);
                return this.FormatDefineDate('yyyy-MM-dd', dd);
            }
        };
        DefaultFunctions.prototype.Tomorrow = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setDate(dd.getDate() + 1);
                return this.FormatDefineDate('yyyy-MM-dd', dd);
            }
            else {
                var dd = new Date(date);
                dd.setDate(dd.getDate() + 1);
                return this.FormatDefineDate('yyyy-MM-dd', dd);
            }
        };
        DefaultFunctions.prototype.ThisYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setFullYear(dd.getFullYear());
                return dd.getFullYear() + "";
            }
            else {
                var dd = new Date(date);
                dd.setFullYear(dd.getFullYear());
                return dd.getFullYear() + "";
            }
        };
        DefaultFunctions.prototype.LastYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setFullYear(dd.getFullYear() - 1);
                return dd.getFullYear() + "";
            }
            else {
                var dd = new Date(date);
                dd.setFullYear(dd.getFullYear() - 1);
                return dd.getFullYear() + "";
            }
        };
        DefaultFunctions.prototype.NextYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setFullYear(dd.getFullYear() + 1);
                return dd.getFullYear() + "";
            }
            else {
                var dd = new Date(date);
                dd.setFullYear(dd.getFullYear() + 1);
                return dd.getFullYear() + "";
            }
        };
        DefaultFunctions.prototype.ThisMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setMonth(dd.getMonth() + 1);
                return dd.getMonth() + "";
            }
            else {
                var dd = new Date(date);
                dd.setMonth(dd.getMonth() + 1);
                return dd.getMonth() + "";
            }
        };
        DefaultFunctions.prototype.LastMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setMonth(dd.getMonth());
                return dd.getMonth() + "";
            }
            else {
                var dd = new Date(date);
                dd.setMonth(dd.getMonth());
                return dd.getMonth() + "";
            }
        };
        DefaultFunctions.prototype.NextMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                dd.setMonth(dd.getMonth() + 2);
                return dd.getMonth() + "";
            }
            else {
                var dd = new Date(date);
                dd.setMonth(dd.getMonth() + 2);
                return dd.getMonth() + "";
            }
        };
        DefaultFunctions.prototype.DayOfWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var dd = new Date();
                return dd.getDay() + "";
            }
            else {
                var dd = new Date(date);
                return dd.getDay() + "";
            }
        };
        DefaultFunctions.prototype.isLeapYear = function (year) {
            return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
        };
        DefaultFunctions.prototype.getMonthDays = function (year, month) {
            return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month] || (this.isLeapYear(year) ? 29 : 28);
        };
        DefaultFunctions.prototype.ThisWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            var dd;
            var year;
            var month;
            var days;
            if (date == null) {
                dd = new Date();
                year = dd.getFullYear(),
                    month = dd.getMonth(),
                    days = dd.getDate();
            }
            else {
                dd = new Date(date);
                year = dd.getFullYear(),
                    month = dd.getMonth(),
                    days = dd.getDate();
            }
            for (var i = 0; i < month; i++) {
                days += this.getMonthDays(year, i);
            }
            var yearFirstDay = new Date(year, 0, 1).getDay() || 7;
            var week = null;
            if (yearFirstDay == 1) {
                week = Math.ceil(days / yearFirstDay);
            }
            else {
                days -= (7 - yearFirstDay + 1);
                week = Math.ceil(days / 7) + 1;
            }
            return week;
        };
        DefaultFunctions.prototype.LastWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            return (Number(this.ThisWeek(date)) - 1) + "";
        };
        DefaultFunctions.prototype.NextWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            return (Number(this.ThisWeek(date)) + 1) + "";
        };
        DefaultFunctions.prototype.FirstDayOfWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                return this.FormatDefineDate('yyyy-MM-dd', monday);
            }
            else {
                var currentDate = new Date(date);
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                return this.FormatDefineDate('yyyy-MM-dd', monday);
            }
        };
        DefaultFunctions.prototype.LastDayOfWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                var sunday = new Date(monday.getTime() + (6 * millisecond));
                return this.FormatDefineDate('yyyy-MM-dd', sunday);
            }
            else {
                var currentDate = new Date(date);
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                var sunday = new Date(monday.getTime() + (6 * millisecond));
                return this.FormatDefineDate('yyyy-MM-dd', sunday);
            }
        };
        DefaultFunctions.prototype.FirstDayOfLastWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                monday.setDate(monday.getDate() - 7);
                return this.FormatDefineDate('yyyy-MM-dd', monday);
            }
            else {
                var currentDate = new Date(date);
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                monday.setDate(monday.getDate() - 7);
                return this.FormatDefineDate('yyyy-MM-dd', monday);
            }
        };
        DefaultFunctions.prototype.LastDayOfLastWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                var sunday = new Date(monday.getTime() + (6 * millisecond));
                sunday.setDate(sunday.getDate() - 7);
                return this.FormatDefineDate('yyyy-MM-dd', sunday);
            }
            else {
                var currentDate = new Date(date);
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                var sunday = new Date(monday.getTime() + (6 * millisecond));
                sunday.setDate(sunday.getDate() - 7);
                return this.FormatDefineDate('yyyy-MM-dd', sunday);
            }
        };
        DefaultFunctions.prototype.FirstDayOfNextWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                monday.setDate(monday.getDate() + 7);
                return this.FormatDefineDate('yyyy-MM-dd', monday);
            }
            else {
                var currentDate = new Date(date);
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                monday.setDate(monday.getDate() + 7);
                return this.FormatDefineDate('yyyy-MM-dd', monday);
            }
        };
        DefaultFunctions.prototype.LastDayOfNextWeek = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                var sunday = new Date(monday.getTime() + (6 * millisecond));
                sunday.setDate(sunday.getDate() + 7);
                return this.FormatDefineDate('yyyy-MM-dd', sunday);
            }
            else {
                var currentDate = new Date(date);
                var week = currentDate.getDay();
                var millisecond = 1000 * 60 * 60 * 24;
                var minusDay = week != 0 ? week - 1 : 6;
                var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
                var sunday = new Date(monday.getTime() + (6 * millisecond));
                sunday.setDate(sunday.getDate() + 7);
                return this.FormatDefineDate('yyyy-MM-dd', sunday);
            }
        };
        DefaultFunctions.prototype.FirstDayOfMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var currentMonth = currentDate.getMonth();
                var currentYear = currentDate.getFullYear();
                var firstDay = new Date(currentYear, currentMonth, 1);
                return this.FormatDefineDate('yyyy-MM-dd', firstDay);
            }
            else {
                var currentDate = new Date(date);
                var currentMonth = currentDate.getMonth();
                var currentYear = currentDate.getFullYear();
                var firstDay = new Date(currentYear, currentMonth, 1);
                return this.FormatDefineDate('yyyy-MM-dd', firstDay);
            }
        };
        DefaultFunctions.prototype.LastDayOfMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var fullYear = currentDate.getFullYear();
                var month = currentDate.getMonth() + 1;
                var endOfMonth = new Date(fullYear, month, 0);
                return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
            }
            else {
                var currentDate = new Date(date);
                var fullYear = currentDate.getFullYear();
                var month = currentDate.getMonth() + 1;
                var endOfMonth = new Date(fullYear, month, 0);
                return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
            }
        };
        DefaultFunctions.prototype.FirstDayOfLastMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var currentMonth = currentDate.getMonth();
                var currentYear = currentDate.getFullYear();
                var firstDay = new Date(currentYear, currentMonth, 1);
                firstDay.setMonth(firstDay.getMonth());
                return this.FormatDefineDate('yyyy-MM-dd', firstDay);
            }
            else {
                var currentDate = new Date(date);
                var currentMonth = currentDate.getMonth();
                var currentYear = currentDate.getFullYear();
                var firstDay = new Date(currentYear, currentMonth, 1);
                firstDay.setMonth(firstDay.getMonth());
                return this.FormatDefineDate('yyyy-MM-dd', firstDay);
            }
        };
        DefaultFunctions.prototype.LastDayOfLastMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var fullYear = currentDate.getFullYear();
                var month = currentDate.getMonth() + 1;
                var endOfMonth = new Date(fullYear, month, 0);
                endOfMonth.setMonth(endOfMonth.getMonth());
                return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
            }
            else {
                var currentDate = new Date(date);
                var fullYear = currentDate.getFullYear();
                var month = currentDate.getMonth() + 1;
                var endOfMonth = new Date(fullYear, month, 0);
                endOfMonth.setMonth(endOfMonth.getMonth());
                return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
            }
        };
        DefaultFunctions.prototype.FirstDayOfNextMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var currentMonth = currentDate.getMonth();
                var currentYear = currentDate.getFullYear();
                var firstDay = new Date(currentYear, currentMonth, 1);
                firstDay.setMonth(firstDay.getMonth() + 2);
                return this.FormatDefineDate('yyyy-MM-dd', firstDay);
            }
            else {
                var currentDate = new Date(date);
                var currentMonth = currentDate.getMonth();
                var currentYear = currentDate.getFullYear();
                var firstDay = new Date(currentYear, currentMonth, 1);
                firstDay.setMonth(firstDay.getMonth() + 2);
                return this.FormatDefineDate('yyyy-MM-dd', firstDay);
            }
        };
        DefaultFunctions.prototype.LastDayOfNextMonth = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                var fullYear = currentDate.getFullYear();
                var month = currentDate.getMonth() + 1;
                var endOfMonth = new Date(fullYear, month, 0);
                endOfMonth.setMonth(endOfMonth.getMonth() + 2);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                var fullYear = currentDate.getFullYear();
                var month = currentDate.getMonth() + 1;
                var endOfMonth = new Date(fullYear, month, 0);
                endOfMonth.setMonth(endOfMonth.getMonth() + 2);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.FirstDayOfYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                currentDate.setDate(1);
                currentDate.setMonth(0);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                currentDate.setDate(1);
                currentDate.setMonth(0);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.LastDayOfYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                currentDate.setDate(0);
                currentDate.setMonth(11);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                currentDate.setFullYear(currentDate.getFullYear() + 1);
                currentDate.setDate(0);
                currentDate.setMonth(11);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.FirstDayOfLastYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                currentDate.setFullYear(currentDate.getFullYear() - 1);
                currentDate.setDate(1);
                currentDate.setMonth(0);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                currentDate.setFullYear(currentDate.getFullYear() - 1);
                currentDate.setDate(1);
                currentDate.setMonth(0);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.LastDayOfLastYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                currentDate.setFullYear(currentDate.getFullYear() - 1);
                currentDate.setDate(0);
                currentDate.setMonth(11);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                currentDate.setFullYear(currentDate.getFullYear());
                currentDate.setDate(0);
                currentDate.setMonth(11);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.FirstDayOfNextYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                currentDate.setFullYear(currentDate.getFullYear() + 1);
                currentDate.setDate(1);
                currentDate.setMonth(0);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                currentDate.setFullYear(currentDate.getFullYear() + 1);
                currentDate.setDate(1);
                currentDate.setMonth(0);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.LastDayOfNextYear = function (date) {
            if (date === void 0) {
                date = null;
            }
            if (date == null) {
                var currentDate = new Date();
                currentDate.setFullYear(currentDate.getFullYear() + 1);
                currentDate.setDate(0);
                currentDate.setMonth(11);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
            else {
                var currentDate = new Date(date);
                currentDate.setFullYear(currentDate.getFullYear() + 2);
                currentDate.setDate(0);
                currentDate.setMonth(11);
                return this.FormatDefineDate('yyyy-MM-dd', currentDate);
            }
        };
        DefaultFunctions.prototype.GetDate = function (format, date) {
            if (date === void 0) {
                date = null;
            }
            switch (format) {
                case "DD":
                    return this.Today(date);
                case "LD":
                    return this.Yesterday(date);
                case "ND":
                    return this.Tomorrow(date);
                case "YY":
                    return this.ThisYear(date);
                case "LY":
                    return this.LastYear(date);
                case "NY":
                    return this.NextYear(date);
                case "MM":
                    return this.ThisMonth(date);
                case "LM":
                    return this.LastMonth(date);
                case "NM":
                    return this.NextMonth(date);
                case "WD":
                    return this.DayOfWeek(date);
                case "WW":
                    return this.ThisWeek(date);
                case "LW":
                    return this.LastWeek(date);
                case "NW":
                    return this.NextWeek(date);
                case "FDW":
                    return this.FirstDayOfWeek(date);
                case "LDW":
                    return this.LastDayOfWeek(date);
                case "FDLW":
                    return this.FirstDayOfLastWeek(date);
                case "LDLW":
                    return this.LastDayOfLastWeek(date);
                case "FDNW":
                    return this.FirstDayOfNextWeek(date);
                case "LDNW":
                    return this.LastDayOfNextWeek(date);
                case "FDM":
                    return this.FirstDayOfMonth(date);
                case "LDM":
                    return this.LastDayOfMonth(date);
                case "FDLM":
                    return this.FirstDayOfLastMonth(date);
                case "LDLM":
                    return this.LastDayOfLastMonth(date);
                case "FDNM":
                    return this.FirstDayOfNextMonth(date);
                case "LDNM":
                    return this.LastDayOfNextMonth(date);
                case "FDY":
                    return this.FirstDayOfYear(date);
                case "LDY":
                    return this.LastDayOfYear(date);
                case "FDLY":
                    return this.FirstDayOfLastYear(date);
                case "LDLY":
                    return this.LastDayOfLastYear(date);
                case "FDNY":
                    return this.FirstDayOfNextYear(date);
                case "LDNY":
                    return this.LastDayOfNextYear(date);
                default:
                    return (date);
            }
        };
        DefaultFunctions.prototype.IsExistRecord = function (chainedPropName, propertyName, matchValue) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    return array.find(item=>item[\"" + propertyName + "\"] === " + matchValue + ")==null?false:true;\n    ")();
        };
        DefaultFunctions.prototype.ListContains = function (chainedPropName, propertyName, matchValue) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    return !array.find(item=> item.hasOwnProperty(\"" + propertyName + "\") && item[\"" + propertyName + "\"].toString().indexOf(\"" + matchValue + "\")!==-1)?false:true;\n    ")();
        };
        DefaultFunctions.prototype.ListGreaterThan = function (chainedPropName, propertyName, matchValue) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    return !array.find(item=> item.hasOwnProperty(\"" + propertyName + "\") && item[\"" + propertyName + "\"] > " + matchValue + ") ? false: true;\n    ")();
        };
        DefaultFunctions.prototype.ListLessThan = function (chainedPropName, propertyName, matchValue) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    return !array.find(item=> item.hasOwnProperty(\"" + propertyName + "\") && item[\"" + propertyName + "\"] < " + matchValue + ") ? false: true;\n    ")();
        };
        DefaultFunctions.prototype.ListStartWith = function (chainedPropName, propertyName, matchValue) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    return !array.find(item=> item.hasOwnProperty(\"" + propertyName + "\") && item[\"" + propertyName + "\"] && item[\"" + propertyName + "\"].toString().startsWith(\"" + matchValue + "\")) ? false: true;\n    ")();
        };
        DefaultFunctions.prototype.ListEndWith = function (chainedPropName, propertyName, matchValue) {
            return this.eval("\n    var list = " + chainedPropName + ";\n    var array = DefaultFunction.getIterable(list);\n    return !array.find(item=> item.hasOwnProperty(\"" + propertyName + "\") && item[\"" + propertyName + "\"] && item[\"" + propertyName + "\"].toString().endsWith(\"" + matchValue + "\")) ? false: true;\n    ")();
        };
        DefaultFunctions.prototype.getComputeJsonData = function (chainedPropName, propertyName) {
            throw new Error("Method not implemented.");
        };
        DefaultFunctions.prototype.Contains = function (originalString, matchString) {
            if (originalString == null || matchString == null) {
                return false;
            }
            else {
                return originalString.indexOf(matchString) != -1;
            }
        };
        DefaultFunctions.prototype.NotContains = function (originalString, matchString) {
            if (originalString == null || matchString == null) {
                return false;
            }
            else {
                return !(originalString.indexOf(matchString) != -1);
            }
        };
        DefaultFunctions.prototype.StartsWith = function (originalString, matchString) {
            if (originalString == null || matchString == null) {
                return false;
            }
            else {
                return originalString.startsWith(matchString);
            }
        };
        DefaultFunctions.prototype.NotStartsWith = function (originalString, matchString) {
            if (originalString == null || matchString == null) {
                return false;
            }
            else {
                return !originalString.startsWith(matchString);
            }
        };
        DefaultFunctions.prototype.EndsWith = function (originalString, matchString) {
            if (originalString == null || matchString == null) {
                return false;
            }
            else {
                return originalString.endsWith(matchString);
            }
        };
        DefaultFunctions.prototype.NotEndsWith = function (originalString, matchString) {
            if (originalString == null || matchString == null) {
                return false;
            }
            else {
                return !originalString.endsWith(matchString);
            }
        };
        DefaultFunctions.prototype.trimStart = function (s, c) {
            if (s == null || s == "" || s.indexOf(c) < 0) {
                return s;
            }
            var startPos = s.indexOf(c);
            s = s.substring(startPos + 1);
            return s;
        };
        DefaultFunctions.prototype.trimEnd = function (s, c) {
            if (s == null || s == "" || s.indexOf(c) < 0) {
                return s;
            }
            var lastPos = s.lastIndexOf(c);
            if (lastPos >= 0) {
                s = s.substring(0, lastPos);
            }
            return s;
        };
        DefaultFunctions.prototype.trimStartEnd = function (s, c) {
            return this.trimEnd(this.trimStart(s, c), c);
        };
        return DefaultFunctions;
    }());

    var Compiler = (function () {
        function Compiler() {
        }
        Compiler.prototype.compile = function (expr, context) {
            var contexts = context && context.contexts || {};
            var args = contexts.arguments || {};
            var signature = Object.keys(args).join(',');
            var defaultFunction = new DefaultFunctions(context);
            contexts['DefaultFunction'] = defaultFunction;
            var hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
            if (!hasReturnStatement) {
                expr = "return " + expr;
            }
            var scopeNames = Object.getOwnPropertyNames(contexts);
            var scopeVariable = "__scope__" + new Date().valueOf();
            return new Function(scopeVariable, "\n      " + scopeNames.map(function (key) { return "var " + key + " = " + scopeVariable + "['" + key + "'];"; }).join('\r\n') + "\n      return function anonymous(" + signature + ") {\n        try{ \n" + expr + "\n }catch(e){console.error(e);}\n      };");
        };
        return Compiler;
    }());

    var Evaler = (function () {
        function Evaler() {
        }
        Evaler.prototype.eval = function (expr, context) {
            var contexts = context && context.contexts || {};
            var args = contexts.arguments || {};
            var signature = Object.keys(args).join(',');
            var defaultFunction = new DefaultFunctions(context);
            contexts['DefaultFunction'] = defaultFunction;
            var hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
            if (!hasReturnStatement) {
                expr = "return " + expr;
            }
            var scopeNames = Object.getOwnPropertyNames(contexts);
            var scopeVariable = "__scope__" + new Date().valueOf();
            return new Function(scopeVariable, "\n      " + scopeNames.map(function (key) { return "var " + key + " = " + scopeVariable + "['" + key + "'];"; }).join('\r\n') + "\n      return function anonymous(" + signature + ") {\n        try{ \n" + expr + "\n }catch(e){console.error(e);}\n      };")(contexts);
        };
        return Evaler;
    }());

    var Expression = (function () {
        function Expression(expr, context) {
            this.expr = expr;
            this.context = context;
        }
        Expression.prototype.eval = function (context) {
            context = context || this.context;
            var args = context && context.contexts && context.contexts.arguments || {};
            if (this.factory) {
                var ctx = this.buildContext(context);
                var result = this.factory(ctx.contexts)(args);
                return result;
            }
            else {
                var evaler = new Evaler();
                var factory = evaler.eval(this.expr, context);
                var result = factory.apply(void 0, __spread(Object.values(args)));
                return result;
            }
        };
        Expression.prototype.compile = function (context) {
            context = context || this.context;
            var compiler = new Compiler();
            this.factory = compiler.compile(this.expr, context);
            return this;
        };
        Expression.prototype.buildContext = function (context) {
            var contexts = context && context.contexts || {};
            var defaultFunction = new DefaultFunctions(context);
            contexts['DefaultFunction'] = defaultFunction;
            return context;
        };
        return Expression;
    }());

    var AbstractExpressionEngine = (function () {
        function AbstractExpressionEngine(context) {
            this.context = context;
        }
        return AbstractExpressionEngine;
    }());

    var ExpressionEngine = (function (_super) {
        __extends(ExpressionEngine, _super);
        function ExpressionEngine(context) {
            return _super.call(this, context) || this;
        }
        ExpressionEngine.prototype.eval = function (expr) {
            var expression = new Expression(expr);
            return expression.eval(this.getContext());
        };
        ExpressionEngine.prototype.getContext = function () {
            if (!this.context) {
                this.context = new ExpressionContext();
            }
            return this.context;
        };
        ExpressionEngine.prototype.addFun = function (name, func) {
            if (name && typeof func === 'function') {
                this.getContext().set(name, func);
            }
        };
        return ExpressionEngine;
    }(AbstractExpressionEngine));

    exports.ExpressionContext = ExpressionContext;
    exports.Expression = Expression;
    exports.Compiler = Compiler;
    exports.Evaler = Evaler;
    exports.DefaultFunctions = DefaultFunctions;
    exports.AbstractExpressionEngine = AbstractExpressionEngine;
    exports.ExpressionEngine = ExpressionEngine;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-expression-engine.umd.js.map