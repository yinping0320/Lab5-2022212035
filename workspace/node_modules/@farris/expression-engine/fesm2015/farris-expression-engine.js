class ExpressionContext {
    get contexts() {
        return this._contexts;
    }
    get arguments() {
        return this._arguments;
    }
    constructor() {
        this._contexts = {};
    }
    set(key, value) {
        this._contexts[key] = value;
    }
    setArgument(key, value) {
        this._arguments[key] = value;
    }
    clear() {
        this._arguments = {};
    }
}

class DefaultFunctions {
    constructor(context) {
        this.context = context;
    }
    GetChainedPropertyValue(chainedPropName) {
        return this.eval(`${chainedPropName};`)();
    }
    GetContextParameter(propertyName) {
        return this.eval(`${propertyName}`)();
    }
    GetSessionValue(propertyName) {
        return this.eval(`${propertyName}`);
    }
    eval(expr) {
        const contexts = this.context && this.context.contexts || {};
        const args = contexts.arguments || {};
        const signature = Object.keys(args).join(',');
        const hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
        if (!hasReturnStatement) {
            expr = `return ${expr}`;
        }
        const scopeNames = Object.getOwnPropertyNames(contexts);
        const scopeVariable = `__scope__${new Date().valueOf()}`;
        return new Function(scopeVariable, `
      ${scopeNames.map((key) => `var ${key} = ${scopeVariable}['${key}'];`).join('\r\n')}
      return function anonymous(${signature}) {
        try{ \n${expr}\n }catch(e){console.error(e);}
      };`)(contexts);
    }
    GetComputeJsonData(setName, propName) {
        console.warn(`GetComputeJsonData不支持`);
        return null;
    }
    GetInjectedEntity(name) {
        console.warn(`GetInjectedEntity不支持`);
        return null;
    }
    Sum(paramArray) {
        let sum = 0;
        for (let i = 0; i < paramArray.length; i++) {
            sum += paramArray[i];
        }
        return sum;
    }
    SumByProp(chainedPropName, propertyName) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    var result = array.reduce((total,item)=>{
      const value = DefaultFunction.getPropValue(item,"${propertyName}");
      if(Object.prototype.toString.call(value) === '[object Number]'){
        total = total + value;
      }
      return total;
    },0);
    return result;
    `)();
    }
    CountByProp(chainedPropName, propertyName) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    var result = array.reduce((count,item)=>{
      const isPropExist = DefaultFunction.hasProp(item,"${propertyName}");
      if(isPropExist){
        count ++;
      }
      return count;
    },0);
    return result;
    `)();
    }
    AvgByProp(chainedPropName, propertyName) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    var result = array.reduce((total,item)=>{
      var value = DefaultFunction.getPropValue(item,"${propertyName}");
      if(Object.prototype.toString.call(value) === '[object Number]'){
        total = total + value;
      }
      return total;
    },0);
    return parseFloat((result/array.length).toFixed(2));
    `)();
    }
    MaxByProp(chainedPropName, propertyName) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    var result = array.reduce((max,item)=>{
      var value = DefaultFunction.getPropValue(item,"${propertyName}");
      if(value!==undefined){
        if(Object.prototype.toString.apply(value)!=="[object Number]"){
          console.warn("对象"+JSON.stringify(item) + "中，属性 ${propertyName} 不是数字。");
        }
        max = max>=value?max:value;
      }
      return max;
    },0);
    return result;
    `)();
    }
    MinByProp(chainedPropName, propertyName) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    var result = array.reduce((min,item)=>{
      var value = DefaultFunction.getPropValue(item,"${propertyName}");
      if(value!==undefined){
        if(Object.prototype.toString.apply(value)!=="[object Number]"){
          console.warn("对象"+JSON.stringify(item) + "中，属性 ${propertyName} 不是数字。");
        }
        min = min<=value?min:value;
      }
      return min;
    },undefined);
    return result;
    `)();
    }
    getIterable(item) {
        if (item && item.hasOwnProperty('__type__') && item['__type__'] === 'BindingList') {
            return item.toArray() || [];
        }
        else if (item && item.hasOwnProperty('__type__') && item['__type__'] === 'EntityList') {
            return item.items || [];
        }
        else if (item && item.hasOwnProperty('__type__') && (item['__type__'] === 'List' || item['__type__'] === 'Entity')) {
            return item['__items__'] || [];
        }
        else if (Object.prototype.toString.apply(item) === "[object Array]") {
            return item;
        }
        else {
            return [];
        }
    }
    getPropValue(target, prop) {
        const paths = prop.split('.').filter(p => p);
        return paths && paths.reduce((result, path) => {
            if (result && result.hasOwnProperty(path)) {
                return result[path];
            }
            else {
                return undefined;
            }
        }, target);
    }
    hasProp(target, prop) {
        const paths = prop.split('.').filter(p => p);
        let isPropExist = true;
        if (paths) {
            for (let idx = 0; idx < paths.length; idx++) {
                const path = paths[idx];
                if (!target.hasOwnProperty(path)) {
                    isPropExist = false;
                    break;
                }
                target = target[path];
            }
        }
        else {
            isPropExist = false;
        }
        return isPropExist;
    }
    StringSubstring(originalString, startIndex, length) {
        if (!originalString) {
            return originalString;
        }
        return originalString.substring(startIndex, length);
    }
    Length(originalString) {
        return originalString && originalString.hasOwnProperty('length') && originalString.length || 0;
    }
    StringLength(originalString) {
        return originalString && originalString.hasOwnProperty('length') && originalString.length || 0;
    }
    StringReplace(originalString, oldValue, newValue) {
        return originalString.replace(new RegExp(oldValue, 'g'), newValue);
    }
    ToUpper(originalString) {
        if (!originalString) {
            return originalString;
        }
        return originalString.toUpperCase();
    }
    ToLower(originalString) {
        if (!originalString) {
            return originalString;
        }
        return originalString.toLowerCase();
    }
    IndexOf(originalString, value) {
        if (originalString) {
            return originalString.indexOf(value);
        }
        else {
            return -1;
        }
    }
    LastIndexOf(originalString, value) {
        return originalString.lastIndexOf(value);
    }
    TrimStart(originalString) {
        return originalString && originalString.trimLeft();
    }
    TrimEnd(originalString) {
        return originalString && originalString.trimRight();
    }
    Trim(originalString) {
        return originalString.trim();
    }
    SubString(originalString, startIndex, length) {
        return this.StringSubstring(originalString, startIndex, length);
    }
    GetStringLength(obj) {
        return this.StringLength(obj);
    }
    Replace(originalString, oldValue, newValue) {
        return this.StringReplace(originalString, oldValue, newValue);
    }
    CreateGuid() {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, (function (c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        }));
        return uuid.toUpperCase();
    }
    CaseToSql(col) {
        if (col == null || col == "")
            return ("参数为空");
        let parameter = col.split(",");
        if (parameter.length == 0 || parameter.length == 1) {
            return ("函数CaseToSql,参数个数不正确");
        }
        let resultSql = " case " + parameter[0];
        let temp = "";
        for (let i = 1; i <= parameter.length; i++) {
            temp = parameter[i].replace("{", "");
            temp = temp.replace("}", "");
            let valueStr = temp.split(",");
            resultSql = resultSql + " when " + valueStr[0] + " then " + valueStr[1];
        }
        resultSql = resultSql + "end ";
        return resultSql;
    }
    ;
    IsNullEmpty(str) {
        if (str != null && str != "") {
            return true;
        }
        else {
            return false;
        }
    }
    Add(...str) {
        var strTem = "";
        for (let i = 0; i < str.length; i++) {
            strTem += str[i];
        }
        return strTem;
    }
    ToByte(obj) {
        return obj >> 0;
    }
    ToStringX(obj) {
        return JSON.stringify(obj);
    }
    ToDateTime(obj) {
        return new Date(obj);
    }
    ToBoolean(obj) {
        return ((JSON.stringify(obj) != null) && JSON.stringify(obj) == "true");
    }
    ToDecimal(obj) {
        return Number(obj);
    }
    ToBigDecimal(value) {
        return Number(value);
    }
    ToDouble(obj) {
        return Number(obj);
    }
    ToFloat(obj) {
        return Number(obj);
    }
    ToInt16(obj) {
        return Number(obj);
    }
    ToInt32(obj) {
        return Number(obj);
    }
    ToChineseMoney(money) {
        var cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
        var cnIntRadice = new Array('', '拾', '佰', '仟');
        var cnIntUnits = new Array('', '万', '亿', '兆');
        var cnDecUnits = new Array('角', '分', '毫', '厘');
        var cnInteger = '整';
        var cnIntLast = '元';
        var maxNum = 999999999999999.9999;
        var integerNum;
        var decimalNum;
        var chineseStr = '';
        var parts;
        if (money >= maxNum) {
            return '';
        }
        if (money == 0) {
            chineseStr = cnNums[0] + cnIntLast + cnInteger;
            return chineseStr;
        }
        var moneyStr = money.toString();
        if (moneyStr.indexOf('.') == -1) {
            integerNum = moneyStr;
            decimalNum = '';
        }
        else {
            parts = moneyStr.split('.');
            integerNum = parts[0];
            decimalNum = parts[1].substr(0, 4);
        }
        if (parseInt(integerNum, 10) > 0) {
            var zeroCount = 0;
            var IntLen = integerNum.length;
            for (var i = 0; i < IntLen; i++) {
                var n = integerNum.substr(i, 1);
                var p = IntLen - i - 1;
                var q = p / 4;
                var m = p % 4;
                if (n == '0') {
                    zeroCount++;
                }
                else {
                    if (zeroCount > 0) {
                        chineseStr += cnNums[0];
                    }
                    zeroCount = 0;
                    chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];
                }
                if (m == 0 && zeroCount < 4) {
                    chineseStr += cnIntUnits[q];
                }
            }
            chineseStr += cnIntLast;
        }
        if (decimalNum != '') {
            var decLen = decimalNum.length;
            for (var i = 0; i < decLen; i++) {
                var n = decimalNum.substr(i, 1);
                if (n != '0') {
                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                }
            }
        }
        if (chineseStr == '') {
            chineseStr += cnNums[0] + cnIntLast + cnInteger;
        }
        else if (decimalNum == '') {
            chineseStr += cnInteger;
        }
        return chineseStr;
    }
    IsNull(obj) {
        return obj == null;
    }
    IsNullOrWhiteSpace(obj) {
        if (obj == null || obj == "" || obj.trim() == "") {
            return true;
        }
        return false;
    }
    IsNaN(obj) {
        return isNaN(Number(obj));
    }
    IsNumber(obj) {
        return !isNaN(Number(obj));
    }
    sin(value) {
        return Math.sin(value);
    }
    cos(value) {
        return Math.cos(value);
    }
    random(value) {
        return Math.random();
    }
    ceil(value) {
        return Math.ceil(value);
    }
    abs(value) {
        return Math.abs(value);
    }
    floor(value) {
        return Math.floor(value);
    }
    round(value, digits) {
        return Math.round(value * Math.pow(10, digits)) / Math.pow(10, digits);
    }
    bankerRound(value, num) {
        if (typeof value !== "number") {
            console.error("输入值必须是数字！");
            return undefined;
        }
        return value.toFixed(num);
    }
    GetBirthday(idCard) {
        var ret = this.IsIDcard(idCard);
        if (!ret) {
            return null;
        }
        var birthdayValue = "";
        if (15 == idCard.length) {
            birthdayValue = idCard.substring(6, 8);
            if (Number(birthdayValue) < 10) {
                birthdayValue = "20" + birthdayValue;
            }
            else {
                birthdayValue = "19" + birthdayValue;
            }
            birthdayValue = birthdayValue + '-' + idCard.substring(8, 10) + '-' + idCard.substring(10, 12);
        }
        else if (18 == idCard.length) {
            return idCard.substr(6, 4) + "-" + idCard.substr(10, 2) + "-" + idCard.substr(12, 2);
        }
        return birthdayValue;
    }
    GetAge(idCard) {
        if (!idCard) {
            return;
        }
        var birthDay = this.GetBirthday(idCard);
        if (birthDay == null || birthDay == "") {
            return -1;
        }
        var birthDate = new Date(birthDay.replace(/-/g, "/"));
        var nowDate = new Date();
        var age = nowDate.getFullYear() - birthDate.getFullYear();
        if (nowDate.getMonth() < birthDate.getMonth() || (nowDate.getMonth() == birthDate.getMonth()
            && nowDate.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    }
    GetSex(idCard) {
        if (this.IsIDcard(idCard) == false) {
            return null;
        }
        var strSex = "";
        if (idCard.length == 18) {
            strSex = idCard.substring(14, 17);
        }
        else if (idCard.length == 15) {
            strSex = idCard.substring(12, 15);
        }
        if (Number(strSex) % 2 == 0) {
            strSex = "女";
        }
        else {
            strSex = "男";
        }
        return strSex;
    }
    IsIDcard(idcard) {
        var regularExpression = /(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$)|([1-9][0-9]{5}[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{3})/;
        return regularExpression.test(idcard);
    }
    DateTimeAddDays(date, value) {
        if (!date) {
            return date;
        }
        var tempDate = new Date(date.replace(/-/g, "/"));
        tempDate.setDate(tempDate.getDate() + value);
        return tempDate;
    }
    DateTimeAddMonths(date, value) {
        if (!date) {
            return date;
        }
        var tempDate = new Date(date.replace(/-/g, "/"));
        tempDate.setMonth(tempDate.getMonth() + value);
        return tempDate;
    }
    DateTimeAddYears(date, value) {
        if (!date) {
            return date;
        }
        var tempDate = new Date(date.replace(/-/g, "/"));
        tempDate.setFullYear(tempDate.getFullYear() + value);
        return tempDate;
    }
    GetFirstDayOfMonth(date) {
        if (!date) {
            return date;
        }
        var tempDate = new Date(date.replace(/-/g, "/"));
        tempDate.setDate(1);
        return tempDate;
    }
    GetLastDayOfMonth(date) {
        if (!date) {
            return date;
        }
        var endDate = new Date(date.replace(/-/g, "/"));
        var month = endDate.getMonth();
        var nextMonth = ++month;
        var nextMonthFirstDay = new Date(endDate.getFullYear(), nextMonth, 1);
        var oneDay = 1000 * 60 * 60 * 24;
        return new Date(Number(nextMonthFirstDay) - oneDay);
    }
    GetDateTimeNow() {
        return new Date();
    }
    CompareDate(str1, str2) {
        if (!str1 || !str2) {
            return;
        }
        var tempDate1 = new Date(str1.replace(/-/g, "/"));
        var tempDate2 = new Date(str2.replace(/-/g, "/"));
        if (tempDate1.getTime() > tempDate2.getTime()) {
            return 1;
        }
        if (tempDate1.getTime() == tempDate2.getTime()) {
            return 0;
        }
        if (tempDate1.getTime() < tempDate2.getTime()) {
            return -1;
        }
    }
    FormatDate(format) {
        format = format || 'yyyy-MM-dd';
        return this.FormatDefineDate(format, new Date());
    }
    FormatDefineDate(format, datesStr = null) {
        var dates;
        if (datesStr == null) {
            dates = new Date();
        }
        else {
            if (typeof datesStr === 'string') {
                dates = new Date(datesStr.replace(/-/g, "/"));
            }
            else if (Object.prototype.toString.call(datesStr) === '[object Date]') {
                dates = datesStr;
            }
            else {
                console.error('日期参数仅支持日期字符串或日期对象');
                return null;
            }
        }
        var o = {
            "M+": dates.getMonth() + 1,
            "d+": dates.getDate(),
            "H+": dates.getHours(),
            "m+": dates.getMinutes(),
            "s+": dates.getSeconds(),
            "q+": Math.floor((dates.getMonth() + 3) / 3),
            "S": dates.getMilliseconds()
        };
        if (/(y+)/.test(format)) {
            format = format.replace(RegExp.$1, (dates.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return format;
    }
    Today(date = null) {
        if (date == null) {
            var day2 = new Date();
            day2.setTime(day2.getTime());
            return this.FormatDefineDate('yyyy-MM-dd', day2);
        }
        else {
            let dd = new Date(date);
            dd.setDate(dd.getDate());
            return this.FormatDefineDate('yyyy-MM-dd', dd);
        }
    }
    Yesterday(date = null) {
        if (date == null) {
            var day1 = new Date();
            day1.setTime(day1.getTime() - 24 * 60 * 60 * 1000);
            return this.FormatDefineDate('yyyy-MM-dd', day1);
        }
        else {
            let dd = new Date(date);
            dd.setDate(dd.getDate() - 1);
            return this.FormatDefineDate('yyyy-MM-dd', dd);
        }
    }
    Tomorrow(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setDate(dd.getDate() + 1);
            return this.FormatDefineDate('yyyy-MM-dd', dd);
        }
        else {
            let dd = new Date(date);
            dd.setDate(dd.getDate() + 1);
            return this.FormatDefineDate('yyyy-MM-dd', dd);
        }
    }
    ThisYear(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setFullYear(dd.getFullYear());
            return dd.getFullYear() + "";
        }
        else {
            let dd = new Date(date);
            dd.setFullYear(dd.getFullYear());
            return dd.getFullYear() + "";
        }
    }
    LastYear(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setFullYear(dd.getFullYear() - 1);
            return dd.getFullYear() + "";
        }
        else {
            let dd = new Date(date);
            dd.setFullYear(dd.getFullYear() - 1);
            return dd.getFullYear() + "";
        }
    }
    NextYear(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setFullYear(dd.getFullYear() + 1);
            return dd.getFullYear() + "";
        }
        else {
            let dd = new Date(date);
            dd.setFullYear(dd.getFullYear() + 1);
            return dd.getFullYear() + "";
        }
    }
    ThisMonth(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setMonth(dd.getMonth() + 1);
            return dd.getMonth() + "";
        }
        else {
            let dd = new Date(date);
            dd.setMonth(dd.getMonth() + 1);
            return dd.getMonth() + "";
        }
    }
    LastMonth(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setMonth(dd.getMonth());
            return dd.getMonth() + "";
        }
        else {
            let dd = new Date(date);
            dd.setMonth(dd.getMonth());
            return dd.getMonth() + "";
        }
    }
    NextMonth(date = null) {
        if (date == null) {
            let dd = new Date();
            dd.setMonth(dd.getMonth() + 2);
            return dd.getMonth() + "";
        }
        else {
            let dd = new Date(date);
            dd.setMonth(dd.getMonth() + 2);
            return dd.getMonth() + "";
        }
    }
    DayOfWeek(date = null) {
        if (date == null) {
            let dd = new Date();
            return dd.getDay() + "";
        }
        else {
            let dd = new Date(date);
            return dd.getDay() + "";
        }
    }
    isLeapYear(year) {
        return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
    }
    getMonthDays(year, month) {
        return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month] || (this.isLeapYear(year) ? 29 : 28);
    }
    ThisWeek(date = null) {
        let dd;
        let year;
        let month;
        let days;
        if (date == null) {
            dd = new Date();
            year = dd.getFullYear(),
                month = dd.getMonth(),
                days = dd.getDate();
        }
        else {
            dd = new Date(date);
            year = dd.getFullYear(),
                month = dd.getMonth(),
                days = dd.getDate();
        }
        for (var i = 0; i < month; i++) {
            days += this.getMonthDays(year, i);
        }
        var yearFirstDay = new Date(year, 0, 1).getDay() || 7;
        var week = null;
        if (yearFirstDay == 1) {
            week = Math.ceil(days / yearFirstDay);
        }
        else {
            days -= (7 - yearFirstDay + 1);
            week = Math.ceil(days / 7) + 1;
        }
        return week;
    }
    LastWeek(date = null) {
        return (Number(this.ThisWeek(date)) - 1) + "";
    }
    NextWeek(date = null) {
        return (Number(this.ThisWeek(date)) + 1) + "";
    }
    FirstDayOfWeek(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            return this.FormatDefineDate('yyyy-MM-dd', monday);
        }
        else {
            var currentDate = new Date(date);
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            return this.FormatDefineDate('yyyy-MM-dd', monday);
        }
    }
    LastDayOfWeek(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            var sunday = new Date(monday.getTime() + (6 * millisecond));
            return this.FormatDefineDate('yyyy-MM-dd', sunday);
        }
        else {
            var currentDate = new Date(date);
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            var sunday = new Date(monday.getTime() + (6 * millisecond));
            return this.FormatDefineDate('yyyy-MM-dd', sunday);
        }
    }
    FirstDayOfLastWeek(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            monday.setDate(monday.getDate() - 7);
            return this.FormatDefineDate('yyyy-MM-dd', monday);
        }
        else {
            var currentDate = new Date(date);
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            monday.setDate(monday.getDate() - 7);
            return this.FormatDefineDate('yyyy-MM-dd', monday);
        }
    }
    LastDayOfLastWeek(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            var sunday = new Date(monday.getTime() + (6 * millisecond));
            sunday.setDate(sunday.getDate() - 7);
            return this.FormatDefineDate('yyyy-MM-dd', sunday);
        }
        else {
            var currentDate = new Date(date);
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            var sunday = new Date(monday.getTime() + (6 * millisecond));
            sunday.setDate(sunday.getDate() - 7);
            return this.FormatDefineDate('yyyy-MM-dd', sunday);
        }
    }
    FirstDayOfNextWeek(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            monday.setDate(monday.getDate() + 7);
            return this.FormatDefineDate('yyyy-MM-dd', monday);
        }
        else {
            var currentDate = new Date(date);
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            monday.setDate(monday.getDate() + 7);
            return this.FormatDefineDate('yyyy-MM-dd', monday);
        }
    }
    LastDayOfNextWeek(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            var sunday = new Date(monday.getTime() + (6 * millisecond));
            sunday.setDate(sunday.getDate() + 7);
            return this.FormatDefineDate('yyyy-MM-dd', sunday);
        }
        else {
            var currentDate = new Date(date);
            var week = currentDate.getDay();
            var millisecond = 1000 * 60 * 60 * 24;
            var minusDay = week != 0 ? week - 1 : 6;
            var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
            var sunday = new Date(monday.getTime() + (6 * millisecond));
            sunday.setDate(sunday.getDate() + 7);
            return this.FormatDefineDate('yyyy-MM-dd', sunday);
        }
    }
    FirstDayOfMonth(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var currentMonth = currentDate.getMonth();
            var currentYear = currentDate.getFullYear();
            var firstDay = new Date(currentYear, currentMonth, 1);
            return this.FormatDefineDate('yyyy-MM-dd', firstDay);
        }
        else {
            var currentDate = new Date(date);
            var currentMonth = currentDate.getMonth();
            var currentYear = currentDate.getFullYear();
            var firstDay = new Date(currentYear, currentMonth, 1);
            return this.FormatDefineDate('yyyy-MM-dd', firstDay);
        }
    }
    LastDayOfMonth(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var fullYear = currentDate.getFullYear();
            var month = currentDate.getMonth() + 1;
            var endOfMonth = new Date(fullYear, month, 0);
            return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
        }
        else {
            var currentDate = new Date(date);
            var fullYear = currentDate.getFullYear();
            var month = currentDate.getMonth() + 1;
            var endOfMonth = new Date(fullYear, month, 0);
            return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
        }
    }
    FirstDayOfLastMonth(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var currentMonth = currentDate.getMonth();
            var currentYear = currentDate.getFullYear();
            var firstDay = new Date(currentYear, currentMonth, 1);
            firstDay.setMonth(firstDay.getMonth());
            return this.FormatDefineDate('yyyy-MM-dd', firstDay);
        }
        else {
            var currentDate = new Date(date);
            var currentMonth = currentDate.getMonth();
            var currentYear = currentDate.getFullYear();
            var firstDay = new Date(currentYear, currentMonth, 1);
            firstDay.setMonth(firstDay.getMonth());
            return this.FormatDefineDate('yyyy-MM-dd', firstDay);
        }
    }
    LastDayOfLastMonth(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var fullYear = currentDate.getFullYear();
            var month = currentDate.getMonth() + 1;
            var endOfMonth = new Date(fullYear, month, 0);
            endOfMonth.setMonth(endOfMonth.getMonth());
            return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
        }
        else {
            var currentDate = new Date(date);
            var fullYear = currentDate.getFullYear();
            var month = currentDate.getMonth() + 1;
            var endOfMonth = new Date(fullYear, month, 0);
            endOfMonth.setMonth(endOfMonth.getMonth());
            return this.FormatDefineDate('yyyy-MM-dd', endOfMonth);
        }
    }
    FirstDayOfNextMonth(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var currentMonth = currentDate.getMonth();
            var currentYear = currentDate.getFullYear();
            var firstDay = new Date(currentYear, currentMonth, 1);
            firstDay.setMonth(firstDay.getMonth() + 2);
            return this.FormatDefineDate('yyyy-MM-dd', firstDay);
        }
        else {
            var currentDate = new Date(date);
            var currentMonth = currentDate.getMonth();
            var currentYear = currentDate.getFullYear();
            var firstDay = new Date(currentYear, currentMonth, 1);
            firstDay.setMonth(firstDay.getMonth() + 2);
            return this.FormatDefineDate('yyyy-MM-dd', firstDay);
        }
    }
    LastDayOfNextMonth(date = null) {
        if (date == null) {
            var currentDate = new Date();
            var fullYear = currentDate.getFullYear();
            var month = currentDate.getMonth() + 1;
            var endOfMonth = new Date(fullYear, month, 0);
            endOfMonth.setMonth(endOfMonth.getMonth() + 2);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            var fullYear = currentDate.getFullYear();
            var month = currentDate.getMonth() + 1;
            var endOfMonth = new Date(fullYear, month, 0);
            endOfMonth.setMonth(endOfMonth.getMonth() + 2);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    FirstDayOfYear(date = null) {
        if (date == null) {
            var currentDate = new Date();
            currentDate.setDate(1);
            currentDate.setMonth(0);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            currentDate.setDate(1);
            currentDate.setMonth(0);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    LastDayOfYear(date = null) {
        if (date == null) {
            var currentDate = new Date();
            currentDate.setDate(0);
            currentDate.setMonth(11);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            currentDate.setFullYear(currentDate.getFullYear() + 1);
            currentDate.setDate(0);
            currentDate.setMonth(11);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    FirstDayOfLastYear(date = null) {
        if (date == null) {
            var currentDate = new Date();
            currentDate.setFullYear(currentDate.getFullYear() - 1);
            currentDate.setDate(1);
            currentDate.setMonth(0);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            currentDate.setFullYear(currentDate.getFullYear() - 1);
            currentDate.setDate(1);
            currentDate.setMonth(0);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    LastDayOfLastYear(date = null) {
        if (date == null) {
            var currentDate = new Date();
            currentDate.setFullYear(currentDate.getFullYear() - 1);
            currentDate.setDate(0);
            currentDate.setMonth(11);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            currentDate.setFullYear(currentDate.getFullYear());
            currentDate.setDate(0);
            currentDate.setMonth(11);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    FirstDayOfNextYear(date = null) {
        if (date == null) {
            var currentDate = new Date();
            currentDate.setFullYear(currentDate.getFullYear() + 1);
            currentDate.setDate(1);
            currentDate.setMonth(0);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            currentDate.setFullYear(currentDate.getFullYear() + 1);
            currentDate.setDate(1);
            currentDate.setMonth(0);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    LastDayOfNextYear(date = null) {
        if (date == null) {
            var currentDate = new Date();
            currentDate.setFullYear(currentDate.getFullYear() + 1);
            currentDate.setDate(0);
            currentDate.setMonth(11);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
        else {
            var currentDate = new Date(date);
            currentDate.setFullYear(currentDate.getFullYear() + 2);
            currentDate.setDate(0);
            currentDate.setMonth(11);
            return this.FormatDefineDate('yyyy-MM-dd', currentDate);
        }
    }
    GetDate(format, date = null) {
        switch (format) {
            case "DD":
                return this.Today(date);
            case "LD":
                return this.Yesterday(date);
            case "ND":
                return this.Tomorrow(date);
            case "YY":
                return this.ThisYear(date);
            case "LY":
                return this.LastYear(date);
            case "NY":
                return this.NextYear(date);
            case "MM":
                return this.ThisMonth(date);
            case "LM":
                return this.LastMonth(date);
            case "NM":
                return this.NextMonth(date);
            case "WD":
                return this.DayOfWeek(date);
            case "WW":
                return this.ThisWeek(date);
            case "LW":
                return this.LastWeek(date);
            case "NW":
                return this.NextWeek(date);
            case "FDW":
                return this.FirstDayOfWeek(date);
            case "LDW":
                return this.LastDayOfWeek(date);
            case "FDLW":
                return this.FirstDayOfLastWeek(date);
            case "LDLW":
                return this.LastDayOfLastWeek(date);
            case "FDNW":
                return this.FirstDayOfNextWeek(date);
            case "LDNW":
                return this.LastDayOfNextWeek(date);
            case "FDM":
                return this.FirstDayOfMonth(date);
            case "LDM":
                return this.LastDayOfMonth(date);
            case "FDLM":
                return this.FirstDayOfLastMonth(date);
            case "LDLM":
                return this.LastDayOfLastMonth(date);
            case "FDNM":
                return this.FirstDayOfNextMonth(date);
            case "LDNM":
                return this.LastDayOfNextMonth(date);
            case "FDY":
                return this.FirstDayOfYear(date);
            case "LDY":
                return this.LastDayOfYear(date);
            case "FDLY":
                return this.FirstDayOfLastYear(date);
            case "LDLY":
                return this.LastDayOfLastYear(date);
            case "FDNY":
                return this.FirstDayOfNextYear(date);
            case "LDNY":
                return this.LastDayOfNextYear(date);
            default:
                return (date);
        }
    }
    IsExistRecord(chainedPropName, propertyName, matchValue) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    return array.find(item=>item["${propertyName}"] === ${matchValue})==null?false:true;
    `)();
    }
    ListContains(chainedPropName, propertyName, matchValue) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    return !array.find(item=> item.hasOwnProperty("${propertyName}") && item["${propertyName}"].toString().indexOf("${matchValue}")!==-1)?false:true;
    `)();
    }
    ListGreaterThan(chainedPropName, propertyName, matchValue) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    return !array.find(item=> item.hasOwnProperty("${propertyName}") && item["${propertyName}"] > ${matchValue}) ? false: true;
    `)();
    }
    ListLessThan(chainedPropName, propertyName, matchValue) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    return !array.find(item=> item.hasOwnProperty("${propertyName}") && item["${propertyName}"] < ${matchValue}) ? false: true;
    `)();
    }
    ListStartWith(chainedPropName, propertyName, matchValue) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    return !array.find(item=> item.hasOwnProperty("${propertyName}") && item["${propertyName}"] && item["${propertyName}"].toString().startsWith("${matchValue}")) ? false: true;
    `)();
    }
    ListEndWith(chainedPropName, propertyName, matchValue) {
        return this.eval(`
    var list = ${chainedPropName};
    var array = DefaultFunction.getIterable(list);
    return !array.find(item=> item.hasOwnProperty("${propertyName}") && item["${propertyName}"] && item["${propertyName}"].toString().endsWith("${matchValue}")) ? false: true;
    `)();
    }
    getComputeJsonData(chainedPropName, propertyName) {
        throw new Error("Method not implemented.");
    }
    Contains(originalString, matchString) {
        if (originalString == null || matchString == null) {
            return false;
        }
        else {
            return originalString.indexOf(matchString) != -1;
        }
    }
    NotContains(originalString, matchString) {
        if (originalString == null || matchString == null) {
            return false;
        }
        else {
            return !(originalString.indexOf(matchString) != -1);
        }
    }
    StartsWith(originalString, matchString) {
        if (originalString == null || matchString == null) {
            return false;
        }
        else {
            return originalString.startsWith(matchString);
        }
    }
    NotStartsWith(originalString, matchString) {
        if (originalString == null || matchString == null) {
            return false;
        }
        else {
            return !originalString.startsWith(matchString);
        }
    }
    EndsWith(originalString, matchString) {
        if (originalString == null || matchString == null) {
            return false;
        }
        else {
            return originalString.endsWith(matchString);
        }
    }
    NotEndsWith(originalString, matchString) {
        if (originalString == null || matchString == null) {
            return false;
        }
        else {
            return !originalString.endsWith(matchString);
        }
    }
    trimStart(s, c) {
        if (s == null || s == "" || s.indexOf(c) < 0) {
            return s;
        }
        let startPos = s.indexOf(c);
        s = s.substring(startPos + 1);
        return s;
    }
    trimEnd(s, c) {
        if (s == null || s == "" || s.indexOf(c) < 0) {
            return s;
        }
        let lastPos = s.lastIndexOf(c);
        if (lastPos >= 0) {
            s = s.substring(0, lastPos);
        }
        return s;
    }
    trimStartEnd(s, c) {
        return this.trimEnd(this.trimStart(s, c), c);
    }
}

class Compiler {
    compile(expr, context) {
        const contexts = context && context.contexts || {};
        const args = contexts.arguments || {};
        const signature = Object.keys(args).join(',');
        const defaultFunction = new DefaultFunctions(context);
        contexts['DefaultFunction'] = defaultFunction;
        const hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
        if (!hasReturnStatement) {
            expr = `return ${expr}`;
        }
        const scopeNames = Object.getOwnPropertyNames(contexts);
        const scopeVariable = `__scope__${new Date().valueOf()}`;
        return new Function(scopeVariable, `
      ${scopeNames.map((key) => `var ${key} = ${scopeVariable}['${key}'];`).join('\r\n')}
      return function anonymous(${signature}) {
        try{ \n${expr}\n }catch(e){console.error(e);}
      };`);
    }
}

class Evaler {
    eval(expr, context) {
        const contexts = context && context.contexts || {};
        const args = contexts.arguments || {};
        const signature = Object.keys(args).join(',');
        const defaultFunction = new DefaultFunctions(context);
        contexts['DefaultFunction'] = defaultFunction;
        const hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
        if (!hasReturnStatement) {
            expr = `return ${expr}`;
        }
        const scopeNames = Object.getOwnPropertyNames(contexts);
        const scopeVariable = `__scope__${new Date().valueOf()}`;
        return new Function(scopeVariable, `
      ${scopeNames.map((key) => `var ${key} = ${scopeVariable}['${key}'];`).join('\r\n')}
      return function anonymous(${signature}) {
        try{ \n${expr}\n }catch(e){console.error(e);}
      };`)(contexts);
    }
}

class Expression {
    constructor(expr, context) {
        this.expr = expr;
        this.context = context;
    }
    eval(context) {
        context = context || this.context;
        const args = context && context.contexts && context.contexts.arguments || {};
        if (this.factory) {
            const ctx = this.buildContext(context);
            const result = this.factory(ctx.contexts)(args);
            return result;
        }
        else {
            const evaler = new Evaler();
            const factory = evaler.eval(this.expr, context);
            const result = factory(...Object.values(args));
            return result;
        }
    }
    compile(context) {
        context = context || this.context;
        const compiler = new Compiler();
        this.factory = compiler.compile(this.expr, context);
        return this;
    }
    buildContext(context) {
        const contexts = context && context.contexts || {};
        const defaultFunction = new DefaultFunctions(context);
        contexts['DefaultFunction'] = defaultFunction;
        return context;
    }
}

class AbstractExpressionEngine {
    constructor(context) {
        this.context = context;
    }
}

class ExpressionEngine extends AbstractExpressionEngine {
    constructor(context) {
        super(context);
    }
    eval(expr) {
        const expression = new Expression(expr);
        return expression.eval(this.getContext());
    }
    getContext() {
        if (!this.context) {
            this.context = new ExpressionContext();
        }
        return this.context;
    }
    addFun(name, func) {
        if (name && typeof func === 'function') {
            this.getContext().set(name, func);
        }
    }
}

export { ExpressionContext, Expression, Compiler, Evaler, DefaultFunctions, AbstractExpressionEngine, ExpressionEngine };

//# sourceMappingURL=farris-expression-engine.js.map