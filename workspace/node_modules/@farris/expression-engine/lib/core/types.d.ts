export declare type ExpressionCommonFunction = (...args: any) => any | void;
export declare type TypedFunction = (...args: any[]) => any;
export interface IExpression {
    eval(context: IExpressionContext): any;
}
export interface IExpressionEngine {
    eval(expression: string): any;
    getContext(): IExpressionContext;
    addFun(name: string, func: ExpressionCommonFunction): void;
}
export interface IExpressionContext {
    arguments: {
        [prop: string]: any;
    };
    contexts: {
        [prop: string]: any;
    };
    set(key: string, value: any): void;
}
export interface ICompiler {
    compile(expr: string, context: IExpressionContext): Function;
}
export interface IEvaler {
    eval(expr: string, context: IExpressionContext): TypedFunction;
}
