import { IExpressionContext } from "../core/index";
export declare class DefaultFunctions {
    protected context: IExpressionContext;
    constructor(context: IExpressionContext);
    GetChainedPropertyValue(chainedPropName: string): any;
    GetContextParameter(propertyName: string): any;
    GetSessionValue(propertyName: string): any;
    eval(expr: string): any;
    GetComputeJsonData(setName: any, propName: string): any;
    GetInjectedEntity(name: string): any;
    Sum(paramArray: number[]): number;
    SumByProp(chainedPropName: any, propertyName: any): any;
    CountByProp(chainedPropName: string, propertyName: string): any;
    AvgByProp(chainedPropName: string, propertyName: string): any;
    MaxByProp(chainedPropName: string, propertyName: string): any;
    MinByProp(chainedPropName: string, propertyName: string): any;
    getIterable(item: any): any;
    private getPropValue;
    private hasProp;
    StringSubstring(originalString: any, startIndex: any, length: any): string;
    Length(originalString: string): number;
    StringLength(originalString: any): number;
    StringReplace(originalString: any, oldValue: any, newValue: any): any;
    ToUpper(originalString: string): string;
    ToLower(originalString: string): string;
    IndexOf(originalString: string, value: string): number;
    LastIndexOf(originalString: any, value: any): any;
    TrimStart(originalString: any): any;
    TrimEnd(originalString: any): any;
    Trim(originalString: any): any;
    SubString(originalString: any, startIndex: any, length: any): string;
    GetStringLength(obj: any): number;
    Replace(originalString: any, oldValue: any, newValue: any): any;
    CreateGuid(): string;
    CaseToSql(col: any): string;
    IsNullEmpty(str: any): boolean;
    Add(...str: any[]): string;
    ToByte(obj: any): number;
    ToStringX(obj: any): string;
    ToDateTime(obj: any): Date;
    ToBoolean(obj: any): boolean;
    ToDecimal(obj: any): number;
    ToBigDecimal(value: any): number;
    ToDouble(obj: any): number;
    ToFloat(obj: any): number;
    ToInt16(obj: any): number;
    ToInt32(obj: any): number;
    ToChineseMoney(money: any): string;
    IsNull(obj: any): boolean;
    IsNullOrWhiteSpace(obj: any): boolean;
    IsNaN(obj: any): boolean;
    IsNumber(obj: any): boolean;
    sin(value: any): number;
    cos(value: any): number;
    random(value: any): number;
    ceil(value: any): number;
    abs(value: any): number;
    floor(value: any): number;
    round(value: any, digits: any): number;
    bankerRound(value: any, num: number): string;
    GetBirthday(idCard: any): string;
    GetAge(idCard: any): number;
    GetSex(idCard: any): string;
    IsIDcard(idcard: any): boolean;
    DateTimeAddDays(date: any, value: any): any;
    DateTimeAddMonths(date: any, value: any): any;
    DateTimeAddYears(date: any, value: any): any;
    GetFirstDayOfMonth(date: any): any;
    GetLastDayOfMonth(date: any): any;
    GetDateTimeNow(): Date;
    CompareDate(str1: any, str2: any): 1 | 0 | -1;
    FormatDate(format: any): any;
    FormatDefineDate(format: any, datesStr?: any): any;
    Today(date?: any): any;
    Yesterday(date?: any): any;
    Tomorrow(date?: any): any;
    ThisYear(date?: any): string;
    LastYear(date?: any): string;
    NextYear(date?: any): string;
    ThisMonth(date?: any): string;
    LastMonth(date?: any): string;
    NextMonth(date?: any): string;
    DayOfWeek(date?: any): string;
    isLeapYear(year: any): boolean;
    getMonthDays(year: any, month: any): number;
    ThisWeek(date?: any): any;
    LastWeek(date?: any): string;
    NextWeek(date?: any): string;
    FirstDayOfWeek(date?: any): any;
    LastDayOfWeek(date?: any): any;
    FirstDayOfLastWeek(date?: any): any;
    LastDayOfLastWeek(date?: any): any;
    FirstDayOfNextWeek(date?: any): any;
    LastDayOfNextWeek(date?: any): any;
    FirstDayOfMonth(date?: any): any;
    LastDayOfMonth(date?: any): any;
    FirstDayOfLastMonth(date?: any): any;
    LastDayOfLastMonth(date?: any): any;
    FirstDayOfNextMonth(date?: any): any;
    LastDayOfNextMonth(date?: any): any;
    FirstDayOfYear(date?: any): any;
    LastDayOfYear(date?: any): any;
    FirstDayOfLastYear(date?: any): any;
    LastDayOfLastYear(date?: any): any;
    FirstDayOfNextYear(date?: any): any;
    LastDayOfNextYear(date?: any): any;
    GetDate(format: any, date?: any): any;
    IsExistRecord(chainedPropName: string, propertyName: string, matchValue: string): any;
    ListContains(chainedPropName: any, propertyName: any, matchValue: any): any;
    ListGreaterThan(chainedPropName: any, propertyName: any, matchValue: any): any;
    ListLessThan(chainedPropName: any, propertyName: any, matchValue: any): any;
    ListStartWith(chainedPropName: any, propertyName: any, matchValue: any): any;
    ListEndWith(chainedPropName: any, propertyName: any, matchValue: any): any;
    getComputeJsonData(chainedPropName: any, propertyName: any): void;
    Contains(originalString: any, matchString: any): boolean;
    NotContains(originalString: any, matchString: any): boolean;
    StartsWith(originalString: any, matchString: any): any;
    NotStartsWith(originalString: any, matchString: any): boolean;
    EndsWith(originalString: any, matchString: any): any;
    NotEndsWith(originalString: any, matchString: any): boolean;
    trimStart(s: any, c: any): any;
    trimEnd(s: any, c: any): any;
    trimStartEnd(s: any, c: any): any;
}
