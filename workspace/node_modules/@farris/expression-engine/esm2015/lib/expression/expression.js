import { Compiler } from "../compiler/index";
import { Evaler } from "../evaler/index";
import { DefaultFunctions } from "../function/index";
export class Expression {
    constructor(expr, context) {
        this.expr = expr;
        this.context = context;
    }
    eval(context) {
        context = context || this.context;
        const args = context && context.contexts && context.contexts.arguments || {};
        if (this.factory) {
            const ctx = this.buildContext(context);
            const result = this.factory(ctx.contexts)(args);
            return result;
        }
        else {
            const evaler = new Evaler();
            const factory = evaler.eval(this.expr, context);
            const result = factory(...Object.values(args));
            return result;
        }
    }
    compile(context) {
        context = context || this.context;
        const compiler = new Compiler();
        this.factory = compiler.compile(this.expr, context);
        return this;
    }
    buildContext(context) {
        const contexts = context && context.contexts || {};
        const defaultFunction = new DefaultFunctions(context);
        contexts['DefaultFunction'] = defaultFunction;
        return context;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXhwcmVzc2lvbi1lbmdpbmUvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFckQsTUFBTSxPQUFPLFVBQVU7SUFJckIsWUFBWSxJQUFZLEVBQUUsT0FBNEI7UUFDcEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQU1NLElBQUksQ0FBQyxPQUE0QjtRQUN0QyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQzdFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7YUFBTTtZQUNMLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7WUFDNUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMvQyxPQUFPLE1BQU0sQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQU1NLE9BQU8sQ0FBQyxPQUE0QjtRQUN6QyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTyxZQUFZLENBQUMsT0FBNEI7UUFDL0MsTUFBTSxRQUFRLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ25ELE1BQU0sZUFBZSxHQUFHLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEQsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsZUFBZSxDQUFDO1FBQzlDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVyIH0gZnJvbSBcIi4uL2NvbXBpbGVyL2luZGV4XCI7XHJcbmltcG9ydCB7IElFeHByZXNzaW9uLCBJRXhwcmVzc2lvbkNvbnRleHQgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBFdmFsZXIgfSBmcm9tIFwiLi4vZXZhbGVyL2luZGV4XCI7XHJcbmltcG9ydCB7IERlZmF1bHRGdW5jdGlvbnMgfSBmcm9tIFwiLi4vZnVuY3Rpb24vaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSUV4cHJlc3Npb24ge1xyXG4gIHByaXZhdGUgZXhwcjogc3RyaW5nO1xyXG4gIHByaXZhdGUgZmFjdG9yeTogRnVuY3Rpb247XHJcbiAgcHJpdmF0ZSBjb250ZXh0OiBJRXhwcmVzc2lvbkNvbnRleHQ7XHJcbiAgY29uc3RydWN0b3IoZXhwcjogc3RyaW5nLCBjb250ZXh0PzogSUV4cHJlc3Npb25Db250ZXh0KSB7XHJcbiAgICB0aGlzLmV4cHIgPSBleHByO1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5omn6KGM6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGNvbnRleHQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGV2YWwoY29udGV4dD86IElFeHByZXNzaW9uQ29udGV4dCkge1xyXG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcy5jb250ZXh0O1xyXG4gICAgY29uc3QgYXJncyA9IGNvbnRleHQgJiYgY29udGV4dC5jb250ZXh0cyAmJiBjb250ZXh0LmNvbnRleHRzLmFyZ3VtZW50cyB8fCB7fTtcclxuICAgIGlmICh0aGlzLmZhY3RvcnkpIHtcclxuICAgICAgY29uc3QgY3R4ID0gdGhpcy5idWlsZENvbnRleHQoY29udGV4dCk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZmFjdG9yeShjdHguY29udGV4dHMpKGFyZ3MpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZXZhbGVyID0gbmV3IEV2YWxlcigpO1xyXG4gICAgICBjb25zdCBmYWN0b3J5ID0gZXZhbGVyLmV2YWwodGhpcy5leHByLCBjb250ZXh0KTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gZmFjdG9yeSguLi5PYmplY3QudmFsdWVzKGFyZ3MpKTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog57yW6K+R6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBpbGUoY29udGV4dD86IElFeHByZXNzaW9uQ29udGV4dCk6IEV4cHJlc3Npb24ge1xyXG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcy5jb250ZXh0O1xyXG4gICAgY29uc3QgY29tcGlsZXIgPSBuZXcgQ29tcGlsZXIoKTtcclxuICAgIHRoaXMuZmFjdG9yeSA9IGNvbXBpbGVyLmNvbXBpbGUodGhpcy5leHByLCBjb250ZXh0KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBwcml2YXRlIGJ1aWxkQ29udGV4dChjb250ZXh0PzogSUV4cHJlc3Npb25Db250ZXh0KSB7XHJcbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQgJiYgY29udGV4dC5jb250ZXh0cyB8fCB7fTtcclxuICAgIGNvbnN0IGRlZmF1bHRGdW5jdGlvbiA9IG5ldyBEZWZhdWx0RnVuY3Rpb25zKGNvbnRleHQpO1xyXG4gICAgY29udGV4dHNbJ0RlZmF1bHRGdW5jdGlvbiddID0gZGVmYXVsdEZ1bmN0aW9uO1xyXG4gICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgfVxyXG59Il19