import { DefaultFunctions } from "../function/index";
export class Compiler {
    compile(expr, context) {
        const contexts = context && context.contexts || {};
        const args = contexts.arguments || {};
        const signature = Object.keys(args).join(',');
        const defaultFunction = new DefaultFunctions(context);
        contexts['DefaultFunction'] = defaultFunction;
        const hasReturnStatement = expr.match(/([\s\r\n{;}]+return)|(^return)\s+/g);
        if (!hasReturnStatement) {
            expr = `return ${expr}`;
        }
        const scopeNames = Object.getOwnPropertyNames(contexts);
        const scopeVariable = `__scope__${new Date().valueOf()}`;
        return new Function(scopeVariable, `
      ${scopeNames.map((key) => `var ${key} = ${scopeVariable}['${key}'];`).join('\r\n')}
      return function anonymous(${signature}) {
        try{ \n${expr}\n }catch(e){console.error(e);}
      };`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4cHJlc3Npb24tZW5naW5lLyIsInNvdXJjZXMiOlsibGliL2NvbXBpbGVyL2NvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXJELE1BQU0sT0FBTyxRQUFRO0lBQ1osT0FBTyxDQUFDLElBQVksRUFBRSxPQUEyQjtRQUN0RCxNQUFNLFFBQVEsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7UUFDbkQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDdEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDN0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxRQUFRLENBQUMsaUJBQWlCLENBQUMsR0FBRyxlQUFlLENBQUM7UUFDOUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZCLElBQUksR0FBRyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sYUFBYSxHQUFHLFlBQVksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1FBQ3pELE9BQU8sSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFO1FBQy9CLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxNQUFNLGFBQWEsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7a0NBQzlELFNBQVM7aUJBQzFCLElBQUk7U0FDWixDQUFDLENBQUM7SUFDVCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29tcGlsZXIsIElFeHByZXNzaW9uQ29udGV4dCB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XHJcbmltcG9ydCB7IERlZmF1bHRGdW5jdGlvbnMgfSBmcm9tIFwiLi4vZnVuY3Rpb24vaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21waWxlciBpbXBsZW1lbnRzIElDb21waWxlciB7XHJcbiAgcHVibGljIGNvbXBpbGUoZXhwcjogc3RyaW5nLCBjb250ZXh0OiBJRXhwcmVzc2lvbkNvbnRleHQpOiBGdW5jdGlvbiB7XHJcbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQgJiYgY29udGV4dC5jb250ZXh0cyB8fCB7fTtcclxuICAgIGNvbnN0IGFyZ3MgPSBjb250ZXh0cy5hcmd1bWVudHMgfHwge307XHJcbiAgICBjb25zdCBzaWduYXR1cmUgPSBPYmplY3Qua2V5cyhhcmdzKS5qb2luKCcsJylcclxuICAgIGNvbnN0IGRlZmF1bHRGdW5jdGlvbiA9IG5ldyBEZWZhdWx0RnVuY3Rpb25zKGNvbnRleHQpO1xyXG4gICAgY29udGV4dHNbJ0RlZmF1bHRGdW5jdGlvbiddID0gZGVmYXVsdEZ1bmN0aW9uO1xyXG4gICAgY29uc3QgaGFzUmV0dXJuU3RhdGVtZW50ID0gZXhwci5tYXRjaCgvKFtcXHNcXHJcXG57O31dK3JldHVybil8KF5yZXR1cm4pXFxzKy9nKTtcclxuICAgIGlmICghaGFzUmV0dXJuU3RhdGVtZW50KSB7XHJcbiAgICAgIGV4cHIgPSBgcmV0dXJuICR7ZXhwcn1gO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2NvcGVOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNvbnRleHRzKTtcclxuICAgIGNvbnN0IHNjb3BlVmFyaWFibGUgPSBgX19zY29wZV9fJHtuZXcgRGF0ZSgpLnZhbHVlT2YoKX1gO1xyXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihzY29wZVZhcmlhYmxlLCBgXHJcbiAgICAgICR7c2NvcGVOYW1lcy5tYXAoKGtleTogc3RyaW5nKSA9PiBgdmFyICR7a2V5fSA9ICR7c2NvcGVWYXJpYWJsZX1bJyR7a2V5fSddO2ApLmpvaW4oJ1xcclxcbicpfVxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gYW5vbnltb3VzKCR7c2lnbmF0dXJlfSkge1xyXG4gICAgICAgIHRyeXsgXFxuJHtleHByfVxcbiB9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKTt9XHJcbiAgICAgIH07YCk7XHJcbiAgfVxyXG59Il19