/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef } from '@angular/core';
/*
* @Author: 疯狂秀才(lucas huang)
* @Date: 2018-11-23 08:33:37
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-17 16:38:53
* @Company: Inspur
* @Version: v0.0.1
*/
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, Injector, ComponentFactoryResolver, ElementRef, forwardRef, HostListener, HostBinding } from '@angular/core';
import { cloneDeep } from 'lodash-es';
import { LookupComponent } from '@farris/ui-lookup';
import { BsModalService } from '@farris/ui-modal';
import { SortEditorComponent } from './sort-editor.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
/**
 * @record
 */
export function SORT_FIELD_EDITOR() { }
if (false) {
    /** @type {?} */
    SORT_FIELD_EDITOR.prototype.type;
    /** @type {?|undefined} */
    SORT_FIELD_EDITOR.prototype.options;
}
/** @type {?} */
export const SORTER_LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SorterComponent)),
    multi: true
};
export class SorterComponent extends LookupComponent {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} modalService
     * @param {?} el
     */
    constructor(injector, cfr, modalService, el) {
        super(injector, el);
        this.cfr = cfr;
        this.modalService = modalService;
        this.el = el;
        this.hostCls = 'f-cmp-inputgroup';
        this.text = '';
        this.conditions = [];
        this.originalData = [];
        this.columns = [];
        this.fieldEditor = { type: 'select', options: {} };
        this.returnType = 'object';
        this.enableClear = true;
        this.openDialog = new EventEmitter();
        this.cd = null;
        this.showClearButton = false;
        this.commonUtils = null;
        this.localeService = this.injector.get(LocaleService);
        this.cd = this.injector.get(ChangeDetectorRef, null);
        this.commonUtils = this.injector.get(CommonUtils, null) || new CommonUtils();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onmouseover() {
        this.showClearButton = true;
    }
    /**
     * @return {?}
     */
    onmouseleave() {
        this.showClearButton = false;
    }
    /**
     * @return {?}
     */
    showDialog() {
        if (!this.disabled) {
            if (this.fieldEditor && this.fieldEditor.type === 'combo-tree') {
                this.fieldEditor.options = this.fieldEditor.options || {};
                if (this.fieldEditor.options.autoWidth === undefined) {
                    this.fieldEditor.options.autoWidth = true;
                }
                if (!this.fieldEditor.options.columns) {
                    this.fieldEditor.options.columns = [{ field: 'label', title: 'label', width: 100 }];
                }
                if (!this.fieldEditor.options.textField) {
                    this.fieldEditor.options.textField = 'label';
                }
                if (!this.fieldEditor.options.idField) {
                    this.fieldEditor.options.idField = 'value';
                }
            }
            /** @type {?} */
            const sortEditorFactory = this.cfr.resolveComponentFactory(SortEditorComponent);
            this.sortEditorRef = sortEditorFactory.create(this.injector);
            this.sortEditorRef.instance.columns = this.columns;
            this.sortEditorRef.instance.conditions = this.conditions;
            this.originalData = cloneDeep(this.conditions);
            this.dlgRef = this.modalService.show(this.sortEditorRef, {
                width: 500, height: 400,
                title: this.localeService.getValue('sortEditor.title'),
                enableScroll: false,
                minHeight: 298, minWidth: 498, iconCls: 'f-icon f-icon-col-defaultsort',
                buttons: this.btnRef,
                showMaxButton: false, buttonAlign: 'right',
                // dialogFooterStyles: { background: '#F4F6F9' },
                initialState: {
                    fieldEditor: this.fieldEditor
                }
            });
            this.sortEditorRef.instance.height = this.dlgRef.dialog.instance.getContainerSize().height;
            this.dlgRef.dialog.instance.resized.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            size => {
                this.sortEditorRef.instance.height = size.containerHeight;
            }));
            this.sortEditorRef.instance.sortsChanged.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.conditions = e.data;
            }));
            this.sortEditorRef.changeDetectorRef.detectChanges();
            this.dlgRef.dialog.changeDetectorRef.reattach();
            this.openDialog.emit();
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            if (typeof val === 'string') {
                val = JSON.parse(val);
            }
            this.conditions = val || [];
            this.text = this.commonUtils.buildSortString(val);
        }
    }
    /**
     * @return {?}
     */
    save() {
        if (this.conditions.length) {
            this.conditions = this.conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.sortField));
            this.text = this.commonUtils.buildSortString(this.conditions);
        }
        else {
            this.text = '';
        }
        this.closeDialog();
        if (this.cd) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.conditions = this.originalData;
        this.closeDialog();
    }
    /**
     * @return {?}
     */
    closeDialog() {
        this.updateModel();
        this.sortEditorRef = null;
        this.dlgRef.close();
    }
    /**
     * @return {?}
     */
    clear() {
        this.text = '';
        this.conditions = [];
        this.updateModel();
    }
    /**
     * @private
     * @return {?}
     */
    updateModel() {
        /** @type {?} */
        let v = this.conditions;
        if (this.returnType === 'string') {
            v = JSON.stringify(this.conditions);
        }
        this.onModelChange(v);
        this.onModelTouched(v);
    }
}
SorterComponent.decorators = [
    { type: Component, args: [{
                selector: 'sorter',
                template: `
    <div class="input-group">
        <input class="form-control" [value]="text" #txtbox
            [readonly]="!editable || readonly"
            [class.f-state-disabled] = "disabled"
            [class.f-state-readonly] = "readonly"
            [class.f-state-editable] = "!editable"
            [disabled]="disabled"/>
        <div class="input-group-append" *ngIf="!readonly && !disabled">
            <span *ngIf="showClearButton && enableClear" class="input-group-text input-group-clear" (click)="clear()">
                <i class="f-icon modal_close"></i>
            </span>
            <span class="f-select input-group-text"  (click)="showDialog()">
                <i class="f-icon f-icon-lookup"></i>
            </span>
        </div>
    </div>

    <ng-template #defaultButtonRef>
        <button class="btn btn-outline-secondary" (click)="cancel()"> {{ 'sortEditor.cancel'| locale }} </button>&nbsp;
        <button class="btn btn-primary" (click)="save()"> {{ 'sortEditor.ok'| locale }} </button>
    </ng-template>
    `,
                providers: [
                    SORTER_LOOKUPGRID_VALUE_ACCESSOR
                ],
                styles: [`
        .lookup-clear { cursor: pointer; background: #fff!important;}
        .lookup-clear:hover { background: #e9ecef!important;}
        `]
            }] }
];
/** @nocollapse */
SorterComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: ElementRef }
];
SorterComponent.propDecorators = {
    hostCls: [{ type: HostBinding, args: ['class',] }],
    columns: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    returnType: [{ type: Input }],
    enableClear: [{ type: Input }],
    openDialog: [{ type: Output }],
    btnRef: [{ type: ViewChild, args: ['defaultButtonRef',] }],
    textbox: [{ type: ViewChild, args: ['txtbox',] }],
    onmouseover: [{ type: HostListener, args: ['mouseover',] }],
    onmouseleave: [{ type: HostListener, args: ['mouseleave',] }]
};
if (false) {
    /** @type {?} */
    SorterComponent.prototype.hostCls;
    /** @type {?} */
    SorterComponent.prototype.text;
    /** @type {?} */
    SorterComponent.prototype.conditions;
    /** @type {?} */
    SorterComponent.prototype.originalData;
    /** @type {?} */
    SorterComponent.prototype.columns;
    /** @type {?} */
    SorterComponent.prototype.fieldEditor;
    /** @type {?} */
    SorterComponent.prototype.returnType;
    /** @type {?} */
    SorterComponent.prototype.enableClear;
    /** @type {?} */
    SorterComponent.prototype.openDialog;
    /** @type {?} */
    SorterComponent.prototype.btnRef;
    /** @type {?} */
    SorterComponent.prototype.textbox;
    /** @type {?} */
    SorterComponent.prototype.dlgRef;
    /** @type {?} */
    SorterComponent.prototype.sortEditorRef;
    /** @type {?} */
    SorterComponent.prototype.cd;
    /** @type {?} */
    SorterComponent.prototype.showClearButton;
    /** @type {?} */
    SorterComponent.prototype.localeService;
    /** @type {?} */
    SorterComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    SorterComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    SorterComponent.prototype.modalService;
    /** @type {?} */
    SorterComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,