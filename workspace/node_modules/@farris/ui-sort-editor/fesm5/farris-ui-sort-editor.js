import { SortTypes, SortType } from '@farris/ui-common/types';
import { DomSanitizer } from '@angular/platform-browser';
import { __spread, __extends } from 'tslib';
import { cloneDeep } from 'lodash-es';
import { BsModalService } from '@farris/ui-modal';
import { Component, HostBinding, Input, Output, EventEmitter, Injector, ViewChild, ElementRef, ChangeDetectorRef, ComponentFactoryResolver, forwardRef, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { LookupComponent, LookupModule } from '@farris/ui-lookup';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { CommonUtils, FarrisCommonModule } from '@farris/ui-common';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { FarrisFormsModule } from '@farris/ui-forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SortEditorComponent = /** @class */ (function () {
    function SortEditorComponent(messagerService, sanitizer, injector) {
        this.messagerService = messagerService;
        this.sanitizer = sanitizer;
        this.injector = injector;
        this.sortTypes = SortTypes;
        this.columnSizeData = [30, 120, 60];
        this.cls = 'f-sort-editor f-utils-flex-column f-utils-absolute-all';
        this.fieldEditor = { type: 'select', options: null };
        this.conditions = [];
        this.columns = [];
        this.sortsChanged = new EventEmitter();
        this.newCondition = {
            sortField: '',
            sortType: SortType.Asc,
        };
        this.currentCondition = null;
        this.localeService = this.injector.get(LocaleService);
        this.sortTypes = [
            { label: this.localeService.getValue('sortEditor.asc'), value: SortType.Asc },
            { label: this.localeService.getValue('sortEditor.desc'), value: SortType.Desc }
        ];
    }
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    /**
     * @private
     * @return {?}
     */
    SortEditorComponent.prototype.itemIntoView = 
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tablebodybox) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var tr = _this.tablebodybox.nativeElement.querySelector('tr.selected');
                if (tr) {
                    if (tr.scrollIntoViewIfNeeded) {
                        tr.scrollIntoViewIfNeeded(false);
                    }
                    else {
                        tr.scrollIntoView({ block: 'nearest' });
                    }
                }
            }), 50);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SortEditorComponent.prototype.selected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentCondition = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SortEditorComponent.prototype.isSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SortEditorComponent.prototype.insertCondition = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var _newCondition = Object.assign({}, this.newCondition);
        if (index === 0) {
            this.conditions = __spread([_newCondition], this.conditions);
        }
        else {
            /** @type {?} */
            var _data = cloneDeep(this.conditions);
            _data.splice(index, 0, _newCondition);
            this.conditions = __spread(_data);
        }
        this.changeConditionList('insert');
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SortEditorComponent.prototype.removeCondition = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.conditions.splice(index, 1);
        this.changeConditionList('remove');
        if (this.currentCondition) {
            if (index === this.currentCondition.index) {
                if (this.conditions[index]) {
                    this.currentCondition = { index: index, condition: this.conditions[index] };
                }
                else {
                    if (this.conditions[index - 1]) {
                        this.currentCondition = { index: index - 1, condition: this.conditions[index - 1] };
                    }
                    else {
                        this.currentCondition = null;
                    }
                }
            }
            else {
                if (!this.conditions[this.currentCondition.index]) {
                    if (this.currentCondition.index > index) {
                        this.currentCondition.index = this.currentCondition.index - 1;
                    }
                    else {
                        this.currentCondition.index = this.currentCondition.index + 1;
                    }
                }
            }
        }
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.onAdd = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newItem = Object.assign({}, this.newCondition);
        this.conditions = __spread(this.conditions, [newItem]);
        this.changeConditionList('add');
        /** @type {?} */
        var newIdx = this.conditions.length - 1;
        this.currentCondition = { index: newIdx, condition: newItem };
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.messagerService.question('确认要清空当前所有排序字段吗？', (/**
         * @return {?}
         */
        function () {
            _this.conditions = [];
            _this.currentCondition = null;
            _this.changeConditionList('clear');
        }));
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.onMoveTop = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList('moveTop');
        }
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.onMovePrev = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, __spread([index - 1, 0], tempArr));
            this.currentCondition.index = index - 1;
            this.changeConditionList('movePrev');
        }
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.onMoveNext = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, __spread([index + 1, 0], tempArr));
            this.currentCondition.index = index + 1;
            this.changeConditionList('moveNext');
        }
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.onMoveBottom = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList('moveBottom');
        }
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.canUse = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            return this.conditions.length > 1;
        }
        return false;
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.canMoveUp = /**
     * @return {?}
     */
    function () {
        if (this.canUse()) {
            return this.currentCondition.index > 0;
        }
        return false;
    };
    /**
     * @return {?}
     */
    SortEditorComponent.prototype.canMoveDown = /**
     * @return {?}
     */
    function () {
        if (this.canUse()) {
            return this.currentCondition.index < this.conditions.length - 1;
        }
        return false;
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    SortEditorComponent.prototype.changeConditionList = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        this.sortsChanged.emit({ action: action, data: this.conditions });
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.itemIntoView();
            // this.setContainerStyles();
        }));
    };
    SortEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sort-editor',
                    template: "<!-- <div class=\"table-header \" style=\"max-height: 35px;\">\r\n    <table class=\"table table-bordered sort-col-header\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col *ngFor=\"let s of columnSizeData\" [width]=\" s + 'px'\">\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>&nbsp;<b>{{ 'sortEditor.field'| locale }}</b></th>\r\n                <th>&nbsp;<b>{{ 'sortEditor.order'| locale }}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div> -->\r\n<div style=\"\r\n    border-top: 1px solid  white;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 2;\r\n\"></div>\r\n<div class=\"table-body flex-fill  win11Scroll show nobtn\" style=\"margin-left:14px; margin-right: 0; overflow-y: scroll;\" #tablebodybox>\r\n    <!-- <perfect-scrollbar [config]=\"{}\" style=\"height: 100%\" #ps> -->\r\n        <table class=\"table table-bordered\" style=\"margin: 0;\">\r\n            <thead style=\"position: sticky; top: 0; z-index: 1;\">\r\n                <tr>\r\n                    <th style=\"width: 30px\"></th>\r\n                    <th style=\"width: 120px\">&nbsp;<b>{{ 'sortEditor.field'| locale }}</b></th>\r\n                    <th style=\"width: 60px\">&nbsp;<b>{{ 'sortEditor.order'| locale }}</b></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td style=\"padding-left: 0; padding-right: 0; text-align: center\">\r\n                        <button type=\"button\" (click)=\"insertCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                        <button type=\"button\" (click)=\"removeCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-minus\"></span></button>\r\n                    </td>\r\n                    <td>\r\n\r\n                        <ng-container *ngIf=\"fieldEditor.type === 'select'\" >\r\n                            <select class=\"form-control filter-select\" [(ngModel)]=\"condition.sortField\" name=\"sortField\"  \r\n                            single-select [panelRef]=\"selectcolpanel\" [items]=\"columns\" [container]=\"tablebodybox\">\r\n                                <!-- <option *ngFor=\"let col of columns\" [value]=\"col.value\">{{ col.label }}</option> -->\r\n                            </select>\r\n\r\n                            <div #selectcolpanel class=\"single-select-panel f-area-hide\" style=\"max-height: 200px;overflow: auto;\">\r\n                                <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                    <li class=\"dropdown-item\" *ngFor=\"let col of columns\" [attr.value]=\"col.value\" [class.active]=\"condition.sortField === col.value\">{{ col.label }}</li>\r\n                                </ul>\r\n                            </div>\r\n                        </ng-container>\r\n                        <farris-combo-lookup *ngIf=\"fieldEditor.type === 'combo-tree'\" name=\"sortField\"\r\n                            [idField]=\"fieldEditor?.options?.idField ||'value'\"\r\n                            [textField]=\"fieldEditor?.options?.textField ||'label'\"\r\n                            [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n                            [useTreeView]=\"true\"\r\n                            [columns]=\"fieldEditor?.options?.columns || []\"\r\n                            [data]=\"columns\"\r\n                            [(ngModel)]=\"condition.sortField\"\r\n                            [remoteSearch]=\"false\"\r\n                            [autoWidth]=\"fieldEditor?.options?.autoWidth\"\r\n                            [panelWidth]=\"fieldEditor?.options?.panelWidth || 200\"\r\n                        >\r\n                        </farris-combo-lookup>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.sortType\" name=\"sortType\"   single-select [panelRef]=\"selectpanel\" [items]=\"sortTypes\"  [container]=\"tablebodybox\">\r\n                            <!-- <option *ngFor=\"let item of sortTypes\" [value]=\"item.value\">{{ item.label }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectpanel class=\"single-select-panel f-area-hide\" style=\"max-height: 200px;overflow: auto;\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;\" >\r\n                                <li class=\"dropdown-item\" *ngFor=\"let col of sortTypes\" [attr.value]=\"col.value\" [class.active]=\"condition.sortType === col.value\">{{ col.label }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    <!-- </perfect-scrollbar> -->\r\n</div>\r\n<div class=\"footer-container px-2\" style=\"flex-shrink: 0;margin: 0 14px; height: 36px; \">\r\n    <button type=\"button\" (click)=\"onAdd()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-add\"></span> {{ 'sortEditor.add'| locale }}</button>\r\n    <button type=\"button\" (click)=\"onClear()\" [disabled]=\"!conditions.length\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-close\"></span> {{ 'sortEditor.clear'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMoveTop()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-end-up\"></span> {{ 'sortEditor.moveTop'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMovePrev()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-60-up\"></span> {{ 'sortEditor.moveUp'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveNext()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-60-down\"></span> {{ 'sortEditor.moveDown'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveBottom()\"\r\n        class=\"k-button k-button-icontext k-flat\"><span class=\"f-icon f-icon-arrow-end-down\"></span> {{ 'sortEditor.moveBottom'| locale }}</button>\r\n</div>",
                    styles: ["\n        .sort-col-header thead th { padding: 0; line-height: 35px;}\n        .filter-select { width:100%; padding-left: 0; padding-right: 0; }\n        .selected { background: #c2e4ff; }\n        "]
                }] }
    ];
    /** @nocollapse */
    SortEditorComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: DomSanitizer },
        { type: Injector }
    ]; };
    SortEditorComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        fieldEditor: [{ type: Input }],
        conditions: [{ type: Input }],
        columns: [{ type: Input }],
        height: [{ type: Input }],
        psRef: [{ type: ViewChild, args: ['ps',] }],
        tablebodybox: [{ type: ViewChild, args: ['tablebodybox',] }],
        sortsChanged: [{ type: Output }]
    };
    return SortEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SORTER_LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SorterComponent; })),
    multi: true
};
var SorterComponent = /** @class */ (function (_super) {
    __extends(SorterComponent, _super);
    function SorterComponent(injector, cfr, modalService, el) {
        var _this = _super.call(this, injector, el) || this;
        _this.cfr = cfr;
        _this.modalService = modalService;
        _this.el = el;
        _this.hostCls = 'f-cmp-inputgroup';
        _this.text = '';
        _this.conditions = [];
        _this.originalData = [];
        _this.columns = [];
        _this.fieldEditor = { type: 'select', options: {} };
        _this.returnType = 'object';
        _this.enableClear = true;
        _this.openDialog = new EventEmitter();
        _this.cd = null;
        _this.showClearButton = false;
        _this.commonUtils = null;
        _this.localeService = _this.injector.get(LocaleService);
        _this.cd = _this.injector.get(ChangeDetectorRef, null);
        _this.commonUtils = _this.injector.get(CommonUtils, null) || new CommonUtils();
        return _this;
    }
    /**
     * @return {?}
     */
    SorterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    SorterComponent.prototype.onmouseover = /**
     * @return {?}
     */
    function () {
        this.showClearButton = true;
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.onmouseleave = /**
     * @return {?}
     */
    function () {
        this.showClearButton = false;
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.disabled) {
            if (this.fieldEditor && this.fieldEditor.type === 'combo-tree') {
                this.fieldEditor.options = this.fieldEditor.options || {};
                if (this.fieldEditor.options.autoWidth === undefined) {
                    this.fieldEditor.options.autoWidth = true;
                }
                if (!this.fieldEditor.options.columns) {
                    this.fieldEditor.options.columns = [{ field: 'label', title: 'label', width: 100 }];
                }
                if (!this.fieldEditor.options.textField) {
                    this.fieldEditor.options.textField = 'label';
                }
                if (!this.fieldEditor.options.idField) {
                    this.fieldEditor.options.idField = 'value';
                }
            }
            /** @type {?} */
            var sortEditorFactory = this.cfr.resolveComponentFactory(SortEditorComponent);
            this.sortEditorRef = sortEditorFactory.create(this.injector);
            this.sortEditorRef.instance.columns = this.columns;
            this.sortEditorRef.instance.conditions = this.conditions;
            this.originalData = cloneDeep(this.conditions);
            this.dlgRef = this.modalService.show(this.sortEditorRef, {
                width: 500, height: 400,
                title: this.localeService.getValue('sortEditor.title'),
                enableScroll: false,
                minHeight: 298, minWidth: 498, iconCls: 'f-icon f-icon-col-defaultsort',
                buttons: this.btnRef,
                showMaxButton: false, buttonAlign: 'right',
                // dialogFooterStyles: { background: '#F4F6F9' },
                initialState: {
                    fieldEditor: this.fieldEditor
                }
            });
            this.sortEditorRef.instance.height = this.dlgRef.dialog.instance.getContainerSize().height;
            this.dlgRef.dialog.instance.resized.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                _this.sortEditorRef.instance.height = size.containerHeight;
            }));
            this.sortEditorRef.instance.sortsChanged.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.conditions = e.data;
            }));
            this.sortEditorRef.changeDetectorRef.detectChanges();
            this.dlgRef.dialog.changeDetectorRef.reattach();
            this.openDialog.emit();
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    SorterComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (typeof val === 'string') {
                val = JSON.parse(val);
            }
            this.conditions = val || [];
            this.text = this.commonUtils.buildSortString(val);
        }
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.save = /**
     * @return {?}
     */
    function () {
        if (this.conditions.length) {
            this.conditions = this.conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.sortField; }));
            this.text = this.commonUtils.buildSortString(this.conditions);
        }
        else {
            this.text = '';
        }
        this.closeDialog();
        if (this.cd) {
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.conditions = this.originalData;
        this.closeDialog();
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.updateModel();
        this.sortEditorRef = null;
        this.dlgRef.close();
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.text = '';
        this.conditions = [];
        this.updateModel();
    };
    /**
     * @private
     * @return {?}
     */
    SorterComponent.prototype.updateModel = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var v = this.conditions;
        if (this.returnType === 'string') {
            v = JSON.stringify(this.conditions);
        }
        this.onModelChange(v);
        this.onModelTouched(v);
    };
    SorterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sorter',
                    template: "\n    <div class=\"input-group\">\n        <input class=\"form-control\" [value]=\"text\" #txtbox\n            [readonly]=\"!editable || readonly\"\n            [class.f-state-disabled] = \"disabled\"\n            [class.f-state-readonly] = \"readonly\"\n            [class.f-state-editable] = \"!editable\"\n            [disabled]=\"disabled\"/>\n        <div class=\"input-group-append\" *ngIf=\"!readonly && !disabled\">\n            <span *ngIf=\"showClearButton && enableClear\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\n                <i class=\"f-icon modal_close\"></i>\n            </span>\n            <span class=\"f-select input-group-text\"  (click)=\"showDialog()\">\n                <i class=\"f-icon f-icon-lookup\"></i>\n            </span>\n        </div>\n    </div>\n\n    <ng-template #defaultButtonRef>\n        <button class=\"btn btn-outline-secondary\" (click)=\"cancel()\"> {{ 'sortEditor.cancel'| locale }} </button>&nbsp;\n        <button class=\"btn btn-primary\" (click)=\"save()\"> {{ 'sortEditor.ok'| locale }} </button>\n    </ng-template>\n    ",
                    providers: [
                        SORTER_LOOKUPGRID_VALUE_ACCESSOR
                    ],
                    styles: ["\n        .lookup-clear { cursor: pointer; background: #fff!important;}\n        .lookup-clear:hover { background: #e9ecef!important;}\n        "]
                }] }
    ];
    /** @nocollapse */
    SorterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: ElementRef }
    ]; };
    SorterComponent.propDecorators = {
        hostCls: [{ type: HostBinding, args: ['class',] }],
        columns: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        returnType: [{ type: Input }],
        enableClear: [{ type: Input }],
        openDialog: [{ type: Output }],
        btnRef: [{ type: ViewChild, args: ['defaultButtonRef',] }],
        textbox: [{ type: ViewChild, args: ['txtbox',] }],
        onmouseover: [{ type: HostListener, args: ['mouseover',] }],
        onmouseleave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return SorterComponent;
}(LookupComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SorterModule = /** @class */ (function () {
    function SorterModule() {
    }
    SorterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        MessagerModule.forRoot(),
                        PerfectScrollbarModule,
                        FarrisDialogModule,
                        LookupModule,
                        FarrisCommonModule,
                        ComboLookupModule,
                        LocaleModule,
                        FarrisFormsModule
                    ],
                    declarations: [
                        SortEditorComponent,
                        SorterComponent
                    ],
                    exports: [
                        SorterComponent,
                        SortEditorComponent
                    ],
                    entryComponents: [
                        SortEditorComponent
                    ]
                },] }
    ];
    return SorterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SortEditorComponent, SORTER_LOOKUPGRID_VALUE_ACCESSOR, SorterComponent, SorterModule };

//# sourceMappingURL=farris-ui-sort-editor.js.map