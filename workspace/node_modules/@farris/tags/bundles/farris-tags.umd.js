(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@farris/ui-locale')) :
    typeof define === 'function' && define.amd ? define('@farris/tags', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@farris/ui-locale'], factory) :
    (factory((global.farris = global.farris || {}, global.farris.tags = {}),global.ng.core,global.ng.common,global.ng.forms,global.uiLocale));
}(this, (function (exports,i0,common,forms,uiLocale) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TagsService = /** @class */ (function () {
        function TagsService() {
        }
        TagsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TagsService.ctorParameters = function () { return []; };
        /** @nocollapse */ TagsService.ngInjectableDef = i0.defineInjectable({ factory: function TagsService_Factory() { return new TagsService(); }, token: TagsService, providedIn: "root" });
        return TagsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TagsComponent = /** @class */ (function () {
        function TagsComponent(localeService, cd) {
            this.localeService = localeService;
            this.cd = cd;
            //是否支持添加
            this._addable = true;
            //是否支持关闭
            this._closable = true;
            this._readonly = false;
            this.checkChanged = new i0.EventEmitter();
            this.tagClick = new i0.EventEmitter();
            this.dataChanged = new i0.EventEmitter();
            this.closed = new i0.EventEmitter();
            this.addInput = false;
            this.addTagValue = '';
            this.checkedTags = [];
            this.innerTags = [];
            //添加按钮是否禁用
            this.addTagAble = true;
            this.onChangeCallback = ( /**
             * @return {?}
             */function () { });
            this.onTouchedCallback = ( /**
             * @return {?}
             */function () { });
        }
        Object.defineProperty(TagsComponent.prototype, "data", {
            get: /**
             * @return {?}
             */ function () {
                return this._data;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                var _this = this;
                this._data = val;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.tagInit(_this._data);
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagsComponent.prototype, "checkable", {
            get: /**
             * @return {?}
             */ function () {
                return this._checkable;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._checkable = val;
                this.cd.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagsComponent.prototype, "addable", {
            get: /**
             * @return {?}
             */ function () {
                return this._addable;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._addable = val;
                this.addTagAble = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagsComponent.prototype, "tagType", {
            get: /**
             * @return {?}
             */ function () {
                return this._tagType;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._tagType = val;
                this.cd.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagsComponent.prototype, "color", {
            get: /**
             * @return {?}
             */ function () {
                return this._color;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._color = val;
                this.styleInit();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagsComponent.prototype, "closable", {
            get: /**
             * @return {?}
             */ function () {
                return this._closable;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._closable = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagsComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */ function () {
                return this._readonly;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._readonly = val;
                if (!this._readonly) {
                    this._closable = true;
                    // this._addable = true;
                    this.addTagAble = true;
                }
                else {
                    this.activeTag = '';
                    this._closable = false;
                    // this._addable = false;
                    this.addTagAble = false;
                }
                this.cd.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TagsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this._checkable) {
                    this._closable = false;
                }
                this.placeholder = this.localeService.getValue('tag.placeholder');
            };
        /**
         * @param {?} data
         * @return {?}
         */
        TagsComponent.prototype.tagInit = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.innerTags = [];
                if (!data)
                    return;
                /** @type {?} */
                var tagsArray = data.split(',');
                /** @type {?} */
                var tagsData = tagsArray.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (item !== '') {
                        return item;
                    }
                }));
                if (tagsData && tagsData.length) {
                    for (var i = 0; i < tagsData.length; i++) {
                        /** @type {?} */
                        var tagdata = {
                            name: ''
                        };
                        tagdata.name = tagsData[i];
                        this.innerTags.push(tagdata);
                    }
                }
                else {
                    this.innerTags = [];
                }
            };
        /**
         * 点击关闭
         * @param e event
         * @param tag tag
         * @param index tag索引
         */
        /**
         * 点击关闭
         * @param {?} e event
         * @param {?} tag tag
         * @param {?} index tag索引
         * @return {?}
         */
        TagsComponent.prototype.closeHandler = /**
         * 点击关闭
         * @param {?} e event
         * @param {?} tag tag
         * @param {?} index tag索引
         * @return {?}
         */
            function (e, tag, index) {
                e.preventDefault();
                this.innerTags.splice(index, 1);
                /** @type {?} */
                var tagdata = this.tagProcess(this.innerTags);
                this.onChangeCallback(tagdata);
                this.onTouchedCallback();
                this.closed.emit(tag.name);
                this.dataChanged.emit(tagdata);
            };
        /**
         * 点击tag
         * @param e event
         * @param tag
         */
        /**
         * 点击tag
         * @param {?} e event
         * @param {?} tag
         * @return {?}
         */
        TagsComponent.prototype.clickHandler = /**
         * 点击tag
         * @param {?} e event
         * @param {?} tag
         * @return {?}
         */
            function (e, tag) {
                e.preventDefault();
                if (this._readonly)
                    return;
                if (this.activeTag != tag['name']) {
                    this.activeTag = tag.name;
                }
                this.tagClick.emit(tag.name);
                if (!this._checkable)
                    return;
                if (tag.hasOwnProperty('checked')) {
                    tag.checked = !tag.checked;
                }
                else {
                    tag.checked = true;
                }
                this.checkedTags = this.innerTags.filter(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    return data.checked;
                }));
                /** @type {?} */
                var tagdata = this.tagProcess(this.innerTags);
                this.onChangeCallback(tagdata);
                this.onTouchedCallback();
                /** @type {?} */
                var CheckChangedData = {
                    data: tagdata,
                    tag: tag.name,
                    checked: this.tagProcess(this.checkedTags)
                };
                this.checkChanged.emit(CheckChangedData);
            };
        /**
         * 点击添加tag按钮
         */
        /**
         * 点击添加tag按钮
         * @return {?}
         */
        TagsComponent.prototype.addHander = /**
         * 点击添加tag按钮
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this._addable || !this.addTagAble)
                    return;
                this.addInput = true;
                this.addTagValue = '';
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.addInputText.nativeElement.focus();
                }));
            };
        /**
         * 添加tag失去焦点
         */
        /**
         * 添加tag失去焦点
         * @param {?} event
         * @return {?}
         */
        TagsComponent.prototype.addInputBlur = /**
         * 添加tag失去焦点
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (!this._addable || !this.addInput)
                    return;
                if (this.addTagValue) {
                    /** @type {?} */
                    var hastag = this.innerTags.find(( /**
                     * @param {?} tag
                     * @return {?}
                     */function (tag) {
                        return tag.name == _this.addTagValue;
                    }));
                    if (hastag) {
                        this.addInput = false;
                        return;
                    }
                    else {
                        /** @type {?} */
                        var tag = { name: this.addTagValue };
                        this.innerTags.push(tag);
                        /** @type {?} */
                        var tagdata = this.tagProcess(this.innerTags);
                        this.dataChanged.emit(this.tagProcess(this.innerTags));
                        this.onChangeCallback(tagdata);
                        this.onTouchedCallback();
                    }
                }
                this.addInput = false;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        TagsComponent.prototype.writeValue = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                this._data = val;
                this.tagInit(this._data);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TagsComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TagsComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        TagsComponent.prototype.tagProcess = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (data && data.length) {
                    /** @type {?} */
                    var tagProcessData_1 = [];
                    data.forEach(( /**
                     * @param {?} tag
                     * @return {?}
                     */function (tag) {
                        tagProcessData_1.push(tag.name);
                    }));
                    return tagProcessData_1.join(',');
                }
                else {
                    return '';
                }
            };
        //改变透明度
        //改变透明度
        /**
         * @param {?} hex
         * @param {?=} opacity
         * @return {?}
         */
        TagsComponent.prototype.hexToRgba =
            //改变透明度
            /**
             * @param {?} hex
             * @param {?=} opacity
             * @return {?}
             */
            function (hex, opacity) {
                if (opacity === void 0) {
                    opacity = 1;
                }
                /** @type {?} */
                var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
                /** @type {?} */
                var sColor = hex.toLowerCase();
                if (sColor && reg.test(sColor)) {
                    if (sColor.length === 4) {
                        /** @type {?} */
                        var sColorNew = "#";
                        for (var i = 1; i < 4; i += 1) {
                            sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                        }
                        sColor = sColorNew;
                    }
                    //处理六位的颜色值
                    /** @type {?} */
                    var sColorChange = [];
                    for (var i = 1; i < 7; i += 2) {
                        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
                    }
                    return "RGB(" + sColorChange.join(",") + ',' + opacity + ")";
                }
                else {
                    return sColor;
                }
            };
        /**
         * @return {?}
         */
        TagsComponent.prototype.styleInit = /**
         * @return {?}
         */
            function () {
                if (this.color) {
                    this.tagStyle = {
                        color: this._color,
                        background: this._color ? this.hexToRgba(this._color, 0.1) : '',
                        borderColor: this._color
                    };
                }
                else {
                    this.tagStyle = '';
                }
                this.cd.detectChanges();
            };
        TagsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-tags',
                        template: "<div [class]=\"'farris-tags '+ (className?className:'')\" [ngClass]=\"{'farris-tags-checkable': checkable}\">\r\n    <ul class=\"farris-tags-item-container\">\r\n        <li\r\n        *ngFor=\"let tag of innerTags;let index = index;\"\r\n        [class]=\"'farris-tag-item' + (tagType?' farris-tag-item-' + tagType:'')\"\r\n        [ngClass]=\"{'farris-tag-item-checked': checkable && tag.checked,\r\n        'farris-tag-item-checkable': checkable, \r\n        'farris-tag-item-has-color': color,\r\n        'farris-tag-item-actived':activeTag == tag.name}\"\r\n        (click)=\"clickHandler($event,tag)\"\r\n        [ngStyle]=\"tagStyle\"\r\n        >\r\n            <span class=\"tag-box\">{{tag.name}}</span>\r\n            <span class=\"tag-delete\" *ngIf=\"closable\">\r\n                <i class=\"f-icon f-icon-close\" (click)=\"closeHandler($event,tag,index)\"></i>\r\n            </span>\r\n        </li>\r\n        <li class=\"farris-tag-item farris-tag-add-button\" [ngClass]=\"{'farris-tag-add-button-disabled': !addTagAble}\" *ngIf=\"addable && !addInput\" (click)=\"addHander()\">\r\n            <span class=\"f-icon f-icon-amplification\"></span>\r\n            <span class=\"farris-tag-add-text\">{{ 'tag.addText' | locale }}</span>\r\n        </li>\r\n        <li class=\"farris-tag-input-box\" *ngIf=\"addable && addInput\">\r\n            <input type=\"text\" class=\"form-control\" (blur)=\"addInputBlur($event)\" (keyup.enter)=\"addInputBlur($event)\" #addInputText [(ngModel)]=\"addTagValue\" [placeholder]=\"placeholder\">\r\n        </li>\r\n    </ul>\r\n</div>",
                        // styleUrls: ['./tags.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(( /**
                                 * @return {?}
                                 */function () { return TagsComponent; })),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        TagsComponent.ctorParameters = function () {
            return [
                { type: uiLocale.LocaleService },
                { type: i0.ChangeDetectorRef }
            ];
        };
        TagsComponent.propDecorators = {
            data: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            checkable: [{ type: i0.Input }],
            addable: [{ type: i0.Input }],
            tagType: [{ type: i0.Input }],
            color: [{ type: i0.Input }],
            closable: [{ type: i0.Input }],
            readonly: [{ type: i0.Input }],
            className: [{ type: i0.Input }],
            checkChanged: [{ type: i0.Output }],
            tagClick: [{ type: i0.Output }],
            dataChanged: [{ type: i0.Output }],
            closed: [{ type: i0.Output }],
            addInputText: [{ type: i0.ViewChild, args: ['addInputText',] }]
        };
        return TagsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TagsModule = /** @class */ (function () {
        function TagsModule() {
        }
        TagsModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [TagsComponent],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiLocale.LocaleModule.forRoot()
                        ],
                        exports: [TagsComponent]
                    },] }
        ];
        return TagsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TagsService = TagsService;
    exports.TagsComponent = TagsComponent;
    exports.TagsModule = TagsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-tags.umd.js.map