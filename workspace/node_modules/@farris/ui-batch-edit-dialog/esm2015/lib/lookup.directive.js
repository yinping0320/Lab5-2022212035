/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { LookupComponent } from '@farris/ui-lookup';
import { of } from 'rxjs';
export class LookupDirective {
    constructor() {
        this.onSelectRows = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.lookup) {
            this.lookup.dictPicked = (/**
             * @param {?} rows
             * @return {?}
             */
            (rows) => {
                if (this.onSelectRows) {
                    this.onSelectRows.emit({ field: this.field, rows: [].concat(rows) });
                }
                /** @type {?} */
                const result = {
                    closeDialog: true
                };
                return of(result);
            });
        }
    }
}
LookupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lookup-extra]'
            },] }
];
/** @nocollapse */
LookupDirective.ctorParameters = () => [];
LookupDirective.propDecorators = {
    field: [{ type: Input, args: ['lookup-extra',] }],
    lookup: [{ type: Input, args: ['ins',] }],
    onSelectRows: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LookupDirective.prototype.field;
    /** @type {?} */
    LookupDirective.prototype.lookup;
    /** @type {?} */
    LookupDirective.prototype.onSelectRows;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktYmF0Y2gtZWRpdC1kaWFsb2cvIiwic291cmNlcyI6WyJsaWIvbG9va3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFLMUIsTUFBTSxPQUFPLGVBQWU7SUFJeEI7UUFEVSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRXBFLENBQUM7Ozs7SUFDRCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVOzs7O1lBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtpQkFDdkU7O3NCQUNLLE1BQU0sR0FBRztvQkFDWCxXQUFXLEVBQUUsSUFBSTtpQkFDcEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFBLENBQUM7U0FDTDtJQUNMLENBQUM7OztZQXJCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjthQUM3Qjs7Ozs7b0JBRUksS0FBSyxTQUFDLGNBQWM7cUJBQ3BCLEtBQUssU0FBQyxLQUFLOzJCQUNYLE1BQU07Ozs7SUFGUCxnQ0FBcUM7O0lBQ3JDLGlDQUFzQzs7SUFDdEMsdUNBQW9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExvb2t1cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbbG9va3VwLWV4dHJhXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvb2t1cERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gICAgQElucHV0KCdsb29rdXAtZXh0cmEnKSBmaWVsZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCdpbnMnKSBsb29rdXA6IExvb2t1cENvbXBvbmVudDtcclxuICAgIEBPdXRwdXQoKSBvblNlbGVjdFJvd3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5sb29rdXApIHtcclxuICAgICAgICAgICAgdGhpcy5sb29rdXAuZGljdFBpY2tlZCA9IChyb3dzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uU2VsZWN0Um93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TZWxlY3RSb3dzLmVtaXQoeyBmaWVsZDogdGhpcy5maWVsZCwgcm93czogW10uY29uY2F0KHJvd3MpIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VEaWFsb2c6IHRydWVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YocmVzdWx0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=