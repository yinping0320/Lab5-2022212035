/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, EventEmitter } from '@angular/core';
import { BatchEditDialogComponent } from './batch-edit-dialog.component';
import { BsModalService } from '@farris/ui-modal';
import { LocaleService } from '@farris/ui-locale';
import { of, Subject } from 'rxjs';
import { ResultConfirmComponent } from './result-confirm/result-confirm.component';
// tslint:disable: max-line-length
var BatchEditDialogService = /** @class */ (function () {
    function BatchEditDialogService(injector, modalService, componentFactoryResolver, localeService) {
        this.injector = injector;
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.localeService = localeService;
        this.dialogRef = null;
        this.componentRef = null;
        // 用户对输入进行确认，此时可以更新bindingData数据
        this.onUserConfirmed = new EventEmitter();
    }
    /**
     * @description 控件参数格式
     * # 控件参数格式
     * ## textbox
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.TEXTBOX}}
     * ```
     * ## dropdown
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.COMBOLIST,"idField":"id","textField":"text","items":[],"multiSelect":false}}
     * ```
     * ## lookup
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.LOOKUP,"uri":"","idField":"id","textField":"text","valueField":"id","displayType":"LIST","mapFields":{},"singleSelect":true,"dialogTitle":"","hiddenInputName":"","items":[],"multiSelect":false}}
     * ```
     * ## 数值输入框
     * ```json
     * {"title":"数值","field":"name","editor":{"controlType":EditorTypes.NUMBER,"precision":2,"step":1,"min":1,"max":10}}
     * ```
     */
    /**
     * \@description 控件参数格式
     * # 控件参数格式
     * ## textbox
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.TEXTBOX}}
     * ```
     * ## dropdown
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.COMBOLIST,"idField":"id","textField":"text","items":[],"multiSelect":false}}
     * ```
     * ## lookup
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.LOOKUP,"uri":"","idField":"id","textField":"text","valueField":"id","displayType":"LIST","mapFields":{},"singleSelect":true,"dialogTitle":"","hiddenInputName":"","items":[],"multiSelect":false}}
     * ```
     * ## 数值输入框
     * ```json
     * {"title":"数值","field":"name","editor":{"controlType":EditorTypes.NUMBER,"precision":2,"step":1,"min":1,"max":10}}
     * ```
     * @param {?} columns
     * @param {?=} options
     * @return {?}
     */
    BatchEditDialogService.prototype.batchEdit = /**
     * \@description 控件参数格式
     * # 控件参数格式
     * ## textbox
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.TEXTBOX}}
     * ```
     * ## dropdown
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.COMBOLIST,"idField":"id","textField":"text","items":[],"multiSelect":false}}
     * ```
     * ## lookup
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.LOOKUP,"uri":"","idField":"id","textField":"text","valueField":"id","displayType":"LIST","mapFields":{},"singleSelect":true,"dialogTitle":"","hiddenInputName":"","items":[],"multiSelect":false}}
     * ```
     * ## 数值输入框
     * ```json
     * {"title":"数值","field":"name","editor":{"controlType":EditorTypes.NUMBER,"precision":2,"step":1,"min":1,"max":10}}
     * ```
     * @param {?} columns
     * @param {?=} options
     * @return {?}
     */
    function (columns, options) {
        var _this = this;
        /** @type {?} */
        var titleText = this.localeService.getValue('batchEditDialog.title');
        /** @type {?} */
        var okText = this.localeService.getValue('batchEditDialog.okText');
        /** @type {?} */
        var cancelText = this.localeService.getValue('batchEditDialog.cancelText');
        var _a = options || {}, _b = _a.width, width = _b === void 0 ? 792 : _b, _c = _a.height, height = _c === void 0 ? 580 : _c, _d = _a.title, title = _d === void 0 ? titleText : _d, _e = _a.rows, rows = _e === void 0 ? 1 : _e;
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(BatchEditDialogComponent);
        this.componentRef = componentFactory.create(this.injector);
        this.componentRef.instance.fields = this.getFields(columns);
        this.componentRef.instance.eidtors = this.getEditors(columns);
        this.componentRef.instance.title = title;
        this.componentRef.instance.rows = rows;
        this.dialogRef = this.modalService.show(this.componentRef, {
            title: title,
            width: width,
            height: height,
            buttons: [
                {
                    text: cancelText, cls: 'btn btn-secondary', handle: (/**
                     * @return {?}
                     */
                    function () {
                        _this.dialogRef.close();
                    })
                },
                {
                    text: okText, cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        _this.userConfired();
                    })
                }
            ],
            showHeader: false,
            showButtons: false,
        });
        this.componentRef.instance.confirmed.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.canConfirm(options).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result === true) {
                    _this.userConfired(options);
                    _this.dialogRef.close();
                }
            }));
        }));
        this.componentRef.instance.canceled.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.dialogRef.close();
        }));
        this.componentRef.instance.dialogRef = this.dialogRef;
        this.dialogRef.dialog.instance.draggbar.handle = this.componentRef.instance.header.nativeElement;
        return this.dialogRef;
    };
    /**
     * 用户确认修改
     */
    /**
     * 用户确认修改
     * @param {?=} options
     * @return {?}
     */
    BatchEditDialogService.prototype.userConfired = /**
     * 用户确认修改
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var inputs = this.componentRef && this.componentRef.instance && this.componentRef.instance.inputs || [];
        // 针对checkbox做特殊处理
        if (inputs && inputs.length > 0) {
            inputs.forEach((/**
             * @param {?} input
             * @return {?}
             */
            function (input) {
                var controlType = input.controlType, dataType = input.dataType;
                if (controlType === 'checkbox' && dataType === 'boolean') {
                    input.value = input.value ? true : false;
                }
            }));
        }
        if (options && options.onConfirm && typeof options.onConfirm === 'function') {
            options.onConfirm(inputs);
        }
        this.onUserConfirmed.next(inputs);
    };
    /**
     * 从dom中获取grid列
     * @param columns dom
     */
    /**
     * 从dom中获取grid列
     * @private
     * @param {?} columns dom
     * @return {?}
     */
    BatchEditDialogService.prototype.getFields = /**
     * 从dom中获取grid列
     * @private
     * @param {?} columns dom
     * @return {?}
     */
    function (columns) {
        /** @type {?} */
        var fields = [];
        if (!columns || columns.length < 1) {
            return fields;
        }
        columns.forEach((/**
         * @param {?} collect
         * @return {?}
         */
        function (collect) {
            // collect为数组
            if (collect && collect.length > 0) {
                collect.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) {
                    var _a = column || {}, _b = _a.field, field = _b === void 0 ? null : _b, _c = _a.title, title = _c === void 0 ? '' : _c, _d = _a.dataType, dataType = _d === void 0 ? null : _d, _e = _a.enableBatchEdit, enableBatchEdit = _e === void 0 ? false : _e;
                    if (field && enableBatchEdit) {
                        fields.push({ id: field, label: title, dataType: dataType });
                    }
                }));
            }
        }));
        return fields;
    };
    /**
     * 从columns中获取编辑器
     * @param columns dom
     */
    /**
     * 从columns中获取编辑器
     * @private
     * @param {?} columns dom
     * @return {?}
     */
    BatchEditDialogService.prototype.getEditors = /**
     * 从columns中获取编辑器
     * @private
     * @param {?} columns dom
     * @return {?}
     */
    function (columns) {
        /** @type {?} */
        var editors = [];
        if (!columns || columns.length < 1) {
            return editors;
        }
        columns.forEach((/**
         * @param {?} collect
         * @return {?}
         */
        function (collect) {
            // collect为数组
            if (collect && collect.length > 0) {
                collect.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) {
                    var _a = column || {}, _b = _a.field, field = _b === void 0 ? null : _b, _c = _a.editor, editor = _c === void 0 ? {} : _c, _d = _a.enableBatchEdit, enableBatchEdit = _d === void 0 ? false : _d;
                    if (editor && field && enableBatchEdit) {
                        editor.controlType = editor.type;
                        editors.push({ field: field, editor: editor });
                    }
                }));
            }
        }));
        return editors;
    };
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    BatchEditDialogService.prototype.canConfirm = /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var showNotify = options && options.showNotify;
        var _a = (options || {}).rows, rows = _a === void 0 ? 1 : _a;
        /** @type {?} */
        var valueChanged = this.isValueChanged();
        if (!valueChanged) {
            return of(true);
        }
        if (showNotify === undefined) {
            showNotify = true;
        }
        if (!showNotify) {
            return of(true);
        }
        /** @type {?} */
        var dialogRef = null;
        try {
            /** @type {?} */
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(ResultConfirmComponent);
            /** @type {?} */
            var componentRef = componentFactory.create(this.injector);
            /** @type {?} */
            var shouldShowNotify = componentRef.instance.showNotify || false;
            componentRef.instance.rows = rows;
            if (shouldShowNotify) {
                dialogRef = this.modalService.show(componentRef, {
                    title: '',
                    width: 500,
                    height: 240,
                    showHeader: false,
                    showButtons: false,
                    buttons: []
                });
                // 确认
                componentRef.instance.confirmed.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (dialogRef) {
                        dialogRef.close();
                    }
                    subject.next(true);
                }));
                // 取消
                componentRef.instance.canceled.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (dialogRef) {
                        dialogRef.close();
                    }
                    subject.next(false);
                }));
            }
            else {
                return of(true);
            }
        }
        catch (e) {
            return of(true);
        }
        return subject;
    };
    /**
     * @return {?}
     */
    BatchEditDialogService.prototype.isValueChanged = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputs = this.componentRef && this.componentRef.instance && this.componentRef.instance.inputs || [];
        if (!inputs || inputs.length < 1) {
            return false;
        }
        /** @type {?} */
        var unChanged = inputs.every((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !item.field; }));
        return !unChanged;
    };
    BatchEditDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BatchEditDialogService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: LocaleService }
    ]; };
    return BatchEditDialogService;
}());
export { BatchEditDialogService };
if (false) {
    /** @type {?} */
    BatchEditDialogService.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    BatchEditDialogService.prototype.componentRef;
    /** @type {?} */
    BatchEditDialogService.prototype.onUserConfirmed;
    /** @type {?} */
    BatchEditDialogService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    BatchEditDialogService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    BatchEditDialogService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    BatchEditDialogService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gtZWRpdC1kaWFsb2cuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktYmF0Y2gtZWRpdC1kaWFsb2cvIiwic291cmNlcyI6WyJsaWIvYmF0Y2gtZWRpdC1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsY0FBYyxFQUFjLE1BQU0sa0JBQWtCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBNEIsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7QUFFbkY7SUFNRSxnQ0FDUyxRQUFrQixFQUNqQixZQUE0QixFQUM1Qix3QkFBa0QsRUFDbEQsYUFBNEI7UUFIN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNqQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVIvQixjQUFTLEdBQWUsSUFBSSxDQUFDO1FBQzVCLGlCQUFZLEdBQTJDLElBQUksQ0FBQzs7UUFFN0Qsb0JBQWUsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQU1oRSxDQUFDO0lBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FtQkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUNJLDBDQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFoQixVQUFpQixPQUFZLEVBQUUsT0FBcUM7UUFBcEUsaUJBK0NDOztZQTlDTyxTQUFTLEdBQUcsSUFB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QUM7SUFDcEIsQ0FBQzs7Z0JBM01GLFVBQVU7Ozs7Z0JBUG9DLFFBQVE7Z0JBRTlDLGNBQWM7Z0JBRkYsd0JBQXdCO2dCQUdwQyxhQUFhOztJQWdOdEIsNkJBQUM7Q0FBQSxBQTVNRCxJQTRNQztTQTNNWSxzQkFBc0I7OztJQUNqQywyQ0FBb0M7Ozs7O0lBQ3BDLDhDQUFvRTs7SUFFcEUsaURBQW9FOztJQUVsRSwwQ0FBeUI7Ozs7O0lBQ3pCLDhDQUFvQzs7Ozs7SUFDcEMsMERBQTBEOzs7OztJQUMxRCwrQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCYXRjaEVkaXREaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2JhdGNoLWVkaXQtZGlhbG9nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlLCBCc01vZGFsUmVmIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUmVzdWx0Q29uZmlybUNvbXBvbmVudCB9IGZyb20gJy4vcmVzdWx0LWNvbmZpcm0vcmVzdWx0LWNvbmZpcm0uY29tcG9uZW50JztcclxuLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXRjaEVkaXREaWFsb2dTZXJ2aWNlIHtcclxuICBwdWJsaWMgZGlhbG9nUmVmOiBCc01vZGFsUmVmID0gbnVsbDtcclxuICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEJhdGNoRWRpdERpYWxvZ0NvbXBvbmVudD4gPSBudWxsO1xyXG4gIC8vIOeUqOaIt+Wvuei+k+WFpei/m+ihjOehruiupO+8jOatpOaXtuWPr+S7peabtOaWsGJpbmRpbmdEYXRh5pWw5o2uXHJcbiAgcHVibGljIG9uVXNlckNvbmZpcm1lZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSBsb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlLFxyXG4gICkgeyB9XHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIOaOp+S7tuWPguaVsOagvOW8j1xyXG4gICAqICMg5o6n5Lu25Y+C5pWw5qC85byPXHJcbiAgICogIyMgdGV4dGJveFxyXG4gICAqIGBgYGpzb25cclxuICAgKiB7XCJ0aXRsZVwiOlwi5aeT5ZCNXCIsXCJmaWVsZFwiOlwibmFtZVwiLFwiZWRpdG9yXCI6e1wiY29udHJvbFR5cGVcIjpFZGl0b3JUeXBlcy5URVhUQk9YfX1cclxuICAgKiBgYGBcclxuICAgKiAjIyBkcm9wZG93blxyXG4gICAqIGBgYGpzb25cclxuICAgKiB7XCJ0aXRsZVwiOlwi5aeT5ZCNXCIsXCJmaWVsZFwiOlwibmFtZVwiLFwiZWRpdG9yXCI6e1wiY29udHJvbFR5cGVcIjpFZGl0b3JUeXBlcy5DT01CT0xJU1QsXCJpZEZpZWxkXCI6XCJpZFwiLFwidGV4dEZpZWxkXCI6XCJ0ZXh0XCIsXCJpdGVtc1wiOltdLFwibXVsdGlTZWxlY3RcIjpmYWxzZX19XHJcbiAgICogYGBgXHJcbiAgICogIyMgbG9va3VwXHJcbiAgICogYGBganNvblxyXG4gICAqIHtcInRpdGxlXCI6XCLlp5PlkI1cIixcImZpZWxkXCI6XCJuYW1lXCIsXCJlZGl0b3JcIjp7XCJjb250cm9sVHlwZVwiOkVkaXRvclR5cGVzLkxPT0tVUCxcInVyaVwiOlwiXCIsXCJpZEZpZWxkXCI6XCJpZFwiLFwidGV4dEZpZWxkXCI6XCJ0ZXh0XCIsXCJ2YWx1ZUZpZWxkXCI6XCJpZFwiLFwiZGlzcGxheVR5cGVcIjpcIkxJU1RcIixcIm1hcEZpZWxkc1wiOnt9LFwic2luZ2xlU2VsZWN0XCI6dHJ1ZSxcImRpYWxvZ1RpdGxlXCI6XCJcIixcImhpZGRlbklucHV0TmFtZVwiOlwiXCIsXCJpdGVtc1wiOltdLFwibXVsdGlTZWxlY3RcIjpmYWxzZX19XHJcbiAgICogYGBgXHJcbiAgICogIyMg5pWw5YC86L6T5YWl5qGGXHJcbiAgICogYGBganNvblxyXG4gICAqIHtcInRpdGxlXCI6XCLmlbDlgLxcIixcImZpZWxkXCI6XCJuYW1lXCIsXCJlZGl0b3JcIjp7XCJjb250cm9sVHlwZVwiOkVkaXRvclR5cGVzLk5VTUJFUixcInByZWNpc2lvblwiOjIsXCJzdGVwXCI6MSxcIm1pblwiOjEsXCJtYXhcIjoxMH19XHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgcHVibGljIGJhdGNoRWRpdChjb2x1bW5zOiBhbnksIG9wdGlvbnM/OiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0pOiBCc01vZGFsUmVmIHtcclxuICAgIGNvbnN0IHRpdGxlVGV4dCA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnYmF0Y2hFZGl0RGlhbG9nLnRpdGxlJyk7XHJcbiAgICBjb25zdCBva1RleHQgPSB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2JhdGNoRWRpdERpYWxvZy5va1RleHQnKTtcclxuICAgIGNvbnN0IGNhbmNlbFRleHQgPSB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2JhdGNoRWRpdERpYWxvZy5jYW5jZWxUZXh0Jyk7XHJcbiAgICBjb25zdCB7IHdpZHRoID0gNzkyLCBoZWlnaHQgPSA1ODAsIHRpdGxlID0gdGl0bGVUZXh0LCByb3dzID0gMSB9ID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShCYXRjaEVkaXREaWFsb2dDb21wb25lbnQpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSBjb21wb25lbnRGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmZpZWxkcyA9IHRoaXMuZ2V0RmllbGRzKGNvbHVtbnMpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZWlkdG9ycyA9IHRoaXMuZ2V0RWRpdG9ycyhjb2x1bW5zKTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnRpdGxlID0gdGl0bGU7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5yb3dzID0gcm93cztcclxuXHJcbiAgICB0aGlzLmRpYWxvZ1JlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3codGhpcy5jb21wb25lbnRSZWYsIHtcclxuICAgICAgdGl0bGUsXHJcbiAgICAgIHdpZHRoLFxyXG4gICAgICBoZWlnaHQsXHJcbiAgICAgIGJ1dHRvbnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0ZXh0OiBjYW5jZWxUZXh0LCBjbHM6ICdidG4gYnRuLXNlY29uZGFyeScsIGhhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGV4dDogb2tUZXh0LCBjbHM6ICdidG4gYnRuLXByaW1hcnknLFxyXG4gICAgICAgICAgaGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlckNvbmZpcmVkKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBzaG93SGVhZGVyOiBmYWxzZSxcclxuICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb25maXJtZWQuc3Vic2NyaWJlKChlOiB7IGluc3RhbmNlOiBhbnksIGV2ZW50OiBhbnkgfSkgPT4ge1xyXG4gICAgICB0aGlzLmNhbkNvbmZpcm0ob3B0aW9ucykuc3Vic2NyaWJlKChyZXN1bHQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICB0aGlzLnVzZXJDb25maXJlZChvcHRpb25zKTtcclxuICAgICAgICAgIHRoaXMuZGlhbG9nUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY2FuY2VsZWQuc3Vic2NyaWJlKChlOiB7IGluc3RhbmNlOiBhbnksIGV2ZW50OiBhbnkgfSkgPT4ge1xyXG4gICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZGlhbG9nUmVmID0gdGhpcy5kaWFsb2dSZWY7XHJcbiAgICB0aGlzLmRpYWxvZ1JlZi5kaWFsb2cuaW5zdGFuY2UuZHJhZ2diYXIuaGFuZGxlID0gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuaGVhZGVyLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICByZXR1cm4gdGhpcy5kaWFsb2dSZWY7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOeUqOaIt+ehruiupOS/ruaUuVxyXG4gICAqL1xyXG4gIHB1YmxpYyB1c2VyQ29uZmlyZWQob3B0aW9ucz86IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgY29uc3QgaW5wdXRzID0gdGhpcy5jb21wb25lbnRSZWYgJiYgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UgJiYgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuaW5wdXRzIHx8IFtdO1xyXG4gICAgLy8g6ZKI5a+5Y2hlY2tib3jlgZrnibnmrorlpITnkIZcclxuICAgIGlmIChpbnB1dHMgJiYgaW5wdXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgY29udHJvbFR5cGUsIGRhdGFUeXBlIH0gPSBpbnB1dDtcclxuICAgICAgICBpZiAoY29udHJvbFR5cGUgPT09ICdjaGVja2JveCcgJiYgZGF0YVR5cGUgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgaW5wdXQudmFsdWUgPSBpbnB1dC52YWx1ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vbkNvbmZpcm0gJiYgdHlwZW9mIG9wdGlvbnMub25Db25maXJtID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIG9wdGlvbnMub25Db25maXJtKGlucHV0cyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm9uVXNlckNvbmZpcm1lZC5uZXh0KGlucHV0cyk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS7jmRvbeS4reiOt+WPlmdyaWTliJdcclxuICAgKiBAcGFyYW0gY29sdW1ucyBkb21cclxuICAgKi9cclxuICBwcml2YXRlIGdldEZpZWxkcyhjb2x1bW5zOiBhbnkpOiBBcnJheTxhbnk+IHtcclxuICAgIGNvbnN0IGZpZWxkcyA9IFtdO1xyXG4gICAgaWYgKCFjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4gZmllbGRzO1xyXG4gICAgfVxyXG4gICAgY29sdW1ucy5mb3JFYWNoKChjb2xsZWN0OiBBcnJheTxhbnk+KSA9PiB7XHJcbiAgICAgIC8vIGNvbGxlY3TkuLrmlbDnu4RcclxuICAgICAgaWYgKGNvbGxlY3QgJiYgY29sbGVjdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29sbGVjdC5mb3JFYWNoKChjb2x1bW46IGFueSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeyBmaWVsZCA9IG51bGwsIHRpdGxlID0gJycsIGRhdGFUeXBlID0gbnVsbCwgZW5hYmxlQmF0Y2hFZGl0ID0gZmFsc2UgfSA9IGNvbHVtbiB8fCB7fTtcclxuICAgICAgICAgIGlmIChmaWVsZCAmJiBlbmFibGVCYXRjaEVkaXQpIHtcclxuICAgICAgICAgICAgZmllbGRzLnB1c2goeyBpZDogZmllbGQsIGxhYmVsOiB0aXRsZSwgZGF0YVR5cGUgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZpZWxkcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5LuOY29sdW1uc+S4reiOt+WPlue8lui+keWZqFxyXG4gICAqIEBwYXJhbSBjb2x1bW5zIGRvbVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RWRpdG9ycyhjb2x1bW5zOiBhbnkpOiBBcnJheTxhbnk+IHtcclxuICAgIGNvbnN0IGVkaXRvcnMgPSBbXTtcclxuICAgIGlmICghY29sdW1ucyB8fCBjb2x1bW5zLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIGVkaXRvcnM7XHJcbiAgICB9XHJcbiAgICBjb2x1bW5zLmZvckVhY2goKGNvbGxlY3Q6IEFycmF5PGFueT4pID0+IHtcclxuICAgICAgLy8gY29sbGVjdOS4uuaVsOe7hFxyXG4gICAgICBpZiAoY29sbGVjdCAmJiBjb2xsZWN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb2xsZWN0LmZvckVhY2goKGNvbHVtbjogYW55KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7IGZpZWxkID0gbnVsbCwgZWRpdG9yID0ge30sIGVuYWJsZUJhdGNoRWRpdCA9IGZhbHNlIH0gPSBjb2x1bW4gfHwge307XHJcbiAgICAgICAgICBpZiAoZWRpdG9yICYmIGZpZWxkICYmIGVuYWJsZUJhdGNoRWRpdCkge1xyXG4gICAgICAgICAgICBlZGl0b3IuY29udHJvbFR5cGUgPSBlZGl0b3IudHlwZTtcclxuICAgICAgICAgICAgZWRpdG9ycy5wdXNoKHsgZmllbGQsIGVkaXRvciB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZWRpdG9ycztcclxuICB9XHJcbiAgcHJpdmF0ZSBjYW5Db25maXJtKG9wdGlvbnM/OiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICBsZXQgc2hvd05vdGlmeSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zaG93Tm90aWZ5O1xyXG4gICAgY29uc3QgeyByb3dzID0gMSB9ID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IHZhbHVlQ2hhbmdlZCA9IHRoaXMuaXNWYWx1ZUNoYW5nZWQoKTtcclxuICAgIGlmICghdmFsdWVDaGFuZ2VkKSB7XHJcbiAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgIH1cclxuICAgIGlmIChzaG93Tm90aWZ5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgc2hvd05vdGlmeSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIXNob3dOb3RpZnkpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgbGV0IGRpYWxvZ1JlZiA9IG51bGw7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoUmVzdWx0Q29uZmlybUNvbXBvbmVudCk7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGNvbXBvbmVudEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICBjb25zdCBzaG91bGRTaG93Tm90aWZ5ID0gY29tcG9uZW50UmVmLmluc3RhbmNlLnNob3dOb3RpZnkgfHwgZmFsc2U7XHJcblxyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uucm93cyA9IHJvd3M7XHJcbiAgICAgIGlmIChzaG91bGRTaG93Tm90aWZ5KSB7XHJcbiAgICAgICAgZGlhbG9nUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wb25lbnRSZWYsIHtcclxuICAgICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICAgIHdpZHRoOiA1MDAsXHJcbiAgICAgICAgICBoZWlnaHQ6IDI0MCxcclxuICAgICAgICAgIHNob3dIZWFkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgYnV0dG9uczogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDnoa7orqRcclxuICAgICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UuY29uZmlybWVkLnN1YnNjcmliZSgoZTogeyBpbnN0YW5jZTogYW55LCBldmVudDogYW55IH0pID0+IHtcclxuICAgICAgICAgIGlmIChkaWFsb2dSZWYpIHtcclxuICAgICAgICAgICAgZGlhbG9nUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g5Y+W5raIXHJcbiAgICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmNhbmNlbGVkLnN1YnNjcmliZSgoZTogeyBpbnN0YW5jZTogYW55LCBldmVudDogYW55IH0pID0+IHtcclxuICAgICAgICAgIGlmIChkaWFsb2dSZWYpIHtcclxuICAgICAgICAgICAgZGlhbG9nUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdWJqZWN0Lm5leHQoZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3ViamVjdDtcclxuICB9XHJcbiAgcHVibGljIGlzVmFsdWVDaGFuZ2VkKCkge1xyXG4gICAgY29uc3QgaW5wdXRzID0gdGhpcy5jb21wb25lbnRSZWYgJiYgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UgJiYgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuaW5wdXRzIHx8IFtdO1xyXG4gICAgaWYgKCFpbnB1dHMgfHwgaW5wdXRzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdW5DaGFuZ2VkID0gaW5wdXRzLmV2ZXJ5KChpdGVtKSA9PiAhaXRlbS5maWVsZCk7XHJcbiAgICByZXR1cm4gIXVuQ2hhbmdlZDtcclxuICB9XHJcbn1cclxuIl19