/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { LookupComponent } from '@farris/ui-lookup';
import { of } from 'rxjs';
var LookupDirective = /** @class */ (function () {
    function LookupDirective() {
        this.onSelectRows = new EventEmitter();
    }
    /**
     * @return {?}
     */
    LookupDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lookup) {
            this.lookup.dictPicked = (/**
             * @param {?} rows
             * @return {?}
             */
            function (rows) {
                if (_this.onSelectRows) {
                    _this.onSelectRows.emit({ field: _this.field, rows: [].concat(rows) });
                }
                /** @type {?} */
                var result = {
                    closeDialog: true
                };
                return of(result);
            });
        }
    };
    LookupDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lookup-extra]'
                },] }
    ];
    /** @nocollapse */
    LookupDirective.ctorParameters = function () { return []; };
    LookupDirective.propDecorators = {
        field: [{ type: Input, args: ['lookup-extra',] }],
        lookup: [{ type: Input, args: ['ins',] }],
        onSelectRows: [{ type: Output }]
    };
    return LookupDirective;
}());
export { LookupDirective };
if (false) {
    /** @type {?} */
    LookupDirective.prototype.field;
    /** @type {?} */
    LookupDirective.prototype.lookup;
    /** @type {?} */
    LookupDirective.prototype.onSelectRows;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktYmF0Y2gtZWRpdC1kaWFsb2cvIiwic291cmNlcyI6WyJsaWIvbG9va3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFMUI7SUFPSTtRQURVLGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFcEUsQ0FBQzs7OztJQUNELHlDQUFlOzs7SUFBZjtRQUFBLGlCQVlDO1FBWEcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVOzs7O1lBQUcsVUFBQyxJQUFTO2dCQUMvQixJQUFJLEtBQUksQ0FBQyxZQUFZLEVBQUU7b0JBQ25CLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2lCQUN2RTs7b0JBQ0ssTUFBTSxHQUFHO29CQUNYLFdBQVcsRUFBRSxJQUFJO2lCQUNwQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUEsQ0FBQztTQUNMO0lBQ0wsQ0FBQzs7Z0JBckJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUM3Qjs7Ozs7d0JBRUksS0FBSyxTQUFDLGNBQWM7eUJBQ3BCLEtBQUssU0FBQyxLQUFLOytCQUNYLE1BQU07O0lBZ0JYLHNCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FuQlksZUFBZTs7O0lBQ3hCLGdDQUFxQzs7SUFDckMsaUNBQXNDOztJQUN0Qyx1Q0FBb0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9va3VwQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tsb29rdXAtZXh0cmFdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9va3VwRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBASW5wdXQoJ2xvb2t1cC1leHRyYScpIGZpZWxkOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ2lucycpIGxvb2t1cDogTG9va3VwQ29tcG9uZW50O1xyXG4gICAgQE91dHB1dCgpIG9uU2VsZWN0Um93czogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmxvb2t1cCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvb2t1cC5kaWN0UGlja2VkID0gKHJvd3M6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25TZWxlY3RSb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdFJvd3MuZW1pdCh7IGZpZWxkOiB0aGlzLmZpZWxkLCByb3dzOiBbXS5jb25jYXQocm93cykgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZURpYWxvZzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvZihyZXN1bHQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==