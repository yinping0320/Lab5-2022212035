import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FarrisFormsModule } from '@farris/ui-forms';
import { ComboListModule } from '@farris/ui-combo-list';
import { InputGroupModule } from '@farris/ui-input-group';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { TimePickerModule } from '@farris/ui-time-picker';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { FarrisCommonModule } from '@farris/ui-common';
import { Component, ChangeDetectorRef, Injector, Input, ViewChild, Output, EventEmitter, Injectable, ComponentFactoryResolver, Directive, NgModule } from '@angular/core';
import { LookupModule } from '@farris/ui-lookup';
import { of, Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BatchEditDialogComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeService
     */
    constructor(injector, cdr, localeService) {
        this.injector = injector;
        this.cdr = cdr;
        this.localeService = localeService;
        // 输入组件
        this.inputs = [];
        /**
         * grid列
         * \@description 数据格式
         * ```json
         *  { id: "name", label: "姓名", dataType:"boolean" },
         * ```
         */
        this.fields = [];
        /**
         * grid列对应的编辑器
         * \@description 数据格式
         * ```json
         * {
         *   field: "sex",
         *   editor: {
         *      controlType: "textbox"
         *   }
         * }
         * ```
         */
        this.eidtors = [];
        /**
         * 弹窗实例
         */
        this.dialogRef = null;
        this.title = null;
        this.rows = 1;
        this.confirmed = new EventEmitter();
        this.canceled = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputs.push({
            fields: this.fields.slice(0),
            field: '',
            controlType: 'default',
            id: 'input0',
            value: null,
            options: {}
        });
        this.cdr.markForCheck();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    cancel(event) {
        this.canceled.emit({ instance: this, event });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    confirm(event) {
        this.confirmed.emit({ instance: this, event });
    }
    /**
     * 新增字段编辑行
     * @return {?}
     */
    appendRow() {
        /** @type {?} */
        const fields = this.computeFields() || [];
        // 不对新增字段做限制
        /*
        if(fields.length<1){
            return;
        }*/
        this.inputs.push({
            fields,
            controlType: 'default',
            value: null,
            id: 'input' + this.inputs.length,
        });
        this.cdr.markForCheck();
    }
    /**
     * 删除字段编辑行
     * @param {?} event event
     * @param {?} row row
     * @return {?}
     */
    removeRow(event, row) {
        this.inputs.splice(row, 1);
        this.updateFields();
        this.cdr.markForCheck();
    }
    /**
     * 编辑字段发生变化
     * @param {?} event event
     * @param {?} row row
     * @return {?}
     */
    onFieldChanged(event, row) {
        const { value: field = null } = event || {};
        /** @type {?} */
        const input = this.inputs[row];
        // 更新当前行字段
        input.fields = this.computeFields();
        input.field = field;
        /** @type {?} */
        const fieldInfo = this.fields.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.id === field));
        /** @type {?} */
        const dataType = fieldInfo && fieldInfo.dataType || null;
        input.dataType = dataType;
        if (field) {
            /** @type {?} */
            const editorInfo = this.eidtors.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.field === field));
            // 更新当前行编辑器
            if (editorInfo && editorInfo.editor) {
                input.controlType = editorInfo.editor.controlType || 'default';
                input.options = editorInfo.editor.options || {};
            }
        }
        this.updateFields();
    }
    /**
     * 帮助选择数据后的回调
     * @param {?} event event
     * @return {?}
     */
    onSelectRows(event) {
        const { field = null, rows = [] } = event || {};
        if (field) {
            /** @type {?} */
            const item = this.inputs.find((/**
             * @param {?} input
             * @return {?}
             */
            input => input.field === field));
            item.value = rows;
        }
    }
    /**
     * 计算当前行可以选择的字段
     * @private
     * @param {?=} appendField 要添加的字段
     * @return {?}
     */
    computeFields(appendField) {
        /** @type {?} */
        const others = this.fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if (appendField && field.id === appendField) {
                return true;
            }
            return !this.inputs.find((/**
             * @param {?} input
             * @return {?}
             */
            input => input.field === field.id));
        }));
        return others;
    }
    /**
     * 更新所有行可以选择的字段
     * @private
     * @return {?}
     */
    updateFields() {
        this.inputs.forEach((/**
         * @param {?} input
         * @return {?}
         */
        input => {
            input.fields = this.computeFields(input.field);
        }));
        this.cdr.markForCheck();
    }
}
BatchEditDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-batch-edit-dialog',
                template: "<div class=\"bulkedit-controls-container f-utils-flex-column\">\r\n  <div class=\"modal-header ng-draggable\" #header>\r\n    <div class=\"modal-title\">\r\n      <span class=\"modal-title-label\">{{'batchEditDialog.title' | locale:'\u6279\u91CF\u7F16\u8F91'}}</span>\r\n    </div>\r\n    <div class=\"actions\">\r\n      <ul>\r\n        <li class=\"f-btn-icon f-bare\" (click)='cancel($event)'><span class=\"f-icon modal_close\"></span></li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <div class=\"fields-panel flex-fill f-utils-overflow-xhya\">\r\n    <div class=\"clause-row clause\">\r\n      <table>\r\n        <tr>\r\n          <th colspan=\"2\" class=\"header\">{{ 'batchEditDialog.field' | locale: '\u8BF7\u9009\u62E9\u8981\u7F16\u8F91\u7684\u5217\uFF1A' }}</th>\r\n          <th colspan=\"2\" class=\"header\">{{ 'batchEditDialog.fieldValue' | locale: '\u8BF7\u8F93\u5165\u8981\u66F4\u6539\u7684\u503C\uFF1A' }}</th>\r\n        </tr>\r\n        <tr *ngFor=\"let input of inputs;let row = index\">\r\n          <td class=\"field-wrapper\">\r\n            <farris-combo-list [enableClear]=\"false\" (valueChange)=\"onFieldChanged($event,row)\" [idField]=\"'id'\"\r\n              [textField]=\"'label'\" [data]=\"input.fields\">\r\n            </farris-combo-list>\r\n          </td>\r\n          <td class=\"middle-arrow\">\r\n            <svg width=\"14px\" height=\"14px\" viewBox=\"0 0 14 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\r\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n                <g transform=\"translate(-659.000000, -232.000000)\" fill=\"#BDC2D3\" fill-rule=\"nonzero\">\r\n                  <g transform=\"translate(287.000000, 120.000000)\">\r\n                    <g>\r\n                      <g transform=\"translate(372.000000, 112.000000)\">\r\n                        <path\r\n                          d=\"M0,8.27882064 L13.6922097,8.27882064 L13.6922097,9.99034539 L0,9.99034539 L0,8.27882064 Z M0,4 L13.6922097,4 L13.6922097,5.71152475 L0,5.71152475 L0,4 Z\">\r\n                        </path>\r\n                      </g>\r\n                    </g>\r\n                  </g>\r\n                </g>\r\n              </g>\r\n            </svg>\r\n          </td>\r\n          <td class=\"value-wrapper\">\r\n            <!--\u5E2E\u52A9-->\r\n            <ng-template [ngIf]=\"input?.controlType==='lookup'\">\r\n              <!-- <ng-container *ngTemplateOutlet=\"lookupTemplate;context:input\"></ng-container> -->\r\n              <farris-lookup-grid #lookupGrid [lookup-extra]=\"input?.field\" [ins]=\"lookupGrid\" [enableClear]='false'\r\n                (onSelectRows)=\"onSelectRows($event)\" input-end-edit [uri]=\"input?.options?.uri\" [editable]=\"false\"\r\n                [mapFields]=\"input?.options?.mapFields\" [displayType]=\"input?.options?.displayType\"\r\n                [idField]=\"input?.options?.idField\" [singleSelect]=\"input?.options?.singleSelect\"\r\n                [pageSize]=\"input?.options?.pageSize\" [pageIndex]=\"1\" [pagination]=\"input?.options?.pagination\"\r\n                [textField]=\"input?.options?.textField\" [valueField]=\"input?.options?.valueField\"\r\n                [title]=\"input?.options?.dialogTitle\" [showMaxButton]=\"input?.options?.showMaxButton\"\r\n                [showCloseButton]=\"input?.options?.showCloseButton\" [resizable]=\"input?.options?.resizable\"\r\n                [context]=\"input?.options?.context\" [expandLevel]=\"input?.options?.expandLevel\"\r\n                [isRecordSize]=\"input?.options?.isRecordSize\" [enableFullTree]=\"input?.options?.enableFullTree\"\r\n                [loadTreeDataType]=\"'default'\">\r\n              </farris-lookup-grid>\r\n            </ng-template>\r\n            <!--\u8F93\u5165\u6846-->\r\n            <ng-template\r\n              [ngIf]=\"input?.controlType==='textbox' ||input?.controlType==='textarea' || input?.controlType === 'input-group'\">\r\n              <!-- <ng-container *ngTemplateOutlet=\"textboxTemplate;context:input\"></ng-container> -->\r\n              <input-group [(ngModel)]=\"input.value\"></input-group>\r\n            </ng-template>\r\n            <!--\u65E5\u671F-->\r\n            <ng-template [ngIf]=\"input?.controlType === 'datepicker'\">\r\n              <!-- <ng-container *ngTemplateOutlet=\"datepickerTemplate;context:input\"></ng-container> -->\r\n              <farris-datepicker [(ngModel)]=\"input.value\" [dateRange]=\"input?.options?.dateRange\">\r\n              </farris-datepicker>\r\n            </ng-template>\r\n            <!--\u6570\u5B57-->\r\n            <ng-template [ngIf]=\"input?.controlType === 'numberbox'\">\r\n              <!-- <ng-container *ngTemplateOutlet=\"numberboxTemplate;context:input\"></ng-container> -->\r\n              <farris-number-spinner [(ngModel)]=\"input.value\" [min]=\"input?.options?.min\" [max]=\"input?.options?.max\"\r\n                [precision]=\"input?.options?.precision\" [step]=\"input?.options?.step\">\r\n              </farris-number-spinner>\r\n            </ng-template>\r\n            <!--\u4E0B\u62C9-->\r\n            <ng-template [ngIf]=\"input?.controlType === 'combolist' || input?.controlType === 'select'\">\r\n              <!-- <ng-container *ngTemplateOutlet=\"combolistTemplate;context:input\"></ng-container> -->\r\n              <farris-combo-list [(ngModel)]=\"input.value\"\r\n                [idField]=\"input?.options?.valueField || input?.options?.idField || 'id'\"\r\n                [textField]=\"input?.options?.textField ||'label'\" [data]=\"input?.options?.data\">\r\n              </farris-combo-list>\r\n            </ng-template>\r\n            <!--\u65F6\u95F4-->\r\n            <ng-template [ngIf]=\"input?.controlType === 'timepicker'\">\r\n              <!-- <ng-container *ngTemplateOutlet=\"timepickerTemplate;context:input\"></ng-container> -->\r\n              <farris-time-picker [(ngModel)]=\"input.value\" [use12Hours]=\"input?.options?.use12Hours\">\r\n              </farris-time-picker>\r\n            </ng-template>\r\n            <!--\u590D\u9009\u6846-->\r\n            <ng-template [ngIf]=\"input?.controlType === 'checkbox'\">\r\n              <div class=\"custom-control custom-checkbox f-checkradio-single pl-5\">\r\n                <input [id]=\"input.id\" class=\"custom-control-input\" type=\"checkbox\" [(ngModel)]=\"input.value\">\r\n                <label class=\"custom-control-label\" [for]=\"input.id\"></label>\r\n              </div>\r\n            </ng-template>\r\n            <!--\u5F00\u5173-->\r\n            <ng-template [ngIf]=\"input?.controlType === 'switch'\">\r\n              <farris-switch [(ngModel)]=\"input.value\" class=\"ml-5\">\r\n              </farris-switch>\r\n            </ng-template>\r\n            <!--\u9ED8\u8BA4-->\r\n            <ng-template [ngIf]=\"!input?.controlType || input?.controlType==='default'\">\r\n              <div class=\"default-input\"></div>\r\n            </ng-template>\r\n\r\n          </td>\r\n          <td class=\"remove-wrapper\">\r\n            <a href=\"javascript:;\" (click)=\"removeRow($event,row)\">\r\n              <svg width=\"14px\" height=\"14px\" viewBox=\"0 0 14 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n                  <g transform=\"translate(-1031.000000, -270.000000)\">\r\n                    <g transform=\"translate(287.000000, 120.000000)\">\r\n                      <g transform=\"translate(26.000000, 82.000000)\">\r\n                        <g>\r\n                          <g transform=\"translate(718.000000, 68.000000)\">\r\n                            <rect x=\"0\" y=\"0\" width=\"14\" height=\"14\"></rect>\r\n                            <circle fill=\"#F46160\" cx=\"7\" cy=\"7\" r=\"6.125\"></circle>\r\n                            <rect fill=\"#FFFFFF\" x=\"3.9375\" y=\"6.3875\" width=\"6.125\" height=\"1.225\"></rect>\r\n                          </g>\r\n                        </g>\r\n                      </g>\r\n                    </g>\r\n                  </g>\r\n                </g>\r\n              </svg>\r\n            </a>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <a href=\"javascript:;\" (click)=\"appendRow()\" class=\"append\"><i class=\"f-icon f-icon-add\"></i>{{\r\n        'batchEditDialog.appendText' | locale: '\u6DFB\u52A0\u65B0\u7F16\u8F91\u5217' }}</a>\r\n      <span class=\"farris-label-tips\" farrisTooltip [content]=\"'batchEditDialog.appendTips' | locale:'\u6DFB\u52A0\u66F4\u591A\u5217\u8FDB\u884C\u6279\u91CF\u64CD\u4F5C'\"\r\n        [placement]=\"'right'\">\r\n        <svg width=\"14px\" height=\"14px\" viewBox=\"0 0 14 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\r\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n            <g transform=\"translate(-415.000000, -308.000000)\">\r\n              <g transform=\"translate(287.000000, 120.000000)\">\r\n                <g>\r\n                  <g transform=\"translate(128.000000, 188.000000)\">\r\n                    <g>\r\n                      <circle fill=\"#EAF4FF\" cx=\"7\" cy=\"7\" r=\"7\"></circle>\r\n                      <path\r\n                        d=\"M8.89254404,3.34549258 C9.3007073,3.75365584 9.50478893,4.26385992 9.50478893,4.97814564 C9.50478893,5.48834972 9.40274812,5.9985538 9.09662567,6.30467625 C9.09662567,6.40671707 8.79050322,6.71283951 8.17825832,7.2230436 C7.97417669,7.42712523 7.87213587,7.52916604 7.77009506,7.73324768 C7.66805424,7.93732931 7.56601342,8.24345176 7.56601342,8.54957421 L7.56601342,8.75365584 L6.34152363,8.75365584 L6.34152363,8.54957421 C6.34152363,8.14141094 6.44356444,7.73324768 6.54560526,7.52916604 C6.74968689,7.2230436 7.15785016,6.71283951 7.87213587,6.10059462 L8.07621751,5.79447217 C8.28029914,5.48834972 8.38233995,5.28426809 8.38233995,4.97814564 C8.38233995,4.56998237 8.28029914,4.26385992 8.07621751,4.05977829 C7.87213587,3.85569666 7.46397261,3.75365584 7.05580934,3.75365584 C6.64764608,3.75365584 6.23948281,3.95773747 6.03540118,4.26385992 C5.83131955,4.46794155 5.72927873,4.87610482 5.72927873,5.3863089 L4.50478893,5.3863089 C4.50478893,4.56998237 4.70887057,3.95773747 5.21907465,3.44753339 C5.72927873,2.93732931 6.34152363,2.73324768 7.15785016,2.73324768 C7.87213587,2.73324768 8.48438077,2.93732931 8.89254404,3.34549258 Z M6.95024133,11.2385252 C7.39206913,11.2385252 7.75024133,10.880353 7.75024133,10.4385252 C7.75024133,9.99669739 7.39206913,9.63852519 6.95024133,9.63852519 C6.50841353,9.63852519 6.15024133,9.99669739 6.15024133,10.4385252 C6.15024133,10.880353 6.50841353,11.2385252 6.95024133,11.2385252 Z\"\r\n                        fill=\"#2A87FF\" fill-rule=\"nonzero\"></path>\r\n                    </g>\r\n                  </g>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </g>\r\n        </svg>\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <div class=\"buttons flex-shrink-0\">\r\n    <div class=\"modal-footer\">\r\n      <div class=\"footer-info\">{{'batchEditDialog.selected' | locale:'\u5DF2\u9009'}}<span>{{rows}}</span>{{'batchEditDialog.row'\r\n        | locale:'\u884C'}}</div>\r\n      <button type=\"button\" class=\"btn btn-secondary\" (click)='cancel($event)'>{{'batchEditDialog.cancelText' |\r\n        locale:'\u53D6\u6D88'}}</button>\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm($event)\">{{'batchEditDialog.okText' | locale:'\u786E\u5B9A'}}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--\u5E2E\u52A9\u63A7\u4EF6-->\r\n<!-- <ng-template #lookupTemplate let-options=\"options\" let-field=\"field\">\r\n    <farris-lookup-grid #lookupGrid [lookup-extra]=\"field\" [ins]=\"lookupGrid\" (onSelectRows)=\"onSelectRows($event)\"\r\n        input-end-edit [uri]=\"options?.uri\" [editable]=\"false\" [mapFields]=\"options?.mapFields\"\r\n        [displayType]=\"options?.displayType\" [idField]=\"options?.idField\" [singleSelect]=\"options?.singleSelect\"\r\n        [pageSize]=\"options?.pageSize\" [pageIndex]=\"1\" [pagination]=\"options?.pagination\"\r\n        [textField]=\"options?.textField\" [valueField]=\"options?.valueField\" [title]=\"options?.dialogTitle\"\r\n        [showMaxButton]=\"options?.showMaxButton\" [showCloseButton]=\"options?.showCloseButton\"\r\n        [resizable]=\"options?.resizable\" [context]=\"options?.context\" [expandLevel]=\"options?.expandLevel\"\r\n        [isRecordSize]=\"options?.isRecordSize\" [enableFullTree]=\"options?.enableFullTree\"\r\n        [loadTreeDataType]=\"'default'\"></farris-lookup-grid>\r\n</ng-template> -->\r\n<!--\u8F93\u5165\u6846\u63A7\u4EF6-->\r\n<!-- <ng-template #textboxTemplate let-value1=\"value\">\r\n    <input-group [(ngModel)]=\"value1\"></input-group>\r\n</ng-template> -->\r\n<!--\u65E5\u671F\u63A7\u4EF6-->\r\n<!-- <ng-template #datepickerTemplate let-value=\"value\" let-options=\"options\">\r\n    <farris-datepicker [(ngModel)]=\"value\" [dateRange]=\"options?.dateRange\"></farris-datepicker>\r\n</ng-template> -->\r\n<!--\u6570\u5B57\u63A7\u4EF6-->\r\n<!-- <ng-template #numberboxTemplate let-value=\"value\" let-options=\"options\">\r\n    <farris-number-spinner [(ngModel)]=\"value\" [min]=\"options?.min\" [max]=\"options?.max\"\r\n        [precision]=\"options?.precision\" [step]=\"options?.step\">\r\n    </farris-number-spinner>\r\n</ng-template> -->\r\n<!--checkbox-->\r\n<!-- <ng-template>\r\n    <farris-checkboxgroup [(ngModel)]=\"value\" [data]=\"\">\r\n    </farris-checkboxgroup>\r\n</ng-template> -->\r\n<!--\u4E0B\u62C9-->\r\n<!-- <ng-template #combolistTemplate let-value=\"value\" let-options=\"options\">\r\n    <farris-combo-list [(ngModel)]=\"value\" [idField]=\"options?.idField || 'id'\"\r\n        [textField]=\"options?.labelField ||'label'\" [data]=\"options?.items\"></farris-combo-list>\r\n</ng-template> -->\r\n\r\n<!--\u65F6\u95F4-->\r\n<!-- <ng-template #timepickerTemplate let-value=\"value\" let-options=\"options\">\r\n    <farris-time-picker [(ngModel)]=\"value\" [use12Hours]=\"options?.use12Hours\"></farris-time-picker>\r\n</ng-template> -->",
                styles: [".bulkedit-controls-container{position:relative;height:100%;padding:10px;min-height:450px;min-height:350px}.fields-panel{height:100%;padding:15px;overflow:auto;opacity:.85;border:1px solid #e9ecf3;background:#fff;border-radius:8px}.clause-row table{width:100%;margin-bottom:10px}.clause-row table tr{height:35px}.clause-row table tr th.header{width:50%;text-align:left;padding-left:5px;font-weight:400}.clause-row table tr td.field-wrapper,.clause-row table tr td.value-wrapper{width:45%}.clause-row table tr td.middle-arrow{width:50px;text-align:center}.clause-row table tr td.remove-wrapper{width:45px;text-align:center}.clause-row .remove-wrapper .f-icon-remove_face{color:#f46160;font-size:13px}.clauses{border-collapse:collapse;width:100%;padding:1px}.clauses .header{color:#666}.multi-field-edit .clauses .field{width:35%}.multi-field-edit .clauses .operator{width:35px}.clauses .clause-row{height:25px;vertical-align:top}.clause-row a.f-icon-add{padding-right:3px}.clause-row a.append{color:#4e94ff;line-height:18px}.clause-row .default-input{height:30px;background-color:#f5f6f9;border:1px solid #dee1ea;border-radius:3px}.bulkedit-controls-container .modal-title-label{font-weight:400;font-size:17px}.bulkedit-controls-container .modal-header{border-bottom:none;padding-bottom:20px}.bulkedit-controls-container .modal-footer{background:0 0;border-top:none}.bulkedit-controls-container .footer-info{text-align:left;width:90%;color:#2d2f33;font-size:14px}.bulkedit-controls-container .footer-info span{color:#000015;font-size:17px;padding:0 5px;font-weight:700}.bulkedit-controls-container .farris-label-tips{margin-left:5px}.bulkedit-controls-container .farris-label-tips .f-icon{color:#2a84ff;font-size:17px;opacity:.6}.bulkedit-controls-container .buttons{padding-top:5px}"]
            }] }
];
/** @nocollapse */
BatchEditDialogComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: LocaleService }
];
BatchEditDialogComponent.propDecorators = {
    header: [{ type: ViewChild, args: ["header",] }],
    fields: [{ type: Input }],
    eidtors: [{ type: Input }],
    dialogRef: [{ type: Input }],
    title: [{ type: Input }],
    rows: [{ type: Input }],
    confirmed: [{ type: Output }],
    canceled: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResultConfirmComponent {
    constructor() {
        this.dialogRef = null;
        this.rows = 0;
        this.confirmed = new EventEmitter();
        this.canceled = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showNotify(value) {
        /** @type {?} */
        let _showNotify = 'never';
        if (value === true) {
            _showNotify = 'always';
        }
        else {
            _showNotify = 'never';
        }
        localStorage.setItem('BATCH_EDIT_DIALOG_SHOW_NOTIFY', _showNotify);
    }
    /**
     * @return {?}
     */
    get showNotify() {
        /** @type {?} */
        const _showNotify = localStorage.getItem('BATCH_EDIT_DIALOG_SHOW_NOTIFY');
        if (_showNotify === 'always' || !_showNotify) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    cancel(event) {
        this.canceled.emit({ instance: this, event });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    confirm(event) {
        this.confirmed.emit({ instance: this, event });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    setRemindOpporunity(event) {
        /** @type {?} */
        const checked = event && event.target && event.target.checked || false;
        if (checked === true) {
            this.showNotify = false;
        }
        else {
            this.showNotify = true;
        }
    }
}
ResultConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-result-confirm',
                template: "<div class=\"result-confirm modal-message\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <div class=\"modal-title\">\n        <span class=\"modal-title-label\">{{'batchEditDialog.confirmTitle' | locale:'\u63D0\u793A'}}</span>\n      </div>\n      <div class=\"actions\">\n        <ul>\n          <li class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_close\" (click)='cancel($event)'></span></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"f-utils-absolute-all\" style=\"height: 10px; z-index: 1; display: none;\"></div>\n    <div class=\"modal-body\">\n      <div style=\"position: static;\" class=\"ps\">\n        <div class=\"ps-content\">\n          <div class=\"farris-messager\">\n            <section class=\"modal-tips d-flex flex-row messager-type-question\">\n              <div class=\"float-left modal-tips-iconwrap\"><span class=\"f-icon f-icon-warning\"></span></div>\n              <div class=\"modal-tips-content\">\n                <p class=\"toast-msg-title\">{{'batchEditDialog.confirmText' | locale:'\u5C06\u4FEE\u6539{0}\u884C\u6570\u636E\uFF0C\u786E\u5B9A\u4FEE\u6539\u5417\uFF1F' | replaceX:\n                  rows}}</p>\n              </div>\n            </section>\n            <div class=\"modal-footer\">\n              <div class=\"custom-control custom-checkbox custom-control-inline never-show\">\n                <input class=\"custom-control-input\" id=\"never\" type=\"checkbox\" (change)=\"setRemindOpporunity($event)\">\n                <label class=\"custom-control-label\" for=\"never\">{{'batchEditDialog.neverShow' | locale:'\u4E0D\u518D\u63D0\u793A'}}</label>\n              </div>\n              <button class=\"btn btn-secondary  btn-lg\" type=\"button\"\n                (click)='cancel($event)'>{{'batchEditDialog.cancelText' | locale:'\u53D6\u6D88'}}</button>\n              <button class=\"btn btn-primary btn-lg\" type=\"button\" (click)=\"confirm($event)\">{{'batchEditDialog.okText'\n                | locale:'\u786E\u5B9A'}}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
                styles: [".result-confirm{height:100%}.result-confirm .modal-header{border-bottom:none}.modal-footer .never-show{text-align:left;width:90%;color:#2d2f33;font-size:14px}"]
            }] }
];
/** @nocollapse */
ResultConfirmComponent.ctorParameters = () => [];
ResultConfirmComponent.propDecorators = {
    dialogRef: [{ type: Input }],
    rows: [{ type: Input }],
    confirmed: [{ type: Output }],
    canceled: [{ type: Output }],
    showNotify: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable: max-line-length
class BatchEditDialogService {
    /**
     * @param {?} injector
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} localeService
     */
    constructor(injector, modalService, componentFactoryResolver, localeService) {
        this.injector = injector;
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.localeService = localeService;
        this.dialogRef = null;
        this.componentRef = null;
        // 用户对输入进行确认，此时可以更新bindingData数据
        this.onUserConfirmed = new EventEmitter();
    }
    /**
     * \@description 控件参数格式
     * # 控件参数格式
     * ## textbox
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.TEXTBOX}}
     * ```
     * ## dropdown
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.COMBOLIST,"idField":"id","textField":"text","items":[],"multiSelect":false}}
     * ```
     * ## lookup
     * ```json
     * {"title":"姓名","field":"name","editor":{"controlType":EditorTypes.LOOKUP,"uri":"","idField":"id","textField":"text","valueField":"id","displayType":"LIST","mapFields":{},"singleSelect":true,"dialogTitle":"","hiddenInputName":"","items":[],"multiSelect":false}}
     * ```
     * ## 数值输入框
     * ```json
     * {"title":"数值","field":"name","editor":{"controlType":EditorTypes.NUMBER,"precision":2,"step":1,"min":1,"max":10}}
     * ```
     * @param {?} columns
     * @param {?=} options
     * @return {?}
     */
    batchEdit(columns, options) {
        /** @type {?} */
        const titleText = this.localeService.getValue('batchEditDialog.title');
        /** @type {?} */
        const okText = this.localeService.getValue('batchEditDialog.okText');
        /** @type {?} */
        const cancelText = this.localeService.getValue('batchEditDialog.cancelText');
        const { width = 792, height = 580, title = titleText, rows = 1 } = options || {};
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(BatchEditDialogComponent);
        this.componentRef = componentFactory.create(this.injector);
        this.componentRef.instance.fields = this.getFields(columns);
        this.componentRef.instance.eidtors = this.getEditors(columns);
        this.componentRef.instance.title = title;
        this.componentRef.instance.rows = rows;
        this.dialogRef = this.modalService.show(this.componentRef, {
            title,
            width,
            height,
            buttons: [
                {
                    text: cancelText, cls: 'btn btn-secondary', handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.dialogRef.close();
                    })
                },
                {
                    text: okText, cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.userConfired();
                    })
                }
            ],
            showHeader: false,
            showButtons: false,
        });
        this.componentRef.instance.confirmed.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.canConfirm(options).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result === true) {
                    this.userConfired(options);
                    this.dialogRef.close();
                }
            }));
        }));
        this.componentRef.instance.canceled.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.dialogRef.close();
        }));
        this.componentRef.instance.dialogRef = this.dialogRef;
        this.dialogRef.dialog.instance.draggbar.handle = this.componentRef.instance.header.nativeElement;
        return this.dialogRef;
    }
    /**
     * 用户确认修改
     * @param {?=} options
     * @return {?}
     */
    userConfired(options) {
        /** @type {?} */
        const inputs = this.componentRef && this.componentRef.instance && this.componentRef.instance.inputs || [];
        // 针对checkbox做特殊处理
        if (inputs && inputs.length > 0) {
            inputs.forEach((/**
             * @param {?} input
             * @return {?}
             */
            input => {
                const { controlType, dataType } = input;
                if (controlType === 'checkbox' && dataType === 'boolean') {
                    input.value = input.value ? true : false;
                }
            }));
        }
        if (options && options.onConfirm && typeof options.onConfirm === 'function') {
            options.onConfirm(inputs);
        }
        this.onUserConfirmed.next(inputs);
    }
    /**
     * 从dom中获取grid列
     * @private
     * @param {?} columns dom
     * @return {?}
     */
    getFields(columns) {
        /** @type {?} */
        const fields = [];
        if (!columns || columns.length < 1) {
            return fields;
        }
        columns.forEach((/**
         * @param {?} collect
         * @return {?}
         */
        (collect) => {
            // collect为数组
            if (collect && collect.length > 0) {
                collect.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => {
                    const { field = null, title = '', dataType = null, enableBatchEdit = false } = column || {};
                    if (field && enableBatchEdit) {
                        fields.push({ id: field, label: title, dataType });
                    }
                }));
            }
        }));
        return fields;
    }
    /**
     * 从columns中获取编辑器
     * @private
     * @param {?} columns dom
     * @return {?}
     */
    getEditors(columns) {
        /** @type {?} */
        const editors = [];
        if (!columns || columns.length < 1) {
            return editors;
        }
        columns.forEach((/**
         * @param {?} collect
         * @return {?}
         */
        (collect) => {
            // collect为数组
            if (collect && collect.length > 0) {
                collect.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => {
                    const { field = null, editor = {}, enableBatchEdit = false } = column || {};
                    if (editor && field && enableBatchEdit) {
                        editor.controlType = editor.type;
                        editors.push({ field, editor });
                    }
                }));
            }
        }));
        return editors;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    canConfirm(options) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let showNotify = options && options.showNotify;
        const { rows = 1 } = options || {};
        /** @type {?} */
        const valueChanged = this.isValueChanged();
        if (!valueChanged) {
            return of(true);
        }
        if (showNotify === undefined) {
            showNotify = true;
        }
        if (!showNotify) {
            return of(true);
        }
        /** @type {?} */
        let dialogRef = null;
        try {
            /** @type {?} */
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ResultConfirmComponent);
            /** @type {?} */
            const componentRef = componentFactory.create(this.injector);
            /** @type {?} */
            const shouldShowNotify = componentRef.instance.showNotify || false;
            componentRef.instance.rows = rows;
            if (shouldShowNotify) {
                dialogRef = this.modalService.show(componentRef, {
                    title: '',
                    width: 500,
                    height: 240,
                    showHeader: false,
                    showButtons: false,
                    buttons: []
                });
                // 确认
                componentRef.instance.confirmed.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (dialogRef) {
                        dialogRef.close();
                    }
                    subject.next(true);
                }));
                // 取消
                componentRef.instance.canceled.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (dialogRef) {
                        dialogRef.close();
                    }
                    subject.next(false);
                }));
            }
            else {
                return of(true);
            }
        }
        catch (e) {
            return of(true);
        }
        return subject;
    }
    /**
     * @return {?}
     */
    isValueChanged() {
        /** @type {?} */
        const inputs = this.componentRef && this.componentRef.instance && this.componentRef.instance.inputs || [];
        if (!inputs || inputs.length < 1) {
            return false;
        }
        /** @type {?} */
        const unChanged = inputs.every((/**
         * @param {?} item
         * @return {?}
         */
        (item) => !item.field));
        return !unChanged;
    }
}
BatchEditDialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BatchEditDialogService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: LocaleService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookupDirective {
    constructor() {
        this.onSelectRows = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.lookup) {
            this.lookup.dictPicked = (/**
             * @param {?} rows
             * @return {?}
             */
            (rows) => {
                if (this.onSelectRows) {
                    this.onSelectRows.emit({ field: this.field, rows: [].concat(rows) });
                }
                /** @type {?} */
                const result = {
                    closeDialog: true
                };
                return of(result);
            });
        }
    }
}
LookupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lookup-extra]'
            },] }
];
/** @nocollapse */
LookupDirective.ctorParameters = () => [];
LookupDirective.propDecorators = {
    field: [{ type: Input, args: ['lookup-extra',] }],
    lookup: [{ type: Input, args: ['ins',] }],
    onSelectRows: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BatchEditDialogModule {
}
BatchEditDialogModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    BatchEditDialogComponent,
                    LookupDirective,
                    ResultConfirmComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisFormsModule,
                    LookupModule,
                    ComboListModule,
                    InputGroupModule,
                    ModalModule,
                    FarrisDatePickerModule,
                    NumberSpinnerModule,
                    TimePickerModule,
                    SwitchModule,
                    FarrisTooltipModule,
                    FarrisCommonModule,
                    LocaleModule.forRoot(),
                ],
                exports: [
                    BatchEditDialogComponent,
                    LookupDirective,
                    ResultConfirmComponent
                ],
                entryComponents: [
                    BatchEditDialogComponent,
                    ResultConfirmComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BatchEditDialogService, BatchEditDialogComponent, ResultConfirmComponent, BatchEditDialogModule, LookupDirective };

//# sourceMappingURL=farris-ui-batch-edit-dialog.js.map