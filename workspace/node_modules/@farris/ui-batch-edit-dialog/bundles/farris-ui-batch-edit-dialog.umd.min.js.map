{"version":3,"sources":["ng://@farris/ui-batch-edit-dialog/lib/batch-edit-dialog.component.ts","ng://@farris/ui-batch-edit-dialog/lib/result-confirm/result-confirm.component.ts","ng://@farris/ui-batch-edit-dialog/lib/batch-edit-dialog.service.ts","ng://@farris/ui-batch-edit-dialog/lib/lookup.directive.ts","ng://@farris/ui-batch-edit-dialog/lib/batch-edit-dialog.module.ts"],"names":["BatchEditDialogComponent","prototype","ngOnInit","this","inputs","push","fields","slice","field","controlType","id","value","options","cdr","markForCheck","cancel","event","canceled","emit","instance","confirm","confirmed","appendRow","computeFields","length","removeRow","row","splice","updateFields","onFieldChanged","_a","input","fieldInfo","find","item","dataType","editorInfo","eidtors","editor","onSelectRows","_b","_c","rows","appendField","_this","filter","forEach","Component","args","selector","template","Injector","ChangeDetectorRef","LocaleService","ViewChild","Input","Output","injector","localeService","dialogRef","title","EventEmitter","ResultConfirmComponent","Object","defineProperty","_showNotify","localStorage","getItem","setItem","setRemindOpporunity","checked","target","showNotify","BatchEditDialogService","batchEdit","columns","titleText","getValue","okText","cancelText","width","height","_d","_e","componentFactory","componentFactoryResolver","resolveComponentFactory","componentRef","create","getFields","getEditors","modalService","show","buttons","text","cls","handle","close","userConfired","showHeader","showButtons","subscribe","e","canConfirm","result","dialog","draggbar","header","nativeElement","onConfirm","onUserConfirmed","next","collect","column","enableBatchEdit","label","editors","type","subject","Subject","isValueChanged","of","undefined","shouldShowNotify","every","Injectable","BsModalService","ComponentFactoryResolver","LookupDirective","ngAfterViewInit","lookup","dictPicked","concat","closeDialog","Directive","BatchEditDialogModule","NgModule","declarations","imports","CommonModule","FormsModule","FarrisFormsModule","LookupModule","ComboListModule","InputGroupModule","ModalModule","FarrisDatePickerModule","NumberSpinnerModule","TimePickerModule","SwitchModule","FarrisTooltipModule","FarrisCommonModule","LocaleModule","forRoot","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Component, OnInit, ChangeDetectorRef, Injector, Input, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Component({\r\n  selector: 'farris-batch-edit-dialog',\r\n  templateUrl: './batch-edit-dialog.component.html',\r\n  styleUrls: ['batch-edit-dialog.component.css']\r\n})\r\nexport class BatchEditDialogComponent implements OnInit {\r\n  @ViewChild(\"header\") header: ElementRef;\r\n  // è¾å¥ç»ä»¶\r\n  public inputs = [];\r\n  /**\r\n   * gridå\r\n   * @description æ°æ®æ ¼å¼\r\n   * ```json\r\n   *  { id: \"name\", label: \"å§å\", dataType:\"boolean\" },\r\n   * ```\r\n   */\r\n  @Input() fields = [];\r\n  /**\r\n   * gridåå¯¹åºçç¼è¾å¨\r\n   * @description æ°æ®æ ¼å¼\r\n   * ```json\r\n   * {\r\n   *   field: \"sex\",\r\n   *   editor: {\r\n   *      controlType: \"textbox\"\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\r\n  @Input() eidtors = [];\r\n  /**\r\n   * å¼¹çªå®ä¾\r\n   */\r\n  @Input() dialogRef = null;\r\n\r\n  @Input() title: string = null;\r\n  @Input() rows: number = 1;\r\n  @Output() confirmed = new EventEmitter();\r\n  @Output() canceled = new EventEmitter();\r\n\r\n  constructor(private injector: Injector, private cdr: ChangeDetectorRef, private localeService: LocaleService) { }\r\n\r\n  ngOnInit() {\r\n    this.inputs.push({\r\n      fields: this.fields.slice(0),\r\n      field: '',\r\n      controlType: 'default',\r\n      id: 'input0',\r\n      value: null,\r\n      options: {}\r\n    });\r\n    this.cdr.markForCheck();\r\n  }\r\n  public cancel(event: any) {\r\n    this.canceled.emit({ instance: this, event });\r\n  }\r\n  public confirm(event: any) {\r\n    this.confirmed.emit({ instance: this, event });\r\n  }\r\n  /**\r\n   * æ°å¢å­æ®µç¼è¾è¡\r\n   */\r\n  public appendRow() {\r\n    const fields = this.computeFields() || [];\r\n    // ä¸å¯¹æ°å¢å­æ®µåéå¶\r\n    /*\r\n    if(fields.length<1){\r\n        return;\r\n    }*/\r\n    this.inputs.push({\r\n      fields,\r\n      controlType: 'default',\r\n      value: null,\r\n      id: 'input' + this.inputs.length,\r\n    });\r\n    this.cdr.markForCheck();\r\n  }\r\n  /**\r\n   * å é¤å­æ®µç¼è¾è¡\r\n   * @param event event\r\n   * @param row row\r\n   */\r\n  public removeRow(event: any, row: number) {\r\n    this.inputs.splice(row, 1);\r\n    this.updateFields();\r\n    this.cdr.markForCheck();\r\n  }\r\n  /**\r\n   * ç¼è¾å­æ®µåçåå\r\n   * @param event event\r\n   * @param row row\r\n   */\r\n  public onFieldChanged(event: any, row: number) {\r\n    const { value: field = null } = event || {};\r\n    const input = this.inputs[row];\r\n    // æ´æ°å½åè¡å­æ®µ\r\n    input.fields = this.computeFields();\r\n    input.field = field;\r\n    const fieldInfo = this.fields.find(item => item.id === field);\r\n    const dataType = fieldInfo && fieldInfo.dataType || null;\r\n    input.dataType = dataType;\r\n    if (field) {\r\n      const editorInfo = this.eidtors.find(item => item.field === field);\r\n      // æ´æ°å½åè¡ç¼è¾å¨\r\n      if (editorInfo && editorInfo.editor) {\r\n        input.controlType = editorInfo.editor.controlType || 'default';\r\n        input.options = editorInfo.editor.options || {};\r\n      }\r\n    }\r\n    this.updateFields();\r\n  }\r\n  /**\r\n   * å¸®å©éæ©æ°æ®åçåè°\r\n   * @param event event\r\n   */\r\n  public onSelectRows(event: any) {\r\n    const { field = null, rows = [] } = event || {};\r\n    if (field) {\r\n      const item = this.inputs.find(input => input.field === field);\r\n      item.value = rows;\r\n    }\r\n  }\r\n  /**\r\n   * è®¡ç®å½åè¡å¯ä»¥éæ©çå­æ®µ\r\n   * @param appendField è¦æ·»å çå­æ®µ\r\n   */\r\n  private computeFields(appendField?: any) {\r\n    const others = this.fields.filter(field => {\r\n      if (appendField && field.id === appendField) {\r\n        return true;\r\n      }\r\n      return !this.inputs.find(input => input.field === field.id);\r\n    });\r\n    return others;\r\n  }\r\n  /**\r\n   * æ´æ°ææè¡å¯ä»¥éæ©çå­æ®µ\r\n   */\r\n  private updateFields() {\r\n    this.inputs.forEach(input => {\r\n      input.fields = this.computeFields(input.field);\r\n    });\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-result-confirm',\n  templateUrl: './result-confirm.component.html',\n  styleUrls: ['./result-confirm.component.css']\n})\nexport class ResultConfirmComponent implements OnInit {\n  @Input() dialogRef: any = null;\n  @Input() rows: number = 0;\n  @Output() confirmed = new EventEmitter();\n  @Output() canceled = new EventEmitter();\n  @Input()\n  public set showNotify(value: boolean) {\n    let _showNotify: string = 'never';\n    if (value === true) {\n      _showNotify = 'always';\n    } else {\n      _showNotify = 'never';\n    }\n    localStorage.setItem('BATCH_EDIT_DIALOG_SHOW_NOTIFY', _showNotify);\n  }\n  public get showNotify() {\n    const _showNotify = localStorage.getItem('BATCH_EDIT_DIALOG_SHOW_NOTIFY');\n    if (_showNotify === 'always' || !_showNotify) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  constructor() { }\n\n  ngOnInit() {\n  }\n  public cancel(event: any) {\n    this.canceled.emit({ instance: this, event });\n  }\n  public confirm(event: any) {\n    this.confirmed.emit({ instance: this, event });\n  }\n  public setRemindOpporunity(event: any) {\n    const checked = event && event.target && event.target.checked || false;\n    if (checked === true) {\n      this.showNotify = false;\n    } else {\n      this.showNotify = true;\n    }\n  }\n}\n","import { Injectable, ComponentFactoryResolver, Injector, EventEmitter, ComponentRef } from '@angular/core';\r\nimport { BatchEditDialogComponent } from './batch-edit-dialog.component';\r\nimport { BsModalService, BsModalRef } from '@farris/ui-modal';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { isObservable, Observable, of, Subject } from 'rxjs';\r\nimport { ResultConfirmComponent } from './result-confirm/result-confirm.component';\r\n// tslint:disable: max-line-length\r\n@Injectable()\r\nexport class BatchEditDialogService {\r\n  public dialogRef: BsModalRef = null;\r\n  private componentRef: ComponentRef<BatchEditDialogComponent> = null;\r\n  // ç¨æ·å¯¹è¾å¥è¿è¡ç¡®è®¤ï¼æ­¤æ¶å¯ä»¥æ´æ°bindingDataæ°æ®\r\n  public onUserConfirmed: EventEmitter<any> = new EventEmitter<any>();\r\n  constructor(\r\n    public injector: Injector,\r\n    private modalService: BsModalService,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private localeService: LocaleService,\r\n  ) { }\r\n  /**\r\n   * @description æ§ä»¶åæ°æ ¼å¼\r\n   * # æ§ä»¶åæ°æ ¼å¼\r\n   * ## textbox\r\n   * ```json\r\n   * {\"title\":\"å§å\",\"field\":\"name\",\"editor\":{\"controlType\":EditorTypes.TEXTBOX}}\r\n   * ```\r\n   * ## dropdown\r\n   * ```json\r\n   * {\"title\":\"å§å\",\"field\":\"name\",\"editor\":{\"controlType\":EditorTypes.COMBOLIST,\"idField\":\"id\",\"textField\":\"text\",\"items\":[],\"multiSelect\":false}}\r\n   * ```\r\n   * ## lookup\r\n   * ```json\r\n   * {\"title\":\"å§å\",\"field\":\"name\",\"editor\":{\"controlType\":EditorTypes.LOOKUP,\"uri\":\"\",\"idField\":\"id\",\"textField\":\"text\",\"valueField\":\"id\",\"displayType\":\"LIST\",\"mapFields\":{},\"singleSelect\":true,\"dialogTitle\":\"\",\"hiddenInputName\":\"\",\"items\":[],\"multiSelect\":false}}\r\n   * ```\r\n   * ## æ°å¼è¾å¥æ¡\r\n   * ```json\r\n   * {\"title\":\"æ°å¼\",\"field\":\"name\",\"editor\":{\"controlType\":EditorTypes.NUMBER,\"precision\":2,\"step\":1,\"min\":1,\"max\":10}}\r\n   * ```\r\n   */\r\n  public batchEdit(columns: any, options?: { [propName: string]: any }): BsModalRef {\r\n    const titleText = this.localeService.getValue('batchEditDialog.title');\r\n    const okText = this.localeService.getValue('batchEditDialog.okText');\r\n    const cancelText = this.localeService.getValue('batchEditDialog.cancelText');\r\n    const { width = 792, height = 580, title = titleText, rows = 1 } = options || {};\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(BatchEditDialogComponent);\r\n    this.componentRef = componentFactory.create(this.injector);\r\n    this.componentRef.instance.fields = this.getFields(columns);\r\n    this.componentRef.instance.eidtors = this.getEditors(columns);\r\n    this.componentRef.instance.title = title;\r\n    this.componentRef.instance.rows = rows;\r\n\r\n    this.dialogRef = this.modalService.show(this.componentRef, {\r\n      title,\r\n      width,\r\n      height,\r\n      buttons: [\r\n        {\r\n          text: cancelText, cls: 'btn btn-secondary', handle: () => {\r\n            this.dialogRef.close();\r\n          }\r\n        },\r\n        {\r\n          text: okText, cls: 'btn btn-primary',\r\n          handle: () => {\r\n            this.userConfired();\r\n          }\r\n        }\r\n      ],\r\n      showHeader: false,\r\n      showButtons: false,\r\n    });\r\n    this.componentRef.instance.confirmed.subscribe((e: { instance: any, event: any }) => {\r\n      this.canConfirm(options).subscribe((result: boolean) => {\r\n        if (result === true) {\r\n          this.userConfired(options);\r\n          this.dialogRef.close();\r\n        }\r\n      });\r\n    });\r\n    this.componentRef.instance.canceled.subscribe((e: { instance: any, event: any }) => {\r\n      this.dialogRef.close();\r\n    });\r\n\r\n    this.componentRef.instance.dialogRef = this.dialogRef;\r\n    this.dialogRef.dialog.instance.draggbar.handle = this.componentRef.instance.header.nativeElement;\r\n    return this.dialogRef;\r\n  }\r\n  /**\r\n   * ç¨æ·ç¡®è®¤ä¿®æ¹\r\n   */\r\n  public userConfired(options?: { [propName: string]: any }) {\r\n    const inputs = this.componentRef && this.componentRef.instance && this.componentRef.instance.inputs || [];\r\n    // éå¯¹checkboxåç¹æ®å¤ç\r\n    if (inputs && inputs.length > 0) {\r\n      inputs.forEach(input => {\r\n        const { controlType, dataType } = input;\r\n        if (controlType === 'checkbox' && dataType === 'boolean') {\r\n          input.value = input.value ? true : false;\r\n        }\r\n      });\r\n    }\r\n    if (options && options.onConfirm && typeof options.onConfirm === 'function') {\r\n      options.onConfirm(inputs);\r\n    }\r\n    this.onUserConfirmed.next(inputs);\r\n  }\r\n  /**\r\n   * ä»domä¸­è·ågridå\r\n   * @param columns dom\r\n   */\r\n  private getFields(columns: any): Array<any> {\r\n    const fields = [];\r\n    if (!columns || columns.length < 1) {\r\n      return fields;\r\n    }\r\n    columns.forEach((collect: Array<any>) => {\r\n      // collectä¸ºæ°ç»\r\n      if (collect && collect.length > 0) {\r\n        collect.forEach((column: any) => {\r\n          const { field = null, title = '', dataType = null, enableBatchEdit = false } = column || {};\r\n          if (field && enableBatchEdit) {\r\n            fields.push({ id: field, label: title, dataType });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return fields;\r\n  }\r\n  /**\r\n   * ä»columnsä¸­è·åç¼è¾å¨\r\n   * @param columns dom\r\n   */\r\n  private getEditors(columns: any): Array<any> {\r\n    const editors = [];\r\n    if (!columns || columns.length < 1) {\r\n      return editors;\r\n    }\r\n    columns.forEach((collect: Array<any>) => {\r\n      // collectä¸ºæ°ç»\r\n      if (collect && collect.length > 0) {\r\n        collect.forEach((column: any) => {\r\n          const { field = null, editor = {}, enableBatchEdit = false } = column || {};\r\n          if (editor && field && enableBatchEdit) {\r\n            editor.controlType = editor.type;\r\n            editors.push({ field, editor });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return editors;\r\n  }\r\n  private canConfirm(options?: { [propName: string]: any }) {\r\n    const subject = new Subject<any>();\r\n    let showNotify = options && options.showNotify;\r\n    const { rows = 1 } = options || {};\r\n    const valueChanged = this.isValueChanged();\r\n    if (!valueChanged) {\r\n      return of(true);\r\n    }\r\n    if (showNotify === undefined) {\r\n      showNotify = true;\r\n    }\r\n    if (!showNotify) {\r\n      return of(true);\r\n    }\r\n    let dialogRef = null;\r\n    try {\r\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ResultConfirmComponent);\r\n      const componentRef = componentFactory.create(this.injector);\r\n      const shouldShowNotify = componentRef.instance.showNotify || false;\r\n\r\n      componentRef.instance.rows = rows;\r\n      if (shouldShowNotify) {\r\n        dialogRef = this.modalService.show(componentRef, {\r\n          title: '',\r\n          width: 500,\r\n          height: 240,\r\n          showHeader: false,\r\n          showButtons: false,\r\n          buttons: []\r\n        });\r\n        // ç¡®è®¤\r\n        componentRef.instance.confirmed.subscribe((e: { instance: any, event: any }) => {\r\n          if (dialogRef) {\r\n            dialogRef.close();\r\n          }\r\n          subject.next(true);\r\n        });\r\n        // åæ¶\r\n        componentRef.instance.canceled.subscribe((e: { instance: any, event: any }) => {\r\n          if (dialogRef) {\r\n            dialogRef.close();\r\n          }\r\n          subject.next(false);\r\n        });\r\n      } else {\r\n        return of(true);\r\n      }\r\n    } catch (e) {\r\n      return of(true);\r\n    }\r\n    return subject;\r\n  }\r\n  public isValueChanged() {\r\n    const inputs = this.componentRef && this.componentRef.instance && this.componentRef.instance.inputs || [];\r\n    if (!inputs || inputs.length < 1) {\r\n      return false;\r\n    }\r\n    const unChanged = inputs.every((item) => !item.field);\r\n    return !unChanged;\r\n  }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, AfterViewInit, Injector } from '@angular/core';\r\nimport { LookupComponent } from '@farris/ui-lookup';\r\nimport { of } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[lookup-extra]'\r\n})\r\nexport class LookupDirective implements AfterViewInit {\r\n    @Input('lookup-extra') field: string;\r\n    @Input('ins') lookup: LookupComponent;\r\n    @Output() onSelectRows: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor() {\r\n    }\r\n    ngAfterViewInit(): void {\r\n        if (this.lookup) {\r\n            this.lookup.dictPicked = (rows: any) => {\r\n                if (this.onSelectRows) {\r\n                    this.onSelectRows.emit({ field: this.field, rows: [].concat(rows) })\r\n                }\r\n                const result = {\r\n                    closeDialog: true\r\n                };\r\n                return of(result);\r\n            };\r\n        }\r\n    }\r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\nimport { TimePickerModule } from '@farris/ui-time-picker';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { SwitchModule } from '@farris/ui-switch';\r\nimport { FarrisTooltipModule } from '@farris/ui-tooltip';\r\nimport { FarrisCommonModule} from '@farris/ui-common'\r\n// import { BatchEditDialogService } from './batch-edit-dialog.service';\r\nimport { BatchEditDialogComponent } from './batch-edit-dialog.component';\r\nimport { LookupDirective } from './lookup.directive';\r\nimport { ResultConfirmComponent } from './result-confirm/result-confirm.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BatchEditDialogComponent,\r\n    LookupDirective,\r\n    ResultConfirmComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    FarrisFormsModule,\r\n    LookupModule,\r\n    ComboListModule,\r\n    InputGroupModule,\r\n    ModalModule,\r\n    FarrisDatePickerModule,\r\n    NumberSpinnerModule,\r\n    TimePickerModule,\r\n    SwitchModule,\r\n    FarrisTooltipModule,\r\n    FarrisCommonModule,\r\n    LocaleModule.forRoot(),\r\n  ],\r\n  exports: [\r\n    BatchEditDialogComponent,\r\n    LookupDirective,\r\n    ResultConfirmComponent\r\n  ],\r\n  entryComponents: [\r\n    BatchEditDialogComponent,\r\n    ResultConfirmComponent\r\n  ]\r\n})\r\nexport class BatchEditDialogModule {\r\n  // static forRoot(): ModuleWithProviders {\r\n  //     return {\r\n  //         ngModule: BatchEditDialogModule,\r\n  //         providers: [\r\n  //             BatchEditDialogService\r\n  //         ]\r\n  //     };\r\n  // }\r\n}\r\n"]}