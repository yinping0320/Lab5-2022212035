import { __spread, __assign } from 'tslib';
import { CommonModule } from '@angular/common';
import { ComboListModule } from '@farris/ui-combo-list';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { IdService, FarrisCommonModule } from '@farris/ui-common';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { InputGroupModule } from '@farris/ui-input-group';
import { LookupModule } from '@farris/ui-lookup';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { ModalModule } from '@farris/ui-modal';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { SwitchModule } from '@farris/ui-switch';
import { TimePickerModule } from '@farris/ui-time-picker';
import { Injectable, Pipe, defineInjectable, EventEmitter, Component, Injector, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTableService = /** @class */ (function () {
    function EditTableService() {
    }
    EditTableService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EditTableService.ctorParameters = function () { return []; };
    /** @nocollapse */ EditTableService.ngInjectableDef = defineInjectable({ factory: function EditTableService_Factory() { return new EditTableService(); }, token: EditTableService, providedIn: "root" });
    return EditTableService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTableComponent = /** @class */ (function () {
    function EditTableComponent(injector, idSer, cdr, msgSer, notifySer) {
        this.injector = injector;
        this.idSer = idSer;
        this.cdr = cdr;
        this.msgSer = msgSer;
        this.notifySer = notifySer;
        this.data = [];
        this.selectId = '';
        /**
         * 行数据标识字段
         */
        this.idField = '_id';
        this.dataChange = new EventEmitter();
        this.selectedItem = null;
    }
    /**
     * @return {?}
     */
    EditTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @return {?}
     */
    EditTableComponent.prototype.dataChanged = /**
     * @private
     * @return {?}
     */
    function () {
        this.dataChange.emit(this.data);
    };
    /**
     * @private
     * @return {?}
     */
    EditTableComponent.prototype.createNewData = /**
     * @private
     * @return {?}
     */
    function () {
        return this.columns.reduce((/**
         * @param {?} p
         * @param {?} n
         * @return {?}
         */
        function (p, n) {
            if (n.field.indexOf('.') > -1) {
                p = Object.assign(p, n.defaultValue);
            }
            else {
                p[n.field] = n.defaultValue || null;
            }
            return p;
        }), { _id: this.idSer.guid() });
    };
    /** 插入新行 */
    /**
     * 插入新行
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    EditTableComponent.prototype.insertRow = /**
     * 插入新行
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    function (index, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var newItem = this.createNewData();
        /** @type {?} */
        var _newItem = Object.assign({}, newItem);
        this.data.splice(index + 1, 0, _newItem);
        this.dataChanged();
    };
    /** 新增行 */
    /**
     * 新增行
     * @param {?} $event
     * @return {?}
     */
    EditTableComponent.prototype.appendNew = /**
     * 新增行
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        /** @type {?} */
        var newItem = this.createNewData();
        this.data = __spread(this.data, [newItem]);
        this.dataChanged();
    };
    /** 选中行 */
    /**
     * 选中行
     * @param {?} $event
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    EditTableComponent.prototype.selectRow = /**
     * 选中行
     * @param {?} $event
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    function ($event, rowData, index) {
        if ($event) {
            $event.stopPropagation();
        }
        this.selectId = rowData[this.idField];
        this.selectedItem = {
            data: rowData,
            index: index
        };
    };
    /**
     * @param {?} $event
     * @param {?} index
     * @return {?}
     */
    EditTableComponent.prototype.deleteRow = /**
     * @param {?} $event
     * @param {?} index
     * @return {?}
     */
    function ($event, index) {
        if ($event) {
            $event.stopPropagation();
        }
        this.data.splice(index, 1);
        this.dataChanged();
        if (this.selectedItem) {
            if (index === this.selectedItem.index) {
                if (this.data[index]) {
                    this.selectedItem = { index: index, data: this.data[index] };
                }
                else {
                    if (this.data[index - 1]) {
                        this.selectedItem = { index: index - 1, data: this.data[index - 1] };
                    }
                    else {
                        this.selectedItem = null;
                    }
                }
            }
            else {
                if (!this.data[this.selectedItem.index]) {
                    if (this.selectedItem.index > index) {
                        this.selectedItem.index = this.selectedItem.index - 1;
                    }
                    else {
                        this.selectedItem.index = this.selectedItem.index + 1;
                    }
                }
            }
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditTableComponent.prototype.clear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.msgSer.question('确认要清空当前所有条件吗？', (/**
         * @return {?}
         */
        function () {
            _this.data = [];
            _this.selectedItem = null;
            _this.selectId = '';
            _this.dataChanged();
        }));
    };
    /**
     * @param {?} $event
     * @param {?} action
     * @return {?}
     */
    EditTableComponent.prototype.moveRow = /**
     * @param {?} $event
     * @param {?} action
     * @return {?}
     */
    function ($event, action) {
        var _a, _b;
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.selectedItem) {
            this.notifySer.warning('请选择要移动的行');
            return;
        }
        /** @type {?} */
        var index = this.selectedItem.index;
        /** @type {?} */
        var tempArr = [];
        switch (action) {
            case 'top':
                this.data.unshift(this.selectedItem.data);
                this.data.splice(index + 1, 1);
                this.selectedItem.index = 0;
                break;
            case 'bottom':
                this.data.push(this.selectedItem.data);
                this.data.splice(index, 1);
                this.selectedItem.index = this.data.length - 1;
                break;
            case 'up':
                tempArr = this.data.splice(index, 1);
                (_a = this.data).splice.apply(_a, __spread([index - 1, 0], tempArr));
                this.selectedItem.index = index - 1;
                break;
            case 'down':
                tempArr = this.data.splice(index, 1);
                (_b = this.data).splice.apply(_b, __spread([index + 1, 0], tempArr));
                this.selectedItem.index = index + 1;
                break;
        }
        this.dataChanged();
    };
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    EditTableComponent.prototype.onComboLookupValueChange = /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    function ($event, ctx) {
        if (ctx && ctx.options && ctx.options.valueChange) {
            var rowData = ctx.rowData, field = ctx.field;
            ctx.options.valueChange(__assign({}, $event, { data: rowData, field: field }));
        }
    };
    EditTableComponent.decorators = [
        { type: Component, args: [{
                    selector: "farris-edit-table",
                    template: "<table class=\"table table-bordered\">\r\n    <thead>\r\n        <tr>\r\n            <th style=\"width: 80px\"></th>\r\n            <th *ngFor=\"let col of columns\">{{ col.title }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let d of data; let i = index\" [class.selected]=\"selectId === d['_id']\" (click)=\"selectRow($event, d, i)\">\r\n            <td style=\"width: 80px;text-overflow: unset;\">\r\n                <button class=\"k-button k-button-icontext k-flat p-0 mr-3\">\r\n                    <span class=\"f-icon f-icon-add\"></span>\r\n                </button>\r\n                <button (click)=\"deleteRow($event, i)\" class=\"k-button k-button-icontext k-flat p-0\">\r\n                    <span class=\"f-icon f-icon-kpi-trend-equal\"></span>\r\n                </button>\r\n            </td>\r\n            <td *ngFor=\"let col of columns\">\r\n                <ng-container *ngIf=\"col.editTemplate\" [ngTemplateOutlet]=\"col.editTemplate\" [ngTemplateOutletContext]=\"{\r\n                        $implicit: { column: col, rowData: d }\r\n                    }\"></ng-container>\r\n                <ng-container *ngIf=\"!col.editTemplage\" [ngSwitch]=\"(d | editortype: col)\">\r\n                    <!-- text -->\r\n                    <ng-container  *ngSwitchCase=\"'text'\"  [ngTemplateOutlet]=\"textTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options:  (d |editoropts: col) }}\"></ng-container >\r\n                    <!-- input-group -->\r\n                    <ng-container *ngSwitchCase=\"'input-group'\"  [ngTemplateOutlet]=\"inputgroupTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}\"></ng-container >\r\n\r\n                    <!-- combo-list -->\r\n                    <ng-container  *ngSwitchCase=\"'combo-list'\"  [ngTemplateOutlet]=\"combolistTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}\"></ng-container >\r\n                    <!-- checkbox -->\r\n                    <!-- numberbox -->\r\n                    <ng-container *ngSwitchCase=\"'number-spinner'\" [ngTemplateOutlet]=\"numberspinnerTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}\"></ng-container>\r\n                    <!-- combo-lookup -->\r\n                    <!-- combo-tree -->\r\n                    <ng-container *ngSwitchCase=\"'combo-tree'\"  [ngTemplateOutlet]=\"combotreeTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}\"></ng-container >\r\n                    <!-- lookup -->\r\n                    <!-- datetime -->\r\n                    <ng-container *ngSwitchCase=\"'datetime'\" [ngTemplateOutlet]=\"datepickerTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}\"></ng-container>\r\n                    <!-- color -->\r\n                    <ng-container *ngSwitchCase=\"'color'\"  [ngTemplateOutlet]=\"colorPickerTempRef\" [ngTemplateOutletContext]=\"{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}\"></ng-container >\r\n                </ng-container>\r\n                \r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n    <tfoot style=\"background-color:#f7f8fb\">\r\n        <tr>\r\n            <td [attr.colspan]=\"columns.length + 1\">\r\n                <button class=\"k-button k-button-icontext k-flat \" (click)=\"appendNew($event)\"><span class=\"f-icon f-icon-add\"></span> \u65B0\u589E</button>\r\n                <button class=\"k-button k-button-icontext k-flat \" (click)=\"clear($event)\"><span class=\"f-icon f-icon-close\"></span> \u6E05\u7A7A</button>\r\n                <button class=\"k-button k-button-icontext k-flat \" (click)=\"moveRow($event, 'top')\"><span class=\"f-icon f-icon-arrow-end-up\"></span> \u7F6E\u9876</button>\r\n                <button class=\"k-button k-button-icontext k-flat \" (click)=\"moveRow($event, 'up')\"><span class=\"f-icon f-icon-arrow-60-up\"></span> \u4E0A\u79FB</button>\r\n                <button class=\"k-button k-button-icontext k-flat \" (click)=\"moveRow($event, 'down')\"><span class=\"f-icon f-icon-arrow-60-down\"></span> \u4E0B\u79FB</button>\r\n                <button class=\"k-button k-button-icontext k-flat \" (click)=\"moveRow($event, 'bottom')\"><span class=\"f-icon f-icon-arrow-end-down\"></span> \u7F6E\u5E95</button>\r\n            </td>\r\n        </tr>\r\n    </tfoot>\r\n</table>\r\n\r\n\r\n<!-- text -->\r\n<ng-template #textTempRef let-ctx>\r\n    <div class=\"f-datagrid-cell-formgroup farris-group-auto \">\r\n        <input class=\"form-control\" type=\"text\" [(ngModel)]=\"ctx.rowData[ctx.field]\" [attr.name]=\"ctx.field\">\r\n    </div>\r\n</ng-template>\r\n\r\n<!--combo-list-->\r\n<ng-template #combolistTempRef let-ctx>\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData[ctx.field]\" [attr.name]=\"ctx.field\"\r\n        [idField]=\"ctx?.options?.valueField || ctx?.options?.idField || 'id'\" \r\n        [textField]=\"ctx?.options?.textField || 'label'\" \r\n        [data]=\"ctx?.options?.data\">\r\n    </farris-combo-list>\r\n</ng-template>\r\n\r\n<!-- combo-tree -->\r\n<ng-template #combotreeTempRef let-ctx>\r\n    <farris-combo-lookup [(ngModel)]=\"ctx.rowData[ctx.field]\" [attr.name]=\"ctx.field\"\r\n        [idField]=\"ctx?.options?.idField ||'value'\"\r\n        [textField]=\"ctx?.options?.textField ||'label'\"\r\n        [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n        [useTreeView]=\"true\"\r\n        [columns]=\"ctx?.options?.columns || []\"\r\n        [data]=\"ctx?.options.data\"\r\n        [remoteSearch]=\"false\"\r\n        [autoWidth]=\"false\"\r\n        [panelWidth]=\"ctx?.options?.panelWidth || 200\"\r\n        (valueChange)=\"onComboLookupValueChange($event, ctx)\">\r\n    </farris-combo-lookup>\r\n</ng-template>\r\n\r\n\r\n<!--input-group-->\r\n<ng-template #inputgroupTempRef let-ctx>\r\n    <input-group [(ngModel)]=\"ctx.rowData[ctx.field]\" [attr.name]=\"ctx.field\" \r\n    [groupText]=\"ctx?.options.groupIcon\"\r\n    (clickHandle)=\"ctx.options?.clickHandle({ ctx: ctx, column: ctx.col, data: ctx.rowData })\"></input-group>\r\n</ng-template>\r\n<!-- Color -->\r\n<ng-template #colorPickerTempRef let-ctx>\r\n    <input type=\"color\" [(ngModel)]=\"ctx.rowData[ctx.field]\" [attr.name]=\"ctx.field\" >\r\n</ng-template>\r\n\r\n<!-- Number -->\r\n<ng-template #numberspinnerTempRef let-ctx>\r\n    <farris-number-spinner [(ngModel)]=\"ctx.rowData[ctx.field]\" [min]=\"ctx?.options?.min\"\r\n      [max]=\"ctx?.options?.max\" [precision]=\"ctx?.options?.precision\" [step]=\"ctx?.options?.step\"\r\n      [showZero]=\"false\" [canNull]=\"true\"\r\n      [useThousands]=\"true\" [prefix]=\"ctx?.options?.prefix || ''\"\r\n      [suffix]=\"ctx?.options?.suffix||''\" [formatter]=\"ctx?.options?.formatter\"\r\n      [showButton]=\"ctx?.options?.showButton\" [bigNumber]=\"ctx?.options?.bigNumber\"\r\n      >\r\n    </farris-number-spinner>\r\n</ng-template>\r\n\r\n<!-- Datebox -->\r\n<ng-template #datepickerTempRef let-ctx>\r\n    <farris-datepicker [(ngModel)]=\"ctx.rowData[ctx.field]\" [dateRange]=\"ctx?.options?.dateRange\">\r\n    </farris-datepicker>\r\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    EditTableComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: IdService },
        { type: ChangeDetectorRef },
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    EditTableComponent.propDecorators = {
        columns: [{ type: Input }],
        data: [{ type: Input }],
        selectId: [{ type: Input }],
        idField: [{ type: Input }],
        dataChange: [{ type: Output }]
    };
    return EditTableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTableEditorTypePipe = /** @class */ (function () {
    function EditTableEditorTypePipe() {
    }
    /**
     * @param {?} data
     * @param {...?} args
     * @return {?}
     */
    EditTableEditorTypePipe.prototype.transform = /**
     * @param {?} data
     * @param {...?} args
     * @return {?}
     */
    function (data) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var col = args[0];
        if (col.editor) {
            return col.editor.type || 'text';
        }
        if (data) {
            if (data.$editors) {
                if (col && data.$editors[col.field]) {
                    return data.$editors[col.field].type || 'text';
                }
                return 'text';
            }
            return 'text';
        }
        return null;
    };
    EditTableEditorTypePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'editortype'
                },] }
    ];
    return EditTableEditorTypePipe;
}());
var EditTableEditorOptionsPipe = /** @class */ (function () {
    function EditTableEditorOptionsPipe() {
    }
    /**
     * @param {?} data
     * @param {...?} args
     * @return {?}
     */
    EditTableEditorOptionsPipe.prototype.transform = /**
     * @param {?} data
     * @param {...?} args
     * @return {?}
     */
    function (data) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var col = args[0];
        if (col.editor) {
            return col.editor.options || null;
        }
        if (data) {
            if (data.$editors) {
                if (col) {
                    return data.$editors[col.field] ? data.$editors[col.field].options : null;
                }
                return null;
            }
            return null;
        }
        return null;
    };
    EditTableEditorOptionsPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'editoropts'
                },] }
    ];
    return EditTableEditorOptionsPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTableModule = /** @class */ (function () {
    function EditTableModule() {
    }
    EditTableModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        EditTableComponent,
                        EditTableEditorTypePipe,
                        EditTableEditorOptionsPipe
                    ],
                    imports: [
                        CommonModule,
                        FarrisCommonModule.forRoot(),
                        MessagerModule.forRoot(),
                        ComboListModule,
                        ComboLookupModule,
                        LookupModule,
                        InputGroupModule,
                        ModalModule,
                        FarrisDatePickerModule,
                        NumberSpinnerModule,
                        TimePickerModule,
                        SwitchModule,
                        NotifyModule.forRoot()
                    ],
                    exports: [EditTableComponent, EditTableEditorTypePipe, EditTableEditorOptionsPipe]
                },] }
    ];
    return EditTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { EditTableService, EditTableComponent, EditTableModule, EditTableEditorTypePipe, EditTableEditorOptionsPipe };

//# sourceMappingURL=farris-ui-edit-table.js.map