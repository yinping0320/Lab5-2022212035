/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class EditTableEditorTypePipe {
    /**
     * @param {?} data
     * @param {...?} args
     * @return {?}
     */
    transform(data, ...args) {
        /** @type {?} */
        const col = args[0];
        if (col.editor) {
            return col.editor.type || 'text';
        }
        if (data) {
            if (data.$editors) {
                if (col && data.$editors[col.field]) {
                    return data.$editors[col.field].type || 'text';
                }
                return 'text';
            }
            return 'text';
        }
        return null;
    }
}
EditTableEditorTypePipe.decorators = [
    { type: Pipe, args: [{
                name: 'editortype'
            },] }
];
export class EditTableEditorOptionsPipe {
    /**
     * @param {?} data
     * @param {...?} args
     * @return {?}
     */
    transform(data, ...args) {
        /** @type {?} */
        const col = args[0];
        if (col.editor) {
            return col.editor.options || null;
        }
        if (data) {
            if (data.$editors) {
                if (col) {
                    return data.$editors[col.field] ? data.$editors[col.field].options : null;
                    ;
                }
                return null;
            }
            return null;
        }
        return null;
    }
}
EditTableEditorOptionsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'editoropts'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC10YWJsZS1lZGl0b3J0eXBlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWVkaXQtdGFibGUvIiwic291cmNlcyI6WyJsaWIvZWRpdC10YWJsZS1lZGl0b3J0eXBlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBS3BELE1BQU0sT0FBTyx1QkFBdUI7Ozs7OztJQUNoQyxTQUFTLENBQUMsSUFBUyxFQUFFLEdBQUcsSUFBVzs7Y0FDekIsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ1osT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUM7U0FDcEM7UUFFRCxJQUFJLElBQUksRUFBRTtZQUNOLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDakMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDO2lCQUNsRDtnQkFDRCxPQUFPLE1BQU0sQ0FBQzthQUNqQjtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBckJKLElBQUksU0FBQztnQkFDRixJQUFJLEVBQUUsWUFBWTthQUNyQjs7QUEwQkQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7O0lBQ25DLFNBQVMsQ0FBQyxJQUFTLEVBQUUsR0FBRyxJQUFXOztjQUN6QixHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNuQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDWixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztTQUNyQztRQUVELElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLElBQUksR0FBRyxFQUFFO29CQUNMLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUFBLENBQUM7aUJBQzlFO2dCQUNELE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBckJKLElBQUksU0FBQztnQkFDRixJQUFJLEVBQUUsWUFBWTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdlZGl0b3J0eXBlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRWRpdFRhYmxlRWRpdG9yVHlwZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIHRyYW5zZm9ybShkYXRhOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55IHtcclxuICAgICAgICBjb25zdCBjb2wgPSBhcmdzWzBdO1xyXG4gICAgICAgIGlmIChjb2wuZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2wuZWRpdG9yLnR5cGUgfHwgJ3RleHQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuJGVkaXRvcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2wgJiYgZGF0YS4kZWRpdG9yc1tjb2wuZmllbGRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuJGVkaXRvcnNbY29sLmZpZWxkXS50eXBlIHx8ICd0ZXh0JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAndGV4dCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICd0ZXh0JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2VkaXRvcm9wdHMnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFZGl0VGFibGVFZGl0b3JPcHRpb25zUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKGRhdGE6IGFueSwgLi4uYXJnczogYW55W10pOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGNvbCA9IGFyZ3NbMF07XHJcbiAgICAgICAgaWYgKGNvbC5lZGl0b3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbC5lZGl0b3Iub3B0aW9ucyB8fCBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuJGVkaXRvcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS4kZWRpdG9yc1tjb2wuZmllbGRdID8gZGF0YS4kZWRpdG9yc1tjb2wuZmllbGRdLm9wdGlvbnMgOiBudWxsOztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuIl19