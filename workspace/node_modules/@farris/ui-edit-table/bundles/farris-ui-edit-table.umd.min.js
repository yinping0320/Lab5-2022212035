!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@farris/ui-combo-list"),require("@farris/ui-combo-lookup"),require("@farris/ui-common"),require("@farris/ui-datepicker"),require("@farris/ui-input-group"),require("@farris/ui-lookup"),require("@farris/ui-messager"),require("@farris/ui-modal"),require("@farris/ui-notify"),require("@farris/ui-number-spinner"),require("@farris/ui-switch"),require("@farris/ui-time-picker"),require("@angular/core")):"function"==typeof define&&define.amd?define("@farris/ui-edit-table",["exports","@angular/common","@farris/ui-combo-list","@farris/ui-combo-lookup","@farris/ui-common","@farris/ui-datepicker","@farris/ui-input-group","@farris/ui-lookup","@farris/ui-messager","@farris/ui-modal","@farris/ui-notify","@farris/ui-number-spinner","@farris/ui-switch","@farris/ui-time-picker","@angular/core"],e):e((t.farris=t.farris||{},t.farris["ui-edit-table"]={}),t.ng.common,t.uiComboList,t.uiComboLookup,t.uiCommon,t.uiDatepicker,t.uiInputGroup,t.uiLookup,t.uiMessager,t.uiModal,t.uiNotify,t.uiNumberSpinner,t.uiSwitch,t.uiTimePicker,t.ng.core)}(this,function(t,e,n,o,r,i,a,c,l,s,d,p,u,f,m){"use strict";var x=(g.decorators=[{type:m.Injectable,args:[{providedIn:"root"}]}],g.ctorParameters=function(){return[]},g.ngInjectableDef=m.defineInjectable({factory:function(){return new g},token:g,providedIn:"root"}),g);function g(){}var h=function(){return(h=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function b(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,i=n.call(t),a=[];try{for(;(void 0===e||0<e--)&&!(o=i.next()).done;)a.push(o.value)}catch(c){r={error:c}}finally{try{o&&!o.done&&(n=i["return"])&&n.call(i)}finally{if(r)throw r.error}}return a}function k(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(b(arguments[e]));return t}var w=(y.prototype.ngOnInit=function(){},y.prototype.dataChanged=function(){this.dataChange.emit(this.data)},y.prototype.createNewData=function(){return this.columns.reduce(function(t,e){return-1<e.field.indexOf(".")?t=Object.assign(t,e.defaultValue):t[e.field]=e.defaultValue||null,t},{_id:this.idSer.guid()})},y.prototype.insertRow=function(t,e){e&&e.stopPropagation();var n=this.createNewData(),o=Object.assign({},n);this.data.splice(t+1,0,o),this.dataChanged()},y.prototype.appendNew=function(t){t.stopPropagation();var e=this.createNewData();this.data=k(this.data,[e]),this.dataChanged()},y.prototype.selectRow=function(t,e,n){t&&t.stopPropagation(),this.selectId=e[this.idField],this.selectedItem={data:e,index:n}},y.prototype.deleteRow=function(t,e){t&&t.stopPropagation(),this.data.splice(e,1),this.dataChanged(),this.selectedItem&&(e===this.selectedItem.index?this.data[e]?this.selectedItem={index:e,data:this.data[e]}:this.data[e-1]?this.selectedItem={index:e-1,data:this.data[e-1]}:this.selectedItem=null:this.data[this.selectedItem.index]||(this.selectedItem.index>e?this.selectedItem.index=this.selectedItem.index-1:this.selectedItem.index=this.selectedItem.index+1),this.cdr.detectChanges())},y.prototype.clear=function(t){var e=this;this.msgSer.question("确认要清空当前所有条件吗？",function(){e.data=[],e.selectedItem=null,e.selectId="",e.dataChanged()})},y.prototype.moveRow=function(t,e){var n,o;if(t&&t.stopPropagation(),this.selectedItem){var r=this.selectedItem.index,i=[];switch(e){case"top":this.data.unshift(this.selectedItem.data),this.data.splice(r+1,1),this.selectedItem.index=0;break;case"bottom":this.data.push(this.selectedItem.data),this.data.splice(r,1),this.selectedItem.index=this.data.length-1;break;case"up":i=this.data.splice(r,1),(n=this.data).splice.apply(n,k([r-1,0],i)),this.selectedItem.index=r-1;break;case"down":i=this.data.splice(r,1),(o=this.data).splice.apply(o,k([r+1,0],i)),this.selectedItem.index=r+1}this.dataChanged()}else this.notifySer.warning("请选择要移动的行")},y.prototype.onComboLookupValueChange=function(t,e){if(e&&e.options&&e.options.valueChange){var n=e.rowData,o=e.field;e.options.valueChange(h({},t,{data:n,field:o}))}},y.decorators=[{type:m.Component,args:[{selector:"farris-edit-table",template:'<table class="table table-bordered">\r\n    <thead>\r\n        <tr>\r\n            <th style="width: 80px"></th>\r\n            <th *ngFor="let col of columns">{{ col.title }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor="let d of data; let i = index" [class.selected]="selectId === d[\'_id\']" (click)="selectRow($event, d, i)">\r\n            <td style="width: 80px;text-overflow: unset;">\r\n                <button class="k-button k-button-icontext k-flat p-0 mr-3">\r\n                    <span class="f-icon f-icon-add"></span>\r\n                </button>\r\n                <button (click)="deleteRow($event, i)" class="k-button k-button-icontext k-flat p-0">\r\n                    <span class="f-icon f-icon-kpi-trend-equal"></span>\r\n                </button>\r\n            </td>\r\n            <td *ngFor="let col of columns">\r\n                <ng-container *ngIf="col.editTemplate" [ngTemplateOutlet]="col.editTemplate" [ngTemplateOutletContext]="{\r\n                        $implicit: { column: col, rowData: d }\r\n                    }"></ng-container>\r\n                <ng-container *ngIf="!col.editTemplage" [ngSwitch]="(d | editortype: col)">\r\n                    \x3c!-- text --\x3e\r\n                    <ng-container  *ngSwitchCase="\'text\'"  [ngTemplateOutlet]="textTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options:  (d |editoropts: col) }}"></ng-container >\r\n                    \x3c!-- input-group --\x3e\r\n                    <ng-container *ngSwitchCase="\'input-group\'"  [ngTemplateOutlet]="inputgroupTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}"></ng-container >\r\n\r\n                    \x3c!-- combo-list --\x3e\r\n                    <ng-container  *ngSwitchCase="\'combo-list\'"  [ngTemplateOutlet]="combolistTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}"></ng-container >\r\n                    \x3c!-- checkbox --\x3e\r\n                    \x3c!-- numberbox --\x3e\r\n                    <ng-container *ngSwitchCase="\'number-spinner\'" [ngTemplateOutlet]="numberspinnerTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}"></ng-container>\r\n                    \x3c!-- combo-lookup --\x3e\r\n                    \x3c!-- combo-tree --\x3e\r\n                    <ng-container *ngSwitchCase="\'combo-tree\'"  [ngTemplateOutlet]="combotreeTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}"></ng-container >\r\n                    \x3c!-- lookup --\x3e\r\n                    \x3c!-- datetime --\x3e\r\n                    <ng-container *ngSwitchCase="\'datetime\'" [ngTemplateOutlet]="datepickerTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}"></ng-container>\r\n                    \x3c!-- color --\x3e\r\n                    <ng-container *ngSwitchCase="\'color\'"  [ngTemplateOutlet]="colorPickerTempRef" [ngTemplateOutletContext]="{$implicit: { field: col.field, column: col, rowData: d, options: (d |editoropts: col) }}"></ng-container >\r\n                </ng-container>\r\n                \r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n    <tfoot style="background-color:#f7f8fb">\r\n        <tr>\r\n            <td [attr.colspan]="columns.length + 1">\r\n                <button class="k-button k-button-icontext k-flat " (click)="appendNew($event)"><span class="f-icon f-icon-add"></span> 新增</button>\r\n                <button class="k-button k-button-icontext k-flat " (click)="clear($event)"><span class="f-icon f-icon-close"></span> 清空</button>\r\n                <button class="k-button k-button-icontext k-flat " (click)="moveRow($event, \'top\')"><span class="f-icon f-icon-arrow-end-up"></span> 置顶</button>\r\n                <button class="k-button k-button-icontext k-flat " (click)="moveRow($event, \'up\')"><span class="f-icon f-icon-arrow-60-up"></span> 上移</button>\r\n                <button class="k-button k-button-icontext k-flat " (click)="moveRow($event, \'down\')"><span class="f-icon f-icon-arrow-60-down"></span> 下移</button>\r\n                <button class="k-button k-button-icontext k-flat " (click)="moveRow($event, \'bottom\')"><span class="f-icon f-icon-arrow-end-down"></span> 置底</button>\r\n            </td>\r\n        </tr>\r\n    </tfoot>\r\n</table>\r\n\r\n\r\n\x3c!-- text --\x3e\r\n<ng-template #textTempRef let-ctx>\r\n    <div class="f-datagrid-cell-formgroup farris-group-auto ">\r\n        <input class="form-control" type="text" [(ngModel)]="ctx.rowData[ctx.field]" [attr.name]="ctx.field">\r\n    </div>\r\n</ng-template>\r\n\r\n\x3c!--combo-list--\x3e\r\n<ng-template #combolistTempRef let-ctx>\r\n    <farris-combo-list [(ngModel)]="ctx.rowData[ctx.field]" [attr.name]="ctx.field"\r\n        [idField]="ctx?.options?.valueField || ctx?.options?.idField || \'id\'" \r\n        [textField]="ctx?.options?.textField || \'label\'" \r\n        [data]="ctx?.options?.data">\r\n    </farris-combo-list>\r\n</ng-template>\r\n\r\n\x3c!-- combo-tree --\x3e\r\n<ng-template #combotreeTempRef let-ctx>\r\n    <farris-combo-lookup [(ngModel)]="ctx.rowData[ctx.field]" [attr.name]="ctx.field"\r\n        [idField]="ctx?.options?.idField ||\'value\'"\r\n        [textField]="ctx?.options?.textField ||\'label\'"\r\n        [displayType]="\'LOOKUPTREELIST\'" [useValue]="true"\r\n        [useTreeView]="true"\r\n        [columns]="ctx?.options?.columns || []"\r\n        [data]="ctx?.options.data"\r\n        [remoteSearch]="false"\r\n        [autoWidth]="false"\r\n        [panelWidth]="ctx?.options?.panelWidth || 200"\r\n        (valueChange)="onComboLookupValueChange($event, ctx)">\r\n    </farris-combo-lookup>\r\n</ng-template>\r\n\r\n\r\n\x3c!--input-group--\x3e\r\n<ng-template #inputgroupTempRef let-ctx>\r\n    <input-group [(ngModel)]="ctx.rowData[ctx.field]" [attr.name]="ctx.field" \r\n    [groupText]="ctx?.options.groupIcon"\r\n    (clickHandle)="ctx.options?.clickHandle({ ctx: ctx, column: ctx.col, data: ctx.rowData })"></input-group>\r\n</ng-template>\r\n\x3c!-- Color --\x3e\r\n<ng-template #colorPickerTempRef let-ctx>\r\n    <input type="color" [(ngModel)]="ctx.rowData[ctx.field]" [attr.name]="ctx.field" >\r\n</ng-template>\r\n\r\n\x3c!-- Number --\x3e\r\n<ng-template #numberspinnerTempRef let-ctx>\r\n    <farris-number-spinner [(ngModel)]="ctx.rowData[ctx.field]" [min]="ctx?.options?.min"\r\n      [max]="ctx?.options?.max" [precision]="ctx?.options?.precision" [step]="ctx?.options?.step"\r\n      [showZero]="false" [canNull]="true"\r\n      [useThousands]="true" [prefix]="ctx?.options?.prefix || \'\'"\r\n      [suffix]="ctx?.options?.suffix||\'\'" [formatter]="ctx?.options?.formatter"\r\n      [showButton]="ctx?.options?.showButton" [bigNumber]="ctx?.options?.bigNumber"\r\n      >\r\n    </farris-number-spinner>\r\n</ng-template>\r\n\r\n\x3c!-- Datebox --\x3e\r\n<ng-template #datepickerTempRef let-ctx>\r\n    <farris-datepicker [(ngModel)]="ctx.rowData[ctx.field]" [dateRange]="ctx?.options?.dateRange">\r\n    </farris-datepicker>\r\n</ng-template>'}]}],y.ctorParameters=function(){return[{type:m.Injector},{type:r.IdService},{type:m.ChangeDetectorRef},{type:l.MessagerService},{type:d.NotifyService}]},y.propDecorators={columns:[{type:m.Input}],data:[{type:m.Input}],selectId:[{type:m.Input}],idField:[{type:m.Input}],dataChange:[{type:m.Output}]},y);function y(t,e,n,o,r){this.injector=t,this.idSer=e,this.cdr=n,this.msgSer=o,this.notifySer=r,this.data=[],this.selectId="",this.idField="_id",this.dataChange=new m.EventEmitter,this.selectedItem=null}var v=(T.prototype.transform=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var o=e[0];return o.editor?o.editor.type||"text":t?t.$editors&&o&&t.$editors[o.field]&&t.$editors[o.field].type||"text":null},T.decorators=[{type:m.Pipe,args:[{name:"editortype"}]}],T);function T(){}var I=(C.prototype.transform=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var o=e[0];return o.editor?o.editor.options||null:t&&t.$editors&&o&&t.$editors[o.field]?t.$editors[o.field].options:null},C.decorators=[{type:m.Pipe,args:[{name:"editoropts"}]}],C);function C(){}var R=(M.decorators=[{type:m.NgModule,args:[{declarations:[w,v,I],imports:[e.CommonModule,r.FarrisCommonModule.forRoot(),l.MessagerModule.forRoot(),n.ComboListModule,o.ComboLookupModule,c.LookupModule,a.InputGroupModule,s.ModalModule,i.FarrisDatePickerModule,p.NumberSpinnerModule,f.TimePickerModule,u.SwitchModule,d.NotifyModule.forRoot()],exports:[w,v,I]}]}],M);function M(){}t.EditTableService=x,t.EditTableComponent=w,t.EditTableModule=R,t.EditTableEditorTypePipe=v,t.EditTableEditorOptionsPipe=I,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=farris-ui-edit-table.umd.min.js.map