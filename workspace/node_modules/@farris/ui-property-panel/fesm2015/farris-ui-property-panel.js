import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector, ElementRef, ViewChildren, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { PopoverModule } from '@farris/ui-popover';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FarrisPanelModule } from '@farris/ui-panel';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { DateInputsModule } from '@progress/kendo-angular-dateinputs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const PropertyType = {
    string: 'string',
    boolean: 'boolean',
    number: 'number',
    select: 'select',
    boolOrExp: 'boolOrExp',
    multiSelect: 'multiSelect',
    date: 'date',
    datetime: 'datetime',
    modal: 'modal',
    cascade: 'cascade',
};
class ElementPropertyConfig {
    constructor() {
        this.hide = false;
        this.hideTitle = false;
        // 是否启用级联特性
        this.enableCascade = false;
    }
}
// 属性实体
class PropertyEntity {
    constructor() {
        // 属性的默认值
        this.readonly = false; // 是否只读
        // 是否只读
        this.visible = true; // 是否可见
        // 数字类型属性的小数位数
        // 属性改变后刷新整个面板：用于更改其他分类下的属性
        this.refreshPanelAfterChanged = false;
        // 下拉多选类型：属性值的类型：string(多值以逗号分隔)/array(多值组装成数组)
        this.multiSelectDataType = 'string';
        // 级联属性配置
        this.isExpand = false; // 级联属性是否默认收起
        // 级联属性是否默认收起
        this.hideCascadeTitle = false; // 是否隐藏级联属性的头部
        // 属性值转换器,
        this.showClearButton = false; // 是否展示清除图标
    }
    // 是否展示清除图标
    // 打开模态框前的方法，一般用于校验逻辑，返回值中result=true，则进一步打开模态框，result=false则提示message内容，并不再打开模态框。
    /**
     * @return {?}
     */
    beforeOpenModal() {
        return new BeforeOpenModalResult();
    }
}
class BeforeOpenModalResult {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyItemComponent {
    /**
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     * @param {?} notifyServ
     * @param {?} el
     */
    constructor(resolver, modalService, injector, notifyServ, el) {
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.notifyServ = notifyServ;
        this.el = el;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.triggerRefreshPanel = new EventEmitter(); // 向上触发整体面板刷新
        // 模态框类型的属性:属性框的展示值
        this.selectOptions = [];
        this.itemType = 'string';
        this.show = true;
        this.numberRestriction = {
            format: 'n2',
            min: '',
            max: ''
        };
        this.showClearButton = false;
        this.showDefaultValue = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
    }
    /**
     * @return {?}
     */
    refresh() {
        // 是否显示，visible默认true
        if (Object.keys(this.elementConfig).indexOf('visible') < 0) {
            this.show = true;
        }
        else {
            this.show = this.elementConfig.visible;
        }
        // 显示格式
        /** @type {?} */
        const propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                this.selectOptions = [{ key: true, value: true }, { key: false, value: false }];
                break;
            }
            case 'select': {
                this.selectOptions = this.elementConfig.iterator;
                break;
            }
            case 'modal': {
                this._convertModalShowValue(this.elementValue);
                break;
            }
            case 'number': {
                // precision待优化为'n2'的格式，与kendo保持一致
                /** @type {?} */
                const precision = this.elementConfig.precision;
                if (precision !== undefined && precision > -1) {
                    this.numberRestriction.format = 'n' + precision;
                }
                // 支持传入kendo Numeric format格式 ：'n3' / 'p'
                if (this.elementConfig.numberFormat) {
                    this.numberRestriction.format = this.elementConfig.numberFormat;
                }
                // 设置最大、最小值
                this.numberRestriction.min = this.elementConfig.min;
                this.numberRestriction.max = this.elementConfig.max;
                break;
            }
            case 'string': {
                if (this.elementConfig.readonly) {
                    this._convertModalShowValue(this.elementValue);
                }
                break;
            }
            case 'boolOrExp': {
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                break;
            }
        }
        // 默认值
        if (Object.keys(this.elementConfig).indexOf('defaultValue') > -1) {
            if (this.elementValue === undefined || this.elementValue === null) {
                this.elementValue = this.elementConfig.defaultValue;
            }
            this.showDefaultValue = true;
        }
    }
    /**
     * 鼠标移入
     * @return {?}
     */
    onmouseover() {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        if (!this.showClearButton) {
            this.showClearButton = true;
        }
    }
    /**
     * 鼠标离开
     * @return {?}
     */
    onmouseleave() {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        this.showClearButton = false;
    }
    /**
     * 清除模态框内容
     * @return {?}
     */
    modalClear() {
        // 数据转换
        this._convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: null
        };
        this.submitModal.emit({ changeObject, parameters: null });
    }
    /**
     * 变更属性值
     * @return {?}
     */
    changeValue() {
        /** @type {?} */
        let value = this.elementValue;
        if (this.itemType === 'multiSelect' && this.elementConfig.multiSelectDataType === 'array') {
            value = this.elementValue ? this.elementValue.split(',') : '';
        }
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    openModal() {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            const result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning((/** @type {?} */ ({
                    title: '系统提示', msg: result.message, timeout: 3000
                })));
                return;
            }
        }
        this.createEditorComponent();
    }
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    createEditorComponent() {
        /** @type {?} */
        const editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        if (this.elementConfig.editorParams && compRef.instance.editorParams) { // 编辑器需要的额外参数
            compRef.instance.editorParams = this.elementConfig.editorParams;
        }
        /** @type {?} */
        let modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // 数据转换
                if (data) {
                    this._convertModalShowValue(data);
                    /** @type {?} */
                    const changeObject = {
                        propertyID: this.elementConfig.propertyID,
                        propertyValue: data
                    };
                    this.valueChanged.emit({ changeObject });
                }
                dialog.close();
            }));
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (!data) {
                    dialog.close();
                    return;
                }
                const { value, parameters } = data;
                // 数据转换
                this._convertModalShowValue(value);
                /** @type {?} */
                const changeObject = {
                    propertyID: this.elementConfig.propertyID,
                    propertyValue: value
                };
                this.submitModal.emit({ changeObject, parameters });
                dialog.close();
            }));
        }
    }
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value
     * @return {?}
     */
    _convertModalShowValue(value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    }
}
PropertyItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'webide-property-item',
                template: "<div class=\"farris-group-wrap property-item\" [style.display]=\"show?'block':'none'\">\r\n  <div class=\"form-group farris-form-group\">\r\n    <label class=\"col-form-label\" farrisPopover [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\"\r\n      container=\"body\" [triggers]=\"'hover'\">\r\n      <span class=\"farris-label-text\">{{elementConfig.propertyName}}</span>\r\n    </label>\r\n    <!-- <label class=\"col-form-label\"> \r\n    <span class=\"farris-label-text\">{{elementConfig.propertyName}}</span>\r\n    </label>-->\r\n    <div class=\"farris-input-wrap\" *ngIf=\"itemType=='string'\">\r\n      <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" (blur)=\"changeValue()\"\r\n        [readonly]=\"elementConfig.readonly?'readonly':''\">\r\n    </div>\r\n    <div class=\"farris-input-wrap\" *ngIf=\"itemType=='number'\">\r\n      <kendo-numerictextbox class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\"\r\n        [format]=\"numberRestriction.format\" [min]=\"numberRestriction.min\" [max]=\"numberRestriction.max\"\r\n        [readonly]=\"elementConfig.readonly?true:false\" [autoCorrect]=\"true\" [decimals]=\"elementConfig.decimals\"\r\n        (blur)=\"changeValue()\">\r\n      </kendo-numerictextbox>\r\n    </div>\r\n    <div class=\"farris-input-wrap\" *ngIf=\"itemType=='select'\">\r\n      <kendo-dropdownlist class=\"form-control form-control-sm\" [data]=\"selectOptions\" textField=\"value\" valueField=\"key\"\r\n        [valuePrimitive]=\"true\" [(ngModel)]=\"elementValue\" (valueChange)=\"changeValue()\"\r\n        [readonly]=\"elementConfig.readonly?true:false\">\r\n      </kendo-dropdownlist>\r\n    </div>\r\n    <div class=\"farris-input-wrap\" *ngIf=\"itemType=='date'\">\r\n      <kendo-datepicker class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\"\r\n        [readonly]=\"elementConfig.readonly?true:false\" [format]=\"'yyyy-MM-dd'\" (valueChange)=\"changeValue()\">\r\n      </kendo-datepicker>\r\n    </div>\r\n    <div class=\"farris-input-wrap\" *ngIf=\"itemType=='datetime'\">\r\n      <kendo-dateinput class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\"\r\n        [readonly]=\"elementConfig.readonly?true:false\" [format]=\"elementConfig.format||'yyyy-MM-dd HH:mm:ss'\"\r\n        (valueChange)=\"changeValue()\"></kendo-dateinput>\r\n    </div>\r\n    <div class=\"farris-input-wrap modalIcon\" *ngIf=\"itemType=='modal'\" (mouseover)=\"onmouseover()\"\r\n      (mouseleave)=\"onmouseleave()\">\r\n      <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" readonly>\r\n      <span *ngIf=\"showClearButton && !elementConfig.readonly\" class=\" \" (click)=\"modalClear()\">\r\n        <!-- <i class=\"f-icon modal_close\"></i> -->\r\n        <i class=\"material-icons clearIcon\">close</i>\r\n      </span>\r\n      <!-- <i class=\"fa fa-clone\" (click)=\"openModal()\"></i> -->\r\n      <i class=\"material-icons moreIcon\" (click)=\"openModal()\">filter_none</i>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #popTemplate>\r\n  <div *ngIf=\"elementConfig.propertyID\">\r\n    <span>\u5C5E\u6027\u7F16\u53F7\uFF1A </span> {{elementConfig.propertyID}}</div>\r\n  <div *ngIf=\"elementConfig.propertyName\">\r\n    <span>\u5C5E\u6027\u540D\u79F0\uFF1A </span> {{elementConfig.propertyName}}</div>\r\n  <div *ngIf=\"elementConfig.description\">\r\n    <span>\u63CF\u8FF0\uFF1A </span> {{elementConfig.description}}</div>\r\n  <div *ngIf=\"showDefaultValue\">\r\n    <span>\u9ED8\u8BA4\u503C\uFF1A </span> {{elementConfig.defaultValue}}</div>\r\n</ng-template>",
                styles: [".property-item .form-group{margin-bottom:2px}.property-item .modalIcon input{padding-right:30px}.property-item .modalIcon .moreIcon{position:absolute;top:6px;right:6px;cursor:pointer;font-size:16px;color:#758a96}.property-item .modalIcon .clearIcon{position:absolute;top:5px;right:30px;cursor:pointer;font-size:19px;color:#758a96}.property-item .form-control[readonly]{background-color:#fff}.property-item .form-control:disabled,.property-item .form-control[readonly]{color:#4b4c4c}"]
            }] }
];
/** @nocollapse */
PropertyItemComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector },
    { type: NotifyService },
    { type: ElementRef }
];
PropertyItemComponent.propDecorators = {
    elementConfig: [{ type: Input }],
    elementValue: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyItemListComponent {
    // 实际属性值
    constructor() {
        // 属性值
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.triggerRefreshPanel = new EventEmitter();
    }
    /**
     * @param {?} simpleChanges
     * @return {?}
     */
    ngOnChanges(simpleChanges) {
        // 若分类下有propertyData，则取分类下的propertyData；否则取整体的propertyData
        if (this.category.propertyData && this.category.enableCascade) {
            this.data = this.category.propertyData;
        }
        else {
            this.data = this.propertyData;
        }
    }
    /**
     * @return {?}
     */
    refresh() {
        // 若分类下有propertyData，则取分类下的propertyData；否则取整体的propertyData
        if (this.category.propertyData && this.category.enableCascade) {
            this.data = this.category.propertyData;
        }
        else {
            this.data = this.propertyData;
        }
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.refresh()));
    }
    /**
     * 一般属性变更
     * @param {?} $event
     * @return {?}
     */
    _itemChanged($event) {
        const { changeObject } = $event;
        this.data[changeObject.propertyID] = changeObject.propertyValue;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        changeObject.categoryId = this.category.categoryId;
        if (this.category.enableCascade) {
            changeObject.parentPropertyID = this.category.parentPropertyID;
        }
        this.valueChanged.emit(changeObject);
    }
    /**
     * 模态框数据变更（TODO:待优化，合并valueChange事件）
     * @param {?} $event
     * @return {?}
     */
    _submitModal($event) {
        const { changeObject, parameters } = $event;
        this.data[changeObject.propertyID] = changeObject.propertyValue;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data, parameters);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        changeObject.categoryId = this.category.categoryId;
        if (this.category.enableCascade) {
            changeObject.parentPropertyID = this.category.parentPropertyID;
        }
        this.submitModal.emit($event);
    }
    /**
     * 级联属性变更
     * @param {?} $event
     * @param {?} parentPropertyID
     * @return {?}
     */
    _cascadeitemChanged($event, parentPropertyID) {
        if (!parentPropertyID) {
            return;
        }
        const { changeObject } = $event;
        if (!this.data[parentPropertyID]) {
            this.data[parentPropertyID] = {};
        }
        this.data[parentPropertyID][changeObject.propertyID] = changeObject.propertyValue;
        changeObject.categoryId = this.category.categoryId;
        changeObject.parentPropertyID = parentPropertyID;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        this.valueChanged.emit(changeObject);
    }
    /**
     * 级联模态框属性变更
     * @param {?} $event
     * @param {?} parentPropertyID
     * @return {?}
     */
    __cascadeitemSubmitModal($event, parentPropertyID) {
        if (!parentPropertyID) {
            return;
        }
        const { changeObject, parameters } = $event;
        if (!this.data[parentPropertyID]) {
            this.data[parentPropertyID] = {};
        }
        this.data[parentPropertyID][changeObject.propertyID] = changeObject.propertyValue;
        changeObject.categoryId = this.category.categoryId;
        changeObject.parentPropertyID = parentPropertyID;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data, parameters);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        this.submitModal.emit($event);
    }
    /**
     * 级联属性的汇总信息
     * @param {?} propItem
     * @param {?} valueObject
     * @return {?}
     */
    _valueStringify(propItem, valueObject) {
        if (!propItem || !propItem.cascadeConfig || !valueObject) {
            return '';
        }
        if (!propItem.cascadeConverter || !propItem.cascadeConverter.convertTo) {
            return JSON.stringify(valueObject);
        }
        return propItem.cascadeConverter.convertTo(valueObject, propItem.cascadeConfig);
    }
    /**
     * @param {?} propItem
     * @return {?}
     */
    _checkCascadeVisible(propItem) {
        if (Object.keys(propItem).indexOf('visible') < 0) {
            return true;
        }
        else {
            return propItem.visible;
        }
    }
    /**
     * @return {?}
     */
    refreshPanel() {
        this.triggerRefreshPanel.emit();
    }
}
PropertyItemListComponent.decorators = [
    { type: Component, args: [{
                selector: 'webide-property-item-list',
                template: "<div *ngFor=\"let propItem of category.properties\">\r\n    <div *ngIf=\"propItem.propertyType != 'cascade'\" class=\"px-2\">\r\n        <webide-property-item (valueChanged)=\"_itemChanged($event)\" (submitModal)=\"_submitModal($event)\"\r\n            [elementValue]=\"data[propItem.propertyID]\" [elementConfig]=\"propItem\"></webide-property-item>\r\n    </div>\r\n\r\n    <farris-panel *ngIf=\"propItem.propertyType == 'cascade' && _checkCascadeVisible(propItem)\"\r\n        [defaultExpand]=\"propItem.isExpand\">\r\n        <farris-panel-item class=\"propertyCascadeItem\" [value]=\"propItem.propertyID\">\r\n            <ng-template #headTempl>\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label pl-2\">\r\n                        <span class=\"farris-label-text\">{{propItem.propertyName}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\" *ngIf=\"!propItem.hideCascadeTitle\">\r\n                        <input type=\"input\" class=\"form-control form-control-sm\" readonly\r\n                            [value]=\"_valueStringify(propItem,data[propItem.propertyID])\">\r\n                    </div>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template #contentTempl>\r\n                <div *ngFor=\"let cascadeItem of propItem.cascadeConfig\" class=\"px-2\">\r\n                    <webide-property-item (valueChanged)=\"_cascadeitemChanged($event,propItem.propertyID)\"\r\n                        (submitModal)=\"__cascadeitemSubmitModal($event, propItem.propertyID)\"\r\n                        [elementValue]=\"data[propItem.propertyID]?data[propItem.propertyID][cascadeItem.propertyID]:''\"\r\n                        [elementConfig]=\"cascadeItem\" (triggerRefreshPanel)=\"refreshPanel()\"></webide-property-item>\r\n                </div>\r\n\r\n            </ng-template>\r\n        </farris-panel-item>\r\n    </farris-panel>\r\n\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".propertyCascadeItem{background-color:transparent!important;border:none!important}.propertyCascadeItem .card-header{background-color:transparent!important;padding:4px 12px!important;color:inherit!important}.propertyCascadeItem .card-header .panel-item-title{width:100%;position:relative;font-size:inherit!important}.propertyCascadeItem .card-header .panel-item-title .farris-input-wrap{margin-left:-5px;margin-right:-5px}.propertyCascadeItem .f-accordion-collapse,.propertyCascadeItem .f-accordion-expand{right:0;left:auto!important;top:6px;color:#6b94ec!important;position:absolute}.propertyCascadeItem .card-body{padding:3px 12px!important;background:rgba(255,255,255,.8);border-radius:8px;margin:4px 8px}"]
            }] }
];
/** @nocollapse */
PropertyItemListComponent.ctorParameters = () => [];
PropertyItemListComponent.propDecorators = {
    category: [{ type: Input }],
    propertyData: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }],
    items: [{ type: ViewChildren, args: [PropertyItemComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyPanelComponent {
    constructor() {
        this.isPersitOpenState = false; // 是否持有面板的隐藏显示状态
        // 是否持有面板的隐藏显示状态
        this.isShowPanel = false; // isPersitOpenState=true时，控制面板是否隐藏显示
        // isPersitOpenState=true时，控制面板是否隐藏显示
        this.closePropertyPanel = new EventEmitter(); // isPersitOpenState=true时，抛出面板的关闭事件
        // 属性类型
        this.propertyData = {}; // 属性值
        // 属性值
        this.propertyChanged = new EventEmitter(); // 属性变更事件
        // 属性变更事件
        this.submitModal = new EventEmitter(); // 模态框属性变更事件
        // 模态框属性变更事件
        this.showCloseBtn = true;
        // 面板标题，为适配国际化
        this.panelTitle = '属性面板';
        this.isOpen = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.width) {
            this.eastDiv.nativeElement.style.width = this.width + 'px';
        }
        else {
            this.eastDiv.nativeElement.style.width = 'inherit';
        }
        if (this.height) {
            this.eastDiv.nativeElement.style.height = this.height + 'px';
        }
        else {
            this.eastDiv.nativeElement.style.height = '100%';
        }
        if (this.isPersitOpenState) {
            this.isOpen = this.isShowPanel;
        }
    }
    /**
     *  更改面板的隐藏显示状态，只有在isPersitOpenState=true时生效
     * @param {?} simpleChanges
     * @return {?}
     */
    ngOnChanges(simpleChanges) {
        if (simpleChanges.isShowPanel && this.isPersitOpenState) {
            this.isOpen = this.isShowPanel;
        }
    }
    /**
     * @return {?}
     */
    refreshPanel() {
        this.itemLists.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.refresh()));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    changeStatus(item) {
        if (this.propertyConfig.length < 2) {
            return;
        }
        if (!item.status || item.status === 'open') {
            item.status = 'closed';
        }
        else {
            item.status = 'open';
        }
    }
    // 隐藏面板
    /**
     * @return {?}
     */
    collapse() {
        // isPersitOpenState=true时,由外部确定状态
        if (!this.isPersitOpenState) {
            this.isOpen = false;
        }
        this.closePropertyPanel.emit();
    }
    /**
     * 抛出属性变更事件
     * @param {?} changeObject
     * @return {?}
     */
    _valueChanged(changeObject) {
        this.propertyChanged.emit(changeObject);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _submitModal($event) {
        this.submitModal.emit($event);
    }
}
PropertyPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-property-panel',
                template: "<div #east [style.display]=\"isOpen?'block':'none'\">\r\n    <div class=\"propertyPanel panel d-flex flex-column\">\r\n\r\n        <div class=\"title d-block\">\r\n            <div class=\"title-label\">\r\n                <span>{{panelTitle|| '\u5C5E\u6027\u9762\u677F'}}</span>\r\n            </div>\r\n            <div class=\"title-actions\">\r\n                <div class=\"monaco-toolbar\">\r\n                    <div class=\"monaco-action-bar animated\">\r\n                        <ul class=\"actions-container\" role=\"toolbar\">\r\n                            <li class=\"action-item\" (click)=\"collapse()\" *ngIf=\"showCloseBtn\">\r\n                                <a class=\"hide-panel\"></a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div #propertyPanel class=\"panel-body\" [style.height]=\"(height - 35) + 'px'\">\r\n            <perfect-scrollbar [config]=\"{suppressScrollX: true}\">\r\n                <ul class=\"property-grid\">\r\n                    <li *ngFor=\"let category of propertyConfig\">\r\n                        <ng-container *ngIf=\"!category.hide\">\r\n                            <span *ngIf=\"!category.hideTitle\"\r\n                                [class]=\"category.status === 'closed' ? 'group-label collapse': 'group-label expand' \"\r\n                                (click)=\"changeStatus(category)\">{{ category.categoryName }}</span>\r\n                            <div [style.display]=\"!category.status || category.status === 'open'?'block':'none'\"\r\n                                class=\"py-1 \">\r\n                                <webide-property-item-list [category]=\"category\" [propertyData]=\"propertyData\"\r\n                                    (valueChanged)=\"_valueChanged($event)\" (submitModal)=\"_submitModal($event)\"\r\n                                    (triggerRefreshPanel)=\"refreshPanel()\"></webide-property-item-list>\r\n                            </div>\r\n                        </ng-container>\r\n                    </li>\r\n                </ul>\r\n            </perfect-scrollbar>\r\n\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [":host{width:inherit;height:inherit}.propertyPanel{width:100%;height:100%;color:rgba(0,0,0,.75);background:#f3f8ff!important;border-color:#d8dbe2!important}.propertyPanel .title{position:relative;background:#d0d8e9!important}.propertyPanel .title>.title-label{line-height:35px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding-left:12px;color:#333}.propertyPanel .title .title-actions{position:absolute;right:10px;top:0;padding-left:35px;height:35px;flex:1;box-sizing:border-box}.propertyPanel .property-grid .group-label{line-height:30px;display:block;padding-left:12px;cursor:pointer;background:#e2e9f6!important;color:#34495e!important}.propertyPanel .panel-body{overflow:auto;height:100%}.propertyPanel .property-grid{list-style:none;margin:0;padding:0}.propertyPanel .action-item{cursor:pointer;display:inline-block;transition:transform 50ms;transition:transform 50ms,-webkit-transform 50ms;position:relative;padding:0}.propertyPanel .action-item .hide-panel{height:35px;display:block;line-height:35px;min-width:28px;color:rgba(66,66,66,.75);background-color:transparent!important;outline:0!important;background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M9.784 8L13 11.217 11.215 13 8.001 9.786 4.785 13 3 11.216l3.214-3.215L3 4.785 4.784 3 8 6.216 11.216 3 13 4.785 9.784 8.001z' fill='%23424242'/%3E%3C/svg%3E\") 50% 50% no-repeat}"]
            }] }
];
/** @nocollapse */
PropertyPanelComponent.ctorParameters = () => [];
PropertyPanelComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    isPersitOpenState: [{ type: Input }],
    isShowPanel: [{ type: Input }],
    closePropertyPanel: [{ type: Output }],
    propertyConfig: [{ type: Input }],
    propertyData: [{ type: Input }],
    propertyChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    showCloseBtn: [{ type: Input }],
    panelTitle: [{ type: Input }],
    eastDiv: [{ type: ViewChild, args: ['east',] }],
    itemLists: [{ type: ViewChildren, args: [PropertyItemListComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyPanelModule {
    constructor() { }
}
PropertyPanelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PropertyItemComponent,
                    PropertyItemListComponent,
                    PropertyPanelComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ModalModule.forRoot(),
                    PopoverModule.forRoot(),
                    PerfectScrollbarModule,
                    FarrisDialogModule,
                    DropDownsModule,
                    InputsModule,
                    DateInputsModule,
                    FarrisPanelModule,
                    NotifyModule.forRoot(),
                ],
                exports: [PropertyPanelComponent],
                entryComponents: [PropertyPanelComponent, PropertyItemComponent]
            },] }
];
/** @nocollapse */
PropertyPanelModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PropertyType, ElementPropertyConfig, PropertyEntity, BeforeOpenModalResult, PropertyPanelComponent, PropertyPanelModule, PropertyItemListComponent as ɵa, PropertyItemComponent as ɵb };

//# sourceMappingURL=farris-ui-property-panel.js.map