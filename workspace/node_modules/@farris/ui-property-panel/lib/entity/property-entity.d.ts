import { Type } from '@angular/core';
/**
 * 属性类型
 */
export declare enum PropertyType {
    string = "string",
    boolean = "boolean",
    number = "number",
    select = "select",
    boolOrExp = "boolOrExp",
    multiSelect = "multiSelect",
    date = "date",
    datetime = "datetime",
    modal = "modal",
    cascade = "cascade"
}
export declare class ElementPropertyConfig {
    categoryId: string;
    categoryName: string;
    hide?: boolean;
    hideTitle?: boolean;
    properties: PropertyEntity[];
    enableCascade?: boolean;
    propertyData?: any;
    parentPropertyID?: string;
    setPropertyRelates?: (changeObject: any, propertyData: any, parameters?: any) => void;
}
export declare class PropertyEntity {
    propertyID: string;
    propertyName: string;
    propertyType: string;
    description?: string;
    defaultValue?: any;
    readonly?: boolean;
    visible?: boolean;
    iterator?: KeyMap[];
    min?: any;
    max?: any;
    numberFormat?: string;
    decimals?: number;
    refreshPanelAfterChanged?: boolean;
    multiSelectDataType?: string;
    /**
     * 级联属性
     */
    cascadeConfig?: PropertyEntity[];
    isExpand?: boolean;
    hideCascadeTitle?: boolean;
    cascadeConverter?: TypeConverter;
    [propName: string]: any;
    /**
     * 模态框属性配置
     */
    editor?: Type<any>;
    editorParams?: any;
    converter?: TypeConverter;
    showClearButton?: boolean;
    beforeOpenModal?(): BeforeOpenModalResult;
    afterClickClearButton?(value: any): void;
}
export interface TypeConverter {
    convertTo(data: any, params?: any): string;
}
export interface KeyMap {
    key: any;
    value: any;
}
export declare class BeforeOpenModalResult {
    result: boolean;
    message?: string;
}
