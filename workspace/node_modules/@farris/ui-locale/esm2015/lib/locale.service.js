/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonUtils } from '@farris/ui-common';
import { Injectable, LOCALE_ID, Inject, InjectionToken, Optional } from '@angular/core';
import { FARRIS_LOCALES } from './locales';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-common";
/** @type {?} */
export const FARRIS_LOCAL_CUSTOM_DATA = new InjectionToken('自定义语言数据， 格式：{ "languageCode": { "name": { "key": "value" } } }');
export class LocaleService {
    /**
     * @param {?} localeId
     * @param {?} utils
     * @param {?} localeData
     */
    constructor(localeId, utils, localeData) {
        this.localeId = localeId;
        this.utils = utils;
        this.localeData = localeData;
        if (!localeId) {
            localeId = 'zh-CHS';
        }
        // 合并语言资源
        this.setLocaleData(localeData);
    }
    /**
     * 获取语言资源
     *  path : 资源路径，如:
     *  ```
     *  getResources('zh-CHS') // 返回所有中文语言资源
     *  getResources('zh-CHS.lookup') // 返回所有中文下帮助的资源
     *  ```
     * @param {?=} path
     * @return {?}
     */
    getResources(path = '') {
        if (path) {
            return this.utils.getValue(path, FARRIS_LOCALES);
        }
        return FARRIS_LOCALES;
    }
    /**
     * @param {?} ctrlName
     * @return {?}
     */
    getComponentOptions(ctrlName) {
        return this.langData[ctrlName];
    }
    /**
     * @param {?} propertyName
     * @return {?}
     */
    getValue(propertyName) {
        /** @type {?} */
        const val = this.utils.getValue(propertyName, this.langData);
        if (val) {
            return val;
        }
        else {
            // console.warn(`Can\'t find language Data for the ${propertyName}`);
            return '';
        }
    }
    /**
     * 合并现有的多语资源
     * @param {?=} localeData
     * @return {?}
     */
    setLocaleData(localeData = null) {
        if (localeData) {
            // 解析得到提供的语言编码
            /** @type {?} */
            const langCodes = Object.keys(localeData);
            langCodes.forEach((/**
             * @param {?} code
             * @return {?}
             */
            (code) => {
                /** @type {?} */
                const resName = Object.keys(localeData[code]);
                resName.forEach((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => {
                    this.appendLanguageResource(k, localeData[code][k], code);
                }));
            }));
        }
        this.langData = FARRIS_LOCALES[this.localeId];
        if (!this.langData) {
            this.langData = FARRIS_LOCALES['zh-CHS'];
        }
    }
    /**
     * @private
     * @param {?} key
     * @param {?} data
     * @param {?=} lang
     * @return {?}
     */
    appendLanguageResource(key, data, lang = this.localeId) {
        if (!lang) {
            this.langData[key] = this.langData[key] || {};
            this.langData[key] = Object.assign(this.langData[key], data || {});
        }
        else {
            FARRIS_LOCALES[lang][key] = data || {};
        }
    }
}
LocaleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocaleService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: CommonUtils },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FARRIS_LOCAL_CUSTOM_DATA,] }] }
];
/** @nocollapse */ LocaleService.ngInjectableDef = i0.defineInjectable({ factory: function LocaleService_Factory() { return new LocaleService(i0.inject(i0.LOCALE_ID), i0.inject(i1.CommonUtils), i0.inject(FARRIS_LOCAL_CUSTOM_DATA, 8)); }, token: LocaleService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LocaleService.prototype.langData;
    /** @type {?} */
    LocaleService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    LocaleService.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    LocaleService.prototype.localeData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxvY2FsZS8iLCJzb3VyY2VzIjpbImxpYi9sb2NhbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxXQUFXLENBQUM7Ozs7QUFFM0MsTUFBTSxPQUFPLHdCQUF3QixHQUFHLElBQUksY0FBYyxDQUFDLGdFQUFnRSxDQUFDO0FBSTVILE1BQU0sT0FBTyxhQUFhOzs7Ozs7SUFJdEIsWUFBc0MsUUFBZ0IsRUFBVSxLQUFrQixFQUNoQixVQUFlO1FBRDNDLGFBQVEsR0FBUixRQUFRLENBQVE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2hCLGVBQVUsR0FBVixVQUFVLENBQUs7UUFDN0UsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDdkI7UUFFRCxTQUFTO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7Ozs7OztJQVNELFlBQVksQ0FBRSxJQUFJLEdBQUcsRUFBRTtRQUNuQixJQUFJLElBQUksRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxRQUFRO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxZQUFvQjs7Y0FDbkIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzVELElBQUksR0FBRyxFQUFFO1lBQ0wsT0FBTyxHQUFHLENBQUM7U0FDZDthQUFNO1lBQ0gscUVBQXFFO1lBQ3JFLE9BQU8sRUFBRSxDQUFDO1NBQ2I7SUFDTCxDQUFDOzs7Ozs7SUFHRCxhQUFhLENBQUMsVUFBVSxHQUFHLElBQUk7UUFDM0IsSUFBSSxVQUFVLEVBQUU7OztrQkFFTixTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDekMsU0FBUyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQVksRUFBRSxFQUFFOztzQkFDekIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QyxPQUFPLENBQUMsT0FBTzs7OztnQkFBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzlELENBQUMsRUFBQyxDQUFDO1lBQ1AsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7Ozs7Ozs7O0lBRU8sc0JBQXNCLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxPQUFlLElBQUksQ0FBQyxRQUFRO1FBQy9FLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN0RTthQUFNO1lBQ0gsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7U0FDMUM7SUFDTCxDQUFDOzs7WUF2RUosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O3lDQUtnQixNQUFNLFNBQUMsU0FBUztZQWJ4QixXQUFXOzRDQWNILFFBQVEsWUFBSSxNQUFNLFNBQUMsd0JBQXdCOzs7OztJQUh4RCxpQ0FBYzs7SUFFRixpQ0FBMEM7Ozs7O0lBQUUsOEJBQTBCOzs7OztJQUN0RSxtQ0FBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgTE9DQUxFX0lELCBJbmplY3QsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgRkFSUklTX0xPQ0FMRVMgfSBmcm9tICcuL2xvY2FsZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZBUlJJU19MT0NBTF9DVVNUT01fREFUQSA9IG5ldyBJbmplY3Rpb25Ub2tlbign6Ieq5a6a5LmJ6K+t6KiA5pWw5o2u77yMIOagvOW8j++8mnsgXCJsYW5ndWFnZUNvZGVcIjogeyBcIm5hbWVcIjogeyBcImtleVwiOiBcInZhbHVlXCIgfSB9IH0nKTtcclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2NhbGVTZXJ2aWNlIHtcclxuXHJcbiAgICBsYW5nRGF0YTogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTE9DQUxFX0lEKSBwdWJsaWMgbG9jYWxlSWQ6IHN0cmluZywgcHJpdmF0ZSB1dGlsczogQ29tbW9uVXRpbHMsXHJcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEZBUlJJU19MT0NBTF9DVVNUT01fREFUQSkgcHJpdmF0ZSBsb2NhbGVEYXRhOiBhbnkpIHtcclxuICAgICAgICBpZiAoIWxvY2FsZUlkKSB7XHJcbiAgICAgICAgICAgIGxvY2FsZUlkID0gJ3poLUNIUyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlkIjlubbor63oqIDotYTmupBcclxuICAgICAgICB0aGlzLnNldExvY2FsZURhdGEobG9jYWxlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPluivreiogOi1hOa6kFxyXG4gICAgICogIHBhdGggOiDotYTmupDot6/lvoTvvIzlpoI6XHJcbiAgICAgKiAgYGBgXHJcbiAgICAgKiAgZ2V0UmVzb3VyY2VzKCd6aC1DSFMnKSAvLyDov5Tlm57miYDmnInkuK3mlofor63oqIDotYTmupBcclxuICAgICAqICBnZXRSZXNvdXJjZXMoJ3poLUNIUy5sb29rdXAnKSAvLyDov5Tlm57miYDmnInkuK3mlofkuIvluK7liqnnmoTotYTmupBcclxuICAgICAqICBgYGBcclxuICAgICAqL1xyXG4gICAgZ2V0UmVzb3VyY2VzKCBwYXRoID0gJycpIHtcclxuICAgICAgICBpZiAocGF0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51dGlscy5nZXRWYWx1ZShwYXRoLCBGQVJSSVNfTE9DQUxFUyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBGQVJSSVNfTE9DQUxFUztcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb21wb25lbnRPcHRpb25zKGN0cmxOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFuZ0RhdGFbY3RybE5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZhbHVlKHByb3BlcnR5TmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy51dGlscy5nZXRWYWx1ZShwcm9wZXJ0eU5hbWUsIHRoaXMubGFuZ0RhdGEpO1xyXG4gICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oYENhblxcJ3QgZmluZCBsYW5ndWFnZSBEYXRhIGZvciB0aGUgJHtwcm9wZXJ0eU5hbWV9YCk7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWQiOW5tueOsOacieeahOWkmuivrei1hOa6kCAqL1xyXG4gICAgc2V0TG9jYWxlRGF0YShsb2NhbGVEYXRhID0gbnVsbCkge1xyXG4gICAgICAgIGlmIChsb2NhbGVEYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIOino+aekOW+l+WIsOaPkOS+m+eahOivreiogOe8lueggVxyXG4gICAgICAgICAgICBjb25zdCBsYW5nQ29kZXMgPSBPYmplY3Qua2V5cyhsb2NhbGVEYXRhKTtcclxuICAgICAgICAgICAgbGFuZ0NvZGVzLmZvckVhY2goKGNvZGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzTmFtZSA9IE9iamVjdC5rZXlzKGxvY2FsZURhdGFbY29kZV0pO1xyXG4gICAgICAgICAgICAgICAgcmVzTmFtZS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTGFuZ3VhZ2VSZXNvdXJjZShrLCBsb2NhbGVEYXRhW2NvZGVdW2tdLCBjb2RlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGFuZ0RhdGEgPSBGQVJSSVNfTE9DQUxFU1t0aGlzLmxvY2FsZUlkXTtcclxuICAgICAgICBpZiAoIXRoaXMubGFuZ0RhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5sYW5nRGF0YSA9IEZBUlJJU19MT0NBTEVTWyd6aC1DSFMnXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhcHBlbmRMYW5ndWFnZVJlc291cmNlKGtleTogc3RyaW5nLCBkYXRhOiBhbnksIGxhbmc6IHN0cmluZyA9IHRoaXMubG9jYWxlSWQpIHtcclxuICAgICAgICBpZiAoIWxhbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5sYW5nRGF0YVtrZXldID0gdGhpcy5sYW5nRGF0YVtrZXldIHx8IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmxhbmdEYXRhW2tleV0gPSBPYmplY3QuYXNzaWduKHRoaXMubGFuZ0RhdGFba2V5XSwgZGF0YSB8fCB7fSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgRkFSUklTX0xPQ0FMRVNbbGFuZ11ba2V5XSA9IGRhdGEgfHwge307XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==