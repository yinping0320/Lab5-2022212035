/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, Input } from '@angular/core';
var FarrisSectionToolbarDirective = /** @class */ (function () {
    function FarrisSectionToolbarDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionToolbarDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionToolbar]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionToolbarDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionToolbarDirective.propDecorators = {
        toolbarCls: [{ type: Input }]
    };
    return FarrisSectionToolbarDirective;
}());
export { FarrisSectionToolbarDirective };
if (false) {
    /** @type {?} */
    FarrisSectionToolbarDirective.prototype.toolbarCls;
    /** @type {?} */
    FarrisSectionToolbarDirective.prototype.templateRef;
}
var FarrisSectionViewChangeDirective = /** @class */ (function () {
    function FarrisSectionViewChangeDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionViewChangeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionViewChange]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionViewChangeDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionViewChangeDirective.propDecorators = {
        viewChangeCls: [{ type: Input }]
    };
    return FarrisSectionViewChangeDirective;
}());
export { FarrisSectionViewChangeDirective };
if (false) {
    /** @type {?} */
    FarrisSectionViewChangeDirective.prototype.viewChangeCls;
    /** @type {?} */
    FarrisSectionViewChangeDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi10b29sYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktc2VjdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmUvc2VjdGlvbi10b29sYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlEO0lBTUUsdUNBQ1MsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBRXRDLENBQUM7O2dCQVRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNuQzs7OztnQkFKbUIsV0FBVzs7OzZCQU81QixLQUFLOztJQUtSLG9DQUFDO0NBQUEsQUFWRCxJQVVDO1NBUFksNkJBQTZCOzs7SUFFeEMsbURBQTRCOztJQUUxQixvREFBb0M7O0FBS3hDO0lBTUUsMENBQ1MsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBRXRDLENBQUM7O2dCQVRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0Qzs7OztnQkFoQm1CLFdBQVc7OztnQ0FtQjVCLEtBQUs7O0lBS1IsdUNBQUM7Q0FBQSxBQVZELElBVUM7U0FQWSxnQ0FBZ0M7OztJQUUzQyx5REFBK0I7O0lBRTdCLHVEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmYXJyaXNTZWN0aW9uVG9vbGJhcl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzU2VjdGlvblRvb2xiYXJEaXJlY3RpdmUge1xyXG5cclxuICBASW5wdXQoKSB0b29sYmFyQ2xzOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT5cclxuICApIHsgXHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmYXJyaXNTZWN0aW9uVmlld0NoYW5nZV0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzU2VjdGlvblZpZXdDaGFuZ2VEaXJlY3RpdmUge1xyXG5cclxuICBASW5wdXQoKSB2aWV3Q2hhbmdlQ2xzOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT5cclxuICApIHsgXHJcbiAgfVxyXG59Il19