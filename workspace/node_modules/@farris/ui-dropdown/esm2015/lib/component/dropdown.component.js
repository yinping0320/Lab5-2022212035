/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, ContentChild, TemplateRef, Output, EventEmitter, Renderer2 } from '@angular/core';
export class FarrisDropdownComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // 下拉框类型
        // tslint:disable-next-line:no-inferrable-types
        this.type = 'primary';
        // 点击列表项目后是否关闭列表项
        // tslint:disable-next-line:no-input-rename
        // tslint:disable-next-line:no-inferrable-types
        this.hideOnClick = true;
        // 按钮组
        // tslint:disable-next-line:no-input-rename
        this.splitButton = false;
        // 列表显示位置
        this.position = 'bottom';
        // 列表项数据
        this.model = [
            { label: '项目一', value: 'asdasd' },
            { label: '项目二', value: 'asdasd' },
            { label: '项目三', value: 'asdasd' }
        ];
        // 按钮分组之后  左边按钮事件
        // tslint:disable-next-line:no-output-rename
        this.leftClick = new EventEmitter();
        this.select = new EventEmitter();
        // 下拉列表显示或者隐藏触发的事件
        // tslint:disable-next-line:no-output-rename
        this.visibleChange = new EventEmitter();
        // 列表项的显示与否
        this.show = false;
    }
    /**
     * @return {?}
     */
    get width() {
        // 对各个单位进行处理
        return this._width;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    set width(width) {
        this._width = this.resolveSize(width);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menu = this.el.nativeElement.querySelector('.dropdown-menu');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
    // 点击列表项显示与否
    /**
     * @param {?=} event
     * @return {?}
     */
    showDropMenu(event) {
        if (this.hover) {
            return;
        }
        if (event) {
            event.stopPropagation();
        }
        this.show = !this.show;
        this.visibleChange.emit();
        this.globalListenFunc = this.renderer.listen('document', 'click', (/**
         * @return {?}
         */
        () => {
            this.closeDropMenu();
        }));
        // 如果不设置hide-on-click,则说明点击下拉之后下拉不消失
        if (!this.hideOnClick) {
            this.menuListenFunc = this.renderer.listen(this.menu, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            e => {
                e.stopPropagation();
            }));
        }
    }
    // 点击元素之外  列表项消失
    /**
     * @return {?}
     */
    closeDropMenu() {
        if (this.hover) {
            return;
        }
        this.show = false;
        this.visibleChange.emit();
        // 解除事件绑定
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
        if (this.menuListenFunc) {
            this.menuListenFunc();
        }
    }
    // hover 实现
    /**
     * @return {?}
     */
    hoverDropdown() {
        if (!this.hover) {
            return;
        }
        this.show = !this.show;
        this.visibleChange.emit();
    }
    /**
     * 弹出事件
     * @param {?} model
     * @return {?}
     */
    selectItem(model) {
        this.select.emit(model);
    }
    /**
     * @return {?}
     */
    leftButtonClick() {
        this.leftClick.emit();
    }
    /**
     * @param {?} size
     * @return {?}
     */
    resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size)
            ? `${parseInt(size, 10)}${size.match(regex)[0]}`
            : `${size}px`;
    }
}
FarrisDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-dropdown',
                template: `
        <div
            class="farris-dropdown btn-group"
            [class.dropup]="position === 'top'"
            [class.dropdown]="position === 'bottom'"
            [class.dropleft]="position === 'left'"
            [class.dropright]="position === 'right'"
            [style.width]="width"
        >
            <span
                [class.btn]="!nest"
                [class.dropdown-item]="nest"
                [class.btn-lg]="size === 'large'"
                [class.btn-sm]="size === 'small'"
                [class.btn-primary]="type === 'primary'"
                [class.btn-success]="type === 'success'"
                [class.btn-warning]="type === 'warning'"
                [class.btn-danger]="type === 'danger'"
                [class.btn-info]="type === 'info'"
                (click)="leftButtonClick()"
                style="width:100%"
                *ngIf="splitButton"
                >{{ title }}</span
            >
            <span
                class="dropdown-toggle"
                [class.btn]="!nest"
                [class.dropdown-item]="nest"
                [class.dropdown-toggle-split]="splitButton"
                [class.btn-lg]="size === 'large'"
                [class.btn-sm]="size === 'small'"
                [class.btn-primary]="type === 'primary'"
                [class.btn-success]="type === 'success'"
                [class.btn-warning]="type === 'warning'"
                [class.btn-danger]="type === 'danger'"
                [class.btn-info]="type === 'info'"
                [class.btn-secondary]="type === 'secondary'"
                (click)="showDropMenu($event)"
                (mouseenter)="hoverDropdown()"
                (mouseleave)="hoverDropdown()"
                style="width:100%"
            >
                <span class="sr-only" *ngIf="splitButton"></span>
                {{ splitButton ? '' : title }}
            </span>
            <div class="dropdown-menu" [class.show]="show">
                <ng-template [ngTemplateOutlet]="dropdownTempl"></ng-template>
                <farris-dropdown-item
                    *ngFor="let item of model"
                    [model]="item"
                    (select)="selectItem($event)"
                >
                </farris-dropdown-item>
            </div>
        </div>
    `
            }] }
];
/** @nocollapse */
FarrisDropdownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisDropdownComponent.propDecorators = {
    nest: [{ type: Input }],
    width: [{ type: Input }],
    title: [{ type: Input }],
    hover: [{ type: Input }],
    size: [{ type: Input }],
    type: [{ type: Input }],
    hideOnClick: [{ type: Input, args: ['hide-on-click',] }],
    splitButton: [{ type: Input, args: ['split-button',] }],
    position: [{ type: Input }],
    model: [{ type: Input }],
    dropdownTempl: [{ type: ContentChild, args: ['dropdownTempl',] }],
    leftClick: [{ type: Output, args: ['left-click',] }],
    select: [{ type: Output }],
    visibleChange: [{ type: Output, args: ['visible-change',] }]
};
if (false) {
    /** @type {?} */
    FarrisDropdownComponent.prototype.nest;
    /** @type {?} */
    FarrisDropdownComponent.prototype._width;
    /** @type {?} */
    FarrisDropdownComponent.prototype._height;
    /** @type {?} */
    FarrisDropdownComponent.prototype.title;
    /** @type {?} */
    FarrisDropdownComponent.prototype.hover;
    /** @type {?} */
    FarrisDropdownComponent.prototype.size;
    /** @type {?} */
    FarrisDropdownComponent.prototype.type;
    /** @type {?} */
    FarrisDropdownComponent.prototype.hideOnClick;
    /** @type {?} */
    FarrisDropdownComponent.prototype.splitButton;
    /** @type {?} */
    FarrisDropdownComponent.prototype.position;
    /** @type {?} */
    FarrisDropdownComponent.prototype.model;
    /** @type {?} */
    FarrisDropdownComponent.prototype.dropdownTempl;
    /** @type {?} */
    FarrisDropdownComponent.prototype.leftClick;
    /** @type {?} */
    FarrisDropdownComponent.prototype.select;
    /** @type {?} */
    FarrisDropdownComponent.prototype.visibleChange;
    /** @type {?} */
    FarrisDropdownComponent.prototype.dropdownButton;
    /** @type {?} */
    FarrisDropdownComponent.prototype.menu;
    /** @type {?} */
    FarrisDropdownComponent.prototype.show;
    /** @type {?} */
    FarrisDropdownComponent.prototype.globalListenFunc;
    /** @type {?} */
    FarrisDropdownComponent.prototype.menuListenFunc;
    /**
     * @type {?}
     * @private
     */
    FarrisDropdownComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisDropdownComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,