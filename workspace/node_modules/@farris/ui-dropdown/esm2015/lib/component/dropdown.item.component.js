/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
export class FarrisDropdownItemComponent {
    constructor() {
        this.select = new EventEmitter();
    }
    /**
     * @return {?}
     */
    selectItem() {
        if (this.model.disabled) {
            return;
        }
        this.select.emit(this.model);
    }
}
FarrisDropdownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-dropdown-item',
                template: `
        <div class="dropdown-divider" *ngIf="model.divide"></div>
        <a
            class="dropdown-item"
            [class.active]="model.active"
            [class.disabled]="model.disabled"
            href="javascript:void(0)"
            (click)="selectItem()"
            >{{ model.label }}</a
        >
    `
            }] }
];
FarrisDropdownItemComponent.propDecorators = {
    model: [{ type: Input }],
    select: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FarrisDropdownItemComponent.prototype.model;
    /** @type {?} */
    FarrisDropdownItemComponent.prototype.select;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRyb3Bkb3duLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9kcm9wZG93bi5pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWdCdkUsTUFBTSxPQUFPLDJCQUEyQjtJQWR4QztRQWdCYyxXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFPbEUsQ0FBQzs7OztJQU5HLFVBQVU7UUFDTixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ3JCLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7WUF0QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7OztLQVVUO2FBQ0o7OztvQkFFSSxLQUFLO3FCQUNMLE1BQU07Ozs7SUFEUCw0Q0FBNkI7O0lBQzdCLDZDQUE4RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERyb3Bkb3duSXRlbSB9IGZyb20gJy4vZHJvcGRvd24uaXRlbS5wcm9wcyc7XHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtZHJvcGRvd24taXRlbScsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCIgKm5nSWY9XCJtb2RlbC5kaXZpZGVcIj48L2Rpdj5cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgICBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIlxyXG4gICAgICAgICAgICBbY2xhc3MuYWN0aXZlXT1cIm1vZGVsLmFjdGl2ZVwiXHJcbiAgICAgICAgICAgIFtjbGFzcy5kaXNhYmxlZF09XCJtb2RlbC5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICAgICAoY2xpY2spPVwic2VsZWN0SXRlbSgpXCJcclxuICAgICAgICAgICAgPnt7IG1vZGVsLmxhYmVsIH19PC9hXHJcbiAgICAgICAgPlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzRHJvcGRvd25JdGVtQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpIG1vZGVsOiBEcm9wZG93bkl0ZW07XHJcbiAgICBAT3V0cHV0KCkgc2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgc2VsZWN0SXRlbSgpIHtcclxuICAgICAgICBpZiAodGhpcy5tb2RlbC5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VsZWN0LmVtaXQodGhpcy5tb2RlbCk7XHJcbiAgICB9XHJcbn1cclxuIl19