/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener, ElementRef, Input, } from "@angular/core";
import { FDropdownDirective } from "./f-dropdown.directive";
export class FDropdownToggleDirective {
    /**
     * @param {?} dropdown
     * @param {?} elementRef
     */
    constructor(dropdown, elementRef) {
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this._disabled = false;
        this.haspopup = true;
        this.nativeEle = null;
        dropdown.toggleElement = elementRef.nativeElement;
        this.nativeEle = elementRef.nativeElement;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (this.dropdown.isSubDP && this.dropdown.isOpen) {
                if (this.nativeEle.className.indexOf("active") < 0) {
                    this.nativeEle.className += " active";
                }
            }
            else {
                if (this.nativeEle.className.indexOf("active") > -1) {
                    this.nativeEle.className = this.nativeEle.className.replace(" active", " ");
                }
            }
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dpDisabled(value) {
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    get disableCls() {
        return this._disabled;
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onclick(ev) {
        if (this._disabled) {
            return;
        }
        if (this.dropdown.isSubDP) {
            ev.stopImmediatePropagation();
        }
        this.dropdown.toggle();
    }
}
FDropdownToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[fDropdownToggle]",
            },] }
];
/** @nocollapse */
FDropdownToggleDirective.ctorParameters = () => [
    { type: FDropdownDirective },
    { type: ElementRef }
];
FDropdownToggleDirective.propDecorators = {
    dpDisabled: [{ type: Input }],
    disableCls: [{ type: HostBinding, args: ["class.disabled",] }],
    haspopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
    onclick: [{ type: HostListener, args: ["click", ["$event"],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype._disabled;
    /** @type {?} */
    FDropdownToggleDirective.prototype.haspopup;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.nativeEle;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.dropdown;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kcm9wZG93bi8iLCJzb3VyY2VzIjpbImxpYi9mLWRyb3Bkb3duLXRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBRVQsV0FBVyxFQUNYLFlBQVksRUFDWixVQUFVLEVBRVYsS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBSzVELE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBdUJqQyxZQUNZLFFBQTRCLEVBQzVCLFVBQXNCO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQW9CO1FBQzVCLGVBQVUsR0FBVixVQUFVLENBQVk7UUF4QjFCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFVUyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBVzNDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFLckIsUUFBUSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEtBQWMsRUFBRSxFQUFFO1lBQ3RELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Z0JBQy9DLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDaEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDO2lCQUN6QzthQUNKO2lCQUFNO2dCQUNILElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNqRCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQ3ZELFNBQVMsRUFDVCxHQUFHLENBQ04sQ0FBQztpQkFDTDthQUNKO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQXpDRCxJQUNJLFVBQVUsQ0FBQyxLQUFjO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFDRCxJQUNJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFJRCxPQUFPLENBQUMsRUFBYztRQUNsQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsT0FBTztTQUNWO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUN2QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztTQUNqQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7O1lBeEJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2FBQ2hDOzs7O1lBSlEsa0JBQWtCO1lBSnZCLFVBQVU7Ozt5QkFXVCxLQUFLO3lCQUlMLFdBQVcsU0FBQyxnQkFBZ0I7dUJBSzVCLFdBQVcsU0FBQyxvQkFBb0I7c0JBQ2hDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7SUFYakMsNkNBQTBCOztJQVUxQiw0Q0FBbUQ7Ozs7O0lBV25ELDZDQUF5Qjs7Ozs7SUFFckIsNENBQW9DOzs7OztJQUNwQyw4Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgSG9zdCxcclxuICAgIEhvc3RCaW5kaW5nLFxyXG4gICAgSG9zdExpc3RlbmVyLFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIFJlbmRlcmVyMixcclxuICAgIElucHV0LFxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZEcm9wZG93bkRpcmVjdGl2ZSB9IGZyb20gXCIuL2YtZHJvcGRvd24uZGlyZWN0aXZlXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcIltmRHJvcGRvd25Ub2dnbGVdXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRHJvcGRvd25Ub2dnbGVEaXJlY3RpdmUge1xyXG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgZHBEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBASG9zdEJpbmRpbmcoXCJjbGFzcy5kaXNhYmxlZFwiKVxyXG4gICAgZ2V0IGRpc2FibGVDbHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0QmluZGluZyhcImF0dHIuYXJpYS1oYXNwb3B1cFwiKSBoYXNwb3B1cCA9IHRydWU7XHJcbiAgICBASG9zdExpc3RlbmVyKFwiY2xpY2tcIiwgW1wiJGV2ZW50XCJdKVxyXG4gICAgb25jbGljayhldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRyb3Bkb3duLmlzU3ViRFApIHtcclxuICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZHJvcGRvd24udG9nZ2xlKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG5hdGl2ZUVsZSA9IG51bGw7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGRyb3Bkb3duOiBGRHJvcGRvd25EaXJlY3RpdmUsXHJcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmXHJcbiAgICApIHtcclxuICAgICAgICBkcm9wZG93bi50b2dnbGVFbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMubmF0aXZlRWxlID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuZHJvcGRvd24uZ2V0T3BlblN0YXRlKCkuc3Vic2NyaWJlKChzdGF0ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kcm9wZG93bi5pc1N1YkRQICYmIHRoaXMuZHJvcGRvd24uaXNPcGVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lLmluZGV4T2YoXCJhY3RpdmVcIikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lICs9IFwiIGFjdGl2ZVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmF0aXZlRWxlLmNsYXNzTmFtZS5pbmRleE9mKFwiYWN0aXZlXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUgPSB0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCIgYWN0aXZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==