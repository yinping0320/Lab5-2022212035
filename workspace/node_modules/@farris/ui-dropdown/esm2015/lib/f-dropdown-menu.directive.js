/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ElementRef, Input, } from "@angular/core";
import { CommonUtils, OverLayHiddenService } from "@farris/ui-common";
import { debounceTime } from "rxjs/operators";
import { FDropdownDirective } from "./f-dropdown.directive";
export class FDropdownMenuDirective {
    /**
     * @param {?} elementRef
     * @param {?} dropdown
     */
    constructor(elementRef, dropdown) {
        this.elementRef = elementRef;
        this.dropdown = dropdown;
        this._docRect = { width: 0, height: 0 };
        this.showDropdownMenu = true;
        // 内部使用，在不变更依赖的情况下，触发改变
        this.dpIsOpen = false;
        this.overLayService = null;
        this.overLayService = new OverLayHiddenService();
        this.commonUtils = new CommonUtils();
        this.dropdown.getOpenState().pipe(debounceTime(50)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            /** @type {?} */
            const ddmel = this.dropdown.getNativeElement();
            this.dpIsOpen = this.dropdown.isOpen;
            if (this.issubMenu()) {
                if (state && !this.dpIsOpen && this.elementRef.nativeElement.className.indexOf("show") < 0) {
                    this.dpIsOpen = true;
                }
                /** @type {?} */
                const dropdownMenus = this.dropdown.getNativeElement().closest('.dropdown-menu');
                if (dropdownMenus) {
                    /** @type {?} */
                    const showMenus = dropdownMenus.querySelectorAll('.show');
                    showMenus.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    (element) => {
                        element.classList.remove('show');
                        element.style.cssText = '';
                    }));
                }
            }
            if (this.dpIsOpen) {
                // 注册鼠标滚轮，点击事件，用于隐藏Panel
                this.overLayService.registerMouseEvent(ddmel, (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const tar = (/** @type {?} */ (e.target));
                    /** @type {?} */
                    var classList = Array.from(tar.classList || []);
                    if (classList.includes('dropdown-toggle') || tar.closest('.dropdown-item') || classList.includes("dropdown-item") ||
                        (this.dropdown.getNativeElement().contains(tar) && e.type !== "mousewheel") || this.elementRef.nativeElement.contains(tar)) {
                        return;
                    }
                    this.dpIsOpen = false;
                    this.dropdown.close(false);
                    this.openStateChange();
                }));
            }
            else {
                this.dropdown.close(false);
                this.overLayService.destory(ddmel);
            }
            this.openStateChange();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() { }
    /**
     * @private
     * @param {?} pment
     * @return {?}
     */
    getRealPlacement(pment) {
        /** @type {?} */
        var result = "bottom-right";
        switch (pment) {
            case "top":
                result = "top-right";
                break;
            case "left":
                result = "left-bottom";
                break;
            case "right":
                result = "right-bottom";
                break;
            case "bottom":
                result = "bottom-right";
                break;
            default:
                result = pment;
        }
        return result;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @return {?}
     */
    openStateChange() {
        if (this.dpIsOpen) {
            if (this.elementRef.nativeElement.className.indexOf("show") < 0) {
                document.body.style.overflow = 'hidden';
                this.elementRef.nativeElement.style.visibility = 'hidden';
                this.elementRef.nativeElement.className += " show";
                if (this.dropdown.needToCalculate()) {
                    this._docRect = this.dropdown.getRectifyReferenceEl();
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.changeDirection();
                    document.body.style.overflow = '';
                    this.elementRef.nativeElement.style.visibility = 'visible';
                }), 0);
            }
        }
        else {
            if (this.elementRef.nativeElement.className.indexOf("show") > -1) {
                this.elementRef.nativeElement.className = this.elementRef.nativeElement.className.replace(' show', ' ');
                this.elementRef.nativeElement.style.cssText = '';
            }
            /** @type {?} */
            const submenu = this.elementRef.nativeElement.querySelectorAll('.dropdown-menu');
            if (submenu && submenu.length) {
                submenu.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    element.classList.remove('show');
                    element.style.cssText = '';
                }));
            }
            /** @type {?} */
            const showItem = this.elementRef.nativeElement.querySelector('.show');
            if (showItem) {
                showItem.classList.remove('show');
            }
            /** @type {?} */
            const activeItem = this.elementRef.nativeElement.querySelector('.active');
            if (activeItem) {
                activeItem.classList.remove('active');
            }
            this.dropdown['_internalOpen'] = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeDirection() {
        // if (this.dropdown.needToCalculate()) {
        //     const rect = this.elementRef.nativeElement.getBoundingClientRect();
        //     let placement = this.dropdown.placement;
        //     let newplacement = this.getRealPlacement(placement);
        //     placement = newplacement;
        //     //
        //     if (
        //         newplacement.indexOf("right") > -1 &&
        //         rect.right > this._docRect.width
        //     ) {
        //         placement = placement.replace("right", "left");
        //     }
        //     if (
        //         newplacement.indexOf("left") > -1 &&
        //         rect.left - rect.width < 0
        //     ) {
        //         placement = placement.replace("left", "right");
        //     }
        //     if (
        //         newplacement.indexOf("bottom") > -1 &&
        //         rect.bottom > this._docRect.height
        //     ) {
        //         placement = placement.replace("down", "up");
        //     }
        //     if (
        //         newplacement.indexOf("up") > -1 &&
        //         rect.bottom - rect.height < 0
        //     ) {
        //         placement = placement.replace("up", "bottom");
        //     }
        //     if (newplacement !== this.dropdown.placement) {
        //         this.dropdown.placement = newplacement;
        //     }
        //     if (placement !== newplacement) {
        //         this.dropdown.placement = placement;
        //     }
        //     this.dropdown.resetCalculate(false);
        // }
        this.setMenuPanelPosition();
    }
    /**
     * @private
     * @return {?}
     */
    issubMenu() {
        /** @type {?} */
        const dd = this.dropdown.getNativeElement();
        return dd.className.indexOf('dropdown-submenu') > -1 || dd.closest('.dropdown-submenu') || dd.classList.contains('dropright');
    }
    /**
     * @private
     * @return {?}
     */
    setMenuPanelPosition() {
        /** @type {?} */
        const parentMenuPanel = this.dropdown.getNativeElement();
        const { height, left, top, width } = parentMenuPanel.getBoundingClientRect();
        const { marginTop: menuMt, marginBottom: menuMb } = getComputedStyle(this.elementRef.nativeElement);
        const { width: pw, height: ph } = this.elementRef.nativeElement.getBoundingClientRect();
        /** @type {?} */
        let _maxHeight = 0;
        /** @type {?} */
        let tMenuMargin = Math.ceil(parseFloat(menuMt)) + Math.ceil(parseFloat(menuMb));
        /** @type {?} */
        let _top = top + height;
        /** @type {?} */
        let _left = left;
        if (window.innerHeight - top - height - tMenuMargin < ph) {
            _top = top - ph;
            if (_top < 0) {
                //当前的界面容不下menu上的按钮，限制menu的高度
                _top = 10;
                _maxHeight = top - _top - tMenuMargin;
            }
        }
        else {
        }
        if (window.innerWidth - left - width < pw) {
            _left = left - pw + width;
        }
        if (!this.issubMenu()) {
            document.body.append(this.elementRef.nativeElement);
            this.dropdown.appendMenuEl(this.elementRef.nativeElement);
            this.elementRef.nativeElement.style.cssText = `position:fixed;bottom:unset;left:${_left}px !important;top:${_top}px !important;right: unset;max-height:${_maxHeight ? _maxHeight + 'px;overflow:auto' : 'none'}`;
            this.elementRef.nativeElement.style.zIndex = this.commonUtils.getFloatingLayerIndex();
            // if (this.elementRef.nativeElement.classList.contains('solution-header-title-menu')) {
            //     this.elementRef.nativeElement.classList.add('query-solution');
            // }
            // const solutionBtns = this.elementRef.nativeElement.querySelector('.solution-header-dropdown-item-btns');
            // if (solutionBtns && !solutionBtns.classList.contains('dropdown-item')) {
            //     solutionBtns.classList.add('dropdown-item');
            // }
        }
        else {
            /** @type {?} */
            const childContainerWidth = window.innerWidth - left - parentMenuPanel.offsetWidth;
            /** @type {?} */
            const childMenuPanel = this.elementRef.nativeElement;
            if (childMenuPanel.offsetWidth > childContainerWidth) {
                /** @type {?} */
                const l = -pw;
                childMenuPanel.style.left = l + 'px';
            }
            /** @type {?} */
            const childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;
            if (childContainerHeight < childMenuPanel.offsetHeight) {
                /** @type {?} */
                const t = window.innerHeight - top - childMenuPanel.offsetHeight - 10;
                childMenuPanel.style.top = t + 'px';
            }
        }
    }
}
FDropdownMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: "[fDropdownMenu]",
            },] }
];
/** @nocollapse */
FDropdownMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FDropdownDirective }
];
FDropdownMenuDirective.propDecorators = {
    showDropdownMenu: [{ type: HostBinding, args: ["class.dropdown-menu",] }],
    dpIsOpen: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype._docRect;
    /** @type {?} */
    FDropdownMenuDirective.prototype.showDropdownMenu;
    /** @type {?} */
    FDropdownMenuDirective.prototype.dpIsOpen;
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype.overLayService;
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype.dropdown;
}
//# sourceMappingURL=data:application/json;base64,