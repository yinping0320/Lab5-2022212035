/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, HostBinding, EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
export class FDropdownDirective {
    /**
     * @param {?} elementRef
     * @param {?} render
     */
    constructor(elementRef, render) {
        this.elementRef = elementRef;
        this.render = render;
        // tslint:disable-next-line:no-input-rename
        this._internalOpen = false;
        // 计算宽度
        this._calculateMenu = false;
        // 是否自动纠正位置
        this.autoRectify = false;
        this.dpChangeEvent = new EventEmitter();
        this._placement = 'bottom'; // 记录 position
        // 记录 position
        this.isSubDP = false; // 是否是子下拉
        this.isOpenState = new Subject();
        this.menuEls = new WeakMap();
        this._seflEl = this.elementRef.nativeElement;
        this.isOpenState.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (this._internalOpen !== state) {
                this._internalOpen = state;
                if (this._internalOpen) {
                    this.render.addClass(this._seflEl, 'show');
                }
                else {
                    this.render.removeClass(this._seflEl, 'show');
                }
            }
        }));
    }
    // 在外面强制控制关闭状态
    /**
     * @param {?} value
     * @return {?}
     */
    set forceState(value) {
        if (value && value.length) {
            this.close();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set openState(value) {
        this._internalOpen = value[0];
        this.isOpenState.next(value[0]);
    }
    // 是否是子下拉
    /**
     * @param {?} value
     * @return {?}
     */
    set placement(value) {
        // 如果相等
        if (!value) {
            return;
        }
        //
        if (value !== this._placement) {
            /** @type {?} */
            const newClsName = this._getClsName(value);
            /** @type {?} */
            const oldClsName = this._getClsName(this._placement);
            this.render.removeClass(this._seflEl, oldClsName);
            this.render.addClass(this._seflEl, newClsName);
            this._placement = value;
        }
    }
    /**
     * @return {?}
     */
    get placement() {
        return this._placement;
    }
    // @HostBinding('class.show')
    /**
     * @return {?}
     */
    get isOpen() {
        return this._internalOpen;
    }
    /**
     * @return {?}
     */
    get submenuCls() {
        return this.isSubDP;
    }
    /**
     * @return {?}
     */
    get dropdownCls() {
        return !this.isSubDP;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getNativeElement() {
        return this._seflEl;
    }
    /**
     * @private
     * @return {?}
     */
    bindDocumentEvents() {
        //   this.ngzone.runOutsideAngular(() => {
        this.documentClickEventListener = this.onDocumentClick.bind(this);
        document.addEventListener('click', this.documentClickEventListener);
        // 绑定被操作native时触发
        this.selfDefineEventListener = this.onSelfDefineHandler.bind(this);
        this._seflEl.addEventListener('selfClose', this.selfDefineEventListener);
        // });
    }
    /**
     * @private
     * @return {?}
     */
    onSelfDefineHandler() {
        this.close();
    }
    /**
     * @private
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentClickEventListener) {
            document.removeEventListener('click', this.documentClickEventListener);
            this.documentClickEventListener = null;
        }
        if (this.selfDefineEventListener) {
            this._seflEl.removeEventListener('selfClose', this.selfDefineEventListener);
            this.selfDefineEventListener = null;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        // 如果已经关闭，不需要再响应
        if (!this._internalOpen) {
            return;
        }
        if (event.button !== 2 && !this.isEventFromToggle(event)) {
            this.close();
        }
    }
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    needToCalculate() {
        return this.autoRectify && this._calculateMenu;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetCalculate(value) {
        this._calculateMenu = value;
    }
    /**
     * @return {?}
     */
    open() {
        if (!this._internalOpen) {
            this.closeSiblingDropdowns();
            this._calculateMenu = true;
            this.render.addClass(this._seflEl, 'show');
            this.isOpenState.next(true);
            this.dpChangeEvent.emit(true);
            // 执行绑定事件
            this.bindDocumentEvents();
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    close(emit = true) {
        if (this._internalOpen) {
            this._calculateMenu = false;
            this.render.removeClass(this._seflEl, 'show');
            if (emit) {
                this.isOpenState.next(false);
                this.dpChangeEvent.emit(false);
            }
            this.unbindDocumentEvents();
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this._internalOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    getOpenState() {
        return this.isOpenState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isOpenState.unsubscribe();
        this.unbindDocumentEvents();
        /** @type {?} */
        const menuels = this.menuEls.get(this._seflEl);
        if (menuels && menuels.length) {
            menuels.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                element.remove();
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    closeSiblingDropdowns() {
        /** @type {?} */
        let dpParentEl = this._seflEl.parentNode;
        if (dpParentEl && dpParentEl['className'].indexOf('dropdown-menu') > -1) {
            /** @type {?} */
            let dropdowns = dpParentEl.querySelectorAll('[fDropdown]');
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf('show')) {
                        // 触发事件试试
                        this.compatibleDispatchEvent(dropdowns[k], 'selfClose');
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    compatibleDispatchEvent(eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    _getClsName(position) {
        /** @type {?} */
        let className = '';
        switch (position) {
            case 'top-right':
            case 'top':
                // 朝上，朝上-朝右
                className = 'dropup';
                break;
            case 'top-left':
                // 朝上-朝左
                className = 'dropup-left';
                break;
            case 'left-bottom':
            case 'left':
                // 横向——朝左——朝下
                className = 'dropleft';
                break;
            case 'left-top':
                // 横向——朝左——朝上
                className = 'dropleft-up';
                break;
            case 'right-bottom':
            case 'right':
                // 横向——朝右——朝下
                className = 'dropright';
                break;
            case 'right-top':
                // 横向——朝右——朝上
                className = 'dropright-up';
                break;
            case 'bottom-left':
                // 朝下——朝左
                className = 'dropdown-left';
                break;
            case 'bottom-right':
                className = 'dropdown';
                break;
            default:
                // 朝下，朝下——朝右
                className = 'dropdown';
        }
        return className;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isEventFromToggle(event) {
        /** @type {?} */
        const result = this.toggleElement && this.toggleElement.contains(event.target);
        return result;
    }
    /**
     * @return {?}
     */
    getRectifyReferenceEl() {
        /** @type {?} */
        var resultWidth = window.innerWidth;
        /** @type {?} */
        var resultHeight = window.innerHeight;
        // 横向计算
        if (this.rectifyReference) {
            resultWidth = this.rectifyReference.getBoundingClientRect().right;
        }
        // 纵向计算
        if (this.rectifyReferenceV) {
            resultWidth = this.rectifyReference.getBoundingClientRect().bottom;
        }
        return { width: resultWidth, height: resultHeight };
    }
    /**
     * @param {?} menuEl
     * @return {?}
     */
    appendMenuEl(menuEl) {
        /** @type {?} */
        const m = this.menuEls.get(menuEl) || [];
        m.push(menuEl);
        this.menuEls.set(this._seflEl, m);
    }
}
FDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fDropdown]',
                exportAs: 'fDropdown'
            },] }
];
/** @nocollapse */
FDropdownDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FDropdownDirective.propDecorators = {
    rectifyReference: [{ type: Input }],
    rectifyReferenceV: [{ type: Input }],
    autoRectify: [{ type: Input }],
    forceState: [{ type: Input, args: ['forceState',] }],
    openState: [{ type: Input, args: ['open',] }],
    dpChangeEvent: [{ type: Output }],
    isSubDP: [{ type: Input }],
    placement: [{ type: Input, args: ['placement',] }],
    submenuCls: [{ type: HostBinding, args: ['class.dropdown-submenu',] }],
    dropdownCls: [{ type: HostBinding, args: ['class.dropdown',] }]
};
if (false) {
    /** @type {?} */
    FDropdownDirective.prototype.toggleElement;
    /** @type {?} */
    FDropdownDirective.prototype.documentClickEventListener;
    /** @type {?} */
    FDropdownDirective.prototype.selfDefineEventListener;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._seflEl;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._internalOpen;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._calculateMenu;
    /** @type {?} */
    FDropdownDirective.prototype.rectifyReference;
    /** @type {?} */
    FDropdownDirective.prototype.rectifyReferenceV;
    /** @type {?} */
    FDropdownDirective.prototype.autoRectify;
    /** @type {?} */
    FDropdownDirective.prototype.dpChangeEvent;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._placement;
    /** @type {?} */
    FDropdownDirective.prototype.isSubDP;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.isOpenState;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.menuEls;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1kcm9wZG93bi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRyb3Bkb3duLyIsInNvdXJjZXMiOlsibGliL2YtZHJvcGRvd24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFlBQVksRUFDWixVQUFVLEVBQ1YsU0FBUyxFQUdaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFLM0MsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7SUF5RTNCLFlBQ1ksVUFBc0IsRUFDdEIsTUFBaUI7UUFEakIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixXQUFNLEdBQU4sTUFBTSxDQUFXOztRQXJFckIsa0JBQWEsR0FBRyxLQUFLLENBQUM7O1FBRXRCLG1CQUFjLEdBQUcsS0FBSyxDQUFDOztRQU10QixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQWVuQixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDOUMsZUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDLGNBQWM7O1FBRXBDLFlBQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxTQUFTO1FBMEIzQixnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFhNUIsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFNNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEtBQWMsRUFBRSxFQUFFO1lBQzFDLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUMzQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7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QThCOzs7OztJQUM5QixvQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgSW5wdXQsXHJcbiAgICBPdXRwdXQsXHJcbiAgICBIb3N0QmluZGluZyxcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBSZW5kZXJlcjIsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBPbkluaXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2ZEcm9wZG93bl0nLFxyXG4gICAgZXhwb3J0QXM6ICdmRHJvcGRvd24nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRHJvcGRvd25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XHJcbiAgICB0b2dnbGVFbGVtZW50OiBhbnk7XHJcbiAgICBkb2N1bWVudENsaWNrRXZlbnRMaXN0ZW5lcjogYW55O1xyXG4gICAgc2VsZkRlZmluZUV2ZW50TGlzdGVuZXI6IGFueTtcclxuICAgIHByaXZhdGUgX3NlZmxFbDogSFRNTEVsZW1lbnQ7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXHJcbiAgICBwcml2YXRlIF9pbnRlcm5hbE9wZW4gPSBmYWxzZTtcclxuICAgIC8vIOiuoeeul+WuveW6plxyXG4gICAgcHJpdmF0ZSBfY2FsY3VsYXRlTWVudSA9IGZhbHNlO1xyXG4gICAgLy8g57qg5q2j5L2N572u55qE5Y+C54WnIOaciXdpbmRvd+WSjHBhcmVudOS4pOS4quWAvFxyXG4gICAgQElucHV0KCkgcmVjdGlmeVJlZmVyZW5jZTtcclxuICAgIC8vIOe6oOato+e6teWQkeS9jee9rueahOWPgueFpyBcclxuICAgIEBJbnB1dCgpIHJlY3RpZnlSZWZlcmVuY2VWO1xyXG4gICAgLy8g5piv5ZCm6Ieq5Yqo57qg5q2j5L2N572uXHJcbiAgICBASW5wdXQoKSBhdXRvUmVjdGlmeSA9IGZhbHNlO1xyXG4gICAgLy8g5Zyo5aSW6Z2i5by65Yi25o6n5Yi25YWz6Zet54q25oCBXHJcbiAgICBASW5wdXQoJ2ZvcmNlU3RhdGUnKVxyXG4gICAgc2V0IGZvcmNlU3RhdGUodmFsdWU6IEFycmF5PGJvb2xlYW4+KSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoJ29wZW4nKVxyXG4gICAgc2V0IG9wZW5TdGF0ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2ludGVybmFsT3BlbiA9IHZhbHVlWzBdO1xyXG4gICAgICAgIHRoaXMuaXNPcGVuU3RhdGUubmV4dCh2YWx1ZVswXSk7XHJcbiAgICB9XHJcbiAgICBAT3V0cHV0KCkgZHBDaGFuZ2VFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuICAgIHByaXZhdGUgX3BsYWNlbWVudCA9ICdib3R0b20nOyAvLyDorrDlvZUgcG9zaXRpb25cclxuXHJcbiAgICBASW5wdXQoKSBpc1N1YkRQID0gZmFsc2U7IC8vIOaYr+WQpuaYr+WtkOS4i+aLiVxyXG5cclxuICAgIEBJbnB1dCgncGxhY2VtZW50JylcclxuICAgIHNldCBwbGFjZW1lbnQodmFsdWUpIHtcclxuICAgICAgICAvLyDlpoLmnpznm7jnrYlcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX3BsYWNlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDbHNOYW1lID0gdGhpcy5fZ2V0Q2xzTmFtZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZENsc05hbWUgPSB0aGlzLl9nZXRDbHNOYW1lKHRoaXMuX3BsYWNlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKHRoaXMuX3NlZmxFbCwgb2xkQ2xzTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuX3NlZmxFbCwgbmV3Q2xzTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlbWVudCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBwbGFjZW1lbnQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGxhY2VtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEBIb3N0QmluZGluZygnY2xhc3Muc2hvdycpXHJcbiAgICBnZXQgaXNPcGVuKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbE9wZW47XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc09wZW5TdGF0ZSA9IG5ldyBTdWJqZWN0KCk7XHJcblxyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZHJvcGRvd24tc3VibWVudScpXHJcbiAgICBnZXQgc3VibWVudUNscygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1N1YkRQO1xyXG4gICAgfVxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5kcm9wZG93bicpXHJcbiAgICBnZXQgZHJvcGRvd25DbHMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzU3ViRFA7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG5nWm9uZTtcclxuXHJcbiAgICBwcml2YXRlIG1lbnVFbHMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLl9zZWZsRWwgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0aGlzLmlzT3BlblN0YXRlLnN1YnNjcmliZSgoc3RhdGU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsT3BlbiAhPT0gc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsT3BlbiA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsT3Blbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuX3NlZmxFbCwgJ3Nob3cnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3ModGhpcy5fc2VmbEVsLCAnc2hvdycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxuICAgIGdldE5hdGl2ZUVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlZmxFbDtcclxuICAgIH1cclxuICAgIHByaXZhdGUgYmluZERvY3VtZW50RXZlbnRzKCkge1xyXG4gICAgICAgIC8vICAgdGhpcy5uZ3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0V2ZW50TGlzdGVuZXIgPSB0aGlzLm9uRG9jdW1lbnRDbGljay5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5kb2N1bWVudENsaWNrRXZlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgLy8g57uR5a6a6KKr5pON5L2cbmF0aXZl5pe26Kem5Y+RXHJcbiAgICAgICAgdGhpcy5zZWxmRGVmaW5lRXZlbnRMaXN0ZW5lciA9IHRoaXMub25TZWxmRGVmaW5lSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3NlZmxFbC5hZGRFdmVudExpc3RlbmVyKCdzZWxmQ2xvc2UnLCB0aGlzLnNlbGZEZWZpbmVFdmVudExpc3RlbmVyKTtcclxuICAgICAgICAvLyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU2VsZkRlZmluZUhhbmRsZXIoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSB1bmJpbmREb2N1bWVudEV2ZW50cygpIHtcclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudENsaWNrRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgJ2NsaWNrJyxcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0V2ZW50TGlzdGVuZXJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrRXZlbnRMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGZEZWZpbmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlZmxFbC5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgJ3NlbGZDbG9zZScsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGZEZWZpbmVFdmVudExpc3RlbmVyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZkRlZmluZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgLy8g5aaC5p6c5bey57uP5YWz6Zet77yM5LiN6ZyA6KaB5YaN5ZON5bqUXHJcbiAgICAgICAgaWYgKCF0aGlzLl9pbnRlcm5hbE9wZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAyICYmICF0aGlzLmlzRXZlbnRGcm9tVG9nZ2xlKGV2ZW50KSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWIpOaWrW1lbnXlsZXlvIDml7bmmK/lkKbopoHorqHnrpdcclxuICAgIG5lZWRUb0NhbGN1bGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdXRvUmVjdGlmeSAmJiB0aGlzLl9jYWxjdWxhdGVNZW51O1xyXG4gICAgfVxyXG4gICAgcmVzZXRDYWxjdWxhdGUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVNZW51ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBvcGVuKCkge1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2ludGVybmFsT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlU2libGluZ0Ryb3Bkb3ducygpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVNZW51ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5fc2VmbEVsLCAnc2hvdycpO1xyXG4gICAgICAgICAgICB0aGlzLmlzT3BlblN0YXRlLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZHBDaGFuZ2VFdmVudC5lbWl0KHRydWUpO1xyXG4gICAgICAgICAgICAvLyDmiafooYznu5Hlrprkuovku7ZcclxuICAgICAgICAgICAgdGhpcy5iaW5kRG9jdW1lbnRFdmVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoZW1pdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxPcGVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGN1bGF0ZU1lbnUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3ModGhpcy5fc2VmbEVsLCAnc2hvdycpO1xyXG4gICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc09wZW5TdGF0ZS5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHBDaGFuZ2VFdmVudC5lbWl0KGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxPcGVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRPcGVuU3RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNPcGVuU3RhdGU7XHJcbiAgICB9XHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmlzT3BlblN0YXRlLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy51bmJpbmREb2N1bWVudEV2ZW50cygpO1xyXG5cclxuICAgICAgICBjb25zdCBtZW51ZWxzID0gdGhpcy5tZW51RWxzLmdldCh0aGlzLl9zZWZsRWwpO1xyXG4gICAgICAgIGlmIChtZW51ZWxzICYmIG1lbnVlbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG1lbnVlbHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgY2xvc2VTaWJsaW5nRHJvcGRvd25zKCkge1xyXG4gICAgICAgIGxldCBkcFBhcmVudEVsID0gdGhpcy5fc2VmbEVsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKGRwUGFyZW50RWwgJiYgZHBQYXJlbnRFbFsnY2xhc3NOYW1lJ10uaW5kZXhPZignZHJvcGRvd24tbWVudScpID4gLTEpIHtcclxuICAgICAgICAgICAgbGV0IGRyb3Bkb3ducyA9IGRwUGFyZW50RWwucXVlcnlTZWxlY3RvckFsbCgnW2ZEcm9wZG93bl0nKTtcclxuICAgICAgICAgICAgaWYgKGRyb3Bkb3ducyAmJiBkcm9wZG93bnMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkcm9wZG93bnMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcGRvd25zW2tdLmNsYXNzTmFtZS5pbmRleE9mKCdzaG93JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6Kem5Y+R5LqL5Lu26K+V6K+VXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGF0aWJsZURpc3BhdGNoRXZlbnQoZHJvcGRvd25zW2tdLCAnc2VsZkNsb3NlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyb3Bkb3duc1trXS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnc2VsZkNsb3NlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgY29tcGF0aWJsZURpc3BhdGNoRXZlbnQoZXZlbnRFbCwgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50O1xyXG4gICAgICAgIGlmICh0eXBlb2YgRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBldmVudCA9IG5ldyBFdmVudChldmVudE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcclxuICAgICAgICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnRFbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX2dldENsc05hbWUocG9zaXRpb246IHN0cmluZykge1xyXG4gICAgICAgIGxldCBjbGFzc05hbWUgPSAnJztcclxuICAgICAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcC1yaWdodCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICAgICAgICAvLyDmnJ3kuIrvvIzmnJ3kuIot5pyd5Y+zXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSAnZHJvcHVwJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd0b3AtbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAvLyDmnJ3kuIot5pyd5bemXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSAnZHJvcHVwLWxlZnQnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQtYm90dG9tJzpcclxuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAvLyDmqKrlkJHigJTigJTmnJ3lt6bigJTigJTmnJ3kuItcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdkcm9wbGVmdCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbGVmdC10b3AnOlxyXG4gICAgICAgICAgICAgICAgLy8g5qiq5ZCR4oCU4oCU5pyd5bem4oCU4oCU5pyd5LiKXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSAnZHJvcGxlZnQtdXAnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0LWJvdHRvbSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgIC8vIOaoquWQkeKAlOKAlOacneWPs+KAlOKAlOacneS4i1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gJ2Ryb3ByaWdodCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncmlnaHQtdG9wJzpcclxuICAgICAgICAgICAgICAgIC8vIOaoquWQkeKAlOKAlOacneWPs+KAlOKAlOacneS4ilxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gJ2Ryb3ByaWdodC11cCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYm90dG9tLWxlZnQnOlxyXG4gICAgICAgICAgICAgICAgLy8g5pyd5LiL4oCU4oCU5pyd5bemXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSAnZHJvcGRvd24tbGVmdCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYm90dG9tLXJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdkcm9wZG93bic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vIOacneS4i++8jOacneS4i+KAlOKAlOacneWPs1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gJ2Ryb3Bkb3duJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgaXNFdmVudEZyb21Ub2dnbGUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPVxyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQgJiYgdGhpcy50b2dnbGVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZWN0aWZ5UmVmZXJlbmNlRWwoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHJlc3VsdFdpZHRoID0gd2luZG93LmlubmVyV2lkdGgsIHJlc3VsdEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAvLyDmqKrlkJHorqHnrpdcclxuICAgICAgICBpZiAodGhpcy5yZWN0aWZ5UmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFdpZHRoID0gdGhpcy5yZWN0aWZ5UmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDnurXlkJHorqHnrpdcclxuICAgICAgICBpZiAodGhpcy5yZWN0aWZ5UmVmZXJlbmNlVikge1xyXG4gICAgICAgICAgICByZXN1bHRXaWR0aCA9IHRoaXMucmVjdGlmeVJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHdpZHRoOiByZXN1bHRXaWR0aCwgaGVpZ2h0OiByZXN1bHRIZWlnaHQgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXBwZW5kTWVudUVsKG1lbnVFbDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgbSA9IHRoaXMubWVudUVscy5nZXQobWVudUVsKSB8fCBbXTtcclxuICAgICAgICBtLnB1c2gobWVudUVsKVxyXG4gICAgICAgIHRoaXMubWVudUVscy5zZXQodGhpcy5fc2VmbEVsLCBtKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGVudW0gRkRyb3Bkb3duUGxhY2VtZW50e1xyXG4vLyAgIFwidG9wXCIsIFwidG9wLWxlZnRcIiwgXCJ0b3AtcmlnaHRcIiwgXCJib3R0b21cIiwgXCJib3R0b20tbGVmdFwiLCBcImJvdHRvbS1yaWdodFwiLFxyXG4vLyAgICogICAgXCJsZWZ0XCIsIFwibGVmdC10b3BcIiwgXCJsZWZ0LWJvdHRvbVwiLCBcInJpZ2h0XCIsIFwicmlnaHQtdG9wXCIsIFwicmlnaHQtYm90dG9tXCJcclxuLy8gfVxyXG4iXX0=