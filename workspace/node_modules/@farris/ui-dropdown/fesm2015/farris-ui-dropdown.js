import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CommonUtils, OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { Directive, Input, Output, HostBinding, EventEmitter, ElementRef, Renderer2, HostListener, NgModule, Component, ContentChild } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FDropdownDirective {
    /**
     * @param {?} elementRef
     * @param {?} render
     */
    constructor(elementRef, render) {
        this.elementRef = elementRef;
        this.render = render;
        // tslint:disable-next-line:no-input-rename
        this._internalOpen = false;
        // 计算宽度
        this._calculateMenu = false;
        // 是否自动纠正位置
        this.autoRectify = false;
        this.dpChangeEvent = new EventEmitter();
        this._placement = 'bottom'; // 记录 position
        // 记录 position
        this.isSubDP = false; // 是否是子下拉
        this.isOpenState = new Subject();
        this.menuEls = new WeakMap();
        this._seflEl = this.elementRef.nativeElement;
        this.isOpenState.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (this._internalOpen !== state) {
                this._internalOpen = state;
                if (this._internalOpen) {
                    this.render.addClass(this._seflEl, 'show');
                }
                else {
                    this.render.removeClass(this._seflEl, 'show');
                }
            }
        }));
    }
    // 在外面强制控制关闭状态
    /**
     * @param {?} value
     * @return {?}
     */
    set forceState(value) {
        if (value && value.length) {
            this.close();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set openState(value) {
        this._internalOpen = value[0];
        this.isOpenState.next(value[0]);
    }
    // 是否是子下拉
    /**
     * @param {?} value
     * @return {?}
     */
    set placement(value) {
        // 如果相等
        if (!value) {
            return;
        }
        //
        if (value !== this._placement) {
            /** @type {?} */
            const newClsName = this._getClsName(value);
            /** @type {?} */
            const oldClsName = this._getClsName(this._placement);
            this.render.removeClass(this._seflEl, oldClsName);
            this.render.addClass(this._seflEl, newClsName);
            this._placement = value;
        }
    }
    /**
     * @return {?}
     */
    get placement() {
        return this._placement;
    }
    // @HostBinding('class.show')
    /**
     * @return {?}
     */
    get isOpen() {
        return this._internalOpen;
    }
    /**
     * @return {?}
     */
    get submenuCls() {
        return this.isSubDP;
    }
    /**
     * @return {?}
     */
    get dropdownCls() {
        return !this.isSubDP;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getNativeElement() {
        return this._seflEl;
    }
    /**
     * @private
     * @return {?}
     */
    bindDocumentEvents() {
        //   this.ngzone.runOutsideAngular(() => {
        this.documentClickEventListener = this.onDocumentClick.bind(this);
        document.addEventListener('click', this.documentClickEventListener);
        // 绑定被操作native时触发
        this.selfDefineEventListener = this.onSelfDefineHandler.bind(this);
        this._seflEl.addEventListener('selfClose', this.selfDefineEventListener);
        // });
    }
    /**
     * @private
     * @return {?}
     */
    onSelfDefineHandler() {
        this.close();
    }
    /**
     * @private
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentClickEventListener) {
            document.removeEventListener('click', this.documentClickEventListener);
            this.documentClickEventListener = null;
        }
        if (this.selfDefineEventListener) {
            this._seflEl.removeEventListener('selfClose', this.selfDefineEventListener);
            this.selfDefineEventListener = null;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        // 如果已经关闭，不需要再响应
        if (!this._internalOpen) {
            return;
        }
        if (event.button !== 2 && !this.isEventFromToggle(event)) {
            this.close();
        }
    }
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    needToCalculate() {
        return this.autoRectify && this._calculateMenu;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetCalculate(value) {
        this._calculateMenu = value;
    }
    /**
     * @return {?}
     */
    open() {
        if (!this._internalOpen) {
            this.closeSiblingDropdowns();
            this._calculateMenu = true;
            this.render.addClass(this._seflEl, 'show');
            this.isOpenState.next(true);
            this.dpChangeEvent.emit(true);
            // 执行绑定事件
            this.bindDocumentEvents();
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    close(emit = true) {
        if (this._internalOpen) {
            this._calculateMenu = false;
            this.render.removeClass(this._seflEl, 'show');
            if (emit) {
                this.isOpenState.next(false);
                this.dpChangeEvent.emit(false);
            }
            this.unbindDocumentEvents();
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this._internalOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    getOpenState() {
        return this.isOpenState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isOpenState.unsubscribe();
        this.unbindDocumentEvents();
        /** @type {?} */
        const menuels = this.menuEls.get(this._seflEl);
        if (menuels && menuels.length) {
            menuels.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                element.remove();
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    closeSiblingDropdowns() {
        /** @type {?} */
        let dpParentEl = this._seflEl.parentNode;
        if (dpParentEl && dpParentEl['className'].indexOf('dropdown-menu') > -1) {
            /** @type {?} */
            let dropdowns = dpParentEl.querySelectorAll('[fDropdown]');
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf('show')) {
                        // 触发事件试试
                        this.compatibleDispatchEvent(dropdowns[k], 'selfClose');
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    compatibleDispatchEvent(eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    _getClsName(position) {
        /** @type {?} */
        let className = '';
        switch (position) {
            case 'top-right':
            case 'top':
                // 朝上，朝上-朝右
                className = 'dropup';
                break;
            case 'top-left':
                // 朝上-朝左
                className = 'dropup-left';
                break;
            case 'left-bottom':
            case 'left':
                // 横向——朝左——朝下
                className = 'dropleft';
                break;
            case 'left-top':
                // 横向——朝左——朝上
                className = 'dropleft-up';
                break;
            case 'right-bottom':
            case 'right':
                // 横向——朝右——朝下
                className = 'dropright';
                break;
            case 'right-top':
                // 横向——朝右——朝上
                className = 'dropright-up';
                break;
            case 'bottom-left':
                // 朝下——朝左
                className = 'dropdown-left';
                break;
            case 'bottom-right':
                className = 'dropdown';
                break;
            default:
                // 朝下，朝下——朝右
                className = 'dropdown';
        }
        return className;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isEventFromToggle(event) {
        /** @type {?} */
        const result = this.toggleElement && this.toggleElement.contains(event.target);
        return result;
    }
    /**
     * @return {?}
     */
    getRectifyReferenceEl() {
        /** @type {?} */
        var resultWidth = window.innerWidth;
        /** @type {?} */
        var resultHeight = window.innerHeight;
        // 横向计算
        if (this.rectifyReference) {
            resultWidth = this.rectifyReference.getBoundingClientRect().right;
        }
        // 纵向计算
        if (this.rectifyReferenceV) {
            resultWidth = this.rectifyReference.getBoundingClientRect().bottom;
        }
        return { width: resultWidth, height: resultHeight };
    }
    /**
     * @param {?} menuEl
     * @return {?}
     */
    appendMenuEl(menuEl) {
        /** @type {?} */
        const m = this.menuEls.get(menuEl) || [];
        m.push(menuEl);
        this.menuEls.set(this._seflEl, m);
    }
}
FDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fDropdown]',
                exportAs: 'fDropdown'
            },] }
];
/** @nocollapse */
FDropdownDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FDropdownDirective.propDecorators = {
    rectifyReference: [{ type: Input }],
    rectifyReferenceV: [{ type: Input }],
    autoRectify: [{ type: Input }],
    forceState: [{ type: Input, args: ['forceState',] }],
    openState: [{ type: Input, args: ['open',] }],
    dpChangeEvent: [{ type: Output }],
    isSubDP: [{ type: Input }],
    placement: [{ type: Input, args: ['placement',] }],
    submenuCls: [{ type: HostBinding, args: ['class.dropdown-submenu',] }],
    dropdownCls: [{ type: HostBinding, args: ['class.dropdown',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FDropdownMenuDirective {
    /**
     * @param {?} elementRef
     * @param {?} dropdown
     */
    constructor(elementRef, dropdown) {
        this.elementRef = elementRef;
        this.dropdown = dropdown;
        this._docRect = { width: 0, height: 0 };
        this.showDropdownMenu = true;
        // 内部使用，在不变更依赖的情况下，触发改变
        this.dpIsOpen = false;
        this.overLayService = null;
        this.overLayService = new OverLayHiddenService();
        this.commonUtils = new CommonUtils();
        this.dropdown.getOpenState().pipe(debounceTime(50)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            /** @type {?} */
            const ddmel = this.dropdown.getNativeElement();
            this.dpIsOpen = this.dropdown.isOpen;
            if (this.issubMenu()) {
                if (state && !this.dpIsOpen && this.elementRef.nativeElement.className.indexOf("show") < 0) {
                    this.dpIsOpen = true;
                }
                /** @type {?} */
                const dropdownMenus = this.dropdown.getNativeElement().closest('.dropdown-menu');
                if (dropdownMenus) {
                    /** @type {?} */
                    const showMenus = dropdownMenus.querySelectorAll('.show');
                    showMenus.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    (element) => {
                        element.classList.remove('show');
                        element.style.cssText = '';
                    }));
                }
            }
            if (this.dpIsOpen) {
                // 注册鼠标滚轮，点击事件，用于隐藏Panel
                this.overLayService.registerMouseEvent(ddmel, (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const tar = (/** @type {?} */ (e.target));
                    /** @type {?} */
                    var classList = Array.from(tar.classList || []);
                    if (classList.includes('dropdown-toggle') || tar.closest('.dropdown-item') || classList.includes("dropdown-item") ||
                        (this.dropdown.getNativeElement().contains(tar) && e.type !== "mousewheel") || this.elementRef.nativeElement.contains(tar)) {
                        return;
                    }
                    this.dpIsOpen = false;
                    this.dropdown.close(false);
                    this.openStateChange();
                }));
            }
            else {
                this.dropdown.close(false);
                this.overLayService.destory(ddmel);
            }
            this.openStateChange();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() { }
    /**
     * @private
     * @param {?} pment
     * @return {?}
     */
    getRealPlacement(pment) {
        /** @type {?} */
        var result = "bottom-right";
        switch (pment) {
            case "top":
                result = "top-right";
                break;
            case "left":
                result = "left-bottom";
                break;
            case "right":
                result = "right-bottom";
                break;
            case "bottom":
                result = "bottom-right";
                break;
            default:
                result = pment;
        }
        return result;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @return {?}
     */
    openStateChange() {
        if (this.dpIsOpen) {
            if (this.elementRef.nativeElement.className.indexOf("show") < 0) {
                document.body.style.overflow = 'hidden';
                this.elementRef.nativeElement.style.visibility = 'hidden';
                this.elementRef.nativeElement.className += " show";
                if (this.dropdown.needToCalculate()) {
                    this._docRect = this.dropdown.getRectifyReferenceEl();
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.changeDirection();
                    document.body.style.overflow = '';
                    this.elementRef.nativeElement.style.visibility = 'visible';
                }), 0);
            }
        }
        else {
            if (this.elementRef.nativeElement.className.indexOf("show") > -1) {
                this.elementRef.nativeElement.className = this.elementRef.nativeElement.className.replace(' show', ' ');
                this.elementRef.nativeElement.style.cssText = '';
            }
            /** @type {?} */
            const submenu = this.elementRef.nativeElement.querySelectorAll('.dropdown-menu');
            if (submenu && submenu.length) {
                submenu.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    element.classList.remove('show');
                    element.style.cssText = '';
                }));
            }
            /** @type {?} */
            const showItem = this.elementRef.nativeElement.querySelector('.show');
            if (showItem) {
                showItem.classList.remove('show');
            }
            /** @type {?} */
            const activeItem = this.elementRef.nativeElement.querySelector('.active');
            if (activeItem) {
                activeItem.classList.remove('active');
            }
            this.dropdown['_internalOpen'] = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeDirection() {
        // if (this.dropdown.needToCalculate()) {
        //     const rect = this.elementRef.nativeElement.getBoundingClientRect();
        //     let placement = this.dropdown.placement;
        //     let newplacement = this.getRealPlacement(placement);
        //     placement = newplacement;
        //     //
        //     if (
        //         newplacement.indexOf("right") > -1 &&
        //         rect.right > this._docRect.width
        //     ) {
        //         placement = placement.replace("right", "left");
        //     }
        //     if (
        //         newplacement.indexOf("left") > -1 &&
        //         rect.left - rect.width < 0
        //     ) {
        //         placement = placement.replace("left", "right");
        //     }
        //     if (
        //         newplacement.indexOf("bottom") > -1 &&
        //         rect.bottom > this._docRect.height
        //     ) {
        //         placement = placement.replace("down", "up");
        //     }
        //     if (
        //         newplacement.indexOf("up") > -1 &&
        //         rect.bottom - rect.height < 0
        //     ) {
        //         placement = placement.replace("up", "bottom");
        //     }
        //     if (newplacement !== this.dropdown.placement) {
        //         this.dropdown.placement = newplacement;
        //     }
        //     if (placement !== newplacement) {
        //         this.dropdown.placement = placement;
        //     }
        //     this.dropdown.resetCalculate(false);
        // }
        this.setMenuPanelPosition();
    }
    /**
     * @private
     * @return {?}
     */
    issubMenu() {
        /** @type {?} */
        const dd = this.dropdown.getNativeElement();
        return dd.className.indexOf('dropdown-submenu') > -1 || dd.closest('.dropdown-submenu') || dd.classList.contains('dropright');
    }
    /**
     * @private
     * @return {?}
     */
    setMenuPanelPosition() {
        /** @type {?} */
        const parentMenuPanel = this.dropdown.getNativeElement();
        const { height, left, top, width } = parentMenuPanel.getBoundingClientRect();
        const { marginTop: menuMt, marginBottom: menuMb } = getComputedStyle(this.elementRef.nativeElement);
        const { width: pw, height: ph } = this.elementRef.nativeElement.getBoundingClientRect();
        /** @type {?} */
        let _maxHeight = 0;
        /** @type {?} */
        let tMenuMargin = Math.ceil(parseFloat(menuMt)) + Math.ceil(parseFloat(menuMb));
        /** @type {?} */
        let _top = top + height;
        /** @type {?} */
        let _left = left;
        if (window.innerHeight - top - height - tMenuMargin < ph) {
            _top = top - ph;
            if (_top < 0) {
                //当前的界面容不下menu上的按钮，限制menu的高度
                _top = 10;
                _maxHeight = top - _top - tMenuMargin;
            }
        }
        if (window.innerWidth - left - width < pw) {
            _left = left - pw + width;
        }
        if (!this.issubMenu()) {
            document.body.append(this.elementRef.nativeElement);
            this.dropdown.appendMenuEl(this.elementRef.nativeElement);
            this.elementRef.nativeElement.style.cssText = `position:fixed;bottom:unset;left:${_left}px !important;top:${_top}px !important;right: unset;max-height:${_maxHeight ? _maxHeight + 'px;overflow:auto' : 'none'}`;
            this.elementRef.nativeElement.style.zIndex = this.commonUtils.getFloatingLayerIndex();
            // if (this.elementRef.nativeElement.classList.contains('solution-header-title-menu')) {
            //     this.elementRef.nativeElement.classList.add('query-solution');
            // }
            // const solutionBtns = this.elementRef.nativeElement.querySelector('.solution-header-dropdown-item-btns');
            // if (solutionBtns && !solutionBtns.classList.contains('dropdown-item')) {
            //     solutionBtns.classList.add('dropdown-item');
            // }
        }
        else {
            /** @type {?} */
            const childContainerWidth = window.innerWidth - left - parentMenuPanel.offsetWidth;
            /** @type {?} */
            const childMenuPanel = this.elementRef.nativeElement;
            if (childMenuPanel.offsetWidth > childContainerWidth) {
                /** @type {?} */
                const l = -pw;
                childMenuPanel.style.left = l + 'px';
            }
            /** @type {?} */
            const childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;
            if (childContainerHeight < childMenuPanel.offsetHeight) {
                /** @type {?} */
                const t = window.innerHeight - top - childMenuPanel.offsetHeight - 10;
                childMenuPanel.style.top = t + 'px';
            }
        }
    }
}
FDropdownMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: "[fDropdownMenu]",
            },] }
];
/** @nocollapse */
FDropdownMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FDropdownDirective }
];
FDropdownMenuDirective.propDecorators = {
    showDropdownMenu: [{ type: HostBinding, args: ["class.dropdown-menu",] }],
    dpIsOpen: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FDropdownToggleDirective {
    /**
     * @param {?} dropdown
     * @param {?} elementRef
     */
    constructor(dropdown, elementRef) {
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this._disabled = false;
        this.haspopup = true;
        this.nativeEle = null;
        dropdown.toggleElement = elementRef.nativeElement;
        this.nativeEle = elementRef.nativeElement;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (this.dropdown.isSubDP && this.dropdown.isOpen) {
                if (this.nativeEle.className.indexOf("active") < 0) {
                    this.nativeEle.className += " active";
                }
            }
            else {
                if (this.nativeEle.className.indexOf("active") > -1) {
                    this.nativeEle.className = this.nativeEle.className.replace(" active", " ");
                }
            }
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dpDisabled(value) {
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    get disableCls() {
        return this._disabled;
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onclick(ev) {
        if (this._disabled) {
            return;
        }
        if (this.dropdown.isSubDP) {
            ev.stopImmediatePropagation();
        }
        this.dropdown.toggle();
    }
}
FDropdownToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[fDropdownToggle]",
            },] }
];
/** @nocollapse */
FDropdownToggleDirective.ctorParameters = () => [
    { type: FDropdownDirective },
    { type: ElementRef }
];
FDropdownToggleDirective.propDecorators = {
    dpDisabled: [{ type: Input }],
    disableCls: [{ type: HostBinding, args: ["class.disabled",] }],
    haspopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
    onclick: [{ type: HostListener, args: ["click", ["$event"],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const _DROPDOWN_DIRECTIVES = [
    FDropdownDirective,
    FDropdownMenuDirective,
    FDropdownToggleDirective
];
class FDropdownDirectiveTypeModule {
}
FDropdownDirectiveTypeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FarrisCommonModule
                ],
                declarations: _DROPDOWN_DIRECTIVES,
                exports: _DROPDOWN_DIRECTIVES
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisDropdownComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // 下拉框类型
        // tslint:disable-next-line:no-inferrable-types
        this.type = 'primary';
        // 点击列表项目后是否关闭列表项
        // tslint:disable-next-line:no-input-rename
        // tslint:disable-next-line:no-inferrable-types
        this.hideOnClick = true;
        // 按钮组
        // tslint:disable-next-line:no-input-rename
        this.splitButton = false;
        // 列表显示位置
        this.position = 'bottom';
        // 列表项数据
        this.model = [
            { label: '项目一', value: 'asdasd' },
            { label: '项目二', value: 'asdasd' },
            { label: '项目三', value: 'asdasd' }
        ];
        // 按钮分组之后  左边按钮事件
        // tslint:disable-next-line:no-output-rename
        this.leftClick = new EventEmitter();
        this.select = new EventEmitter();
        // 下拉列表显示或者隐藏触发的事件
        // tslint:disable-next-line:no-output-rename
        this.visibleChange = new EventEmitter();
        // 列表项的显示与否
        this.show = false;
    }
    /**
     * @return {?}
     */
    get width() {
        // 对各个单位进行处理
        return this._width;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    set width(width) {
        this._width = this.resolveSize(width);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menu = this.el.nativeElement.querySelector('.dropdown-menu');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
    // 点击列表项显示与否
    /**
     * @param {?=} event
     * @return {?}
     */
    showDropMenu(event) {
        if (this.hover) {
            return;
        }
        if (event) {
            event.stopPropagation();
        }
        this.show = !this.show;
        this.visibleChange.emit();
        this.globalListenFunc = this.renderer.listen('document', 'click', (/**
         * @return {?}
         */
        () => {
            this.closeDropMenu();
        }));
        // 如果不设置hide-on-click,则说明点击下拉之后下拉不消失
        if (!this.hideOnClick) {
            this.menuListenFunc = this.renderer.listen(this.menu, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            e => {
                e.stopPropagation();
            }));
        }
    }
    // 点击元素之外  列表项消失
    /**
     * @return {?}
     */
    closeDropMenu() {
        if (this.hover) {
            return;
        }
        this.show = false;
        this.visibleChange.emit();
        // 解除事件绑定
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
        if (this.menuListenFunc) {
            this.menuListenFunc();
        }
    }
    // hover 实现
    /**
     * @return {?}
     */
    hoverDropdown() {
        if (!this.hover) {
            return;
        }
        this.show = !this.show;
        this.visibleChange.emit();
    }
    /**
     * 弹出事件
     * @param {?} model
     * @return {?}
     */
    selectItem(model) {
        this.select.emit(model);
    }
    /**
     * @return {?}
     */
    leftButtonClick() {
        this.leftClick.emit();
    }
    /**
     * @param {?} size
     * @return {?}
     */
    resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size)
            ? `${parseInt(size, 10)}${size.match(regex)[0]}`
            : `${size}px`;
    }
}
FarrisDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-dropdown',
                template: `
        <div
            class="farris-dropdown btn-group"
            [class.dropup]="position === 'top'"
            [class.dropdown]="position === 'bottom'"
            [class.dropleft]="position === 'left'"
            [class.dropright]="position === 'right'"
            [style.width]="width"
        >
            <span
                [class.btn]="!nest"
                [class.dropdown-item]="nest"
                [class.btn-lg]="size === 'large'"
                [class.btn-sm]="size === 'small'"
                [class.btn-primary]="type === 'primary'"
                [class.btn-success]="type === 'success'"
                [class.btn-warning]="type === 'warning'"
                [class.btn-danger]="type === 'danger'"
                [class.btn-info]="type === 'info'"
                (click)="leftButtonClick()"
                style="width:100%"
                *ngIf="splitButton"
                >{{ title }}</span
            >
            <span
                class="dropdown-toggle"
                [class.btn]="!nest"
                [class.dropdown-item]="nest"
                [class.dropdown-toggle-split]="splitButton"
                [class.btn-lg]="size === 'large'"
                [class.btn-sm]="size === 'small'"
                [class.btn-primary]="type === 'primary'"
                [class.btn-success]="type === 'success'"
                [class.btn-warning]="type === 'warning'"
                [class.btn-danger]="type === 'danger'"
                [class.btn-info]="type === 'info'"
                [class.btn-secondary]="type === 'secondary'"
                (click)="showDropMenu($event)"
                (mouseenter)="hoverDropdown()"
                (mouseleave)="hoverDropdown()"
                style="width:100%"
            >
                <span class="sr-only" *ngIf="splitButton"></span>
                {{ splitButton ? '' : title }}
            </span>
            <div class="dropdown-menu" [class.show]="show">
                <ng-template [ngTemplateOutlet]="dropdownTempl"></ng-template>
                <farris-dropdown-item
                    *ngFor="let item of model"
                    [model]="item"
                    (select)="selectItem($event)"
                >
                </farris-dropdown-item>
            </div>
        </div>
    `
            }] }
];
/** @nocollapse */
FarrisDropdownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisDropdownComponent.propDecorators = {
    nest: [{ type: Input }],
    width: [{ type: Input }],
    title: [{ type: Input }],
    hover: [{ type: Input }],
    size: [{ type: Input }],
    type: [{ type: Input }],
    hideOnClick: [{ type: Input, args: ['hide-on-click',] }],
    splitButton: [{ type: Input, args: ['split-button',] }],
    position: [{ type: Input }],
    model: [{ type: Input }],
    dropdownTempl: [{ type: ContentChild, args: ['dropdownTempl',] }],
    leftClick: [{ type: Output, args: ['left-click',] }],
    select: [{ type: Output }],
    visibleChange: [{ type: Output, args: ['visible-change',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisDropdownItemComponent {
    constructor() {
        this.select = new EventEmitter();
    }
    /**
     * @return {?}
     */
    selectItem() {
        if (this.model.disabled) {
            return;
        }
        this.select.emit(this.model);
    }
}
FarrisDropdownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-dropdown-item',
                template: `
        <div class="dropdown-divider" *ngIf="model.divide"></div>
        <a
            class="dropdown-item"
            [class.active]="model.active"
            [class.disabled]="model.disabled"
            href="javascript:void(0)"
            (click)="selectItem()"
            >{{ model.label }}</a
        >
    `
            }] }
];
FarrisDropdownItemComponent.propDecorators = {
    model: [{ type: Input }],
    select: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisDropdownModule {
}
FarrisDropdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    FarrisDropdownComponent,
                    FarrisDropdownItemComponent
                ],
                exports: [
                    FarrisDropdownComponent,
                    FarrisDropdownItemComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FDropdownDirectiveTypeModule, FDropdownMenuDirective, FDropdownToggleDirective, FDropdownDirective, FarrisDropdownComponent, FarrisDropdownItemComponent, FarrisDropdownModule };

//# sourceMappingURL=farris-ui-dropdown.js.map