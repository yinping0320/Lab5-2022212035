/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, HostBinding, EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
var FDropdownDirective = /** @class */ (function () {
    function FDropdownDirective(elementRef, render) {
        var _this = this;
        this.elementRef = elementRef;
        this.render = render;
        // tslint:disable-next-line:no-input-rename
        this._internalOpen = false;
        // 计算宽度
        this._calculateMenu = false;
        // 是否自动纠正位置
        this.autoRectify = false;
        this.dpChangeEvent = new EventEmitter();
        this._placement = 'bottom'; // 记录 position
        // 记录 position
        this.isSubDP = false; // 是否是子下拉
        this.isOpenState = new Subject();
        this.menuEls = new WeakMap();
        this._seflEl = this.elementRef.nativeElement;
        this.isOpenState.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (_this._internalOpen !== state) {
                _this._internalOpen = state;
                if (_this._internalOpen) {
                    _this.render.addClass(_this._seflEl, 'show');
                }
                else {
                    _this.render.removeClass(_this._seflEl, 'show');
                }
            }
        }));
    }
    Object.defineProperty(FDropdownDirective.prototype, "forceState", {
        // 在外面强制控制关闭状态
        set: 
        // 在外面强制控制关闭状态
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value.length) {
                this.close();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "openState", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._internalOpen = value[0];
            this.isOpenState.next(value[0]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "placement", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placement;
        },
        set: 
        // 是否是子下拉
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // 如果相等
            if (!value) {
                return;
            }
            //
            if (value !== this._placement) {
                /** @type {?} */
                var newClsName = this._getClsName(value);
                /** @type {?} */
                var oldClsName = this._getClsName(this._placement);
                this.render.removeClass(this._seflEl, oldClsName);
                this.render.addClass(this._seflEl, newClsName);
                this._placement = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "isOpen", {
        // @HostBinding('class.show')
        get: 
        // @HostBinding('class.show')
        /**
         * @return {?}
         */
        function () {
            return this._internalOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "submenuCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSubDP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "dropdownCls", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isSubDP;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.getNativeElement = /**
     * @return {?}
     */
    function () {
        return this._seflEl;
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.bindDocumentEvents = /**
     * @private
     * @return {?}
     */
    function () {
        //   this.ngzone.runOutsideAngular(() => {
        this.documentClickEventListener = this.onDocumentClick.bind(this);
        document.addEventListener('click', this.documentClickEventListener);
        // 绑定被操作native时触发
        this.selfDefineEventListener = this.onSelfDefineHandler.bind(this);
        this._seflEl.addEventListener('selfClose', this.selfDefineEventListener);
        // });
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.onSelfDefineHandler = /**
     * @private
     * @return {?}
     */
    function () {
        this.close();
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.unbindDocumentEvents = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.documentClickEventListener) {
            document.removeEventListener('click', this.documentClickEventListener);
            this.documentClickEventListener = null;
        }
        if (this.selfDefineEventListener) {
            this._seflEl.removeEventListener('selfClose', this.selfDefineEventListener);
            this.selfDefineEventListener = null;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FDropdownDirective.prototype.onDocumentClick = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // 如果已经关闭，不需要再响应
        if (!this._internalOpen) {
            return;
        }
        if (event.button !== 2 && !this.isEventFromToggle(event)) {
            this.close();
        }
    };
    // 判断menu展开时是否要计算
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.needToCalculate = 
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    function () {
        return this.autoRectify && this._calculateMenu;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FDropdownDirective.prototype.resetCalculate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._calculateMenu = value;
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.open = /**
     * @return {?}
     */
    function () {
        if (!this._internalOpen) {
            this.closeSiblingDropdowns();
            this._calculateMenu = true;
            this.render.addClass(this._seflEl, 'show');
            this.isOpenState.next(true);
            this.dpChangeEvent.emit(true);
            // 执行绑定事件
            this.bindDocumentEvents();
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    FDropdownDirective.prototype.close = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        if (this._internalOpen) {
            this._calculateMenu = false;
            this.render.removeClass(this._seflEl, 'show');
            if (emit) {
                this.isOpenState.next(false);
                this.dpChangeEvent.emit(false);
            }
            this.unbindDocumentEvents();
        }
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this._internalOpen) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.getOpenState = /**
     * @return {?}
     */
    function () {
        return this.isOpenState;
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.isOpenState.unsubscribe();
        this.unbindDocumentEvents();
        /** @type {?} */
        var menuels = this.menuEls.get(this._seflEl);
        if (menuels && menuels.length) {
            menuels.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                element.remove();
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.closeSiblingDropdowns = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dpParentEl = this._seflEl.parentNode;
        if (dpParentEl && dpParentEl['className'].indexOf('dropdown-menu') > -1) {
            /** @type {?} */
            var dropdowns = dpParentEl.querySelectorAll('[fDropdown]');
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf('show')) {
                        // 触发事件试试
                        this.compatibleDispatchEvent(dropdowns[k], 'selfClose');
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    FDropdownDirective.prototype.compatibleDispatchEvent = /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    function (eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    FDropdownDirective.prototype._getClsName = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var className = '';
        switch (position) {
            case 'top-right':
            case 'top':
                // 朝上，朝上-朝右
                className = 'dropup';
                break;
            case 'top-left':
                // 朝上-朝左
                className = 'dropup-left';
                break;
            case 'left-bottom':
            case 'left':
                // 横向——朝左——朝下
                className = 'dropleft';
                break;
            case 'left-top':
                // 横向——朝左——朝上
                className = 'dropleft-up';
                break;
            case 'right-bottom':
            case 'right':
                // 横向——朝右——朝下
                className = 'dropright';
                break;
            case 'right-top':
                // 横向——朝右——朝上
                className = 'dropright-up';
                break;
            case 'bottom-left':
                // 朝下——朝左
                className = 'dropdown-left';
                break;
            case 'bottom-right':
                className = 'dropdown';
                break;
            default:
                // 朝下，朝下——朝右
                className = 'dropdown';
        }
        return className;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FDropdownDirective.prototype.isEventFromToggle = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var result = this.toggleElement && this.toggleElement.contains(event.target);
        return result;
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.getRectifyReferenceEl = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var resultWidth = window.innerWidth;
        /** @type {?} */
        var resultHeight = window.innerHeight;
        // 横向计算
        if (this.rectifyReference) {
            resultWidth = this.rectifyReference.getBoundingClientRect().right;
        }
        // 纵向计算
        if (this.rectifyReferenceV) {
            resultWidth = this.rectifyReference.getBoundingClientRect().bottom;
        }
        return { width: resultWidth, height: resultHeight };
    };
    /**
     * @param {?} menuEl
     * @return {?}
     */
    FDropdownDirective.prototype.appendMenuEl = /**
     * @param {?} menuEl
     * @return {?}
     */
    function (menuEl) {
        /** @type {?} */
        var m = this.menuEls.get(menuEl) || [];
        m.push(menuEl);
        this.menuEls.set(this._seflEl, m);
    };
    FDropdownDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fDropdown]',
                    exportAs: 'fDropdown'
                },] }
    ];
    /** @nocollapse */
    FDropdownDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FDropdownDirective.propDecorators = {
        rectifyReference: [{ type: Input }],
        rectifyReferenceV: [{ type: Input }],
        autoRectify: [{ type: Input }],
        forceState: [{ type: Input, args: ['forceState',] }],
        openState: [{ type: Input, args: ['open',] }],
        dpChangeEvent: [{ type: Output }],
        isSubDP: [{ type: Input }],
        placement: [{ type: Input, args: ['placement',] }],
        submenuCls: [{ type: HostBinding, args: ['class.dropdown-submenu',] }],
        dropdownCls: [{ type: HostBinding, args: ['class.dropdown',] }]
    };
    return FDropdownDirective;
}());
export { FDropdownDirective };
if (false) {
    /** @type {?} */
    FDropdownDirective.prototype.toggleElement;
    /** @type {?} */
    FDropdownDirective.prototype.documentClickEventListener;
    /** @type {?} */
    FDropdownDirective.prototype.selfDefineEventListener;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._seflEl;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._internalOpen;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._calculateMenu;
    /** @type {?} */
    FDropdownDirective.prototype.rectifyReference;
    /** @type {?} */
    FDropdownDirective.prototype.rectifyReferenceV;
    /** @type {?} */
    FDropdownDirective.prototype.autoRectify;
    /** @type {?} */
    FDropdownDirective.prototype.dpChangeEvent;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._placement;
    /** @type {?} */
    FDropdownDirective.prototype.isSubDP;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.isOpenState;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.menuEls;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,