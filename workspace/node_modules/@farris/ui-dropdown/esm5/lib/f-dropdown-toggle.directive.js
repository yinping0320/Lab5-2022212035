/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener, ElementRef, Input, } from "@angular/core";
import { FDropdownDirective } from "./f-dropdown.directive";
var FDropdownToggleDirective = /** @class */ (function () {
    function FDropdownToggleDirective(dropdown, elementRef) {
        var _this = this;
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this._disabled = false;
        this.haspopup = true;
        this.nativeEle = null;
        dropdown.toggleElement = elementRef.nativeElement;
        this.nativeEle = elementRef.nativeElement;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (_this.dropdown.isSubDP && _this.dropdown.isOpen) {
                if (_this.nativeEle.className.indexOf("active") < 0) {
                    _this.nativeEle.className += " active";
                }
            }
            else {
                if (_this.nativeEle.className.indexOf("active") > -1) {
                    _this.nativeEle.className = _this.nativeEle.className.replace(" active", " ");
                }
            }
        }));
    }
    Object.defineProperty(FDropdownToggleDirective.prototype, "dpDisabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownToggleDirective.prototype, "disableCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ev
     * @return {?}
     */
    FDropdownToggleDirective.prototype.onclick = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this._disabled) {
            return;
        }
        if (this.dropdown.isSubDP) {
            ev.stopImmediatePropagation();
        }
        this.dropdown.toggle();
    };
    FDropdownToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[fDropdownToggle]",
                },] }
    ];
    /** @nocollapse */
    FDropdownToggleDirective.ctorParameters = function () { return [
        { type: FDropdownDirective },
        { type: ElementRef }
    ]; };
    FDropdownToggleDirective.propDecorators = {
        dpDisabled: [{ type: Input }],
        disableCls: [{ type: HostBinding, args: ["class.disabled",] }],
        haspopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
        onclick: [{ type: HostListener, args: ["click", ["$event"],] }]
    };
    return FDropdownToggleDirective;
}());
export { FDropdownToggleDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype._disabled;
    /** @type {?} */
    FDropdownToggleDirective.prototype.haspopup;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.nativeEle;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.dropdown;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kcm9wZG93bi8iLCJzb3VyY2VzIjpbImxpYi9mLWRyb3Bkb3duLXRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBRVQsV0FBVyxFQUNYLFlBQVksRUFDWixVQUFVLEVBRVYsS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVEO0lBMEJJLGtDQUNZLFFBQTRCLEVBQzVCLFVBQXNCO1FBRmxDLGlCQW9CQztRQW5CVyxhQUFRLEdBQVIsUUFBUSxDQUFvQjtRQUM1QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBeEIxQixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBVVMsYUFBUSxHQUFHLElBQUksQ0FBQztRQVczQyxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBS3JCLFFBQVEsQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxLQUFjO1lBQ2xELElBQUksS0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksS0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Z0JBQy9DLElBQUksS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDaEQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDO2lCQUN6QzthQUNKO2lCQUFNO2dCQUNILElBQUksS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNqRCxLQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQ3ZELFNBQVMsRUFDVCxHQUFHLENBQ04sQ0FBQztpQkFDTDthQUNKO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDO0lBekNELHNCQUNJLGdEQUFVOzs7OztRQURkLFVBQ2UsS0FBYztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUMzQixDQUFDOzs7T0FBQTtJQUNELHNCQUNJLGdEQUFVOzs7O1FBRGQ7WUFFSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7Ozs7O0lBSUQsMENBQU87Ozs7SUFEUCxVQUNRLEVBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLE9BQU87U0FDVjtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDdkIsRUFBRSxDQUFDLHdCQUF3QixFQUFFLENBQUM7U0FDakM7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7O2dCQXhCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtpQkFDaEM7Ozs7Z0JBSlEsa0JBQWtCO2dCQUp2QixVQUFVOzs7NkJBV1QsS0FBSzs2QkFJTCxXQUFXLFNBQUMsZ0JBQWdCOzJCQUs1QixXQUFXLFNBQUMsb0JBQW9COzBCQUNoQyxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztJQWdDckMsK0JBQUM7Q0FBQSxBQS9DRCxJQStDQztTQTVDWSx3QkFBd0I7Ozs7OztJQUNqQyw2Q0FBMEI7O0lBVTFCLDRDQUFtRDs7Ozs7SUFXbkQsNkNBQXlCOzs7OztJQUVyQiw0Q0FBb0M7Ozs7O0lBQ3BDLDhDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBIb3N0LFxyXG4gICAgSG9zdEJpbmRpbmcsXHJcbiAgICBIb3N0TGlzdGVuZXIsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgUmVuZGVyZXIyLFxyXG4gICAgSW5wdXQsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRkRyb3Bkb3duRGlyZWN0aXZlIH0gZnJvbSBcIi4vZi1kcm9wZG93bi5kaXJlY3RpdmVcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiW2ZEcm9wZG93blRvZ2dsZV1cIixcclxufSlcclxuZXhwb3J0IGNsYXNzIEZEcm9wZG93blRvZ2dsZURpcmVjdGl2ZSB7XHJcbiAgICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBkcERpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIEBIb3N0QmluZGluZyhcImNsYXNzLmRpc2FibGVkXCIpXHJcbiAgICBnZXQgZGlzYWJsZUNscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKFwiYXR0ci5hcmlhLWhhc3BvcHVwXCIpIGhhc3BvcHVwID0gdHJ1ZTtcclxuICAgIEBIb3N0TGlzdGVuZXIoXCJjbGlja1wiLCBbXCIkZXZlbnRcIl0pXHJcbiAgICBvbmNsaWNrKGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24uaXNTdWJEUCkge1xyXG4gICAgICAgICAgICBldi5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kcm9wZG93bi50b2dnbGUoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgbmF0aXZlRWxlID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgZHJvcGRvd246IEZEcm9wZG93bkRpcmVjdGl2ZSxcclxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWZcclxuICAgICkge1xyXG4gICAgICAgIGRyb3Bkb3duLnRvZ2dsZUVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5uYXRpdmVFbGUgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5kcm9wZG93bi5nZXRPcGVuU3RhdGUoKS5zdWJzY3JpYmUoKHN0YXRlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRyb3Bkb3duLmlzU3ViRFAgJiYgdGhpcy5kcm9wZG93bi5pc09wZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUuaW5kZXhPZihcImFjdGl2ZVwiKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lLmluZGV4T2YoXCJhY3RpdmVcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRWxlLmNsYXNzTmFtZSA9IHRoaXMubmF0aXZlRWxlLmNsYXNzTmFtZS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBhY3RpdmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCIgXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19