import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CommonUtils, OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { Directive, Input, Output, HostBinding, EventEmitter, ElementRef, Renderer2, HostListener, NgModule, Component, ContentChild } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FDropdownDirective = /** @class */ (function () {
    function FDropdownDirective(elementRef, render) {
        var _this = this;
        this.elementRef = elementRef;
        this.render = render;
        // tslint:disable-next-line:no-input-rename
        this._internalOpen = false;
        // 计算宽度
        this._calculateMenu = false;
        // 是否自动纠正位置
        this.autoRectify = false;
        this.dpChangeEvent = new EventEmitter();
        this._placement = 'bottom'; // 记录 position
        // 记录 position
        this.isSubDP = false; // 是否是子下拉
        this.isOpenState = new Subject();
        this.menuEls = new WeakMap();
        this._seflEl = this.elementRef.nativeElement;
        this.isOpenState.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (_this._internalOpen !== state) {
                _this._internalOpen = state;
                if (_this._internalOpen) {
                    _this.render.addClass(_this._seflEl, 'show');
                }
                else {
                    _this.render.removeClass(_this._seflEl, 'show');
                }
            }
        }));
    }
    Object.defineProperty(FDropdownDirective.prototype, "forceState", {
        // 在外面强制控制关闭状态
        set: 
        // 在外面强制控制关闭状态
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value.length) {
                this.close();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "openState", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._internalOpen = value[0];
            this.isOpenState.next(value[0]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "placement", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placement;
        },
        set: 
        // 是否是子下拉
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // 如果相等
            if (!value) {
                return;
            }
            //
            if (value !== this._placement) {
                /** @type {?} */
                var newClsName = this._getClsName(value);
                /** @type {?} */
                var oldClsName = this._getClsName(this._placement);
                this.render.removeClass(this._seflEl, oldClsName);
                this.render.addClass(this._seflEl, newClsName);
                this._placement = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "isOpen", {
        // @HostBinding('class.show')
        get: 
        // @HostBinding('class.show')
        /**
         * @return {?}
         */
        function () {
            return this._internalOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "submenuCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSubDP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownDirective.prototype, "dropdownCls", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isSubDP;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.getNativeElement = /**
     * @return {?}
     */
    function () {
        return this._seflEl;
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.bindDocumentEvents = /**
     * @private
     * @return {?}
     */
    function () {
        //   this.ngzone.runOutsideAngular(() => {
        this.documentClickEventListener = this.onDocumentClick.bind(this);
        document.addEventListener('click', this.documentClickEventListener);
        // 绑定被操作native时触发
        this.selfDefineEventListener = this.onSelfDefineHandler.bind(this);
        this._seflEl.addEventListener('selfClose', this.selfDefineEventListener);
        // });
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.onSelfDefineHandler = /**
     * @private
     * @return {?}
     */
    function () {
        this.close();
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.unbindDocumentEvents = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.documentClickEventListener) {
            document.removeEventListener('click', this.documentClickEventListener);
            this.documentClickEventListener = null;
        }
        if (this.selfDefineEventListener) {
            this._seflEl.removeEventListener('selfClose', this.selfDefineEventListener);
            this.selfDefineEventListener = null;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FDropdownDirective.prototype.onDocumentClick = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // 如果已经关闭，不需要再响应
        if (!this._internalOpen) {
            return;
        }
        if (event.button !== 2 && !this.isEventFromToggle(event)) {
            this.close();
        }
    };
    // 判断menu展开时是否要计算
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.needToCalculate = 
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    function () {
        return this.autoRectify && this._calculateMenu;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FDropdownDirective.prototype.resetCalculate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._calculateMenu = value;
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.open = /**
     * @return {?}
     */
    function () {
        if (!this._internalOpen) {
            this.closeSiblingDropdowns();
            this._calculateMenu = true;
            this.render.addClass(this._seflEl, 'show');
            this.isOpenState.next(true);
            this.dpChangeEvent.emit(true);
            // 执行绑定事件
            this.bindDocumentEvents();
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    FDropdownDirective.prototype.close = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        if (this._internalOpen) {
            this._calculateMenu = false;
            this.render.removeClass(this._seflEl, 'show');
            if (emit) {
                this.isOpenState.next(false);
                this.dpChangeEvent.emit(false);
            }
            this.unbindDocumentEvents();
        }
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this._internalOpen) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.getOpenState = /**
     * @return {?}
     */
    function () {
        return this.isOpenState;
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.isOpenState.unsubscribe();
        this.unbindDocumentEvents();
        /** @type {?} */
        var menuels = this.menuEls.get(this._seflEl);
        if (menuels && menuels.length) {
            menuels.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                element.remove();
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownDirective.prototype.closeSiblingDropdowns = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dpParentEl = this._seflEl.parentNode;
        if (dpParentEl && dpParentEl['className'].indexOf('dropdown-menu') > -1) {
            /** @type {?} */
            var dropdowns = dpParentEl.querySelectorAll('[fDropdown]');
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf('show')) {
                        // 触发事件试试
                        this.compatibleDispatchEvent(dropdowns[k], 'selfClose');
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    FDropdownDirective.prototype.compatibleDispatchEvent = /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    function (eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    FDropdownDirective.prototype._getClsName = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var className = '';
        switch (position) {
            case 'top-right':
            case 'top':
                // 朝上，朝上-朝右
                className = 'dropup';
                break;
            case 'top-left':
                // 朝上-朝左
                className = 'dropup-left';
                break;
            case 'left-bottom':
            case 'left':
                // 横向——朝左——朝下
                className = 'dropleft';
                break;
            case 'left-top':
                // 横向——朝左——朝上
                className = 'dropleft-up';
                break;
            case 'right-bottom':
            case 'right':
                // 横向——朝右——朝下
                className = 'dropright';
                break;
            case 'right-top':
                // 横向——朝右——朝上
                className = 'dropright-up';
                break;
            case 'bottom-left':
                // 朝下——朝左
                className = 'dropdown-left';
                break;
            case 'bottom-right':
                className = 'dropdown';
                break;
            default:
                // 朝下，朝下——朝右
                className = 'dropdown';
        }
        return className;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FDropdownDirective.prototype.isEventFromToggle = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var result = this.toggleElement && this.toggleElement.contains(event.target);
        return result;
    };
    /**
     * @return {?}
     */
    FDropdownDirective.prototype.getRectifyReferenceEl = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var resultWidth = window.innerWidth;
        /** @type {?} */
        var resultHeight = window.innerHeight;
        // 横向计算
        if (this.rectifyReference) {
            resultWidth = this.rectifyReference.getBoundingClientRect().right;
        }
        // 纵向计算
        if (this.rectifyReferenceV) {
            resultWidth = this.rectifyReference.getBoundingClientRect().bottom;
        }
        return { width: resultWidth, height: resultHeight };
    };
    /**
     * @param {?} menuEl
     * @return {?}
     */
    FDropdownDirective.prototype.appendMenuEl = /**
     * @param {?} menuEl
     * @return {?}
     */
    function (menuEl) {
        /** @type {?} */
        var m = this.menuEls.get(menuEl) || [];
        m.push(menuEl);
        this.menuEls.set(this._seflEl, m);
    };
    FDropdownDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fDropdown]',
                    exportAs: 'fDropdown'
                },] }
    ];
    /** @nocollapse */
    FDropdownDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FDropdownDirective.propDecorators = {
        rectifyReference: [{ type: Input }],
        rectifyReferenceV: [{ type: Input }],
        autoRectify: [{ type: Input }],
        forceState: [{ type: Input, args: ['forceState',] }],
        openState: [{ type: Input, args: ['open',] }],
        dpChangeEvent: [{ type: Output }],
        isSubDP: [{ type: Input }],
        placement: [{ type: Input, args: ['placement',] }],
        submenuCls: [{ type: HostBinding, args: ['class.dropdown-submenu',] }],
        dropdownCls: [{ type: HostBinding, args: ['class.dropdown',] }]
    };
    return FDropdownDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FDropdownMenuDirective = /** @class */ (function () {
    function FDropdownMenuDirective(elementRef, dropdown) {
        var _this = this;
        this.elementRef = elementRef;
        this.dropdown = dropdown;
        this._docRect = { width: 0, height: 0 };
        this.showDropdownMenu = true;
        // 内部使用，在不变更依赖的情况下，触发改变
        this.dpIsOpen = false;
        this.overLayService = null;
        this.overLayService = new OverLayHiddenService();
        this.commonUtils = new CommonUtils();
        this.dropdown.getOpenState().pipe(debounceTime(50)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            /** @type {?} */
            var ddmel = _this.dropdown.getNativeElement();
            _this.dpIsOpen = _this.dropdown.isOpen;
            if (_this.issubMenu()) {
                if (state && !_this.dpIsOpen && _this.elementRef.nativeElement.className.indexOf("show") < 0) {
                    _this.dpIsOpen = true;
                }
                /** @type {?} */
                var dropdownMenus = _this.dropdown.getNativeElement().closest('.dropdown-menu');
                if (dropdownMenus) {
                    /** @type {?} */
                    var showMenus = dropdownMenus.querySelectorAll('.show');
                    showMenus.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        element.classList.remove('show');
                        element.style.cssText = '';
                    }));
                }
            }
            if (_this.dpIsOpen) {
                // 注册鼠标滚轮，点击事件，用于隐藏Panel
                _this.overLayService.registerMouseEvent(ddmel, (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var tar = (/** @type {?} */ (e.target));
                    /** @type {?} */
                    var classList = Array.from(tar.classList || []);
                    if (classList.includes('dropdown-toggle') || tar.closest('.dropdown-item') || classList.includes("dropdown-item") ||
                        (_this.dropdown.getNativeElement().contains(tar) && e.type !== "mousewheel") || _this.elementRef.nativeElement.contains(tar)) {
                        return;
                    }
                    _this.dpIsOpen = false;
                    _this.dropdown.close(false);
                    _this.openStateChange();
                }));
            }
            else {
                _this.dropdown.close(false);
                _this.overLayService.destory(ddmel);
            }
            _this.openStateChange();
        }));
    }
    /**
     * @return {?}
     */
    FDropdownMenuDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @param {?} pment
     * @return {?}
     */
    FDropdownMenuDirective.prototype.getRealPlacement = /**
     * @private
     * @param {?} pment
     * @return {?}
     */
    function (pment) {
        /** @type {?} */
        var result = "bottom-right";
        switch (pment) {
            case "top":
                result = "top-right";
                break;
            case "left":
                result = "left-bottom";
                break;
            case "right":
                result = "right-bottom";
                break;
            case "bottom":
                result = "bottom-right";
                break;
            default:
                result = pment;
        }
        return result;
    };
    /**
     * @return {?}
     */
    FDropdownMenuDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownMenuDirective.prototype.openStateChange = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dpIsOpen) {
            if (this.elementRef.nativeElement.className.indexOf("show") < 0) {
                document.body.style.overflow = 'hidden';
                this.elementRef.nativeElement.style.visibility = 'hidden';
                this.elementRef.nativeElement.className += " show";
                if (this.dropdown.needToCalculate()) {
                    this._docRect = this.dropdown.getRectifyReferenceEl();
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.changeDirection();
                    document.body.style.overflow = '';
                    _this.elementRef.nativeElement.style.visibility = 'visible';
                }), 0);
            }
        }
        else {
            if (this.elementRef.nativeElement.className.indexOf("show") > -1) {
                this.elementRef.nativeElement.className = this.elementRef.nativeElement.className.replace(' show', ' ');
                this.elementRef.nativeElement.style.cssText = '';
            }
            /** @type {?} */
            var submenu = this.elementRef.nativeElement.querySelectorAll('.dropdown-menu');
            if (submenu && submenu.length) {
                submenu.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    element.classList.remove('show');
                    element.style.cssText = '';
                }));
            }
            /** @type {?} */
            var showItem = this.elementRef.nativeElement.querySelector('.show');
            if (showItem) {
                showItem.classList.remove('show');
            }
            /** @type {?} */
            var activeItem = this.elementRef.nativeElement.querySelector('.active');
            if (activeItem) {
                activeItem.classList.remove('active');
            }
            this.dropdown['_internalOpen'] = false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownMenuDirective.prototype.changeDirection = /**
     * @private
     * @return {?}
     */
    function () {
        // if (this.dropdown.needToCalculate()) {
        //     const rect = this.elementRef.nativeElement.getBoundingClientRect();
        //     let placement = this.dropdown.placement;
        //     let newplacement = this.getRealPlacement(placement);
        //     placement = newplacement;
        //     //
        //     if (
        //         newplacement.indexOf("right") > -1 &&
        //         rect.right > this._docRect.width
        //     ) {
        //         placement = placement.replace("right", "left");
        //     }
        //     if (
        //         newplacement.indexOf("left") > -1 &&
        //         rect.left - rect.width < 0
        //     ) {
        //         placement = placement.replace("left", "right");
        //     }
        //     if (
        //         newplacement.indexOf("bottom") > -1 &&
        //         rect.bottom > this._docRect.height
        //     ) {
        //         placement = placement.replace("down", "up");
        //     }
        //     if (
        //         newplacement.indexOf("up") > -1 &&
        //         rect.bottom - rect.height < 0
        //     ) {
        //         placement = placement.replace("up", "bottom");
        //     }
        //     if (newplacement !== this.dropdown.placement) {
        //         this.dropdown.placement = newplacement;
        //     }
        //     if (placement !== newplacement) {
        //         this.dropdown.placement = placement;
        //     }
        //     this.dropdown.resetCalculate(false);
        // }
        this.setMenuPanelPosition();
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownMenuDirective.prototype.issubMenu = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dd = this.dropdown.getNativeElement();
        return dd.className.indexOf('dropdown-submenu') > -1 || dd.closest('.dropdown-submenu') || dd.classList.contains('dropright');
    };
    /**
     * @private
     * @return {?}
     */
    FDropdownMenuDirective.prototype.setMenuPanelPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parentMenuPanel = this.dropdown.getNativeElement();
        var _a = parentMenuPanel.getBoundingClientRect(), height = _a.height, left = _a.left, top = _a.top, width = _a.width;
        var _b = getComputedStyle(this.elementRef.nativeElement), menuMt = _b.marginTop, menuMb = _b.marginBottom;
        var _c = this.elementRef.nativeElement.getBoundingClientRect(), pw = _c.width, ph = _c.height;
        /** @type {?} */
        var _maxHeight = 0;
        /** @type {?} */
        var tMenuMargin = Math.ceil(parseFloat(menuMt)) + Math.ceil(parseFloat(menuMb));
        /** @type {?} */
        var _top = top + height;
        /** @type {?} */
        var _left = left;
        if (window.innerHeight - top - height - tMenuMargin < ph) {
            _top = top - ph;
            if (_top < 0) {
                //当前的界面容不下menu上的按钮，限制menu的高度
                _top = 10;
                _maxHeight = top - _top - tMenuMargin;
            }
        }
        if (window.innerWidth - left - width < pw) {
            _left = left - pw + width;
        }
        if (!this.issubMenu()) {
            document.body.append(this.elementRef.nativeElement);
            this.dropdown.appendMenuEl(this.elementRef.nativeElement);
            this.elementRef.nativeElement.style.cssText = "position:fixed;bottom:unset;left:" + _left + "px !important;top:" + _top + "px !important;right: unset;max-height:" + (_maxHeight ? _maxHeight + 'px;overflow:auto' : 'none');
            this.elementRef.nativeElement.style.zIndex = this.commonUtils.getFloatingLayerIndex();
            // if (this.elementRef.nativeElement.classList.contains('solution-header-title-menu')) {
            //     this.elementRef.nativeElement.classList.add('query-solution');
            // }
            // const solutionBtns = this.elementRef.nativeElement.querySelector('.solution-header-dropdown-item-btns');
            // if (solutionBtns && !solutionBtns.classList.contains('dropdown-item')) {
            //     solutionBtns.classList.add('dropdown-item');
            // }
        }
        else {
            /** @type {?} */
            var childContainerWidth = window.innerWidth - left - parentMenuPanel.offsetWidth;
            /** @type {?} */
            var childMenuPanel = this.elementRef.nativeElement;
            if (childMenuPanel.offsetWidth > childContainerWidth) {
                /** @type {?} */
                var l = -pw;
                childMenuPanel.style.left = l + 'px';
            }
            /** @type {?} */
            var childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;
            if (childContainerHeight < childMenuPanel.offsetHeight) {
                /** @type {?} */
                var t = window.innerHeight - top - childMenuPanel.offsetHeight - 10;
                childMenuPanel.style.top = t + 'px';
            }
        }
    };
    FDropdownMenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[fDropdownMenu]",
                },] }
    ];
    /** @nocollapse */
    FDropdownMenuDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FDropdownDirective }
    ]; };
    FDropdownMenuDirective.propDecorators = {
        showDropdownMenu: [{ type: HostBinding, args: ["class.dropdown-menu",] }],
        dpIsOpen: [{ type: Input }]
    };
    return FDropdownMenuDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FDropdownToggleDirective = /** @class */ (function () {
    function FDropdownToggleDirective(dropdown, elementRef) {
        var _this = this;
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this._disabled = false;
        this.haspopup = true;
        this.nativeEle = null;
        dropdown.toggleElement = elementRef.nativeElement;
        this.nativeEle = elementRef.nativeElement;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (_this.dropdown.isSubDP && _this.dropdown.isOpen) {
                if (_this.nativeEle.className.indexOf("active") < 0) {
                    _this.nativeEle.className += " active";
                }
            }
            else {
                if (_this.nativeEle.className.indexOf("active") > -1) {
                    _this.nativeEle.className = _this.nativeEle.className.replace(" active", " ");
                }
            }
        }));
    }
    Object.defineProperty(FDropdownToggleDirective.prototype, "dpDisabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownToggleDirective.prototype, "disableCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ev
     * @return {?}
     */
    FDropdownToggleDirective.prototype.onclick = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this._disabled) {
            return;
        }
        if (this.dropdown.isSubDP) {
            ev.stopImmediatePropagation();
        }
        this.dropdown.toggle();
    };
    FDropdownToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[fDropdownToggle]",
                },] }
    ];
    /** @nocollapse */
    FDropdownToggleDirective.ctorParameters = function () { return [
        { type: FDropdownDirective },
        { type: ElementRef }
    ]; };
    FDropdownToggleDirective.propDecorators = {
        dpDisabled: [{ type: Input }],
        disableCls: [{ type: HostBinding, args: ["class.disabled",] }],
        haspopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
        onclick: [{ type: HostListener, args: ["click", ["$event"],] }]
    };
    return FDropdownToggleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var _DROPDOWN_DIRECTIVES = [
    FDropdownDirective,
    FDropdownMenuDirective,
    FDropdownToggleDirective
];
var FDropdownDirectiveTypeModule = /** @class */ (function () {
    function FDropdownDirectiveTypeModule() {
    }
    FDropdownDirectiveTypeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FarrisCommonModule
                    ],
                    declarations: _DROPDOWN_DIRECTIVES,
                    exports: _DROPDOWN_DIRECTIVES
                },] }
    ];
    return FDropdownDirectiveTypeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisDropdownComponent = /** @class */ (function () {
    function FarrisDropdownComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // 下拉框类型
        // tslint:disable-next-line:no-inferrable-types
        this.type = 'primary';
        // 点击列表项目后是否关闭列表项
        // tslint:disable-next-line:no-input-rename
        // tslint:disable-next-line:no-inferrable-types
        this.hideOnClick = true;
        // 按钮组
        // tslint:disable-next-line:no-input-rename
        this.splitButton = false;
        // 列表显示位置
        this.position = 'bottom';
        // 列表项数据
        this.model = [
            { label: '项目一', value: 'asdasd' },
            { label: '项目二', value: 'asdasd' },
            { label: '项目三', value: 'asdasd' }
        ];
        // 按钮分组之后  左边按钮事件
        // tslint:disable-next-line:no-output-rename
        this.leftClick = new EventEmitter();
        this.select = new EventEmitter();
        // 下拉列表显示或者隐藏触发的事件
        // tslint:disable-next-line:no-output-rename
        this.visibleChange = new EventEmitter();
        // 列表项的显示与否
        this.show = false;
    }
    Object.defineProperty(FarrisDropdownComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: /**
         * @param {?} width
         * @return {?}
         */
        function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisDropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.menu = this.el.nativeElement.querySelector('.dropdown-menu');
    };
    /**
     * @return {?}
     */
    FarrisDropdownComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FarrisDropdownComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    };
    // 点击列表项显示与否
    // 点击列表项显示与否
    /**
     * @param {?=} event
     * @return {?}
     */
    FarrisDropdownComponent.prototype.showDropMenu = 
    // 点击列表项显示与否
    /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.hover) {
            return;
        }
        if (event) {
            event.stopPropagation();
        }
        this.show = !this.show;
        this.visibleChange.emit();
        this.globalListenFunc = this.renderer.listen('document', 'click', (/**
         * @return {?}
         */
        function () {
            _this.closeDropMenu();
        }));
        // 如果不设置hide-on-click,则说明点击下拉之后下拉不消失
        if (!this.hideOnClick) {
            this.menuListenFunc = this.renderer.listen(this.menu, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
            }));
        }
    };
    // 点击元素之外  列表项消失
    // 点击元素之外  列表项消失
    /**
     * @return {?}
     */
    FarrisDropdownComponent.prototype.closeDropMenu = 
    // 点击元素之外  列表项消失
    /**
     * @return {?}
     */
    function () {
        if (this.hover) {
            return;
        }
        this.show = false;
        this.visibleChange.emit();
        // 解除事件绑定
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
        if (this.menuListenFunc) {
            this.menuListenFunc();
        }
    };
    // hover 实现
    // hover 实现
    /**
     * @return {?}
     */
    FarrisDropdownComponent.prototype.hoverDropdown = 
    // hover 实现
    /**
     * @return {?}
     */
    function () {
        if (!this.hover) {
            return;
        }
        this.show = !this.show;
        this.visibleChange.emit();
    };
    /**
     * 弹出事件
     */
    /**
     * 弹出事件
     * @param {?} model
     * @return {?}
     */
    FarrisDropdownComponent.prototype.selectItem = /**
     * 弹出事件
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.select.emit(model);
    };
    /**
     * @return {?}
     */
    FarrisDropdownComponent.prototype.leftButtonClick = /**
     * @return {?}
     */
    function () {
        this.leftClick.emit();
    };
    /**
     * @param {?} size
     * @return {?}
     */
    FarrisDropdownComponent.prototype.resolveSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size)
            ? "" + parseInt(size, 10) + size.match(regex)[0]
            : size + "px";
    };
    FarrisDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-dropdown',
                    template: "\n        <div\n            class=\"farris-dropdown btn-group\"\n            [class.dropup]=\"position === 'top'\"\n            [class.dropdown]=\"position === 'bottom'\"\n            [class.dropleft]=\"position === 'left'\"\n            [class.dropright]=\"position === 'right'\"\n            [style.width]=\"width\"\n        >\n            <span\n                [class.btn]=\"!nest\"\n                [class.dropdown-item]=\"nest\"\n                [class.btn-lg]=\"size === 'large'\"\n                [class.btn-sm]=\"size === 'small'\"\n                [class.btn-primary]=\"type === 'primary'\"\n                [class.btn-success]=\"type === 'success'\"\n                [class.btn-warning]=\"type === 'warning'\"\n                [class.btn-danger]=\"type === 'danger'\"\n                [class.btn-info]=\"type === 'info'\"\n                (click)=\"leftButtonClick()\"\n                style=\"width:100%\"\n                *ngIf=\"splitButton\"\n                >{{ title }}</span\n            >\n            <span\n                class=\"dropdown-toggle\"\n                [class.btn]=\"!nest\"\n                [class.dropdown-item]=\"nest\"\n                [class.dropdown-toggle-split]=\"splitButton\"\n                [class.btn-lg]=\"size === 'large'\"\n                [class.btn-sm]=\"size === 'small'\"\n                [class.btn-primary]=\"type === 'primary'\"\n                [class.btn-success]=\"type === 'success'\"\n                [class.btn-warning]=\"type === 'warning'\"\n                [class.btn-danger]=\"type === 'danger'\"\n                [class.btn-info]=\"type === 'info'\"\n                [class.btn-secondary]=\"type === 'secondary'\"\n                (click)=\"showDropMenu($event)\"\n                (mouseenter)=\"hoverDropdown()\"\n                (mouseleave)=\"hoverDropdown()\"\n                style=\"width:100%\"\n            >\n                <span class=\"sr-only\" *ngIf=\"splitButton\"></span>\n                {{ splitButton ? '' : title }}\n            </span>\n            <div class=\"dropdown-menu\" [class.show]=\"show\">\n                <ng-template [ngTemplateOutlet]=\"dropdownTempl\"></ng-template>\n                <farris-dropdown-item\n                    *ngFor=\"let item of model\"\n                    [model]=\"item\"\n                    (select)=\"selectItem($event)\"\n                >\n                </farris-dropdown-item>\n            </div>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    FarrisDropdownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FarrisDropdownComponent.propDecorators = {
        nest: [{ type: Input }],
        width: [{ type: Input }],
        title: [{ type: Input }],
        hover: [{ type: Input }],
        size: [{ type: Input }],
        type: [{ type: Input }],
        hideOnClick: [{ type: Input, args: ['hide-on-click',] }],
        splitButton: [{ type: Input, args: ['split-button',] }],
        position: [{ type: Input }],
        model: [{ type: Input }],
        dropdownTempl: [{ type: ContentChild, args: ['dropdownTempl',] }],
        leftClick: [{ type: Output, args: ['left-click',] }],
        select: [{ type: Output }],
        visibleChange: [{ type: Output, args: ['visible-change',] }]
    };
    return FarrisDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisDropdownItemComponent = /** @class */ (function () {
    function FarrisDropdownItemComponent() {
        this.select = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FarrisDropdownItemComponent.prototype.selectItem = /**
     * @return {?}
     */
    function () {
        if (this.model.disabled) {
            return;
        }
        this.select.emit(this.model);
    };
    FarrisDropdownItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-dropdown-item',
                    template: "\n        <div class=\"dropdown-divider\" *ngIf=\"model.divide\"></div>\n        <a\n            class=\"dropdown-item\"\n            [class.active]=\"model.active\"\n            [class.disabled]=\"model.disabled\"\n            href=\"javascript:void(0)\"\n            (click)=\"selectItem()\"\n            >{{ model.label }}</a\n        >\n    "
                }] }
    ];
    FarrisDropdownItemComponent.propDecorators = {
        model: [{ type: Input }],
        select: [{ type: Output }]
    };
    return FarrisDropdownItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisDropdownModule = /** @class */ (function () {
    function FarrisDropdownModule() {
    }
    FarrisDropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        FarrisDropdownComponent,
                        FarrisDropdownItemComponent
                    ],
                    exports: [
                        FarrisDropdownComponent,
                        FarrisDropdownItemComponent
                    ]
                },] }
    ];
    return FarrisDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FDropdownDirectiveTypeModule, FDropdownMenuDirective, FDropdownToggleDirective, FDropdownDirective, FarrisDropdownComponent, FarrisDropdownItemComponent, FarrisDropdownModule };

//# sourceMappingURL=farris-ui-dropdown.js.map