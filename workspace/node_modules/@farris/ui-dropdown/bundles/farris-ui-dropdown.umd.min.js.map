{"version":3,"sources":["ng://@farris/ui-dropdown/lib/f-dropdown.directive.ts","ng://@farris/ui-dropdown/lib/f-dropdown-menu.directive.ts","ng://@farris/ui-dropdown/lib/f-dropdown-toggle.directive.ts","ng://@farris/ui-dropdown/lib/f-dropdown.module.ts","ng://@farris/ui-dropdown/lib/component/dropdown.component.ts","ng://@farris/ui-dropdown/lib/component/dropdown.item.component.ts","ng://@farris/ui-dropdown/lib/component/dropdown.module.ts"],"names":["FDropdownDirective","Object","defineProperty","prototype","value","length","this","close","_internalOpen","isOpenState","next","_placement","newClsName","_getClsName","oldClsName","render","removeClass","_seflEl","addClass","isSubDP","ngOnInit","getNativeElement","bindDocumentEvents","documentClickEventListener","onDocumentClick","bind","document","addEventListener","selfDefineEventListener","onSelfDefineHandler","unbindDocumentEvents","removeEventListener","event","button","isEventFromToggle","needToCalculate","autoRectify","_calculateMenu","resetCalculate","open","closeSiblingDropdowns","dpChangeEvent","emit","toggle","getOpenState","ngOnDestroy","unsubscribe","menuels","menuEls","get","forEach","element","remove","dpParentEl","parentNode","indexOf","dropdowns","querySelectorAll","k","className","compatibleDispatchEvent","eventEl","eventName","Event","createEvent","initEvent","dispatchEvent","position","toggleElement","contains","target","getRectifyReferenceEl","resultWidth","window","innerWidth","resultHeight","innerHeight","rectifyReference","getBoundingClientRect","right","rectifyReferenceV","bottom","width","height","appendMenuEl","menuEl","m","push","set","Directive","args","selector","exportAs","ElementRef","Renderer2","Input","Output","HostBinding","elementRef","_this","EventEmitter","Subject","WeakMap","nativeElement","subscribe","state","FDropdownMenuDirective","ngAfterViewChecked","getRealPlacement","pment","result","openStateChange","dpIsOpen","body","style","overflow","visibility","dropdown","_docRect","setTimeout","changeDirection","replace","cssText","submenu","classList","showItem","querySelector","activeItem","setMenuPanelPosition","issubMenu","dd","closest","parentMenuPanel","_a","left","top","_b","getComputedStyle","menuMt","marginTop","menuMb","marginBottom","_c","pw","ph","_maxHeight","tMenuMargin","Math","ceil","parseFloat","_top","_left","childContainerWidth","offsetWidth","childMenuPanel","l","offsetHeight","t","append","zIndex","commonUtils","getFloatingLayerIndex","showDropdownMenu","overLayService","OverLayHiddenService","CommonUtils","pipe","debounceTime","ddmel","isOpen","dropdownMenus","registerMouseEvent","e","tar","Array","from","includes","type","destory","FDropdownToggleDirective","_disabled","onclick","ev","stopImmediatePropagation","HostListener","haspopup","nativeEle","_DROPDOWN_DIRECTIVES","FDropdownDirectiveTypeModule","NgModule","imports","FarrisCommonModule","declarations","exports","FarrisDropdownComponent","_width","resolveSize","menu","el","ngAfterViewInit","globalListenFunc","showDropMenu","hover","stopPropagation","show","visibleChange","renderer","listen","closeDropMenu","hideOnClick","menuListenFunc","hoverDropdown","selectItem","model","select","leftButtonClick","leftClick","size","regex","test","parseInt","match","Component","template","ContentChild","splitButton","label","FarrisDropdownItemComponent","disabled","FarrisDropdownModule","CommonModule"],"mappings":"kgBAAA,IAAAA,GAgCIC,OAAAC,eACIF,EAAAG,UAAA,aAAU,KADd,SACeC,GAEPA,GAASA,EAAMC,QACfC,KAAKC,yCAIbN,OAAAC,eACIF,EAAAG,UAAA,YAAS,KADb,SACcC,GACVE,KAAKE,cAAgBJ,EAAM,GAC3BE,KAAKG,YAAYC,KAAKN,EAAM,qCAOhCH,OAAAC,eACIF,EAAAG,UAAA,YAAS,KAcb,WACI,OAAOG,KAAKK,gBAhBhB,SACcP,GAEV,GAAKA,GAIDA,IAAUE,KAAKK,WAAY,KACrBC,EAAaN,KAAKO,YAAYT,GAC9BU,EAAaR,KAAKO,YAAYP,KAAKK,YACzCL,KAAKS,OAAOC,YAAYV,KAAKW,QAASH,GACtCR,KAAKS,OAAOG,SAASZ,KAAKW,QAASL,GACnCN,KAAKK,WAAaP,oCAQ1BH,OAAAC,eAAIF,EAAAG,UAAA,SAAM,KAAV,WACI,OAAOG,KAAKE,+CAMhBP,OAAAC,eACIF,EAAAG,UAAA,aAAU,KADd,WAEI,OAAOG,KAAKa,yCAEhBlB,OAAAC,eACIF,EAAAG,UAAA,cAAW,KADf,WAEI,OAAQG,KAAKa,yCAsBjBnB,EAAAG,UAAAiB,SAAA,aAEApB,EAAAG,UAAAkB,iBAAA,WACI,OAAOf,KAAKW,SAERjB,EAAAG,UAAAmB,mBAAR,WAEIhB,KAAKiB,2BAA6BjB,KAAKkB,gBAAgBC,KAAKnB,MAC5DoB,SAASC,iBAAiB,QAASrB,KAAKiB,4BAExCjB,KAAKsB,wBAA0BtB,KAAKuB,oBAAoBJ,KAAKnB,MAC7DA,KAAKW,QAAQU,iBAAiB,YAAarB,KAAKsB,0BAI5C5B,EAAAG,UAAA0B,oBAAR,WACIvB,KAAKC,SAEDP,EAAAG,UAAA2B,qBAAR,WACQxB,KAAKiB,6BACLG,SAASK,oBACL,QACAzB,KAAKiB,4BAETjB,KAAKiB,2BAA6B,MAElCjB,KAAKsB,0BACLtB,KAAKW,QAAQc,oBACT,YACAzB,KAAKsB,yBAETtB,KAAKsB,wBAA0B,OAG/B5B,EAAAG,UAAAqB,gBAAR,SAAwBQ,GAEf1B,KAAKE,gBAGW,IAAjBwB,EAAMC,QAAiB3B,KAAK4B,kBAAkBF,IAC9C1B,KAAKC,UAKbP,EAAAG,UAAAgC,gBAAA,WACI,OAAO7B,KAAK8B,aAAe9B,KAAK+B,gBAEpCrC,EAAAG,UAAAmC,eAAA,SAAelC,GACXE,KAAK+B,eAAiBjC,GAE1BJ,EAAAG,UAAAoC,KAAA,WAESjC,KAAKE,gBACNF,KAAKkC,wBACLlC,KAAK+B,gBAAiB,EACtB/B,KAAKS,OAAOG,SAASZ,KAAKW,QAAS,QACnCX,KAAKG,YAAYC,MAAK,GACtBJ,KAAKmC,cAAcC,MAAK,GAExBpC,KAAKgB,uBAIbtB,EAAAG,UAAAI,MAAA,SAAMmC,QAAA,IAAAA,IAAAA,GAAA,GACEpC,KAAKE,gBACLF,KAAK+B,gBAAiB,EACtB/B,KAAKS,OAAOC,YAAYV,KAAKW,QAAS,QAClCyB,IACApC,KAAKG,YAAYC,MAAK,GACtBJ,KAAKmC,cAAcC,MAAK,IAE5BpC,KAAKwB,yBAIb9B,EAAAG,UAAAwC,OAAA,WACQrC,KAAKE,cACLF,KAAKC,QAELD,KAAKiC,QAGbvC,EAAAG,UAAAyC,aAAA,WACI,OAAOtC,KAAKG,aAEhBT,EAAAG,UAAA0C,YAAA,WACIvC,KAAKG,YAAYqC,cACjBxC,KAAKwB,2BAECiB,EAAUzC,KAAK0C,QAAQC,IAAI3C,KAAKW,SAClC8B,GAAWA,EAAQ1C,QACnB0C,EAAQG,QAAO,SAACC,GACZA,EAAQC,YAIZpD,EAAAG,UAAAqC,sBAAR,eACQa,EAAa/C,KAAKW,QAAQqC,WAC9B,GAAID,IAAkE,EAApDA,EAAsB,UAAEE,QAAQ,iBAAuB,KACjEC,EAAYH,EAAWI,iBAAiB,eAC5C,GAAID,GAAgC,EAAnBA,EAAUnD,OACvB,IAAK,IAAIqD,EAAI,EAAGA,EAAIF,EAAUnD,OAAQqD,IAC9BF,EAAUE,GAAGC,UAAUJ,QAAQ,SAE/BjD,KAAKsD,wBAAwBJ,EAAUE,GAAI,eAOvD1D,EAAAG,UAAAyD,wBAAR,SAAgCC,EAASC,OACjC9B,EACiB,mBAAV+B,MACP/B,EAAQ,IAAI+B,MAAMD,IAElB9B,EAAQN,SAASsC,YAAY,UACvBC,UAAUH,GAAW,GAAO,GAEtCD,EAAQK,cAAclC,IAElBhC,EAAAG,UAAAU,YAAR,SAAoBsD,OACZR,EAAY,GAChB,OAAQQ,GACJ,IAAK,YACL,IAAK,MAEDR,EAAY,SACZ,MACJ,IAAK,WAEDA,EAAY,cACZ,MACJ,IAAK,cACL,IAAK,OAEDA,EAAY,WACZ,MACJ,IAAK,WAEDA,EAAY,cACZ,MACJ,IAAK,eACL,IAAK,QAEDA,EAAY,YACZ,MACJ,IAAK,YAEDA,EAAY,eACZ,MACJ,IAAK,cAEDA,EAAY,gBACZ,MACJ,IAAK,eACDA,EAAY,WACZ,MACJ,QAEIA,EAAY,WAEpB,OAAOA,GAEH3D,EAAAG,UAAA+B,kBAAR,SAA0BF,GAGtB,OADI1B,KAAK8D,eAAiB9D,KAAK8D,cAAcC,SAASrC,EAAMsC,SAIhEtE,EAAAG,UAAAoE,sBAAA,eAEQC,EAAcC,OAAOC,WAAYC,EAAeF,OAAOG,YAS3D,OAPItE,KAAKuE,mBACLL,EAAclE,KAAKuE,iBAAiBC,wBAAwBC,OAG5DzE,KAAK0E,oBACLR,EAAclE,KAAKuE,iBAAiBC,wBAAwBG,QAEzD,CAAEC,MAAOV,EAAaW,OAAQR,IAIzC3E,EAAAG,UAAAiF,aAAA,SAAaC,OACHC,EAAIhF,KAAK0C,QAAQC,IAAIoC,IAAW,GACtCC,EAAEC,KAAKF,GACP/E,KAAK0C,QAAQwC,IAAIlF,KAAKW,QAASqE,wBA1RtCG,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,cACVC,SAAU,yDARVC,EAAAA,kBACAC,EAAAA,uDAmBCC,EAAAA,iCAEAA,EAAAA,2BAEAA,EAAAA,0BAEAA,EAAAA,MAAKL,KAAA,CAAC,iCAQNK,EAAAA,MAAKL,KAAA,CAAC,+BAKNM,EAAAA,wBAGAD,EAAAA,yBAEAA,EAAAA,MAAKL,KAAA,CAAC,iCA2BNO,EAAAA,YAAWP,KAAA,CAAC,+CAIZO,EAAAA,YAAWP,KAAA,CAAC,qBAuNjB1F,GA/MI,SAAAA,EACYkG,EACAnF,GAFZ,IAAAoF,EAAA7F,KACYA,KAAA4F,WAAAA,EACA5F,KAAAS,OAAAA,EArEJT,KAAAE,eAAgB,EAEhBF,KAAA+B,gBAAiB,EAMhB/B,KAAA8B,aAAc,EAeb9B,KAAAmC,cAAgB,IAAI2D,EAAAA,aACtB9F,KAAAK,WAAa,SAEZL,KAAAa,SAAU,EA0BXb,KAAAG,YAAc,IAAI4F,EAAAA,QAalB/F,KAAA0C,QAAU,IAAIsD,QAMlBhG,KAAKW,QAAUX,KAAK4F,WAAWK,cAC/BjG,KAAKG,YAAY+F,UAAS,SAAEC,GACpBN,EAAK3F,gBAAkBiG,IACvBN,EAAK3F,cAAgBiG,EACjBN,EAAK3F,cACL2F,EAAKpF,OAAOG,SAASiF,EAAKlF,QAAS,QAEnCkF,EAAKpF,OAAOC,YAAYmF,EAAKlF,QAAS,WCpG1D,IAAAyF,GAoEIA,EAAAvG,UAAAwG,mBAAA,aACQD,EAAAvG,UAAAyG,iBAAR,SAAyBC,OACjBC,EAAS,eACb,OAAQD,GACJ,IAAK,MACDC,EAAS,YACT,MACJ,IAAK,OACDA,EAAS,cACT,MACJ,IAAK,QACDA,EAAS,eACT,MACJ,IAAK,SACDA,EAAS,eACT,MACJ,QACIA,EAASD,EAEjB,OAAOC,GAGXJ,EAAAvG,UAAA0C,YAAA,aAGQ6D,EAAAvG,UAAA4G,gBAAR,WAAA,IAAAZ,EAAA7F,KACI,GAAIA,KAAK0G,SACD1G,KAAK4F,WAAWK,cAAc5C,UAAUJ,QAAQ,QAAU,IAC1D7B,SAASuF,KAAKC,MAAMC,SAAW,SAC/B7G,KAAK4F,WAAWK,cAAcW,MAAME,WAAa,SACjD9G,KAAK4F,WAAWK,cAAc5C,WAAa,QACvCrD,KAAK+G,SAASlF,oBACd7B,KAAKgH,SAAWhH,KAAK+G,SAAS9C,yBAElCgD,WAAU,WACNpB,EAAKqB,kBACL9F,SAASuF,KAAKC,MAAMC,SAAW,GAC/BhB,EAAKD,WAAWK,cAAcW,MAAME,WAAa,WAClD,QAEJ,EAC4D,EAA3D9G,KAAK4F,WAAWK,cAAc5C,UAAUJ,QAAQ,UAChDjD,KAAK4F,WAAWK,cAAc5C,UAAYrD,KAAK4F,WAAWK,cAAc5C,UAAU8D,QAAQ,QAAQ,KAClGnH,KAAK4F,WAAWK,cAAcW,MAAMQ,QAAU,QAG5CC,EAAUrH,KAAK4F,WAAWK,cAAc9C,iBAAiB,kBAC3DkE,GAAWA,EAAQtH,QACnBsH,EAAQzE,QAAO,SAACC,GACZA,EAAQyE,UAAUxE,OAAO,QACzBD,EAAQ+D,MAAMQ,QAAU,SAI1BG,EAAWvH,KAAK4F,WAAWK,cAAcuB,cAAc,SACzDD,GACAA,EAASD,UAAUxE,OAAO,YAExB2E,EAAazH,KAAK4F,WAAWK,cAAcuB,cAAc,WAC3DC,GACAA,EAAWH,UAAUxE,OAAO,UAGhC9C,KAAK+G,SAAwB,eAAI,IAGjCX,EAAAvG,UAAAqH,gBAAR,WAyCIlH,KAAK0H,wBAIDtB,EAAAvG,UAAA8H,UAAR,eACUC,EAAK5H,KAAK+G,SAAShG,mBAEzB,OAAmD,EAA5C6G,EAAGvE,UAAUJ,QAAQ,qBAA4B2E,EAAGC,QAAQ,sBAAwBD,EAAGN,UAAUvD,SAAS,cAI7GqC,EAAAvG,UAAA6H,qBAAR,eACUI,EAAmB9H,KAAK+G,SAAShG,mBACjCgH,EAAAD,EAAAtD,wBAAEK,EAAAkD,EAAAlD,OAAQmD,EAAAD,EAAAC,KAAMC,EAAAF,EAAAE,IAAKrD,EAAAmD,EAAAnD,MACtBsD,EAAAC,iBAAAnI,KAAA4F,WAAAK,eAACmC,EAAAF,EAAAG,UAAiBC,EAAAJ,EAAAK,aACjBC,EAAAxI,KAAA4F,WAAAK,cAAAzB,wBAAEiE,EAAAD,EAAA5D,MAAW8D,EAAAF,EAAA3D,OACf8D,EAAW,EACXC,EAAaC,KAAKC,KAAKC,WAAWX,IAAUS,KAAKC,KAAKC,WAAWT,IACjEU,EAAOf,EAAMpD,EACboE,EAAQjB,EAiBZ,GAhBI7D,OAAOG,YAAc2D,EAAMpD,EAAS+D,EAAcF,IAClDM,EAAOf,EAAMS,GACL,IAGJC,EAAWV,GADXe,EAAK,IACeJ,GAMxBzE,OAAOC,WAAa4D,EAAOpD,EAAQ6D,IACnCQ,EAAQjB,EAAOS,EAAK7D,GAInB5E,KAAK2H,YAiBH,KACGuB,EAAsB/E,OAAOC,WAAa4D,EAAOF,EAAgBqB,YACjEC,EAAiBpJ,KAAK4F,WAAWK,cACvC,GAAImD,EAAeD,YAAcD,EAAqB,KAC5CG,GAAKZ,EACXW,EAAexC,MAAMoB,KAAOqB,EAAI,KAIpC,GAD6BlF,OAAOG,YAAc8E,EAAe5E,wBAAwByD,IAC9DmB,EAAeE,aAAc,KAC9CC,EAAIpF,OAAOG,YAAc2D,EAAMmB,EAAeE,aAAe,GACnEF,EAAexC,MAAMqB,IAAMsB,EAAI,WA3BnCnI,SAASuF,KAAK6C,OAAOxJ,KAAK4F,WAAWK,eACrCjG,KAAK+G,SAASjC,aAAa9E,KAAK4F,WAAWK,eAC3CjG,KAAK4F,WAAWK,cAAcW,MAAMQ,QAAU,oCAAoC6B,EAAK,qBAAqBD,EAAI,0CAAyCL,EAAWA,EAAW,mBAAmB,QAElM3I,KAAK4F,WAAWK,cAAcW,MAAM6C,OAASzJ,KAAK0J,YAAYC,6CA3MzExE,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,+DAVVE,EAAAA,kBAOK7F,+CAOJiG,EAAAA,YAAWP,KAAA,CAAC,yCAEZK,EAAAA,SA+NLW,GA5NI,SAAAA,EAAoBR,EAAgCmB,GAApD,IAAAlB,EAAA7F,KAAoBA,KAAA4F,WAAAA,EAAgC5F,KAAA+G,SAAAA,EAN5C/G,KAAAgH,SAAW,CAAEpC,MAAO,EAAGC,OAAQ,GACH7E,KAAA4J,kBAAmB,EAE9C5J,KAAA0G,UAAW,EACZ1G,KAAA6J,eAAuC,KAG3C7J,KAAK6J,eAAiB,IAAIC,EAAAA,qBAC1B9J,KAAK0J,YAAc,IAAIK,EAAAA,YACvB/J,KAAK+G,SAASzE,eAAe0H,KACzBC,EAAAA,aAAa,KACf/D,UAAS,SAAEC,OACH+D,EAAQrE,EAAKkB,SAAShG,mBAG5B,GAFA8E,EAAKa,SAAWb,EAAKkB,SAASoD,OAE1BtE,EAAK8B,YAAa,CACdxB,IAAUN,EAAKa,UAAYb,EAAKD,WAAWK,cAAc5C,UAAUJ,QAAQ,QAAU,IACrF4C,EAAKa,UAAW,OAGd0D,EAAgBvE,EAAKkB,SAAShG,mBAAmB8G,QAAQ,kBAC/D,GAAIuC,EACkBA,EAAcjH,iBAAiB,SACvCP,QAAO,SAAEC,GACfA,EAAQyE,UAAUxE,OAAO,QACzBD,EAAQ+D,MAAMQ,QAAU,KAKhCvB,EAAKa,SAELb,EAAKgE,eAAeQ,mBAAmBH,EAAK,SAAGI,OACrCC,EAAMD,EAAQ,OAChBhD,EAAYkD,MAAMC,KAAKF,EAAIjD,WAAa,IAEvCA,EAAUoD,SAAS,oBAAsBH,EAAI1C,QAAQ,mBAAqBP,EAAUoD,SAAS,kBACjG7E,EAAKkB,SAAShG,mBAAmBgD,SAASwG,IAAmB,eAAXD,EAAEK,MAA4B9E,EAAKD,WAAWK,cAAclC,SAASwG,KAGxH1E,EAAKa,UAAW,EAChBb,EAAKkB,SAAS9G,OAAM,GACpB4F,EAAKY,sBAGTZ,EAAKkB,SAAS9G,OAAM,GACpB4F,EAAKgE,eAAee,QAAQV,IAEhCrE,EAAKY,oBCjEjB,IAAAoE,GAgBIlL,OAAAC,eACIiL,EAAAhL,UAAA,aAAU,KADd,SACeC,GACXE,KAAK8K,UAAYhL,mCAErBH,OAAAC,eACIiL,EAAAhL,UAAA,aAAU,KADd,WAEI,OAAOG,KAAK8K,2CAKhBD,EAAAhL,UAAAkL,QADA,SACQC,GACAhL,KAAK8K,YAGL9K,KAAK+G,SAASlG,SACdmK,EAAGC,2BAEPjL,KAAK+G,SAAS1E,+BAvBrB8C,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,iEAHL3F,SAJL6F,EAAAA,kDAWCE,EAAAA,0BAIAE,EAAAA,YAAWP,KAAA,CAAC,oCAKZO,EAAAA,YAAWP,KAAA,CAAC,uCACZ8F,EAAAA,aAAY9F,KAAA,CAAC,QAAS,CAAC,cAgC5ByF,GArBI,SAAAA,EACY9D,EACAnB,GAFZ,IAAAC,EAAA7F,KACYA,KAAA+G,SAAAA,EACA/G,KAAA4F,WAAAA,EAxBJ5F,KAAA8K,WAAY,EAUe9K,KAAAmL,UAAW,EAWtCnL,KAAAoL,UAAY,KAKhBrE,EAASjD,cAAgB8B,EAAWK,cACpCjG,KAAKoL,UAAYxF,EAAWK,cAC5BjG,KAAK+G,SAASzE,eAAe4D,UAAS,SAAEC,GAChCN,EAAKkB,SAASlG,SAAWgF,EAAKkB,SAASoD,OACnCtE,EAAKuF,UAAU/H,UAAUJ,QAAQ,UAAY,IAC7C4C,EAAKuF,UAAU/H,WAAa,YAGkB,EAA9CwC,EAAKuF,UAAU/H,UAAUJ,QAAQ,YACjC4C,EAAKuF,UAAU/H,UAAYwC,EAAKuF,UAAU/H,UAAU8D,QAChD,UACA,YC9ClBkE,EAAuB,CAC3B3L,EACA0G,EACAyE,GAGFS,uBAACC,EAAAA,SAAQnG,KAAA,CAAC,CACRoG,QAAS,CACPC,EAAAA,oBAEFC,aAAcL,EACdM,QAASN,MAEiCC,GAP5C,SAAAA,KCZA,IAAAM,GAkFIjM,OAAAC,eACIgM,EAAA/L,UAAA,QAAK,KADT,WAGI,OAAOG,KAAK6L,YAEhB,SAAUjH,GACN5E,KAAK6L,OAAS7L,KAAK8L,YAAYlH,oCA+CnCgH,EAAA/L,UAAAiB,SAAA,WACId,KAAK+L,KAAO/L,KAAKgM,GAAG/F,cAAcuB,cAAc,mBAEpDoE,EAAA/L,UAAAoM,gBAAA,aACAL,EAAA/L,UAAA0C,YAAA,WACQvC,KAAKkM,kBACLlM,KAAKkM,oBAIbN,EAAA/L,UAAAsM,aAAA,SAAazK,GAAb,IAAAmE,EAAA7F,KACQA,KAAKoM,QAGL1K,GACAA,EAAM2K,kBAEVrM,KAAKsM,MAAQtM,KAAKsM,KAClBtM,KAAKuM,cAAcnK,OAEnBpC,KAAKkM,iBAAmBlM,KAAKwM,SAASC,OAClC,WACA,QAAO,WAEH5G,EAAK6G,kBAIR1M,KAAK2M,cACN3M,KAAK4M,eAAiB5M,KAAKwM,SAASC,OAChCzM,KAAK+L,KACL,QAAO,SACPzB,GACIA,EAAE+B,uBAMlBT,EAAA/L,UAAA6M,cAAA,WACQ1M,KAAKoM,QAGTpM,KAAKsM,MAAO,EACZtM,KAAKuM,cAAcnK,OAEfpC,KAAKkM,kBACLlM,KAAKkM,mBAELlM,KAAK4M,gBACL5M,KAAK4M,mBAIbhB,EAAA/L,UAAAgN,cAAA,WACS7M,KAAKoM,QAGVpM,KAAKsM,MAAQtM,KAAKsM,KAClBtM,KAAKuM,cAAcnK,SAKvBwJ,EAAA/L,UAAAiN,WAAA,SAAWC,GACP/M,KAAKgN,OAAO5K,KAAK2K,IAErBnB,EAAA/L,UAAAoN,gBAAA,WACIjN,KAAKkN,UAAU9K,QAEnBwJ,EAAA/L,UAAAiM,YAAA,SAAYqB,OACFC,EAAQ,iBAEd,OAAOA,EAAMC,KAAKF,GACZ,GAAGG,SAASH,EAAM,IAAMA,EAAKI,MAAMH,GAAO,GACvCD,EAAI,0BAhMpBK,EAAAA,UAASpI,KAAA,CAAC,CACPC,SAAU,kBACVoI,SAAU,y5EAfVlI,EAAAA,kBAKAC,EAAAA,2CAoECC,EAAAA,qBAIAA,EAAAA,qBASAA,EAAAA,qBAEAA,EAAAA,oBAEAA,EAAAA,oBAGAA,EAAAA,2BAIAA,EAAAA,MAAKL,KAAA,CAAC,sCAGNK,EAAAA,MAAKL,KAAA,CAAC,kCAENK,EAAAA,qBAEAA,EAAAA,6BAKAiI,EAAAA,aAAYtI,KAAA,CAAC,oCAGbM,EAAAA,OAAMN,KAAA,CAAC,8BAGPM,EAAAA,8BAGAA,EAAAA,OAAMN,KAAA,CAAC,qBA2FZwG,GAhFI,SAAAA,EAAoBI,EAAwBQ,GAAxBxM,KAAAgM,GAAAA,EAAwBhM,KAAAwM,SAAAA,EApCnCxM,KAAA2K,KAAe,UAIA3K,KAAA2M,aAAuB,EAGxB3M,KAAA2N,aAAc,EAE5B3N,KAAA6D,SAAW,SAEX7D,KAAA+M,MAAwB,CAC7B,CAAEa,MAAO,MAAO9N,MAAO,UACvB,CAAE8N,MAAO,MAAO9N,MAAO,UACvB,CAAE8N,MAAO,MAAO9N,MAAO,WAKLE,KAAAkN,UAA+B,IAAIpH,EAAAA,aAG/C9F,KAAAgN,OAA4B,IAAIlH,EAAAA,aAGhB9F,KAAAuM,cAEtB,IAAIzG,EAAAA,aAIR9F,KAAAsM,MAAO,ECjIX,IAAAuB,GAmBIA,EAAAhO,UAAAiN,WAAA,WACQ9M,KAAK+M,MAAMe,UAGf9N,KAAKgN,OAAO5K,KAAKpC,KAAK+M,4BArB7BS,EAAAA,UAASpI,KAAA,CAAC,CACPC,SAAU,uBACVoI,SAAU,iXAaThI,EAAAA,sBACAC,EAAAA,UAOLmI,GAvBA,SAAAA,IAgBc7N,KAAAgN,OAA4B,IAAIlH,EAAAA,aClB9C,IAAAiI,uBAMCxC,EAAAA,SAAQnG,KAAA,CAAC,CACNoG,QAAS,CACLwC,EAAAA,cAEJtC,aAAc,CACVE,EACAiC,GAEJlC,QAAS,CACLC,EACAiC,OAKRE,GAfA,SAAAA","sourcesContent":["import {\r\n    Directive,\r\n    Input,\r\n    Output,\r\n    HostBinding,\r\n    EventEmitter,\r\n    ElementRef,\r\n    Renderer2,\r\n    OnDestroy,\r\n    OnInit\r\n} from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n@Directive({\r\n    selector: '[fDropdown]',\r\n    exportAs: 'fDropdown'\r\n})\r\nexport class FDropdownDirective implements OnDestroy, OnInit {\r\n    toggleElement: any;\r\n    documentClickEventListener: any;\r\n    selfDefineEventListener: any;\r\n    private _seflEl: HTMLElement;\r\n    // tslint:disable-next-line:no-input-rename\r\n    private _internalOpen = false;\r\n    // è®¡ç®å®½åº¦\r\n    private _calculateMenu = false;\r\n    // çº æ­£ä½ç½®çåç§ æwindowåparentä¸¤ä¸ªå¼\r\n    @Input() rectifyReference;\r\n    // çº æ­£çºµåä½ç½®çåç§ \r\n    @Input() rectifyReferenceV;\r\n    // æ¯å¦èªå¨çº æ­£ä½ç½®\r\n    @Input() autoRectify = false;\r\n    // å¨å¤é¢å¼ºå¶æ§å¶å³é­ç¶æ\r\n    @Input('forceState')\r\n    set forceState(value: Array<boolean>) {\r\n\r\n        if (value && value.length) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    @Input('open')\r\n    set openState(value: boolean) {\r\n        this._internalOpen = value[0];\r\n        this.isOpenState.next(value[0]);\r\n    }\r\n    @Output() dpChangeEvent = new EventEmitter<boolean>();\r\n    private _placement = 'bottom'; // è®°å½ position\r\n\r\n    @Input() isSubDP = false; // æ¯å¦æ¯å­ä¸æ\r\n\r\n    @Input('placement')\r\n    set placement(value) {\r\n        // å¦æç¸ç­\r\n        if (!value) {\r\n            return;\r\n        }\r\n        //\r\n        if (value !== this._placement) {\r\n            const newClsName = this._getClsName(value);\r\n            const oldClsName = this._getClsName(this._placement);\r\n            this.render.removeClass(this._seflEl, oldClsName);\r\n            this.render.addClass(this._seflEl, newClsName);\r\n            this._placement = value;\r\n        }\r\n    }\r\n    get placement(): string {\r\n        return this._placement;\r\n    }\r\n\r\n    // @HostBinding('class.show')\r\n    get isOpen(): boolean {\r\n        return this._internalOpen;\r\n    }\r\n\r\n    private isOpenState = new Subject();\r\n\r\n\r\n    @HostBinding('class.dropdown-submenu')\r\n    get submenuCls(): boolean {\r\n        return this.isSubDP;\r\n    }\r\n    @HostBinding('class.dropdown')\r\n    get dropdownCls(): boolean {\r\n        return !this.isSubDP;\r\n    }\r\n    private ngZone;\r\n\r\n    private menuEls = new WeakMap();\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private render: Renderer2\r\n    ) {\r\n        this._seflEl = this.elementRef.nativeElement;\r\n        this.isOpenState.subscribe((state: boolean) => {\r\n            if (this._internalOpen !== state) {\r\n                this._internalOpen = state;\r\n                if (this._internalOpen) {\r\n                    this.render.addClass(this._seflEl, 'show');\r\n                } else {\r\n                    this.render.removeClass(this._seflEl, 'show');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    getNativeElement() {\r\n        return this._seflEl;\r\n    }\r\n    private bindDocumentEvents() {\r\n        //   this.ngzone.runOutsideAngular(() => {\r\n        this.documentClickEventListener = this.onDocumentClick.bind(this);\r\n        document.addEventListener('click', this.documentClickEventListener);\r\n        // ç»å®è¢«æä½nativeæ¶è§¦å\r\n        this.selfDefineEventListener = this.onSelfDefineHandler.bind(this);\r\n        this._seflEl.addEventListener('selfClose', this.selfDefineEventListener);\r\n        // });\r\n    }\r\n\r\n    private onSelfDefineHandler() {\r\n        this.close();\r\n    }\r\n    private unbindDocumentEvents() {\r\n        if (this.documentClickEventListener) {\r\n            document.removeEventListener(\r\n                'click',\r\n                this.documentClickEventListener\r\n            );\r\n            this.documentClickEventListener = null;\r\n        }\r\n        if (this.selfDefineEventListener) {\r\n            this._seflEl.removeEventListener(\r\n                'selfClose',\r\n                this.selfDefineEventListener\r\n            );\r\n            this.selfDefineEventListener = null;\r\n        }\r\n    }\r\n    private onDocumentClick(event: MouseEvent) {\r\n        // å¦æå·²ç»å³é­ï¼ä¸éè¦åååº\r\n        if (!this._internalOpen) {\r\n            return;\r\n        }\r\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    // å¤æ­menuå±å¼æ¶æ¯å¦è¦è®¡ç®\r\n    needToCalculate() {\r\n        return this.autoRectify && this._calculateMenu;\r\n    }\r\n    resetCalculate(value) {\r\n        this._calculateMenu = value;\r\n    }\r\n    open() {\r\n\r\n        if (!this._internalOpen) {\r\n            this.closeSiblingDropdowns();\r\n            this._calculateMenu = true;\r\n            this.render.addClass(this._seflEl, 'show');\r\n            this.isOpenState.next(true);\r\n            this.dpChangeEvent.emit(true);\r\n            // æ§è¡ç»å®äºä»¶\r\n            this.bindDocumentEvents();\r\n        }\r\n    }\r\n\r\n    close(emit = true) {\r\n        if (this._internalOpen) {\r\n            this._calculateMenu = false;\r\n            this.render.removeClass(this._seflEl, 'show');\r\n            if (emit) {\r\n                this.isOpenState.next(false);\r\n                this.dpChangeEvent.emit(false);\r\n            }\r\n            this.unbindDocumentEvents();\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        if (this._internalOpen) {\r\n            this.close();\r\n        } else {\r\n            this.open();\r\n        }\r\n    }\r\n    getOpenState() {\r\n        return this.isOpenState;\r\n    }\r\n    ngOnDestroy() {\r\n        this.isOpenState.unsubscribe();\r\n        this.unbindDocumentEvents();\r\n\r\n        const menuels = this.menuEls.get(this._seflEl);\r\n        if (menuels && menuels.length) {\r\n            menuels.forEach(element => {\r\n                element.remove();\r\n            });\r\n        }\r\n    }\r\n    private closeSiblingDropdowns() {\r\n        let dpParentEl = this._seflEl.parentNode;\r\n        if (dpParentEl && dpParentEl['className'].indexOf('dropdown-menu') > -1) {\r\n            let dropdowns = dpParentEl.querySelectorAll('[fDropdown]');\r\n            if (dropdowns && dropdowns.length > 1) {\r\n                for (var k = 0; k < dropdowns.length; k++) {\r\n                    if (dropdowns[k].className.indexOf('show')) {\r\n                        // è§¦åäºä»¶è¯è¯\r\n                        this.compatibleDispatchEvent(dropdowns[k], 'selfClose');\r\n                        // dropdowns[k].dispatchEvent(new Event('selfClose'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private compatibleDispatchEvent(eventEl, eventName) {\r\n        var event;\r\n        if (typeof Event === \"function\") {\r\n            event = new Event(eventName);\r\n        } else {\r\n            event = document.createEvent(\"Event\");\r\n            event.initEvent(eventName, false, false);\r\n        }\r\n        eventEl.dispatchEvent(event);\r\n    }\r\n    private _getClsName(position: string) {\r\n        let className = '';\r\n        switch (position) {\r\n            case 'top-right':\r\n            case 'top':\r\n                // æä¸ï¼æä¸-æå³\r\n                className = 'dropup';\r\n                break;\r\n            case 'top-left':\r\n                // æä¸-æå·¦\r\n                className = 'dropup-left';\r\n                break;\r\n            case 'left-bottom':\r\n            case 'left':\r\n                // æ¨ªåââæå·¦ââæä¸\r\n                className = 'dropleft';\r\n                break;\r\n            case 'left-top':\r\n                // æ¨ªåââæå·¦ââæä¸\r\n                className = 'dropleft-up';\r\n                break;\r\n            case 'right-bottom':\r\n            case 'right':\r\n                // æ¨ªåââæå³ââæä¸\r\n                className = 'dropright';\r\n                break;\r\n            case 'right-top':\r\n                // æ¨ªåââæå³ââæä¸\r\n                className = 'dropright-up';\r\n                break;\r\n            case 'bottom-left':\r\n                // æä¸ââæå·¦\r\n                className = 'dropdown-left';\r\n                break;\r\n            case 'bottom-right':\r\n                className = 'dropdown';\r\n                break;\r\n            default:\r\n                // æä¸ï¼æä¸ââæå³\r\n                className = 'dropdown';\r\n        }\r\n        return className;\r\n    }\r\n    private isEventFromToggle(event: MouseEvent) {\r\n        const result =\r\n            this.toggleElement && this.toggleElement.contains(event.target);\r\n        return result;\r\n    }\r\n\r\n    getRectifyReferenceEl() {\r\n        \r\n        var resultWidth = window.innerWidth, resultHeight = window.innerHeight;\r\n        // æ¨ªåè®¡ç®\r\n        if (this.rectifyReference) {\r\n            resultWidth = this.rectifyReference.getBoundingClientRect().right;\r\n        }\r\n        // çºµåè®¡ç®\r\n        if (this.rectifyReferenceV) {\r\n            resultWidth = this.rectifyReference.getBoundingClientRect().bottom;\r\n        }\r\n        return { width: resultWidth, height: resultHeight };\r\n\r\n    }\r\n\r\n    appendMenuEl(menuEl: any) {\r\n        const m = this.menuEls.get(menuEl) || [];\r\n        m.push(menuEl)\r\n        this.menuEls.set(this._seflEl, m);\r\n    }\r\n}\r\n\r\n// export enum FDropdownPlacement{\r\n//   \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\r\n//   *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\r\n// }\r\n","import {\r\n    Directive,\r\n    HostBinding,\r\n    AfterViewChecked,\r\n    ElementRef,\r\n    Optional,\r\n    Input,\r\n    OnDestroy,\r\n} from \"@angular/core\";\r\nimport { CommonUtils, OverLayHiddenService } from \"@farris/ui-common\";\r\nimport { debounceTime } from \"rxjs/operators\";\r\nimport { FDropdownDirective } from \"./f-dropdown.directive\";\r\n\r\n@Directive({\r\n    selector: \"[fDropdownMenu]\",\r\n})\r\nexport class FDropdownMenuDirective implements AfterViewChecked, OnDestroy {\r\n    private _docRect = { width: 0, height: 0 };\r\n    @HostBinding(\"class.dropdown-menu\") showDropdownMenu = true;\r\n    // åé¨ä½¿ç¨ï¼å¨ä¸åæ´ä¾èµçæåµä¸ï¼è§¦åæ¹å\r\n    @Input() dpIsOpen = false;\r\n    private overLayService: OverLayHiddenService = null;\r\n    private commonUtils;\r\n    constructor(private elementRef: ElementRef, private dropdown: FDropdownDirective ) {\r\n        this.overLayService = new OverLayHiddenService();\r\n        this.commonUtils = new CommonUtils();\r\n        this.dropdown.getOpenState().pipe(\r\n            debounceTime(50)\r\n        ).subscribe((state: boolean) => {\r\n            const ddmel = this.dropdown.getNativeElement();    \r\n            this.dpIsOpen = this.dropdown.isOpen;\r\n\r\n            if (this.issubMenu()) {\r\n                if (state && !this.dpIsOpen && this.elementRef.nativeElement.className.indexOf(\"show\") < 0) {\r\n                    this.dpIsOpen = true;\r\n                }\r\n\r\n                const dropdownMenus = this.dropdown.getNativeElement().closest('.dropdown-menu')\r\n                if (dropdownMenus) {\r\n                    const showMenus = dropdownMenus.querySelectorAll('.show');\r\n                    showMenus.forEach((element: any) => {\r\n                        element.classList.remove('show');\r\n                        element.style.cssText = '';\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (this.dpIsOpen) {\r\n                // æ³¨åé¼ æ æ»è½®ï¼ç¹å»äºä»¶ï¼ç¨äºéèPanel\r\n                this.overLayService.registerMouseEvent(ddmel, (e: MouseEvent) => {\r\n                    const tar = e.target as any;\r\n                    var classList = Array.from(tar.classList || []);\r\n\r\n                    if ( classList.includes('dropdown-toggle') || tar.closest('.dropdown-item') || classList.includes(\"dropdown-item\") || \r\n                    (this.dropdown.getNativeElement().contains(tar) && e.type !== \"mousewheel\"  ) || this.elementRef.nativeElement.contains(tar)) {\r\n                        return;\r\n                    }\r\n                    this.dpIsOpen = false;\r\n                    this.dropdown.close(false);\r\n                    this.openStateChange();\r\n                });\r\n            } else {\r\n                this.dropdown.close(false);\r\n                this.overLayService.destory(ddmel);\r\n            }\r\n            this.openStateChange();\r\n        });\r\n    }\r\n    ngAfterViewChecked() {}\r\n    private getRealPlacement(pment) {\r\n        var result = \"bottom-right\";\r\n        switch (pment) {\r\n            case \"top\":\r\n                result = \"top-right\";\r\n                break;\r\n            case \"left\":\r\n                result = \"left-bottom\";\r\n                break;\r\n            case \"right\":\r\n                result = \"right-bottom\";\r\n                break;\r\n            case \"bottom\":\r\n                result = \"bottom-right\";\r\n                break;\r\n            default:\r\n                result = pment;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    private openStateChange() {\r\n        if (this.dpIsOpen) {\r\n            if (this.elementRef.nativeElement.className.indexOf(\"show\") < 0) {\r\n                document.body.style.overflow = 'hidden';\r\n                this.elementRef.nativeElement.style.visibility = 'hidden';\r\n                this.elementRef.nativeElement.className += \" show\";\r\n                if (this.dropdown.needToCalculate()) {\r\n                    this._docRect = this.dropdown.getRectifyReferenceEl();\r\n                }\r\n                setTimeout(() => {\r\n                    this.changeDirection();\r\n                    document.body.style.overflow = '';\r\n                    this.elementRef.nativeElement.style.visibility = 'visible';\r\n                }, 0);\r\n            }\r\n        } else {\r\n            if (this.elementRef.nativeElement.className.indexOf(\"show\") > -1) {\r\n                this.elementRef.nativeElement.className = this.elementRef.nativeElement.className.replace(' show',' ');\r\n                this.elementRef.nativeElement.style.cssText = '';\r\n            }\r\n\r\n            const submenu = this.elementRef.nativeElement.querySelectorAll('.dropdown-menu');\r\n            if (submenu && submenu.length) {\r\n                submenu.forEach(element => {\r\n                    element.classList.remove('show');\r\n                    element.style.cssText = '';\r\n                });\r\n            }\r\n\r\n            const showItem = this.elementRef.nativeElement.querySelector('.show');\r\n            if (showItem) {\r\n                showItem.classList.remove('show');\r\n            }\r\n            const activeItem = this.elementRef.nativeElement.querySelector('.active');\r\n            if (activeItem) {\r\n                activeItem.classList.remove('active');\r\n            }\r\n\r\n            this.dropdown['_internalOpen'] = false;\r\n        }\r\n    }\r\n    private changeDirection() {\r\n        // if (this.dropdown.needToCalculate()) {\r\n        //     const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n        //     let placement = this.dropdown.placement;\r\n        //     let newplacement = this.getRealPlacement(placement);\r\n        //     placement = newplacement;\r\n        //     //\r\n        //     if (\r\n        //         newplacement.indexOf(\"right\") > -1 &&\r\n        //         rect.right > this._docRect.width\r\n        //     ) {\r\n        //         placement = placement.replace(\"right\", \"left\");\r\n        //     }\r\n        //     if (\r\n        //         newplacement.indexOf(\"left\") > -1 &&\r\n        //         rect.left - rect.width < 0\r\n        //     ) {\r\n        //         placement = placement.replace(\"left\", \"right\");\r\n        //     }\r\n\r\n        //     if (\r\n        //         newplacement.indexOf(\"bottom\") > -1 &&\r\n        //         rect.bottom > this._docRect.height\r\n        //     ) {\r\n        //         placement = placement.replace(\"down\", \"up\");\r\n        //     }\r\n        //     if (\r\n        //         newplacement.indexOf(\"up\") > -1 &&\r\n        //         rect.bottom - rect.height < 0\r\n        //     ) {\r\n        //         placement = placement.replace(\"up\", \"bottom\");\r\n        //     }\r\n        //     if (newplacement !== this.dropdown.placement) {\r\n        //         this.dropdown.placement = newplacement;\r\n        //     }\r\n        //     if (placement !== newplacement) {\r\n        //         this.dropdown.placement = placement;\r\n        //     }\r\n        //     this.dropdown.resetCalculate(false);\r\n        // }\r\n\r\n        this.setMenuPanelPosition();\r\n    }\r\n\r\n\r\n    private issubMenu() {\r\n        const dd = this.dropdown.getNativeElement();\r\n        \r\n        return dd.className.indexOf('dropdown-submenu') > -1 || dd.closest('.dropdown-submenu') || dd.classList.contains('dropright');\r\n    }\r\n\r\n\r\n    private setMenuPanelPosition() {\r\n        const parentMenuPanel =  this.dropdown.getNativeElement();\r\n        const { height, left, top, width } = parentMenuPanel.getBoundingClientRect();\r\n        const{marginTop:menuMt,marginBottom:menuMb}=getComputedStyle(this.elementRef.nativeElement);\r\n        const { width: pw, height: ph } = this.elementRef.nativeElement.getBoundingClientRect();\r\n        let _maxHeight=0;\r\n        let tMenuMargin= Math.ceil(parseFloat(menuMt))+ Math.ceil(parseFloat(menuMb));\r\n        let _top = top + height;\r\n        let _left = left;\r\n        if (window.innerHeight - top - height - tMenuMargin < ph) {\r\n            _top = top - ph;\r\n            if(_top<0){\r\n                //å½åççé¢å®¹ä¸ä¸menuä¸çæé®ï¼éå¶menuçé«åº¦\r\n                _top=10;\r\n                _maxHeight=top-_top-tMenuMargin;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (window.innerWidth - left - width < pw) {\r\n            _left = left - pw + width;\r\n        } \r\n\r\n        \r\n        if (!this.issubMenu()) {\r\n            document.body.append(this.elementRef.nativeElement);\r\n            this.dropdown.appendMenuEl(this.elementRef.nativeElement);\r\n            this.elementRef.nativeElement.style.cssText = `position:fixed;bottom:unset;left:${_left}px !important;top:${_top}px !important;right: unset;max-height:${_maxHeight?_maxHeight+'px;overflow:auto':'none'}`;\r\n\r\n            this.elementRef.nativeElement.style.zIndex = this.commonUtils.getFloatingLayerIndex();\r\n\r\n            // if (this.elementRef.nativeElement.classList.contains('solution-header-title-menu')) {\r\n            //     this.elementRef.nativeElement.classList.add('query-solution');\r\n            // }\r\n\r\n            // const solutionBtns = this.elementRef.nativeElement.querySelector('.solution-header-dropdown-item-btns');\r\n            // if (solutionBtns && !solutionBtns.classList.contains('dropdown-item')) {\r\n            //     solutionBtns.classList.add('dropdown-item');\r\n            // }\r\n\r\n\r\n        } else {\r\n            const childContainerWidth = window.innerWidth - left - parentMenuPanel.offsetWidth;\r\n            const childMenuPanel = this.elementRef.nativeElement;\r\n            if (childMenuPanel.offsetWidth > childContainerWidth) {\r\n                const l = -pw;\r\n                childMenuPanel.style.left = l + 'px';\r\n            }\r\n\r\n            const childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;\r\n            if (childContainerHeight < childMenuPanel.offsetHeight) {\r\n                const t = window.innerHeight - top - childMenuPanel.offsetHeight - 10;\r\n                childMenuPanel.style.top = t + 'px';\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    Host,\r\n    HostBinding,\r\n    HostListener,\r\n    ElementRef,\r\n    Renderer2,\r\n    Input,\r\n} from \"@angular/core\";\r\nimport { FDropdownDirective } from \"./f-dropdown.directive\";\r\n\r\n@Directive({\r\n    selector: \"[fDropdownToggle]\",\r\n})\r\nexport class FDropdownToggleDirective {\r\n    private _disabled = false;\r\n    @Input()\r\n    set dpDisabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n    @HostBinding(\"class.disabled\")\r\n    get disableCls() {\r\n        return this._disabled;\r\n    }\r\n\r\n    @HostBinding(\"attr.aria-haspopup\") haspopup = true;\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onclick(ev: MouseEvent) {\r\n        if (this._disabled) {\r\n            return;\r\n        }\r\n        if (this.dropdown.isSubDP) {\r\n            ev.stopImmediatePropagation();\r\n        }\r\n        this.dropdown.toggle();\r\n    }\r\n    private nativeEle = null;\r\n    constructor(\r\n        private dropdown: FDropdownDirective,\r\n        private elementRef: ElementRef\r\n    ) {\r\n        dropdown.toggleElement = elementRef.nativeElement;\r\n        this.nativeEle = elementRef.nativeElement;\r\n        this.dropdown.getOpenState().subscribe((state: boolean) => {\r\n            if (this.dropdown.isSubDP && this.dropdown.isOpen) {\r\n                if (this.nativeEle.className.indexOf(\"active\") < 0) {\r\n                    this.nativeEle.className += \" active\";\r\n                }\r\n            } else {\r\n                if (this.nativeEle.className.indexOf(\"active\") > -1) {\r\n                    this.nativeEle.className = this.nativeEle.className.replace(\r\n                        \" active\",\r\n                        \" \"\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FDropdownDirective } from './f-dropdown.directive';\r\nimport { FDropdownMenuDirective } from './f-dropdown-menu.directive';\r\nimport { FDropdownToggleDirective } from './f-dropdown-toggle.directive';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\n\r\nconst _DROPDOWN_DIRECTIVES = [\r\n  FDropdownDirective,\r\n  FDropdownMenuDirective,\r\n  FDropdownToggleDirective\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    FarrisCommonModule\r\n  ],\r\n  declarations: _DROPDOWN_DIRECTIVES,\r\n  exports: _DROPDOWN_DIRECTIVES\r\n})\r\nexport class FDropdownDirectiveTypeModule { }\r\n","import {\r\n    Component,\r\n    Input,\r\n    AfterViewInit,\r\n    OnInit,\r\n    ElementRef,\r\n    ContentChild,\r\n    TemplateRef,\r\n    Output,\r\n    EventEmitter,\r\n    Renderer2,\r\n    OnDestroy,\r\n    ViewChildren\r\n} from '@angular/core';\r\nimport { QueryList } from '@angular/core/src/render3';\r\nimport { FDropdownMenuDirective } from '../f-dropdown-menu.directive';\r\nimport { DropdownItem } from './dropdown.item.props';\r\n\r\n@Component({\r\n    selector: 'farris-dropdown',\r\n    template: `\r\n        <div\r\n            class=\"farris-dropdown btn-group\"\r\n            [class.dropup]=\"position === 'top'\"\r\n            [class.dropdown]=\"position === 'bottom'\"\r\n            [class.dropleft]=\"position === 'left'\"\r\n            [class.dropright]=\"position === 'right'\"\r\n            [style.width]=\"width\"\r\n        >\r\n            <span\r\n                [class.btn]=\"!nest\"\r\n                [class.dropdown-item]=\"nest\"\r\n                [class.btn-lg]=\"size === 'large'\"\r\n                [class.btn-sm]=\"size === 'small'\"\r\n                [class.btn-primary]=\"type === 'primary'\"\r\n                [class.btn-success]=\"type === 'success'\"\r\n                [class.btn-warning]=\"type === 'warning'\"\r\n                [class.btn-danger]=\"type === 'danger'\"\r\n                [class.btn-info]=\"type === 'info'\"\r\n                (click)=\"leftButtonClick()\"\r\n                style=\"width:100%\"\r\n                *ngIf=\"splitButton\"\r\n                >{{ title }}</span\r\n            >\r\n            <span\r\n                class=\"dropdown-toggle\"\r\n                [class.btn]=\"!nest\"\r\n                [class.dropdown-item]=\"nest\"\r\n                [class.dropdown-toggle-split]=\"splitButton\"\r\n                [class.btn-lg]=\"size === 'large'\"\r\n                [class.btn-sm]=\"size === 'small'\"\r\n                [class.btn-primary]=\"type === 'primary'\"\r\n                [class.btn-success]=\"type === 'success'\"\r\n                [class.btn-warning]=\"type === 'warning'\"\r\n                [class.btn-danger]=\"type === 'danger'\"\r\n                [class.btn-info]=\"type === 'info'\"\r\n                [class.btn-secondary]=\"type === 'secondary'\"\r\n                (click)=\"showDropMenu($event)\"\r\n                (mouseenter)=\"hoverDropdown()\"\r\n                (mouseleave)=\"hoverDropdown()\"\r\n                style=\"width:100%\"\r\n            >\r\n                <span class=\"sr-only\" *ngIf=\"splitButton\"></span>\r\n                {{ splitButton ? '' : title }}\r\n            </span>\r\n            <div class=\"dropdown-menu\" [class.show]=\"show\">\r\n                <ng-template [ngTemplateOutlet]=\"dropdownTempl\"></ng-template>\r\n                <farris-dropdown-item\r\n                    *ngFor=\"let item of model\"\r\n                    [model]=\"item\"\r\n                    (select)=\"selectItem($event)\"\r\n                >\r\n                </farris-dropdown-item>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class FarrisDropdownComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    @Input() nest: boolean;\r\n    // è®¾ç½®å®½ é«å±æ§\r\n    _width: string | number;\r\n    _height: string | number;\r\n    @Input()\r\n    get width() {\r\n        // å¯¹åä¸ªåä½è¿è¡å¤ç\r\n        return this._width;\r\n    }\r\n    set width(width: any) {\r\n        this._width = this.resolveSize(width);\r\n    }\r\n    // ä¸ææ¡æ é¢\r\n    @Input() title: string;\r\n    // hoverå±ç¤ºä¸æåè¡¨\r\n    @Input() hover: boolean;\r\n    // ä¸ææ¡å°ºå¯¸\r\n    @Input() size: string;\r\n    // ä¸ææ¡ç±»å\r\n    // tslint:disable-next-line:no-inferrable-types\r\n    @Input() type: string = 'primary';\r\n    // ç¹å»åè¡¨é¡¹ç®åæ¯å¦å³é­åè¡¨é¡¹\r\n    // tslint:disable-next-line:no-input-rename\r\n    // tslint:disable-next-line:no-inferrable-types\r\n    @Input('hide-on-click') hideOnClick: boolean = true;\r\n    // æé®ç»\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('split-button') splitButton = false;\r\n    // åè¡¨æ¾ç¤ºä½ç½®\r\n    @Input() position = 'bottom';\r\n    // åè¡¨é¡¹æ°æ®\r\n    @Input() model: DropdownItem[] = [\r\n        { label: 'é¡¹ç®ä¸', value: 'asdasd' },\r\n        { label: 'é¡¹ç®äº', value: 'asdasd' },\r\n        { label: 'é¡¹ç®ä¸', value: 'asdasd' }\r\n    ];\r\n    @ContentChild('dropdownTempl') dropdownTempl: TemplateRef<any>;\r\n    // æé®åç»ä¹å  å·¦è¾¹æé®äºä»¶\r\n    // tslint:disable-next-line:no-output-rename\r\n    @Output('left-click') leftClick: EventEmitter<any> = new EventEmitter<\r\n        any\r\n    >();\r\n    @Output() select: EventEmitter<any> = new EventEmitter<any>();\r\n    // ä¸æåè¡¨æ¾ç¤ºæèéèè§¦åçäºä»¶\r\n    // tslint:disable-next-line:no-output-rename\r\n    @Output('visible-change') visibleChange: EventEmitter<\r\n        any\r\n    > = new EventEmitter<any>();\r\n    dropdownButton: HTMLButtonElement;\r\n    menu: HTMLDivElement;\r\n    // åè¡¨é¡¹çæ¾ç¤ºä¸å¦\r\n    show = false;\r\n    globalListenFunc: Function;\r\n    menuListenFunc: Function;\r\n\r\n\r\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n    ngOnInit(): void {\r\n        this.menu = this.el.nativeElement.querySelector('.dropdown-menu');\r\n    }\r\n    ngAfterViewInit(): void {}\r\n    ngOnDestroy(): void {\r\n        if (this.globalListenFunc) {\r\n            this.globalListenFunc();\r\n        }\r\n    }\r\n    // ç¹å»åè¡¨é¡¹æ¾ç¤ºä¸å¦\r\n    showDropMenu(event?: Event) {\r\n        if (this.hover) {\r\n            return;\r\n        }\r\n        if (event) {\r\n            event.stopPropagation();\r\n        }\r\n        this.show = !this.show;\r\n        this.visibleChange.emit();\r\n\r\n        this.globalListenFunc = this.renderer.listen(\r\n            'document',\r\n            'click',\r\n            () => {\r\n                this.closeDropMenu();\r\n            }\r\n        );\r\n        // å¦æä¸è®¾ç½®hide-on-click,åè¯´æç¹å»ä¸æä¹åä¸æä¸æ¶å¤±\r\n        if (!this.hideOnClick) {\r\n            this.menuListenFunc = this.renderer.listen(\r\n                this.menu,\r\n                'click',\r\n                e => {\r\n                    e.stopPropagation();\r\n                }\r\n            );\r\n        }\r\n    }\r\n    // ç¹å»åç´ ä¹å¤  åè¡¨é¡¹æ¶å¤±\r\n    closeDropMenu() {\r\n        if (this.hover) {\r\n            return;\r\n        }\r\n        this.show = false;\r\n        this.visibleChange.emit();\r\n        // è§£é¤äºä»¶ç»å®\r\n        if (this.globalListenFunc) {\r\n            this.globalListenFunc();\r\n        }\r\n        if (this.menuListenFunc) {\r\n            this.menuListenFunc();\r\n        }\r\n    }\r\n    // hover å®ç°\r\n    hoverDropdown() {\r\n        if (!this.hover) {\r\n            return;\r\n        }\r\n        this.show = !this.show;\r\n        this.visibleChange.emit();\r\n    }\r\n    /**\r\n     * å¼¹åºäºä»¶\r\n     */\r\n    selectItem(model) {\r\n        this.select.emit(model);\r\n    }\r\n    leftButtonClick() {\r\n        this.leftClick.emit();\r\n    }\r\n    resolveSize(size) {\r\n        const regex = /px|em|rem|pt|%/;\r\n        // è¯´ææ¯å­ç¬¦ä¸²\r\n        return regex.test(size)\r\n            ? `${parseInt(size, 10)}${size.match(regex)[0]}`\r\n            : `${size}px`;\r\n    }\r\n\r\n  \r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { DropdownItem } from './dropdown.item.props';\r\n@Component({\r\n    selector: 'farris-dropdown-item',\r\n    template: `\r\n        <div class=\"dropdown-divider\" *ngIf=\"model.divide\"></div>\r\n        <a\r\n            class=\"dropdown-item\"\r\n            [class.active]=\"model.active\"\r\n            [class.disabled]=\"model.disabled\"\r\n            href=\"javascript:void(0)\"\r\n            (click)=\"selectItem()\"\r\n            >{{ model.label }}</a\r\n        >\r\n    `\r\n})\r\nexport class FarrisDropdownItemComponent {\r\n    @Input() model: DropdownItem;\r\n    @Output() select: EventEmitter<any> = new EventEmitter<any>();\r\n    selectItem() {\r\n        if (this.model.disabled) {\r\n            return;\r\n        }\r\n        this.select.emit(this.model);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FarrisDropdownComponent } from './dropdown.component';\r\nimport { FarrisDropdownItemComponent } from './dropdown.item.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        FarrisDropdownComponent,\r\n        FarrisDropdownItemComponent\r\n    ],\r\n    exports: [\r\n        FarrisDropdownComponent,\r\n        FarrisDropdownItemComponent\r\n    ]\r\n})\r\nexport class FarrisDropdownModule {\r\n\r\n}\r\n"]}