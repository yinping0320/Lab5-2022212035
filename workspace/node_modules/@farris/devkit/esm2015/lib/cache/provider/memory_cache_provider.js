import { CacheKeyCompare } from "../types";
export class MemoryCacheProvider {
    constructor(cacheKeyCompare) {
        this.store = new Array();
        this.cacheKeyCompare = cacheKeyCompare || new CacheKeyCompare();
    }
    has(key) {
        if (this.store.length < 1) {
            return false;
        }
        const index = this.store.findIndex((item) => item && this.cacheKeyCompare.compare(key, item.key));
        return index !== -1;
    }
    length() {
        return this.store.length;
    }
    set(value) {
        this.store.push(value);
    }
    get(key) {
        if (this.store.length < 1) {
            return undefined;
        }
        return this.store.find((item) => this.cacheKeyCompare.compare(key, item.key));
    }
    delete(key) {
        if (this.store.length < 1) {
            return;
        }
        const index = this.store.findIndex((item) => item && this.cacheKeyCompare.compare(key, item.key));
        this.store.splice(index, 1);
    }
    clear() {
        this.store.length = 0;
    }
    keys() {
        return this.store.keys();
    }
    values() {
        return this.store.values();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5X2NhY2hlX3Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY2FjaGUvcHJvdmlkZXIvbWVtb3J5X2NhY2hlX3Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQXVELE1BQU0sVUFBVSxDQUFDO0FBRWhHLE1BQU0sT0FBTyxtQkFBbUI7SUFJOUIsWUFBWSxlQUFrQztRQUM1QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFtQixDQUFDO1FBQzFDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxJQUFJLElBQUksZUFBZSxFQUFFLENBQUM7SUFDbEUsQ0FBQztJQUNNLEdBQUcsQ0FBQyxHQUFRO1FBQ2pCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQXFCLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkgsT0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUNNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFDTSxHQUFHLENBQUMsS0FBc0I7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUNNLEdBQUcsQ0FBQyxHQUFRO1FBQ2pCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQXFCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBQ00sTUFBTSxDQUFDLEdBQVE7UUFDcEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsT0FBTztTQUNSO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFxQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25ILElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ00sS0FBSztRQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBQ00sSUFBSTtRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ00sTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWNoZUtleUNvbXBhcmUsIElDYWNoZUtleUNvbXBhcmUsIElDYWNoZU9iamVjdCwgSUNhY2hlUHJvdmlkZXIsIEtleSB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lbW9yeUNhY2hlUHJvdmlkZXI8VD4gaW1wbGVtZW50cyBJQ2FjaGVQcm92aWRlcjxUPiB7XHJcbiAgcHJvdGVjdGVkIHN0b3JlOiBBcnJheTxJQ2FjaGVPYmplY3Q8VD4+O1xyXG4gIHByb3RlY3RlZCBjYWNoZUtleUNvbXBhcmU6IElDYWNoZUtleUNvbXBhcmU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhY2hlS2V5Q29tcGFyZT86IElDYWNoZUtleUNvbXBhcmUpIHtcclxuICAgIHRoaXMuc3RvcmUgPSBuZXcgQXJyYXk8SUNhY2hlT2JqZWN0PFQ+PigpO1xyXG4gICAgdGhpcy5jYWNoZUtleUNvbXBhcmUgPSBjYWNoZUtleUNvbXBhcmUgfHwgbmV3IENhY2hlS2V5Q29tcGFyZSgpO1xyXG4gIH1cclxuICBwdWJsaWMgaGFzKGtleTogS2V5KTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5zdG9yZS5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdG9yZS5maW5kSW5kZXgoKGl0ZW06IElDYWNoZU9iamVjdDxUPikgPT4gaXRlbSAmJiB0aGlzLmNhY2hlS2V5Q29tcGFyZS5jb21wYXJlKGtleSwgaXRlbS5rZXkpKTtcclxuICAgIHJldHVybiBpbmRleCAhPT0gLTE7XHJcbiAgfVxyXG4gIHB1YmxpYyBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JlLmxlbmd0aDtcclxuICB9XHJcbiAgcHVibGljIHNldCh2YWx1ZTogSUNhY2hlT2JqZWN0PFQ+KSB7XHJcbiAgICB0aGlzLnN0b3JlLnB1c2godmFsdWUpO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0KGtleTogS2V5KTogSUNhY2hlT2JqZWN0PFQ+IHtcclxuICAgIGlmICh0aGlzLnN0b3JlLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnN0b3JlLmZpbmQoKGl0ZW06IElDYWNoZU9iamVjdDxUPikgPT4gdGhpcy5jYWNoZUtleUNvbXBhcmUuY29tcGFyZShrZXksIGl0ZW0ua2V5KSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBkZWxldGUoa2V5OiBLZXkpIHtcclxuICAgIGlmICh0aGlzLnN0b3JlLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnN0b3JlLmZpbmRJbmRleCgoaXRlbTogSUNhY2hlT2JqZWN0PFQ+KSA9PiBpdGVtICYmIHRoaXMuY2FjaGVLZXlDb21wYXJlLmNvbXBhcmUoa2V5LCBpdGVtLmtleSkpO1xyXG4gICAgdGhpcy5zdG9yZS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIH1cclxuICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICB0aGlzLnN0b3JlLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG4gIHB1YmxpYyBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8S2V5PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5rZXlzKCk7XHJcbiAgfVxyXG4gIHB1YmxpYyB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxJQ2FjaGVPYmplY3Q8VD4+IHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JlLnZhbHVlcygpO1xyXG4gIH1cclxufSJdfQ==