import { CacheObject } from "./cache_object";
/**
 * 缓存方法返回值
 * @param options ICacheOptions 缓存选项
 * @returns MethodDecorator
 */
export function Cacheable(options) {
    return function (target, propertyKey, descriptor) {
        if (descriptor === undefined) {
            descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);
        }
        const className = target.name || target && target.constructor && target.constructor.name;
        const method = descriptor.value;
        descriptor.value = function (...args) {
            const ttl = options && options.ttl || 0;
            const provider = options && options.provider;
            if (!provider) {
                throw new Error('cache provider is not defined.');
            }
            let key = options && options.key || undefined;
            if (key && key instanceof Function) {
                key = key(this, args);
            }
            let cacheKey = key;
            if (!cacheKey) {
                const argsString = JSON.stringify(args);
                cacheKey = `${className}#${String(propertyKey)}#${argsString}`;
            }
            const cacheObject = provider.get(cacheKey);
            if (!cacheObject || (ttl && cacheObject.isExpired() === true)) {
                const result = method.apply(this, args);
                const object = new CacheObject(cacheKey, result, ttl);
                provider.set(object);
                return result;
            }
            return cacheObject && cacheObject.content;
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY2FjaGUvY29yZS9kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsU0FBUyxDQUFJLE9BQTBCO0lBQ3JELE9BQU8sVUFBVSxNQUFXLEVBQUUsV0FBNEIsRUFBRSxVQUE4QjtRQUN4RixJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFDNUIsVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDbkU7UUFDRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ3pGLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDaEMsVUFBVSxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsSUFBVztZQUN6QyxNQUFNLEdBQUcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDeEMsTUFBTSxRQUFRLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDN0MsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDYixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7YUFDbkQ7WUFDRCxJQUFJLEdBQUcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxTQUFTLENBQUM7WUFDOUMsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLFFBQVEsRUFBRTtnQkFDbEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDdkI7WUFDRCxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDYixNQUFNLFVBQVUsR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoRCxRQUFRLEdBQUcsR0FBRyxTQUFTLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDO2FBQ2hFO1lBQ0QsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtnQkFDN0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0sTUFBTSxHQUFvQixJQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN2RSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyQixPQUFPLE1BQU0sQ0FBQzthQUNmO1lBRUQsT0FBTyxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUM1QyxDQUFDLENBQUE7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNhY2hlT2JqZWN0LCBJQ2FjaGVPcHRpb25zIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCB7IENhY2hlT2JqZWN0IH0gZnJvbSBcIi4vY2FjaGVfb2JqZWN0XCI7XHJcbi8qKlxyXG4gKiDnvJPlrZjmlrnms5Xov5Tlm57lgLxcclxuICogQHBhcmFtIG9wdGlvbnMgSUNhY2hlT3B0aW9ucyDnvJPlrZjpgInpoblcclxuICogQHJldHVybnMgTWV0aG9kRGVjb3JhdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQ2FjaGVhYmxlPFQ+KG9wdGlvbnM/OiBJQ2FjaGVPcHRpb25zPFQ+KTogTWV0aG9kRGVjb3JhdG9yIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcclxuICAgIGlmIChkZXNjcmlwdG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjbGFzc05hbWUgPSB0YXJnZXQubmFtZSB8fCB0YXJnZXQgJiYgdGFyZ2V0LmNvbnN0cnVjdG9yICYmIHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lO1xyXG4gICAgY29uc3QgbWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcclxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pIHtcclxuICAgICAgY29uc3QgdHRsID0gb3B0aW9ucyAmJiBvcHRpb25zLnR0bCB8fCAwO1xyXG4gICAgICBjb25zdCBwcm92aWRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wcm92aWRlcjtcclxuICAgICAgaWYgKCFwcm92aWRlcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2FjaGUgcHJvdmlkZXIgaXMgbm90IGRlZmluZWQuJyk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGtleSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5rZXkgfHwgdW5kZWZpbmVkO1xyXG4gICAgICBpZiAoa2V5ICYmIGtleSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAga2V5ID0ga2V5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBjYWNoZUtleSA9IGtleTtcclxuICAgICAgaWYgKCFjYWNoZUtleSkge1xyXG4gICAgICAgIGNvbnN0IGFyZ3NTdHJpbmc6IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGFyZ3MpO1xyXG4gICAgICAgIGNhY2hlS2V5ID0gYCR7Y2xhc3NOYW1lfSMke1N0cmluZyhwcm9wZXJ0eUtleSl9IyR7YXJnc1N0cmluZ31gO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGNhY2hlT2JqZWN0ID0gcHJvdmlkZXIuZ2V0KGNhY2hlS2V5KTtcclxuICAgICAgaWYgKCFjYWNoZU9iamVjdCB8fCAodHRsICYmIGNhY2hlT2JqZWN0LmlzRXhwaXJlZCgpID09PSB0cnVlKSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICBjb25zdCBvYmplY3Q6IElDYWNoZU9iamVjdDxUPiA9IG5ldyBDYWNoZU9iamVjdChjYWNoZUtleSwgcmVzdWx0LCB0dGwpO1xyXG4gICAgICAgIHByb3ZpZGVyLnNldChvYmplY3QpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjYWNoZU9iamVjdCAmJiBjYWNoZU9iamVjdC5jb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XHJcbiAgfVxyXG59Il19