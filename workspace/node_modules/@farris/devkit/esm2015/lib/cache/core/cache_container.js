import { CacheObject } from "./cache_object";
export class CacheContainer {
    constructor(provider) {
        this.provider = provider;
        this.provider = provider;
    }
    get(key) {
        const cacheObject = this.provider.get(key);
        if (!cacheObject) {
            return undefined;
        }
        const isExpired = this.isCacheObjectExpired(cacheObject);
        return isExpired ? undefined : cacheObject.content;
    }
    set(key, value, ttl) {
        const cacheObject = new CacheObject(key, value, ttl || 0);
        this.provider.set(cacheObject);
    }
    isCacheObjectExpired(cacheObject) {
        if (typeof cacheObject.ttl === 'number') {
            return Date.now().valueOf() > cacheObject.createAt.valueOf() + cacheObject.ttl;
        }
        else {
            return Date.now() > cacheObject.ttl.valueOf();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVfY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY2FjaGUvY29yZS9jYWNoZV9jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQXNCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBQy9DLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFDTSxHQUFHLENBQUMsR0FBUTtRQUNqQixNQUFNLFdBQVcsR0FBb0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6RCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBQ3JELENBQUM7SUFDTSxHQUFHLENBQUMsR0FBUSxFQUFFLEtBQVEsRUFBRSxHQUFTO1FBQ3RDLE1BQU0sV0FBVyxHQUFvQixJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ08sb0JBQW9CLENBQUMsV0FBNEI7UUFDdkQsSUFBSSxPQUFPLFdBQVcsQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztTQUNoRjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUMvQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDYWNoZU9iamVjdCwgSUNhY2hlUHJvdmlkZXIsIEtleSwgVFRMIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCB7IENhY2hlT2JqZWN0IH0gZnJvbSBcIi4vY2FjaGVfb2JqZWN0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FjaGVDb250YWluZXI8VD57XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHByb3ZpZGVyOiBJQ2FjaGVQcm92aWRlcjxUPikge1xyXG4gICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0KGtleTogS2V5KTogVCB7XHJcbiAgICBjb25zdCBjYWNoZU9iamVjdDogSUNhY2hlT2JqZWN0PFQ+ID0gdGhpcy5wcm92aWRlci5nZXQoa2V5KTtcclxuICAgIGlmICghY2FjaGVPYmplY3QpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGNvbnN0IGlzRXhwaXJlZCA9IHRoaXMuaXNDYWNoZU9iamVjdEV4cGlyZWQoY2FjaGVPYmplY3QpO1xyXG4gICAgcmV0dXJuIGlzRXhwaXJlZCA/IHVuZGVmaW5lZCA6IGNhY2hlT2JqZWN0LmNvbnRlbnQ7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQoa2V5OiBLZXksIHZhbHVlOiBULCB0dGw/OiBUVEwpIHtcclxuICAgIGNvbnN0IGNhY2hlT2JqZWN0OiBJQ2FjaGVPYmplY3Q8VD4gPSBuZXcgQ2FjaGVPYmplY3Qoa2V5LCB2YWx1ZSwgdHRsIHx8IDApO1xyXG4gICAgdGhpcy5wcm92aWRlci5zZXQoY2FjaGVPYmplY3QpO1xyXG4gIH1cclxuICBwcml2YXRlIGlzQ2FjaGVPYmplY3RFeHBpcmVkKGNhY2hlT2JqZWN0OiBJQ2FjaGVPYmplY3Q8VD4pIHtcclxuICAgIGlmICh0eXBlb2YgY2FjaGVPYmplY3QudHRsID09PSAnbnVtYmVyJykge1xyXG4gICAgICByZXR1cm4gRGF0ZS5ub3coKS52YWx1ZU9mKCkgPiBjYWNoZU9iamVjdC5jcmVhdGVBdC52YWx1ZU9mKCkgKyBjYWNoZU9iamVjdC50dGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSA+IGNhY2hlT2JqZWN0LnR0bC52YWx1ZU9mKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19