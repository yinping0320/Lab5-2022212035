import { Injectable, Type } from '@angular/core';
import { EventBusProxy } from './event-bus-proxy';
import { EventPipe } from './event-pipe';
export class EventBus {
    constructor() {
        this.proxyMap = new Map();
        this.eventMap = new Map();
    }
    getProxy(ownerType, eventTokenValueProvider) {
        const ownerName = ownerType.constructor.typeName || ownerType.constructor.name;
        if (!this.proxyMap.has(ownerName)) {
            this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));
        }
        return this.proxyMap.get(ownerName);
    }
    /**
     * 发送事件，通知订阅者接收消息。
     */
    // tslint:disable-next-line: max-line-length
    post(emitterType, tokenValue, eventName, eventArgs, sender, eventType, eventId) {
        const eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return;
        }
        if (!emitterType) {
            console.error('post方法的参数emitterType不能为空。');
            return;
        }
        let emitter;
        if (emitterType instanceof Type) {
            emitter = emitterType.typeName || emitterType.name;
        }
        else {
            emitter = emitterType;
        }
        if (typeof eventId === 'undefined') {
            eventId = new Date().valueOf();
        }
        for (const eventPipe of eventPipeList) {
            if (eventPipe.matchEmitterToken(emitter, tokenValue)) {
                eventPipe.post(eventArgs, sender, eventType, eventId);
                eventPipe.unSubscribeForOnce();
            }
        }
    }
    /**
     * 订阅事件
     */
    on(target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);
    }
    /**
     * 注销监听
     * @param target
     * @param tokenValue
     * @param eventName
     * @param caller
     */
    off(target, tokenValue, eventName, caller) {
        const eventPipeList = this.eventMap.get(eventName);
        if (eventPipeList) {
            const index = eventPipeList.findIndex((eventPipe) => {
                if (eventPipe.subscriptions.get(caller)) {
                    return eventPipe.name === eventName && eventPipe.tokenValue === tokenValue && eventPipe.emitter === target;
                }
                return false;
            });
            if (index !== -1) {
                eventPipeList.splice(index, 1);
            }
        }
    }
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     */
    once(target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);
    }
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     */
    requestFor(target, tokenValue, requestName, requestValue, success, fail) {
        const eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);
        if (eventPipe) {
            this.once(target, tokenValue, requestName, this, (response) => {
                if (response.status === 'success') {
                    success(response.data);
                }
                else {
                    if (fail) {
                        fail('No target responser listening');
                    }
                }
            });
            eventPipe.post({ target: target, token: tokenValue, data: requestValue });
        }
        else {
            if (fail) {
                fail('No target responser listening.');
            }
        }
    }
    /**
     * 监听一个请求事件，给出响应
     */
    responseOn(responseSubject, requestName, callback) {
        this.on('RequestSubject', null, requestName, this, (requestObj) => {
            const response = { status: 'fail', data: null };
            if (responseSubject === requestObj.target) {
                response.data = callback(requestObj.data);
                response.status = 'success';
            }
            this.post(requestObj.target, requestObj.token, requestName, response);
        });
    }
    getEventPipe(eventName, target, tokenValue) {
        let eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            eventPipeList = new Array();
            this.eventMap.set(eventName, eventPipeList);
        }
        // 1、一个事件不允许多个订阅
        // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
        // if (!eventPipe) {
        //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
        // }
        // 2、一个事件允许多个订阅
        const eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
        return eventPipe;
    }
    findExistEventPipe(eventName, target, tokenValue) {
        const eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return null;
        }
        // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
        for (const eventPipe of eventPipeList) {
            if (eventPipe.matchEmitterToken(target, tokenValue)) {
                return eventPipe;
            }
        }
        return null;
    }
}
EventBus.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventBus.ctorParameters = () => [];
export class EventCache {
    static setToken(key, value) {
        EventCache.tokens.set(key, value);
    }
    static getToken(key) {
        return EventCache.tokens.get(key);
    }
}
EventCache.tokens = new Map();
class RequestSubject {
}
class DataClass {
}
//# sourceMappingURL=data:application/json;base64,