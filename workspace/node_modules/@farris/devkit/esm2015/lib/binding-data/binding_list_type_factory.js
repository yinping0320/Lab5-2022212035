import { BindingList } from "./binding_list";
/**
 * BindingListTypeFactory
 */
export class BindingListTypeFactory {
    static create(bindingProperties) {
        const bindingListType = this.getType(bindingProperties);
        const bindingList = new bindingListType(bindingProperties);
        return bindingList;
    }
    /**
     * 创建BindingList模板类
     * @param bindingProperties
     * @returns
     */
    static createType(bindingProperties) {
        const bindingListType = class BindingListType extends BindingList {
            constructor(properties) {
                super(properties);
            }
        };
        const bindingListTypePrototype = bindingListType.prototype;
        this.extendProperties(bindingListTypePrototype, bindingProperties);
        return bindingListType;
    }
    /**
     * 扩展BindingList模板类属性
     * @param bindingListPrototype bindingList原型
     * @param bindingProperties 属性数组
     */
    static extendProperties(bindingListPrototype, bindingProperties) {
        bindingProperties.forEach((bindingProperty) => {
            const propertyName = bindingProperty.name;
            Object.defineProperty(bindingListPrototype, propertyName, {
                get: function () {
                    return this.currentItem[propertyName];
                }
            });
        });
    }
    /**
     * 获取缓存的bindingList模板类
     * @param bindingProperties bindingList属性
     * @returns
     */
    static getType(bindingProperties) {
        if (this.provider.has(bindingProperties)) {
            return this.provider.get(bindingProperties);
        }
        const bindingListType = this.createType(bindingProperties);
        this.provider.set(bindingProperties, bindingListType);
        return bindingListType;
    }
}
BindingListTypeFactory.provider = new Map();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19saXN0X3R5cGVfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2JpbmRpbmctZGF0YS9iaW5kaW5nX2xpc3RfdHlwZV9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFFMUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBb0M7UUFDdkQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sV0FBVyxHQUFHLElBQUksZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDM0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFvQztRQUM1RCxNQUFNLGVBQWUsR0FBRyxNQUFNLGVBQWdCLFNBQVEsV0FBVztZQUMvRCxZQUFZLFVBQTZCO2dCQUN2QyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDcEIsQ0FBQztTQUNGLENBQUE7UUFDRCxNQUFNLHdCQUF3QixHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDbkUsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsb0JBQWlDLEVBQUUsaUJBQW9DO1FBQ3JHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLGVBQWdDLEVBQUUsRUFBRTtZQUM3RCxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxFQUFFO2dCQUN4RCxHQUFHLEVBQUU7b0JBQ0gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNLLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQW9DO1FBQ3pELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUN4QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDN0M7UUFDRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDdEQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQzs7QUFoRGMsK0JBQVEsR0FBOEMsSUFBSSxHQUFHLEVBQXdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQ2xhc3NUeXBlIH0gZnJvbSBcIi4uL2VudGl0eVwiO1xyXG5pbXBvcnQgeyBCaW5kaW5nTGlzdCB9IGZyb20gXCIuL2JpbmRpbmdfbGlzdFwiO1xyXG5pbXBvcnQgeyBCaW5kaW5nUHJvcGVydHkgfSBmcm9tIFwiLi9iaW5kaW5nX3Byb3BlcnR5XCI7XHJcbi8qKlxyXG4gKiBCaW5kaW5nTGlzdFR5cGVGYWN0b3J5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQmluZGluZ0xpc3RUeXBlRmFjdG9yeSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcHJvdmlkZXI6IE1hcDxCaW5kaW5nUHJvcGVydHlbXSwgVHlwZTxCaW5kaW5nTGlzdD4+ID0gbmV3IE1hcDxCaW5kaW5nUHJvcGVydHlbXSwgVHlwZTxCaW5kaW5nTGlzdD4+KCk7XHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYmluZGluZ1Byb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdKSB7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdFR5cGUgPSB0aGlzLmdldFR5cGUoYmluZGluZ1Byb3BlcnRpZXMpO1xyXG4gICAgY29uc3QgYmluZGluZ0xpc3QgPSBuZXcgYmluZGluZ0xpc3RUeXBlKGJpbmRpbmdQcm9wZXJ0aWVzKTtcclxuICAgIHJldHVybiBiaW5kaW5nTGlzdDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Yib5bu6QmluZGluZ0xpc3TmqKHmnb/nsbtcclxuICAgKiBAcGFyYW0gYmluZGluZ1Byb3BlcnRpZXMgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlVHlwZShiaW5kaW5nUHJvcGVydGllczogQmluZGluZ1Byb3BlcnR5W10pOiBDbGFzc1R5cGU8QmluZGluZ0xpc3Q+IHtcclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0VHlwZSA9IGNsYXNzIEJpbmRpbmdMaXN0VHlwZSBleHRlbmRzIEJpbmRpbmdMaXN0IHtcclxuICAgICAgY29uc3RydWN0b3IocHJvcGVydGllczogQmluZGluZ1Byb3BlcnR5W10pIHtcclxuICAgICAgICBzdXBlcihwcm9wZXJ0aWVzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgYmluZGluZ0xpc3RUeXBlUHJvdG90eXBlID0gYmluZGluZ0xpc3RUeXBlLnByb3RvdHlwZTtcclxuICAgIHRoaXMuZXh0ZW5kUHJvcGVydGllcyhiaW5kaW5nTGlzdFR5cGVQcm90b3R5cGUsIGJpbmRpbmdQcm9wZXJ0aWVzKTtcclxuICAgIHJldHVybiBiaW5kaW5nTGlzdFR5cGU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaJqeWxlUJpbmRpbmdMaXN05qih5p2/57G75bGe5oCnXHJcbiAgICogQHBhcmFtIGJpbmRpbmdMaXN0UHJvdG90eXBlIGJpbmRpbmdMaXN05Y6f5Z6LXHJcbiAgICogQHBhcmFtIGJpbmRpbmdQcm9wZXJ0aWVzIOWxnuaAp+aVsOe7hFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGV4dGVuZFByb3BlcnRpZXMoYmluZGluZ0xpc3RQcm90b3R5cGU6IEJpbmRpbmdMaXN0LCBiaW5kaW5nUHJvcGVydGllczogQmluZGluZ1Byb3BlcnR5W10pIHtcclxuICAgIGJpbmRpbmdQcm9wZXJ0aWVzLmZvckVhY2goKGJpbmRpbmdQcm9wZXJ0eTogQmluZGluZ1Byb3BlcnR5KSA9PiB7XHJcbiAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IGJpbmRpbmdQcm9wZXJ0eS5uYW1lO1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmluZGluZ0xpc3RQcm90b3R5cGUsIHByb3BlcnR5TmFtZSwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEl0ZW1bcHJvcGVydHlOYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlue8k+WtmOeahGJpbmRpbmdMaXN05qih5p2/57G7XHJcbiAgICogQHBhcmFtIGJpbmRpbmdQcm9wZXJ0aWVzIGJpbmRpbmdMaXN05bGe5oCnXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0VHlwZShiaW5kaW5nUHJvcGVydGllczogQmluZGluZ1Byb3BlcnR5W10pOiBUeXBlPEJpbmRpbmdMaXN0PiB7XHJcbiAgICBpZiAodGhpcy5wcm92aWRlci5oYXMoYmluZGluZ1Byb3BlcnRpZXMpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldChiaW5kaW5nUHJvcGVydGllcyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdFR5cGUgPSB0aGlzLmNyZWF0ZVR5cGUoYmluZGluZ1Byb3BlcnRpZXMpO1xyXG4gICAgdGhpcy5wcm92aWRlci5zZXQoYmluZGluZ1Byb3BlcnRpZXMsIGJpbmRpbmdMaXN0VHlwZSk7XHJcbiAgICByZXR1cm4gYmluZGluZ0xpc3RUeXBlO1xyXG4gIH1cclxufSJdfQ==