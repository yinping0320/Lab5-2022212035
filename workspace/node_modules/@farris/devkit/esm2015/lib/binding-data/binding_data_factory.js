import { PropertyUtil as BindingPropertyUtil } from './property_util';
import { EntityUtil as EntityLoadUtil } from './entity_util';
import { BindingListFactory } from './binding_list_factory';
import { BindingData } from './binding_data';
class BindingDataFactory {
    /**
     * 根据Repository创建一个BindingData
     */
    static createFromRepository(repository, bindingPath) {
        const bindingData = new BindingData();
        const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);
        const bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, bindingPath);
        bindingData.setDataTypeInfo(repository.entityTypeInfo);
        EntityLoadUtil.loadRepository(repository, bindingList);
        // 从repository初始化bindingData
        bindingData.pagingInfo = repository.entityCollection.paginationInfo;
        return bindingData;
    }
    /**
     * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）
     * @internal
     * @summary
     * 1、该方法暂时仅供内部单元测试使用；
     * 2、该方法暂时只创建BindingData，不建立双向关联
     */
    static createFromEntityManager(entityManager, bindingPath) {
        const bindingData = new BindingData();
        const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);
        const bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, bindingPath);
        // 初始化数据
        const entities = entityManager.getEntitiesByPath([]);
        EntityLoadUtil.loadEntities(entities, bindingList);
        return bindingData;
    }
    /**
     * 根据已经存在的BindingData创建一个新的BindingData
     */
    static createFromExistingBindingData(existingBindingData, bindingPath) {
        const bindingData = new BindingData();
        bindingData.initByBindingList(existingBindingData.list, bindingPath);
        return bindingData;
    }
}
export { BindingDataFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9iaW5kaW5nLWRhdGEvYmluZGluZ19kYXRhX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFlBQVksSUFBSSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxVQUFVLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QyxNQUFNLGtCQUFrQjtJQUV0Qjs7T0FFRztJQUNJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUE4QixFQUFFLFdBQW1CO1FBQ3BGLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsTUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEQsV0FBVyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsY0FBYyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFdkQsNEJBQTRCO1FBQzVCLFdBQVcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztRQUNwRSxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLHVCQUF1QixDQUFDLGFBQW9DLEVBQUUsV0FBbUI7UUFDN0YsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN0QyxNQUFNLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEYsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakUsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV4RCxRQUFRO1FBQ1IsTUFBTSxRQUFRLEdBQWEsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRW5ELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxtQkFBZ0MsRUFBRSxXQUFtQjtRQUMvRixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckUsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5LCBFbnRpdHlNYW5hZ2VyIH0gZnJvbSAnLi4vcmVwb3NpdG9yeS9pbmRleCc7XHJcbmltcG9ydCB7IFByb3BlcnR5VXRpbCBhcyBCaW5kaW5nUHJvcGVydHlVdGlsIH0gZnJvbSAnLi9wcm9wZXJ0eV91dGlsJztcclxuaW1wb3J0IHsgRW50aXR5VXRpbCBhcyBFbnRpdHlMb2FkVXRpbCB9IGZyb20gJy4vZW50aXR5X3V0aWwnO1xyXG5pbXBvcnQgeyBCaW5kaW5nTGlzdEZhY3RvcnkgfSBmcm9tICcuL2JpbmRpbmdfbGlzdF9mYWN0b3J5JztcclxuaW1wb3J0IHsgQmluZGluZ0RhdGEgfSBmcm9tICcuL2JpbmRpbmdfZGF0YSc7XHJcblxyXG5cclxuY2xhc3MgQmluZGluZ0RhdGFGYWN0b3J5IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2uUmVwb3NpdG9yeeWIm+W7uuS4gOS4qkJpbmRpbmdEYXRhXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tUmVwb3NpdG9yeShyZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT4sIGJpbmRpbmdQYXRoOiBzdHJpbmcpOiBCaW5kaW5nRGF0YSB7XHJcbiAgICBjb25zdCBiaW5kaW5nRGF0YSA9IG5ldyBCaW5kaW5nRGF0YSgpO1xyXG4gICAgY29uc3QgYmluZGluZ1Byb3BlcnRpZXMgPSBCaW5kaW5nUHJvcGVydHlVdGlsLmdldFByb3BlcnRpZXMocmVwb3NpdG9yeS5lbnRpdHlUeXBlKTtcclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gQmluZGluZ0xpc3RGYWN0b3J5LmNyZWF0ZShiaW5kaW5nUHJvcGVydGllcyk7XHJcbiAgICBiaW5kaW5nRGF0YS5pbml0QnlCaW5kaW5nTGlzdChiaW5kaW5nTGlzdCwgYmluZGluZ1BhdGgpO1xyXG4gICAgYmluZGluZ0RhdGEuc2V0RGF0YVR5cGVJbmZvKHJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8pO1xyXG4gICAgRW50aXR5TG9hZFV0aWwubG9hZFJlcG9zaXRvcnkocmVwb3NpdG9yeSwgYmluZGluZ0xpc3QpO1xyXG5cclxuICAgIC8vIOS7jnJlcG9zaXRvcnnliJ3lp4vljJZiaW5kaW5nRGF0YVxyXG4gICAgYmluZGluZ0RhdGEucGFnaW5nSW5mbyA9IHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5wYWdpbmF0aW9uSW5mbztcclxuICAgIHJldHVybiBiaW5kaW5nRGF0YTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrkVudGl0eU1hbmFnZXLliJvlu7pCaW5kaW5nRGF0Ye+8jOW5tuW7uueri+WPjOWQkeWFs+iBlO+8iOivt+WLv+S9v+eUqO+8iVxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgeivpeaWueazleaaguaXtuS7heS+m+WGhemDqOWNleWFg+a1i+ivleS9v+eUqO+8m1xyXG4gICAqIDLjgIHor6Xmlrnms5XmmoLml7blj6rliJvlu7pCaW5kaW5nRGF0Ye+8jOS4jeW7uueri+WPjOWQkeWFs+iBlFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUVudGl0eU1hbmFnZXIoZW50aXR5TWFuYWdlcjogRW50aXR5TWFuYWdlcjxFbnRpdHk+LCBiaW5kaW5nUGF0aDogc3RyaW5nKTogQmluZGluZ0RhdGEge1xyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdQcm9wZXJ0aWVzID0gQmluZGluZ1Byb3BlcnR5VXRpbC5nZXRQcm9wZXJ0aWVzKGVudGl0eU1hbmFnZXIuZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IEJpbmRpbmdMaXN0RmFjdG9yeS5jcmVhdGUoYmluZGluZ1Byb3BlcnRpZXMpO1xyXG4gICAgYmluZGluZ0RhdGEuaW5pdEJ5QmluZGluZ0xpc3QoYmluZGluZ0xpc3QsIGJpbmRpbmdQYXRoKTtcclxuXHJcbiAgICAvLyDliJ3lp4vljJbmlbDmja5cclxuICAgIGNvbnN0IGVudGl0aWVzOiBFbnRpdHlbXSA9IGVudGl0eU1hbmFnZXIuZ2V0RW50aXRpZXNCeVBhdGgoW10pO1xyXG4gICAgRW50aXR5TG9hZFV0aWwubG9hZEVudGl0aWVzKGVudGl0aWVzLCBiaW5kaW5nTGlzdCk7XHJcblxyXG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2u5bey57uP5a2Y5Zyo55qEQmluZGluZ0RhdGHliJvlu7rkuIDkuKrmlrDnmoRCaW5kaW5nRGF0YVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUV4aXN0aW5nQmluZGluZ0RhdGEoZXhpc3RpbmdCaW5kaW5nRGF0YTogQmluZGluZ0RhdGEsIGJpbmRpbmdQYXRoOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gbmV3IEJpbmRpbmdEYXRhKCk7XHJcbiAgICBiaW5kaW5nRGF0YS5pbml0QnlCaW5kaW5nTGlzdChleGlzdGluZ0JpbmRpbmdEYXRhLmxpc3QsIGJpbmRpbmdQYXRoKTtcclxuICAgIHJldHVybiBiaW5kaW5nRGF0YTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJpbmRpbmdEYXRhRmFjdG9yeSB9O1xyXG4iXX0=