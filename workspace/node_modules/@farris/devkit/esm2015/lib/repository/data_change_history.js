import { DataChangeType } from '../core';
class DataChangeHistory {
    constructor() {
        this.history = [];
    }
    addChange(dataChange) {
        const changeType = DataChangeType[dataChange.changeType];
        this[`on${changeType}Data`](dataChange);
    }
    addChanges(dataChange) {
        dataChange.forEach(change => this.addChange(change));
    }
    clear() {
        this.history.splice(0, this.history.length);
    }
    clearByIds(ids) {
        this.history = this.history.filter(item => {
            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                for (const id of ids) {
                    const include = item.fpath.split('/').includes(id);
                    return !include;
                }
            }
            else {
                return !ids.includes(item.dataId);
            }
        });
    }
    isChanged() {
        return this.history.length > 0;
    }
    onAddData(dataChange) {
        this.history.push(dataChange);
    }
    onDeleteData(dataChange) {
        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);
        if (index >= 0) {
            this.history.splice(index, 1);
        }
        else {
            this.history.push(dataChange);
        }
    }
}
export { DataChangeHistory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9jaGFuZ2VfaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3JlcG9zaXRvcnkvZGF0YV9jaGFuZ2VfaGlzdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXJELE1BQU0saUJBQWlCO0lBRW5CO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNNLFNBQVMsQ0FBQyxVQUFzQjtRQUNuQyxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNNLFVBQVUsQ0FBQyxVQUF3QjtRQUN0QyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUNNLFVBQVUsQ0FBQyxHQUFhO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM5RCxLQUFLLE1BQU0sRUFBRSxJQUFJLEdBQUcsRUFBRTtvQkFDbEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNuRCxPQUFPLENBQUMsT0FBTyxDQUFDO2lCQUNuQjthQUNKO2lCQUFNO2dCQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNyQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNNLFNBQVM7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ08sU0FBUyxDQUFDLFVBQXNCO1FBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDTyxZQUFZLENBQUMsVUFBc0I7UUFDdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUgsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNqQztJQUNMLENBQUM7Q0FDSjtBQUNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YUNoYW5nZSwgRGF0YUNoYW5nZVR5cGUgfSBmcm9tICcuLi9jb3JlJztcclxuXHJcbmNsYXNzIERhdGFDaGFuZ2VIaXN0b3J5IHtcclxuICAgIHByaXZhdGUgaGlzdG9yeTogQXJyYXk8RGF0YUNoYW5nZT47XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbXTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhZGRDaGFuZ2UoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZVR5cGUgPSBEYXRhQ2hhbmdlVHlwZVtkYXRhQ2hhbmdlLmNoYW5nZVR5cGVdO1xyXG4gICAgICAgIHRoaXNbYG9uJHtjaGFuZ2VUeXBlfURhdGFgXShkYXRhQ2hhbmdlKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhZGRDaGFuZ2VzKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2VbXSkge1xyXG4gICAgICAgIGRhdGFDaGFuZ2UuZm9yRWFjaChjaGFuZ2UgPT4gdGhpcy5hZGRDaGFuZ2UoY2hhbmdlKSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnNwbGljZSgwLCB0aGlzLmhpc3RvcnkubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBjbGVhckJ5SWRzKGlkczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLmhpc3RvcnkgPSB0aGlzLmhpc3RvcnkuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5mcGF0aCAmJiBpdGVtLmZwYXRoICE9PSAnLycgJiYgaXRlbS5mcGF0aC5pbmNsdWRlcygnLycpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluY2x1ZGUgPSBpdGVtLmZwYXRoLnNwbGl0KCcvJykuaW5jbHVkZXMoaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaW5jbHVkZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhaWRzLmluY2x1ZGVzKGl0ZW0uZGF0YUlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGlzQ2hhbmdlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaXN0b3J5Lmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG9uQWRkRGF0YShkYXRhQ2hhbmdlOiBEYXRhQ2hhbmdlKSB7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZGF0YUNoYW5nZSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG9uRGVsZXRlRGF0YShkYXRhQ2hhbmdlOiBEYXRhQ2hhbmdlKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmhpc3RvcnkuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5kYXRhSWQgPT09IGRhdGFDaGFuZ2UuZGF0YUlkICYmIGl0ZW0uY2hhbmdlVHlwZSA9PT0gRGF0YUNoYW5nZVR5cGUuQWRkKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmhpc3Rvcnkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChkYXRhQ2hhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHsgRGF0YUNoYW5nZUhpc3RvcnkgfTtcclxuIl19