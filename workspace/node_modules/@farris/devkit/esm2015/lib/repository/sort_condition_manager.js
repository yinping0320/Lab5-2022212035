/**
 * 排序条件管理
 */
export class SortConditionManager {
    constructor() {
        this.sorts = new Map();
    }
    /**
     * 根据bingdingPath获取排序规则
     * @param bindingPath bindingPath
     * @param directionConverter converter
     */
    getConditionsByBindingPath(bindingPath, directionConverter) {
        let conditions = this.sorts.get(bindingPath) || [];
        if (conditions.length < 1) {
            return conditions;
        }
        if (typeof directionConverter === 'function') {
            conditions = conditions.map(condition => {
                const sortType = directionConverter(condition.SortType);
                return { SortField: condition.SortField, SortType: sortType };
            });
        }
        return conditions;
    }
    /**
     * 增加排序条件
     * @param bindingPath 绑定路径
     * @param field 排序字段
     * @param direction 排序方向 asc|desc
     */
    addCondition(bindingPath, field, direction) {
        // 取消排序
        if (!field || !direction) {
            this.sorts.delete(bindingPath);
            return;
        }
        const isBindingPathExist = this.sorts.has(bindingPath);
        const condition = { SortField: field, SortType: direction };
        if (!isBindingPathExist) {
            this.sorts.set(bindingPath, [condition]);
        }
        else {
            const bindingPathSortConditions = this.sorts.get(bindingPath) || [];
            // new condition will override the previous condition
            const conditionIndex = bindingPathSortConditions.findIndex(item => item.SortField === field);
            if (conditionIndex !== -1) {
                bindingPathSortConditions[conditionIndex] = condition;
            }
            else {
                bindingPathSortConditions.push(condition);
            }
        }
    }
    removeCondition(bindingPath, field) {
        throw new Error('not implement!');
    }
    /**
     * 批量增加排序条件
     * @param bindingPath bindingPath
     * @param fields fields , seprated by comma
     * @param directions directions , seprated by comma
     * @description set conditions and overwrite all conditions which has the same bindingPath
     */
    setConditions(bindingPath, fields, directions) {
        // 取消排序
        if (!fields || !directions) {
            this.sorts.delete(bindingPath);
            return;
        }
        const filedsArray = fields.split(',').filter(item => item);
        const directionsArray = directions.split(',').filter(item => item);
        if (filedsArray.length !== directionsArray.length) {
            throw new Error('arguments error,fields and direction are not match.');
        }
        const conditions = [];
        filedsArray.forEach((field, index) => {
            const condition = { SortField: field, SortType: directionsArray[index] };
            conditions.push(condition);
        });
        this.sorts.set(bindingPath, conditions);
    }
    /**
     * 清空所有排序条件
     */
    clear() {
        this.sorts.clear();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydF9jb25kaXRpb25fbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3JlcG9zaXRvcnkvc29ydF9jb25kaXRpb25fbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sT0FBTyxvQkFBb0I7SUFXL0I7UUFDRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO0lBQzdDLENBQUM7SUFDRDs7OztPQUlHO0lBQ0ksMEJBQTBCLENBQUMsV0FBbUIsRUFBRSxrQkFBdUQ7UUFDNUcsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25ELElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsT0FBTyxVQUFVLENBQUM7U0FDbkI7UUFDRCxJQUFJLE9BQU8sa0JBQWtCLEtBQUssVUFBVSxFQUFFO1lBQzVDLFVBQVUsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN0QyxNQUFNLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLFlBQVksQ0FBQyxXQUFtQixFQUFFLEtBQWEsRUFBRSxTQUFpQjtRQUN2RSxPQUFPO1FBQ1AsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQixPQUFPO1NBQ1I7UUFDRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sU0FBUyxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7UUFDNUQsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUM7YUFBTTtZQUNMLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BFLHFEQUFxRDtZQUNyRCxNQUFNLGNBQWMsR0FBRyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQzdGLElBQUksY0FBYyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUN6Qix5QkFBeUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxTQUFTLENBQUM7YUFDdkQ7aUJBQU07Z0JBQ0wseUJBQXlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzNDO1NBQ0Y7SUFDSCxDQUFDO0lBQ00sZUFBZSxDQUFDLFdBQW1CLEVBQUUsS0FBYTtRQUN2RCxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUNJLGFBQWEsQ0FBQyxXQUFtQixFQUFFLE1BQWMsRUFBRSxVQUFrQjtRQUMxRSxPQUFPO1FBQ1AsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQixPQUFPO1NBQ1I7UUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNELE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkUsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLEVBQUU7WUFDbkQsTUFBTSxTQUFTLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6RSxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRDs7T0FFRztJQUNJLEtBQUs7UUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDmjpLluo/mnaHku7bnrqHnkIZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTb3J0Q29uZGl0aW9uTWFuYWdlciB7XHJcbiAgLyoqXHJcbiAgICog5o6S5bqP5p2h5Lu26ZuG5ZCIXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICog5o6S5bqP5p2h5Lu25pWw5o2u57uT5p6E5o+P6L+w77yaXHJcbiAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAqIGtleTogYmluZGluZ1BhdGhcclxuICAgKiB2YWx1ZTogQXJyYXk8e2ZpZWxkOlwibmFtZXxldGNcIixkaXJlY3Rpb246XCJhc2N8ZGVzY1wifT5cclxuICAgKiBgYGBcclxuICAgKi9cclxuICBwcml2YXRlIHNvcnRzOiBNYXA8c3RyaW5nLCBBcnJheTxhbnk+PjtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc29ydHMgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8YW55Pj4oKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2uYmluZ2RpbmdQYXRo6I635Y+W5o6S5bqP6KeE5YiZXHJcbiAgICogQHBhcmFtIGJpbmRpbmdQYXRoIGJpbmRpbmdQYXRoXHJcbiAgICogQHBhcmFtIGRpcmVjdGlvbkNvbnZlcnRlciBjb252ZXJ0ZXJcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29uZGl0aW9uc0J5QmluZGluZ1BhdGgoYmluZGluZ1BhdGg6IHN0cmluZywgZGlyZWN0aW9uQ29udmVydGVyPzogKGRpcmVjdGlvbjogJ2FzYycgfCAnZGVzYycpID0+IGFueSkge1xyXG4gICAgbGV0IGNvbmRpdGlvbnMgPSB0aGlzLnNvcnRzLmdldChiaW5kaW5nUGF0aCkgfHwgW107XHJcbiAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybiBjb25kaXRpb25zO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBkaXJlY3Rpb25Db252ZXJ0ZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uZGl0aW9ucyA9IGNvbmRpdGlvbnMubWFwKGNvbmRpdGlvbiA9PiB7XHJcbiAgICAgICAgY29uc3Qgc29ydFR5cGUgPSBkaXJlY3Rpb25Db252ZXJ0ZXIoY29uZGl0aW9uLlNvcnRUeXBlKTtcclxuICAgICAgICByZXR1cm4geyBTb3J0RmllbGQ6IGNvbmRpdGlvbi5Tb3J0RmllbGQsIFNvcnRUeXBlOiBzb3J0VHlwZSB9O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb25kaXRpb25zO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlop7liqDmjpLluo/mnaHku7ZcclxuICAgKiBAcGFyYW0gYmluZGluZ1BhdGgg57uR5a6a6Lev5b6EXHJcbiAgICogQHBhcmFtIGZpZWxkIOaOkuW6j+Wtl+autVxyXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24g5o6S5bqP5pa55ZCRIGFzY3xkZXNjXHJcbiAgICovXHJcbiAgcHVibGljIGFkZENvbmRpdGlvbihiaW5kaW5nUGF0aDogc3RyaW5nLCBmaWVsZDogc3RyaW5nLCBkaXJlY3Rpb246IHN0cmluZykge1xyXG4gICAgLy8g5Y+W5raI5o6S5bqPXHJcbiAgICBpZiAoIWZpZWxkIHx8ICFkaXJlY3Rpb24pIHtcclxuICAgICAgdGhpcy5zb3J0cy5kZWxldGUoYmluZGluZ1BhdGgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc0JpbmRpbmdQYXRoRXhpc3QgPSB0aGlzLnNvcnRzLmhhcyhiaW5kaW5nUGF0aCk7XHJcbiAgICBjb25zdCBjb25kaXRpb24gPSB7IFNvcnRGaWVsZDogZmllbGQsIFNvcnRUeXBlOiBkaXJlY3Rpb24gfTtcclxuICAgIGlmICghaXNCaW5kaW5nUGF0aEV4aXN0KSB7XHJcbiAgICAgIHRoaXMuc29ydHMuc2V0KGJpbmRpbmdQYXRoLCBbY29uZGl0aW9uXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBiaW5kaW5nUGF0aFNvcnRDb25kaXRpb25zID0gdGhpcy5zb3J0cy5nZXQoYmluZGluZ1BhdGgpIHx8IFtdO1xyXG4gICAgICAvLyBuZXcgY29uZGl0aW9uIHdpbGwgb3ZlcnJpZGUgdGhlIHByZXZpb3VzIGNvbmRpdGlvblxyXG4gICAgICBjb25zdCBjb25kaXRpb25JbmRleCA9IGJpbmRpbmdQYXRoU29ydENvbmRpdGlvbnMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5Tb3J0RmllbGQgPT09IGZpZWxkKTtcclxuICAgICAgaWYgKGNvbmRpdGlvbkluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIGJpbmRpbmdQYXRoU29ydENvbmRpdGlvbnNbY29uZGl0aW9uSW5kZXhdID0gY29uZGl0aW9uO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJpbmRpbmdQYXRoU29ydENvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHB1YmxpYyByZW1vdmVDb25kaXRpb24oYmluZGluZ1BhdGg6IHN0cmluZywgZmllbGQ6IHN0cmluZykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50IScpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmibnph4/lop7liqDmjpLluo/mnaHku7ZcclxuICAgKiBAcGFyYW0gYmluZGluZ1BhdGggYmluZGluZ1BhdGhcclxuICAgKiBAcGFyYW0gZmllbGRzIGZpZWxkcyAsIHNlcHJhdGVkIGJ5IGNvbW1hXHJcbiAgICogQHBhcmFtIGRpcmVjdGlvbnMgZGlyZWN0aW9ucyAsIHNlcHJhdGVkIGJ5IGNvbW1hXHJcbiAgICogQGRlc2NyaXB0aW9uIHNldCBjb25kaXRpb25zIGFuZCBvdmVyd3JpdGUgYWxsIGNvbmRpdGlvbnMgd2hpY2ggaGFzIHRoZSBzYW1lIGJpbmRpbmdQYXRoXHJcbiAgICovXHJcbiAgcHVibGljIHNldENvbmRpdGlvbnMoYmluZGluZ1BhdGg6IHN0cmluZywgZmllbGRzOiBzdHJpbmcsIGRpcmVjdGlvbnM6IHN0cmluZykge1xyXG4gICAgLy8g5Y+W5raI5o6S5bqPXHJcbiAgICBpZiAoIWZpZWxkcyB8fCAhZGlyZWN0aW9ucykge1xyXG4gICAgICB0aGlzLnNvcnRzLmRlbGV0ZShiaW5kaW5nUGF0aCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGZpbGVkc0FycmF5ID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcbiAgICBjb25zdCBkaXJlY3Rpb25zQXJyYXkgPSBkaXJlY3Rpb25zLnNwbGl0KCcsJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcbiAgICBpZiAoZmlsZWRzQXJyYXkubGVuZ3RoICE9PSBkaXJlY3Rpb25zQXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignYXJndW1lbnRzIGVycm9yLGZpZWxkcyBhbmQgZGlyZWN0aW9uIGFyZSBub3QgbWF0Y2guJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb25kaXRpb25zID0gW107XHJcbiAgICBmaWxlZHNBcnJheS5mb3JFYWNoKChmaWVsZDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IHsgU29ydEZpZWxkOiBmaWVsZCwgU29ydFR5cGU6IGRpcmVjdGlvbnNBcnJheVtpbmRleF0gfTtcclxuICAgICAgY29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc29ydHMuc2V0KGJpbmRpbmdQYXRoLCBjb25kaXRpb25zKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5riF56m65omA5pyJ5o6S5bqP5p2h5Lu2XHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgdGhpcy5zb3J0cy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19