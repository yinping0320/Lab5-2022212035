/**
 * 过滤条件管理器
 */
export class FilterConditionManager {
    constructor() {
        this.filters = new Map();
    }
    /**
     * 获取过滤条件
     * @param bindingPath 绑定路径
     */
    getFilters(bindingPath) {
        return this.filters.get(bindingPath) || [];
    }
    /**
     * 自定义合并
     * @param bindingPath 绑定路径
     * @param merge 合并函数
     */
    mergeCondition(bindingPath, merge) {
        const conditions = this.filters.get(bindingPath) || [];
        const result = merge(conditions);
        this.filters.set(bindingPath, result);
    }
    /**
     * 增加过滤条件
     * @param bindingPath 绑定路径
     * @param condition 过滤条件
     */
    addCondition(bindingPath, condition) {
        // 通过bindingPath获取对应的过滤条件
        const conditions = this.filters.get(bindingPath);
        const index = this.findConditionIndex(bindingPath, condition);
        if (index !== -1) {
            conditions[index] = condition;
        }
        else {
            conditions.push(condition);
        }
    }
    /**
     * 批量增加过滤条件
     * @param bindingPath 绑定路径
     * @param conditions 过滤条件数组
     */
    addConditions(bindingPath, conditions) {
        if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {
            return;
        }
        conditions.forEach(condition => {
            this.addCondition(bindingPath, condition);
        });
    }
    /**
     * 删除过滤条件
     * @param bindingPath 绑定路径
     * @param predicate 条件表达式
     */
    removeCondition(bindingPath, predicate) {
        const conditions = this.filters.get(bindingPath);
        if (!conditions || conditions.length < 1) {
            return;
        }
        const removes = conditions.filter(predicate);
        if (removes) {
            removes.forEach(condition => {
                const index = this.findConditionIndex(bindingPath, condition);
                if (index >= 0) {
                    conditions.splice(index, 1);
                }
            });
        }
    }
    /**
     * 清空过滤条件
     */
    clear() {
        this.filters.clear();
    }
    /**
     * 设置过滤条件数组
     * @param bindingPath 绑定路径
     * @param conditions 过滤条件数组
     */
    setConditions(bindingPath, conditions) {
        this.filters.set(bindingPath, conditions);
    }
    /**
     * 查找过滤条件索引
     * @param bindingPath 绑定路径
     * @param condition 过滤条件
     */
    findConditionIndex(bindingPath, condition) {
        if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {
            return -1;
        }
        const conditions = this.filters.get(bindingPath);
        if (!conditions || conditions.length < 1) {
            return -1;
        }
        return conditions.findIndex((value, index) => {
            let isEqual = true;
            const props = Object.keys(condition);
            for (const prop of props) {
                if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {
                    isEqual = false;
                    break;
                }
            }
            return isEqual;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,