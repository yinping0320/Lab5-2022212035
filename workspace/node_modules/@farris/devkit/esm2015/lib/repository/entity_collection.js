import { Modification, ModifyType } from '../changeset/index';
import { Subject } from 'rxjs';
import { Entity, FieldMetadataUtil, EntityList } from '../entity/index';
// tslint:disable: no-bitwise
/**
 * 实体集合
 * @todo：应该用EntityList代替。
 */
class EntityCollection {
    /**
     * 构造函数
     */
    constructor(entityType) {
        this.innerEntitySet = new Set();
        this.innerEntityMap = new Map();
        this.collectionChanged = new Subject();
        this.changes = new Subject();
        this.entityType = entityType;
        this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;
    }
    /**
     *变更策略
     */
    set changeSetPolicy(policy) {
        this._changeSetPolicy = policy;
    }
    get changeSetPolicy() {
        return this._changeSetPolicy;
    }
    /**
     * 实体数量
     */
    count() {
        return this.innerEntitySet.size;
    }
    get entityTypeName() {
        return this.entityType.name;
    }
    /**
     * 是否包含指定主键值的实体
     * @param id 主键值
     */
    has(id) {
        return this.innerEntityMap.has(id);
    }
    /**
     * 清空全部实体
     */
    clear() {
        this.innerEntityMap.clear();
        this.innerEntitySet.clear();
        this.notifyCollectionChanged(new Modification([], ModifyType.Load));
    }
    /**
     * 清空全部实体
     * @param isReset 是否为重置实体操作
     */
    reset(notify = true) {
        this.innerEntityMap.forEach(entity => {
            entity.unsubscribe.next();
            entity.unsubscribe.complete();
        });
        this.innerEntitySet.forEach(entity => {
            entity.unsubscribe.next();
            entity.unsubscribe.complete();
        });
        this.innerEntityMap.clear();
        this.innerEntitySet.clear();
        if (notify === true) {
            const modification = new Modification([], ModifyType.Load);
            modification.isReset = true;
            this.notifyCollectionChanged(modification);
        }
    }
    /**
     * 转换为实体数组
     */
    toArray() {
        return Array.from(this.innerEntitySet);
    }
    /**
     * 转换为JSON数组
     */
    toJSON() {
        const result = [];
        const entities = this.toArray();
        entities.forEach((entity) => {
            result.push(entity.toJSON());
        });
        return result;
    }
    /**
     * 批量加载实体
     */
    loadEntities(entities, entityCreate = false) {
        this.innerEntityMap.clear();
        this.innerEntitySet.clear();
        entities.forEach(entity => {
            this.extendChangeSetPolicyProperty(entity);
            this.innerEntitySet.add(entity);
            this.innerEntityMap.set(entity[this.primaryKey], entity);
            this.listenEntityChangeEvent(entity);
        });
        const modification = new Modification(entities, ModifyType.Load);
        modification.entityCreate = entityCreate;
        this.notifyCollectionChanged(modification);
    }
    /**
     * 追加实体
     * @param entity 要追加的实体
     * @param isCloned 实体是否是克隆的
     */
    addEntity(entity, isCloned = false) {
        this.verifyEntityToAdd(entity);
        this.extendChangeSetPolicyProperty(entity);
        this.innerEntitySet.add(entity);
        this.innerEntityMap.set(entity[this.primaryKey], entity);
        this.listenEntityChangeEvent(entity);
        const modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;
        this.notifyCollectionChanged(new Modification([entity], modifyType));
    }
    /**
     * 在当前行前或后插入数据
     * @param entity 实体
     * @param position 位置
     */
    insertEntity(entity, position) {
        this.verifyEntityToAdd(entity);
        this.extendChangeSetPolicyProperty(entity);
        this.innerEntitySet.add(entity);
        this.innerEntityMap.set(entity[this.primaryKey], entity);
        this.listenEntityChangeEvent(entity);
        this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));
    }
    /**
     * 更新实体
     * @param entity entity
     * @param data 实体数据
     */
    updateEntity(entity, data) {
        entity.load(data);
        this.notifyCollectionChanged(new Modification(data, ModifyType.Update, null, null));
    }
    /**
     * 批量追加实体
     * @param entities 要加载的实体数组
     */
    addEntities(entities, options = null) {
        if (!entities) {
            return;
        }
        const entitiesToAdd = [];
        entities.forEach(entity => {
            this.verifyEntityToAdd(entity);
            entitiesToAdd.push(entity);
        });
        entitiesToAdd.forEach(entity => {
            this.extendChangeSetPolicyProperty(entity);
            this.innerEntitySet.add(entity);
            this.innerEntityMap.set(entity[this.primaryKey], entity);
            this.listenEntityChangeEvent(entity);
        });
        const isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;
        const modification = new Modification(entitiesToAdd, ModifyType.Add);
        modification.isTreeNodeLoadScene = isTreeNodeLoadScene;
        this.notifyCollectionChanged(modification);
    }
    /**
     * 添加实体（不切换当前行）
     * @param entities 实体
     */
    addData(entities, options = null) {
        if (!entities) {
            return;
        }
        const entitiesToAdd = [];
        entities.forEach(entity => {
            this.verifyEntityToAdd(entity);
            entitiesToAdd.push(entity);
        });
        entitiesToAdd.forEach(entity => {
            this.extendChangeSetPolicyProperty(entity);
            this.innerEntitySet.add(entity);
            this.innerEntityMap.set(entity[this.primaryKey], entity);
            this.listenEntityChangeEvent(entity);
        });
        // 针对树分层加载场景
        const isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;
        const modification = new Modification(entitiesToAdd, ModifyType.AddData);
        modification.isTreeNodeLoadScene = isTreeNodeLoadScene;
        this.notifyCollectionChanged(modification);
    }
    /**
     * 为实体扩展变更策略属性
     * @param entity
     */
    extendChangeSetPolicyProperty(entity) {
        if (entity) {
            entity.changeSetPolicy = this.changeSetPolicy;
        }
    }
    /**
     * 根据主键值获取实体
     */
    getEntityById(identity) {
        if (this.innerEntityMap.has(identity) === false) {
            return null;
        }
        const entity = this.innerEntityMap.get(identity);
        return entity;
    }
    /**
     * 根据路径获取实体
     */
    getEntityByPath(pathArray) {
        const rootEntityId = pathArray[0].split(':')[1];
        let parentNode = this.getEntityById(rootEntityId);
        for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {
            const currentPath = pathArray[i];
            if ((parentNode instanceof Entity) || (parentNode.typeName === 'ConcreteEntityPrototype')) {
                // @todo：强识了别冒号
                if (currentPath.indexOf(':') === -1) {
                    parentNode = parentNode[pathArray[i]];
                }
            }
            else {
                parentNode = parentNode.get(pathArray[i].split(':')[1]);
            }
        }
        return parentNode;
    }
    /**
     * id:1/a/id:2/c
     * @param pathArray 路径数组
     */
    getEntitiesByPath(pathArray) {
        const rootEntityId = pathArray[0].split(':')[1];
        let entity = this.getEntityById(rootEntityId);
        for (let i = 1; i < pathArray.length && entity; i += 2) {
            const path = pathArray[i];
            entity = entity[path];
            if (!(entity instanceof EntityList)) {
                throw new Error('路径格式错误');
            }
            if ((i + 1) < pathArray.length) {
                const id = pathArray[i + 1].split(':')[1];
                entity = entity.get(id);
            }
        }
        return entity;
    }
    /**
     * 返回符合指定条件的实体集合
     * @param predicate 条件谓词
     */
    getEntities(predicate) {
        const entities = Array.from(this.innerEntitySet);
        const matchedEntities = entities.filter(predicate);
        return matchedEntities;
    }
    /**
     * 获取全部实体
     */
    getAllEntities() {
        return Array.from(this.innerEntitySet);
    }
    /**
     * 根据主键值删除对应实体
     * @param identity 主键值
     */
    removeEntityById(identity) {
        this.verifyEntityToRemove(identity);
        const entityToRemove = this.innerEntityMap.get(identity);
        this.innerEntityMap.delete(identity);
        this.innerEntitySet.delete(entityToRemove);
        this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));
        return entityToRemove;
    }
    removeEntitiesByIds(id) {
    }
    /**
     * 删除符合条件的实体集合
     */
    removeEntities(predicate) {
        const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
        entitiesToRemove.forEach(entityToRemove => {
            this.innerEntityMap.delete(entityToRemove[this.primaryKey]);
            this.innerEntitySet.delete(entityToRemove);
        });
        this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));
        return entitiesToRemove;
    }
    /**
     * 移除数据（不切换当前行）
     * @param predicate 过滤函数
     */
    removeData(predicate) {
        const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
        entitiesToRemove.forEach(entityToRemove => {
            this.innerEntityMap.delete(entityToRemove[this.primaryKey]);
            this.innerEntitySet.delete(entityToRemove);
        });
        this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));
        return entitiesToRemove;
    }
    /**
     * 重置子表数据
     * @param paths 路径
     * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']
     * @description path参数格式
     * ```json
     * [
     * "id:b5ed23ca-88d9-4377-98ec-92f35c1325f1",
     * "cityMDMs",
     * "id:373706af-622f-4aea-a006-dddbffd7bda3",
     * "zoneMDMs"
     * ]
     * ```
     * @param entities 实体数组
     */
    resetEntities(paths, entities) {
        if (paths[0].indexOf(':') === -1) {
            throw new Error('路径格式错误');
        }
        // 获取主实体
        const id = paths[0].split(':')[1];
        let entity = this.innerEntityMap.get(id);
        let entityList = entity[paths[1]];
        if (!entity) {
            throw new Error(`找不到主键为${id}的实体`);
        }
        for (let index = 2; index < paths.length; index += 2) {
            const pathInfo = paths[index].split(':');
            const entityId = pathInfo[1];
            // 获取到当前层级的实体
            entity = entityList.get(entityId);
            if (!entity) {
                throw new Error(`找不到主键为${id}的实体`);
            }
            // 获取当前层级实体下的列表属性
            entityList = entity[paths[index + 1]];
        }
        entityList.clear();
        entityList.loadEntities(entities);
    }
    /**
     * 验证实体是否能够添加
     */
    verifyEntityToAdd(entity) {
        if (this.has(entity[this.primaryKey])) {
            throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);
        }
        return true;
    }
    /**
     * 验证实体是否能移除
     */
    verifyEntityToRemove(identity) {
        if (!this.has(identity)) {
            throw new Error(`The entity with identity of '${identity} dose not exsit.'`);
        }
        return true;
    }
    /**
     * 实体集合变更流
     */
    notifyCollectionChanged(modification) {
        this.collectionChanged.next(modification);
    }
    listenEntityChangeEvent(entity) {
        if (entity) {
            entity.onValueChanged.subscribe((change) => this.changes.next(change));
        }
    }
    //#region 分页
    /**
     * 设置分页大小
     */
    set pageSize(pageSize) {
        if (typeof (pageSize) !== 'number' || pageSize < 0) {
            throw new Error('Invalid parameter:pageSize');
        }
        const original = this.paginationInfo;
        // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });
        // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
        // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));
        this.paginationInfo = Object.assign({}, original, { pageSize });
        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
    }
    /**
     * 获取分页大小
     * @description 如果用户未指定分页大小则默认为0，即获取所有数据
     */
    get pageSize() {
        if (!!this.paginationInfo) {
            return this.paginationInfo.pageSize || 0;
        }
        return 0;
    }
    /**
     * 设置数据总条数
     */
    set totalCount(total) {
        if (typeof (total) !== 'number' || total < 0) {
            throw new Error('Invalid parameter:total');
        }
        const original = this.paginationInfo;
        // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });
        // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
        this.paginationInfo = Object.assign({}, original, { total });
        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
    }
    /**
     * 获取数据总条数
     */
    get totalCount() {
        if (!!this.paginationInfo) {
            return this.paginationInfo.total || 0;
        }
        return 0;
    }
    /**
     * 设置当前页码
     */
    set pageIndex(pageIndex) {
        if (typeof (pageIndex) !== 'number' || pageIndex < 0) {
            throw new Error('Invalid parameter:pageIndex');
        }
        const original = this.paginationInfo;
        // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });
        // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
        this.paginationInfo = Object.assign({}, original, { pageIndex });
        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
    }
    /**
     * 获取当前页码
     */
    get pageIndex() {
        if (!!this.paginationInfo) {
            return this.paginationInfo.pageIndex || 1;
        }
        return 1;
    }
    /**
     * 更新分页信息
     * @param path 绑定路径
     * @param pageInfo 分页信息
     */
    updatePaginationInfoByPath(path, pageInfo) {
        const original = this.paginationInfo;
        const { pageIndex, pageSize } = pageInfo;
        const total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;
        const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });
        this.setPaginationConfigByPath(path, paginationInfo);
    }
    /**
     * 根据路径获取分页大小
     * @param path 路径
     */
    getPaginationConfigByPath(path, defaultValue) {
        if (!path || path === '/') {
            return this.paginationInfo;
        }
        if (typeof path !== 'string') {
            throw new Error('路径必须为字符串！');
        }
        const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());
        let config = this.paginationInfo;
        paths.forEach(item => {
            if (config && config.hasOwnProperty(item)) {
                config = config[item];
            }
            else {
                config = null;
            }
        });
        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
    }
    /**
     * 设置分页信息
     * @param path 路径
     * @param value 值，其中总条数key为total
     */
    setPaginationConfigByPath(path, value) {
        const original = JSON.stringify(this.paginationInfo);
        if (!path || path === '/') {
            this.paginationInfo = value;
        }
        else {
            if (!Array.isArray(path)) {
                path = path.toString().match(/[^/[\]]+/g) || [];
            }
            path.slice(0, -1).reduce((prev, current, index) => Object(prev[current]) === prev[current]
                ? prev[current]
                : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                    ? []
                    : {}, this.paginationInfo)[path[path.length - 1]] = value;
        }
        if (JSON.stringify(this.paginationInfo) !== original) {
            this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
        }
        return this.paginationInfo;
    }
}
export { EntityCollection };
//# sourceMappingURL=data:application/json;base64,