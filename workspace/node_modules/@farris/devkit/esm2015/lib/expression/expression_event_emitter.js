import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { Listeners } from "../listener/index";
/**
 * 事件监听器主要有以下几种类型的事件：
 * 1、值变化
 * 2、行切换
 *    行切换使用场景为需要为数据计算依赖当前行时
 * 3、数据加载
 */
export class ExpressionEventEmitter {
    constructor(listeners) {
        this.listeners = listeners;
        this.events = new Array();
        this.listeners.onEvent.subscribe((eventArgs) => {
            if (this.onEvent && this.onEvent.observers.length > 0) {
                let events = [];
                if (this.events.length > 0) {
                    events = [...this.events];
                }
                events.push(eventArgs);
                this.onEvent.next(events);
                this.events = [];
            }
            else {
                this.events.push(eventArgs);
            }
        });
    }
    attach() {
        if (!this.onEvent) {
            this.onEvent = new BehaviorSubject(this.events);
        }
        return this.onEvent.asObservable();
    }
}
ExpressionEventEmitter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExpressionEventEmitter.ctorParameters = () => [
    { type: Listeners }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9ldmVudF9lbWl0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9leHByZXNzaW9uX2V2ZW50X2VtaXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU5Qzs7Ozs7O0dBTUc7QUFFSCxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLFlBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBd0IsQ0FBQztRQUNoRCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUErQixFQUFFLEVBQUU7WUFDbkUsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3JELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQzFCLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUMzQjtnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDN0I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGVBQWUsQ0FBOEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlFO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7OztZQXpCRixVQUFVOzs7O1lBVEYsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBMaXN0ZW5lcnMgfSBmcm9tIFwiLi4vbGlzdGVuZXIvaW5kZXhcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbi8qKlxyXG4gKiDkuovku7bnm5HlkKzlmajkuLvopoHmnInku6XkuIvlh6Dnp43nsbvlnovnmoTkuovku7bvvJpcclxuICogMeOAgeWAvOWPmOWMllxyXG4gKiAy44CB6KGM5YiH5o2iXHJcbiAqICAgIOihjOWIh+aNouS9v+eUqOWcuuaZr+S4uumcgOimgeS4uuaVsOaNruiuoeeul+S+nei1luW9k+WJjeihjOaXtlxyXG4gKiAz44CB5pWw5o2u5Yqg6L29XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uRXZlbnRFbWl0dGVyIHtcclxuICBwcml2YXRlIG9uRXZlbnQ6IEJlaGF2aW9yU3ViamVjdDxBcnJheTxFeHByZXNzaW9uLkV2ZW50QXJncz4+O1xyXG4gIHByaXZhdGUgZXZlbnRzOiBBcnJheTxFeHByZXNzaW9uLkV2ZW50QXJncz47XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsaXN0ZW5lcnM6IExpc3RlbmVycykge1xyXG4gICAgdGhpcy5ldmVudHMgPSBuZXcgQXJyYXk8RXhwcmVzc2lvbi5FdmVudEFyZ3M+KCk7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5vbkV2ZW50LnN1YnNjcmliZSgoZXZlbnRBcmdzOiBFeHByZXNzaW9uLkV2ZW50QXJncykgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vbkV2ZW50ICYmIHRoaXMub25FdmVudC5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGxldCBldmVudHMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5ldmVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZXZlbnRzID0gWy4uLnRoaXMuZXZlbnRzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnRzLnB1c2goZXZlbnRBcmdzKTtcclxuICAgICAgICB0aGlzLm9uRXZlbnQubmV4dChldmVudHMpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMucHVzaChldmVudEFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIGF0dGFjaCgpOiBPYnNlcnZhYmxlPEFycmF5PEV4cHJlc3Npb24uRXZlbnRBcmdzPj4ge1xyXG4gICAgaWYgKCF0aGlzLm9uRXZlbnQpIHtcclxuICAgICAgdGhpcy5vbkV2ZW50ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxBcnJheTxFeHByZXNzaW9uLkV2ZW50QXJncz4+KHRoaXMuZXZlbnRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLm9uRXZlbnQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgfVxyXG59Il19