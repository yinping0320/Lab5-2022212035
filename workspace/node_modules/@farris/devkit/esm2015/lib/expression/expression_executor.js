import { Injectable } from "@angular/core";
import { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from "@farris/expression-engine";
export class ExpressionExecutor {
    /**
     * 编译执行
     * @param expression
     * @param context
     * @returns
     */
    compile(expressionObject, context) {
        if (Object.prototype.toString.call(context) !== '[object Object]') {
            throw new Error('上下文必须为对象！');
        }
        const expressionContext = this.buildContext(context);
        if (!expressionObject.factory) {
            const expression = new ExpressionEngineExpression(expressionObject.expression, expressionContext);
            expressionObject.factory = expression.compile();
        }
        const expression = expressionObject.factory;
        return expression.eval(expressionContext);
    }
    /**
     * 解析
     * @param expression
     * @param context
     * @returns
     */
    eval(expression, context) {
        if (Object.prototype.toString.call(context) !== '[object Object]') {
            throw new Error('上下文必须为对象！');
        }
        const expressionContext = this.buildContext(context);
        const expressionEngine = new ExpressionEngine(expressionContext);
        return expressionEngine.eval(expression);
    }
    /**
     * 构造表达式上下文
     * @param context
     * @returns
     */
    buildContext(context) {
        const expressionContext = new ExpressionContext();
        if (context && Object.keys(context).length > 0) {
            Object.keys(context).forEach((key) => {
                expressionContext.set(key, context[key]);
            });
        }
        return expressionContext;
    }
}
ExpressionExecutor.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLElBQUksMEJBQTBCLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUcxSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCOzs7OztPQUtHO0lBQ0ksT0FBTyxDQUFDLGdCQUE2QyxFQUFFLE9BQWlDO1FBQzdGLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixFQUFFO1lBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDOUI7UUFDRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtZQUM3QixNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUEwQixDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2xHLGdCQUFnQixDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakQ7UUFDRCxNQUFNLFVBQVUsR0FBK0IsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO1FBQ3hFLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLElBQUksQ0FBQyxVQUFrQixFQUFFLE9BQWlDO1FBQy9ELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixFQUFFO1lBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDOUI7UUFDRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakUsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxZQUFZLENBQUMsT0FBZ0M7UUFDbkQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFLENBQUM7UUFDbEQsSUFBSSxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQzNDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQzs7O1lBL0NGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiBhcyBFeHByZXNzaW9uRW5naW5lRXhwcmVzc2lvbiwgRXhwcmVzc2lvbkNvbnRleHQsIEV4cHJlc3Npb25FbmdpbmUgfSBmcm9tIFwiQGZhcnJpcy9leHByZXNzaW9uLWVuZ2luZVwiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25FeGVjdXRvciBpbXBsZW1lbnRzIEV4cHJlc3Npb24uSUV4ZWN1dG9yIHtcclxuICAvKipcclxuICAgKiDnvJbor5HmiafooYxcclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiBcclxuICAgKiBAcGFyYW0gY29udGV4dCBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgY29tcGlsZShleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QsIGNvbnRleHQ/OiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSk6IGFueSB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGNvbnRleHQpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+S4iuS4i+aWh+W/hemhu+S4uuWvueixoe+8gScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhwcmVzc2lvbkNvbnRleHQgPSB0aGlzLmJ1aWxkQ29udGV4dChjb250ZXh0KTtcclxuICAgIGlmICghZXhwcmVzc2lvbk9iamVjdC5mYWN0b3J5KSB7XHJcbiAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbkVuZ2luZUV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdC5leHByZXNzaW9uLCBleHByZXNzaW9uQ29udGV4dCk7XHJcbiAgICAgIGV4cHJlc3Npb25PYmplY3QuZmFjdG9yeSA9IGV4cHJlc3Npb24uY29tcGlsZSgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhwcmVzc2lvbjogRXhwcmVzc2lvbkVuZ2luZUV4cHJlc3Npb24gPSBleHByZXNzaW9uT2JqZWN0LmZhY3Rvcnk7XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbi5ldmFsKGV4cHJlc3Npb25Db250ZXh0KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6Kej5p6QXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24gXHJcbiAgICogQHBhcmFtIGNvbnRleHQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGV2YWwoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0PzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29udGV4dCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign5LiK5LiL5paH5b+F6aG75Li65a+56LGh77yBJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBleHByZXNzaW9uQ29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGNvbnRleHQpO1xyXG4gICAgY29uc3QgZXhwcmVzc2lvbkVuZ2luZSA9IG5ldyBFeHByZXNzaW9uRW5naW5lKGV4cHJlc3Npb25Db250ZXh0KTtcclxuICAgIHJldHVybiBleHByZXNzaW9uRW5naW5lLmV2YWwoZXhwcmVzc2lvbik7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOihqOi+vuW8j+S4iuS4i+aWh1xyXG4gICAqIEBwYXJhbSBjb250ZXh0IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRDb250ZXh0KGNvbnRleHQ6IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogRXhwcmVzc2lvbkNvbnRleHQge1xyXG4gICAgY29uc3QgZXhwcmVzc2lvbkNvbnRleHQgPSBuZXcgRXhwcmVzc2lvbkNvbnRleHQoKTtcclxuICAgIGlmIChjb250ZXh0ICYmIE9iamVjdC5rZXlzKGNvbnRleHQpLmxlbmd0aCA+IDApIHtcclxuICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICBleHByZXNzaW9uQ29udGV4dC5zZXQoa2V5LCBjb250ZXh0W2tleV0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBleHByZXNzaW9uQ29udGV4dDtcclxuICB9XHJcbn0iXX0=