import { Injectable } from '@angular/core';
import { MetadataUtil } from '../../metadata/index';
import { NG_DECLARATION } from './declaration_decorator';
import { VariableParseService } from '../../variable/index';
import { EventTypeEnum } from './event-type';
class Declaration {
    constructor() {
    }
    /**
     * 初始化
     */
    init(frameComponent) {
        if (!frameComponent) {
            return;
        }
        this.bindDeclaration(frameComponent, null);
    }
    /**
     *  依据定义列表进行初始化
     * @param frameComponent 表单component实例
     * @param ngDeclarations 事件定义列表信息
     */
    initWithDeclarations(frameComponent, ngDeclarations) {
        if (!frameComponent) {
            return;
        }
        this.bindDeclaration(frameComponent, null);
    }
    /**
     * 基于事件元数据构建事件
     * 调整访问级别 便于解析表单进行初始化动作
     * @param context 框架上下文
     */
    bindDeclaration(frameComponent, ngDeclarations) {
        const context = frameComponent.context;
        if (!context) {
            return;
        }
        const ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();
        if (!ngPublicEventProps) {
            return;
        }
        Object.keys(ngPublicEventProps).forEach((propertyName) => {
            const ngExportEvent = ngPublicEventProps[propertyName];
            Object.defineProperty(this, propertyName, {
                value: (params) => {
                    // 获取命令处理上下文
                    const targetContext = context;
                    // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）
                    // if (ngExportEvent.frameId) {
                    //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);
                    // }
                    const root = targetContext.root;
                    const emitter = ngExportEvent.token;
                    const tokenValue = ngExportEvent.token;
                    const eventName = ngExportEvent.name;
                    let eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));
                    const eventType = ngExportEvent.type;
                    const eventBus = targetContext.eventBus || root.eventBus;
                    if (!eventBus) {
                        return;
                    }
                    const injector = targetContext.injector || root.injector;
                    const variableParseService = injector.get(VariableParseService);
                    // 执行参数解析
                    setTimeout(() => {
                        eventArgs = variableParseService.parse(eventArgs, targetContext, params);
                        const eventSender = targetContext.frameComponent;
                        let currentContext = targetContext;
                        const eventId = new Date().valueOf();
                        if (eventType && eventType === EventTypeEnum.ROUTE) {
                            // 事件依次向上冒泡
                            while (currentContext) {
                                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);
                                // currentContext = currentContext.parent;
                                currentContext = this.getParentContext(currentContext);
                            }
                        }
                        else {
                            eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);
                        }
                    }, 0);
                }
            });
        });
    }
    /**
     * 获取事件定义列表
     * @returns  事件定义
     */
    getNgPublicEvent() {
        return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);
    }
    /**
     * 获取父Context
     * @param context 当前上下文
     */
    getParentContext(context) {
        // 首先查找直接上级FrameContext
        if (context.parent) {
            return context.parent;
        }
        // 到了AppContext边界，返回上级AppContext的根FrameContext
        const parentAppContext = context.appContext.parent;
        if (parentAppContext) {
            return parentAppContext.frameContextManager.getRootFrameContext();
        }
        return null;
    }
}
Declaration.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Declaration.ctorParameters = () => [];
export { Declaration };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjbGFyYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1tZWNoYW5pc20vZGVjbGFyYXRpb24vZGVjbGFyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGNBQWMsRUFBaUIsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTdDLE1BQ00sV0FBVztJQUVmO0lBRUEsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLGNBQThCO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxvQkFBb0IsQ0FBQyxjQUE4QixFQUFFLGNBRTNEO1FBQ0MsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNuQixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGVBQWUsQ0FBQyxjQUE4QixFQUFFLGNBRXREO1FBQ0MsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQztRQUN2QyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTztTQUNSO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7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RCw4Q0FBOEM7UUFDOUMsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUNuRCxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLE9BQU8sZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUNuRTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBM0hGLFVBQVU7Ozs7QUE4SFgsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi4vLi4vbWV0YWRhdGEvaW5kZXgnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQsIEZyYW1lQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZnJhbWUnO1xyXG5pbXBvcnQgeyBOR19ERUNMQVJBVElPTiwgTmdEZWNsYXJhdGlvbiB9IGZyb20gJy4vZGVjbGFyYXRpb25fZGVjb3JhdG9yJztcclxuaW1wb3J0IHsgVmFyaWFibGVQYXJzZVNlcnZpY2UgfSBmcm9tICcuLi8uLi92YXJpYWJsZS9pbmRleCc7XHJcbmltcG9ydCB7IEV2ZW50VHlwZUVudW0gfSBmcm9tICcuL2V2ZW50LXR5cGUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBEZWNsYXJhdGlvbiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMllxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0KGZyYW1lQ29tcG9uZW50OiBGcmFtZUNvbXBvbmVudCkge1xyXG4gICAgaWYgKCFmcmFtZUNvbXBvbmVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kRGVjbGFyYXRpb24oZnJhbWVDb21wb25lbnQsIG51bGwpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIOS+neaNruWumuS5ieWIl+ihqOi/m+ihjOWIneWni+WMllxyXG4gICAqIEBwYXJhbSBmcmFtZUNvbXBvbmVudCDooajljZVjb21wb25lbnTlrp7kvotcclxuICAgKiBAcGFyYW0gbmdEZWNsYXJhdGlvbnMg5LqL5Lu25a6a5LmJ5YiX6KGo5L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRXaXRoRGVjbGFyYXRpb25zKGZyYW1lQ29tcG9uZW50OiBGcmFtZUNvbXBvbmVudCwgbmdEZWNsYXJhdGlvbnM6IHtcclxuICAgIFtwcm9wTmFtZTogc3RyaW5nXTogYW55O1xyXG4gIH0pOiB2b2lkIHtcclxuICAgIGlmICghZnJhbWVDb21wb25lbnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYmluZERlY2xhcmF0aW9uKGZyYW1lQ29tcG9uZW50LCBudWxsKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWfuuS6juS6i+S7tuWFg+aVsOaNruaehOW7uuS6i+S7tlxyXG4gICAqIOiwg+aVtOiuv+mXrue6p+WIqyDkvr/kuo7op6PmnpDooajljZXov5vooYzliJ3lp4vljJbliqjkvZxcclxuICAgKiBAcGFyYW0gY29udGV4dCDmoYbmnrbkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgYmluZERlY2xhcmF0aW9uKGZyYW1lQ29tcG9uZW50OiBGcmFtZUNvbXBvbmVudCwgbmdEZWNsYXJhdGlvbnM6IHtcclxuICAgIFtwcm9wTmFtZTogc3RyaW5nXTogYW55O1xyXG4gIH0pIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSBmcmFtZUNvbXBvbmVudC5jb250ZXh0O1xyXG4gICAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZ1B1YmxpY0V2ZW50UHJvcHMgPSBuZ0RlY2xhcmF0aW9ucyA/IG5nRGVjbGFyYXRpb25zIDogdGhpcy5nZXROZ1B1YmxpY0V2ZW50KCk7XHJcbiAgICBpZiAoIW5nUHVibGljRXZlbnRQcm9wcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgT2JqZWN0LmtleXMobmdQdWJsaWNFdmVudFByb3BzKS5mb3JFYWNoKChwcm9wZXJ0eU5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ0V4cG9ydEV2ZW50OiBOZ0RlY2xhcmF0aW9uID0gbmdQdWJsaWNFdmVudFByb3BzW3Byb3BlcnR5TmFtZV07XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgICB2YWx1ZTogKHBhcmFtcz86IGFueSkgPT4ge1xyXG4gICAgICAgICAgLy8g6I635Y+W5ZG95Luk5aSE55CG5LiK5LiL5paHXHJcbiAgICAgICAgICBjb25zdCB0YXJnZXRDb250ZXh0OiBGcmFtZUNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgLy8gdG9kbzog57uZbmdFeHBvcnRFdmVudOa3u+WKoGZyYW1lSWTvvIjkv53or4HmoYbmnrbkuYvpl7TnmoTkuovku7bpmpTnprvvvIlcclxuICAgICAgICAgIC8vIGlmIChuZ0V4cG9ydEV2ZW50LmZyYW1lSWQpIHtcclxuICAgICAgICAgIC8vICAgdGFyZ2V0Q29udGV4dCA9IGNvbnRleHQuYXBwQ29udGV4dC5nZXRGcmFtZUNvbnRleHQobmdFeHBvcnRFdmVudC5mcmFtZUlkKTtcclxuICAgICAgICAgIC8vIH1cclxuICAgICAgICAgIGNvbnN0IHJvb3QgPSB0YXJnZXRDb250ZXh0LnJvb3Q7XHJcbiAgICAgICAgICBjb25zdCBlbWl0dGVyID0gbmdFeHBvcnRFdmVudC50b2tlbjtcclxuICAgICAgICAgIGNvbnN0IHRva2VuVmFsdWUgPSBuZ0V4cG9ydEV2ZW50LnRva2VuO1xyXG4gICAgICAgICAgY29uc3QgZXZlbnROYW1lID0gbmdFeHBvcnRFdmVudC5uYW1lO1xyXG4gICAgICAgICAgbGV0IGV2ZW50QXJncyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobmdFeHBvcnRFdmVudC5wYXJhbXMpKTtcclxuICAgICAgICAgIGNvbnN0IGV2ZW50VHlwZSA9IG5nRXhwb3J0RXZlbnQudHlwZTtcclxuICAgICAgICAgIGNvbnN0IGV2ZW50QnVzID0gdGFyZ2V0Q29udGV4dC5ldmVudEJ1cyB8fCByb290LmV2ZW50QnVzO1xyXG4gICAgICAgICAgaWYgKCFldmVudEJ1cykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBpbmplY3RvciA9IHRhcmdldENvbnRleHQuaW5qZWN0b3IgfHwgcm9vdC5pbmplY3RvcjtcclxuICAgICAgICAgIGNvbnN0IHZhcmlhYmxlUGFyc2VTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0PFZhcmlhYmxlUGFyc2VTZXJ2aWNlPihWYXJpYWJsZVBhcnNlU2VydmljZSk7XHJcblxyXG4gICAgICAgICAgLy8g5omn6KGM5Y+C5pWw6Kej5p6QXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgZXZlbnRBcmdzID0gdmFyaWFibGVQYXJzZVNlcnZpY2UucGFyc2UoZXZlbnRBcmdzLCB0YXJnZXRDb250ZXh0LCBwYXJhbXMpO1xyXG4gICAgICAgICAgICBjb25zdCBldmVudFNlbmRlciA9IHRhcmdldENvbnRleHQuZnJhbWVDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50Q29udGV4dCA9IHRhcmdldENvbnRleHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50SWQgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcclxuICAgICAgICAgICAgaWYgKGV2ZW50VHlwZSAmJiBldmVudFR5cGUgPT09IEV2ZW50VHlwZUVudW0uUk9VVEUpIHtcclxuICAgICAgICAgICAgICAvLyDkuovku7bkvp3mrKHlkJHkuIrlhpLms6FcclxuICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudENvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRDb250ZXh0LmV2ZW50QnVzLnBvc3QoZW1pdHRlciwgdG9rZW5WYWx1ZSwgZXZlbnROYW1lLCBldmVudEFyZ3MsIGV2ZW50U2VuZGVyLCBldmVudFR5cGUsIGV2ZW50SWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudENvbnRleHQgPSBjdXJyZW50Q29udGV4dC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCA9IHRoaXMuZ2V0UGFyZW50Q29udGV4dChjdXJyZW50Q29udGV4dCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGV2ZW50QnVzLnBvc3QoZW1pdHRlciwgdG9rZW5WYWx1ZSwgZXZlbnROYW1lLCBldmVudEFyZ3MsIGV2ZW50U2VuZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS6i+S7tuWumuS5ieWIl+ihqFxyXG4gICAqIEByZXR1cm5zICDkuovku7blrprkuYlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TmdQdWJsaWNFdmVudCgpIHtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUodGhpcy5jb25zdHJ1Y3RvciwgTkdfREVDTEFSQVRJT04pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W54i2Q29udGV4dFxyXG4gICAqIEBwYXJhbSBjb250ZXh0IOW9k+WJjeS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0UGFyZW50Q29udGV4dChjb250ZXh0OiBGcmFtZUNvbnRleHQpOiBGcmFtZUNvbnRleHQge1xyXG5cclxuICAgIC8vIOmmluWFiOafpeaJvuebtOaOpeS4iue6p0ZyYW1lQ29udGV4dFxyXG4gICAgaWYgKGNvbnRleHQucGFyZW50KSB7XHJcbiAgICAgIHJldHVybiBjb250ZXh0LnBhcmVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliLDkuoZBcHBDb250ZXh06L6555WM77yM6L+U5Zue5LiK57qnQXBwQ29udGV4dOeahOaguUZyYW1lQ29udGV4dFxyXG4gICAgY29uc3QgcGFyZW50QXBwQ29udGV4dCA9IGNvbnRleHQuYXBwQ29udGV4dC5wYXJlbnQ7XHJcbiAgICBpZiAocGFyZW50QXBwQ29udGV4dCkge1xyXG4gICAgICByZXR1cm4gcGFyZW50QXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldFJvb3RGcmFtZUNvbnRleHQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IERlY2xhcmF0aW9uIH07XHJcbiJdfQ==