import { Injectable, Injector } from "@angular/core";
import { CommentDependencyResolver } from "./comment_dependency_resolver";
import { ResolverRegistry } from "./resolver_registry";
export class ResolveService {
    constructor(injector, resolverRegistry) {
        this.injector = injector;
        this.resolverRegistry = resolverRegistry;
    }
    resolve(expression) {
        const deps = [];
        if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {
            return;
        }
        // 优先使用用户自定义的依赖
        const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver) => resolver instanceof CommentDependencyResolver);
        if (commentDependencyResolver) {
            const commentDependencies = commentDependencyResolver.resolve(expression);
            if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {
                deps.push(...commentDependencies);
            }
        }
        // 如果用户已经自定义了依赖，则不再计算
        if (deps && deps.length > 0) {
            return deps;
        }
        this.resolverRegistry.resolvers.forEach((resolver) => {
            // 再解析一次也可以，返回的依然是空数组
            if (resolver instanceof CommentDependencyResolver) {
                return;
            }
            const dependency = resolver.resolve(expression);
            if (dependency && dependency.length > 0) {
                deps.push(...dependency);
            }
        });
        // 去重
        return [...new Set(deps)];
    }
}
ResolveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ResolveService.ctorParameters = () => [
    { type: Injector },
    { type: ResolverRegistry }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcmVzb2x2ZXIvcmVzb2x2ZV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSXZELE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQW9CLFFBQWtCLEVBQVUsZ0JBQWtDO1FBQTlELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUksQ0FBQztJQUNoRixPQUFPLENBQUMsVUFBa0I7UUFDL0IsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1RyxPQUFPO1NBQ1I7UUFDRCxlQUFlO1FBQ2YsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQW1CLEVBQUUsRUFBRSxDQUFDLFFBQVEsWUFBWSx5QkFBeUIsQ0FBQyxDQUFDO1FBQy9JLElBQUkseUJBQXlCLEVBQUU7WUFDN0IsTUFBTSxtQkFBbUIsR0FBRyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUUsSUFBSSxtQkFBbUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDL0YsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLG1CQUFtQixDQUFDLENBQUM7YUFDbkM7U0FDRjtRQUNELHFCQUFxQjtRQUNyQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFtQixFQUFFLEVBQUU7WUFDOUQscUJBQXFCO1lBQ3JCLElBQUksUUFBUSxZQUFZLHlCQUF5QixFQUFFO2dCQUNqRCxPQUFPO2FBQ1I7WUFDRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2hELElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILEtBQUs7UUFDTCxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7OztZQWhDRixVQUFVOzs7O1lBTFUsUUFBUTtZQUVwQixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbW1lbnREZXBlbmRlbmN5UmVzb2x2ZXIgfSBmcm9tIFwiLi9jb21tZW50X2RlcGVuZGVuY3lfcmVzb2x2ZXJcIjtcclxuaW1wb3J0IHsgUmVzb2x2ZXJSZWdpc3RyeSB9IGZyb20gXCIuL3Jlc29sdmVyX3JlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7IElSZXNvbHZlciB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXNvbHZlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVzb2x2ZXJSZWdpc3RyeTogUmVzb2x2ZXJSZWdpc3RyeSkgeyB9XHJcbiAgcHVibGljIHJlc29sdmUoZXhwcmVzc2lvbjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkZXBzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgaWYgKCF0aGlzLnJlc29sdmVyUmVnaXN0cnkgfHwgIXRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMgfHwgdGhpcy5yZXNvbHZlclJlZ2lzdHJ5LnJlc29sdmVycy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIOS8mOWFiOS9v+eUqOeUqOaIt+iHquWumuS5ieeahOS+nei1llxyXG4gICAgY29uc3QgY29tbWVudERlcGVuZGVuY3lSZXNvbHZlciA9IHRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMuZmluZCgocmVzb2x2ZXI6IElSZXNvbHZlcikgPT4gcmVzb2x2ZXIgaW5zdGFuY2VvZiBDb21tZW50RGVwZW5kZW5jeVJlc29sdmVyKTtcclxuICAgIGlmIChjb21tZW50RGVwZW5kZW5jeVJlc29sdmVyKSB7XHJcbiAgICAgIGNvbnN0IGNvbW1lbnREZXBlbmRlbmNpZXMgPSBjb21tZW50RGVwZW5kZW5jeVJlc29sdmVyLnJlc29sdmUoZXhwcmVzc2lvbik7XHJcbiAgICAgIGlmIChjb21tZW50RGVwZW5kZW5jaWVzICYmIEFycmF5LmlzQXJyYXkoY29tbWVudERlcGVuZGVuY2llcykgJiYgY29tbWVudERlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZGVwcy5wdXNoKC4uLmNvbW1lbnREZXBlbmRlbmNpZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDlpoLmnpznlKjmiLflt7Lnu4/oh6rlrprkuYnkuobkvp3otZbvvIzliJnkuI3lho3orqHnrpdcclxuICAgIGlmIChkZXBzICYmIGRlcHMubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gZGVwcztcclxuICAgIH1cclxuICAgIHRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMuZm9yRWFjaCgocmVzb2x2ZXI6IElSZXNvbHZlcikgPT4ge1xyXG4gICAgICAvLyDlho3op6PmnpDkuIDmrKHkuZ/lj6/ku6XvvIzov5Tlm57nmoTkvp3nhLbmmK/nqbrmlbDnu4RcclxuICAgICAgaWYgKHJlc29sdmVyIGluc3RhbmNlb2YgQ29tbWVudERlcGVuZGVuY3lSZXNvbHZlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBkZXBlbmRlbmN5ID0gcmVzb2x2ZXIucmVzb2x2ZShleHByZXNzaW9uKTtcclxuICAgICAgaWYgKGRlcGVuZGVuY3kgJiYgZGVwZW5kZW5jeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZGVwcy5wdXNoKC4uLmRlcGVuZGVuY3kpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIOWOu+mHjVxyXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGRlcHMpXTtcclxuICB9XHJcbn0iXX0=