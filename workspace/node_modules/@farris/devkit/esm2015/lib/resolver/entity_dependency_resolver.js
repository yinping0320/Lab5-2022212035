/* eslint-disable new-cap */
/* eslint-disable require-jsdoc */
/* eslint-disable valid-jsdoc */
import { Injectable } from '@angular/core';
import { Repository } from '../repository/index';
import { ExpressionUtil } from '../utils/expression_util';
import { ENTITY_TEMPLATE } from './types';
export class EntityDependencyResolver {
    constructor(repository) {
        this.repository = repository;
        this.entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;
    }
    /**
     * 解析用户表达式中的实体依赖
     * @param expr 用户配置的完整表达式
     * @returns
     */
    resolve(expr) {
        const groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);
        const entityDependencies = this.getEntityDependency(expr);
        // 去除错误的到子表的依赖
        if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {
            groupFunctionDependencies.forEach((dep) => {
                const index = entityDependencies.findIndex((item) => dep.startsWith(item));
                if (index !== -1) {
                    entityDependencies.splice(index, 1);
                }
            });
        }
        // 去重
        const merged = [...groupFunctionDependencies, ...entityDependencies];
        const deps = [...new Set(merged)];
        return deps;
    }
    /**
     * 获取合法的实体属性表达式
     * @param entityPropertyExpression 实体属性表达式
     * @returns
     */
    getValidEntityPropertyExpression(entityPropertyExpression) {
        const propPaths = entityPropertyExpression.split('.');
        let propInfo = null;
        try {
            propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);
        }
        catch (e) { }
        if (!propInfo) {
            if (propPaths.length > 1) {
                propPaths.pop();
                return this.getValidEntityPropertyExpression(propPaths.join('.'));
            }
            else {
                return null;
            }
        }
        else {
            return entityPropertyExpression.split('.');
        }
    }
    /**
     * 获取所有实体依赖
     * @param expr 表达式字符串
     * @returns
     */
    getEntityDependency(expr) {
        const deps = [];
        if (this.entityTypeInfo) {
            // 使用正则匹配出所有实体
            const regex = new RegExp(`[\\'\\"]?\\s*(${this.entityTypeInfo.entityInfo.nodeCode}|${this.entityTypeInfo.entityInfo.originalCode})[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\"]?`, 'g');
            const entityPropertyExpressions = expr.match(regex);
            if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                entityPropertyExpressions.forEach((item) => {
                    if (item.indexOf('.') === -1) {
                        return;
                    }
                    // 去空格
                    item = item.trim().replace(/\"/g, '');
                    const paths = ExpressionUtil.convertToNodeCode(item, this.repository.entityTypeInfo);
                    item = paths.join('.');
                    // 截去主实体及点
                    item = item.substr(item.indexOf('.') + 1);
                    const dep = this.getValidEntityPropertyExpression(item);
                    if (dep && Array.isArray(dep) && dep.length > 0) {
                        // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据
                        dep.splice(0, 0, ENTITY_TEMPLATE);
                        deps.push(dep.join('/'));
                    }
                });
            }
        }
        else {
        }
        return deps;
    }
}
EntityDependencyResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityDependencyResolver.ctorParameters = () => [
    { type: Repository }
];
//# sourceMappingURL=data:application/json;base64,