import { Injectable } from "@angular/core";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
export class BindingDataSelectionChangedEventHandler extends EventHandler {
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    filter(event) {
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter((expressionObject) => {
                const deps = expressionObject.deps;
                // 没有依赖的表达式不需要关注
                if (!deps || deps.length < 1) {
                    return false;
                }
                // 不依赖实体的表达式不需要关注
                let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));
                if (index === -1) {
                    return false;
                }
                const result = this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                // 只关注从表行切换
                if (result.eventTablePaths.length !== 1) {
                    return false;
                }
                // 只关注从从表表达式
                if (result.expressionTablePaths.length !== 2) {
                    return false;
                }
                // 只关注事件直接下级的表达式，跨表的不需要关注
                if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {
                    return false;
                }
                // 从从表表达式需要依赖上级表
                index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));
                if (index === -1) {
                    return false;
                }
                return true;
            });
        }
        return null;
    }
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
}
BindingDataSelectionChangedEventHandler.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX3NlbGVjdGlvbl9jaGFuZ2VkX2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1oYW5kbGVyL2JpbmRpbmdfZGF0YV9zZWxlY3Rpb25fY2hhbmdlZF9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxNQUFNLE9BQU8sdUNBQXdDLFNBQVEsWUFBWTtJQUN2RTs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLEtBQTJCO1FBQ3ZDLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9ELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUE2QyxFQUFFLEVBQUU7Z0JBQ3JGLE1BQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztnQkFDbkMsZ0JBQWdCO2dCQUNoQixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUM1QixPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxpQkFBaUI7Z0JBQ2pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUNoQixPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNYLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELFdBQVc7Z0JBQ1gsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3ZDLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELFlBQVk7Z0JBQ1osSUFBSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDNUMsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QseUJBQXlCO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDdkYsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsZ0JBQWdCO2dCQUNoQixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxlQUFlLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDakcsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ2hCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNNLFFBQVEsQ0FBQyxLQUEyQjtRQUN6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBNkMsRUFBRSxFQUFFO2dCQUNwRSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3ZFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUMxRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDbEYsT0FBTztpQkFDUjtnQkFDRCxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUFBLENBQUM7Z0JBQzdGLElBQUksZ0JBQWdCLENBQUMsRUFBRSxFQUFFO29CQUN2QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDekU7Z0JBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7O1lBL0RGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gXCIuLi9leHByZXNzaW9uL2luZGV4XCI7XHJcbmltcG9ydCB7IEVOVElUWV9URU1QTEFURSB9IGZyb20gXCIuLi9yZXNvbHZlci9pbmRleFwiO1xyXG5pbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9ldmVudF9oYW5kbGVyXCI7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJpbmRpbmdEYXRhU2VsZWN0aW9uQ2hhbmdlZEV2ZW50SGFuZGxlciBleHRlbmRzIEV2ZW50SGFuZGxlciB7XHJcbiAgLyoqXHJcbiAgICog6L+H5ruk5Ye66ZyA6KaB6K6h566X55qE6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGZpbHRlcihldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcclxuICAgIGlmICh0aGlzLmV4cHJlc3Npb25PYmplY3RzICYmIHRoaXMuZXhwcmVzc2lvbk9iamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uT2JqZWN0cy5maWx0ZXIoKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRlcHMgPSBleHByZXNzaW9uT2JqZWN0LmRlcHM7XHJcbiAgICAgICAgLy8g5rKh5pyJ5L6d6LWW55qE6KGo6L6+5byP5LiN6ZyA6KaB5YWz5rOoXHJcbiAgICAgICAgaWYgKCFkZXBzIHx8IGRlcHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDkuI3kvp3otZblrp7kvZPnmoTooajovr7lvI/kuI3pnIDopoHlhbPms6hcclxuICAgICAgICBsZXQgaW5kZXggPSBkZXBzLmZpbmRJbmRleChkZXAgPT4gZGVwLnN0YXJ0c1dpdGgoRU5USVRZX1RFTVBMQVRFKSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFuYWx5c2lzKGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcclxuICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlj6rlhbPms6jku47ooajooYzliIfmjaJcclxuICAgICAgICBpZiAocmVzdWx0LmV2ZW50VGFibGVQYXRocy5sZW5ndGggIT09IDEpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5Y+q5YWz5rOo5LuO5LuO6KGo6KGo6L6+5byPXHJcbiAgICAgICAgaWYgKHJlc3VsdC5leHByZXNzaW9uVGFibGVQYXRocy5sZW5ndGggIT09IDIpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5Y+q5YWz5rOo5LqL5Lu255u05o6l5LiL57qn55qE6KGo6L6+5byP77yM6Leo6KGo55qE5LiN6ZyA6KaB5YWz5rOoXHJcbiAgICAgICAgaWYgKCFyZXN1bHQuZXhwcmVzc2lvblRhYmxlUGF0aHMuam9pbignLycpLnN0YXJ0c1dpdGgocmVzdWx0LmV2ZW50VGFibGVQYXRocy5qb2luKCcvJykpKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOS7juS7juihqOihqOi+vuW8j+mcgOimgeS+nei1luS4iue6p+ihqFxyXG4gICAgICAgIGluZGV4ID0gZGVwcy5maW5kSW5kZXgoZGVwID0+IGRlcC5zdGFydHNXaXRoKGAke0VOVElUWV9URU1QTEFURX0vJHtyZXN1bHQuZXZlbnRUYWJsZVBhdGhzWzBdfWApKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKTogdm9pZCB7XHJcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZmlsdGVyKGV2ZW50KTtcclxuICAgIGlmIChleHByZXNzaW9ucyAmJiBleHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGV4cHJlc3Npb25zLmZvckVhY2goKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRleHQgPSB0aGlzLmJ1aWxkRW50aXR5Q29udGV4dChldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50LCBlbnRpdHlDb250ZXh0KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBlcmZvcm0oZXhwcmVzc2lvbk9iamVjdCwgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmICF0aGlzLmlzVmFsaWRhdGVPclJlcXVpcmVkRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0KSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCA9IHRoaXMuY29udmVydEJvb2xlYW5UeXBlRXhwcmVzc2lvblJlc3VsdChleHByZXNzaW9uT2JqZWN0LCByZXN1bHQpOztcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5pZCkge1xyXG4gICAgICAgICAgdGhpcy5leHByZXNzaW9uUmVzdWx0LnNldChleHByZXNzaW9uT2JqZWN0LmlkLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWZmZWN0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19