import { Injectable, Injector } from '@angular/core';
import { AppContext } from '../app/index';
import { BindingData } from '../binding-data/index';
import { EffectorFactory } from '../effector/index';
import { BigNumber } from 'bignumber.js';
import { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';
import { Repository } from '../repository/index';
import { FrameContext } from '../frame';
import { ExpressionUtil } from '../utils/expression_util';
import { TranslateToken } from '../i18n/translate_token';
export class EventHandler {
    constructor(injector, repository, bindingData, expressionRegistry, effectorFactory, expressionExecutor, expressionResult) {
        this.injector = injector;
        this.repository = repository;
        this.bindingData = bindingData;
        this.expressionRegistry = expressionRegistry;
        this.effectorFactory = effectorFactory;
        this.expressionExecutor = expressionExecutor;
        this.expressionResult = expressionResult;
        this.frameContext = this.injector.get(FrameContext);
    }
    handleEvent(event, expressionObjects) {
        event = Object.assign({}, event);
        this.expressionObjects = expressionObjects;
        this.dispatch(event);
    }
    //#endregion
    //#region 属性
    /**
     * 主表主键值
     */
    get primaryValue() {
        return this.bindingData.list.currentItem.primaryKeyValue;
    }
    /**
     * 获取主实体原始字段名
     */
    get entityOriginalNodeCode() {
        return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;
    }
    //#endregion
    //#region 表达式核心
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param context 上下文
     * @returns any
     */
    perform(expressionObject, context) {
        return this.expressionExecutor.compile(expressionObject, context);
    }
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    effect(event, expressionObject) {
        const effectTo = expressionObject.bindingType;
        const effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);
            return;
        }
        if (effectTo === Expression.ExpressionBindingType.Field) {
            const effectPaths = expressionObject.effectPaths || [];
            if (effectPaths.length > 0) {
                effectPaths.forEach((path) => {
                    const effectPath = path.split('/');
                    const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id };
                    effector.effect(expressionObject.path, expressionObject.result, effectOptions);
                });
            }
            else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {
                const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id };
                effector.effect(expressionObject.path, expressionObject.result, effectOptions);
            }
        }
        else {
            throw new Error('not supported！');
        }
    }
    //#endregion
    //#region util
    isValidateOrRequiredExpression(expressionObject) {
        return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);
    }
    /**
     * 以事件参数为依据构建实体路径
     * @param event event
     * @returns
     */
    getEntityPathFromEvent(event) {
        event = JSON.parse(JSON.stringify(event));
        if (!event || !event.path || event.path.length < 1) {
            return [];
        }
        const paths = event.path;
        return this.getEntityPath(paths);
    }
    /**
     * 获取事件路径中的实体路径
     * @param path path
     * @returns
     */
    getEntityPath(path) {
        const paths = path.filter((value, index) => {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    }
    /**
     * 构造实体路径
     * @param path path
     * @description 删除路径中的id字段
     * @returns
     */
    buildEntityPath(path) {
        const paths = path.filter((value, index) => {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    }
    /**
     * 清理事件路径中的id主键标识
     * @param path path
     * @returns
     */
    cleanEventPath(path) {
        path = path.filter(p => {
            if (p && p !== ':') {
                return true;
            }
            else {
                return false;
            }
        });
        return path.map((item) => {
            if (item.includes(':')) {
                return item.split(':')[1];
            }
            else {
                return item;
            }
        });
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByPaths(paths) {
        let result = null;
        const bindingList = this.bindingData.getValue(paths);
        if (bindingList && bindingList.length > 0) {
            let primaryValue = bindingList.currentItem.primaryKeyValue || null;
            if (primaryValue) {
                const bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    }
    /**
     * 获取事件路径中指定子表的事件行
     * @param path
     * @param tableCode
     * @returns
     */
    getEventId(path, tableCode) {
        if (!path || path.length < 1) {
            throw new Error('invalid path!');
        }
        const propertyIndex = path.findIndex(p => p === tableCode);
        if (propertyIndex === -1) {
            return null;
        }
        const idIndex = propertyIndex + 1;
        if (idIndex > path.length - 1) {
            throw new Error('invalid propertyName or path');
        }
        const id = path[idIndex];
        if (id.indexOf(':') === -1) {
            throw new Error('compute error.');
        }
        return id.split(':')[1];
    }
    //#endregion
    //#region  构造上下文
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext(event) {
        const ns = event.ns;
        const appContext = this.injector.get(AppContext, null);
        const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
        const result = {};
        if (frameContexts && frameContexts.length > 0) {
            const anonymousFrameContext = frameContexts[0];
            const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                const uiState = rootFrameContext.viewModel.uiState;
                const propertyNames = Object.getOwnPropertyNames(uiState) || [];
                propertyNames.forEach((prop) => {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState[prop];
                    }
                });
            }
        }
        return result;
    }
    /**
     * 获取事件实体
     * @param event
     * @returns
     */
    buildEntityContext(event, expressionObject, currentRows) {
        const expressionBindingType = expressionObject.bindingType;
        if (expressionBindingType === Expression.ExpressionBindingType.Field) {
            const entityTypeInfo = this.repository.entityTypeInfo;
            const childrenEntityPaths = [];
            ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
            // 获取当前行
            const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;
            const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;
            let entity = this.bindingData.list.findById(primaryValue);
            if (!entity) {
                return {};
            }
            const object = entity.toJSON();
            object['__type__'] = 'Entity';
            if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
                return object;
            }
            childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);
            // 找到所有子表
            childrenEntityPaths.forEach((paths) => {
                const bindingList = this.bindingData.getValue(paths);
                let currentRowId = bindingList.currentId;
                const propertyName = paths[paths.length - 1];
                // parent 为entity或entitylist或null
                const parent = paths.slice(0, paths.length - 1).reduce((object, path) => {
                    return object && object[path] || null;
                }, object);
                if (!parent) {
                    return;
                }
                const data = parent;
                let node = null;
                if (!currentRowId) {
                    // 当前表没有数据
                    node = { __items__: [], __type__: 'List' };
                    node.length = () => node.__items__.length;
                }
                else {
                    // 纠正当前行
                    if (currentRows && currentRows.length > 0) {
                        // 是否指定了当前行
                        const userAssignCurrentRow = currentRows.find(row => {
                            const bindingPaths = row.bindingPath.split('/').filter(p => p);
                            return bindingPaths.join('/') === paths.join('/');
                        });
                        if (userAssignCurrentRow) {
                            currentRowId = userAssignCurrentRow.primaryValue;
                        }
                    }
                    // 子表当前行
                    const row = bindingList.findById(currentRowId);
                    // 找到子表当前行的上级
                    const list = parent[propertyName];
                    node = Object.assign({ __items__: [] }, row && row.toJSON() || {}, { __type__: 'List' });
                    node.length = () => node.__items__.length;
                    if (list && Array.isArray(list)) {
                        node.__items__ = [].concat(list);
                    }
                }
                data[propertyName] = node;
            });
            return object;
        }
        else if (expressionBindingType === Expression.ExpressionBindingType.State) {
            // todo: 支持状态表达式
        }
        else {
            return null;
        }
    }
    /**
     * 构造表达式计算上下文
     * @param expressionObject 表达式
     * @param event 事件
     * @param entityContext 实体上下文
     * @param currentRows 当前行
     * @returns
     */
    buildContext(expressionObject, event, entityContext, currentRows) {
        let context = [];
        if (entityContext) {
            context.push(entityContext);
        }
        else {
            const entity = this.buildEntityContext(event, expressionObject, currentRows);
            context.push(entity);
        }
        const stateContext = this.buildStateContext(event);
        const entityCode = this.entityOriginalNodeCode;
        let entity = null;
        if (context.length === 1) {
            entity = context.pop();
        }
        else {
            entity = context[0];
            if (!entity['__type__']) {
                entity['__type__'] = 'Entity';
            }
            entity['__items__'] = context;
        }
        const translate = this.injector.get(TranslateToken, null);
        return Object.assign({ [entityCode]: entity }, stateContext, { BigNumber, frameContext: this.frameContext, bindingData: this.bindingData, repository: this.repository, CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS' });
    }
    //#endregion
    /**
     * 构造副作用路径
     * @param event
     * @param expressionObject
     * @returns
     */
    buildEffectPath(event, expressionObject) {
        const expressionPaths = expressionObject.path.split('/').filter(p => p);
        const primaryValue = event.path[0] && event.path[0].split(':')[1];
        if (!primaryValue) {
            throw new Error('Invalid event path!');
        }
        if (expressionPaths.length === 1) {
            // 主表简单字段
            return [primaryValue, expressionPaths.pop()];
        }
        else {
            const result = [primaryValue];
            for (let index = 0; index < expressionPaths.length; index++) {
                const propertyName = expressionPaths[index];
                result.push(propertyName);
                const currentPaths = expressionPaths.slice(0, index + 1);
                const propertyInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);
                if (propertyInfo.group === 'List') {
                    let id = this.getEventId(event.path, propertyInfo.name) || null;
                    // 事件和表达式不是同一个表
                    if (!id) {
                        const bindingList = this.bindingData.getValue(currentPaths);
                        if (bindingList) {
                            id = bindingList.currentId;
                        }
                    }
                    result.push(id);
                }
            }
            return result;
        }
    }
    //#region 辅助方法
    getPathInfo(path) {
        const paths = path.split('/').filter(p => p);
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        const propertyName = paths.slice(entityPath.length).join('/');
        return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };
    }
    /**
     * get table paths from event paths
     * @param paths event paths
     * @returns
     */
    getTablePathsFromEventPaths(paths) {
        paths = this.getEntityPath(paths);
        const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return entityPaths;
    }
    /**
     * get property paths from event paths
     * @param paths event paths
     * @returns
     */
    getPropertyPathsFromEventPaths(paths) {
        paths = this.getEntityPath(paths);
        const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return paths.slice(tablePaths.length);
    }
    /**
     * 分析事件和表达式的关系
     */
    analysis(event, expressionObject) {
        const expressionPathInfo = this.getPathInfo(expressionObject.path);
        const eventPaths = this.getEntityPath(event.path.slice(0));
        const eventPathInfo = this.getPathInfo(eventPaths.join('/'));
        if (!expressionPathInfo || !eventPathInfo) {
            console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);
            return null;
        }
        const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);
        const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);
        const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);
        const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);
        const result = {
            distance: undefined,
            eventFromChildren: undefined,
            eventFromParent: undefined,
            expressionTablePaths,
            expressionPropertyNames,
            eventTablePaths,
            eventPropertyNames,
            isSameTable: false
        };
        result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);
        if (result.distance === 1) {
            result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));
            result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));
        }
        result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');
        return result;
    }
    buildCurrentRows(tablePaths, fullPaths) {
        const currentRows = new Array();
        if (!tablePaths || tablePaths.length < 1) {
            currentRows.push({
                bindingPath: '/',
                primaryValue: fullPaths[0]
            });
        }
        else {
            const paths = [];
            tablePaths.forEach((path, index) => {
                if (index === 0) {
                    currentRows.push({
                        bindingPath: '/',
                        primaryValue: fullPaths[0]
                    });
                }
                paths.push(path);
                const primaryValue = fullPaths[index * 2 + 2];
                currentRows.push({
                    bindingPath: paths.join('/'),
                    primaryValue: primaryValue
                });
            });
        }
        return currentRows;
    }
    convertBooleanTypeExpressionResult(expressionObject, result) {
        if (this.isBooleanTypeExpression(expressionObject)) {
            return result === true ? true : false;
        }
        else {
            return result;
        }
    }
    isBooleanTypeExpression(expressionObject) {
        return this.isReadonlyExpression(expressionObject) || this.isVisibleExpression(expressionObject) || this.isValidateExpression(expressionObject) || this.isRequiredExpression(expressionObject) || this.isDependencyExpression(expressionObject);
    }
    isReadonlyExpression(expressionObject) {
        return expressionObject && expressionObject.type === Expression.ExpressionType.Readonly || false;
    }
    isVisibleExpression(expressionObject) {
        return expressionObject && expressionObject.type === Expression.ExpressionType.Visible;
    }
    isValidateExpression(expressionObject) {
        return expressionObject && expressionObject.type === Expression.ExpressionType.Validate;
    }
    isRequiredExpression(expressionObject) {
        return expressionObject && expressionObject.type === Expression.ExpressionType.Required;
    }
    isDependencyExpression(expressionObject) {
        return expressionObject && expressionObject.type === Expression.ExpressionType.Dependency;
    }
}
EventHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventHandler.ctorParameters = () => [
    { type: Injector },
    { type: Repository },
    { type: BindingData },
    { type: ExpressionRegistry },
    { type: EffectorFactory },
    { type: ExpressionExecutor },
    { type: ExpressionResult }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V2ZW50LWhhbmRsZXIvZXZlbnRfaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQThCLE1BQU0sdUJBQXVCLENBQUM7QUFFaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzNHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHekQsTUFBTSxPQUFnQixZQUFZO0lBRWhDLFlBQXNCLFFBQWtCLEVBQVksVUFBMkIsRUFBWSxXQUF3QixFQUFZLGtCQUFzQyxFQUFZLGVBQWdDLEVBQVksa0JBQXNDLEVBQVksZ0JBQWtDO1FBQTNSLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBWSxlQUFVLEdBQVYsVUFBVSxDQUFpQjtRQUFZLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVksdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUFZLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUFZLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFBWSxxQkFB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QUksZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQzFGLENBQUM7SUFDTyxvQkFBb0IsQ0FBQyxnQkFBNkM7UUFDeEUsT0FBTyxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFDMUYsQ0FBQztJQUNPLHNCQUFzQixDQUFDLGdCQUE2QztRQUMxRSxPQUFPLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQztJQUM1RixDQUFDOzs7WUE5ZUYsVUFBVTs7OztZQWRVLFFBQVE7WUFPcEIsVUFBVTtZQUxWLFdBQVc7WUFJcUIsa0JBQWtCO1lBRmxELGVBQWU7WUFFSCxrQkFBa0I7WUFBc0IsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhLCBCaW5kaW5nTGlzdCwgQmluZGluZ09iamVjdCB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IERhdGFQcm9wSW5mbyB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBFZmZlY3RvckZhY3RvcnkgfSBmcm9tICcuLi9lZmZlY3Rvci9pbmRleCc7XHJcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ2JpZ251bWJlci5qcyc7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24sIEV4cHJlc3Npb25FeGVjdXRvciwgRXhwcmVzc2lvblJlZ2lzdHJ5LCBFeHByZXNzaW9uUmVzdWx0IH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3J5L2luZGV4JztcclxuaW1wb3J0IHsgRW50aXR5LCBFbnRpdHlMaXN0IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnLi4vZnJhbWUnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uVXRpbCB9IGZyb20gJy4uL3V0aWxzL2V4cHJlc3Npb25fdXRpbCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZSB9IGZyb20gJy4uL2kxOG4vdHJhbnNsYXRlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlVG9rZW4gfSBmcm9tICcuLi9pMThuL3RyYW5zbGF0ZV90b2tlbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFdmVudEhhbmRsZXIgaW1wbGVtZW50cyBFeHByZXNzaW9uLklFdmVudEhhbmRsZXIge1xyXG4gIHByb3RlY3RlZCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dDtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLCBwcm90ZWN0ZWQgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxhbnk+LCBwcm90ZWN0ZWQgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhLCBwcm90ZWN0ZWQgZXhwcmVzc2lvblJlZ2lzdHJ5OiBFeHByZXNzaW9uUmVnaXN0cnksIHByb3RlY3RlZCBlZmZlY3RvckZhY3Rvcnk6IEVmZmVjdG9yRmFjdG9yeSwgcHJvdGVjdGVkIGV4cHJlc3Npb25FeGVjdXRvcjogRXhwcmVzc2lvbkV4ZWN1dG9yLCBwcm90ZWN0ZWQgZXhwcmVzc2lvblJlc3VsdDogRXhwcmVzc2lvblJlc3VsdCkge1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxGcmFtZUNvbnRleHQ+KEZyYW1lQ29udGV4dCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBleHByZXNzaW9uT2JqZWN0czogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0W107XHJcblxyXG4gIHB1YmxpYyBoYW5kbGVFdmVudChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MsIGV4cHJlc3Npb25PYmplY3RzOiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3RbXSkge1xyXG4gICAgZXZlbnQgPSBPYmplY3QuYXNzaWduKHt9LCBldmVudCk7XHJcbiAgICB0aGlzLmV4cHJlc3Npb25PYmplY3RzID0gZXhwcmVzc2lvbk9iamVjdHM7XHJcbiAgICB0aGlzLmRpc3BhdGNoKGV2ZW50KTtcclxuICB9XHJcblxyXG4gIC8vI3JlZ2lvbiDmir3osaHlh73mlbBcclxuICAvKipcclxuICAgKiDojrflj5bnm7jlhbPooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZmlsdGVyKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk7XHJcbiAgLyoqXHJcbiAgICog5Y+R5biD5LqL5Lu2XHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb25PYmplY3Qg6KGo6L6+5byP5a+56LGhXHJcbiAgICogQHBhcmFtIGV2ZW50IOS6i+S7tlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBkaXNwYXRjaChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpOiB2b2lkO1xyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24g5bGe5oCnXHJcblxyXG4gIC8qKlxyXG4gICAqIOS4u+ihqOS4u+mUruWAvFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXQgcHJpbWFyeVZhbHVlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS4u+WunuS9k+WOn+Wni+Wtl+auteWQjVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXQgZW50aXR5T3JpZ2luYWxOb2RlQ29kZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeSAmJiB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8gJiYgdGhpcy5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvLmVudGl0eUluZm8gJiYgdGhpcy5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvLmVudGl0eUluZm8ub3JpZ2luYWxDb2RlIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIOihqOi+vuW8j+aguOW/g1xyXG4gIC8qKlxyXG4gICAqIOaJp+ihjOihqOi+vuW8j+iuoeeul1xyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOihqOi+vuW8j1xyXG4gICAqIEBwYXJhbSBjb250ZXh0IOS4iuS4i+aWh1xyXG4gICAqIEByZXR1cm5zIGFueVxyXG4gICAqL1xyXG4gIHB1YmxpYyBwZXJmb3JtKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCwgY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uRXhlY3V0b3IuY29tcGlsZShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Ymv5L2c55SoXHJcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb25PYmplY3QgZXhwcmVzc2lvbk9iamVjdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBlZmZlY3QoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzLCBleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVmZmVjdFRvID0gZXhwcmVzc2lvbk9iamVjdC5iaW5kaW5nVHlwZTtcclxuICAgIGNvbnN0IGVmZmVjdG9yID0gdGhpcy5lZmZlY3RvckZhY3RvcnkuZ2V0RWZmZWN0b3IoZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICBpZiAoIWVmZmVjdG9yKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUud2FybihgRXZlbnRIYW5kbGVyIOayoeacieWvueW6lOeahOWJr+S9nOeUqOWZqOOAgiR7ZXhwcmVzc2lvbk9iamVjdC50eXBlfWApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZWZmZWN0VG8gPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvbkJpbmRpbmdUeXBlLkZpZWxkKSB7XHJcbiAgICAgIGNvbnN0IGVmZmVjdFBhdGhzID0gZXhwcmVzc2lvbk9iamVjdC5lZmZlY3RQYXRocyB8fCBbXTtcclxuICAgICAgaWYgKGVmZmVjdFBhdGhzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBlZmZlY3RQYXRocy5mb3JFYWNoKChwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGVmZmVjdFBhdGggPSBwYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICBjb25zdCBlZmZlY3RPcHRpb25zID0geyBwYXRoOiBlZmZlY3RQYXRoLCBtZXNzYWdlOiBleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2UsIGV4cHJlc3Npb25JZDogZXhwcmVzc2lvbk9iamVjdC5pZCB9O1xyXG4gICAgICAgICAgZWZmZWN0b3IuZWZmZWN0KGV4cHJlc3Npb25PYmplY3QucGF0aCwgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQsIGVmZmVjdE9wdGlvbnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5SZXF1aXJlZCB8fCBleHByZXNzaW9uT2JqZWN0LnR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuVmFsaWRhdGUgfHwgZXhwcmVzc2lvbk9iamVjdC50eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlYWRvbmx5IHx8IGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WaXNpYmxlKSB7XHJcbiAgICAgICAgY29uc3QgZWZmZWN0T3B0aW9ucyA9IHsgbWVzc2FnZTogZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlLCBleHByZXNzaW9uSWQ6IGV4cHJlc3Npb25PYmplY3QuaWQgfTtcclxuICAgICAgICBlZmZlY3Rvci5lZmZlY3QoZXhwcmVzc2lvbk9iamVjdC5wYXRoLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCwgZWZmZWN0T3B0aW9ucyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZO+8gScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8jZW5kcmVnaW9uXHJcblxyXG4gIC8vI3JlZ2lvbiB1dGlsXHJcblxyXG4gIHByb3RlY3RlZCBpc1ZhbGlkYXRlT3JSZXF1aXJlZEV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSB7XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbk9iamVjdCAmJiAoZXhwcmVzc2lvbk9iamVjdC50eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZhbGlkYXRlIHx8IGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5SZXF1aXJlZCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS7peS6i+S7tuWPguaVsOS4uuS+neaNruaehOW7uuWunuS9k+i3r+W+hFxyXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRFbnRpdHlQYXRoRnJvbUV2ZW50KGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk6IHN0cmluZ1tdIHtcclxuICAgIGV2ZW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShldmVudCkpO1xyXG4gICAgaWYgKCFldmVudCB8fCAhZXZlbnQucGF0aCB8fCBldmVudC5wYXRoLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF0aHMgPSBldmVudC5wYXRoO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50aXR5UGF0aChwYXRocyk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS6i+S7tui3r+W+hOS4reeahOWunuS9k+i3r+W+hFxyXG4gICAqIEBwYXJhbSBwYXRoIHBhdGhcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0RW50aXR5UGF0aChwYXRoOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHBhdGhzID0gcGF0aC5maWx0ZXIoKHZhbHVlOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgaWYgKGluZGV4ICUgMiA9PT0gMCAmJiB2YWx1ZS5pbmNsdWRlcygnOicpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwYXRocztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5a6e5L2T6Lev5b6EXHJcbiAgICogQHBhcmFtIHBhdGggcGF0aFxyXG4gICAqIEBkZXNjcmlwdGlvbiDliKDpmaTot6/lvoTkuK3nmoRpZOWtl+autVxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBidWlsZEVudGl0eVBhdGgocGF0aDogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwYXRocyA9IHBhdGguZmlsdGVyKCh2YWx1ZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGlmIChpbmRleCAlIDIgPT09IDAgJiYgdmFsdWUuaW5jbHVkZXMoJzonKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa4heeQhuS6i+S7tui3r+W+hOS4reeahGlk5Li76ZSu5qCH6K+GXHJcbiAgICogQHBhcmFtIHBhdGggcGF0aFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjbGVhbkV2ZW50UGF0aChwYXRoOiBzdHJpbmdbXSkge1xyXG4gICAgcGF0aCA9IHBhdGguZmlsdGVyKHAgPT4ge1xyXG4gICAgICBpZiAocCAmJiBwICE9PSAnOicpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHBhdGgubWFwKChpdGVtOiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKGl0ZW0uaW5jbHVkZXMoJzonKSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnNwbGl0KCc6JylbMV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blrZDooajkuovku7booYxcclxuICAgKiBAcGFyYW0gcGF0aHMgXHJcbiAgICogQHBhcmFtIGV2ZW50IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRDdXJyZW50Um93QnlQYXRocyhwYXRoczogc3RyaW5nW10pOiBudWxsIHwgeyBbcHJvcDogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdDogQmluZGluZ0xpc3QgPSB0aGlzLmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgIGlmIChiaW5kaW5nTGlzdCAmJiBiaW5kaW5nTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxldCBwcmltYXJ5VmFsdWUgPSBiaW5kaW5nTGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWUgfHwgbnVsbDtcclxuICAgICAgaWYgKHByaW1hcnlWYWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSBiaW5kaW5nTGlzdC5maW5kQnlJZChwcmltYXJ5VmFsdWUpO1xyXG4gICAgICAgIGlmIChiaW5kaW5nT2JqZWN0KSB7XHJcbiAgICAgICAgICByZXN1bHQgPSBiaW5kaW5nT2JqZWN0LnRvSlNPTigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5LqL5Lu26Lev5b6E5Lit5oyH5a6a5a2Q6KGo55qE5LqL5Lu26KGMXHJcbiAgICogQHBhcmFtIHBhdGggXHJcbiAgICogQHBhcmFtIHRhYmxlQ29kZSBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0RXZlbnRJZChwYXRoOiBzdHJpbmdbXSwgdGFibGVDb2RlOiBzdHJpbmcpIHtcclxuICAgIGlmICghcGF0aCB8fCBwYXRoLmxlbmd0aCA8IDEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBhdGghJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wZXJ0eUluZGV4ID0gcGF0aC5maW5kSW5kZXgocCA9PiBwID09PSB0YWJsZUNvZGUpO1xyXG4gICAgaWYgKHByb3BlcnR5SW5kZXggPT09IC0xKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaWRJbmRleCA9IHByb3BlcnR5SW5kZXggKyAxO1xyXG4gICAgaWYgKGlkSW5kZXggPiBwYXRoLmxlbmd0aCAtIDEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHByb3BlcnR5TmFtZSBvciBwYXRoJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpZCA9IHBhdGhbaWRJbmRleF07XHJcbiAgICBpZiAoaWQuaW5kZXhPZignOicpID09PSAtMSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbXB1dGUgZXJyb3IuJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQuc3BsaXQoJzonKVsxXTtcclxuICB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcblxyXG5cclxuICAvLyNyZWdpb24gIOaehOmAoOS4iuS4i+aWh1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlj5jph4/kuIrkuIvmlodcclxuICAgKiBAcGFyYW0gZXZlbnQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGJ1aWxkU3RhdGVDb250ZXh0KGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xyXG4gICAgY29uc3QgbnMgPSBldmVudC5ucztcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0c0J5TmFtZXNwYWNlKG5zKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKGZyYW1lQ29udGV4dHMgJiYgZnJhbWVDb250ZXh0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGFub255bW91c0ZyYW1lQ29udGV4dCA9IGZyYW1lQ29udGV4dHNbMF07XHJcbiAgICAgIGNvbnN0IHJvb3RGcmFtZUNvbnRleHQgPSBhbm9ueW1vdXNGcmFtZUNvbnRleHQuZ2V0VmlydHVhbFJvb3RGcmFtZUNvbnRleHQoKTtcclxuICAgICAgaWYgKHJvb3RGcmFtZUNvbnRleHQpIHtcclxuICAgICAgICBjb25zdCB1aVN0YXRlID0gcm9vdEZyYW1lQ29udGV4dC52aWV3TW9kZWwudWlTdGF0ZTtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModWlTdGF0ZSkgfHwgW107XHJcbiAgICAgICAgcHJvcGVydHlOYW1lcy5mb3JFYWNoKChwcm9wOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIGlmIChwcm9wLm1hdGNoKC9eW2EtekEtWjAtOV9cXCRdKyQvZykgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gdWlTdGF0ZVtwcm9wXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5LqL5Lu25a6e5L2TXHJcbiAgICogQHBhcmFtIGV2ZW50IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBidWlsZEVudGl0eUNvbnRleHQoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzLCBleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QsIGN1cnJlbnRSb3dzPzogQXJyYXk8RXhwcmVzc2lvbi5JQ3VycmVudFJvdz4pIHtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25CaW5kaW5nVHlwZSA9IGV4cHJlc3Npb25PYmplY3QuYmluZGluZ1R5cGU7XHJcbiAgICBpZiAoZXhwcmVzc2lvbkJpbmRpbmdUeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25CaW5kaW5nVHlwZS5GaWVsZCkge1xyXG4gICAgICBjb25zdCBlbnRpdHlUeXBlSW5mbyA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbztcclxuICAgICAgY29uc3QgY2hpbGRyZW5FbnRpdHlQYXRocyA9IFtdO1xyXG4gICAgICBFeHByZXNzaW9uVXRpbC5nZXRDaGlsZHJlbkVudGl0eVBhdGhzKGVudGl0eVR5cGVJbmZvLCBjaGlsZHJlbkVudGl0eVBhdGhzKTtcclxuICAgICAgLy8g6I635Y+W5b2T5YmN6KGMXHJcbiAgICAgIGNvbnN0IHJvdyA9IGN1cnJlbnRSb3dzICYmIGN1cnJlbnRSb3dzLmZpbmQocm93ID0+IHJvdy5iaW5kaW5nUGF0aCA9PT0gJycgfHwgcm93LmJpbmRpbmdQYXRoID09PSAnLycpIHx8IG51bGw7XHJcbiAgICAgIGNvbnN0IHByaW1hcnlWYWx1ZSA9IHJvdyAmJiByb3cucHJpbWFyeVZhbHVlIHx8IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgIGxldCBlbnRpdHkgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuZmluZEJ5SWQocHJpbWFyeVZhbHVlKTtcclxuICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgb2JqZWN0ID0gZW50aXR5LnRvSlNPTigpO1xyXG4gICAgICBvYmplY3RbJ19fdHlwZV9fJ10gPSAnRW50aXR5JztcclxuICAgICAgaWYgKCFjaGlsZHJlbkVudGl0eVBhdGhzIHx8IGNoaWxkcmVuRW50aXR5UGF0aHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgIH1cclxuICAgICAgY2hpbGRyZW5FbnRpdHlQYXRocy5zb3J0KCh2MSwgdjIpID0+IHYxLmxlbmd0aCAtIHYyLmxlbmd0aCk7XHJcbiAgICAgIC8vIOaJvuWIsOaJgOacieWtkOihqFxyXG4gICAgICBjaGlsZHJlbkVudGl0eVBhdGhzLmZvckVhY2goKHBhdGhzOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gdGhpcy5iaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXRocykgYXMgQmluZGluZ0xpc3Q7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRSb3dJZCA9IGJpbmRpbmdMaXN0LmN1cnJlbnRJZDtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBwYXRoc1twYXRocy5sZW5ndGggLSAxXTtcclxuICAgICAgICAvLyBwYXJlbnQg5Li6ZW50aXR55oiWZW50aXR5bGlzdOaIlm51bGxcclxuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXRocy5zbGljZSgwLCBwYXRocy5sZW5ndGggLSAxKS5yZWR1Y2UoKG9iamVjdDogYW55LCBwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0W3BhdGhdIHx8IG51bGw7XHJcbiAgICAgICAgfSwgb2JqZWN0KTtcclxuICAgICAgICBpZiAoIXBhcmVudCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0gcGFyZW50O1xyXG4gICAgICAgIGxldCBub2RlOiBhbnkgPSBudWxsO1xyXG4gICAgICAgIGlmICghY3VycmVudFJvd0lkKSB7XHJcbiAgICAgICAgICAvLyDlvZPliY3ooajmsqHmnInmlbDmja5cclxuICAgICAgICAgIG5vZGUgPSB7IF9faXRlbXNfXzogW10sIF9fdHlwZV9fOiAnTGlzdCcgfTtcclxuICAgICAgICAgIG5vZGUubGVuZ3RoID0gKCkgPT4gbm9kZS5fX2l0ZW1zX18ubGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyDnuqDmraPlvZPliY3ooYxcclxuICAgICAgICAgIGlmIChjdXJyZW50Um93cyAmJiBjdXJyZW50Um93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIOaYr+WQpuaMh+WumuS6huW9k+WJjeihjFxyXG4gICAgICAgICAgICBjb25zdCB1c2VyQXNzaWduQ3VycmVudFJvdyA9IGN1cnJlbnRSb3dzLmZpbmQocm93ID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSByb3cuYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgICByZXR1cm4gYmluZGluZ1BhdGhzLmpvaW4oJy8nKSA9PT0gcGF0aHMuam9pbignLycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHVzZXJBc3NpZ25DdXJyZW50Um93KSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudFJvd0lkID0gdXNlckFzc2lnbkN1cnJlbnRSb3cucHJpbWFyeVZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyDlrZDooajlvZPliY3ooYxcclxuICAgICAgICAgIGNvbnN0IHJvdyA9IGJpbmRpbmdMaXN0LmZpbmRCeUlkKGN1cnJlbnRSb3dJZCk7XHJcbiAgICAgICAgICAvLyDmib7liLDlrZDooajlvZPliY3ooYznmoTkuIrnuqdcclxuICAgICAgICAgIGNvbnN0IGxpc3QgPSBwYXJlbnRbcHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgIG5vZGUgPSB7IF9faXRlbXNfXzogW10sIC4uLnJvdyAmJiByb3cudG9KU09OKCkgfHwge30sIF9fdHlwZV9fOiAnTGlzdCcgfTtcclxuICAgICAgICAgIG5vZGUubGVuZ3RoID0gKCkgPT4gbm9kZS5fX2l0ZW1zX18ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgIGlmIChsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkpIHtcclxuICAgICAgICAgICAgbm9kZS5fX2l0ZW1zX18gPSBbXS5jb25jYXQobGlzdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGFbcHJvcGVydHlOYW1lXSA9IG5vZGU7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgfSBlbHNlIGlmIChleHByZXNzaW9uQmluZGluZ1R5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvbkJpbmRpbmdUeXBlLlN0YXRlKSB7XHJcbiAgICAgIC8vIHRvZG86IOaUr+aMgeeKtuaAgeihqOi+vuW8j1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOihqOi+vuW8j+iuoeeul+S4iuS4i+aWh1xyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uT2JqZWN0IOihqOi+vuW8j1xyXG4gICAqIEBwYXJhbSBldmVudCDkuovku7ZcclxuICAgKiBAcGFyYW0gZW50aXR5Q29udGV4dCDlrp7kvZPkuIrkuIvmlodcclxuICAgKiBAcGFyYW0gY3VycmVudFJvd3Mg5b2T5YmN6KGMXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGJ1aWxkQ29udGV4dChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QsIGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncywgZW50aXR5Q29udGV4dD86IGFueSwgY3VycmVudFJvd3M/OiBBcnJheTxFeHByZXNzaW9uLklDdXJyZW50Um93Pik6IGFueSB7XHJcbiAgICBsZXQgY29udGV4dCA9IFtdO1xyXG4gICAgaWYgKGVudGl0eUNvbnRleHQpIHtcclxuICAgICAgY29udGV4dC5wdXNoKGVudGl0eUNvbnRleHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5idWlsZEVudGl0eUNvbnRleHQoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QsIGN1cnJlbnRSb3dzKTtcclxuICAgICAgY29udGV4dC5wdXNoKGVudGl0eSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGF0ZUNvbnRleHQgPSB0aGlzLmJ1aWxkU3RhdGVDb250ZXh0KGV2ZW50KTtcclxuICAgIGNvbnN0IGVudGl0eUNvZGUgPSB0aGlzLmVudGl0eU9yaWdpbmFsTm9kZUNvZGU7XHJcbiAgICBsZXQgZW50aXR5ID0gbnVsbDtcclxuICAgIGlmIChjb250ZXh0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBlbnRpdHkgPSBjb250ZXh0LnBvcCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZW50aXR5ID0gY29udGV4dFswXTtcclxuICAgICAgaWYgKCFlbnRpdHlbJ19fdHlwZV9fJ10pIHtcclxuICAgICAgICBlbnRpdHlbJ19fdHlwZV9fJ10gPSAnRW50aXR5JztcclxuICAgICAgfVxyXG4gICAgICBlbnRpdHlbJ19faXRlbXNfXyddID0gY29udGV4dDtcclxuICAgIH1cclxuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PFRyYW5zbGF0ZT4oVHJhbnNsYXRlVG9rZW4sIG51bGwpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2VudGl0eUNvZGVdOiBlbnRpdHksXHJcbiAgICAgIC4uLnN0YXRlQ29udGV4dCxcclxuICAgICAgQmlnTnVtYmVyLFxyXG4gICAgICBmcmFtZUNvbnRleHQ6IHRoaXMuZnJhbWVDb250ZXh0LFxyXG4gICAgICBiaW5kaW5nRGF0YTogdGhpcy5iaW5kaW5nRGF0YSxcclxuICAgICAgcmVwb3NpdG9yeTogdGhpcy5yZXBvc2l0b3J5LFxyXG4gICAgICBDdXJyZW50TGFuZ3VhZ2U6IHRyYW5zbGF0ZS5nZXRDdXJyZW50TGFuZ3VhZ2UoKSB8fCAnemgtQ0hTJ1xyXG4gICAgfTtcclxuICB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ymv5L2c55So6Lev5b6EXHJcbiAgICogQHBhcmFtIGV2ZW50IFxyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uT2JqZWN0IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBidWlsZEVmZmVjdFBhdGgoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzLCBleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBleHByZXNzaW9uUGF0aHMgPSBleHByZXNzaW9uT2JqZWN0LnBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIGNvbnN0IHByaW1hcnlWYWx1ZSA9IGV2ZW50LnBhdGhbMF0gJiYgZXZlbnQucGF0aFswXS5zcGxpdCgnOicpWzFdO1xyXG4gICAgaWYgKCFwcmltYXJ5VmFsdWUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGV2ZW50IHBhdGghJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoZXhwcmVzc2lvblBhdGhzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAvLyDkuLvooajnroDljZXlrZfmrrVcclxuICAgICAgcmV0dXJuIFtwcmltYXJ5VmFsdWUsIGV4cHJlc3Npb25QYXRocy5wb3AoKV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBbcHJpbWFyeVZhbHVlXTtcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGV4cHJlc3Npb25QYXRocy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBleHByZXNzaW9uUGF0aHNbaW5kZXhdO1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHByb3BlcnR5TmFtZSk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFBhdGhzID0gZXhwcmVzc2lvblBhdGhzLnNsaWNlKDAsIGluZGV4ICsgMSk7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlJbmZvOiBEYXRhUHJvcEluZm8gPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8uZ2V0UHJvcEluZm9CeVBhdGgoY3VycmVudFBhdGhzKTtcclxuICAgICAgICBpZiAocHJvcGVydHlJbmZvLmdyb3VwID09PSAnTGlzdCcpIHtcclxuICAgICAgICAgIGxldCBpZCA9IHRoaXMuZ2V0RXZlbnRJZChldmVudC5wYXRoLCBwcm9wZXJ0eUluZm8ubmFtZSkgfHwgbnVsbDtcclxuICAgICAgICAgIC8vIOS6i+S7tuWSjOihqOi+vuW8j+S4jeaYr+WQjOS4gOS4quihqFxyXG4gICAgICAgICAgaWYgKCFpZCkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nTGlzdCA9IHRoaXMuYmluZGluZ0RhdGEuZ2V0VmFsdWUoY3VycmVudFBhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgICAgaWYgKGJpbmRpbmdMaXN0KSB7XHJcbiAgICAgICAgICAgICAgaWQgPSBiaW5kaW5nTGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc3VsdC5wdXNoKGlkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vI3JlZ2lvbiDovoXliqnmlrnms5VcclxuICBwcm90ZWN0ZWQgZ2V0UGF0aEluZm8ocGF0aDogc3RyaW5nKTogeyBwYXRoOiBzdHJpbmcsIHByb3BlcnR5TmFtZTogc3RyaW5nLCBwYXRoczogc3RyaW5nW10sIHByb3BlcnR5TmFtZXM6IHN0cmluZ1tdIH0ge1xyXG4gICAgY29uc3QgcGF0aHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAvLyDojrflj5bmnIDlpKflrp7kvZPlsYLnuqfvvIzlhbbkvZnkuLrlsZ7mgKfvvIjnroDljZXlsZ7mgKfjgIF1ZHTjgIHlhbPogZTjgIHlhbPogZTltYzlpZflhbPogZTvvIlcclxuICAgIGNvbnN0IGVudGl0eVBhdGggPSBFeHByZXNzaW9uVXRpbC5nZXRBdmFpbGFibGVDaGlsZHJlblBhdGhzRnJvbUVudGl0eVBhdGhzKHBhdGhzLCB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8pO1xyXG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gcGF0aHMuc2xpY2UoZW50aXR5UGF0aC5sZW5ndGgpLmpvaW4oJy8nKTtcclxuICAgIHJldHVybiB7IHBhdGg6IGVudGl0eVBhdGguam9pbignLycpLCBwcm9wZXJ0eU5hbWUsIHBhdGhzOiBlbnRpdHlQYXRoLCBwcm9wZXJ0eU5hbWVzOiBwcm9wZXJ0eU5hbWUuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKSB9O1xyXG4gIH1cclxuICAvKipcclxuICAgKiBnZXQgdGFibGUgcGF0aHMgZnJvbSBldmVudCBwYXRoc1xyXG4gICAqIEBwYXJhbSBwYXRocyBldmVudCBwYXRoc1xyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRUYWJsZVBhdGhzRnJvbUV2ZW50UGF0aHMocGF0aHM6IHN0cmluZ1tdKSB7XHJcbiAgICBwYXRocyA9IHRoaXMuZ2V0RW50aXR5UGF0aChwYXRocyk7XHJcbiAgICBjb25zdCBlbnRpdHlQYXRocyA9IEV4cHJlc3Npb25VdGlsLmdldEF2YWlsYWJsZUNoaWxkcmVuUGF0aHNGcm9tRW50aXR5UGF0aHMocGF0aHMsIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbyk7XHJcbiAgICByZXR1cm4gZW50aXR5UGF0aHM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGdldCBwcm9wZXJ0eSBwYXRocyBmcm9tIGV2ZW50IHBhdGhzXHJcbiAgICogQHBhcmFtIHBhdGhzIGV2ZW50IHBhdGhzXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldFByb3BlcnR5UGF0aHNGcm9tRXZlbnRQYXRocyhwYXRoczogc3RyaW5nW10pIHtcclxuICAgIHBhdGhzID0gdGhpcy5nZXRFbnRpdHlQYXRoKHBhdGhzKTtcclxuICAgIGNvbnN0IHRhYmxlUGF0aHMgPSBFeHByZXNzaW9uVXRpbC5nZXRBdmFpbGFibGVDaGlsZHJlblBhdGhzRnJvbUVudGl0eVBhdGhzKHBhdGhzLCB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8pO1xyXG4gICAgcmV0dXJuIHBhdGhzLnNsaWNlKHRhYmxlUGF0aHMubGVuZ3RoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5YiG5p6Q5LqL5Lu25ZKM6KGo6L6+5byP55qE5YWz57O7XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGFuYWx5c2lzKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncywgZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSB7XHJcbiAgICBjb25zdCBleHByZXNzaW9uUGF0aEluZm8gPSB0aGlzLmdldFBhdGhJbmZvKGV4cHJlc3Npb25PYmplY3QucGF0aCk7XHJcbiAgICBjb25zdCBldmVudFBhdGhzID0gdGhpcy5nZXRFbnRpdHlQYXRoKGV2ZW50LnBhdGguc2xpY2UoMCkpO1xyXG4gICAgY29uc3QgZXZlbnRQYXRoSW5mbyA9IHRoaXMuZ2V0UGF0aEluZm8oZXZlbnRQYXRocy5qb2luKCcvJykpO1xyXG4gICAgaWYgKCFleHByZXNzaW9uUGF0aEluZm8gfHwgIWV2ZW50UGF0aEluZm8pIHtcclxuICAgICAgY29uc29sZS53YXJuKGDooajovr7lvI/ot6/lvoTmiJbkuovku7bot6/lvoTplJnor6/vvIzojrflj5bot6/lvoTkv6Hmga/lpLHotKXjgIJgKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBleHByZXNzaW9uVGFibGVQYXRocyA9IGV4cHJlc3Npb25QYXRoSW5mby5wYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICBjb25zdCBleHByZXNzaW9uUHJvcGVydHlOYW1lcyA9IGV4cHJlc3Npb25QYXRoSW5mby5wcm9wZXJ0eU5hbWUuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIGNvbnN0IGV2ZW50VGFibGVQYXRocyA9IGV2ZW50UGF0aEluZm8ucGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApO1xyXG4gICAgY29uc3QgZXZlbnRQcm9wZXJ0eU5hbWVzID0gZXZlbnRQYXRoSW5mby5wcm9wZXJ0eU5hbWUuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgZGlzdGFuY2U6IHVuZGVmaW5lZCxcclxuICAgICAgZXZlbnRGcm9tQ2hpbGRyZW46IHVuZGVmaW5lZCxcclxuICAgICAgZXZlbnRGcm9tUGFyZW50OiB1bmRlZmluZWQsXHJcbiAgICAgIGV4cHJlc3Npb25UYWJsZVBhdGhzLFxyXG4gICAgICBleHByZXNzaW9uUHJvcGVydHlOYW1lcyxcclxuICAgICAgZXZlbnRUYWJsZVBhdGhzLFxyXG4gICAgICBldmVudFByb3BlcnR5TmFtZXMsXHJcbiAgICAgIGlzU2FtZVRhYmxlOiBmYWxzZVxyXG4gICAgfTtcclxuICAgIHJlc3VsdC5kaXN0YW5jZSA9IE1hdGguYWJzKGV4cHJlc3Npb25UYWJsZVBhdGhzLmxlbmd0aCAtIGV2ZW50VGFibGVQYXRocy5sZW5ndGgpO1xyXG4gICAgaWYgKHJlc3VsdC5kaXN0YW5jZSA9PT0gMSkge1xyXG4gICAgICByZXN1bHQuZXZlbnRGcm9tQ2hpbGRyZW4gPSBldmVudFRhYmxlUGF0aHMubGVuZ3RoID4gZXhwcmVzc2lvblRhYmxlUGF0aHMubGVuZ3RoICYmIGV2ZW50VGFibGVQYXRocy5qb2luKCcvJykuc3RhcnRzV2l0aChleHByZXNzaW9uVGFibGVQYXRocy5qb2luKCcvJykpO1xyXG4gICAgICByZXN1bHQuZXZlbnRGcm9tUGFyZW50ID0gZXZlbnRUYWJsZVBhdGhzLmxlbmd0aCA8IGV4cHJlc3Npb25UYWJsZVBhdGhzLmxlbmd0aCAmJiBleHByZXNzaW9uVGFibGVQYXRocy5qb2luKCcvJykuc3RhcnRzV2l0aChldmVudFRhYmxlUGF0aHMuam9pbignLycpKTtcclxuICAgIH1cclxuICAgIHJlc3VsdC5pc1NhbWVUYWJsZSA9IGV4cHJlc3Npb25UYWJsZVBhdGhzLmpvaW4oJy8nKSA9PT0gZXZlbnRUYWJsZVBhdGhzLmpvaW4oJy8nKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYnVpbGRDdXJyZW50Um93cyh0YWJsZVBhdGhzOiBzdHJpbmdbXSwgZnVsbFBhdGhzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgY3VycmVudFJvd3MgPSBuZXcgQXJyYXk8RXhwcmVzc2lvbi5JQ3VycmVudFJvdz4oKTtcclxuICAgIGlmICghdGFibGVQYXRocyB8fCB0YWJsZVBhdGhzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgY3VycmVudFJvd3MucHVzaCh7XHJcbiAgICAgICAgYmluZGluZ1BhdGg6ICcvJyxcclxuICAgICAgICBwcmltYXJ5VmFsdWU6IGZ1bGxQYXRoc1swXVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHBhdGhzID0gW107XHJcbiAgICAgIHRhYmxlUGF0aHMuZm9yRWFjaCgocGF0aDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICBjdXJyZW50Um93cy5wdXNoKHtcclxuICAgICAgICAgICAgYmluZGluZ1BhdGg6ICcvJyxcclxuICAgICAgICAgICAgcHJpbWFyeVZhbHVlOiBmdWxsUGF0aHNbMF1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXRocy5wdXNoKHBhdGgpO1xyXG4gICAgICAgIGNvbnN0IHByaW1hcnlWYWx1ZSA9IGZ1bGxQYXRoc1tpbmRleCAqIDIgKyAyXTtcclxuICAgICAgICBjdXJyZW50Um93cy5wdXNoKHtcclxuICAgICAgICAgIGJpbmRpbmdQYXRoOiBwYXRocy5qb2luKCcvJyksXHJcbiAgICAgICAgICBwcmltYXJ5VmFsdWU6IHByaW1hcnlWYWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjdXJyZW50Um93cztcclxuICB9XHJcbiAgcHJvdGVjdGVkIGNvbnZlcnRCb29sZWFuVHlwZUV4cHJlc3Npb25SZXN1bHQoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0LCByZXN1bHQ6IGFueSkge1xyXG4gICAgaWYgKHRoaXMuaXNCb29sZWFuVHlwZUV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdCkpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdHJ1ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByb3RlY3RlZCBpc0Jvb2xlYW5UeXBlRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmlzUmVhZG9ubHlFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpIHx8IHRoaXMuaXNWaXNpYmxlRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0KSB8fCB0aGlzLmlzVmFsaWRhdGVFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpIHx8IHRoaXMuaXNSZXF1aXJlZEV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdCkgfHwgdGhpcy5pc0RlcGVuZGVuY3lFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpO1xyXG4gIH1cclxuICBwcml2YXRlIGlzUmVhZG9ubHlFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb25PYmplY3QgJiYgZXhwcmVzc2lvbk9iamVjdC50eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlYWRvbmx5IHx8IGZhbHNlO1xyXG4gIH1cclxuICBwcml2YXRlIGlzVmlzaWJsZUV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbk9iamVjdCAmJiBleHByZXNzaW9uT2JqZWN0LnR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuVmlzaWJsZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBpc1ZhbGlkYXRlRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBleHByZXNzaW9uT2JqZWN0ICYmIGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WYWxpZGF0ZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBpc1JlcXVpcmVkRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBleHByZXNzaW9uT2JqZWN0ICYmIGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5SZXF1aXJlZDtcclxuICB9XHJcbiAgcHJpdmF0ZSBpc0RlcGVuZGVuY3lFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb25PYmplY3QgJiYgZXhwcmVzc2lvbk9iamVjdC50eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLkRlcGVuZGVuY3k7XHJcbiAgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG59Il19