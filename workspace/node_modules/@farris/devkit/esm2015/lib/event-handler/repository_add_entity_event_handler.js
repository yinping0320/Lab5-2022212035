import { Injectable } from "@angular/core";
import { EventHandler } from "./event_handler";
export class RepositoryAddEntityEventHandler extends EventHandler {
    /**
     * 获取相关表达式
     * @param event event
     * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段
     */
    filter(event) {
        return null;
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
RepositoryAddEntityEventHandler.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9hZGRfZW50aXR5X2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1oYW5kbGVyL3JlcG9zaXRvcnlfYWRkX2VudGl0eV9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLE1BQU0sT0FBTywrQkFBZ0MsU0FBUSxZQUFZO0lBQy9EOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsS0FBMkI7UUFDdkMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ksUUFBUSxDQUFDLEtBQTJCO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUE2QyxFQUFFLEVBQUU7Z0JBQ3BFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQzFFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksTUFBTSxLQUFLLFNBQVMsSUFBRyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO29CQUNqRixPQUFPO2lCQUNSO2dCQUNELGdCQUFnQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2pDLElBQUksZ0JBQWdCLENBQUMsRUFBRSxFQUFFO29CQUN2QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDekU7Z0JBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksb0JBQW9CLENBQUMsS0FBZSxFQUFFLEtBQTJCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7OztZQXhDRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gXCIuLi9lbnRpdHkvaW5kZXhcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gXCIuLi9leHByZXNzaW9uXCI7XHJcbmltcG9ydCB7IEVOVElUWV9URU1QTEFURSB9IGZyb20gXCIuLi9yZXNvbHZlci9pbmRleFwiO1xyXG5pbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9ldmVudF9oYW5kbGVyXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXBvc2l0b3J5QWRkRW50aXR5RXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcclxuICAvKipcclxuICAgKiDojrflj5bnm7jlhbPooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRcclxuICAgKiBAZGVzY3JpcHRpb24g5LiN5pSv5oyB5Li76KGo55u05o6l5L6d6LWW5a2Q6KGo5bGe5oCn55qE5oOF5Ya177yM5Y+q6IO96IGa5ZCI5a2Q6KGo55qE5a2X5q61XHJcbiAgICovXHJcbiAgcHVibGljIGZpbHRlcihldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlj5HluIPkuovku7ZcclxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRcclxuICAgKi9cclxuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XHJcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZmlsdGVyKGV2ZW50KTtcclxuICAgIGlmIChleHByZXNzaW9ucyAmJiBleHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGV4cHJlc3Npb25zLmZvckVhY2goKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRleHQgPSB0aGlzLmJ1aWxkRW50aXR5Q29udGV4dChldmVudCxleHByZXNzaW9uT2JqZWN0KTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoZXhwcmVzc2lvbk9iamVjdCwgZXZlbnQsIGVudGl0eUNvbnRleHQpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGVyZm9ybShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQmJiAhdGhpcy5pc1ZhbGlkYXRlT3JSZXF1aXJlZEV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQgPSByZXN1bHQ7XHJcbiAgICAgICAgaWYgKGV4cHJlc3Npb25PYmplY3QuaWQpIHtcclxuICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdC5zZXQoZXhwcmVzc2lvbk9iamVjdC5pZCwgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVmZmVjdChldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blrZDooajkuovku7booYxcclxuICAgKiBAcGFyYW0gcGF0aHMgXHJcbiAgICogQHBhcmFtIGV2ZW50IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDdXJyZW50Um93QnlFdmVudChwYXRoczogc3RyaW5nW10sIGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk6IG51bGwgfCB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50Um93QnlQYXRocyhwYXRocyk7XHJcbiAgfVxyXG59Il19