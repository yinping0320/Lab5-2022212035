import { EventHandler } from "./event_handler";
import { Injectable } from "@angular/core";
export class RepositoryLoadEventHandler extends EventHandler {
    filter(event) {
        return null;
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
RepositoryLoadEventHandler.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9sb2FkX2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1oYW5kbGVyL3JlcG9zaXRvcnlfbG9hZF9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE1BQU0sT0FBTywwQkFBMkIsU0FBUSxZQUFZO0lBQ25ELE1BQU0sQ0FBQyxLQUEyQjtRQUN2QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRDs7O09BR0c7SUFDSSxRQUFRLENBQUMsS0FBMkI7UUFDekMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQTZDLEVBQUUsRUFBRTtnQkFDcEUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN0RSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDMUUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFHLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2pGLE9BQU87aUJBQ1I7Z0JBQ0QsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFDakMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN6RTtxQkFBTTtpQkFDTjtnQkFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSxvQkFBb0IsQ0FBQyxLQUFlLEVBQUUsS0FBMkI7UUFDdEUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7O1lBcENGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9ldmVudF9oYW5kbGVyXCI7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi4vZXhwcmVzc2lvbi9pbmRleFwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeUxvYWRFdmVudEhhbmRsZXIgZXh0ZW5kcyBFdmVudEhhbmRsZXIge1xyXG4gIHB1YmxpYyBmaWx0ZXIoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Y+R5biD5LqL5Lu2XHJcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XHJcbiAgICovXHJcbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xyXG4gICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmZpbHRlcihldmVudCk7XHJcbiAgICBpZiAoZXhwcmVzc2lvbnMgJiYgZXhwcmVzc2lvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBlbnRpdHlDb250ZXh0ID0gdGhpcy5idWlsZEVudGl0eUNvbnRleHQoZXZlbnQsZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50LCBlbnRpdHlDb250ZXh0KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBlcmZvcm0oZXhwcmVzc2lvbk9iamVjdCwgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHQuc2V0KGV4cHJlc3Npb25PYmplY3QuaWQsIGV4cHJlc3Npb25PYmplY3QucmVzdWx0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVmZmVjdChldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blrZDooajkuovku7booYxcclxuICAgKiBAcGFyYW0gcGF0aHMgXHJcbiAgICogQHBhcmFtIGV2ZW50IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDdXJyZW50Um93QnlFdmVudChwYXRoczogc3RyaW5nW10sIGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk6IG51bGwgfCB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50Um93QnlQYXRocyhwYXRocyk7XHJcbiAgfVxyXG59Il19