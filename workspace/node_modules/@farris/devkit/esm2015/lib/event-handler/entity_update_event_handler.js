import { Injectable } from "@angular/core";
import { Expression } from "../expression/index";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { ExpressionUtil } from "../utils/expression_util";
import { EventHandler } from "./event_handler";
export class EntityUpdateEventHandler extends EventHandler {
    filter(event) {
        return this.expressionObjects.filter((expressionObject) => {
            // 重新加载实体时不计算计算表达式，只处理只读、必填等
            if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {
                return false;
            }
            const result = this.analysis(event, expressionObject);
            if (!result) {
                return false;
            }
            // 必须是主表表达式
            if (result.expressionTablePaths.length !== 0) {
                return false;
            }
            const index = expressionObject.deps.findIndex((dep) => {
                if (!dep.startsWith(ENTITY_TEMPLATE)) {
                    return false;
                }
                const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);
                const depPathInfo = this.getPathInfo(deps.join('/'));
                if (!depPathInfo) {
                    return false;
                }
                if (depPathInfo.paths.length !== 0) {
                    return false;
                }
                return true;
            });
            return index === -1 ? false : true;
        });
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                }
                this.effect(event, expressionObject);
            });
        }
    }
    getCurrentRowByEvent(paths, event) {
        let result = null;
        const bindingList = this.bindingData.getValue(paths);
        const eventEntityPath = this.getEntityPath(event.path);
        if (bindingList && bindingList.length > 0) {
            let primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
            if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                primaryValue = event.id || null;
                if (!primaryValue) {
                    primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                }
            }
            if (primaryValue) {
                const bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    }
}
EntityUpdateEventHandler.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,