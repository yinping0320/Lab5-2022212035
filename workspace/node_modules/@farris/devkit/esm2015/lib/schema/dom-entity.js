/**
 * Component节点
 */
export class FormComponent {
    constructor() {
        this.type = 'Component';
    }
}
/**
 * 组件类型
 */
export var FormComponentType;
(function (FormComponentType) {
    /**
     * 表单
     */
    FormComponentType["Frame"] = "Frame";
    /**
     * 列表/树表类
     */
    FormComponentType["dataGrid"] = "dataGrid";
    /**
     * 列表视图
     */
    FormComponentType["listView"] = "listView";
    /**
     * 卡片类（待优化，目前类型中带有控件列布局信息）
     */
    FormComponentType["form"] = "form";
    /**
     * 移动审批：人员信息组件
     */
    FormComponentType["detailHeaderForMobileApprove"] = "detailHeaderForMobileApprove";
    /**
     * 移动审批：面板
     */
    FormComponentType["panelForMobileApprove"] = "panelForMobileApprove";
    /**
     * 移动审批：流程图组件
     */
    FormComponentType["flowProcessForMobileApprove"] = "flowProcessForMobileApprove";
})(FormComponentType || (FormComponentType = {}));
/**
 * DOM 控件binding实体
 */
export class FormBinding {
}
/**
 * binding 类型
 */
export var FormBindingType;
(function (FormBindingType) {
    FormBindingType["Form"] = "Form";
    FormBindingType["Variable"] = "Variable";
})(FormBindingType || (FormBindingType = {}));
/**
 * dom Json ViewModel 节点实体
 */
export class FormViewModel {
}
/**
 * dom Json ViewModel 节点中fields实体
 */
export class FormViewModelField {
}
/**
 * dom Json ViewModel 节点中states实体
 */
export class FormVariable {
    constructor() {
        this.id = '';
        this.category = 'locale';
    }
}
/**
 * 变量类型
 */
export var FormVariableCategory;
(function (FormVariableCategory) {
    FormVariableCategory["locale"] = "locale";
    FormVariableCategory["remote"] = "remote";
})(FormVariableCategory || (FormVariableCategory = {}));
/**
 * 支持的变量类型
 */
export const FormVariableTypes = [
    { text: '字符串', value: 'String' },
    { text: '数字', value: 'Number' },
    { text: '布尔', value: 'Boolean' },
    { text: '日期', value: 'Date' },
    { text: '日期时间', value: 'DateTime' },
    { text: '文本', value: 'Text' },
    { text: '对象', value: 'Object' },
    { text: '数组', value: 'Array' }
];
/**
 * DOM GridField 中的数据类型
 */
export var GridFieldDataType;
(function (GridFieldDataType) {
    GridFieldDataType["string"] = "string";
    GridFieldDataType["boolean"] = "boolean";
    GridFieldDataType["date"] = "date";
    GridFieldDataType["number"] = "number";
    GridFieldDataType["enum"] = "enum";
    GridFieldDataType["datetime"] = "datetime";
})(GridFieldDataType || (GridFieldDataType = {}));
/**
 * 枚举类型
 */
export class EnumData {
}
/**
 * Item类型数据
 */
export class ItemData {
}
/**
 * vm 分页配置
 */
export class FormViewModelPagination {
}
/**
 * 组合表单-声明实体
 */
export class FormDeclaration {
}
/**
 * 组合表单-事件声明实体
 */
export class DeclarationEvent {
}
/**
 * 组合表单-参数实体
 */
export class DeclarationParam {
}
/**
 * 组合表单-命令声明实体
 */
export class DeclarationCommand {
}
/**
 * 组合表单-变量声明实体
 */
export class DeclartionState {
}
/**
 * 组合表单-订阅实体
 */
export class Subscription {
}
/**
 * 组合表单-订阅参数实体
 */
export class SubscriptionParamMapping {
}
//# sourceMappingURL=data:application/json;base64,