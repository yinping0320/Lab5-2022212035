export class SchemaService {
    constructor() { }
    /**
     * 根据字段标识数组获取指定字段集合
     * @param fieldIds 字段标识数组
     * @param schema 实体结构
     * @param viewModel 视图模型
     * @returns 已Map形式存储的指定字段字典
     */
    getFieldsByIds(fieldIds, schema, viewModel) {
        const specifiedFieldsMap = new Map();
        const entities = schema.entities;
        if (entities && entities.length && viewModel) {
            const entityPath = viewModel.bindTo;
            const fields = this.getEntityFields(entities, entityPath);
            const fieldsMap = this.flattenFields(fields);
            fieldIds.forEach(fieldId => {
                if (fieldsMap.has(fieldId)) {
                    specifiedFieldsMap.set(fieldId, fieldsMap.get(fieldId));
                }
            });
        }
        return specifiedFieldsMap;
    }
    /**
     * 将字段列表打平为字典结构
     * @param fields 字段属性
     * @param fieldsMap 缺省参数，用来存储字段的Map对象
     * @returns 以Map形式存储的字段字段
     */
    flattenFields(fields, fieldsMap = new Map()) {
        for (const field of fields) {
            fieldsMap.set(field.id, field);
            if (field.type && field.type.fields && field.type.fields.length > 0) {
                this.flattenFields(field.type.fields, fieldsMap);
            }
        }
        return fieldsMap;
    }
    /**
     * 获取表字段列表
     * @param entities 实体对象集合
     * @param entityPath 指定实体路径，根实体路径为'/'
     */
    getEntityFields(entities, entityPath) {
        if (entities && entities.length) {
            const splitIndex = entityPath.indexOf('/');
            if (splitIndex > -1) {
                entityPath = entityPath.slice(splitIndex + 1, entityPath.length);
            }
            // 遍历所有实体，查找匹配指定路径的实体
            for (const entity of entities) {
                if (entityPath === '' || entityPath === entity.code || entityPath === entity.label) {
                    return entity.type.fields;
                }
                else {
                    const fields = this.getEntityFields(entity.type.entities, entityPath);
                    if (fields && fields.length) {
                        return fields;
                    }
                }
            }
        }
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9zY2hlbWEvc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxPQUFPLGFBQWE7SUFFdEIsZ0JBQWdCLENBQUM7SUFFakI7Ozs7OztPQU1HO0lBQ0ksY0FBYyxDQUFDLFFBQWtCLEVBQUUsTUFBYyxFQUFFLFNBQXlCO1FBRS9FLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7UUFDaEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLFNBQVMsRUFBRTtZQUMxQyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3BDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzFELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUN4QixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFDM0Q7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSyxhQUFhLENBQ2pCLE1BQTJCLEVBQzNCLFlBQTRDLElBQUksR0FBRyxFQUE2QjtRQUVoRixLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUN4QixTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0IsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ2pFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDcEQ7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssZUFBZSxDQUFDLFFBQXdCLEVBQUUsVUFBa0I7UUFDaEUsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUM3QixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNqQixVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwRTtZQUNELHFCQUFxQjtZQUNyQixLQUFLLE1BQU0sTUFBTSxJQUFJLFFBQVEsRUFBRTtnQkFDM0IsSUFBSSxVQUFVLEtBQUssRUFBRSxJQUFJLFVBQVUsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLFVBQVUsS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFO29CQUNoRixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2lCQUM3QjtxQkFBTTtvQkFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUN0RSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUN6QixPQUFPLE1BQU0sQ0FBQztxQkFDakI7aUJBQ0o7YUFDSjtTQUNKO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgSUZvcm1WaWV3TW9kZWwgfSBmcm9tICcuL2Zvcm0tbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBTY2hlbWEsIFNjaGVtYUVudGl0eSwgU2NoZW1hRW50aXR5RmllbGQgfSBmcm9tICcuL3NjaGVtYSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2NoZW1hU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruWtl+auteagh+ivhuaVsOe7hOiOt+WPluaMh+WumuWtl+autembhuWQiFxyXG4gICAgICogQHBhcmFtIGZpZWxkSWRzIOWtl+auteagh+ivhuaVsOe7hFxyXG4gICAgICogQHBhcmFtIHNjaGVtYSDlrp7kvZPnu5PmnoRcclxuICAgICAqIEBwYXJhbSB2aWV3TW9kZWwg6KeG5Zu+5qih5Z6LXHJcbiAgICAgKiBAcmV0dXJucyDlt7JNYXDlvaLlvI/lrZjlgqjnmoTmjIflrprlrZfmrrXlrZflhbhcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZpZWxkc0J5SWRzKGZpZWxkSWRzOiBzdHJpbmdbXSwgc2NoZW1hOiBTY2hlbWEsIHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwpXHJcbiAgICAgICAgOiBNYXA8c3RyaW5nLCBTY2hlbWFFbnRpdHlGaWVsZD4ge1xyXG4gICAgICAgIGNvbnN0IHNwZWNpZmllZEZpZWxkc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBTY2hlbWFFbnRpdHlGaWVsZD4oKTtcclxuICAgICAgICBjb25zdCBlbnRpdGllcyA9IHNjaGVtYS5lbnRpdGllcztcclxuICAgICAgICBpZiAoZW50aXRpZXMgJiYgZW50aXRpZXMubGVuZ3RoICYmIHZpZXdNb2RlbCkge1xyXG4gICAgICAgICAgICBjb25zdCBlbnRpdHlQYXRoID0gdmlld01vZGVsLmJpbmRUbztcclxuICAgICAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5nZXRFbnRpdHlGaWVsZHMoZW50aXRpZXMsIGVudGl0eVBhdGgpO1xyXG4gICAgICAgICAgICBjb25zdCBmaWVsZHNNYXAgPSB0aGlzLmZsYXR0ZW5GaWVsZHMoZmllbGRzKTtcclxuICAgICAgICAgICAgZmllbGRJZHMuZm9yRWFjaChmaWVsZElkID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmaWVsZHNNYXAuaGFzKGZpZWxkSWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWVkRmllbGRzTWFwLnNldChmaWVsZElkLCBmaWVsZHNNYXAuZ2V0KGZpZWxkSWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzcGVjaWZpZWRGaWVsZHNNYXA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIblrZfmrrXliJfooajmiZPlubPkuLrlrZflhbjnu5PmnoRcclxuICAgICAqIEBwYXJhbSBmaWVsZHMg5a2X5q615bGe5oCnXHJcbiAgICAgKiBAcGFyYW0gZmllbGRzTWFwIOe8uuecgeWPguaVsO+8jOeUqOadpeWtmOWCqOWtl+auteeahE1hcOWvueixoVxyXG4gICAgICogQHJldHVybnMg5LulTWFw5b2i5byP5a2Y5YKo55qE5a2X5q615a2X5q61XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZmxhdHRlbkZpZWxkcyhcclxuICAgICAgICBmaWVsZHM6IFNjaGVtYUVudGl0eUZpZWxkW10sXHJcbiAgICAgICAgZmllbGRzTWFwOiBNYXA8c3RyaW5nLCBTY2hlbWFFbnRpdHlGaWVsZD4gPSBuZXcgTWFwPHN0cmluZywgU2NoZW1hRW50aXR5RmllbGQ+KClcclxuICAgICk6IE1hcDxzdHJpbmcsIFNjaGVtYUVudGl0eUZpZWxkPiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBmaWVsZHMpIHtcclxuICAgICAgICAgICAgZmllbGRzTWFwLnNldChmaWVsZC5pZCwgZmllbGQpO1xyXG4gICAgICAgICAgICBpZiAoZmllbGQudHlwZSAmJiBmaWVsZC50eXBlLmZpZWxkcyAmJiBmaWVsZC50eXBlLmZpZWxkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsYXR0ZW5GaWVsZHMoZmllbGQudHlwZS5maWVsZHMsIGZpZWxkc01hcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkc01hcDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluihqOWtl+auteWIl+ihqFxyXG4gICAgICogQHBhcmFtIGVudGl0aWVzIOWunuS9k+WvueixoembhuWQiFxyXG4gICAgICogQHBhcmFtIGVudGl0eVBhdGgg5oyH5a6a5a6e5L2T6Lev5b6E77yM5qC55a6e5L2T6Lev5b6E5Li6Jy8nXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0RW50aXR5RmllbGRzKGVudGl0aWVzOiBTY2hlbWFFbnRpdHlbXSwgZW50aXR5UGF0aDogc3RyaW5nKTogU2NoZW1hRW50aXR5RmllbGRbXSB7XHJcbiAgICAgICAgaWYgKGVudGl0aWVzICYmIGVudGl0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBzcGxpdEluZGV4ID0gZW50aXR5UGF0aC5pbmRleE9mKCcvJyk7XHJcbiAgICAgICAgICAgIGlmIChzcGxpdEluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eVBhdGggPSBlbnRpdHlQYXRoLnNsaWNlKHNwbGl0SW5kZXggKyAxLCBlbnRpdHlQYXRoLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g6YGN5Y6G5omA5pyJ5a6e5L2T77yM5p+l5om+5Yy56YWN5oyH5a6a6Lev5b6E55qE5a6e5L2TXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50aXR5UGF0aCA9PT0gJycgfHwgZW50aXR5UGF0aCA9PT0gZW50aXR5LmNvZGUgfHwgZW50aXR5UGF0aCA9PT0gZW50aXR5LmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eS50eXBlLmZpZWxkcztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5nZXRFbnRpdHlGaWVsZHMoZW50aXR5LnR5cGUuZW50aXRpZXMsIGVudGl0eVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZHMgJiYgZmllbGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGRzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuIl19