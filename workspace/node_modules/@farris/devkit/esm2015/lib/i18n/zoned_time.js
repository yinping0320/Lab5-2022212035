import moment from 'moment';
//import { timezones } from './time_zones';
//import { Timezone } from './types';
export class ZonedTime {
    /**
     * 将指定时区的时间转换为UTC时区时间（带时区）
     * @param date 时间
     * @param timeZone 时区
     */
    // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {
    //   timeZone = this.getStandardTimezoneName(timeZone);
    //   return moment.tz(date, timeZone).utc().format();
    // }
    /**
     * 将带时区的时间转换为指定时区的时间字符串
     * @param date 时间
     * @param timeZone 时区
     * @param format 时间格式
     */
    // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {
    //   timeZone = this.getStandardTimezoneName(timeZone);
    //   return moment(date).tz(timeZone).format(format);
    // }
    /**
     * 获取标准时区名称
     * @param tz 时区
     */
    // public static getStandardTimezoneName(tz: string) {
    //   let momentZone = moment.tz.zone(tz);
    //   let standardTimezone = tz;
    //   if (!momentZone) {
    //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));
    //     standardTimezone = timezone && timezone.utc[0] || null;
    //   }
    //   return standardTimezone;
    // }
    static zonedTimeToSpecialTimeZoneOffsetTimeString(date, offset = 0, format = 'YYYY-MM-DD HH:mm:ss.SSS') {
        const utcTime = moment(date).utc();
        const offsetMinutes = offset * 60;
        const result = utcTime.add(offsetMinutes, 'm');
        return result.format(format);
    }
    static timeZoneOffsetTimeToUtcTimeString(date, offset, format = 'YYYY-MM-DD HH:mm:ss.SSS') {
        return moment(date).utcOffset(offset, true).toISOString();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZWRfdGltZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2kxOG4vem9uZWRfdGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsMkNBQTJDO0FBQzNDLHFDQUFxQztBQUNyQyxNQUFNLE9BQU8sU0FBUztJQUNwQjs7OztPQUlHO0lBQ0gseUZBQXlGO0lBQ3pGLHVEQUF1RDtJQUN2RCxxREFBcUQ7SUFDckQsSUFBSTtJQUNKOzs7OztPQUtHO0lBQ0gsdUpBQXVKO0lBQ3ZKLHVEQUF1RDtJQUN2RCxxREFBcUQ7SUFDckQsSUFBSTtJQUNKOzs7T0FHRztJQUNILHNEQUFzRDtJQUN0RCx5Q0FBeUM7SUFDekMsK0JBQStCO0lBQy9CLHVCQUF1QjtJQUN2Qix1R0FBdUc7SUFDdkcsOERBQThEO0lBQzlELE1BQU07SUFDTiw2QkFBNkI7SUFDN0IsSUFBSTtJQUVHLE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQyxJQUE0QixFQUFFLFNBQWlCLENBQUMsRUFBRSxTQUFpQix5QkFBeUI7UUFDbkosTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ25DLE1BQU0sYUFBYSxHQUFHLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0MsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFDTSxNQUFNLENBQUMsaUNBQWlDLENBQUMsSUFBNEIsRUFBRSxNQUFjLEVBQUUsU0FBaUIseUJBQXlCO1FBQ3RJLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG4vL2ltcG9ydCB7IHRpbWV6b25lcyB9IGZyb20gJy4vdGltZV96b25lcyc7XHJcbi8vaW1wb3J0IHsgVGltZXpvbmUgfSBmcm9tICcuL3R5cGVzJztcclxuZXhwb3J0IGNsYXNzIFpvbmVkVGltZSB7XHJcbiAgLyoqXHJcbiAgICog5bCG5oyH5a6a5pe25Yy655qE5pe26Ze06L2s5o2i5Li6VVRD5pe25Yy65pe26Ze077yI5bim5pe25Yy677yJXHJcbiAgICogQHBhcmFtIGRhdGUg5pe26Ze0XHJcbiAgICogQHBhcmFtIHRpbWVab25lIOaXtuWMulxyXG4gICAqL1xyXG4gIC8vIHB1YmxpYyBzdGF0aWMgem9uZWRUaW1lVG9VdGMoZGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlciwgdGltZVpvbmU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgLy8gICB0aW1lWm9uZSA9IHRoaXMuZ2V0U3RhbmRhcmRUaW1lem9uZU5hbWUodGltZVpvbmUpO1xyXG4gIC8vICAgcmV0dXJuIG1vbWVudC50eihkYXRlLCB0aW1lWm9uZSkudXRjKCkuZm9ybWF0KCk7XHJcbiAgLy8gfVxyXG4gIC8qKlxyXG4gICAqIOWwhuW4puaXtuWMuueahOaXtumXtOi9rOaNouS4uuaMh+WumuaXtuWMuueahOaXtumXtOWtl+espuS4slxyXG4gICAqIEBwYXJhbSBkYXRlIOaXtumXtFxyXG4gICAqIEBwYXJhbSB0aW1lWm9uZSDml7bljLpcclxuICAgKiBAcGFyYW0gZm9ybWF0IOaXtumXtOagvOW8j1xyXG4gICAqL1xyXG4gIC8vIHB1YmxpYyBzdGF0aWMgem9uZWRUaW1lVG9TcGVjaWFsWm9uZVRpbWVTdHJpbmcoZGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlciwgdGltZVpvbmU6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcgPSAnWVlZWS1NTS1ERCBISDptbTpzcy5TU1MnKTogc3RyaW5nIHtcclxuICAvLyAgIHRpbWVab25lID0gdGhpcy5nZXRTdGFuZGFyZFRpbWV6b25lTmFtZSh0aW1lWm9uZSk7XHJcbiAgLy8gICByZXR1cm4gbW9tZW50KGRhdGUpLnR6KHRpbWVab25lKS5mb3JtYXQoZm9ybWF0KTtcclxuICAvLyB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5qCH5YeG5pe25Yy65ZCN56ewXHJcbiAgICogQHBhcmFtIHR6IOaXtuWMulxyXG4gICAqL1xyXG4gIC8vIHB1YmxpYyBzdGF0aWMgZ2V0U3RhbmRhcmRUaW1lem9uZU5hbWUodHo6IHN0cmluZykge1xyXG4gIC8vICAgbGV0IG1vbWVudFpvbmUgPSBtb21lbnQudHouem9uZSh0eik7XHJcbiAgLy8gICBsZXQgc3RhbmRhcmRUaW1lem9uZSA9IHR6O1xyXG4gIC8vICAgaWYgKCFtb21lbnRab25lKSB7XHJcbiAgLy8gICAgIGNvbnN0IHRpbWV6b25lID0gdGltZXpvbmVzLmZpbmQoKGl0ZW06IFRpbWV6b25lKSA9PiBpdGVtLnZhbHVlID09PSB0eiB8fCBpdGVtLnV0Yy5pbmNsdWRlcyh0eikpO1xyXG4gIC8vICAgICBzdGFuZGFyZFRpbWV6b25lID0gdGltZXpvbmUgJiYgdGltZXpvbmUudXRjWzBdIHx8IG51bGw7XHJcbiAgLy8gICB9XHJcbiAgLy8gICByZXR1cm4gc3RhbmRhcmRUaW1lem9uZTtcclxuICAvLyB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgem9uZWRUaW1lVG9TcGVjaWFsVGltZVpvbmVPZmZzZXRUaW1lU3RyaW5nKGRhdGU6IERhdGUgfCBzdHJpbmcgfCBudW1iZXIsIG9mZnNldDogbnVtYmVyID0gMCwgZm9ybWF0OiBzdHJpbmcgPSAnWVlZWS1NTS1ERCBISDptbTpzcy5TU1MnKSB7XHJcbiAgICBjb25zdCB1dGNUaW1lID0gbW9tZW50KGRhdGUpLnV0YygpO1xyXG4gICAgY29uc3Qgb2Zmc2V0TWludXRlcyA9IG9mZnNldCAqIDYwO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdXRjVGltZS5hZGQob2Zmc2V0TWludXRlcywgJ20nKTtcclxuICAgIHJldHVybiByZXN1bHQuZm9ybWF0KGZvcm1hdCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzdGF0aWMgdGltZVpvbmVPZmZzZXRUaW1lVG9VdGNUaW1lU3RyaW5nKGRhdGU6IERhdGUgfCBzdHJpbmcgfCBudW1iZXIsIG9mZnNldDogbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyA9ICdZWVlZLU1NLUREIEhIOm1tOnNzLlNTUycpIHtcclxuICAgIHJldHVybiBtb21lbnQoZGF0ZSkudXRjT2Zmc2V0KG9mZnNldCwgdHJ1ZSkudG9JU09TdHJpbmcoKTtcclxuICB9XHJcbn0iXX0=