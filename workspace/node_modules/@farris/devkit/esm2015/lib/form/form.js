// tslint:disable: max-line-length
import { Injectable } from '@angular/core';
import { filter, takeUntil } from 'rxjs/operators';
import { FormControl, FormGroup } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { MetadataUtil, PROP_METADATA } from '../metadata/index';
import { ChangeType } from '../binding-data/index';
import { NG_FORM_CONTROL, NG_CHILD_FORM, NG_VALIDATE_FORM } from './decorators';
import { DateUtil } from '../utils/index';
import { ValidationTypes } from '../entity/validator/validation_types';
import { ValidationExecutor } from '../entity/validator/validation_executor';
import * as ValidatorJS from 'validator';
import { DataTypeInfo, RunMode } from '../core';
import { TranslateService } from '../i18n/translate_service';
import { Subject } from 'rxjs';
import { parseISO } from 'date-fns';
/**
 * 表单定义
 */
class Form extends FormGroup {
    /**
     * 构造函数
     */
    constructor() {
        super({}, null, null);
        this.raisedByValidateEffector = false;
        this.isShowValidationMsg = false;
        this.validatorJs = ValidatorJS.default;
        this.controlIdMap = {};
        this.cardControls = {};
        this.isShowPropMap = {};
        this.destroy$ = new Subject();
        // this.excludeRuleTypes = {};
    }
    /**
     * 名称
     */
    get formGroupName() {
        return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';
    }
    /**
     * 是否启用表单验证
     */
    get enableValidate() {
        return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;
    }
    get translateService() {
        return this.translate;
    }
    ngOnDestroy() {
        this.dispose();
    }
    dispose(options) {
        if (this.destroy$) {
            this.destroy$.next();
            this.destroy$.complete();
            this.destroy$ = null;
        }
        Form.insMap[this.constructor.name] = null;
        this.frameContext = null;
        this.bindingData = null;
        this.ngChildForms = null;
        this.metaDatas = null;
        this.ngFormControls = {};
        this.controls = {};
        this.disposeValidation();
    }
    /**
     * 将formControl的错误信息更新到cardControl上
     */
    static updateErrors(propertyName, errorObj, id, value, isGrid) {
        Object.keys(Form.insMap).forEach(key => {
            const form = Form.insMap[key];
            if (!form) {
                return;
            }
            if (id) {
                form.setControlValue(propertyName, value);
            }
            if (form.enableValidate) {
                form.isFormValid(propertyName, errorObj, id, isGrid);
            }
        });
    }
    /**
     * 设置dom属性为显示状态
     * @param domPropertyName dom属性
     */
    setIsShowmap(domPropertyName) {
        this.isShowPropMap[domPropertyName] = true;
    }
    setShowValidationMsg(flag) {
        this.raisedByValidateEffector = false;
        this.isShowValidationMsg = flag;
    }
    setControlValue(key, value) {
        const bindingObject = this.bindingData && this.bindingData.getObject() || null;
        if (bindingObject && bindingObject.controlMap) {
            bindingObject.controlMap[key] = this.getGridItemControl(key, value);
        }
    }
    /**
     * 根据dom属性名称获取错误信息
     * @param domPropertyName dom属性名称
     */
    getCardControlErrors(domPropertyName) {
        this.setIsShowmap(domPropertyName);
        return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
    }
    /**
     * 获取字段校验错误
     * @param domPropertyName
     * @returns
     */
    getFormControlErrors(domPropertyName) {
        return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
    }
    getGridControlErrors(domPropertyName, id) {
        this.setIsShowmap(domPropertyName);
        return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];
    }
    isFormValid(propertyName, errorObj, id, isGrid) {
        let prefix = '';
        // 如果校验信息是由表达式触发的，不处理
        if (this.raisedByValidateEffector) {
            return;
        }
        const isGridComponent = this.frameContext.frameComponent.isGridComponent;
        if (isGridComponent !== undefined) {
            isGrid = isGridComponent;
        }
        //拼接子表frontNodeCode
        const bindingPaths = this.bindingPath.split('/').filter(p => p);
        if (bindingPaths.length > 0) {
            prefix = bindingPaths.join('.').concat('.');
        }
        // 界面上绑定的字段名
        const domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);
        // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件
        if (propertyName && !domPropertyName) {
            return true;
        }
        // 若界面上不存在当前属性（动态列），不进行验证
        if (domPropertyName && !this.isShowPropMap[domPropertyName]) {
            return true;
        }
        let isValid = true;
        const bindingObject = this.bindingData.getObject();
        const currentId = bindingObject.primaryKeyValue;
        const isSubForm = this.bindingPath !== '/';
        const bindingList = this.bindingData.getList();
        // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况
        if (isSubForm && bindingList.innerList.size === 0) {
            return true;
        }
        // 无数据时不做校验
        if (!currentId) {
            return true;
        }
        // dataGrid修改时，根据id，创建formControl，并设置错误对象
        if (id && domPropertyName) {
            // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {
            //   this.controlIdMap[id] = {};
            // }
            this.controlIdMap[id] = this.controlIdMap[id] || {};
            this.controlIdMap[id][domPropertyName] = {
                errors: errorObj
            };
        }
        // 将grid的FormControl同步到界面展示用的controlIDMap中
        // const currentBindingObject = bindingList.currentItem as BindingObject;
        const currentBindingObject = bindingObject;
        if (id && id !== currentId) {
            return;
        }
        // 验证全部字段时，清空已有的错误信息
        if (!propertyName && !id) {
            currentBindingObject.controlMap = {};
            this.controlIdMap = {};
            this.cardControls = {};
        }
        Object.keys(this.controls).forEach((key) => {
            if (this.isShowPropMap[key] !== true) {
                return;
            }
            // 同步实体错误信息
            if (key === domPropertyName) {
                // 实体验证的信息直接赋值
                if (errorObj && Object.keys(errorObj).length > 0) {
                    // 卡片的错误
                    if (!isGrid) {
                        // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息
                        // 遍历错误，将validator返回的错误信息国际化
                        Object.keys(errorObj).map((validType) => {
                            const validationError = errorObj[validType] && errorObj[validType]['error'] || null;
                            if (validationError) {
                                const validateRule = validationError.rule;
                                const ngFormControl = this.getngFormControlByBinding(validateRule.field);
                                if (ngFormControl) {
                                    validateRule.property = ngFormControl.name || ngFormControl.defaultI18nValue;
                                    validateRule.targetId = ngFormControl.id;
                                    validateRule.targetName = this.formGroupName;
                                    // 修正校验必填表达式类型和多语资源中key不一致的问题
                                    const fixedValidType = validType === 'require' ? 'required' : validType;
                                    const messageTemplate = ValidationTypes.getMessage(fixedValidType);
                                    if (messageTemplate) {
                                        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);
                                        errorObj[validType]['name'] = invalidMessage;
                                    }
                                }
                                // todo: ngFormControl暂时不设置
                                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);
                            }
                        });
                        this.cardControls[key] = {
                            errors: errorObj
                        };
                    }
                }
                else {
                    this.cardControls[key] = {};
                }
            }
            if (this.controls[key] && this.controls[key].errors && Object.keys(this.controls[key].errors).length > 0) {
                // 将错误同步到界面展示的位置
                // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息
                this.cardControls[key] = {
                    errors: Object.assign({}, this.cardControls[key] && this.cardControls[key].errors, this.controls[key].errors)
                };
                isValid = false;
            }
        });
        // 处理只开启前端校验，未在BE上启用必填校验的情况
        if (this.cardControls) {
            Object.keys(this.cardControls).forEach(key => {
                if (this.cardControls[key] && this.cardControls[key].errors) {
                    Object.keys(this.cardControls[key].errors).forEach(validType => {
                        if (typeof this.cardControls[key].errors[validType] !== 'object') {
                            // 获取对应的校验信息
                            const validateRules = this.ngFormControls[key].validRules || [];
                            const rules = [].concat(validateRules);
                            const validateRule = rules.find(item => item.type === validType);
                            if (validateRule) {
                                validateRule.targetName = this.formGroupName;
                                const messageTemplate = ValidationTypes.getMessage(validType);
                                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');
                                this.cardControls[key].errors[key] = { value: this.controls[key] && this.controls[key].value || '', name: invalidMessage };
                            }
                        }
                    });
                }
            });
        }
        Object.keys(this.cardControls).forEach((key) => {
            if (this.cardControls[key] && this.cardControls[key].errors && Object.keys(this.cardControls[key].errors).length > 0) {
                isValid = false;
            }
        });
        return isValid;
    }
    /**
     * 更新表单错误信息
     * @param errors 错误消息
     */
    updateFormErrors(errors, forceShow = false, from = '') {
        if (from && from === 'backend') {
            this.clearBackendError();
        }
        // 原来是否已经显示错误，如果已经显示了则增加，否则替换
        if (this.isShowValidationMsg === true || forceShow === true) {
            this.isShowValidationMsg = true;
            Object.keys(errors).forEach((key) => {
                if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {
                    // 如果控件本身没有错误，则直接使用外部传递过来的错误，否则合并错误
                    this.cardControls[key] = {
                        errors: Object.assign({}, this.cardControls[key] && this.cardControls[key].errors, errors[key].errors)
                    };
                }
                else {
                    // 移除内存中的错误信息
                    this.cardControls[key] = {
                        errors: {}
                    };
                    // 重置控件错误信息
                    this.controls[key].setErrors(null);
                    this.controls[key].markAsTouched();
                }
            });
        }
    }
    /**
     * 清空后端消息
     */
    clearBackendError() {
        Object.keys(this.cardControls).forEach(key => {
            const errors = this.cardControls[key] && this.cardControls[key].errors || null;
            if (errors) {
                Object.keys(errors).forEach(errorType => {
                    if (errorType && errorType.startsWith('backend-message-')) {
                        delete errors[errorType];
                    }
                });
                if (errors && Object.keys(errors).length === 0) {
                    delete this.cardControls[key].errors;
                }
            }
            else {
                this.cardControls[key] = {};
            }
        });
    }
    /**
     * 根据实体属性获取ngFormControl
     * @param binding 控件绑定的实体属性名
     */
    getngFormControlByBinding(binding) {
        return Object.values(this.ngFormControls).find((ngFormControl) => ngFormControl.binding && ngFormControl.binding === binding);
    }
    disposeValidation() {
        const properties = this.constructor[PROP_METADATA];
        if (properties && Object.keys(properties).length > 0) {
            Object.keys(properties).forEach((key) => {
                const props = this.constructor[PROP_METADATA][key];
                if (props && props.length > 0) {
                    props.forEach((item) => {
                        if (item.validRules && Array.isArray(item.validRules) && item.validRules.length > 0) {
                            item.validRules = item.validRules.filter(item => !(item.eval && typeof (item.eval) === 'function'));
                        }
                    });
                }
            });
        }
    }
    /**
     * 根据dom属性和校验类型获取错误信息
     * @param domProperty dom属性
     * @param validateRuleType 校验类型
     */
    getErrorMessage(domProperty, validateRuleType) {
        const formControl = this.ngFormControls[domProperty];
        if (formControl) {
            const validRules = formControl.validRules;
            const rules = [];
            if (!Array.isArray(validRules)) {
                rules.push(validRules);
            }
            else {
                rules.push(...validRules);
            }
            const rule = rules.find(item => item.type === validateRuleType);
            if (rule) {
                const controlName = formControl.name;
                const messageTemplate = ValidationTypes.getMessage(validateRuleType);
                const message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);
                return message;
            }
            return null;
        }
        return null;
    }
    /**
     * 初始化Form
     * @param context 上下文
     */
    init(bindingData, bindingPath, frameContext) {
        this.frameContext = frameContext;
        this.bindingData = bindingData;
        this.bindingPath = bindingPath;
        // 校验信息变化时重置卡片校验信息
        if (this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.verifycationChanged) {
            this.frameContext.viewModel.verifycationChanged.subscribe((verifycations) => {
                if (!verifycations || verifycations.length < 1) {
                    this.resetCardValidMsg();
                }
            });
        }
        this.buildForm();
        // @todo: 这种方式做key，如果脚本被压缩，存在风险
        Form.insMap[this.constructor.name] = this;
    }
    /**
     * 构造表单
     */
    buildForm() {
        this.collectMetadatas();
        // this.createChildFormArrays();
        this.createChildForms();
        this.createControls();
    }
    /**
     * 重置表单验证信息
     */
    resetCardValidMsg() {
        this.cardControls = {};
        // 剔除 列表中新增后取消,删除的项对应的control信息
        Object.keys(this.controlIdMap).forEach(id => {
            if (!this.bindingData.getList().innerList.map(x => x.id).includes(id)) {
                delete this.controlIdMap[id];
            }
        });
        this.resetFormControls();
        this.setShowValidationMsg(false);
    }
    /**
     * 更新字段校验规则
     * @param propertyName 属性名
     * @param isRequired 是否必填
     */
    updateFieldValidateRule(propertyName, isRequired) {
        if (!propertyName) {
            return;
        }
        const formControl = this.controls[propertyName];
        // 清空全部校验条件
        if (formControl) {
            formControl.clearValidators();
            formControl.markAsUntouched();
            formControl.markAsPristine();
            formControl.setErrors([]);
        }
        // 动态必填场景时生成器不再在formControl上生成必填规则
        // 因此validRules可能为空
        const ngFormControl = this.ngFormControls[propertyName];
        let validateRules = ngFormControl && ngFormControl.validRules || [];
        if (!Array.isArray(validateRules)) {
            validateRules = [validateRules];
        }
        const requiredRuleIndex = validateRules.findIndex((validateRule) => validateRule.type === ValidationTypes.REQUIRED);
        if (isRequired) {
            // 必填但控件没有必填规则，添加必填规则
            if (requiredRuleIndex == -1) {
                const validateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };
                // 扩展属性，以生成正确的错误提示
                const displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';
                validateRule.targetId = ngFormControl && ngFormControl.id || null;
                validateRule.targetName = this.formGroupName;
                validateRule.property = displayFieldName;
                validateRule.field = ngFormControl && ngFormControl.binding;
                validateRules.push(validateRule);
            }
        }
        else {
            // 非必填场景，如果有必填规则，移除
            if (requiredRuleIndex !== -1) {
                validateRules.splice(requiredRuleIndex, 1);
            }
        }
        // 整理校验规则
        const validators = [];
        Array.prototype.forEach.call(validateRules, ((ruleObj) => {
            const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);
            if (validateFn) {
                validators.push(validateFn);
            }
        }));
        this.ngFormControls[propertyName].validRules = validateRules;
        this.controls[propertyName].setValidators(validators);
    }
    addFieldValidateRule(propertyName, message, expressionId, ruleType) {
        const formControl = this.controls[propertyName];
        if (formControl) {
            // 清空全部校验条件
            formControl.setErrors(null);
        }
        const ngFormControl = this.ngFormControls[propertyName];
        let validateRules = this.ngFormControls[propertyName].validRules;
        if (!validateRules) {
            validateRules = [];
        }
        if (!Array.isArray(validateRules)) {
            validateRules = [validateRules];
        }
        const index = validateRules.findIndex((rule) => rule && rule.expressionId === expressionId);
        if (index !== -1) {
            validateRules.splice(index, 1);
        }
        const bindingPath = this.frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        let fieldName = propertyName;
        if (bindingPaths.length !== 0) {
            const prefix = bindingPaths.join('/');
            const binding = ngFormControl.binding || '';
            const property = binding.split('.').join('/');
            fieldName = `${prefix}/${property}`;
        }
        const context = this.frameContext;
        const validateRule = {
            type: ruleType,
            message: message,
            expressionId: expressionId,
            constraints: [],
            bindingPath: bindingPaths.join('/'),
            eval: function (options) {
                return context.viewModel.expression.validate(expressionId, options);
            }
        };
        validateRules.push(validateRule);
        this.ngFormControls[propertyName].validRules = validateRules;
        // if (this.ngFormControls[propertyName] && validateRules.length > 0) {
        //   const validators: ValidatorFn[] = [];
        //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {
        //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);
        //     if (validateFn) {
        //       validators.push(validateFn);
        //     }
        //   }));
        //   this.controls[propertyName].setValidators(validators);
        // }
    }
    /**
     * 根据规则对象生成validator
     * @param ruleObj: ValidateRule
     */
    getValidatorByRuleObj(ruleObj, ngFormControl) {
        const { type, constraints = [], message = null } = ruleObj;
        const displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';
        const ruleHandlerObj = {
            required: (control) => {
                const value = control.value;
                let isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';
                const parentPaths = this.bindingPath.split('/').filter(p => p);
                const controlPaths = ngFormControl.binding.split('.');
                const paths = parentPaths.concat(controlPaths);
                const propInfo = this.getPropInfoByPath(paths);
                const isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;
                if (isMultiLangInput) {
                    const currentLanguage = TranslateService.getCurrentLanguage();
                    const currentLangValue = value && value[currentLanguage];
                    isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';
                }
                const messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);
                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                if (isValid && control.errors && control.errors.required) {
                    // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题
                    delete control.errors.required;
                    this.isFormValid(paths.join('.'));
                }
                return isValid ? null : { required: { value: control.value, name: invalidMessage } };
            },
            maxLength: (control) => {
                const isInValid = control.value && control.value.toString().length > constraints[0];
                const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;
            },
            minLength: (control) => {
                const isInValid = control.value && control.value.toString().length < constraints[0];
                const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;
            },
            minValue: (control) => {
                let isInValid = false;
                let invalidMessage = '';
                // 这里只做最小值判断，如果用户未输入则不应该做判断
                if (control.value === null || control.value === undefined) {
                    return null;
                }
                if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                    isInValid = control.value < constraints[0];
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;
                }
                else if (ngFormControl && ngFormControl.bigNumber === true) {
                    // 大数
                    const minValue = new BigNumber(constraints[0]);
                    const value = new BigNumber(control.value);
                    isInValid = minValue.isGreaterThan(value);
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                else {
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);
                    // 假定为日期
                    // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或""，则不对比大小，无意义
                    if (!constraints || constraints.length < 1 || !constraints[0]) {
                        return null;
                    }
                    if (control.value instanceof Date) {
                        isInValid = control.value < parseISO(constraints[0]);
                    }
                    else {
                        isInValid = parseISO(control.value) < parseISO(constraints[0]);
                    }
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;
            },
            maxValue: (control) => {
                let isInValid = false;
                let invalidMessage = '';
                if (control.value === null || control.value === undefined) {
                    return null;
                }
                if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                    isInValid = control.value > constraints[0];
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;
                }
                else if (ngFormControl && ngFormControl.bigNumber === true) {
                    // 大数
                    const maxValue = new BigNumber(constraints[0]);
                    const value = new BigNumber(control.value);
                    isInValid = maxValue.isLessThan(value);
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                else {
                    // 假定为日期
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);
                    if (control.value instanceof Date) {
                        isInValid = control.value > new Date(constraints[0]);
                        // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;
                    }
                    else {
                        isInValid = new Date(control.value) > new Date(constraints[0]);
                        // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;
                    }
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;
            },
            exclude: (control) => {
                const isValid = typeof control.value === 'string' && !this.validatorJs.contains(control.value, constraints[0]);
                const messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);
                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };
            },
            matches: (control) => {
                const value = (control.value === null || control.value === undefined) ? '' : control.value.toString();
                const isValid = value === '' ? true : this.validatorJs.matches(value, constraints[0]);
                let invalidMessage = message;
                if (!invalidMessage) {
                    const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isValid ? null : { matches: { value: control.value, name: invalidMessage } };
            }
        };
        return ruleHandlerObj[type];
    }
    /**
     * 搜集属性装饰器
     */
    collectMetadatas() {
        this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :
            MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM, this.translateService, ['formGroupName']);
        this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);
        this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);
    }
    collectionFormControlMetadats(preloadMetadata = null) {
        const metadatas = preloadMetadata ? MetadataUtil.translateMetadatasByName(preloadMetadata, this.translateService, ['name']) :
            MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);
        // 向验证规则中附加表单信息，用于显示验证提示。
        if (metadatas) {
            Object.keys(metadatas).forEach((propName) => {
                const ngFormControl = metadatas[propName];
                const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';
                const formControlId = ngFormControl.id;
                if (Array.isArray(ngFormControl.validRules)) {
                    ngFormControl.validRules.forEach((validationRule) => {
                        validationRule.targetId = formControlId;
                        validationRule.targetName = this.formGroupName;
                        validationRule.property = displayFieldName;
                        validationRule.field = ngFormControl.binding;
                    });
                }
            });
        }
        return metadatas;
    }
    // 获取grid中每条数据的formControl
    getGridItemControl(propName, value) {
        const createControlFromRules = propertyName => {
            const validators = [];
            // 设置form中定义的验证规则
            if (this.ngFormControls[propertyName] && Array.isArray(this.ngFormControls[propertyName].validRules)) {
                Array.prototype.forEach.call(this.ngFormControls[propertyName].validRules, ((ruleObj) => {
                    const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);
                    if (validateFn) {
                        validators.push(validateFn);
                    }
                }));
            }
            return new FormControl(value, { validators: validators, updateOn: 'blur' });
        };
        return createControlFromRules(propName);
    }
    // 根据实体属性名获取界面绑定的属性名
    getDomPropertyNameByEntityProp(propertyName, prefix = '') {
        let domPropertyName = '';
        Object.keys(this.ngFormControls).forEach(key => {
            const binding = `${prefix}${this.ngFormControls[key].binding}`;
            if (binding === propertyName) {
                domPropertyName = key;
            }
        });
        return domPropertyName;
    }
    /**
     * 创建FormControl
     */
    createControls() {
        Object.keys(this.ngFormControls).forEach((propName) => {
            const ngFormControl = this.ngFormControls[propName];
            const validators = [];
            // 设置form中定义的验证规则
            if (Array.isArray(this.ngFormControls[propName].validRules)) {
                Array.prototype.forEach.call(this.ngFormControls[propName].validRules, (ruleObj => {
                    const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propName]);
                    if (validateFn) {
                        validators.push(validateFn);
                    }
                }));
            }
            const updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';
            const control = new FormControl(null, { validators: validators, updateOn: updateOn });
            if (ngFormControl.binding) {
                this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);
            }
            this.controls[propName] = control;
            this[propName] = control;
        });
    }
    /**
     * 创建FormGroup
     */
    createChildForms() {
        Object.keys(this.ngChildForms).forEach((propName) => {
            const ngFormGroup = this.ngChildForms[propName];
            // 构造子Form
            const formGroup = new ngFormGroup.formType();
            formGroup.init(this.bindingData, this.bindingPath, this.frameContext);
            this.controls[propName] = formGroup;
            this[propName] = formGroup;
        });
    }
    /*
    * 新增FormControls
     */
    addControls(column, converter) {
        const updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';
        const formControl = new FormControl('', { updateOn: updateOn });
        const fieldPath = column.dataField;
        // 日期格式  需要格式化
        // this.setUpBindingDataPipeline(formControl, fieldPath, converter);
        if (column.editor && column.editor.binding) {
            this.setUpBindingDataPipeline(formControl, fieldPath, converter);
            this.controls[column.editor.binding.path] = formControl;
            this[column.editor.binding.path] = formControl;
        }
    }
    /**
     * 搭建control和table之间的通道
     * @param control 控件
     * @param bindingFieldPath 绑定的字段名
     */
    setUpBindingDataPipeline(control, bindingFieldPath, converter) {
        if (!this.bindingData) {
            throw Error('当前组件上下文中找不到BindingData，请检查！');
        }
        // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息
        // __FRAME_CONTEXT__ 未使用
        /*if (converter) {
          converter['__FRAME_CONTEXT__'] = this.frameContext;
        }*/
        // 将bindignPath与bindingFieldPath合并
        if (this.bindingPath.length > 1) {
            bindingFieldPath = this.bindingPath.substr(1).replace(/\//g, '.') + '.' + bindingFieldPath;
        }
        const bindingPaths = bindingFieldPath.split('.');
        const propertyName = bindingPaths[bindingPaths.length - 1];
        // 设置初始值
        const initValue = this.getValueFromBindingData(bindingPaths, converter);
        control.setValue(initValue);
        // 设置初始值
        // BindingData => control
        this.bindingData.changes.pipe(takeUntil(this.destroy$)).pipe(filter((change) => {
            const bindingObject = this.bindingData.getObject();
            const changePath = change.path.join('.');
            if (change.isUdt) {
                return changePath === bindingFieldPath;
            }
            if (change.type === ChangeType.ValueChanged) {
                // path完全匹配
                return changePath === bindingFieldPath;
            }
            else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {
                // 对于ObjectChanged、SelectionChanged，匹配到父级
                const changePathWithDot = changePath === '' ? changePath : changePath + '.';
                // 主表新增或切换时，重置错误信息
                if (change && change.type === ChangeType.Load) {
                    this.resetCardValidMsg();
                }
                return bindingFieldPath.indexOf(changePathWithDot) === 0;
            }
            else if (change.type === ChangeType.UpdateErrors) {
                if (changePath === bindingFieldPath) {
                    this.cardControls[propertyName] = this.cardControls[propertyName] || {};
                    if (bindingFieldPath && this.controls[propertyName]) {
                        if (bindingObject.primaryKeyValue === change.id) {
                            this.cardControls[propertyName].errors = change.errors;
                        }
                        else {
                            // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面
                            // this.cardControls[propertyName].errors = null;
                            // this.isFormValid(bindingFieldPath);
                        }
                    }
                    // 没有错误时
                    if (!change.path || !bindingFieldPath || !change.errors) {
                        this.cardControls[propertyName].errors = null;
                        this.isFormValid(bindingFieldPath);
                    }
                    return false;
                }
            }
            else {
                return false;
            }
        })).subscribe((change) => {
            let fullEntityProp = propertyName;
            // udt字段展示时需要将父级属性名和自身属性名用'_'连接
            let pathPrefix = '';
            if (change.isUdt) {
                if (change.isGrid) {
                    // grid 将从表主字段去除
                    change.path.shift();
                }
                if (change.path.length) {
                    pathPrefix = change.path.join('.');
                }
                fullEntityProp = pathPrefix;
            }
            const value = this.bindingData.getValue(bindingPaths, false);
            const newControlValue = converter ? converter.convertFrom(value) : value;
            // 设置FormControl
            const domPropName = this.getDomPropertyNameByEntityProp(fullEntityProp);
            this.cardControls[domPropName] = this.cardControls[domPropName] || {};
            if (change.errors) {
                this.cardControls[domPropName].errors = change.errors;
            }
            // dataGrid保存时，根据id，创建formControl，并设置错误对象
            if (change.id) {
                if (this.controlIdMap[change.id] && Object.keys(this.controlIdMap[change.id]).length === 0) {
                    this.controlIdMap[change.id] = {};
                }
                this.controlIdMap[change.id] = this.controlIdMap[change.id] || {};
                if (change.errors) {
                    this.controlIdMap[change.id][domPropName] = {
                        errors: change.errors
                    };
                }
            }
            // 如果和控件上的值一样，则不再更新控件的值
            if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {
                return;
            }
            // 正则判断是否为日期
            control.setValue(newControlValue);
        });
        // control => BindingData
        control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value) => {
            const oldBindingValue = this.bindingData.getValue(bindingPaths);
            // 如果是日期，比较年月日是否相等，相等则不重新赋值
            if (value && value.constructor && value.constructor.name === 'Date') {
                const isValidDate = !isNaN(value);
                if (!isValidDate) {
                    return;
                }
                if (oldBindingValue && converter) {
                    const oldValue = converter.convertFrom(oldBindingValue);
                    if (this.compareDate(value, oldValue) === true) {
                        return;
                    }
                }
            }
            // 如果是日期，比较年月日是否相等，相等则不重新赋值
            if (this.isDate(converter) === true) {
                if (DateUtil.isEqual(value, oldBindingValue) === true) {
                    return;
                }
            }
            // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData
            const newBindingValue = converter ? converter.convertTo(value) : value;
            if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {
                return;
            }
            // if (!this.isFormValid(propertyName, null, null, false)) {
            //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};
            //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);
            // } else {
            this.clearBackEndMessages(propertyName);
            const emitEventToView = this.frameContext.appContext.runMode === RunMode.highSpeed;
            this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: this.frameContext });
            //}
        });
    }
    /**
     * 判断是否是日期字段
     * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；
     * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；
     * 3、不能使用constructor.name,压缩后name变了；
     * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况
     * @todo
     * 为日期字段添加注解，根据注解来判断
     */
    isDate(converter) {
        let isDateConverter = false;
        // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {
        //   isDateConverter = true;
        // }
        if (converter && converter.hasOwnProperty('format') === true) {
            isDateConverter = true;
        }
        return isDateConverter;
    }
    /**
     * 比较日期（只比较年月日）
     */
    compareDate(srcDate, dstDate) {
        if (!srcDate || !dstDate) {
            return srcDate === dstDate;
        }
        const isEqual = srcDate.getFullYear() === dstDate.getFullYear()
            && srcDate.getMonth() === dstDate.getMonth()
            && srcDate.getDate() === dstDate.getDate()
            && srcDate.getHours() === dstDate.getHours()
            && srcDate.getMinutes() === dstDate.getMinutes()
            && srcDate.getSeconds() === dstDate.getSeconds();
        return isEqual;
    }
    getPropInfoByPath(path) {
        const entityType = this.frameContext && this.frameContext.repository.entityType || null;
        if (entityType) {
            const dataTypeInfo = new DataTypeInfo(entityType);
            const propInfo = dataTypeInfo.getPropInfoByPath(path);
            return propInfo;
            // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;
        }
        return null;
    }
    /**
     * 从BindingData中获取指定路径的值
     */
    getValueFromBindingData(bindingPaths, converter) {
        const value = this.bindingData.getValue(bindingPaths);
        const converteredValue = converter ? converter.convertFrom(value) : value;
        return converteredValue;
    }
    getEntityValueChangingListeners() {
        const listeners = {};
        Object.keys(this.ngFormControls).forEach((propName) => {
            const ngFormControl = this.ngFormControls[propName];
            if (ngFormControl.valueChanging) {
                listeners[ngFormControl.binding] = ngFormControl.valueChanging;
            }
        });
        return listeners;
    }
    getEntityValueChangedListeners() {
        const listeners = {};
        Object.keys(this.ngFormControls).forEach((propName) => {
            const ngFormControl = this.ngFormControls[propName];
            if (ngFormControl.valueChanged) {
                listeners[ngFormControl.binding] = ngFormControl.valueChanged;
            }
        });
        return listeners;
    }
    /**
     * 获取所有的前端验证规则
     * @description
     * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔
     */
    getValidationRules() {
        const validatoinRules = new Map();
        let parentPath = this.bindingPath;
        if (parentPath.length && parentPath === '/') {
            parentPath = '';
        }
        Object.keys(this.ngFormControls).forEach((propName) => {
            // const fieldName = `${parentPath}/${propName}`;
            if (this.isShowPropMap[propName] === true || Object.keys(this.isShowPropMap).length === 0) {
                const ngFormControl = this.ngFormControls[propName];
                const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';
                const bindingPathArray = ngFormControl.binding ? ngFormControl.binding.split('.') : [propName];
                const fieldNameArray = [parentPath, ...bindingPathArray];
                const fieldName = fieldNameArray.join('/');
                if (Array.isArray(ngFormControl.validRules) && ngFormControl.validRules.length > 0) {
                    let validationrulesToAdd = [...ngFormControl.validRules];
                    // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {
                    //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));
                    // }
                    validationrulesToAdd.forEach((validationRule) => {
                        validationRule.targetId = ngFormControl.id;
                        validationRule.targetName = this.formGroupName;
                        validationRule.property = displayFieldName;
                        validationRule.field = ngFormControl.binding;
                        validationRule.fullPath = fieldName;
                        if (this.frameContext) {
                            validationRule.frameContext = this.frameContext;
                        }
                    });
                    validatoinRules.set(fieldName, validationrulesToAdd);
                }
                else {
                    validatoinRules.set(fieldName, [{
                            type: 'setDisplayInfo',
                            targetId: ngFormControl.id,
                            targetName: this.formGroupName,
                            property: displayFieldName,
                            fullPath: fieldName,
                            frameContext: this.frameContext
                        }]);
                }
            }
        });
        return validatoinRules;
    }
    setTranslateService(translateService) {
        if (!translateService) {
            return;
        }
        this.translate = translateService;
        ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());
    }
    /**
     * 重置控件状态
     */
    resetFormControls() {
        if (Object.keys(this.controls).length > 0) {
            Object.keys(this.controls).forEach((prop) => {
                const formControl = this.controls[prop];
                formControl.markAsUntouched();
                formControl.markAsPristine();
            });
        }
    }
    clearBackEndMessages(domPropertyName) {
        if (domPropertyName) {
            if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(item => item.startsWith('message-'))) {
                const messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(item => item.startsWith('message-'));
                const errors = Object.assign({}, this.cardControls[domPropertyName]['errors']);
                messageKeys.forEach(key => delete errors[key]);
                this.cardControls[domPropertyName] = { errors: errors };
            }
        }
        else {
            Object.keys(this.cardControls).forEach(propertyName => {
                if (this.cardControls[propertyName] && this.cardControls[propertyName]['errors'] && !!Object.keys(this.cardControls[propertyName]['errors']).find(item => item.startsWith('message-'))) {
                    const messageKeys = Object.keys(this.cardControls[propertyName]['errors']).filter(item => item.startsWith('message-'));
                    const errors = Object.assign({}, this.cardControls[propertyName]['errors']);
                    messageKeys.forEach(key => delete errors[key]);
                    this.cardControls[propertyName] = { errors: errors };
                }
            });
        }
    }
}
/**
 * 存放所有实例的映射
 */
Form.insMap = {};
Form.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Form.ctorParameters = () => [];
export { Form };
//# sourceMappingURL=data:application/json;base64,