import { Injectable } from '@angular/core';
import { DataFilter } from './data_filter';
export class ObjectFilterConditionDataFilter extends DataFilter {
    constructor() {
        super();
    }
    filter(data, conditions) {
        if (data && data.size) {
            return data.filter((row) => this.validateRowData(row, conditions));
        }
        return data;
    }
    validateRowData(bindingObject, conditions) {
        if (!conditions || Object.keys(conditions).length === 0) {
            return true;
        }
        return this.checkAllFieldInRowData(bindingObject, conditions);
    }
    checkAllFieldInRowData(bindingObject, conditions) {
        let resultObj = null;
        const currentLanguage = this.getCurrentLanguage();
        if (conditions) {
            const fields = Object.keys(conditions);
            resultObj = {};
            fields.forEach((field) => {
                let fieldValue = this.getValue(bindingObject, field);
                const property = bindingObject.properties.find((item) => item.name === field);
                if (property && property.enableMultiLangInput && fieldValue) {
                    fieldValue = fieldValue[currentLanguage];
                }
                const where = conditions[field];
                const { value1, operator1, relation, operator2, value2 } = where;
                if (where) {
                    const result = this.getCompareResult(fieldValue, operator1, value1);
                    resultObj[field] = result;
                    if (relation) {
                        const result2 = this.getCompareResult(fieldValue, operator2, value2);
                        resultObj[field] = this.getRelationResult(result, relation, result2);
                    }
                }
            });
        }
        return this.checkAllFieldResult(resultObj);
    }
    getRelationResult(result1, relation, result2) {
        const _relation = relation.toLowerCase();
        if (_relation === 'and') {
            return result1 && result2;
        }
        else {
            return result1 || result2;
        }
    }
    checkAllFieldResult(resultObj) {
        if (!resultObj) {
            return true;
        }
        return Object.values(resultObj).reduce((c, n) => {
            return c && n;
        }, true);
    }
}
ObjectFilterConditionDataFilter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ObjectFilterConditionDataFilter.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0X2ZpbHRlcl9jb25kaXRpb25fZGF0YV9maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLWZpbHRlci9vYmplY3RfZmlsdGVyX2NvbmRpdGlvbl9kYXRhX2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNM0MsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFVBQVU7SUFDN0Q7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFDTSxNQUFNLENBQUMsSUFBeUIsRUFBRSxVQUFpQztRQUN4RSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUNwRTtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNNLGVBQWUsQ0FBQyxhQUE0QixFQUFFLFVBQWlDO1FBQ3BGLElBQUksQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUNPLHNCQUFzQixDQUFDLGFBQTRCLEVBQUUsVUFBaUM7UUFDNUYsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ2xELElBQUksVUFBVSxFQUFFO1lBQ2QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2QyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUN2QixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDckQsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUM7Z0JBQzlFLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsSUFBSSxVQUFVLEVBQUU7b0JBQzNELFVBQVUsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQzFDO2dCQUVELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2pFLElBQUksS0FBSyxFQUFFO29CQUNULE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUNwRSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDO29CQUMxQixJQUFJLFFBQVEsRUFBRTt3QkFDWixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQzt3QkFDckUsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO3FCQUN0RTtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ08saUJBQWlCLENBQUMsT0FBZ0IsRUFBRSxRQUFzQixFQUFFLE9BQWdCO1FBQ2xGLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6QyxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7WUFDdkIsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDO1NBQzNCO2FBQU07WUFDTCxPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBQ08sbUJBQW1CLENBQUMsU0FBcUM7UUFDL0QsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDWCxDQUFDOzs7WUEzREYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YUZpbHRlciB9IGZyb20gJy4vZGF0YV9maWx0ZXInO1xyXG5pbXBvcnQgeyBPYmplY3RGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XHJcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RmlsdGVyQ29uZGl0aW9uRGF0YUZpbHRlciBleHRlbmRzIERhdGFGaWx0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcbiAgcHVibGljIGZpbHRlcihkYXRhOiBMaXN0PEJpbmRpbmdPYmplY3Q+LCBjb25kaXRpb25zOiBPYmplY3RGaWx0ZXJDb25kaXRpb24pIHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEuc2l6ZSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5maWx0ZXIoKHJvdykgPT4gdGhpcy52YWxpZGF0ZVJvd0RhdGEocm93LCBjb25kaXRpb25zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbiAgcHVibGljIHZhbGlkYXRlUm93RGF0YShiaW5kaW5nT2JqZWN0OiBCaW5kaW5nT2JqZWN0LCBjb25kaXRpb25zOiBPYmplY3RGaWx0ZXJDb25kaXRpb24pIHtcclxuICAgIGlmICghY29uZGl0aW9ucyB8fCBPYmplY3Qua2V5cyhjb25kaXRpb25zKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5jaGVja0FsbEZpZWxkSW5Sb3dEYXRhKGJpbmRpbmdPYmplY3QsIGNvbmRpdGlvbnMpO1xyXG4gIH1cclxuICBwcml2YXRlIGNoZWNrQWxsRmllbGRJblJvd0RhdGEoYmluZGluZ09iamVjdDogQmluZGluZ09iamVjdCwgY29uZGl0aW9uczogT2JqZWN0RmlsdGVyQ29uZGl0aW9uKSB7XHJcbiAgICBsZXQgcmVzdWx0T2JqID0gbnVsbDtcclxuICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9IHRoaXMuZ2V0Q3VycmVudExhbmd1YWdlKCk7XHJcbiAgICBpZiAoY29uZGl0aW9ucykge1xyXG4gICAgICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyhjb25kaXRpb25zKTtcclxuICAgICAgcmVzdWx0T2JqID0ge307XHJcbiAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xyXG4gICAgICAgIGxldCBmaWVsZFZhbHVlID0gdGhpcy5nZXRWYWx1ZShiaW5kaW5nT2JqZWN0LCBmaWVsZCk7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSBiaW5kaW5nT2JqZWN0LnByb3BlcnRpZXMuZmluZCgoaXRlbSkgPT4gaXRlbS5uYW1lID09PSBmaWVsZCk7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmVuYWJsZU11bHRpTGFuZ0lucHV0ICYmIGZpZWxkVmFsdWUpIHtcclxuICAgICAgICAgIGZpZWxkVmFsdWUgPSBmaWVsZFZhbHVlW2N1cnJlbnRMYW5ndWFnZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB3aGVyZSA9IGNvbmRpdGlvbnNbZmllbGRdO1xyXG4gICAgICAgIGNvbnN0IHsgdmFsdWUxLCBvcGVyYXRvcjEsIHJlbGF0aW9uLCBvcGVyYXRvcjIsIHZhbHVlMiB9ID0gd2hlcmU7XHJcbiAgICAgICAgaWYgKHdoZXJlKSB7XHJcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldENvbXBhcmVSZXN1bHQoZmllbGRWYWx1ZSwgb3BlcmF0b3IxLCB2YWx1ZTEpO1xyXG4gICAgICAgICAgcmVzdWx0T2JqW2ZpZWxkXSA9IHJlc3VsdDtcclxuICAgICAgICAgIGlmIChyZWxhdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQyID0gdGhpcy5nZXRDb21wYXJlUmVzdWx0KGZpZWxkVmFsdWUsIG9wZXJhdG9yMiwgdmFsdWUyKTtcclxuICAgICAgICAgICAgcmVzdWx0T2JqW2ZpZWxkXSA9IHRoaXMuZ2V0UmVsYXRpb25SZXN1bHQocmVzdWx0LCByZWxhdGlvbiwgcmVzdWx0Mik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmNoZWNrQWxsRmllbGRSZXN1bHQocmVzdWx0T2JqKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRSZWxhdGlvblJlc3VsdChyZXN1bHQxOiBib29sZWFuLCByZWxhdGlvbjogJ2FuZCcgfCAnb3InLCByZXN1bHQyOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBfcmVsYXRpb24gPSByZWxhdGlvbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKF9yZWxhdGlvbiA9PT0gJ2FuZCcpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDEgJiYgcmVzdWx0MjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQxIHx8IHJlc3VsdDI7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgY2hlY2tBbGxGaWVsZFJlc3VsdChyZXN1bHRPYmo6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KSB7XHJcbiAgICBpZiAoIXJlc3VsdE9iaikge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdE9iaikucmVkdWNlKChjLCBuKSA9PiB7XHJcbiAgICAgIHJldHVybiBjICYmIG47XHJcbiAgICB9LCB0cnVlKTtcclxuICB9XHJcbn1cclxuIl19