import { Injectable } from '@angular/core';
import { DataFilter } from './data_filter';
export class ArrayFilterConditionDataFilter extends DataFilter {
    constructor() {
        super();
    }
    filter(data, conditions) {
        if (data && data.size) {
            return data.filter((n) => this.validateRowData(n, conditions));
        }
        return data;
    }
    validateRowData(bindingObject, conditions) {
        if (!conditions || conditions.length === 0) {
            return true;
        }
        return this.checkRowDataWithCondition(bindingObject, conditions);
    }
    checkRowDataWithCondition(bindingObject, conditions) {
        let resultObj = null;
        if (conditions) {
            resultObj = {};
            conditions.forEach((condition) => {
                const field = condition.FilterField;
                let fieldValue = this.getValue(bindingObject, field);
                const bindingProperty = bindingObject.properties.find((item) => item.name === field);
                if (bindingProperty && bindingProperty.enableMultiLangInput && fieldValue) {
                    fieldValue = fieldValue[this.getCurrentLanguage()];
                }
                const where = condition;
                const { Value, Compare: operator1 } = where;
                if (where) {
                    const r = this.getCompareResult(fieldValue, operator1, Value);
                    if (resultObj[field] === undefined) {
                        resultObj[field] = [r];
                    }
                    else {
                        resultObj[field].push(r);
                    }
                }
            });
        }
        // return this.checkAllFieldResult(resultObj);
        const fields = Object.keys(resultObj);
        const result = [];
        fields.forEach((f) => {
            const _filters = conditions.filter((n) => n.FilterField === f);
            if (resultObj[f].length === 1) {
                result.push(resultObj[f][0]);
            }
            else {
                if (_filters[0].Relation === 1 && resultObj[f].length === 2) { // and
                    result.push(resultObj[f][0] && resultObj[f][1]);
                }
                else { // or
                    result.push(resultObj[f].indexOf(true) > -1);
                }
            }
        });
        return result.indexOf(false) === -1;
    }
}
ArrayFilterConditionDataFilter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ArrayFilterConditionDataFilter.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlfZmlsdGVyX2NvbmRpdGlvbl9kYXRhX2ZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2RhdGEtZmlsdGVyL2FycmF5X2ZpbHRlcl9jb25kaXRpb25fZGF0YV9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNDLE1BQU0sT0FBTyw4QkFBK0IsU0FBUSxVQUFVO0lBQzVEO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBQ00sTUFBTSxDQUFDLElBQXlCLEVBQUUsVUFBNkI7UUFDcEUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7U0FDaEU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTSxlQUFlLENBQUMsYUFBNEIsRUFBRSxVQUFlO1FBQ2xFLElBQUksQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ08seUJBQXlCLENBQUMsYUFBNEIsRUFBRSxVQUFVO1FBQ3hFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLFVBQVUsRUFBRTtZQUNkLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDZixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQy9CLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7Z0JBQ3BDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDckYsSUFBSSxlQUFlLElBQUksZUFBZSxDQUFDLG9CQUFvQixJQUFJLFVBQVUsRUFBRTtvQkFDekUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO2lCQUNwRDtnQkFDRCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUM7Z0JBQ3hCLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDNUMsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQzlELElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsRUFBRTt3QkFDbEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3hCO3lCQUFNO3dCQUNMLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQzFCO2lCQUNGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELDhDQUE4QztRQUM5QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDbkIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMvRCxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNO29CQUNuRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDakQ7cUJBQU0sRUFBRSxLQUFLO29CQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM5QzthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7O1lBekRGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFGaWx0ZXIgfSBmcm9tICcuL2RhdGFfZmlsdGVyJztcclxuaW1wb3J0IHsgRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xyXG5pbXBvcnQgeyBCaW5kaW5nT2JqZWN0IH0gZnJvbSAnLi4vYmluZGluZy1kYXRhJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFycmF5RmlsdGVyQ29uZGl0aW9uRGF0YUZpbHRlciBleHRlbmRzIERhdGFGaWx0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcbiAgcHVibGljIGZpbHRlcihkYXRhOiBMaXN0PEJpbmRpbmdPYmplY3Q+LCBjb25kaXRpb25zOiBGaWx0ZXJDb25kaXRpb25bXSkge1xyXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5zaXplKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmZpbHRlcigobikgPT4gdGhpcy52YWxpZGF0ZVJvd0RhdGEobiwgY29uZGl0aW9ucykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG4gIHB1YmxpYyB2YWxpZGF0ZVJvd0RhdGEoYmluZGluZ09iamVjdDogQmluZGluZ09iamVjdCwgY29uZGl0aW9uczogYW55KSB7XHJcbiAgICBpZiAoIWNvbmRpdGlvbnMgfHwgY29uZGl0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5jaGVja1Jvd0RhdGFXaXRoQ29uZGl0aW9uKGJpbmRpbmdPYmplY3QsIGNvbmRpdGlvbnMpO1xyXG4gIH1cclxuICBwcml2YXRlIGNoZWNrUm93RGF0YVdpdGhDb25kaXRpb24oYmluZGluZ09iamVjdDogQmluZGluZ09iamVjdCwgY29uZGl0aW9ucykge1xyXG4gICAgbGV0IHJlc3VsdE9iaiA9IG51bGw7XHJcbiAgICBpZiAoY29uZGl0aW9ucykge1xyXG4gICAgICByZXN1bHRPYmogPSB7fTtcclxuICAgICAgY29uZGl0aW9ucy5mb3JFYWNoKChjb25kaXRpb24pID0+IHtcclxuICAgICAgICBjb25zdCBmaWVsZCA9IGNvbmRpdGlvbi5GaWx0ZXJGaWVsZDtcclxuICAgICAgICBsZXQgZmllbGRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoYmluZGluZ09iamVjdCwgZmllbGQpO1xyXG4gICAgICAgIGNvbnN0IGJpbmRpbmdQcm9wZXJ0eSA9IGJpbmRpbmdPYmplY3QucHJvcGVydGllcy5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IGZpZWxkKTtcclxuICAgICAgICBpZiAoYmluZGluZ1Byb3BlcnR5ICYmIGJpbmRpbmdQcm9wZXJ0eS5lbmFibGVNdWx0aUxhbmdJbnB1dCAmJiBmaWVsZFZhbHVlKSB7XHJcbiAgICAgICAgICBmaWVsZFZhbHVlID0gZmllbGRWYWx1ZVt0aGlzLmdldEN1cnJlbnRMYW5ndWFnZSgpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgd2hlcmUgPSBjb25kaXRpb247XHJcbiAgICAgICAgY29uc3QgeyBWYWx1ZSwgQ29tcGFyZTogb3BlcmF0b3IxIH0gPSB3aGVyZTtcclxuICAgICAgICBpZiAod2hlcmUpIHtcclxuICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLmdldENvbXBhcmVSZXN1bHQoZmllbGRWYWx1ZSwgb3BlcmF0b3IxLCBWYWx1ZSk7XHJcbiAgICAgICAgICBpZiAocmVzdWx0T2JqW2ZpZWxkXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdE9ialtmaWVsZF0gPSBbcl07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHRPYmpbZmllbGRdLnB1c2gocik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIHJldHVybiB0aGlzLmNoZWNrQWxsRmllbGRSZXN1bHQocmVzdWx0T2JqKTtcclxuICAgIGNvbnN0IGZpZWxkcyA9IE9iamVjdC5rZXlzKHJlc3VsdE9iaik7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGZpZWxkcy5mb3JFYWNoKChmKSA9PiB7XHJcbiAgICAgIGNvbnN0IF9maWx0ZXJzID0gY29uZGl0aW9ucy5maWx0ZXIoKG4pID0+IG4uRmlsdGVyRmllbGQgPT09IGYpO1xyXG4gICAgICBpZiAocmVzdWx0T2JqW2ZdLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHJlc3VsdE9ialtmXVswXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKF9maWx0ZXJzWzBdLlJlbGF0aW9uID09PSAxICYmIHJlc3VsdE9ialtmXS5sZW5ndGggPT09IDIpIHsgLy8gYW5kXHJcbiAgICAgICAgICByZXN1bHQucHVzaChyZXN1bHRPYmpbZl1bMF0gJiYgcmVzdWx0T2JqW2ZdWzFdKTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBvclxyXG4gICAgICAgICAgcmVzdWx0LnB1c2gocmVzdWx0T2JqW2ZdLmluZGV4T2YodHJ1ZSkgPiAtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0LmluZGV4T2YoZmFsc2UpID09PSAtMTtcclxuICB9XHJcbn1cclxuIl19