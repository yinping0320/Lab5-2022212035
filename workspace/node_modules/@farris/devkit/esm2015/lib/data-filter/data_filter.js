import { Injectable } from '@angular/core';
import { Compare } from './types';
export class DataFilter {
    constructor() { }
    getCurrentLanguage() {
        return window.localStorage.getItem('languageCode') || 'zh-CHS';
    }
    getCompareResult(fieldDataValue, operator, targetValue) {
        const op = parseInt('' + operator, 10);
        switch (op) {
            case Compare.Equal:
                return fieldDataValue == targetValue;
            case Compare.NotEqual:
                return ('' + fieldDataValue).toLowerCase() !== ('' + targetValue).toLowerCase();
            case Compare.Greater:
                return fieldDataValue > targetValue;
            case Compare.GreaterOrEqual:
                return fieldDataValue >= targetValue;
            case Compare.Less:
                return fieldDataValue < targetValue;
            case Compare.LessOrEqual:
                return fieldDataValue <= targetValue;
            case Compare.Like:
                return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) > -1;
            case Compare.NotLike:
                return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) === -1;
            case Compare.In:
                targetValue = targetValue || [];
                return targetValue.findIndex((n) => n == fieldDataValue) > -1;
            case 1001: // Empty
                return fieldDataValue === '' || fieldDataValue === null;
            case 1002: // NotEmpty
                return fieldDataValue !== '' && fieldDataValue !== null;
            case 1003: // Null
                return fieldDataValue === null;
            case 1004: // NotNull
                return fieldDataValue !== null;
        }
    }
    getValue(object, propertyName) {
        return propertyName.split('.').filter(p => p).reduce((result, property) => {
            if (result) {
                return result[property] === undefined ? null : result[property];
            }
            else {
                return null;
            }
        }, object);
    }
}
DataFilter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataFilter.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLWZpbHRlci9kYXRhX2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQTBDLE1BQU0sU0FBUyxDQUFDO0FBSzFFLE1BQU0sT0FBZ0IsVUFBVTtJQUM5QixnQkFBZ0IsQ0FBQztJQUVQLGtCQUFrQjtRQUMxQixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLFFBQVEsQ0FBQztJQUNqRSxDQUFDO0lBQ00sZ0JBQWdCLENBQUMsY0FBbUIsRUFBRSxRQUFpQixFQUFFLFdBQWdCO1FBQzlFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLFFBQVEsRUFBRSxFQUFFO1lBQ1YsS0FBSyxPQUFPLENBQUMsS0FBSztnQkFDaEIsT0FBTyxjQUFjLElBQUksV0FBVyxDQUFDO1lBQ3ZDLEtBQUssT0FBTyxDQUFDLFFBQVE7Z0JBQ25CLE9BQU8sQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEYsS0FBSyxPQUFPLENBQUMsT0FBTztnQkFDbEIsT0FBTyxjQUFjLEdBQUcsV0FBVyxDQUFDO1lBQ3RDLEtBQUssT0FBTyxDQUFDLGNBQWM7Z0JBQ3pCLE9BQU8sY0FBYyxJQUFJLFdBQVcsQ0FBQztZQUN2QyxLQUFLLE9BQU8sQ0FBQyxJQUFJO2dCQUNmLE9BQU8sY0FBYyxHQUFHLFdBQVcsQ0FBQztZQUN0QyxLQUFLLE9BQU8sQ0FBQyxXQUFXO2dCQUN0QixPQUFPLGNBQWMsSUFBSSxXQUFXLENBQUM7WUFDdkMsS0FBSyxPQUFPLENBQUMsSUFBSTtnQkFDZixPQUFPLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNyRixLQUFLLE9BQU8sQ0FBQyxPQUFPO2dCQUNsQixPQUFPLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN2RixLQUFLLE9BQU8sQ0FBQyxFQUFFO2dCQUNiLFdBQVcsR0FBRyxXQUFXLElBQUksRUFBRSxDQUFDO2dCQUNoQyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNoRSxLQUFLLElBQUksRUFBRSxRQUFRO2dCQUNqQixPQUFPLGNBQWMsS0FBSyxFQUFFLElBQUksY0FBYyxLQUFLLElBQUksQ0FBQztZQUMxRCxLQUFLLElBQUksRUFBRSxXQUFXO2dCQUNwQixPQUFPLGNBQWMsS0FBSyxFQUFFLElBQUksY0FBYyxLQUFLLElBQUksQ0FBQztZQUMxRCxLQUFLLElBQUksRUFBRSxPQUFPO2dCQUNoQixPQUFPLGNBQWMsS0FBSyxJQUFJLENBQUM7WUFDakMsS0FBSyxJQUFJLEVBQUUsVUFBVTtnQkFDbkIsT0FBTyxjQUFjLEtBQUssSUFBSSxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUNNLFFBQVEsQ0FBQyxNQUFXLEVBQUUsWUFBb0I7UUFDL0MsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQVcsRUFBRSxRQUFnQixFQUFFLEVBQUU7WUFDckYsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqRTtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0gsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7O1lBL0NGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbXBhcmUsIEZpbHRlckNvbmRpdGlvbiwgT2JqZWN0RmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xyXG5pbXBvcnQgeyBCaW5kaW5nT2JqZWN0IH0gZnJvbSAnLi4vYmluZGluZy1kYXRhJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERhdGFGaWx0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgYWJzdHJhY3QgZmlsdGVyKGRhdGE6IExpc3Q8QmluZGluZ09iamVjdD4sIGNvbmRpdGlvbnM6IEFycmF5PEZpbHRlckNvbmRpdGlvbj4gfCBPYmplY3RGaWx0ZXJDb25kaXRpb24pO1xyXG4gIHByb3RlY3RlZCBnZXRDdXJyZW50TGFuZ3VhZ2UoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKSB8fCAnemgtQ0hTJztcclxuICB9XHJcbiAgcHVibGljIGdldENvbXBhcmVSZXN1bHQoZmllbGREYXRhVmFsdWU6IGFueSwgb3BlcmF0b3I6IENvbXBhcmUsIHRhcmdldFZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IG9wID0gcGFyc2VJbnQoJycgKyBvcGVyYXRvciwgMTApO1xyXG4gICAgc3dpdGNoIChvcCkge1xyXG4gICAgICBjYXNlIENvbXBhcmUuRXF1YWw6XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlID09IHRhcmdldFZhbHVlO1xyXG4gICAgICBjYXNlIENvbXBhcmUuTm90RXF1YWw6XHJcbiAgICAgICAgcmV0dXJuICgnJyArIGZpZWxkRGF0YVZhbHVlKS50b0xvd2VyQ2FzZSgpICE9PSAoJycgKyB0YXJnZXRWYWx1ZSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgY2FzZSBDb21wYXJlLkdyZWF0ZXI6XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlID4gdGFyZ2V0VmFsdWU7XHJcbiAgICAgIGNhc2UgQ29tcGFyZS5HcmVhdGVyT3JFcXVhbDpcclxuICAgICAgICByZXR1cm4gZmllbGREYXRhVmFsdWUgPj0gdGFyZ2V0VmFsdWU7XHJcbiAgICAgIGNhc2UgQ29tcGFyZS5MZXNzOlxyXG4gICAgICAgIHJldHVybiBmaWVsZERhdGFWYWx1ZSA8IHRhcmdldFZhbHVlO1xyXG4gICAgICBjYXNlIENvbXBhcmUuTGVzc09yRXF1YWw6XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlIDw9IHRhcmdldFZhbHVlO1xyXG4gICAgICBjYXNlIENvbXBhcmUuTGlrZTpcclxuICAgICAgICByZXR1cm4gKCcnICsgZmllbGREYXRhVmFsdWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0YXJnZXRWYWx1ZS50b0xvd2VyQ2FzZSgpKSA+IC0xO1xyXG4gICAgICBjYXNlIENvbXBhcmUuTm90TGlrZTpcclxuICAgICAgICByZXR1cm4gKCcnICsgZmllbGREYXRhVmFsdWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0YXJnZXRWYWx1ZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XHJcbiAgICAgIGNhc2UgQ29tcGFyZS5JbjpcclxuICAgICAgICB0YXJnZXRWYWx1ZSA9IHRhcmdldFZhbHVlIHx8IFtdO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRWYWx1ZS5maW5kSW5kZXgoKG4pID0+IG4gPT0gZmllbGREYXRhVmFsdWUpID4gLTE7XHJcbiAgICAgIGNhc2UgMTAwMTogLy8gRW1wdHlcclxuICAgICAgICByZXR1cm4gZmllbGREYXRhVmFsdWUgPT09ICcnIHx8IGZpZWxkRGF0YVZhbHVlID09PSBudWxsO1xyXG4gICAgICBjYXNlIDEwMDI6IC8vIE5vdEVtcHR5XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlICE9PSAnJyAmJiBmaWVsZERhdGFWYWx1ZSAhPT0gbnVsbDtcclxuICAgICAgY2FzZSAxMDAzOiAvLyBOdWxsXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlID09PSBudWxsO1xyXG4gICAgICBjYXNlIDEwMDQ6IC8vIE5vdE51bGxcclxuICAgICAgICByZXR1cm4gZmllbGREYXRhVmFsdWUgIT09IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXRWYWx1ZShvYmplY3Q6IGFueSwgcHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBwcm9wZXJ0eU5hbWUuc3BsaXQoJy4nKS5maWx0ZXIocCA9PiBwKS5yZWR1Y2UoKHJlc3VsdDogYW55LCBwcm9wZXJ0eTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0W3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHJlc3VsdFtwcm9wZXJ0eV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sIG9iamVjdCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==