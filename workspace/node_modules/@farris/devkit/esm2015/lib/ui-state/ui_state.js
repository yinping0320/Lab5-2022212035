/*
 * @Author: Witt
 * @Date: 2018-11-17 13:38:23
 * @Last Modified by: Witt
 * @Last Modified time: 2018-11-17 13:38:50
 * @todo：临时删除原有功能，待重构
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { UIStateMetadataUtil } from './uistate_metadata_util';
/**
 * UI状态
 */
export class UIState {
    constructor() {
        this.paramTypeTransform = false;
        this.changes = new Subject();
        this.innerData = Object.assign({});
        this._init();
    }
    _init() {
        const uiFields = UIStateMetadataUtil.getUIFields(this.constructor);
        this.initializeUIField(uiFields);
    }
    initialize(context) {
        const uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);
        this.initializeUIField(uiFields);
    }
    initializeUIField(uiFieldMetadata) {
        Object.keys(uiFieldMetadata).forEach(propertyName => {
            const fieldMetadata = uiFieldMetadata[propertyName];
            const uiField = fieldMetadata.stateName || propertyName;
            if (delete this[propertyName]) {
                this.defineProperty(propertyName, uiField);
            }
        });
    }
    isExistProperty(propertyName) {
        if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {
            return true;
        }
        return false;
    }
    defineProperty(propertyName, field = null) {
        Object.defineProperty(this, propertyName, {
            get: function () {
                return field !== null ? this.innerData[field] : this.innerData[propertyName];
            },
            set: function (value) {
                // 值相同时不触发变更
                const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];
                if (this.paramTypeTransform === true) {
                    const ngParams = UIStateMetadataUtil.getUIFields(this.constructor);
                    const ngParam = ngParams && ngParams[propertyName] || null;
                    const dataType = ngParam && ngParam.originalDataType || null;
                    if (dataType) {
                        value = this.transform(value, dataType);
                    }
                }
                if (oldValue === value) {
                    return;
                }
                if (field !== null) {
                    this.innerData[field] = value;
                }
                else {
                    this.innerData[propertyName] = value;
                }
                this.changes.next({
                    field: propertyName,
                    value: value
                });
            }
        });
    }
    setPropertyValue(propertyName, value) {
        if (propertyName === '' || propertyName === undefined) {
            return;
        }
        if (!this.isExistProperty(propertyName)) {
            this.defineProperty(propertyName);
        }
        this[propertyName] = value;
    }
    transform(target, dataType) {
        if (!dataType) {
            return target;
        }
        dataType = dataType.toLowerCase();
        if (dataType === 'string') {
            if (target === null || target === undefined) {
                return target;
            }
            return target.toString();
        }
        else if (dataType === 'number') {
            if (target === undefined) {
                return undefined;
            }
            const result = Number(target);
            if (isNaN(result)) {
                throw new Error(`${target}无法转换为数字！`);
            }
            return result;
        }
        else if (dataType === 'boolean') {
            if (typeof target === 'boolean') {
                return target;
            }
            else {
                if (target === null || target === undefined) {
                    return false;
                }
                target = target.toString().toLowerCase();
                if (target === 'false') {
                    return false;
                }
                else if (target === 'true') {
                    return true;
                }
                else {
                    throw new Error(`${target}无法转换为布尔类型！`);
                }
            }
        }
        else if (dataType === 'date' || dataType === 'datetime') {
            // 日期、日期时间在前端依然按照字符串处理
            return target;
        }
        else if (dataType === 'object') {
            if (typeof target === 'object') {
                return target;
            }
            else {
                try {
                    return JSON.parse(target);
                }
                catch (_a) {
                    throw new Error(`${target}无法转换为对象！`);
                }
            }
        }
        else {
            return target;
        }
    }
}
UIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UIState.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,