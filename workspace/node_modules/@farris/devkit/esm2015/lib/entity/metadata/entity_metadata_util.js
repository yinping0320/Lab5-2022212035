import { MetadataUtil } from '../../metadata/index';
import { NG_ENTITY } from './entity_decorator';
// import { NgProperty } from './ng_property';
// import { NG_FIELD,   NgFieldProperty   } from './ng_field';
// import { NG_OBJECT,  NgObjectProperty  } from './ng_object';
// import { NG_Dynamic, NgDynamicProperty } from './ng_dynamic';
// import { NG_LIST,    NgListProperty    } from './ng_list';
import { NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST } from './field_decorator';
/**
 * 实体元数据工具类
 */
export class EntityMetadataUtil {
    /**
     * 获取所有属性
     * @todo：封装根据基类获取所有元数据的方法，解决重复代码
     */
    static getAllNgProperties(entityType) {
        const ngPlainProperties = this.getNgFieldProperties(entityType);
        const ngEntityProperties = this.getNgObjectProperties(entityType);
        const ngDynamicProperties = this.getNgDynamicProperties(entityType);
        const ngEntityListProperties = this.getNgObjectProperties(entityType);
        return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
    }
    /**
     * 获取实体元数据描述
     */
    static getNgEntityMatadata(entityType) {
        return MetadataUtil.getClassMetadataByNameWithTranslate(entityType, NG_ENTITY);
    }
    /**
     * 获取NgField的属性元数据
     */
    static getNgFieldProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);
    }
    /**
     * 获取NgObject属性元数据
     */
    static getNgObjectProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);
    }
    /**
     * 获取NgDynamic属性元数据
     */
    static getNgDynamicProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);
    }
    /**
     * 获取NgList属性元数据
     */
    static getNgListProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);
    }
    /**
     * 获取主键属性元数据
     */
    static getPrimaryKeyProperty(entityType) {
        let primaryKeyProperty;
        const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
        Object.keys(ngPlainProperties).forEach((propName) => {
            const ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                primaryKeyProperty = ngProperty;
            }
        });
        return primaryKeyProperty;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X21ldGFkYXRhX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvbWV0YWRhdGEvZW50aXR5X21ldGFkYXRhX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELE9BQU8sRUFBWSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCw4Q0FBOEM7QUFDOUMsOERBQThEO0FBQzlELCtEQUErRDtBQUMvRCxnRUFBZ0U7QUFDaEUsNkRBQTZEO0FBQzdELE9BQU8sRUFDTyxRQUFRLEVBQW1CLFNBQVMsRUFDaEQsVUFBVSxFQUFxQixPQUFPLEVBQ3ZDLE1BQU0sbUJBQW1CLENBQUM7QUFFM0I7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBRTdCOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUF3QjtRQUNoRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoRSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUNyQixpQkFBaUIsRUFBSSxrQkFBa0IsRUFDdkMsbUJBQW1CLEVBQUUsc0JBQXNCLENBQzVDLENBQUM7SUFDSixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLENBQUMsbUJBQW1CLENBQUMsVUFBZTtRQUN4QyxPQUFPLFlBQVksQ0FBQyxtQ0FBbUMsQ0FBQyxVQUFVLEVBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUNEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQWU7UUFDekMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxVQUFlO1FBQzFDLE9BQU8sWUFBWSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsc0JBQXNCLENBQUMsVUFBZTtRQUMzQyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQWU7UUFDeEMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxVQUF3QjtRQUNuRCxJQUFJLGtCQUFrQixDQUFDO1FBQ3ZCLE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUMxRCxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQW9CLENBQUM7WUFDbEUsSUFBSSxVQUFVLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDL0Isa0JBQWtCLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi4vLi4vbWV0YWRhdGEvaW5kZXgnO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHknO1xyXG5pbXBvcnQgeyBOZ0VudGl0eSwgTkdfRU5USVRZIH0gZnJvbSAnLi9lbnRpdHlfZGVjb3JhdG9yJztcclxuLy8gaW1wb3J0IHsgTmdQcm9wZXJ0eSB9IGZyb20gJy4vbmdfcHJvcGVydHknO1xyXG4vLyBpbXBvcnQgeyBOR19GSUVMRCwgICBOZ0ZpZWxkUHJvcGVydHkgICB9IGZyb20gJy4vbmdfZmllbGQnO1xyXG4vLyBpbXBvcnQgeyBOR19PQkpFQ1QsICBOZ09iamVjdFByb3BlcnR5ICB9IGZyb20gJy4vbmdfb2JqZWN0JztcclxuLy8gaW1wb3J0IHsgTkdfRHluYW1pYywgTmdEeW5hbWljUHJvcGVydHkgfSBmcm9tICcuL25nX2R5bmFtaWMnO1xyXG4vLyBpbXBvcnQgeyBOR19MSVNULCAgICBOZ0xpc3RQcm9wZXJ0eSAgICB9IGZyb20gJy4vbmdfbGlzdCc7XHJcbmltcG9ydCB7XHJcbiAgTmdQcm9wZXJ0eSwgTkdfRklFTEQsIE5nRmllbGRQcm9wZXJ0eSwgTkdfT0JKRUNULCBOZ09iamVjdFByb3BlcnR5LFxyXG4gIE5HX0R5bmFtaWMsIE5nRHluYW1pY1Byb3BlcnR5LCBOR19MSVNULCAgICBOZ0xpc3RQcm9wZXJ0eVxyXG59IGZyb20gJy4vZmllbGRfZGVjb3JhdG9yJztcclxuXHJcbi8qKlxyXG4gKiDlrp7kvZPlhYPmlbDmja7lt6XlhbfnsbtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlNZXRhZGF0YVV0aWwge1xyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmiYDmnInlsZ7mgKdcclxuICAgKiBAdG9kb++8muWwgeijheagueaNruWfuuexu+iOt+WPluaJgOacieWFg+aVsOaNrueahOaWueazle+8jOino+WGs+mHjeWkjeS7o+eggVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRBbGxOZ1Byb3BlcnRpZXMoZW50aXR5VHlwZTogVHlwZTxFbnRpdHk+KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IE5nUHJvcGVydHkgfSB7XHJcbiAgICBjb25zdCBuZ1BsYWluUHJvcGVydGllcyA9IHRoaXMuZ2V0TmdGaWVsZFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBuZ0VudGl0eVByb3BlcnRpZXMgPSB0aGlzLmdldE5nT2JqZWN0UHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuICAgIGNvbnN0IG5nRHluYW1pY1Byb3BlcnRpZXMgPSB0aGlzLmdldE5nRHluYW1pY1Byb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBuZ0VudGl0eUxpc3RQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXHJcbiAgICAgIG5nUGxhaW5Qcm9wZXJ0aWVzLCAgIG5nRW50aXR5UHJvcGVydGllcyxcclxuICAgICAgbmdEeW5hbWljUHJvcGVydGllcywgbmdFbnRpdHlMaXN0UHJvcGVydGllc1xyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a6e5L2T5YWD5pWw5o2u5o+P6L+wXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nRW50aXR5TWF0YWRhdGEoZW50aXR5VHlwZTogYW55KTogTmdFbnRpdHl7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldENsYXNzTWV0YWRhdGFCeU5hbWVXaXRoVHJhbnNsYXRlKGVudGl0eVR5cGUsTkdfRU5USVRZKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+WTmdGaWVsZOeahOWxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXROZ0ZpZWxkUHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTmdGaWVsZFByb3BlcnR5IH0ge1xyXG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZShlbnRpdHlUeXBlLCBOR19GSUVMRCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZOZ09iamVjdOWxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IE5nT2JqZWN0UHJvcGVydHkgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIE5HX09CSkVDVCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZOZ0R5bmFtaWPlsZ7mgKflhYPmlbDmja5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdEeW5hbWljUHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTmdEeW5hbWljUHJvcGVydHkgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIE5HX0R5bmFtaWMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WTmdMaXN05bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nTGlzdFByb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IE5nTGlzdFByb3BlcnR5IH0ge1xyXG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZShlbnRpdHlUeXBlLCBOR19MSVNUKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS4u+mUruWxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRQcmltYXJ5S2V5UHJvcGVydHkoZW50aXR5VHlwZTogVHlwZTxFbnRpdHk+KTogTmdGaWVsZFByb3BlcnR5IHtcclxuICAgIGxldCBwcmltYXJ5S2V5UHJvcGVydHk7XHJcbiAgICBjb25zdCBuZ1BsYWluUHJvcGVydGllcyA9IEVudGl0eU1ldGFkYXRhVXRpbC5nZXROZ0ZpZWxkUHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuICAgIE9iamVjdC5rZXlzKG5nUGxhaW5Qcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5nUHJvcGVydHkgPSBuZ1BsYWluUHJvcGVydGllc1twcm9wTmFtZV0gYXMgTmdGaWVsZFByb3BlcnR5O1xyXG4gICAgICBpZiAobmdQcm9wZXJ0eS5wcmltYXJ5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgcHJpbWFyeUtleVByb3BlcnR5ID0gbmdQcm9wZXJ0eTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHByaW1hcnlLZXlQcm9wZXJ0eTtcclxuICB9XHJcbn1cclxuIl19