import { makePropDecorator } from '../../metadata/index';
function isPlainObject(value) {
    if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {
        return false;
    }
    if (Object.getPrototypeOf(value) === null) {
        return true;
    }
    let proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
}
/**
 * --------------------------------------------------------------------------------
 * NgField
 * --------------------------------------------------------------------------------
 */
/** 实体属性注解器名称 */
export const NG_FIELD = 'NgField';
function makeNgFieldDecorator(options) {
    let metadata = {
        primary: false,
        foreign: false
    };
    if (options) {
        const paramType = typeof options;
        switch (paramType) {
            case 'boolean':
                metadata.primary = Boolean(options);
                break;
            case 'string':
                metadata.dataField = String(options);
                break;
            case 'object':
                metadata = Object.assign(metadata, options);
                break;
        }
    }
    return metadata;
}
/**
 * 实体属性注解
 *
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *      @NgField({
 *          primary: true,
 *          dataField: 'id',
 *          ...
 *      })
 *      userid: string;
 *      userName: string;
 * }
 * ```
 */
export const NgField = makePropDecorator(NG_FIELD, makeNgFieldDecorator);
/**
 * --------------------------------------------------------------------------------
 * NgField
 * --------------------------------------------------------------------------------
 */
/** NgList 注解器名称 */
export const NG_LIST = 'NgList';
function makeNgListDecorator(options) {
    if (isPlainObject(options)) {
        return options;
    }
    const type = typeof options;
    if (type === 'string') {
        return {
            dataField: options
        };
    }
    if (type === 'function') {
        return {
            type: options
        };
    }
}
/**
 * 实体属性注解
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *      @NgField({
 *          primary: true,
 *          dataField: 'id',
 *          ...
 *      })
 *      userid: string;
 *      userName: string;
 *      @NgList({
 *          dataField: 'roles',
 *          formType: Role
 *      })
 *      Roles: EntityList<Role>
 * }
 * ```
 */
export const NgList = makePropDecorator(NG_LIST, makeNgListDecorator);
/**
 * --------------------------------------------------------------------------------
 * NgObject
 * --------------------------------------------------------------------------------
 */
/** NgObject 实体属性注解器名称 */
export const NG_OBJECT = 'NgObject';
function makeNgObjectDecorator(options) {
    if (isPlainObject(options)) {
        return options;
    }
    const type = typeof options;
    if (type === 'string') {
        return {
            dataField: options
        };
    }
    if (type === 'function') {
        return {
            type: options
        };
    }
}
/**
 * 实体属性注解
 * ### 使用示例
 *
 * ```
 *  export class UserEntity entends Entity {
 *      @NgField(true)  // 设置为主键
 *      id: string;
 *      @NgField('name')  // 设置数据映射字段为 name
 *      userName: string;
 *
 *      depid: string;
 *
 *      @NgObject(Department)  // 设置引用类型为 Department 实体类
 *      epartment: Department;
 *  }
 * ```
 */
export const NgObject = makePropDecorator(NG_OBJECT, makeNgObjectDecorator);
/**
 * --------------------------------------------------------------------------------
 * NgDynamicProperty
 * --------------------------------------------------------------------------------
 */
/** NgObject 实体属性注解器名称 */
export const NG_Dynamic = 'NgDynamic';
function makeNgDynamicDecorator(options) {
    if (isPlainObject(options)) {
        return options;
    }
    const type = typeof options;
    if (type === 'string') {
        return {
            dataField: options
        };
    }
    if (type === 'function') {
        return {
            type: options
        };
    }
}
/**
 * 实体属性注解
 * ### 使用示例
 *
 * ```
 *  export class UserEntity entends Entity {
 *      @NgField(true)  // 设置为主键
 *      id: string;
 *      @NgField('name')  // 设置数据映射字段为 name
 *      userName: string;
 *
 *      depid: string;
 *
 *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类
 *      epartment: Department;
 *  }
 * ```
 */
export const NgDynamic = makePropDecorator(NG_Dynamic, makeNgDynamicDecorator);
//# sourceMappingURL=data:application/json;base64,