import { Subject, from } from 'rxjs';
import { ChangeSet } from '../changeset/change_set';
import { ModifyType } from '../changeset/types';
import { Entity } from './entity';
import { EntityFactory } from './entity_creator';
import { PARENT_CLASS, PARENT_PATH } from './types';
import { Validator } from './validator/validator';
/**
 * 实体集合列表
 */
export class EntityList {
    // #endregion
    /**
     * @param data JSON数据集合
     * @param type 集合中的实体类型
     */
    constructor(data, type) {
        this.__type__ = 'EntityList';
        // #region 私有属性
        this.originalData = [];
        /**
         * 已废弃：请勿使用
         */
        this.listChanged = new Subject();
        /**
         * 已废弃：请勿使用
         */
        this.changeSet = new ChangeSet();
        /**
         * 已废弃：请勿使用
         */
        this.validator = new Validator();
        // #endregion
        // #region 公有属性
        /**
         * 集合改变时触发(新增、行记录修改、删除)
         * @event
         */
        this.onListChanged = this.listChanged.asObservable();
        this.clear();
        if (data) {
            // this.loadEntities(data);
            data.forEach(item => {
                this.initEntity(EntityFactory(type, item));
            });
        }
    }
    /**
     * 获取项集合
     */
    get items() {
        return this.rawData;
    }
    /**
     * 列表变更集
     */
    get changes() {
        return this.changeSet.changes;
    }
    /**
     * 迭代器
     */
    *[Symbol.iterator]() {
        yield* this.items;
    }
    // #region 公有方法
    /** 加载实体列表 */
    loadEntities(entities) {
        this.clear();
        entities.forEach(entity => {
            this.initEntity(entity);
        });
        // 发送Load变更
        const changeItem = {
            path: [],
            value: entities,
            preValue: undefined,
            type: ModifyType.Load,
            target: this
        };
        this.setChanges(changeItem);
    }
    /**
     * 清空
     */
    clear() {
        this.rawData = [];
        this.originalData = [];
    }
    /**
     * 添加实体对象到集合中，并返回新加的对象
     * @param entity 实体对象
     * @param isCloned 克隆
     */
    appendNew(entity, isCloned = false) {
        const newEntity = this.initEntity(entity, true);
        // 新增变更
        const changeItem = {
            path: [],
            value: [newEntity],
            preValue: undefined,
            type: ModifyType.Add
        };
        if (isCloned === true) {
            changeItem.type = ModifyType.Clone;
        }
        this.setChanges(changeItem);
        return newEntity;
    }
    /**
     * 在指定位置插入实体
     * @param entity 实体
     * @param position 插入位置
     */
    insert(entity, position) {
        const newEntity = this.initEntity(entity, true);
        // 新增变更
        const changeItem = {
            path: [],
            value: [newEntity],
            preValue: undefined,
            type: ModifyType.Insert,
            position: position,
        };
        this.setChanges(changeItem);
        return newEntity;
    }
    /**
     * 追加实体
     */
    appendEntity(entity) {
        const newEntity = this.initEntity(entity, true);
        // 新增变更
        const changeItem = {
            path: [],
            value: [newEntity],
            preValue: undefined,
            type: ModifyType.Add
        };
        this.setChanges(changeItem);
    }
    /**
     * 批量追加实体
     */
    appendEntities(entities) {
        const newEntites = entities.map((entity) => {
            return this.initEntity(entity, true);
        });
        const changeItem = {
            path: [],
            value: newEntites,
            preValue: undefined,
            type: ModifyType.Add
        };
        this.setChanges(changeItem);
    }
    /**
     * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败
     * @param primaryId 主键ID
     */
    remove(primaryId) {
        const total = this.count();
        const indexToRemove = this.rawData.findIndex((entity) => {
            return entity.primaryValue === primaryId;
        });
        if (indexToRemove === -1) {
            return false;
        }
        const entityToRemove = this.rawData[indexToRemove];
        this.rawData.splice(indexToRemove, 1);
        // 删除变更
        const changeItem = {
            path: [],
            value: { [entityToRemove.primaryProperty.dataField]: primaryId },
            preValue: undefined,
            type: ModifyType.Remove
        };
        this.updateIndex(total);
        this.setChanges(changeItem);
        return true;
    }
    /**
     * 从集合中获取指定ID值的实体对象
     * @param id 主键值
     */
    get(id) {
        return this.items.find(item => {
            return item.primaryValue === id;
        });
    }
    /**
     * 将变更记录添加到集合变更集中
     * @param value 变更记录
     */
    setChanges(modinfo) {
        // 向app层发送的变更
        this.listChanged.next(modinfo);
        // 构造向changeSet中添加的chagne
        const change = Object.assign({}, modinfo);
        if ((modinfo.type === ModifyType.Add || modinfo.type === ModifyType.Insert || modinfo.type === ModifyType.Clone) && modinfo.value[0] instanceof Entity) {
            change.value = [modinfo.value[0].data];
        }
        this.changeSet.append(change);
    }
    /** 集合总记录数 */
    count() {
        return this.items.length;
    }
    /**
     * 获取实体对象的索引值
     */
    indexOf(entity) {
        return this.items.indexOf(entity);
    }
    /**
     * 计算集合中某个属性的总和
     * @param propertyName 属性名称
     */
    sum(propertyName) {
        if (this.count() === 0) {
            return 0;
        }
        return this.items.reduce((val, curr) => {
            return val + curr[propertyName];
        }, 0);
    }
    /**
     * 集合数据验证
     */
    validate() {
        const propertyName = this.getPropertyName();
        return from(this.validator.validate(this[PARENT_CLASS], propertyName));
    }
    /**
     * 已废弃：请使用toJSON方法代替
     * @deprecated
     */
    toJson() {
        return this.rawData;
    }
    /**
     * 转换为JSON格式
     */
    toJSON() {
        const result = [];
        this.items.forEach((entity) => {
            result.push(entity.toJSON());
        });
        return result;
    }
    toArray() {
        return this.items;
    }
    // #endregion
    // #region 私有方法
    /**
     * 实体初始化
     * @param entity 实体
     */
    initEntity(entity, isNewEntity = false) {
        entity[PARENT_CLASS] = this;
        entity[PARENT_PATH] = this[PARENT_PATH];
        entity.onValueChanged.subscribe((v) => {
            const path = v.path;
            const value = v.value;
            const preValue = v.preValue;
            const operator = v.type;
            const subChanges = { path, value, preValue, type: operator };
            if (v.changeSetValue !== undefined) {
                subChanges['changeSetValue'] = v.changeSetValue;
            }
            this.setChanges(subChanges);
        });
        // TODO: 添加数据验证逻辑代码
        const newLength = this.rawData.push(entity);
        this[newLength - 1] = entity;
        if (!isNewEntity) {
            this.originalData.push(entity.toJSON());
        }
        return entity;
    }
    /**
     * 更新索引
     * @param total 总记录数
     */
    updateIndex(total) {
        for (let i = 0; i < total; i++) {
            delete this[i];
        }
        this.rawData.forEach((entity, index) => {
            this[index] = entity;
        });
    }
    /**
     * 获取属性名称
     */
    getPropertyName() {
        const path = this[PARENT_PATH];
        if (path && path.length) {
            const name = path[path.length - 1];
            return name;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,