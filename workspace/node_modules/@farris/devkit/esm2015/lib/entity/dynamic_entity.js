import { ModifyType } from '../changeset/types';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { Entity } from './entity';
import { takeUntil } from 'rxjs/operators';
/**
 * 支持动态字段集合的动态实体
 */
export class DynamicEntity extends Entity {
    /**
     * 是否是嵌套的动态实体
     */
    get IsNested() {
        return this[PARENT_CLASS] instanceof DynamicEntity;
    }
    /**
     * @param data JSON数据
     */
    constructor(data) {
        super(data);
        this.loadDynamicData(data);
    }
    loadDynamicData(dynamicData) {
        this.initializeDynamicField(dynamicData);
        // super.loadFields(dynamicData);
    }
    /**
     * 初始化动态数据
     * @param dynamicData 动态数据
     */
    initializeDynamicField(dynamicData) {
        // 遍历动态数据的key，创建动态实体属性。
        Object.keys(dynamicData).forEach(propertyName => {
            const dataField = propertyName;
            if (delete this[propertyName]) {
                if (dynamicData[propertyName] instanceof Object) {
                    const path = this.createPath(propertyName);
                    let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);
                    // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};
                    // NgObject({
                    //     /** 字段名称 */
                    //     dataField: propertyName,
                    //     /** 原始字段名称 */
                    //     originalDataField: propertyName,
                    //     /** 是否为外键 */
                    //     type: DynamicEntity
                    // })(this, propertyName);
                    Object.defineProperty(this, propertyName, {
                        get: function () {
                            return dynamicEntity;
                        },
                        set: function (value) {
                            const modifyInfo = {
                                path: dynamicEntity[PARENT_PATH],
                                value: value.data,
                                preValue: this[propertyName].data,
                                type: ModifyType.ValueChange
                            };
                            dynamicEntity = this.createDynamicEntityFromJsonData(value, path);
                            this.setChanges(modifyInfo);
                        }
                    });
                }
                else {
                    // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};
                    // NgField({
                    //     /** 字段名称 */
                    //     dataField: propertyName,
                    //     /** 原始字段名称 */
                    //     originalDataField: propertyName,
                    //     /** 是否为主键 */
                    //     primary: false,
                    //     /** 是否为外键 */
                    //     foreign: false
                    // })(this, propertyName);
                    Object.defineProperty(this, propertyName, {
                        // 定义返回数据方法。
                        get: function () {
                            // 从初始数据返回字段值。
                            return this.data[dataField];
                        },
                        set: function (value) {
                            // 值相同时不触发变更。
                            const oldValue = this.data[dataField];
                            if (oldValue === value) {
                                return;
                            }
                            // 更新元数据数据。
                            this.data[dataField] = value;
                            // 变更集
                            const changes = {
                                type: ModifyType.ValueChange,
                                path: this.createPath(propertyName),
                                value: value,
                                preValue: oldValue
                            };
                            if (this[PARENT_PATH]) {
                                changes.path = this[PARENT_PATH].concat(changes.path);
                            }
                            this.setChanges(changes);
                        }
                    });
                }
            }
        });
    }
    createDynamicEntityFromJsonData(value, parentPath) {
        let instance;
        if (value instanceof DynamicEntity) {
            instance = value;
        }
        else {
            instance = new DynamicEntity(value);
            instance.constructor = DynamicEntity;
        }
        instance[PARENT_CLASS] = this;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.pipe(takeUntil(this.unsubscribe)).subscribe(changes => {
            if (changes) {
                changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                this.setChanges(changes);
            }
        });
        return instance;
    }
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     * @todo
     * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；
     * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。
     */
    setChanges(value) {
        const propertyName = value.path[value.path.length - 1];
        const preValue = Object.assign({}, this.data);
        this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        let parentPath = value.path;
        if (value.path.length > 2) {
            parentPath = value.path.slice(0, value.path.length - 2);
        }
        // 统一不使用构造函数（保持和其他位置对Modification的构造一致）
        // const parentModification = new Modification(this.data, value.type, parentPath, preValue);
        const parentModification = {
            path: parentPath,
            value: this.data,
            preValue: preValue,
            type: value.type,
            dynamic: true
        };
        this.valueChanged.next(parentModification);
        this.changeSet.append(value);
    }
    /**
     * toJSON
     */
    toJSON() {
        return this.data;
    }
}
//# sourceMappingURL=data:application/json;base64,