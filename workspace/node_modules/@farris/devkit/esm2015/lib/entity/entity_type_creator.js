import { ModifyType } from "../changeset";
import { Entity } from "./entity";
import { DynamicFactory, EntityFactory } from "./entity_factory";
import { EntityList } from "./entity_list";
import { FieldMetadataUtil } from "./metadata";
import { PARENT_CLASS, PARENT_PATH } from "./types";
export class EntityTypeCreator {
    static create(constructor, data) {
        const entityType = this.getType(constructor);
        const entity = new entityType(data);
        entity.constructor = constructor;
        return entity;
    }
    // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })
    static createType(constructor) {
        const entityType = class EntityType extends Entity {
            constructor(data) {
                super(data);
            }
        };
        const entityPrototype = entityType.prototype;
        this.extendProperties(constructor, entityPrototype);
        return entityType;
    }
    static extendProperties(constructor, entityPrototype) {
        const ngFields = FieldMetadataUtil.getNgFields(constructor);
        const ngObjects = FieldMetadataUtil.getNgObjects(constructor);
        const ngLists = FieldMetadataUtil.getNgList(constructor);
        const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
        this.extendPlainProperty(entityPrototype, ngFields);
        this.extendListProperty(entityPrototype, ngLists);
        this.extendObjectProperty(entityPrototype, ngObjects);
        this.extendDynamicProperty(entityPrototype, ngDynamic);
    }
    static extendPlainProperty(entityPrototype, ngFields) {
        Object.keys(ngFields).forEach(function (propName) {
            const ngField = ngFields[propName];
            // const dataField = ngField.dataField || propName;
            Object.defineProperty(entityPrototype, propName, {
                get: function () {
                    const value = this.getPropValue(propName, ngField);
                    return value;
                },
                set: function (newPropValue) {
                    // 值相同时不触发变更。
                    const oldPropValue = this.getPropValue(propName, ngField);
                    if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                        return;
                    }
                    this.setPropValue(propName, ngField, newPropValue);
                    const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);
                    this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);
                }
            });
        });
    }
    static extendListProperty(entityPrototype, ngListMetadata) {
        Object.keys(ngListMetadata).forEach(function (propertyName) {
            const key = `__${propertyName}__`;
            Object.defineProperty(entityPrototype, propertyName, {
                get: function () {
                    let entityList = this[key];
                    if (!entityList) {
                        const fieldMetadata = ngListMetadata[propertyName];
                        const path = this.createPath(propertyName);
                        const dataField = fieldMetadata.dataField || propertyName;
                        const val = this.data[dataField];
                        entityList = new EntityList();
                        entityList[PARENT_CLASS] = this;
                        entityList[PARENT_PATH] = path;
                        if (val) {
                            const entities = val.map(v => EntityFactory(fieldMetadata.type, v));
                            entityList.loadEntities(entities);
                        }
                        entityList.onListChanged.subscribe(value => {
                            if (value) {
                                if (entityList[PARENT_PATH][0] !== value.path[0]) {
                                    value.path = entityList[PARENT_PATH].concat(value.path);
                                }
                                this.setChanges(value);
                            }
                        });
                        this[key] = entityList;
                    }
                    return entityList;
                },
                set: function (value) {
                    this[key] = value;
                }
            });
        });
    }
    static extendObjectProperty(entityPrototype, ngObjectMetadata) {
        Object.keys(ngObjectMetadata).forEach(function (propertyName) {
            const fieldMetadata = ngObjectMetadata[propertyName];
            const key = `__${propertyName}__`;
            // 如果没有值用一个空对象代替
            Object.defineProperty(entityPrototype, propertyName, {
                get: function () {
                    let childEntity = this[key];
                    const path = this.createPath(propertyName);
                    if (!childEntity) {
                        const dataField = fieldMetadata.dataField || propertyName;
                        // val不存在时，用空对象代替
                        const val = this.data[dataField] || {};
                        childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);
                        this[key] = childEntity;
                    }
                    return childEntity;
                },
                set: function (value) {
                    const path = this.createPath(propertyName);
                    const modifyInfo = {
                        path: path,
                        value: value.data,
                        preValue: this[propertyName].data,
                        type: ModifyType.ValueChange
                    };
                    const childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);
                    this[key] = childEntity;
                    this.setChanges(modifyInfo);
                }
            });
        });
    }
    static extendDynamicProperty(entityPrototype, ngDynamicMetadata) {
        Object.keys(ngDynamicMetadata).forEach(function (propertyName) {
            const fieldMetadata = ngDynamicMetadata[propertyName];
            const key = `__${propertyName}__`;
            Object.defineProperty(entityPrototype, propertyName, {
                get: function () {
                    let dynamicEntity = this[key];
                    const path = this.createPath(propertyName);
                    if (!dynamicEntity) {
                        const dataField = fieldMetadata.dataField || propertyName;
                        const originalData = this.data[dataField] || {};
                        dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);
                        this[key] = dynamicEntity;
                    }
                    return dynamicEntity;
                },
                set: function (value) {
                    const path = this.createPath(propertyName);
                    const modifyInfo = {
                        path: path,
                        value: value.data,
                        preValue: this[propertyName].data,
                        type: ModifyType.ValueChange
                    };
                    let dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);
                    this[key] = dynamicEntity;
                    this.setChanges(modifyInfo);
                }
            });
        });
    }
    static getType(constructor) {
        if (this.buffer.has(constructor)) {
            return this.buffer.get(constructor);
        }
        const entityType = this.createType(constructor);
        this.buffer.set(constructor, entityType);
        return entityType;
    }
    static buildEntity(parentPath, value, parent, fieldMetadata) {
        let instance;
        if (value instanceof fieldMetadata.type) {
            instance = value;
        }
        else {
            instance = EntityFactory(fieldMetadata.type, value);
        }
        instance[PARENT_CLASS] = parent;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.subscribe(changes => {
            if (changes) {
                changes.path = (parent[PARENT_PATH] || []).concat(changes.path);
                const change = Object.assign({}, changes, { fromParent: true });
                parent.setChanges(change);
            }
        });
        return instance;
    }
    static buildDynamic(parentPath, value, parent, fieldMetadata) {
        let instance;
        if (value instanceof fieldMetadata.type) {
            instance = value;
        }
        else {
            instance = DynamicFactory(fieldMetadata.type, value);
        }
        instance[PARENT_CLASS] = parent;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.subscribe(changes => {
            if (changes) {
                changes.path = (parent[PARENT_PATH] || []).concat(changes.path);
                parent.setChanges(changes);
            }
        });
        return instance;
    }
}
EntityTypeCreator.buffer = new Map();
//# sourceMappingURL=data:application/json;base64,