import { Subject, from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { FieldMetadataUtil } from './metadata/index';
import { ModifyType, ChangeSet } from '../changeset/index';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { EntityList } from './entity_list';
import { EntityFactory } from './entity_factory';
import { Validator } from './validator/index';
import { ValidationUtils } from './validator/validation_utils';
import { BigNumberType, RunMode } from '../core/types';
import { UserSettingsService } from '../i18n/user_settings_service';
import { ZonedTime } from '../i18n/zoned_time';
import { RunModeService } from '../misc';
/**
 * @author Lucas Huang
 * 实体抽象基类，所有实体必须扩展自Entity
 *
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *    userId: string;
 *    userName: string;
 *
 *    constructor(data: any){
 *        super(data);
 *    }
 * }
 * ```
 */
export class Entity {
    // #endregion
    /**
     * @param data JSON数据
     */
    constructor(data) {
        // #region 私有、保护属性
        /**
         * 验证错误集合
         */
        this.validErrors = {};
        this.primaryFieldMetadata = null;
        this.originalData = undefined;
        /**
         * 增量变更集合
         */
        this.changeSet = new ChangeSet();
        /**
         * 是否正在验证
         */
        this.isValidating = false;
        /**
         * 新数据
         */
        this.newData = undefined;
        /**
         * 销毁流
         */
        this.unsubscribe = new Subject();
        // #endregion
        // #region 公有属性
        /**
         * 变更流
         */
        this.valueChanged = new Subject();
        /**
         * 属性值改变时触发
         *
         * ### 使用示例
         * ```
         *  const entity = new UserEntity(data);
         *  entity.onValueChanged.subscribe((data: Modification) => {
         *      console.log(data);
         *  })
         *
         * ```
         *
         * @event
         */
        this.onValueChanged = this.valueChanged.asObservable();
        this.onUpdate = new Subject();
        this.validator = new Validator();
        this.newData = Object.assign({}, data);
        this.originalData = Object.assign({}, data);
        this.onValueChanged = this.valueChanged;
        // this.onValueChanged = this.valueChanged.pipe(
        //     scan((x: Modification, curr: Modification) => {
        //         if (x) {
        //             if (isEqual(x.path, curr.path) && x.type === curr.type) {
        //                 return Object.assign(x, curr);
        //             }
        //             return curr;
        //         }
        //         return curr;
        //     })
        // );
        if (RunModeService.getRunMode() === RunMode.compatible) {
            this.initialize();
        }
        // this.validate();
    }
    /**
     * 返回JSON格式的数据
     */
    get data() {
        return this.newData;
    }
    set data(value) {
        this.newData = value;
    }
    /**
     * 验证错误集合
     */
    get errors() {
        return this.validErrors;
    }
    set errors(errors) {
        this.validErrors = errors;
    }
    set changeSetPolicy(policy) {
        this._changeSetPolicy = policy;
    }
    get changeSetPolicy() {
        return this._changeSetPolicy;
    }
    /**
     * 实体变更集
     */
    get changes() {
        return this.changeSet.changes;
    }
    /**
     * 实体主键元数据
     */
    get primaryProperty() {
        if (!this.primaryFieldMetadata) {
            this.primaryFieldMetadata = FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);
        }
        return this.primaryFieldMetadata;
    }
    /**
     * 主键
     * @todo
     * 1、没有主键时返回''不合理，应该返回undefined
     */
    get primaryKey() {
        if (this.primaryProperty) {
            return this.primaryProperty.property;
        }
        else {
            return '';
        }
    }
    /**
     * 实体主键值
     * 1、没有主键时返回''不合理，应该返回undefined
     */
    get primaryValue() {
        if (this.primaryKey) {
            // return this[this.primaryProperty.property].toString();
            const primaryValue = this[this.primaryProperty.property];
            return primaryValue ? primaryValue : '';
        }
        else {
            return '';
        }
    }
    // #region 公有方法
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     */
    setChanges(value) {
        const propertyName = value.path[value.path.length - 1];
        // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。
        // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        this.valueChanged.next(value);
        if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName) && this.changeSetPolicy === 'valid')) {
            if (value && value.changeSetValue !== undefined) {
                value = JSON.parse(JSON.stringify(value));
                value.value = value.changeSetValue;
            }
            this.changeSet.append(value);
        }
    }
    /**
     * 校验实体各属性的值
     * @param propertyName 属性名称，如果为空，则验证实体中所有设置了验证规则的属性
     * @returns Observable<ValidationResult>
     * ### 示例
     * ```
     *  const entity = new UserEntity(data);
     *  entity.validate().subscribe(result =>{
     *      if(result.isValid){
     *          ...
     *      } else {
     *          console.log(result.message);
     *      }
     *  })
     *
     * ```
     */
    // tslint:disable-next-line: max-line-length
    validate(propertyName, value, externalRules, index, frameContext) {
        return from(this.validator.validate(this, propertyName, value, externalRules, index, frameContext)).pipe(tap(result => {
            if (!result.isValid) {
                this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
            }
            else {
                this.validErrors = {};
            }
        }));
    }
    validateAll(validateContext) {
    }
    // 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb
    validateFromUtil(propertyName, value, cb, context) {
        this.validErrors = {};
        from(this.validator.validate(this, propertyName, value, null, undefined, context && context.frameContext || null)).subscribe(result => {
            if (!result.isValid) {
                this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
            }
            // 不应重新赋值，这里仅是实体校验通过
            /*else {
              // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
              if (this[propertyName] === value) {
                return;
              }
              this[propertyName] = value;
            }*/
            cb(result);
        });
    }
    /**
     * 同步校验
     * @param propertyName
     * @param value
     * @param cb
     */
    validateFromUtilSync(propertyName, value, cb, context) {
        this.validErrors = {};
        const result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);
        if (result && !result.isValid) {
            this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
        }
        cb(result);
    }
    getPaths() {
        const pathObj = {
            path: [],
            isUdt: false,
            isGrid: false
        };
        const handleParent = item => {
            const parentPaths = item[PARENT_PATH];
            if (parentPaths) {
                const prop = parentPaths[parentPaths.length - 1];
                // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段
                if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                    pathObj.isUdt = true;
                }
                // 存在类型为ngList，则判断为grid
                if (item instanceof EntityList === true) {
                    pathObj.isGrid = true;
                }
                else {
                    pathObj.path.push(prop);
                }
            }
            if (item[PARENT_CLASS]) {
                handleParent(item[PARENT_CLASS]);
            }
        };
        handleParent(this);
        pathObj.path = pathObj.path.reverse();
        return pathObj;
    }
    getEntityListPath() {
        let paths = [];
        const handleParent = (item) => {
            const parentPaths = item[PARENT_PATH];
            if (parentPaths) {
                if (item instanceof EntityList === true) {
                    const path = parentPaths.concat([]).reverse();
                    Array.prototype.push.apply(paths, path);
                }
            }
            if (item[PARENT_CLASS]) {
                handleParent(item[PARENT_CLASS]);
            }
        };
        handleParent(this);
        return paths.reverse();
    }
    getMainEntityPrimaryValue() {
        let item = this;
        while (item[PARENT_CLASS]) {
            item = item[PARENT_CLASS];
        }
        return item.primaryValue;
    }
    /**
     * 加载数据
     * @param data 新数据
     */
    load(data, options = {}) {
        if (!data) {
            data = {};
        }
        this.loadFields(data);
        if (!options || (options && options.loadChild !== false)) {
            this.loadLists(data);
        }
        this.loadObjects(data);
        this.loadDynamicObjects(data);
        this.newData = Object.assign({}, data);
        this.originalData = Object.assign({}, data);
    }
    /**
     * 转换为JSON
     * @param buildChanges 是否构造变更集
     * @param includeMultiLanguageField 是否包含多语字段
     */
    toJSON(buildChanges) {
        const result = {};
        // 简单属性
        const ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach((propName) => {
            const ngField = ngFields[propName];
            const dataField = ngField.dataField || propName;
            if (buildChanges === true && ngField.enableTimeZone === true) {
                result[dataField] = this.data[propName];
            }
            else {
                result[dataField] = this[propName];
            }
        });
        // 对象属性
        const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach((propName) => {
            const ngObject = ngObjects[propName];
            const dataField = ngObject.dataField || propName;
            result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};
        });
        // 动态属性
        const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamics).forEach((propName) => {
            const ngDynamic = ngDynamics[propName];
            const dataField = ngDynamic.dataField || propName;
            result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};
        });
        // 列表属性
        const ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach((propName) => {
            const ngList = ngLists[propName];
            const dataField = ngList.dataField || propName;
            result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};
        });
        return result;
    }
    // #endregion
    //#region 实体初始化相关private方法
    /**
     * 初始化实体
     */
    initialize() {
        const constructor = this.constructor;
        const ngFields = FieldMetadataUtil.getNgFields(constructor);
        const ngObjects = FieldMetadataUtil.getNgObjects(constructor);
        const ngLists = FieldMetadataUtil.getNgList(constructor);
        const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
        this.initializeNormalField(ngFields);
        this.initializeList(ngLists);
        this.initializeObject(ngObjects);
        this.initializeDynamic(ngDynamic);
    }
    /**
     * 创建path
     * @param propertyName 属性名称
     */
    createPath(propertyName) {
        const primaryFieldMetadata = this.primaryProperty;
        if (primaryFieldMetadata) {
            const primaryDataField = primaryFieldMetadata.dataField;
            return [primaryDataField + ':' + this.primaryValue, propertyName];
        }
        else {
            return [':', propertyName];
        }
    }
    /**
     * 属性字段初始化
     * @param ngFields 属性字段元数据
     */
    initializeNormalField(ngFields) {
        Object.keys(ngFields).forEach(propName => {
            const ngField = ngFields[propName];
            const dataField = ngField.dataField || propName;
            if (delete this[propName]) {
                Object.defineProperty(this, propName, {
                    get: function () {
                        const value = this.getPropValue(propName, ngField);
                        return value;
                    },
                    set: function (newPropValue) {
                        // 值相同时不触发变更。
                        const oldPropValue = this.getPropValue(propName, ngField);
                        if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                            return;
                        }
                        this.setPropValue(propName, ngField, newPropValue);
                        const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);
                        this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);
                    }
                });
            }
        });
    }
    /**
     * 初始化列表类型的元数据
     * @param ngListMetadata 列表类型元数据
     */
    initializeList(ngListMetadata) {
        Object.keys(ngListMetadata).forEach(propertyName => {
            const fieldMetadata = ngListMetadata[propertyName];
            const path = this.createPath(propertyName);
            const dataField = fieldMetadata.dataField || propertyName;
            const val = this.data[dataField];
            const entityList = new EntityList();
            entityList[PARENT_CLASS] = this;
            entityList[PARENT_PATH] = path;
            if (val) {
                const entities = val.map(v => EntityFactory(fieldMetadata.type, v));
                entityList.loadEntities(entities);
            }
            entityList.onListChanged.subscribe(value => {
                if (value) {
                    if (entityList[PARENT_PATH][0] !== value.path[0]) {
                        value.path = entityList[PARENT_PATH].concat(value.path);
                    }
                    this.setChanges(value);
                }
            });
            this[propertyName] = entityList;
        });
    }
    /**
     * 初始化子对象
     * @param ngObjectMetadata 子对象元数据
     */
    initializeObject(ngObjectMetadata) {
        Object.keys(ngObjectMetadata).forEach(propertyName => {
            const fieldMetadata = ngObjectMetadata[propertyName];
            const path = this.createPath(propertyName);
            const dataField = fieldMetadata.dataField || propertyName;
            // val不存在时，用空对象代替
            const val = this.data[dataField] || {};
            const createEntityFromJsonData = (value) => {
                let instance;
                if (value instanceof fieldMetadata.type) {
                    instance = value;
                }
                else {
                    instance = EntityFactory(fieldMetadata.type, value);
                }
                instance[PARENT_CLASS] = this;
                instance[PARENT_PATH] = path;
                instance.onValueChanged.subscribe(changes => {
                    if (changes) {
                        changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                        this.setChanges(changes);
                    }
                });
                return instance;
            };
            // 如果没有值用一个空对象代替
            let childEntity = createEntityFromJsonData(val);
            if (delete this[propertyName]) {
                Object.defineProperty(this, propertyName, {
                    get: () => {
                        return childEntity;
                    },
                    set: function (value) {
                        const modifyInfo = {
                            path: childEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        childEntity = createEntityFromJsonData(value);
                        this.setChanges(modifyInfo);
                    }
                });
            }
        });
    }
    initializeDynamic(ngDynamicMetadata) {
        Object.keys(ngDynamicMetadata).forEach(propertyName => {
            const fieldMetadata = ngDynamicMetadata[propertyName];
            const path = this.createPath(propertyName);
            const dataField = fieldMetadata.dataField || propertyName;
            const originalData = this.data[dataField] || {};
            const createEntityFromJsonData = (value) => {
                let instance;
                if (value instanceof fieldMetadata.type) {
                    instance = value;
                }
                else {
                    instance = EntityFactory(fieldMetadata.type, value);
                }
                instance[PARENT_CLASS] = this;
                instance[PARENT_PATH] = path;
                instance.onValueChanged.subscribe(changes => {
                    if (changes) {
                        changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                        this.setChanges(changes);
                    }
                });
                return instance;
            };
            let dynamicEntity = createEntityFromJsonData(originalData);
            if (delete this[propertyName]) {
                Object.defineProperty(this, propertyName, {
                    get: function () {
                        return dynamicEntity;
                    },
                    set: function (value) {
                        const modifyInfo = {
                            path: dynamicEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        dynamicEntity = createEntityFromJsonData(value);
                        this.setChanges(modifyInfo);
                    }
                });
            }
        });
    }
    //#endregion
    // #region 加载实体数据相关private、projected方法
    /**
     * 加载简单字段值
     * @todo 临时用修改的方式模拟
     */
    loadFields(data) {
        const ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach((propName) => {
            const ngField = ngFields[propName];
            const dataField = ngField.dataField || propName;
            // if (ngField.primary === false) {
            //   this[propName] = data[dataField];
            // }
            let propValue = data[dataField];
            if (ngField.enableTimeZone === true) {
                const timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                if (timeZoneOffset !== null && propValue) {
                    propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);
                }
            }
            this[propName] = propValue;
        });
    }
    /**
     * 加载子列表数据
     * @param data 数据
     */
    loadLists(data) {
        const ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach((propName) => {
            const ngList = ngLists[propName];
            const dataField = ngList.dataField || propName;
            const entityType = ngList.type;
            // 创建实体
            const listData = data[dataField];
            if (listData) {
                const entities = listData.map((entityData) => {
                    return EntityFactory(entityType, entityData);
                });
                this[propName].loadEntities(entities);
            }
            else {
                this[propName].loadEntities([]);
            }
        });
    }
    loadObjects(data) {
        const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach((propName) => {
            const ngObject = ngObjects[propName];
            const dataField = ngObject.dataField || propName;
            const objectData = data[dataField];
            const entity = this[propName];
            if (!entity || !objectData) {
                return;
            }
            entity.load(objectData);
        });
    }
    loadDynamicObjects(data) {
        const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamicObjects).forEach((propName) => {
            const ngDynamicObject = ngDynamicObjects[propName];
            const dataField = ngDynamicObject.dataField || propName;
            const dynamicData = data[dataField] || {};
            const dynamicEntity = this[propName];
            if (!dynamicEntity) {
                return;
            }
            dynamicEntity.loadDynamicData(dynamicData);
        });
    }
    // #endregion
    // #region 私有工具方法
    /**
     * 发送值变更
     */
    emitValueChange(propName, propMetadata, newPropValue, oldPropValue, changeSetValue = undefined) {
        const change = {
            path: this.createPath(propName),
            value: newPropValue,
            changeSetValue,
            preValue: oldPropValue,
            type: ModifyType.ValueChange
        };
        if (this[PARENT_PATH]) {
            change.path = this[PARENT_PATH].concat(change.path);
        }
        this.setChanges(change);
    }
    /**
     * 准备提交给后端的属性值
     * @param propName 属性
     * @param propMetadata 属性描述
     * @param propValue 属性值
     */
    preparePropValue(propName, propMetadata, propValue) {
        let value = undefined;
        // 只要启用时区，传给后端的时间就必须带时区，因此当获取用户时区失败的时候，获取浏览器当前时区
        if (propMetadata.enableTimeZone === true) {
            const timeZoneOffset = UserSettingsService.getTimeZoneOffset();
            if (timeZoneOffset !== null && propValue) {
                value = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);
            }
        }
        return value;
    }
    /**
     * 获取属性值
     */
    getPropValue(propName, propMetadata) {
        const dataField = propMetadata.dataField || propName;
        let value = this.data[dataField];
        // 对多语录入字段，query不返回问题进行兼容
        if (propMetadata.enableMultiLangInput === true && !value) {
            const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
            const originDataField = dataField.replace('_MULTILANGUAGE', '');
            return {
                [langCode]: this.data[originDataField]
            };
        }
        // 启用时区
        if (propMetadata.enableTimeZone === true) {
            const timeZoneOffset = UserSettingsService.getTimeZoneOffset();
            if (timeZoneOffset !== null && value) {
                return ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(value, timeZoneOffset);
            }
        }
        if (propMetadata.originalDataFieldType === BigNumberType) {
            value = value !== null && value !== undefined && value.toString() || null;
        }
        return value;
    }
    /**
     * 设置属性值
     */
    setPropValue(propName, propMetadata, propValue) {
        const dataField = propMetadata.dataField || propName;
        if (propMetadata.originalDataFieldType === BigNumberType) {
            this.data[dataField] = propValue === null ? null : propValue && propValue.toString() || '';
        }
        else {
            if (propMetadata.enableTimeZone === true) {
                const timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                if (timeZoneOffset !== null && propValue) {
                    propValue = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);
                }
            }
            this.data[dataField] = propValue;
        }
    }
    /**
     * 检查属性值是否发生变化
     */
    isPropValueChanged(propName, propMetadata, newPropValue, oldPropValue) {
        if (propMetadata.enableMultiLangInput === true) {
            if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                return false;
            }
            return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
        }
        else if (propMetadata.originalDataFieldType === BigNumberType) {
            if (typeof newPropValue !== 'string' && newPropValue !== null && newPropValue !== undefined) {
                newPropValue = newPropValue.toString();
            }
            return newPropValue !== oldPropValue;
        }
        else {
            return newPropValue !== oldPropValue;
        }
    }
    /**
     * 多语录入字段的值是否为空
     */
    isEmptyMultiLangPropValue(value) {
        if (!value) {
            return true;
        }
        const keys = Object.keys(value);
        if (keys.length === 0) {
            return true;
        }
        // 值全部为空，视为空
        const vals = Object.values(value);
        const allEmptyVal = vals.every((val) => {
            return !val;
        });
        if (allEmptyVal === true) {
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,