import { Inject, Injectable, Injector } from '@angular/core';
import { ModifyType } from '../changeset/index';
import { Repository } from '../repository/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { BindingData } from '../binding-data/index';
import { NAMESPACE } from '../frame/tokens';
const EventType = Expression.EventType;
class RepositoryChangeListener extends ChangeListener {
    constructor(injector, repository, namespace) {
        super();
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.bindingData = this.injector.get(BindingData, null);
        this.registerEvent();
    }
    registerEvent() {
        if (this.repository && this.repository.changes) {
            this.repository.changes.subscribe((change) => {
                let eventType = this.convertEventType(change);
                if (!eventType) {
                    return;
                }
                const path = this.buildEventPath(change);
                const modification = {
                    ns: this.namespace,
                    type: eventType,
                    path: path,
                    value: change.value,
                    source: Expression.EventSource.Field,
                };
                // console.log("RepositoryChangeListener", modification);
                this.subject.next(modification);
            });
        }
        // repository只监听值变化事件
        if (this.repository && this.repository.entityCollectionChange) {
            this.repository.entityCollectionChange.subscribe((change) => {
                let eventType = this.convertEventType(change);
                if (!eventType) {
                    return;
                }
                const path = this.buildEventPath(change);
                const modification = {
                    ns: this.namespace,
                    type: eventType,
                    path: path,
                    value: change.value,
                    source: Expression.EventSource.Repository,
                };
                this.subject.next(modification);
            });
        }
    }
    /**
     * 构建事件路径参数
     * @param event event
     * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]
     * @returns
     */
    buildEventPath(event) {
        const paths = event.path;
        let result = [];
        if (!paths || paths.length < 1) {
            // 主表新增时path为空
            return result;
        }
        // 过滤掉udt的冒号，关联字段的id
        result = paths.filter((path, index) => {
            if (index % 2 === 0 && path.includes(':')) {
                if (path === ':') {
                    return false;
                }
                const primaryKey = path.split(':')[0];
                if (primaryKey !== this.repository.primaryKey) {
                    return false;
                }
            }
            return true;
        });
        // 移除路径中的id字符串
        // result = paths.map((path: string, index: number) => {
        //   if (path.includes(':') && index % 2 === 0) {
        //     return path.split(':')[1];
        //   }
        //   return path;
        // });
        // 此时result中不应该有冒号
        return result;
    }
    convertEventType(change) {
        let eventType = null;
        if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {
            // eventType = Expression.EventType.Append;
            // 不处理新增
        }
        else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {
            // eventType = Expression.EventType.Remove;
        }
        else if (change.type === ModifyType.Load) {
            // eventType = Expression.EventType.Load;
        }
        else if (change.type === ModifyType.ValueChange) {
            //eventType = Expression.EventType.ValueChanged;
            // 不处理值变化
        }
        else if (change.type === ModifyType.Update) {
            eventType = Expression.EventType.Update;
        }
        return eventType;
    }
}
RepositoryChangeListener.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RepositoryChangeListener.ctorParameters = () => [
    { type: Injector },
    { type: Repository },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] }
];
export { RepositoryChangeListener };
//# sourceMappingURL=data:application/json;base64,