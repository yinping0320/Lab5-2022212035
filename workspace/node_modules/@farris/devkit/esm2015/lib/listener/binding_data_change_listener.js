import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData, BindingList, ChangeType } from '../binding-data/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { NAMESPACE } from '../frame/index';
import { Repository } from '../repository/index';
const EventType = Expression.EventType;
/**
 * 监听bindingList变更
 * @description 主要用于监听行切换等事件
 */
class BindingDataChangeListener extends ChangeListener {
    constructor(injector, bindingData, namespace) {
        super();
        this.injector = injector;
        this.bindingData = bindingData;
        this.namespace = namespace;
        this.repository = null;
        this.repository = this.injector.get(Repository, null);
        this.registerEvent();
    }
    /**
     * 注册值变化事件
     */
    registerEvent() {
        if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {
            this.bindingData.changes.subscribe((change) => {
                if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {
                    let eventType = null;
                    if (change.type === ChangeType.Append) {
                        eventType = EventType.Append;
                    }
                    else if (change.type === ChangeType.ValueChanged) {
                        eventType = EventType.ValueChanged;
                    }
                    else if (change.type === ChangeType.Remove) {
                        eventType = EventType.Remove;
                    }
                    else if (change.type === ChangeType.Load) {
                        // 主表新增
                        if (change.create === true) {
                            eventType = EventType.Append;
                        }
                        else {
                            eventType = EventType.Load;
                        }
                    }
                    else if (change.type === ChangeType.SelectionChanged) {
                        eventType = EventType.SelectionChanged;
                    }
                    const path = this.buildEventPath(change);
                    const modification = {
                        ns: this.namespace,
                        path: path,
                        type: eventType,
                        source: Expression.EventSource.BindingData,
                        value: change.value,
                        id: change.id,
                        isTreeNodeLoadScene: change.isTreeNodeLoadScene
                    };
                    // console.log("BindingDataChangeListener", modification);
                    this.subject.next(modification);
                }
            });
        }
    }
    buildEventPath(change) {
        const path = change.path;
        const paths = [];
        // if (!path || path.length < 1) {
        //   return paths;
        // }
        const primaryValue = this.bindingData.list.currentItem.primaryKeyValue || change.id;
        if (primaryValue) {
            if (!(change.type === ChangeType.Load && change.path.length === 0)) {
                paths.push(`${this.bindingData.list.primaryKey}:${primaryValue}`);
            }
        }
        const currentPath = [];
        for (let index = 0; index < path.length; index++) {
            const propertyName = path[index];
            currentPath.push(propertyName);
            const item = this.bindingData.getValue(currentPath);
            paths.push(propertyName);
            if (item instanceof BindingList) {
                if (currentPath.length < path.length) {
                    const bindingList = item;
                    let currentId = bindingList.currentItem.primaryKeyValue;
                    if (index === path.length - 2 && change.id) {
                        currentId = change.id;
                    }
                    paths.push(`${this.bindingData.list.primaryKey}:${currentId}`);
                }
            }
        }
        return paths;
    }
}
BindingDataChangeListener.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BindingDataChangeListener.ctorParameters = () => [
    { type: Injector },
    { type: BindingData },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] }
];
export { BindingDataChangeListener };
//# sourceMappingURL=data:application/json;base64,