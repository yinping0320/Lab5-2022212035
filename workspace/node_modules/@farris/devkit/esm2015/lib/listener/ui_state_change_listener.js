import { Injectable, Injector, Inject } from '@angular/core';
// import { FRAME_ID, NAMESPACE } from '../frame/index';
import { UIState } from '../ui-state/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { BindingData } from '../binding-data/index';
import { FRAME_ID, NAMESPACE } from '../frame/tokens';
/**
 * 监听UIState变更
 */
class UIStateChangeListener extends ChangeListener {
    constructor(injector, uiState, namespace, frameId, bindingData) {
        super();
        this.injector = injector;
        this.uiState = uiState;
        this.namespace = namespace;
        this.frameId = frameId;
        this.bindingData = bindingData;
        this.registerEvent();
    }
    buildEventPath(change) {
        return null;
    }
    registerEvent() {
        if (this.uiState && this.uiState.changes) {
            this.uiState.changes.subscribe((change) => {
                const modification = {
                    ns: this.namespace,
                    path: [change.field],
                    type: Expression.EventType.ValueChanged,
                    value: change.value,
                    source: Expression.EventSource.State,
                    frameId: this.frameId
                };
                // console.log("UIStateChangeListener", modification);
                this.subject.next(modification);
            });
        }
    }
}
UIStateChangeListener.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UIStateChangeListener.ctorParameters = () => [
    { type: Injector },
    { type: UIState },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
    { type: String, decorators: [{ type: Inject, args: [FRAME_ID,] }] },
    { type: BindingData }
];
export { UIStateChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvbGlzdGVuZXIvdWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCx3REFBd0Q7QUFDeEQsT0FBTyxFQUFFLE9BQU8sRUFBMEIsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXREOztHQUVHO0FBQ0gsTUFDTSxxQkFBc0IsU0FBUSxjQUFjO0lBQ2hELFlBQW9CLFFBQWtCLEVBQVUsT0FBZ0IsRUFBNkIsU0FBUyxFQUE0QixPQUFlLEVBQVUsV0FBd0I7UUFDakwsS0FBSyxFQUFFLENBQUM7UUFEVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUE2QixjQUFTLEdBQVQsU0FBUyxDQUFBO1FBQTRCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUVqTCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNNLGNBQWMsQ0FBQyxNQUE4QjtRQUNsRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTyxhQUFhO1FBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUE4QixFQUFFLEVBQUU7Z0JBQ2hFLE1BQU0sWUFBWSxHQUFjO29CQUM5QixFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVM7b0JBQ2xCLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7b0JBQ3BCLElBQUksRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVk7b0JBQ3ZDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztvQkFDbkIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSztvQkFDcEMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2lCQUN0QixDQUFDO2dCQUNGLHNEQUFzRDtnQkFDdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7OztZQXhCRixVQUFVOzs7O1lBWFUsUUFBUTtZQUVwQixPQUFPOzRDQVdxRCxNQUFNLFNBQUMsU0FBUzt5Q0FBc0IsTUFBTSxTQUFDLFFBQVE7WUFSakgsV0FBVzs7QUFnQ3BCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vLyBpbXBvcnQgeyBGUkFNRV9JRCwgTkFNRVNQQUNFIH0gZnJvbSAnLi4vZnJhbWUvaW5kZXgnO1xyXG5pbXBvcnQgeyBVSVN0YXRlLCBVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtIH0gZnJvbSAnLi4vdWktc3RhdGUvaW5kZXgnO1xyXG5pbXBvcnQgeyBDaGFuZ2VMaXN0ZW5lciB9IGZyb20gJy4vY2hhbmdlX2xpc3RlbmVyJztcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IEZSQU1FX0lELCBOQU1FU1BBQ0UgfSBmcm9tICcuLi9mcmFtZS90b2tlbnMnO1xyXG50eXBlIEV2ZW50QXJncyA9IEV4cHJlc3Npb24uRXZlbnRBcmdzO1xyXG4vKipcclxuICog55uR5ZCsVUlTdGF0ZeWPmOabtFxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBVSVN0YXRlQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBDaGFuZ2VMaXN0ZW5lciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgdWlTdGF0ZTogVUlTdGF0ZSwgQEluamVjdChOQU1FU1BBQ0UpIHByaXZhdGUgbmFtZXNwYWNlLCBASW5qZWN0KEZSQU1FX0lEKSBwcml2YXRlIGZyYW1lSWQ6IHN0cmluZywgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoKTtcclxuICB9XHJcbiAgcHVibGljIGJ1aWxkRXZlbnRQYXRoKGNoYW5nZTogVUlTdGF0ZU9ic2VydmFibGVQYXJhbSk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBwcml2YXRlIHJlZ2lzdGVyRXZlbnQoKSB7XHJcbiAgICBpZiAodGhpcy51aVN0YXRlICYmIHRoaXMudWlTdGF0ZS5jaGFuZ2VzKSB7XHJcbiAgICAgIHRoaXMudWlTdGF0ZS5jaGFuZ2VzLnN1YnNjcmliZSgoY2hhbmdlOiBVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uOiBFdmVudEFyZ3MgPSB7XHJcbiAgICAgICAgICBuczogdGhpcy5uYW1lc3BhY2UsXHJcbiAgICAgICAgICBwYXRoOiBbY2hhbmdlLmZpZWxkXSxcclxuICAgICAgICAgIHR5cGU6IEV4cHJlc3Npb24uRXZlbnRUeXBlLlZhbHVlQ2hhbmdlZCxcclxuICAgICAgICAgIHZhbHVlOiBjaGFuZ2UudmFsdWUsXHJcbiAgICAgICAgICBzb3VyY2U6IEV4cHJlc3Npb24uRXZlbnRTb3VyY2UuU3RhdGUsXHJcbiAgICAgICAgICBmcmFtZUlkOiB0aGlzLmZyYW1lSWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVUlTdGF0ZUNoYW5nZUxpc3RlbmVyXCIsIG1vZGlmaWNhdGlvbik7XHJcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQobW9kaWZpY2F0aW9uKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IFVJU3RhdGVDaGFuZ2VMaXN0ZW5lciB9O1xyXG4iXX0=