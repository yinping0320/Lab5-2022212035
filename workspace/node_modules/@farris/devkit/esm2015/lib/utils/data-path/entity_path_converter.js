import { BindingPropertyType, PropertyUtil } from '../../binding-data/index';
import { BindingPathConverter } from './binding_path_converter';
/**
 * EntityPath转换器
 */
class EntityPathConverter {
    /**
     * 转换为Entity可识别的路径
     * 根：[]
     * 主表：['id:xxx', 'name'],
     * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
     * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
     * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
     * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
     */
    static toEntityPathArray(bindingPathString, bindingData) {
        const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPathString);
        const entityPathArray = [];
        if (bindingPathArray.length === 0) {
            return entityPathArray;
        }
        // 根节点
        let currentBindingObject = bindingData.list.currentItem;
        entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
        bindingPathArray.forEach((propName) => {
            const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            switch (propInfo.type) {
                case BindingPropertyType.Plain:
                    entityPathArray.push(propName);
                    break;
                case BindingPropertyType.Object:
                    currentBindingObject = currentBindingObject[propName];
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                case BindingPropertyType.List:
                    const currentBindingList = currentBindingObject[propName];
                    currentBindingObject = currentBindingList.currentItem;
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                default:
                    break;
            }
        });
        return entityPathArray;
    }
    /**
     * 创建路径中的主键部分
     */
    static createPrimaryKeyPath(primaryKey, primaryKeyValue) {
        return `${primaryKey}:${primaryKeyValue}`;
    }
}
export { EntityPathConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X3BhdGhfY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvZGF0YS1wYXRoL2VudGl0eV9wYXRoX2NvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ1EsbUJBQW1CLEVBQUUsWUFBWSxFQUMvQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFOztHQUVHO0FBQ0gsTUFBTSxtQkFBbUI7SUFFdkI7Ozs7Ozs7O09BUUc7SUFDSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsaUJBQXlCLEVBQUUsV0FBd0I7UUFDakYsTUFBTSxnQkFBZ0IsR0FBYSxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzlGLE1BQU0sZUFBZSxHQUFhLEVBQUUsQ0FBQztRQUVyQyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDakMsT0FBTyxlQUFlLENBQUM7U0FDeEI7UUFFRCxNQUFNO1FBQ04sSUFBSSxvQkFBb0IsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN4RCxlQUFlLENBQUMsSUFBSSxDQUNsQixJQUFJLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUNqRyxDQUFDO1FBRUYsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1lBQzVDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0YsUUFBUSxRQUFRLENBQUMsSUFBSSxFQUFFO2dCQUNyQixLQUFLLG1CQUFtQixDQUFDLEtBQUs7b0JBQzVCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQy9CLE1BQU07Z0JBQ1IsS0FBSyxtQkFBbUIsQ0FBQyxNQUFNO29CQUM3QixvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDdEQsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDL0IsZUFBZSxDQUFDLElBQUksQ0FDbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FDakcsQ0FBQztvQkFDRixNQUFNO2dCQUNSLEtBQUssbUJBQW1CLENBQUMsSUFBSTtvQkFDM0IsTUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDMUQsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxDQUFDO29CQUN0RCxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUMvQixlQUFlLENBQUMsSUFBSSxDQUNsQixJQUFJLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUNqRyxDQUFDO29CQUNGLE1BQU07Z0JBQ1I7b0JBQ0ksTUFBTTthQUNYO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBa0IsRUFBRSxlQUF1QjtRQUM1RSxPQUFPLEdBQUcsVUFBVSxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBQzVDLENBQUM7Q0FFRjtBQUVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBCaW5kaW5nRGF0YSwgQmluZGluZ1Byb3BlcnR5VHlwZSwgUHJvcGVydHlVdGlsXHJcbn0gZnJvbSAnLi4vLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuaW1wb3J0IHsgQmluZGluZ1BhdGhDb252ZXJ0ZXIgfSBmcm9tICcuL2JpbmRpbmdfcGF0aF9jb252ZXJ0ZXInO1xyXG5cclxuLyoqXHJcbiAqIEVudGl0eVBhdGjovazmjaLlmahcclxuICovXHJcbmNsYXNzIEVudGl0eVBhdGhDb252ZXJ0ZXIge1xyXG5cclxuICAvKipcclxuICAgKiDovazmjaLkuLpFbnRpdHnlj6/or4bliKvnmoTot6/lvoRcclxuICAgKiDmoLnvvJpbXVxyXG4gICAqIOS4u+ihqO+8mlsnaWQ6eHh4JywgJ25hbWUnXSxcclxuICAgKiDlhbPogZTvvJpbJ2lkOnh4eCcsICdkZXB0SW5mbycsICdpZDp4eHgnLCAnbmFtZSddXHJcbiAgICogVURUOiBbJ2lkOnh4eCcsICd1cGRhdGVJbmZvJywgJzonLCAnY3JlYXRlZE9uJ11cclxuICAgKiDku47ooajvvJpbJ2lkOnh4eCcsICdlZHVzJywgJ2lkOnh4eCcsICduYW1lJ10sXHJcbiAgICog5LuO5LuO6KGo77yaWydpZDp4eHgnLCAnZWR1cycsICdpZDp4eHgnLCAnZ3JhZGVzJywgJ2lkOnh4eCcsICduYW1lJ11cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHRvRW50aXR5UGF0aEFycmF5KGJpbmRpbmdQYXRoU3RyaW5nOiBzdHJpbmcsIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoQXJyYXk6IHN0cmluZ1tdID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KGJpbmRpbmdQYXRoU3RyaW5nKTtcclxuICAgIGNvbnN0IGVudGl0eVBhdGhBcnJheTogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBpZiAoYmluZGluZ1BhdGhBcnJheS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIGVudGl0eVBhdGhBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmoLnoioLngrlcclxuICAgIGxldCBjdXJyZW50QmluZGluZ09iamVjdCA9IGJpbmRpbmdEYXRhLmxpc3QuY3VycmVudEl0ZW07XHJcbiAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChcclxuICAgICAgdGhpcy5jcmVhdGVQcmltYXJ5S2V5UGF0aChjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5LCBjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5VmFsdWUpXHJcbiAgICApO1xyXG5cclxuICAgIGJpbmRpbmdQYXRoQXJyYXkuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wSW5mbyA9IFByb3BlcnR5VXRpbC5nZXRQcm9wZXJ0eUJ5TmFtZShjdXJyZW50QmluZGluZ09iamVjdC5wcm9wZXJ0aWVzLCBwcm9wTmFtZSk7XHJcbiAgICAgIHN3aXRjaCAocHJvcEluZm8udHlwZSkge1xyXG4gICAgICAgIGNhc2UgQmluZGluZ1Byb3BlcnR5VHlwZS5QbGFpbjpcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKHByb3BOYW1lKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQmluZGluZ1Byb3BlcnR5VHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICBjdXJyZW50QmluZGluZ09iamVjdCA9IGN1cnJlbnRCaW5kaW5nT2JqZWN0W3Byb3BOYW1lXTtcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKHByb3BOYW1lKTtcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKFxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByaW1hcnlLZXlQYXRoKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXksIGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXlWYWx1ZSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJpbmRpbmdQcm9wZXJ0eVR5cGUuTGlzdDpcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRCaW5kaW5nTGlzdCA9IGN1cnJlbnRCaW5kaW5nT2JqZWN0W3Byb3BOYW1lXTtcclxuICAgICAgICAgIGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gY3VycmVudEJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgICAgICAgZW50aXR5UGF0aEFycmF5LnB1c2gocHJvcE5hbWUpO1xyXG4gICAgICAgICAgZW50aXR5UGF0aEFycmF5LnB1c2goXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJpbWFyeUtleVBhdGgoY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleSwgY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleVZhbHVlKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZW50aXR5UGF0aEFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu66Lev5b6E5Lit55qE5Li76ZSu6YOo5YiGXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVQcmltYXJ5S2V5UGF0aChwcmltYXJ5S2V5OiBzdHJpbmcsIHByaW1hcnlLZXlWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gYCR7cHJpbWFyeUtleX06JHtwcmltYXJ5S2V5VmFsdWV9YDtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBFbnRpdHlQYXRoQ29udmVydGVyIH07XHJcbiJdfQ==