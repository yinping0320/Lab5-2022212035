import { DynamicCommandHandler } from '../command';
import { DomService } from '../schema';
import { SchemaService } from '../schema/schema.service';
export class ContextMetadataBuilder {
    constructor() {
    }
    /**
     * 构造应用程序上下文元数据
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数
     * @returns 应用程序上下文元数据
     */
    buildAppContextMetadata(formMetadataContent, stateMachineMetadata) {
        const module = formMetadataContent.module;
        const uiStates = module.states;
        const appContextMetadata = {
            identify: module.code,
            namespace: '',
            stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),
            uiStates: this.buildUiStateMetadata(uiStates)
        };
        return appContextMetadata;
    }
    /**
     * 构造视图上下文元数据
     * @param componentId 组件标识
     * @param viewModel 视图模型元数据
     * @param declarations 外部接口定义
     * @param subscriptions 事件订阅定义
     * @returns 视图上下文元数据
     */
    buildViewContextMetadata(component, viewModel, schema, controllers, dynamicOptions) {
        const contextMetadata = {
            identify: component.id,
            namespace: '',
            commands: this.buildCommand(viewModel.commands),
            commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),
            commandHandlerExtends: [],
            form: this.buildFormMetadata(viewModel),
            formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component, dynamicOptions),
            subForms: null,
            uiStates: this.buildUiStateMetadata(viewModel.states),
            bindingTo: viewModel.bindTo,
            viewModelCode: viewModel.code
        };
        return contextMetadata;
    }
    buildCommand(commandMetadataArray) {
        const commands = {};
        commandMetadataArray.reduce((previousValue, commandMetadata) => {
            const ngCommand = {
                name: commandMetadata.code,
                params: {},
                paramDescriptions: {}
            };
            commandMetadata.params.reduce((previousCommand, param) => {
                previousCommand.params[param.name] = param.value;
                previousCommand.paramDescriptions[param.name] = { type: 'string' };
                return previousCommand;
            }, ngCommand);
            previousValue[commandMetadata.code] = ngCommand;
            return previousValue;
        }, commands);
        return commands;
    }
    buildFormMetadata(viewModel) {
        return {
            formGroupName: viewModel.name,
            enableValidate: viewModel.enableValidation
        };
    }
    buildFormControlMetadata(formFields, viewModel, schema, component, dynamicOptions) {
        const formControls = {};
        const formFieldIds = formFields.map(formField => formField.id);
        const schemaService = new SchemaService();
        const formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);
        const domService = new DomService();
        formFields.reduce((previousValue, field) => {
            const schemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;
            const binding = schemaEntityField ? schemaEntityField.bindingPath : '';
            const parentElement = {};
            // parentElement 作为引用方式 往外传递
            const domElements = domService.getElementByBinding(component.contents, field.id, parentElement);
            const validRules = [];
            let matchedElement;
            let parentMatchedElement;
            if (domElements && domElements.length >= 1) {
                matchedElement = domElements[0].element;
                parentMatchedElement = domElements[0].parentElement;
                const keys = 'maxValue,minValue,required,require';
                Object.keys(matchedElement).forEach(key => {
                    if (keys.includes(key)) {
                        if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                            // 把最大值属性转换成validRule
                            validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });
                        }
                        else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                            // 把最小值属性转换成validRule
                            validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });
                        }
                        else if (key === 'required' || key === 'require') {
                            // 把必填属性转换成validRule
                            // 必填表达式可以为状态机
                            if (matchedElement[key] === 'true' || matchedElement[key] === true) {
                                validRules.push({ type: 'required', constraints: [true] });
                            }
                        }
                    }
                });
            }
            previousValue[field.fieldName] = {
                /** 控件标识 */
                id: field.fieldName,
                /** 控件名称 todo: 需要支持多语言 */
                name: this.getTitle(matchedElement, parentMatchedElement, field.fieldName),
                /** 绑定字段路径 */
                binding,
                /** 控件值更新时机 */
                updateOn: field.updateOn,
                /** 控件默认名称 */
                defaultI18nValue: this.getTitle(matchedElement, parentMatchedElement, field.fieldName),
                valueChanging: field.valueChanging,
                valueChanged: field.valueChanged,
                valueConverter: this.generateConverter(schemaEntityField, dynamicOptions),
                /** 验证规则 */
                validRules
            };
            return previousValue;
        }, formControls);
        return formControls;
    }
    /**
     * 获取对应的title值
     * @param matchedElement
     * @param defaultValue
     * @returns
     */
    getTitle(matchedElement, parentMatchedElement, defaultValue) {
        if (!matchedElement) {
            return defaultValue;
        }
        if (parentMatchedElement.type == 'GridField') {
            return parentMatchedElement.caption || defaultValue;
        }
        return matchedElement.title || defaultValue;
    }
    /**
     * 构造对应的converter
     * @param field
     * @returns
     */
    generateConverter(field, dynamicOptions) {
        const valueConverterMap = dynamicOptions["valueConverterMap"];
        if (!valueConverterMap || !field) {
            return;
        }
        if (field.type && (field.type.name == 'Date' || field.type.name == 'DateTime') && !field.converter) {
            field.converter = valueConverterMap["Date"];
        }
        if (field.multiLanguage && !field.converter) {
            field.converter = valueConverterMap["MultiLang"];
        }
        return field.converter;
    }
    /**
     * 由状态机元数据创建状态机上下文描述
     * @param stateMachineMetadata 状态机元数据
     * @returns 状态机上下文描述
     */
    buildStataMachineMetadata(stateMachineMetadata) {
        // 声明状态机上下文元数据
        const stateMachine = {
            states: {},
            renderStates: {},
            actions: {}
        };
        if (!stateMachineMetadata) {
            return stateMachine;
        }
        // 由状态机元数据构造NgState
        stateMachineMetadata.state.reduce((previousValue, state) => {
            previousValue.states[state.state] = {
                initialState: state.state === stateMachineMetadata.initialState
            };
            return previousValue;
        }, stateMachine);
        // 由状态机元数据构造NgRenderState
        Object.keys(stateMachineMetadata.renderState)
            .reduce((previousValue, renderStateName) => {
            const renderStateMetadata = stateMachineMetadata.renderState[renderStateName];
            const renderFunction = this.buildRenderFunction(renderStateMetadata);
            previousValue.renderStates[renderStateName] = {
                render: renderFunction
            };
            // previousValue.renderStates[renderStateName] = {
            //   render: (context: StateMachineContext) => {
            //     return context.parser.parse(renderStateMetadata.condition, this);
            //   }
            // };
            return previousValue;
        }, stateMachine);
        // 由状态机元数据构造NgAction
        Object.keys(stateMachineMetadata.action)
            .reduce((previousValue, actionName) => {
            const actionMetadata = stateMachineMetadata.action[actionName];
            previousValue.actions[actionName] = {
                precondition: actionMetadata.precondition,
                transitTo: actionMetadata.transitTo
            };
            return previousValue;
        }, stateMachine);
        // 返回状态机元数据
        return stateMachine;
    }
    buildUiStateMetadata(states) {
        const uiStates = {};
        states.reduce((previousValue, uiState) => {
            previousValue[uiState.code] = {
                stateName: uiState.code
            };
            return previousValue;
        }, uiStates);
        return uiStates;
    }
    buildRenderFunction(renderStateMetadata) {
        if (renderStateMetadata && renderStateMetadata.condition.length) {
            const renderFunctionString = renderStateMetadata.condition.reduce((previousFunctionString, condition) => {
                let conditionTarget = condition.target;
                if (!conditionTarget.startsWith('\'')) {
                    conditionTarget = `'${conditionTarget}`;
                }
                if (!conditionTarget.endsWith('\'')) {
                    conditionTarget = `${conditionTarget}'`;
                }
                let conditionSource = condition.source;
                if (conditionSource.indexOf('\'') < 0) {
                    conditionSource = `'${conditionSource}'`;
                }
                if (conditionSource.indexOf('getUIState') > -1) {
                    conditionSource = conditionSource.replace('getUIState', 'context.getUIState');
                }
                if (conditionSource.indexOf('getData') > -1) {
                    conditionSource = conditionSource.replace('getData', 'context.getData');
                }
                // tslint:disable-next-line: max-line-length
                let functionString = `${condition.lBracket || ''}context.parse(${conditionSource},'source')${condition.compare}${condition.target}${condition.rBracket || ''}`;
                if (condition.relation) {
                    switch (condition.relation.trim().toLocaleLowerCase()) {
                        case 'or':
                            functionString += '||';
                            break;
                        case 'and':
                            functionString += '&&';
                            break;
                    }
                }
                return previousFunctionString + functionString;
            }, '');
            if (renderFunctionString) {
                return new Function('context', `return ${renderFunctionString};`);
            }
        }
        return new Function('context', 'return true;');
    }
    buildCommandHandlers(commandMetadataArray, controllers) {
        const commandHandlers = [];
        commandMetadataArray.reduce((previousValue, commandReference) => {
            const commandName = commandReference.code;
            const controllerId = commandReference.cmpId;
            const controller = controllers[controllerId];
            const method = Object.assign({}, controller.methods[commandReference.handlerName]);
            method.params = method.params && method.params.map(param => Object.assign({}, param));
            if (method.params && method.params.length) {
                commandReference.params.reduce((previousMethodValue, param) => {
                    const methodParam = previousMethodValue.params.find(value => value.name === param.name);
                    if (methodParam) {
                        methodParam.expression = param.value;
                    }
                    return previousMethodValue;
                }, method);
            }
            const commandHandler = new DynamicCommandHandler(commandName, method);
            previousValue.push(commandHandler);
            return previousValue;
        }, commandHandlers);
        return commandHandlers;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX21ldGFkYXRhX2NvbGxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHBfbWV0YWRhdGFfY29sbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBK0UscUJBQXFCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHaEksT0FBTyxFQUFFLFVBQVUsRUFBNkIsTUFBTSxXQUFXLENBQUM7QUFLbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBS3pELE1BQU0sT0FBTyxzQkFBc0I7SUFFakM7SUFFQSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSx1QkFBdUIsQ0FBQyxtQkFBd0IsRUFBRSxvQkFBbUM7UUFDMUYsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDO1FBQzFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDL0IsTUFBTSxrQkFBa0IsR0FBRztZQUN6QixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDckIsU0FBUyxFQUFFLEVBQUU7WUFDYixZQUFZLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDO1lBQ2xFLFFBQVEsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDO1NBQzlDLENBQUM7UUFDRixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFHRDs7Ozs7OztPQU9HO0lBQ0ksd0JBQXdCLENBQzdCLFNBQWMsRUFDZCxTQUF5QixFQUN6QixNQUFjLEVBQ2QsV0FBZ0QsRUFDaEQsY0FBbUI7UUFFbkIsTUFBTSxlQUFlLEdBQUc7WUFDdEIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLFNBQVMsRUFBRSxFQUFFO1lBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUMvQyxlQUFlLEVBQUUs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LEVBQUU7d0JBQ2YsV0FBVyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO3FCQUN0QztvQkFDRCxPQUFPLG1CQUFtQixDQUFDO2dCQUM3QixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDWjtZQUNELE1BQU0sY0FBYyxHQUFHLElBQUkscUJBQXFCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RFLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDbkMsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21tYW5kQ29udHJvbGxlciwgQ29tbWFuZEhhbmRsZXIsIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIsIENvbnRyb2xsZXJNZXRob2QsIER5bmFtaWNDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uL2NvbW1hbmQnO1xyXG5pbXBvcnQgeyBWYWxpZGF0ZVJ1bGUgfSBmcm9tICcuLi9lbnRpdHknO1xyXG5pbXBvcnQgeyBOZ0Zvcm1Db250cm9sLCBOZ1ZhbGlkYXRlRm9ybSB9IGZyb20gJy4uL2Zvcm0nO1xyXG5pbXBvcnQgeyBEb21TZXJ2aWNlLCBTY2hlbWEsIFNjaGVtYUVudGl0eUZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcclxuaW1wb3J0IHtcclxuICBJRm9ybVZpZXdNb2RlbCwgSUZvcm1WaWV3TW9kZWxDb21tYW5kLCBJRm9ybVZpZXdNb2RlbENvbW1hbmRQYXJhbSwgSUZvcm1WaWV3TW9kZWxGaWVsZCxcclxuICBJRm9ybVZpZXdNb2RlbFVpU3RhdGUsIElSZW5kZXJTdGF0ZSwgSVN0YXRlTWFjaGluZVxyXG59IGZyb20gJy4uL3NjaGVtYS9mb3JtLW1ldGFkYXRhJztcclxuaW1wb3J0IHsgU2NoZW1hU2VydmljZSB9IGZyb20gJy4uL3NjaGVtYS9zY2hlbWEuc2VydmljZSc7XHJcbmltcG9ydCB7IE5nUGFyYW0gfSBmcm9tICcuLi91aS1zdGF0ZSc7XHJcbmltcG9ydCB7IE5nQ29tbWFuZCB9IGZyb20gJy4uL3ZpZXctbW9kZWwnO1xyXG5pbXBvcnQgeyBJQ29udGV4dE1ldGFkYXRhLCBJQ29udGV4dFN0YXRlTWFjaGluZU1ldGFkYXRhIH0gZnJvbSAnLi9hcHBfbWV0YWRhdGEnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRleHRNZXRhZGF0YUJ1aWxkZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlupTnlKjnqIvluo/kuIrkuIvmloflhYPmlbDmja5cclxuICAgKiBAcGFyYW0gZm9ybU1ldGFkYXRhQ29udGVudCDooajljZXlhYPmlbDmja5cclxuICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lTWV0YWRhdGEg54q25oCB5py65YWD5pWwXHJcbiAgICogQHJldHVybnMg5bqU55So56iL5bqP5LiK5LiL5paH5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgcHVibGljIGJ1aWxkQXBwQ29udGV4dE1ldGFkYXRhKGZvcm1NZXRhZGF0YUNvbnRlbnQ6IGFueSwgc3RhdGVNYWNoaW5lTWV0YWRhdGE6IElTdGF0ZU1hY2hpbmUpOiBJQ29udGV4dE1ldGFkYXRhIHtcclxuICAgIGNvbnN0IG1vZHVsZSA9IGZvcm1NZXRhZGF0YUNvbnRlbnQubW9kdWxlO1xyXG4gICAgY29uc3QgdWlTdGF0ZXMgPSBtb2R1bGUuc3RhdGVzO1xyXG4gICAgY29uc3QgYXBwQ29udGV4dE1ldGFkYXRhID0ge1xyXG4gICAgICBpZGVudGlmeTogbW9kdWxlLmNvZGUsXHJcbiAgICAgIG5hbWVzcGFjZTogJycsXHJcbiAgICAgIHN0YXRlTWFjaGluZTogdGhpcy5idWlsZFN0YXRhTWFjaGluZU1ldGFkYXRhKHN0YXRlTWFjaGluZU1ldGFkYXRhKSxcclxuICAgICAgdWlTdGF0ZXM6IHRoaXMuYnVpbGRVaVN0YXRlTWV0YWRhdGEodWlTdGF0ZXMpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFwcENvbnRleHRNZXRhZGF0YTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDop4blm77kuIrkuIvmloflhYPmlbDmja5cclxuICAgKiBAcGFyYW0gY29tcG9uZW50SWQg57uE5Lu25qCH6K+GXHJcbiAgICogQHBhcmFtIHZpZXdNb2RlbCDop4blm77mqKHlnovlhYPmlbDmja5cclxuICAgKiBAcGFyYW0gZGVjbGFyYXRpb25zIOWklumDqOaOpeWPo+WumuS5iVxyXG4gICAqIEBwYXJhbSBzdWJzY3JpcHRpb25zIOS6i+S7tuiuoumYheWumuS5iVxyXG4gICAqIEByZXR1cm5zIOinhuWbvuS4iuS4i+aWh+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBidWlsZFZpZXdDb250ZXh0TWV0YWRhdGEoXHJcbiAgICBjb21wb25lbnQ6IGFueSxcclxuICAgIHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwsXHJcbiAgICBzY2hlbWE6IFNjaGVtYSxcclxuICAgIGNvbnRyb2xsZXJzOiB7IFtpZDogc3RyaW5nXTogQ29tbWFuZENvbnRyb2xsZXIgfSxcclxuICAgIGR5bmFtaWNPcHRpb25zOiBhbnlcclxuICApOiBJQ29udGV4dE1ldGFkYXRhIHtcclxuICAgIGNvbnN0IGNvbnRleHRNZXRhZGF0YSA9IHtcclxuICAgICAgaWRlbnRpZnk6IGNvbXBvbmVudC5pZCxcclxuICAgICAgbmFtZXNwYWNlOiAnJyxcclxuICAgICAgY29tbWFuZHM6IHRoaXMuYnVpbGRDb21tYW5kKHZpZXdNb2RlbC5jb21tYW5kcyksXHJcbiAgICAgIGNvbW1hbmRIYW5kbGVyczogdGhpcy5idWlsZENvbW1hbmRIYW5kbGVycyh2aWV3TW9kZWwuY29tbWFuZHMsIGNvbnRyb2xsZXJzKSxcclxuICAgICAgY29tbWFuZEhhbmRsZXJFeHRlbmRzOiBbXSxcclxuICAgICAgZm9ybTogdGhpcy5idWlsZEZvcm1NZXRhZGF0YSh2aWV3TW9kZWwpLFxyXG4gICAgICBmb3JtQ29udHJvbHM6IHRoaXMuYnVpbGRGb3JtQ29udHJvbE1ldGFkYXRhKHZpZXdNb2RlbC5maWVsZHMsIHZpZXdNb2RlbCwgc2NoZW1hLCBjb21wb25lbnQsIGR5bmFtaWNPcHRpb25zKSxcclxuICAgICAgc3ViRm9ybXM6IG51bGwsXHJcbiAgICAgIHVpU3RhdGVzOiB0aGlzLmJ1aWxkVWlTdGF0ZU1ldGFkYXRhKHZpZXdNb2RlbC5zdGF0ZXMpLFxyXG4gICAgICBiaW5kaW5nVG86IHZpZXdNb2RlbC5iaW5kVG8sXHJcbiAgICAgIHZpZXdNb2RlbENvZGU6IHZpZXdNb2RlbC5jb2RlXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNvbnRleHRNZXRhZGF0YTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRDb21tYW5kKGNvbW1hbmRNZXRhZGF0YUFycmF5OiBJRm9ybVZpZXdNb2RlbENvbW1hbmRbXSk6IHsgW2NvbW1hbmROYW1lOiBzdHJpbmddOiBOZ0NvbW1hbmQgfSB7XHJcbiAgICBjb25zdCBjb21tYW5kcyA9IHt9O1xyXG4gICAgY29tbWFuZE1ldGFkYXRhQXJyYXkucmVkdWNlPHsgW2NvbW1hbmROYW1lOiBzdHJpbmddOiBOZ0NvbW1hbmQgfT4oKHByZXZpb3VzVmFsdWUsIGNvbW1hbmRNZXRhZGF0YTogSUZvcm1WaWV3TW9kZWxDb21tYW5kKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5nQ29tbWFuZDogTmdDb21tYW5kID0ge1xyXG4gICAgICAgIG5hbWU6IGNvbW1hbmRNZXRhZGF0YS5jb2RlLFxyXG4gICAgICAgIHBhcmFtczoge30sXHJcbiAgICAgICAgcGFyYW1EZXNjcmlwdGlvbnM6IHt9XHJcbiAgICAgIH07XHJcbiAgICAgIGNvbW1hbmRNZXRhZGF0YS5wYXJhbXMucmVkdWNlPE5nQ29tbWFuZD4oKHByZXZpb3VzQ29tbWFuZCwgcGFyYW0pID0+IHtcclxuICAgICAgICBwcmV2aW91c0NvbW1hbmQucGFyYW1zW3BhcmFtLm5hbWVdID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgcHJldmlvdXNDb21tYW5kLnBhcmFtRGVzY3JpcHRpb25zW3BhcmFtLm5hbWVdID0geyB0eXBlOiAnc3RyaW5nJyB9O1xyXG4gICAgICAgIHJldHVybiBwcmV2aW91c0NvbW1hbmQ7XHJcbiAgICAgIH0sIG5nQ29tbWFuZCk7XHJcbiAgICAgIHByZXZpb3VzVmFsdWVbY29tbWFuZE1ldGFkYXRhLmNvZGVdID0gbmdDb21tYW5kO1xyXG4gICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAgIH0sIGNvbW1hbmRzKTtcclxuICAgIHJldHVybiBjb21tYW5kcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRGb3JtTWV0YWRhdGEodmlld01vZGVsOiBJRm9ybVZpZXdNb2RlbCk6IE5nVmFsaWRhdGVGb3JtIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZvcm1Hcm91cE5hbWU6IHZpZXdNb2RlbC5uYW1lLFxyXG4gICAgICBlbmFibGVWYWxpZGF0ZTogdmlld01vZGVsLmVuYWJsZVZhbGlkYXRpb25cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkRm9ybUNvbnRyb2xNZXRhZGF0YShmb3JtRmllbGRzOiBJRm9ybVZpZXdNb2RlbEZpZWxkW10sIHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwsIHNjaGVtYTogU2NoZW1hLCBjb21wb25lbnQ6IGFueSwgZHluYW1pY09wdGlvbnM6IGFueSlcclxuICAgIDogeyBbY29udHJvbE5hbWU6IHN0cmluZ106IE5nRm9ybUNvbnRyb2wgfSB7XHJcbiAgICBjb25zdCBmb3JtQ29udHJvbHM6IHsgW2NvbnRyb2xOYW1lOiBzdHJpbmddOiBOZ0Zvcm1Db250cm9sIH0gPSB7fTtcclxuICAgIGNvbnN0IGZvcm1GaWVsZElkcyA9IGZvcm1GaWVsZHMubWFwKGZvcm1GaWVsZCA9PiBmb3JtRmllbGQuaWQpO1xyXG4gICAgY29uc3Qgc2NoZW1hU2VydmljZSA9IG5ldyBTY2hlbWFTZXJ2aWNlKCk7XHJcbiAgICBjb25zdCBmb3JtRmllbGRzTWFwID0gc2NoZW1hU2VydmljZS5nZXRGaWVsZHNCeUlkcyhmb3JtRmllbGRJZHMsIHNjaGVtYSwgdmlld01vZGVsKTtcclxuICAgIGNvbnN0IGRvbVNlcnZpY2UgPSBuZXcgRG9tU2VydmljZSgpO1xyXG5cclxuICAgIGZvcm1GaWVsZHMucmVkdWNlPHsgW2NvbnRyb2xOYW1lOiBzdHJpbmddOiBOZ0Zvcm1Db250cm9sIH0+KChwcmV2aW91c1ZhbHVlLCBmaWVsZCkgPT4ge1xyXG4gICAgICBjb25zdCBzY2hlbWFFbnRpdHlGaWVsZDogU2NoZW1hRW50aXR5RmllbGQgPSBmb3JtRmllbGRzTWFwLmhhcyhmaWVsZC5pZCkgPyBmb3JtRmllbGRzTWFwLmdldChmaWVsZC5pZCkgOiBudWxsO1xyXG4gICAgICBjb25zdCBiaW5kaW5nID0gc2NoZW1hRW50aXR5RmllbGQgPyBzY2hlbWFFbnRpdHlGaWVsZC5iaW5kaW5nUGF0aCA6ICcnO1xyXG4gICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0ge307XHJcbiAgICAgIC8vIHBhcmVudEVsZW1lbnQg5L2c5Li65byV55So5pa55byPIOW+gOWkluS8oOmAklxyXG4gICAgICBjb25zdCBkb21FbGVtZW50cyA9IGRvbVNlcnZpY2UuZ2V0RWxlbWVudEJ5QmluZGluZyhjb21wb25lbnQuY29udGVudHMsIGZpZWxkLmlkLCBwYXJlbnRFbGVtZW50KTtcclxuICAgICAgY29uc3QgdmFsaWRSdWxlczogVmFsaWRhdGVSdWxlW10gPSBbXTtcclxuICAgICAgbGV0IG1hdGNoZWRFbGVtZW50O1xyXG4gICAgICBsZXQgcGFyZW50TWF0Y2hlZEVsZW1lbnQ7XHJcbiAgICAgIGlmIChkb21FbGVtZW50cyAmJiBkb21FbGVtZW50cy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgIG1hdGNoZWRFbGVtZW50ID0gZG9tRWxlbWVudHNbMF0uZWxlbWVudDtcclxuICAgICAgICBwYXJlbnRNYXRjaGVkRWxlbWVudCA9IGRvbUVsZW1lbnRzWzBdLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9ICdtYXhWYWx1ZSxtaW5WYWx1ZSxyZXF1aXJlZCxyZXF1aXJlJztcclxuICAgICAgICBPYmplY3Qua2V5cyhtYXRjaGVkRWxlbWVudCkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgaWYgKGtleXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnbWF4VmFsdWUnICYmIChtYXRjaGVkRWxlbWVudFtrZXldICE9PSBudWxsICYmIG1hdGNoZWRFbGVtZW50W2tleV0gIT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgICAgICAvLyDmiormnIDlpKflgLzlsZ7mgKfovazmjaLmiJB2YWxpZFJ1bGVcclxuICAgICAgICAgICAgICB2YWxpZFJ1bGVzLnB1c2goeyB0eXBlOiAnbWF4VmFsdWUnLCBjb25zdHJhaW50czogW21hdGNoZWRFbGVtZW50W2tleV1dIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ21pblZhbHVlJyAmJiAobWF0Y2hlZEVsZW1lbnRba2V5XSAhPT0gbnVsbCAmJiBtYXRjaGVkRWxlbWVudFtrZXldICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgLy8g5oqK5pyA5bCP5YC85bGe5oCn6L2s5o2i5oiQdmFsaWRSdWxlXHJcbiAgICAgICAgICAgICAgdmFsaWRSdWxlcy5wdXNoKHsgdHlwZTogJ21pblZhbHVlJywgY29uc3RyYWludHM6IFttYXRjaGVkRWxlbWVudFtrZXldXSB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdyZXF1aXJlZCcgfHwga2V5ID09PSAncmVxdWlyZScpIHtcclxuICAgICAgICAgICAgICAvLyDmiorlv4XloavlsZ7mgKfovazmjaLmiJB2YWxpZFJ1bGVcclxuICAgICAgICAgICAgICAvLyDlv4Xloavooajovr7lvI/lj6/ku6XkuLrnirbmgIHmnLpcclxuICAgICAgICAgICAgICBpZiAobWF0Y2hlZEVsZW1lbnRba2V5XSA9PT0gJ3RydWUnIHx8IG1hdGNoZWRFbGVtZW50W2tleV0gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkUnVsZXMucHVzaCh7IHR5cGU6ICdyZXF1aXJlZCcsIGNvbnN0cmFpbnRzOiBbdHJ1ZV0gfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcHJldmlvdXNWYWx1ZVtmaWVsZC5maWVsZE5hbWVdID0ge1xyXG4gICAgICAgIC8qKiDmjqfku7bmoIfor4YgKi9cclxuICAgICAgICBpZDogZmllbGQuZmllbGROYW1lLCAvL2Ake2ZpZWxkLmZpZWxkTmFtZX1fJHtmaWVsZC5pZC5zdWJzdHIoMCwgMTMpLnJlcGxhY2UoJy0nLCAnXycpfWAsXHJcbiAgICAgICAgLyoqIOaOp+S7tuWQjeensCB0b2RvOiDpnIDopoHmlK/mjIHlpJror63oqIAgKi9cclxuICAgICAgICBuYW1lOiB0aGlzLmdldFRpdGxlKG1hdGNoZWRFbGVtZW50LCBwYXJlbnRNYXRjaGVkRWxlbWVudCwgZmllbGQuZmllbGROYW1lKSxcclxuICAgICAgICAvKiog57uR5a6a5a2X5q616Lev5b6EICovXHJcbiAgICAgICAgYmluZGluZyxcclxuICAgICAgICAvKiog5o6n5Lu25YC85pu05paw5pe25py6ICovXHJcbiAgICAgICAgdXBkYXRlT246IGZpZWxkLnVwZGF0ZU9uLFxyXG4gICAgICAgIC8qKiDmjqfku7bpu5jorqTlkI3np7AgKi9cclxuICAgICAgICBkZWZhdWx0STE4blZhbHVlOiB0aGlzLmdldFRpdGxlKG1hdGNoZWRFbGVtZW50LCBwYXJlbnRNYXRjaGVkRWxlbWVudCwgZmllbGQuZmllbGROYW1lKSxcclxuICAgICAgICB2YWx1ZUNoYW5naW5nOiBmaWVsZC52YWx1ZUNoYW5naW5nLFxyXG4gICAgICAgIHZhbHVlQ2hhbmdlZDogZmllbGQudmFsdWVDaGFuZ2VkLFxyXG4gICAgICAgIHZhbHVlQ29udmVydGVyOiB0aGlzLmdlbmVyYXRlQ29udmVydGVyKHNjaGVtYUVudGl0eUZpZWxkLCBkeW5hbWljT3B0aW9ucyksXHJcbiAgICAgICAgLyoqIOmqjOivgeinhOWImSAqL1xyXG4gICAgICAgIHZhbGlkUnVsZXNcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xyXG4gICAgfSwgZm9ybUNvbnRyb2xzKTtcclxuXHJcbiAgICByZXR1cm4gZm9ybUNvbnRyb2xzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a+55bqU55qEdGl0bGXlgLxcclxuICAgKiBAcGFyYW0gbWF0Y2hlZEVsZW1lbnRcclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwcml2YXRlIGdldFRpdGxlKG1hdGNoZWRFbGVtZW50LCBwYXJlbnRNYXRjaGVkRWxlbWVudCwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICBpZiAoIW1hdGNoZWRFbGVtZW50KSB7XHJcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAocGFyZW50TWF0Y2hlZEVsZW1lbnQudHlwZSA9PSAnR3JpZEZpZWxkJykge1xyXG4gICAgICByZXR1cm4gcGFyZW50TWF0Y2hlZEVsZW1lbnQuY2FwdGlvbiB8fCBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hlZEVsZW1lbnQudGl0bGUgfHwgZGVmYXVsdFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5a+55bqU55qEY29udmVydGVyXHJcbiAgICogQHBhcmFtIGZpZWxkXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwcml2YXRlIGdlbmVyYXRlQ29udmVydGVyKGZpZWxkLCBkeW5hbWljT3B0aW9ucykge1xyXG4gICAgY29uc3QgdmFsdWVDb252ZXJ0ZXJNYXAgPSBkeW5hbWljT3B0aW9uc1tcInZhbHVlQ29udmVydGVyTWFwXCJdO1xyXG4gICAgaWYgKCF2YWx1ZUNvbnZlcnRlck1hcCB8fCAhZmllbGQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGZpZWxkLnR5cGUgJiYgKGZpZWxkLnR5cGUubmFtZSA9PSAnRGF0ZScgfHwgZmllbGQudHlwZS5uYW1lID09ICdEYXRlVGltZScpICYmICFmaWVsZC5jb252ZXJ0ZXIpIHtcclxuICAgICAgZmllbGQuY29udmVydGVyID0gdmFsdWVDb252ZXJ0ZXJNYXBbXCJEYXRlXCJdO1xyXG4gICAgfVxyXG4gICAgaWYgKGZpZWxkLm11bHRpTGFuZ3VhZ2UgJiYgIWZpZWxkLmNvbnZlcnRlcikge1xyXG4gICAgICBmaWVsZC5jb252ZXJ0ZXIgPSB2YWx1ZUNvbnZlcnRlck1hcFtcIk11bHRpTGFuZ1wiXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmllbGQuY29udmVydGVyO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDnlLHnirbmgIHmnLrlhYPmlbDmja7liJvlu7rnirbmgIHmnLrkuIrkuIvmlofmj4/ov7BcclxuICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lTWV0YWRhdGEg54q25oCB5py65YWD5pWw5o2uXHJcbiAgICogQHJldHVybnMg54q25oCB5py65LiK5LiL5paH5o+P6L+wXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZFN0YXRhTWFjaGluZU1ldGFkYXRhKHN0YXRlTWFjaGluZU1ldGFkYXRhOiBJU3RhdGVNYWNoaW5lKTogSUNvbnRleHRTdGF0ZU1hY2hpbmVNZXRhZGF0YSB7XHJcbiAgICAvLyDlo7DmmI7nirbmgIHmnLrkuIrkuIvmloflhYPmlbDmja5cclxuICAgIGNvbnN0IHN0YXRlTWFjaGluZTogSUNvbnRleHRTdGF0ZU1hY2hpbmVNZXRhZGF0YSA9IHtcclxuICAgICAgc3RhdGVzOiB7fSxcclxuICAgICAgcmVuZGVyU3RhdGVzOiB7fSxcclxuICAgICAgYWN0aW9uczoge31cclxuICAgIH07XHJcblxyXG4gICAgaWYgKCFzdGF0ZU1hY2hpbmVNZXRhZGF0YSkge1xyXG4gICAgICByZXR1cm4gc3RhdGVNYWNoaW5lO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOeUseeKtuaAgeacuuWFg+aVsOaNruaehOmAoE5nU3RhdGVcclxuICAgIHN0YXRlTWFjaGluZU1ldGFkYXRhLnN0YXRlLnJlZHVjZTxJQ29udGV4dFN0YXRlTWFjaGluZU1ldGFkYXRhPigocHJldmlvdXNWYWx1ZSwgc3RhdGUpID0+IHtcclxuICAgICAgcHJldmlvdXNWYWx1ZS5zdGF0ZXNbc3RhdGUuc3RhdGVdID0ge1xyXG4gICAgICAgIGluaXRpYWxTdGF0ZTogc3RhdGUuc3RhdGUgPT09IHN0YXRlTWFjaGluZU1ldGFkYXRhLmluaXRpYWxTdGF0ZVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAgIH0sIHN0YXRlTWFjaGluZSk7XHJcbiAgICAvLyDnlLHnirbmgIHmnLrlhYPmlbDmja7mnoTpgKBOZ1JlbmRlclN0YXRlXHJcbiAgICBPYmplY3Qua2V5cyhzdGF0ZU1hY2hpbmVNZXRhZGF0YS5yZW5kZXJTdGF0ZSlcclxuICAgICAgLnJlZHVjZTxJQ29udGV4dFN0YXRlTWFjaGluZU1ldGFkYXRhPigocHJldmlvdXNWYWx1ZSwgcmVuZGVyU3RhdGVOYW1lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyU3RhdGVNZXRhZGF0YSA9IHN0YXRlTWFjaGluZU1ldGFkYXRhLnJlbmRlclN0YXRlW3JlbmRlclN0YXRlTmFtZV07XHJcbiAgICAgICAgY29uc3QgcmVuZGVyRnVuY3Rpb24gPSB0aGlzLmJ1aWxkUmVuZGVyRnVuY3Rpb24ocmVuZGVyU3RhdGVNZXRhZGF0YSk7XHJcbiAgICAgICAgcHJldmlvdXNWYWx1ZS5yZW5kZXJTdGF0ZXNbcmVuZGVyU3RhdGVOYW1lXSA9IHtcclxuICAgICAgICAgIHJlbmRlcjogcmVuZGVyRnVuY3Rpb25cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHByZXZpb3VzVmFsdWUucmVuZGVyU3RhdGVzW3JlbmRlclN0YXRlTmFtZV0gPSB7XHJcbiAgICAgICAgLy8gICByZW5kZXI6IChjb250ZXh0OiBTdGF0ZU1hY2hpbmVDb250ZXh0KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiBjb250ZXh0LnBhcnNlci5wYXJzZShyZW5kZXJTdGF0ZU1ldGFkYXRhLmNvbmRpdGlvbiwgdGhpcyk7XHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgLy8gfTtcclxuICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAgICAgfSwgc3RhdGVNYWNoaW5lKTtcclxuICAgIC8vIOeUseeKtuaAgeacuuWFg+aVsOaNruaehOmAoE5nQWN0aW9uXHJcbiAgICBPYmplY3Qua2V5cyhzdGF0ZU1hY2hpbmVNZXRhZGF0YS5hY3Rpb24pXHJcbiAgICAgIC5yZWR1Y2U8SUNvbnRleHRTdGF0ZU1hY2hpbmVNZXRhZGF0YT4oKHByZXZpb3VzVmFsdWUsIGFjdGlvbk5hbWUpID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb25NZXRhZGF0YSA9IHN0YXRlTWFjaGluZU1ldGFkYXRhLmFjdGlvblthY3Rpb25OYW1lXTtcclxuICAgICAgICBwcmV2aW91c1ZhbHVlLmFjdGlvbnNbYWN0aW9uTmFtZV0gPSB7XHJcbiAgICAgICAgICBwcmVjb25kaXRpb246IGFjdGlvbk1ldGFkYXRhLnByZWNvbmRpdGlvbixcclxuICAgICAgICAgIHRyYW5zaXRUbzogYWN0aW9uTWV0YWRhdGEudHJhbnNpdFRvXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAgICAgfSwgc3RhdGVNYWNoaW5lKTtcclxuICAgIC8vIOi/lOWbnueKtuaAgeacuuWFg+aVsOaNrlxyXG4gICAgcmV0dXJuIHN0YXRlTWFjaGluZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRVaVN0YXRlTWV0YWRhdGEoc3RhdGVzOiBJRm9ybVZpZXdNb2RlbFVpU3RhdGVbXSk6IHsgW3N0YXRlTmFtZTogc3RyaW5nXTogTmdQYXJhbSB9IHtcclxuICAgIGNvbnN0IHVpU3RhdGVzOiB7IFtzdGF0ZU5hbWU6IHN0cmluZ106IE5nUGFyYW0gfSA9IHt9O1xyXG4gICAgc3RhdGVzLnJlZHVjZTx7IFtzdGF0ZU5hbWU6IHN0cmluZ106IE5nUGFyYW0gfT4oKHByZXZpb3VzVmFsdWUsIHVpU3RhdGUpID0+IHtcclxuICAgICAgcHJldmlvdXNWYWx1ZVt1aVN0YXRlLmNvZGVdID0ge1xyXG4gICAgICAgIHN0YXRlTmFtZTogdWlTdGF0ZS5jb2RlXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xyXG4gICAgfSwgdWlTdGF0ZXMpO1xyXG4gICAgcmV0dXJuIHVpU3RhdGVzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZFJlbmRlckZ1bmN0aW9uKHJlbmRlclN0YXRlTWV0YWRhdGE6IElSZW5kZXJTdGF0ZSk6IGFueSB7XHJcbiAgICBpZiAocmVuZGVyU3RhdGVNZXRhZGF0YSAmJiByZW5kZXJTdGF0ZU1ldGFkYXRhLmNvbmRpdGlvbi5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgcmVuZGVyRnVuY3Rpb25TdHJpbmcgPSByZW5kZXJTdGF0ZU1ldGFkYXRhLmNvbmRpdGlvbi5yZWR1Y2U8c3RyaW5nPigocHJldmlvdXNGdW5jdGlvblN0cmluZywgY29uZGl0aW9uKSA9PiB7XHJcbiAgICAgICAgbGV0IGNvbmRpdGlvblRhcmdldCA9IGNvbmRpdGlvbi50YXJnZXQ7XHJcbiAgICAgICAgaWYgKCFjb25kaXRpb25UYXJnZXQuc3RhcnRzV2l0aCgnXFwnJykpIHtcclxuICAgICAgICAgIGNvbmRpdGlvblRhcmdldCA9IGAnJHtjb25kaXRpb25UYXJnZXR9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFjb25kaXRpb25UYXJnZXQuZW5kc1dpdGgoJ1xcJycpKSB7XHJcbiAgICAgICAgICBjb25kaXRpb25UYXJnZXQgPSBgJHtjb25kaXRpb25UYXJnZXR9J2A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjb25kaXRpb25Tb3VyY2UgPSBjb25kaXRpb24uc291cmNlO1xyXG4gICAgICAgIGlmIChjb25kaXRpb25Tb3VyY2UuaW5kZXhPZignXFwnJykgPCAwKSB7XHJcbiAgICAgICAgICBjb25kaXRpb25Tb3VyY2UgPSBgJyR7Y29uZGl0aW9uU291cmNlfSdgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29uZGl0aW9uU291cmNlLmluZGV4T2YoJ2dldFVJU3RhdGUnKSA+IC0xKSB7XHJcbiAgICAgICAgICBjb25kaXRpb25Tb3VyY2UgPSBjb25kaXRpb25Tb3VyY2UucmVwbGFjZSgnZ2V0VUlTdGF0ZScsICdjb250ZXh0LmdldFVJU3RhdGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvblNvdXJjZS5pbmRleE9mKCdnZXREYXRhJykgPiAtMSkge1xyXG4gICAgICAgICAgY29uZGl0aW9uU291cmNlID0gY29uZGl0aW9uU291cmNlLnJlcGxhY2UoJ2dldERhdGEnLCAnY29udGV4dC5nZXREYXRhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICAgICAgbGV0IGZ1bmN0aW9uU3RyaW5nID0gYCR7Y29uZGl0aW9uLmxCcmFja2V0IHx8ICcnfWNvbnRleHQucGFyc2UoJHtjb25kaXRpb25Tb3VyY2V9LCdzb3VyY2UnKSR7Y29uZGl0aW9uLmNvbXBhcmV9JHtjb25kaXRpb24udGFyZ2V0fSR7Y29uZGl0aW9uLnJCcmFja2V0IHx8ICcnfWA7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbi5yZWxhdGlvbikge1xyXG4gICAgICAgICAgc3dpdGNoIChjb25kaXRpb24ucmVsYXRpb24udHJpbSgpLnRvTG9jYWxlTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnb3InOlxyXG4gICAgICAgICAgICAgIGZ1bmN0aW9uU3RyaW5nICs9ICd8fCc7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FuZCc6XHJcbiAgICAgICAgICAgICAgZnVuY3Rpb25TdHJpbmcgKz0gJyYmJztcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzRnVuY3Rpb25TdHJpbmcgKyBmdW5jdGlvblN0cmluZztcclxuICAgICAgfSwgJycpO1xyXG4gICAgICBpZiAocmVuZGVyRnVuY3Rpb25TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdjb250ZXh0JywgYHJldHVybiAke3JlbmRlckZ1bmN0aW9uU3RyaW5nfTtgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbignY29udGV4dCcsICdyZXR1cm4gdHJ1ZTsnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRDb21tYW5kSGFuZGxlcnMoY29tbWFuZE1ldGFkYXRhQXJyYXk6IElGb3JtVmlld01vZGVsQ29tbWFuZFtdLCBjb250cm9sbGVyczogeyBbaWQ6IHN0cmluZ106IENvbW1hbmRDb250cm9sbGVyIH0pXHJcbiAgICA6IENvbW1hbmRIYW5kbGVyW10ge1xyXG4gICAgY29uc3QgY29tbWFuZEhhbmRsZXJzOiBDb21tYW5kSGFuZGxlcltdID0gW107XHJcbiAgICBjb21tYW5kTWV0YWRhdGFBcnJheS5yZWR1Y2U8Q29tbWFuZEhhbmRsZXJbXT4oKHByZXZpb3VzVmFsdWU6IENvbW1hbmRIYW5kbGVyW10sIGNvbW1hbmRSZWZlcmVuY2U6IElGb3JtVmlld01vZGVsQ29tbWFuZCkgPT4ge1xyXG4gICAgICBjb25zdCBjb21tYW5kTmFtZSA9IGNvbW1hbmRSZWZlcmVuY2UuY29kZTtcclxuICAgICAgY29uc3QgY29udHJvbGxlcklkID0gY29tbWFuZFJlZmVyZW5jZS5jbXBJZDtcclxuICAgICAgY29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzW2NvbnRyb2xsZXJJZF07XHJcbiAgICAgIGNvbnN0IG1ldGhvZCA9IE9iamVjdC5hc3NpZ24oe30sIGNvbnRyb2xsZXIubWV0aG9kc1tjb21tYW5kUmVmZXJlbmNlLmhhbmRsZXJOYW1lXSk7XHJcbiAgICAgIG1ldGhvZC5wYXJhbXMgPSBtZXRob2QucGFyYW1zICYmIG1ldGhvZC5wYXJhbXMubWFwKHBhcmFtID0+IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtKSk7XHJcbiAgICAgIGlmIChtZXRob2QucGFyYW1zICYmIG1ldGhvZC5wYXJhbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29tbWFuZFJlZmVyZW5jZS5wYXJhbXMucmVkdWNlPENvbnRyb2xsZXJNZXRob2Q+KChwcmV2aW91c01ldGhvZFZhbHVlOiBDb250cm9sbGVyTWV0aG9kLCBwYXJhbTogSUZvcm1WaWV3TW9kZWxDb21tYW5kUGFyYW0pID0+IHtcclxuICAgICAgICAgIGNvbnN0IG1ldGhvZFBhcmFtID0gcHJldmlvdXNNZXRob2RWYWx1ZS5wYXJhbXMuZmluZCh2YWx1ZSA9PiB2YWx1ZS5uYW1lID09PSBwYXJhbS5uYW1lKTtcclxuICAgICAgICAgIGlmIChtZXRob2RQYXJhbSkge1xyXG4gICAgICAgICAgICBtZXRob2RQYXJhbS5leHByZXNzaW9uID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcHJldmlvdXNNZXRob2RWYWx1ZTtcclxuICAgICAgICB9LCBtZXRob2QpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGNvbW1hbmRIYW5kbGVyID0gbmV3IER5bmFtaWNDb21tYW5kSGFuZGxlcihjb21tYW5kTmFtZSwgbWV0aG9kKTtcclxuICAgICAgcHJldmlvdXNWYWx1ZS5wdXNoKGNvbW1hbmRIYW5kbGVyKTtcclxuICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XHJcbiAgICB9LCBjb21tYW5kSGFuZGxlcnMpO1xyXG4gICAgcmV0dXJuIGNvbW1hbmRIYW5kbGVycztcclxuICB9XHJcbn1cclxuIl19