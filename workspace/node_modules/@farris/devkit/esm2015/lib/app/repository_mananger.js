/*
 * @Author: Witt
 * @Date: 2018-12-29 10:46:01
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-30 18:06:11
 */
import { Injectable } from '@angular/core';
/**
 * Repository管理类
 */
class RepositoryManager {
    /**
     * 构造函数
     */
    constructor() {
        this.repositoryMap = new Map();
    }
    /**
     * 注册Repository
     */
    regRepository(name, repository) {
        this.repositoryMap.set(name, repository);
    }
    unRegisteRepository(name) {
        this.repositoryMap.delete(name);
    }
    /**
     * 获取RepositoryMap
     * @internal
     */
    getRepositoryMap() {
        return this.repositoryMap;
    }
    /**
     * 获取Repository数组
     */
    getRepositories() {
        return Array.from(this.repositoryMap.values());
    }
    /**
     * 根据name获取Repository
     */
    getRepositoryByName(name) {
        return this.repositoryMap.get(name);
    }
    /**
     * 是否Repository已经存在
     */
    ifRepositoryExits(name) {
        const repository = this.getRepositoryByName(name);
        return repository ? true : false;
    }
    dispose() {
        // this.repositoryMap.forEach((repo: Repository<any>) => {
        //   if (repo) {
        //     repo.entityCollection.reset(false);
        //   }
        // });
        this.repositoryMap.clear();
    }
}
RepositoryManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RepositoryManager.ctorParameters = () => [];
export { RepositoryManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9tYW5hbmdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9yZXBvc2l0b3J5X21hbmFuZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFLN0Q7O0dBRUc7QUFDSCxNQUNNLGlCQUFpQjtJQU1yQjs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztJQUM3RCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxhQUFhLENBQUMsSUFBWSxFQUFFLFVBQThCO1FBQy9ELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ksZ0JBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNJLGlCQUFpQixDQUFDLElBQVk7UUFDbkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDO0lBQ00sT0FBTztRQUNaLDBEQUEwRDtRQUMxRCxnQkFBZ0I7UUFDaEIsMENBQTBDO1FBQzFDLE1BQU07UUFDTixNQUFNO1FBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7WUE1REYsVUFBVTs7OztBQWdFWCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IFdpdHRcclxuICogQERhdGU6IDIwMTgtMTItMjkgMTA6NDY6MDFcclxuICogQExhc3QgTW9kaWZpZWQgYnk6IFdpdHRcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOC0xMi0zMCAxODowNjoxMVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xyXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIFJlcG9zaXRvcnnnrqHnkIbnsbtcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgUmVwb3NpdG9yeU1hbmFnZXIgaW1wbGVtZW50cyBJRGlzcG9zYWJsZSB7XHJcbiAgLyoqXHJcbiAgICogcmVwb3NpdG9yeU1hcFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVwb3NpdG9yeU1hcDogTWFwPHN0cmluZywgUmVwb3NpdG9yeTxFbnRpdHk+PjtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnlNYXAgPSBuZXcgTWFwPHN0cmluZywgUmVwb3NpdG9yeTxFbnRpdHk+PigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YaMUmVwb3NpdG9yeVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdSZXBvc2l0b3J5KG5hbWU6IHN0cmluZywgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxFbnRpdHk+KTogdm9pZCB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnlNYXAuc2V0KG5hbWUsIHJlcG9zaXRvcnkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVuUmVnaXN0ZVJlcG9zaXRvcnkobmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnlNYXAuZGVsZXRlKG5hbWUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5ZSZXBvc2l0b3J5TWFwXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJlcG9zaXRvcnlNYXAoKTogTWFwPHN0cmluZywgUmVwb3NpdG9yeTxFbnRpdHk+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5TWFwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WUmVwb3NpdG9yeeaVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZXBvc2l0b3JpZXMoKTogUmVwb3NpdG9yeTxFbnRpdHk+W10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5yZXBvc2l0b3J5TWFwLnZhbHVlcygpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrm5hbWXojrflj5ZSZXBvc2l0b3J5XHJcbiAgICovXHJcbiAgcHVibGljIGdldFJlcG9zaXRvcnlCeU5hbWUobmFtZTogc3RyaW5nKTogUmVwb3NpdG9yeTxFbnRpdHk+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlNYXAuZ2V0KG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCmUmVwb3NpdG9yeeW3sue7j+WtmOWcqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZlJlcG9zaXRvcnlFeGl0cyhuYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSB0aGlzLmdldFJlcG9zaXRvcnlCeU5hbWUobmFtZSk7XHJcbiAgICByZXR1cm4gcmVwb3NpdG9yeSA/IHRydWUgOiBmYWxzZTtcclxuICB9XHJcbiAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICAvLyB0aGlzLnJlcG9zaXRvcnlNYXAuZm9yRWFjaCgocmVwbzogUmVwb3NpdG9yeTxhbnk+KSA9PiB7XHJcbiAgICAvLyAgIGlmIChyZXBvKSB7XHJcbiAgICAvLyAgICAgcmVwby5lbnRpdHlDb2xsZWN0aW9uLnJlc2V0KGZhbHNlKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfSk7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnlNYXAuY2xlYXIoKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBSZXBvc2l0b3J5TWFuYWdlciB9O1xyXG4iXX0=