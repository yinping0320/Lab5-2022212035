/*
 * @Author: Witt
 * @Date: 2018-12-30 17:11:37
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-30 17:19:01
 */
// tslint:disable: max-line-length
import { Injectable } from '@angular/core';
import { RunMode } from '../core';
import { AppContext } from './app_context';
/**
 * FrameContext管理类
 */
class FrameContextManager {
    /**
     * 构造函数
     */
    constructor(appContext) {
        this.frameContextMap = new Map();
        this.frameContextSet = new Set();
        this.appContext = appContext;
    }
    /**
     * 注册FrameContext
     */
    regFrameContext(frameContext) {
        const frameId = frameContext.frameId;
        // 如果存在，先删除
        if (this.frameContextMap.has(frameId) === true) {
            const existedFrameContext = this.frameContextMap.get(frameId);
            this.frameContextMap.delete(frameId);
            this.frameContextSet.delete(existedFrameContext);
        }
        frameContext.index = this.frameContextSet.size;
        this.frameContextMap.set(frameId, frameContext);
        this.frameContextSet.add(frameContext);
    }
    /**
     * 注销组件注册
     */
    unregFrameContext(frameContext) {
        const frameId = frameContext.frameId;
        this.frameContextMap.delete(frameId);
        this.frameContextSet.delete(frameContext);
        // 仅在高速模式下才会在bindingDataManager中注册绑定数据实例
        if (this.appContext.runMode === RunMode.highSpeed) {
            const namespace = frameContext.namespace;
            const repositoryName = frameContext.repository && frameContext.repository.name;
            // 获取ns相同的framecontext，如果已经没有组件上下文了需要销毁bindingData
            const frameContexts = this.getFrameContextsByNamespace(namespace);
            if (!frameContexts || frameContexts.length < 1) {
                this.appContext.bindingDataManager.unRegisteBindingData(repositoryName);
            }
        }
    }
    /**
     * 获取FrameContextMap
     */
    getFrameContextMap() {
        return this.frameContextMap;
    }
    /**
     * 获取全部FrameContext
     */
    getFrameContexts() {
        return Array.from(this.frameContextSet);
    }
    /**
     * 获取组合表单某个表单的所有frameContext
     * @param namespace 命名空间
     */
    getFrameContextsByNamespace(namespace) {
        return Array.from(this.frameContextSet).filter((frameContext) => frameContext && frameContext.namespace === namespace);
    }
    /**
     * 根据id获取FrameContext
     */
    getFrameContextById(frameId) {
        const targetFrameContext = this.frameContextMap.get(frameId);
        if (targetFrameContext) {
            return targetFrameContext;
        }
        return this.getFrameContextFromAllAppContexts(frameId);
    }
    /**
     * Get the root FrameContext instance
     * @return Return the FrameContext instance whose parent is null, and undefined otherwise.
     */
    getRootFrameContext() {
        const frameContexts = this.getFrameContexts();
        const rootFrameContext = frameContexts.find((frameContext) => {
            return frameContext.parent === null;
        });
        return rootFrameContext;
    }
    dispose() {
        this.frameContextMap.clear();
        this.frameContextSet.clear();
    }
    /**
     * 遍历所有的AppContext查找指定的
     * @summary
     * 1、老表单中所有的frameId均不重复；
     * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；
     * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。
     */
    getFrameContextFromAllAppContexts(frameId) {
        if (!this.appContext.appContextManager) {
            return;
        }
        let targetFrameContext;
        const appContexts = this.appContext.appContextManager.getAppContexts();
        appContexts.some((appContext) => {
            const frameContextMap = appContext.frameContextManager.getFrameContextMap();
            if (frameContextMap.has(frameId) === true) {
                targetFrameContext = frameContextMap.get(frameId);
                return true;
            }
            else {
                return false;
            }
        });
        return targetFrameContext;
    }
}
FrameContextManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameContextManager.ctorParameters = () => [
    { type: AppContext }
];
export { FrameContextManager };
//# sourceMappingURL=data:application/json;base64,