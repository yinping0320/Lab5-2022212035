import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext } from '../frame/frame_context';
import { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, ComponentType } from '../core/index';
import { NAMESPACE } from '../frame/tokens';
export class ValidateEffector {
    constructor(injector, messageService, notifyService, namespace, frameContext) {
        this.injector = injector;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.ns = namespace;
    }
    effect(path, value, options) {
        // 校验不通过时返回false
        const domInfo = this.getDomInfoByEntityPath(path);
        if (!domInfo) {
            return;
        }
        const frameContext = domInfo.frameContext;
        const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        // const rootViewModel = rootFrameContext.viewModel;
        const expressionId = options.expressionId;
        const domPropertyName = domInfo.domPropertyName;
        if (expressionId) {
            // 增加校验规则
            frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "validate" /* Validate */);
        }
        if (value === false && options.message) {
            // 更新form错误信息
            // 不是grid，则认为是卡片
            if (!domInfo.isGridComponent) {
                const message = options.message.replace(/\$property/g, domInfo.propertyName);
                const formErrors = this.buildFormErrors(domPropertyName, message);
                // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息
                frameContext.form.updateFormErrors(formErrors);
            }
            else {
                // if (expressionId) {
                //   // 增加校验规则
                //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);
                // }
            }
            // 不进行汇总展示
            // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);
            // 增加到汇总消息
            // rootViewModel.verifycationChanged.next(verifyInformations);
            // 更新汇总错误信息
        }
        else if (value === true) {
            // 移除错误消息
            // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);
            // rootViewModel.verifycationChanged.next(verifyInformations);
            const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
            if (currentErrors) {
                if (currentErrors.hasOwnProperty('validate')) {
                    // require合法，移除require校验提示
                    delete currentErrors.validate;
                }
                frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });
            }
            else {
                const formErrors = this.buildFormErrors(domPropertyName, null);
                frameContext.form.updateFormErrors(formErrors);
            }
        }
    }
    /**
     * 通过实体路径获取对应的dom信息
     * @param entityPath
     * @returns
     */
    getDomInfoByEntityPath(entityPath) {
        let result = null;
        if (!entityPath) {
            return result;
        }
        entityPath = entityPath.split('/').filter(p => p).join('.');
        const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
        if (frameContexts && frameContexts.length > 0) {
            for (const frameContext of frameContexts) {
                if (result) {
                    break;
                }
                const isValidFrameContext = frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0;
                if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                    const keys = Object.keys(frameContext.form.ngFormControls);
                    for (const propertyName of keys) {
                        const ngFormControl = frameContext.form.ngFormControls[propertyName];
                        let bindingPath = frameContext.viewModel.bindingPath || '/';
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        let bindings = ngFormControl.binding.split('.');
                        bindings = bindingPaths.concat(bindings);
                        if (entityPath === bindings.join('.')) {
                            // 判断对应的组件是什么类型
                            const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                            const dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                            if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                const isEditableGrid = dgColumnInfo.find((array) => {
                                    const readonlyGroup = array.every((column) => !(column.hasOwnProperty('editor') && column.editor));
                                    if (!readonlyGroup) {
                                        return true;
                                    }
                                    else {
                                        return false;
                                    }
                                });
                                if (!isEditableGrid) {
                                    continue;
                                }
                            }
                            // 如果是farris树，则跳过
                            const isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;
                            if (isFarrisTreeTableComponent) {
                                continue;
                            }
                            let isGridComponent = false;
                            if (dgColumnNames) {
                                isGridComponent = true;
                            }
                            result = {
                                domPropertyName: propertyName,
                                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                frameContext,
                                id: ngFormControl.id,
                                isGridComponent
                            };
                            break;
                        }
                    }
                }
            }
        }
        return result;
    }
    getVerifyInformations(frameContext) {
        const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        const rootViewModel = rootFrameContext.viewModel;
        const verifyInformations = rootViewModel.verifyInformations;
        return verifyInformations;
    }
    buildFormErrors(domPropertyName, message) {
        if (message) {
            message = message.replace(/\$property/g, 'domPropertyName');
            return {
                [domPropertyName]: {
                    errors: {
                        'validate': {
                            name: message
                        }
                    }
                }
            };
        }
        else {
            return {
                [domPropertyName]: {
                    errors: {}
                }
            };
        }
    }
    buildVerifyInformations(id, frameContext, domPropertyName, message) {
        const verifyInformations = this.getVerifyInformations(frameContext);
        const index = verifyInformations.findIndex((item) => {
            return item.id === id;
        });
        if (index !== -1) {
            verifyInformations.splice(index, 1);
        }
        verifyInformations.push({
            id: id,
            namespace: frameContext.namespace,
            targetField: domPropertyName,
            index: verifyInformations.length + 1,
            title: frameContext.form.formGroupName,
            msg: message,
            type: 'error'
        });
        return verifyInformations;
    }
    removeValidateVerifyInformations(id, frameContext) {
        const verifyInformations = this.getVerifyInformations(frameContext);
        const index = verifyInformations.findIndex((item) => {
            return item.id === id;
        });
        if (index !== -1) {
            verifyInformations.splice(index, 1);
        }
        return verifyInformations;
    }
}
ValidateEffector.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidateEffector.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NOTIFY_SERVICE_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
    { type: FrameContext }
];
//# sourceMappingURL=data:application/json;base64,