import { Inject, Injectable, Injector } from '@angular/core';
import { ComponentType } from '../core/index';
import { FrameContext, NAMESPACE } from "../frame/index";
import { TranslateToken } from '../i18n';
import { Repository } from '../repository/index';
/**
 * 必填副作用器
 * @description 当结算结果为true时设置必填校验，否则删除必填校验
 */
export class RequiredEffector {
    constructor(injector, repository, namespace, frameContext) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.ns = namespace;
    }
    effect(path, value, options) {
        // 校验不通过时返回false
        const domInfo = this.getDomInfoByEntityPath(path);
        if (!domInfo) {
            return;
        }
        const frameContext = domInfo.frameContext;
        const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        const rootViewModel = rootFrameContext.viewModel;
        const domPropertyName = domInfo.domPropertyName;
        const pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(p => p));
        const expressionId = options.expressionId;
        if (expressionId) {
            // 增加校验规则
            frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "require" /* Require */);
        }
        if (value === true) {
            if (options.message) {
                // 更新form错误信息
                // 不是grid，则认为是卡片
                if (!domInfo.isGridComponent) {
                    const message = options.message.replace(/\$property/g, domInfo.propertyName);
                    const formErrors = this.buildFormErrors(domPropertyName, message);
                    const isValidValue = this.isValidValue(path, pathValue);
                    if (!isValidValue) {
                        frameContext.form.updateFormErrors(formErrors);
                    }
                }
                else {
                    this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);
                }
            }
        }
        else {
            // 返回非true值时认为非必填
            if (domInfo.isGridComponent) {
                this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);
            }
            else {
                const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
                if (currentErrors) {
                    if (currentErrors.hasOwnProperty('require')) {
                        // require合法，移除require校验提示
                        delete currentErrors.require;
                    }
                    frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });
                }
                else {
                    const formErrors = this.buildFormErrors(domPropertyName, null);
                    frameContext.form.updateFormErrors(formErrors);
                }
            }
        }
    }
    updateColumnValidators(frameContext, field, datagridColumns, isRequired) {
        const frameId = frameContext.frameId;
        const componentRefs = frameContext.appContext.componentManager.get([frameId]);
        if (componentRefs && componentRefs.size > 0) {
            const datagrid = Array.from(componentRefs.values())[0];
            if (datagrid && typeof datagrid.updateColumn === 'function') {
                const columns = datagridColumns.find((array) => {
                    return array.find(item => item.field === field);
                });
                const column = columns && columns.find(item => item.field === field) || null;
                if (column) {
                    const validators = column.validators || [];
                    const index = validators.findIndex(item => item.type === 'required');
                    if (isRequired) {
                        if (index === -1) {
                            validators.push({ "type": "required", "message": "该字段不能为空！" });
                        }
                    }
                    else {
                        if (index !== -1) {
                            validators.splice(index, 1);
                        }
                    }
                    datagrid.updateColumn(field, { validators: [...validators] });
                    datagrid.columnsChanged(false);
                }
            }
        }
    }
    getDomInfoByEntityPath(entityPath) {
        let result = null;
        if (!entityPath) {
            return result;
        }
        entityPath = entityPath.split('/').filter(p => p).join('.');
        const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
        if (frameContexts && frameContexts.length > 0) {
            for (const frameContext of frameContexts) {
                if (result) {
                    break;
                }
                if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                    const keys = Object.keys(frameContext.form.ngFormControls);
                    for (const propertyName of keys) {
                        const ngFormControl = frameContext.form.ngFormControls[propertyName];
                        let bindingPath = frameContext.viewModel.bindingPath || '/';
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        let bindings = ngFormControl.binding.split('.');
                        bindings = bindingPaths.concat(bindings);
                        if (entityPath === bindings.join('.')) {
                            // 判断对应的组件是什么类型
                            const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                            const dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                            if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                const isEditableGrid = dgColumnInfo.find((array) => {
                                    const readonlyGroup = array.every((column) => !(column.hasOwnProperty('editor') && column.editor));
                                    if (!readonlyGroup) {
                                        return true;
                                    }
                                    else {
                                        return false;
                                    }
                                });
                                if (!isEditableGrid) {
                                    continue;
                                }
                            }
                            // 如果是farris树，则跳过
                            const isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;
                            if (isFarrisTreeTableComponent) {
                                continue;
                            }
                            let isGridComponent = false;
                            if (dgColumnNames) {
                                isGridComponent = true;
                            }
                            result = {
                                domPropertyName: propertyName,
                                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                frameContext,
                                id: ngFormControl.id,
                                isGridComponent,
                                binding: ngFormControl.binding,
                                datagridColumns: dgColumnInfo
                            };
                            break;
                        }
                    }
                }
            }
        }
        return result;
    }
    getDataPropInfo(path) {
        if (!path) {
            return null;
        }
        const paths = path.split('/').filter(p => p);
        return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);
    }
    isValidValue(path, value) {
        const dataTypeInfo = this.getDataPropInfo(path);
        if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {
            // 多语字段
            const translate = this.injector.get(TranslateToken, null);
            const currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';
            if (Object.keys(value).length < 1) {
                return false;
            }
            return !!value[currentLanguage];
        }
        else if (value === null || value === '' || value === undefined) {
            return false;
        }
        return true;
    }
    buildFormErrors(domPropertyName, message) {
        if (message) {
            return {
                [domPropertyName]: {
                    errors: {
                        'require': {
                            name: message
                        }
                    }
                }
            };
        }
        else {
            return {
                [domPropertyName]: {
                    errors: {}
                }
            };
        }
    }
}
RequiredEffector.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RequiredEffector.ctorParameters = () => [
    { type: Injector },
    { type: Repository },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
    { type: FrameContext }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWRfZWZmZWN0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lZmZlY3Rvci9yZXF1aXJlZF9lZmZlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUk5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBYSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpEOzs7R0FHRztBQUVILE1BQU0sT0FBTyxnQkFBZ0I7SUFFM0IsWUFBb0IsUUFBa0IsRUFBVSxVQUE4QixFQUE2QixTQUFTLEVBQVUsWUFBMEI7UUFBcEksYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQTZCLGNBQVMsR0FBVCxTQUFTLENBQUE7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN0SixJQUFJLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUN0QixDQUFDO0lBQ00sTUFBTSxDQUFDLElBQVksRUFBRSxLQUFVLEVBQUUsT0FBaUM7UUFDdkUsZ0JBQWdCO1FBQ2hCLE1BQU0sT0FBTyxHQUFRLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTztTQUNSO1FBQ0QsTUFBTSxZQUFZLEdBQWlCLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDbkYsTUFBTSxhQUFhLEdBQUcs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SW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IE5nRm9ybUNvbnRyb2wsIFJ1bGVUeXBlIH0gZnJvbSAnLi4vZm9ybS9pbmRleCc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCwgTkFNRVNQQUNFIH0gZnJvbSBcIi4uL2ZyYW1lL2luZGV4XCI7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZSwgVHJhbnNsYXRlVG9rZW4gfSBmcm9tICcuLi9pMThuJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xyXG5cclxuLyoqXHJcbiAqIOW/heWhq+WJr+S9nOeUqOWZqFxyXG4gKiBAZGVzY3JpcHRpb24g5b2T57uT566X57uT5p6c5Li6dHJ1ZeaXtuiuvue9ruW/heWhq+agoemqjO+8jOWQpuWImeWIoOmZpOW/heWhq+agoemqjFxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmVxdWlyZWRFZmZlY3RvciBpbXBsZW1lbnRzIEV4cHJlc3Npb24uRWZmZWN0b3Ige1xyXG4gIHB1YmxpYyBuczogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5PiwgQEluamVjdChOQU1FU1BBQ0UpIHByaXZhdGUgbmFtZXNwYWNlLCBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSB7XHJcbiAgICB0aGlzLm5zID0gbmFtZXNwYWNlO1xyXG4gIH1cclxuICBwdWJsaWMgZWZmZWN0KHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSwgb3B0aW9uczogRXhwcmVzc2lvbi5FZmZlY3RPcHRpb25zKSB7XHJcbiAgICAvLyDmoKHpqozkuI3pgJrov4fml7bov5Tlm55mYWxzZVxyXG4gICAgY29uc3QgZG9tSW5mbzogYW55ID0gdGhpcy5nZXREb21JbmZvQnlFbnRpdHlQYXRoKHBhdGgpO1xyXG4gICAgaWYgKCFkb21JbmZvKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gZG9tSW5mby5mcmFtZUNvbnRleHQ7XHJcbiAgICBjb25zdCByb290RnJhbWVDb250ZXh0ID0gZnJhbWVDb250ZXh0ICYmIGZyYW1lQ29udGV4dC5nZXRWaXJ0dWFsUm9vdEZyYW1lQ29udGV4dCgpO1xyXG4gICAgY29uc3Qgcm9vdFZpZXdNb2RlbCA9IHJvb3RGcmFtZUNvbnRleHQudmlld01vZGVsO1xyXG4gICAgY29uc3QgZG9tUHJvcGVydHlOYW1lID0gZG9tSW5mby5kb21Qcm9wZXJ0eU5hbWU7XHJcbiAgICBjb25zdCBwYXRoVmFsdWUgPSB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkpO1xyXG4gICAgY29uc3QgZXhwcmVzc2lvbklkID0gb3B0aW9ucy5leHByZXNzaW9uSWQ7XHJcbiAgICBpZiAoZXhwcmVzc2lvbklkKSB7XHJcbiAgICAgIC8vIOWinuWKoOagoemqjOinhOWImVxyXG4gICAgICBmcmFtZUNvbnRleHQuZm9ybS5hZGRGaWVsZFZhbGlkYXRlUnVsZShkb21Qcm9wZXJ0eU5hbWUsIG9wdGlvbnMubWVzc2FnZSwgZXhwcmVzc2lvbklkLCBSdWxlVHlwZS5SZXF1aXJlKTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7XHJcbiAgICAgICAgLy8g5pu05pawZm9ybemUmeivr+S/oeaBr1xyXG4gICAgICAgIC8vIOS4jeaYr2dyaWTvvIzliJnorqTkuLrmmK/ljaHniYdcclxuICAgICAgICBpZiAoIWRvbUluZm8uaXNHcmlkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlLnJlcGxhY2UoL1xcJHByb3BlcnR5L2csIGRvbUluZm8ucHJvcGVydHlOYW1lKTtcclxuICAgICAgICAgIGNvbnN0IGZvcm1FcnJvcnMgPSB0aGlzLmJ1aWxkRm9ybUVycm9ycyhkb21Qcm9wZXJ0eU5hbWUsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgY29uc3QgaXNWYWxpZFZhbHVlID0gdGhpcy5pc1ZhbGlkVmFsdWUocGF0aCwgcGF0aFZhbHVlKTtcclxuICAgICAgICAgIGlmICghaXNWYWxpZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGZyYW1lQ29udGV4dC5mb3JtLnVwZGF0ZUZvcm1FcnJvcnMoZm9ybUVycm9ycyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudXBkYXRlQ29sdW1uVmFsaWRhdG9ycyhmcmFtZUNvbnRleHQsIGRvbUluZm8uYmluZGluZywgZG9tSW5mby5kYXRhZ3JpZENvbHVtbnMsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g6L+U5Zue6Z2edHJ1ZeWAvOaXtuiupOS4uumdnuW/heWhq1xyXG4gICAgICBpZiAoZG9tSW5mby5pc0dyaWRDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbHVtblZhbGlkYXRvcnMoZnJhbWVDb250ZXh0LCBkb21JbmZvLmJpbmRpbmcsIGRvbUluZm8uZGF0YWdyaWRDb2x1bW5zLCBmYWxzZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudEVycm9ycyA9IGZyYW1lQ29udGV4dC5mb3JtLmdldEZvcm1Db250cm9sRXJyb3JzKGRvbVByb3BlcnR5TmFtZSkgfHwgbnVsbDtcclxuICAgICAgICBpZiAoY3VycmVudEVycm9ycykge1xyXG4gICAgICAgICAgaWYgKGN1cnJlbnRFcnJvcnMuaGFzT3duUHJvcGVydHkoJ3JlcXVpcmUnKSkge1xyXG4gICAgICAgICAgICAvLyByZXF1aXJl5ZCI5rOV77yM56e76ZmkcmVxdWlyZeagoemqjOaPkOekulxyXG4gICAgICAgICAgICBkZWxldGUgY3VycmVudEVycm9ycy5yZXF1aXJlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZnJhbWVDb250ZXh0LmZvcm0udXBkYXRlRm9ybUVycm9ycyh7IFtkb21Qcm9wZXJ0eU5hbWVdOiB7IGVycm9yczogY3VycmVudEVycm9ycyB9IH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBmb3JtRXJyb3JzID0gdGhpcy5idWlsZEZvcm1FcnJvcnMoZG9tUHJvcGVydHlOYW1lLCBudWxsKTtcclxuICAgICAgICAgIGZyYW1lQ29udGV4dC5mb3JtLnVwZGF0ZUZvcm1FcnJvcnMoZm9ybUVycm9ycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHVwZGF0ZUNvbHVtblZhbGlkYXRvcnMoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIGZpZWxkOiBzdHJpbmcsIGRhdGFncmlkQ29sdW1uczogYW55W11bXSwgaXNSZXF1aXJlZDogYm9vbGVhbikge1xyXG4gICAgY29uc3QgZnJhbWVJZCA9IGZyYW1lQ29udGV4dC5mcmFtZUlkO1xyXG4gICAgY29uc3QgY29tcG9uZW50UmVmcyA9IGZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmNvbXBvbmVudE1hbmFnZXIuZ2V0KFtmcmFtZUlkXSkgYXMgTWFwPHN0cmluZywgYW55PjtcclxuICAgIGlmIChjb21wb25lbnRSZWZzICYmIGNvbXBvbmVudFJlZnMuc2l6ZSA+IDApIHtcclxuICAgICAgY29uc3QgZGF0YWdyaWQgPSBBcnJheS5mcm9tKGNvbXBvbmVudFJlZnMudmFsdWVzKCkpWzBdO1xyXG4gICAgICBpZiAoZGF0YWdyaWQgJiYgdHlwZW9mIGRhdGFncmlkLnVwZGF0ZUNvbHVtbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSBkYXRhZ3JpZENvbHVtbnMuZmluZCgoYXJyYXk6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gYXJyYXkuZmluZChpdGVtID0+IGl0ZW0uZmllbGQgPT09IGZpZWxkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBjb2x1bW4gPSBjb2x1bW5zICYmIGNvbHVtbnMuZmluZChpdGVtID0+IGl0ZW0uZmllbGQgPT09IGZpZWxkKSB8fCBudWxsO1xyXG4gICAgICAgIGlmIChjb2x1bW4pIHtcclxuICAgICAgICAgIGNvbnN0IHZhbGlkYXRvcnM6IGFueVtdID0gY29sdW1uLnZhbGlkYXRvcnMgfHwgW107XHJcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHZhbGlkYXRvcnMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS50eXBlID09PSAncmVxdWlyZWQnKTtcclxuICAgICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICB2YWxpZGF0b3JzLnB1c2goeyBcInR5cGVcIjogXCJyZXF1aXJlZFwiLCBcIm1lc3NhZ2VcIjogXCLor6XlrZfmrrXkuI3og73kuLrnqbrvvIFcIiB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRvcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZGF0YWdyaWQudXBkYXRlQ29sdW1uKGZpZWxkLCB7IHZhbGlkYXRvcnM6IFsuLi52YWxpZGF0b3JzXSB9KTtcclxuICAgICAgICAgIGRhdGFncmlkLmNvbHVtbnNDaGFuZ2VkKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBnZXREb21JbmZvQnlFbnRpdHlQYXRoKGVudGl0eVBhdGg6IHN0cmluZyk6IHsgZG9tUHJvcGVydHlOYW1lOiBzdHJpbmcsIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBpZDogc3RyaW5nLCBpc0dyaWRDb21wb25lbnQ6IGJvb2xlYW4sIGJpbmRpbmc6IHN0cmluZywgZGF0YWdyaWRDb2x1bW5zOiBhbnlbXVtdIH0ge1xyXG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcbiAgICBpZiAoIWVudGl0eVBhdGgpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGVudGl0eVBhdGggPSBlbnRpdHlQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkuam9pbignLicpO1xyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0cyA9IHRoaXMuZnJhbWVDb250ZXh0ICYmIHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzQnlOYW1lc3BhY2UodGhpcy5uYW1lc3BhY2UpIHx8IG51bGw7XHJcbiAgICBpZiAoZnJhbWVDb250ZXh0cyAmJiBmcmFtZUNvbnRleHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCBmcmFtZUNvbnRleHQgb2YgZnJhbWVDb250ZXh0cykge1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZnJhbWVDb250ZXh0ICYmIGZyYW1lQ29udGV4dC5mb3JtICYmIGZyYW1lQ29udGV4dC5mb3JtLm5nRm9ybUNvbnRyb2xzICYmIE9iamVjdC5rZXlzKGZyYW1lQ29udGV4dC5mb3JtLm5nRm9ybUNvbnRyb2xzKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZnJhbWVDb250ZXh0LmZvcm0ubmdGb3JtQ29udHJvbHMpO1xyXG4gICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2Yga2V5cykge1xyXG4gICAgICAgICAgICBjb25zdCBuZ0Zvcm1Db250cm9sOiBOZ0Zvcm1Db250cm9sID0gZnJhbWVDb250ZXh0LmZvcm0ubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgbGV0IGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgIGxldCBiaW5kaW5ncyA9IG5nRm9ybUNvbnRyb2wuYmluZGluZy5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdQYXRocy5jb25jYXQoYmluZGluZ3MpO1xyXG4gICAgICAgICAgICBpZiAoZW50aXR5UGF0aCA9PT0gYmluZGluZ3Muam9pbignLicpKSB7XHJcbiAgICAgICAgICAgICAgLy8g5Yik5pat5a+55bqU55qE57uE5Lu25piv5LuA5LmI57G75Z6LXHJcbiAgICAgICAgICAgICAgY29uc3QgZGdDb2x1bW5OYW1lcyA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWxbJ2RhdGFHcmlkQ29sdW1uc05hbWUnXSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGRnQ29sdW1uSW5mbzogQXJyYXk8QXJyYXk8YW55Pj4gPSBmcmFtZUNvbnRleHQudmlld01vZGVsW2RnQ29sdW1uTmFtZXNdIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgaWYgKGRnQ29sdW1uSW5mbyAmJiBBcnJheS5pc0FycmF5KGRnQ29sdW1uSW5mbykgJiYgZGdDb2x1bW5JbmZvLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRWRpdGFibGVHcmlkID0gZGdDb2x1bW5JbmZvLmZpbmQoKGFycmF5OiBBcnJheTxhbnk+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRvbmx5R3JvdXAgPSBhcnJheS5ldmVyeSgoY29sdW1uOiBhbnkpID0+ICEoY29sdW1uLmhhc093blByb3BlcnR5KCdlZGl0b3InKSAmJiBjb2x1bW4uZWRpdG9yKSk7XHJcbiAgICAgICAgICAgICAgICAgIGlmICghcmVhZG9ubHlHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRWRpdGFibGVHcmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyDlpoLmnpzmmK9mYXJyaXPmoJHvvIzliJnot7Pov4dcclxuICAgICAgICAgICAgICBjb25zdCBpc0ZhcnJpc1RyZWVUYWJsZUNvbXBvbmVudCA9IGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQuZnJhbWVDb21wb25lbnQgJiYgZnJhbWVDb250ZXh0LmZyYW1lQ29tcG9uZW50LmNvbXBvbmVudFR5cGUgPT09IENvbXBvbmVudFR5cGUuZmFycmlzVHJlZVRhbGJlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgIGlmIChpc0ZhcnJpc1RyZWVUYWJsZUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGxldCBpc0dyaWRDb21wb25lbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBpZiAoZGdDb2x1bW5OYW1lcykge1xyXG4gICAgICAgICAgICAgICAgaXNHcmlkQ29tcG9uZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgZG9tUHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6IG5nRm9ybUNvbnRyb2wubmFtZSB8fCBuZ0Zvcm1Db250cm9sLmRlZmF1bHRJMThuVmFsdWUsXHJcbiAgICAgICAgICAgICAgICBmcmFtZUNvbnRleHQsXHJcbiAgICAgICAgICAgICAgICBpZDogbmdGb3JtQ29udHJvbC5pZCxcclxuICAgICAgICAgICAgICAgIGlzR3JpZENvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IG5nRm9ybUNvbnRyb2wuYmluZGluZyxcclxuICAgICAgICAgICAgICAgIGRhdGFncmlkQ29sdW1uczogZGdDb2x1bW5JbmZvXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXREYXRhUHJvcEluZm8ocGF0aDogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXBhdGgpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIHJldHVybiB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvLmdldFByb3BJbmZvQnlQYXRoKHBhdGhzKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBpc1ZhbGlkVmFsdWUocGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCBkYXRhVHlwZUluZm8gPSB0aGlzLmdldERhdGFQcm9wSW5mbyhwYXRoKTtcclxuICAgIGlmIChkYXRhVHlwZUluZm8gJiYgZGF0YVR5cGVJbmZvLm1ldGFkYXRhSW5mbyAmJiBkYXRhVHlwZUluZm8ubWV0YWRhdGFJbmZvLmVuYWJsZU11bHRpTGFuZ0lucHV0ID09PSB0cnVlKSB7XHJcbiAgICAgIC8vIOWkmuivreWtl+autVxyXG4gICAgICBjb25zdCB0cmFuc2xhdGUgPSB0aGlzLmluamVjdG9yLmdldDxUcmFuc2xhdGU+KFRyYW5zbGF0ZVRva2VuLCBudWxsKTtcclxuICAgICAgY29uc3QgY3VycmVudExhbmd1YWdlID0gdHJhbnNsYXRlICYmIHRyYW5zbGF0ZS5nZXRDdXJyZW50TGFuZ3VhZ2UoKSB8fCAnemgtQ0hTJztcclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAhIXZhbHVlW2N1cnJlbnRMYW5ndWFnZV07XHJcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBwcml2YXRlIGJ1aWxkRm9ybUVycm9ycyhkb21Qcm9wZXJ0eU5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBpZiAobWVzc2FnZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIFtkb21Qcm9wZXJ0eU5hbWVdOiB7XHJcbiAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgJ3JlcXVpcmUnOiB7XHJcbiAgICAgICAgICAgICAgbmFtZTogbWVzc2FnZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZG9tUHJvcGVydHlOYW1lXToge1xyXG4gICAgICAgICAgZXJyb3JzOiB7fVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=