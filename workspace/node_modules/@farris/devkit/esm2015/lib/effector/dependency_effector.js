import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData } from '../binding-data/index';
import { EntityList } from '../entity/index';
import { NAMESPACE } from '../frame/tokens';
import { Repository } from '../repository/index';
/**
 * 依赖副作用器
 * @description 当表达式计算结果为true时，清空字段值
 * 当value==true且属性当前值不是null时，设置属性值为null
 */
export class DependencyEffector {
    constructor(injector, repository, namespace, bindingData) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.bindingData = bindingData;
        this.ns = namespace;
    }
    effect(path, value, options) {
        if (!options || !options.path) {
            throw new Error('DependencyEffector 需要指定行信息。');
        }
        if (typeof value !== 'boolean') {
            console.warn(`DependencyEffector 依赖表达式计算结果应该为true/false，当前值为：${value}`);
        }
        const propertyPath = options.path;
        const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
        let entity = this.repository.entityCollection.getEntityById(rowId);
        if (rowId && !entity) {
            throw new Error(`找不到id：${rowId}对应的实体！`);
        }
        // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
        const propName = propertyPath.pop();
        let object = entity;
        for (let index = 1; index < propertyPath.length; index++) {
            const propertyName = propertyPath[index];
            if (object instanceof EntityList) {
                object = object.get(propertyName);
            }
            else {
                object = object[propertyName];
            }
        }
        if (object) {
            if (object[propName] !== null && value === true) {
                object[propName] = null;
            }
        }
        else {
            throw new Error(`[DependencyEffector] 找不到实体对应的路径：${propertyPath.push(propName)}`);
        }
    }
}
DependencyEffector.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DependencyEffector.ctorParameters = () => [
    { type: Injector },
    { type: Repository },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
    { type: BindingData }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeV9lZmZlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VmZmVjdG9yL2RlcGVuZGVuY3lfZWZmZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQVUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRDs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLGtCQUFrQjtJQUU3QixZQUFvQixRQUFrQixFQUFVLFVBQThCLEVBQTZCLFNBQVMsRUFBVSxXQUF3QjtRQUFsSSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFBNkIsY0FBUyxHQUFULFNBQVMsQ0FBQTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3BKLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO0lBQ3RCLENBQUM7SUFDTSxNQUFNLENBQUMsSUFBWSxFQUFFLEtBQWMsRUFBRSxPQUFpQztRQUMzRSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDaEQ7UUFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUM5QixPQUFPLENBQUMsSUFBSSxDQUFDLGtEQUFrRCxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNsQyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQztRQUNuRixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxRQUFRLENBQUMsQ0FBQztTQUN6QztRQUNELGlHQUFpRztRQUNqRyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEMsSUFBSSxNQUFNLEdBQVEsTUFBTSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3hELE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7Z0JBQ2hDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDL0I7U0FDRjtRQUNELElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7Z0JBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDekI7U0FDRjthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbkY7SUFDSCxDQUFDOzs7WUFyQ0YsVUFBVTs7OztZQVprQixRQUFRO1lBSzVCLFVBQVU7NENBVWdFLE1BQU0sU0FBQyxTQUFTO1lBZDFGLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhIH0gZnJvbSAnLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuaW1wb3J0IHsgRW50aXR5LCBFbnRpdHlMaXN0IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xyXG5pbXBvcnQgeyBOQU1FU1BBQ0UgfSBmcm9tICcuLi9mcmFtZS90b2tlbnMnO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yeS9pbmRleCc7XHJcblxyXG4vKipcclxuICog5L6d6LWW5Ymv5L2c55So5ZmoXHJcbiAqIEBkZXNjcmlwdGlvbiDlvZPooajovr7lvI/orqHnrpfnu5PmnpzkuLp0cnVl5pe277yM5riF56m65a2X5q615YC8XHJcbiAqIOW9k3ZhbHVlPT10cnVl5LiU5bGe5oCn5b2T5YmN5YC85LiN5pivbnVsbOaXtu+8jOiuvue9ruWxnuaAp+WAvOS4um51bGxcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlcGVuZGVuY3lFZmZlY3RvciBpbXBsZW1lbnRzIEV4cHJlc3Npb24uRWZmZWN0b3Ige1xyXG4gIHB1YmxpYyBuczogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5PiwgQEluamVjdChOQU1FU1BBQ0UpIHByaXZhdGUgbmFtZXNwYWNlLCBwcml2YXRlIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSkge1xyXG4gICAgdGhpcy5ucyA9IG5hbWVzcGFjZTtcclxuICB9XHJcbiAgcHVibGljIGVmZmVjdChwYXRoOiBzdHJpbmcsIHZhbHVlOiBib29sZWFuLCBvcHRpb25zOiBFeHByZXNzaW9uLkVmZmVjdE9wdGlvbnMpIHtcclxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5wYXRoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVwZW5kZW5jeUVmZmVjdG9yIOmcgOimgeaMh+WumuihjOS/oeaBr+OAgicpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgRGVwZW5kZW5jeUVmZmVjdG9yIOS+nei1luihqOi+vuW8j+iuoeeul+e7k+aenOW6lOivpeS4unRydWUvZmFsc2XvvIzlvZPliY3lgLzkuLrvvJoke3ZhbHVlfWApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJvcGVydHlQYXRoID0gb3B0aW9ucy5wYXRoO1xyXG4gICAgY29uc3Qgcm93SWQgPSBwcm9wZXJ0eVBhdGhbMF0gfHwgdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJdGVtLnByaW1hcnlLZXlWYWx1ZTtcclxuICAgIGxldCBlbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRFbnRpdHlCeUlkKHJvd0lkKTtcclxuICAgIGlmIChyb3dJZCAmJiAhZW50aXR5KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihg5om+5LiN5YiwaWTvvJoke3Jvd0lkfeWvueW6lOeahOWunuS9k++8gWApO1xyXG4gICAgfVxyXG4gICAgLy8gcHJvcGVydHlQYXRoIGxpa2UgOiBbMSwgY2hpbGQxcywgMS4xLCBjaGlsZDJzLCAxLjEuMSxwcm9wTmFtZV0gb3IgWzEsdWR0LHByb3BOYW1lXSBvciBbMSxwcm9wXVxyXG4gICAgY29uc3QgcHJvcE5hbWUgPSBwcm9wZXJ0eVBhdGgucG9wKCk7XHJcbiAgICBsZXQgb2JqZWN0OiBhbnkgPSBlbnRpdHk7XHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgcHJvcGVydHlQYXRoLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eVBhdGhbaW5kZXhdO1xyXG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgRW50aXR5TGlzdCkge1xyXG4gICAgICAgIG9iamVjdCA9IG9iamVjdC5nZXQocHJvcGVydHlOYW1lKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYmplY3QgPSBvYmplY3RbcHJvcGVydHlOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG9iamVjdCkge1xyXG4gICAgICBpZiAob2JqZWN0W3Byb3BOYW1lXSAhPT0gbnVsbCAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIG9iamVjdFtwcm9wTmFtZV0gPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtEZXBlbmRlbmN5RWZmZWN0b3JdIOaJvuS4jeWIsOWunuS9k+WvueW6lOeahOi3r+W+hO+8miR7cHJvcGVydHlQYXRoLnB1c2gocHJvcE5hbWUpfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0iXX0=