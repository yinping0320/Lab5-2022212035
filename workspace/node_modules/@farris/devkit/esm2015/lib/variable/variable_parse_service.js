/**
 * 变量解析服务
 * @author Witt<jiwt@inspur.com>
 */
import { Inject, Injectable } from '@angular/core';
import { VARIABLE_PARSERS } from './variable_parser';
/**
 * 变量解析服务
 * 职责：
 * 1、解析字符串中的变量，并替换成相应的值；
 * 2、对表达式进行求值。
 *
 * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？
 */
class VariableParseService {
    /**
     * 构造变量解析服务
     * @param parsers 解析器集合
     */
    constructor(parsers) {
        this.parsers = parsers;
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    parse(target, context, eventParam) {
        if (typeof target === 'string' && target.length > 0) {
            // 字符串，直接解析
            return this.parseExpression(target, context, eventParam);
        }
        else if (Array.isArray(target)) {
            // 遍历数组
            target.forEach((item, itemIndex) => {
                if (typeof item === 'string') {
                    target[itemIndex] = this.parseExpression(item, context, eventParam);
                }
                else {
                    target[itemIndex] = this.parse(item, context, eventParam);
                }
            });
        }
        else if (typeof target === 'object' && target !== null) {
            // 遍历对象可枚举属性
            const keys = Object.keys(target);
            keys.forEach(key => {
                if (typeof target[key] === 'string') {
                    target[key] = this.parseExpression(target[key], context, eventParam);
                }
                else {
                    target[key] = this.parse(target[key], context, eventParam);
                }
            });
        }
        return target;
    }
    /**
     * 表达式求值
     */
    evaluate(expression, context, eventParam) {
        const parsedExpression = this.parse(expression, context, eventParam);
        return (new Function('return ' + parsedExpression))();
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    parseExpression(expression, context, eventParam) {
        // 空串直接返回
        if (expression === '') {
            return '';
        }
        this.parsers.forEach(parser => {
            if (typeof expression === 'string') {
                expression = parser.parse(expression, context, eventParam);
            }
        });
        return expression;
    }
}
VariableParseService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VariableParseService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [VARIABLE_PARSERS,] }] }
];
export { VariableParseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVfcGFyc2Vfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3ZhcmlhYmxlL3ZhcmlhYmxlX3BhcnNlX3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFrQixnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR3JFOzs7Ozs7O0dBT0c7QUFDSCxNQUNNLG9CQUFvQjtJQU94Qjs7O09BR0c7SUFDSCxZQUFzQyxPQUF5QjtRQUM3RCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxNQUFXLEVBQUUsT0FBYSxFQUFFLFVBQWdCO1FBQ3ZELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBRW5ELFdBQVc7WUFDWCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztTQUUxRDthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUVoQyxPQUFPO1lBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRTtnQkFDakMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQzVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3JFO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQzNEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FFSjthQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFFeEQsWUFBWTtZQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDakIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3RFO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQzVEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVEsQ0FBQyxVQUFrQixFQUFFLE9BQWEsRUFBRSxVQUFnQjtRQUNqRSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyRSxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssZUFBZSxDQUFDLFVBQWtCLEVBQUUsT0FBWSxFQUFFLFVBQWU7UUFFdkUsU0FBUztRQUNULElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUNyQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7Z0JBQ2xDLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDNUQ7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7OztZQWhGRixVQUFVOzs7O3dDQVlJLE1BQU0sU0FBQyxnQkFBZ0I7O0FBdUV0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDlj5jph4/op6PmnpDmnI3liqFcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmFyaWFibGVQYXJzZXIsIFZBUklBQkxFX1BBUlNFUlMgfSBmcm9tICcuL3ZhcmlhYmxlX3BhcnNlcic7XHJcblxyXG5cclxuLyoqXHJcbiAqIOWPmOmHj+ino+aekOacjeWKoVxyXG4gKiDogYzotKPvvJpcclxuICogMeOAgeino+aekOWtl+espuS4suS4reeahOWPmOmHj++8jOW5tuabv+aNouaIkOebuOW6lOeahOWAvO+8m1xyXG4gKiAy44CB5a+56KGo6L6+5byP6L+b6KGM5rGC5YC844CCXHJcbiAqXHJcbiAqIEB0b2RvIOWvueihqOi+vuW8j+axguWAvOeahOmDqOWIhuWSjOihqOi+vuW8j+WKn+iDvemHjeWPoO+8jOaYr+WQpui9rOenu+WIsOihqOi+vuW8j+S4re+8n1xyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBWYXJpYWJsZVBhcnNlU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+aekOWZqOmbhuWQiFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcGFyc2VyczogVmFyaWFibGVQYXJzZXJbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Y+Y6YeP6Kej5p6Q5pyN5YqhXHJcbiAgICogQHBhcmFtIHBhcnNlcnMg6Kej5p6Q5Zmo6ZuG5ZCIXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChWQVJJQUJMRV9QQVJTRVJTKSBwYXJzZXJzOiBWYXJpYWJsZVBhcnNlcltdKSB7XHJcbiAgICB0aGlzLnBhcnNlcnMgPSBwYXJzZXJzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5p6Q6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnNlKHRhcmdldDogYW55LCBjb250ZXh0PzogYW55LCBldmVudFBhcmFtPzogYW55KTogYW55IHtcclxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgLy8g5a2X56ym5Liy77yM55u05o6l6Kej5p6QXHJcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwcmVzc2lvbih0YXJnZXQsIGNvbnRleHQsIGV2ZW50UGFyYW0pO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XHJcblxyXG4gICAgICAvLyDpgY3ljobmlbDnu4RcclxuICAgICAgdGFyZ2V0LmZvckVhY2goKGl0ZW0sIGl0ZW1JbmRleCkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHRhcmdldFtpdGVtSW5kZXhdID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oaXRlbSwgY29udGV4dCwgZXZlbnRQYXJhbSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRhcmdldFtpdGVtSW5kZXhdID0gdGhpcy5wYXJzZShpdGVtLCBjb250ZXh0LCBldmVudFBhcmFtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0ICE9PSBudWxsKSB7XHJcblxyXG4gICAgICAvLyDpgY3ljoblr7nosaHlj6/mnprkuL7lsZ7mgKdcclxuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XHJcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHRhcmdldFtrZXldLCBjb250ZXh0LCBldmVudFBhcmFtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB0aGlzLnBhcnNlKHRhcmdldFtrZXldLCBjb250ZXh0LCBldmVudFBhcmFtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDooajovr7lvI/msYLlgLxcclxuICAgKi9cclxuICBwdWJsaWMgZXZhbHVhdGUoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0PzogYW55LCBldmVudFBhcmFtPzogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHBhcnNlZEV4cHJlc3Npb24gPSB0aGlzLnBhcnNlKGV4cHJlc3Npb24sIGNvbnRleHQsIGV2ZW50UGFyYW0pO1xyXG4gICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgcGFyc2VkRXhwcmVzc2lvbikpKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwcml2YXRlIHBhcnNlRXhwcmVzc2lvbihleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSwgZXZlbnRQYXJhbTogYW55KTogc3RyaW5nIHtcclxuXHJcbiAgICAvLyDnqbrkuLLnm7TmjqXov5Tlm55cclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wYXJzZXJzLmZvckVhY2gocGFyc2VyID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGV4cHJlc3Npb24gPSBwYXJzZXIucGFyc2UoZXhwcmVzc2lvbiwgY29udGV4dCwgZXZlbnRQYXJhbSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9O1xyXG4iXX0=