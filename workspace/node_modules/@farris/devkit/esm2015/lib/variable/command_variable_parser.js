/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { CommandContext } from '../command/index';
/**
 * 命令变量解析
 * {COMMAND~/params/key}
 * {COMMAND~/results/taskName}
 */
class CommandVariableParser {
    /**
     * 构造函数
     */
    constructor() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    parse(expression, context) {
        const paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(path => {
            const searchValue = `{COMMAND~${path}}`;
            const replaceValue = this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    }
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        const UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
        uiStateVariables.forEach(sessionVariable => {
            const pathMatches = sessionVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取UIState
     */
    getValue(path, context) {
        if (context instanceof CommandContext === false) {
            throw new Error('当前上下文不支持COMMAND变量，请检查！');
        }
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const type = parts.shift();
        if (type === 'params') {
            const paramKey = parts.shift();
            return context.command.params[paramKey];
        }
        else if (type === 'results') {
            return parts.reduce((results, paramKey) => {
                return results && results[paramKey];
            }, context.results);
        }
    }
}
CommandVariableParser.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandVariableParser.ctorParameters = () => [];
export { CommandVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9jb21tYW5kX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdsRDs7OztHQUlHO0FBQ0gsTUFDTSxxQkFBcUI7SUFFekI7O09BRUc7SUFDSDtJQUNBLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLFVBQWtCLEVBQUUsT0FBWTtRQUMzQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTVDLGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFVBQVUsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekM7UUFFRCxlQUFlO1FBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQixNQUFNLFdBQVcsR0FBRyxZQUFZLElBQUksR0FBRyxDQUFDO1lBQ3hDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xELFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSyxZQUFZLENBQUMsVUFBa0I7UUFDckMsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBRTNCLG9CQUFvQjtRQUNwQixNQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQ2pELE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlELElBQUksZ0JBQWdCLEtBQUssSUFBSSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsTUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztRQUM5QyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDekMsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSyxRQUFRLENBQUMsSUFBWSxFQUFFLE9BQVk7UUFDekMsSUFBSSxPQUFPLFlBQVksY0FBYyxLQUFLLEtBQUssRUFBRTtZQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7UUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ3BELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzQixJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDckIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQy9CLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBWSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtnQkFDckQsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7WUE3RUYsVUFBVTs7OztBQWdGWCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBzZXNzaW9u5Y+Y6YeP6Kej5p6QXHJcbiAqIEBhdXRob3IgV2l0dCA8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbWFuZENvbnRleHQgfSBmcm9tICcuLi9jb21tYW5kL2luZGV4JztcclxuaW1wb3J0IHsgVmFyaWFibGVQYXJzZXIgfSBmcm9tICcuL3ZhcmlhYmxlX3BhcnNlcic7XHJcblxyXG4vKipcclxuICog5ZG95Luk5Y+Y6YeP6Kej5p6QXHJcbiAqIHtDT01NQU5Efi9wYXJhbXMva2V5fVxyXG4gKiB7Q09NTUFORH4vcmVzdWx0cy90YXNrTmFtZX1cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQ29tbWFuZFZhcmlhYmxlUGFyc2VyIGltcGxlbWVudHMgVmFyaWFibGVQYXJzZXIge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDlj5jph49cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDlj5jph4/vvJrmoLzlvI/lvaLlpoLvvJovZnJhbWVJZC9jb21wb25lbnRJZC9zdGF0ZU5hbWVcclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgcGF0aHMgPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKTtcclxuXHJcbiAgICAvLyAx44CB5Y2V5Liq55qE6KGo6L6+5byP77ya55u05o6l5rGC5YC8XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxICYmIGV4cHJlc3Npb24gPT09IGB7Q09NTUFORH4ke3BhdGhzWzBdfX1gKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHBhdGhzWzBdLCBjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAy44CB5YW25LuW5oOF5Ya177ya5a2X56ym5Liy5pu/5o2iXHJcbiAgICBwYXRocy5mb3JFYWNoKHBhdGggPT4ge1xyXG4gICAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IGB7Q09NTUFORH4ke3BhdGh9fWA7XHJcbiAgICAgIGNvbnN0IHJlcGxhY2VWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUocGF0aCwgY29udGV4dCk7XHJcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPkOWPllNlc3Npb27lj5jph4/lkI1cclxuICAgKiDlj5jph4/moLzlvI/vvJp7fVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdFBhdGhzKGV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHBhdGhzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIC8vIOafpeaJvuaJgOacieeahHVpU3RhdGXlj5jph4/lrZfnrKbkuLJcclxuICAgIGNvbnN0IFVJX1NUQVRFX1BBVFRFUk5fRyA9IC9cXHtDT01NQU5EfihcXFMrPylcXH0vZztcclxuICAgIGNvbnN0IHVpU3RhdGVWYXJpYWJsZXMgPSBleHByZXNzaW9uLm1hdGNoKFVJX1NUQVRFX1BBVFRFUk5fRyk7XHJcbiAgICBpZiAodWlTdGF0ZVZhcmlhYmxlcyA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5o+Q5Y+W5ZCO6L6555qE6Lev5b6EXHJcbiAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOID0gL1xce0NPTU1BTkR+KFxcUys/KVxcfS87XHJcbiAgICB1aVN0YXRlVmFyaWFibGVzLmZvckVhY2goc2Vzc2lvblZhcmlhYmxlID0+IHtcclxuICAgICAgY29uc3QgcGF0aE1hdGNoZXMgPSBzZXNzaW9uVmFyaWFibGUubWF0Y2goVUlfU1RBVEVfUEFUVEVSTik7XHJcbiAgICAgIGlmIChwYXRoTWF0Y2hlcyAhPSBudWxsICYmIHBhdGhNYXRjaGVzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIHBhdGhzLnB1c2gocGF0aE1hdGNoZXNbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZVSVN0YXRlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZShwYXRoOiBzdHJpbmcsIGNvbnRleHQ6IGFueSkge1xyXG4gICAgaWYgKGNvbnRleHQgaW5zdGFuY2VvZiBDb21tYW5kQ29udGV4dCA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCflvZPliY3kuIrkuIvmlofkuI3mlK/mjIFDT01NQU5E5Y+Y6YeP77yM6K+35qOA5p+l77yBJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHR5cGUgPSBwYXJ0cy5zaGlmdCgpO1xyXG4gICAgaWYgKHR5cGUgPT09ICdwYXJhbXMnKSB7XHJcbiAgICAgIGNvbnN0IHBhcmFtS2V5ID0gcGFydHMuc2hpZnQoKTtcclxuICAgICAgcmV0dXJuIGNvbnRleHQuY29tbWFuZC5wYXJhbXNbcGFyYW1LZXldO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzdWx0cycpIHtcclxuICAgICAgcmV0dXJuIHBhcnRzLnJlZHVjZSgocmVzdWx0czogYW55LCBwYXJhbUtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMgJiYgcmVzdWx0c1twYXJhbUtleV07XHJcbiAgICAgIH0sIGNvbnRleHQucmVzdWx0cyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBDb21tYW5kVmFyaWFibGVQYXJzZXIgfTtcclxuIl19