import { Injectable } from '@angular/core';
const EVENT_PARAMS_EXP = /\{EVENTPARAM~\/(\S+?)\}/g;
const EVENT_PARAM_EXP = /\{EVENTPARAM~\/(\S+?)\}/;
/**
 * 命令参数解析器
 */
export class EventParamVariableParser {
    parse(expression, context, eventParam) {
        this.context = context;
        const variables = this.extractVariables(expression);
        if (!variables || variables.length < 1) {
            return expression;
        }
        variables.forEach(variableExpression => {
            const exprs = variableExpression.match(EVENT_PARAM_EXP);
            if (exprs && exprs.length === 2) {
                const variable = exprs[1];
                const value = this.getVariableValue(variable, eventParam);
                expression = expression.replace(EVENT_PARAM_EXP, value);
            }
        });
        return expression;
    }
    /**
     * 匹配表达式中的符合正则表达式的项
     * @param expression 表达式
     * @returns
     */
    extractVariables(expression) {
        if (!expression) {
            return null;
        }
        const variables = expression.match(EVENT_PARAMS_EXP);
        if (!variables || variables.length < 1) {
            return null;
        }
        return variables;
    }
    /**
     * 获取变量的值
     * @param variable 变量
     */
    getVariableValue(variable, eventParam) {
        if (!eventParam || !variable) {
            return null;
        }
        const variables = variable.split('/').filter(p => p);
        const result = variables.reduce((target, key) => {
            if (target) {
                return target[key];
            }
            else {
                return null;
            }
        }, eventParam);
        return result;
    }
}
EventParamVariableParser.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfcGFyYW1fdmFyaWFibGVfcGFyc2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvZXZlbnRfcGFyYW1fdmFyaWFibGVfcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsTUFBTSxnQkFBZ0IsR0FBRywwQkFBMEIsQ0FBQztBQUNwRCxNQUFNLGVBQWUsR0FBRyx5QkFBeUIsQ0FBQztBQUVsRDs7R0FFRztBQUVILE1BQU0sT0FBTyx3QkFBd0I7SUFHNUIsS0FBSyxDQUFDLFVBQWtCLEVBQUUsT0FBWSxFQUFFLFVBQWdCO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sVUFBVSxDQUFDO1NBQ25CO1FBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN4RCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUMxRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDekQ7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDRDs7OztPQUlHO0lBQ0ssZ0JBQWdCLENBQUMsVUFBa0I7UUFDekMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUNEOzs7T0FHRztJQUNLLGdCQUFnQixDQUFDLFFBQWdCLEVBQUUsVUFBZTtRQUN4RCxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFXLEVBQUUsR0FBVyxFQUFFLEVBQUU7WUFDM0QsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUM7YUFDYjtRQUNILENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNmLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OztZQXBERixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuY29uc3QgRVZFTlRfUEFSQU1TX0VYUCA9IC9cXHtFVkVOVFBBUkFNflxcLyhcXFMrPylcXH0vZztcclxuY29uc3QgRVZFTlRfUEFSQU1fRVhQID0gL1xce0VWRU5UUEFSQU1+XFwvKFxcUys/KVxcfS87XHJcblxyXG4vKipcclxuICog5ZG95Luk5Y+C5pWw6Kej5p6Q5ZmoXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFdmVudFBhcmFtVmFyaWFibGVQYXJzZXIgaW1wbGVtZW50cyBWYXJpYWJsZVBhcnNlciB7XHJcbiAgcHVibGljIGNvbnRleHQ6IGFueTtcclxuXHJcbiAgcHVibGljIHBhcnNlKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogYW55LCBldmVudFBhcmFtPzogYW55KSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgY29uc3QgdmFyaWFibGVzID0gdGhpcy5leHRyYWN0VmFyaWFibGVzKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKCF2YXJpYWJsZXMgfHwgdmFyaWFibGVzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgICB9XHJcbiAgICB2YXJpYWJsZXMuZm9yRWFjaCh2YXJpYWJsZUV4cHJlc3Npb24gPT4ge1xyXG4gICAgICBjb25zdCBleHBycyA9IHZhcmlhYmxlRXhwcmVzc2lvbi5tYXRjaChFVkVOVF9QQVJBTV9FWFApO1xyXG4gICAgICBpZiAoZXhwcnMgJiYgZXhwcnMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgY29uc3QgdmFyaWFibGUgPSBleHByc1sxXTtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFyaWFibGVWYWx1ZSh2YXJpYWJsZSwgZXZlbnRQYXJhbSk7XHJcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZShFVkVOVF9QQVJBTV9FWFAsIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Yy56YWN6KGo6L6+5byP5Lit55qE56ym5ZCI5q2j5YiZ6KGo6L6+5byP55qE6aG5XHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g6KGo6L6+5byPXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0VmFyaWFibGVzKGV4cHJlc3Npb246IHN0cmluZykge1xyXG4gICAgaWYgKCFleHByZXNzaW9uKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFyaWFibGVzID0gZXhwcmVzc2lvbi5tYXRjaChFVkVOVF9QQVJBTVNfRVhQKTtcclxuICAgIGlmICghdmFyaWFibGVzIHx8IHZhcmlhYmxlcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhcmlhYmxlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5Y+Y6YeP55qE5YC8XHJcbiAgICogQHBhcmFtIHZhcmlhYmxlIOWPmOmHj1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0VmFyaWFibGVWYWx1ZSh2YXJpYWJsZTogc3RyaW5nLCBldmVudFBhcmFtOiBhbnkpIHtcclxuICAgIGlmICghZXZlbnRQYXJhbSB8fCAhdmFyaWFibGUpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YXJpYWJsZXMgPSB2YXJpYWJsZS5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdmFyaWFibGVzLnJlZHVjZSgodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sIGV2ZW50UGFyYW0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn0iXX0=