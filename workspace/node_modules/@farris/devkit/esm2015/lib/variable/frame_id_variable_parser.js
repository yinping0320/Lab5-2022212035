/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { ParseUtil } from './parse_util';
const VARIABLE_MATCHER = /#{\S+?}/g;
/**
 * 数据变量解析
 */
class FrameIdVariableParser {
    /**
     * 解析变量
     * @param expression 形如：/#{root-component}/stateName
     * @param context 上下文
     */
    parse(expression, context) {
        this.context = context;
        const variables = this.extractVariables(expression);
        if (!variables || variables.length < 1) {
            return expression;
        }
        variables.forEach((exp) => {
            const frameId = this.getVariableValue(exp);
            expression = expression.replace(VARIABLE_MATCHER, frameId);
        });
        return expression;
    }
    /**
     * 计算表达式的值
     * @param expression like #{root-component}
     */
    getVariableValue(expression) {
        const relativeFrameId = expression.substring(2, expression.length - 1);
        return this.getFullFrameId(relativeFrameId);
    }
    extractVariables(expression) {
        if (!expression) {
            return [];
        }
        return expression.match(VARIABLE_MATCHER);
    }
    /**
     * 获取补全的frameId
     * @param frameId frameId
     */
    getFullFrameId(frameId) {
        const frameContext = ParseUtil.getFrameContext(this.context);
        const namespace = frameContext.namespace || '';
        const prefix = namespace ? `${namespace}_` : '';
        return `${prefix}${frameId}`;
    }
}
FrameIdVariableParser.decorators = [
    { type: Injectable }
];
export { FrameIdVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVfaWRfdmFyaWFibGVfcGFyc2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvZnJhbWVfaWRfdmFyaWFibGVfcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQztBQUNwQzs7R0FFRztBQUNILE1BQ00scUJBQXFCO0lBRXpCOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsVUFBa0IsRUFBRSxPQUFZO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sVUFBVSxDQUFDO1NBQ25CO1FBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDRDs7O09BR0c7SUFDSyxnQkFBZ0IsQ0FBQyxVQUFrQjtRQUN6QyxNQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ08sZ0JBQWdCLENBQUMsVUFBa0I7UUFDekMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssY0FBYyxDQUFDLE9BQWU7UUFDcEMsTUFBTSxZQUFZLEdBQWlCLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQy9DLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2hELE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7O1lBN0NGLFVBQVU7O0FBZ0RYLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIHNlc3Npb27lj5jph4/op6PmnpBcclxuICogQGF1dGhvciBXaXR0IDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC9pbmRleCc7XHJcbmltcG9ydCB7IFBhcnNlVXRpbCB9IGZyb20gJy4vcGFyc2VfdXRpbCc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJy4uL2ZyYW1lJztcclxuY29uc3QgVkFSSUFCTEVfTUFUQ0hFUiA9IC8je1xcUys/fS9nO1xyXG4vKipcclxuICog5pWw5o2u5Y+Y6YeP6Kej5p6QXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEZyYW1lSWRWYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcclxuICBwdWJsaWMgY29udGV4dDogYW55O1xyXG4gIC8qKlxyXG4gICAqIOino+aekOWPmOmHj1xyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOW9ouWmgu+8mi8je3Jvb3QtY29tcG9uZW50fS9zdGF0ZU5hbWVcclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiBhbnkge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIGNvbnN0IHZhcmlhYmxlcyA9IHRoaXMuZXh0cmFjdFZhcmlhYmxlcyhleHByZXNzaW9uKTtcclxuXHJcbiAgICBpZiAoIXZhcmlhYmxlcyB8fCB2YXJpYWJsZXMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICAgIH1cclxuICAgIHZhcmlhYmxlcy5mb3JFYWNoKChleHA6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBmcmFtZUlkID0gdGhpcy5nZXRWYXJpYWJsZVZhbHVlKGV4cCk7XHJcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoVkFSSUFCTEVfTUFUQ0hFUiwgZnJhbWVJZCk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBleHByZXNzaW9uO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDorqHnrpfooajovr7lvI/nmoTlgLxcclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiBsaWtlICN7cm9vdC1jb21wb25lbnR9XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYXJpYWJsZVZhbHVlKGV4cHJlc3Npb246IHN0cmluZykge1xyXG4gICAgY29uc3QgcmVsYXRpdmVGcmFtZUlkID0gZXhwcmVzc2lvbi5zdWJzdHJpbmcoMiwgZXhwcmVzc2lvbi5sZW5ndGggLSAxKTtcclxuICAgIHJldHVybiB0aGlzLmdldEZ1bGxGcmFtZUlkKHJlbGF0aXZlRnJhbWVJZCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZXh0cmFjdFZhcmlhYmxlcyhleHByZXNzaW9uOiBzdHJpbmcpIHtcclxuICAgIGlmICghZXhwcmVzc2lvbikge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbi5tYXRjaChWQVJJQUJMRV9NQVRDSEVSKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluihpeWFqOeahGZyYW1lSWRcclxuICAgKiBAcGFyYW0gZnJhbWVJZCBmcmFtZUlkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRGdWxsRnJhbWVJZChmcmFtZUlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gUGFyc2VVdGlsLmdldEZyYW1lQ29udGV4dCh0aGlzLmNvbnRleHQpO1xyXG4gICAgY29uc3QgbmFtZXNwYWNlID0gZnJhbWVDb250ZXh0Lm5hbWVzcGFjZSB8fCAnJztcclxuICAgIGNvbnN0IHByZWZpeCA9IG5hbWVzcGFjZSA/IGAke25hbWVzcGFjZX1fYCA6ICcnO1xyXG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke2ZyYW1lSWR9YDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEZyYW1lSWRWYXJpYWJsZVBhcnNlciB9O1xyXG4iXX0=