/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { ParseUtil } from './parse_util';
import { escape } from '../core/escape';
/**
 * 数据变量解析
 */
class UIStateVariableParser {
    /**
     * 解析变量
     * @param expression 形如：/frameId/stateName
     * @param context 上下文
     */
    parse(expression, context) {
        const appContext = ParseUtil.getAppContext(context);
        const paths = this.extractPaths(expression);
        if (paths.length === 1) {
            const value = this.getUIState(paths[0], appContext);
            // 1、单个的表达式：直接求值
            if (expression === `{UISTATE~${paths[0]}}`) {
                return value;
            }
            else if (expression === `{:UISTATE~${paths[0]}}`) {
                return escape(value);
            }
        }
        // 2、其他情况：字符串替换
        paths.forEach(path => {
            const searchValue = `{UISTATE~${path}}`;
            const replaceValue = this.getUIState(path, appContext);
            expression = expression.replace(searchValue, replaceValue);
            const target = `{:UISTATE~${path}}`;
            if (expression.includes(target)) {
                const value = escape(replaceValue);
                expression = expression.replace(target, value);
            }
        });
        return expression;
    }
    /**
     * 提取路径
     * 变量格式：{}
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const UI_STATE_PATTERN_G = /\{:?UISTATE~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        const UI_STATE_PATTERN = /\{:?UISTATE~(\S+?)\}/;
        uiStateVariables.forEach((uiStateVariable) => {
            const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取UIState
     */
    getUIState(path, appContext) {
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const [frameId, stateName] = parts;
        const frameContext = appContext.getFrameContext(frameId);
        let state = frameContext && frameContext.uiState[stateName];
        if (state && state.constructor.toString().startsWith('function Date()')) {
            return this.formatDate(state);
        }
        for (let i = 2; i < parts.length; i++) {
            state = state[parts[i]];
            // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。
            if (!state) {
                return state;
            }
        }
        return state;
    }
    /**
     * @todo：待删除
     */
    formatDate(value) {
        if (!value) {
            return '';
        }
        // 年
        const year = value.getFullYear();
        // 月
        let month = (value.getMonth() + 1).toString();
        month = month.length === 1 ? ('0' + month) : month;
        // 日
        let day = value.getDate().toString();
        day = day.length === 1 ? ('0' + day) : day;
        return `${year}-${month}-${day}`;
    }
}
UIStateVariableParser.decorators = [
    { type: Injectable }
];
export { UIStateVariableParser };
//# sourceMappingURL=data:application/json;base64,