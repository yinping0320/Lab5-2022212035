import { ParseUtil } from './parse_util';
const FORM_STATES_EXP = /\{FORMSTATE~\/(\S+?)\}/g;
const FORM_STATE_EXP = /\{FORMSTATE~\/(\S+?)\}/;
export class FormStateVariableParser {
    /**
     * 解析表达式变量
     */
    parse(expression, context) {
        this.context = context;
        const variables = this.extractVariables(expression);
        if (!variables || variables.length < 1) {
            return expression;
        }
        variables.forEach(variableExpression => {
            const exprs = variableExpression.match(FORM_STATE_EXP);
            if (exprs && exprs.length === 2) {
                const variable = exprs[1];
                const value = this.getVariableValue(variable);
                expression = expression.replace(FORM_STATE_EXP, value);
            }
        });
        return expression;
    }
    /**
     * 获取变量的值
     * @param variable 变量
     */
    getVariableValue(variable) {
        const frameContext = ParseUtil.getFrameContext(this.context);
        const appContext = frameContext.appContext;
        const formVariable = appContext.params.get(variable);
        return formVariable;
    }
    /**
     * 获取到表达式中所有FormState变量数组
     * @param expression 表达式
     */
    extractVariables(expression) {
        if (!expression) {
            return null;
        }
        const formStates = expression.match(FORM_STATES_EXP);
        if (!formStates || formStates.length < 1) {
            return null;
        }
        return formStates;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9zdGF0ZV92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9mb3JtX3N0YXRlX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ2xELE1BQU0sY0FBYyxHQUFHLHdCQUF3QixDQUFDO0FBRWhELE1BQU0sT0FBTyx1QkFBdUI7SUFFbEM7O09BRUc7SUFDSSxLQUFLLENBQUMsVUFBa0IsRUFBRSxPQUFZO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sVUFBVSxDQUFDO1NBQ25CO1FBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN2RCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzlDLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN4RDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUNEOzs7T0FHRztJQUNLLGdCQUFnQixDQUFDLFFBQWdCO1FBQ3ZDLE1BQU0sWUFBWSxHQUFpQixTQUFTLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRSxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBQzNDLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFDRDs7O09BR0c7SUFDSyxnQkFBZ0IsQ0FBQyxVQUFrQjtRQUN6QyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnLi4vZnJhbWUnO1xyXG5pbXBvcnQgeyBQYXJzZVV0aWwgfSBmcm9tICcuL3BhcnNlX3V0aWwnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuY29uc3QgRk9STV9TVEFURVNfRVhQID0gL1xce0ZPUk1TVEFURX5cXC8oXFxTKz8pXFx9L2c7XHJcbmNvbnN0IEZPUk1fU1RBVEVfRVhQID0gL1xce0ZPUk1TVEFURX5cXC8oXFxTKz8pXFx9LztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtU3RhdGVWYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcclxuICBwdWJsaWMgY29udGV4dDogYW55O1xyXG4gIC8qKlxyXG4gICAqIOino+aekOihqOi+vuW8j+WPmOmHj1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJzZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IGFueSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgY29uc3QgdmFyaWFibGVzID0gdGhpcy5leHRyYWN0VmFyaWFibGVzKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKCF2YXJpYWJsZXMgfHwgdmFyaWFibGVzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgICB9XHJcbiAgICB2YXJpYWJsZXMuZm9yRWFjaCh2YXJpYWJsZUV4cHJlc3Npb24gPT4ge1xyXG4gICAgICBjb25zdCBleHBycyA9IHZhcmlhYmxlRXhwcmVzc2lvbi5tYXRjaChGT1JNX1NUQVRFX0VYUCk7XHJcbiAgICAgIGlmIChleHBycyAmJiBleHBycy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGV4cHJzWzFdO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYXJpYWJsZVZhbHVlKHZhcmlhYmxlKTtcclxuICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKEZPUk1fU1RBVEVfRVhQLCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWPmOmHj+eahOWAvFxyXG4gICAqIEBwYXJhbSB2YXJpYWJsZSDlj5jph49cclxuICAgKi9cclxuICBwcml2YXRlIGdldFZhcmlhYmxlVmFsdWUodmFyaWFibGU6IHN0cmluZykge1xyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSBQYXJzZVV0aWwuZ2V0RnJhbWVDb250ZXh0KHRoaXMuY29udGV4dCk7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gZnJhbWVDb250ZXh0LmFwcENvbnRleHQ7XHJcbiAgICBjb25zdCBmb3JtVmFyaWFibGUgPSBhcHBDb250ZXh0LnBhcmFtcy5nZXQodmFyaWFibGUpO1xyXG4gICAgcmV0dXJuIGZvcm1WYXJpYWJsZTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5Yiw6KGo6L6+5byP5Lit5omA5pyJRm9ybVN0YXRl5Y+Y6YeP5pWw57uEXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g6KGo6L6+5byPXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0VmFyaWFibGVzKGV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZ1tdIHwgbnVsbCB7XHJcbiAgICBpZiAoIWV4cHJlc3Npb24pIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmb3JtU3RhdGVzID0gZXhwcmVzc2lvbi5tYXRjaChGT1JNX1NUQVRFU19FWFApO1xyXG4gICAgaWYgKCFmb3JtU3RhdGVzIHx8IGZvcm1TdGF0ZXMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBmb3JtU3RhdGVzO1xyXG4gIH1cclxufVxyXG4iXX0=