/**
 * 数据源变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { ParseUtil } from './parse_util';
import { escape } from '../core/escape';
/**
 * 数据变量解析
 */
class DataVariableParser {
    /**
     * 解析变量
     * @param expression 表达式
     * @param context 上下文
     */
    parse(expression, context) {
        const appContext = ParseUtil.getAppContext(context);
        const paths = this.extractPaths(expression);
        if (paths.length === 1) {
            const value = this.getValue(paths[0], appContext);
            // 1、单个的表达式：直接求值
            if (expression === `{DATA~${paths[0]}}`) {
                return value;
            }
            else if (expression === `{:DATA~${paths[0]}}`) {
                // 该内容是JSON的一部分，需要转义特殊字符
                return escape(value);
            }
        }
        // 2、其他情况：字符串替换
        paths.forEach((path) => {
            const replaceValue = this.getValue(path, appContext);
            const searchValue = `{DATA~${path}}`;
            expression = expression.replace(searchValue, replaceValue);
            const target = `{:DATA~${path}}`;
            if (expression.includes(target)) {
                const value = escape(replaceValue);
                expression = expression.replace(target, value);
            }
        });
        return expression;
    }
    /**
     * 提取路径
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const DATA_PATTERN_G = /\{:?DATA~(\S+?)\}/g;
        const dataVariables = expression.match(DATA_PATTERN_G);
        if (dataVariables === null) {
            return [];
        }
        // 提取后边的路径
        const DATA_PATTERN = /\{:?DATA~(\S+?)\}/;
        dataVariables.forEach(dataVariable => {
            const pathMatches = dataVariable.match(DATA_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取值
     * @param path 路径：/
     */
    getValue(path, appContext) {
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const frameContext = appContext.getFrameContext(parts[0]);
        if (!frameContext) {
            throw new Error(`${path}不正确，请检查！`);
        }
        const bindingData = frameContext.bindingData;
        if (!bindingData) {
            throw new Error(`${path}不正确，请检查！`);
        }
        return bindingData.getValue(parts.slice(1));
    }
}
DataVariableParser.decorators = [
    { type: Injectable }
];
export { DataVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9kYXRhX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFDSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDOztHQUVHO0FBQ0gsTUFDTSxrQkFBa0I7SUFFdEI7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxVQUFrQixFQUFFLE9BQVk7UUFDcEMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxNQUFNLEtBQUssR0FBYSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDbEQsZ0JBQWdCO1lBQ2hCLElBQUksVUFBVSxLQUFLLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3ZDLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7aUJBQU0sSUFBSSxVQUFVLEtBQUssVUFBVSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtnQkFDL0Msd0JBQXdCO2dCQUN4QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtTQUNGO1FBRUQsZUFBZTtRQUNmLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUM3QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNyRCxNQUFNLFdBQVcsR0FBRyxTQUFTLElBQUksR0FBRyxDQUFDO1lBQ3JDLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUUzRCxNQUFNLE1BQU0sR0FBRyxVQUFVLElBQUksR0FBRyxDQUFDO1lBQ2pDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNuQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDaEQ7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7T0FFRztJQUNLLFlBQVksQ0FBQyxVQUFrQjtRQUNyQyxNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7UUFFM0Isb0JBQW9CO1FBQ3BCLE1BQU0sY0FBYyxHQUFHLG9CQUFvQixDQUFDO1FBQzVDLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsTUFBTSxZQUFZLEdBQUcsbUJBQW1CLENBQUM7UUFDekMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3JELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssUUFBUSxDQUFDLElBQVksRUFBRSxVQUFzQjtRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ3BELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDN0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7O1lBbEZGLFVBQVU7O0FBdUZYLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOaVsOaNrua6kOWPmOmHj+ino+aekFxyXG4gKiBAYXV0aG9yIFdpdHQgPGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC9pbmRleCc7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VyIH0gZnJvbSAnLi92YXJpYWJsZV9wYXJzZXInO1xyXG5pbXBvcnQgeyBQYXJzZVV0aWwgfSBmcm9tICcuL3BhcnNlX3V0aWwnO1xyXG5pbXBvcnQgeyBlc2NhcGUgfSBmcm9tICcuLi9jb3JlL2VzY2FwZSc7XHJcbi8qKlxyXG4gKiDmlbDmja7lj5jph4/op6PmnpBcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRGF0YVZhcmlhYmxlUGFyc2VyIGltcGxlbWVudHMgVmFyaWFibGVQYXJzZXIge1xyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDlj5jph49cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwYXJzZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gUGFyc2VVdGlsLmdldEFwcENvbnRleHQoY29udGV4dCk7XHJcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKTtcclxuXHJcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZShwYXRoc1swXSwgYXBwQ29udGV4dCk7XHJcbiAgICAgIC8vIDHjgIHljZXkuKrnmoTooajovr7lvI/vvJrnm7TmjqXmsYLlgLxcclxuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IGB7REFUQX4ke3BhdGhzWzBdfX1gKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gPT09IGB7OkRBVEF+JHtwYXRoc1swXX19YCkge1xyXG4gICAgICAgIC8vIOivpeWGheWuueaYr0pTT07nmoTkuIDpg6jliIbvvIzpnIDopoHovazkuYnnibnmrorlrZfnrKZcclxuICAgICAgICByZXR1cm4gZXNjYXBlKHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIDLjgIHlhbbku5bmg4XlhrXvvJrlrZfnrKbkuLLmm7/mjaJcclxuICAgIHBhdGhzLmZvckVhY2goKHBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCByZXBsYWNlVmFsdWUgPSB0aGlzLmdldFZhbHVlKHBhdGgsIGFwcENvbnRleHQpO1xyXG4gICAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IGB7REFUQX4ke3BhdGh9fWA7XHJcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XHJcblxyXG4gICAgICBjb25zdCB0YXJnZXQgPSBgezpEQVRBfiR7cGF0aH19YDtcclxuICAgICAgaWYgKGV4cHJlc3Npb24uaW5jbHVkZXModGFyZ2V0KSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZXNjYXBlKHJlcGxhY2VWYWx1ZSk7XHJcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZSh0YXJnZXQsIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmj5Dlj5bot6/lvoRcclxuICAgKi9cclxuICBwcml2YXRlIGV4dHJhY3RQYXRocyhleHByZXNzaW9uOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHBhdGhzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIC8vIOafpeaJvuaJgOacieeahHVpU3RhdGXlj5jph4/lrZfnrKbkuLJcclxuICAgIGNvbnN0IERBVEFfUEFUVEVSTl9HID0gL1xcezo/REFUQX4oXFxTKz8pXFx9L2c7XHJcbiAgICBjb25zdCBkYXRhVmFyaWFibGVzID0gZXhwcmVzc2lvbi5tYXRjaChEQVRBX1BBVFRFUk5fRyk7XHJcbiAgICBpZiAoZGF0YVZhcmlhYmxlcyA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5o+Q5Y+W5ZCO6L6555qE6Lev5b6EXHJcbiAgICBjb25zdCBEQVRBX1BBVFRFUk4gPSAvXFx7Oj9EQVRBfihcXFMrPylcXH0vO1xyXG4gICAgZGF0YVZhcmlhYmxlcy5mb3JFYWNoKGRhdGFWYXJpYWJsZSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhdGhNYXRjaGVzID0gZGF0YVZhcmlhYmxlLm1hdGNoKERBVEFfUEFUVEVSTik7XHJcbiAgICAgIGlmIChwYXRoTWF0Y2hlcyAhPSBudWxsICYmIHBhdGhNYXRjaGVzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIHBhdGhzLnB1c2gocGF0aE1hdGNoZXNbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwYXRocztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWAvFxyXG4gICAqIEBwYXJhbSBwYXRoIOi3r+W+hO+8mi9cclxuICAgKi9cclxuICBwcml2YXRlIGdldFZhbHVlKHBhdGg6IHN0cmluZywgYXBwQ29udGV4dDogQXBwQ29udGV4dCk6IGFueSB7XHJcbiAgICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmdldEZyYW1lQ29udGV4dChwYXJ0c1swXSk7XHJcbiAgICBpZiAoIWZyYW1lQ29udGV4dCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGF0aH3kuI3mraPnoa7vvIzor7fmo4Dmn6XvvIFgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiaW5kaW5nRGF0YSA9IGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YTtcclxuICAgIGlmICghYmluZGluZ0RhdGEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3BhdGh95LiN5q2j56Gu77yM6K+35qOA5p+l77yBYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmluZGluZ0RhdGEuZ2V0VmFsdWUocGFydHMuc2xpY2UoMSkpO1xyXG4gIH1cclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBEYXRhVmFyaWFibGVQYXJzZXIgfTtcclxuIl19