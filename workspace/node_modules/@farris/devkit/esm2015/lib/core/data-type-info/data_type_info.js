/*
 * @Author: Witt
 * @Date: 2018-12-07 09:05:09
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-27 20:35:02
 */
import { EntityMetadataUtil } from '../../entity/metadata/index';
import { DataPropGroup } from './data_prop_info';
/**
 * 实体类型信息
 * @todo：
 * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；
 * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。
 */
class DataTypeInfo {
    /**
     * 是否为值对象
     */
    get isValueObject() {
        return !this.primaryKey;
    }
    /**
     * 构造函数
     * @todo：不应该识别
     */
    constructor(type) {
        this.type = type;
        this.primaryKey = '';
        this.foreignKey = '';
        this.propInfoMap = new Map();
        this.collectEntityInfos();
        this.collectPropInfos();
    }
    getBindingPathByTableName(tableName) {
        const fullEntityPath = this.getFullEntityPath(this, tableName);
        if (!fullEntityPath) {
            return null;
        }
        fullEntityPath.splice(0, 1);
        return '/' + fullEntityPath.join('/');
    }
    getFullEntityPath(dataTypeInfo, tableName, paths = []) {
        if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
            paths.push(dataTypeInfo.entityInfo.nodeCode);
            return paths;
        }
        const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);
        if (props.length < 1) {
            paths = [];
            return paths;
        }
        if (dataTypeInfo.entityInfo) {
            paths.push(dataTypeInfo.entityInfo.nodeCode);
        }
        for (let idx = 0; idx < props.length; idx++) {
            const dataTypeInfo = props[idx].typeInfo;
            const path = this.getFullEntityPath(dataTypeInfo, tableName);
            if (!path || path.length < 1) {
                continue;
            }
            else {
                paths = paths.concat(path);
                return paths;
            }
        }
        return null;
    }
    /**
     * 获取全部属性信息
     */
    getPropInfos() {
        return Array.from(this.propInfoMap.values()).filter((propInfo) => !propInfo.isVOField);
    }
    /**
     * 获取全部属性的名称
     */
    getPropNames() {
        const propNames = [];
        const propInfos = this.getPropInfos();
        propInfos.forEach((propInfo) => {
            propNames.push(propInfo.name);
        });
        return propNames;
    }
    /**
     * 根据group获取属性信息数组
     */
    getPropInfosByGroup(group) {
        const allPropInfos = Array.from(this.propInfoMap.values());
        const propInfos = allPropInfos.filter((propInfo) => {
            return propInfo.group === group && !propInfo.isVOField;
        });
        return propInfos;
    }
    /**
     * 根据group获取属性名称数组
     * @param group 属性分组
     */
    getPropNamesByGroup(group) {
        const propNames = [];
        const propInfos = this.getPropInfosByGroup(group);
        propInfos.forEach((propInfo) => {
            propNames.push(propInfo.name);
        });
        return propNames;
    }
    /**
     * 根据propName获取属性信息
     */
    getPropInfoByName(propName) {
        if (this.propInfoMap.has(propName)) {
            return this.propInfoMap.get(propName);
        }
        return null;
    }
    /**
     * 根据path获取属性信息
     */
    getPropInfoByPath(path) {
        // 先复制，防止shift方法产生污染
        const arrPath = path.concat([]);
        if (arrPath.length === 0) {
            throw Error(`属性路径不能为空`);
        }
        // 循环查找
        let typeInfo = this;
        let propInfo = null;
        while (typeInfo && arrPath.length > 0) {
            const propName = arrPath.shift();
            propInfo = typeInfo.getPropInfoByName(propName);
            if (!propInfo) {
                throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);
            }
            typeInfo = propInfo.typeInfo;
            // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)
            if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {
                propInfo = null;
                typeInfo = null;
            }
        }
        return propInfo;
    }
    /**
     * 根据path获取对应属性的TypeInfo
     */
    getTypeInfoByPath(path) {
        // 空数组时返回
        if (path.length === 0) {
            return this;
        }
        // 获取对应属性信息
        const propInfo = this.getPropInfoByPath(path);
        if (!propInfo.typeInfo) {
            throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);
        }
        return propInfo.typeInfo;
    }
    /**
     * 获取主键的属性信息
     */
    getPrimaryKeyPropInfo() {
        return this.getPropInfoByName(this.primaryKey);
    }
    /**
     * 根据name获取影射名
     */
    getPropMappingByName(name) {
        const propInfo = this.getPropInfoByName(name);
        if (!propInfo) {
            return '';
        }
        return propInfo.mapping;
    }
    /**
     * 根据path获取映射名
     */
    getPropMappingByPath(path) {
        const propInfo = this.getPropInfoByPath(path);
        if (!propInfo) {
            return '';
        }
        return propInfo.mapping;
    }
    /**
     * 检查属性是否属于特定的分组
     */
    checkPropGroup(propName, propGroup) {
        const propInfo = this.getPropInfoByName(propName);
        if (propInfo && propInfo.group === propGroup) {
            return true;
        }
        return false;
    }
    /**
     * --------------------------------------------------------------------------------
     * 属性元数据 => 属性描述信息
     * --------------------------------------------------------------------------------
     */
    /**
     * 搜集所有属性信息
     * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。
     */
    collectPropInfos() {
        // 简单属性
        const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);
        Object.keys(ngPlainProperties).forEach((propName) => {
            const ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                this.primaryKey = propName;
            }
            if (ngProperty.foreign === true) {
                this.foreignKey = propName;
            }
            this.addPropInfo(DataPropGroup.Plain, propName, ngProperty.dataField, null, ngProperty);
        });
        // 实体属性
        const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);
        Object.keys(ngEntityProperties).forEach((propName) => {
            const ngProperty = ngEntityProperties[propName];
            this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);
        });
        // 动态实体属性
        const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);
        Object.keys(ngDynamicProperties).forEach((propName) => {
            const ngProperty = ngDynamicProperties[propName];
            this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);
        });
        // 实体列表属性
        const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);
        Object.keys(ngEntityListProperties).forEach((propName) => {
            const ngProperty = ngEntityListProperties[propName];
            this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);
        });
    }
    collectEntityInfos() {
        let entityInfo = EntityMetadataUtil.getNgEntityMatadata(this.type);
        if (!entityInfo) {
            // 应用于解析表单
            entityInfo = {
                originalCode: this.type["code"],
                nodeCode: this.type["label"]
            };
        }
        this.entityInfo = entityInfo;
    }
    /**
     * 添加属性信息
     */
    addPropInfo(group, name, mapping, type, metadataInfo) {
        // 没有设置影射时，用属性名充当影射
        mapping = mapping ? mapping : name;
        let typeInfo = null;
        if (type) {
            typeInfo = new DataTypeInfo(type);
        }
        const propInfo = { group, name, mapping, typeInfo, metadataInfo };
        this.propInfoMap.set(name, propInfo);
        // 将vo字段也加入便于表达式查找
        const originalDataField = metadataInfo && metadataInfo.originalDataField;
        if (originalDataField && !this.propInfoMap.has(originalDataField)) {
            this.propInfoMap.set(originalDataField, Object.assign({}, propInfo, { isVOField: true }));
        }
        else if (metadataInfo && metadataInfo.type) {
            const entityInfo = EntityMetadataUtil.getNgEntityMatadata(metadataInfo.type);
            if (entityInfo && entityInfo.originalCode) {
                this.propInfoMap.set(entityInfo.originalCode, Object.assign({}, propInfo, { isVOField: true }));
            }
        }
    }
}
export { DataTypeInfo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV90eXBlX2luZm8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2RhdGEtdHlwZS1pbmZvL2RhdGFfdHlwZV9pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBR0gsT0FBTyxFQUVMLGtCQUFrQixFQUVuQixNQUFNLDZCQUE2QixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sa0JBQWtCLENBQUM7QUFFL0Q7Ozs7O0dBS0c7QUFDSCxNQUFNLFlBQVk7SUF1QmhCOztPQUVHO0lBQ0gsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxZQUFZLElBQVM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUNuRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBQ00seUJBQXlCLENBQUMsU0FBaUI7UUFDaEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixPQUFPLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDTyxpQkFBaUIsQ0FBQyxZ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QUMsSUFBSSxFQUFFO1lBQzVDLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RSxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFO2dCQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxvQkFBTyxRQUFRLElBQUUsU0FBUyxFQUFFLElBQUksSUFBRyxDQUFDO2FBQ2pGO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiBXaXR0XHJcbiAqIEBEYXRlOiAyMDE4LTEyLTA3IDA5OjA1OjA5XHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBXaXR0XHJcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTgtMTItMjcgMjA6MzU6MDJcclxuICovXHJcblxyXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgTmdQcm9wZXJ0eSwgTmdGaWVsZFByb3BlcnR5LCBOZ09iamVjdFByb3BlcnR5LCBOZ0R5bmFtaWNQcm9wZXJ0eSwgTmdMaXN0UHJvcGVydHksXHJcbiAgRW50aXR5TWV0YWRhdGFVdGlsLFxyXG4gIE5nRW50aXR5XHJcbn0gZnJvbSAnLi4vLi4vZW50aXR5L21ldGFkYXRhL2luZGV4JztcclxuaW1wb3J0IHsgRGF0YVByb3BHcm91cCwgRGF0YVByb3BJbmZvIH0gZnJvbSAnLi9kYXRhX3Byb3BfaW5mbyc7XHJcblxyXG4vKipcclxuICog5a6e5L2T57G75Z6L5L+h5oGvXHJcbiAqIEB0b2Rv77yaXHJcbiAqIDHjgIHmnoTpgKDml7bkuI3lupTor6Xor4bliKtFbnRpdHnmqKHlnZfnmoTkuJzopb/vvIzlupTor6XmmK/mm7Tmir3osaHnmoTvvJtcclxuICogMuOAgeaehOmAoOWHveaVsOW6lOivpeaOpeaUtuS4gOS4qkJ1aWxkZXLmjqXlj6PvvIznlLFFbnRpdHnmiJbogIXlhbbku5blrp7njrDlsYLmnaXlrp7njrDov5nkuKrmjqXlj6PjgIJcclxuICovXHJcbmNsYXNzIERhdGFUeXBlSW5mbyB7XHJcbiAgcHVibGljIGVudGl0eUluZm86IE5nRW50aXR5O1xyXG5cclxuICAvKipcclxuICAgKiDmlbDmja7nsbvlnotcclxuICAgKi9cclxuICBwdWJsaWMgdHlwZTogVHlwZTxhbnk+O1xyXG5cclxuICAvKipcclxuICAgKiDlsZ7mgKfpm4blkIhcclxuICAgKi9cclxuICBwdWJsaWMgcHJvcEluZm9NYXA6IE1hcDxzdHJpbmcsIERhdGFQcm9wSW5mbz47XHJcblxyXG4gIC8qKlxyXG4gICAqIOS4u+mUrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmltYXJ5S2V5OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWklumUrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmb3JlaWduS2V5OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuS4uuWAvOWvueixoVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgaXNWYWx1ZU9iamVjdCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5wcmltYXJ5S2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHRvZG/vvJrkuI3lupTor6Xor4bliKtcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih0eXBlOiBhbnkpIHtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLnByaW1hcnlLZXkgPSAnJztcclxuICAgIHRoaXMuZm9yZWlnbktleSA9ICcnO1xyXG4gICAgdGhpcy5wcm9wSW5mb01hcCA9IG5ldyBNYXA8c3RyaW5nLCBEYXRhUHJvcEluZm8+KCk7XHJcbiAgICB0aGlzLmNvbGxlY3RFbnRpdHlJbmZvcygpO1xyXG4gICAgdGhpcy5jb2xsZWN0UHJvcEluZm9zKCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXRCaW5kaW5nUGF0aEJ5VGFibGVOYW1lKHRhYmxlTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGZ1bGxFbnRpdHlQYXRoID0gdGhpcy5nZXRGdWxsRW50aXR5UGF0aCh0aGlzLCB0YWJsZU5hbWUpO1xyXG4gICAgaWYgKCFmdWxsRW50aXR5UGF0aCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGZ1bGxFbnRpdHlQYXRoLnNwbGljZSgwLCAxKTtcclxuICAgIHJldHVybiAnLycgKyBmdWxsRW50aXR5UGF0aC5qb2luKCcvJyk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0RnVsbEVudGl0eVBhdGgoZGF0YVR5cGVJbmZvOiBEYXRhVHlwZUluZm8sIHRhYmxlTmFtZTogc3RyaW5nLCBwYXRoczogc3RyaW5nW10gPSBbXSkge1xyXG4gICAgaWYgKGRhdGFUeXBlSW5mby5lbnRpdHlJbmZvICYmIChkYXRhVHlwZUluZm8uZW50aXR5SW5mby5ub2RlQ29kZSA9PT0gdGFibGVOYW1lIHx8IGRhdGFUeXBlSW5mby5lbnRpdHlJbmZvLm9yaWdpbmFsQ29kZSA9PT0gdGFibGVOYW1lKSkge1xyXG4gICAgICBwYXRocy5wdXNoKGRhdGFUeXBlSW5mby5lbnRpdHlJbmZvLm5vZGVDb2RlKTtcclxuICAgICAgcmV0dXJuIHBhdGhzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJvcHMgPSBBcnJheS5mcm9tKGRhdGFUeXBlSW5mby5wcm9wSW5mb01hcC52YWx1ZXMoKSkuZmlsdGVyKHAgPT4gcC50eXBlSW5mbyk7XHJcbiAgICBpZiAocHJvcHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICBwYXRocyA9IFtdO1xyXG4gICAgICByZXR1cm4gcGF0aHM7XHJcbiAgICB9XHJcbiAgICBpZiAoZGF0YVR5cGVJbmZvLmVudGl0eUluZm8pIHtcclxuICAgICAgcGF0aHMucHVzaChkYXRhVHlwZUluZm8uZW50aXR5SW5mby5ub2RlQ29kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcHJvcHMubGVuZ3RoOyBpZHgrKykge1xyXG4gICAgICBjb25zdCBkYXRhVHlwZUluZm8gPSBwcm9wc1tpZHhdLnR5cGVJbmZvO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRGdWxsRW50aXR5UGF0aChkYXRhVHlwZUluZm8sIHRhYmxlTmFtZSk7XHJcbiAgICAgIGlmICghcGF0aCB8fCBwYXRoLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXRocyA9IHBhdGhzLmNvbmNhdChwYXRoKTtcclxuICAgICAgICByZXR1cm4gcGF0aHM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blhajpg6jlsZ7mgKfkv6Hmga9cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJvcEluZm9zKCk6IERhdGFQcm9wSW5mb1tdIHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucHJvcEluZm9NYXAudmFsdWVzKCkpLmZpbHRlcigocHJvcEluZm8pID0+ICFwcm9wSW5mby5pc1ZPRmllbGQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5YWo6YOo5bGe5oCn55qE5ZCN56ewXHJcbiAgICovXHJcbiAgcHVibGljIGdldFByb3BOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwcm9wTmFtZXMgPSBbXTtcclxuICAgIGNvbnN0IHByb3BJbmZvcyA9IHRoaXMuZ2V0UHJvcEluZm9zKCk7XHJcbiAgICBwcm9wSW5mb3MuZm9yRWFjaCgocHJvcEluZm8pID0+IHtcclxuICAgICAgcHJvcE5hbWVzLnB1c2gocHJvcEluZm8ubmFtZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwcm9wTmFtZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5ncm91cOiOt+WPluWxnuaAp+S/oeaBr+aVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcm9wSW5mb3NCeUdyb3VwKGdyb3VwOiBEYXRhUHJvcEdyb3VwKTogRGF0YVByb3BJbmZvW10ge1xyXG4gICAgY29uc3QgYWxsUHJvcEluZm9zID0gQXJyYXkuZnJvbSh0aGlzLnByb3BJbmZvTWFwLnZhbHVlcygpKTtcclxuICAgIGNvbnN0IHByb3BJbmZvcyA9IGFsbFByb3BJbmZvcy5maWx0ZXIoKHByb3BJbmZvOiBEYXRhUHJvcEluZm8pID0+IHtcclxuICAgICAgcmV0dXJuIHByb3BJbmZvLmdyb3VwID09PSBncm91cCAmJiAhcHJvcEluZm8uaXNWT0ZpZWxkO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcHJvcEluZm9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2uZ3JvdXDojrflj5blsZ7mgKflkI3np7DmlbDnu4RcclxuICAgKiBAcGFyYW0gZ3JvdXAg5bGe5oCn5YiG57uEXHJcbiAgICovXHJcbiAgcHVibGljIGdldFByb3BOYW1lc0J5R3JvdXAoZ3JvdXA6IERhdGFQcm9wR3JvdXApOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwcm9wTmFtZXMgPSBbXTtcclxuICAgIGNvbnN0IHByb3BJbmZvcyA9IHRoaXMuZ2V0UHJvcEluZm9zQnlHcm91cChncm91cCk7XHJcbiAgICBwcm9wSW5mb3MuZm9yRWFjaCgocHJvcEluZm8pID0+IHtcclxuICAgICAgcHJvcE5hbWVzLnB1c2gocHJvcEluZm8ubmFtZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwcm9wTmFtZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5wcm9wTmFtZeiOt+WPluWxnuaAp+S/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcm9wSW5mb0J5TmFtZShwcm9wTmFtZTogc3RyaW5nKTogRGF0YVByb3BJbmZvIHtcclxuICAgIGlmICh0aGlzLnByb3BJbmZvTWFwLmhhcyhwcm9wTmFtZSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHJvcEluZm9NYXAuZ2V0KHByb3BOYW1lKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2ucGF0aOiOt+WPluWxnuaAp+S/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcm9wSW5mb0J5UGF0aChwYXRoOiBzdHJpbmdbXSk6IERhdGFQcm9wSW5mbyB7XHJcblxyXG4gICAgLy8g5YWI5aSN5Yi277yM6Ziy5q2ic2hpZnTmlrnms5XkuqfnlJ/msaHmn5NcclxuICAgIGNvbnN0IGFyclBhdGggPSBwYXRoLmNvbmNhdChbXSk7XHJcbiAgICBpZiAoYXJyUGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhyb3cgRXJyb3IoYOWxnuaAp+i3r+W+hOS4jeiDveS4uuepumApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOW+queOr+afpeaJvlxyXG4gICAgbGV0IHR5cGVJbmZvID0gdGhpcztcclxuICAgIGxldCBwcm9wSW5mbyA9IG51bGw7XHJcbiAgICB3aGlsZSAodHlwZUluZm8gJiYgYXJyUGF0aC5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICBjb25zdCBwcm9wTmFtZSA9IGFyclBhdGguc2hpZnQoKTtcclxuICAgICAgcHJvcEluZm8gPSB0eXBlSW5mby5nZXRQcm9wSW5mb0J5TmFtZShwcm9wTmFtZSk7XHJcbiAgICAgIGlmICghcHJvcEluZm8pIHtcclxuICAgICAgICB0aHJvdyBFcnJvcihg6Lev5b6EJHtwYXRofeS4reWtmOWcqOS4jeato+ehrueahOiKgueCuSR7cHJvcE5hbWV977yM6K+35qOA5p+lYCk7XHJcbiAgICAgIH1cclxuICAgICAgdHlwZUluZm8gPSBwcm9wSW5mby50eXBlSW5mbztcclxuXHJcbiAgICAgIC8vIOWmguaenOaYr+WKqOaAgeWIl++8jOW5tuS4lOi3r+W+hOaVsOe7hOmHjOi/mOacieWxnuaAp++8jOe7n+S4gOiuvue9ruS4um51bGwo5Yqo5oCB5YiX5LiN5YaN5o+P6L+w5bGe5oCn5L+h5oGvKVxyXG4gICAgICBpZiAocHJvcEluZm8uZ3JvdXAgPT09IERhdGFQcm9wR3JvdXAuRHluYW1pYyAmJiBhcnJQYXRoLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBwcm9wSW5mbyA9IG51bGw7XHJcbiAgICAgICAgdHlwZUluZm8gPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb3BJbmZvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2ucGF0aOiOt+WPluWvueW6lOWxnuaAp+eahFR5cGVJbmZvXHJcbiAgICovXHJcbiAgcHVibGljIGdldFR5cGVJbmZvQnlQYXRoKHBhdGg6IHN0cmluZ1tdKTogRGF0YVR5cGVJbmZvIHtcclxuXHJcbiAgICAvLyDnqbrmlbDnu4Tml7bov5Tlm55cclxuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvLyDojrflj5blr7nlupTlsZ7mgKfkv6Hmga9cclxuICAgIGNvbnN0IHByb3BJbmZvID0gdGhpcy5nZXRQcm9wSW5mb0J5UGF0aChwYXRoKTtcclxuICAgIGlmICghcHJvcEluZm8udHlwZUluZm8pIHtcclxuICAgICAgdGhyb3cgRXJyb3IoYOi3r+W+hCR7cGF0aH3ml6Dms5XlrprkvY3liLDkuIDkuKpFbnRpdHlUeXBlSW5mb++8jOivt+ajgOafpWApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwcm9wSW5mby50eXBlSW5mbztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS4u+mUrueahOWxnuaAp+S/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcmltYXJ5S2V5UHJvcEluZm8oKTogRGF0YVByb3BJbmZvIHtcclxuICAgIHJldHVybiB0aGlzLmdldFByb3BJbmZvQnlOYW1lKHRoaXMucHJpbWFyeUtleSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5uYW1l6I635Y+W5b2x5bCE5ZCNXHJcbiAgICovXHJcbiAgcHVibGljIGdldFByb3BNYXBwaW5nQnlOYW1lKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwcm9wSW5mbyA9IHRoaXMuZ2V0UHJvcEluZm9CeU5hbWUobmFtZSk7XHJcbiAgICBpZiAoIXByb3BJbmZvKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiBwcm9wSW5mby5tYXBwaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2ucGF0aOiOt+WPluaYoOWwhOWQjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcm9wTWFwcGluZ0J5UGF0aChwYXRoOiBzdHJpbmdbXSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwcm9wSW5mbyA9IHRoaXMuZ2V0UHJvcEluZm9CeVBhdGgocGF0aCk7XHJcbiAgICBpZiAoIXByb3BJbmZvKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiBwcm9wSW5mby5tYXBwaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qOA5p+l5bGe5oCn5piv5ZCm5bGe5LqO54m55a6a55qE5YiG57uEXHJcbiAgICovXHJcbiAgcHVibGljIGNoZWNrUHJvcEdyb3VwKHByb3BOYW1lOiBzdHJpbmcsIHByb3BHcm91cDogRGF0YVByb3BHcm91cCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcHJvcEluZm8gPSB0aGlzLmdldFByb3BJbmZvQnlOYW1lKHByb3BOYW1lKTtcclxuICAgIGlmIChwcm9wSW5mbyAmJiBwcm9wSW5mby5ncm91cCA9PT0gcHJvcEdyb3VwKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICog5bGe5oCn5YWD5pWw5o2uID0+IOWxnuaAp+aPj+i/sOS/oeaBr1xyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG4gIC8qKlxyXG4gICAqIOaQnOmbhuaJgOacieWxnuaAp+S/oeaBr1xyXG4gICAqIEB0b2Rv77ya5raI6Zmk6YeN5aSN5Luj56CB77yMdHPkuI3mlK/mjIFpbnRlcmZhY2Xnsbvlnovmo4DmtYvvvIzmmoLml7bpgJrov4fpgY3ljoblrp7njrDjgIJcclxuICAgKi9cclxuICBwcml2YXRlIGNvbGxlY3RQcm9wSW5mb3MoKSB7XHJcblxyXG4gICAgLy8g566A5Y2V5bGe5oCnXHJcbiAgICBjb25zdCBuZ1BsYWluUHJvcGVydGllcyA9IEVudGl0eU1ldGFkYXRhVXRpbC5nZXROZ0ZpZWxkUHJvcGVydGllcyh0aGlzLnR5cGUpO1xyXG4gICAgT2JqZWN0LmtleXMobmdQbGFpblByb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdQcm9wZXJ0eSA9IG5nUGxhaW5Qcm9wZXJ0aWVzW3Byb3BOYW1lXSBhcyBOZ0ZpZWxkUHJvcGVydHk7XHJcbiAgICAgIGlmIChuZ1Byb3BlcnR5LnByaW1hcnkgPT09IHRydWUpIHtcclxuICAgICAgICB0aGlzLnByaW1hcnlLZXkgPSBwcm9wTmFtZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobmdQcm9wZXJ0eS5mb3JlaWduID09PSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JlaWduS2V5ID0gcHJvcE5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hZGRQcm9wSW5mbyhEYXRhUHJvcEdyb3VwLlBsYWluLCBwcm9wTmFtZSwgbmdQcm9wZXJ0eS5kYXRhRmllbGQsIG51bGwsIG5nUHJvcGVydHkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g5a6e5L2T5bGe5oCnXHJcbiAgICBjb25zdCBuZ0VudGl0eVByb3BlcnRpZXMgPSBFbnRpdHlNZXRhZGF0YVV0aWwuZ2V0TmdPYmplY3RQcm9wZXJ0aWVzKHRoaXMudHlwZSk7XHJcbiAgICBPYmplY3Qua2V5cyhuZ0VudGl0eVByb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdQcm9wZXJ0eSA9IG5nRW50aXR5UHJvcGVydGllc1twcm9wTmFtZV0gYXMgTmdPYmplY3RQcm9wZXJ0eTtcclxuICAgICAgdGhpcy5hZGRQcm9wSW5mbyhEYXRhUHJvcEdyb3VwLk9iamVjdCwgcHJvcE5hbWUsIG5nUHJvcGVydHkuZGF0YUZpZWxkLCBuZ1Byb3BlcnR5LnR5cGUsIG5nUHJvcGVydHkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g5Yqo5oCB5a6e5L2T5bGe5oCnXHJcbiAgICBjb25zdCBuZ0R5bmFtaWNQcm9wZXJ0aWVzID0gRW50aXR5TWV0YWRhdGFVdGlsLmdldE5nRHluYW1pY1Byb3BlcnRpZXModGhpcy50eXBlKTtcclxuICAgIE9iamVjdC5rZXlzKG5nRHluYW1pY1Byb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdQcm9wZXJ0eSA9IG5nRHluYW1pY1Byb3BlcnRpZXNbcHJvcE5hbWVdIGFzIE5nRHluYW1pY1Byb3BlcnR5O1xyXG4gICAgICB0aGlzLmFkZFByb3BJbmZvKERhdGFQcm9wR3JvdXAuRHluYW1pYywgcHJvcE5hbWUsIG5nUHJvcGVydHkuZGF0YUZpZWxkLCBudWxsLCBuZ1Byb3BlcnR5KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOWunuS9k+WIl+ihqOWxnuaAp1xyXG4gICAgY29uc3QgbmdFbnRpdHlMaXN0UHJvcGVydGllcyA9IEVudGl0eU1ldGFkYXRhVXRpbC5nZXROZ0xpc3RQcm9wZXJ0aWVzKHRoaXMudHlwZSk7XHJcbiAgICBPYmplY3Qua2V5cyhuZ0VudGl0eUxpc3RQcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5nUHJvcGVydHkgPSBuZ0VudGl0eUxpc3RQcm9wZXJ0aWVzW3Byb3BOYW1lXSBhcyBOZ0xpc3RQcm9wZXJ0eTtcclxuICAgICAgdGhpcy5hZGRQcm9wSW5mbyhEYXRhUHJvcEdyb3VwLkxpc3QsIHByb3BOYW1lLCBuZ1Byb3BlcnR5LmRhdGFGaWVsZCwgbmdQcm9wZXJ0eS50eXBlLCBuZ1Byb3BlcnR5KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwcml2YXRlIGNvbGxlY3RFbnRpdHlJbmZvcygpIHtcclxuICAgIGxldCBlbnRpdHlJbmZvID0gRW50aXR5TWV0YWRhdGFVdGlsLmdldE5nRW50aXR5TWF0YWRhdGEodGhpcy50eXBlKTtcclxuICAgIGlmICghZW50aXR5SW5mbykge1xyXG4gICAgICAvLyDlupTnlKjkuo7op6PmnpDooajljZVcclxuICAgICAgZW50aXR5SW5mbyA9IHtcclxuICAgICAgICBvcmlnaW5hbENvZGU6IHRoaXMudHlwZVtcImNvZGVcIl0sXHJcbiAgICAgICAgbm9kZUNvZGU6IHRoaXMudHlwZVtcImxhYmVsXCJdXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICB0aGlzLmVudGl0eUluZm8gPSBlbnRpdHlJbmZvO1xyXG5cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5re75Yqg5bGe5oCn5L+h5oGvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRQcm9wSW5mbyhncm91cDogRGF0YVByb3BHcm91cCwgbmFtZTogc3RyaW5nLCBtYXBwaW5nOiBzdHJpbmcsIHR5cGU6IFR5cGU8YW55PiwgbWV0YWRhdGFJbmZvOiBOZ1Byb3BlcnR5KSB7XHJcblxyXG4gICAgLy8g5rKh5pyJ6K6+572u5b2x5bCE5pe277yM55So5bGe5oCn5ZCN5YWF5b2T5b2x5bCEXHJcbiAgICBtYXBwaW5nID0gbWFwcGluZyA/IG1hcHBpbmcgOiBuYW1lO1xyXG4gICAgbGV0IHR5cGVJbmZvID0gbnVsbDtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgIHR5cGVJbmZvID0gbmV3IERhdGFUeXBlSW5mbyh0eXBlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3BJbmZvID0geyBncm91cCwgbmFtZSwgbWFwcGluZywgdHlwZUluZm8sIG1ldGFkYXRhSW5mbyB9O1xyXG4gICAgdGhpcy5wcm9wSW5mb01hcC5zZXQobmFtZSwgcHJvcEluZm8pO1xyXG4gICAgLy8g5bCGdm/lrZfmrrXkuZ/liqDlhaXkvr/kuo7ooajovr7lvI/mn6Xmib5cclxuICAgIGNvbnN0IG9yaWdpbmFsRGF0YUZpZWxkID0gbWV0YWRhdGFJbmZvICYmIG1ldGFkYXRhSW5mby5vcmlnaW5hbERhdGFGaWVsZDtcclxuICAgIGlmIChvcmlnaW5hbERhdGFGaWVsZCAmJiAhdGhpcy5wcm9wSW5mb01hcC5oYXMob3JpZ2luYWxEYXRhRmllbGQpKSB7XHJcbiAgICAgIHRoaXMucHJvcEluZm9NYXAuc2V0KG9yaWdpbmFsRGF0YUZpZWxkLCB7IC4uLnByb3BJbmZvLCBpc1ZPRmllbGQ6IHRydWUgfSk7XHJcbiAgICB9IGVsc2UgaWYgKG1ldGFkYXRhSW5mbyAmJiBtZXRhZGF0YUluZm8udHlwZSkge1xyXG4gICAgICBjb25zdCBlbnRpdHlJbmZvID0gRW50aXR5TWV0YWRhdGFVdGlsLmdldE5nRW50aXR5TWF0YWRhdGEobWV0YWRhdGFJbmZvLnR5cGUpO1xyXG4gICAgICBpZiAoZW50aXR5SW5mbyAmJiBlbnRpdHlJbmZvLm9yaWdpbmFsQ29kZSkge1xyXG4gICAgICAgIHRoaXMucHJvcEluZm9NYXAuc2V0KGVudGl0eUluZm8ub3JpZ2luYWxDb2RlLCB7IC4uLnByb3BJbmZvLCBpc1ZPRmllbGQ6IHRydWUgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IERhdGFUeXBlSW5mbyB9O1xyXG4iXX0=