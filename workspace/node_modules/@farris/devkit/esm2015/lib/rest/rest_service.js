/* eslint-disable new-cap */
/* eslint-disable valid-jsdoc */
/* eslint-disable require-jsdoc */
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { BasePathService } from '@farris/rtf';
export class RestfulService {
    /**
     * 构造函数
     * @param httpClient http客户端
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * 发送GET请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    get(uri, params, options) {
        return this.request(uri, 'GET', params, options);
    }
    /**
     * 发送POST请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    put(uri, body, params, options) {
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'PUT', params, optionsWithBody);
    }
    /**
     * 发送PUT请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    post(uri, body, params, options) {
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'POST', params, optionsWithBody);
    }
    /**
     * 发送DELETE请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    delete(uri, params, options) {
        return this.request(uri, 'DELETE', params, options);
    }
    /**
     * 发送请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    request(uri, method, params, options = {}) {
        options = options || {};
        if (params) {
            const httpParams = this.buildParams(params);
            options.params = httpParams;
        }
        const methodName = method;
        uri = BasePathService.convertPath(uri);
        const result = this.httpClient.request(methodName, uri, options);
        return result;
    }
    /**
     * 构造Http请求参数
     * @param params 请求参数
     */
    buildParams(params) {
        let httpParams = new HttpParams();
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                const value = params[key].toString();
                httpParams = httpParams.append(key, value);
            }
        }
        return httpParams;
    }
    addBody(options, body) {
        options = options || {};
        const mergedOptions = Object.assign(options, { body: body });
        return mergedOptions;
    }
}
RestfulService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RestfulService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcmVzdC9yZXN0X3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEJBQTRCO0FBQzVCLGdDQUFnQztBQUNoQyxrQ0FBa0M7QUFDbEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRTVELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFLNUMsTUFBTSxPQUFPLGNBQWM7SUFDekI7OztPQUdHO0lBQ0gsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFJLENBQUM7SUFFL0M7Ozs7T0FJRztJQUNILEdBQUcsQ0FBQyxHQUFXLEVBQUUsTUFBZSxFQUFFLE9BQWE7UUFDN0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsTUFBZSxFQUFFLE9BQWE7UUFDeEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsTUFBZSxFQUFFLE9BQWE7UUFDekQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLEdBQVcsRUFBRSxNQUFlLEVBQUUsT0FBYTtRQUNoRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxPQUFPLENBQUMsR0FBVyxFQUFFLE1BQXFCLEVBQUUsTUFBYyxFQUFFLFVBQWUsRUFBRTtRQUNuRixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7U0FDN0I7UUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFnQixDQUFDO1FBQ3BDLEdBQUcsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFdBQVcsQ0FBQyxNQUFjO1FBQ2hDLElBQUksVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDbEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3JDLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUM1QztTQUNGO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVPLE9BQU8sQ0FBQyxPQUFZLEVBQUUsSUFBUztRQUNyQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzNELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7OztZQWxGRixVQUFVOzs7O1lBTkgsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cclxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYyAqL1xyXG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBQYXJhbXN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtCYXNlUGF0aFNlcnZpY2V9IGZyb20gJ0BmYXJyaXMvcnRmJztcclxuXHJcbmV4cG9ydCB0eXBlIFJlc3RmdWxNZXRob2QgPSAnR0VUJyB8ICdQVVQnIHwgJ1BPU1QnIHwgJ0RFTEVURSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXN0ZnVsU2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIGh0dHBDbGllbnQgaHR0cOWuouaIt+err1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgUdFVOivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBnZXQodXJpOiBzdHJpbmcsIHBhcmFtcz86IG9iamVjdCwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55W10+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJpLCAnR0VUJywgcGFyYW1zLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgVBPU1Tor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgcHV0KHVyaTogc3RyaW5nLCBib2R5OiBhbnksIHBhcmFtcz86IG9iamVjdCwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBvcHRpb25zV2l0aEJvZHkgPSB0aGlzLmFkZEJvZHkob3B0aW9ucywgYm9keSk7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVyaSwgJ1BVVCcsIHBhcmFtcywgb3B0aW9uc1dpdGhCb2R5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgVBVVOivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBwb3N0KHVyaTogc3RyaW5nLCBib2R5OiBhbnksIHBhcmFtcz86IG9iamVjdCwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBvcHRpb25zV2l0aEJvZHkgPSB0aGlzLmFkZEJvZHkob3B0aW9ucywgYm9keSk7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVyaSwgJ1BPU1QnLCBwYXJhbXMsIG9wdGlvbnNXaXRoQm9keSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIFERUxFVEXor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgZGVsZXRlKHVyaTogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmksICdERUxFVEUnLCBwYXJhbXMsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCB6K+35rGCXHJcbiAgICogQHBhcmFtIHVyaSDor7fmsYLlnLDlnYBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVxdWVzdCh1cmk6IHN0cmluZywgbWV0aG9kOiBSZXN0ZnVsTWV0aG9kLCBwYXJhbXM6IG9iamVjdCwgb3B0aW9uczogYW55ID0ge30pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBpZiAocGFyYW1zKSB7XHJcbiAgICAgIGNvbnN0IGh0dHBQYXJhbXMgPSB0aGlzLmJ1aWxkUGFyYW1zKHBhcmFtcyk7XHJcbiAgICAgIG9wdGlvbnMucGFyYW1zID0gaHR0cFBhcmFtcztcclxuICAgIH1cclxuICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2QgYXMgc3RyaW5nO1xyXG4gICAgdXJpID0gQmFzZVBhdGhTZXJ2aWNlLmNvbnZlcnRQYXRoKHVyaSk7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdChtZXRob2ROYW1lLCB1cmksIG9wdGlvbnMpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoEh0dHDor7fmsYLlj4LmlbBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRQYXJhbXMocGFyYW1zOiBvYmplY3QpOiBIdHRwUGFyYW1zIHtcclxuICAgIGxldCBodHRwUGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xyXG4gICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgaHR0cFBhcmFtcyA9IGh0dHBQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaHR0cFBhcmFtcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkQm9keShvcHRpb25zOiBhbnksIGJvZHk6IGFueSkge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBjb25zdCBtZXJnZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7Ym9keTogYm9keX0pO1xyXG4gICAgcmV0dXJuIG1lcmdlZE9wdGlvbnM7XHJcbiAgfVxyXG59XHJcbiJdfQ==