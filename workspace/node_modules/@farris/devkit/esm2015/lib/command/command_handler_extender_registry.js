/**
 * 命令处理扩展注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { MetadataUtil } from '../metadata/index';
import { NG_COMMAND_HANDLER_EXTENDER } from './decorators';
import { COMMAND_HANDLER_EXTENDERS_TOKEN } from './command_handler_extender';
/**
 * 命令处理扩展注册器
 */
class CommandHandlerExtenderRegistry {
    /**
     * 构造函数
     * @param extenders 命令扩展实例数组
     */
    constructor(extenders) {
        const self = this;
        this.extendersMap = new Map();
        if (extenders) {
            extenders.forEach((extender) => {
                self.regist(extender);
            });
        }
    }
    /**
     * 获取命令扩展实例数组
     * @param   commandName 命令名称
     * @returns 命令处理扩展实例数组
     */
    get(commandName) {
        if (this.extendersMap.has(commandName) === false) {
            return [];
        }
        return this.extendersMap.get(commandName);
    }
    /**
     * 添加命令扩展
     * @param commandName Command名称
     * @param extender    CommandHandlerExtender实例
     * @return void
     */
    set(commandName, extender) {
        if (this.extendersMap.has(commandName)) {
            // 如果commandName对应的扩展已经存在，则在扩展数组中追加
            this.extendersMap.get(commandName).push(extender);
        }
        else {
            // 如果不存在，则创建新的扩展数组，并追加
            this.extendersMap.set(commandName, [extender]);
        }
    }
    /**
     * 注册命令扩展
     * @param extender CommandHandlerExtender实例
     */
    regist(extender) {
        // 通过元数据获取要扩展的Comamnd名称
        const extenderMetadata = MetadataUtil.getClassMetadataByName(extender.constructor, NG_COMMAND_HANDLER_EXTENDER);
        if (!extenderMetadata) {
            throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');
        }
        const commandName = extenderMetadata.commandName;
        // 添加到Map中
        this.set(commandName, extender);
    }
    dispose() {
        this.extendersMap.clear();
    }
}
CommandHandlerExtenderRegistry.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandHandlerExtenderRegistry.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [COMMAND_HANDLER_EXTENDERS_TOKEN,] }] }
];
export { CommandHandlerExtenderRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXJfcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsMkJBQTJCLEVBQXFCLE1BQU0sY0FBYyxDQUFDO0FBQzlFLE9BQU8sRUFBRSwrQkFBK0IsRUFBMEIsTUFBTSw0QkFBNEIsQ0FBQztBQUdyRzs7R0FFRztBQUNILE1BQ00sOEJBQThCO0lBU2xDOzs7T0FHRztJQUNILFlBQWdFLFNBQW1DO1FBQ2pHLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxFQUFvQyxDQUFDO1FBQ2hFLElBQUksU0FBUyxFQUFFO1lBQ2IsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdDLEVBQUUsRUFBRTtnQkFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxHQUFHLENBQUMsV0FBbUI7UUFDckIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDaEQsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsR0FBRyxDQUFDLFdBQW1CLEVBQUUsUUFBZ0M7UUFDdkQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUV0QyxtQ0FBbUM7WUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25EO2FBQU07WUFFTCxzQkFBc0I7WUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsUUFBZ0M7UUFFckMsdUJBQXVCO1FBQ3ZCLE1BQU0sZ0JBQWdCLEdBQ3BCLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztTQUN2RDtRQUNELE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUVqRCxVQUFVO1FBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNNLE9BQU87UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7OztZQXpFRixVQUFVOzs7O3dDQWNJLFFBQVEsWUFBSSxNQUFNLFNBQUMsK0JBQStCOztBQStEakUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5ZG95Luk5aSE55CG5omp5bGV5rOo5YaM5Zmo55u45YWz5a6a5LmJXHJcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi9tZXRhZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IE5HX0NPTU1BTkRfSEFORExFUl9FWFRFTkRFUiwgTmdDb21tYW5kRXh0ZW5kZXIgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xyXG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJfRVhURU5ERVJTX1RPS0VOLCBDb21tYW5kSGFuZGxlckV4dGVuZGVyIH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIOWRveS7pOWkhOeQhuaJqeWxleazqOWGjOWZqFxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDb21tYW5kSGFuZGxlckV4dGVuZGVyUmVnaXN0cnkgaW1wbGVtZW50cyBJRGlzcG9zYWJsZXtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29tbWFuZEhhbmRsZXJFeHRlbmRlcuWunuS+i01hcFxyXG4gICAqIC0ga2V577ya5ZG95Luk5ZCN56ewXHJcbiAgICogLSB2YWx1Ze+8muWRveS7pOaJqeWxleWunuS+i1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0ZW5kZXJzTWFwOiBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlckV4dGVuZGVyW10+O1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gZXh0ZW5kZXJzIOWRveS7pOaJqeWxleWunuS+i+aVsOe7hFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQ09NTUFORF9IQU5ETEVSX0VYVEVOREVSU19UT0tFTilleHRlbmRlcnM6IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJbXSkge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICB0aGlzLmV4dGVuZGVyc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlckV4dGVuZGVyW10+KCk7XHJcbiAgICBpZiAoZXh0ZW5kZXJzKSB7XHJcbiAgICAgIGV4dGVuZGVycy5mb3JFYWNoKChleHRlbmRlcjogQ29tbWFuZEhhbmRsZXJFeHRlbmRlcikgPT4ge1xyXG4gICAgICAgIHNlbGYucmVnaXN0KGV4dGVuZGVyKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blkb3ku6TmianlsZXlrp7kvovmlbDnu4RcclxuICAgKiBAcGFyYW0gICBjb21tYW5kTmFtZSDlkb3ku6TlkI3np7BcclxuICAgKiBAcmV0dXJucyDlkb3ku6TlpITnkIbmianlsZXlrp7kvovmlbDnu4RcclxuICAgKi9cclxuICBnZXQoY29tbWFuZE5hbWU6IHN0cmluZyk6IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJbXSB7XHJcbiAgICBpZiAodGhpcy5leHRlbmRlcnNNYXAuaGFzKGNvbW1hbmROYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kZXJzTWFwLmdldChjb21tYW5kTmFtZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqDlkb3ku6TmianlsZVcclxuICAgKiBAcGFyYW0gY29tbWFuZE5hbWUgQ29tbWFuZOWQjeensFxyXG4gICAqIEBwYXJhbSBleHRlbmRlciAgICBDb21tYW5kSGFuZGxlckV4dGVuZGVy5a6e5L6LXHJcbiAgICogQHJldHVybiB2b2lkXHJcbiAgICovXHJcbiAgc2V0KGNvbW1hbmROYW1lOiBzdHJpbmcsIGV4dGVuZGVyOiBDb21tYW5kSGFuZGxlckV4dGVuZGVyKSB7XHJcbiAgICBpZiAodGhpcy5leHRlbmRlcnNNYXAuaGFzKGNvbW1hbmROYW1lKSkge1xyXG5cclxuICAgICAgLy8g5aaC5p6cY29tbWFuZE5hbWXlr7nlupTnmoTmianlsZXlt7Lnu4/lrZjlnKjvvIzliJnlnKjmianlsZXmlbDnu4TkuK3ov73liqBcclxuICAgICAgdGhpcy5leHRlbmRlcnNNYXAuZ2V0KGNvbW1hbmROYW1lKS5wdXNoKGV4dGVuZGVyKTtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyDlpoLmnpzkuI3lrZjlnKjvvIzliJnliJvlu7rmlrDnmoTmianlsZXmlbDnu4TvvIzlubbov73liqBcclxuICAgICAgdGhpcy5leHRlbmRlcnNNYXAuc2V0KGNvbW1hbmROYW1lLCBbZXh0ZW5kZXJdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjOWRveS7pOaJqeWxlVxyXG4gICAqIEBwYXJhbSBleHRlbmRlciBDb21tYW5kSGFuZGxlckV4dGVuZGVy5a6e5L6LXHJcbiAgICovXHJcbiAgcmVnaXN0KGV4dGVuZGVyOiBDb21tYW5kSGFuZGxlckV4dGVuZGVyKSB7XHJcblxyXG4gICAgLy8g6YCa6L+H5YWD5pWw5o2u6I635Y+W6KaB5omp5bGV55qEQ29tYW1uZOWQjeensFxyXG4gICAgY29uc3QgZXh0ZW5kZXJNZXRhZGF0YTogTmdDb21tYW5kRXh0ZW5kZXIgPVxyXG4gICAgICBNZXRhZGF0YVV0aWwuZ2V0Q2xhc3NNZXRhZGF0YUJ5TmFtZShleHRlbmRlci5jb25zdHJ1Y3RvciwgTkdfQ09NTUFORF9IQU5ETEVSX0VYVEVOREVSKTtcclxuICAgIGlmICghZXh0ZW5kZXJNZXRhZGF0YSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbW1hbmRIYW5kbGVyRXh0ZW5kZXLlv4XpobvmjIflrpropoHmianlsZXnmoTlkb3ku6TlkI3np7AnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbW1hbmROYW1lID0gZXh0ZW5kZXJNZXRhZGF0YS5jb21tYW5kTmFtZTtcclxuXHJcbiAgICAvLyDmt7vliqDliLBNYXDkuK1cclxuICAgIHRoaXMuc2V0KGNvbW1hbmROYW1lLCBleHRlbmRlcik7XHJcbiAgfVxyXG4gIHB1YmxpYyBkaXNwb3NlKCl7XHJcbiAgICB0aGlzLmV4dGVuZGVyc01hcC5jbGVhcigpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJSZWdpc3RyeSB9O1xyXG4iXX0=