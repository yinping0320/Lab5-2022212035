/**
 * 命令处理器工厂相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { FrameContext } from '../frame/index';
import { CommandHandlerRegistry } from './command_handler_registry';
import { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';
import { VariableParseService } from '../variable/variable_parse_service';
/**
 * 命令处理器工厂
 */
class CommandHandlerFactory {
    /**
     * 构造函数
     * @param handlerRegistry  命令处理注册器
     * @param extenderRegistry 命令处理扩展注册器
     */
    constructor(handlerRegistry, extenderRegistry, frameContext, variableParseService) {
        this.handlerRegistry = handlerRegistry;
        this.extenderRegistry = extenderRegistry;
        this.frameContext = frameContext;
        this.variableParseService = variableParseService;
    }
    /**
     * 创建命令处理器
     * @param   commandName 命令名称
     * @returns 对应的命令处理器实例
     */
    create(commandName) {
        const rawHandler = this.handlerRegistry.get(commandName);
        rawHandler.init(this.frameContext, this.variableParseService);
        const extenders = this.extenderRegistry.get(commandName);
        // 遍历extenders，依次对handler进行扩展
        return extenders.reduce((handler, extender) => {
            return extender.extend(handler);
        }, rawHandler);
    }
    dispose() {
        this.handlerRegistry.dispose();
        this.extenderRegistry.dispose();
        this.frameContext = null;
        this.variableParseService = null;
    }
}
CommandHandlerFactory.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandHandlerFactory.ctorParameters = () => [
    { type: CommandHandlerRegistry },
    { type: CommandHandlerExtenderRegistry },
    { type: FrameContext },
    { type: VariableParseService }
];
export { CommandHandlerFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfaGFuZGxlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTFFOztHQUVHO0FBQ0gsTUFDTSxxQkFBcUI7SUFFekI7Ozs7T0FJRztJQUNILFlBQ1UsZUFBdUMsRUFDdkMsZ0JBQWdELEVBQ2hELFlBQTBCLEVBQzFCLG9CQUEwQztRQUgxQyxvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUFDdkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFnQztRQUNoRCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0lBRXBELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFdBQW1CO1FBQy9CLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pELFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXpELDZCQUE2QjtRQUM3QixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUF1QixFQUFFLFFBQWdDLEVBQUUsRUFBRTtZQUNwRixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFDTSxPQUFPO1FBQ1osSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDOzs7WUFwQ0YsVUFBVTs7OztZQVJGLHNCQUFzQjtZQUV0Qiw4QkFBOEI7WUFKOUIsWUFBWTtZQUtaLG9CQUFvQjs7QUE0QzdCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWRveS7pOWkhOeQhuWZqOW3peWOguebuOWFs+WumuS5iVxyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnLi4vZnJhbWUvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyJztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5JztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJFeHRlbmRlciB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyJztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJFeHRlbmRlclJlZ2lzdHJ5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXJfcmVnaXN0cnknO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9IGZyb20gJy4uL3ZhcmlhYmxlL3ZhcmlhYmxlX3BhcnNlX3NlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIOWRveS7pOWkhOeQhuWZqOW3peWOglxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDb21tYW5kSGFuZGxlckZhY3Rvcnkge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gaGFuZGxlclJlZ2lzdHJ5ICDlkb3ku6TlpITnkIbms6jlhozlmahcclxuICAgKiBAcGFyYW0gZXh0ZW5kZXJSZWdpc3RyeSDlkb3ku6TlpITnkIbmianlsZXms6jlhozlmahcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaGFuZGxlclJlZ2lzdHJ5OiBDb21tYW5kSGFuZGxlclJlZ2lzdHJ5LFxyXG4gICAgcHJpdmF0ZSBleHRlbmRlclJlZ2lzdHJ5OiBDb21tYW5kSGFuZGxlckV4dGVuZGVyUmVnaXN0cnksXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgcHJpdmF0ZSB2YXJpYWJsZVBhcnNlU2VydmljZTogVmFyaWFibGVQYXJzZVNlcnZpY2VcclxuICApIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuWRveS7pOWkhOeQhuWZqFxyXG4gICAqIEBwYXJhbSAgIGNvbW1hbmROYW1lIOWRveS7pOWQjeensFxyXG4gICAqIEByZXR1cm5zIOWvueW6lOeahOWRveS7pOWkhOeQhuWZqOWunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGUoY29tbWFuZE5hbWU6IHN0cmluZyk6IENvbW1hbmRIYW5kbGVyIHtcclxuICAgIGNvbnN0IHJhd0hhbmRsZXIgPSB0aGlzLmhhbmRsZXJSZWdpc3RyeS5nZXQoY29tbWFuZE5hbWUpO1xyXG4gICAgcmF3SGFuZGxlci5pbml0KHRoaXMuZnJhbWVDb250ZXh0LCB0aGlzLnZhcmlhYmxlUGFyc2VTZXJ2aWNlKTtcclxuICAgIGNvbnN0IGV4dGVuZGVycyA9IHRoaXMuZXh0ZW5kZXJSZWdpc3RyeS5nZXQoY29tbWFuZE5hbWUpO1xyXG5cclxuICAgIC8vIOmBjeWOhmV4dGVuZGVyc++8jOS+neasoeWvuWhhbmRsZXLov5vooYzmianlsZVcclxuICAgIHJldHVybiBleHRlbmRlcnMucmVkdWNlKChoYW5kbGVyOiBDb21tYW5kSGFuZGxlciwgZXh0ZW5kZXI6IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIpID0+IHtcclxuICAgICAgcmV0dXJuIGV4dGVuZGVyLmV4dGVuZChoYW5kbGVyKTtcclxuICAgIH0sIHJhd0hhbmRsZXIpO1xyXG4gIH1cclxuICBwdWJsaWMgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuaGFuZGxlclJlZ2lzdHJ5LmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuZXh0ZW5kZXJSZWdpc3RyeS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dCA9IG51bGw7XHJcbiAgICB0aGlzLnZhcmlhYmxlUGFyc2VTZXJ2aWNlID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbW1hbmRIYW5kbGVyRmFjdG9yeSB9O1xyXG4iXX0=