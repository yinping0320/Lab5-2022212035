/**
 * CommandBus相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CommandHandlerFactory } from './command_handler_factory';
/**
 * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
 */
class CommandBus {
    /**
     * 构造函数
     */
    constructor(handlerFactory) {
        this.handlerFactory = handlerFactory;
        this.executingCommands = [];
        this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
    }
    /**
     * 派发命令
     * @param command 要派发的命令
     */
    dispatch(command) {
        const commandResult$ = new Subject();
        this.executeCommand(command).subscribe({
            next: (lastTaskResult) => {
                commandResult$.next(lastTaskResult);
                commandResult$.complete();
            },
            complete: () => {
                commandResult$.complete();
                this.removeCommandFromExecutingQueue(command);
            },
            error: (error) => {
                commandResult$.error(error);
                this.removeCommandFromExecutingQueue(command, !this.is401Error(error));
            }
        });
        return commandResult$;
    }
    /**
     * dispose
     */
    dispose() {
        this.handlerFactory.dispose();
    }
    /**
     * 执行命令并返回最后一个任务的执行结果流
     */
    executeCommand(command) {
        this.addCommandToExecutingQueue(command);
        const commandName = command.name;
        const handler = this.handlerFactory.create(commandName);
        const lastTaskResult$ = handler.execute(command);
        return lastTaskResult$;
    }
    /**
     * 添加到执行队列
     */
    addCommandToExecutingQueue(command) {
        this.executingCommands.push(command);
        this.executingCommandCount$.next(this.executingCommands.length);
    }
    /**
     * 从执行队列中移除
     */
    removeCommandFromExecutingQueue(command, postOrNot = true) {
        this.executingCommands = this.executingCommands.filter((executingCommand) => {
            return executingCommand !== command;
        });
        if (postOrNot === true) {
            this.executingCommandCount$.next(this.executingCommands.length);
        }
    }
    is401Error(error) {
        // 如果error为空，不认为是401错误
        return error && error.status === 401;
    }
}
CommandBus.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandBus.ctorParameters = () => [
    { type: CommandHandlerFactory }
];
export { CommandBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUdILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEU7O0dBRUc7QUFDSCxNQUNNLFVBQVU7SUFpQmQ7O09BRUc7SUFDSCxZQUFtQixjQUFxQztRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFFBQVEsQ0FBQyxPQUFnQjtRQUM5QixNQUFNLGNBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3JDLElBQUksRUFBRSxDQUFDLGNBQW1CLEVBQUUsRUFBRTtnQkFDNUIsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDcEMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVCLENBQUM7WUFDRCxRQUFRLEVBQUUsR0FBRyxFQUFFO2dCQUNiLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDcEIsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RSxDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUNEOztPQUVHO0lBQ0ssY0FBYyxDQUFDLE9BQWdCO1FBQ3JDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUdEOztPQUVHO0lBQ0ssMEJBQTBCLENBQUMsT0FBZ0I7UUFDakQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7O09BRUc7SUFDSywrQkFBK0IsQ0FBQyxPQUFnQixFQUFFLFlBQXFCLElBQUk7UUFDakYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBeUIsRUFBRSxFQUFFO1lBQ25GLE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUF3QjtRQUN6QyxzQkFBc0I7UUFDdEIsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUM7SUFDdkMsQ0FBQzs7O1lBM0ZGLFVBQVU7Ozs7WUFMRixxQkFBcUI7O0FBb0c5QixPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29tbWFuZEJ1c+ebuOWFs+WumuS5iVxyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAnLi4vY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmQnO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlckZhY3RvcnkgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9mYWN0b3J5JztcclxuXHJcbi8qKlxyXG4gKiBDb21tYW5kQnVz55So5LqO5rS+5Y+RQ29tbWFuZO+8jOWug+aOpeWPl+S4gOS4qkNvbW1hbmTlrp7kvovvvIzmn6Xmib7lr7nlupTnmoRDb21tYW5kSGFuZGxlcu+8jOW5tuaJp+ihjOOAglxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDb21tYW5kQnVzIGltcGxlbWVudHMgSURpc3Bvc2FibGV7XHJcblxyXG4gIC8qKlxyXG4gICAqIGhhbmRsZXLlt6XljoJcclxuICAgKi9cclxuICBwcml2YXRlIGhhbmRsZXJGYWN0b3J5OiBDb21tYW5kSGFuZGxlckZhY3Rvcnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIOato+WcqOaJp+ihjOeahOWRveS7pOaVsOmHj+a1ge+8iOivt+WLv+S9v+eUqO+8jOWQjuaenOiHqui0n++8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRpbmdDb21tYW5kQ291bnQkOiBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPjtcclxuXHJcbiAgLyoqXHJcbiAgICog5q2j5Zyo5omn6KGM55qE5ZG95Luk5pWw6YePXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleGVjdXRpbmdDb21tYW5kczogQ29tbWFuZFtdO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoaGFuZGxlckZhY3Rvcnk6IENvbW1hbmRIYW5kbGVyRmFjdG9yeSkge1xyXG4gICAgdGhpcy5oYW5kbGVyRmFjdG9yeSA9IGhhbmRsZXJGYWN0b3J5O1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcyA9IFtdO1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kQ291bnQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa0vuWPkeWRveS7pFxyXG4gICAqIEBwYXJhbSBjb21tYW5kIOimgea0vuWPkeeahOWRveS7pFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwYXRjaChjb21tYW5kOiBDb21tYW5kKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGNvbW1hbmRSZXN1bHQkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoY29tbWFuZCkuc3Vic2NyaWJlKHtcclxuICAgICAgbmV4dDogKGxhc3RUYXNrUmVzdWx0OiBhbnkpID0+IHtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5uZXh0KGxhc3RUYXNrUmVzdWx0KTtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5jb21wbGV0ZSgpO1xyXG4gICAgICB9LFxyXG4gICAgICBjb21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgIGNvbW1hbmRSZXN1bHQkLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQpO1xyXG4gICAgICB9LFxyXG4gICAgICBlcnJvcjogKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQsICF0aGlzLmlzNDAxRXJyb3IoZXJyb3IpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY29tbWFuZFJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBkaXNwb3NlXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3Bvc2UoKXtcclxuICAgIHRoaXMuaGFuZGxlckZhY3RvcnkuZGlzcG9zZSgpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmiafooYzlkb3ku6Tlubbov5Tlm57mnIDlkI7kuIDkuKrku7vliqHnmoTmiafooYznu5PmnpzmtYFcclxuICAgKi9cclxuICBwcml2YXRlIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IENvbW1hbmQpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhpcy5hZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kKTtcclxuICAgIGNvbnN0IGNvbW1hbmROYW1lID0gY29tbWFuZC5uYW1lO1xyXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlckZhY3RvcnkuY3JlYXRlKGNvbW1hbmROYW1lKTtcclxuICAgIGNvbnN0IGxhc3RUYXNrUmVzdWx0JCA9IGhhbmRsZXIuZXhlY3V0ZShjb21tYW5kKTtcclxuICAgIHJldHVybiBsYXN0VGFza1Jlc3VsdCQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog5re75Yqg5Yiw5omn6KGM6Zif5YiXXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kOiBDb21tYW5kKSB7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLnB1c2goY29tbWFuZCk7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQubmV4dCh0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDku47miafooYzpmJ/liJfkuK3np7vpmaRcclxuICAgKi9cclxuICBwcml2YXRlIHJlbW92ZUNvbW1hbmRGcm9tRXhlY3V0aW5nUXVldWUoY29tbWFuZDogQ29tbWFuZCwgcG9zdE9yTm90OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcyA9IHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMuZmlsdGVyKChleGVjdXRpbmdDb21tYW5kOiBDb21tYW5kKSA9PiB7XHJcbiAgICAgIHJldHVybiBleGVjdXRpbmdDb21tYW5kICE9PSBjb21tYW5kO1xyXG4gICAgfSk7XHJcbiAgICBpZiAocG9zdE9yTm90ID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZENvdW50JC5uZXh0KHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMubGVuZ3RoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXM0MDFFcnJvcihlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcclxuICAgIC8vIOWmguaenGVycm9y5Li656m677yM5LiN6K6k5Li65pivNDAx6ZSZ6K+vXHJcbiAgICByZXR1cm4gZXJyb3IgJiYgZXJyb3Iuc3RhdHVzID09PSA0MDE7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZEJ1cyB9O1xyXG4iXX0=