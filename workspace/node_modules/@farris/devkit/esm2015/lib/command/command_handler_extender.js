/**
 * 命令处理扩展相关
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable, InjectionToken } from '@angular/core';
/**
 * 命令处理扩展抽象类
 *
 * CommandHandler由一个个Task串联而成，这些Task不是一成不变，
 * 通过CommandHandlerExtender可以在不同的时机对它扩展，
 * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。
 *
 * ### 定义并注册扩展
 *
 * **定义一个扩展**
 *
 * 按如下步骤可以实现一个扩展：
 * - 继承CommandHandlerExtender抽象基类；
 * - 实现extend方法，在其内部对任务进行扩展、替换；
 * - 添加NgCommandHandlerExtender指定要扩展的命令。
 *
 * ```ts
 * @Injectable()
 * @NgCommandHandlerExtender({
 *    commandName: 'formLoad'
 *  })
 * class FormLoadExtender extends CommandHandlerExtender {
 *
 *   extend(handler: CommandHandler): CommandHandler {
 *
 *     // 扩展一个任务
 *     handler.extendTask('loadData', (originalResult) => {
 *       console.log('do sth. to the original result');
 *     });
 *
 *     // 替换一个任务
 *     handler.extendTask('transitState', () => {
 *       console.log('transit to other state');
 *     });
 *
 *     return handler;
 *   }
 * }
 * ```
 * 在extend方法内部：
 * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；
 * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。
 *
 * **注册扩展**
 *
 * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，
 * 由它来统一进行注册。
 * ```ts
 * @NgModule({
 *   imports: [
 *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])
 *   ]
 * })
 * class SimpleModule {}
 * ```
 */
class CommandHandlerExtender {
}
CommandHandlerExtender.decorators = [
    { type: Injectable }
];
/**
 * 命令处理器扩展注入Token
 */
const COMMAND_HANDLER_EXTENDERS_TOKEN = new InjectionToken('@farris/devkit CommandHandler Extenders');
export { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1REc7QUFDSCxNQUNlLHNCQUFzQjs7O1lBRHBDLFVBQVU7O0FBWVg7O0dBRUc7QUFDSCxNQUFNLCtCQUErQixHQUFHLElBQUksY0FBYyxDQUF5Qix5Q0FBeUMsQ0FBQyxDQUFDO0FBRTlILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSwrQkFBK0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWRveS7pOWkhOeQhuaJqeWxleebuOWFs1xyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXInO1xyXG5cclxuLyoqXHJcbiAqIOWRveS7pOWkhOeQhuaJqeWxleaKveixoeexu1xyXG4gKlxyXG4gKiBDb21tYW5kSGFuZGxlcueUseS4gOS4quS4qlRhc2vkuLLogZTogIzmiJDvvIzov5nkuptUYXNr5LiN5piv5LiA5oiQ5LiN5Y+Y77yMXHJcbiAqIOmAmui/h0NvbW1hbmRIYW5kbGVyRXh0ZW5kZXLlj6/ku6XlnKjkuI3lkIznmoTml7bmnLrlr7nlroPmianlsZXvvIxcclxuICog6YCa6L+H5a6D5oiR5Lus5Y+v5Lul5Zyo5Lu75Yqh5LmL5ZCO5paw5aKe5LiA5Liq5Lu75Yqh5oiW6ICF5pu/5o2i5o6J5Y6f5p2l55qE5LiA5Liq5Lu75Yqh44CCXHJcbiAqXHJcbiAqICMjIyDlrprkuYnlubbms6jlhozmianlsZVcclxuICpcclxuICogKirlrprkuYnkuIDkuKrmianlsZUqKlxyXG4gKlxyXG4gKiDmjInlpoLkuIvmraXpqqTlj6/ku6Xlrp7njrDkuIDkuKrmianlsZXvvJpcclxuICogLSDnu6fmib9Db21tYW5kSGFuZGxlckV4dGVuZGVy5oq96LGh5Z+657G777ybXHJcbiAqIC0g5a6e546wZXh0ZW5k5pa55rOV77yM5Zyo5YW25YaF6YOo5a+55Lu75Yqh6L+b6KGM5omp5bGV44CB5pu/5o2i77ybXHJcbiAqIC0g5re75YqgTmdDb21tYW5kSGFuZGxlckV4dGVuZGVy5oyH5a6a6KaB5omp5bGV55qE5ZG95Luk44CCXHJcbiAqXHJcbiAqIGBgYHRzXHJcbiAqIEBJbmplY3RhYmxlKClcclxuICogQE5nQ29tbWFuZEhhbmRsZXJFeHRlbmRlcih7XHJcbiAqICAgIGNvbW1hbmROYW1lOiAnZm9ybUxvYWQnXHJcbiAqICB9KVxyXG4gKiBjbGFzcyBGb3JtTG9hZEV4dGVuZGVyIGV4dGVuZHMgQ29tbWFuZEhhbmRsZXJFeHRlbmRlciB7XHJcbiAqXHJcbiAqICAgZXh0ZW5kKGhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKTogQ29tbWFuZEhhbmRsZXIge1xyXG4gKlxyXG4gKiAgICAgLy8g5omp5bGV5LiA5Liq5Lu75YqhXHJcbiAqICAgICBoYW5kbGVyLmV4dGVuZFRhc2soJ2xvYWREYXRhJywgKG9yaWdpbmFsUmVzdWx0KSA9PiB7XHJcbiAqICAgICAgIGNvbnNvbGUubG9nKCdkbyBzdGguIHRvIHRoZSBvcmlnaW5hbCByZXN1bHQnKTtcclxuICogICAgIH0pO1xyXG4gKlxyXG4gKiAgICAgLy8g5pu/5o2i5LiA5Liq5Lu75YqhXHJcbiAqICAgICBoYW5kbGVyLmV4dGVuZFRhc2soJ3RyYW5zaXRTdGF0ZScsICgpID0+IHtcclxuICogICAgICAgY29uc29sZS5sb2coJ3RyYW5zaXQgdG8gb3RoZXIgc3RhdGUnKTtcclxuICogICAgIH0pO1xyXG4gKlxyXG4gKiAgICAgcmV0dXJuIGhhbmRsZXI7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiDlnKhleHRlbmTmlrnms5XlhoXpg6jvvJpcclxuICogLSDpgJrov4dleHRlbmRUYXNr5pa55rOV5omp5bGV5Lu75Yqh77yM5LiA5Liq5Lu75Yqh5Y+v5Lul6KKr5aSa5qyh5omp5bGV77yM5aSa5Liq5omp5bGV5L6d5qyh6ZmE5Yqg5Yiw5Y6f5p2l55qE5Lu75Yqh5LmL5LiK77ybXHJcbiAqIC0g6YCa6L+HcmVwbGFjZVRhc2vmlrnms5Xmm7/mjaLku7vliqHvvIzkuIDkuKrku7vliqHlj6/ku6XooqvlpJrmrKHmm7/mjaLvvIzku6XmnIDlkI7kuIDkuKrmm7/mjaLkuLrlh4bjgIJcclxuICpcclxuICogKirms6jlhozmianlsZUqKlxyXG4gKlxyXG4gKiDmiJHku6zlsIbljIXlkKtGb3JtTG9hZEhhbmRsZXJFeHRlbmRlcueahOaVsOe7hOS8oOmAkue7mUNvbW1hbmRNb2R1bGUuc2V0dXDmlrnms5XvvIxcclxuICog55Sx5a6D5p2l57uf5LiA6L+b6KGM5rOo5YaM44CCXHJcbiAqIGBgYHRzXHJcbiAqIEBOZ01vZHVsZSh7XHJcbiAqICAgaW1wb3J0czogW1xyXG4gKiAgICAgQ29tbWFuZE1vZHVsZS5zZXR1cChbRm9ybUxvYWRIYW5kbGVyXSwgW0Zvcm1Mb2FkSGFuZGxlckV4dGVuZGVyXSlcclxuICogICBdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIFNpbXBsZU1vZHVsZSB7fVxyXG4gKiBgYGBcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuYWJzdHJhY3QgY2xhc3MgQ29tbWFuZEhhbmRsZXJFeHRlbmRlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxleaWueazlVxyXG4gICAqIEBwYXJhbSBoYW5kbGVyIOimgeaJqeWxleeahOWRveS7pOWkhOeQhuWZqFxyXG4gICAqL1xyXG4gIGFic3RyYWN0IGV4dGVuZChoYW5kbGVyOiBDb21tYW5kSGFuZGxlcik6IENvbW1hbmRIYW5kbGVyO1xyXG5cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDlkb3ku6TlpITnkIblmajmianlsZXms6jlhaVUb2tlblxyXG4gKi9cclxuY29uc3QgQ09NTUFORF9IQU5ETEVSX0VYVEVOREVSU19UT0tFTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxDb21tYW5kSGFuZGxlckV4dGVuZGVyPignQGZhcnJpcy9kZXZraXQgQ29tbWFuZEhhbmRsZXIgRXh0ZW5kZXJzJyk7XHJcblxyXG5leHBvcnQgeyBDb21tYW5kSGFuZGxlckV4dGVuZGVyLCBDT01NQU5EX0hBTkRMRVJfRVhURU5ERVJTX1RPS0VOIH07XHJcbiJdfQ==