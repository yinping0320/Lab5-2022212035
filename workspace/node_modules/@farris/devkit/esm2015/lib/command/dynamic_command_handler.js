import { ReflectiveInjector } from '@angular/core';
import { isObservable, of, Subject } from 'rxjs';
import { CommandHandler } from './command_handler';
/**
 * @Injectable()
 * @NgCommandHandler({
 *     commandName: 'add1'
 * })
 * export class add1Handler extends CommandHandler {
 *     constructor(
 *         public _ListDataService1: ListDataService1,
 *         public _StateMachineService1: StateMachineService1
 *     ) {
 *         super();
 *     }
 *
 *     schedule() {
 *         this.addTask('append', (context: CommandContext) => {
 *             const args = [];
 *             return this.invoke(this._ListDataService1, 'append', args, context);
 *         });
 *
 *         this.addTask('transit', (context: CommandContext) => {
 *             const args = [
 *                 'Create'
 *                     ];
 *             return this.invoke(this._StateMachineService1, 'transit', args, context);
 *         });
 *
 *         this.addLink('append', 'transit', `1==1`);
 *     }
 * }
 */
const controllerMap = {
    imports: {}
};
export class DynamicCommandHandler extends CommandHandler {
    constructor(commandName, method) {
        super();
        this.commandName = commandName;
        this.method = method;
    }
    dynamicInvoke(serviceTocken, method, args, context) {
        const serviceInstance = context.frameContext.injector.get(serviceTocken, null);
        if (serviceInstance) {
            this.setContextToServiceInstance(serviceInstance, context);
            const parsedStageParams = this.parseService.parse(args, context);
            const parsedArgs = parsedStageParams.map(param => param.expression);
            // tslint:disable-next-line: ban-types
            const serviceMethod = serviceInstance[method];
            return serviceMethod.apply(serviceInstance, parsedArgs);
        }
    }
    dynamicInvoke2(methodObject, context) {
        const { source: serviceUri, service: serviceName, method } = methodObject;
        const args = methodObject.params.map(stageParam => {
            return Object.assign({}, stageParam);
        });
        const result$ = new Subject();
        const serviceSpecifer = serviceUri && serviceUri.toLowerCase();
        if (serviceSpecifer) {
            let serviceModule = controllerMap.imports[serviceSpecifer];
            if (serviceModule) {
                // 表示缓存中存在
                setTimeout(() => {
                    this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);
                }, 0);
            }
            else {
                //  表示不存在
                System.import(serviceSpecifer)
                    .then((serviceModule) => {
                    if (serviceModule) {
                        controllerMap.imports[serviceSpecifer] = serviceModule;
                    }
                    this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);
                });
            }
        }
        return result$;
    }
    executeWithServiceModule(serviceModule, serviceName, context, args, method, result$) {
        const serviceConstructor = serviceModule[serviceName];
        if (serviceConstructor) {
            const originalContextInjector = context.frameContext.injector;
            let serviceInstance;
            // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);
            if (context.frameContext.injector.get(serviceName, null)) {
                serviceInstance = context.frameContext.injector.get(serviceName);
            }
            else {
                const resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);
                const reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);
                context.frameContext.injector = reflectiveInjector;
                serviceInstance = reflectiveInjector.get(serviceName, null);
            }
            if (serviceInstance) {
                this.setContextToServiceInstance(serviceInstance, context);
                const parsedStageParams = this.parseService.parse(args, context);
                const parsedArgs = parsedStageParams.map(param => param.expression);
                // tslint:disable-next-line: ban-types
                const serviceMethod = serviceInstance[method];
                if (!serviceMethod) {
                    console.error("未找到对应的命令:" + method);
                    return;
                }
                const serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);
                const result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);
                result$$.subscribe({
                    next: (result) => {
                        result$.next(result);
                    },
                    error: (error) => {
                        result$.error(error);
                    },
                    complete: () => {
                        result$.complete();
                        context.frameContext.injector = originalContextInjector;
                    },
                });
                // return serviceMethod.apply(serviceInstance, parsedArgs);
            }
        }
    }
    schedule() {
        this.scheduleStages(this.method.stages, null);
        // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {
        //   if (currentStage.type === '0') {
        //     this.addTask(currentStage.name, (context: CommandContext) => {
        //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);
        //     });
        //     if (preStage) {
        //       this.addLink(preStage.name, currentStage.name, `1===1`);
        //     }
        //   } else if (currentStage.type === '2') {
        //   } else {
        //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);
        //   }
        //   return currentStage;
        // }, null);
    }
    scheduleStages(stages, initialStage) {
        stages.reduce((preStage, currentStage) => {
            if (currentStage.type === 'executing') {
                this.addTask(currentStage.name, (context) => {
                    return this.dynamicInvoke2(currentStage, context);
                });
            }
            else if (currentStage.type === 'fork') {
                const forkStages = currentStage.stages;
                forkStages.forEach(forkStage => {
                    this.scheduleStages(forkStage.stages, forkStage);
                });
                this.scheduleStages(currentStage.stages, currentStage);
            }
            else if (currentStage.type === 'determing') {
                this.addTask(currentStage.name, (context) => {
                    return of(true);
                });
            }
            else {
                throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);
            }
            if (preStage) {
                const condition = preStage.type === 'determing' ? preStage.condition : `1===1`;
                this.addLink(preStage.name, currentStage.name, condition);
            }
            return currentStage;
        }, initialStage);
    }
    loadProvidersFromModule(serviceModule) {
        const providerArray = [];
        for (const propertyName in serviceModule) {
            if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {
                const propertyValue = serviceModule[propertyName];
                if (this.isInjectableService(propertyValue)) {
                    // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;
                    const providerName = propertyName;
                    providerArray.push({ provide: providerName, useClass: propertyValue });
                    providerArray.push(propertyValue);
                }
            }
        }
        const resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);
        return resolvedReflectiveProviders;
    }
    isInjectableService(propertyValue) {
        let hasInjectableDecorator = false;
        const isFunction = propertyValue instanceof Function;
        if (isFunction && propertyValue.hasOwnProperty('decorators')) {
            const decorators = propertyValue.decorators;
            const injectableDecorators = decorators.filter(decorator => {
                if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {
                    return decorator;
                }
            });
            hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
        }
        else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {
            const decorators = propertyValue.__annotations__;
            const injectableDecorators = decorators.filter(decoratorFactory => {
                if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {
                    return decoratorFactory;
                }
            });
            hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
        }
        return hasInjectableDecorator;
    }
}
//# sourceMappingURL=data:application/json;base64,