/**
 * 命令处理注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { MetadataUtil } from '../metadata/index';
import { NG_COMMAND_HANDLER } from './decorators';
import { COMMAND_HANDLERS_TOKEN } from './command_handler';
/**
 * 命令处理注册器
 */
class CommandHandlerRegistry {
    /**
     * 构造函数
     * @param handlers 命令处理实例数组
     */
    constructor(handlers) {
        const self = this;
        this.handlerMap = new Map();
        if (handlers) {
            handlers.forEach((handler) => {
                self.regist(handler);
            });
        }
    }
    /**
     * 添加命令处理
     * @param  commandName    命令名称
     * @param  commandHandler 命令处理实例
     */
    set(commandName, commandHandler) {
        if (this.handlerMap.has(commandName)) {
            throw new Error(commandName + '对应的CommandHandler已经存在');
        }
        this.handlerMap.set(commandName, commandHandler);
    }
    /**
     * 获取命令处理
     * @param   commandName 命令名称
     * @returns 命令处理实例
     */
    get(commandName) {
        if (this.handlerMap.has(commandName) === false) {
            throw new Error('找不到' + commandName + '对应的CommandHandler');
        }
        return this.handlerMap.get(commandName);
    }
    /**
     * 注册命令处理
     * @param handlers 命令处理实例
     */
    regist(commandHandler) {
        let commandName = commandHandler.commandName;
        if (!commandName) {
            // 根据metadata获取对应的Command名称
            const handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);
            if (!handlerMetadata) {
                throw new Error('CommandHandler必须指定要处理的命令名称');
            }
            commandName = handlerMetadata.commandName;
        }
        this.set(commandName, commandHandler);
    }
    /**
     * 清空所有命令处理器
     */
    dispose() {
        if (this.handlerMap) {
            this.handlerMap.forEach(handler => {
                handler.dispose();
            });
        }
        this.handlerMap.clear();
    }
}
CommandHandlerRegistry.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandHandlerRegistry.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [COMMAND_HANDLERS_TOKEN,] }] }
];
export { CommandHandlerRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2hhbmRsZXJfcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQW9CLE1BQU0sY0FBYyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUczRTs7R0FFRztBQUNILE1BQ00sc0JBQXNCO0lBTzFCOzs7T0FHRztJQUNILFlBQXVELFFBQTBCO1FBQy9FLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO1FBQ3BELElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQXVCLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxHQUFHLENBQUMsV0FBbUIsRUFBRSxjQUE4QjtRQUM1RCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxHQUFHLHVCQUF1QixDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxHQUFHLENBQUMsV0FBbUI7UUFDNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsV0FBVyxHQUFHLG1CQUFtQixDQUFDLENBQUM7U0FDNUQ7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsY0FBOEI7UUFDMUMsSUFBSSxXQUFXLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLDJCQUEyQjtZQUMzQixNQUFNLGVBQWUsR0FDbkIsWUFBWSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUN0RixJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7YUFDL0M7WUFDRCxXQUFXLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQztTQUMzQztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDRDs7T0FFRztJQUNJLE9BQU87UUFDWixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2hDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7WUF6RUYsVUFBVTs7Ozt3Q0FZSSxRQUFRLFlBQUksTUFBTSxTQUFDLHNCQUFzQjs7QUFpRXhELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWRveS7pOWkhOeQhuazqOWGjOWZqOebuOWFs+WumuS5iVxyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi4vbWV0YWRhdGEvaW5kZXgnO1xyXG5pbXBvcnQgeyBOR19DT01NQU5EX0hBTkRMRVIsIE5nQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xyXG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJTX1RPS0VOLCBDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyJztcclxuXHJcblxyXG4vKipcclxuICog5ZG95Luk5aSE55CG5rOo5YaM5ZmoXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIENvbW1hbmRIYW5kbGVyUmVnaXN0cnkge1xyXG5cclxuICAvKipcclxuICAgKiBDb21tYW5kSGFuZGxlciBNYXBcclxuICAgKi9cclxuICBwcml2YXRlIGhhbmRsZXJNYXA6IE1hcDxzdHJpbmcsIENvbW1hbmRIYW5kbGVyPjtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIGhhbmRsZXJzIOWRveS7pOWkhOeQhuWunuS+i+aVsOe7hFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQ09NTUFORF9IQU5ETEVSU19UT0tFTiloYW5kbGVyczogQ29tbWFuZEhhbmRsZXJbXSkge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICB0aGlzLmhhbmRsZXJNYXAgPSBuZXcgTWFwPHN0cmluZywgQ29tbWFuZEhhbmRsZXI+KCk7XHJcbiAgICBpZiAoaGFuZGxlcnMpIHtcclxuICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoaGFuZGxlcjogQ29tbWFuZEhhbmRsZXIpID0+IHtcclxuICAgICAgICBzZWxmLnJlZ2lzdChoYW5kbGVyKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqDlkb3ku6TlpITnkIZcclxuICAgKiBAcGFyYW0gIGNvbW1hbmROYW1lICAgIOWRveS7pOWQjeensFxyXG4gICAqIEBwYXJhbSAgY29tbWFuZEhhbmRsZXIg5ZG95Luk5aSE55CG5a6e5L6LXHJcbiAgICovXHJcbiAgcHVibGljIHNldChjb21tYW5kTmFtZTogc3RyaW5nLCBjb21tYW5kSGFuZGxlcjogQ29tbWFuZEhhbmRsZXIpIHtcclxuICAgIGlmICh0aGlzLmhhbmRsZXJNYXAuaGFzKGNvbW1hbmROYW1lKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoY29tbWFuZE5hbWUgKyAn5a+55bqU55qEQ29tbWFuZEhhbmRsZXLlt7Lnu4/lrZjlnKgnKTtcclxuICAgIH1cclxuICAgIHRoaXMuaGFuZGxlck1hcC5zZXQoY29tbWFuZE5hbWUsIGNvbW1hbmRIYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWRveS7pOWkhOeQhlxyXG4gICAqIEBwYXJhbSAgIGNvbW1hbmROYW1lIOWRveS7pOWQjeensFxyXG4gICAqIEByZXR1cm5zIOWRveS7pOWkhOeQhuWunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQoY29tbWFuZE5hbWU6IHN0cmluZyk6IENvbW1hbmRIYW5kbGVyIHtcclxuICAgIGlmICh0aGlzLmhhbmRsZXJNYXAuaGFzKGNvbW1hbmROYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfmib7kuI3liLAnICsgY29tbWFuZE5hbWUgKyAn5a+55bqU55qEQ29tbWFuZEhhbmRsZXInKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXJNYXAuZ2V0KGNvbW1hbmROYW1lKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjOWRveS7pOWkhOeQhlxyXG4gICAqIEBwYXJhbSBoYW5kbGVycyDlkb3ku6TlpITnkIblrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0KGNvbW1hbmRIYW5kbGVyOiBDb21tYW5kSGFuZGxlcikge1xyXG4gICAgbGV0IGNvbW1hbmROYW1lID0gY29tbWFuZEhhbmRsZXIuY29tbWFuZE5hbWU7XHJcbiAgICBpZiAoIWNvbW1hbmROYW1lKSB7XHJcbiAgICAgIC8vIOagueaNrm1ldGFkYXRh6I635Y+W5a+55bqU55qEQ29tbWFuZOWQjeensFxyXG4gICAgICBjb25zdCBoYW5kbGVyTWV0YWRhdGE6IE5nQ29tbWFuZEhhbmRsZXIgPVxyXG4gICAgICAgIE1ldGFkYXRhVXRpbC5nZXRDbGFzc01ldGFkYXRhQnlOYW1lKGNvbW1hbmRIYW5kbGVyLmNvbnN0cnVjdG9yLCBOR19DT01NQU5EX0hBTkRMRVIpO1xyXG4gICAgICBpZiAoIWhhbmRsZXJNZXRhZGF0YSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tbWFuZEhhbmRsZXLlv4XpobvmjIflrpropoHlpITnkIbnmoTlkb3ku6TlkI3np7AnKTtcclxuICAgICAgfVxyXG4gICAgICBjb21tYW5kTmFtZSA9IGhhbmRsZXJNZXRhZGF0YS5jb21tYW5kTmFtZTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0KGNvbW1hbmROYW1lLCBjb21tYW5kSGFuZGxlcik7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa4heepuuaJgOacieWRveS7pOWkhOeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwb3NlKCkge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlck1hcCkge1xyXG4gICAgICB0aGlzLmhhbmRsZXJNYXAuZm9yRWFjaChoYW5kbGVyID0+IHtcclxuICAgICAgICBoYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZXJNYXAuY2xlYXIoKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb21tYW5kSGFuZGxlclJlZ2lzdHJ5IH07XHJcbiJdfQ==