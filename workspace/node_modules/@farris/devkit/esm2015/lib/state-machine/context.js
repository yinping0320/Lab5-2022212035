/**
 * 状态机上下文
 */
export class StateMachineContext {
    /**
     * 构造函数
     * @param stateMachine 状态机
     * @param initialState 初始状态
     */
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        // this.state = initialState.name;
    }
    initialize(variableParseService, initialState) {
        this.frameContext = this.stateMachine && this.stateMachine.frameContext || null;
        this.state = this.state || (initialState ? initialState.name : '');
        this.parser = variableParseService;
        this.stateMachineEvent = this.stateMachine.stateMachineEvent;
    }
    /**
     * 状态迁移
     * @param stateName 下一状态的名称
     */
    transitTo(stateName) {
        const nextState = this.stateMachine.states[stateName];
        if (nextState) {
            this.state = nextState.name;
            this.stateMachine.render();
        }
    }
    parse(expression, targetType) {
        if (expression === null || expression === undefined) {
            return expression;
        }
        const context = this.stateMachineEvent.getFrameContext(expression) || this.stateMachine.frameContext;
        switch (targetType) {
            case 'source':
                return this.parseSourceValue(expression, context);
            case 'target':
                return this.parser.parse(expression, context);
        }
    }
    parseSourceValue(expression, context) {
        if (expression === null || expression === undefined) {
            return expression;
        }
        let result = expression.trim();
        result = this.parser.parse(result, context);
        if (result === 'state') {
            result = this.state;
        }
        return result;
    }
    // 兼容旧版本
    get(expression) {
        return this.getUIState(expression);
    }
    // 解析uistate变量表达式并返回表达式的值
    getUIState(expression) {
        if (!expression) {
            return;
        }
        const frameContext = this.stateMachineEvent.getFrameContext(expression);
        if (!frameContext) {
            return;
        }
        this.stateMachineEvent.ListenUIStateChange(frameContext, expression);
        if (this.parser) {
            const value = this.parser.parse(expression, frameContext);
            if (value === null) {
                return null;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
                return null;
            }
            return value;
        }
        else {
            throw new Error('未初始化变量解析器。');
        }
    }
    // 解析data变量表达式并返回表达式的值
    getData(expression) {
        if (!expression) {
            return;
        }
        const frameContext = this.stateMachineEvent.getFrameContext(expression);
        if (!frameContext) {
            return;
        }
        this.stateMachineEvent.ListenEntityChange(frameContext, expression);
        if (this.parser) {
            const value = this.parser.parse(expression, frameContext);
            if (value === null) {
                return null;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
                return null;
            }
            return value;
        }
        else {
            throw new Error('未初始化变量解析器。');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,