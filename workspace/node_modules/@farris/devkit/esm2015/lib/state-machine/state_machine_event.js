import { Injectable } from '@angular/core';
import { StateMachine } from './state_machine';
/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
export class StateMachineEvent {
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        this.uiFieldList = [];
        this.dataFieldList = [];
        this.frameContextMap = new Map();
        this.dataFrameContextMap = new Map();
    }
    get appContext() {
        return this.stateMachine.appContext;
    }
    initialize(frameContext) {
        this.frameContext = frameContext;
    }
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     */
    extractPaths(expression) {
        let path = '';
        const UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}$/g;
        const DATA_PATTERN_G = /\{DATA~(\S+?)\}$/g;
        if (typeof expression === 'string') {
            const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
            const dataVariables = expression.match(DATA_PATTERN_G);
            if (uiStateVariables !== null) {
                const UI_STATE_PATTERN = /\{UISTATE~(\S+?)\}$/;
                uiStateVariables.forEach((uiStateVariable) => {
                    const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
                    if (pathMatches != null && pathMatches.length === 2) {
                        path = pathMatches[1];
                    }
                });
            }
            if (dataVariables !== null) {
                const DATA_PATTERN = /\{DATA~(\S+?)\}$/;
                dataVariables.forEach((dataVariable) => {
                    const pathMatches = dataVariable.match(DATA_PATTERN);
                    if (pathMatches != null && pathMatches.length === 2) {
                        path = pathMatches[1];
                    }
                });
            }
        }
        return path;
    }
    // 根据表达式返回当前组件的frameContext
    getFrameContext(expression) {
        let frameId = this.extractPaths(expression).split('/')[1] || '';
        if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {
            const relativeFrameId = frameId.substring(2, frameId.length - 1);
            frameId = this.frameContext.namespace ? `${this.frameContext.namespace}_${relativeFrameId}` : relativeFrameId;
        }
        return this.appContext.getFrameContext(frameId);
    }
    // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)
    getFrameField(expression) {
        return this.extractPaths(expression).split('/')[2];
    }
    // 监听表单变量的变化
    ListenUIStateChange(frameContext, expression) {
        const frameField = this.getFrameField(expression);
        if (!this.frameContextMap.has(frameContext)) {
            this.frameContextMap.set(frameContext, this.uiFieldList);
            frameContext.uiState.changes.subscribe((data) => {
                if (data.field && this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {
                    this.stateMachine.render();
                }
            });
        }
        if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {
            this.uiFieldList.push(frameField);
        }
    }
    // 监听实体数据的变化
    ListenEntityChange(frameContext, expression) {
        if (!this.dataFrameContextMap.has(frameContext)) {
            this.dataFrameContextMap.set(frameContext, this.dataFieldList);
            frameContext.bindingData.changes.subscribe((change) => {
                // 切换当前行用到的是
                if (change.type === 'Load' || change.type === 'SelectionChanged') {
                    this.stateMachine.render();
                }
                if (change.path.join() && this.isAccordingValue(this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {
                    this.stateMachine.render();
                }
            });
        }
        if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {
            this.dataFieldList.push(expression);
        }
    }
    // 监听是否是解析的数据发生变化
    isAccordingValue(arr, path) {
        return arr.find(item => {
            return item.indexOf(path) > -1;
        }) === undefined ? false : true;
    }
}
StateMachineEvent.decorators = [
    { type: Injectable }
];
/** @nocollapse */
StateMachineEvent.ctorParameters = () => [
    { type: StateMachine }
];
//# sourceMappingURL=data:application/json;base64,