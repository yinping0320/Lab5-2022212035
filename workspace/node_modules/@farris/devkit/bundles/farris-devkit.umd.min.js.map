{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/devkit/lib/metadata/decorator/decorator.ts","ng://@farris/devkit/lib/metadata/decorator/metadata_util.ts","ng://@farris/devkit/lib/changeset/types.ts","ng://@farris/devkit/lib/changeset/change_set.ts","ng://@farris/devkit/lib/entity/metadata/field_decorator.ts","ng://@farris/devkit/lib/entity/metadata/entity_decorator.ts","ng://@farris/devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/devkit/lib/entity/types.ts","ng://@farris/devkit/lib/entity/entity_factory.ts","ng://@farris/devkit/lib/entity/entity_type_creator.ts","ng://@farris/devkit/lib/entity/entity_creator.ts","ng://@farris/devkit/lib/entity/validator/validation_types.ts","ng://@farris/devkit/lib/entity/validator/validation_error.ts","ng://@farris/devkit/lib/entity/validator/validation_executor.ts","ng://@farris/devkit/lib/entity/validator/validation_utils.ts","ng://@farris/devkit/lib/utils/date_util.ts","ng://@farris/devkit/lib/i18n/translate_service.ts","ng://@farris/devkit/lib/entity/validator/validator.ts","ng://@farris/devkit/lib/entity/entity_list.ts","ng://@farris/devkit/lib/core/types.ts","ng://@farris/devkit/lib/i18n/user_settings_service.ts","ng://@farris/devkit/lib/i18n/zoned_time.ts","ng://@farris/devkit/lib/misc/router-param.service.ts","ng://@farris/devkit/lib/binding-data/changes.ts","ng://@farris/devkit/lib/binding-data/binding_property.ts","ng://@farris/devkit/lib/binding-data/property_util.ts","ng://@farris/devkit/lib/binding-data/binding_list_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/devkit/lib/form/decorators.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/devkit/lib/core/data-path/data_path_node.ts","ng://@farris/devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/devkit/lib/core/data-path/data_path.ts","ng://@farris/devkit/lib/core/data-path/data_path_creator.ts","ng://@farris/devkit/lib/core/data-type-info/data_prop_info.ts","ng://@farris/devkit/lib/core/data-type-info/data_type_info.ts","ng://@farris/devkit/lib/core/tokens.ts","ng://@farris/devkit/lib/core/core.ts","ng://@farris/devkit/lib/core/escape.ts","ng://@farris/devkit/lib/resolver/types.ts","ng://@farris/devkit/lib/resolver/resolver_registry.ts","ng://@farris/devkit/lib/repository/decorators.ts","ng://@farris/devkit/lib/repository/entity_collection.ts","ng://@farris/devkit/lib/repository/entity_manager.ts","ng://@farris/devkit/lib/repository/pagination_manager.ts","ng://@farris/devkit/lib/repository/data_change_history.ts","ng://@farris/devkit/lib/repository/sort_condition_manager.ts","ng://@farris/devkit/lib/repository/filter_condition_manager.ts","ng://@farris/devkit/lib/misc/uid.ts","ng://@farris/devkit/lib/repository/repository.ts","ng://@farris/devkit/lib/repository/default_repository.ts","ng://@farris/devkit/lib/resolver/entity_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/state_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/comment_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/resolve_service.ts","ng://@farris/devkit/lib/utils/expression_util.ts","ng://@farris/devkit/lib/utils/data_type_info_util.ts","ng://@farris/devkit/lib/form/form.ts","ng://@farris/devkit/lib/binding-data/entity_util.ts","ng://@farris/devkit/lib/binding-data/binding_data.ts","ng://@farris/devkit/lib/data-filter/types.ts","ng://@farris/devkit/lib/data-filter/data_filter.ts","ng://@farris/devkit/lib/data-filter/array_filter_condition_data_filter.ts","ng://@farris/devkit/lib/data-filter/object_filter_condition_data_filter.ts","ng://@farris/devkit/lib/binding-data/binding_list.ts","ng://@farris/devkit/lib/binding-data/base_binding_object.ts","ng://@farris/devkit/lib/binding-data/binding_object.ts","ng://@farris/devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/devkit/lib/binding-data/decorators.ts","ng://@farris/devkit/lib/misc/data-path-util.ts","ng://@farris/devkit/lib/misc/guid.ts","ng://@farris/devkit/lib/misc/run_mode_service.ts","ng://@farris/devkit/lib/entity/entity.ts","ng://@farris/devkit/lib/entity/dynamic_entity.ts","ng://@farris/devkit/lib/schema/schema.ts","ng://@farris/devkit/lib/entity/entity_data_service.ts","ng://@farris/devkit/lib/entity/entity_prototype.ts","ng://@farris/devkit/lib/entity/entity_type_factory.ts","ng://@farris/devkit/lib/rest/rest_service.ts","ng://@farris/devkit/lib/command/decorators.ts","ng://@farris/devkit/lib/misc/is-observable.ts","ng://@farris/devkit/lib/command/flow/task_node.ts","ng://@farris/devkit/lib/variable/variable_parser.ts","ng://@farris/devkit/lib/variable/parse_util.ts","ng://@farris/devkit/lib/variable/data_variable_parser.ts","ng://@farris/devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/devkit/lib/variable/command_variable_parser.ts","ng://@farris/devkit/lib/variable/variable_parse_service.ts","ng://@farris/devkit/lib/variable/frame_id_variable_parser.ts","ng://@farris/devkit/lib/variable/form_state_variable_parser.ts","ng://@farris/devkit/lib/variable/event_param_variable_parser.ts","ng://@farris/devkit/lib/variable/index.ts","ng://@farris/devkit/lib/command/flow/task_link.ts","ng://@farris/devkit/lib/command/flow/task_flow.ts","ng://@farris/devkit/lib/command/command_context.ts","ng://@farris/devkit/lib/i18n/translate_token.ts","ng://@farris/devkit/lib/command/command_handler.ts","ng://@farris/devkit/lib/command/command_handler_registry.ts","ng://@farris/devkit/lib/command/command_handler_extender.ts","ng://@farris/devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/devkit/lib/ui-state/decorators.ts","ng://@farris/devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/devkit/lib/ui-state/ui_state.ts","ng://@farris/devkit/lib/ui-state/tokens.ts","ng://@farris/devkit/lib/state-machine/types.ts","ng://@farris/devkit/lib/state-machine/context.ts","ng://@farris/devkit/lib/state-machine/state_machine_event.ts","ng://@farris/devkit/lib/state-machine/state_machine.ts","ng://@farris/devkit/lib/state-machine/decorators.ts","ng://@farris/devkit/lib/view-model/decorators.ts","ng://@farris/devkit/lib/view-model/view_model.ts","ng://@farris/devkit/lib/context/context.ts","ng://@farris/devkit/lib/app/binding_data_manager.ts","ng://@farris/devkit/lib/app/repository_mananger.ts","ng://@farris/devkit/lib/app/frame_component_refresher.ts","ng://@farris/devkit/lib/app/change_detection_controller.ts","ng://@farris/devkit/lib/app/app_context_manager.ts","ng://@farris/devkit/lib/app/component_manager.ts","ng://@farris/devkit/lib/app/tokens.ts","ng://@farris/devkit/lib/schema/dom.service.ts","ng://@farris/devkit/lib/schema/form-metadata.ts","ng://@farris/devkit/lib/schema/schema.service.ts","ng://@farris/devkit/lib/app/app_metadata_collector.ts","ng://@farris/devkit/lib/app/view_model_manager.ts","ng://@farris/devkit/lib/app/render_context_metadata_manager.ts","ng://@farris/devkit/lib/frame/tokens.ts","ng://@farris/devkit/lib/app/app_context.ts","ng://@farris/devkit/lib/app/frame_contex_manager.ts","ng://@farris/devkit/lib/event-bus-new/event-bus-proxy.ts","ng://@farris/devkit/lib/event-mechanism/declaration/event-type.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration_decorator.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription_decorator.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe-type.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe.ts","ng://@farris/devkit/lib/event-bus-new/event-bus.ts","ng://@farris/devkit/lib/exception/tokens.ts","ng://@farris/devkit/lib/expression/types.ts","ng://@farris/devkit/lib/i18n/tokens.ts","ng://@farris/devkit/lib/manifest/tokens.ts","ng://@farris/devkit/lib/expression/expression_registry.ts","ng://@farris/devkit/lib/listener/tokens.ts","ng://@farris/devkit/lib/listener/change_listener.ts","ng://@farris/devkit/lib/expression/expression_executor.ts","ng://@farris/devkit/lib/expression/expression_result.ts","ng://@farris/devkit/lib/expression/expression_manager.ts","ng://@farris/devkit/lib/expression/expression_result_factory.ts","ng://@farris/devkit/lib/listener/ui_state_change_listener.ts","ng://@farris/devkit/lib/expression/tokens.ts","ng://@farris/devkit/lib/listener/repository_change_listener.ts","ng://@farris/devkit/lib/listener/listener_registry.ts","ng://@farris/devkit/lib/listener/binding_data_change_listener.ts","ng://@farris/devkit/lib/listener/listeners.ts","ng://@farris/devkit/lib/expression/expression_event_emitter.ts","ng://@farris/devkit/lib/effector/tokens.ts","ng://@farris/devkit/lib/effector/repository_effector.ts","ng://@farris/devkit/lib/effector/uistate_effector.ts","ng://@farris/devkit/lib/effector/readonly_effector.ts","ng://@farris/devkit/lib/effector/dependency_effector.ts","ng://@farris/devkit/lib/effector/effector_registry.ts","ng://@farris/devkit/lib/effector/relative_effector.ts","ng://@farris/devkit/lib/effector/validate_effector.ts","ng://@farris/devkit/lib/effector/required_effector.ts","ng://@farris/devkit/lib/effector/visible_effector.ts","ng://@farris/devkit/lib/effector/effector_factory.ts","ng://@farris/devkit/lib/event-handler/event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_value_changed_event_handler.ts","ng://@farris/devkit/lib/effector/effector_manager.ts","ng://@farris/devkit/lib/event-handler/state_value_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_add_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_remove_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_update_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_append_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_value_change_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_remove_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_selection_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/event_handler_registry.ts","ng://@farris/devkit/lib/expression/expression_engine_impl.ts","ng://@farris/devkit/lib/frame/component_ref_manager.ts","ng://@farris/devkit/lib/frame/frame_context.ts","ng://@farris/devkit/lib/frame/frame_component.ts","ng://@farris/devkit/lib/frame/frame_event.ts","ng://@farris/devkit/lib/frame/frame_event_bus.ts","ng://@farris/devkit/lib/command/command_handler_factory.ts","ng://@farris/devkit/lib/command/command_bus.ts","ng://@farris/devkit/lib/command/dynamic_command_handler.ts","ng://@farris/devkit/lib/command/providers.ts","ng://@farris/devkit/lib/validation/tokens.ts","ng://@farris/devkit/lib/providers.ts","ng://@farris/devkit/lib/devkit_module.ts","ng://@farris/devkit/lib/listener/deprecated_binding_data_change_listener.ts","ng://@farris/devkit/lib/cache/types.ts","ng://@farris/devkit/lib/cache/core/cache_object.ts","ng://@farris/devkit/lib/cache/core/cache_container.ts","ng://@farris/devkit/lib/cache/provider/memory_cache_provider.ts","ng://@farris/devkit/lib/cache/provider/default_cache_provider.ts","ng://@farris/devkit/lib/core/encode_url.ts","ng://@farris/devkit/lib/cache/core/decorator.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__values","o","m","__read","r","ar","error","__spread","concat","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","chainFn","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","_i","annotationInstance","bind","typeDecorator","cls","defineProperty","ngMetadataName","annotationCls","values","propName","makePropDecorator","PropDecoratorFactory","decoratorInstance","target","meta","unshift","MetadataUtil","getClassMetadatas","getClassMetadataByName","metadataName","getClassMetadataByNameWithTranslate","translateService","keysToTranslate","allClassMetadatas","metadata","find","classMetadata","translateMetadataByName","getPropsMetadatas","getPropsMetadatasByName","getPropsMetadatasByNameWithTranslate","metadatas","allPropMetadatas","keys","forEach","propMetadata","translateMetadatasByName","_this","metadataPropKey","propertyVariable","startsWith","endsWith","translateKey","replace","trim","transform","console","info","getPropMetadatasByName","getPropMetadataByName","ModifyType","Modification","modifyType","path","preValue","position","type","ChangeSet","modifications","append","modification","ValueChange","appendValueChangeModification","Add","Insert","Clone","appendAddModification","Remove","appendRemoveModification","Load","existedModification","join","findModifyItemsPath","existedAddModification","findNewAddItemsPath","primaryKey","primaryKeyValue","addModification","isEqual","filter","addDataItem","fullRemovePath","valueModification","valueChangePath","from","removeDescendantRemoveModifications","clear","index","parentRemoveModification","parentPathWithId","createRemovePathWithId","descendantPathWithId","isDescendantPath","parentPath","descendantPath","parentPathItem","parentPathItemIndex","isPlainObject","toString","getPrototypeOf","proto","NG_FIELD","NgField","makeNgFieldDecorator","options","primary","foreign","Boolean","dataField","String","NG_LIST","NgList","makeNgListDecorator","NG_OBJECT","NgObject","makeNgObjectDecorator","NG_Dynamic","NgDynamic","makeNgDynamicDecorator","NG_ENTITY","FieldMetadataUtil","getNgFields","getNgField","getDataField","getNgObjects","getNgDynamic","getNgList","getPrimaryFieldMetadata","ngFieldObj","prop","propMeta","property","undefined","getPrimaryKey","entityType","primaryNgField","getValidationMetadata","fieldMetadatas","key","validRules","map","rule","getValidationMetadataWithPath","object","parentPaths","getPaths","propertyPath","property_1","EntityMetadataUtil","getAllNgProperties","ngPlainProperties","getNgFieldProperties","ngEntityProperties","getNgObjectProperties","ngDynamicProperties","getNgDynamicProperties","ngEntityListProperties","getNgEntityMatadata","getNgListProperties","getPrimaryKeyProperty","primaryKeyProperty","ngProperty","PARENT_PATH","PARENT_CLASS","EntityFactory","T","data","EntityTypeCreator","entity","getType","createType","_super","tslib_1.__extends","Entity","EntityType","entityPrototype","extendProperties","ngFields","ngObjects","ngLists","ngDynamic","extendPlainProperty","extendListProperty","extendObjectProperty","extendDynamicProperty","ngField","get","getPropValue","set","newPropValue","oldPropValue","isPropValueChanged","setPropValue","changeSetValue","preparePropValue","emitValueChange","ngListMetadata","propertyName","entityList","fieldMetadata_1","createPath","val","EntityList","entities","loadEntities","onListChanged","subscribe","setChanges","ngObjectMetadata","fieldMetadata","childEntity","buildEntity","modifyInfo","ngDynamicMetadata","dynamicEntity","originalData","buildDynamic","buffer","has","parent","instance","onValueChanged","changes","change","fromParent","DynamicFactory","Map","createEntity","entityData","typeName","createEntities","entityListData","validationMessage","ValidationTypes","isValidType","indexOf","getMessage","CURRENT_LANGUAGE","setCurrentLanguage","language","CUSTOM_VALIDATION","REQUIRED","EQUALS","NOT_EQUALS","IS_NUMBER","IS_INT","IS_FLOAT","IS_STRING","IS_BOOLEAN","IS_DATE","IS_DATE_STRING","IS_BOOLEAN_STRING","IS_NUMBER_STRING","IS_EMAIL","IS_JSON","IS_LOWERCASE","IS_UPPERCASE","RANGE","MIN","MINVALUE","MAX","MAXVALUE","LENGTH","MAX_LENGTH","MIN_LENGTH","MIN_DATE","MAX_DATE","EXCLUDE","MATCHES","FIELD_CONTAINER","fieldContainer","required","equals","notEquals","isNumber","isInt","isFloat","isBoolean","isDate","isEmail","min","minValue","minDate","max","maxValue","maxDate","isBooleanString","isDateString","isLowercase","isUppercase","range","maxLength","minLength","isNumberString","exclude","matches","ValidationError","isArray","ValidationExecutor","replaceMessageSpecialTokens","message","messageString","Function","constraints","constraint","RegExp","targetName","execute","newValue","validationErrors","externalRules","currentRowId","frameContext","form","getValidationRules","validateMetadatas","remainedExternalRules","parentPathArray","objectCursor","cursorParentPath","parentPath_1","reverse","rules","pathArray","split","fieldName_1","fieldParentPath","targetId_1","targetId","validateRule","fullPath","fieldName","validateRules","path_1","bindingPaths","getForm","formControl","getFormControl","id","formGroupName","defaultI18nValue","reduce","curr","_a","isMultLanguageField","multiLangFields","getMultiLanguageFields","includes","field","frameContext_1","fieldContainerName","Number","isInteger","validationDisplayName","validationError","generateValidationError","defaultValidations","objectValidations","listValidations","ngFields_1","enableMultiLangInput","stripEmptyErrors","errors","children","errorMap","validValue","validator","validateValueByMetadata","Promise","promise","then","isValid","createValidationError","awaitingPromises","parentIndex","INDEX_LABEL","listFields","validationError_1","items","actualIndex","primaryValue","objectFields","extType","getFrameContext","eventFrameContext","paths","bindingPath","appContext","frameContextManager","getFrameContexts","context","viewModel","ngFormControls","test","ValidationUtils","createDetailedErrorMessage","messages","propConstraintFailed","ruleName","formattedProperty","convertErrorsToNormalObject","errObj","err","childErrors","itemErr","childErr","_b","DateUtil","formatISO","dateOrDateString","isEmptyDateOrDateString","emptyISODateTimeString","dateObj","parse","format","defaultISOFormat","dateFormat","defaultDisplayFormat","parseISO","date","isEmptyDate","isEmptyDateString","dateString","dateOrDateString1","dateOrDateString2","dateObj1","dateObj2","compare","compareAsc","emptyDateTimeString","defaultDateFormat","defaultTimeFormat","TranslateService","setTranslate","translate","getCurrentLanguage","defaultLanguage","dispose","Validator","validate","executor","all","sortValidationErrors","buildErrors","sortable","sort","a","verify","ignoreAsyncValidateRules","validType","constraintsToValidate","param","Date","eval","patch","currentRows","parentEntityListPaths","getEntityListPath","childrenList","slice","getMainEntityPrimaryValue","currentRow","result","msg","Set","newMsg","customValidation","comparison","isEmptyValue","currentLanguage","Infinity","allowInfinity","isNaN","allowNaN","isFinite","validatorJs","isString","getTime","toDate","isLength","hasInvalidLangs","dateRange","isYearRange","isMonthOrDayRange","parseInt","getRangeValue","isDayTimeRange","splitor","isDateRange","isYearMonthRange","num","match","BigNumber","isGreaterThanOrEqualTo","isLessThanOrEqualTo","isNumeric","contains","seed","notContains","isJSON","someChars","arrChar","counter","pattern","ValidatorJS.default","rawData","changeSet","tslib_1.__values","initEntity","changeItem","appendNew","isCloned","newEntity","insert","appendEntity","appendEntities","remove","primaryId","total","count","indexToRemove","findIndex","entityToRemove","splice","primaryProperty","updateIndex","item","modinfo","listChanged","sum","getPropertyName","toJson","toJSON","toArray","isNewEntity","subChanges","newLength","__type__","Subject","asObservable","DataChangeType","HttpMethod","RunMode","BigNumberType","BackEndMessage","Level","Message","bizMessages","ComponentType","DestroyOpportunity","DEVKIT_RUN_MODE","InjectionToken","UserSettingsService","setUserSettings","userSettings","timeZone","timeZoneOffset","getTimeZone","getTimeZoneOffset","ZonedTime","zonedTimeToSpecialTimeZoneOffsetTimeString","offset","offsetMinutes","moment","utc","add","timeZoneOffsetTimeToUtcTimeString","utcOffset","toISOString","ChangeType","ViewChangeType","BindingPropertyType","RouterParamService","getParams","url","getAllParams","setParams","params","allParams","setAllParams","clearParams","Error","allParamsJson","window","sessionStorage","getItem","JSON","stringify","setItem","clearAllParams","Injectable","PropertyUtil","getProperties","properties","ngFieldProperties","ngFieldProperty","Plain","isPrimaryKey","isForeignKey","ngObjectProperties","ngObjectProperty","ngListProperties","ngListProperty","List","ngDynamicProperty","Dynamic","getDynamicProperties","dynamicData","getPropertyByName","BindingListTypeFactory","bindingProperties","bindingListType","BindingList","BindingListType","bindingListTypePrototype","bindingListPrototype","bindingProperty","currentItem","provider","BindingListFactory","bindingList","BindingObjectTypeFactory","bindingObjectType","BaseBindingObject","BindingObjectType","typePrototype","extendDynamicObjectProperty","childListProperties","getValue","bindingObjects","load","isBindingListTransmited","childObjectProperties","bindingObject","setValue","BindingObjectFactory","fromEntity","createDynamicBindingObject","childList","childObject","attachDynamicObjectProperty","dynamicObject","NG_VALIDATE_FORM","NG_CHILD_FORM","NgChildForm","obj","NG_CHILD_FORM_ARRAY","NgChildFormArray","NG_FORM_CONTROL","NgFormControl","BindingPathConverter","toBindingPathArray","part","toBindingPathString","bindingPathArray","BindingPathComparer","srcPath","dstPath","srcPathArray","dstPathArray","every","srcPathItem","srcPathIndex","isParent","childPath","childPathArray","isAncestor","ancestorPath","descendantPathArray","ancestorPathArray","ancestorPathItem","ancestorPathIndex","BindingPathTraverser","getLeafPathString","getParentPathString","EntityPathConverter","toEntityPathArray","bindingPathString","bindingData","entityPathArray","currentBindingObject","list","createPrimaryKeyPath","currentBindingList","DataPathNodeType","EntityPathComparer","FormPathConverter","formPahtString","DataPathNode","prev","DataPath","newNode","head","tailNode","getTail","lastNode","currentNode","clone","newDataPath","curDataNode","DataPropGroup","DataPathCreator$$1","DataPathCreator","fullPathArrayOrString","entityManager","dataPath","fullPathArray","currentNodeInfo","nodeValue","shift","nodeType","DataId","entityTypeInfo","DataTypeInfo","nextNodeValue","getNextPathNodeInfo","parentNodeInfo","parentNodeValue","parentNodeType","parentEntityTypeInfo","nextPathNodeInfo","PropName","nextPropInfo","getPropInfoByName","group","typeInfo","shortPathArrayOrString","shortPathArray","currentEntityTypeInfo","propInfo","DataPropInfo","getBindingPathByTableName","tableName","fullEntityPath","getFullEntityPath","dataTypeInfo","entityInfo","nodeCode","originalCode","propInfoMap","idx","dataTypeInfo_1","getPropInfos","isVOField","getPropNames","propNames","getPropInfosByGroup","getPropNamesByGroup","getPropInfoByPath","arrPath","getTypeInfoByPath","getPrimaryKeyPropInfo","getPropMappingByName","mapping","getPropMappingByPath","checkPropGroup","propGroup","collectPropInfos","foreignKey","addPropInfo","collectEntityInfos","metadataInfo","originalDataField","FORM_PATH_TOKEN","BACK_END_MESSAGE_HANDLER_TOKEN","MESSAGE_SERVICE_TOKEN","NOTIFY_SERVICE_TOKEN","CHANGE_SET_POLICY_TOKEN","ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN","ENABLE_EDIT_STATE_FILTER_SORTING","Core","warn","optionalParams","logable","log","localStorage","escape","RESOLVER_TOKEN","ENTITY_TEMPLATE","STATE_TEMPLATE","GROUP_FUNCTIONS","Injector","decorators","Optional","Inject","ResolverRegistry","injector","resolvers","NG_REPOSITORY","EntityCollection","_changeSetPolicy","policy","innerEntitySet","size","innerEntityMap","notifyCollectionChanged","reset","notify","unsubscribe","complete","isReset","entityCreate","extendChangeSetPolicyProperty","listenEntityChangeEvent","addEntity","verifyEntityToAdd","insertEntity","updateEntity","Update","addEntities","entitiesToAdd","isTreeNodeLoadScene","addData","AddData","changeSetPolicy","getEntityById","identity","getEntityByPath","rootEntityId","parentNode","currentPath","getEntitiesByPath","getEntities","predicate","getAllEntities","removeEntityById","verifyEntityToRemove","delete","removeEntitiesByIds","removeEntities","entitiesToRemove","removeData","RemoveData","resetEntities","entityId","collectionChanged","paginationInfo","pageSize","original","PaginationInfoChange","pageIndex","updatePaginationInfoByPath","pageInfo","totalCount","setPaginationConfigByPath","getPaginationConfigByPath","defaultValue","config","current","Math","abs","EntityManager","createEntitiesByPath","fPath","childEntityList","subPaths","fid","entityCollection","propEntityType","EntityUtil","getPropInfo","getEntityNodeByPath","entityCollectionOrList","createByLongPathFromRoot","entityNode","pathNode","getPropValueByPath","setPropValueByPath","propValue","insertEntityBeforeByPath","fpath","insertEntitiesBeforeByPath","insertEntityAfterByPath","insertEntitiesAfterByPath","appendEntityByPath","initialData","insertEntityByPath","appendEntitiesByPath","removeEntityByPath","removeEntitiesByPath","ids","clearAllEntityChanges","clearEntityChangesById","clearEntityChangesByIds","checkAllEntityChanges","some","checkEntityChangesById","clearEntityChangesByArray","idArray","PaginationManager","expandMainEntityConfig","entityName","paginationConfig","entityConfig","removeLasts","newKey","substring","deleteMainEntityConfig","defaultPageSize","getChilds","objectType","listProperties","itemTypeName","child","childs","DataChangeHistory","addChange","dataChange","changeType","addChanges","history","clearByIds","dataId","ids_1","ids_1_1","isChanged","onAddData","onDeleteData","SortConditionManager","getConditionsByBindingPath","directionConverter","conditions","sorts","condition","sortType","SortType","SortField","addCondition","direction","isBindingPathExist","bindingPathSortConditions","conditionIndex","removeCondition","setConditions","fields","directions","filedsArray","directionsArray","FilterConditionManager","getFilters","filters","mergeCondition","merge","findConditionIndex","addConditions","removes","props_1","props_1_1","UID","redix","timestamp","now","valueOf","previous","Repository","innerName","guid","paginationManager","destroy$","ngOnDestroy","updateEntityType","readMetadata","repositoryMetadata","apiUri","apiUrl","setPaginationConfig","pagination","buildEntities","listData","dataChangeHistory","sortConditionManager","filterConditionManager","DefaultRepository","getList","getById","queryChild","updateById","updateEntityById","appendByPath","insertByPath","removeById","ifSave","batchRemove","removeByIds","removeByPath","updateChangesById","updateChangesByPath","updateAllChanges","applyChanges","applyChangesById","cancelChanges","batchRemoveByPath","batchAppendByPath","defaultValues","batchAppend","hasChanges","EntityDependencyResolver","resolve","expr","groupFunctionDependencies","ExpressionUtil","getGroupFunctionDependency","repository","entityDependencies","getEntityDependency","dep","merged","getValidEntityPropertyExpression","entityPropertyExpression","propPaths","deps","regex","entityPropertyExpressions","convertToNodeCode","substr","CONTEXT_FUNCTIONS","StateDependencyResolver","contextFunctions","argumentsRegex_1","groupFunction","argumentMatchResult","argument","CommentDependencyResolver","dependencies","defineMatchArray","defineString","defineObject","ResolveService","expression","resolverRegistry","commentDependencyResolver","resolver","commentDependencies","dependency","groupFunctionRegex","groupFunctions","methodNameRegex_1","methodNameMatchResult","methodName","prefix","entityExpression","nodeCodes","entityExpressions","nextNodeCode","nextNodeCodePropInfo","dataPropInfo","getChildrenEntityPaths","results","childrens","getCurrentRowByPaths","findById","getAvailableChildrenPathsFromEntityPaths","getBindingPath","getEntityPath","DataTypeInfoUtil","getChildrenNodeCodes","Form","FormGroup","ngValidateForm","enableValidate","insMap","ngChildForms","metaDatas","controls","disposeValidation","updateErrors","errorObj","isGrid","setControlValue","isFormValid","setIsShowmap","domPropertyName","isShowPropMap","setShowValidationMsg","flag","raisedByValidateEffector","isShowValidationMsg","getObject","controlMap","getGridItemControl","getCardControlErrors","cardControls","getFormControlErrors","getGridControlErrors","controlIdMap","isGridComponent","frameComponent","getDomPropertyNameByEntityProp","currentId","isSubForm","innerList","ngFormControl","getngFormControlByBinding","fixedValidType","messageTemplate","invalidMessage","updateFormErrors","forceShow","clearBackendError","setErrors","markAsTouched","errorType","binding","getErrorMessage","domProperty","validateRuleType","controlName","init","verifycationChanged","verifycations","resetCardValidMsg","buildForm","collectMetadatas","createChildForms","createControls","x","resetFormControls","updateFieldValidateRule","isRequired","clearValidators","markAsUntouched","markAsPristine","requiredRuleIndex","displayFieldName","validators","ruleObj","validateFn","getValidatorByRuleObj","setValidators","addFieldValidateRule","expressionId","ruleType","control","controlPaths","currentLangValue","isInValid","bigNumber","isGreaterThan","isLessThan","collectionFormControlMetadats","formControls","subForms","preloadMetadata","formControlId","validationRule","FormControl","updateOn","setUpBindingDataPipeline","valueConverter","formGroup","formType","addControls","column","converter","editor","fieldPath","bindingFieldPath","initValue","getValueFromBindingData","pipe","takeUntil","changePath","isUdt","ValueChanged","SelectionChanged","UpdateErrors","changePathWithDot","fullEntityProp","pathPrefix","newControlValue","convertFrom","domPropName","valueChanges","oldBindingValue","oldValue","compareDate","newBindingValue","convertTo","clearBackEndMessages","emitEventToView","runMode","highSpeed","isDateConverter","srcDate","dstDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getEntityValueChangingListeners","listeners","valueChanging","getEntityValueChangedListeners","valueChanged","validatoinRules","ngFormControl_1","displayFieldName_1","validationrulesToAdd","setTranslateService","messageKeys","errors_1","errors_2","loadEntity","loadEntityList","isEffectiveField","setUpEntityPipeline","primaryKeyPath","dynamic","value_1","target_1","viewChanges","viewChange","parentId","findId","pathData","controlProp","entityValidate","callback","validateFromUtilSync","formErrors","mergedErrors","validateError","setUpEntityListPipeline","paths_1","parentId_1","paths_2","parentPath_2","parentId_2","paths_3","parentPath_3","parentId_3","loadRepository","entityCollectionChange","createBindingObjects","toLowerCase","effectiveFields","createBindingObject","removeDataByIds","watchReposiroty","pagingInfo","targetPropName","propType","primaryNgFiledProp","isObjectProp","isDynamicProp","appendInitialData","parentID","Compare","FilterRelation","ExpressValueType","BindingData","firePagingChangeEvent","setPagingInfo","skip","take","parentObject","updatePagingInfo","setValueChangeInvokerFactory","valueChangeInvokerFactory","getValudChangeInvokerFactory","initByRepository","initByBindingList","setDataTypeInfo","useInitValue","getInitValueByPaths","emitEventToEntity","clearValue","getPath","DataFilter","getCompareResult","fieldDataValue","operator","targetValue","Equal","NotEqual","Greater","GreaterOrEqual","Less","LessOrEqual","Like","NotLike","In","ArrayFilterConditionDataFilter","validateRowData","checkRowDataWithCondition","resultObj","FilterField","fieldValue","Value","operator1","_filters","Relation","ObjectFilterConditionDataFilter","row","checkAllFieldInRowData","where","value1","relation","operator2","value2","result2","getRelationResult","checkAllFieldResult","result1","c","_paginationInfo","sPaginationInfo","setPaginationInfo","emptyCurrentItem","self","objects","firstId","setCurrentId","lastId","Append","currentIndex","detail","nextCurrentId","getCurrentIdBeforeDeleting","getIndexById","clearOnly","nextIndex","getIdByIndex","emitEvent","emitGlobalEvent","force","GlobalSelectionChanged","swapById","id1","id2","item1","element","item2","toList","Swap","defaultView","filter_1","filter_2","sortFields","comparator","sortDirections","sortBy","arrFields","arrDirections","isMultiLangProp","orders","order","item1Value","item2Value","localeCompare","updateDefaultView","id_1","id1_1","id2_1","item1_1","item2_1","getRow","innerValues","propertyValue","invokeOnValueChange","oldPropertyValue","entityChanged","of","rowPrimaryKeyValue","buildViewChangesContext","buildChangesContext","langCode","ignoreMultiLangInput","multiLangValueObj","useFullMultiLangProperty","makeHash","text","possible","charAt","floor","random","differ","onValueChange","isChange","update","BindingObject","BindingDataFactory","createFromRepository","BindingPropertyUtil","EntityLoadUtil","createFromEntityManager","createFromExistingBindingData","existingBindingData","NG_BINDING_DATA","DataPathUtil","convertToBindingPathArray","convertToEntityPathArray","convertToRestUrl","restPathArray","getLeafPath","getParentPath","Guid","isGuid","createEmpty","raw","other","isEmpty","EMPTY","RunModeService","setRunMode","mode","getRunMode","newData","validErrors","primaryFieldMetadata","tap","validateAll","validateContext","validateFromUtil","cb","pathObj","handleParent","loadFields","loadChild","loadLists","loadObjects","loadDynamicObjects","buildChanges","enableTimeZone","ngDynamics","initialize","initializeNormalField","initializeList","initializeObject","initializeDynamic","createEntityFromJsonData","ngList","objectData","ngDynamicObjects","loadDynamicData","originDataField","originalDataFieldType","isEmptyMultiLangPropValue","isValidating","onUpdate","compatible","DynamicEntity","initializeDynamicField","dynamicEntity_1","createDynamicEntityFromJsonData","parentModification","SchemaEntityField$Type","SchemaEntityFieldType$Type","SchemaEntityFieldTypeName","ENTITY_DATA_SERVICE_TOKEN","getFieldValue","schemaField","multiLanguage","setFieldValue","getComplexFieldValue","innerEntities","setComplexFieldValue","ComplexField","complexFieldInstance","objectPropertyValue","changeInfo","isInitializing","schemaEntity","setEntities","isFieldValueChanged","emitFieldValueChange","Schema","SchemaEntity","SchemaEntityType","SchemaEntityField","SchemaEntityFieldType","SchemaEntityFieldEditor","EntityTypeFactory","schema","schemaType","createClass","relateSchema","attachEntityInstanceData","createEntityInstanceDataInitializer","ConcreteEntity","entityInstance","entityTypeConstructor","innerData","code","types","__prop__metadata__","entityTypePrototype","definePresetProperty","defineFieldsToPrototype","defineEntitiesToPrototype","prototypeObject","innerPrimaryProperty","parentEntityType","schemaEntityField","$type","SimpleField","defineSimpleFieldToPrototype","defineComplexFieldToPrototype","getEnableMultiLangInput","complexFieldType","entitMetadata","fieldData","complexFieldValue","subEntityName","includedEntityTypes","originalEntityDataArray","originalEntityData","concreteEntityInstance","RestfulService","uri","request","put","optionsWithBody","addBody","post","method","httpParams","buildParams","BasePathService","convertPath","httpClient","HttpParams","HttpClient","NG_COMMAND_HANDLER","NG_COMMAND_HANDLER_EXTENDER","TaskNode","func","observable","Observable","VARIABLE_PARSERS","ParseUtil","getAppContext","getRootFrameContext","root","getFrameContextById","frameId","DataVariableParser","extractPaths","replaceValue","searchValue","dataVariables","DATA_PATTERN","dataVariable","pathMatches","parts","UIStateVariableParser","getUIState","uiStateVariables","UI_STATE_PATTERN","uiStateVariable","stateName","state","uiState","formatDate","year","month","day","StateMachineVariableParser","stateMachineVariables","STATE_MACHINE_PATTERN","sessionVariable","getPathObj","stateMachine","getTargetStateMachine","targetFrameContext","splitPath","CommandVariableParser","CommandContext","paramKey","command","VariableParseService","eventParam","parseExpression","itemIndex","evaluate","parsedExpression","parsers","parser","VARIABLE_MATCHER","FrameIdVariableParser","variables","extractVariables","exp","getVariableValue","relativeFrameId","getFullFrameId","namespace","FORM_STATES_EXP","FORM_STATE_EXP","FormStateVariableParser","variableExpression","exprs","variable","formStates","EVENT_PARAMS_EXP","EVENT_PARAM_EXP","EventParamVariableParser","VARIABLE_PROVIDERS","provide","multi","useClass","TaskLink","canLink","parseService","to","TaskFlow","addNode","node","nodes","addNodes","insertNode","findNodeIndex","createNode","appendNode","addLink","link","createLink","links","addLinks","getNext","nextLink","taskFlow","latestResult","clearResults","TranslateToken","CommandHandler","variableParseService","schedule","lastTaskResult$","setTimeout","isDisposed","commandToExecute","paramsTransform","transParamTypes","paramDescriptions","initContext","context$","BehaviorSubject","currentTask","concatMap","throwIfEmpty","takeLast","waitForDestroy","displayError","commandContext","destorySignal","pArray","ele","$1","$2","addTask","insertTask","afterTask","replaceTask","invoke","serviceInstance","setContextToServiceInstance","parsedArgs","serviceContext","parType","numResult","boolResult","COMMAND_HANDLERS_TOKEN","CommandHandlerRegistry","commandName","commandHandler","handlerMap","regist","handlerMetadata","handler","handlers","CommandHandlerExtender","COMMAND_HANDLER_EXTENDERS_TOKEN","CommandHandlerExtenderRegistry","extendersMap","extender","extenderMetadata","extenders","NG_COMPONENT_STATE","NgParam","UIStateMetadataUtil","getUIFields","UIState","_init","uiFields","initializeUIField","uiStates","uiFieldMetadata","uiField","isExistProperty","paramTypeTransform","ngParams","ngParam","dataType","originalDataType","setPropertyValue","PARAM_TYPE_TRANSFORM_TOKEN","State","StateMachineContext","initialState","stateMachineEvent","transitTo","nextState","states","render","targetType","parseSourceValue","ListenUIStateChange","getData","ListenEntityChange","StateMachineEvent","UI_STATE_PATTERN_1","DATA_PATTERN_1","getFrameField","frameField","frameContextMap","uiFieldList","dataFrameContextMap","dataFieldList","isAccordingValue","arr","StateMachine","effectHandlers","transit","perform","statemachine","preconditons","stateMachineMetadata","collectionMetadata","buildStateMachine","renderStates","actions","propsMetadatas","buildNgState","renderStateName","buildNgRenderState","actionName","buildNgAction","ngState","ngRenderState","renders","ngAction","precondition","stateRender","stateChange","isStateInited","NgState","NgRenderState","NgAction","action","NG_COMMAND","NgCommand","ViewModel","expressionManager","expressionResult","entityValueChangingListeners","entityValueChangedListeners","setMetadata","bindingTo","viewModelCode","buildCommands","plainPath","change_1","changed","triggerFlag_1","commands","valueChangeCommands","triggers","squence","valueChangeSuccess_1","eventName","trigger","initListeners","ngCommands","keybindingMap","ngCommand","keyBinding","targetContext","commandBus","dispatch","extractPath","bindingBasePath","valueChangingListeners_1","valueChangedListeners_1","bindToParent","verifyInformations","wfConf","source","Context","getParam","setParam","BindingDataManager","getBindingDataMap","bindingDataMap","getBindingDataByName","regBindingData","unRegisteBindingData","ifBindingDataExits","RepositoryManager","regRepository","repositoryMap","unRegisteRepository","getRepositoryMap","getRepositories","getRepositoryByName","ifRepositoryExits","FrameComponentRefresher","refreshComponents","frameComponentMap","component","onFormLoad","regFrameComponent","unregFrameContext","ChangeDetectionController","reattach","frameContexts","detectChanges","detach","AppContextManager","registerAppContext","appContextSet","unregisterAppContext","getAppContexts","ComponentManager","componentRefs","getComponentsByFrameId","FORM_ID","DomService","getElementByBinding","contents","bindingFieldId","parentElement","contents_1","contents_1_1","childControls","FormContent","FormContentForDB","content","Id","Code","Name","Contents","FormMetadaDataDom","FormModule","FormOptions","SchemaService","getFieldsByIds","fieldIds","specifiedFieldsMap","entityPath","bindTo","getEntityFields","fieldsMap_1","flattenFields","fieldId","fieldsMap","fields_1","fields_1_1","splitIndex","entities_1","entities_1_1","ContextMetadataBuilder","buildAppContextMetadata","formMetadataContent","module","identify","buildStataMachineMetadata","buildUiStateMetadata","buildViewContextMetadata","controllers","dynamicOptions","buildCommand","commandHandlers","buildCommandHandlers","commandHandlerExtends","buildFormMetadata","buildFormControlMetadata","commandMetadataArray","previousValue","commandMetadata","previousCommand","enableValidation","formFields","formFieldIds","formField","formFieldsMap","domService","matchedElement","parentMatchedElement","domElements","getTitle","generateConverter","caption","title","valueConverterMap","renderState","renderStateMetadata","renderFunction","buildRenderFunction","actionMetadata","renderFunctionString","previousFunctionString","conditionTarget","conditionSource","functionString","lBracket","rBracket","toLocaleLowerCase","commandReference","controllerId","cmpId","controller","methods","handlerName","previousMethodValue","methodParam","DynamicCommandHandler","ViewModelManager","getViewModelMap","viewModelMap","getViewModelByName","register","exsit","ContextMetadataManager","getContextMetadataMap","contextMetadataMap","getContextMetadataByName","contextMetadata","FRAME_ID","NAMESPACE","FRAME_COMPONENT_INIT_HANDLER_TOKEN","AppContext","getFrameContextMap","disposed","isFormDestoryed","router","unregisterFromManager","frameComponentRefresher","repositoryManager","viewModelManager","bindingDataManager","messagePipe","opportunity","AppContextDestroy","initializeByMetadata","contextMetadataBuilder","registerToManager","appContextManager","regFrameContext","repositoryName","regContextMetadata","componentId","contextMetadataManager","getFormAppContext","destory","applicationId","appId","token","registerCommandHandler","refresh","getContextById","getAllFrameContexts","handleSelectChange","srcFrameContext","buildRenderViewContext","viewModels","formModule","viewmodels","viewComponents","components","schemas","matchedComponent","matchedViewModel","parentViewModel","parentComponent","buildRenderViewContextRecursively","contextMetadataId","subViewModels","subViewModel","getComponentProviders","useValue","FrameContext","SkipSelf","useIsoluteEventBus","enableGridHeaderWhenEditing","formId","ApplicationId","Token","FrameContextManager","changeDetectionController","componentManager","opened","Router","existedFrameContext","frameContextSet","getFrameContextsByNamespace","getFrameContextFromAllAppContexts","EventBusProxy","eventBus","hostType","eventTokenValueProvider","EventTypeEnum","NG_DECLARATION","Declaration","bindDeclaration","initWithDeclarations","ngDeclarations","ngPublicEventProps","getNgPublicEvent","ngExportEvent","emitter","tokenValue","eventArgs","eventType","eventSender","currentContext","eventId","ROUTE","getParentContext","parentAppContext","NG_SUBSCRIPTION","ParamMap","EventPipeType","Subscription","bindSubscription","initWithSubscriptions","ngEvents","ngEventHandlerProps","getNgEvents","eventPipes","ngImportEvent","receiver","paramMapCollection","eventPipe","on","subscriptionHandler","eventHandler","currentFrameContext","paramMap2UiState","destContext","setUiStateProperty","targetFrameContextId","EventPipe","subscriptionMap","sender","eventData","eventSubject","subscriptionInMap","subscription","lastEventId","isInSampeScope","subscribeOnce","caller","onceSubscriptionMap","unSubscribe","subscriber","unSubscribeForOnce","_c","matchEmitterToken","examByTargetToken","parentEventPipeList","location_1","disposeByCaller","eventPipeType","Parsing","senderAppContext","receiverAppContext","isoluteEventBus","Compile","EventBus","getProxy","ownerType","ownerName","proxyMap","emitterType","eventPipeList","eventMap","Type","eventPipeList_1","eventPipeList_1_1","getEventPipe","off","subscriptions","once","requestFor","requestName","requestValue","success","fail","findExistEventPipe","response","status","responseOn","responseSubject","requestObj","eventPipeList_2","eventPipeList_2_1","EventCache","setToken","tokens","getToken","Expression","ExpressionBindingType","ExpressionType","EventType","EventSource","MessageType","EffectPath","EXCEPTION_HANDLER","UserSettingsToken","MESSAGE","zh-CHS","require","dataPicking","en","zh-CHT","DEPENDENCY_SPLITER","FORM_MANIFEST_SERVICE_TOKEN","FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN","ExpressionRegistry","formExpressionManifestService","switchMap","describe","expressions","expressionObject","ns","bindingType","messageType","Required","Validate","DataPicking","getExpressionMessage","_expressions","cleanSpecialCharacters","catchError","getExpressionById","expressionType","replacer","replaceAll","originalValue","search","LISTENER_TOKEN","ChangeListener","subject","findEntityPaths","ExpressionExecutor","compile","expressionContext","buildContext","factory","expression_1","ExpressionEngineExpression","ExpressionEngine","ExpressionContext","ExpressionResult","ExpressionManager","rowData","expressionRegistry","customContext","Readonly","Visible","onDataPicking","configs","warning","notifyService","hideTitle","resolveService","groupDependencies","entityContext","buildEntityContext","stateContext","buildStateContext","contexts","entityOriginalNodeCode","bignumber_js","CurrentLanguage","expressionExecutor","executeAsync","isGroupdMainEntity","isEntityDependency","getEntity","collection","childrenEntityPaths","parentRow","getPropertyValue","entity_1","fullPaths_1","__items__","rootFrameContext","getVirtualRootFrameContext","uiState_1","getOwnPropertyNames","messageService","ExpressionResultFactory","registeEvent","expressionObjects","ASSIGNER_TOKEN","EVENT_HANDLER_TOKEN","UIStateChangeListener","buildEventPath","registerEvent","RepositoryChangeListener","convertEventType","Field","event","ListenerRegistry","BindingDataChangeListener","Listeners","registry","listener","onEvent","ExpressionEventEmitter","attach","events","observers","EFFECTOR_TOKEN","RepositoryEffector","effect","rowId","UIStateEffector","ReadonlyEffector","DependencyEffector","EffectorRegistry","effectors","RelativeEffector","ValidateEffector","domInfo","getDomInfoByEntityPath","buildFormErrors","currentErrors","frameContexts_1","frameContexts_1_1","keys_1","keys_1_1","bindings","dgColumnNames","dgColumnInfo","array","componentType","farrisTreeTalbeComponent","getVerifyInformations","buildVerifyInformations","targetField","removeValidateVerifyInformations","RequiredEffector","pathValue","updateColumnValidators","datagridColumns","isValidValue","datagrid","updateColumn","columns","columnsChanged","getDataPropInfo","VisibleEffector","datagridComponent","getTablePaths","getDatagridComponent","fieldPaths","getPropertyPaths","showColumn","hideColumn","matchedFrameContexts","componentsMap","tablePaths","EffectorFactory","getEffector","nsEffectors","effectorRegistry","effector","Compute","Dependency","Relative","EventHandler","handleEvent","effectTo","effectorFactory","effectPaths","effectOptions","isValidateOrRequiredExpression","getEntityPathFromEvent","buildEntityPath","cleanEventPath","getEventId","tableCode","propertyIndex","idIndex","expressionBindingType","object_1","v1","v2","userAssignCurrentRow","row_1","entityCode","buildEffectPath","expressionPaths","currentPaths","propertyInfo","getPathInfo","propertyNames","getTablePathsFromEventPaths","getPropertyPathsFromEventPaths","analysis","expressionPathInfo","eventPaths","eventPathInfo","expressionTablePaths","expressionPropertyNames","eventTablePaths","eventPropertyNames","distance","eventFromChildren","eventFromParent","isSameTable","buildCurrentRows","fullPaths","convertBooleanTypeExpressionResult","isBooleanTypeExpression","isReadonlyExpression","isVisibleExpression","isValidateExpression","isRequiredExpression","isDependencyExpression","EntityValueChangedEventHandler","getCurrentRowByEvent","EffectorManager","StateValueChangedEventHandler","changePaths","eventPath","effectRows","output","prevPaths","currentCurrentRows","flag_1","nextPrevPaths_1","nextBindingPaths","RepositoryAddEntityEventHandler","RepositoryRemoveEntityEventHandler","RepositoryLoadEventHandler","EntityUpdateEventHandler","depPathInfo","eventEntityPath","childrenPaths","BindingDataAppendObjectEventHandler","groupExpressions","dependPathInfo","eventTablePaths_1","relativeExpressions","depExpressions","depPath","propertyPaths_1","prevPaths_1","BindingDataValueChangeEventHandler","eventEntityPaths","list_1","list_1_1","BindingDataRemoveObjectEventHandler","propertyPaths","BindingDataLoadEventHandler","eventTablePath","BindingDataSelectionChangedEventHandler","EventHandlerRegistry","ExpressionEngineImpl","attachEvent","expressionEventEmitter","getEventHandler","resolveDependency","eventHandlerRegistry","bindingDataValueChangeEventHandler","entityValueChangedEventHandler","stateValueChangedEventHandler","repositoryAddEntityEventHandler","bindingDataAppendEntityEventHandler","repositoryRemoveEntityEventHandler","bindingDataRemoveObjectEventHandler","entityUpdateEventHandler","repositoryLoadEventHandler","bindingDataLoadEventHandler","bindingDataSelectionChangedHandler","ComponentRefManager","getComponentByType","containers","containerIndex","isDestoried","isRootFrameContext","viewModelNames","exceptionHandler","expressionEngineImpl","getComponentById","componentRefManager","getComponentsById","bindInjector","componentInjector","initializeBindingData","initializeStateMachine","initializeUiState","initializeForm","initializeCommandBus","initializeViewModel","registerExceptionHandler","initExpression","formAppContext","location","href","applicationContext","isExceptionHandlerExist","setContext","__frame_context__","handle","registerAppContextDestroyEvent","getFrameId","initializeRepository","handlerRegistry","extendsRegistry","commandHandlerFactory","CommandHandlerFactory","CommandBus","regViewModel","isRunAtHighSpeedMode","repositoryBindingData","routerParams","className","parentContext","childViewModels","viewModelName","name_1","nameToken","toLocaleUpperCase","formFrameContext","getViewModel","renderAppContext","attachViewComponent","viewComponent","actionPath","$event","actionBindingPath","bindingViewModel","alert","enableServerSideChangeDetection","InjectFlags","defaultViewModel","FrameComponent","cd","ngOnInit","initialized","getChangeDetectorRef","initPublicEvent","initSubscription","restComponent","onFrameComponentInit","frameComponentInitHandlers","onComponentInit","ChangeDetectorRef","isCdValid","getSubscription","declaration","getDeclaration","executingCommandCount$","executingCommandCount","innerTrigger","FrameEvent","FrameEventBus","frameIds","rawHandler","extenderRegistry","extend","commandResult$","executeCommand","lastTaskResult","removeCommandFromExecutingQueue","is401Error","handlerFactory","addCommandToExecutingQueue","executingCommands","postOrNot","executingCommand","COMMAND_PROVIDERS","controllerMap","imports","dynamicInvoke","serviceTocken","dynamicInvoke2","methodObject","serviceUri","serviceName","service","stageParam","result$","serviceSpecifer","serviceModule_1","executeWithServiceModule","System","import","serviceModule","originalContextInjector_1","resolvedReflectiveProviders","loadProvidersFromModule","reflectiveInjector","ReflectiveInjector","fromResolvedProviders","serviceMethod","serviceMethodResult","isObservable","scheduleStages","stages","initialStage","preStage","currentStage","forkStage","providerArray","isInjectableService","providerName","hasInjectableDecorator","isFunction","injectableDecorators","decorator","__annotations__","decoratorFactory","VALIDATION_HANDLER","FARRIS_DEVKIT_APP_PROVIDERS","FARRIS_DEVKIT_MODULE_PROVIDERS","FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS","FARRIS_DEVKIT_FRAME_PROVIDERS","DevkitModule","NgModule","providers","CacheReturnType","DeprecatedBindingDataChangeListener","CacheKeyCompare","key1","key2","CacheObject","isExpired","ttl","createAt","CacheContainer","cacheObject","isCacheObjectExpired","MemoryCacheProvider","store","cacheKeyCompare","DefaultCacheProvider","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","parameters","NgEntity","NgRepository","encodeUrl","encodeURI","NgCommandHandler","NgCommandHandlerExtender","NgBindingData","NgValidateForm","NgDeclaration","NgSubscription","getNgSubscriptionDecoratorFactory","Cacheable","propertyKey","descriptor","getOwnPropertyDescriptor","cacheKey","argsString"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Type } from '@angular/core';\r\n\r\n/**\r\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * @ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n *\r\n */\r\nexport interface TypeDecorator {\r\n    /**\r\n     * Invoke as ES7 decorator.\r\n     */\r\n    <T extends Type<any>>(type: T): T;\r\n\r\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\r\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\r\n    // so we cannot declare this interface as a subtype.\r\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\r\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\r\n}\r\n\r\nexport const ANNOTATIONS = '__annotations__';\r\nexport const PARAMETERS = '__parameters__';\r\nexport const PROP_METADATA = '__prop__metadata__';\r\n\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nexport function makeDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\r\n    chainFn?: (fn: Function) => void,\r\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\r\n        new(...args: any[]): any;\r\n        (...args: any[]): any;\r\n        (...args: any[]): (cls: any) => any;\r\n    } {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, ...args);\r\n            return this;\r\n        }\r\n\r\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\r\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\r\n            typeFn && typeFn(cls, ...args);\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (cls as any)[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn) { chainFn(typeDecorator); }\r\n        return typeDecorator;\r\n    }\r\n\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\r\n    return DecoratorFactory as any;\r\n}\r\n\r\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\r\n    return function ctor(...args: any[]) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            // tslint:disable-next-line:forin\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function makeParamDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\r\n\r\n        (<any>ParamDecorator).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n\r\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (cls as any)[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n\r\nexport function makePropDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function PropDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n\r\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        return function PropDecorator(target: any, name: string) {\r\n            const constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (constructor as any)[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\r\nimport { Translate } from '../../i18n';\r\n//import { Cacheable, DefaultCacheProvider } from '../../cache';\r\n\r\n/**\r\n * 元数据解析\r\n * 约束：\r\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\r\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\r\n */\r\nclass MetadataUtil {\r\n\r\n  // ----------------------------------------\r\n  // 类型元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取类元数据\r\n   * 返回结果形如：\r\n   * [\r\n   *   Injectable\r\n   *   NgViewModel\r\n   *   NgViewModel\r\n   * ]\r\n   */\r\n  static getClassMetadatas(constructor: any): any[] {\r\n    const metadatas = constructor[ANNOTATIONS];\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个class上的某种装饰器\r\n   * 返回结果：NgViewModel\r\n   */\r\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\r\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\r\n    return metadata;\r\n  }\r\n\r\n  static getClassMetadataByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): any {\r\n    const allClassMetadatas = this.getClassMetadatas(constructor);\r\n    if (!allClassMetadatas) {\r\n      return null;\r\n    }\r\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\r\n      return classMetadata.ngMetadataName === metadataName;\r\n    });\r\n    this.translateMetadataByName(metadata, translateService, keysToTranslate);\r\n    return metadata;\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // 属性元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取所有属性的所有元数据\r\n   * 返回格式：\r\n   * {\r\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\r\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   * }\r\n   */\r\n   // @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPropsMetadatas(constructor: any): any {\r\n    const allPropMetadatas = constructor[PROP_METADATA];\r\n    return allPropMetadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取所有属性的某一类型的元数据\r\n   * 如果同一属性\r\n   * 返回结果：\r\n   * {\r\n   *    propName1: NgDefaultValue,\r\n   *    propName2: NgDefaultValue\r\n   * }\r\n   */\r\n  // @Cache({ provider: new MemoryCacheProvider(new MetadataKeyCompare()), key: ((context: any, args: any[]) => { return { constructor: args[0], metadataName: args[1] } }) })\r\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\r\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\r\n    return metadatas;\r\n  }\r\n  static getPropsMetadatasByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\r\n    const metadatas = {};\r\n    // 读取构造函数中存储的类属性注解。\r\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\r\n    if (!allPropMetadatas) {\r\n      return metadatas;\r\n    }\r\n    // 遍历所有属性提取注解信息。\r\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\r\n      // 提取当前属性注解对象\r\n      const propMetadatas: any[] = allPropMetadatas[propName];\r\n      // 提取指定类型的注解项\r\n      const metadata = propMetadatas.find((propMetadata: any) => {\r\n        return propMetadata.ngMetadataName === metadataName;\r\n      });\r\n      if (metadata) {\r\n        metadatas[propName] = metadata;\r\n      }\r\n    });\r\n    // 翻译指定属性的值\r\n    this.translateMetadatasByName(metadatas, translateService, keysToTranslate);\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadatasByName(metadatas: any, translateService?: Translate, keysToTranslate?: string[])\r\n    : { [propName: string]: any } {\r\n    Object.keys(metadatas).forEach((propName: string) => {\r\n      // 提取指定类型的注解项\r\n      this.translateMetadataByName(metadatas[propName], translateService, keysToTranslate);\r\n    });\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadataByName(metadata: any, translateService?: Translate, keysToTranslate?: string[]): any {\r\n    if (metadata && translateService && keysToTranslate) {\r\n      keysToTranslate.forEach((metadataPropKey) => {\r\n        const propertyVariable: string = metadata[metadataPropKey];\r\n        try {\r\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n        }\r\n        } catch (e) {\r\n          console.info(e);\r\n        }\r\n      });\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的所有元数据\r\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   */\r\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的某种元数据\r\n   * 返回格式：NgDefaultValue\r\n   */\r\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n\r\n  // ----------------------------------------\r\n  // 参数元数据\r\n  // ----------------------------------------\r\n\r\n}\r\n\r\nexport { MetadataUtil };\r\n","/**\r\n * 变更记录\r\n */\r\nexport class Modification {\r\n\r\n  /**\r\n   * 实体变更路径。如：[1, 'name']\r\n   * 说明： 1 为实体主键ID， name 为属性名称\r\n   */\r\n  path?: string[];\r\n\r\n  /**\r\n   * 原值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 变更后的新值\r\n   *\r\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\r\n   * - Add: value的值为json 对象\r\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\r\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\r\n   *\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ModifyType;\r\n\r\n  /**\r\n   * 数据是否通过验证\r\n   */\r\n  isValid?: boolean;\r\n\r\n  /**\r\n   * 数据验证结果\r\n   */\r\n  errors?: { [type: string]: string };\r\n\r\n  /**\r\n   * 插入位置\r\n   */\r\n  position?: 1 | -1;\r\n\r\n  /**\r\n   * 变更集的值\r\n   */\r\n  changeSetValue?: any;\r\n  /**\r\n   * 重置数据\r\n   */\r\n  isReset?: boolean;\r\n  entityCreate?: boolean;\r\n  dynamic?: boolean;\r\n  fromParent?: boolean;\r\n  /**\r\n   * 是否分层加载场景\r\n   * @description 分层加载使用的变更类型为新增，和真正的新增场景冲突，导致后续根据变更类型处理时出现问题\r\n   */\r\n  isTreeNodeLoadScene?: boolean;\r\n  /**\r\n   * 构造函数\r\n   * @param value 新值\r\n   * @param modifyType 变更类型\r\n   * @param path 变更路径\r\n   * @param preValue 旧值\r\n   */\r\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any, position?: 1 | -1) {\r\n    this.type = modifyType;\r\n    this.value = value;\r\n    this.preValue = preValue;\r\n    this.path = path;\r\n    this.position = position;\r\n  }\r\n}\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport enum ModifyType {\r\n\r\n  /**\r\n   * 添加\r\n   */\r\n  Add = 'ADD',\r\n  /**\r\n   * 添加数据\r\n   */\r\n  AddData = 'AddData',\r\n  /**\r\n   * 克隆数据\r\n   */\r\n  Clone = 'CLONE',\r\n  /**\r\n   * 删除\r\n   */\r\n  Remove = 'REMOVE',\r\n  RemoveData = 'RemoveData',\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  ValueChange = 'VALUE_CHANGE',\r\n\r\n  /**\r\n   * 加载\r\n   */\r\n  Load = 'LOAD',\r\n\r\n  /**\r\n   * 未改变\r\n   */\r\n  UnChanged = 'UNCHANGED',\r\n\r\n  /**\r\n   * 分页信息变更\r\n   */\r\n  PaginationInfoChange = 'PAGINATION_INFO_CHANGE',\r\n\r\n  /**\r\n   * 插入\r\n   */\r\n  Insert = 'Insert',\r\n  /**\r\n   * 更新实体\r\n   */\r\n  Update = 'UPDATE'\r\n}\r\n","/*\r\n * @Author: Lucus, Witt\r\n * @Date: 2018-10-30 15:53:59\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-08 17:25:08\r\n */\r\n\r\nimport { Modification, ModifyType } from './types';\r\nimport { isEqual } from 'lodash-es';\r\n// function isEqual(value: any, other: any) {\r\n//   return JSON.stringify(value) === JSON.stringify(other);\r\n// }\r\n\r\n/**\r\n * 实体数据变更集\r\n */\r\nclass ChangeSet {\r\n  /**\r\n   * 变更集合\r\n   */\r\n  protected modifications: Modification[] = [];\r\n\r\n  /**\r\n   *  获取所有的变更记录\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.modifications;\r\n  }\r\n\r\n  /**\r\n   * 将变更集添加到集合中\r\n   * ### 使用示例\r\n   * ```\r\n   * const changeSet = new ChangeSet();\r\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\r\n   * changeSet.append(modify)\r\n   * ```\r\n   * @param changeItem 变更数据\r\n   */\r\n  public append(modification: Modification) {\r\n    switch (modification.type) {\r\n      case ModifyType.ValueChange:\r\n        this.appendValueChangeModification(modification);\r\n        break;\r\n      case ModifyType.Add:\r\n      case ModifyType.Insert:\r\n      case ModifyType.Clone:\r\n        this.appendAddModification(modification);\r\n        break;\r\n      case ModifyType.Remove:\r\n        this.appendRemoveModification(modification);\r\n        break;\r\n      case ModifyType.Load:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加值变化变更\r\n   */\r\n  private appendValueChangeModification(modification: Modification) {\r\n    const value = modification.value;\r\n    const path = modification.path.join('/');\r\n    const existedModification = this.findModifyItemsPath(modification.path);\r\n    if (existedModification) {\r\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\r\n      existedModification.value = value;\r\n    } else {\r\n      const existedAddModification = this.findNewAddItemsPath(modification.path);\r\n      if (existedAddModification) {\r\n        // @todo：\r\n        // 1、此处逻辑有问题，value是个字符串，不能直接assign；\r\n        // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\r\n        // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\r\n        existedAddModification.value = Object.assign({}, existedAddModification.value, value);\r\n      } else {\r\n        // 其他情况，新增一条ValueChange变更。\r\n        this.modifications.push(modification);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加新增变更\r\n   */\r\n  private appendAddModification(modification: Modification) {\r\n    const value = modification.value;\r\n    const path = modification.path.join('/');\r\n    const existedModification = this.findNewAddItemsPath(modification.path);\r\n    if (existedModification) {\r\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\r\n      existedModification.value = existedModification.value.concat(value);\r\n    } else {\r\n      // 2、如果没有，则新增一条Add变更。\r\n      this.modifications.push(modification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加删除变更\r\n   */\r\n  private appendRemoveModification(modification: Modification) {\r\n\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n\r\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\r\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\r\n    this.modifications.forEach((addModification: Modification) => {\r\n      // 只处理新增变更\r\n      if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {\r\n        return;\r\n      }\r\n\r\n      // @todo 只考虑主从结构，再深的层次暂不考虑\r\n      if (isEqual(addModification.path, path) === false) {\r\n        return;\r\n      }\r\n\r\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\r\n      addModification.value = addModification.value.filter((addDataItem: any) => {\r\n        return addDataItem[primaryKey] !== primaryKeyValue;\r\n      });\r\n    });\r\n\r\n    // 2、移除对应的修改变更\r\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\r\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\r\n      if (valueModification.type !== ModifyType.ValueChange) {\r\n        return true;\r\n      }\r\n      const valueChangePath = Array.from(valueModification.path);\r\n      valueChangePath.pop();\r\n\r\n      // 路径相同进行移除\r\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\r\n      return !isToRemove;\r\n    });\r\n\r\n    // 先删除下级删除变更，再插入\r\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\r\n    this.removeDescendantRemoveModifications(modification);\r\n    this.modifications.push(modification);\r\n  }\r\n\r\n  /**\r\n   * 清空变更集合\r\n   */\r\n  public clear() {\r\n    this.modifications = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据path获取Add类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findNewAddItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据path获取ValueChange类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findModifyItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除后代（包括自己）所有的删除变更\r\n   * @todo：临时做一个最小化修改\r\n   */\r\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\r\n\r\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\r\n\r\n    // 删除后代修改变更\r\n    this.modifications = this.modifications.filter((modification: Modification) => {\r\n      if (modification.type !== ModifyType.Remove) {\r\n        return true;\r\n      }\r\n      const descendantPathWithId = this.createRemovePathWithId(modification);\r\n      const isDescendant = this.isDescendantPath(parentPathWithId, descendantPathWithId);\r\n      return !isDescendant;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取删除路径的完整格式\r\n   * @summary\r\n   * 1、目前删除变更的路径标记到父集合；\r\n   * 2、为了方便比较，将被删除的数据id加入到路径中\r\n   */\r\n  private createRemovePathWithId(modification: Modification) {\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\r\n    return pathWithId;\r\n  }\r\n\r\n  /**\r\n   * 判断是否是后代节点路径\r\n   * @param parentPath 父节点路径\r\n   * @param descendantPath 后代节点\r\n   */\r\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\r\n    if (parentPath.length > descendantPath.length) {\r\n      return false;\r\n    }\r\n\r\n    let isDescendantPath = true;\r\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\r\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\r\n        isDescendantPath = false;\r\n        return;\r\n      }\r\n    });\r\n\r\n    return isDescendantPath;\r\n  }\r\n\r\n}\r\n\r\nexport { ChangeSet };\r\n\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { ClassType } from '../types';\r\nimport { ValidateRule } from '../validator/index';\r\n\r\nfunction isPlainObject(value): boolean {\r\n  if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\r\n    return false;\r\n  }\r\n  if (Object.getPrototypeOf(value) === null) {\r\n    return true;\r\n  }\r\n  let proto = value;\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n  return Object.getPrototypeOf(value) === proto;\r\n}\r\n\r\nexport interface NgProperty {\r\n\r\n  /**\r\n   * 数据字段名\r\n   * @summary\r\n   * 服务器端返回的数据中，该属性对应的key。\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称（请勿使用，待删除）\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 原始字段类型（请勿使用，待删除）\r\n   */\r\n  originalDataFieldType?: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type?: any;\r\n\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** 实体属性注解器名称 */\r\nexport const NG_FIELD = 'NgField';\r\n\r\n/** 实体属性元数据选项 */\r\nexport interface NgFieldProperty extends NgProperty {\r\n\r\n  /** 属性名称 */\r\n  property?: string;\r\n\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n\r\n  /** 原始字段类型 */\r\n  originalDataFieldType?: string;\r\n\r\n  /** 是否为主键 */\r\n  primary?: boolean;\r\n\r\n  /** 是否为外键 */\r\n  foreign?: boolean;\r\n\r\n  /** 默认值 */\r\n  defaultValue?: any;\r\n\r\n  /** 验证规则 */\r\n  validRules?: ValidateRule[];\r\n\r\n  /** 初始值，用于字段清空后 */\r\n  initValue?: any;\r\n\r\n  /** 启用多语录入 */\r\n  enableMultiLangInput?: boolean;\r\n  /**\r\n   * 启用时区\r\n   */\r\n  enableTimeZone?: boolean;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 实体属性注解器 */\r\nexport interface NgFieldPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgFieldProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgFieldProperty | string | ClassType): any;\r\n  (obj?: NgFieldProperty | string | boolean): any;\r\n  new(obj?: NgFieldProperty | string | boolean): any;\r\n}\r\n\r\nfunction makeNgFieldDecorator(options?: NgFieldProperty | string | boolean): any {\r\n  let metadata: NgFieldProperty = {\r\n    primary: false,\r\n    foreign: false\r\n  };\r\n\r\n  if (options) {\r\n    const paramType = typeof options;\r\n    switch (paramType) {\r\n      case 'boolean':\r\n        metadata.primary = Boolean(options);\r\n        break;\r\n      case 'string':\r\n        metadata.dataField = String(options);\r\n        break;\r\n      case 'object':\r\n        metadata = Object.assign(metadata, options);\r\n        break;\r\n    }\r\n  }\r\n  return metadata;\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n * }\r\n * ```\r\n */\r\nexport const NgField: NgFieldPropertyDecorator = makePropDecorator(NG_FIELD, makeNgFieldDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgList 注解器名称 */\r\nexport const NG_LIST = 'NgList';\r\n\r\n/**\r\n * 集合类型元数据选项\r\n */\r\nexport interface NgListProperty extends NgProperty {\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 实体类型 */\r\n  type?: any;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 集合类型注解器 */\r\nexport interface NgListPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgListProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgListProperty | string | ClassType): any;\r\n  new(obj: NgListProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgListDecorator(options: NgListProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n *      @NgList({\r\n *          dataField: 'roles',\r\n *          formType: Role\r\n *      })\r\n *      Roles: EntityList<Role>\r\n * }\r\n * ```\r\n */\r\nexport const NgList: NgListPropertyDecorator = makePropDecorator(NG_LIST, makeNgListDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgObject\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_OBJECT = 'NgObject';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgObjectProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /** 树分级类型 path|parent */\r\n  hierarchyType?: string;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgObjectPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgObjectProperty | string | ClassType): any;\r\n  new(obj: NgObjectProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgObjectDecorator(options: NgObjectProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgObject(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgObject: NgObjectPropertyDecorator = makePropDecorator(NG_OBJECT, makeNgObjectDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgDynamicProperty\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_Dynamic = 'NgDynamic';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgDynamicProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgDynamicPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgDynamicProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgDynamicProperty | string | ClassType): any;\r\n  new(obj: NgDynamicProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgDynamicDecorator(options: NgDynamicProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgDynamic: NgDynamicPropertyDecorator = makePropDecorator(NG_Dynamic, makeNgDynamicDecorator);\r\n","import { makeDecorator } from \"../../metadata/index\";\r\n\r\nexport const NG_ENTITY = 'NgEntity';\r\n\r\n/**\r\n * 实体描述\r\n */\r\nexport interface NgEntity {\r\n  /**\r\n   * 原始编号,对应schema中的code\r\n   */\r\n  originalCode: string;\r\n  /**\r\n   * 后端转换完之后的编号,对应schema中的label\r\n   */\r\n  nodeCode: string;\r\n  /**\r\n   * 允许为空\r\n   */\r\n  allowEmpty?: boolean | string;\r\n}\r\n/**\r\n * 实体装饰器\r\n */\r\nexport interface NgEntityDecorator {\r\n  (obj?: NgEntity): any;\r\n  new(obj?: NgEntity): any;\r\n}\r\n/**\r\n * 实体装饰器\r\n * @param options options\r\n */\r\nexport function NgEntity(options: NgEntity) {\r\n  const decoratorFactory = makeDecorator(NG_ENTITY, (obj: NgEntity) => obj);\r\n  return decoratorFactory(options);\r\n}","import { MetadataUtil } from '../../metadata/index';\r\nimport {\r\n  NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST, NgFieldProperty, NgObjectProperty, NgListProperty\r\n} from './field_decorator';\r\nimport { ValidateRule } from '../validator/types';\r\n\r\n/**\r\n * 属性注解器通用方法\r\n */\r\nexport class FieldMetadataUtil {\r\n  /**\r\n   * 获取实体所有的简单属性元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgFields(target: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取某个简单属性的元数据\r\n   */\r\n  static getNgField(target: any, propName: string): NgFieldProperty {\r\n    const ngFields = this.getNgFields(target);\r\n    const ngField = ngFields[propName] as NgFieldProperty;\r\n    return ngField;\r\n  }\r\n\r\n  /**\r\n   * 获取实体属性在原始数据中的属性名\r\n   */\r\n  static getDataField(target: any, propName: string) {\r\n    const ngField = this.getNgField(target, propName);\r\n    return ngField.dataField || propName;\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgObject的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgObjects(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);\r\n  }\r\n\r\n  static getNgDynamic(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgList的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgListProperty}\r\n   */\r\n  static getNgList(target: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取实体标注为主键的属性元数据\r\n   * @param target 实体类型\r\n   */\r\n  static getPrimaryFieldMetadata(target: any): NgFieldProperty | undefined {\r\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\r\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\r\n      return ngFieldObj[prop].primary;\r\n    });\r\n\r\n    if (primaryKey) {\r\n      const propMeta = ngFieldObj[primaryKey];\r\n      propMeta.property = primaryKey;\r\n      if (!propMeta.dataField) {\r\n        propMeta.dataField = primaryKey;\r\n      }\r\n\r\n      return propMeta;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 获取主键名称，没有主键时返回空字符串\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\r\n    if (!primaryNgField) {\r\n      return '';\r\n    }\r\n    return primaryNgField.property;\r\n  }\r\n\r\n  // static udtMap = {};\r\n\r\n  /**\r\n   * 获取NgField 的验证规则元数据\r\n   * @param target 实体类Type\r\n   */\r\n  static getValidationMetadata(target: any): { [key: string]: ValidateRule[] } {\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});\r\n    // let udtParentName = '';\r\n    // Object.keys(this.udtMap).forEach(key => {\r\n    //   // 当前实体是udt类型时\r\n    //   if (this.udtMap[key].type.name === target.name) {\r\n    //     // 找出当前udt实体的父级信息\r\n    //     udtParentName = key;\r\n    //   }\r\n    // });\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n    // let primaryId = '';\r\n    // let udtPrimaryId = '';\r\n    // 不进行验证的属性名\r\n    // const excludeIDs = [];\r\n    // 排除udt的主键\r\n    // Object.keys(fieldMetadatas).forEach(key => {\r\n    //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n    //     primaryId = fieldMetadatas[key].dataField;\r\n    //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';\r\n    //     excludeIDs.push(fieldMetadatas[key].dataField);\r\n    //   }\r\n    // });\r\n    Object.keys(fieldMetadatas).forEach(key => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n      // if (excludeIDs.indexOf(key) > -1) {\r\n      //   return;\r\n      // }\r\n      if (validRules && validRules.length) {\r\n        validRules.map(rule => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n  static getValidationMetadataWithPath(object: any): { [key: string]: ValidateRule[] } {\r\n    const target = object.constructor;\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    const parentPaths = object.getPaths().path || [];\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n\r\n    Object.keys(fieldMetadatas).forEach((key) => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n\r\n      if (validRules && validRules.length) {\r\n        const propertyPath = parentPaths.concat([]);\r\n        propertyPath.push(key);\r\n        const property = propertyPath.join('.');\r\n        validRules.map((rule) => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n          rule['path'] = property;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n}\r\n","import { Type } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { Entity } from '../entity';\r\nimport { NgEntity, NG_ENTITY } from './entity_decorator';\r\n// import { NgProperty } from './ng_property';\r\n// import { NG_FIELD,   NgFieldProperty   } from './ng_field';\r\n// import { NG_OBJECT,  NgObjectProperty  } from './ng_object';\r\n// import { NG_Dynamic, NgDynamicProperty } from './ng_dynamic';\r\n// import { NG_LIST,    NgListProperty    } from './ng_list';\r\nimport {\r\n  NgProperty, NG_FIELD, NgFieldProperty, NG_OBJECT, NgObjectProperty,\r\n  NG_Dynamic, NgDynamicProperty, NG_LIST,    NgListProperty\r\n} from './field_decorator';\r\n\r\n/**\r\n * 实体元数据工具类\r\n */\r\nexport class EntityMetadataUtil {\r\n\r\n  /**\r\n   * 获取所有属性\r\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\r\n   */\r\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: NgProperty } {\r\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\r\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\r\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\r\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\r\n\r\n    return Object.assign({},\r\n      ngPlainProperties,   ngEntityProperties,\r\n      ngDynamicProperties, ngEntityListProperties\r\n    );\r\n  }\r\n  /**\r\n   * 获取实体元数据描述\r\n   */\r\n  static getNgEntityMatadata(entityType: any): NgEntity{\r\n    return MetadataUtil.getClassMetadataByNameWithTranslate(entityType,NG_ENTITY);\r\n  }\r\n  /**\r\n   * 获取NgField的属性元数据\r\n   */\r\n  static getNgFieldProperties(entityType: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取NgObject属性元数据\r\n   */\r\n  static getNgObjectProperties(entityType: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);\r\n  }\r\n\r\n  /**\r\n   * 获取NgDynamic属性元数据\r\n   */\r\n  static getNgDynamicProperties(entityType: any): { [propName: string]: NgDynamicProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取NgList属性元数据\r\n   */\r\n  static getNgListProperties(entityType: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取主键属性元数据\r\n   */\r\n  static getPrimaryKeyProperty(entityType: Type<Entity>): NgFieldProperty {\r\n    let primaryKeyProperty;\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        primaryKeyProperty = ngProperty;\r\n      }\r\n    });\r\n\r\n    return primaryKeyProperty;\r\n  }\r\n}\r\n","export const PARENT_PATH = '__PARENT_PATH__';\r\nexport const PARENT_CLASS = '__PARENT__';\r\n\r\nexport type ClassType<T = any> = new (...args: any[]) => T;\r\n\r\nexport interface Dynamic {\r\n  loadDynamicData(dynamicData: any): void;\r\n}\r\n","import { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  // const entity = new T(data);\r\n  const entity: any = EntityTypeCreator.create(T, data);\r\n  return entity;\r\n}\r\nexport function DynamicFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n","import { ModifyType } from \"../changeset\";\r\nimport { Entity } from \"./entity\";\r\nimport { DynamicFactory, EntityFactory } from \"./entity_factory\";\r\nimport { EntityList } from \"./entity_list\";\r\nimport { FieldMetadataUtil, NgDynamicProperty, NgFieldProperty, NgListProperty, NgObjectProperty } from \"./metadata\";\r\nimport { ClassType, PARENT_CLASS, PARENT_PATH } from \"./types\";\r\n\r\nexport class EntityTypeCreator {\r\n  private static buffer = new Map<any, any>();\r\n  public static create(constructor: Function, data: any): Entity {\r\n    const entityType = this.getType(constructor);\r\n    const entity = new entityType(data);\r\n    entity.constructor = constructor;\r\n    return entity;\r\n  }\r\n  // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })\r\n  public static createType(constructor: Function): ClassType<Entity> {\r\n    const entityType = class EntityType extends Entity {\r\n      constructor(data: any) {\r\n        super(data);\r\n      }\r\n    };\r\n    const entityPrototype = entityType.prototype;\r\n    this.extendProperties(constructor, entityPrototype);\r\n    return entityType;\r\n  }\r\n  private static extendProperties(constructor: Function, entityPrototype: Entity) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n    this.extendPlainProperty(entityPrototype, ngFields);\r\n    this.extendListProperty(entityPrototype, ngLists);\r\n    this.extendObjectProperty(entityPrototype, ngObjects);\r\n    this.extendDynamicProperty(entityPrototype, ngDynamic);\r\n  }\r\n\r\n  private static extendPlainProperty(entityPrototype: Entity, ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(function (propName) {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      // const dataField = ngField.dataField || propName;\r\n      Object.defineProperty(entityPrototype, propName, {\r\n        get: function () {\r\n          const value = this.getPropValue(propName, ngField);\r\n          return value;\r\n        },\r\n        set: function (newPropValue) {\r\n          // 值相同时不触发变更。\r\n          const oldPropValue = this.getPropValue(propName, ngField);\r\n          if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n            return;\r\n          }\r\n          this.setPropValue(propName, ngField, newPropValue);\r\n          const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n          this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendListProperty(entityPrototype: Entity, ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(function (propertyName) {\r\n      const key = `__${propertyName}__`;\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let entityList = this[key];\r\n          if (!entityList) {\r\n            const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n            const path = this.createPath(propertyName);\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const val = this.data[dataField];\r\n            entityList = new EntityList<typeof fieldMetadata.type>();\r\n            entityList[PARENT_CLASS] = this;\r\n            entityList[PARENT_PATH] = path;\r\n            if (val) {\r\n              const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n              entityList.loadEntities(entities);\r\n            }\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                this.setChanges(value);\r\n              }\r\n            });\r\n            this[key] = entityList;\r\n          }\r\n          return entityList;\r\n        },\r\n        set: function (value) {\r\n          this[key] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendObjectProperty(entityPrototype: Entity, ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const key = `__${propertyName}__`;\r\n      // 如果没有值用一个空对象代替\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let childEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!childEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            // val不存在时，用空对象代替\r\n            const val = this.data[dataField] || {};\r\n            childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);\r\n            this[key] = childEntity;\r\n          }\r\n          return childEntity;\r\n        },\r\n        set: function (value: any) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          const childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);\r\n          this[key] = childEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendDynamicProperty(entityPrototype: Entity, ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const key = `__${propertyName}__`;\r\n\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let dynamicEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!dynamicEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const originalData = this.data[dataField] || {};\r\n            dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);\r\n            this[key] = dynamicEntity;\r\n          }\r\n          return dynamicEntity;\r\n        },\r\n        set: function (value) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          let dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);\r\n          this[key] = dynamicEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static getType(constructor: Function) {\r\n    if (this.buffer.has(constructor)) {\r\n      return this.buffer.get(constructor);\r\n    }\r\n    const entityType = this.createType(constructor);\r\n    this.buffer.set(constructor, entityType);\r\n    return entityType;\r\n  }\r\n  private static buildEntity(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = EntityFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        const change = Object.assign({}, changes, { fromParent: true });\r\n        parent.setChanges(change);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n  private static buildDynamic(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = DynamicFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        parent.setChanges(changes);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n}","import { Type } from '@angular/core';\r\nimport { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\n/**\r\n * 创建实体\r\n * @param entityType 实体类型\r\n * @param entityData 实体数据\r\n */\r\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\r\n  let entity: any;\r\n  if (entityType && entityType.prototype && entityType.prototype.typeName === 'ConcreteEntityPrototype') {\r\n    entity = new entityType(entityData);\r\n  } else {\r\n    entity = EntityTypeCreator.create(entityType, entityData);//new entityType(entityData); \r\n  }\r\n  entity.constructor = entityType;\r\n  return entity;\r\n}\r\n\r\n/**\r\n * 批量创建实体\r\n * @param entityType     实体类型\r\n * @param entityListData 实体数据数组\r\n */\r\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\r\n  const entities: T[] = [];\r\n  entityListData.forEach((entityData: any) => {\r\n    const entity = createEntity<T>(entityType, entityData);\r\n    entities.push(entity);\r\n  });\r\n  return entities;\r\n}\r\n\r\n/**\r\n * 已弃用：请使用createEntity方法代替。\r\n */\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n\r\n\r\n\r\n","const validationMessage = {};\r\n\r\n/**\r\n * 验证类型定义\r\n */\r\nexport class ValidationTypes {\r\n  static CURRENT_LANGUAGE = 'zh-CNS';\r\n\r\n  /**\r\n   * 条件验证表达式\r\n   */\r\n  static CUSTOM_VALIDATION = `customValidation`;\r\n\r\n  /**\r\n   * 必填\r\n   */\r\n  static REQUIRED = 'required';\r\n\r\n  /**\r\n   * 比较值是否相同\r\n   */\r\n  static EQUALS = 'equals';\r\n\r\n  /**\r\n   * 比较值是否不相同\r\n   */\r\n  static NOT_EQUALS = 'notEquals';\r\n\r\n  /**\r\n   * 数字\r\n   */\r\n  static IS_NUMBER = 'isNumber';\r\n\r\n  /**\r\n   * 整数\r\n   */\r\n  static IS_INT = 'isInt';\r\n\r\n  /**\r\n   * 浮点数\r\n   */\r\n  static IS_FLOAT = 'isFloat';\r\n\r\n  /**\r\n   * 字符串\r\n   */\r\n  static IS_STRING = 'isString';\r\n\r\n  /**\r\n   * 布尔值\r\n   */\r\n  static IS_BOOLEAN = 'isBoolean';\r\n\r\n  /**\r\n   * 日期\r\n   */\r\n  static IS_DATE = 'isDate';\r\n\r\n  /**\r\n   * 日期字符串\r\n   */\r\n  static IS_DATE_STRING = 'isDateString';\r\n\r\n  /**\r\n   * 布尔值字符串\r\n   */\r\n  static IS_BOOLEAN_STRING = 'isBooleanString';\r\n\r\n  /**\r\n   * 数字字符串\r\n   */\r\n  static IS_NUMBER_STRING = 'isNumberString';\r\n\r\n  /**\r\n   * 邮箱地址\r\n   */\r\n  static IS_EMAIL = 'isEmail';\r\n\r\n  /**\r\n   * JSON\r\n   */\r\n  static IS_JSON = 'isJSON';\r\n\r\n  /**\r\n   * 字符串小写\r\n   */\r\n  static IS_LOWERCASE = 'isLowercase';\r\n\r\n  /**\r\n   * 字符串大写\r\n   */\r\n  static IS_UPPERCASE = 'isUppercase';\r\n\r\n  /**\r\n   * 数字范围\r\n   */\r\n  static RANGE = 'range';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MIN = 'min';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MINVALUE = 'minValue';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAX = 'max';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAXVALUE = 'maxValue';\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  static LENGTH = 'length';\r\n\r\n  /**\r\n   * 字符串最大长度\r\n   */\r\n  static MAX_LENGTH = 'maxLength';\r\n\r\n  /**\r\n   * 字符串最小长度\r\n   */\r\n  static MIN_LENGTH = 'minLength';\r\n\r\n  /**\r\n   * 最小日期\r\n   */\r\n  static MIN_DATE = 'minDate';\r\n\r\n  /**\r\n   * 最大日期\r\n   */\r\n  static MAX_DATE = 'maxDate';\r\n\r\n  /**\r\n   * 排除非法字符\r\n   */\r\n  static EXCLUDE = 'exclude';\r\n\r\n  /**\r\n   * 正则表达式\r\n   */\r\n  static MATCHES = 'matches';\r\n\r\n  static FIELD_CONTAINER = 'fieldContainer';\r\n  /**\r\n   * 判断验证类型是否合法\r\n   * @param type 验证类型\r\n   */\r\n  static isValidType(type: string): boolean {\r\n    return (\r\n      type !== `isValidType` &&\r\n      type !== 'getMessage' &&\r\n      Object.keys(this)\r\n        .map(key => (this as any)[key])\r\n        .indexOf(type) !== -1\r\n    );\r\n  }\r\n  /**\r\n   * 获取指定验证类型的提示信息\r\n   * @param type 验证类型\r\n   * @returns 返回验证信息\r\n   */\r\n  static getMessage(type: string): string {\r\n    const messages = validationMessage[this.CURRENT_LANGUAGE] || validationMessage['zh-CHS'];\r\n    return messages[type] || '';\r\n  }\r\n\r\n  static setCurrentLanguage(language: string) {\r\n    this.CURRENT_LANGUAGE = language;\r\n  }\r\n}\r\n\r\nvalidationMessage['zh-CHS'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `请输入'$property'`,\r\n  equals: `'$property'的值与$constraint1不相等`,\r\n  notEquals: `'$property'的值不能与'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是数字`,\r\n  isInt: `'$property'的值不是整数`,\r\n  isFloat: `'$property'的值不是浮点型数字`,\r\n  isBoolean: `'$property'的值不是布尔值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `邮箱地址不正确`,\r\n  min: `'$property'的值不应小于$constraint1`,\r\n  minValue: `'$property'的值不应小于$constraint1`,\r\n  minDate: `'$property'的日期不应早于$constraint1`,\r\n  max: `'$property'的值不应大于$constraint1`,\r\n  maxValue: `'$property'的值不应大于$constraint1`,\r\n  maxDate: `'$property'不应晚于$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效布尔值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值应全部为小写字符串`,\r\n  isUppercase: `'$property'的值应全部为大写字符串`,\r\n  length: `'$property'的长度应介于$constraint1~$constraint2之间`,\r\n  range: `'$property'的值应介于$constraint1~$constraint2之间`,\r\n  maxLength: `'$property'的长度不得大于$constraint1`,\r\n  minLength: `'$property'的长度不得小于$constraint1`,\r\n  isNumberString: `'$property'的值不是数字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校验不通过`\r\n};\r\nvalidationMessage['en'] = {\r\n  fieldContainer: `$target row $value`,\r\n  required: `Please input '$property'`,\r\n  equals: `'$property' should equals '$constraint1'`,\r\n  notEquals: `'$property' should not equals '$constraint1'`,\r\n  isNumber: `'$property' should be number`,\r\n  isInt: `'$property' should be integer`,\r\n  isFloat: `'$property' should be float`,\r\n  isBoolean: `'$property' should be boolean`,\r\n  isDate: `'$property' should be date`,\r\n  isEmail: `'$property' should be e-mail address`,\r\n  min: `'$property' should not less than $constraint1`,\r\n  minValue: `'$property' should not less than $constraint1`,\r\n  minDate: `'$property' should not early than $constraint1`,\r\n  max: `'$property' should not bigger than $constraint1`,\r\n  maxValue: `'$property' should not bigger than $constraint1`,\r\n  maxDate: `'$property' should not late than $constraint1`,\r\n  isBooleanString: `'$property' should be boolean string`,\r\n  isDateString: `'$property' should be date string`,\r\n  isLowercase: `'$property' should be lowercase charactor`,\r\n  isUppercase: `'$property' should be uppercase charactor`,\r\n  length: `'$property' length should between $constraint1~$constraint2之间`,\r\n  range: `'$property' value should between $constraint1~$constraint2之间`,\r\n  maxLength: `'$property' should not longer than $constraint1`,\r\n  minLength: `'$property' should not shorter than $constraint1`,\r\n  isNumberString: `'$property' should be number string`,\r\n  exclude: `'$property' should not include $constraint1`,\r\n  matches: `'$property' calibration failed`\r\n};\r\nvalidationMessage['zh-CHT'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `請輸入'$property'`,\r\n  equals: `'$property'的值與$constraint1不相等`,\r\n  notEquals: `'$property'的值不能與'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是數字`,\r\n  isInt: `'$property'的值不是整數`,\r\n  isFloat: `'$property'的值不是浮點型數字`,\r\n  isBoolean: `'$property'的值不是佈爾值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `郵箱地址不正確`,\r\n  min: `'$property'的值不應小於$constraint1`,\r\n  minValue: `'$property'的值不應小於$constraint1`,\r\n  minDate: `'$property'的日期不應早於$constraint1`,\r\n  max: `'$property'的值不應大於$constraint1`,\r\n  maxValue: `'$property'的值不應大於$constraint1`,\r\n  maxDate: `'$property'不應晚於$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效佈爾值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值應全部爲小冩字符串`,\r\n  isUppercase: `'$property'的值應全部爲大冩字符串`,\r\n  length: `'$property'的長度應介於$constraint1~$constraint2之間`,\r\n  range: `'$property'的值應介於$constraint1~$constraint2之間`,\r\n  maxLength: `'$property'的長度不得大於$constraint1`,\r\n  minLength: `'$property'的長度不得小於$constraint1`,\r\n  isNumberString: `'$property'的值不是數字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校驗不通過`\r\n};\r\n","import { FrameContext } from \"../../frame/index\";\r\n\r\n/**\r\n * 验证错误信息\r\n */\r\nexport class ValidationError {\r\n  /**\r\n   * 所属实体对象\r\n   */\r\n  target?: any;\r\n\r\n  /**\r\n   * 验证实体属性名称\r\n   */\r\n  property: string;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  propertyName?: string;\r\n  /**\r\n   * 验证实体属性值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 验证失败的规则\r\n   * @summary {[formType-规则名称]: string - 验证信息 }\r\n   */\r\n  constraints: { [type: string]: string; };\r\n\r\n  /**\r\n   * 子对象验证错误信息集合\r\n   */\r\n  children: ValidationError[];\r\n\r\n  /**\r\n   * 待验证的对象是否为数组集合\r\n   */\r\n  isArray = false;\r\n\r\n  /**\r\n   * 待验证的对象所属集合中的索引\r\n   */\r\n  index = undefined;\r\n\r\n  /**\r\n   * 验证字段名\r\n   */\r\n  field: string;\r\n  /**\r\n   * 校验规则\r\n   */\r\n  rule: any;\r\n  /**\r\n   * 字段绑定路径\r\n   */\r\n  binding?: string;\r\n  frameContext?: FrameContext;\r\n  /**\r\n   * 错误对应字段的完整绑定路径\r\n   */\r\n  fullPath?: string;\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { Validator } from './validator';\r\nimport { ValidateRule } from './types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { EntityList } from '../entity_list';\r\nimport { FieldMetadataUtil, NgFieldProperty } from '../metadata/index';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 执行数据验证\r\n */\r\nexport class ValidationExecutor<T extends Entity> {\r\n\r\n  constructor(private validator: Validator<T>) { }\r\n\r\n  /** 异步验证请求集合 */\r\n  awaitingPromises: Promise<any>[] = [];\r\n  /**\r\n   * 将信息中的关键字替换为具体实体对象中的信息\r\n   * @param message 验证信息\r\n   * @param metadata 验证规则\r\n   * @param value 待验证的值\r\n   */\r\n  public static replaceMessageSpecialTokens(message: any, metadata: ValidateRule, value: any) {\r\n    let messageString: string;\r\n    if (message instanceof Function) {\r\n      messageString = (message as (args: ValidateRule) => string)(metadata);\r\n    } else if (typeof message === 'string') {\r\n      messageString = message as string;\r\n    }\r\n\r\n    if (messageString && metadata.constraints instanceof Array) {\r\n      metadata.constraints.forEach((constraint, index) => {\r\n        messageString = messageString.replace(new RegExp(`\\\\$constraint${index + 1}`, 'g'), constraint);\r\n      });\r\n    }\r\n\r\n    if (messageString && value !== undefined && value !== null) {\r\n      messageString = messageString.replace(/\\$value/g, value);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$property/g, metadata.property);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$target/g, metadata.targetName);\r\n    }\r\n\r\n    return messageString;\r\n  }\r\n\r\n  /**\r\n   * 验证实例对象\r\n   * @param object 验证实例对象\r\n   * @param newValue 实体将要更新的值\r\n   * @param validationErrors 验证信息集合\r\n   * @param propertyName 实例对象属性\r\n   * @param index 所属集合实例中索引\r\n   */\r\n  execute(object: T, newValue, validationErrors: ValidationError[], propertyName?: string, index?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    // if (!currentRowId) {\r\n    //   currentRowId = object.primaryValue;\r\n    // }\r\n    if (!externalRules && frameContext) {\r\n      externalRules = frameContext.form.getValidationRules();\r\n    }\r\n    // 提取实体上定义的验证描述\r\n    // 格式{key:[rule1,rule2]}\r\n    let validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);\r\n    const remainedExternalRules = new Map<string, ValidateRule[]>();\r\n\r\n    // 合并额外验证规则\r\n    if (externalRules) {\r\n      // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];\r\n      // if (parentPathArray.length > 1) {\r\n      //   parentPathArray[0] = '';\r\n      // }\r\n      const parentPathArray = [];\r\n      let objectCursor = object;\r\n      while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {\r\n        const cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';\r\n        // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {\r\n        parentPathArray.push(cursorParentPath);\r\n        // }\r\n        objectCursor = objectCursor['__PARENT__'];\r\n        if (objectCursor instanceof EntityList) {\r\n          objectCursor = objectCursor['__PARENT__'];\r\n        }\r\n      }\r\n      const parentPath = parentPathArray.reverse().join('/');\r\n\r\n      externalRules.forEach((rules, path) => {\r\n        if (path) {\r\n          // 提取额外验证规则字段路径\r\n          const pathArray = path.split('/');\r\n          // 提取字段名称\r\n          const fieldName = pathArray.pop();\r\n          // 提取字段父路径\r\n          const fieldParentPath = pathArray.join('/');\r\n          // 匹配外部验证规则和实体验证规则父路径\r\n          if (parentPath === fieldParentPath) {\r\n            validateMetadatas[fieldName] = [...(validateMetadatas[fieldName] || [])];\r\n            // 合并外部校验规则到实体校验规则，并同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。\r\n            if (rules.length) {\r\n              let targetId = '';\r\n              rules.forEach(rule => {\r\n                if (rule.targetId && rule.targetId.length > targetId.length) {\r\n                  targetId = rule.targetId;\r\n                }\r\n                validateMetadatas[fieldName].push(rule);\r\n              });\r\n              validateMetadatas[fieldName].forEach((validateRule: ValidateRule) => {\r\n                validateRule.targetId = targetId;\r\n                validateRule.targetName = rules[0].targetName;\r\n                validateRule.property = rules[0].property;\r\n                if (rules[0].frameContext) {\r\n                  validateRule.frameContext = rules[0].frameContext;\r\n                }\r\n                validateRule.fullPath = rules[0].fullPath;\r\n                validateRule['initialized'] = true;\r\n              });\r\n            }\r\n          } else {\r\n            remainedExternalRules.set(path, rules);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 处理校验规则中的属性名称\r\n    // 场景为前端未开启校验或form校验规则中对应绑定路径中对应控件未开启校验，导致上一步骤中组件名、字段名未能同步为对应中文\r\n    if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {\r\n      Object.keys(validateMetadatas).forEach((fieldName: string) => {\r\n        const validateRules = validateMetadatas[fieldName];\r\n        if (validateRules && validateRules.length > 0) {\r\n          const firstValidateRule = validateRules[0];\r\n          const path = firstValidateRule['path'];\r\n          if (path) {\r\n            validateRules.forEach((validateRule: ValidateRule) => {\r\n              // 将initialized判断外移减少代码执行次数\r\n              if (validateRule['initialized'] !== true) {\r\n                const bindingPaths = path.split('.');\r\n                const form = this.getForm(bindingPaths, frameContext);\r\n                const formControl = this.getFormControl(bindingPaths, frameContext);\r\n                if (formControl) {\r\n                  validateRule.targetId = formControl.id;\r\n                  validateRule.targetName = form && form.formGroupName;\r\n                  validateRule.property = formControl.name || formControl.defaultI18nValue || '';\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 过滤出当前验证属性的验证规则\r\n    if (propertyName) {\r\n      validateMetadatas = Object.keys(validateMetadatas)\r\n        .filter(key => key === propertyName)\r\n        .reduce((val, curr) => Object.assign({}, val, { [curr]: validateMetadatas[curr] }), {});\r\n    }\r\n    // validateMetadatas = {rule:当前属性的所有校验规则}\r\n    Object.keys(validateMetadatas).filter((key: string) =>\r\n      object && (\r\n        object.hasOwnProperty(key) ||\r\n        (\r\n          object.constructor.prototype &&\r\n          object.constructor.prototype.typeName &&\r\n          object.constructor.prototype.hasOwnProperty(key)\r\n        ) ||\r\n        object['__proto__'].hasOwnProperty(key)\r\n      )\r\n    ).forEach(key => {\r\n      // todo: 没用兼容value是undefined的情况\r\n      let value = newValue;\r\n      if (newValue === undefined) {\r\n        value = (object as any)[key];\r\n      }\r\n      let isMultLanguageField = false;\r\n      const multiLangFields = this.getMultiLanguageFields(object);\r\n      if (multiLangFields && multiLangFields.length > 0) {\r\n        if (multiLangFields.includes(key)) {\r\n          isMultLanguageField = true;\r\n        }\r\n      }\r\n      // const value = newValue ||\r\n      const validateRules: ValidateRule[] = validateMetadatas[key];\r\n      if (validateRules.length) {\r\n        const { property: fieldName, targetId: field, frameContext, fullPath } = validateRules[0];\r\n        // const fieldContainerName = Number.isInteger(index) ?\r\n        // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;\r\n        const fieldContainerName = Number.isInteger(index) ?\r\n          ValidationExecutor.replaceMessageSpecialTokens(\r\n            ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER),\r\n            validateRules[0], index + 1\r\n          ) : validateRules[0].targetName;\r\n        const validationDisplayName = fieldContainerName ? `${fieldContainerName} - ${fieldName}` : `${fieldName}`;\r\n        // const property = validateRules['path'] || key;\r\n        const validationError = this.generateValidationError(object, value, key, validationDisplayName, index, field, frameContext, fullPath);\r\n        if (index !== undefined) {\r\n          validationError['index'] = index;\r\n        }\r\n        validationErrors.push(validationError);\r\n        this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);\r\n      }\r\n    });\r\n\r\n    this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);\r\n\r\n    this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);\r\n    // this.sortValidationErrors(validationErrors);\r\n\r\n    // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题\r\n    // if (!propertyName) {\r\n    //     this.objectValidations(object, validationErrors);\r\n    // }\r\n  }\r\n\r\n\r\n\r\n  private getMultiLanguageFields(entity: any) {\r\n    if (entity && entity.constructor) {\r\n      const ngFields = FieldMetadataUtil.getNgFields(entity.constructor);\r\n      return Object.keys(ngFields).filter((fieldName: string) => ngFields[fieldName].enableMultiLangInput);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 清除通过验证信息\r\n   * @param errors 验证失败信息\r\n   */\r\n  stripEmptyErrors(errors: ValidationError[]) {\r\n    return errors.filter(error => {\r\n      if (error.children) {\r\n        error.children = this.stripEmptyErrors(error.children);\r\n      }\r\n\r\n      if (Object.keys(error.constraints).length === 0) {\r\n        if (error.children.length === 0) {\r\n          return false;\r\n        } else {\r\n          delete error.constraints;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 生成未通过验证的对象\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param propertyName 待验证的实体属性名称\r\n   * @param index 验证数据索引\r\n   * @param field 待验证字段\r\n   */\r\n  private generateValidationError(object: any, value: any, property: string, propertyName?: string, index?: number, field?: string, frameContext?: FrameContext, fullPath?: string) {\r\n    const validationError = new ValidationError();\r\n\r\n    validationError.target = object;\r\n    validationError.value = value;\r\n\r\n    validationError.property = property;\r\n    validationError.propertyName = propertyName;\r\n    validationError.field = field;\r\n    validationError.index = index;\r\n    validationError.children = [];\r\n    validationError.constraints = {};\r\n    if (frameContext) {\r\n      validationError.frameContext = frameContext;\r\n    }\r\n    validationError.fullPath = fullPath;\r\n    return validationError;\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的属性\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param validateRules 验证规则\r\n   * @param errorMap 难证信息。{[key]: message}\r\n   *\r\n   * key: 验证规则名称\r\n   * message: 验证信息\r\n   */\r\n  private defaultValidations(object: T, value: any, validateRules: ValidateRule[], validationError: ValidationError, isMultLanguageField?: boolean, currentRowId?: string) {\r\n    const errorMap = validationError.constraints;\r\n    return validateRules\r\n      .filter((validateRule) => {\r\n        // 验证实体属性是否符合规则\r\n        const validValue = this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);\r\n        if (validValue instanceof Promise) {\r\n          const promise = validValue.then((isValid) => {\r\n            if (!isValid) {\r\n              const { type, messageString: message } = this.createValidationError(object, value, validateRule);\r\n              errorMap[type] = message;\r\n              validationError.rule = validateRule;\r\n            }\r\n          });\r\n          this.awaitingPromises.push(promise);\r\n        }\r\n        return !validValue;\r\n      })\r\n      .forEach((validateRule) => {\r\n        // 不符合规则，生成错误信息\r\n        const { type: key, messageString: message } = this.createValidationError(object, value, validateRule);\r\n        errorMap[key] = message;\r\n        validationError.rule = validateRule;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 验证列表中的每条记录\r\n   * @param object 要验证的实体实例对象\r\n   * @param errors 验证失败的信息集合\r\n   * @param property 属性名称\r\n   * @param parentIndex 当前集合的父对象所属集合列表中的索引。\r\n   */\r\n  private listValidations(\r\n    object: any,\r\n    errors: ValidationError[],\r\n    property?: string,\r\n    parentIndex?: any,\r\n    externalRules?: Map<string, ValidateRule[]>,\r\n    frameContext?: FrameContext\r\n  ) {\r\n    const INDEX_LABEL = \"__ACTUAL_INDEX__\";\r\n    const listFields = FieldMetadataUtil.getNgList(object.constructor);\r\n    if (!listFields) {\r\n      return;\r\n    }\r\n    let keys = Object.keys(listFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = listFields[propertyName];\r\n      const clzType = metadata.type;\r\n      const value = object[propertyName] as EntityList<T>;\r\n      if (value) {\r\n        const parentPaths = object.getPaths().path || [];\r\n        parentPaths.push(propertyName);\r\n        const validationError = this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);\r\n        validationError.isArray = true;\r\n        errors.push(validationError);\r\n        value.items.forEach((entity, index) => {\r\n          let actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;\r\n          this.execute(entity, undefined, validationError.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的引用对象\r\n   * @param object 要验证的实体对象\r\n   * @param errors 错误信息集合\r\n   */\r\n  private objectValidations(object: T, errors: ValidationError[], property?: string, parentIndex?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    const objectFields = FieldMetadataUtil.getNgObjects(object.constructor);\r\n    if (!objectFields || Object.keys(objectFields).length < 1) {\r\n      return;\r\n    }\r\n\r\n    let keys = Object.keys(objectFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = objectFields[propertyName];\r\n      const objectType = metadata.type;\r\n      const value = object[propertyName];\r\n      if (value) {\r\n        this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建验证规则信息\r\n   * @param object 要验证的实体对象\r\n   * @param value 验证的值\r\n   * @param metadata 验证规则\r\n   */\r\n  private createValidationError(object: T, value: any, metadata: ValidateRule) {\r\n    // const targetName = object.constructor ? (object.constructor as any).name : undefined;\r\n    const type = metadata.type;\r\n    // 获取校验提示信息：先使用内置规则获取，获取不到时使用元数据上的提示，以兼容表达式场景\r\n    let message = ValidationTypes.getMessage(type);\r\n\r\n    if (!message) {\r\n      message = metadata.message;\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {\r\n      if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {\r\n        // 获取日期类型的提示信息\r\n        const extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;\r\n        message = ValidationTypes.getMessage(extType);\r\n        /*if (metadata.constraints[0]) {\r\n          metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');\r\n        }*/\r\n      }\r\n    }\r\n\r\n    const messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);\r\n    return { type, messageString, metadata };\r\n  }\r\n  private getFrameContext(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    paths.pop();\r\n    const bindingPath = paths.join('/');\r\n    const frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find((context: FrameContext) => context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\r\n    return frameContext || null;\r\n  }\r\n  private getForm(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    return frameContext && frameContext.form || null;\r\n  }\r\n  private getFormControl(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    const propertyName = paths.pop();\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    const formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;\r\n    return formControl;\r\n  }\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return regex.test(value);\r\n  }\r\n}\r\n","import { ValidationError } from './validation_error';\r\nimport { ValidationResult } from './types';\r\n/**\r\n * 数据验证帮助类，提供一些公共的操作方法函数\r\n */\r\nexport class ValidationUtils {\r\n\r\n  /**\r\n   * 将错误信息集合转变为可读性高的文本数组\r\n   * @param errors 验证失败错误集合\r\n   * @param messages 返回的错误信息文本集合\r\n   * @param parentPath 验证属性上级路径\r\n   */\r\n  static createDetailedErrorMessage(\r\n    errors: ValidationError[],\r\n    messages: string[] = [],\r\n    parentPath: string = ''\r\n  ): string[] {\r\n    errors.forEach(error => {\r\n      const targetName = error.target ? error.target.constructor.name : '';\r\n      const property = error.propertyName;\r\n\r\n      const propConstraintFailed = (propertyName: string): string =>\r\n        `   - 属性 ${parentPath}${propertyName} 验证失败的规则:  \\n` +\r\n        `${Object.keys(error.constraints)\r\n          .map(ruleName => {\r\n            return `        #${ruleName}: ${error.constraints[ruleName]}\\n`;\r\n          })\r\n          .join('')}`;\r\n\r\n      if (!parentPath) {\r\n        messages.push(`类型为 ${targetName} 的实例对象数据验证失败，详细信息：\\n`);\r\n\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(property));\r\n        }\r\n\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, property);\r\n        }\r\n      } else {\r\n        const formattedProperty = Number.isInteger(+error.index)\r\n          ? `[${error.index}].${property}`\r\n          : `${parentPath ? `.` : ``}${property}`;\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(formattedProperty));\r\n        }\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, `${parentPath}${formattedProperty}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    return messages;\r\n  }\r\n\r\n  /**\r\n   * 错误信息集合转换为简单对象格式\r\n   * @param errors 错误信息集合\r\n   * @param errObj 返回简单对象。如:\r\n   * ```\r\n   * { name: { required: '必填', max: '最大值99' },\r\n   *   list: {\r\n   *      0: { name:{required: '必填'},\r\n   *           age: { min: '最小值 20' }\r\n   *         },\r\n   *      2: { ... }\r\n   *   }\r\n   * }\r\n   *\r\n   * ```\r\n   */\r\n  static convertErrorsToNormalObject(errors: ValidationError[], errObj: {}): {} {\r\n    errors.forEach(err => {\r\n      const property = err.propertyName;\r\n\r\n      const buildArray = (childErrors: ValidationError[]) => {\r\n        const itemErr = {};\r\n        childErrors.forEach((childErr: ValidationError) => {\r\n          if (childErr.children.length) {\r\n            itemErr[childErr.index] = ValidationUtils.convertErrorsToNormalObject(childErr.children, childErr);\r\n          } else {\r\n            if (itemErr[childErr.index]) {\r\n              itemErr[childErr.index] = Object.assign({}, itemErr[childErr.index], {\r\n                [childErr.propertyName]: childErr.constraints\r\n              });\r\n            } else {\r\n              itemErr[childErr.index] = { [childErr.propertyName]: childErr.constraints };\r\n            }\r\n          }\r\n        });\r\n\r\n        return itemErr;\r\n      };\r\n\r\n      if (!err.isArray) {\r\n        if (!err.children.length) {\r\n          errObj[property] = err.constraints;\r\n        } else {\r\n          errObj[property] = ValidationUtils.convertErrorsToNormalObject(err.children, errObj);\r\n        }\r\n      } else {\r\n        errObj[property] = buildArray(err.children);\r\n      }\r\n    });\r\n\r\n    return errObj;\r\n  }\r\n}\r\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\r\n\r\n/**\r\n * 日期处理类\r\n */\r\nclass DateUtil {\r\n\r\n  /**\r\n   * 空日期字符串（N版）\r\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\r\n   */\r\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\r\n  static emptyDateTimeString = null;\r\n\r\n  /**\r\n   * 默认空日期字符串（ISO标准格式）\r\n   */\r\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\r\n  static emptyISODateTimeString = null;\r\n\r\n  /**\r\n   * 默认日期听格式\r\n   */\r\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\r\n\r\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\r\n\r\n  static defaultDateFormat = 'yyyy-MM-dd';\r\n\r\n  static defaultTimeFormat = 'HH:mm:ss';\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\r\n   */\r\n  static formatISO(dateOrDateString: string|Date): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    return format(dateObj, this.defaultISOFormat);\r\n  }\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为指定格式的字符串\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   * @param dateFormat 日期格式字符串\r\n   */\r\n  static format(dateOrDateString: string|Date, dateFormat?: string): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\r\n    return format(dateObj, dateFormat);\r\n  }\r\n\r\n  /**\r\n   * 创建日期\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   */\r\n  static parse(dateOrDateString: string | Date): Date {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return dateOrDateString as Date;\r\n    }\r\n\r\n    return parseISO(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否是日期对象\r\n   */\r\n  static isDate(date: any): boolean {\r\n    return isDate(date);\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期或者空日期字符串\r\n   * @param dateOrDateString 日期或日期字符串\r\n   */\r\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return this.isEmptyDate(dateOrDateString as Date);\r\n    }\r\n    return this.isEmptyDateString(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否为空日期字符串\r\n   * @param date 日期对象\r\n   */\r\n  static isEmptyDate(date: Date) {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期字符串\r\n   * @param dateString 日期字符串\r\n   */\r\n  static isEmptyDateString(dateString: string) {\r\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 相等返回true，否则返回false\r\n   */\r\n  static isEqual(dateOrDateString1: string|Date, dateOrDateString2: string|Date): boolean {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (dateObj1 === dateObj2) {\r\n      return true;\r\n    }\r\n    return isEqual(dateObj1, dateObj2);\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 返回-1、0、1\r\n   */\r\n  static compare(dateOrDateString1: string|Date, dateOrDateString2: string|Date) {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (this.isEqual(dateObj1, dateObj2) === true) {\r\n      return 0;\r\n    }\r\n\r\n    // 处理解析后为null的场景，null比所有有效日期小\r\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\r\n      return -1;\r\n    }\r\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\r\n      return 1;\r\n    }\r\n\r\n    return compareAsc(dateObj1, dateObj2);\r\n  }\r\n}\r\n\r\nexport { DateUtil };\r\n\r\n","import { Translate } from './translate';\r\n\r\nexport class TranslateService {\r\n  private static defaultLanguage = 'zh-CHS';\r\n  public static translate: Translate = null;\r\n  /**\r\n   * 设置多语服务\r\n   * @param translate translate\r\n   */\r\n  public static setTranslate(translate: Translate) {\r\n    if (translate) {\r\n      this.translate = translate;\r\n    }\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   */\r\n  public static getCurrentLanguage() {\r\n    return this.translate && this.translate.getCurrentLanguage() || this.defaultLanguage;\r\n  }\r\n  public static dispose() {\r\n    this.translate = null;\r\n  }\r\n}\r\n","import * as ValidatorJS from 'validator';\r\nimport { ValidateRule, IsNumberOptions, ValidationResult } from './types';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationExecutor } from './validation_executor';\r\nimport { ValidationUtils } from './validation_utils';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { TranslateService } from '../../i18n/translate_service';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { RuleType } from '../../form/index';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 校验实体实例对象数据\r\n */\r\nexport class Validator<T extends Entity> {\r\n  constructor() { }\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  /**\r\n   * 验证实例对象中数据是否合法\r\n   * @param object 待校验的实例对象\r\n   * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  validate(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Promise<ValidationResult> {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    return Promise.all(executor.awaitingPromises).then(() => {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      this.sortValidationErrors(errors);\r\n      return this.buildErrors(errors);\r\n    });\r\n  }\r\n  /**\r\n   * 校验信息排序（为了兼容树形表）\r\n   * @param validationErrors 验证信息数组\r\n   */\r\n  private sortValidationErrors(validationErrors: ValidationError[]) {\r\n    // 如果存在无序号的信息则不排序\r\n    let sortable: boolean = true;\r\n    validationErrors.forEach(info => {\r\n      if (info.children && info.children.length > 1) {\r\n        this.sortValidationErrors(info.children);\r\n      }\r\n      if (typeof info.index !== \"number\") {\r\n        sortable = false;\r\n      }\r\n    });\r\n    if (sortable) {\r\n      validationErrors.sort((a, b) => a.index - b.index);\r\n    }\r\n  }\r\n  /**\r\n   * 执行校验\r\n   * @param object \r\n   * @param propertyName \r\n   * @param value \r\n   * @param externalRules \r\n   * @param index \r\n   * @param frameContext \r\n   * @param ignoreAsyncValidateRules\r\n   * @returns \r\n   */\r\n  public verify(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext, ignoreAsyncValidateRules: boolean = false): Promise<ValidationResult> | { isValid: boolean, errors: any, message: string } {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    if (executor.awaitingPromises && executor.awaitingPromises.length > 0 && ignoreAsyncValidateRules === false) {\r\n      return Promise.all(executor.awaitingPromises).then(() => {\r\n        const errors = executor.stripEmptyErrors(validationErrors);\r\n        const result = this.buildErrors(errors);\r\n        return result;\r\n      });\r\n    } else {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      return this.buildErrors(errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证实体属性元数据中设置的校验规则是否合法\r\n   * @param object 实例对象\r\n   * @param value 待校验的值\r\n   * @param validateRule 验证规则\r\n   */\r\n  validateValueByMetadata(object: any, value: any, validateRule: ValidateRule, isMultLanguageField?: boolean, currentRowId?: string): boolean | any {\r\n    const validType = validateRule.type;\r\n    let constraintsToValidate = [];\r\n    if (validateRule.constraints) {\r\n      constraintsToValidate = validateRule.constraints.map(param => {\r\n        if (typeof param === 'function') {\r\n          return param(object, value);\r\n        }\r\n        return param;\r\n      });\r\n    } else {\r\n      validateRule.constraints = [];\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(validType)) {\r\n      if (validType === ValidationTypes.MAXVALUE) {\r\n        const rule = constraintsToValidate[0];\r\n        if (this.isDateString(value) || this.isDate(value) || this.isDateString(rule) || this.isDate(rule)) {\r\n          // 如果日期值不存在，则不判断大小\r\n          if (!value) {\r\n            return true;\r\n          }\r\n          if (value.indexOf('~') !== -1) {\r\n            // 不对日期区间进行校验\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MAX_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));\r\n        } else {\r\n          return this[ValidationTypes.MAXVALUE](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else if (validType === ValidationTypes.MINVALUE) {\r\n        // 如果是null或undefined，直接返回true\r\n        if (constraintsToValidate[0] === null || constraintsToValidate[0] === undefined) {\r\n          return true;\r\n        }\r\n        if (this.isDateString(value) || this.isDate(value)) {\r\n          if (constraintsToValidate[0] === 0) {\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MIN_DATE](DateUtil.parse(value), isMultLanguageField, DateUtil.parse(constraintsToValidate[0]));\r\n        } else if (this.isNumber(value)) {\r\n          return this[ValidationTypes.MIN](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else {\r\n        return this[validType](value, isMultLanguageField, ...constraintsToValidate);\r\n      }\r\n    } else {\r\n      if (typeof validateRule.eval === 'function') {\r\n        const bindingPath = validateRule.bindingPath;\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        let fieldName = validateRule.field;\r\n        if (bindingPaths.length !== 0) {\r\n          const prefix = bindingPaths.join('/');\r\n          fieldName = `${prefix}/${fieldName.split('.').filter(p => p).join('/')}`;\r\n        }\r\n        const options: any = { patch: { [fieldName]: value } };\r\n        options.currentRows = [];\r\n        const parentEntityListPaths: string[] = object && typeof object['getEntityListPath'] === 'function' && object.getEntityListPath();\r\n        if (parentEntityListPaths.length === 4) {\r\n          const childrenList = parentEntityListPaths.slice(1, 3).reverse();\r\n          options.currentRows.push({ bindingPath: childrenList[1], primaryValue: childrenList[0].split(':')[1] });\r\n        }\r\n        if (currentRowId) {\r\n          if (validateRule.bindingPath.split('/').filter(p => p).length !== 0) {\r\n            const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n            options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n          }\r\n          options.currentRow = { bindingPath: validateRule.bindingPath, primaryValue: currentRowId };\r\n        } else {\r\n          const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n          options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n        }\r\n\r\n        const result = validateRule.eval(options);\r\n        if (validateRule.type === RuleType.Require) {\r\n          const isValid = this.required(value, isMultLanguageField);\r\n          if (result) {\r\n            return isValid;\r\n          } else {\r\n            return true;\r\n          }\r\n        } else {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n  private buildErrors(errors: ValidationError[]) {\r\n    const msg = new Set(ValidationUtils.createDetailedErrorMessage(errors));\r\n    const newMsg = [];\r\n    msg.forEach(v => {\r\n      newMsg.push(v);\r\n    });\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      message: newMsg.join('')\r\n    };\r\n  }\r\n  /** 自定义验证 */\r\n  customValidation(value, comparison: boolean): boolean {\r\n    return comparison;\r\n  }\r\n  private isEmptyValue(value: any) {\r\n    const result = value === '' || value === null || value === undefined\r\n      || value === '0001-01-01' || value === '0001-01-01 00:00:00' || value === '0001-01-01T00:00:00';\r\n    return result;\r\n  }\r\n  /** 必填项 */\r\n  required(value: any, isMultLanguageField?: boolean): boolean {\r\n    if (isMultLanguageField) {\r\n      const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      // 如果能够获取到当前语言，那么当前语言对应的输入不能为空\r\n      if (currentLanguage) {\r\n        return !!value[currentLanguage];\r\n      }\r\n      // 如果当前语言为空，那么必填要求至少有一个输入\r\n      // const allEmpty = Object.values(value).every((v: any) => !v || v.length < 1); // .filter((v: any) => !v || v.length < 1);\r\n      // if (allEmpty) {\r\n      //   return false;\r\n      // }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (!Object.keys(value).length) {\r\n        return false;\r\n      }\r\n      value = Object.values(value)[0];\r\n    }\r\n    // tslint:disable: max-line-length\r\n    return value !== '' && value !== null && value !== undefined\r\n      && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n  }\r\n\r\n  /** 判断两个值是否相等 */\r\n  equals(value: any, comparison: any): boolean {\r\n    return value === comparison;\r\n  }\r\n\r\n  /**\r\n   * 检查 value 是否不等于参照值\r\n   * @param value 要检查的值\r\n   * @param comparison 对比参照值\r\n   */\r\n  notEquals(value: any, comparison: any): boolean {\r\n    return value !== comparison;\r\n  }\r\n\r\n  /**\r\n   * 判断value 是否为数字\r\n   * @param value 要检查的值\r\n   * @param options 验证选项\r\n   */\r\n  isNumber(value: any, options: IsNumberOptions = {}): boolean {\r\n    if (value === Infinity || value === -Infinity) {\r\n      return options.allowInfinity;\r\n    }\r\n\r\n    if (Number.isNaN(value)) {\r\n      return options.allowNaN;\r\n    }\r\n\r\n    return Number.isFinite(value);\r\n  }\r\n\r\n  /** 判断value是否为整数 */\r\n  isInt(value: number) {\r\n    return Number.isInteger(value);\r\n  }\r\n\r\n  /** 是否为浮点类型 */\r\n  isFloat(value: any): boolean {\r\n    if (this.isNumber(value) || this.isNumberString(value)) {\r\n      return this.validatorJs.isFloat(value);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否布尔值\r\n   */\r\n  isBoolean(value: any): boolean {\r\n    return value instanceof Boolean || typeof value === 'boolean';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为字符串\r\n   */\r\n  isString(value: any): boolean {\r\n    return value instanceof String || typeof value === 'string';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期\r\n   */\r\n  isDate(value: any): boolean {\r\n    return value instanceof Date && !isNaN(value.getTime());\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期字符串\r\n   */\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return this.isString(value) && regex.test(value) && this.validatorJs.toDate(value);\r\n  }\r\n\r\n  /** 判断value 的长度是否在允许的最小值 和最大值之间 */\r\n  length(value: any, min: number, max?: number, isMultLanguageField?: boolean): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLength(value, min, max);\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最小值\r\n   * @param value 待检查的字符串\r\n   * @param min 最小长度\r\n   */\r\n  minLength(value: any, isMultLanguageField: boolean, min: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length < min);\r\n        if (hasInvalidLangs && hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length > min : true;\r\n      // }\r\n      // 如果无法获取当前语言，则只要有一种语言的输入长度大于最小长度即可。\r\n      // const hasValidLangs = Object.values(value).filter((v: any) => v && v.length > min);\r\n      // if (hasValidLangs.length > 0) {\r\n      //   return true;\r\n      // }\r\n      // return false;\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, min));\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最大值\r\n   * @param value 待检查的字符串\r\n   * @param max 最大长度\r\n   */\r\n  maxLength(value: any, isMultLanguageField: boolean, max: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length < max : true;\r\n      // }\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length > max);\r\n        if (hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object') {\r\n      for (const key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          const element = value[key];\r\n          if (typeof element === 'string' && !this.length(value[key], 0, max)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, 0, max));\r\n  }\r\n\r\n  /** 检查value的值是否在 最大值与最小值之间 */\r\n  range(value: number, isMultLanguageField: boolean, min: number, max: number): boolean {\r\n    return typeof value === 'number' && this.isNumber(min) && this.isNumber(max) && value >= min && value <= max;\r\n  }\r\n  /**\r\n   * 日期类型的值是否在某个区间\r\n   * @param value value\r\n   * @param min 最小值\r\n   * @param max 最大值\r\n   */\r\n  dateRange(value: any, isMultLanguageField: boolean, rule: string, type: string) {\r\n    // 2010~2020|04~05|03 11:00:00~05 12:00:00\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    if (type === 'maxValue' || type === 'maxDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 1)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    } else if (type === 'minValue' || type === 'minDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 0)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  private getRangeValue(value: string, position: 0 | 1, splitor = '~') {\r\n    return value.split(splitor)[position];\r\n  }\r\n  private isDateRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /(\\d{4}|\\d{2})/.test(value);\r\n  }\r\n  /**\r\n   * 是否年度区间\r\n   * @param value value\r\n   */\r\n  private isYearRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}~\\d{4}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为年月区间\r\n   * @param value value\r\n   */\r\n  private isYearMonthRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}-\\d{2}~\\d{4}-\\d{2}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为月或天的区间\r\n   * @param value value\r\n   */\r\n  private isMonthOrDayRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1}~[0|1|2|3]\\d{1}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为天+时间的区间\r\n   * @param value value\r\n   */\r\n  private isDayTimeRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}~[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is greater than second.\r\n   */\r\n  min(num: number, isMultLanguageField: boolean, min: number): boolean {\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * 最小值验证\r\n   */\r\n  minValue(num: number | string, isMultLanguageField: boolean, min: number | string): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if ((typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) || (typeof min === 'string' && min.match(/^(-?\\d+)(\\.\\d+)?$/g))) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(min);\r\n      return value.isGreaterThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is less than second.\r\n   */\r\n  max(num: number, isMultLanguageField: boolean, max: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * 最大值验证\r\n   */\r\n  maxValue(num: number | string, isMultLanguageField: boolean, max: number | string): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if ((typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) || (typeof max === 'string' && max.match(/^(-?\\d+)(\\.\\d+)?$/g))) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(max);\r\n      return value.isLessThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's after the specified date.\r\n   */\r\n  minDate(date: Date, isMultLanguageField: boolean, minDate: Date): boolean {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() >= minDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's before the specified date.\r\n   */\r\n  maxDate(date: Date, isMultLanguageField: boolean, maxDate: Date): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (date === null || date === undefined) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() <= maxDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if a string is a boolean.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isBooleanString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isBoolean(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is numeric.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isNumberString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isNumeric(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string contains the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  contains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string does not contain the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  notContains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && !this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is an email.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isEmail(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isEmail(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is valid JSON (note: uses JSON.parse).\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isJSON(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isJSON(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is lowercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isLowercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLowercase(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is uppercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isUppercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isUppercase(value);\r\n  }\r\n\r\n  /**\r\n   * 验证字符串是否包含非法字符\r\n   * @param value 验证的字符串\r\n   * @param someChars 非法字符。如：#￥%@$\r\n   */\r\n  exclude(value: string, isMultLanguageField: boolean, someChars: string): boolean {\r\n    const arrChar = someChars.split('');\r\n    let counter = 0;\r\n    arrChar.forEach(val => {\r\n      if (this.contains(value, isMultLanguageField, val)) {\r\n        counter++;\r\n      }\r\n    });\r\n\r\n    return counter === 0;\r\n  }\r\n\r\n  /**\r\n   * 自定义正则验证\r\n   * @param value 待验证的字符串\r\n   * @param pattern 正则表达式\r\n   */\r\n  matches(value: string, isMultLanguageField: boolean, pattern: any): boolean {\r\n    value = (value === null || value === undefined) ? '' : value.toString();\r\n    if (value === '') {\r\n      return true;\r\n    }\r\n    return this.validatorJs.matches(value, pattern);\r\n  }\r\n}\r\n","import { Subject, Observable, from } from 'rxjs';\r\nimport { ChangeSet } from '../changeset/change_set';\r\nimport { Modification, ModifyType } from '../changeset/types';\r\nimport { Entity } from './entity';\r\nimport { EntityFactory } from './entity_creator';\r\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\r\nimport { Validator } from './validator/validator';\r\nimport { ValidationResult } from './validator/types';\r\n\r\nexport interface IList<T> {\r\n  [index: number]: T;\r\n}\r\n/**\r\n * 实体集合列表\r\n */\r\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\r\n  public __type__ = 'EntityList';\r\n\r\n  // #region 私有属性\r\n  private originalData: any[] = [];\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private rawData: T[];\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private listChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private validator = new Validator<T>();\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 集合改变时触发(新增、行记录修改、删除)\r\n   * @event\r\n   */\r\n  public onListChanged = this.listChanged.asObservable();\r\n\r\n  /**\r\n   * 获取项集合\r\n   */\r\n  public get items(): T[] {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 列表变更集\r\n   */\r\n  public get changes() {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 获取指定索引处的值\r\n   */\r\n  [index: number]: T;\r\n\r\n  /**\r\n   * 迭代器\r\n   */\r\n  *[Symbol.iterator](): Iterator<T> {\r\n    yield* this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据集合\r\n   * @param type 集合中的实体类型\r\n   */\r\n  constructor(data?: any[], type?: ClassType) {\r\n    this.clear();\r\n    if (data) {\r\n      // this.loadEntities(data);\r\n      data.forEach(item => {\r\n        this.initEntity(EntityFactory(type, item));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /** 加载实体列表 */\r\n  public loadEntities(entities: T[]) {\r\n    this.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.initEntity(entity);\r\n    });\r\n\r\n    // 发送Load变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: entities,\r\n      preValue: undefined,\r\n      type: ModifyType.Load,\r\n      target: this\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.rawData = [];\r\n    this.originalData = [];\r\n  }\r\n\r\n  /**\r\n   * 添加实体对象到集合中，并返回新加的对象\r\n   * @param entity 实体对象\r\n   * @param isCloned 克隆\r\n   */\r\n  public appendNew(entity: T, isCloned: boolean = false): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    if (isCloned === true) {\r\n      changeItem.type = ModifyType.Clone;\r\n    }\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param entity 实体\r\n   * @param position 插入位置\r\n   */\r\n  public insert(entity: T, position?: 1 | -1): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Insert,\r\n      position: position,\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(entity: T): void {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   */\r\n  public appendEntities(entities: T[]): void {\r\n    const newEntites = entities.map((entity: T) => {\r\n      return this.initEntity(entity, true);\r\n    });\r\n    const changeItem = {\r\n      path: [],\r\n      value: newEntites,\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\r\n   * @param primaryId 主键ID\r\n   */\r\n  public remove(primaryId: string): boolean {\r\n    const total = this.count();\r\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\r\n      return entity.primaryValue === primaryId;\r\n    });\r\n    if (indexToRemove === -1) {\r\n      return false;\r\n    }\r\n    const entityToRemove = this.rawData[indexToRemove];\r\n    this.rawData.splice(indexToRemove, 1);\r\n\r\n    // 删除变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\r\n      preValue: undefined,\r\n      type: ModifyType.Remove\r\n    };\r\n\r\n    this.updateIndex(total);\r\n    this.setChanges(changeItem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 从集合中获取指定ID值的实体对象\r\n   * @param id 主键值\r\n   */\r\n  public get(id: string) {\r\n    return this.items.find(item => {\r\n      return item.primaryValue === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将变更记录添加到集合变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(modinfo: Modification) {\r\n\r\n    // 向app层发送的变更\r\n    this.listChanged.next(modinfo);\r\n\r\n    // 构造向changeSet中添加的chagne\r\n    const change = Object.assign({}, modinfo);\r\n    if ((modinfo.type === ModifyType.Add || modinfo.type === ModifyType.Insert || modinfo.type === ModifyType.Clone) && modinfo.value[0] instanceof Entity) {\r\n      change.value = [modinfo.value[0].data];\r\n    }\r\n    this.changeSet.append(change);\r\n  }\r\n\r\n  /** 集合总记录数 */\r\n  public count() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /**\r\n   * 获取实体对象的索引值\r\n   */\r\n  public indexOf(entity: T): number {\r\n    return this.items.indexOf(entity);\r\n  }\r\n\r\n  /**\r\n   * 计算集合中某个属性的总和\r\n   * @param propertyName 属性名称\r\n   */\r\n  public sum(propertyName: string): number {\r\n    if (this.count() === 0) {\r\n      return 0;\r\n    }\r\n    return this.items.reduce((val, curr: T) => {\r\n      return val + curr[propertyName];\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * 集合数据验证\r\n   */\r\n  public validate(): Observable<ValidationResult> {\r\n    const propertyName = this.getPropertyName();\r\n    return from(this.validator.validate(this[PARENT_CLASS], propertyName));\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用toJSON方法代替\r\n   * @deprecated\r\n   */\r\n  public toJson() {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    this.items.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public toArray(): T[] {\r\n    return this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 私有方法\r\n\r\n  /**\r\n   * 实体初始化\r\n   * @param entity 实体\r\n   */\r\n  private initEntity(entity: T, isNewEntity: boolean = false): T {\r\n    entity[PARENT_CLASS] = this;\r\n    entity[PARENT_PATH] = this[PARENT_PATH];\r\n    entity.onValueChanged.subscribe((v: Modification) => {\r\n      const path = v.path;\r\n      const value = v.value;\r\n      const preValue = v.preValue;\r\n      const operator = v.type;\r\n      const subChanges = { path, value, preValue, type: operator };\r\n      if (v.changeSetValue !== undefined) {\r\n        subChanges['changeSetValue'] = v.changeSetValue;\r\n      }\r\n      this.setChanges(subChanges);\r\n    });\r\n    // TODO: 添加数据验证逻辑代码\r\n    const newLength = this.rawData.push(entity);\r\n    this[newLength - 1] = entity;\r\n    if (!isNewEntity) {\r\n      this.originalData.push(entity.toJSON());\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 更新索引\r\n   * @param total 总记录数\r\n   */\r\n  private updateIndex(total: number) {\r\n    for (let i = 0; i < total; i++) {\r\n      delete this[i];\r\n    }\r\n    this.rawData.forEach((entity, index) => {\r\n      this[index] = entity;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取属性名称\r\n   */\r\n  private getPropertyName() {\r\n    const path = this[PARENT_PATH];\r\n    if (path && path.length) {\r\n      const name = path[path.length - 1];\r\n      return name;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\n\r\n// export type ClassType = new (...args: any[]) => any;\r\nexport const BigNumberType = 'BigNumber';\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  pageIndex: number;\r\n  total: number;\r\n}\r\nexport interface ResultData {\r\n  data?: any[];\r\n  pagination?: Pagination;\r\n}\r\n\r\nexport enum DataChangeType { Add, Delete }\r\n\r\nexport interface DataChange {\r\n  /**\r\n   * 变更路径，主要针对带从表的情况\r\n   */\r\n  fpath?: string;\r\n  dataId: string;\r\n  changeType: DataChangeType;\r\n  [prop: string]: any;\r\n}\r\nexport enum HttpMethod {\r\n  GET = 'GET',\r\n  POST = 'POST',\r\n  PUT = 'PUT',\r\n  DELETE = 'DELETE'\r\n}\r\n\r\n/**\r\n * 后端消息\r\n */\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace BackEndMessage {\r\n  /**\r\n   * 消息级别\r\n   */\r\n  export enum Level {\r\n    Error = 'Error',\r\n    Info = 'Info',\r\n    Warning = 'Warning'\r\n  }\r\n  /**\r\n   * 后端消息对象\r\n   */\r\n  export interface IMessage {\r\n    context: IMessageContext;\r\n    bizMessages: IBizMessage[];\r\n  }\r\n  /**\r\n   * 消息位置\r\n   */\r\n  export interface ILocation {\r\n    /**\r\n     * 表名\r\n     */\r\n    nodeCode: string;\r\n    /**\r\n     * 对应的行\r\n     */\r\n    rows?: string[];\r\n    /**\r\n     * 对应的列\r\n     */\r\n    columns?: string[];\r\n  }\r\n  /**\r\n   * 消息结构\r\n   */\r\n  export interface IBizMessage {\r\n    /**\r\n     * 消息位置\r\n     */\r\n    location?: ILocation;\r\n    /**\r\n     * 消息内容\r\n     */\r\n    message: string;\r\n    /**\r\n     * 消息级别\r\n     */\r\n    level: Level;\r\n  }\r\n  /**\r\n   * 消息上下文\r\n   */\r\n  export interface IMessageContext {\r\n    ns: string;\r\n    appContext: AppContext;\r\n  }\r\n  /**\r\n   * 消息\r\n   * @description 接口执行成功，但有info/warning级别的消息\r\n   */\r\n  export class Message implements IMessage {\r\n    public context: IMessageContext;\r\n    public bizMessages: IBizMessage[];\r\n    constructor(bizMessages: IBizMessage[], context: IMessageContext) {\r\n      this.bizMessages = bizMessages;\r\n      this.context = context;\r\n    }\r\n  }\r\n  /**\r\n   * 消息处理程序\r\n   */\r\n  export interface IBackEndMessageHandler {\r\n    handle(message: IMessage, context?: any);\r\n  }\r\n}\r\n\r\nexport interface IMessageService {\r\n  /**\r\n   * 提示\r\n   * @param message\r\n   */\r\n  info(message: string);\r\n  /**\r\n   * 错误\r\n   * @param message\r\n   */\r\n  error(message: string);\r\n  /**\r\n   * 警告\r\n   * @param message\r\n   */\r\n  warning(message: string);\r\n}\r\n\r\nexport interface INotifyService {\r\n  /**\r\n   * 提示\r\n   * @param message\r\n   * @param options\r\n   */\r\n  info(message: string, options?: { [prop: string]: any });\r\n  /**\r\n   *\r\n   * @param content 成功提示\r\n   * @param options\r\n   */\r\n  success(content: string, options?: { [prop: string]: any });\r\n  /**\r\n   * 警告提示\r\n   * @param content\r\n   */\r\n  warning(content: string);\r\n  /**\r\n   * 错误提示\r\n   * @param content\r\n   * @param options\r\n   */\r\n  error(content: string, options?: { [prop: string]: any });\r\n}\r\n\r\nexport enum RunMode {\r\n  compatible = 'compatible',\r\n  highSpeed = 'highSpeed'\r\n}\r\n/**\r\n * 控制器运行模式，compatible | highSpeed\r\n */\r\nexport const DEVKIT_RUN_MODE = new InjectionToken<RunMode>('@farris/devkit_run_mode');\r\nexport interface IDisposable {\r\n  dispose(args?: IDisposeOptions);\r\n}\r\n/**\r\n * 组件类型\r\n */\r\nexport enum ComponentType {\r\n  farrisDataGridComponent = 'farrisDatagridComponent',\r\n  farrisTreeTalbeComponent = 'farrisTreeTalbeComponent',\r\n  primengTreeComponent = 'primengTreeComponent',\r\n  kendoGridComponent = 'kendoGridComponent'\r\n}\r\n\r\nexport type ChangeSetPolicy = 'entire' | 'valid';\r\nexport enum DestroyOpportunity {\r\n  AppContextDestroy = 'AppContextDestroy',\r\n  MenuOrAppClose = 'MenuOrAppClose'\r\n}\r\nexport interface IDisposeOptions {\r\n  opportunity: DestroyOpportunity;\r\n}\r\n\r\n","import { UserSettings } from \"./types\";\r\nexport class UserSettingsService {\r\n  private static userSettings: UserSettings = null;\r\n  private static timeZone: string = undefined;\r\n  private static timeZoneOffset: number = undefined;\r\n  public static setUserSettings(userSettings: UserSettings) {\r\n    this.userSettings = userSettings;\r\n    this.timeZone = undefined;\r\n    this.timeZoneOffset = undefined;\r\n  }\r\n  /**\r\n   * 获取用户配置的时区\r\n   */\r\n  public static getTimeZone() {\r\n    if (this.timeZone !== undefined) {\r\n      return this.timeZone;\r\n    }\r\n    const timeZone = this.userSettings && this.userSettings.timeZone || null;\r\n    this.timeZone = timeZone;\r\n    return timeZone;\r\n  }\r\n  public static getTimeZoneOffset() {\r\n    if (this.timeZoneOffset !== undefined) {\r\n      return this.timeZoneOffset;\r\n    }\r\n    const timeZoneOffset = this.userSettings && this.userSettings.timeZoneOffset || null;\r\n    this.timeZoneOffset = timeZoneOffset;\r\n    return timeZoneOffset;\r\n  }\r\n}","import moment from 'moment';\r\n//import { timezones } from './time_zones';\r\n//import { Timezone } from './types';\r\nexport class ZonedTime {\r\n  /**\r\n   * 将指定时区的时间转换为UTC时区时间（带时区）\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   */\r\n  // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment.tz(date, timeZone).utc().format();\r\n  // }\r\n  /**\r\n   * 将带时区的时间转换为指定时区的时间字符串\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   * @param format 时间格式\r\n   */\r\n  // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment(date).tz(timeZone).format(format);\r\n  // }\r\n  /**\r\n   * 获取标准时区名称\r\n   * @param tz 时区\r\n   */\r\n  // public static getStandardTimezoneName(tz: string) {\r\n  //   let momentZone = moment.tz.zone(tz);\r\n  //   let standardTimezone = tz;\r\n  //   if (!momentZone) {\r\n  //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));\r\n  //     standardTimezone = timezone && timezone.utc[0] || null;\r\n  //   }\r\n  //   return standardTimezone;\r\n  // }\r\n\r\n  public static zonedTimeToSpecialTimeZoneOffsetTimeString(date: Date | string | number, offset: number = 0, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    const utcTime = moment(date).utc();\r\n    const offsetMinutes = offset * 60;\r\n    const result = utcTime.add(offsetMinutes, 'm');\r\n    return result.format(format);\r\n  }\r\n  public static timeZoneOffsetTimeToUtcTimeString(date: Date | string | number, offset: number, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    return moment(date).utcOffset(offset, true).toISOString();\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * 路由参数服务\r\n */\r\n@Injectable()\r\nclass RouterParamService {\r\n\r\n  /**\r\n   * 获取参数\r\n   */\r\n  public getParams(url: string): any {\r\n    const allParams = this.getAllParams();\r\n    return allParams[url] || {};\r\n  }\r\n\r\n  /**\r\n   * 设置参数\r\n   */\r\n  public setParams(url: string, params: any) {\r\n    const allParams = this.getAllParams();\r\n    allParams[url] = params;\r\n    this.setAllParams(allParams);\r\n  }\r\n\r\n  /**\r\n   * 清空参数\r\n   */\r\n  public clearParams() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取全部参数\r\n   */\r\n  public getAllParams(): any {\r\n    const allParamsJson = window.sessionStorage.getItem('ROUTER_PARAMS') || '{}';\r\n    const allParams = JSON.parse(allParamsJson);\r\n    return allParams;\r\n  }\r\n\r\n  /**\r\n   * 设置所有的参数\r\n   */\r\n  public setAllParams(allParams: any): void {\r\n    allParams = allParams || {};\r\n    const allParamsJson = JSON.stringify(allParams);\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', allParamsJson);\r\n  }\r\n\r\n  /**\r\n   * 清空所有参数\r\n   */\r\n  public clearAllParams() {\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', '{}');\r\n  }\r\n}\r\n\r\nexport { RouterParamService };\r\n","/**\r\n * 变更相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 绑定数据变更\r\n */\r\nexport interface Change {\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ChangeType;\r\n\r\n  /**\r\n   * 变更路径\r\n   */\r\n  path: string[];\r\n\r\n  /**\r\n   * 变更后的值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 变更前的值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 错误信息\r\n   */\r\n  errors?: any;\r\n\r\n  /**\r\n   * 验证后回调，会将验证结果传入\r\n   */\r\n  cb?: Function;\r\n\r\n  /**\r\n   * 是否提交过，为true时开启输入时验证\r\n   */\r\n  isSubmitted?: boolean;\r\n\r\n  /**\r\n   * 在grid中使用，如果存在id，则将errors在form中以\r\n   * {\r\n   *  [id]: errors\r\n   * }\r\n   * 的形式保存一份\r\n   */\r\n  id?: string;\r\n\r\n  isUdt?: boolean;\r\n\r\n  isGrid?: boolean;\r\n  /**\r\n   * 新增\r\n   */\r\n  create?: boolean;\r\n  /**\r\n   * 复制\r\n   */\r\n  isCloned?: boolean;\r\n  /**\r\n   * 是否分层加载场景\r\n   */\r\n  isTreeNodeLoadScene?: boolean;\r\n  /**\r\n   * 详细信息\r\n   */\r\n  detail?: { [prop: string]: any };\r\n  /**\r\n   * 经过bindingList转发\r\n   */\r\n  isBindingListTransmited?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 绑定数据变更类型\r\n */\r\nexport enum ChangeType {\r\n  Update = 'Update',\r\n  Load = 'Load',\r\n  Append = 'Append',\r\n  Remove = 'Remove',\r\n  Swap = 'Swap',\r\n  SelectionChanged = 'SelectionChanged',\r\n  ValueChanged = 'ValueChanged',\r\n  UpdateErrors = 'UpdateErrors',\r\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\r\n  /**\r\n   * 分页信息变化\r\n   */\r\n  PaginationInfoChange = 'PaginationInfoChange'\r\n}\r\n\r\n/**\r\n * 视图变更\r\n */\r\nexport interface ViewChange {\r\n  type: ViewChangeType;\r\n  path: string[];\r\n  value: any;\r\n  preValue?: any;\r\n  context?: any;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 视图变更类型\r\n */\r\nexport enum ViewChangeType {\r\n  ValueChanged\r\n}\r\n\r\n/**\r\n * Form值变化事件\r\n */\r\nexport interface FormValueChange {\r\n  path: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  command: string; // 监听命令\r\n  entityChanged: boolean; // 实体是否已改变\r\n}\r\n\r\n/**\r\n * 实体值变化事件\r\n */\r\nexport interface EntityValueChange {\r\n  paths: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  changed: boolean; // 实体是否已改变\r\n  [prop: string]: any;\r\n}\r\n","/**\r\n * 绑定属性相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 属性类型\r\n */\r\nexport enum BindingPropertyType {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 对象类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List',\r\n\r\n  /**\r\n   * 动态类型\r\n   */\r\n  Dynamic = 'Dynamic'\r\n}\r\n\r\n\r\n/**\r\n * 绑定属性\r\n */\r\nexport interface BindingProperty {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type: BindingPropertyType;\r\n\r\n  /**\r\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\r\n   */\r\n  entityType?: any;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  isPrimaryKey?: boolean;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n}\r\n","import { Type } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\n\r\n/**\r\n * 属性工具类\r\n */\r\nclass PropertyUtil {\r\n\r\n  /**\r\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\r\n   * @param  entityType 实体类型\r\n   * @returns 绑定属性集合\r\n   */\r\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\r\n    const properties = [];\r\n\r\n    // Plain\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\r\n      const ngFieldProperty = ngFieldProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Plain,\r\n        isPrimaryKey: ngFieldProperty.primary,\r\n        isForeignKey: ngFieldProperty.foreign,\r\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\r\n      });\r\n    });\r\n\r\n    // Object\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\r\n      const ngObjectProperty = ngObjectProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Object,\r\n        entityType: ngObjectProperty.type\r\n      });\r\n    });\r\n\r\n    // List\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\r\n      const ngListProperty = ngListProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.List,\r\n        entityType: ngListProperty.type\r\n      });\r\n    });\r\n\r\n    // Dynamics\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\r\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Dynamic,\r\n        entityType: ngDynamicProperty.type\r\n      });\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\r\n    const properties = [];\r\n    Object.keys(dynamicData).forEach((propertyName: string) => {\r\n      if (dynamicData.hasOwnProperty(propertyName)) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Dynamic,\r\n            entityType: null\r\n          });\r\n        } else {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Plain,\r\n            isPrimaryKey: false,\r\n            isForeignKey: false\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return properties;\r\n  }\r\n  /**\r\n   * 根据属性名获取属性\r\n   */\r\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\r\n    const targetProperty = properties.find((property: BindingProperty) => {\r\n      return property.name === propertyName;\r\n    });\r\n    return targetProperty;\r\n  }\r\n\r\n  /**\r\n   * 获取实体主键名\r\n   * @param properties 属性集合\r\n   * @returns 主键名\r\n   */\r\n  static getPrimaryKey(properties: BindingProperty[]): string {\r\n\r\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\r\n    const primaryProperty = properties.find((property: BindingProperty) => {\r\n      return property.isPrimaryKey === true;\r\n    });\r\n    return primaryProperty ? primaryProperty.name : '';\r\n  }\r\n\r\n}\r\n\r\nexport { PropertyUtil };\r\n","import { Type } from \"@angular/core\";\r\nimport { ClassType } from \"../entity\";\r\nimport { BindingList } from \"./binding_list\";\r\nimport { BindingProperty } from \"./binding_property\";\r\n/**\r\n * BindingListTypeFactory\r\n */\r\nexport class BindingListTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingList>> = new Map<BindingProperty[], Type<BindingList>>();\r\n  public static create(bindingProperties: BindingProperty[]) {\r\n    const bindingListType = this.getType(bindingProperties);\r\n    const bindingList = new bindingListType(bindingProperties);\r\n    return bindingList;\r\n  }\r\n  /**\r\n   * 创建BindingList模板类\r\n   * @param bindingProperties \r\n   * @returns \r\n   */\r\n  private static createType(bindingProperties: BindingProperty[]): ClassType<BindingList> {\r\n    const bindingListType = class BindingListType extends BindingList {\r\n      constructor(properties: BindingProperty[]) {\r\n        super(properties);\r\n      }\r\n    }\r\n    const bindingListTypePrototype = bindingListType.prototype;\r\n    this.extendProperties(bindingListTypePrototype, bindingProperties);\r\n    return bindingListType;\r\n  }\r\n  /**\r\n   * 扩展BindingList模板类属性\r\n   * @param bindingListPrototype bindingList原型\r\n   * @param bindingProperties 属性数组\r\n   */\r\n  private static extendProperties(bindingListPrototype: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingListPrototype, propertyName, {\r\n        get: function () {\r\n          return this.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param bindingProperties bindingList属性\r\n   * @returns \r\n   */\r\n  private static getType(bindingProperties: BindingProperty[]): Type<BindingList> {\r\n    if (this.provider.has(bindingProperties)) {\r\n      return this.provider.get(bindingProperties);\r\n    }\r\n    const bindingListType = this.createType(bindingProperties);\r\n    this.provider.set(bindingProperties, bindingListType);\r\n    return bindingListType;\r\n  }\r\n}","/**\r\n * 绑定列表工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListTypeFactory } from './binding_list_type_factory';\r\nimport { BindingProperty } from './binding_property';\r\n\r\n/**\r\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\r\n *\r\n * **示例代码**\r\n * ```ts\r\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\r\n * const deptList = BindingListFactory.create(deptProperties);\r\n * ```\r\n */\r\nclass BindingListFactory {\r\n\r\n  /**\r\n   * 创建BindingList实例，并扩展其属性\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static create(bindingProperties: BindingProperty[]): BindingList {\r\n    // const bindingList = new BindingList(bindingProperties);\r\n    // this.extendProperties(bindingList, bindingProperties);\r\n    const bindingList = BindingListTypeFactory.create(bindingProperties);\r\n    return bindingList;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\r\n   * @param bindingList       要扩展的绑定列表\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingList, propertyName, {\r\n        get: () => {\r\n          return bindingList.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingListFactory };\r\n\r\n","import { Type } from '@angular/core';\r\n//import { Map as ImmutableMap } from 'immutable';\r\nimport { Change } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { ClassType } from '../entity';\r\nimport { BindingObject } from './binding_object';\r\nimport { TranslateService } from '../i18n/translate_service';\r\n// import { BindingObjectFactory } from './binding_object_factory';\r\n\r\n/**\r\n * BindingObjectTypeFactory\r\n */\r\nexport class BindingObjectTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingObject>> = new Map<BindingProperty[], Type<BindingObject>>();\r\n  /**\r\n   * 创建BindingObject\r\n   * @param properties\r\n   * @returns\r\n   */\r\n  public static create(properties: BindingProperty[]) {\r\n    const bindingObjectType = this.getType(properties);\r\n    return new bindingObjectType();\r\n  }\r\n  /**\r\n   * 创建原型类型\r\n   * @param properties\r\n   * @returns\r\n   */\r\n  private static createType(properties: BindingProperty[]): ClassType<BindingObject> {\r\n    // 继承原绑定对象所有属性\r\n    const bindingObjectType = class BindingObjectType extends BaseBindingObject {\r\n      constructor() {\r\n        super();\r\n        // this.innerValues = ImmutableMap(Object.assign({}, data));\r\n\r\n      }\r\n      //#endregion load\r\n\r\n      /*\r\n      public load(data: any) {\r\n        // data包含多语字段\r\n        this.innerValues = ImmutableMap(Object.assign({}, data));\r\n        this.properties.forEach((property: BindingProperty) => {\r\n          if (property.type === BindingPropertyType.List) {\r\n            this.loadLists(property);\r\n          } else if (property.type === BindingPropertyType.Object) {\r\n            this.loadObjects(property);\r\n          } else if (property.type === BindingPropertyType.Dynamic) {\r\n            this.loadDynamicObjects(property);\r\n          } else {\r\n            this.loadFields(property);\r\n          }\r\n        });\r\n      }\r\n      private loadFields(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const dataField = property.dataField || propertyName;\r\n        let value;\r\n        if (property.enableMultiLangInput) {\r\n          value = this.getValue(dataField, false);\r\n        } else {\r\n          value = this.getValue(propertyName);\r\n        }\r\n        this[propertyName] = value;\r\n      }\r\n      private loadLists(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const bindingList: BindingList = this[key];\r\n        if (bindingList) {\r\n          const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map(item => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n        }\r\n      }\r\n      private loadObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const value = this.getValue(propertyName) || {};\r\n        const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n        const bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n        this[key] = bindingObject;\r\n\r\n      }\r\n      private loadDynamicObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const value = this.getValue(propertyName) || {};\r\n        const dynamicObject = BindingObjectFactory.createDynamicBindingObject(value);\r\n        Object.defineProperty(this, propertyName, {\r\n          value: dynamicObject\r\n        });\r\n      }*/\r\n      //#endregion\r\n    };\r\n    // 获取主键\r\n    const primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n    // 设置主键\r\n    bindingObjectType.prototype.primaryKey = primaryKey;\r\n    bindingObjectType.prototype.properties = properties;\r\n    // 将属性扩展到原型对象上\r\n    this.extendProperties(bindingObjectType.prototype, properties);\r\n    return bindingObjectType;\r\n  }\r\n  /**\r\n   * 扩展原型属性\r\n   * @param typePrototype\r\n   * @param properties\r\n   */\r\n  private static extendProperties(typePrototype: BaseBindingObject, properties: BindingProperty[]) {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(typePrototype, property);\r\n      } else {\r\n        this.extendPlainProperty(typePrototype, property);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型列表属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendListProperty(typePrototype: BaseBindingObject, property: BindingProperty) {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingList = this[key];\r\n        if (!bindingList) {\r\n          bindingList = BindingListFactory.create(childListProperties);\r\n          this[key] = bindingList;\r\n          // 加载数据\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map((item) => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n          // 指定子List的parent、监听子List的changes事件\r\n          bindingList.parent = this;\r\n          bindingList.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            change.isBindingListTransmited = true;\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingList;\r\n      },\r\n      set: function (bindingList: BindingList) {\r\n        this[key] = bindingList;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型对象属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingObject = this[key];\r\n        if (!bindingObject) {\r\n          const value = this.getValue(propertyName) || {};\r\n          bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n          this[key] = bindingObject;\r\n          // 指定子Object的parent、监听子Object的changes事件\r\n          bindingObject.parent = this;\r\n          bindingObject.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingObject;\r\n      },\r\n      set: function (value: BaseBindingObject) {\r\n        this[key] = value;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型动态属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendDynamicObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    // Object.defineProperty(typePrototype, propertyName, {\r\n    //   value: null\r\n    // });\r\n    typePrototype[propertyName] = null;\r\n  }\r\n  /**\r\n   * 扩展原型简单属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendPlainProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        if (property.enableMultiLangInput === true) {\r\n          let value = this.getValue(propertyName, false);\r\n          if (!value) {\r\n            value = this.getValue(propertyName, false);\r\n            const langCode = TranslateService.getCurrentLanguage();\r\n            return { [langCode]: value };\r\n          }\r\n          return value;\r\n        } else {\r\n          const value = this.getValue(propertyName);\r\n          return value;\r\n        }\r\n      },\r\n      set: function (value: any) {\r\n        const oldValue = this.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        this.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param properties bindingList属性\r\n   * @returns\r\n   */\r\n  private static getType(properties: BindingProperty[]): Type<BindingObject> {\r\n    if (this.provider.has(properties)) {\r\n      return this.provider.get(properties);\r\n    }\r\n    const bindingObjectType = this.createType(properties);\r\n    this.provider.set(properties, bindingObjectType);\r\n    return bindingObjectType;\r\n  }\r\n}\r\n","/**\r\n * 绑定对象工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Change } from './changes';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingObjectTypeFactory } from './binding_object_type_factory';\r\n\r\n/**\r\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\r\n *\r\n * **扩展属性处理**\r\n *\r\n * 对于要扩展的属性（BindingProperty）有三种处理：\r\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\r\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\r\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\r\n *\r\n * **示例代码**\r\n *\r\n * ```ts\r\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\r\n * const empBindingObject = BindingObjectFactory.create(properties);\r\n * ```\r\n */\r\nclass BindingObjectFactory {\r\n\r\n  /**\r\n   * 创建BindingObject实例\r\n   * @param properties 要扩展的属性集合\r\n   * @returns 带扩展属性的空BindingObject对象\r\n   */\r\n  static create(properties: BindingProperty[], fromEntity?: boolean): BindingObject {\r\n    const bindingObjectType = BindingObjectTypeFactory.create(properties/*, data*/);\r\n    bindingObjectType.fromEntity = fromEntity;\r\n    return bindingObjectType;\r\n  }\r\n\r\n  static createDynamicBindingObject(data: any): BindingObject {\r\n    const properties = PropertyUtil.getDynamicProperties(data);\r\n    const object = BindingObjectTypeFactory.create(properties/*, data*/);//new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * 扩展属性绑定对象的属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 绑定属性集合\r\n   */\r\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(object, property);\r\n      } else {\r\n        this.extendPlainProperty(object, property);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展列表类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 列表类型的绑定属性集合\r\n   */\r\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childList = BindingListFactory.create(childListProperties);\r\n\r\n    // 指定子List的parent、监听子List的changes事件\r\n    childList.parent = object;\r\n    childList.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      change.isBindingListTransmited = true;\r\n      object.changes.next(change);\r\n    });\r\n\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childList\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展对象类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 对象类型的绑定属性集合\r\n   */\r\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childObject = this.create(childObjectProperties);\r\n\r\n    // 指定子Object的parent、监听子Object的changes事件\r\n    childObject.parent = object;\r\n    childObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childObject\r\n    });\r\n  }\r\n\r\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    object[propertyName] = null;\r\n  }\r\n\r\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\r\n    dynamicObject.parent = object;\r\n    dynamicObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n    Object.defineProperty(object, propertyName, {\r\n      value: dynamicObject\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展简单类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 简单类型的绑定属性集合\r\n   */\r\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(object, propertyName, {\r\n      get: () => {\r\n        return object.getValue(propertyName);\r\n      },\r\n      set: (value: any) => {\r\n        const oldValue = object.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        object.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { BindingObjectFactory };\r\n","import { Type } from '@angular/core';\r\nimport { makePropDecorator, makeDecorator } from '../metadata/index';\r\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\r\nimport { Form } from './form';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { ValidateRule } from '../entity';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgValidateForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_VALIDATE_FORM = 'NgValidateForm';\r\n\r\n/**\r\n * 表单描述\r\n */\r\nexport interface NgValidateForm {\r\n\r\n  /**\r\n   * Form名称，用于显示验证信息\r\n   */\r\n  formGroupName: string;\r\n  /**\r\n   * 是否启用验证\r\n   */\r\n  enableValidate: boolean;\r\n}\r\n\r\n/**\r\n * 表单装饰器\r\n */\r\nexport interface NgValidateFormDecorator {\r\n  (obj?: NgValidateForm): any;\r\n  new(obj?: NgValidateForm): any;\r\n}\r\n\r\n/**\r\n * 表单装饰器工厂\r\n */\r\nexport function NgValidateForm(options: NgValidateForm) {\r\n  const decoratorFactory = makeDecorator(NG_VALIDATE_FORM, (obj: NgValidateForm) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_CHILD_FORM = 'NgChildForm';\r\n\r\n/**\r\n * 子表单描述\r\n */\r\nexport interface NgChildForm {\r\n\r\n  /**\r\n   * 子表单类型\r\n   */\r\n  formType: Type<Form>;\r\n}\r\n\r\n/**\r\n * 子表单装饰器\r\n */\r\nexport interface NgChildFormDecorator {\r\n  (obj?: NgChildForm): any;\r\n  new(obj?: NgChildForm): any;\r\n}\r\n\r\n/**\r\n * 子表单装饰器工厂\r\n */\r\nexport const NgChildForm: NgChildFormDecorator =\r\n  makePropDecorator(NG_CHILD_FORM, (obj: NgChildForm) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildFormArray\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单数组装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_CHILD_FORM_ARRAY = 'NgChildFormArray';\r\n\r\n/**\r\n * 子表单数组描述\r\n */\r\nexport interface NgChildFormArray {\r\n\r\n  /**\r\n   * 子表单数组内子表单的类型\r\n   */\r\n  formType: Type<Form>;\r\n\r\n  /**\r\n   * 多行记录\r\n   */\r\n  multi?: boolean;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器\r\n */\r\nexport interface NgFormArrayDecorator {\r\n  (obj?: NgChildFormArray): any;\r\n  new(obj?: NgChildFormArray): any;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器工厂\r\n */\r\nexport const NgChildFormArray: NgFormArrayDecorator =\r\n  makePropDecorator(NG_CHILD_FORM_ARRAY, (obj: NgChildFormArray) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgFormControl\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 表单控件装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_FORM_CONTROL = 'NgFormControl';\r\n\r\n/**\r\n * 表单控件描述\r\n */\r\nexport interface NgFormControl {\r\n  /**\r\n   * 控件标识\r\n   */\r\n  id?: string;\r\n  /**\r\n   * 控件名称\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * 默认控件名称(多语环境翻译无值时使用)\r\n   */\r\n  defaultI18nValue?: string;\r\n\r\n  /**\r\n   * 绑定字段路径\r\n   */\r\n  binding?: string;\r\n\r\n  /**\r\n   * 值转换器\r\n   */\r\n  valueConverter?: ControlValueConverter;\r\n\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * 控件值更新时机\r\n   */\r\n  updateOn?: 'change' | 'blur' | 'submit';\r\n\r\n  /**\r\n   * 同步验证器\r\n   */\r\n  validators?: ValidatorFn | ValidatorFn[] | null;\r\n\r\n  /**\r\n   * 异步验证器\r\n   */\r\n  asyncValidatorFn?: AsyncValidatorFn | AsyncValidatorFn | null;\r\n\r\n  /**\r\n   * 验证规则\r\n   */\r\n  validRules?: ValidateRule | ValidateRule[] | null;\r\n\r\n  /**\r\n   * 值改变前监听器\r\n   */\r\n  valueChanging?: string;\r\n  /**\r\n   * 值改变后监听器\r\n   */\r\n  valueChanged?: string;\r\n  /**\r\n   * 大数\r\n   */\r\n  bigNumber?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器\r\n */\r\nexport interface NgFormControlDecorator {\r\n  (obj?: NgFormControl): any;\r\n  new(obj?: NgFormControl): any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器工厂\r\n */\r\nexport const NgFormControl: NgFormControlDecorator =\r\n  makePropDecorator(NG_FORM_CONTROL, (obj: NgFormControl) => obj);\r\n","/**\r\n * 数据路径处理\r\n */\r\nclass BindingPathConverter {\r\n\r\n  /**\r\n   * (BindingPathString | BindingPathArray) => BindingPathArray\r\n   * @param bindingPath BindingPath的字符串或者数组格式\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\r\n    let bindingPathArray: string[];\r\n    if (typeof bindingPath === 'string') {\r\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n        return part !== '';\r\n      });\r\n      return bindingPathArray;\r\n    } else {\r\n      bindingPathArray = bindingPath.concat([]);\r\n    }\r\n\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * BindingPathArray => BindingPathString\r\n   */\r\n  public static toBindingPathString(bindingPathArray: string[]): string {\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathConverter };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath比较器\r\n */\r\nclass BindingPathComparer {\r\n\r\n  /**\r\n   * 是否相等\r\n   */\r\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\r\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\r\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\r\n\r\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\r\n      return srcPathItem === dstPathArray[srcPathIndex];\r\n    });\r\n\r\n    return isEqual;\r\n  }\r\n\r\n  /**\r\n   * 是否是父路径\r\n   */\r\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\r\n\r\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\r\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\r\n\r\n    // 长度差1个\r\n    if (childPathArray.length !== parentPathArray.length + 1) {\r\n      return;\r\n    }\r\n\r\n    return this.isAncestor(childPath, parentPath);\r\n  }\r\n\r\n  /**\r\n   * 是否是祖先路径\r\n   */\r\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\r\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\r\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\r\n\r\n    if (descendantPath.length <= ancestorPathArray.length) {\r\n      return false;\r\n    }\r\n\r\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\r\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\r\n    });\r\n\r\n    return isAncestor;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingPathComparer };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath遍历器\r\n */\r\nclass BindingPathTraverser {\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return bindingPathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    bindingPathArray.pop();\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathTraverser };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil\r\n} from '../../binding-data/index';\r\nimport { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * EntityPath转换器\r\n */\r\nclass EntityPathConverter {\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityPathConverter };\r\n","\r\n/**\r\n * 实体路径比较器\r\n */\r\nclass EntityPathComparer {\r\n}\r\n\r\nexport { EntityPathComparer };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:25:38\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 09:39:10\r\n */\r\n\r\n\r\n/**\r\n * 路径类型\r\n */\r\nenum DataPathNodeType {\r\n\r\n  /**\r\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\r\n   */\r\n  DataId   = 'DataId',\r\n\r\n  /**\r\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\r\n   */\r\n  PropName = 'PropName',\r\n}\r\n\r\n\r\n/**\r\n * 路径节点\r\n */\r\nclass DataPathNode {\r\n\r\n  /**\r\n   * 上一节点\r\n   */\r\n  prev: DataPathNode;\r\n\r\n  /**\r\n   * 下一节点\r\n   */\r\n  next: DataPathNode;\r\n\r\n  /**\r\n   * 节点类型\r\n   */\r\n  type: DataPathNodeType;\r\n\r\n  /**\r\n   * 路径数据\r\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\r\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(type: DataPathNodeType, data: any) {\r\n    this.type = type;\r\n    this.value = data;\r\n\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n\r\nexport { DataPathNodeType, DataPathNode };\r\n","\r\n/**\r\n * 表单路径转换类\r\n */\r\nclass FormPathConverter {\r\n\r\n  /**\r\n   * ControlPathString => BingingPathArray\r\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(formPahtString: string): string[] {\r\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n}\r\n\r\nexport { FormPathConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:26:41\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-01-15 22:00:45\r\n */\r\n\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\n/**\r\n * 变更路径（简单双向列表）\r\n */\r\nclass DataPath {\r\n\r\n  /**\r\n   * 头节点\r\n   */\r\n  public head: DataPathNode;\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  public length: number;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.head = new DataPathNode(null, null);\r\n    this.length = 0;\r\n  }\r\n\r\n  /**\r\n   * 添加一个节点到头部\r\n   */\r\n  public unshift(type: DataPathNodeType, data: any) {\r\n    const newNode = new DataPathNode(type, data);\r\n    newNode.next = this.head.next;\r\n    newNode.prev = this.head;\r\n\r\n    this.head.next = newNode;\r\n    if (newNode.next) {\r\n      newNode.next.prev = newNode;\r\n    }\r\n\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 在链表最后追加一个节点\r\n   */\r\n  public push(type: DataPathNodeType, data: any) {\r\n    const tailNode = this.getTail();\r\n    const newNode = new DataPathNode(type, data);\r\n    tailNode.next = newNode;\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 获取链表尾部节点\r\n   */\r\n  public getTail(): DataPathNode {\r\n    let lastNode = this.head;\r\n    while (lastNode.next) {\r\n      lastNode = lastNode.next;\r\n    }\r\n    return lastNode;\r\n  }\r\n\r\n  /**\r\n   * 转换为数组格式\r\n   */\r\n  public toArray() {\r\n    const pathArray = [];\r\n    let currentNode = this.head.next;\r\n    while (currentNode) {\r\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为字符串格式\r\n   */\r\n  public toString() {\r\n    const pathArray = this.toArray();\r\n    const pathString = pathArray.join(', ');\r\n    return `[${pathString}]`;\r\n  }\r\n\r\n  /**\r\n   * 拷贝\r\n   */\r\n  public clone(): DataPath {\r\n    const newDataPath = new DataPath();\r\n    let curDataNode = this.head.next;\r\n    while (curDataNode) {\r\n      newDataPath.push(curDataNode.type, curDataNode.value);\r\n      curDataNode = curDataNode.next;\r\n    }\r\n    return newDataPath;\r\n  }\r\n}\r\n\r\nexport { DataPath };\r\n","\r\nimport { DataTypeInfo, DataPropGroup  } from '../../core/index';\r\nimport { Entity  } from '../../entity/index';\r\nimport { Repository, EntityManager } from '../../repository/index';\r\nimport { BindingData } from '../../binding-data/index';\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\nimport { DataPath } from './data_path';\r\n\r\n/**\r\n * 数据Path工厂类\r\n */\r\nclass DataPathCreator {\r\n\r\n  /**\r\n   * 将长路径数组或字符串转换为\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   */\r\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\r\n    const dataPath = new DataPath();\r\n    const fullPathArray = fullPathArrayOrString as string[];\r\n    if (!fullPathArray || fullPathArray.length === 0) {\r\n      return dataPath;\r\n    }\r\n\r\n    let currentNodeInfo = {\r\n      nodeValue: fullPathArray.shift(),\r\n      nodeType: DataPathNodeType.DataId,\r\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\r\n    };\r\n    while (currentNodeInfo) {\r\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\r\n\r\n      // 处理下一个节点\r\n      const nextNodeValue = fullPathArray.shift();\r\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\r\n        break;\r\n      }\r\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\r\n    }\r\n\r\n    return dataPath;\r\n  }\r\n\r\n  /**\r\n   * 获取下一个路径节点的信息\r\n   * @param parentNodeInfo 当前路径节点信息\r\n   * @param nextNodeValue 下一个路径节点的值\r\n   * @summary\r\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\r\n   * 2、多个因素混用了一个结构；\r\n   */\r\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\r\n\r\n    const parentNodeValue = parentNodeInfo.nodeValue;\r\n    const parentNodeType = parentNodeInfo.nodeType;\r\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\r\n\r\n    if (!nextNodeValue || !parentEntityTypeInfo) {\r\n      return null;\r\n    }\r\n\r\n    const nextPathNodeInfo = {\r\n      nodeValue: nextNodeValue,\r\n      nodeType: null,\r\n      entityTypeInfo: null\r\n    };\r\n\r\n\r\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\r\n    if (parentNodeType === DataPathNodeType.DataId) {\r\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\r\n    } else {\r\n\r\n      // DataNodeType=Object：必然对应一个属性信息\r\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\r\n      if (nextPropInfo.group === DataPropGroup.List) {\r\n\r\n        // EntityPropGroup=EntityList：下一个节点是List类型。\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\r\n      } else {\r\n\r\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\r\n        // EntityPropGroup=Dynamic|Plain：null\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\r\n      }\r\n    }\r\n\r\n    return nextPathNodeInfo;\r\n  }\r\n\r\n  /**\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   * 2、shortPathArrayOrString暂时只支持字符串数组\r\n   */\r\n  public static createByShortPathFromRoot(\r\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\r\n  ): DataPath {\r\n\r\n    const dataPath = new DataPath();\r\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\r\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n\r\n    // 遍历下级节点\r\n    shortPathArray.forEach((propName: string) => {\r\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\r\n      switch (propInfo.group) {\r\n        case DataPropGroup.Plain:\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          break;\r\n        case DataPropGroup.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n\r\n          break;\r\n        case DataPropGroup.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return dataPath;\r\n  }\r\n\r\n}\r\n\r\nexport { DataPathCreator };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-08-14 14:11:51\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-08-14 16:11:51\r\n */\r\n\r\nimport { DataTypeInfo } from './data_type_info';\r\n\r\n\r\n/**\r\n * 实体属性分组\r\n */\r\nenum DataPropGroup {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 动态实体类型\r\n   */\r\n  Dynamic = 'Dynamic',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List'\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实体属性信息\r\n */\r\nclass DataPropInfo {\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  public group: DataPropGroup;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * 影射名称\r\n   */\r\n  public mapping: string;\r\n\r\n  /**\r\n   * 属性类型描述\r\n   */\r\n  public typeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 元数据信息\r\n   * @todo\r\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\r\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\r\n   */\r\n  public metadataInfo?: any;\r\n  /**\r\n   * 是否vo字段\r\n   */\r\n  public isVOField?: boolean;\r\n}\r\n\r\nexport { DataPropGroup, DataPropInfo };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-07 09:05:09\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 20:35:02\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport {\r\n  NgProperty, NgFieldProperty, NgObjectProperty, NgDynamicProperty, NgListProperty,\r\n  EntityMetadataUtil,\r\n  NgEntity\r\n} from '../../entity/metadata/index';\r\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\r\n\r\n/**\r\n * 实体类型信息\r\n * @todo：\r\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\r\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\r\n */\r\nclass DataTypeInfo {\r\n  public entityInfo: NgEntity;\r\n\r\n  /**\r\n   * 数据类型\r\n   */\r\n  public type: Type<any>;\r\n\r\n  /**\r\n   * 属性集合\r\n   */\r\n  public propInfoMap: Map<string, DataPropInfo>;\r\n\r\n  /**\r\n   * 主键\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 外键\r\n   */\r\n  public foreignKey: string;\r\n\r\n  /**\r\n   * 是否为值对象\r\n   */\r\n  public get isValueObject() {\r\n    return !this.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   * @todo：不应该识别\r\n   */\r\n  constructor(type: any) {\r\n    this.type = type;\r\n    this.primaryKey = '';\r\n    this.foreignKey = '';\r\n    this.propInfoMap = new Map<string, DataPropInfo>();\r\n    this.collectEntityInfos();\r\n    this.collectPropInfos();\r\n  }\r\n  public getBindingPathByTableName(tableName: string): string {\r\n    const fullEntityPath = this.getFullEntityPath(this, tableName);\r\n    if (!fullEntityPath) {\r\n      return null;\r\n    }\r\n    fullEntityPath.splice(0, 1);\r\n    return '/' + fullEntityPath.join('/');\r\n  }\r\n  private getFullEntityPath(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = []) {\r\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      return paths;\r\n    }\r\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\r\n    if (props.length < 1) {\r\n      paths = [];\r\n      return paths;\r\n    }\r\n    if (dataTypeInfo.entityInfo) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n    }\r\n\r\n    for (let idx = 0; idx < props.length; idx++) {\r\n      const dataTypeInfo = props[idx].typeInfo;\r\n      const path = this.getFullEntityPath(dataTypeInfo, tableName);\r\n      if (!path || path.length < 1) {\r\n        continue;\r\n      } else {\r\n        paths = paths.concat(path);\r\n        return paths;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取全部属性信息\r\n   */\r\n  public getPropInfos(): DataPropInfo[] {\r\n    return Array.from(this.propInfoMap.values()).filter((propInfo) => !propInfo.isVOField);\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性的名称\r\n   */\r\n  public getPropNames(): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfos();\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性信息数组\r\n   */\r\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\r\n    const allPropInfos = Array.from(this.propInfoMap.values());\r\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\r\n      return propInfo.group === group && !propInfo.isVOField;\r\n    });\r\n    return propInfos;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性名称数组\r\n   * @param group 属性分组\r\n   */\r\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfosByGroup(group);\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据propName获取属性信息\r\n   */\r\n  public getPropInfoByName(propName: string): DataPropInfo {\r\n    if (this.propInfoMap.has(propName)) {\r\n      return this.propInfoMap.get(propName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取属性信息\r\n   */\r\n  public getPropInfoByPath(path: string[]): DataPropInfo {\r\n\r\n    // 先复制，防止shift方法产生污染\r\n    const arrPath = path.concat([]);\r\n    if (arrPath.length === 0) {\r\n      throw Error(`属性路径不能为空`);\r\n    }\r\n\r\n    // 循环查找\r\n    let typeInfo = this;\r\n    let propInfo = null;\r\n    while (typeInfo && arrPath.length > 0) {\r\n\r\n      const propName = arrPath.shift();\r\n      propInfo = typeInfo.getPropInfoByName(propName);\r\n      if (!propInfo) {\r\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\r\n      }\r\n      typeInfo = propInfo.typeInfo;\r\n\r\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\r\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\r\n        propInfo = null;\r\n        typeInfo = null;\r\n      }\r\n    }\r\n\r\n    return propInfo;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取对应属性的TypeInfo\r\n   */\r\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\r\n\r\n    // 空数组时返回\r\n    if (path.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    // 获取对应属性信息\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo.typeInfo) {\r\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\r\n    }\r\n\r\n    return propInfo.typeInfo;\r\n  }\r\n\r\n  /**\r\n   * 获取主键的属性信息\r\n   */\r\n  public getPrimaryKeyPropInfo(): DataPropInfo {\r\n    return this.getPropInfoByName(this.primaryKey);\r\n  }\r\n\r\n  /**\r\n   * 根据name获取影射名\r\n   */\r\n  public getPropMappingByName(name: string): string {\r\n    const propInfo = this.getPropInfoByName(name);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取映射名\r\n   */\r\n  public getPropMappingByPath(path: string[]): string {\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 检查属性是否属于特定的分组\r\n   */\r\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\r\n    const propInfo = this.getPropInfoByName(propName);\r\n    if (propInfo && propInfo.group === propGroup) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------------\r\n   * 属性元数据 => 属性描述信息\r\n   * --------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * 搜集所有属性信息\r\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\r\n   */\r\n  private collectPropInfos() {\r\n\r\n    // 简单属性\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        this.primaryKey = propName;\r\n      }\r\n      if (ngProperty.foreign === true) {\r\n        this.foreignKey = propName;\r\n      }\r\n      this.addPropInfo(DataPropGroup.Plain, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体属性\r\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\r\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityProperties[propName] as NgObjectProperty;\r\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n\r\n    // 动态实体属性\r\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      const ngProperty = ngDynamicProperties[propName] as NgDynamicProperty;\r\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体列表属性\r\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\r\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityListProperties[propName] as NgListProperty;\r\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n  }\r\n  private collectEntityInfos() {\r\n    let entityInfo = EntityMetadataUtil.getNgEntityMatadata(this.type);\r\n    if (!entityInfo) {\r\n      // 应用于解析表单\r\n      entityInfo = {\r\n        originalCode: this.type[\"code\"],\r\n        nodeCode: this.type[\"label\"]\r\n      };\r\n    }\r\n    this.entityInfo = entityInfo;\r\n\r\n  }\r\n  /**\r\n   * 添加属性信息\r\n   */\r\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: NgProperty) {\r\n\r\n    // 没有设置影射时，用属性名充当影射\r\n    mapping = mapping ? mapping : name;\r\n    let typeInfo = null;\r\n    if (type) {\r\n      typeInfo = new DataTypeInfo(type);\r\n    }\r\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\r\n    this.propInfoMap.set(name, propInfo);\r\n    // 将vo字段也加入便于表达式查找\r\n    const originalDataField = metadataInfo && metadataInfo.originalDataField;\r\n    if (originalDataField && !this.propInfoMap.has(originalDataField)) {\r\n      this.propInfoMap.set(originalDataField, { ...propInfo, isVOField: true });\r\n    } else if (metadataInfo && metadataInfo.type) {\r\n      const entityInfo = EntityMetadataUtil.getNgEntityMatadata(metadataInfo.type);\r\n      if (entityInfo && entityInfo.originalCode) {\r\n        this.propInfoMap.set(entityInfo.originalCode, { ...propInfo, isVOField: true });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { DataTypeInfo };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { ChangeSetPolicy, IMessageService, INotifyService } from './types';\r\n/**\r\n * 表单模块路径\r\n */\r\nexport const FORM_PATH_TOKEN = new InjectionToken<string>('@farris/devkit form path token');\r\n/**\r\n * 后端消息处理器\r\n */\r\nexport const BACK_END_MESSAGE_HANDLER_TOKEN = new InjectionToken<string>('@farris/devkit_back_end_message_handler');\r\nexport const MESSAGE_SERVICE_TOKEN = new InjectionToken<IMessageService>('@farris/message_service_token');\r\nexport const NOTIFY_SERVICE_TOKEN = new InjectionToken<INotifyService>('@farris/notify_service_token');\r\n/**\r\n * 变更集提交策略,entire | valid\r\n * @description entire是指提交所有变更，valid是指仅提交前端校验通过的变更\r\n */\r\nexport const CHANGE_SET_POLICY_TOKEN = new InjectionToken<ChangeSetPolicy>('@farris/changeset_policy_token');\r\n/**\r\n * 启用服务器端变更检测\r\n */\r\nexport const ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN = new InjectionToken<boolean>('@farris/enable_server_side_change_detection_token');\r\n/**\r\n * 启用编辑态过滤排序\r\n */\r\nexport const ENABLE_EDIT_STATE_FILTER_SORTING = new InjectionToken<boolean>('@farris/enable_edit_state_filter_sorting_token');\r\n","export class Core {\r\n  public static warn(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.warn(message, ...optionalParams);\r\n  }\r\n  public static error(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.error(message, ...optionalParams);\r\n  }\r\n  public static log(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.log(message, ...optionalParams);\r\n  }\r\n  private static logable(): boolean {\r\n    return window && window.localStorage && window.localStorage.getItem('__DEVKIT_LOGABLE__') === 'true' || false;\r\n  }\r\n}","export function escape(value: string) {\r\n  if (!value || typeof value !== 'string') {\r\n    return value;\r\n  }\r\n  return value\r\n    .replace(/[\\\\]/g, '\\\\\\\\')\r\n    .replace(/[\\\"]/g, '\\\\\\\"')\r\n    .replace(/[\\/]/g, '\\\\/')\r\n    .replace(/[\\b]/g, '\\\\b')\r\n    .replace(/[\\f]/g, '\\\\f')\r\n    .replace(/[\\n]/g, '\\\\n')\r\n    .replace(/[\\r]/g, '\\\\r')\r\n    .replace(/[\\t]/g, '\\\\t');\r\n}","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface IResolver {\r\n  resolve(expr: string): string[];\r\n}\r\nexport const RESOLVER_TOKEN = new InjectionToken('@farris_resolver_token');\r\nexport const ENTITY_TEMPLATE = 'ENTITY~';\r\nexport const STATE_TEMPLATE = 'STATE~';\r\nexport const GROUP_FUNCTIONS = ['SumByProp', 'CountByProp', 'AvgByProp', 'MaxByProp', 'MinByProp', 'IsExistRecord', 'ListContains', 'ListGreaterThan', 'ListLessThan', 'ListStartWith', 'ListEndWith', 'MultiplyChildNumber', 'SortChildData', 'IsContainMatch', 'MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'];\r\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { IResolver, RESOLVER_TOKEN } from './types';\r\n\r\n@Injectable()\r\nexport class ResolverRegistry{\r\n  constructor(private injector: Injector, @Optional() @Inject(RESOLVER_TOKEN) public resolvers: Array<IResolver>){}\r\n}","import { Type } from '@angular/core';\r\nimport { makeDecorator } from '../metadata/index';\r\n\r\nexport const NG_REPOSITORY = 'NgRepository';\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport interface NgRepository {\r\n\r\n  /**\r\n     * API地址\r\n     */\r\n    apiUrl: string;\r\n\r\n    /**\r\n     * 实体类型\r\n     */\r\n    entityType: Type<any>;\r\n}\r\n\r\n/**\r\n * NgRepositoryDecorator\r\n */\r\nexport interface NgRepositoryDecorator {\r\n    (obj?: NgRepository): any;\r\n    new(obj?: NgRepository): any;\r\n}\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport function NgRepository(options: NgRepository) {\r\n  const decoratorFactory = makeDecorator(NG_REPOSITORY, (obj: NgRepository) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-01 19:36:51\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:46:42\r\n */\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Subject } from 'rxjs';\r\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\r\nimport { ChangeSetPolicy } from '../core';\r\n// tslint:disable: no-bitwise\r\n/**\r\n * 实体集合\r\n * @todo：应该用EntityList代替。\r\n */\r\nclass EntityCollection<T extends Entity> {\r\n\r\n  /**\r\n   * 内部实体Set\r\n   */\r\n  private innerEntitySet: Set<T>;\r\n  /**\r\n   * 变更提交策略\r\n   */\r\n  private _changeSetPolicy: ChangeSetPolicy;\r\n  /**\r\n   *变更策略 \r\n   */\r\n  public set changeSetPolicy(policy: ChangeSetPolicy) {\r\n    this._changeSetPolicy = policy;\r\n  }\r\n  public get changeSetPolicy(): ChangeSetPolicy {\r\n    return this._changeSetPolicy;\r\n  }\r\n  /**\r\n   * 内部实体Map\r\n   */\r\n  private innerEntityMap: Map<string, T>;\r\n  public changes: Subject<Modification>;\r\n\r\n  /**\r\n   * Entity集合变更流\r\n   */\r\n  public collectionChanged: Subject<Modification>;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public readonly entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public readonly primaryKey: string;\r\n\r\n  /**\r\n   * 实体当前分页信息\r\n   */\r\n  public paginationInfo: any;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityType: any) {\r\n    this.innerEntitySet = new Set<T>();\r\n    this.innerEntityMap = new Map<string, T>();\r\n    this.collectionChanged = new Subject<Modification>();\r\n    this.changes = new Subject<Modification>();\r\n    this.entityType = entityType;\r\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 实体数量\r\n   */\r\n  public count(): number {\r\n    return this.innerEntitySet.size;\r\n  }\r\n\r\n  public get entityTypeName() {\r\n    return this.entityType.name;\r\n  }\r\n  /**\r\n   * 是否包含指定主键值的实体\r\n   * @param id 主键值\r\n   */\r\n  public has(id: string): boolean {\r\n    return this.innerEntityMap.has(id);\r\n  }\r\n\r\n  /**\r\n   * 清空全部实体\r\n   */\r\n  public clear() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\r\n  }\r\n  /**\r\n   * 清空全部实体\r\n   * @param isReset 是否为重置实体操作\r\n   */\r\n  public reset(notify: boolean = true) {\r\n    this.innerEntityMap.forEach(entity => {\r\n      entity.unsubscribe.next();\r\n      entity.unsubscribe.complete();\r\n    });\r\n    this.innerEntitySet.forEach(entity => {\r\n      entity.unsubscribe.next();\r\n      entity.unsubscribe.complete();\r\n    });\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    if (notify === true) {\r\n      const modification = new Modification([], ModifyType.Load);\r\n      modification.isReset = true;\r\n      this.notifyCollectionChanged(modification);\r\n    }\r\n  }\r\n  /**\r\n   * 转换为实体数组\r\n   */\r\n  public toArray(): Entity[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON数组\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    const entities = this.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 批量加载实体\r\n   */\r\n  public loadEntities(entities: any[], entityCreate: boolean = false) {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.extendChangeSetPolicyProperty(entity);\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    const modification = new Modification(entities, ModifyType.Load);\r\n    modification.entityCreate = entityCreate;\r\n    this.notifyCollectionChanged(modification);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param entity 要追加的实体\r\n   * @param isCloned 实体是否是克隆的\r\n   */\r\n  public addEntity(entity: any, isCloned: boolean = false) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.extendChangeSetPolicyProperty(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    const modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;\r\n    this.notifyCollectionChanged(new Modification([entity], modifyType));\r\n  }\r\n  /**\r\n   * 在当前行前或后插入数据\r\n   * @param entity 实体\r\n   * @param position 位置\r\n   */\r\n  public insertEntity(entity: any, position: 1 | -1) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.extendChangeSetPolicyProperty(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));\r\n  }\r\n  /**\r\n   * 更新实体\r\n   * @param entity entity\r\n   * @param data 实体数据\r\n   */\r\n  public updateEntity(entity: any, data: any) {\r\n    entity.load(data);\r\n    this.notifyCollectionChanged(new Modification(data, ModifyType.Update, null, null));\r\n  }\r\n  /**\r\n   * 批量追加实体\r\n   * @param entities 要加载的实体数组\r\n   */\r\n  public addEntities(entities: any[], options: any = null) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.extendChangeSetPolicyProperty(entity);\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    const isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;\r\n    const modification = new Modification(entitiesToAdd, ModifyType.Add);\r\n    modification.isTreeNodeLoadScene = isTreeNodeLoadScene;\r\n    this.notifyCollectionChanged(modification);\r\n  }\r\n  /**\r\n   * 添加实体（不切换当前行）\r\n   * @param entities 实体\r\n   */\r\n  public addData(entities: any[], options: any = null) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.extendChangeSetPolicyProperty(entity);\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    // 针对树分层加载场景\r\n    const isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;\r\n    const modification = new Modification(entitiesToAdd, ModifyType.AddData);\r\n    modification.isTreeNodeLoadScene = isTreeNodeLoadScene;\r\n    this.notifyCollectionChanged(modification);\r\n  }\r\n  /**\r\n   * 为实体扩展变更策略属性\r\n   * @param entity \r\n   */\r\n  private extendChangeSetPolicyProperty(entity: any){\r\n    if (entity) {\r\n      entity.changeSetPolicy = this.changeSetPolicy;\r\n    }\r\n  }\r\n  /**\r\n   * 根据主键值获取实体\r\n   */\r\n  getEntityById(identity: string): any {\r\n    if (this.innerEntityMap.has(identity) === false) {\r\n      return null;\r\n    }\r\n    const entity = this.innerEntityMap.get(identity);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 根据路径获取实体\r\n   */\r\n  getEntityByPath(pathArray: string[]): any {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let parentNode: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\r\n      const currentPath = pathArray[i];\r\n      if ((parentNode instanceof Entity) || (\r\n        parentNode.typeName === 'ConcreteEntityPrototype')\r\n      ) {\r\n        // @todo：强识了别冒号\r\n        if (currentPath.indexOf(':') === -1) {\r\n          parentNode = parentNode[pathArray[i]];\r\n        }\r\n      } else {\r\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\r\n      }\r\n    }\r\n    return parentNode;\r\n  }\r\n  /**\r\n   * id:1/a/id:2/c\r\n   * @param pathArray 路径数组\r\n   */\r\n  public getEntitiesByPath(pathArray: string[]) {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let entity: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && entity; i += 2) {\r\n      const path = pathArray[i];\r\n      entity = entity[path];\r\n      if (!(entity instanceof EntityList)) {\r\n        throw new Error('路径格式错误');\r\n      }\r\n      if ((i + 1) < pathArray.length) {\r\n        const id = pathArray[i + 1].split(':')[1];\r\n        entity = entity.get(id);\r\n      }\r\n    }\r\n    return entity;\r\n  }\r\n  /**\r\n   * 返回符合指定条件的实体集合\r\n   * @param predicate 条件谓词\r\n   */\r\n  getEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entities: any[] = Array.from(this.innerEntitySet);\r\n    const matchedEntities = entities.filter(predicate);\r\n    return matchedEntities;\r\n  }\r\n\r\n  /**\r\n   * 获取全部实体\r\n   */\r\n  getAllEntities(): any[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值删除对应实体\r\n   * @param identity 主键值\r\n   */\r\n  removeEntityById(identity: string): any {\r\n    this.verifyEntityToRemove(identity);\r\n    const entityToRemove = this.innerEntityMap.get(identity);\r\n    this.innerEntityMap.delete(identity);\r\n    this.innerEntitySet.delete(entityToRemove);\r\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\r\n    return entityToRemove;\r\n  }\r\n\r\n  removeEntitiesByIds(id: string) {\r\n  }\r\n\r\n  /**\r\n   * 删除符合条件的实体集合\r\n   */\r\n  public removeEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 移除数据（不切换当前行）\r\n   * @param predicate 过滤函数\r\n   */\r\n  public removeData(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 重置子表数据\r\n   * @param paths 路径\r\n   * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']\r\n   * @description path参数格式\r\n   * ```json\r\n   * [\r\n   * \"id:b5ed23ca-88d9-4377-98ec-92f35c1325f1\",\r\n   * \"cityMDMs\",\r\n   * \"id:373706af-622f-4aea-a006-dddbffd7bda3\",\r\n   * \"zoneMDMs\"\r\n   * ]\r\n   * ```\r\n   * @param entities 实体数组\r\n   */\r\n  public resetEntities(paths: string[], entities: any[]) {\r\n    if (paths[0].indexOf(':') === -1) {\r\n      throw new Error('路径格式错误');\r\n    }\r\n    // 获取主实体\r\n    const id = paths[0].split(':')[1];\r\n    let entity: any = this.innerEntityMap.get(id);\r\n    let entityList = entity[paths[1]] as EntityList<any>;\r\n    if (!entity) {\r\n      throw new Error(`找不到主键为${id}的实体`);\r\n    }\r\n    for (let index = 2; index < paths.length; index += 2) {\r\n      const pathInfo = paths[index].split(':');\r\n      const entityId = pathInfo[1];\r\n      // 获取到当前层级的实体\r\n      entity = entityList.get(entityId);\r\n      if (!entity) {\r\n        throw new Error(`找不到主键为${id}的实体`);\r\n      }\r\n      // 获取当前层级实体下的列表属性\r\n      entityList = entity[paths[index + 1]];\r\n    }\r\n    entityList.clear();\r\n    entityList.loadEntities(entities);\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能够添加\r\n   */\r\n  private verifyEntityToAdd(entity: any): boolean {\r\n    if (this.has(entity[this.primaryKey])) {\r\n      throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能移除\r\n   */\r\n  private verifyEntityToRemove(identity: string): boolean {\r\n    if (!this.has(identity)) {\r\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 实体集合变更流\r\n   */\r\n  private notifyCollectionChanged(modification: Modification) {\r\n    this.collectionChanged.next(modification);\r\n  }\r\n  private listenEntityChangeEvent(entity: Entity) {\r\n    if (entity) {\r\n      entity.onValueChanged.subscribe((change: Modification) => this.changes.next(change));\r\n    }\r\n  }\r\n\r\n  //#region 分页\r\n\r\n  /**\r\n   * 设置分页大小\r\n   */\r\n  set pageSize(pageSize: number) {\r\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\r\n      throw new Error('Invalid parameter:pageSize');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\r\n    this.paginationInfo = Object.assign({}, original, { pageSize });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\r\n   */\r\n  get pageSize(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageSize || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置数据总条数\r\n   */\r\n  set totalCount(total: number) {\r\n    if (typeof (total) !== 'number' || total < 0) {\r\n      throw new Error('Invalid parameter:total');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { total });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取数据总条数\r\n   */\r\n  get totalCount(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置当前页码\r\n   */\r\n  set pageIndex(pageIndex: number) {\r\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\r\n      throw new Error('Invalid parameter:pageIndex');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取当前页码\r\n   */\r\n  get pageIndex(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageIndex || 1;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 更新分页信息\r\n   * @param path 绑定路径\r\n   * @param pageInfo 分页信息\r\n   */\r\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\r\n    const original = this.paginationInfo;\r\n    const { pageIndex, pageSize } = pageInfo;\r\n    const total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;\r\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\r\n    this.setPaginationConfigByPath(path, paginationInfo);\r\n  }\r\n  /**\r\n   * 根据路径获取分页大小\r\n   * @param path 路径\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值，其中总条数key为total\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    const original = JSON.stringify(this.paginationInfo);\r\n    if (!path || path === '/') {\r\n      this.paginationInfo = value;\r\n    } else {\r\n      if (!Array.isArray(path)) {\r\n        path = path.toString().match(/[^/[\\]]+/g) || [];\r\n      }\r\n      path.slice(0, -1).reduce((prev, current, index) =>\r\n        Object(prev[current]) === prev[current]\r\n          ? prev[current]\r\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n            ? []\r\n            : {},\r\n        this.paginationInfo)[path[path.length - 1]] = value;\r\n    }\r\n\r\n    if (JSON.stringify(this.paginationInfo) !== original) {\r\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n    }\r\n    return this.paginationInfo;\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { EntityCollection };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-11 19:50:38\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../core/index';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\n\r\n\r\n/**\r\n * 实体管理类\r\n */\r\nclass EntityManager<T extends Entity> {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<Entity>;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<Entity>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    this.entityCollection = entityCollection;\r\n    this.entityType = entityCollection.entityType;\r\n  }\r\n\r\n\r\n  // #region 创建实体相关方法\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(entityData: any): T {\r\n    const entity = createEntity<T>(this.entityType, entityData);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public createEntities(entityListData: any[], entityType: any): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\r\n    return entities;\r\n  }\r\n  /**\r\n   * 批量创建下级实体\r\n   * @param fPath fpath\r\n   * @param entityListData 实体数据\r\n   */\r\n  public createEntitiesByPath(fPath: string, entityListData: any[]) {\r\n    const subPaths = fPath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    if (entityListData.length < 1) {\r\n      return [];\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fPath}`);\r\n      }\r\n    }\r\n    const entities = entityListData.map(entityData => {\r\n      return createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    });\r\n    return entities;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取实体、实体数组相关方法\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntityByPath(path: string[]): Entity {\r\n    const entity = this.getEntityNodeByPath(path) as Entity;\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntitiesByPath(path: string[]): Entity[] {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\r\n    let entities: Entity[];\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\r\n    } else {\r\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体节点\r\n   * @param path 节点路径\r\n   */\r\n  public getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\r\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\r\n    let entityNode: any = this.entityCollection;\r\n    let pathNode = dataPath.head.next;\r\n    while (pathNode) {\r\n      if (pathNode.type === DataPathNodeType.DataId) {\r\n        if (entityNode instanceof EntityCollection === true) {\r\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\r\n        } else {\r\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\r\n        }\r\n      } else {\r\n        entityNode = entityNode[pathNode.value];\r\n      }\r\n      if (!entityNode) {\r\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\r\n      }\r\n      pathNode = pathNode.next;\r\n    }\r\n    return entityNode;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取、设置属性值\r\n\r\n  /**\r\n   * 获取path对应的实体属性值\r\n   */\r\n  public getPropValueByPath(path: string[]): any {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    return entity[propName];\r\n  }\r\n\r\n  /**\r\n   * 设置path对应实体的属性值\r\n   */\r\n  public setPropValueByPath(path: string[], propValue: any): void {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    entity[propName] = propValue;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 插入实体\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityBeforeByPath(fpath: string[]) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesBeforeByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 追加实体\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加1个实体\r\n   */\r\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.addEntity(entity);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.appendEntity(entity);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath 路径 /id/childsNode/id/xxx\r\n   * @param entityData 实体数据\r\n   * @param initialData[可选] 默认值\r\n   */\r\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any, isCloned: boolean = false): Entity {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.appendNew(childEntity, isCloned);\r\n\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param fpath 父路径\r\n   * @param entityData 实体数据\r\n   * @param initialData 初始数据\r\n   * @param position 插入位置\r\n   */\r\n  public insertEntityByPath(fpath: string, entityData: any, initialData?: any, position?: 1 | -1) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.insert(childEntity, position);\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在path对应的实体集合中追加多个实体\r\n   */\r\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n      entityCollection.addEntities(entities);\r\n    } else {\r\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n      entityList.appendEntities(entities);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 删除实体\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除id对应的实体\r\n   */\r\n  // public removeEntityByPath(fpath: string[], id: string): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.removeEntityById(id);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.remove(id);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath path\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      const propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    childEntityList.remove(id);\r\n  }\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除ids对应的实体\r\n   */\r\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\r\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\r\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n    //   entityCollection.removeEntitiesByIds(ids);\r\n    // } else {\r\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n    //   entityList.remove(ids);\r\n    // }\r\n    throw new Error('Not Implemented');\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 清空变更集相关方法\r\n\r\n  /**\r\n   * 清空所有实体的变更集\r\n   */\r\n  public clearAllEntityChanges() {\r\n    const entities = this.entityCollection.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      entity.changes.splice(0, entity.changes.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空id指定的实体变更集\r\n   */\r\n  public clearEntityChangesById(id: string): void {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 清空ids数组中指定的实体的变更集\r\n   */\r\n  public clearEntityChangesByIds(ids: string[]): void {\r\n    if (!ids || ids.length < 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      this.clearEntityChangesById(id);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变更集检查相关方法\r\n\r\n  /**\r\n   * 检查所有的实体，是否有未提交的变更\r\n   */\r\n  public checkAllEntityChanges(): boolean {\r\n\r\n    const entities = this.entityCollection.toArray();\r\n    const hasChanges = entities.some((entity: Entity) => {\r\n      if (entity.changes.length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return hasChanges;\r\n  }\r\n\r\n  /**\r\n   * 检查id对应的实体，是否有未提交的变更\r\n   */\r\n  public checkEntityChangesById(id: string): boolean {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return false;\r\n    }\r\n    return entity.changes.length > 0;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 不规范方法，待废弃\r\n\r\n  /**\r\n   * 待废弃\r\n   * @deprecated\r\n   */\r\n  public clearEntityChangesByArray(idArray: string[]): void {\r\n    this.clearEntityChangesByIds(idArray);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { EntityManager };\r\n","import { Type, Injectable } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n@Injectable()\r\nexport class PaginationManager<T extends Entity> {\r\n\r\n  constructor(private entityType: any, private paginationConfig: any) {\r\n    if (this.paginationConfig === null || this.paginationConfig === undefined) {\r\n      this.paginationConfig = this.getNgListProperties();\r\n    }\r\n    // 兼容老表单，将之前的主表分页信息展开到分页配置根中\r\n    this.expandMainEntityConfig();\r\n    this.deleteMainEntityConfig();\r\n    this.removeLasts();\r\n  }\r\n  /**\r\n   * 主表分页信息展开到分页配置根中\r\n   */\r\n  private expandMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    if (this.paginationConfig.hasOwnProperty(entityName)) {\r\n      const entityConfig = this.paginationConfig[entityName];\r\n      this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\r\n    } else {\r\n      this.paginationConfig = Object.assign(this.paginationConfig, { pageSize: this.paginationConfig['pageSize'] || 0 });\r\n    }\r\n  }\r\n  /**\r\n   * 删除子表分页配置key后面的s\r\n   */\r\n  private removeLasts() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    Object.keys(this.paginationConfig).forEach(key => {\r\n      if (key !== entityName && key.endsWith('s')) {\r\n        const newKey = key.substring(0, key.length - 1);\r\n        this.paginationConfig[newKey] = this.paginationConfig[key];\r\n        delete this.paginationConfig[key];\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 删除主表实体配置信息\r\n   */\r\n  private deleteMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    delete this.paginationConfig[entityName];\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   */\r\n  public get pagination() {\r\n    return this.paginationConfig;\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationConfig;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\r\n    let config = this.paginationConfig;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    if (!Array.isArray(path)) {\r\n      path = path.toString().match(/[^/[\\]]+/g) || [];\r\n    }\r\n    path.slice(0, -1).reduce((prev, current, index) =>\r\n      Object(prev[current]) === prev[current]\r\n        ? prev[current]\r\n        : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n          ? []\r\n          : {},\r\n      this.paginationConfig)[path[path.length - 1]] = value;\r\n    return this.paginationConfig;\r\n  }\r\n\r\n  /**\r\n   * 递归获取当前实体的所有NgList属性\r\n   * @param defaultPageSize defaultPageSize\r\n   */\r\n  private getNgListProperties(defaultPageSize: number = 0) {\r\n\r\n    const getChilds = (objectType: Type<Entity>) => {\r\n      const listProperties = FieldMetadataUtil.getNgList(objectType);\r\n      let result = {};\r\n      if (Object.keys(listProperties).length < 1) {\r\n        return result;\r\n      }\r\n\r\n      Object.keys(listProperties).forEach(prop => {\r\n        let itemTypeName = listProperties[prop].dataField;\r\n        // 去掉尾部的s\r\n        if (itemTypeName.endsWith('s')) {\r\n          itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\r\n        }\r\n        result[itemTypeName] = {\r\n          pageSize: defaultPageSize\r\n        };\r\n        const child = getChilds(listProperties[prop].type);\r\n        if (child !== null && Object.keys(child).length > 0) {\r\n          result = Object.assign({}, result, child);\r\n        }\r\n      });\r\n      return result;\r\n    };\r\n    const childs = getChilds(this.entityType);\r\n    const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\r\n    return root;\r\n  }\r\n\r\n}\r\n","import { DataChange, DataChangeType } from '../core';\r\n\r\nclass DataChangeHistory {\r\n    private history: Array<DataChange>;\r\n    constructor() {\r\n        this.history = [];\r\n    }\r\n    public addChange(dataChange: DataChange) {\r\n        const changeType = DataChangeType[dataChange.changeType];\r\n        this[`on${changeType}Data`](dataChange);\r\n    }\r\n    public addChanges(dataChange: DataChange[]) {\r\n        dataChange.forEach(change => this.addChange(change));\r\n    }\r\n    public clear() {\r\n        this.history.splice(0, this.history.length);\r\n    }\r\n    public clearByIds(ids: string[]) {\r\n        this.history = this.history.filter(item => {\r\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\r\n                for (const id of ids) {\r\n                    const include = item.fpath.split('/').includes(id);\r\n                    return !include;\r\n                }\r\n            } else {\r\n                return !ids.includes(item.dataId);\r\n            }\r\n        });\r\n    }\r\n    public isChanged() {\r\n        return this.history.length > 0;\r\n    }\r\n    private onAddData(dataChange: DataChange) {\r\n        this.history.push(dataChange);\r\n    }\r\n    private onDeleteData(dataChange: DataChange) {\r\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\r\n        if (index >= 0) {\r\n            this.history.splice(index, 1);\r\n        } else {\r\n            this.history.push(dataChange);\r\n        }\r\n    }\r\n}\r\nexport { DataChangeHistory };\r\n","/**\r\n * 排序条件管理\r\n */\r\nexport class SortConditionManager {\r\n  /**\r\n   * 排序条件集合\r\n   * @description\r\n   * 排序条件数据结构描述：\r\n   * ```typescript\r\n   * key: bindingPath\r\n   * value: Array<{field:\"name|etc\",direction:\"asc|desc\"}>\r\n   * ```\r\n   */\r\n  private sorts: Map<string, Array<any>>;\r\n  constructor() {\r\n    this.sorts = new Map<string, Array<any>>();\r\n  }\r\n  /**\r\n   * 根据bingdingPath获取排序规则\r\n   * @param bindingPath bindingPath\r\n   * @param directionConverter converter\r\n   */\r\n  public getConditionsByBindingPath(bindingPath: string, directionConverter?: (direction: 'asc' | 'desc') => any) {\r\n    let conditions = this.sorts.get(bindingPath) || [];\r\n    if (conditions.length < 1) {\r\n      return conditions;\r\n    }\r\n    if (typeof directionConverter === 'function') {\r\n      conditions = conditions.map(condition => {\r\n        const sortType = directionConverter(condition.SortType);\r\n        return { SortField: condition.SortField, SortType: sortType };\r\n      });\r\n    }\r\n    return conditions;\r\n  }\r\n  /**\r\n   * 增加排序条件\r\n   * @param bindingPath 绑定路径\r\n   * @param field 排序字段\r\n   * @param direction 排序方向 asc|desc\r\n   */\r\n  public addCondition(bindingPath: string, field: string, direction: string) {\r\n    // 取消排序\r\n    if (!field || !direction) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const isBindingPathExist = this.sorts.has(bindingPath);\r\n    const condition = { SortField: field, SortType: direction };\r\n    if (!isBindingPathExist) {\r\n      this.sorts.set(bindingPath, [condition]);\r\n    } else {\r\n      const bindingPathSortConditions = this.sorts.get(bindingPath) || [];\r\n      // new condition will override the previous condition\r\n      const conditionIndex = bindingPathSortConditions.findIndex(item => item.SortField === field);\r\n      if (conditionIndex !== -1) {\r\n        bindingPathSortConditions[conditionIndex] = condition;\r\n      } else {\r\n        bindingPathSortConditions.push(condition);\r\n      }\r\n    }\r\n  }\r\n  public removeCondition(bindingPath: string, field: string) {\r\n    throw new Error('not implement!');\r\n  }\r\n  /**\r\n   * 批量增加排序条件\r\n   * @param bindingPath bindingPath\r\n   * @param fields fields , seprated by comma\r\n   * @param directions directions , seprated by comma\r\n   * @description set conditions and overwrite all conditions which has the same bindingPath\r\n   */\r\n  public setConditions(bindingPath: string, fields: string, directions: string) {\r\n    // 取消排序\r\n    if (!fields || !directions) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const filedsArray = fields.split(',').filter(item => item);\r\n    const directionsArray = directions.split(',').filter(item => item);\r\n    if (filedsArray.length !== directionsArray.length) {\r\n      throw new Error('arguments error,fields and direction are not match.');\r\n    }\r\n    const conditions = [];\r\n    filedsArray.forEach((field: string, index: number) => {\r\n      const condition = { SortField: field, SortType: directionsArray[index] };\r\n      conditions.push(condition);\r\n    });\r\n    this.sorts.set(bindingPath, conditions);\r\n  }\r\n  /**\r\n   * 清空所有排序条件\r\n   */\r\n  public clear() {\r\n    this.sorts.clear();\r\n  }\r\n\r\n}\r\n","/**\r\n * 过滤条件管理器\r\n */\r\nexport class FilterConditionManager {\r\n    private filters: Map<string, Array<any>> = new Map<string, Array<any>>();\r\n    /**\r\n     * 获取过滤条件\r\n     * @param bindingPath 绑定路径\r\n     */\r\n    public getFilters(bindingPath: string) {\r\n        return this.filters.get(bindingPath) || [];\r\n    }\r\n    /**\r\n     * 自定义合并\r\n     * @param bindingPath 绑定路径\r\n     * @param merge 合并函数\r\n     */\r\n    public mergeCondition(bindingPath: string, merge: (conditions: any) => any) {\r\n        const conditions = this.filters.get(bindingPath) || [];\r\n        const result = merge(conditions);\r\n        this.filters.set(bindingPath, result);\r\n    }\r\n    /**\r\n     * 增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    public addCondition(bindingPath: string, condition: any) {\r\n        // 通过bindingPath获取对应的过滤条件\r\n        const conditions = this.filters.get(bindingPath);\r\n        const index = this.findConditionIndex(bindingPath, condition);\r\n        if (index !== -1) {\r\n            conditions[index] = condition;\r\n        } else {\r\n            conditions.push(condition);\r\n        }\r\n    }\r\n    /**\r\n     * 批量增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public addConditions(bindingPath: string, conditions: Array<any>) {\r\n        if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {\r\n            return;\r\n        }\r\n        conditions.forEach(condition => {\r\n            this.addCondition(bindingPath, condition);\r\n        });\r\n    }\r\n    /**\r\n     * 删除过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param predicate 条件表达式\r\n     */\r\n    public removeCondition(bindingPath: string, predicate: (value: any, index: number, array: any[]) => boolean) {\r\n        const conditions: Array<{ [propName: string]: any }> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return;\r\n        }\r\n        const removes = conditions.filter(predicate);\r\n        if (removes) {\r\n            removes.forEach(condition => {\r\n                const index = this.findConditionIndex(bindingPath, condition);\r\n                if (index >= 0) {\r\n                    conditions.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 清空过滤条件\r\n     */\r\n    public clear() {\r\n        this.filters.clear();\r\n    }\r\n    /**\r\n     * 设置过滤条件数组\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public setConditions(bindingPath: string, conditions: Array<any>) {\r\n        this.filters.set(bindingPath, conditions);\r\n    }\r\n\r\n    /**\r\n     * 查找过滤条件索引\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    private findConditionIndex(bindingPath: string, condition: any) {\r\n        if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {\r\n            return -1;\r\n        }\r\n        const conditions: Array<any> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return -1;\r\n        }\r\n        return conditions.findIndex((value, index) => {\r\n            let isEqual = true;\r\n            const props = Object.keys(condition);\r\n            for (const prop of props) {\r\n                if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {\r\n                    isEqual = false;\r\n                    break;\r\n                }\r\n            }\r\n            return isEqual;\r\n        });\r\n    }\r\n}\r\n","// tslint:disable: no-bitwise\r\n// get uniqueId\r\nexport class UID {\r\n    private static previous = 0;\r\n    public static create(redix?: number) {\r\n        const timestamp = Date.now().valueOf();\r\n        let uuid = 0;\r\n        if (timestamp > UID.previous) {\r\n            UID.previous = timestamp;\r\n            uuid = timestamp;\r\n        } else {\r\n            UID.previous = UID.previous + 100;\r\n            uuid = UID.previous;\r\n        }\r\n        return uuid.toString(redix);\r\n    }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { DataTypeInfo, IDisposable } from '../core/index';\r\nimport { Modification } from '../changeset/index';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Entity, createEntity, createEntities } from '../entity/index';\r\nimport { NgRepository } from './decorators';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { PaginationManager } from './pagination_manager';\r\nimport { DataChangeHistory } from './data_change_history';\r\nimport { SortConditionManager } from './sort_condition_manager';\r\nimport { FilterConditionManager } from './filter_condition_manager';\r\nimport { UID } from '../misc/uid';\r\n\r\n/**\r\n * 本地仓库\r\n * @description\r\n * # Repository\r\n *\r\n * Repository负责与后台接口交互并将接口返回的数据转换为Entity集合进行保存。因此Repository有两个重要的职责：后端交互、数据存储。\r\n * Repository中存储的数据是Entity类型，可以通过API对数据进行修改或删除。由于Repository和BindingData相互监听，对数据仓库的操作最终会通过BindingData更新到界面上。\r\n *\r\n * ## 实体操作\r\n * 实体操作仅对Repository本地已经存在的数据进行操作，不会发送请求。\r\n *\r\n * - 通过主键获取实体\r\n *\r\n *   ```javascript\r\n *    this.repository.entityCollection.getEntityById(\"id\");\r\n *   ```\r\n *\r\n * - 删除实体数据\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.removeEntityById(\"id\")\r\n *   ```\r\n *\r\n * - 清空所有实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.clear();\r\n *   ```\r\n *\r\n * - 将实体数据转换为json格式\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.toJSON();\r\n *   ```\r\n *\r\n * - 添加实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntity(entity:T);\r\n *   ```\r\n * - 添加子表实体\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.appendEntityByPath(\"/主实体Id/子表名s\",{子表JSON数据});\r\n *   ```\r\n * - 批量添加实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntities(entities:T[])\r\n *   ```\r\n *\r\n * - 批量添加子表实体\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   const childrenEntities = entityManager.createEntitiesByPath([\"主实体Id\",\"子表名s\"], entityListData: any[])\r\n *   entityManager.appendEntitiesByPath([\"主实体Id\",\"子表名s\"],childrenEntities);\r\n *   ```\r\n *\r\n * - 批量加载实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.loadEntities(entities:T[]);\r\n *   ```\r\n *\r\n *   > 加载实体会将本地仓库数据置为加载的实体。\r\n *\r\n * - 创建实体\r\n *\r\n *   ```javascript\r\n *   this.repository.buildEntity(JSON数据);\r\n *   ```\r\n *\r\n * - 批量创建实体\r\n *\r\n *   ```javascript\r\n *   this.repository.buildEntities(JSON数据);\r\n *   ```\r\n *\r\n * - 获取子表数据\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntityByPath([\"主实体Id\",\"子表名\",\"子表id\"]);\r\n *   ```\r\n *\r\n *   !> **注意** entityManager属性仅存在于BefRepository类，因此在使用EntityManager时应先将Repository转换为BefRepository\r\n *\r\n * - 获取所有子表数据\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntitiesByPath([\"主实体Id\",\"子表名\"]);\r\n *   ```\r\n *\r\n *   > EntityManager不仅可以获取子表数据，同样可以获取主表数据。\r\n *   >\r\n *   > ```javascript\r\n *   > entityManager.getEntitiesByPath([\"主实体Id\"]);\r\n *   > ```\r\n *\r\n * - 获取实体属性值\r\n *\r\n *   ```javascript\r\n *   const entity = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity['name'];\r\n *   // 或者\r\n *   const entity: any = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity.name;\r\n *   ```\r\n *\r\n * ## 后端交互\r\n *\r\n * ​\t通过接口操作后端数据，会直接对数据产生影响。\r\n *\r\n * - 更新实体数据\r\n *\r\n *   ```javascript\r\n *   this.repository.updateById('id');\r\n *   ```\r\n *\r\n * - 删除实体\r\n *\r\n *   ```javascript\r\n *   this.repository.removeById(\"id\");\r\n *   ```\r\n *\r\n * - 批量删除实体\r\n *\r\n *   ```javascript\r\n *   this.repository.removeByIds(ids:string[])\r\n *   ```\r\n *\r\n * - 删除下级表数据\r\n *\r\n *   ```javascript\r\n *   this.repository.removeByPath(['主表Id','子表名','子表Id'])\r\n *   ```\r\n *\r\n * - 新增主实体\r\n *\r\n *   ```javascript\r\n *   this.repository.append();\r\n *   ```\r\n *\r\n * - 新增子实体\r\n *\r\n *   ```javascript\r\n *   this.repository.appendByPath(['主表id','子表名']);\r\n *   ```\r\n *\r\n * - 加载实体数据\r\n *\r\n *   ```javascript\r\n *   this.repository.getById('id');\r\n *   ```\r\n *\r\n * - 获取主表数据\r\n *\r\n *   ```javascript\r\n *   this.repository.getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *\r\n *   ```\r\n *\r\n *   > pageSize、pageIndex可以不传。\r\n *\r\n * - 获取主表数据（POST方法）\r\n *\r\n *   ```javascript\r\n *   this.repository.filter(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *   ```\r\n *\r\n * - 提交指定实体变更到后端\r\n *\r\n *   ```javascript\r\n *   this.repository.updateChangesById(\"id\");\r\n *   ```\r\n *\r\n * - 提交所有变更\r\n *\r\n *   ```javascript\r\n *   this.repository.updateAllChanges();\r\n *   ```\r\n *\r\n * - 应用变更（保存）\r\n *\r\n *   ```javascript\r\n *   this.repository.applyChanges();\r\n *   ```\r\n *\r\n * - 取消变更\r\n *\r\n *   ```javascript\r\n *   this.repository.cancelChanges();\r\n *   ```\r\n *\r\n * - 清除Repository所有变更\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   befRepository.entityManager.clearAllEntityChanges();\r\n *   ```\r\n *\r\n * - 批量新增子表数据\r\n *   ```javascript\r\n *   this.repository.batchAppendByPath(path: string, defaultValues: Array<any>);\r\n *   ```\r\n *\r\n *   > path `string`：/主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > defaultValues `Array<any>`：新增从表时的默认值，数组，元素为对象，key为字段名，value为默认值。\r\n *\r\n * - 批量删除子表数据\r\n *\r\n *   ```javascript\r\n *   this.repository.batchRemoveByPath(path: string, ids: string);\r\n *   ```\r\n *\r\n *   > path `string`： /主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > ids `string` ：要删除的子表数据id，格式为`id1,id2,id3`\r\n */\r\n@Injectable()\r\nexport abstract class Repository<T extends Entity> implements IDisposable, OnDestroy {\r\n  // #region 私有属性\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  private innerName: string;\r\n\r\n  // #endregion\r\n\r\n  // #region 公有属性（共有属性不应该直接暴露，待包装）\r\n\r\n  /**\r\n   * API地址\r\n   */\r\n  public apiUri: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: any;\r\n\r\n  /**\r\n   * 实体类型信息\r\n   * @todo：实体层应该事先一个EntityTypeInfo，并继承DataTypeInfo。\r\n   */\r\n  public entityTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<T>;\r\n\r\n  /**\r\n   * 用户分页配置信息\r\n   */\r\n  public paginationInfo: any = null;\r\n\r\n  /**\r\n   * 数据变更历史（仅针对主表增加、各种表删除）\r\n   */\r\n  public dataChangeHistory: DataChangeHistory;\r\n\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  public filterConditionManager: FilterConditionManager;\r\n\r\n  // #endregion\r\n\r\n  // #region get/set方法\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public get primaryKey(): string {\r\n    return this.entityCollection.primaryKey;\r\n  }\r\n  public get changes(): Subject<Modification> {\r\n    return this.entityCollection.changes;\r\n  }\r\n  /**\r\n   * 实体变更集合\r\n   */\r\n  public get entityCollectionChange(): Subject<Modification> {\r\n    return this.entityCollection.collectionChanged;\r\n  }\r\n\r\n  /**\r\n   * 获取名称\r\n   */\r\n  public get name(): string {\r\n    // 1、老表单没有name属性\r\n    // 2、不能使用construcotr.name，压缩脚本会把name改掉，或者压缩成相同的名称（目前发现已知）\r\n    if (!this.innerName) {\r\n      const guid = UID.create();\r\n      this.innerName = `Repository_${guid}`;\r\n    }\r\n\r\n    return this.innerName;\r\n  }\r\n  /**\r\n   * 设置名称\r\n   */\r\n  public set name(value: string) {\r\n    this.innerName = value;\r\n  }\r\n\r\n  public paginationManager: PaginationManager<T>;\r\n  public destroy$: Subject<any>;\r\n  // #endregion\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.readMetadata();\r\n    if (this.entityType) {\r\n      this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n      this.entityCollection = new EntityCollection<T>(this.entityType);\r\n    }\r\n    this.dataChangeHistory = new DataChangeHistory();\r\n    this.sortConditionManager = new SortConditionManager();\r\n    this.filterConditionManager = new FilterConditionManager();\r\n    this.destroy$ = new Subject<any>();\r\n  }\r\n  dispose(options?: any) {\r\n    this.paginationManager = null;\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n    if (this.entityCollection) {\r\n      this.entityCollection.reset(false);\r\n      // this.entityCollection = null;\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  public updateEntityType(entityType: any) {\r\n    this.entityType = entityType;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection<T>(this.entityType);\r\n  }\r\n\r\n\r\n  /**\r\n   * 读取元数据\r\n   */\r\n  private readMetadata() {\r\n    const repositoryMetadata: NgRepository = MetadataUtil.getClassMetadataByName(this.constructor, 'NgRepository');\r\n    if (repositoryMetadata) {\r\n      // API地址\r\n      this.apiUri = repositoryMetadata.apiUrl;\r\n      // 实体类型\r\n      this.entityType = repositoryMetadata.entityType;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化分页配置\r\n   * @param config - 用户分页配置\r\n   */\r\n  setPaginationConfig(config: any) {\r\n    this.paginationManager = new PaginationManager(this.entityType, config);\r\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\r\n    // tslint:disable-next-line: max-line-length\r\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.paginationManager.pagination, this.entityCollection.paginationInfo);\r\n    // 无需再单独设置一次pageSize，减少一次变更\r\n    // this.entityCollection.pageSize = pageSize;\r\n  }\r\n  /**\r\n   * 重置状态\r\n   */\r\n  public reset(): void {\r\n    this.entityCollection.reset();\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   * @param data\r\n   */\r\n  public buildEntity(data: any): T {\r\n    const entity = createEntity<T>(this.entityType, data);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   * @param listData\r\n   */\r\n  public buildEntities(listData: any[]): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, listData);\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filters -    过滤条件\r\n   * @param sorts -      排序条件\r\n   * @param pagination - 分页信息\r\n   */\r\n  abstract getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter - 过滤条件\r\n   * @param sorts - 排序条件\r\n   * @param pageSize - 分页大小\r\n   * @param pageIndex - 当前分页\r\n   */\r\n  abstract filter(filter?: any[], sorts?: any[], pageSize?: number | null, pageIndex?: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  abstract getList(): Observable<T[]>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id - 实体标识\r\n   */\r\n  abstract getById(id: string): Observable<T>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id - 主实体id\r\n   */\r\n  abstract getEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path - 绑定路径\r\n   * @param ids - 绑定路径对应的主键\r\n   * @param filter - 过滤条件\r\n   * @param sort - 排序\r\n   */\r\n  abstract queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]>;\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id - 实体id\r\n   */\r\n  abstract updateById(id: string): Observable<T>;\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id - 实体主键\r\n   */\r\n  abstract updateEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 创建新实体，将该实体加载到列表\r\n   */\r\n  abstract create(): Observable<any>;\r\n\r\n  // /**\r\n  //  * 创建后代实体，将该实体加载到后代列表（暂无该场景）\r\n  //  * @param path 路径\r\n  //  */\r\n  // abstract createByPath(path: string);\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  abstract append(): Observable<any>;\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   * @param path - 实体路径\r\n   */\r\n  abstract appendByPath(path: string): Observable<any>;\r\n  /**\r\n   * 再指定位置插入数据\r\n   */\r\n  abstract insert(position: 1 | -1, defaultValue?: any): Observable<any>;\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path - 实体路径\r\n   */\r\n  abstract insertByPath(path: string, position: 1 | -1): Observable<any>;\r\n  /**\r\n   * 根据id删除对应实体\r\n   * @param id - 内码\r\n   */\r\n  abstract removeById(id: string, ifSave?: boolean): Observable<any>;\r\n\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param id - ids\r\n   * @param ifSave - 是否保存\r\n   * @deprecated 已废弃，该接口使用querystring传参，存在超长问题。请使用batchRemove接口替代。\r\n   */\r\n  abstract removeByIds(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids - ids\r\n   * @param ifSave - 是否保存\r\n   */\r\n  abstract batchRemove(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  abstract removeByPath(path: string, id: string);\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  abstract updateChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  abstract updateChangesByPath(path: string, id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  abstract updateAllChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  abstract applyChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  abstract applyChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  abstract cancelChanges(options?: any): Observable<boolean>;\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  abstract batchRemoveByPath(path: string, ids: string): Observable<boolean>;\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path - 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues - 默认实体数据数组\r\n   * @description 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  abstract batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any>;\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues - 默认实体数据数组\r\n   */\r\n  abstract batchAppend(defaultValues: Array<any>): Observable<any>;\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   */\r\n  abstract hasChanges(): Observable<any>;\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-28 15:46:07\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:53\r\n */\r\n\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from './repository';\r\nimport { EntityManager } from './entity_manager';\r\n\r\n/**\r\n * 空Repository实现\r\n */\r\n@Injectable()\r\nclass DefaultRepository<T extends Entity> extends Repository<T> {\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: EntityManager<T>;\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    // 初始化实体管理器\r\n    this.entityManager = new EntityManager(this.entityCollection);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getEntities(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  public filter(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getList(): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取子表分页的实体\r\n   * @param id 主实体id\r\n   */\r\n  public getEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path 绑定路径\r\n   * @param ids 绑定路径对应的主键\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id 实体主键\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public create(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  public append(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   */\r\n  public appendByPath(path: string): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 再指定位置插入数据\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path 实体路径\r\n   * @param position 插入位置\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id删除对应实体\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   */\r\n  public removeByIds(id: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  public removeByPath(path: string, id: string) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  public batchRemoveByPath(path: string, ids: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  public hasChanges(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nexport { DefaultRepository };\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable require-jsdoc */\r\n/* eslint-disable valid-jsdoc */\r\nimport {Injectable} from '@angular/core';\r\nimport {DataTypeInfo} from '../core/index';\r\nimport {Repository} from '../repository/index';\r\nimport {ExpressionUtil} from '../utils/expression_util';\r\nimport {ENTITY_TEMPLATE, IResolver} from './types';\r\n\r\n@Injectable()\r\nexport class EntityDependencyResolver implements IResolver {\r\n  private entityTypeInfo: DataTypeInfo;\r\n  constructor(private repository: Repository<any>) {\r\n    this.entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n  }\r\n  /**\r\n   * 解析用户表达式中的实体依赖\r\n   * @param expr 用户配置的完整表达式\r\n   * @returns\r\n   */\r\n  public resolve(expr: string): string[] {\r\n    const groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);\r\n    const entityDependencies = this.getEntityDependency(expr);\r\n    // 去除错误的到子表的依赖\r\n    if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {\r\n      groupFunctionDependencies.forEach((dep: string) => {\r\n        const index = entityDependencies.findIndex((item) => dep.startsWith(item));\r\n        if (index !== -1) {\r\n          entityDependencies.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n    // 去重\r\n    const merged = [...groupFunctionDependencies, ...entityDependencies];\r\n    const deps = [...new Set(merged)];\r\n    return deps;\r\n  }\r\n  /**\r\n   * 获取合法的实体属性表达式\r\n   * @param entityPropertyExpression 实体属性表达式\r\n   * @returns\r\n   */\r\n  private getValidEntityPropertyExpression(entityPropertyExpression: string): string[] {\r\n    const propPaths = entityPropertyExpression.split('.');\r\n    let propInfo = null;\r\n    try {\r\n      propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);\r\n    } catch (e) { }\r\n    if (!propInfo) {\r\n      if (propPaths.length > 1) {\r\n        propPaths.pop();\r\n        return this.getValidEntityPropertyExpression(propPaths.join('.'));\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return entityPropertyExpression.split('.');\r\n    }\r\n  }\r\n  /**\r\n   * 获取所有实体依赖\r\n   * @param expr 表达式字符串\r\n   * @returns\r\n   */\r\n  private getEntityDependency(expr: string): string[] {\r\n    const deps = [];\r\n    if (this.entityTypeInfo) {\r\n      // 使用正则匹配出所有实体\r\n      const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${this.entityTypeInfo.entityInfo.nodeCode}|${this.entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            return;\r\n          }\r\n          // 去空格\r\n          item = item.trim().replace(/\\\"/g, '');\r\n          const paths = ExpressionUtil.convertToNodeCode(item, this.repository.entityTypeInfo);\r\n          item = paths.join('.');\r\n          // 截去主实体及点\r\n          item = item.substr(item.indexOf('.') + 1);\r\n          const dep = this.getValidEntityPropertyExpression(item);\r\n          if (dep && Array.isArray(dep) && dep.length > 0) {\r\n            // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n    }\r\n    return deps;\r\n  }\r\n}\r\n","import { IResolver } from \"./types\";\r\nconst CONTEXT_FUNCTIONS = ['GetContextParameter', 'GetSessionValue'];\r\nexport class StateDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const deps = [];\r\n    const regex = new RegExp(`DefaultFunction\\\\.(${CONTEXT_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\r\n    const contextFunctions: RegExpMatchArray = expr.match(regex);\r\n    if (contextFunctions && contextFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      contextFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1].trim().replace(/\\\"/g,'');\r\n          const dep = ['STATE~'];\r\n          dep.push(argument);\r\n          deps.push(dep.join('/'));\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { IResolver } from \"./types\";\r\n/**\r\n * 用户自定义参数解析器\r\n */\r\n@Injectable()\r\nexport class CommentDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const dependencies = [];\r\n    if (!expr || expr.length < 1) {\r\n      return dependencies;\r\n    }\r\n    const defineRegex = /\\/\\*\\*\\s*__define__\\((.*)\\)\\s*\\*\\//;\r\n    const defineMatchArray: RegExpMatchArray = expr.match(defineRegex);\r\n    if (defineMatchArray && defineMatchArray.length === 2) {\r\n      const defineString: string = defineMatchArray[1].trim();\r\n      let defineObject = null;\r\n      try {\r\n        defineObject = JSON.parse(defineString);\r\n      } catch (e) { console.warn(`自定义依赖解析失败：${defineString}`); }\r\n      if (defineObject && defineObject.hasOwnProperty('deps') && Array.isArray(defineObject['deps'])) {\r\n        dependencies.push(...defineObject['deps']);\r\n      }\r\n    }\r\n    return dependencies;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { CommentDependencyResolver } from \"./comment_dependency_resolver\";\r\nimport { ResolverRegistry } from \"./resolver_registry\";\r\nimport { IResolver } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ResolveService {\r\n  constructor(private injector: Injector, private resolverRegistry: ResolverRegistry) { }\r\n  public resolve(expression: string) {\r\n    const deps: string[] = [];\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {\r\n      return;\r\n    }\r\n    // 优先使用用户自定义的依赖\r\n    const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver: IResolver) => resolver instanceof CommentDependencyResolver);\r\n    if (commentDependencyResolver) {\r\n      const commentDependencies = commentDependencyResolver.resolve(expression);\r\n      if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {\r\n        deps.push(...commentDependencies);\r\n      }\r\n    }\r\n    // 如果用户已经自定义了依赖，则不再计算\r\n    if (deps && deps.length > 0) {\r\n      return deps;\r\n    }\r\n    this.resolverRegistry.resolvers.forEach((resolver: IResolver) => {\r\n      // 再解析一次也可以，返回的依然是空数组\r\n      if (resolver instanceof CommentDependencyResolver) {\r\n        return;\r\n      }\r\n      const dependency = resolver.resolve(expression);\r\n      if (dependency && dependency.length > 0) {\r\n        deps.push(...dependency);\r\n      }\r\n    });\r\n    // 去重\r\n    return [...new Set(deps)];\r\n  }\r\n}","/* eslint-disable valid-jsdoc */\r\n/* eslint-disable require-jsdoc */\r\nimport { BindingData, BindingList } from '../binding-data/index';\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from '../core/index';\r\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from '../resolver/index';\r\n\r\nexport class ExpressionUtil {\r\n  public static getGroupFunctionDependency(expr: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    const deps = [];\r\n    // 获取聚合函数依赖项\r\n    const groupFunctionRegex = new RegExp(`DefaultFunction\\\\.(${GROUP_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\r\n    const groupFunctions: RegExpMatchArray = expr.match(groupFunctionRegex);\r\n    if (groupFunctions && groupFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      const methodNameRegex = /DefaultFunction\\.(\\S*)\\(/;\r\n      groupFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        const methodNameMatchResult = groupFunction.match(methodNameRegex);\r\n        let methodName = null;\r\n        if (methodNameMatchResult && methodNameMatchResult.length == 2) {\r\n          methodName = methodNameMatchResult[1];\r\n        }\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1];\r\n          const args = argument.split(',').map((p) => p.replace(/\\\"/g, ''));\r\n          if (args && args.length === 2) {\r\n            let item: any = args.join('.');\r\n            item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n            // 移除主表code\r\n            item = item.substr(item.indexOf('.') + 1);\r\n            const dep = item.split('.');\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          } else if (args && args.length === 3) {\r\n            if (methodName === 'MultiplyChildNumber') {\r\n              // support MultiplyChildNumber\r\n              // [Entity.childrens,prop1,prop2]\r\n              const prefix = args[0]; // like Entity.childrens\r\n              // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);\r\n              const prop1FullPath = `${prefix}.${args[1]}`;\r\n              const prop2FullPath = `${prefix}.${args[2]}`;\r\n              [prop1FullPath, prop2FullPath].forEach((item) => {\r\n                item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n                item = item.substr(item.indexOf('.') + 1);\r\n                const dep = item.split('.');\r\n                dep.splice(0, 0, ENTITY_TEMPLATE);\r\n                deps.push(dep.join('/'));\r\n              });\r\n            } else if (methodName === 'IsContainMatch' || methodName === 'SortChildData') {\r\n              // [Entity.childrens,prop1,prop2]\r\n              const prefix = args[0]; // like Entity.childrens\r\n              // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);\r\n              let item = `${prefix}.${args[1]}`;\r\n              item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n              item = item.substr(item.indexOf('.') + 1);\r\n              const dep = item.split('.');\r\n              dep.splice(0, 0, ENTITY_TEMPLATE);\r\n              deps.push(dep.join('/'));\r\n            }\r\n          } else if (args && args.length === 4) {\r\n\r\n          } else if (args && args.length === 5) {\r\n            if (['MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'].includes(methodName)) {\r\n              // [Entity.childrens,prop1,prop2]\r\n              const prefix = args[0]; // like Entity.childrens\r\n              // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);\r\n              const prop1FullPath = `${prefix}.${args[1]}`;\r\n              const prop2FullPath = `${prefix}.${args[2]}`;\r\n              [prop1FullPath, prop2FullPath].forEach((item) => {\r\n                item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n                item = item.substr(item.indexOf('.') + 1);\r\n                const dep = item.split('.');\r\n                dep.splice(0, 0, ENTITY_TEMPLATE);\r\n                deps.push(dep.join('/'));\r\n              });\r\n            }\r\n          } else {\r\n            throw new Error(`无法解析参数： ${JSON.stringify(argument)}`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n  /**\r\n   * 将voCode转换为前端nodeCode\r\n   * @param entityExpression like Entity.Child.p1\r\n   * @returns\r\n   */\r\n  public static convertToNodeCode(entityExpression: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    // UserEntity.storys.p1\r\n    const nodeCodes = [];\r\n    if (entityTypeInfo && entityExpression.includes('.')) {\r\n      const entityExpressions = entityExpression.split('.') || [];\r\n      let dataTypeInfo = entityTypeInfo;\r\n      for (let index = 0; index < entityExpressions.length; index++) {\r\n        const prop = entityExpressions[index];\r\n        if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {\r\n          // 第一个是主表code，不能转nodeCode\r\n          if (index === 0) {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.originalCode);\r\n          } else {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);\r\n          }\r\n\r\n          // 下一级可能为子表、对象或属性\r\n          const nextNodeCode = entityExpressions[index + 1];\r\n          if (!nextNodeCode) {\r\n            break;\r\n          }\r\n          const nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);\r\n          if (!nextNodeCodePropInfo) {\r\n            break;\r\n          }\r\n          // 下一级为子表或对象\r\n          if (nextNodeCodePropInfo.typeInfo) {\r\n            dataTypeInfo = nextNodeCodePropInfo.typeInfo;\r\n          }\r\n        } else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {\r\n          const dataPropInfo = dataTypeInfo.getPropInfoByName(prop);\r\n          nodeCodes.push(dataPropInfo.name);\r\n        } else {\r\n          // throw new Error(`错误的属性参数 ${entityExpression}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo\r\n   * @param results\r\n   * @param paths\r\n   */\r\n  public static getChildrenEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        if (paths.length === 0) {\r\n          results.push([dataPropInfo.name]);\r\n        }\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          paths.push(dataPropInfo.name);\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          if (paths.length !== 0) {\r\n            paths.push(dataPropInfo.name);\r\n            results.push([...paths]);\r\n          }\r\n          paths.length = 0;\r\n        }\r\n      });\r\n    } else {\r\n      if (paths.length > 0) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n        results.push([...paths]);\r\n      }\r\n      paths.length = 0;\r\n    }\r\n  }\r\n  /**\r\n   * 获取指定绑定路径的当前行数据\r\n   * @param paths 绑定路径\r\n   * @param bindingData\r\n   * @returns\r\n   */\r\n  public static getCurrentRowByPaths(paths: string[], bindingData: BindingData): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      const primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      // 主表或下级表新增，此时事件行就是当前行，无需处理\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 从实体路径中获取级数最大的从表或从从表\r\n   * @param paths\r\n   * @returns\r\n   */\r\n  public static getAvailableChildrenPathsFromEntityPaths(paths: string[], entityTypeInfo: DataTypeInfo): string[] {\r\n    let nodeCodes = [];\r\n    paths = [...paths];\r\n    while (paths.length > 0) {\r\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n      if (dataPropInfo && dataPropInfo.group === 'List') {\r\n        nodeCodes = paths;\r\n        break;\r\n      }\r\n      paths.pop();\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 从路径中获取绑定路径\r\n   * @param paths 路径\r\n   * @param entityTypeInfo entityTypeInfo\r\n   * @returns\r\n   */\r\n  public static getBindingPath(paths: string[], entityTypeInfo: DataTypeInfo) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  public static getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n}\r\n","import { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\n\r\nexport class DataTypeInfoUtil {\r\n  /**\r\n   * 递归获取实体的所有下级实体编号\r\n   * @param dataTypeInfo \r\n   * @param results \r\n  */\r\n  public static getChildrenNodeCodes(dataTypeInfo: DataTypeInfo, results: any[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        results.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            results.push(dataPropInfo.name);\r\n            this.getChildrenNodeCodes(dataPropInfo.typeInfo, results);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { ElementRef, Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { MetadataUtil, PROP_METADATA } from '../metadata/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { BindingData, Change, ChangeType, BindingObject } from '../binding-data/index';\r\nimport { ValidateRule, Validation } from '../entity/validator/types';\r\nimport {\r\n  NG_FORM_CONTROL, NgFormControl,\r\n  NG_CHILD_FORM, NgChildForm,\r\n  NgValidateForm, NG_VALIDATE_FORM\r\n} from './decorators';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { DateUtil } from '../utils/index';\r\nimport { Translate } from '../i18n/translate';\r\nimport { ValidationTypes } from '../entity/validator/validation_types';\r\nimport { ValidationExecutor } from '../entity/validator/validation_executor';\r\nimport * as ValidatorJS from 'validator';\r\nimport { ValidationError } from '../entity';\r\nimport { DataPropInfo, DataTypeInfo, RunMode } from '../core';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { RuleType } from './types';\r\nimport { IDisposable } from '../core';\r\nimport { Subject } from 'rxjs';\r\nimport { parseISO } from 'date-fns';\r\n/**\r\n * 表单定义\r\n */\r\n@Injectable()\r\nclass Form extends FormGroup implements IDisposable, OnDestroy {\r\n\r\n  /**\r\n   * 存放所有实例的映射\r\n   */\r\n  static insMap: {\r\n    [formName: string]: Form\r\n  } = {};\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public get formGroupName() {\r\n    return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';\r\n  }\r\n\r\n  /**\r\n   * 是否启用表单验证\r\n   */\r\n  public get enableValidate() {\r\n    return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;\r\n  }\r\n\r\n  public get translateService(): Translate {\r\n    return this.translate;\r\n  }\r\n  /**\r\n   * 排除的校验规则类型\r\n   */\r\n  // private excludeRuleTypes: { [propertyName: string]: string[] };\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    super({}, null, null);\r\n    this.controlIdMap = {};\r\n    this.cardControls = {};\r\n    this.isShowPropMap = {};\r\n    this.destroy$ = new Subject<any>();\r\n    // this.excludeRuleTypes = {};\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n    Form.insMap[this.constructor.name] = null;\r\n    this.frameContext = null;\r\n    this.bindingData = null;\r\n    this.ngChildForms = null;\r\n    this.metaDatas = null;\r\n    this.ngFormControls = {};\r\n    this.controls = {};\r\n    this.disposeValidation();\r\n  }\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  protected bindingData: BindingData;\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  protected bindingPath: string;\r\n  /**\r\n   * Form描述\r\n   */\r\n  private ngValidateForm: NgValidateForm;\r\n  /**\r\n   * 结构描述：FormControl\r\n   */\r\n  public ngFormControls: { [propName: string]: NgFormControl };\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metaDatas: { [propName: string]: any };\r\n  /**\r\n   * 结构描述：FormGroup\r\n   */\r\n  private ngChildForms: { [propName: string]: NgChildForm };\r\n  /**\r\n   * 存放某条数据下的属性错误信息\r\n   */\r\n  private controlIdMap: {\r\n    [id: string]: {\r\n      [propName: string]: object\r\n    }\r\n  };\r\n  /**\r\n   * 用于存储属性错误\r\n   */\r\n  private cardControls: object;\r\n  private raisedByValidateEffector = false;\r\n  public isShowValidationMsg = false;\r\n\r\n  // 属性在页面上展示状态的map,key是html中使用的属性名\r\n  public isShowPropMap: {\r\n    [domPropertyName: string]: boolean\r\n  };\r\n\r\n  private translate: Translate;\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  private destroy$: Subject<any>;\r\n  /**\r\n   * 将formControl的错误信息更新到cardControl上\r\n   */\r\n  static updateErrors(propertyName, errorObj, id, value?, isGrid?) {\r\n    Object.keys(Form.insMap).forEach(key => {\r\n      const form = Form.insMap[key];\r\n      if (!form) {\r\n        return;\r\n      }\r\n      if (id) {\r\n        form.setControlValue(propertyName, value);\r\n      }\r\n      if (form.enableValidate) {\r\n        form.isFormValid(propertyName, errorObj, id, isGrid);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 设置dom属性为显示状态\r\n   * @param domPropertyName dom属性\r\n   */\r\n  public setIsShowmap(domPropertyName: string) {\r\n    this.isShowPropMap[domPropertyName] = true;\r\n  }\r\n\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.raisedByValidateEffector = false;\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n\r\n  public setControlValue(key: string, value: any) {\r\n    const bindingObject: BindingObject = this.bindingData && this.bindingData.getObject() || null;\r\n    if (bindingObject && bindingObject.controlMap) {\r\n      bindingObject.controlMap[key] = this.getGridItemControl(key, value);\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性名称获取错误信息\r\n   * @param domPropertyName dom属性名称\r\n   */\r\n  public getCardControlErrors(domPropertyName?: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  /**\r\n   * 获取字段校验错误\r\n   * @param domPropertyName \r\n   * @returns \r\n   */\r\n  public getFormControlErrors(domPropertyName?: string) {\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  public getGridControlErrors(domPropertyName: string, id: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];\r\n  }\r\n\r\n  public isFormValid(propertyName?: string, errorObj?: object, id?: string, isGrid?: boolean): boolean {\r\n    let prefix = '';\r\n    // 如果校验信息是由表达式触发的，不处理\r\n    if (this.raisedByValidateEffector) {\r\n      return;\r\n    }\r\n    const isGridComponent = this.frameContext.frameComponent.isGridComponent;\r\n    if (isGridComponent !== undefined) {\r\n      isGrid = isGridComponent;\r\n    }\r\n    //拼接子表frontNodeCode\r\n    const bindingPaths = this.bindingPath.split('/').filter(p => p);\r\n    if (bindingPaths.length > 0) {\r\n      prefix = bindingPaths.join('.').concat('.');\r\n    }\r\n    // 界面上绑定的字段名\r\n    const domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);\r\n    // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件\r\n    if (propertyName && !domPropertyName) {\r\n      return true;\r\n    }\r\n    // 若界面上不存在当前属性（动态列），不进行验证\r\n    if (domPropertyName && !this.isShowPropMap[domPropertyName]) {\r\n      return true;\r\n    }\r\n    let isValid = true;\r\n    const bindingObject = this.bindingData.getObject();\r\n    const currentId = bindingObject.primaryKeyValue;\r\n    const isSubForm = this.bindingPath !== '/';\r\n    const bindingList = this.bindingData.getList();\r\n\r\n    // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况\r\n    if (isSubForm && bindingList.innerList.size === 0) {\r\n      return true;\r\n    }\r\n    // 无数据时不做校验\r\n    if (!currentId) {\r\n      return true;\r\n    }\r\n    // dataGrid修改时，根据id，创建formControl，并设置错误对象\r\n    if (id && domPropertyName) {\r\n      // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {\r\n      //   this.controlIdMap[id] = {};\r\n      // }\r\n      this.controlIdMap[id] = this.controlIdMap[id] || {};\r\n      this.controlIdMap[id][domPropertyName] = {\r\n        errors: errorObj\r\n      };\r\n    }\r\n\r\n    // 将grid的FormControl同步到界面展示用的controlIDMap中\r\n    // const currentBindingObject = bindingList.currentItem as BindingObject;\r\n    const currentBindingObject: BindingObject = bindingObject;\r\n\r\n    if (id && id !== currentId) {\r\n      return;\r\n    }\r\n\r\n    // 验证全部字段时，清空已有的错误信息\r\n    if (!propertyName && !id) {\r\n      currentBindingObject.controlMap = {};\r\n      this.controlIdMap = {};\r\n      this.cardControls = {};\r\n    }\r\n    Object.keys(this.controls).forEach((key) => {\r\n      if (this.isShowPropMap[key] !== true) {\r\n        return;\r\n      }\r\n      // 同步实体错误信息\r\n      if (key === domPropertyName) {\r\n        // 实体验证的信息直接赋值\r\n        if (errorObj && Object.keys(errorObj).length > 0) {\r\n          // 卡片的错误\r\n          if (!isGrid) {\r\n            // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息\r\n            // 遍历错误，将validator返回的错误信息国际化\r\n            Object.keys(errorObj).map((validType: any) => {\r\n              const validationError: ValidationError = errorObj[validType] && errorObj[validType]['error'] || null;\r\n              if (validationError) {\r\n                const validateRule: ValidateRule = validationError.rule;\r\n                const ngFormControl = this.getngFormControlByBinding(validateRule.field);\r\n                if (ngFormControl) {\r\n                  validateRule.property = ngFormControl.name || ngFormControl.defaultI18nValue;\r\n                  validateRule.targetId = ngFormControl.id;\r\n                  validateRule.targetName = this.formGroupName;\r\n                  // 修正校验必填表达式类型和多语资源中key不一致的问题\r\n                  const fixedValidType = validType === 'require' ? 'required' : validType;\r\n                  const messageTemplate = ValidationTypes.getMessage(fixedValidType);\r\n                  if (messageTemplate) {\r\n                    const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);\r\n                    errorObj[validType]['name'] = invalidMessage;\r\n                  }\r\n                }\r\n                // todo: ngFormControl暂时不设置\r\n                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);\r\n              }\r\n            });\r\n            this.cardControls[key] = {\r\n              errors: errorObj\r\n            };\r\n          }\r\n        } else {\r\n          this.cardControls[key] = {};\r\n        }\r\n      }\r\n      if (this.controls[key] && this.controls[key].errors && Object.keys(this.controls[key].errors).length > 0) {\r\n        // 将错误同步到界面展示的位置\r\n        // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息\r\n        this.cardControls[key] = {\r\n          errors: {\r\n            ...this.cardControls[key] && this.cardControls[key].errors,\r\n            ...this.controls[key].errors\r\n          }\r\n        };\r\n        isValid = false;\r\n      }\r\n    });\r\n    // 处理只开启前端校验，未在BE上启用必填校验的情况\r\n    if (this.cardControls) {\r\n      Object.keys(this.cardControls).forEach(key => {\r\n        if (this.cardControls[key] && this.cardControls[key].errors) {\r\n          Object.keys(this.cardControls[key].errors).forEach(validType => {\r\n            if (typeof this.cardControls[key].errors[validType] !== 'object') {\r\n              // 获取对应的校验信息\r\n              const validateRules: ValidateRule | ValidateRule[] = this.ngFormControls[key].validRules || [];\r\n              const rules: ValidateRule[] = [].concat(validateRules);\r\n              const validateRule: ValidateRule = rules.find(item => item.type === validType);\r\n              if (validateRule) {\r\n                validateRule.targetName = this.formGroupName;\r\n                const messageTemplate = ValidationTypes.getMessage(validType);\r\n                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');\r\n                this.cardControls[key].errors[key] = { value: this.controls[key] && this.controls[key].value || '', name: invalidMessage };\r\n              }\r\n            }\r\n          })\r\n        }\r\n      });\r\n    }\r\n    Object.keys(this.cardControls).forEach((key) => {\r\n      if (this.cardControls[key] && this.cardControls[key].errors && Object.keys(this.cardControls[key].errors).length > 0) {\r\n        isValid = false;\r\n      }\r\n    });\r\n    return isValid;\r\n  }\r\n  /**\r\n   * 更新表单错误信息\r\n   * @param errors 错误消息\r\n   */\r\n  public updateFormErrors(errors: { [domPropertyName: string]: { errors: { [ruleType: string]: { name: string, [prop: string]: any } } } }, forceShow: boolean = false, from: string = '') {\r\n    if (from && from === 'backend') {\r\n      this.clearBackendError();\r\n    }\r\n    // 原来是否已经显示错误，如果已经显示了则增加，否则替换\r\n    if (this.isShowValidationMsg === true || forceShow === true) {\r\n      this.isShowValidationMsg = true;\r\n      Object.keys(errors).forEach((key: string) => {\r\n        if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {\r\n          // 如果控件本身没有错误，则直接使用外部传递过来的错误，否则合并错误\r\n          this.cardControls[key] = {\r\n            errors: {\r\n              ...this.cardControls[key] && this.cardControls[key].errors,\r\n              ...errors[key].errors\r\n            }\r\n          };\r\n        } else {\r\n          // 移除内存中的错误信息\r\n          this.cardControls[key] = {\r\n            errors: {}\r\n          };\r\n          // 重置控件错误信息\r\n          this.controls[key].setErrors(null);\r\n          this.controls[key].markAsTouched();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 清空后端消息\r\n   */\r\n  public clearBackendError() {\r\n    Object.keys(this.cardControls).forEach(key => {\r\n      const errors = this.cardControls[key] && this.cardControls[key].errors || null;\r\n      if (errors) {\r\n        Object.keys(errors).forEach(errorType => {\r\n          if (errorType && errorType.startsWith('backend-message-')) {\r\n            delete errors[errorType];\r\n          }\r\n        });\r\n        if (errors && Object.keys(errors).length === 0) {\r\n          delete this.cardControls[key].errors;\r\n        }\r\n      } else {\r\n        this.cardControls[key] = {};\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 根据实体属性获取ngFormControl\r\n   * @param binding 控件绑定的实体属性名\r\n   */\r\n  private getngFormControlByBinding(binding: string) {\r\n    return Object.values(this.ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl.binding && ngFormControl.binding === binding);\r\n  }\r\n  private disposeValidation() {\r\n    const properties = this.constructor[PROP_METADATA];\r\n    if (properties && Object.keys(properties).length > 0) {\r\n      Object.keys(properties).forEach((key: string) => {\r\n        const props = this.constructor[PROP_METADATA][key] as any[];\r\n        if (props && props.length > 0) {\r\n          props.forEach((item) => {\r\n            if (item.validRules && Array.isArray(item.validRules) && item.validRules.length > 0) {\r\n              item.validRules = item.validRules.filter(item => !(item.eval && typeof (item.eval) === 'function'));\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性和校验类型获取错误信息\r\n   * @param domProperty dom属性\r\n   * @param validateRuleType 校验类型\r\n   */\r\n  private getErrorMessage(domProperty: string, validateRuleType: string) {\r\n    const formControl = this.ngFormControls[domProperty];\r\n    if (formControl) {\r\n      const validRules = formControl.validRules;\r\n      const rules = [];\r\n      if (!Array.isArray(validRules)) {\r\n        rules.push(validRules);\r\n      } else {\r\n        rules.push(...validRules);\r\n      }\r\n      const rule = rules.find(item => item.type === validateRuleType);\r\n      if (rule) {\r\n        const controlName = formControl.name;\r\n        const messageTemplate = ValidationTypes.getMessage(validateRuleType);\r\n        const message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);\r\n        return message;\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 初始化Form\r\n   * @param context 上下文\r\n   */\r\n  public init(bindingData: BindingData, bindingPath: string, frameContext?: FrameContext) {\r\n    this.frameContext = frameContext;\r\n    this.bindingData = bindingData;\r\n    this.bindingPath = bindingPath;\r\n    // 校验信息变化时重置卡片校验信息\r\n    if (this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.verifycationChanged) {\r\n      this.frameContext.viewModel.verifycationChanged.subscribe((verifycations: any[]) => {\r\n        if (!verifycations || verifycations.length < 1) {\r\n          this.resetCardValidMsg();\r\n        }\r\n      });\r\n    }\r\n    this.buildForm();\r\n    // @todo: 这种方式做key，如果脚本被压缩，存在风险\r\n    Form.insMap[this.constructor.name] = this;\r\n  }\r\n  /**\r\n   * 构造表单\r\n   */\r\n  public buildForm() {\r\n    this.collectMetadatas();\r\n    // this.createChildFormArrays();\r\n    this.createChildForms();\r\n    this.createControls();\r\n  }\r\n\r\n  /**\r\n   * 重置表单验证信息\r\n   */\r\n  public resetCardValidMsg(): void {\r\n    this.cardControls = {};\r\n    // 剔除 列表中新增后取消,删除的项对应的control信息\r\n    Object.keys(this.controlIdMap).forEach(id => {\r\n      if (!this.bindingData.getList().innerList.map(x => x.id).includes(id)) {\r\n        delete this.controlIdMap[id];\r\n      }\r\n    });\r\n    this.resetFormControls();\r\n    this.setShowValidationMsg(false);\r\n  }\r\n  /**\r\n   * 更新字段校验规则\r\n   * @param propertyName 属性名\r\n   * @param isRequired 是否必填\r\n   */\r\n  public updateFieldValidateRule(propertyName: string, isRequired: boolean) {\r\n    if (!propertyName) {\r\n      return;\r\n    }\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n\r\n    // 清空全部校验条件\r\n    if (formControl) {\r\n      formControl.clearValidators();\r\n      formControl.markAsUntouched();\r\n      formControl.markAsPristine();\r\n      formControl.setErrors([]);\r\n    }\r\n    // 动态必填场景时生成器不再在formControl上生成必填规则\r\n    // 因此validRules可能为空\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules: ValidateRule | ValidateRule[] = ngFormControl && ngFormControl.validRules || [];\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const requiredRuleIndex = validateRules.findIndex((validateRule: ValidateRule) => validateRule.type === ValidationTypes.REQUIRED);\r\n    if (isRequired) {\r\n      // 必填但控件没有必填规则，添加必填规则\r\n      if (requiredRuleIndex == -1) {\r\n\r\n        const validateRule: ValidateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };\r\n        // 扩展属性，以生成正确的错误提示\r\n        const displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';\r\n        validateRule.targetId = ngFormControl && ngFormControl.id || null;\r\n        validateRule.targetName = this.formGroupName;\r\n        validateRule.property = displayFieldName;\r\n        validateRule.field = ngFormControl && ngFormControl.binding;\r\n        validateRules.push(validateRule);\r\n      }\r\n    } else {\r\n      // 非必填场景，如果有必填规则，移除\r\n      if (requiredRuleIndex !== -1) {\r\n        validateRules.splice(requiredRuleIndex, 1);\r\n      }\r\n    }\r\n    // 整理校验规则\r\n    const validators: ValidatorFn[] = [];\r\n    Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n      const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n      if (validateFn) {\r\n        validators.push(validateFn);\r\n      }\r\n    }));\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    this.controls[propertyName].setValidators(validators);\r\n  }\r\n  public addFieldValidateRule(propertyName: string, message: string, expressionId: string, ruleType: RuleType) {\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n    if (formControl) {\r\n      // 清空全部校验条件\r\n      formControl.setErrors(null);\r\n    }\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules = this.ngFormControls[propertyName].validRules;\r\n    if (!validateRules) {\r\n      validateRules = [];\r\n    }\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const index = validateRules.findIndex((rule: ValidateRule) => rule && rule.expressionId === expressionId);\r\n    if (index !== -1) {\r\n      validateRules.splice(index, 1);\r\n    }\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    let fieldName = propertyName;\r\n    if (bindingPaths.length !== 0) {\r\n      const prefix = bindingPaths.join('/');\r\n      const binding = ngFormControl.binding || '';\r\n      const property = binding.split('.').join('/');\r\n      fieldName = `${prefix}/${property}`;\r\n    }\r\n    const context = this.frameContext;\r\n    const validateRule: ValidateRule = {\r\n      type: ruleType,\r\n      message: message,\r\n      expressionId: expressionId,\r\n      constraints: [],\r\n      bindingPath: bindingPaths.join('/'),\r\n      eval: function (options?: any) {\r\n        return context.viewModel.expression.validate(expressionId, options);\r\n      }\r\n    };\r\n    validateRules.push(validateRule);\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    // if (this.ngFormControls[propertyName] && validateRules.length > 0) {\r\n    //   const validators: ValidatorFn[] = [];\r\n    //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n    //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n    //     if (validateFn) {\r\n    //       validators.push(validateFn);\r\n    //     }\r\n    //   }));\r\n    //   this.controls[propertyName].setValidators(validators);\r\n    // }\r\n  }\r\n  /**\r\n   * 根据规则对象生成validator\r\n   * @param ruleObj: ValidateRule\r\n   */\r\n  private getValidatorByRuleObj(ruleObj: ValidateRule, ngFormControl: NgFormControl): ValidatorFn {\r\n    const { type, constraints = [], message = null } = ruleObj;\r\n    const displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n    const ruleHandlerObj = {\r\n      required: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = control.value;\r\n        let isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n        const parentPaths = this.bindingPath.split('/').filter(p => p);\r\n        const controlPaths = ngFormControl.binding.split('.');\r\n        const paths = parentPaths.concat(controlPaths);\r\n        const propInfo = this.getPropInfoByPath(paths);\r\n        const isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;\r\n        if (isMultiLangInput) {\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const currentLangValue = value && value[currentLanguage];\r\n          isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';\r\n        }\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        if (isValid && control.errors && control.errors.required) {\r\n          // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题\r\n          delete control.errors.required;\r\n          this.isFormValid(paths.join('.'));\r\n        }\r\n        return isValid ? null : { required: { value: control.value, name: invalidMessage } };\r\n      },\r\n      maxLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length > constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length < constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        // 这里只做最小值判断，如果用户未输入则不应该做判断\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value < constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const minValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = minValue.isGreaterThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);\r\n          // 假定为日期\r\n          // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或\"\"，则不对比大小，无意义\r\n          if (!constraints || constraints.length < 1 || !constraints[0]) {\r\n            return null;\r\n          }\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value < parseISO(constraints[0]);\r\n          } else {\r\n            isInValid = parseISO(control.value) < parseISO(constraints[0]);\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      maxValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value > constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const maxValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = maxValue.isLessThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          // 假定为日期\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;\r\n          } else {\r\n            isInValid = new Date(control.value) > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      exclude: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isValid = typeof control.value === 'string' && !this.validatorJs.contains(control.value, constraints[0]);\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };\r\n      },\r\n      matches: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = (control.value === null || control.value === undefined) ? '' : control.value.toString();\r\n        const isValid = value === '' ? true : this.validatorJs.matches(value, constraints[0]);\r\n        let invalidMessage = message;\r\n        if (!invalidMessage) {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n\r\n        return isValid ? null : { matches: { value: control.value, name: invalidMessage } }\r\n      }\r\n    };\r\n    return ruleHandlerObj[type];\r\n  }\r\n\r\n  /**\r\n   * 搜集属性装饰器\r\n   */\r\n  private collectMetadatas() {\r\n    this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :\r\n      MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM,\r\n        this.translateService, ['formGroupName']);\r\n    this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);\r\n    this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);\r\n  }\r\n\r\n  private collectionFormControlMetadats(preloadMetadata: { [propName: string]: NgFormControl } = null): { [propName: string]: NgFormControl } {\r\n    const metadatas = preloadMetadata ? MetadataUtil.translateMetadatasByName(preloadMetadata, this.translateService, ['name']) :\r\n      MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);\r\n    // 向验证规则中附加表单信息，用于显示验证提示。\r\n    if (metadatas) {\r\n      Object.keys(metadatas).forEach((propName: string) => {\r\n        const ngFormControl = metadatas[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const formControlId = ngFormControl.id;\r\n        if (Array.isArray(ngFormControl.validRules)) {\r\n          ngFormControl.validRules.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = formControlId;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return metadatas;\r\n  }\r\n\r\n  // 获取grid中每条数据的formControl\r\n  getGridItemControl(propName: string, value: any) {\r\n    const createControlFromRules = propertyName => {\r\n      const validators = [];\r\n      // 设置form中定义的验证规则\r\n      if (this.ngFormControls[propertyName] && Array.isArray(this.ngFormControls[propertyName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propertyName].validRules, ((ruleObj) => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n      return new FormControl(value, { validators: validators, updateOn: 'blur' });\r\n    };\r\n    return createControlFromRules(propName);\r\n  }\r\n\r\n  // 根据实体属性名获取界面绑定的属性名\r\n  getDomPropertyNameByEntityProp(propertyName: string, prefix: string = ''): string {\r\n    let domPropertyName = '';\r\n    Object.keys(this.ngFormControls).forEach(key => {\r\n      const binding = `${prefix}${this.ngFormControls[key].binding}`;\r\n      if (binding === propertyName) {\r\n        domPropertyName = key;\r\n      }\r\n    });\r\n    return domPropertyName;\r\n  }\r\n\r\n  /**\r\n   * 创建FormControl\r\n   */\r\n  createControls() {\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      const validators: ValidatorFn[] = [];\r\n\r\n      // 设置form中定义的验证规则\r\n      if (Array.isArray(this.ngFormControls[propName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propName].validRules, (ruleObj => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n\r\n      const updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';\r\n      const control = new FormControl(null, { validators: validators, updateOn: updateOn });\r\n      if (ngFormControl.binding) {\r\n        this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);\r\n      }\r\n      this.controls[propName] = control;\r\n      this[propName] = control;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建FormGroup\r\n   */\r\n  createChildForms() {\r\n    Object.keys(this.ngChildForms).forEach((propName: string) => {\r\n      const ngFormGroup = this.ngChildForms[propName];\r\n\r\n      // 构造子Form\r\n      const formGroup = new ngFormGroup.formType();\r\n      formGroup.init(this.bindingData, this.bindingPath, this.frameContext);\r\n\r\n      this.controls[propName] = formGroup;\r\n      this[propName] = formGroup;\r\n    });\r\n  }\r\n  /*\r\n  * 新增FormControls\r\n   */\r\n  addControls(column: any, converter?: ControlValueConverter) {\r\n\r\n    const updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';\r\n    const formControl = new FormControl('', { updateOn: updateOn });\r\n    const fieldPath = column.dataField;\r\n\r\n    // 日期格式  需要格式化\r\n    // this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n    if (column.editor && column.editor.binding) {\r\n      this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n      this.controls[column.editor.binding.path] = formControl;\r\n      this[column.editor.binding.path] = formControl;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 搭建control和table之间的通道\r\n   * @param control 控件\r\n   * @param bindingFieldPath 绑定的字段名\r\n   */\r\n  private setUpBindingDataPipeline(control: FormControl, bindingFieldPath, converter?: ControlValueConverter) {\r\n\r\n    if (!this.bindingData) {\r\n      throw Error('当前组件上下文中找不到BindingData，请检查！');\r\n    }\r\n\r\n    // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息\r\n    // __FRAME_CONTEXT__ 未使用\r\n    /*if (converter) {\r\n      converter['__FRAME_CONTEXT__'] = this.frameContext;\r\n    }*/\r\n\r\n    // 将bindignPath与bindingFieldPath合并\r\n    if (this.bindingPath.length > 1) {\r\n      bindingFieldPath = this.bindingPath.substr(1).replace(/\\//g, '.') + '.' + bindingFieldPath;\r\n    }\r\n    const bindingPaths: string[] = bindingFieldPath.split('.');\r\n    const propertyName = bindingPaths[bindingPaths.length - 1];\r\n    // 设置初始值\r\n    const initValue = this.getValueFromBindingData(bindingPaths, converter);\r\n    control.setValue(initValue);\r\n\r\n    // 设置初始值\r\n\r\n    // BindingData => control\r\n    this.bindingData.changes.pipe(takeUntil(this.destroy$)).pipe(filter((change: Change) => {\r\n      const bindingObject = this.bindingData.getObject();\r\n      const changePath = change.path.join('.');\r\n      if (change.isUdt) {\r\n        return changePath === bindingFieldPath;\r\n      }\r\n      if (change.type === ChangeType.ValueChanged) {\r\n        // path完全匹配\r\n        return changePath === bindingFieldPath;\r\n      } else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {\r\n        // 对于ObjectChanged、SelectionChanged，匹配到父级\r\n        const changePathWithDot = changePath === '' ? changePath : changePath + '.';\r\n        // 主表新增或切换时，重置错误信息\r\n        if (change && change.type === ChangeType.Load) {\r\n          this.resetCardValidMsg();\r\n        }\r\n        return bindingFieldPath.indexOf(changePathWithDot) === 0;\r\n      } else if (change.type === ChangeType.UpdateErrors) {\r\n        if (changePath === bindingFieldPath) {\r\n          this.cardControls[propertyName] = this.cardControls[propertyName] || {};\r\n          if (bindingFieldPath && this.controls[propertyName]) {\r\n            if (bindingObject.primaryKeyValue === change.id) {\r\n              this.cardControls[propertyName].errors = change.errors;\r\n            } else {\r\n              // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面\r\n              // this.cardControls[propertyName].errors = null;\r\n              // this.isFormValid(bindingFieldPath);\r\n            }\r\n          }\r\n          // 没有错误时\r\n          if (!change.path || !bindingFieldPath || !change.errors) {\r\n            this.cardControls[propertyName].errors = null;\r\n            this.isFormValid(bindingFieldPath);\r\n          }\r\n          return false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    })).subscribe((change: Change) => {\r\n      let fullEntityProp = propertyName;\r\n      // udt字段展示时需要将父级属性名和自身属性名用'_'连接\r\n      let pathPrefix = '';\r\n      if (change.isUdt) {\r\n        if (change.isGrid) {\r\n          // grid 将从表主字段去除\r\n          change.path.shift();\r\n        }\r\n        if (change.path.length) {\r\n          pathPrefix = change.path.join('.');\r\n        }\r\n        fullEntityProp = pathPrefix;\r\n      }\r\n\r\n      const value = this.bindingData.getValue(bindingPaths, false);\r\n      const newControlValue = converter ? converter.convertFrom(value) : value;\r\n      // 设置FormControl\r\n      const domPropName = this.getDomPropertyNameByEntityProp(fullEntityProp);\r\n      this.cardControls[domPropName] = this.cardControls[domPropName] || {};\r\n      if (change.errors) {\r\n        this.cardControls[domPropName].errors = change.errors;\r\n      }\r\n      // dataGrid保存时，根据id，创建formControl，并设置错误对象\r\n      if (change.id) {\r\n        if (this.controlIdMap[change.id] && Object.keys(this.controlIdMap[change.id]).length === 0) {\r\n          this.controlIdMap[change.id] = {};\r\n        }\r\n        this.controlIdMap[change.id] = this.controlIdMap[change.id] || {};\r\n        if (change.errors) {\r\n          this.controlIdMap[change.id][domPropName] = {\r\n            errors: change.errors\r\n          };\r\n        }\r\n      }\r\n      // 如果和控件上的值一样，则不再更新控件的值\r\n      if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {\r\n        return;\r\n      }\r\n\r\n      // 正则判断是否为日期\r\n      control.setValue(newControlValue);\r\n\r\n    });\r\n\r\n    // control => BindingData\r\n    control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value: any) => {\r\n      const oldBindingValue = this.bindingData.getValue(bindingPaths);\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (value && value.constructor && value.constructor.name === 'Date') {\r\n        const isValidDate = !isNaN(value);\r\n        if (!isValidDate) {\r\n          return;\r\n        }\r\n        if (oldBindingValue && converter) {\r\n          const oldValue = converter.convertFrom(oldBindingValue);\r\n\r\n          if (this.compareDate(value, oldValue) === true) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (this.isDate(converter) === true) {\r\n        if (DateUtil.isEqual(value, oldBindingValue) === true) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData\r\n      const newBindingValue = converter ? converter.convertTo(value) : value;\r\n      if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {\r\n        return;\r\n      }\r\n      // if (!this.isFormValid(propertyName, null, null, false)) {\r\n      //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};\r\n      //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);\r\n      // } else {\r\n      this.clearBackEndMessages(propertyName);\r\n      const emitEventToView = this.frameContext.appContext.runMode === RunMode.highSpeed;\r\n      this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: this.frameContext });\r\n      //}\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否是日期字段\r\n   * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；\r\n   * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；\r\n   * 3、不能使用constructor.name,压缩后name变了；\r\n   * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况\r\n   * @todo\r\n   * 为日期字段添加注解，根据注解来判断\r\n   */\r\n  private isDate(converter: ControlValueConverter): boolean {\r\n    let isDateConverter = false;\r\n\r\n    // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {\r\n    //   isDateConverter = true;\r\n    // }\r\n    if (converter && converter.hasOwnProperty('format') === true) {\r\n      isDateConverter = true;\r\n    }\r\n    return isDateConverter;\r\n  }\r\n\r\n  /**\r\n   * 比较日期（只比较年月日）\r\n   */\r\n  compareDate(srcDate: Date, dstDate: Date) {\r\n    if (!srcDate || !dstDate) {\r\n      return srcDate === dstDate;\r\n    }\r\n    const isEqual =\r\n      srcDate.getFullYear() === dstDate.getFullYear()\r\n      && srcDate.getMonth() === dstDate.getMonth()\r\n      && srcDate.getDate() === dstDate.getDate()\r\n      && srcDate.getHours() === dstDate.getHours()\r\n      && srcDate.getMinutes() === dstDate.getMinutes()\r\n      && srcDate.getSeconds() === dstDate.getSeconds();\r\n    return isEqual;\r\n  }\r\n\r\n  private getPropInfoByPath(path: Array<string>): DataPropInfo {\r\n    const entityType = this.frameContext && this.frameContext.repository.entityType || null;\r\n    if (entityType) {\r\n      const dataTypeInfo = new DataTypeInfo(entityType);\r\n      const propInfo: DataPropInfo = dataTypeInfo.getPropInfoByPath(path);\r\n      return propInfo;\r\n      // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 从BindingData中获取指定路径的值\r\n   */\r\n  private getValueFromBindingData(bindingPaths: string[], converter?: ControlValueConverter) {\r\n    const value = this.bindingData.getValue(bindingPaths);\r\n    const converteredValue = converter ? converter.convertFrom(value) : value;\r\n    return converteredValue;\r\n  }\r\n\r\n  public getEntityValueChangingListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanging) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanging;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n\r\n  public getEntityValueChangedListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanged) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanged;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n  /**\r\n   * 获取所有的前端验证规则\r\n   * @description\r\n   * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔\r\n   */\r\n  public getValidationRules(): Map<string, ValidateRule[]> {\r\n    const validatoinRules = new Map<string, ValidateRule[]>();\r\n    let parentPath = this.bindingPath;\r\n    if (parentPath.length && parentPath === '/') {\r\n      parentPath = '';\r\n    }\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      // const fieldName = `${parentPath}/${propName}`;\r\n\r\n      if (this.isShowPropMap[propName] === true || Object.keys(this.isShowPropMap).length === 0) {\r\n        const ngFormControl = this.ngFormControls[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const bindingPathArray = ngFormControl.binding ? ngFormControl.binding.split('.') : [propName];\r\n        const fieldNameArray = [parentPath, ...bindingPathArray];\r\n        const fieldName = fieldNameArray.join('/');\r\n        if (Array.isArray(ngFormControl.validRules) && ngFormControl.validRules.length > 0) {\r\n          let validationrulesToAdd = [...ngFormControl.validRules];\r\n          // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {\r\n          //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));\r\n          // }\r\n          validationrulesToAdd.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = ngFormControl.id;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n            validationRule.fullPath = fieldName;\r\n            if (this.frameContext) {\r\n              validationRule.frameContext = this.frameContext;\r\n            }\r\n          });\r\n          validatoinRules.set(fieldName, validationrulesToAdd);\r\n        } else {\r\n          validatoinRules.set(fieldName, [{\r\n            type: 'setDisplayInfo',\r\n            targetId: ngFormControl.id,\r\n            targetName: this.formGroupName,\r\n            property: displayFieldName,\r\n            fullPath: fieldName,\r\n            frameContext: this.frameContext\r\n          }]);\r\n        }\r\n      }\r\n    });\r\n    return validatoinRules;\r\n  }\r\n\r\n  public setTranslateService(translateService: Translate) {\r\n    if (!translateService) {\r\n      return;\r\n    }\r\n    this.translate = translateService;\r\n    ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());\r\n  }\r\n  /**\r\n   * 重置控件状态\r\n   */\r\n  private resetFormControls() {\r\n    if (Object.keys(this.controls).length > 0) {\r\n      Object.keys(this.controls).forEach((prop) => {\r\n        const formControl: AbstractControl = this.controls[prop];\r\n        formControl.markAsUntouched();\r\n        formControl.markAsPristine();\r\n      });\r\n    }\r\n\r\n  }\r\n  private clearBackEndMessages(domPropertyName: string) {\r\n    if (domPropertyName) {\r\n      if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n        const messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(item => item.startsWith('message-'));\r\n        const errors = { ...this.cardControls[domPropertyName]['errors'] };\r\n        messageKeys.forEach(key => delete errors[key]);\r\n        this.cardControls[domPropertyName] = { errors: errors };\r\n      }\r\n    } else {\r\n      Object.keys(this.cardControls).forEach(propertyName => {\r\n        if (this.cardControls[propertyName] && this.cardControls[propertyName]['errors'] && !!Object.keys(this.cardControls[propertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n          const messageKeys = Object.keys(this.cardControls[propertyName]['errors']).filter(item => item.startsWith('message-'));\r\n          const errors = { ...this.cardControls[propertyName]['errors'] };\r\n          messageKeys.forEach(key => delete errors[key]);\r\n          this.cardControls[propertyName] = { errors: errors };\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport { Form };\r\n","import { Repository } from '../repository/index';\r\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { ViewChange, Change, ChangeType } from './changes';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { Form } from '../form/index';\r\nimport { Pagination } from '../core';\r\nimport { BindingData } from './binding_data';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 实体操作工具类\r\n */\r\nclass EntityUtil {\r\n\r\n  /**\r\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\r\n    // 遍历bindingObject的properties进行赋值\r\n    bindingObject.properties.forEach((property: BindingProperty) => {\r\n      const propertyName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        if (entity && entity[propertyName] && this.isEffectiveField(entity, propertyName)) {\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        if (entity && entity[propertyName]) {\r\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\r\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else {\r\n        if (this.isEffectiveField(entity, propertyName)) {\r\n          const value = entity[propertyName];\r\n          bindingObject.setValue(propertyName, value, false, false);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setUpEntityPipeline(entity, bindingObject);\r\n  }\r\n\r\n  /**\r\n   * 建立entity和bindingObject之间的关联\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\r\n    if (!entity || !bindingObject) {\r\n      return;\r\n    }\r\n    // 监听entity变更\r\n    entity.onValueChanged.pipe(takeUntil(entity.unsubscribe)).subscribe((modification: Modification) => {\r\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0 || modification.fromParent === true) {\r\n        return;\r\n      }\r\n      const propertyName = modification.path[modification.path.length - 1];\r\n      const primaryKeyPath = modification.path[modification.path.length - 2];\r\n\r\n      // 验证主键是否匹配\r\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\r\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\r\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\r\n          return;\r\n        }\r\n      }\r\n      // TODO:修复动态列不触发变更的问题，临时方案，应该有单独的dynamicBindingObject类\r\n      if (modification.dynamic) {\r\n        if (bindingObject['__original__']) {\r\n          return;\r\n        }\r\n        const value = modification.value;\r\n        const target = bindingObject[propertyName];\r\n        if (!target) {\r\n          return;\r\n        }\r\n        Object.keys(value).forEach((key: string) => {\r\n          if (target.getValue(key) === value[key]) {\r\n            return;\r\n          }\r\n          target.setValue(key, value[key], true, false);\r\n        });\r\n      } else {\r\n        // 值没有发生变化，不再设置\r\n        // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\r\n        if (bindingObject.getValue(propertyName) === modification.value) {\r\n          return;\r\n        }\r\n        bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\r\n      }\r\n    });\r\n    // 监听bindingObject变更\r\n    bindingObject.viewChanges.pipe(takeUntil(bindingObject.unsubscribe)).subscribe((viewChange: ViewChange) => {\r\n      const value = viewChange.value;\r\n      const propertyName = viewChange.path[0];\r\n\r\n      let pathPrefix = '';\r\n      const pathData = entity.getPaths();\r\n      const paths = pathData.path;\r\n      let id = bindingObject['id'];\r\n      bindingObject['__original__'] = true;\r\n      // if (pathData.isUdt) {\r\n      // grid中udt没有id，从父级中取出id，以便存放验证信息\r\n      const getParentId = (target: any) => {\r\n        let parentId = '';\r\n        const findId = (item: any) => {\r\n          if (item && item && item['id']) {\r\n            parentId = item['id'];\r\n            return;\r\n          } else if (item['parent']) {\r\n            findId(item['parent']);\r\n          }\r\n        };\r\n        findId(target);\r\n        return parentId;\r\n      };\r\n      id = getParentId(bindingObject);\r\n      // if (pathData.isGrid) {\r\n      //   // grid 将从表主字段去除\r\n      //   paths.pop();\r\n      // }\r\n      if (paths.length) {\r\n        pathPrefix = paths.join('.') + '.';\r\n      }\r\n      // }\r\n      const controlProp = pathPrefix + propertyName;\r\n      // 调用实体验证，并将错误信息合并到formControl上\r\n      const entityValidate = (callback?: (error: any) => void) => {\r\n        const enableValidate = Object.values(Form.insMap).find(item => item && item.enableValidate);\r\n        if (!enableValidate) {\r\n          if (typeof callback === 'function') {\r\n            callback(null);\r\n          }\r\n          return;\r\n        }\r\n        entity.validateFromUtilSync(propertyName, value, result => {\r\n          const errorObj = {};\r\n          if (result.errors && result.errors.length > 0) {\r\n            result.errors.forEach((error: any) => {\r\n              if (error.constraints) {\r\n                Object.keys(error.constraints).forEach(key => {\r\n                  errorObj[key] = {\r\n                    value: value,\r\n                    name: error.constraints[key],\r\n                    error: error\r\n                  };\r\n                });\r\n              }\r\n            });\r\n          }\r\n          // 先设置实体验证信息，再设置form验证信息，然后在form.isFormValid内部整合实体验证form验证信息\r\n          Form.updateErrors(controlProp, errorObj, id, value, pathData.isGrid);\r\n          const formErrors = viewChange['errors'] || {};\r\n          const mergedErrors = Object.assign({}, formErrors, errorObj);\r\n          let validateError = null;\r\n          if (Object.keys(mergedErrors).length > 0) {\r\n            validateError = { [propertyName]: mergedErrors };\r\n          }\r\n          if (typeof (callback) === 'function') {\r\n            callback(validateError);\r\n          }\r\n        }, viewChange.context);\r\n      };\r\n\r\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\r\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\r\n      if (bindingObject.primaryKey) {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        if (propertyName !== primaryKey) {\r\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\r\n            entityValidate();\r\n            return;\r\n          }\r\n        } else if (entity[propertyName] !== value) {\r\n          // todo: 因异步校验未结束实体主键没有被赋值，导致实体其他属性无法赋值，待后续前端校验重构时去掉\r\n          entity[propertyName] = value;\r\n          entityValidate();\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n      if (entity[propertyName] === value) {\r\n        entityValidate();\r\n        return;\r\n      }\r\n\r\n      // 调用表单验证,通过后调用实体验证\r\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\r\n      entityValidate((errors: any) => {\r\n        entity.errors = errors;\r\n        entity[propertyName] = value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\r\n    this.loadEntities(entityList.items, bindingList);\r\n    this.setUpEntityListPipeline(entityList, bindingList);\r\n  }\r\n\r\n  /**\r\n   * 建立entityList和bindingList之间的关联\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\r\n    entityList.onListChanged.subscribe((modification: Modification) => {\r\n      const target = modification['target'];\r\n      if (target && target !== entityList) {\r\n        return;\r\n      }\r\n      switch (modification.type) {\r\n        // 添加实体\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          {\r\n            const entitiesToAdd = <Entity[]>modification.value;\r\n            if (entitiesToAdd.length === 0) {\r\n              return;\r\n            }\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n\r\n            this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\r\n          }\r\n          break;\r\n        case ModifyType.Insert:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            const position = modification.position;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            this.insertEntity(modification.value[0], bindingList, position);\r\n          }\r\n          break;\r\n        // 删除实体\r\n        case ModifyType.Remove:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\r\n            const id = modification.value[bindingList.primaryKey];\r\n            bindingList.removeByIds([id]);\r\n            // this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          }\r\n          break;\r\n\r\n        // 加载实体\r\n        case ModifyType.Load:\r\n          // 检查父id是否一致，冒泡导致的变更不处理\r\n          const paths = modification.path;\r\n          const parentPath = paths[paths.length - 2];\r\n          const parentId = bindingList.parent.primaryKeyValue;\r\n          if (parentPath.indexOf(parentId) === -1) {\r\n            return;\r\n          }\r\n          const entities = modification.value;\r\n          this.loadEntities(entities, bindingList);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 监听repository变化，保持repository和bindingList同步。\r\n   * @param repository  实体仓库\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\r\n    // 初次加载\r\n    const entities = Array.from(repository.entityCollection.toArray());\r\n    this.loadEntities(entities, bindingList);\r\n\r\n    // 监听变化\r\n    repository.entityCollectionChange.pipe(takeUntil(repository.destroy$)).subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.Load:\r\n          bindingList.clear(true);\r\n          this.loadEntities(<Entity[]>modification.value, bindingList, modification.entityCreate);\r\n          break;\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone, { isTreeNodeLoadScene: modification.isTreeNodeLoadScene });\r\n          break;\r\n        case ModifyType.AddData:\r\n          this.addData(<Entity[]>modification.value, bindingList, { isTreeNodeLoadScene: modification.isTreeNodeLoadScene });\r\n          break;\r\n        case ModifyType.Insert:\r\n          this.insertEntity(modification.value, bindingList, modification.position);\r\n          break;\r\n        case ModifyType.Remove:\r\n          this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.RemoveData:\r\n          this.removeData(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.PaginationInfoChange:\r\n          // 分页信息无需同步到bindingList，放到bindingData即可。保留此处只是为了兼容产品部可能使用bindingList上分页信息的场景\r\n          bindingList.paginationInfo = <Pagination>modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // 监听BindingList数据变化\r\n    bindingList.changes.pipe(takeUntil(bindingList.destroy$)).subscribe((change: Change) => {\r\n      if (change.type === ChangeType.PaginationInfoChange) {\r\n        const entityCollection = repository.entityCollection;\r\n        // const entityTypeName = entityCollection.entityTypeName;\r\n        // const original = entityCollection.paginationInfo[entityTypeName];\r\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\r\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntities(entities: Entity[], bindingList: BindingList, entityCreate: boolean = false) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.load(bindingObjects, entityCreate);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   * @param isCloned 是否克隆数据\r\n   * @param options 上下文\r\n   */\r\n  static appendEntities(entities: Entity[], bindingList: BindingList, isCloned: boolean = false, options: any = null) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.append(bindingObjects, isCloned, options);\r\n  }\r\n  /**\r\n   * 是否是有效的字段\r\n   * @param entity 实体\r\n   * @param propertyName 字段\r\n   * @returns\r\n   */\r\n  static isEffectiveField(entity: Entity, propertyName: string) {\r\n    if (!entity || !propertyName) {\r\n      return false;\r\n    }\r\n    propertyName = propertyName.toLowerCase();\r\n    if (entity['__farris_effective_fields__']) {\r\n      return entity['__farris_effective_fields__'].includes(propertyName);\r\n    }\r\n    if (entity['farris_effective_fields'] && typeof entity['farris_effective_fields'] === 'string') {\r\n      const effectiveFields = entity['farris_effective_fields'].split(',').filter(p => p).map(item => item.toLowerCase());\r\n      entity['__farris_effective_fields__'] = effectiveFields;\r\n      return effectiveFields.includes(propertyName);\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * 增加实体数据（不切换当前行）\r\n   * @param entities\r\n   * @param bindingList\r\n   */\r\n  static addData(entities: Entity[], bindingList: BindingList, options: any = null) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.addData(bindingObjects, options);\r\n  }\r\n  static insertEntity(entity: Entity, bindingList: BindingList, position: -1 | 1) {\r\n    const bindingObject = this.createBindingObject(entity, bindingList);\r\n    bindingList.insert(bindingObject, position);\r\n  }\r\n  /**\r\n   * 从bindingList移除entities对应的BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeByIds(ids);\r\n  }\r\n  static removeData(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeDataByIds(ids);\r\n  }\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return [];\r\n    }\r\n    const bindingObjects = [];\r\n    entities.forEach((entity: Entity) => {\r\n      const bindingObject = BindingObjectFactory.create(bindingList.properties, true);\r\n      // bindingObject['_ENTITY_'] = entity;\r\n      this.loadEntity(entity, bindingObject);\r\n\r\n      // // 为bindingObject设置默认值initialData属性\r\n      // if (entity['initialData']) {\r\n      //   bindingObject['initialData'] = entity['initialData'];\r\n      // }\r\n      bindingObjects.push(bindingObject);\r\n    });\r\n    return bindingObjects;\r\n  }\r\n  static createBindingObject(entity: Entity, bindingList: BindingList) {\r\n    const bindingObject = BindingObjectFactory.create(bindingList.properties, true);\r\n    this.loadEntity(entity, bindingObject);\r\n    return bindingObject;\r\n  }\r\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\r\n    // reposiroty => bindingData\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingData.pagingInfo = modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string,) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData(entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n}\r\n\r\nexport { EntityUtil };\r\n","// tslint:disable: max-line-length member-ordering\r\n/**\r\n * 绑定数据相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\r\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\r\n */\r\n\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTypeInfo } from '../core/data-type-info';\r\nimport { Repository } from '../repository/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BindingObject } from './binding_object';\r\nimport { InvokeOnValueChange } from './types';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 绑定数据\r\n * @description\r\n * # BindingData\r\n * \r\n * BindingData用于直接和界面绑定，它持有一个不可变的数据集合（BindingList），数据集合中是一个个不可变的数据对象（BindingObject）。\r\n * \r\n * ## 更新界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //根据paths设置属性值\r\n * //@param paths 属性路径数组\r\n * //@param value 属性值\r\n * //@param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n * //@param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n * public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true)\r\n * ```\r\n * \r\n * ### 示例\r\n * \r\n * - 更新主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG');\r\n *   ```\r\n * \r\n * - 更新子表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['soItems','price'],20);\r\n *   ```\r\n * \r\n * - 更新业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['udt','udt_field'],'value');\r\n *   ```\r\n * \r\n * - 仅更新界面数据（不提交变更集）\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG',true,false);\r\n *   ```\r\n * \r\n *   > 注意：\r\n *   >\r\n *   > 仅更新界面数据时bindingData必须是对应组件上下文的bindingData。\r\n *   >\r\n *   > 更新数据的命令挂载到不同的组件，产生的效果也不相同。如果命令挂到了卡片视图模型，那么可以直接在构件中注入`FrameContext`或`BindingData`并更新数据就可以。但如果命令挂到了非卡片视图 * 模型，则应该先获取到卡片上下文的bindingData。\r\n *   >\r\n *   > - 命令挂在卡片视图模型:\r\n *   >\r\n *   >   ```javascript\r\n *   >   const frameContext = this.frameContext.bindingData;\r\n *   >   frameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n *   >\r\n *   > - 命令挂在非卡片视图模型：\r\n *   >\r\n *   >   ```javascript\r\n *   >   const cardFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('card-frameId');\r\n *   >   cardFrameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n * \r\n * ## 获取界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n *   ```javascript\r\n *   //获取paths对应的属性值\r\n *   //@param  paths 属性路径数组\r\n *   //@returns 属性值\r\n *   public getValue(paths: string[], useInitValue = false)\r\n *   ```\r\n * \r\n * ### 示例\r\n * \r\n * - 获取主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['name']) //'ESG'\r\n *   ```\r\n * \r\n * - 获取从表中字段属性\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['soItems','price']); // 20\r\n *   ```\r\n * \r\n * - 获取业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['udt','udt_field']); // 'value'\r\n *   ```\r\n * \r\n * ## 获取指定BindingObject\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //通过主键获取对应的bindingObject\r\n * bindingData.list.findById(id: string): BindingObject;\r\n * ```\r\n * \r\n * ### 示例\r\n * - 获取某个主实体\r\n *   ```javascript\r\n *   bindingData.list.findById(\"id\");\r\n *   ```\r\n * - 获取某个实体下子表的所有数据\r\n *   ```javascript\r\n *   // 获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   // 获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   ```\r\n * \r\n * - 获取子表某一行数据\r\n * \r\n *   ```javascript\r\n *   //获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   //获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   //子表行数据\r\n *   const childrenBindingObject = bindingList.findById('子表数据id');\r\n *   const name = childrenBindingObject.getValue(\"name\"); // 或者childrenBindingObject['name']\r\n *   ```\r\n * \r\n * ## 常见问题\r\n * \r\n * ### 赋值或取值时为何不用指定主键？\r\n * \r\n *    示例中取值或赋值时并没有指定主键值，这是由于BindingData赋值或取值时都是对当前行就行操作的，所以不需要指定主键。所以在计算&行切换场景下会导致取值或赋值错误，如本来想给第一行的某个字 * 段赋值，结果由于行切换导致把值赋给了其他行。\r\n * \r\n *    如果遇到赋值错误的情况可以通过BindingObject赋值或取值。\r\n * \r\n * ### 通过bindingData赋值了，界面也刷新了，但保存不上\r\n * \r\n *    这种情况多发生在有后端请求的情况下，比如通过bindingData赋值后紧接着有一个后端请求。由于bindingData赋值是异步的（目前是），这就可能导致赋值还没有结束（还没有产生变更）请求就发送 * 了，从而请求中没有对应的变更，请求回来后会默认清空本地变更，从而导致界面上显示数据已经修改，但数据库中数据并未修改。\r\n * \r\n *    解决该类问题可以通过实体赋值的方式，给实体赋值是同步的，赋值完成后变更就会产生，这样再发送请求时就可以把变更带到后端。\r\n */\r\n@Injectable()\r\nclass BindingData implements IDisposable, OnDestroy{\r\n  /**\r\n   * 数据类型描述\r\n   */\r\n  private dataTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 绑定该路径\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 可绑定的属性描述\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 行切换事件暂停抛出\r\n   */\r\n  public rowSelectedEventSuspend: boolean;\r\n  /**\r\n   * 数据列表\r\n   */\r\n  public list: BindingList;\r\n  private paginationInfo = null;\r\n\r\n  public set pagingInfo(pagingInfo: any) {\r\n    this.paginationInfo = pagingInfo;\r\n    this.firePagingChangeEvent();\r\n  }\r\n\r\n  public get pagingInfo() {\r\n    return this.paginationInfo;\r\n  }\r\n  dispose(options?: any) {\r\n    this.list.dispose();\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param skip 跳过\r\n   * @param take 获取\r\n   * @param bindingPath 路径\r\n   */\r\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      // 找到父级\r\n      // 获取当前实体上级的主键\r\n      const paths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n      const parentObject = this.getValue(paths) as BindingObject;\r\n      if (parentObject && parentObject[parentObject.primaryKey]) {\r\n        // const key = `${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n        const key = `${nodeCode}`;\r\n        pagingInfo = pagingInfo[key] || {};\r\n        pagingInfo.pageIndex = ((skip / take) || 0) + 1;\r\n        pagingInfo.pageSize = take || 0;\r\n      }\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  public updatePagingInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number }, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, pageInfo);\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      pagingInfo[nodeCode] = Object.assign(pagingInfo[nodeCode], pageInfo);\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  private firePagingChangeEvent() {\r\n    this.list.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: this.bindingPath && this.bindingPath.split('/').filter(p => p) || [],\r\n      value: this.paginationInfo\r\n    });\r\n  }\r\n  /**\r\n   * 变更集\r\n   */\r\n  public get changes(): Subject<Change> {\r\n    return this.list.changes;\r\n  }\r\n\r\n  /**\r\n   * 值变化执行器工厂，根据路径产生执行器\r\n   */\r\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\r\n\r\n  /**\r\n   * 设置值变化执行器工厂\r\n   * @param value 值变化执行器工厂\r\n   */\r\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\r\n    this.valueChangeInvokerFactory = value;\r\n  }\r\n  public getValudChangeInvokerFactory() {\r\n    return this.valueChangeInvokerFactory;\r\n  }\r\n\r\n  /**\r\n   * 初始化（已废弃）\r\n   */\r\n  public init(repository: Repository<any>, bindingPath: string) {\r\n    this.initByRepository(repository, bindingPath);\r\n  }\r\n\r\n  /**\r\n   * 根据Repository对BindingData进行初始化\r\n   */\r\n  public initByRepository(repository: Repository<any>, bindingPath: string) {\r\n    this.bindingPath = bindingPath;\r\n\r\n    this.properties = PropertyUtil.getProperties(repository.entityType);\r\n    this.list = BindingListFactory.create(this.properties);\r\n    // 从repository初始化bindingData\r\n    this.pagingInfo = repository.entityCollection.paginationInfo;\r\n    // @todo\r\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\r\n    EntityUtil.loadRepository(repository, this.list);\r\n    this.dataTypeInfo = repository.entityTypeInfo;\r\n\r\n    this.extendProperties(this.properties);\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public initByBindingList(bindingList: BindingList, bindingPath: string) {\r\n    this.list = bindingList;\r\n    this.bindingPath = bindingPath;\r\n    this.extendProperties(this.list.properties);\r\n  }\r\n  public setDataTypeInfo(dataTypeInfo: DataTypeInfo) {\r\n    this.dataTypeInfo = dataTypeInfo;\r\n  }\r\n  /**\r\n   * 获取界面数据\r\n   * @param paths 属性路径数组\r\n   * @param useInitValue 是否使用默认值，默认为`false`\r\n   * @returns 属性值\r\n   */\r\n  public getValue(paths: string[], useInitValue = false) {\r\n    let target: any = this.list;\r\n    paths.forEach((path: string) => {\r\n      if (target) {\r\n        target = target[path];\r\n      }\r\n    });\r\n    if (useInitValue === true && paths && paths.length > 0) {\r\n      const initValue = this.getInitValueByPaths(paths);\r\n      if (target === undefined && target !== initValue) {\r\n        target = initValue;\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 该方法可以更新绑定层数据，从而达到更新界面数据的目的，进而更新本地仓库实体数据，产生变更，下次请求时会将变更带到后端并更新后端数据。\r\n   * @param paths 属性路径数组\r\n   * @param value 属性值\r\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n   * @description\r\n   * ## 示例\r\n   * \r\n   * ### 更新界面数据\r\n   * 使用该方法时只传递path和value参数，其余参数使用默认值。该用法会更新界面数据，同时更新实体数据，实体数据更新时会产生变更，这样在下次请求时会将该变更带到后端，\r\n   * 进而更新后端数据。\r\n   * ```typescript\r\n   * this.frameContext.bindingData.setValue(paths,value);\r\n   * ```\r\n   * \r\n   * ### 仅更新界面数据\r\n   * 有些场景下我们希望只更新界面的数据，不希望对后端数据产生影响，此时除传递paths和value参数外，还需要将emitEventToView设为true，emitEventToEntity设为false，\r\n   * 此时必须使用对应BindingData的setValue方法：\r\n   * ```typescript\r\n   * const tableFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n   * tableFrameContext.bindingData.setValue(paths,value,true,false);\r\n   * ```\r\n   * ## 注意事项\r\n   * setValue为异步方法，如果调用该方法后随即发送后端请求，此时实体变更尚未产生，但请求已经发送，变更无法带到后端，导致变更丢失，出现界面上显示数据已经修改，\r\n   * 但后端并未修改的问题。\r\n   * 因此，如果赋值后随即发送请求应该使用实体赋值的方法。\r\n   */\r\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true, errors: any = {}, context?: any) {\r\n\r\n    if (!paths || paths.length === 0) {\r\n      throw Error('路径不能为空');\r\n    }\r\n    const parentPaths = paths.slice(0, paths.length - 1);\r\n    const propName = paths[paths.length - 1];\r\n\r\n    let parent = this.getValue(parentPaths);\r\n    if (!parent) {\r\n      throw Error('找不到要设置的对象');\r\n    }\r\n    if (parent instanceof BindingData) {\r\n      parent = parent.list.currentItem;\r\n    } else if (parent instanceof BindingList) {\r\n      parent = parent.currentItem;\r\n    }\r\n    if (!!this.valueChangeInvokerFactory) {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, this.valueChangeInvokerFactory(paths), context);\r\n    } else {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, null, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据paths清空属性值\r\n   */\r\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true, context?: any) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    } else {\r\n\r\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\r\n      const oldValue = this.getValue(paths);\r\n      if (typeof oldValue === 'number') {\r\n        initValue = 0;\r\n      } else {\r\n        initValue = '';\r\n      }\r\n    }\r\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity, null, context);\r\n  }\r\n\r\n  /**\r\n   * 获取当前列表\r\n   */\r\n  public getList() {\r\n    if (!this.bindingPath || this.bindingPath === '/') {\r\n      return this.list;\r\n    }\r\n\r\n    const bindingPath = this.bindingPath.substr(1);\r\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.getValue(bindingPathArray);\r\n  }\r\n\r\n  /**\r\n   * 获取当前对象\r\n   */\r\n  public getObject() {\r\n    const bindingList = this.getList();\r\n    return bindingList.currentItem;\r\n  }\r\n  /**\r\n   * 绑定路径（仅路径部分，不包括属性）\r\n   * @param bindingPath 绑定路径\r\n   */\r\n  public getPath(bindingPath?: string[]) {\r\n    const bindingPaths = bindingPath.filter(p => p);\r\n    const path = [`${this.list.primaryKey}:${this.list.currentId}`];\r\n\r\n    bindingPaths.forEach((item: string) => {\r\n      path.push(item);\r\n      const list = this[item] as BindingList;\r\n      if (list) {\r\n        path.push(`${list.primaryKey}:${list.currentId}`);\r\n      }\r\n    });\r\n    return path;\r\n  }\r\n  /**\r\n   * 清空绑定数据\r\n   */\r\n  public reset() {\r\n    this.list.clear(true);\r\n  }\r\n  /**\r\n   * 通过绑定路径获取属性初始值\r\n   * @param paths 绑定路径\r\n   */\r\n  private getInitValueByPaths(paths: Array<string>) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo && this.dataTypeInfo.getPropInfoByPath(paths) || null;\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    }\r\n    return initValue;\r\n  }\r\n  /**\r\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\r\n   * @param properties 关联实体的属性集合\r\n   */\r\n  private extendProperties(properties: BindingProperty[]) {\r\n    properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.list.currentItem[propName];\r\n        },\r\n        set: (value: any) => {\r\n          this.list.currentItem[propName] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingData };\r\n","export enum Compare {\r\n  /**\r\n   * 等于\r\n   */\r\n  Equal = 0,\r\n  /**\r\n   * 不等于\r\n   */\r\n  NotEqual = 1,\r\n  /**\r\n   * 大于\r\n   */\r\n  Greater = 2,\r\n  /**\r\n   * 大于等于\r\n   */\r\n  GreaterOrEqual = 3,\r\n  /**\r\n   * 小于\r\n   */\r\n  Less = 4,\r\n  /**\r\n   * 小于等于\r\n   */\r\n  LessOrEqual = 5,\r\n  /**\r\n   * 包含\r\n   */\r\n  Like = 6,\r\n  /**\r\n   * 不包含\r\n   */\r\n  NotLike = 9,\r\n  In = 14,\r\n  /**\r\n   * 为空\r\n   */\r\n  Empty = 1001,\r\n  /**\r\n   * 不为空\r\n   */\r\n  NotEmpty = 1002\r\n}\r\n\r\nexport enum FilterRelation {\r\n  Empty = 0,\r\n  /**\r\n   * 并且\r\n   */\r\n  And = 1,\r\n  /**\r\n   * 或者\r\n   */\r\n  Or = 2\r\n}\r\n\r\nexport interface FilterCondition {\r\n  /**\r\n   * 字段\r\n   */\r\n  FilterField: string;\r\n  /**\r\n   * 值\r\n   */\r\n  Value: string;\r\n  /**\r\n   * 左括号\r\n   */\r\n  Lbracket?: string;\r\n  /**\r\n   * 右括号\r\n   */\r\n  Rbracket?: string;\r\n  /**\r\n   * 关系\r\n   */\r\n  Relation?: FilterRelation;\r\n  /**\r\n   * 比较符\r\n   */\r\n  Compare?: Compare;\r\n  /**\r\n   * 表达式类型\r\n   */\r\n  Expresstype?: ExpressValueType;\r\n}\r\n\r\n/**\r\n * 值类型\r\n */\r\nexport enum ExpressValueType {\r\n  /**\r\n   * 值\r\n   */\r\n  Value = 0,\r\n  /**\r\n   * 表达式\r\n   */\r\n  Expression = 1,\r\n  /**\r\n   * 前端表达式\r\n   */\r\n  FrontExpress = 'frontExpress'\r\n}\r\n\r\n\r\nexport const LeftBracket = [\r\n  '', '(', '((', '((('\r\n];\r\n\r\nexport const RighttBracket = [\r\n  '', ')', '))', ')))'\r\n];\r\n/**\r\n * 对象类型过滤条件\r\n */\r\nexport type ObjectFilterCondition = { [filterField: string]: { operator1: Compare, operator2?: Compare, relation: 'and' | 'or', value1: any, value2: any } }\r\n","import { Injectable } from '@angular/core';\r\nimport { Compare, FilterCondition, ObjectFilterCondition } from './types';\r\nimport { List } from 'immutable';\r\nimport { BindingObject } from '../binding-data';\r\n\r\n@Injectable()\r\nexport abstract class DataFilter {\r\n  constructor() { }\r\n  abstract filter(data: List<BindingObject>, conditions: Array<FilterCondition> | ObjectFilterCondition);\r\n  protected getCurrentLanguage() {\r\n    return window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n  }\r\n  public getCompareResult(fieldDataValue: any, operator: Compare, targetValue: any) {\r\n    const op = parseInt('' + operator, 10);\r\n    switch (op) {\r\n      case Compare.Equal:\r\n        return fieldDataValue == targetValue;\r\n      case Compare.NotEqual:\r\n        return ('' + fieldDataValue).toLowerCase() !== ('' + targetValue).toLowerCase();\r\n      case Compare.Greater:\r\n        return fieldDataValue > targetValue;\r\n      case Compare.GreaterOrEqual:\r\n        return fieldDataValue >= targetValue;\r\n      case Compare.Less:\r\n        return fieldDataValue < targetValue;\r\n      case Compare.LessOrEqual:\r\n        return fieldDataValue <= targetValue;\r\n      case Compare.Like:\r\n        return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) > -1;\r\n      case Compare.NotLike:\r\n        return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) === -1;\r\n      case Compare.In:\r\n        targetValue = targetValue || [];\r\n        return targetValue.findIndex((n) => n == fieldDataValue) > -1;\r\n      case 1001: // Empty\r\n        return fieldDataValue === '' || fieldDataValue === null;\r\n      case 1002: // NotEmpty\r\n        return fieldDataValue !== '' && fieldDataValue !== null;\r\n      case 1003: // Null\r\n        return fieldDataValue === null;\r\n      case 1004: // NotNull\r\n        return fieldDataValue !== null;\r\n    }\r\n  }\r\n  public getValue(object: any, propertyName: string) {\r\n    return propertyName.split('.').filter(p => p).reduce((result: any, property: string) => {\r\n      if (result) {\r\n        return result[property] === undefined ? null : result[property];\r\n      } else {\r\n        return null;\r\n      }\r\n    }, object);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataFilter } from './data_filter';\r\nimport { FilterCondition } from './types';\r\nimport { List } from 'immutable';\r\nimport { BindingObject } from '../binding-data';\r\n\r\n@Injectable()\r\nexport class ArrayFilterConditionDataFilter extends DataFilter {\r\n  constructor() {\r\n    super();\r\n  }\r\n  public filter(data: List<BindingObject>, conditions: FilterCondition[]) {\r\n    if (data && data.size) {\r\n      return data.filter((n) => this.validateRowData(n, conditions));\r\n    }\r\n    return data;\r\n  }\r\n  public validateRowData(bindingObject: BindingObject, conditions: any) {\r\n    if (!conditions || conditions.length === 0) {\r\n      return true;\r\n    }\r\n    return this.checkRowDataWithCondition(bindingObject, conditions);\r\n  }\r\n  private checkRowDataWithCondition(bindingObject: BindingObject, conditions) {\r\n    let resultObj = null;\r\n    if (conditions) {\r\n      resultObj = {};\r\n      conditions.forEach((condition) => {\r\n        const field = condition.FilterField;\r\n        let fieldValue = this.getValue(bindingObject, field);\r\n        const bindingProperty = bindingObject.properties.find((item) => item.name === field);\r\n        if (bindingProperty && bindingProperty.enableMultiLangInput && fieldValue) {\r\n          fieldValue = fieldValue[this.getCurrentLanguage()];\r\n        }\r\n        const where = condition;\r\n        const { Value, Compare: operator1 } = where;\r\n        if (where) {\r\n          const r = this.getCompareResult(fieldValue, operator1, Value);\r\n          if (resultObj[field] === undefined) {\r\n            resultObj[field] = [r];\r\n          } else {\r\n            resultObj[field].push(r);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // return this.checkAllFieldResult(resultObj);\r\n    const fields = Object.keys(resultObj);\r\n    const result = [];\r\n    fields.forEach((f) => {\r\n      const _filters = conditions.filter((n) => n.FilterField === f);\r\n      if (resultObj[f].length === 1) {\r\n        result.push(resultObj[f][0]);\r\n      } else {\r\n        if (_filters[0].Relation === 1 && resultObj[f].length === 2) { // and\r\n          result.push(resultObj[f][0] && resultObj[f][1]);\r\n        } else { // or\r\n          result.push(resultObj[f].indexOf(true) > -1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result.indexOf(false) === -1;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataFilter } from './data_filter';\r\nimport { ObjectFilterCondition } from './types';\r\nimport { BindingObject } from '../binding-data';\r\nimport { List } from 'immutable';\r\n\r\n@Injectable()\r\nexport class ObjectFilterConditionDataFilter extends DataFilter {\r\n  constructor() {\r\n    super();\r\n  }\r\n  public filter(data: List<BindingObject>, conditions: ObjectFilterCondition) {\r\n    if (data && data.size) {\r\n      return data.filter((row) => this.validateRowData(row, conditions));\r\n    }\r\n    return data;\r\n  }\r\n  public validateRowData(bindingObject: BindingObject, conditions: ObjectFilterCondition) {\r\n    if (!conditions || Object.keys(conditions).length === 0) {\r\n      return true;\r\n    }\r\n    return this.checkAllFieldInRowData(bindingObject, conditions);\r\n  }\r\n  private checkAllFieldInRowData(bindingObject: BindingObject, conditions: ObjectFilterCondition) {\r\n    let resultObj = null;\r\n    const currentLanguage = this.getCurrentLanguage();\r\n    if (conditions) {\r\n      const fields = Object.keys(conditions);\r\n      resultObj = {};\r\n      fields.forEach((field) => {\r\n        let fieldValue = this.getValue(bindingObject, field);\r\n        const property = bindingObject.properties.find((item) => item.name === field);\r\n        if (property && property.enableMultiLangInput && fieldValue) {\r\n          fieldValue = fieldValue[currentLanguage];\r\n        }\r\n\r\n        const where = conditions[field];\r\n        const { value1, operator1, relation, operator2, value2 } = where;\r\n        if (where) {\r\n          const result = this.getCompareResult(fieldValue, operator1, value1);\r\n          resultObj[field] = result;\r\n          if (relation) {\r\n            const result2 = this.getCompareResult(fieldValue, operator2, value2);\r\n            resultObj[field] = this.getRelationResult(result, relation, result2);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return this.checkAllFieldResult(resultObj);\r\n  }\r\n  private getRelationResult(result1: boolean, relation: 'and' | 'or', result2: boolean) {\r\n    const _relation = relation.toLowerCase();\r\n    if (_relation === 'and') {\r\n      return result1 && result2;\r\n    } else {\r\n      return result1 || result2;\r\n    }\r\n  }\r\n  private checkAllFieldResult(resultObj: { [key: string]: boolean }) {\r\n    if (!resultObj) {\r\n      return true;\r\n    }\r\n    return Object.values(resultObj).reduce((c, n) => {\r\n      return c && n;\r\n    }, true);\r\n  }\r\n}\r\n","/**\r\n * 绑定列表相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n// tslint:disable: max-line-length\r\n\r\nimport { List } from 'immutable';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingData } from './binding_data';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { IDisposable } from '../core';\r\nimport { FilterCondition, ArrayFilterConditionDataFilter, ObjectFilterCondition, ObjectFilterConditionDataFilter } from '../data-filter';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * BindingList是一个BindingObject集合\r\n */\r\nclass BindingList implements IDisposable {\r\n  public __type__ = 'BindingList';\r\n  /**\r\n   * immutable的BindingObject列表\r\n   */\r\n  private innerList: List<BindingObject>;\r\n  private emptyCurrentItem: BindingObject;\r\n  private sortFields: string[] = [];\r\n  private sortDirections: string[] = [];\r\n  /**\r\n   * 界面数据源\r\n   */\r\n  public defaultView: List<BindingObject> = null;\r\n  /**\r\n   * 关联实体的属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 父对象\r\n   */\r\n  public parent: BindingObject;\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 当前行对应的绑定对象的内码\r\n   */\r\n  public currentId: string;\r\n  /**\r\n   * destory signal\r\n   */\r\n  public destroy$: Subject<any>;\r\n\r\n  // #region 分页相关\r\n\r\n  /**\r\n   * 分页信息\r\n   */\r\n  public _paginationInfo: any = null;\r\n\r\n  set paginationInfo(sPaginationInfo: any) {\r\n    this._paginationInfo = sPaginationInfo;\r\n    if (this._paginationInfo === sPaginationInfo) {\r\n      return;\r\n    }\r\n    this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this._paginationInfo\r\n    });\r\n  }\r\n\r\n  get paginationInfo(): any {\r\n    return this._paginationInfo;\r\n  }\r\n  /**\r\n   * 获取页码\r\n   */\r\n  get pageIndex() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\r\n      return this.paginationInfo.pageIndex;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   */\r\n  get pageSize() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\r\n      return this.paginationInfo.pageSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取数据总项数\r\n   */\r\n  get total() {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 获取跳过的数据条数\r\n   */\r\n  get skip() {\r\n    const pageIndex = this.pageIndex;\r\n    const pageSize = this.pageSize;\r\n    return (pageIndex - 1) * pageSize;\r\n  }\r\n\r\n  /**\r\n   * 前台设置分页信息\r\n   * @param skip skip\r\n   * @param take take\r\n   */\r\n  public setPaginationInfo(skip: number, take: number) {\r\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\r\n      pageSize: take,\r\n      pageIndex: skip / take + 1\r\n    });\r\n    /*this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });*/\r\n  }\r\n  //#endregion\r\n\r\n  /**\r\n   * 当前行对应的绑定对象\r\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\r\n   */\r\n  public get currentItem(): BindingObject {\r\n    const currentItem = this.findById(this.currentId);\r\n    if (!currentItem) {\r\n      if (!this.emptyCurrentItem) {\r\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\r\n      }\r\n      return this.emptyCurrentItem;\r\n    }\r\n    return currentItem;\r\n  }\r\n\r\n  /**\r\n   * 绑定对象的数量\r\n   */\r\n  public get length(): number {\r\n    return this.innerList.count();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.changes = new Subject<Change>();\r\n    this.innerList = List<BindingObject>();\r\n    this.currentId = null;\r\n    this.destroy$ = new Subject();\r\n    this.updateDefaultView(this.changes);\r\n  }\r\n  /**\r\n   * 销毁\r\n   * @param options\r\n   */\r\n  dispose(options?: any) {\r\n    this.clear(true);\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加[Symbol.iterator]，使之能通过for of遍历\r\n   */\r\n  [Symbol.iterator]() {\r\n    const self = this;\r\n    let index = -1;\r\n    const size = this.innerList.size;\r\n\r\n    return {\r\n      next: function () {\r\n        index++;\r\n        if (index < size) {\r\n          return { done: false, value: self.innerList.get(index) };\r\n        }\r\n        return { done: true, value: undefined };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public load(objects: BindingObject[], entityCreate: boolean = false): void {\r\n    // 重置列表\r\n    this.innerList = this.innerList.clear();\r\n    if (objects.length !== 0) {\r\n      // 加载数据\r\n      objects.forEach((object: BindingObject) => {\r\n        this.add(object);\r\n      });\r\n\r\n      // 设置默认当前行\r\n      const currentItem = this.findById(this.currentId);\r\n      if (!currentItem) {\r\n        const firstId = objects[0][this.primaryKey];\r\n        this.setCurrentId(firstId, false, false);\r\n      }\r\n    } else {\r\n      this.currentId = null;\r\n    }\r\n    const change: Change = {\r\n      type: ChangeType.Load,\r\n      path: [],\r\n      value: objects\r\n    };\r\n    change.create = entityCreate;\r\n    // 触发事件\r\n    this.changes.next(change);\r\n  }\r\n\r\n  /**\r\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public append(objects: BindingObject[], isCloned: boolean = false, options: any = null): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 当前行为新追加的最后1行\r\n    const lastId = objects[objects.length - 1][this.primaryKey];\r\n    this.setCurrentId(lastId, true, true);\r\n    // 触发事件\r\n    const change: Change = {\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects,\r\n      isTreeNodeLoadScene: options && options.isTreeNodeLoadScene\r\n    };\r\n    if (isCloned) {\r\n      change.isCloned = true;\r\n    }\r\n    this.changes.next(change);\r\n  }\r\n  /**\r\n   * 增加数据\r\n   * @param objects 实体\r\n   * @param options 上下文\r\n   * @description 增加实体数据，但不切换当前行\r\n   */\r\n  public addData(objects: BindingObject[], options: any = null): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects,\r\n      isTreeNodeLoadScene: options && options.isTreeNodeLoadScene\r\n    });\r\n  }\r\n  public insert(object: BindingObject, position?: 1 | -1) {\r\n    const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\r\n    // 加载BindingObject\r\n    if (position === 1) {\r\n      this.innerList = this.innerList.insert(currentIndex + 1, object);\r\n    } else if (position === -1) {\r\n      this.innerList = this.innerList.insert(currentIndex, object);\r\n    } else {\r\n      this.innerList = this.innerList.push(object);\r\n    }\r\n    object.parent = this;\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n\r\n    this.setCurrentId(object.primaryKeyValue, true, true);\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: object,\r\n      detail: {\r\n        type: 'insert',\r\n        position\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\r\n   * @param object 绑定对象\r\n   */\r\n  public add(object: BindingObject) {\r\n    this.innerList = this.innerList.push(object);\r\n    object.parent = this;\r\n\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除主键值数组对应的绑定对象。\r\n   * @param ids 主键值数组\r\n   */\r\n  public removeByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let nextCurrentId = this.currentId;\r\n    ids.forEach((id: string) => {\r\n      // 如果当前行被删除，计算下一当前行\r\n      if (id === nextCurrentId) {\r\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\r\n      }\r\n\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 重新设置当前行\r\n    if (this.innerList.count() === 0) {\r\n      this.currentId = null;\r\n    } else {\r\n      this.setCurrentId(nextCurrentId, false, false);\r\n    }\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 删除数据（不切换当前行）\r\n   * @param ids ids\r\n   */\r\n  public removeDataByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear(clearOnly: boolean = false) {\r\n    this.innerList.forEach((item: BindingObject) => {\r\n      item['_ENTITY_'] = null;\r\n      item.unsubscribe.next();\r\n      item.unsubscribe.complete();\r\n      item.changes.complete();\r\n      item.viewChanges.complete();\r\n    });\r\n    this.innerList = this.innerList.clear();\r\n    if (!clearOnly) {\r\n      this.currentId = null;\r\n      this.changes.next({\r\n        type: ChangeType.Remove,\r\n        path: [],\r\n        value: []\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\r\n   * - 如果被删除的行是最后1行，则上移1行；\r\n   * - 其他情况，下移1行。\r\n   */\r\n  public getCurrentIdBeforeDeleting(): string {\r\n    let nextIndex = -1;\r\n    const currentIndex = this.getIndexById(this.currentId);\r\n    if (currentIndex === this.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n    return this.getIdByIndex(nextIndex);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值获取对应绑定对象\r\n   * @param   id 要查找的主键值\r\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\r\n   */\r\n  public findById(id: string): BindingObject | null {\r\n    let target: BindingObject;\r\n    target = this.innerList.find((item) => {\r\n      return item.getValue(this.primaryKey) === id;\r\n    });\r\n    return target === undefined ? null : target;\r\n  }\r\n\r\n  /**\r\n   * 将主键值为id的绑定对象设置为当前行\r\n   * @param  id        要设置的主键值\r\n   * @param  emitEvent 是否发送当前行变更事件\r\n   * @param  force 强制切换\r\n   */\r\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true, force: boolean = false): void {\r\n    if (this.currentId === id && !force) {\r\n      return;\r\n    }\r\n\r\n    // 不存在时设置为null\r\n    // const currentObj = this.findById(id);\r\n    // if (!currentObj) {\r\n    //   this.currentId = null;\r\n    // } else {\r\n    //   this.currentId = id;\r\n    // }\r\n\r\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\r\n    const currentObj = this.findById(id);\r\n    if (!currentObj && !force) {\r\n      return;\r\n    }\r\n    this.currentId = id;\r\n\r\n    // 发出行切换事件\r\n    if (emitEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.SelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n\r\n    // 是否发送全局的行切换事件\r\n    if (emitGlobalEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.GlobalSelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据主键值为id的绑定对象的索引\r\n   * @param id 主键值\r\n   * @returns 找到时返回对应的index，找不到时返回-1\r\n   */\r\n  public getIndexById(id: string): number {\r\n    return this.innerList.findIndex((obj: BindingObject) => {\r\n      return obj[this.primaryKey] === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据索引位置获取对应绑定对象的主键值\r\n   * @reutrn 找到时返回对应主键值，找不到返回null\r\n   */\r\n  public getIdByIndex(index: number): string {\r\n\r\n    if (index < 0 || index > this.length) {\r\n      return null;\r\n    }\r\n\r\n    if (this.innerList.has(index) === false) {\r\n      return null;\r\n    }\r\n    const obj = this.innerList.get(index);\r\n    return obj[this.primaryKey];\r\n  }\r\n\r\n  /**\r\n   * 转换为BindingObject数组\r\n   */\r\n  public toArray(): BindingObject[] {\r\n    return this.innerList.toArray();\r\n  }\r\n  /**\r\n   * 交互数据位置\r\n   * @param id1 id1\r\n   * @param id2 id2\r\n   */\r\n  public swapById(id1: any, id2: any) {\r\n    const item1 = this.innerList.find((element) => element.primaryKeyValue === id1);\r\n    const item2 = this.innerList.find((element) => element.primaryKeyValue === id2);\r\n    this.innerList = this.innerList.map((bindingObject: BindingObject, index: number) => {\r\n      if (bindingObject.primaryKeyValue === id1) {\r\n        return item2;\r\n      } else if (bindingObject.primaryKeyValue === id2) {\r\n        return item1;\r\n      } else return bindingObject;\r\n    }).toList();\r\n    this.changes.next({\r\n      type: ChangeType.Swap,\r\n      path: [],\r\n      detail: {\r\n        type: 'swap',\r\n        id: [id1, id2]\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 转换为JSON对象\r\n   * @param options 配置\r\n   * @returns 普通对象数组\r\n   */\r\n  public toJSON(options?: any): any[] {\r\n    const result = [];\r\n    this.innerList.forEach((obj: BindingObject) => {\r\n      result.push(obj.toJSON(options));\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * 过滤列表数据\r\n   * @param conditions 过滤条件\r\n   */\r\n  public filter(conditions: Array<FilterCondition> | ObjectFilterCondition) {\r\n    if (this.defaultView === null) {\r\n      this.defaultView = this.innerList.toList();\r\n    }\r\n    let list: List<BindingObject>;\r\n    if (Array.isArray(conditions)) {\r\n      const filter = new ArrayFilterConditionDataFilter();\r\n      list = this.defaultView.filter((bindingObject) => {\r\n        return filter.validateRowData(bindingObject, conditions);\r\n      }).toList();\r\n    } else {\r\n      const filter = new ObjectFilterConditionDataFilter();\r\n      list = this.defaultView.filter((bindingObject) => {\r\n        return filter.validateRowData(bindingObject, conditions);\r\n      }).toList();\r\n    }\r\n    // 如果有排序条件，则对过滤后的结果进行排序\r\n    if (this.sortFields && this.sortFields.length > 0) {\r\n      this.innerList = list.sort(this.comparator(this.sortFields, this.sortDirections)).toList();\r\n    } else {\r\n      this.innerList = list;\r\n    }\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   * @throws 路径必须为字符串！\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter((item) => !!item && item.trim().length > 0).map((item) => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach((item) => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 对bindingList就行排序\r\n   * @param fields - 排序字段\r\n   * @param directions - 排序规则字段\r\n   * @param options - 参数\r\n   * @throws argument error\r\n   */\r\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\r\n    if (!this.defaultView) {\r\n      this.defaultView = this.innerList.toList();\r\n    }\r\n    // 默认升序\r\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',').filter((p) => p) : fields || [];\r\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',').filter((p) => p) : directions || [];\r\n    // 排序字段和排序方式应一致\r\n    if (arrFields.length !== arrDirections.length) {\r\n      throw new Error('sortBy:fields and directions not match');\r\n    }\r\n    this.sortFields = arrFields;\r\n    this.sortDirections = arrDirections;\r\n    if (!this.sortFields || this.sortFields.length < 1) {\r\n      if (this.defaultView) {\r\n        this.innerList = this.defaultView.toList();\r\n        // 清空过滤条件后重置原始数据源\r\n        this.defaultView = null;\r\n      }\r\n    } else {\r\n      this.innerList = this.innerList.sort(this.comparator(arrFields, arrDirections)).toList();\r\n    }\r\n  }\r\n  private getValue(target: any, propName: string, isMultiLangProp: boolean = false, currentLanguage: string = 'zh-CHS') {\r\n    if (target instanceof BindingList) {\r\n      target = target.currentItem;\r\n    } else if (target instanceof BindingData) {\r\n      target = target.list.currentItem;\r\n    }\r\n    let result = null;\r\n    if (propName.indexOf('.') === -1) {\r\n      result = target[propName];\r\n    } else {\r\n      const props = propName.split('.');\r\n      for (const prop of props) {\r\n        target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);\r\n      }\r\n    }\r\n    if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {\r\n      return result[currentLanguage];\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n  /**\r\n   * 排序器\r\n   * @param props - 排序字段\r\n   * @param orders - 排序规则\r\n   * @returns\r\n   */\r\n  private comparator(props: Array<string>, orders: Array<string>) {\r\n    return (item1: BindingObject, item2: BindingObject) => {\r\n      return props.reduce((result, prop) => {\r\n        if (result === 0) {\r\n          const bindingProperty = this.properties.find((item) => item.name === prop);\r\n          let isMultiLangProp = false;\r\n          if (bindingProperty) {\r\n            isMultiLangProp = bindingProperty.enableMultiLangInput;\r\n          }\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\r\n          let item1Value = this.getValue(item1, prop, isMultiLangProp, currentLanguage);\r\n          let item2Value = this.getValue(item2, prop, isMultiLangProp, currentLanguage);\r\n\r\n          if (item1Value === null || item1Value === undefined) { item1Value = ''; }\r\n          if (item2Value === null || item2Value === undefined) { item2Value = ''; }\r\n\r\n          if (typeof item1Value === 'string' && typeof item2Value === 'string') {\r\n            const localeCompareResult = item1Value.localeCompare(item2Value);\r\n            result = localeCompareResult * order;\r\n          } else {\r\n            if (item1Value > item2Value) {\r\n              result = order * 1;\r\n            }\r\n            if (item1Value < item2Value) {\r\n              result = order * -1;\r\n            }\r\n          }\r\n        }\r\n        return result;\r\n      }, 0);\r\n    };\r\n  }\r\n  private updateDefaultView(change: Subject<Change>) {\r\n    change.pipe(takeUntil(this.destroy$)).subscribe((change: Change) => {\r\n      if (this.defaultView !== null && ((change.path.length === 0 && [ChangeType.Load, ChangeType.Append, ChangeType.Remove, ChangeType.Swap].includes(change.type)) || (change.type === ChangeType.ValueChanged && change.isBindingListTransmited !== true))) {\r\n        switch (change.type) {\r\n          case ChangeType.Load:\r\n            this.defaultView = this.innerList.toList();\r\n            break;\r\n          case ChangeType.Append: {\r\n            // 插入\r\n            if (change.detail && change.detail.type === 'insert') {\r\n              const position = change.detail.position;\r\n              const object = change.value;\r\n              const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\r\n              // 加载BindingObject\r\n              if (position === 1) {\r\n                this.defaultView = this.defaultView.insert(currentIndex + 1, object);\r\n              } else if (position === -1) {\r\n                this.defaultView = this.defaultView.insert(currentIndex, object);\r\n              } else {\r\n                this.defaultView = this.defaultView.push(object);\r\n              }\r\n            } else {\r\n              const objects = change.value as any[];\r\n              this.defaultView = this.defaultView.push(...objects);\r\n            }\r\n            break;\r\n          }\r\n          case ChangeType.Remove:\r\n            const ids = change.value as Array<string>;\r\n            if (ids.length === 0) {\r\n              this.defaultView = this.defaultView.clear();\r\n            } else {\r\n              ids.forEach((id: string) => {\r\n                const index = this.defaultView.findIndex((bindingObject: BindingObject) => bindingObject.primaryKeyValue === id);\r\n                this.defaultView = this.defaultView.delete(index);\r\n              });\r\n            }\r\n\r\n            break;\r\n          case ChangeType.ValueChanged:\r\n            const id = change.id;\r\n            const bindingObject = this.defaultView.find((obj: BindingObject) => obj.primaryKeyValue === id);\r\n            const paths = change.path.concat([]);\r\n            const propertyName = paths.pop();\r\n            const target: BindingObject = paths.reduce((object: BindingObject, path: string) => {\r\n              return object[path];\r\n            }, bindingObject) as BindingObject;\r\n            if (target) {\r\n              target.setValue(propertyName, change.value);\r\n            }\r\n            break;\r\n          case ChangeType.Swap:\r\n            const [id1, id2] = change.detail && change.detail.id;\r\n            const item1 = this.defaultView.find((element) => element.primaryKeyValue === id1);\r\n            const item2 = this.defaultView.find((element) => element.primaryKeyValue === id2);\r\n            this.defaultView = this.defaultView.map((bindingObject: BindingObject, index: number) => {\r\n              if (bindingObject.primaryKeyValue === id1) {\r\n                return item2;\r\n              } else if (bindingObject.primaryKeyValue === id2) {\r\n                return item1;\r\n              } else return bindingObject;\r\n            }).toList();\r\n            break;\r\n          // case ChangeType.SortChanged:\r\n          //   const { fields = [], directions = [] } = change.detail || {};\r\n          //   this.defaultView = this.defaultView.sort(this.comparator(fields, directions)).toList();\r\n          //   break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingList };\r\n","import { Subject, of } from 'rxjs';\r\nimport { Map } from 'immutable';\r\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { InvokeOnValueChange } from './types';\r\n\r\n/**\r\n * 绑定对象基类\r\n */\r\nabstract class BaseBindingObject {\r\n  public __type__ = 'BindingObject';\r\n  // protected data: any = undefined;\r\n  /**\r\n   * immutable值对象\r\n   */\r\n  protected innerValues: Map<string, any>;\r\n  /**\r\n   * 当前语言\r\n   */\r\n  protected currentLanguage: string;\r\n  /**\r\n   * 父对象或父列表\r\n   */\r\n  public parent: BindingList | BaseBindingObject;\r\n\r\n  /**\r\n   * 实体引起的变更\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 界面层引起的变更流\r\n   */\r\n  public viewChanges: Subject<ViewChange>;\r\n\r\n  /**\r\n   *  属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 主键值\r\n   */\r\n  public get primaryKeyValue() {\r\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\r\n  }\r\n  /**\r\n   * 数据行的主键值\r\n   */\r\n  public get rowPrimaryKeyValue() {\r\n    const row = this.getRow(this);\r\n    return row && row.primaryKeyValue || null;\r\n  }\r\n  /**\r\n   * 绑定到实体\r\n   */\r\n  public fromEntity: boolean = undefined;\r\n  /**\r\n   * 标识是否提交过\r\n   */\r\n  public isShowValidationMsg = false;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe: Subject<any> = new Subject();\r\n  /**\r\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\r\n   */\r\n  public controlMap: any = {};\r\n  // private __differ__ = this.differ();\r\n  constructor() {\r\n    this.innerValues = Map<string, any>();\r\n    this.changes = new Subject<Change>();\r\n    this.viewChanges = new Subject<ViewChange>();\r\n  }\r\n  /**\r\n   * 设置是否提交过\r\n   */\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n  // public abstract load(data: any);\r\n  /**\r\n   * 根据属性名获取属性值\r\n   * @param   propertyName 属性名\r\n   * @returns 属性值\r\n   */\r\n  public getValue(propertyName: string): any {\r\n    return this.innerValues.get(propertyName);\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   * @param propertyName        属性名\r\n   * @param propertyValue       属性值\r\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\r\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\r\n   * @param errors              错误消息\r\n   * @param invokeOnValueChange 值变化事件执行句柄\r\n   */\r\n  public setValue(propertyName: string, propertyValue: any, emitEventToView: boolean = false, emitEventToEntity: boolean = false, errors?: any, invokeOnValueChange?: InvokeOnValueChange, context?: any): void {\r\n    // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值\r\n    // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {\r\n    //   return;\r\n    // }\r\n    const oldPropertyValue = this.getValue(propertyName);\r\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\r\n    // if (oldPropertyValue === propertyValue) {\r\n    //   return;\r\n    // }\r\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\r\n      // 设定缺省\r\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean, primaryValue?: any) {\r\n        return of(true);\r\n      };\r\n    }\r\n    if (emitEventToEntity === true) {\r\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\r\n      // if(!this.innerValues.has(propertyName)) {\r\n      //   return;\r\n      // }\r\n      // 执行实体值变化前事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, false, this.rowPrimaryKeyValue).subscribe((result) => {\r\n        if (result) {\r\n          //this.__differ__.onValueChange();\r\n          // 如果成功，执行变化，并通知实体变化\r\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n          // this.data[propertyName] = propertyValue;\r\n          const viewChange = this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);\r\n          this.viewChanges.next(viewChange);\r\n          // 如果需要通知视图，通知视图相应修改\r\n          if (emitEventToView === true) {\r\n            const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n            this.changes.next(change);\r\n          }\r\n          // 执行实体值变化后事件\r\n          invokeOnValueChange(oldPropertyValue, propertyValue, true, this.rowPrimaryKeyValue).subscribe();\r\n        } else {\r\n          // 如果失败，不再通知实体变化\r\n          // 并执行界面回滚操作\r\n          const change = this.buildChangesContext(propertyName, oldPropertyValue, context, errors);\r\n          this.changes.next(change);\r\n        }\r\n      });\r\n    } else {\r\n      //this.__differ__.onValueChange();\r\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\r\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n      // this.data[propertyName] = propertyValue;\r\n      if (emitEventToView === true) {\r\n        const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n        this.changes.next(change);\r\n      }\r\n      // 执行实体值变化后事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, true, this.rowPrimaryKeyValue).subscribe();\r\n    }\r\n  }\r\n  /**\r\n   * 将BindingObject实例转换成JSON对象\r\n   */\r\n  public toJSON(options?: any): any {\r\n    //if (!this.__differ__.isChange()) {\r\n    //  return this.__differ__.value();\r\n    //}\r\n    const langCode = this.getCurrentLanguage();//window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    const result = {};\r\n    this.properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        const list: BindingList = this[propName];\r\n        result[propName] = list.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else {\r\n        // 1、对于多语录入字段；\r\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\r\n        if (property.enableMultiLangInput === true) {\r\n          // 忽略多语字段，只返回当前语言\r\n          if (options && options.ignoreMultiLangInput === true) {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[propName] = multiLangValueObj[langCode];\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          } else if (options && options.useFullMultiLangProperty) {\r\n            // 给审批提供的扩展 @2021-10-13\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[`${propName}_MULTILANGUAGE`] = multiLangValueObj;\r\n              // 除返回多语字段外，将当前语言也返回\r\n              result[propName] = multiLangValueObj[langCode];\r\n            }\r\n          } else {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (!multiLangValueObj) {\r\n              result[propName] = { [langCode]: multiLangValueObj };\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          }\r\n        } else {\r\n          result[propName] = this.getValue(propName);\r\n        }\r\n      }\r\n    });\r\n    // this.__differ__.update(result);\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   * @returns\r\n   */\r\n  protected getCurrentLanguage() {\r\n    this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    return this.currentLanguage;\r\n  }\r\n  /**\r\n   * 构造bindignData变更上下文\r\n   * @param propertyName\r\n   * @param propertyValue\r\n   * @param context\r\n   * @param errors\r\n   * @param type\r\n   * @returns\r\n   */\r\n  private buildChangesContext(propertyName: string, propertyValue: any, context?: any, errors?: any, type: ChangeType = ChangeType.ValueChanged): Change {\r\n    const object = this.getRow(this);\r\n    const id = object ? object.primaryKeyValue : null;\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: propertyValue,\r\n      id: id,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n  /**\r\n   * 构造viewChanges上下文\r\n   * @param propertyName\r\n   * @param value\r\n   * @param preValue\r\n   * @param errors\r\n   * @param context\r\n   * @param type\r\n   * @returns\r\n   */\r\n  private buildViewChangesContext(propertyName: string, value: any, preValue: any, errors?: any, context?: any, type: ViewChangeType = ViewChangeType.ValueChanged): ViewChange {\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: value,\r\n      preValue: preValue,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n  private getRow(bindingObject: BaseBindingObject): BaseBindingObject {\r\n    if (bindingObject && bindingObject.fromEntity) {\r\n      return bindingObject;\r\n    }\r\n    if (bindingObject.parent && !(bindingObject.parent instanceof BindingList)) {\r\n      return this.getRow(bindingObject.parent);\r\n    } else {\r\n      return bindingObject;\r\n    }\r\n  }\r\n  private makeHash() {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < 10; i++)\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    return text;\r\n  }\r\n  private differ() {\r\n    let previous, next, value;\r\n    return {\r\n      onValueChange: () => {\r\n        next = this.makeHash();\r\n      },\r\n      isChange: () => {\r\n        return next !== previous;\r\n      },\r\n      update: (result) => {\r\n        value = result;\r\n        previous = next;\r\n      },\r\n      value: () => {\r\n        return value;\r\n      }\r\n    };\r\n  }\r\n}\r\nexport { BaseBindingObject }\r\n","/**\r\n * BindingObject相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { BindingProperty } from './binding_property';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\n/**\r\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\r\n */\r\nclass BindingObject extends BaseBindingObject {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param properties 属性集合\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    super();\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n  }\r\n  /**\r\n   * 重新加载数据\r\n   * @param data\r\n   */\r\n  /*public load(data: any) {\r\n    throw new Error('Method not implemented.');\r\n  }*/\r\n}\r\n\r\nexport { BindingObject };\r\n","import { Entity } from '../entity/index';\r\nimport { Repository, EntityManager } from '../repository/index';\r\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\r\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingData } from './binding_data';\r\n\r\n\r\nclass BindingDataFactory {\r\n\r\n  /**\r\n   * 根据Repository创建一个BindingData\r\n   */\r\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n    bindingData.setDataTypeInfo(repository.entityTypeInfo);\r\n    EntityLoadUtil.loadRepository(repository, bindingList);\r\n\r\n    // 从repository初始化bindingData\r\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\r\n   * @internal\r\n   * @summary\r\n   * 1、该方法暂时仅供内部单元测试使用；\r\n   * 2、该方法暂时只创建BindingData，不建立双向关联\r\n   */\r\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n\r\n    // 初始化数据\r\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\r\n    EntityLoadUtil.loadEntities(entities, bindingList);\r\n\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据已经存在的BindingData创建一个新的BindingData\r\n   */\r\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\r\n    const bindingData = new BindingData();\r\n    bindingData.initByBindingList(existingBindingData.list, bindingPath);\r\n    return bindingData;\r\n  }\r\n}\r\n\r\nexport { BindingDataFactory };\r\n","/**\r\n * 绑定装饰器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { TypeDecorator, makeDecorator } from '../metadata/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * NgBindingData装饰器名称\r\n * @formType {string}\r\n */\r\nexport const NG_BINDING_DATA = 'NgBindingData';\r\n\r\n/**\r\n * NgBindingData\r\n */\r\nexport interface NgBindingData {\r\n\r\n  // /**\r\n  //  * 关联entity类型\r\n  //  */\r\n  // entity: Type<Entity>;\r\n\r\n  /**\r\n   * 关联repository类型\r\n   */\r\n  repository: Type<Repository<any>>;\r\n}\r\n\r\n/**\r\n * NgBindingContextDecorator\r\n */\r\nexport interface NgBindingDataDecorator {\r\n\r\n  (obj?: NgBindingData): TypeDecorator;\r\n\r\n  new(obj?: NgBindingData): NgBindingData;\r\n\r\n}\r\n\r\n/**\r\n * NgBindingContext\r\n */\r\n\r\n// export const NgBindingData: NgBindingDataDecorator =\r\n//   makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\nexport function NgBindingData(options: NgBindingData) {\r\n  const decoratorFactory = makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\r\n/**\r\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\r\n */\r\nclass DataPathUtil {\r\n\r\n  /**\r\n   * 转换成BindingData可识别的路径\r\n   */\r\n  public static convertToBindingPathArray(path: string): string[] {\r\n    const bindingPathArray = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\r\n   */\r\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const restPathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    restPathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      restPathArray.push(propName);\r\n      restPathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    // 移除最后一个主键\r\n    restPathArray.pop();\r\n    return '/' + restPathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    return pathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n}\r\n\r\nexport { DataPathUtil };\r\n","// tslint:disable: max-line-length\r\nimport { UID } from './uid';\r\n\r\n/**\r\n * GUID创建服务\r\n * @scope 静态类没有提供Provider\r\n */\r\nexport class Guid {\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n    public static validator = new RegExp('^[a-z0-9]+$', 'i');\r\n\r\n    public static EMPTY = '';\r\n\r\n    private value: string;\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid(UID.create());\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return UID.create();\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","import { RunMode } from \"../core\";\r\n\r\nexport class RunModeService {\r\n  private static mode: RunMode = null;\r\n  public static setRunMode(mode: RunMode) {\r\n    RunModeService.mode = mode;\r\n  }\r\n  public static getRunMode() {\r\n    return RunModeService.mode;\r\n  }\r\n}","import { Observable, Subject, from } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { NgFieldProperty, NgListProperty, NgObjectProperty, NgDynamicProperty, FieldMetadataUtil } from './metadata/index';\r\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\r\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\r\nimport { EntityList } from './entity_list';\r\nimport { EntityFactory } from './entity_factory';\r\nimport { Validator, ValidationResult, ValidateRule } from './validator/index';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\nimport { BigNumberType, ChangeSetPolicy, RunMode } from '../core/types';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { FrameContext } from '../frame/index';\r\nimport { RunModeService } from '../misc';\r\n/**\r\n * @author Lucas Huang\r\n * 实体抽象基类，所有实体必须扩展自Entity\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *    userId: string;\r\n *    userName: string;\r\n *\r\n *    constructor(data: any){\r\n *        super(data);\r\n *    }\r\n * }\r\n * ```\r\n */\r\nexport abstract class Entity {\r\n  // #region 私有、保护属性\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  private validErrors = {};\r\n  private primaryFieldMetadata: NgFieldProperty = null;\r\n  private originalData = undefined;\r\n  /**\r\n   * 验证器\r\n   */\r\n  private validator: Validator<any>;\r\n\r\n  /**\r\n   * 增量变更集合\r\n   */\r\n  protected changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 是否正在验证\r\n   */\r\n  protected isValidating = false;\r\n\r\n  /**\r\n   * 新数据\r\n   */\r\n  protected newData = undefined;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe: Subject<any> = new Subject();\r\n  /**\r\n   * 变更提交策略\r\n   */\r\n  private _changeSetPolicy: ChangeSetPolicy;\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public valueChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 属性值改变时触发\r\n   *\r\n   * ### 使用示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.onValueChanged.subscribe((data: Modification) => {\r\n   *      console.log(data);\r\n   *  })\r\n   *\r\n   * ```\r\n   *\r\n   * @event\r\n   */\r\n  public onValueChanged = this.valueChanged.asObservable();\r\n  public onUpdate = new Subject<Modification>();\r\n  /**\r\n   * 返回JSON格式的数据\r\n   */\r\n  public get data(): any {\r\n    return this.newData;\r\n  }\r\n  public set data(value: any) {\r\n    this.newData = value;\r\n  }\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  public get errors() {\r\n    return this.validErrors;\r\n  }\r\n\r\n  public set errors(errors: any) {\r\n    this.validErrors = errors;\r\n  }\r\n  public set changeSetPolicy(policy: ChangeSetPolicy) {\r\n    this._changeSetPolicy = policy;\r\n  }\r\n  public get changeSetPolicy(): ChangeSetPolicy {\r\n    return this._changeSetPolicy;\r\n  }\r\n  /**\r\n   * 实体变更集\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.changeSet.changes;\r\n  }\r\n  /**\r\n   * 实体主键元数据\r\n   */\r\n\r\n  public get primaryProperty(): NgFieldProperty {\r\n    if (!this.primaryFieldMetadata) {\r\n      this.primaryFieldMetadata = FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\r\n    }\r\n    return this.primaryFieldMetadata;\r\n  }\r\n\r\n  /**\r\n   * 主键\r\n   * @todo\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryKey(): string {\r\n    if (this.primaryProperty) {\r\n      return this.primaryProperty.property;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实体主键值\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryValue(): string {\r\n    if (this.primaryKey) {\r\n      // return this[this.primaryProperty.property].toString();\r\n      const primaryValue = this[this.primaryProperty.property];\r\n      return primaryValue ? primaryValue : '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    this.validator = new Validator();\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n    this.onValueChanged = this.valueChanged;\r\n    // this.onValueChanged = this.valueChanged.pipe(\r\n    //     scan((x: Modification, curr: Modification) => {\r\n    //         if (x) {\r\n    //             if (isEqual(x.path, curr.path) && x.type === curr.type) {\r\n    //                 return Object.assign(x, curr);\r\n    //             }\r\n    //             return curr;\r\n    //         }\r\n    //         return curr;\r\n    //     })\r\n    // );\r\n    if (RunModeService.getRunMode() === RunMode.compatible) {\r\n      this.initialize();\r\n    }\r\n    // this.validate();\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName) && this.changeSetPolicy === 'valid')) {\r\n      if (value && value.changeSetValue !== undefined) {\r\n        value = JSON.parse(JSON.stringify(value));\r\n        value.value = value.changeSetValue;\r\n      }\r\n      this.changeSet.append(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 校验实体各属性的值\r\n   * @param propertyName 属性名称，如果为空，则验证实体中所有设置了验证规则的属性\r\n   * @returns Observable<ValidationResult>\r\n   * ### 示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.validate().subscribe(result =>{\r\n   *      if(result.isValid){\r\n   *          ...\r\n   *      } else {\r\n   *          console.log(result.message);\r\n   *      }\r\n   *  })\r\n   *\r\n   * ```\r\n   */\r\n\r\n  // tslint:disable-next-line: max-line-length\r\n  public validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index, frameContext)).pipe(\r\n      tap(result => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  }\r\n\r\n  // 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n  public validateFromUtil(propertyName: string, value, cb, context?: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value, null, undefined, context && context.frameContext || null)).subscribe(result => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  }\r\n  /**\r\n   * 同步校验\r\n   * @param propertyName \r\n   * @param value \r\n   * @param cb \r\n   */\r\n  public validateFromUtilSync(propertyName: string, value: any, cb: any, context?: any) {\r\n    this.validErrors = {};\r\n    const result: any = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n    if (result && !result.isValid) {\r\n      this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n    }\r\n    cb(result);\r\n  }\r\n  public getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  }\r\n  public getEntityListPath() {\r\n    let paths = [];\r\n    const handleParent = (item: Entity) => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        if (item instanceof EntityList === true) {\r\n          const path = parentPaths.concat([]).reverse();\r\n          Array.prototype.push.apply(paths, path);\r\n        }\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    return paths.reverse();\r\n  }\r\n  public getMainEntityPrimaryValue() {\r\n    let item = this;\r\n    while (item[PARENT_CLASS]) {\r\n      item = item[PARENT_CLASS];\r\n    }\r\n    return item.primaryValue;\r\n  }\r\n  /**\r\n   * 加载数据\r\n   * @param data 新数据\r\n   */\r\n  public load(data: any, options: any = {}) {\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n    this.loadFields(data);\r\n    if (!options || (options && options.loadChild !== false)) {\r\n      this.loadLists(data);\r\n    }\r\n    this.loadObjects(data);\r\n    this.loadDynamicObjects(data);\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n  }\r\n  /**\r\n   * 转换为JSON\r\n   * @param buildChanges 是否构造变更集\r\n   * @param includeMultiLanguageField 是否包含多语字段\r\n   */\r\n  public toJSON(buildChanges?: boolean) {\r\n    const result = {};\r\n\r\n    // 简单属性\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n\r\n    // 对象属性\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 动态属性\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 列表属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  //#region 实体初始化相关private方法\r\n\r\n  /**\r\n   * 初始化实体\r\n   */\r\n  private initialize() {\r\n    const constructor = this.constructor;\r\n\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n\r\n    this.initializeNormalField(ngFields);\r\n    this.initializeList(ngLists);\r\n    this.initializeObject(ngObjects);\r\n    this.initializeDynamic(ngDynamic);\r\n  }\r\n\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  protected createPath(propertyName: string): string[] {\r\n    const primaryFieldMetadata = this.primaryProperty;\r\n    if (primaryFieldMetadata) {\r\n      const primaryDataField = primaryFieldMetadata.dataField;\r\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 属性字段初始化\r\n   * @param ngFields 属性字段元数据\r\n   */\r\n  private initializeNormalField(ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(propName => {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      const dataField = ngField.dataField || propName;\r\n\r\n      if (delete this[propName]) {\r\n        Object.defineProperty(this, propName, {\r\n          get: function () {\r\n            const value = this.getPropValue(propName, ngField);\r\n            return value;\r\n          },\r\n          set: function (newPropValue) {\r\n            // 值相同时不触发变更。\r\n            const oldPropValue = this.getPropValue(propName, ngField);\r\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n              return;\r\n            }\r\n            this.setPropValue(propName, ngField, newPropValue);\r\n            const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化列表类型的元数据\r\n   * @param ngListMetadata 列表类型元数据\r\n   */\r\n  private initializeList(ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n      const val = this.data[dataField];\r\n\r\n      const entityList = new EntityList<typeof fieldMetadata.type>();\r\n      entityList[PARENT_CLASS] = this;\r\n      entityList[PARENT_PATH] = path;\r\n\r\n      if (val) {\r\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n        entityList.loadEntities(entities);\r\n      }\r\n\r\n      entityList.onListChanged.subscribe(value => {\r\n        if (value) {\r\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n            value.path = entityList[PARENT_PATH].concat(value.path);\r\n          }\r\n          this.setChanges(value);\r\n        }\r\n      });\r\n      this[propertyName] = entityList;\r\n    });\r\n  }\r\n  /**\r\n   * 初始化子对象\r\n   * @param ngObjectMetadata 子对象元数据\r\n   */\r\n  private initializeObject(ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      // val不存在时，用空对象代替\r\n      const val = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      // 如果没有值用一个空对象代替\r\n      let childEntity = createEntityFromJsonData(val);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: () => {\r\n            return childEntity;\r\n          },\r\n          set: function (value: any) {\r\n            const modifyInfo = {\r\n              path: childEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            childEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      const originalData = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      let dynamicEntity = createEntityFromJsonData(originalData);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function () {\r\n            return dynamicEntity;\r\n          },\r\n          set: function (value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n\r\n  // #region 加载实体数据相关private、projected方法\r\n\r\n  /**\r\n   * 加载简单字段值\r\n   * @todo 临时用修改的方式模拟\r\n   */\r\n  protected loadFields(data: any) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      // if (ngField.primary === false) {\r\n      //   this[propName] = data[dataField];\r\n      // }\r\n      let propValue = data[dataField];\r\n      if (ngField.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this[propName] = propValue;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 加载子列表数据\r\n   * @param data 数据\r\n   */\r\n  protected loadLists(data: any) {\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      const entityType = ngList.type;\r\n\r\n      // 创建实体\r\n      const listData = data[dataField];\r\n      if (listData) {\r\n        const entities = listData.map((entityData: any) => {\r\n          return EntityFactory<typeof entityType>(entityType, entityData);\r\n        });\r\n        this[propName].loadEntities(entities);\r\n      } else {\r\n        this[propName].loadEntities([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadObjects(data: any) {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      const objectData = data[dataField];\r\n      const entity = this[propName] as Entity;\r\n      if (!entity || !objectData) {\r\n        return;\r\n      }\r\n      entity.load(objectData);\r\n    });\r\n  }\r\n\r\n  protected loadDynamicObjects(data: any) {\r\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\r\n      const ngDynamicObject = ngDynamicObjects[propName];\r\n      const dataField = ngDynamicObject.dataField || propName;\r\n\r\n      const dynamicData = data[dataField] || {};\r\n      const dynamicEntity = this[propName] as Dynamic;\r\n      if (!dynamicEntity) {\r\n        return;\r\n      }\r\n      dynamicEntity.loadDynamicData(dynamicData);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 私有工具方法\r\n\r\n\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  private emitValueChange(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any, changeSetValue: any = undefined): void {\r\n    const change = {\r\n      path: this.createPath(propName),\r\n      value: newPropValue,\r\n      changeSetValue,\r\n      preValue: oldPropValue,\r\n      type: ModifyType.ValueChange\r\n    };\r\n\r\n    if (this[PARENT_PATH]) {\r\n      change.path = this[PARENT_PATH].concat(change.path);\r\n    }\r\n    this.setChanges(change);\r\n  }\r\n  /**\r\n   * 准备提交给后端的属性值\r\n   * @param propName 属性\r\n   * @param propMetadata 属性描述\r\n   * @param propValue 属性值\r\n   */\r\n  private preparePropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    let value = undefined;\r\n    // 只要启用时区，传给后端的时间就必须带时区，因此当获取用户时区失败的时候，获取浏览器当前时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && propValue) {\r\n        value = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  private getPropValue(propName: string, propMetadata: NgFieldProperty) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    let value = this.data[dataField];\r\n\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (propMetadata.enableMultiLangInput === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    // 启用时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && value) {\r\n        return ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(value, timeZoneOffset);\r\n      }\r\n    }\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      value = value !== null && value !== undefined && value.toString() || null;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  private setPropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      this.data[dataField] = propValue === null ? null : propValue && propValue.toString() || '';\r\n    } else {\r\n      if (propMetadata.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this.data[dataField] = propValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  private isPropValueChanged(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any) {\r\n    if (propMetadata.enableMultiLangInput === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      if (typeof newPropValue !== 'string' && newPropValue !== null && newPropValue !== undefined) {\r\n        newPropValue = newPropValue.toString();\r\n      }\r\n      return newPropValue !== oldPropValue;\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  private isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // #endregion\r\n}\r\n","import { ModifyType, Modification } from '../changeset/types';\r\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\r\nimport { Entity } from './entity';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 支持动态字段集合的动态实体\r\n */\r\nexport class DynamicEntity extends Entity implements Dynamic {\r\n\r\n  /**\r\n   * 是否是嵌套的动态实体\r\n   */\r\n  public get IsNested(): boolean {\r\n    return this[PARENT_CLASS] instanceof DynamicEntity;\r\n  }\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    super(data);\r\n    this.loadDynamicData(data);\r\n  }\r\n\r\n  public loadDynamicData(dynamicData: any) {\r\n    this.initializeDynamicField(dynamicData);\r\n    // super.loadFields(dynamicData);\r\n  }\r\n\r\n  /**\r\n   * 初始化动态数据\r\n   * @param dynamicData 动态数据\r\n   */\r\n  private initializeDynamicField(dynamicData: any): void {\r\n    // 遍历动态数据的key，创建动态实体属性。\r\n    Object.keys(dynamicData).forEach(propertyName => {\r\n      const dataField = propertyName;\r\n      if (delete this[propertyName]) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          const path = this.createPath(propertyName);\r\n          let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgObject({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为外键 */\r\n          //     type: DynamicEntity\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            get: function () {\r\n              return dynamicEntity;\r\n            },\r\n            set: function (value) {\r\n              const modifyInfo = {\r\n                path: dynamicEntity[PARENT_PATH],\r\n                value: value.data,\r\n                preValue: this[propertyName].data,\r\n                type: ModifyType.ValueChange\r\n              };\r\n              dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\r\n              this.setChanges(modifyInfo);\r\n            }\r\n          });\r\n        } else {\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgField({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为主键 */\r\n          //     primary: false,\r\n          //     /** 是否为外键 */\r\n          //     foreign: false\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            // 定义返回数据方法。\r\n            get: function () {\r\n              // 从初始数据返回字段值。\r\n              return this.data[dataField];\r\n            },\r\n            set: function (value) {\r\n              // 值相同时不触发变更。\r\n              const oldValue = this.data[dataField];\r\n              if (oldValue === value) {\r\n                return;\r\n              }\r\n              // 更新元数据数据。\r\n              this.data[dataField] = value;\r\n              // 变更集\r\n              const changes = {\r\n                type: ModifyType.ValueChange,\r\n                path: this.createPath(propertyName),\r\n                value: value,\r\n                preValue: oldValue\r\n              };\r\n\r\n              if (this[PARENT_PATH]) {\r\n                changes.path = this[PARENT_PATH].concat(changes.path);\r\n              }\r\n              this.setChanges(changes);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\r\n    let instance: DynamicEntity;\r\n    if (value instanceof DynamicEntity) {\r\n      instance = value;\r\n    } else {\r\n      instance = new DynamicEntity(value);\r\n      instance.constructor = DynamicEntity;\r\n    }\r\n    instance[PARENT_CLASS] = this;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.pipe(takeUntil(this.unsubscribe)).subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n        this.setChanges(changes);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   * @todo\r\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\r\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\r\n   */\r\n  setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n    const preValue = Object.assign({}, this.data);\r\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n    let parentPath = value.path;\r\n    if (value.path.length > 2) {\r\n      parentPath = value.path.slice(0, value.path.length - 2);\r\n    }\r\n\r\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\r\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\r\n    const parentModification: Modification = {\r\n      path: parentPath,\r\n      value: this.data,\r\n      preValue: preValue,\r\n      type: value.type,\r\n      dynamic: true\r\n    };\r\n\r\n    this.valueChanged.next(parentModification);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  /**\r\n   * toJSON\r\n   */\r\n  public toJSON() {\r\n    return this.data;\r\n  }\r\n}\r\n","import { EnumData, FormVariable } from './dom-entity';\r\n\r\nexport interface SchemaType {\r\n    name: string;\r\n    code: string;\r\n    label: string;\r\n    fields?: SchemaEntityField[];\r\n    entities?: SchemaEntity[];\r\n    primary?: string;\r\n}\r\n\r\n/**\r\n * schema\r\n */\r\nexport class Schema {\r\n    public dataSource?: string;\r\n    public sourceUri: string;\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public entities: SchemaEntity[];\r\n    public variables: SchemaEntityField[];\r\n    public eapiId: string;\r\n    public extendProperties: { enableStdTimeFormat: boolean };\r\n}\r\n\r\n/**\r\n * 实体\r\n */\r\nexport class SchemaEntity {\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public label: string;\r\n    public type: SchemaEntityType;\r\n}\r\n\r\n/**\r\n * 实体类型对象\r\n */\r\nexport class SchemaEntityType implements SchemaType {\r\n    public code: string;\r\n    public label: string;\r\n    public name: string;\r\n    public primary: string;\r\n    public fields: SchemaEntityField[];\r\n    public entities?: SchemaEntity[];\r\n    public displayName?: string;\r\n}\r\n\r\n/**\r\n * 字段\r\n */\r\nexport class SchemaEntityField {\r\n    public $type: SchemaEntityField$Type;\r\n    public id: string;\r\n    public originalId: string;\r\n    public code: string;\r\n    public label: string;\r\n    public bindingField: string;\r\n    public name: string;\r\n    public defaultValue: any;\r\n    public require: boolean;\r\n    public readonly: boolean;\r\n    public type: SchemaEntityFieldType;\r\n    public editor?: SchemaEntityFieldEditor;\r\n    public path?: string;\r\n    public bindingPath?: string;\r\n    public multiLanguage?: boolean;\r\n    public converter?: any;\r\n    // 表达式\r\n    public expression?: any;\r\n}\r\n\r\n/**\r\n * 字段类型对象\r\n */\r\nexport class SchemaEntityFieldType implements SchemaType {\r\n    code: string;\r\n    label: string;\r\n    public $type: SchemaEntityFieldType$Type;\r\n    public name: SchemaEntityFieldTypeName | any;\r\n    public length?: number;\r\n    public precision?: number;\r\n    public valueType?: SchemaEntityFieldType;\r\n    public enumValues?: EnumData[];\r\n    public fields?: SchemaEntityField[];\r\n    public displayName?: string;\r\n    public primary?: string;\r\n    public entities?: SchemaEntity[];\r\n    // 用于区分日期/日期事件和整型/浮点型数据\r\n    public elementType?: any;\r\n\r\n\r\n    // 扩展属性:  运行时定制用\r\n    public extendProperty?: any;\r\n}\r\n\r\n/**\r\n * 字段编辑器对象\r\n */\r\nexport class SchemaEntityFieldEditor {\r\n    public $type: any;\r\n    [propName: string]: any;\r\n}\r\n\r\n\r\n/**\r\n * 字段类型枚举\r\n */\r\nexport enum SchemaEntityField$Type {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    SimpleField = 'SimpleField',\r\n    /**\r\n     * 关联/UDT类型字段\r\n     */\r\n    ComplexField = 'ComplexField'\r\n}\r\n\r\n/**\r\n * 字段类型对象中的类型枚举\r\n */\r\nexport enum SchemaEntityFieldType$Type {\r\n\r\n    /**\r\n     * 字符串\r\n     */\r\n    StringType = 'StringType',\r\n    /**\r\n     * 备注\r\n     */\r\n    TextType = 'TextType',\r\n    /**\r\n     * 数字（整数、浮点数）\r\n     */\r\n    NumericType = 'NumericType',\r\n    /**\r\n     * 布尔\r\n     */\r\n    BooleanType = 'BooleanType',\r\n    /**\r\n     * 日期\r\n     */\r\n    DateType = 'DateType',\r\n\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTimeType = 'DateTimeType',\r\n\r\n    /**\r\n     * 枚举\r\n     */\r\n    EnumType = 'EnumType',\r\n    /**\r\n     * 实体类\r\n     */\r\n    EntityType = 'EntityType',\r\n\r\n    /**\r\n     * 分级码\r\n     */\r\n    HierarchyType = 'HierarchyType',\r\n\r\n    /**\r\n     * 对象\r\n     */\r\n    ObjectType = 'ObjectType',\r\n\r\n    /**\r\n     * 数字（大数据）\r\n     */\r\n    BigNumericType = 'BigNumericType'\r\n}\r\n\r\n\r\n/**\r\n * 字段类型中的名称\r\n */\r\nexport enum SchemaEntityFieldTypeName {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    String = 'String',\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTime = 'DateTime',\r\n    /**\r\n     * 日期\r\n     */\r\n    Date = 'Date',\r\n    /**\r\n     * 枚举\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * 布尔\r\n     */\r\n    Boolean = 'Boolean',\r\n\r\n    /**\r\n     * 数字\r\n     */\r\n    Number = 'Number',\r\n\r\n    /**\r\n     * 备注\r\n     */\r\n    Text = 'Text',\r\n\r\n    /**\r\n     * 大数字\r\n     */\r\n    BigNumber = 'BigNumber'\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 实体取数服务\r\n */\r\ninterface EntityDataService {\r\n\r\n  /**\r\n   * 新增子实体\r\n   * @param path 子实体路径\r\n   */\r\n  addChild(childPath: string);\r\n\r\n  /**\r\n   * 删除子实体\r\n   * @param path 子实体路径\r\n   * @param id 待删除子实体id\r\n   */\r\n  removeChild(childPath: string, id: string);\r\n\r\n}\r\n\r\nconst ENTITY_DATA_SERVICE_TOKEN = new InjectionToken<EntityDataService>('@farris/devkit ENTITY_DATA_SERVICE');\r\n\r\nexport { EntityDataService, ENTITY_DATA_SERVICE_TOKEN };\r\n","import { from, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Modification, ModifyType } from '../changeset';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { SchemaEntity, SchemaEntityField } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { FieldMetadataUtil } from './metadata/field_metadata_util';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { ValidateRule, ValidationResult } from './validator/types';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\n\r\nexport const entityPrototype = {\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  getFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const value = this.data[fieldName];\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (schemaField.multiLanguage === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = fieldName.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    return value;\r\n  },\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  setFieldValue: function(schemaField: SchemaEntityField, propertyValue: any) {\r\n    const fieldName = schemaField.label;\r\n    this.data[fieldName] = propertyValue;\r\n  },\r\n  /**\r\n   * 获取复杂类型对象的值\r\n   * @param schemaField Schema字段描述\r\n   * @returns 复杂类型对象的值\r\n   */\r\n  getComplexFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    return objectPropertyValue;\r\n  },\r\n  /**\r\n   * 向实体复杂类型字段赋值\r\n   * @param schemaField Schema字段描述\r\n   * @param ComplexField 复杂类型字段的类型定义\r\n   * @param propertyValue 属性值\r\n   */\r\n  setComplexFieldValue: function(schemaField: SchemaEntityField, ComplexField: any, propertyValue: any) {\r\n    // 提取字段名\r\n    const fieldName = schemaField.label;\r\n    let complexFieldInstance = null;\r\n    if (propertyValue instanceof ComplexField) {\r\n      complexFieldInstance = propertyValue;\r\n    } else {\r\n      complexFieldInstance = new ComplexField(propertyValue);\r\n      complexFieldInstance.constructor = ComplexField;\r\n    }\r\n    // 提取复杂类型对象的值\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    const propertyPath = (objectPropertyValue && objectPropertyValue[PARENT_PATH]) || complexFieldInstance[PARENT_PATH];\r\n    // 构造变更信息\r\n    const changeInfo = {\r\n      // 提取变更对象相对于根实体的路径\r\n      path: propertyPath,\r\n      // 记录对象最新值\r\n      value: propertyValue,\r\n      // 记录对象历史值\r\n      preValue: (this[fieldName] && this[fieldName].data) || null,\r\n      // 标记这是一个值变化变更\r\n      type: ModifyType.ValueChange\r\n    };\r\n    // 创建新的对象\r\n    this.innerEntities[fieldName] = complexFieldInstance;\r\n    // this.innerEntities[fieldName] = new ComplexField(propertyValue);\r\n    // 记录本次数据变更\r\n    if (!this.isInitializing) {\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 获取指定的子实体列表\r\n   * @param schemaEntity 实体描述\r\n   * @returns 子实体列表\r\n   */\r\n  getEntities: function(schemaEntity: SchemaEntity) {\r\n    const dataField = schemaEntity.label;\r\n    const listPropertyValue = this.innerEntities[dataField];\r\n    return listPropertyValue;\r\n  },\r\n  /**\r\n   * 更新指定子实体的值\r\n   * @param schemaEntity 实体描述\r\n   * @param propertyValue 实体列表\r\n   */\r\n  setEntities: function(schemaEntity: SchemaEntity, propertyValue: any) {\r\n    const dataField = schemaEntity.label;\r\n    this.innerEntities[dataField] = propertyValue;\r\n  },\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  isFieldValueChanged: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) {\r\n    if (schemaField.multiLanguage === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  },\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  emitFieldValueChange: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any): void {\r\n    if (!this.isInitializing) {\r\n      const fieldName = schemaField.label;\r\n      const changeInfo = {\r\n        path: this.createPath(fieldName),\r\n        value: newPropValue,\r\n        preValue: oldPropValue,\r\n        type: ModifyType.ValueChange\r\n      };\r\n\r\n      if (this[PARENT_PATH]) {\r\n        changeInfo.path = this[PARENT_PATH].concat(changeInfo.path);\r\n      }\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  setChanges: function(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {\r\n      this.changeSet.append(value);\r\n    }\r\n  },\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  createPath: function(propertyName: string): string[] {\r\n    if (this.primaryKey) {\r\n      return [this.primaryKey + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  },\r\n  getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  },\r\n  validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index)).pipe(\r\n      tap((result: any) => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  },\r\n  validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  },\r\n  /**\r\n   * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n   */\r\n  validateFromUtil(propertyName: string, value: any, cb: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value)).subscribe((result: any) => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  },\r\n  /**\r\n   * 将实体数据转换为JSON格式\r\n   */\r\n  toJSON(buildChanges?: boolean) {\r\n    // 声明转换初始值\r\n    const result = {};\r\n    // 提取简单类型字段的值\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n    // 提取对象类型字段的值\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取动态属性字段的值\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取列表字段的属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { ChangeSet, Modification } from '../changeset';\r\nimport { Schema, SchemaEntity, SchemaEntityField, SchemaEntityField$Type, SchemaType } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { entityPrototype } from './entity_prototype';\r\nimport { NG_ENTITY, NG_FIELD, NG_LIST, NG_OBJECT } from './metadata';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { Validator } from './validator';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\n\r\nexport interface AbstractEntityType {\r\n  typeName: string;\r\n  types: any;\r\n  __prop__metadata__: any;\r\n}\r\n\r\n/**\r\n * 实体类型工厂\r\n * 用来根据实体Schema描述信息创建实体类型\r\n */\r\nexport class EntityTypeFactory {\r\n\r\n  constructor() { }\r\n  /**\r\n   * 由实体Schema结构创建实体类型\r\n   * @param schema 实体Schema结构\r\n   * @returns 实体类型\r\n   */\r\n  public create(schema: Schema) {\r\n    // 提取Schema定义中的第一个是实体描述\r\n    const schemaType = schema.entities[0].type;\r\n    // 创建实体类型\r\n    const entityType = this.createClass(schemaType, schema.entities[0]);\r\n    return entityType;\r\n  }\r\n  /**\r\n   * 由实体Schema类型描述创建实体类\r\n   * @param schemaType Schema实体类型描述\r\n   * @returns 实体类型\r\n   */\r\n  private createClass(schemaType: SchemaType, relateSchema: any) {\r\n    const attachEntityInstanceData = this.createEntityInstanceDataInitializer(schemaType);\r\n    // 创建指定实体类型的初始化函数，用来在实体类型构造函数中为实体实例赋值\r\n    const initialize = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      entityInstance.isInitializing = true;\r\n      attachEntityInstanceData(entityInstance, entityData, entityTypeConstructor);\r\n      entityInstance.isInitializing = false;\r\n    };\r\n    // 声明实体类构造函数\r\n    const ConcreteEntity = function (data: any) {\r\n      // 创建实体变更集\r\n      this.changeSet = new ChangeSet();\r\n      // 初始化实体验证状态\r\n      this.isValidating = false;\r\n      // 设置unsubscribe 取消订阅事件\r\n      this.unsubscribe = new Subject();\r\n      // 初始化实体验证信息\r\n      this.validErrors = {};\r\n      // 初始化验证器\r\n      this.validator = new Validator();\r\n      // 初始化实体数据副本\r\n      this.innerData = Object.assign({}, data);\r\n      // 初始化子实体对象集合\r\n      this.innerEntities = {};\r\n      // 初始化实体值变化事件\r\n      this.valueChanged = new Subject<Modification>();\r\n      this.onValueChanged = this.valueChanged;\r\n      this.validateFromUtilSync = function (propertyName, value, cb, context) {\r\n        this.validErrors = {};\r\n        const result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n        if (result && !result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        }\r\n        cb(result);\r\n      };\r\n      // 调用初始化方法，初始化实体数据\r\n      initialize(this, data, ConcreteEntity);\r\n      this.load = (newData: any) => {\r\n        attachEntityInstanceData(this, newData, ConcreteEntity);\r\n        this.data = newData;\r\n      };\r\n    };\r\n\r\n\r\n    // 在实体类构造函数中记录视图类型名称\r\n    ConcreteEntity.typeName = `${schemaType.name}Entity`;\r\n    ConcreteEntity.code = relateSchema.code;\r\n    ConcreteEntity.label = relateSchema.label;\r\n    // 在实体类构造函数中记录其下直接引用的子类型\r\n    ConcreteEntity.types = {};\r\n    ConcreteEntity.__prop__metadata__ = {\r\n\r\n    };\r\n\r\n    // 构造实体类的原型对象\r\n    const entityTypePrototype = Object.assign({ typeName: 'ConcreteEntityPrototype' }, entityPrototype);\r\n    // 向实体类原型对象中定义预制属性\r\n    this.definePresetProperty(entityTypePrototype, schemaType);\r\n    // 向实体类原型对象中定义字段属性get/set方法\r\n    this.defineFieldsToPrototype(entityTypePrototype, schemaType.fields, schemaType.primary, ConcreteEntity);\r\n    // 向实体类原型对象中定义访问子实体的get/set方法\r\n    this.defineEntitiesToPrototype(entityTypePrototype, schemaType.entities, ConcreteEntity);\r\n    // 将实体类的原型对象指向新构造的原型对象。\r\n    ConcreteEntity.prototype = entityTypePrototype;\r\n\r\n\r\n    return ConcreteEntity;\r\n  }\r\n  /**\r\n   * 向实体类原型对象中定义预制属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaType Schema类型描述\r\n   */\r\n  private definePresetProperty(prototypeObject: any, schemaType: SchemaType) {\r\n    /**\r\n     * 实体数据\r\n     */\r\n    Object.defineProperty(prototypeObject, 'data', {\r\n      get: function () {\r\n        if (!this.innerData) {\r\n          this.innerData = {};\r\n        }\r\n        return this.innerData;\r\n      },\r\n      set: function (value) {\r\n        this.innerData = value;\r\n      }\r\n    });\r\n    /**\r\n     * 实体验证信息\r\n     */\r\n    Object.defineProperty(prototypeObject, 'errors', {\r\n      get: function () {\r\n        return this.validErrors;\r\n      },\r\n      set: function (errors: any) {\r\n        this.validErrors = errors;\r\n      }\r\n    });\r\n    /**\r\n     * 实体变更集\r\n     */\r\n    Object.defineProperty(prototypeObject, 'changes', {\r\n      get: function () {\r\n        return this.changeSet.changes;\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryProperty', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        // return schemaType.primary;\r\n        return prototypeObject.innerPrimaryProperty || { dataField: schemaType.primary };\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryKey', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        return schemaType.primary || '';\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键的值\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryValue', {\r\n      get: function () {\r\n        if (this.primaryKey) {\r\n          // return this[this.primaryProperty.property].toString();\r\n          const primaryValue = this[this.primaryKey];\r\n          return primaryValue ? primaryValue : '';\r\n        } else {\r\n          return '';\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 向实体类定义字段属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param fields 字段描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineFieldsToPrototype(\r\n    prototypeObject: any,\r\n    fields: SchemaEntityField[],\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ): void {\r\n    if (fields && fields.length) {\r\n      // 遍历Schema中描述的字段，在实体原型对象上定义字段访问函数\r\n      fields.forEach(schemaEntityField => {\r\n        switch (schemaEntityField.$type) {\r\n          // 定义简单类型字段\r\n          case SchemaEntityField$Type.SimpleField:\r\n            this.defineSimpleFieldToPrototype(prototypeObject, schemaEntityField, primary, parentEntityType);\r\n            break;\r\n          // 定义复杂类型字段\r\n          case SchemaEntityField$Type.ComplexField:\r\n            this.defineComplexFieldToPrototype(prototypeObject, schemaEntityField, parentEntityType);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 向实体类定义简单类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   */\r\n  private defineSimpleFieldToPrototype(\r\n    prototypeObject: any,\r\n    schemaField: SchemaEntityField,\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ) {\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        return this.getFieldValue(schemaField);\r\n      },\r\n      set: function (newPropValue) {\r\n        // 值相同时不触发变更。\r\n        const oldPropValue = this.getFieldValue(schemaField);\r\n        if (this.isFieldValueChanged(schemaField, newPropValue, oldPropValue) === false) {\r\n          return;\r\n        }\r\n        this.setFieldValue(schemaField, newPropValue);\r\n        this.emitFieldValueChange(schemaField, newPropValue, oldPropValue);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 字段名称 */\r\n      dataField: this.getDataField(schemaField),\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 原始字段类型 */\r\n      originalDataFieldType: schemaField.type.name,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      primary: schemaField.label === primary,\r\n      enableMultiLangInput: this.getEnableMultiLangInput(schemaField),\r\n      defaultValue: schemaField.defaultValue,\r\n      ngMetadataName: NG_FIELD\r\n    };\r\n    if (schemaField['enableStdTimeFormat'] && fieldMetadata.originalDataFieldType == \"DateTime\") {\r\n      fieldMetadata[\"enableTimeZone\"] = true;\r\n    }\r\n    if (fieldMetadata.primary) {\r\n      prototypeObject.innerPrimaryProperty = fieldMetadata;\r\n    }\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n\r\n  private getDataField(schemaField: SchemaEntityField) {\r\n    if (schemaField.multiLanguage) {\r\n      return schemaField.label + \"_\" + \"MULTILANGUAGE\";\r\n    }\r\n    return schemaField.label;\r\n  }\r\n\r\n  private getEnableMultiLangInput(schemaField: SchemaEntityField) {\r\n    if (schemaField.multiLanguage) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 向实体类定义复杂类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineComplexFieldToPrototype(prototypeObject: any, schemaField: SchemaEntityField, parentEntityType: AbstractEntityType) {\r\n    const complexFieldType = this.createClass(schemaField.type, schemaField);\r\n    parentEntityType.types[schemaField.type.name] = complexFieldType;\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        const fieldValue = this.getComplexFieldValue(schemaField);\r\n        return fieldValue;\r\n      },\r\n      set: function (value: any) {\r\n        this.setComplexFieldValue(schemaField, complexFieldType, value);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 映射字段 */\r\n      dataField: schemaField.label,\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 引用实体类型 */\r\n      type: complexFieldType,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      ngMetadataName: NG_OBJECT\r\n    };\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n  /**\r\n   * 向实体类定义子实体\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param entities 实体描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineEntitiesToPrototype(prototypeObject: any, entities: SchemaEntity[], parentEntityType: AbstractEntityType) {\r\n    if (entities && entities.length) {\r\n      // 遍历Schema中描述的子实体，在实体对象上定义子实体列表\r\n      entities.forEach(schemaEntity => {\r\n        const complexFieldType = this.createClass(schemaEntity.type, schemaEntity);\r\n        parentEntityType.types[schemaEntity.type.name] = complexFieldType;\r\n        // 提取子实体在实体对象上的属性名\r\n        const propertyName = schemaEntity.label;\r\n        Object.defineProperty(prototypeObject, propertyName, {\r\n          get: function () {\r\n            const fieldValue = this.getEntities(schemaEntity);\r\n            return fieldValue;\r\n          },\r\n          set: function (value: any) {\r\n            this.setEntities(schemaEntity, value);\r\n          }\r\n        });\r\n        const entitMetadata = {\r\n          /** 字段名称 */\r\n          dataField: schemaEntity.label,\r\n          /** 原始字段名称 */\r\n          originalDataField: '',\r\n          /** 实体类型 */\r\n          type: complexFieldType,\r\n          ngMetadataName: NG_LIST\r\n        };\r\n        if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n          parentEntityType.__prop__metadata__[propertyName] = [];\r\n        }\r\n        parentEntityType.__prop__metadata__[propertyName].push(entitMetadata);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 创建初始化实体对象方法\r\n   * @param schemaType 实体类型描述\r\n   * @returns 初始化实体对象方法\r\n   */\r\n  private createEntityInstanceDataInitializer(schemaType: SchemaType) {\r\n    /**\r\n     * 实体初始化函数，用来初始化实体的复杂类型数据和子实体数据\r\n     * @param entityInstance 实体类型实例\r\n     * @param data 实体原始数据\r\n     * @param entityTypeConstructor 实体类型构造函数\r\n     */\r\n    const initializer = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      // 初始化复杂类型字段\r\n      schemaType.fields\r\n        // 过滤复杂类型字段\r\n        .filter(field => field.$type === SchemaEntityField$Type.ComplexField)\r\n        // 遍历复杂类型字段创建对应实体类型数据\r\n        .forEach(field => {\r\n          // 提取字段名\r\n          const fieldName = field.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 获取复杂类型字段对应的实体类型\r\n          const ComplexField = includedEntityTypes[field.type.name];\r\n          // 提取复杂类型字段原始数据\r\n          const fieldData = entityData ? entityData[fieldName] : null;\r\n          // 创建复杂类型字段对象路径\r\n          const path = entityInstance.createPath(fieldName);\r\n          let complexFieldValue = entityInstance[fieldName];\r\n          if (complexFieldValue instanceof ComplexField) {\r\n            complexFieldValue.load(fieldData);\r\n          } else {\r\n            // 创建复杂类型字段实体实例\r\n            complexFieldValue = new ComplexField(fieldData);\r\n            complexFieldValue.constructor = ComplexField;\r\n            complexFieldValue[PARENT_CLASS] = entityInstance;\r\n            complexFieldValue[PARENT_PATH] = path;\r\n            complexFieldValue.onValueChanged.subscribe(changes => {\r\n              if (changes) {\r\n                changes.path = (entityInstance[PARENT_PATH] || []).concat(changes.path);\r\n                const modification = { ...changes, fromParent: true };\r\n                entityInstance.setChanges(modification);\r\n              }\r\n            });\r\n            entityInstance[fieldName] = complexFieldValue;\r\n          }\r\n        });\r\n      // 初始化子实体\r\n      if (schemaType.entities) {\r\n        // 遍历子实体创建对应实体类型的数据\r\n        schemaType.entities.forEach(schemaEntity => {\r\n          // 提取子实体名\r\n          const subEntityName = schemaEntity.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 创建子实体对象路径\r\n          const path = entityInstance.createPath(subEntityName);\r\n          // 创建子实体对象集合\r\n          let entityList = entityInstance[subEntityName];\r\n          if (!(entityList instanceof EntityList)) {\r\n            entityList = new EntityList<Entity>();\r\n            // 向子实体列表注册子实体变化事件\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                entityInstance.setChanges(value);\r\n              }\r\n            });\r\n            // 向实体类型实例上直接存储子实体对象列表\r\n            entityInstance[subEntityName] = entityList;\r\n          }\r\n          entityList[PARENT_CLASS] = entityTypeConstructor;\r\n          entityList[PARENT_PATH] = path;\r\n          // 提取子实体类型名称\r\n          const schemaEntityTypeName = schemaEntity.type.name;\r\n          // 获取子实体类型\r\n          const ConcreteEntity = includedEntityTypes[schemaEntityTypeName];\r\n          const originalEntityDataArray = entityData ? entityData[subEntityName] : null;\r\n          // 构造子实体集合\r\n          if (originalEntityDataArray) {\r\n            // 遍历子实体原始数据，构造实体对象集合\r\n            const entities = originalEntityDataArray.map((originalEntityData: any) => {\r\n              const concreteEntityInstance = new ConcreteEntity(originalEntityData);\r\n              concreteEntityInstance.constructor = ConcreteEntity;\r\n              return concreteEntityInstance;\r\n            });\r\n            // 向子实体列表中添加子实体对象\r\n            entityList.loadEntities(entities);\r\n          }\r\n        });\r\n      }\r\n      // 初始化简单字段\r\n      schemaType.fields\r\n        // 过滤复杂类型字段\r\n        .filter(field => field.$type === SchemaEntityField$Type.SimpleField)\r\n        // 遍历复杂类型字段创建对应实体类型数据\r\n        .forEach(function (field) {\r\n          // 提取字段名\r\n          const fieldName = field.label;\r\n          let propValue = entityData ? entityData[fieldName] : null;\r\n          if (field['enableTimeZone'] === true) {\r\n            const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n            if (timeZoneOffset !== null && propValue) {\r\n              propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);\r\n            }\r\n          }\r\n          entityInstance[fieldName] = propValue;\r\n        });\r\n    };\r\n    return initializer;\r\n  }\r\n}\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable valid-jsdoc */\r\n/* eslint-disable require-jsdoc */\r\nimport {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {BasePathService} from '@farris/rtf';\r\n\r\nexport type RestfulMethod = 'GET' | 'PUT' | 'POST' | 'DELETE';\r\n\r\n@Injectable()\r\nexport class RestfulService {\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http客户端\r\n   */\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  /**\r\n   * 发送GET请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  get(uri: string, params?: object, options?: any): Observable<any[]> {\r\n    return this.request(uri, 'GET', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送POST请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  put(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'PUT', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送PUT请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  post(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'POST', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送DELETE请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  delete(uri: string, params?: object, options?: any): Observable<any> {\r\n    return this.request(uri, 'DELETE', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  private request(uri: string, method: RestfulMethod, params: object, options: any = {}): Observable<any> {\r\n    options = options || {};\r\n    if (params) {\r\n      const httpParams = this.buildParams(params);\r\n      options.params = httpParams;\r\n    }\r\n    const methodName = method as string;\r\n    uri = BasePathService.convertPath(uri);\r\n    const result = this.httpClient.request(methodName, uri, options);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 构造Http请求参数\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n  private addBody(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, {body: body});\r\n    return mergedOptions;\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandler\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER = 'NgCommandHandler';\r\n\r\n/**\r\n * 命令处理描述\r\n */\r\nexport interface NgCommandHandler {\r\n\r\n  /**\r\n   * 要处理的名称\r\n   */\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器接口\r\n */\r\nexport interface NgCommandHandlerDecorator {\r\n  (handler?: NgCommandHandler): TypeDecorator;\r\n  new(handler?: NgCommandHandler): NgCommandHandler;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器工厂\r\n */\r\n\r\n// export const NgCommandHandler: NgCommandHandlerDecorator =\r\n//   makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\nexport function NgCommandHandler(options: NgCommandHandler) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\n  return decoratorFactory(options);\r\n  }\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandlerExtender\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理扩展装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER_EXTENDER = 'NgCommandHandlerExtender';\r\n\r\n/**\r\n * 命令处理扩展描述\r\n */\r\nexport interface NgCommandExtender {\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器接口\r\n */\r\nexport interface NgCommandHandlerExtenderDecorator {\r\n  (extender?: NgCommandExtender): TypeDecorator;\r\n  new(extender?: NgCommandExtender): NgCommandExtender;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器工厂\r\n */\r\nexport function NgCommandHandlerExtender(options: NgCommandExtender) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER_EXTENDER, (extender: NgCommandExtender) => extender);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-10-25 13:30:52 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-10-25 13:30:52 \r\n */\r\nimport { Observable } from 'rxjs';\r\n\r\nconst isObservable = (value) => {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\r\n        return true;\r\n    }\r\n    if (value['@@observable'] && value === value['@@observable']()) {\r\n        return true;\r\n    }\r\n    if (value instanceof Observable) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport { isObservable }\r\n","import { Observable, of } from 'rxjs';\r\nimport { CommandContext } from '../command_context';\r\nimport { isObservable } from '../../misc/is-observable';\r\n\r\n/**\r\n * 任务函数\r\n */\r\ntype TaskFunc = (context: CommandContext) => any;\r\n\r\n\r\n/**\r\n * 任务节点\r\n */\r\nclass TaskNode {\r\n\r\n  /**\r\n   * 任务名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 任务函数\r\n   */\r\n  func: TaskFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(name: string, func: TaskFunc) {\r\n    this.name = name;\r\n    this.func = func;\r\n  }\r\n\r\n  /**\r\n   * 执行任务函数\r\n   */\r\n  execute(context: CommandContext): Observable<any> {\r\n    const result = this.func(context);\r\n    const result$ = isObservable(result) ? result : of(result);\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { TaskFunc, TaskNode };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 变量解析接口\r\n */\r\ninterface VariableParser {\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any, eventParam?: any): any;\r\n}\r\n\r\nconst VARIABLE_PARSERS = new InjectionToken<VariableParser>('variable parsers');\r\n\r\nexport { VariableParser, VARIABLE_PARSERS };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\n\r\n// import { AppContext } from '../app/index';\r\n// import { FrameContext } from '../frame/index';\r\n// import { CommandContext } from '../command/index';\r\n\r\n/**\r\n * 解析辅助工具类\r\n */\r\nclass ParseUtil {\r\n\r\n  /**\r\n   * 获取应用上下文\r\n   */\r\n  static getAppContext(context: any): any {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext.appContext;\r\n    } else if (context.appContext) {\r\n      return context.appContext;\r\n    } else if (context.typeName === 'AppContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到AppContext，请检查！');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前Frame的Context\r\n   */\r\n  static getFrameContext(context: any) {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext;\r\n    } else if (context.typeName === 'FrameContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到FrameContext，请检查！');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取根Frame的Context\r\n   */\r\n  static getRootFrameContext(context: any): any {\r\n    const frameContext = this.getFrameContext(context);\r\n    return frameContext.root;\r\n  }\r\n\r\n  /**\r\n   * 根据frameId获取FrameContext\r\n   */\r\n  static getFrameContextById(context: any, frameId: string): any {\r\n    const appContext = this.getAppContext(context);\r\n    return appContext.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n}\r\n\r\nexport { ParseUtil };\r\n","/**\r\n * 数据源变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass DataVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any): any {\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths: string[] = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getValue(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{DATA~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:DATA~${paths[0]}}`) {\r\n        // 该内容是JSON的一部分，需要转义特殊字符\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach((path: string) => {\r\n      const replaceValue = this.getValue(path, appContext);\r\n      const searchValue = `{DATA~${path}}`;\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:DATA~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   */\r\n  private extractPaths(expression: string) {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const DATA_PATTERN_G = /\\{:?DATA~(\\S+?)\\}/g;\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (dataVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const DATA_PATTERN = /\\{:?DATA~(\\S+?)\\}/;\r\n    dataVariables.forEach(dataVariable => {\r\n      const pathMatches = dataVariable.match(DATA_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param path 路径：/\r\n   */\r\n  private getValue(path: string, appContext: AppContext): any {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const frameContext = appContext.getFrameContext(parts[0]);\r\n    if (!frameContext) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n\r\n    const bindingData = frameContext.bindingData;\r\n    if (!bindingData) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n    return bindingData.getValue(parts.slice(1));\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { DataVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass UIStateVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/frameId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getUIState(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{UISTATE~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:UISTATE~${paths[0]}}`) {\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{UISTATE~${path}}`;\r\n      const replaceValue = this.getUIState(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:UISTATE~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{:?UISTATE~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{:?UISTATE~(\\S+?)\\}/;\r\n    uiStateVariables.forEach((uiStateVariable: string) => {\r\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getUIState(path: string, appContext: AppContext) {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const [frameId, stateName] = parts;\r\n    const frameContext = appContext.getFrameContext(frameId);\r\n    let state = frameContext && frameContext.uiState[stateName];\r\n    if (state && state.constructor.toString().startsWith('function Date()')) {\r\n      return this.formatDate(state);\r\n    }\r\n    for (let i = 2; i < parts.length; i++) {\r\n      state = state[parts[i]];\r\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\r\n      if (!state) {\r\n        return state;\r\n      }\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @todo：待删除\r\n   */\r\n  private formatDate(value: Date): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n\r\n    // 年\r\n    const year = value.getFullYear();\r\n\r\n    // 月\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // 日\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\nexport { UIStateVariableParser };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 状态机变量解析\r\n * @summary\r\n *\r\n * 解析策略：\r\n * 1、不带frameId，从顶层StateMachine中解析\r\n * {STATEMACHINE~/states/key}\r\n * {STATEMACHINE~/renderStates/key}\r\n *\r\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\r\n * {STATEMACHINE~/frameId/states/key}\r\n * {STATEMACHINE~/frameId/renderStates/key}\r\n *\r\n * 存在的问题：\r\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\r\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\r\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\r\n */\r\n@Injectable()\r\nclass StateMachineVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{STATEMACHINE~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的StateMachine变量字符串\r\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\r\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\r\n    if (stateMachineVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\r\n    stateMachineVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的值\r\n   */\r\n  private getValue(path: string, context: any): any {\r\n\r\n    const pathObj = this.getPathObj(path);\r\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\r\n\r\n    if (pathObj.type === 'currentState') {\r\n      return stateMachine.context.state;\r\n    } else if (pathObj.type === 'renderStates') {\r\n      return stateMachine[pathObj.name] as boolean;\r\n    } else {\r\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析path，并获取对应的StateMachine实例\r\n   */\r\n  private getTargetStateMachine(frameId: string, context): StateMachine {\r\n    let targetFrameContext: FrameContext;\r\n    if (frameId) {\r\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\r\n    } else {\r\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\r\n    }\r\n\r\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\r\n      throw new Error('找不到对应的状态机实例，请检查！');\r\n    }\r\n    return targetFrameContext.stateMachine;\r\n  }\r\n\r\n  /**\r\n   * 将Path解析为格式化的Path对象\r\n   */\r\n  private getPathObj(path: string): any {\r\n    let parsedPathObj: any;\r\n    const parts = this.splitPath(path);\r\n\r\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\r\n      parsedPathObj = {\r\n        frameId: '',\r\n        type: parts[0],\r\n        name: parts[1]\r\n      };\r\n    } else {\r\n      parsedPathObj = {\r\n        frameId: parts[0],\r\n        type: parts[1],\r\n        name: parts[2]\r\n      };\r\n    }\r\n\r\n    return parsedPathObj;\r\n  }\r\n\r\n  /**\r\n   * 分隔Path\r\n   */\r\n  private splitPath(path: string): string[] {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return parts;\r\n  }\r\n\r\n}\r\n\r\nexport { StateMachineVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { CommandContext } from '../command/index';\r\nimport { VariableParser } from './variable_parser';\r\n\r\n/**\r\n * 命令变量解析\r\n * {COMMAND~/params/key}\r\n * {COMMAND~/results/taskName}\r\n */\r\n@Injectable()\r\nclass CommandVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{COMMAND~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\r\n    uiStateVariables.forEach(sessionVariable => {\r\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getValue(path: string, context: any) {\r\n    if (context instanceof CommandContext === false) {\r\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\r\n    }\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const type = parts.shift();\r\n    if (type === 'params') {\r\n      const paramKey = parts.shift();\r\n      return context.command.params[paramKey];\r\n    } else if (type === 'results') {\r\n      return parts.reduce((results: any, paramKey: string) => {\r\n        return results && results[paramKey];\r\n      }, context.results);\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandVariableParser };\r\n","/**\r\n * 变量解析服务\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\n\r\n\r\n/**\r\n * 变量解析服务\r\n * 职责：\r\n * 1、解析字符串中的变量，并替换成相应的值；\r\n * 2、对表达式进行求值。\r\n *\r\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\r\n */\r\n@Injectable()\r\nclass VariableParseService {\r\n\r\n  /**\r\n   * 解析器集合\r\n   */\r\n  private parsers: VariableParser[];\r\n\r\n  /**\r\n   * 构造变量解析服务\r\n   * @param parsers 解析器集合\r\n   */\r\n  constructor(@Inject(VARIABLE_PARSERS) parsers: VariableParser[]) {\r\n    this.parsers = parsers;\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  public parse(target: any, context?: any, eventParam?: any): any {\r\n    if (typeof target === 'string' && target.length > 0) {\r\n\r\n      // 字符串，直接解析\r\n      return this.parseExpression(target, context, eventParam);\r\n\r\n    } else if (Array.isArray(target)) {\r\n\r\n      // 遍历数组\r\n      target.forEach((item, itemIndex) => {\r\n        if (typeof item === 'string') {\r\n          target[itemIndex] = this.parseExpression(item, context, eventParam);\r\n        } else {\r\n          target[itemIndex] = this.parse(item, context, eventParam);\r\n        }\r\n      });\r\n\r\n    } else if (typeof target === 'object' && target !== null) {\r\n\r\n      // 遍历对象可枚举属性\r\n      const keys = Object.keys(target);\r\n      keys.forEach(key => {\r\n        if (typeof target[key] === 'string') {\r\n          target[key] = this.parseExpression(target[key], context, eventParam);\r\n        } else {\r\n          target[key] = this.parse(target[key], context, eventParam);\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 表达式求值\r\n   */\r\n  public evaluate(expression: string, context?: any, eventParam?: any): any {\r\n    const parsedExpression = this.parse(expression, context, eventParam);\r\n    return (new Function('return ' + parsedExpression))();\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  private parseExpression(expression: string, context: any, eventParam: any): string {\r\n\r\n    // 空串直接返回\r\n    if (expression === '') {\r\n      return '';\r\n    }\r\n\r\n    this.parsers.forEach(parser => {\r\n      if (typeof expression === 'string') {\r\n        expression = parser.parse(expression, context, eventParam);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n}\r\n\r\nexport { VariableParseService };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { FrameContext } from '../frame';\r\nconst VARIABLE_MATCHER = /#{\\S+?}/g;\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass FrameIdVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/#{root-component}/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach((exp: string) => {\r\n      const frameId = this.getVariableValue(exp);\r\n      expression = expression.replace(VARIABLE_MATCHER, frameId);\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 计算表达式的值\r\n   * @param expression like #{root-component}\r\n   */\r\n  private getVariableValue(expression: string) {\r\n    const relativeFrameId = expression.substring(2, expression.length - 1);\r\n    return this.getFullFrameId(relativeFrameId);\r\n  }\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return [];\r\n    }\r\n    return expression.match(VARIABLE_MATCHER);\r\n  }\r\n\r\n  /**\r\n   * 获取补全的frameId\r\n   * @param frameId frameId\r\n   */\r\n  private getFullFrameId(frameId: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const namespace = frameContext.namespace || '';\r\n    const prefix = namespace ? `${namespace}_` : '';\r\n    return `${prefix}${frameId}`;\r\n  }\r\n}\r\n\r\nexport { FrameIdVariableParser };\r\n","import { FrameContext } from '../frame';\r\nimport { ParseUtil } from './parse_util';\r\nimport { VariableParser } from './variable_parser';\r\nconst FORM_STATES_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/g;\r\nconst FORM_STATE_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/;\r\n\r\nexport class FormStateVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析表达式变量\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(FORM_STATE_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable);\r\n        expression = expression.replace(FORM_STATE_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const appContext = frameContext.appContext;\r\n    const formVariable = appContext.params.get(variable);\r\n    return formVariable;\r\n  }\r\n  /**\r\n   * 获取到表达式中所有FormState变量数组\r\n   * @param expression 表达式\r\n   */\r\n  private extractVariables(expression: string): string[] | null {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const formStates = expression.match(FORM_STATES_EXP);\r\n    if (!formStates || formStates.length < 1) {\r\n      return null;\r\n    }\r\n    return formStates;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nconst EVENT_PARAMS_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/g;\r\nconst EVENT_PARAM_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/;\r\n\r\n/**\r\n * 命令参数解析器\r\n */\r\n@Injectable()\r\nexport class EventParamVariableParser implements VariableParser {\r\n  public context: any;\r\n\r\n  public parse(expression: string, context: any, eventParam?: any) {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(EVENT_PARAM_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable, eventParam);\r\n        expression = expression.replace(EVENT_PARAM_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 匹配表达式中的符合正则表达式的项\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const variables = expression.match(EVENT_PARAMS_EXP);\r\n    if (!variables || variables.length < 1) {\r\n      return null;\r\n    }\r\n    return variables;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string, eventParam: any) {\r\n    if (!eventParam || !variable) {\r\n      return null;\r\n    }\r\n    const variables = variable.split('/').filter(p => p);\r\n    const result = variables.reduce((target: any, key: string) => {\r\n      if (target) {\r\n        return target[key];\r\n      } else {\r\n        return null;\r\n      }\r\n    }, eventParam);\r\n    return result;\r\n  }\r\n}","import { Provider } from '@angular/core';\r\n\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\nimport { DataVariableParser } from './data_variable_parser';\r\nimport { UIStateVariableParser } from './ui_state_variable_parser';\r\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\r\nimport { CommandVariableParser } from './command_variable_parser';\r\nimport { VariableParseService } from './variable_parse_service';\r\nimport { FrameIdVariableParser } from './frame_id_variable_parser';\r\nimport { FormStateVariableParser } from './form_state_variable_parser';\r\nimport { EventParamVariableParser } from './event_param_variable_parser';\r\n\r\n// Providers\r\nconst VARIABLE_PROVIDERS: Provider[] = [\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FrameIdVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FormStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: EventParamVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: DataVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: UIStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: StateMachineVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: CommandVariableParser },\r\n  VariableParseService\r\n];\r\n\r\nexport {\r\n  VariableParser, VARIABLE_PARSERS,\r\n  FrameIdVariableParser,\r\n  DataVariableParser, UIStateVariableParser,\r\n  CommandVariableParser, StateMachineVariableParser,\r\n  VariableParseService, EventParamVariableParser, VARIABLE_PROVIDERS\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务函数\r\n * @params result 上一步执行结果\r\n * @params context 执行上下文\r\n */\r\ntype LinkFunc = (context: CommandContext) => boolean;\r\n\r\n/**\r\n * 任务链接\r\n */\r\nclass TaskLink {\r\n\r\n  /**\r\n   * 源任务\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * 目标任务\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * 执行条件\r\n   * 1、表达式；\r\n   * 2、布尔值；\r\n   * 3、函数\r\n   */\r\n  condition: string | boolean | LinkFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(from: string, to: string, condition: string | boolean | LinkFunc) {\r\n    this.from = from;\r\n    this.to = to;\r\n    this.condition = condition;\r\n  }\r\n\r\n  /**\r\n   * 是否能够\r\n   */\r\n  public canLink(context: CommandContext): boolean {\r\n    const type = typeof this.condition;\r\n    let canLink;\r\n    switch (type) {\r\n      case 'boolean':\r\n        canLink = this.condition as boolean;\r\n        break;\r\n      case 'function':\r\n        canLink = (<LinkFunc>this.condition)(context);\r\n        break;\r\n      case 'string':\r\n        const parseService = context && context.frameContext && context.frameContext.injector && context.frameContext.injector.get<VariableParseService>(VariableParseService);\r\n        canLink = parseService && parseService.evaluate(this.condition as string, context);\r\n        break;\r\n      default:\r\n        canLink = false;\r\n        break;\r\n    }\r\n    return canLink;\r\n  }\r\n}\r\n\r\nexport { LinkFunc, TaskLink };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-17 14:13:40\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-17 16:08:34\r\n */\r\n\r\nimport { TaskFunc, TaskNode } from './task_node';\r\nimport { LinkFunc, TaskLink } from './task_link';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务执行流程\r\n */\r\nclass TaskFlow {\r\n\r\n  /**\r\n   * 节点集合\r\n   */\r\n  private nodes: TaskNode[] = [];\r\n\r\n  /**\r\n   * 边集合\r\n   */\r\n  private links: TaskLink[] = [];\r\n\r\n\r\n  // #region 节点操作\r\n\r\n  /**\r\n   * 添加节点\r\n   */\r\n  public addNode(name: string, func: TaskFunc): void {\r\n    const node = new TaskNode(name, func);\r\n    this.nodes.push(node);\r\n  }\r\n\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addNodes(nodes: TaskNode[]) {\r\n    this.nodes = this.nodes.concat(nodes);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   * @param target 目标节点名称\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public insertNode(target: string, name: string, func: TaskFunc): void {\r\n    const index = this.findNodeIndex(target);\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   */\r\n  public appendNode(target: string, name: string, func: TaskFunc) {\r\n    const index = this.findNodeIndex(target) + 1;\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 获取节点索引\r\n   * @param name 名称\r\n   */\r\n  private findNodeIndex(name: string): number {\r\n    return this.nodes.findIndex((node: TaskNode) => {\r\n      return node.name === name;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建任务节点\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  private createNode(name: string, func: TaskFunc): TaskNode {\r\n    const node = new TaskNode(name, func);\r\n    return node;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 链接操作\r\n\r\n  /**\r\n   * 添加链接\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public addLink(from: string, to: string, condition: string | boolean) {\r\n    const link = this.createLink(from, to, condition);\r\n    this.links.push(link);\r\n  }\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addLinks(links: TaskLink[]) {\r\n    this.links = this.links.concat(links);\r\n  }\r\n\r\n  /**\r\n   * 创建链接\r\n   */\r\n  private createLink(from: string, to: string, condition: string | boolean) {\r\n    const link = new TaskLink(from, to, condition);\r\n    return link;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 流程控制\r\n  /**\r\n   * 获取下一个节点\r\n   * @param from    源节点名称\r\n   * @param context 上下文\r\n   */\r\n  getNext(from?: string, context?: CommandContext): TaskNode {\r\n    if (!from) {\r\n      return this.nodes.shift();\r\n    }\r\n\r\n    // 符合满足条件的边\r\n    const nextLink = this.links.find((link: TaskLink) => {\r\n      return link.from === from && link.canLink(context);\r\n    });\r\n    if (!nextLink) {\r\n      return;\r\n    }\r\n\r\n    return this.nodes.find((node: TaskNode) => {\r\n      return node.name === nextLink.to;\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 其他方法\r\n\r\n  /**\r\n   * 克隆任务流\r\n   */\r\n  clone() {\r\n    const taskFlow = new TaskFlow();\r\n    taskFlow.addNodes(this.nodes);\r\n    taskFlow.addLinks(this.links);\r\n    return taskFlow;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { TaskFlow };\r\n","import { IDisposable } from '../core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Command } from './command';\r\n\r\n/**\r\n * Command上下文\r\n */\r\nclass CommandContext implements IDisposable{\r\n\r\n  public typeName = 'CommandContext';\r\n\r\n  /**\r\n   * 命令实例\r\n   */\r\n  command: Command;\r\n\r\n  /**\r\n   * 组件上下文\r\n   */\r\n  frameContext: FrameContext;\r\n\r\n  /**\r\n   * 执行结果\r\n   * 记录每一个task执行的结果\r\n   */\r\n  results: { [taskName: string]: any } = {};\r\n\r\n  /**\r\n   * 最新的执行结果\r\n   */\r\n  latestResult: any;\r\n\r\n  /**\r\n   * 事件参数\r\n   */\r\n  eventParam: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param command 命令\r\n   * @param frameContext 框架上下文\r\n   */\r\n  constructor(command: Command, frameContext: FrameContext) {\r\n    this.command = command;\r\n    this.frameContext = frameContext;\r\n  }\r\n  public dispose() {\r\n    this.eventParam = null;\r\n    this.command = null;\r\n    this.results = null;\r\n    this.latestResult = null;\r\n    this.frameContext = null;\r\n  }\r\n  public clearResults(){\r\n    this.results = null;\r\n  }\r\n}\r\n\r\nexport { CommandContext };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Translate } from './translate';\r\n\r\nexport const TranslateToken = new InjectionToken<Translate>('@farris/devkit TranslateToken');\r\n","import { InjectionToken, Optional, Injector, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject, EMPTY } from 'rxjs';\r\nimport { concatMap, map, takeLast, take, takeUntil, throwIfEmpty } from 'rxjs/operators';\r\n\r\nimport { FrameContext } from '../frame/index';\r\nimport { VariableParseService } from '../variable/index';\r\n\r\nimport { Command, CommandParams, ParamDescriptions } from './command';\r\nimport { CommandContext } from './command_context';\r\nimport { TaskFunc, TaskFlow } from './flow/index';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { Translate } from '../i18n/translate';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\r\n */\r\nabstract class CommandHandler implements IDisposable, OnDestroy {\r\n\r\n  /**\r\n   * 任务流程图\r\n   */\r\n  private taskFlow: TaskFlow;\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 变量解析服务\r\n   */\r\n  protected parseService: VariableParseService;\r\n\r\n  public commandName: string;\r\n  private destroy$: Subject<any> = new Subject<any>();\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n    }\r\n    this.frameContext = null;\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 构造执行流程\r\n   */\r\n  abstract schedule();\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.frameContext = frameContext;\r\n    this.parseService = variableParseService;\r\n    this.taskFlow = new TaskFlow();\r\n    this.schedule();\r\n\r\n  }\r\n\r\n  /**\r\n   * 执行任务\r\n   * @param command 要执行的命令\r\n   * @return 最后一个任务的执行结果\r\n   * @todo：按功能拆分小函数\r\n   */\r\n  public execute(command: Command): Observable<any> {\r\n    const lastTaskResult$ = new Subject();\r\n    const taskFlow = this.taskFlow.clone();\r\n\r\n    // setTimeout暂时不能去掉的原因：\r\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\r\n    // 2、关闭前命令需要延迟执行。\r\n    setTimeout(() => {\r\n      if (!this.frameContext || this.frameContext.isDisposed) {\r\n        return EMPTY;\r\n      }\r\n      // 1、解析参数\r\n      // 避免解析变量时修改了原始的command\r\n      const { eventParam = null } = {\r\n        ...command\r\n      };\r\n      delete command.eventParam;\r\n      const commandToExecute = JSON.parse(JSON.stringify(command));\r\n      commandToExecute.params = this.paramsTransform(commandToExecute.params);\r\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.frameContext, eventParam);\r\n      command.eventParam = eventParam;\r\n      commandToExecute.eventParam = eventParam;\r\n      this.transParamTypes(commandToExecute.params, commandToExecute.paramDescriptions);\r\n\r\n      // 2、串联任务流\r\n      const initContext = new CommandContext(commandToExecute, this.frameContext);\r\n      initContext.eventParam = command.eventParam || null;\r\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\r\n      let currentTask = taskFlow.getNext('', initContext);\r\n      const highOrder$ = context$.pipe(\r\n        concatMap((context: CommandContext) => {\r\n          const result$ = currentTask.execute(context);\r\n          return result$.pipe(\r\n            take(1),\r\n            map((result: any) => {\r\n\r\n              // 写入执行结果\r\n              context.results[currentTask.name] = result;\r\n              context.latestResult = result;\r\n              currentTask = taskFlow.getNext(currentTask.name, context);\r\n\r\n              // 操作控制流\r\n              if (currentTask) {\r\n                context$.next(context);\r\n              } else {\r\n                context$.complete();\r\n              }\r\n\r\n              // 将结果流转换为context流\r\n              return context;\r\n            }),\r\n            throwIfEmpty(() => {\r\n              context$.complete();\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      // 3、执行合并后的任务流\r\n      highOrder$.pipe(\r\n        takeLast(1)\r\n      ).subscribe({\r\n        next: (context: CommandContext) => {\r\n          this.waitForDestroy(context);\r\n          lastTaskResult$.next(context.latestResult);\r\n        },\r\n        error: (error: any) => {\r\n          this.waitForDestroy(initContext);\r\n          this.displayError(error);\r\n          lastTaskResult$.error(error || '');\r\n        },\r\n        complete: () => {\r\n          this.waitForDestroy(initContext);\r\n          lastTaskResult$.complete();\r\n        },\r\n      });\r\n\r\n    }, 0);\r\n\r\n    return lastTaskResult$;\r\n  }\r\n  /**\r\n   * 等待销毁\r\n   * @param commandContext \r\n   */\r\n  private waitForDestroy(commandContext: CommandContext) {\r\n    if (!commandContext) {\r\n      return;\r\n    }\r\n    commandContext.clearResults();\r\n    if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {\r\n      this.frameContext.appContext.destorySignal.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n        if (commandContext) {\r\n          commandContext.dispose();\r\n          commandContext = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 显示错误信息\r\n   */\r\n  private displayError(error: any) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n  /**\r\n   * 参数国际化转换方法\r\n   */\r\n  private paramsTransform(params: object) {\r\n    const exp = /\\{\\{(\\w+)\\}\\}/g;\r\n    if (!params) {\r\n      return null;\r\n    }\r\n    const translateService = this.frameContext && this.frameContext.injector && this.frameContext.injector.get<Translate>(TranslateToken, null) || null;\r\n    const pArray = Object.keys(params);\r\n    const result = {};\r\n    if (pArray.length === 0) {\r\n      return params;\r\n    }\r\n    pArray.forEach((p) => {\r\n      let ele = params[p];\r\n      if (ele && exp.test(ele) && translateService) {\r\n        ele = ele.replace(exp, ($1, $2) => {\r\n          return translateService.transform($2, null);\r\n        });\r\n      }\r\n      result[p] = ele;\r\n\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addTask(name: string, func: TaskFunc) {\r\n    this.taskFlow.addNode(name, func);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addLink(from: string, to: string, condition: string | boolean) {\r\n    this.taskFlow.addLink(from, to, condition);\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public insertTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public afterTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 替换任务\r\n   * @param  name 要替换的任务名称\r\n   * @param  func 替换函数\r\n   */\r\n  public replaceTask(name: string, func: TaskFunc) {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 调用方法\r\n   */\r\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\r\n    this.setContextToServiceInstance(serviceInstance, context);\r\n    const parsedArgs = this.parseService.parse(args, context, context.eventParam);\r\n    return serviceInstance[method](...parsedArgs);\r\n  }\r\n\r\n  /**\r\n   * 为服务设置命令上下文\r\n   * @todo\r\n   * 通过这种方式存在很大问题：\r\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\r\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\r\n   * 建议解决方案：\r\n   * 1、将context修改为某个特殊属性名；\r\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\r\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\r\n   */\r\n  protected setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\r\n\r\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\r\n    const serviceContext = serviceInstance.context;\r\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\r\n      return;\r\n    }\r\n\r\n    serviceInstance.context = context;\r\n  }\r\n\r\n  /**\r\n   * 根据参数描述信息转换参数类型\r\n   */\r\n  private transParamTypes(params: CommandParams, paramDescriptions: ParamDescriptions) {\r\n    if (!paramDescriptions) {\r\n      return;\r\n    }\r\n    const keys = Object.keys(params);\r\n    keys.forEach(key => {\r\n      if (!paramDescriptions[key] || !paramDescriptions[key].type) {\r\n        return;\r\n      }\r\n\r\n      const parType = paramDescriptions[key].type;\r\n      const value = params[key];\r\n      if (value === undefined || value === null || typeof value === parType) {\r\n        return; // 值不存在或类型匹配，无需处理\r\n      }\r\n\r\n      switch (parType) {\r\n        case 'string':\r\n          // 其实转换前的参数都是string，这里不会走到\r\n          params[key] = value + '';\r\n          break;\r\n        case 'int':\r\n        case 'double':\r\n        case 'number':\r\n          // 前端数值类型只有number，这里兼容命令构件上设置为int和double的情况\r\n          const numResult = Number(value);\r\n          if (isNaN(numResult)) {\r\n            throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n          }\r\n          params[key] = numResult;\r\n          break;\r\n        case 'boolean':\r\n          let boolResult: boolean;\r\n          const strValue = (value + '').toLowerCase();\r\n          if (strValue === 'true') {\r\n            boolResult = true;\r\n          } else if (strValue === 'false') {\r\n            boolResult = false;\r\n          } else {\r\n            // throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n            boolResult = false;\r\n          }\r\n          params[key] = boolResult;\r\n          break;\r\n        case 'datetime':\r\n          // todo：日期时间暂不处理\r\n          break;\r\n        case 'object':\r\n          // 表达式解析出来的参数，无需处理，按原类型返回\r\n          // todo: 输入参数是个json串，转成object\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 命令处理器注入Token\r\n */\r\nconst COMMAND_HANDLERS_TOKEN = new InjectionToken<CommandHandler>('@Farris Command Handlers');\r\n\r\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\r\n","/**\r\n * 命令处理注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER, NgCommandHandler } from './decorators';\r\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\r\n\r\n\r\n/**\r\n * 命令处理注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerRegistry {\r\n\r\n  /**\r\n   * CommandHandler Map\r\n   */\r\n  private handlerMap: Map<string, CommandHandler>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlers 命令处理实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLERS_TOKEN)handlers: CommandHandler[]) {\r\n    const self = this;\r\n    this.handlerMap = new Map<string, CommandHandler>();\r\n    if (handlers) {\r\n      handlers.forEach((handler: CommandHandler) => {\r\n        self.regist(handler);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加命令处理\r\n   * @param  commandName    命令名称\r\n   * @param  commandHandler 命令处理实例\r\n   */\r\n  public set(commandName: string, commandHandler: CommandHandler) {\r\n    if (this.handlerMap.has(commandName)) {\r\n      throw new Error(commandName + '对应的CommandHandler已经存在');\r\n    }\r\n    this.handlerMap.set(commandName, commandHandler);\r\n  }\r\n\r\n  /**\r\n   * 获取命令处理\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理实例\r\n   */\r\n  public get(commandName: string): CommandHandler {\r\n    if (this.handlerMap.has(commandName) === false) {\r\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\r\n    }\r\n    return this.handlerMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 注册命令处理\r\n   * @param handlers 命令处理实例\r\n   */\r\n  public regist(commandHandler: CommandHandler) {\r\n    let commandName = commandHandler.commandName;\r\n    if (!commandName) {\r\n      // 根据metadata获取对应的Command名称\r\n      const handlerMetadata: NgCommandHandler =\r\n        MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);\r\n      if (!handlerMetadata) {\r\n        throw new Error('CommandHandler必须指定要处理的命令名称');\r\n      }\r\n      commandName = handlerMetadata.commandName;\r\n    }\r\n    this.set(commandName, commandHandler);\r\n  }\r\n  /**\r\n   * 清空所有命令处理器\r\n   */\r\n  public dispose() {\r\n    if (this.handlerMap) {\r\n      this.handlerMap.forEach(handler => {\r\n        handler.dispose();\r\n      });\r\n    }\r\n    this.handlerMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerRegistry };\r\n","/**\r\n * 命令处理扩展相关\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\nimport { CommandHandler } from './command_handler';\r\n\r\n/**\r\n * 命令处理扩展抽象类\r\n *\r\n * CommandHandler由一个个Task串联而成，这些Task不是一成不变，\r\n * 通过CommandHandlerExtender可以在不同的时机对它扩展，\r\n * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。\r\n *\r\n * ### 定义并注册扩展\r\n *\r\n * **定义一个扩展**\r\n *\r\n * 按如下步骤可以实现一个扩展：\r\n * - 继承CommandHandlerExtender抽象基类；\r\n * - 实现extend方法，在其内部对任务进行扩展、替换；\r\n * - 添加NgCommandHandlerExtender指定要扩展的命令。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandlerExtender({\r\n *    commandName: 'formLoad'\r\n *  })\r\n * class FormLoadExtender extends CommandHandlerExtender {\r\n *\r\n *   extend(handler: CommandHandler): CommandHandler {\r\n *\r\n *     // 扩展一个任务\r\n *     handler.extendTask('loadData', (originalResult) => {\r\n *       console.log('do sth. to the original result');\r\n *     });\r\n *\r\n *     // 替换一个任务\r\n *     handler.extendTask('transitState', () => {\r\n *       console.log('transit to other state');\r\n *     });\r\n *\r\n *     return handler;\r\n *   }\r\n * }\r\n * ```\r\n * 在extend方法内部：\r\n * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；\r\n * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。\r\n *\r\n * **注册扩展**\r\n *\r\n * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，\r\n * 由它来统一进行注册。\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])\r\n *   ]\r\n * })\r\n * class SimpleModule {}\r\n * ```\r\n */\r\n@Injectable()\r\nabstract class CommandHandlerExtender {\r\n\r\n  /**\r\n   * 扩展方法\r\n   * @param handler 要扩展的命令处理器\r\n   */\r\n  abstract extend(handler: CommandHandler): CommandHandler;\r\n\r\n}\r\n\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = new InjectionToken<CommandHandlerExtender>('@farris/devkit CommandHandler Extenders');\r\n\r\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\r\n","/**\r\n * 命令处理扩展注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER_EXTENDER, NgCommandExtender } from './decorators';\r\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 命令处理扩展注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerExtenderRegistry implements IDisposable{\r\n\r\n  /**\r\n   * CommandHandlerExtender实例Map\r\n   * - key：命令名称\r\n   * - value：命令扩展实例\r\n   */\r\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param extenders 命令扩展实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLER_EXTENDERS_TOKEN)extenders: CommandHandlerExtender[]) {\r\n    const self = this;\r\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\r\n    if (extenders) {\r\n      extenders.forEach((extender: CommandHandlerExtender) => {\r\n        self.regist(extender);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取命令扩展实例数组\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理扩展实例数组\r\n   */\r\n  get(commandName: string): CommandHandlerExtender[] {\r\n    if (this.extendersMap.has(commandName) === false) {\r\n      return [];\r\n    }\r\n    return this.extendersMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 添加命令扩展\r\n   * @param commandName Command名称\r\n   * @param extender    CommandHandlerExtender实例\r\n   * @return void\r\n   */\r\n  set(commandName: string, extender: CommandHandlerExtender) {\r\n    if (this.extendersMap.has(commandName)) {\r\n\r\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\r\n      this.extendersMap.get(commandName).push(extender);\r\n    } else {\r\n\r\n      // 如果不存在，则创建新的扩展数组，并追加\r\n      this.extendersMap.set(commandName, [extender]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册命令扩展\r\n   * @param extender CommandHandlerExtender实例\r\n   */\r\n  regist(extender: CommandHandlerExtender) {\r\n\r\n    // 通过元数据获取要扩展的Comamnd名称\r\n    const extenderMetadata: NgCommandExtender =\r\n      MetadataUtil.getClassMetadataByName(extender.constructor, NG_COMMAND_HANDLER_EXTENDER);\r\n    if (!extenderMetadata) {\r\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\r\n    }\r\n    const commandName = extenderMetadata.commandName;\r\n\r\n    // 添加到Map中\r\n    this.set(commandName, extender);\r\n  }\r\n  public dispose(){\r\n    this.extendersMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerExtenderRegistry };\r\n","import { makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * NgComponentState元数据名称\r\n */\r\nexport const NG_COMPONENT_STATE = 'NgParam';\r\n\r\n/**\r\n * NgComponentState\r\n */\r\nexport interface NgParam {\r\n\r\n  /**\r\n   * 组件的ID\r\n   */\r\n  componentId?: string;\r\n\r\n  /**\r\n   * 状态名称\r\n   */\r\n  stateName?: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n\r\n}\r\n\r\n/**\r\n * NgUIStateDecorator\r\n */\r\nexport interface NgParamDecorator {\r\n  (obj?: NgParam): any;\r\n  new(obj?: NgParam): any;\r\n}\r\n\r\n/**\r\n * NgUIState\r\n */\r\nexport const NgParam: NgParamDecorator =\r\n  makePropDecorator(NG_COMPONENT_STATE, (obj?: NgParam) => obj);\r\n\r\n\r\n","import { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMPONENT_STATE, NgParam } from './decorators';\r\n\r\nexport class UIStateMetadataUtil {\r\n\r\n  /**\r\n   * 获取NgUIState的属性元数据\r\n   * @param \r\n   * @returns 属性元数据对象\r\n   * @example\r\n   * 返回格式：\r\n   * {\r\n   *    '属性名称': <NgUIStateProperty>{ ...}\r\n   * }\r\n   */\r\n  static getUIFields(target: Function): {[propName: string]: NgParam} {\r\n      return MetadataUtil.getPropsMetadatasByName(target, NG_COMPONENT_STATE);\r\n  }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-17 13:38:23\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-17 13:38:50\r\n * @todo：临时删除原有功能，待重构\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\r\nimport { NgParam } from './decorators';\r\n\r\nexport interface UIStateObservableParam {\r\n  field: string;\r\n  value: any;\r\n}\r\n/**\r\n * UI状态\r\n */\r\n@Injectable()\r\nexport class UIState {\r\n  /**\r\n   * @deprecated innerData为状态机内部变量，外部请不要使用\r\n   */\r\n  innerData: {};\r\n\r\n  // 监听变化\r\n  public changes: Subject<UIStateObservableParam>;\r\n  public paramTypeTransform = false;\r\n  constructor() {\r\n    this.changes = new Subject<UIStateObservableParam>();\r\n    this.innerData = Object.assign({});\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    const uiFields = UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  initialize(context: any) {\r\n    const uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  private initializeUIField(uiFieldMetadata: { [key: string]: NgParam }): void {\r\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\r\n      const fieldMetadata = uiFieldMetadata[propertyName] as NgParam;\r\n      const uiField = fieldMetadata.stateName || propertyName;\r\n\r\n      if (delete this[propertyName]) {\r\n        this.defineProperty(propertyName, uiField);\r\n      }\r\n    });\r\n  }\r\n\r\n  public isExistProperty(propertyName: any) {\r\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private defineProperty(propertyName: any, field: any = null) {\r\n    Object.defineProperty(this, propertyName, {\r\n      get: function () {\r\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n      },\r\n      set: function (value) {\r\n        // 值相同时不触发变更\r\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n        if (this.paramTypeTransform === true) {\r\n          const ngParams = UIStateMetadataUtil.getUIFields(this.constructor);\r\n          const ngParam = ngParams && ngParams[propertyName] || null;\r\n          const dataType = ngParam && ngParam.originalDataType || null;\r\n          if (dataType) {\r\n            value = this.transform(value, dataType);\r\n          }\r\n        }\r\n        if (oldValue === value) {\r\n          return;\r\n        }\r\n        if (field !== null) {\r\n          this.innerData[field] = value;\r\n        } else {\r\n          this.innerData[propertyName] = value;\r\n        }\r\n        this.changes.next({\r\n          field: propertyName,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public setPropertyValue(propertyName: any, value: any) {\r\n    if (propertyName === '' || propertyName === undefined) {\r\n      return;\r\n    }\r\n    if (!this.isExistProperty(propertyName)) {\r\n      this.defineProperty(propertyName);\r\n    }\r\n    this[propertyName] = value;\r\n  }\r\n  private transform(target: any, dataType: string) {\r\n    if (!dataType) {\r\n      return target;\r\n    }\r\n    dataType = dataType.toLowerCase();\r\n    if (dataType === 'string') {\r\n      if (target === null || target === undefined) {\r\n        return target;\r\n      }\r\n      return target.toString();\r\n    } else if (dataType === 'number') {\r\n      if (target === undefined) {\r\n        return undefined;\r\n      }\r\n      const result = Number(target);\r\n      if (isNaN(result)) {\r\n        throw new Error(`${target}无法转换为数字！`);\r\n      }\r\n      return result;\r\n    } else if (dataType === 'boolean') {\r\n      if (typeof target === 'boolean') {\r\n        return target;\r\n      } else {\r\n        if (target === null || target === undefined) {\r\n          return false;\r\n        }\r\n        target = target.toString().toLowerCase();\r\n        if (target === 'false') {\r\n          return false;\r\n        } else if (target === 'true') {\r\n          return true;\r\n        } else {\r\n          throw new Error(`${target}无法转换为布尔类型！`);\r\n        }\r\n      }\r\n    } else if (dataType === 'date' || dataType === 'datetime') {\r\n      // 日期、日期时间在前端依然按照字符串处理\r\n      return target;\r\n    } else if (dataType === 'object') {\r\n      if (typeof target === 'object') {\r\n        return target;\r\n      } else {\r\n        try {\r\n          return JSON.parse(target);\r\n        } catch {\r\n          throw new Error(`${target}无法转换为对象！`);\r\n        }\r\n      }\r\n    } else {\r\n      return target;\r\n    }\r\n  }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n/**\r\n * 变量类型转换\r\n */\r\nexport const PARAM_TYPE_TRANSFORM_TOKEN = new InjectionToken<boolean>('@farris/devkit_param_type_transform');","import { ViewModel } from '../view-model/index';\r\nimport { StateMachineContext } from './context';\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * State相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\r\n */\r\nexport class State {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param name 状态名称\r\n   */\r\n  constructor(public name: string) {\r\n  }\r\n}\r\n\r\n/**\r\n * 基本状态字典, 形如\r\n * {\r\n *  stateName1: stateInstance1,\r\n *  stateName2: stateInstance2,\r\n *  ...\r\n * }\r\n */\r\nexport interface StateDictionary {\r\n    [index: string]: State;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * RenderState相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 渲染状态，该状态用于和界面UI绑定\r\n */\r\nexport type RenderState = boolean;\r\n\r\n/**\r\n * 初始渲染状态\r\n */\r\nexport const initialUIState: RenderState = false;\r\n\r\n/**\r\n * 渲染状态字典，形如：\r\n * {\r\n *  renderStateName1: true,\r\n *  renderStateName1: false,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderStateDictionary {\r\n  [index: string]: RenderState;\r\n}\r\n\r\n\r\n/**\r\n * 渲染方法\r\n * 该方法接收一个StateMachineContext类型的上下文，\r\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\r\n */\r\nexport type Render = (context: StateMachineContext) => RenderState;\r\n\r\n/**\r\n * 渲染方法字典\r\n * {\r\n *  renderStateName1: render1,\r\n *  renderStateName1: render2,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderDictionary {\r\n  [index: string]: Render;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Action相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 状态机动作\r\n */\r\nexport type Action = () => any;\r\n\r\n/**\r\n * 状态机行为约束条件\r\n */\r\n// export interface Precondition {\r\n// }\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Effect相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\r\n */\r\nexport interface EffectHandlerOption {\r\n\r\n  /**\r\n   * 效果类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 效果实现\r\n   */\r\n  effect: any;\r\n}\r\n\r\n/**\r\n * 状态机界面效果\r\n */\r\nexport interface Effect {\r\n\r\n  /**\r\n   * 行为约束条件集合\r\n   */\r\n  preconditions?: any[];\r\n\r\n  /**\r\n   * 发生某行为后引起的界面变化效果\r\n   */\r\n  handlers?: EffectHandlerOption[];\r\n}\r\n\r\n/**\r\n * 状态机效果字典\r\n */\r\nexport interface EffectDictianry {\r\n    [index: string]: Effect;\r\n}\r\n\r\n\r\n","import { StateMachine } from './state_machine';\r\nimport { State } from './types';\r\nimport { Context } from '../context/context';\r\nimport { VariableParseService } from '../variable/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\n\r\n/**\r\n * 状态机上下文\r\n */\r\nexport class StateMachineContext {\r\n\r\n  /**\r\n   * 当前状态名称\r\n   */\r\n  state: string;\r\n\r\n  parent: Context;\r\n\r\n  parser: VariableParseService;\r\n\r\n  frameContext: FrameContext;\r\n\r\n  stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 构造函数\r\n   * @param stateMachine 状态机\r\n   * @param initialState 初始状态\r\n   */\r\n  constructor(public stateMachine: StateMachine) {\r\n    // this.state = initialState.name;\r\n  }\r\n\r\n  initialize(variableParseService: VariableParseService, initialState: State) {\r\n    this.frameContext = this.stateMachine && this.stateMachine.frameContext || null;\r\n    this.state = this.state || (initialState ? initialState.name : '');\r\n    this.parser = variableParseService;\r\n    this.stateMachineEvent = this.stateMachine.stateMachineEvent;\r\n  }\r\n\r\n  /**\r\n   * 状态迁移\r\n   * @param stateName 下一状态的名称\r\n   */\r\n  transitTo(stateName: string) {\r\n    const nextState = this.stateMachine.states[stateName];\r\n    if (nextState) {\r\n      this.state = nextState.name;\r\n      this.stateMachine.render();\r\n    }\r\n  }\r\n\r\n  parse(expression: string, targetType: 'source' | 'target'): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    const context = this.stateMachineEvent.getFrameContext(expression) || this.stateMachine.frameContext;\r\n    switch (targetType) {\r\n      case 'source':\r\n        return this.parseSourceValue(expression, context);\r\n      case 'target':\r\n        return this.parser.parse(expression, context);\r\n    }\r\n  }\r\n\r\n  private parseSourceValue(expression: string, context: any): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    let result = expression.trim();\r\n    result = this.parser.parse(result, context);\r\n    if (result === 'state') {\r\n      result = this.state;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // 兼容旧版本\r\n  get(expression: string): any {\r\n    return this.getUIState(expression);\r\n  }\r\n  // 解析uistate变量表达式并返回表达式的值\r\n  getUIState(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenUIStateChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n\r\n  // 解析data变量表达式并返回表达式的值\r\n  getData(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenEntityChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { StateMachine } from './state_machine';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Change } from '../binding-data/changes';\r\nimport { AppContext } from '../app';\r\n\r\n/**\r\n * 状态机事件，监听uistate的变化和entity的变化\r\n */\r\n@Injectable()\r\nexport class StateMachineEvent {\r\n\r\n  frameContext: FrameContext;\r\n\r\n  get appContext(): AppContext {\r\n    return this.stateMachine.appContext as AppContext;\r\n  }\r\n\r\n  uiFieldList: Array<string> = [];\r\n\r\n  frameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  dataFieldList: Array<string> = [];\r\n\r\n  dataFrameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  constructor(public stateMachine: StateMachine) {\r\n    this.frameContextMap = new Map<FrameContext, any>();\r\n    this.dataFrameContextMap = new Map<FrameContext, any>();\r\n  }\r\n\r\n  initialize(frameContext: FrameContext) {\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n  /**\r\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\r\n   */\r\n  private extractPaths(expression: string): string {\r\n    let path = '';\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}$/g;\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}$/g;\r\n    if (typeof expression === 'string') {\r\n      const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n      const dataVariables = expression.match(DATA_PATTERN_G);\r\n      if (uiStateVariables !== null) {\r\n        const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}$/;\r\n        uiStateVariables.forEach((uiStateVariable: string) => {\r\n          const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n      if (dataVariables !== null) {\r\n        const DATA_PATTERN = /\\{DATA~(\\S+?)\\}$/;\r\n        dataVariables.forEach((dataVariable: string) => {\r\n          const pathMatches = dataVariable.match(DATA_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 根据表达式返回当前组件的frameContext\r\n  getFrameContext(expression: any): FrameContext {\r\n    let frameId = this.extractPaths(expression).split('/')[1] || '';\r\n    if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {\r\n      const relativeFrameId = frameId.substring(2, frameId.length - 1);\r\n      frameId = this.frameContext.namespace ? `${this.frameContext.namespace}_${relativeFrameId}` : relativeFrameId;\r\n    }\r\n    return this.appContext.getFrameContext(frameId);\r\n  }\r\n\r\n  // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)\r\n  getFrameField(expression: any) {\r\n    return this.extractPaths(expression).split('/')[2];\r\n  }\r\n\r\n  // 监听表单变量的变化\r\n  ListenUIStateChange(frameContext: FrameContext, expression: any) {\r\n    const frameField = this.getFrameField(expression);\r\n    if (!this.frameContextMap.has(frameContext)) {\r\n      this.frameContextMap.set(frameContext, this.uiFieldList);\r\n      frameContext.uiState.changes.subscribe((data) => {\r\n        if (data.field && this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {\r\n      this.uiFieldList.push(frameField);\r\n    }\r\n  }\r\n\r\n\r\n  // 监听实体数据的变化\r\n  ListenEntityChange(frameContext: FrameContext, expression: any) {\r\n    if (!this.dataFrameContextMap.has(frameContext)) {\r\n      this.dataFrameContextMap.set(frameContext, this.dataFieldList);\r\n      frameContext.bindingData.changes.subscribe((change: Change) => {\r\n        // 切换当前行用到的是\r\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\r\n          this.stateMachine.render();\r\n        }\r\n        if (change.path.join() && this.isAccordingValue(this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {\r\n      this.dataFieldList.push(expression);\r\n    }\r\n  }\r\n  // 监听是否是解析的数据发生变化\r\n  isAccordingValue(arr: any, path: string) {\r\n    return arr.find(item => {\r\n      return item.indexOf(path) > -1;\r\n    }) === undefined ? false : true;\r\n  }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { StateMachineContext } from './context';\r\nimport { NgState, NgAction, NgRenderState } from './decorators';\r\nimport {\r\n  State, initialUIState, Effect, Render,\r\n  StateDictionary, RenderStateDictionary, RenderDictionary\r\n} from './types';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { OnDestroy } from '@angular/core';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 状态机初始化配置对象\r\n */\r\nexport interface StateMachineOption {\r\n\r\n  /**\r\n   * 界面渲染描述\r\n   */\r\n  renders?: { [index: string]: Render };\r\n\r\n  /**\r\n   * 状态集合\r\n   */\r\n  states?: string[];\r\n\r\n  /**\r\n   * 状态机界面控制效果\r\n   */\r\n  effects?: { [index: string]: Effect };\r\n}\r\n\r\n/**\r\n * 预置界面效果处理\r\n */\r\nexport const effectHandlers = {\r\n\r\n  /**\r\n   * 预置状态迁移处理\r\n   */\r\n  transit: {\r\n\r\n    /**\r\n     * 执行状态迁移\r\n     * @param stateMachine  状态机对象\r\n     * @param stateName     下一状态的名称\r\n     * @param preconditions 迁移条件\r\n     */\r\n    // tslint:disable-next-line: only-arrow-functions\r\n    perform: function (statemachine: StateMachine, stateName: string, preconditons: any[] = []) {\r\n      const nextState: State = statemachine.states[stateName];\r\n      statemachine.context.transitTo(nextState.name);\r\n      statemachine.render();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 状态机\r\n *\r\n * ### 基本概念\r\n * 状态机中有三个重要的概念：\r\n * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；\r\n * - 控件状态（RenderState）：控制具体控件的状态；\r\n * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。\r\n *\r\n * ### 定义状态机\r\n *\r\n * **基本步骤**\r\n *\r\n * - 继承StateMachine基类，并添加NgStatemachine注解；\r\n * - 定义页面状态、控件状态、迁移动作。\r\n *\r\n * **状态机中的注解**\r\n *\r\n * - NgStatemachine：将类标记为状态机，并进行扩展；\r\n * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；\r\n * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，\r\n *   一般情况下是通过对页面状态进行逻辑运算来确定。\r\n * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgStatemachine()\r\n * class SimpleStateMachine extends StateMachine {\r\n *\r\n *   // 查看状态，设置为初始状态\r\n *   @NgState({ initialState: true })\r\n *   viewState: State;\r\n *\r\n *   // 编辑状态\r\n *   @NgState()\r\n *   editState: State;\r\n *\r\n *   // 编辑按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'viewState'\r\n *   })\r\n *   canEdit: RenderState;\r\n *\r\n *   // 保存按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canSave: RenderState;\r\n *\r\n *   // 输入控件是否允许输入\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canInput: RenderState;\r\n *\r\n *   // 迁移到编辑状态\r\n *   @NgAction({ transitTo: 'editState' })\r\n *   edit: Action;\r\n *\r\n *   // 迁移到查看状态\r\n *   @NgAction({ transitTo: 'viewState' })\r\n *   view: Action;\r\n * }\r\n * ```\r\n * 在上边的代码中做了如下定义：\r\n * - 两个页面状态：查看状态、编辑状态，\r\n * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，\r\n * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。\r\n *\r\n *\r\n * ### 在模板中使用状态机\r\n *\r\n * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。\r\n *\r\n * ```html\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canEdit\">编辑</button>\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canSave\">保存</button>\r\n * <input id=\"code\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * <input id=\"name\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * ```\r\n *\r\n * ### 执行状态迁移\r\n * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。\r\n * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。\r\n * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *   commandName: 'save'\r\n * })\r\n * class SaveHandler extends CommandHandler {\r\n *\r\n *   schedule() {\r\n *     this.addTask('save', () => {\r\n *       // 实现保存\r\n *     });\r\n *\r\n *     // 状态迁移\r\n *     this.addTask('transitState', ) => {\r\n *       this.stateMachine['view']();\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class StateMachine implements OnDestroy, IDisposable {\r\n  private isStateInited = false;\r\n  /**\r\n   * 初始状态\r\n   */\r\n  public initialState: State;\r\n\r\n  /**\r\n   * 状态字典\r\n   */\r\n  public states: StateDictionary;\r\n\r\n  /**\r\n   * 渲染状态字典\r\n   */\r\n  public renderStates: RenderStateDictionary;\r\n\r\n  /**\r\n   * 渲染器字典\r\n   */\r\n  public renders: RenderDictionary;\r\n\r\n  /**\r\n   * 状态机上下文\r\n   */\r\n  public context: StateMachineContext;\r\n\r\n  /**\r\n   * 状态变更\r\n   */\r\n  public stateChange: BehaviorSubject<string>;\r\n\r\n  public appContext: any;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 状态机元数据\r\n   */\r\n  public metadatas: { states: { [stateName: string]: NgState }, renderStates: { [renderStateName: string]: NgRenderState }, actions: { [actionName: string]: NgAction } };\r\n  private isDisposed = false;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n\r\n    // 遍历所有属性装饰器，并调用相应的build方法\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          this['build' + propMetadata.ngMetadataName](propName, propMetadata);\r\n        });\r\n      });\r\n    }\r\n\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n\r\n    this.stateChange = new BehaviorSubject<any>(false);\r\n    this.context = new StateMachineContext(this);\r\n    this.stateMachineEvent = new StateMachineEvent(this);\r\n  }\r\n  public dispose(options?: any) {\r\n    this.isDisposed = true;\r\n    this.frameContext = null;\r\n    this.appContext = null;\r\n    this.context = null;\r\n    this.stateMachineEvent = null;\r\n    this.metadatas = null;\r\n  }\r\n  public ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\r\n  initialize(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.appContext = frameContext.appContext;\r\n    this.frameContext = frameContext;\r\n    const stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();\r\n    this.metadatas = stateMachineMetadata;\r\n    this.buildStateMachine(stateMachineMetadata);\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n    this.context.initialize(variableParseService, this.initialState);\r\n    this.stateMachineEvent.initialize(this.frameContext);\r\n    this.render();\r\n  }\r\n\r\n  private collectionMetadata(): {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  } {\r\n    const stateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          switch (propMetadata.ngMetadataName) {\r\n            case 'NgState':\r\n              stateMachineMetadata.states[propName] = propMetadata;\r\n              break;\r\n            case 'NgRenderState':\r\n              stateMachineMetadata.renderStates[propName] = propMetadata;\r\n              break;\r\n            case 'NgAction':\r\n              stateMachineMetadata.actions[propName] = propMetadata;\r\n              break;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return stateMachineMetadata;\r\n  }\r\n\r\n  private buildStateMachine(metadata: {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  }) {\r\n    Object.keys(metadata.states).forEach((stateName: string) => {\r\n      this.buildNgState(stateName, metadata.states[stateName]);\r\n    });\r\n\r\n    Object.keys(metadata.renderStates).forEach((renderStateName: string) => {\r\n      this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);\r\n    });\r\n\r\n    Object.keys(metadata.actions).forEach((actionName: string) => {\r\n      this.buildNgAction(actionName, metadata.actions[actionName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 构造状态\r\n   * @param stateName 状态名称\r\n   * @param ngState   状态对象\r\n   */\r\n  private buildNgState(stateName: string, ngState: NgState) {\r\n    this.states = this.states || {};\r\n    this[stateName] = new State(stateName);\r\n    this.states[stateName] = this[stateName];\r\n    if (ngState.initialState) {\r\n      this.initialState = this[stateName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 构造界面状态\r\n   * @param renderStateName 渲染状态名称\r\n   * @param ngRenderState   渲染状态元数据\r\n   */\r\n  private buildNgRenderState(renderStateName: string, ngRenderState: NgRenderState) {\r\n    this.renderStates = this.renderStates || {};\r\n    this[renderStateName] = initialUIState;\r\n    this.renderStates[renderStateName] = this[renderStateName];\r\n\r\n    // 将renderState上指定的render加入到renders中\r\n    this.renders = this.renders || {};\r\n    this.renders[renderStateName] = ngRenderState.render;\r\n  }\r\n\r\n  /**\r\n   * 构造动作\r\n   * @param actionName 动作名称\r\n   * @param ngAction   动作元数据\r\n   */\r\n  private buildNgAction(actionName: string, ngAction: NgAction) {\r\n    this[actionName] = () => {\r\n      effectHandlers.transit.perform(this, ngAction.transitTo, ngAction.precondition);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重新计算所有渲染状态的值\r\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\r\n   */\r\n  render() {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    for (const renderStateName in this.renderStates) {\r\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\r\n        continue;\r\n      }\r\n      const stateRender = this.renders[renderStateName];\r\n      if (!stateRender) {\r\n        continue;\r\n      }\r\n      // 调用render方法，更新renderState\r\n      this.renderStates[renderStateName] = stateRender(this.context);\r\n      this[renderStateName] = this.renderStates[renderStateName];\r\n    }\r\n    this.stateChange.next(this.context.state);\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\nimport { Render } from './types';\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgState\r\n */\r\nexport interface NgState {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  initialState?: boolean;\r\n  /**\r\n   * 状态名称\r\n   */\r\n  name?: string;\r\n}\r\n\r\n/**\r\n * NgStateDecorator\r\n */\r\nexport interface NgStateDecorator {\r\n  (obj?: NgState): any;\r\n  new(obj?: NgState): any;\r\n}\r\n\r\n/**\r\n * NgState\r\n */\r\nexport const NgState: NgStateDecorator =\r\n  makePropDecorator('NgState', (obj?: NgState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgRenderStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport interface NgRenderState {\r\n  render: Render;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport interface NgRenderStateDecorator {\r\n  (obj?: NgRenderState): any;\r\n  new(obj?: NgRenderState): any;\r\n}\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport const NgRenderState: NgRenderStateDecorator =\r\n  makePropDecorator('NgRenderState', (obj: NgRenderState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgActionDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgAction\r\n */\r\nexport interface NgAction {\r\n  precondition?: any[];\r\n  transitTo: string;\r\n}\r\n\r\n/**\r\n* NgActionDecorator\r\n*/\r\nexport interface NgActionDecorator {\r\n  (obj?: NgAction): any;\r\n  new(obj?: NgAction): any;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport const NgAction: NgActionDecorator =\r\n  makePropDecorator('NgAction', (action: NgAction) => action);","import { makePropDecorator } from '../metadata/index';\r\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommand\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 快捷键\r\n */\r\nexport interface Keybinding {\r\n\treadonly ctrlKey: boolean;\r\n\treadonly shiftKey: boolean;\r\n\treadonly altKey: boolean;\r\n\treadonly metaKey?: boolean;\r\n\treadonly key: String;\r\n}\r\n\r\n/**\r\n * 命令装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_COMMAND = 'NgCommand';\r\n\r\n/**\r\n * 命令描述\r\n */\r\nexport interface NgCommand {\r\n\r\n  /**\r\n   * 命令名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 命令参数\r\n   */\r\n  params?: CommandParams;\r\n\r\n  /**\r\n   * 框架id\r\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\r\n   */\r\n  frameId?: string;\r\n\r\n  /**\r\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\r\n   */\r\n  paramDescriptions?: ParamDescriptions;\r\n\r\n  /**\r\n   * 快捷键绑定\r\n   */\r\n  keyBinding?: Keybinding\r\n}\r\n\r\n\r\n/**\r\n * 命令装饰接口\r\n */\r\nexport interface NgCommandDecorator {\r\n  (ngCommand?: NgCommand): any;\r\n  new(ngCommand?: NgCommand): any;\r\n}\r\n\r\n/**\r\n * 命令装饰器工厂\r\n * @type {any}\r\n */\r\nexport const NgCommand: NgCommandDecorator =\r\n  makePropDecorator(NG_COMMAND, (obj: NgCommand) => obj);\r\n","import { Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Command } from '../command/index';\r\nimport { NG_COMMAND, NgCommand, Keybinding } from './decorators';\r\nimport { BindingData, EntityValueChange } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Observable, of, Subject, from, EMPTY } from 'rxjs';\r\nimport { map, concatMap, tap, every, debounceTime, switchMap, takeLast } from 'rxjs/operators';\r\nimport { ExpressionManager, ExpressionResult } from '../expression/index';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { InvokeOnValueChange } from '../binding-data/types';\r\nimport { IDisposable } from '../core/index';\r\n\r\n/**\r\n * ViewModel是界面层访问应用层的入口。\r\n *\r\n * ### 定义ViewModel\r\n *\r\n * 定义ViewModel需要以下几个步骤：\r\n *\r\n * 1、定义的ViewModel需要继承ViewModel基类\r\n * 2、使用NgViewModel关联相关对象，比如：绑定数据（SinmpleDemoBindingData）、表单（SimpleDemoForm）、\r\n *    状态机（SimpleDemoStateMachine）等，但所有这些关联都是可选的，用不到或者自己单独实现时，不指定即可。\r\n * 3、同时我们需要传递一个injector给基类的构造函数，在ViewModel实例化时，会从injector获取NgViewModel声明的各个类型的实例。\r\n *\r\n * 下面我们来定义一个简单的ViewModel，代码如下：\r\n * ```ts\r\n * import { Injector, Injectable } from '@angular/core';\r\n * import { NgViewModel, ViewModel } from '@farris/devkit';\r\n *\r\n * @Injectable()\r\n * @NgViewModel({\r\n *   children: [],\r\n *   binding: SimpleDemoBindingData,\r\n *   form: SimpleDemoForm,\r\n *   stateMachine: SimpleDemoStateMachine,\r\n * })\r\n * class SimpleDemoViewModel extends ViewModel {\r\n *    constructor(injector: Injector) {\r\n *      super(injector);\r\n *    }\r\n *    @NgCommand({\r\n *      name: 'formLoad',\r\n *      params: {\r\n *        dataId: '1'\r\n *      }\r\n *    })\r\n *    public formLoad() {}\r\n * }\r\n * export { SimpleDemoViewModel };\r\n * ```\r\n *\r\n * 通过组件的构造函数，我们将ViewModel注入进组件\r\n * ```ts\r\n * @Component({\r\n *   selector: 'app-simple-demo',\r\n *   templateUrl: './simple-demo.component.html'\r\n * })\r\n * class SimpleDemoComponent implements OnInit {\r\n *\r\n *   public viewModel: SimpleDemoViewModel;\r\n *\r\n *   constructor(viewModel: SimpleDemoViewModel) {\r\n *     this.viewModel = viewModel;\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * ### 组件模板中使用ViewModel\r\n *\r\n * 我们可以在模板中绑定NgViewModel中指定的 BindingData、Form、StateMachine的实例。\r\n * ```html\r\n * * <!--绑定数据-->\r\n * <p>{{viewModel.bindingData.name}}</p>\r\n *\r\n * <!--绑定表单-->\r\n * <form [formGroup]=\"viewModel.form\">\r\n *   <input type=\"text\" formControlName=\"name\">\r\n * </form>\r\n *\r\n * <!--绑定状态机-->\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canAdd\">新增 </button>\r\n * * ```\r\n *\r\n * 我们在模板中绑定绑定viewModel的一个方法作为事件处理，这个方法可以是普通的方法，也可以是用NgCommand注解修饰过的。\r\n * ```html\r\n * <button type=\"button\" (click)=\"viewModel.add()\">新增 </button>\r\n * ```\r\n *\r\n * ### 组合的ViewModle\r\n *\r\n * 当界面比较复杂时，我们对界面按一定的粒度进行拆分，拆分出来的各个组成部分分别对应一个ViewModel，这样就形成了一个ViewModel树。\r\n * 我们在父的ViewModel的NgViewModel注解中通过在children属性中声明它的子ViewModel，将它们关联起来。\r\n * 假设我们有一个左列表右卡片的界面，我们可以为左列表、右卡片分别定义一个ViewModel，然后在页面的ViewModel中，将它们组合起来，\r\n * 代码如下：\r\n * ```ts\r\n * @Injectable()\r\n *  @NgViewModel({\r\n *  children: [LeftListViewModel, RightCardViewModel],\r\n *    binding: NestedDemoBindingData,\r\n * })\r\n * class NestedDemoViewModel extends ViewModel {\r\n *   constructor(injector: Injector) {\r\n *     super(injector);\r\n *   }\r\n * }\r\n * export { NestedDemoViewModel };\r\n * ```\r\n */\r\n@Injectable()\r\nclass ViewModel implements IDisposable, OnDestroy {\r\n\r\n  public name: string;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * 绑定路径\r\n   * 形如：/(根实体)，/edus（从表），/edus/grades（从从表）\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 界面状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 表单定义\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 界面验证信息\r\n   */\r\n  public verifyInformations: any[] = [];\r\n\r\n  public verifycationChanged = new Subject<any[]>();\r\n  /**\r\n   * 表达式服务\r\n   */\r\n  public get expression(): ExpressionManager {\r\n    return this.frameContext.expressionManager;\r\n  }\r\n  /**\r\n   * 表达式结果\r\n   */\r\n  public get expressionResult(): ExpressionResult {\r\n    return this.frameContext.expressionResult;\r\n  }\r\n  /**\r\n   * 快捷键映射\r\n   */\r\n  public keybindingMap: Map<string, Keybinding>;\r\n\r\n  /**\r\n   * 值变化前监听器\r\n   */\r\n  private entityValueChangingListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 值变化后监听器\r\n   */\r\n  private entityValueChangedListeners: Map<string, string>;\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metadatas: { [propName: string]: NgCommand };\r\n\r\n  /**\r\n   * kendogrid option\r\n   */\r\n\r\n  // constructor(metadata?: IContextMetadata) {\r\n  //   if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n  //     this.bindingPath = metadata.bindingTo;\r\n  //   }\r\n  // }\r\n  constructor() { }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  dispose(options?: any) {\r\n    // this.frameContext = null;\r\n    // this.bindingData = null;\r\n    // this.stateMachine = null;\r\n    this.form = null;\r\n    // this.uiState = null;\r\n\r\n    if (this.entityValueChangingListeners) {\r\n      this.entityValueChangingListeners.clear();\r\n    }\r\n    if (this.entityValueChangedListeners) {\r\n      this.entityValueChangedListeners.clear();\r\n    }\r\n    if (this.verifycationChanged) {\r\n      this.verifycationChanged.complete();\r\n      this.verifycationChanged = null;\r\n    }\r\n  }\r\n\r\n  public setMetadata(metadata: IContextMetadata) {\r\n    if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n      this.bindingPath = metadata.bindingTo;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(context: FrameContext) {\r\n    if (!this.name) {\r\n      this.name = context.metadata.viewModelCode || this.constructor.name;\r\n    }\r\n    this.frameContext = context;\r\n    this.bindingData = context.bindingData;\r\n    this.uiState = context.uiState;\r\n    this.form = context.form;\r\n    this.stateMachine = context.stateMachine;\r\n    this.buildCommands(context);\r\n    this.entityValueChangingListeners = new Map<string, string>();\r\n    this.entityValueChangedListeners = new Map<string, string>();\r\n    // 为bindingData赋值值变化监听器\r\n    if (this.bindingData) {\r\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\r\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\r\n          const plainPath = '/' + paths.join('/');\r\n          let command: string;\r\n          if (entityChanged === false) {\r\n            command = this.entityValueChangingListeners[plainPath];\r\n          } else {\r\n            command = this.entityValueChangedListeners[plainPath];\r\n          }\r\n\r\n          if (!!command) {\r\n            const change: EntityValueChange = {\r\n              paths: paths,\r\n              preValue: preValue,\r\n              value: value,\r\n              id: primaryValue,\r\n              changed: entityChanged\r\n            };\r\n            const triggerFlag = 'trigger:';\r\n            const commands = command.split(';').filter(p => p);\r\n            // 过滤出所有值变化前后事件\r\n            const valueChangeCommands = commands.filter(item => !item.startsWith(triggerFlag));\r\n            // 过滤出所有组件通讯\r\n            const triggers = commands.filter(item => item.startsWith(triggerFlag));\r\n            const squence = valueChangeCommands.concat(triggers);\r\n            let valueChangeSuccess = true;\r\n            return from(squence).pipe(\r\n              concatMap(item => {\r\n                if (!valueChangeSuccess && entityChanged === false) {\r\n                  return EMPTY;\r\n                }\r\n                if (item.startsWith(triggerFlag)) {\r\n                  // 值变化前后事件绑定了组件通信\r\n                  const eventName = item.substring(8);\r\n                  this.frameContext.frameComponent.trigger(eventName);\r\n                  valueChangeSuccess = true;\r\n                  return of(true);\r\n                } else {\r\n                  return this[item](change).pipe(\r\n                    tap((result: any) => {\r\n                      valueChangeSuccess = result;\r\n                    })\r\n                  );\r\n                }\r\n\r\n              }),\r\n              every((result: any) => result)\r\n            );\r\n            // return this[command](change).pipe(map(result => {\r\n            //   return result === false ? false : true;\r\n            // }));\r\n          } else {\r\n            return of(true);\r\n          }\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    this.initListeners();\r\n  }\r\n\r\n  /**\r\n   * 绑定命令\r\n   */\r\n  public buildCommands(context: FrameContext) {\r\n    const ngCommands: {\r\n      [commandName: string]: NgCommand\r\n    } = context.metadata.commands || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_COMMAND);\r\n    this.metadatas = ngCommands;\r\n    this.keybindingMap = new Map<string, Keybinding>();\r\n    Object.keys(ngCommands).forEach((propertyName: string) => {\r\n      const ngCommand: NgCommand = ngCommands[propertyName];\r\n      // 注册快捷键\r\n      if (ngCommand.keyBinding) {\r\n        this.keybindingMap.set(propertyName, ngCommand.keyBinding);\r\n      }\r\n      Object.defineProperty(this, propertyName, {\r\n        value: (data: any) => {\r\n          if (context.isDisposed) {\r\n            return EMPTY;\r\n          }\r\n          // 获取命令处理上下文\r\n          let targetContext = context;\r\n          if (ngCommand.frameId) {\r\n            targetContext = context.appContext.getFrameContext(ngCommand.frameId);\r\n          }\r\n          const command: Command = {\r\n            name: ngCommand.name,\r\n            params: ngCommand.params,\r\n            paramDescriptions: ngCommand.paramDescriptions,\r\n            eventParam: data || null\r\n          };\r\n          return targetContext.commandBus.dispatch(command);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 从Form获取监听器\r\n   */\r\n  private initListeners() {\r\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\r\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\r\n    };\r\n\r\n    if (this.form) {\r\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\r\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\r\n      });\r\n\r\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\r\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\r\n      });\r\n    }\r\n  }\r\n\r\n  public bindToParent(parent: ViewModel) {\r\n    if (parent) {\r\n      if (parent.verifycationChanged) {\r\n        parent.verifycationChanged.subscribe(verifyInformations => {\r\n          if (this.verifycationChanged) {\r\n            this.verifycationChanged.next(verifyInformations);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 合并审批及表单表达式并计算结果\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  public transform(expression: string | boolean | Array<any>): any {\r\n    if (Array.isArray(expression)) {\r\n      const wfConf = expression.find(item => item && item.source === 'wf');\r\n      if (wfConf && wfConf.value) {\r\n        return this.transform(wfConf.value);\r\n      } else {\r\n        return this.transform(expression[0]);\r\n      }\r\n    } else {\r\n      if (typeof expression === 'boolean') {\r\n        return expression;\r\n      } else if (typeof expression === 'string') {\r\n        return new Function('ctx', `return ${expression}`).apply(this.frameContext, [this]);\r\n      } else {\r\n        // 表达式result\r\n        return expression;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { ViewModel };\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nclass Context {\r\n\r\n  /**\r\n   * 上下文变量\r\n   */\r\n  params: Map<string, any> = new Map<string, any>();\r\n\r\n  /**\r\n   * 获取变量\r\n   */\r\n  getParam(key: string): any {\r\n    return this.params.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置变量\r\n   */\r\n  setParam(key: string, value: any) {\r\n    this.params.set(key, value);\r\n  }\r\n}\r\n\r\nexport { Context };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:56:02\r\n */\r\n\r\nimport { BindingData } from '../binding-data';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * BindingData管理类\r\n */\r\nclass BindingDataManager implements IDisposable {\r\n\r\n  /**\r\n   * BindingDataMap\r\n   */\r\n  private bindingDataMap: Map<string, BindingData>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.bindingDataMap = new Map<string, BindingData>();\r\n  }\r\n\r\n  /**\r\n   * 获取BindingDataMap\r\n   */\r\n  public getBindingDataMap(): Map<string, BindingData> {\r\n    return this.bindingDataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取BindingData\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getBindingDataByName(name: string): BindingData {\r\n    return this.bindingDataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的BindingData\r\n   * @description 仅在高速模式时注册bindingData\r\n   */\r\n  public regBindingData(name: string, bindingData: BindingData): void {\r\n    this.bindingDataMap.set(name, bindingData);\r\n  }\r\n  public unRegisteBindingData(name: string) {\r\n    this.bindingDataMap.delete(name);\r\n  }\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifBindingDataExits(name: string) {\r\n    const bindingData = this.getBindingDataByName(name);\r\n    return bindingData ? true : false;\r\n  }\r\n  public dispose() {\r\n    this.bindingDataMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BindingDataManager };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 18:06:11\r\n */\r\n\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * Repository管理类\r\n */\r\n@Injectable()\r\nclass RepositoryManager implements IDisposable {\r\n  /**\r\n   * repositoryMap\r\n   */\r\n  private repositoryMap: Map<string, Repository<Entity>>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.repositoryMap = new Map<string, Repository<Entity>>();\r\n  }\r\n\r\n  /**\r\n   * 注册Repository\r\n   */\r\n  public regRepository(name: string, repository: Repository<Entity>): void {\r\n    this.repositoryMap.set(name, repository);\r\n  }\r\n\r\n  public unRegisteRepository(name: string) {\r\n    this.repositoryMap.delete(name);\r\n  }\r\n  /**\r\n   * 获取RepositoryMap\r\n   * @internal\r\n   */\r\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\r\n    return this.repositoryMap;\r\n  }\r\n\r\n  /**\r\n   * 获取Repository数组\r\n   */\r\n  public getRepositories(): Repository<Entity>[] {\r\n    return Array.from(this.repositoryMap.values());\r\n  }\r\n\r\n  /**\r\n   * 根据name获取Repository\r\n   */\r\n  public getRepositoryByName(name: string): Repository<Entity> {\r\n    return this.repositoryMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifRepositoryExits(name: string) {\r\n    const repository = this.getRepositoryByName(name);\r\n    return repository ? true : false;\r\n  }\r\n  public dispose() {\r\n    // this.repositoryMap.forEach((repo: Repository<any>) => {\r\n    //   if (repo) {\r\n    //     repo.entityCollection.reset(false);\r\n    //   }\r\n    // });\r\n    this.repositoryMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { RepositoryManager };\r\n","import { IDisposable } from '../core';\r\nimport { FrameContext } from '../frame';\r\n\r\n/**\r\n * FrameComponent刷新器\r\n */\r\nclass FrameComponentRefresher implements IDisposable {\r\n  private frameComponentMap: Map<string, any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.frameComponentMap = new Map<string, any>();\r\n  }\r\n\r\n  /**\r\n   * 刷新组件\r\n   */\r\n  public refreshComponents() {\r\n    this.frameComponentMap.forEach((component: any, frameId: string) => {\r\n      if (typeof component['onFormLoad'] === 'function') {\r\n        component.onFormLoad();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册组件\r\n   * @param frameId   FrameId\r\n   * @param component Frame组件实例\r\n   */\r\n  public regFrameComponent(frameId: string, component: any) {\r\n    this.frameComponentMap.set(frameId, component);\r\n  }\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameComponentMap.delete(frameId);\r\n  }\r\n  public dispose() {\r\n    this.frameComponentMap.clear();\r\n  }\r\n}\r\n\r\nexport { FrameComponentRefresher };\r\n","import { FrameContext } from '../frame/index';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\n\r\n/**\r\n * 变更检测控制器\r\n */\r\nclass ChangeDetectionController {\r\n\r\n  /**\r\n   * 所有的FrameContext数组\r\n   */\r\n  private get frameContexts(): FrameContext[] {\r\n    return this.frameContextManager.getFrameContexts();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private frameContextManager: FrameContextManager) {\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent重新加入到变更检测树\r\n   * @todo\r\n   * 1、该方法仅供数据源变更产生大量变更时优化性能使用；\r\n   * 2、加setTimeout来保证数据变更流完成之后，再执行变更检测，目前父对象是通过subscribe监听子对象变化，导致产生异步；\r\n   * 3、应该从根本上解决该问题，而不是setTimeout。\r\n   */\r\n  public reattach(): void {\r\n    setTimeout(() => {\r\n      this.frameContexts.forEach((frameContext: FrameContext) => {\r\n        frameContext.frameComponent.reattach();\r\n        frameContext.frameComponent.detectChanges();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent脱离变更检测树\r\n   */\r\n  public detach(): void {\r\n    this.frameContexts.forEach((frameContext: FrameContext) => {\r\n      frameContext.frameComponent.detach();\r\n    });\r\n  }\r\n}\r\n\r\nexport { ChangeDetectionController };\r\n","import { AppContext } from './app_context';\r\n\r\n/**\r\n * The manager for all appContexts.\r\n * @summary\r\n * 1, The generator create unique frameId dynamically for each frameContext in the combination forms.\r\n * 2, Combined form and Host form visit each other by these unique frameIds.\r\n * 3, Now we make these forms has own appContext, they can't visit each other in old way.\r\n * 4, For compatible purpose, we collect all appContexts together and search frameContext in these appContexts by unque frameId.\r\n */\r\nclass AppContextManager {\r\n\r\n  /**\r\n   * AppContext Set\r\n   */\r\n  private appContextSet: Set<AppContext>;\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  constructor() {\r\n    this.appContextSet = new Set<AppContext>();\r\n  }\r\n\r\n  /**\r\n   * Register AppContext\r\n   */\r\n  public registerAppContext(appContext: AppContext): void {\r\n    this.appContextSet.add(appContext);\r\n  }\r\n\r\n  /**\r\n   * Unregister AppContext\r\n   */\r\n  public unregisterAppContext(appContext: AppContext): void {\r\n    this.appContextSet.delete(appContext);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all AppContexts.\r\n   */\r\n  public getAppContexts(): AppContext[] {\r\n    return Array.from(this.appContextSet);\r\n  }\r\n\r\n}\r\n\r\nexport { AppContextManager };\r\n","import { AppContext } from './app_context';\r\n\r\nexport class ComponentManager {\r\n  constructor(private appContext: AppContext) { }\r\n  public get(paths: string[]) {\r\n    if (!Array.isArray(paths) || paths.length < 1) {\r\n      throw new Error('Argument error !');\r\n    }\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    let component: any = componentRefs;\r\n    paths.forEach(path => {\r\n      component = component && component.get(path) || null;\r\n    });\r\n    return component;\r\n  }\r\n  /**\r\n   * 获取指定frame下所有的组件\r\n   * @param frameId \r\n   * @returns \r\n   */\r\n  public getComponentsByFrameId(frameId: string): Map<string, any> | undefined {\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    return componentRefs.get(frameId);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n/**\r\n * 表单Id\r\n */\r\nexport const FORM_ID = new InjectionToken<string>('@farris/devkit FORM_ID');\r\n\r\n","export class DomService {\r\n\r\n  constructor() { }\r\n\r\n  public getElementByBinding(contents: any[], bindingFieldId: string, parentElement): ElementByBindingResult[] {\r\n    const controls: ElementByBindingResult[] = [];\r\n    for (const element of contents) {\r\n      // 优先变量数据集合类组件\r\n      if (element.fields) { // 列表\r\n        const childControls = this.getElementByBinding(element.fields, bindingFieldId, element);\r\n        controls.push(...childControls);\r\n      }\r\n      // 其次遍历容器类组件\r\n      else if (element.contents) { // 容器组件\r\n        const childControls = this.getElementByBinding(element.contents, bindingFieldId, element);\r\n        controls.push(...childControls);\r\n      }\r\n      // 再次遍历集合类字段节点\r\n      else if (element.editor) {\r\n        const childControls = this.getElementByBinding([element.editor], bindingFieldId, element);\r\n        controls.push(...childControls);\r\n      }\r\n      // 最后遍历输入类组件\r\n      else if (element.binding && element.binding.field === bindingFieldId) {\r\n        controls.push({\r\n          element: element,\r\n          parentElement: parentElement\r\n        });\r\n      }\r\n    }\r\n    return controls;\r\n  }\r\n}\r\n\r\ninterface ElementByBindingResult {\r\n  element: any;\r\n  parentElement: any;\r\n}","import { FormDeclaration } from './dom-entity';\r\nimport { Schema } from './schema';\r\n\r\nexport class FormContent {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: {\r\n        module: FormModule,\r\n        options?: FormOptions\r\n    };\r\n}\r\n\r\nexport class FormContentForDB {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: string;\r\n\r\n    constructor(content: FormContent) {\r\n        this.Id = content.Id;\r\n        this.Code = content.Code;\r\n        this.Name = content.Name;\r\n        this.Contents = JSON.stringify(content.Contents);\r\n    }\r\n}\r\n\r\nexport class FormMetadaDataDom {\r\n    module: FormModule;\r\n}\r\n\r\nexport class FormModule {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    caption: string;\r\n    type: string;\r\n    creator: string;\r\n    creationDate: Date;\r\n    updateVersion: string;\r\n    showTitle: boolean;\r\n    boostrap: string;\r\n    schemas: Array<Schema>;\r\n    states: Array<any>;\r\n    contents: Array<any>;\r\n    stateMachines: Array<any>;\r\n    viewmodels: Array<IFormViewModel>;\r\n    components: Array<any>;\r\n    webcmds: Array<any>;\r\n    serviceRefs: Array<any>;\r\n    ctrlLangs: any;\r\n\r\n    // 是否移动审批表单\r\n    isMobileApprove: boolean;\r\n\r\n    // 是否组合表单\r\n    isComposedFrm: boolean;\r\n\r\n    // 表单所在的工程名\r\n    projectName: string;\r\n\r\n    // 外部模块声明\r\n    extraImports: Array<{ name: string, path: string }>;\r\n\r\n    // 外部组件\r\n    externalComponents: Array<any>;\r\n    // 当前组件声明：事件、变量、命令\r\n    declarations: FormDeclaration;\r\n    // 订阅\r\n    subscriptions: Array<any>;\r\n}\r\n\r\n// export class FormDeclaration {\r\n//     events: Array<any>;\r\n//     commands: Array<any>;\r\n//     states: Array<any>;\r\n// }\r\n\r\nexport class FormOptions {\r\n    enableTextArea: boolean;\r\n    enableDragAndDropToModifyLayout: boolean;\r\n}\r\n\r\nexport interface IFormViewModel {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    fields: IFormViewModelField[];\r\n    commands: any[];\r\n    serviceRefs: any[];\r\n    states: IFormViewModelUiState[];\r\n    bindTo: string;\r\n    parent: string;\r\n    pagination: any;\r\n    enableValidation: boolean;\r\n}\r\n\r\nexport interface IFormViewModelField {\r\n    type: string;\r\n    id: string;\r\n    fieldName: string;\r\n    bindingPath: string;\r\n    groupId: string;\r\n    groupName: string;\r\n    valueChanging: string;\r\n    valueChanged: string;\r\n    updateOn: 'change' | 'blur' | 'submit';\r\n}\r\n\r\n\r\nexport interface IStateMachine {\r\n    initialState: string;\r\n    renderState: { [renderStateName: string]: IRenderState };\r\n    state: IState[];\r\n    action: { [actionName: string]: IAction };\r\n}\r\n\r\nexport interface IRenderState {\r\n    name: string;\r\n    condition: IRenderStateCondition[];\r\n    description: string;\r\n}\r\n\r\nexport interface IRenderStateCondition {\r\n    compare: string;\r\n    lBracket: string;\r\n    rBracket: string;\r\n    relation: string;\r\n    source: string;\r\n    target: string;\r\n}\r\n\r\nexport interface IState {\r\n    state: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IAction {\r\n    name: string;\r\n    transitTo: string;\r\n    precondition: any[];\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelCommand {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    params: IFormViewModelCommandParam[];\r\n    handlerName: string;\r\n    cmpId: string;\r\n    shortcut: any;\r\n    extensions: any[]\r\n}\r\n\r\nexport interface IFormViewModelCommandParam {\r\n    name: string;\r\n    showName: string;\r\n    value: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelUiState {\r\n    id: string;\r\n    category: string;\r\n    code: string;\r\n    name: string;\r\n    type: string;\r\n}\r\n\r\n","\r\nimport { IFormViewModel } from './form-metadata';\r\nimport { Schema, SchemaEntity, SchemaEntityField } from './schema';\r\n\r\nexport class SchemaService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * 根据字段标识数组获取指定字段集合\r\n     * @param fieldIds 字段标识数组\r\n     * @param schema 实体结构\r\n     * @param viewModel 视图模型\r\n     * @returns 已Map形式存储的指定字段字典\r\n     */\r\n    public getFieldsByIds(fieldIds: string[], schema: Schema, viewModel: IFormViewModel)\r\n        : Map<string, SchemaEntityField> {\r\n        const specifiedFieldsMap = new Map<string, SchemaEntityField>();\r\n        const entities = schema.entities;\r\n        if (entities && entities.length && viewModel) {\r\n            const entityPath = viewModel.bindTo;\r\n            const fields = this.getEntityFields(entities, entityPath);\r\n            const fieldsMap = this.flattenFields(fields);\r\n            fieldIds.forEach(fieldId => {\r\n                if (fieldsMap.has(fieldId)) {\r\n                    specifiedFieldsMap.set(fieldId, fieldsMap.get(fieldId));\r\n                }\r\n            });\r\n        }\r\n        return specifiedFieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 将字段列表打平为字典结构\r\n     * @param fields 字段属性\r\n     * @param fieldsMap 缺省参数，用来存储字段的Map对象\r\n     * @returns 以Map形式存储的字段字段\r\n     */\r\n    private flattenFields(\r\n        fields: SchemaEntityField[],\r\n        fieldsMap: Map<string, SchemaEntityField> = new Map<string, SchemaEntityField>()\r\n    ): Map<string, SchemaEntityField> {\r\n        for (const field of fields) {\r\n            fieldsMap.set(field.id, field);\r\n            if (field.type && field.type.fields && field.type.fields.length > 0) {\r\n                this.flattenFields(field.type.fields, fieldsMap);\r\n            }\r\n        }\r\n        return fieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 获取表字段列表\r\n     * @param entities 实体对象集合\r\n     * @param entityPath 指定实体路径，根实体路径为'/'\r\n     */\r\n    private getEntityFields(entities: SchemaEntity[], entityPath: string): SchemaEntityField[] {\r\n        if (entities && entities.length) {\r\n            const splitIndex = entityPath.indexOf('/');\r\n            if (splitIndex > -1) {\r\n                entityPath = entityPath.slice(splitIndex + 1, entityPath.length);\r\n            }\r\n            // 遍历所有实体，查找匹配指定路径的实体\r\n            for (const entity of entities) {\r\n                if (entityPath === '' || entityPath === entity.code || entityPath === entity.label) {\r\n                    return entity.type.fields;\r\n                } else {\r\n                    const fields = this.getEntityFields(entity.type.entities, entityPath);\r\n                    if (fields && fields.length) {\r\n                        return fields;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n","\r\nimport { CommandController, CommandHandler, CommandHandlerExtender, ControllerMethod, DynamicCommandHandler } from '../command';\r\nimport { ValidateRule } from '../entity';\r\nimport { NgFormControl, NgValidateForm } from '../form';\r\nimport { DomService, Schema, SchemaEntityField } from '../schema';\r\nimport {\r\n  IFormViewModel, IFormViewModelCommand, IFormViewModelCommandParam, IFormViewModelField,\r\n  IFormViewModelUiState, IRenderState, IStateMachine\r\n} from '../schema/form-metadata';\r\nimport { SchemaService } from '../schema/schema.service';\r\nimport { NgParam } from '../ui-state';\r\nimport { NgCommand } from '../view-model';\r\nimport { IContextMetadata, IContextStateMachineMetadata } from './app_metadata';\r\n\r\nexport class ContextMetadataBuilder {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 构造应用程序上下文元数据\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数\r\n   * @returns 应用程序上下文元数据\r\n   */\r\n  public buildAppContextMetadata(formMetadataContent: any, stateMachineMetadata: IStateMachine): IContextMetadata {\r\n    const module = formMetadataContent.module;\r\n    const uiStates = module.states;\r\n    const appContextMetadata = {\r\n      identify: module.code,\r\n      namespace: '',\r\n      stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),\r\n      uiStates: this.buildUiStateMetadata(uiStates)\r\n    };\r\n    return appContextMetadata;\r\n  }\r\n\r\n\r\n  /**\r\n   * 构造视图上下文元数据\r\n   * @param componentId 组件标识\r\n   * @param viewModel 视图模型元数据\r\n   * @param declarations 外部接口定义\r\n   * @param subscriptions 事件订阅定义\r\n   * @returns 视图上下文元数据\r\n   */\r\n  public buildViewContextMetadata(\r\n    component: any,\r\n    viewModel: IFormViewModel,\r\n    schema: Schema,\r\n    controllers: { [id: string]: CommandController },\r\n    dynamicOptions: any\r\n  ): IContextMetadata {\r\n    const contextMetadata = {\r\n      identify: component.id,\r\n      namespace: '',\r\n      commands: this.buildCommand(viewModel.commands),\r\n      commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),\r\n      commandHandlerExtends: [],\r\n      form: this.buildFormMetadata(viewModel),\r\n      formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component, dynamicOptions),\r\n      subForms: null,\r\n      uiStates: this.buildUiStateMetadata(viewModel.states),\r\n      bindingTo: viewModel.bindTo,\r\n      viewModelCode: viewModel.code\r\n    };\r\n    return contextMetadata;\r\n  }\r\n\r\n  private buildCommand(commandMetadataArray: IFormViewModelCommand[]): { [commandName: string]: NgCommand } {\r\n    const commands = {};\r\n    commandMetadataArray.reduce<{ [commandName: string]: NgCommand }>((previousValue, commandMetadata: IFormViewModelCommand) => {\r\n      const ngCommand: NgCommand = {\r\n        name: commandMetadata.code,\r\n        params: {},\r\n        paramDescriptions: {}\r\n      };\r\n      commandMetadata.params.reduce<NgCommand>((previousCommand, param) => {\r\n        previousCommand.params[param.name] = param.value;\r\n        previousCommand.paramDescriptions[param.name] = { type: 'string' };\r\n        return previousCommand;\r\n      }, ngCommand);\r\n      previousValue[commandMetadata.code] = ngCommand;\r\n      return previousValue;\r\n    }, commands);\r\n    return commands;\r\n  }\r\n\r\n  private buildFormMetadata(viewModel: IFormViewModel): NgValidateForm {\r\n    return {\r\n      formGroupName: viewModel.name,\r\n      enableValidate: viewModel.enableValidation\r\n    };\r\n  }\r\n\r\n  private buildFormControlMetadata(formFields: IFormViewModelField[], viewModel: IFormViewModel, schema: Schema, component: any, dynamicOptions: any)\r\n    : { [controlName: string]: NgFormControl } {\r\n    const formControls: { [controlName: string]: NgFormControl } = {};\r\n    const formFieldIds = formFields.map(formField => formField.id);\r\n    const schemaService = new SchemaService();\r\n    const formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);\r\n    const domService = new DomService();\r\n\r\n    formFields.reduce<{ [controlName: string]: NgFormControl }>((previousValue, field) => {\r\n      const schemaEntityField: SchemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;\r\n      const binding = schemaEntityField ? schemaEntityField.bindingPath : '';\r\n      const parentElement = {};\r\n      // parentElement 作为引用方式 往外传递\r\n      const domElements = domService.getElementByBinding(component.contents, field.id, parentElement);\r\n      const validRules: ValidateRule[] = [];\r\n      let matchedElement;\r\n      let parentMatchedElement;\r\n      if (domElements && domElements.length >= 1) {\r\n        matchedElement = domElements[0].element;\r\n        parentMatchedElement = domElements[0].parentElement;\r\n        const keys = 'maxValue,minValue,required,require';\r\n        Object.keys(matchedElement).forEach(key => {\r\n          if (keys.includes(key)) {\r\n            if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最大值属性转换成validRule\r\n              validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最小值属性转换成validRule\r\n              validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'required' || key === 'require') {\r\n              // 把必填属性转换成validRule\r\n              // 必填表达式可以为状态机\r\n              if (matchedElement[key] === 'true' || matchedElement[key] === true) {\r\n                validRules.push({ type: 'required', constraints: [true] });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      previousValue[field.fieldName] = {\r\n        /** 控件标识 */\r\n        id: field.fieldName, //`${field.fieldName}_${field.id.substr(0, 13).replace('-', '_')}`,\r\n        /** 控件名称 todo: 需要支持多语言 */\r\n        name: this.getTitle(matchedElement, parentMatchedElement, field.fieldName),\r\n        /** 绑定字段路径 */\r\n        binding,\r\n        /** 控件值更新时机 */\r\n        updateOn: field.updateOn,\r\n        /** 控件默认名称 */\r\n        defaultI18nValue: this.getTitle(matchedElement, parentMatchedElement, field.fieldName),\r\n        valueChanging: field.valueChanging,\r\n        valueChanged: field.valueChanged,\r\n        valueConverter: this.generateConverter(schemaEntityField, dynamicOptions),\r\n        /** 验证规则 */\r\n        validRules\r\n      };\r\n\r\n      return previousValue;\r\n    }, formControls);\r\n\r\n    return formControls;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的title值\r\n   * @param matchedElement\r\n   * @param defaultValue\r\n   * @returns\r\n   */\r\n  private getTitle(matchedElement, parentMatchedElement, defaultValue) {\r\n    if (!matchedElement) {\r\n      return defaultValue;\r\n    }\r\n    if (parentMatchedElement.type == 'GridField') {\r\n      return parentMatchedElement.caption || defaultValue;\r\n    }\r\n    return matchedElement.title || defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 构造对应的converter\r\n   * @param field\r\n   * @returns\r\n   */\r\n  private generateConverter(field, dynamicOptions) {\r\n    const valueConverterMap = dynamicOptions[\"valueConverterMap\"];\r\n    if (!valueConverterMap || !field) {\r\n      return;\r\n    }\r\n    if (field.type && (field.type.name == 'Date' || field.type.name == 'DateTime') && !field.converter) {\r\n      field.converter = valueConverterMap[\"Date\"];\r\n    }\r\n    if (field.multiLanguage && !field.converter) {\r\n      field.converter = valueConverterMap[\"MultiLang\"];\r\n    }\r\n\r\n    return field.converter;\r\n  }\r\n  /**\r\n   * 由状态机元数据创建状态机上下文描述\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @returns 状态机上下文描述\r\n   */\r\n  private buildStataMachineMetadata(stateMachineMetadata: IStateMachine): IContextStateMachineMetadata {\r\n    // 声明状态机上下文元数据\r\n    const stateMachine: IContextStateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n\r\n    if (!stateMachineMetadata) {\r\n      return stateMachine;\r\n    }\r\n\r\n    // 由状态机元数据构造NgState\r\n    stateMachineMetadata.state.reduce<IContextStateMachineMetadata>((previousValue, state) => {\r\n      previousValue.states[state.state] = {\r\n        initialState: state.state === stateMachineMetadata.initialState\r\n      };\r\n      return previousValue;\r\n    }, stateMachine);\r\n    // 由状态机元数据构造NgRenderState\r\n    Object.keys(stateMachineMetadata.renderState)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, renderStateName) => {\r\n        const renderStateMetadata = stateMachineMetadata.renderState[renderStateName];\r\n        const renderFunction = this.buildRenderFunction(renderStateMetadata);\r\n        previousValue.renderStates[renderStateName] = {\r\n          render: renderFunction\r\n        };\r\n        // previousValue.renderStates[renderStateName] = {\r\n        //   render: (context: StateMachineContext) => {\r\n        //     return context.parser.parse(renderStateMetadata.condition, this);\r\n        //   }\r\n        // };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 由状态机元数据构造NgAction\r\n    Object.keys(stateMachineMetadata.action)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, actionName) => {\r\n        const actionMetadata = stateMachineMetadata.action[actionName];\r\n        previousValue.actions[actionName] = {\r\n          precondition: actionMetadata.precondition,\r\n          transitTo: actionMetadata.transitTo\r\n        };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 返回状态机元数据\r\n    return stateMachine;\r\n  }\r\n\r\n  private buildUiStateMetadata(states: IFormViewModelUiState[]): { [stateName: string]: NgParam } {\r\n    const uiStates: { [stateName: string]: NgParam } = {};\r\n    states.reduce<{ [stateName: string]: NgParam }>((previousValue, uiState) => {\r\n      previousValue[uiState.code] = {\r\n        stateName: uiState.code\r\n      };\r\n      return previousValue;\r\n    }, uiStates);\r\n    return uiStates;\r\n  }\r\n\r\n  private buildRenderFunction(renderStateMetadata: IRenderState): any {\r\n    if (renderStateMetadata && renderStateMetadata.condition.length) {\r\n      const renderFunctionString = renderStateMetadata.condition.reduce<string>((previousFunctionString, condition) => {\r\n        let conditionTarget = condition.target;\r\n        if (!conditionTarget.startsWith('\\'')) {\r\n          conditionTarget = `'${conditionTarget}`;\r\n        }\r\n        if (!conditionTarget.endsWith('\\'')) {\r\n          conditionTarget = `${conditionTarget}'`;\r\n        }\r\n        let conditionSource = condition.source;\r\n        if (conditionSource.indexOf('\\'') < 0) {\r\n          conditionSource = `'${conditionSource}'`;\r\n        }\r\n        if (conditionSource.indexOf('getUIState') > -1) {\r\n          conditionSource = conditionSource.replace('getUIState', 'context.getUIState');\r\n        }\r\n        if (conditionSource.indexOf('getData') > -1) {\r\n          conditionSource = conditionSource.replace('getData', 'context.getData');\r\n        }\r\n        // tslint:disable-next-line: max-line-length\r\n        let functionString = `${condition.lBracket || ''}context.parse(${conditionSource},'source')${condition.compare}${condition.target}${condition.rBracket || ''}`;\r\n        if (condition.relation) {\r\n          switch (condition.relation.trim().toLocaleLowerCase()) {\r\n            case 'or':\r\n              functionString += '||';\r\n              break;\r\n            case 'and':\r\n              functionString += '&&';\r\n              break;\r\n          }\r\n        }\r\n        return previousFunctionString + functionString;\r\n      }, '');\r\n      if (renderFunctionString) {\r\n        return new Function('context', `return ${renderFunctionString};`);\r\n      }\r\n    }\r\n    return new Function('context', 'return true;');\r\n  }\r\n\r\n  private buildCommandHandlers(commandMetadataArray: IFormViewModelCommand[], controllers: { [id: string]: CommandController })\r\n    : CommandHandler[] {\r\n    const commandHandlers: CommandHandler[] = [];\r\n    commandMetadataArray.reduce<CommandHandler[]>((previousValue: CommandHandler[], commandReference: IFormViewModelCommand) => {\r\n      const commandName = commandReference.code;\r\n      const controllerId = commandReference.cmpId;\r\n      const controller = controllers[controllerId];\r\n      const method = Object.assign({}, controller.methods[commandReference.handlerName]);\r\n      method.params = method.params && method.params.map(param => Object.assign({}, param));\r\n      if (method.params && method.params.length) {\r\n        commandReference.params.reduce<ControllerMethod>((previousMethodValue: ControllerMethod, param: IFormViewModelCommandParam) => {\r\n          const methodParam = previousMethodValue.params.find(value => value.name === param.name);\r\n          if (methodParam) {\r\n            methodParam.expression = param.value;\r\n          }\r\n          return previousMethodValue;\r\n        }, method);\r\n      }\r\n      const commandHandler = new DynamicCommandHandler(commandName, method);\r\n      previousValue.push(commandHandler);\r\n      return previousValue;\r\n    }, commandHandlers);\r\n    return commandHandlers;\r\n  }\r\n}\r\n","import { IDisposable } from '../core';\r\nimport { ViewModel } from '../view-model';\r\n\r\n/**\r\n * ViewModel管理类\r\n */\r\nclass ViewModelManager implements IDisposable {\r\n  /**\r\n   * ViewModelMap\r\n   */\r\n  private viewModelMap: Map<string, ViewModel>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.viewModelMap = new Map<string, ViewModel>();\r\n  }\r\n\r\n  /**\r\n   * 获取ViewModelMap\r\n   */\r\n  public getViewModelMap(): Map<string, ViewModel> {\r\n    return this.viewModelMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ViewModel\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getViewModelByName(name: string): ViewModel {\r\n    return this.viewModelMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的viewModel\r\n   */\r\n  public register(name: string, viewModel: ViewModel): void {\r\n    this.viewModelMap.set(name, viewModel);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const viewModel = this.getViewModelByName(name);\r\n    return viewModel ? true : false;\r\n  }\r\n  public dispose() {\r\n    this.viewModelMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModelManager };\r\n","import { IContextMetadata } from './app_metadata';\r\n\r\n/**\r\n * ContextMetadata管理类\r\n */\r\nclass ContextMetadataManager {\r\n\r\n  /**\r\n   * ContextMetadataMap\r\n   */\r\n  private contextMetadataMap: Map<string, IContextMetadata>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.contextMetadataMap = new Map<string, IContextMetadata>();\r\n  }\r\n\r\n  /**\r\n   * 获取ContextMetadataMap\r\n   */\r\n  public getContextMetadataMap(): Map<string, IContextMetadata> {\r\n    return this.contextMetadataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ContextMetadata\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getContextMetadataByName(name: string): IContextMetadata {\r\n    return this.contextMetadataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的ContextMetadata\r\n   */\r\n  public register(name: string, contextMetadata: IContextMetadata): void {\r\n    this.contextMetadataMap.set(name, contextMetadata);\r\n  }\r\n\r\n  /**\r\n   * ContextMetadata是否已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const contextMetadata = this.getContextMetadataByName(name);\r\n    return contextMetadata ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { ContextMetadataManager };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nexport const FRAME_ID = new InjectionToken<string>('@farris/devkit FRAME_ID');\r\n/**\r\n * 表单命名空间\r\n */\r\nexport const NAMESPACE = new InjectionToken<string>('@farris/devkit NAMESPACE');\r\n\r\n/**\r\n * 组件初始化\r\n */\r\nexport interface onFrameComponentInit {\r\n  onComponentInit(frameContext: FrameContext): void;\r\n}\r\n/**\r\n * 组件初始化时的处理器\r\n */\r\nexport const FRAME_COMPONENT_INIT_HANDLER_TOKEN = new InjectionToken<onFrameComponentInit[]>('@farris/frame_component_init_handler_token');\r\n","/**\r\n * 应用上下文\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\r\n */\r\nimport { Injectable, Injector, Optional, SkipSelf, InjectFlags, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Context } from '../context/index';\r\nimport { BindingData, BindingDataFactory, BindingList, Change } from '../binding-data';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\nimport { FrameComponentRefresher } from './frame_component_refresher';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { ChangeDetectionController } from './change_detection_controller';\r\nimport { AppContextManager } from './app_context_manager';\r\nimport { Subject } from 'rxjs';\r\nimport { ComponentManager } from './component_manager';\r\nimport { UID } from '../misc/uid';\r\nimport { FORM_ID } from './tokens';\r\nimport { ContextMetadataBuilder } from './app_metadata_collector';\r\nimport { FormModule, IFormViewModel, IStateMachine } from '../schema/form-metadata';\r\nimport { CommandController } from '../command';\r\nimport { StateMachine } from '../state-machine';\r\nimport { IContextMetadata } from './app_metadata';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser, VariableParseService\r\n} from '../variable';\r\nimport { ViewModelManager } from './view_model_manager';\r\nimport { Repository } from '../repository';\r\nimport { Entity } from '../entity';\r\nimport { UIState } from '../ui-state';\r\nimport { Schema } from '../schema';\r\nimport { ContextMetadataManager } from './render_context_metadata_manager';\r\nimport { Form } from '../form';\r\nimport { ViewModel } from '../view-model';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { NAMESPACE, FRAME_ID } from '../frame/tokens';\r\nimport { EventBus } from '../event-bus-new';\r\nimport { DEVKIT_RUN_MODE, DestroyOpportunity, IDisposeOptions, RunMode } from '../core';\r\nimport { RunModeService } from '../misc/run_mode_service';\r\nimport { IDisposable } from '../core';\r\n\r\n@Injectable()\r\nclass AppContext extends Context implements OnDestroy, IDisposable {\r\n  public typeName = 'AppContext';\r\n  /**\r\n   * 注入器\r\n   */\r\n  public injector: Injector;\r\n  /**\r\n   * 根应用上下文\r\n   */\r\n  public root: AppContext;\r\n  /**\r\n   * 上级应用上下文\r\n   */\r\n  public parent: AppContext;\r\n  /**\r\n   * 应用上下文管理器\r\n   */\r\n  public appContextManager: AppContextManager;\r\n  /**\r\n   * FrameContext管理器\r\n   */\r\n  public frameContextManager: FrameContextManager;\r\n  /**\r\n   * FrameComponent刷新器\r\n   */\r\n  public frameComponentRefresher: FrameComponentRefresher;\r\n  /**\r\n   * Repository管理器\r\n   */\r\n  public repositoryManager: RepositoryManager;\r\n  /**\r\n   * 绑定数据管理器\r\n   */\r\n  public bindingDataManager: BindingDataManager;\r\n  /**\r\n   * 视图模型管理器\r\n   */\r\n  public viewModelManager: ViewModelManager;\r\n\r\n  public contextMetadataManager: ContextMetadataManager;\r\n  /**\r\n   * 变更检测控制器\r\n   */\r\n  public changeDetectionController: ChangeDetectionController;\r\n  /**\r\n   * 是否已经销毁\r\n   */\r\n  public isFormDestoryed = false;\r\n  /**\r\n   * 应用程序标识\r\n   */\r\n  public applicationId: string = null;\r\n\r\n  private token: string = null;\r\n  /**\r\n   * 是否使用独立的eventBus\r\n   * @memberof AppContext\r\n   */\r\n  public useIsoluteEventBus = false;\r\n\r\n  /**\r\n   * 独立的eventBus实例\r\n   *\r\n   * @type {EventBus}\r\n   * @memberof AppContext\r\n   */\r\n  public isoluteEventBus: EventBus;\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   * @summary\r\n   * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。\r\n   */\r\n  private get frameContexts(): Map<string, any> {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n  /**\r\n   * 消息管道\r\n   */\r\n  public messagePipe: Subject<any>;\r\n  /**\r\n   * 表单Id\r\n   */\r\n  public formId: string;\r\n  /**\r\n   * 组件实例数组\r\n   */\r\n  public componentRefs: Map<string, Map<string, any>>;\r\n  /**\r\n   * 视图组件管理器\r\n   */\r\n  public componentManager: ComponentManager;\r\n  /**\r\n   * 记录confirm弹窗是否打开\r\n   */\r\n  public opened: boolean;\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  // public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  // public filterConditionManager: FilterConditionManager;\r\n\r\n  protected contextMetadataBuilder: ContextMetadataBuilder;\r\n  /**\r\n   * 应用上下文元数据描述\r\n   */\r\n  public metadata: IContextMetadata = {};\r\n  /**\r\n   * 应用程序上下文全局状态\r\n   */\r\n  public uiState: UIState;\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public namespace: string;\r\n\r\n  public router: Router;\r\n\r\n  public formMetadataContent: any;\r\n  /**\r\n   * 控制器运行模式，支持compatible | highSpeed\r\n   */\r\n  public runMode: RunMode;\r\n  /**\r\n   * 编辑态时启用表格头\r\n   */\r\n  public enableGridHeaderWhenEditing = false;\r\n  /**\r\n   * tabId\r\n   */\r\n  public tabId: string;\r\n  public get formModule(): FormModule {\r\n    return this.formMetadataContent ? this.formMetadataContent.module : null;\r\n  }\r\n\r\n  public controllers: { [id: string]: CommandController };\r\n\r\n  /**\r\n   * 应用上下文销毁信号\r\n   */\r\n  public destorySignal: Subject<IDisposeOptions | any>;\r\n  public disposed: boolean = false;\r\n\r\n  private dynamicOptions: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    @Optional() injector: Injector,\r\n    @Optional() appContextManager: AppContextManager,\r\n    @Optional() @SkipSelf() parent: AppContext\r\n  ) {\r\n    super();\r\n    this.destorySignal = new Subject<any>();\r\n    this.injector = injector;\r\n    this.appContextManager = appContextManager;\r\n    this.formId = this.injector && this.injector.get(FORM_ID, null) || null;\r\n    // 默认运行模式为兼容模式\r\n    this.runMode = this.injector && this.injector.get<RunMode>(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;\r\n    RunModeService.setRunMode(this.runMode);\r\n    this.params.set('formId', this.formId);\r\n    this.params.set('appId', this.ApplicationId);\r\n    this.params.set('token', this.Token);\r\n    // 确定父子关系\r\n    if (!parent) {\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n\r\n    this.registerToManager();\r\n\r\n    this.frameContextManager = new FrameContextManager(this);\r\n    this.frameComponentRefresher = new FrameComponentRefresher();\r\n    this.repositoryManager = new RepositoryManager();\r\n    this.bindingDataManager = new BindingDataManager();\r\n    this.changeDetectionController = new ChangeDetectionController(this.frameContextManager);\r\n    this.messagePipe = new Subject<any>();\r\n    this.componentRefs = new Map<string, Map<string, any>>();\r\n    this.componentManager = new ComponentManager(this);\r\n    this.contextMetadataManager = new ContextMetadataManager();\r\n\r\n    this.opened = false;\r\n    // this.sortConditionManager = new SortConditionManager();\r\n    // this.filterConditionManager = new FilterConditionManager();\r\n    this.router = this.injector && this.injector.get(Router);\r\n    this.viewModelManager = new ViewModelManager();\r\n    this.contextMetadataBuilder = new ContextMetadataBuilder();\r\n    this.variableParseService = new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]);\r\n  }\r\n  dispose(options?: IDisposeOptions) {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    this.isFormDestoryed = true;\r\n    this.disposed = true;\r\n    this.router = null;\r\n    this.unregisterFromManager();\r\n    this.componentRefs.clear();\r\n    if (this.stateMachine) {\r\n      this.stateMachine.dispose();\r\n      this.stateMachine = null;\r\n    }\r\n\r\n    this.frameComponentRefresher.dispose();\r\n    this.frameContextManager.dispose();\r\n    this.repositoryManager.dispose();\r\n    this.viewModelManager.dispose();\r\n    this.bindingDataManager.dispose();\r\n    if (this.messagePipe) {\r\n      this.messagePipe.complete();\r\n      this.messagePipe = null;\r\n    }\r\n    this.injector = null;\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next(options);\r\n      this.destorySignal.complete();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dispose({ opportunity: DestroyOpportunity.AppContextDestroy });\r\n  }\r\n\r\n  /**\r\n   * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @param controllers 前端构件元数据\r\n   */\r\n  public initializeByMetadata(\r\n    formMetadataContent: any,\r\n    stateMachineMetadata: IStateMachine,\r\n    controllers: { [id: string]: CommandController },\r\n    options: {\r\n      valueConverterMap?: any\r\n    }\r\n  ) {\r\n    this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);\r\n    if (!this.stateMachine) {\r\n      // 避免由于组合表单，获取到父级状态机实例的问题\r\n      // this.stateMachine = this.injector.get(StateMachine, new StateMachine());\r\n      this.stateMachine = new StateMachine();\r\n    }\r\n    this.formMetadataContent = formMetadataContent;\r\n    this.controllers = controllers;\r\n    this.dynamicOptions = options;\r\n  }\r\n\r\n  /**\r\n   * Register current AppContext instance to AppContextManager\r\n   */\r\n  public registerToManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.registerAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * Unregister current AppContext instance from AppContextManager\r\n   */\r\n  public unregisterFromManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.unregisterAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: any): void {\r\n    const repository = frameContext.repository;\r\n    const repositoryName = repository.name;\r\n\r\n    // Repository\r\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\r\n      this.repositoryManager.regRepository(repositoryName, repository);\r\n    }\r\n\r\n    // BindingData\r\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\r\n      let bindingData = null;\r\n      // 仅高速模式下使用bindingDataManager\r\n      if (this.runMode === RunMode.highSpeed) {\r\n        bindingData = BindingDataFactory.createFromRepository(repository, '/');\r\n        this.bindingDataManager.regBindingData(repositoryName, bindingData);\r\n      }\r\n    }\r\n\r\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\r\n    this.frameContextManager.regFrameContext(frameContext);\r\n  }\r\n\r\n  public regContextMetadata(componentId: string, contextMetadata: IContextMetadata) {\r\n    if (!this.contextMetadataManager.exsit(componentId)) {\r\n      this.contextMetadataManager.register(componentId, contextMetadata);\r\n    }\r\n  }\r\n  /**\r\n   * 获取整个表单的AppContext\r\n   */\r\n  public getFormAppContext() {\r\n    return this;\r\n  }\r\n  /**\r\n   * 销毁表单\r\n   * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制\r\n   */\r\n  public destory() {\r\n    this.dispose();\r\n  }\r\n  public get isDestoryed() {\r\n    return this.isFormDestoryed;\r\n  }\r\n  /**\r\n   * 应用id\r\n   */\r\n  public get ApplicationId() {\r\n    if (!!this.applicationId) {\r\n      return this.applicationId;\r\n    }\r\n    this.applicationId = UID.create();\r\n    return this.applicationId;\r\n  }\r\n  public set ApplicationId(appId: string) {\r\n    this.applicationId = appId;\r\n  }\r\n  public get Token() {\r\n    if (!!this.token) {\r\n      return this.token;\r\n    }\r\n    this.token = UID.create();\r\n    return this.token;\r\n  }\r\n  public set Token(token: string) {\r\n    this.token = token;\r\n  }\r\n  // #region 弃用的老方法\r\n\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public registerCommandHandler(frameId: string, component: any) {\r\n    this.frameComponentRefresher.regFrameComponent(frameId, component);\r\n  }\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public refresh() {\r\n    this.frameComponentRefresher.refreshComponents();\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。\r\n   * @deprecated\r\n   */\r\n  public getFrameContext(frameId: string): any {\r\n    return this.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n\r\n  public getContextById(identify: string): any {\r\n    const context = this.frameContextManager.getFrameContextById(identify);\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   */\r\n  public getAllFrameContexts() {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n\r\n  /**\r\n   * 处理行变更\r\n   */\r\n  public handleSelectChange(change: Change, srcFrameContext: any) {\r\n    const force = change.force || false;\r\n    this.frameContexts.forEach((targetFrameContext) => {\r\n      // 相同的FrameCotnext或者Repository不一致的情况下，不同步\r\n      if (targetFrameContext === srcFrameContext\r\n        || targetFrameContext.repository !== srcFrameContext.repository) {\r\n        return;\r\n      }\r\n\r\n      const bindingData = targetFrameContext.bindingData;\r\n      const bindingList: BindingList = bindingData.getValue(change.path);\r\n      const currentId = change.value['id'];\r\n      if (bindingList && bindingList.currentId !== currentId || force) {\r\n\r\n        // 设置当前行，但不对外广播\r\n        bindingList.setCurrentId(currentId, true, false, force);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  public buildRenderViewContext(componentId: string) {\r\n\r\n    // 提取视图模型集合\r\n    const viewModels = this.formModule.viewmodels;\r\n    // 提取组件描述集合\r\n    const viewComponents = this.formModule.components;\r\n    // 提取schema节点\r\n    const schema = this.formModule.schemas[0];\r\n    // 查找匹配指定标识的组件节点\r\n    const matchedComponent = viewComponents.find(component => component.id === componentId);\r\n    // 匹配指定组件的视图模型节点\r\n    const matchedViewModel = viewModels.find(viewModel => matchedComponent.viewModel === viewModel.id);\r\n    // 查找匹配视图模型的父节点\r\n    const parentViewModel = viewModels.find(viewModel => viewModel.id === matchedViewModel.parent);\r\n    let parentComponentId = '';\r\n    // 如果匹配上上级视图模型，提上级视图标识\r\n    if (parentViewModel) {\r\n      const parentComponent = viewComponents.find(component => component.viewModel === parentViewModel.id);\r\n      if (parentComponent) {\r\n        parentComponentId = parentComponent.id;\r\n      }\r\n    }\r\n    // 如果存在上级组件，提取器上下文对象。\r\n    // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;\r\n    // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);\r\n    this.buildRenderViewContextRecursively(matchedViewModel, schema);\r\n  }\r\n\r\n  private buildRenderViewContextRecursively(viewModel: IFormViewModel, schema: Schema) {\r\n    const controllers = this.controllers;\r\n    const viewComponents = this.formModule.components;\r\n    const matchedComponent = viewComponents.find(component => component.viewModel === viewModel.id);\r\n    const contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers, this.dynamicOptions);\r\n    // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);\r\n    // const commandHandlerExtends: CommandHandlerExtender[] = [];\r\n    // const viewContext = new ViewComponentContext();\r\n    //   contextMetadata,\r\n    //   this,\r\n    //   parent,\r\n    //   this.injector\r\n    // );\r\n    // this.regFrameContext(viewContext);\r\n    // viewContext.init();\r\n\r\n    const contextMetadataId = (this.namespace ? (this.namespace + '_') : '') + matchedComponent.id;\r\n    contextMetadata.namespace = this.namespace || '';\r\n    this.regContextMetadata(contextMetadataId, contextMetadata);\r\n\r\n    const viewModels = this.formModule.viewmodels;\r\n    const subViewModels = viewModels.filter(subViewModel => subViewModel.parent === viewModel.id);\r\n    if (subViewModels && subViewModels.length) {\r\n      subViewModels.forEach(subViewModel => {\r\n        this.buildRenderViewContextRecursively(subViewModel, schema);\r\n      });\r\n    }\r\n  }\r\n\r\n  public getComponentProviders(componentId: string): any[] {\r\n    const contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);\r\n    const bindingData = new BindingData();\r\n    const form = new Form();\r\n    const namespace = contextMetadata.namespace;\r\n    const repository = this.repository || this.injector.get(Repository, null);\r\n    const stateMachine = this.stateMachine;\r\n    const uiState = new UIState();\r\n    const viewModel = new ViewModel();\r\n    viewModel.setMetadata(contextMetadata);\r\n    return [\r\n      { provide: FRAME_ID, useValue: componentId },\r\n      { provide: NAMESPACE, useValue: namespace },\r\n      { provide: FrameContext, useClass: FrameContext },\r\n      { provide: AppContext, useValue: this },\r\n      { provide: BindingData, useValue: bindingData },\r\n      { provide: Form, useValue: form },\r\n      { provide: Repository, useValue: repository },\r\n      { provide: StateMachine, useValue: stateMachine },\r\n      { provide: UIState, useValue: uiState },\r\n      { provide: ViewModel, useValue: viewModel },\r\n      {\r\n        provide: VariableParseService, useValue: new VariableParseService([\r\n          new FrameIdVariableParser(),\r\n          new DataVariableParser(),\r\n          new UIStateVariableParser(),\r\n          new StateMachineVariableParser(),\r\n          new CommandVariableParser()\r\n        ])\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport { AppContext };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-30 17:11:37\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:19:01\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { IDisposable, RunMode } from '../core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { AppContext } from './app_context';\r\n\r\n/**\r\n * FrameContext管理类\r\n */\r\n@Injectable()\r\nclass FrameContextManager implements IDisposable {\r\n\r\n  /**\r\n   * FrameContext字典(兼容老表单)\r\n   */\r\n  private frameContextMap: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * FrameContext集合\r\n   */\r\n  private frameContextSet: Set<FrameContext>;\r\n\r\n  /**\r\n   * AppContext\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(appContext: AppContext) {\r\n    this.frameContextMap = new Map<string, FrameContext>();\r\n    this.frameContextSet = new Set<FrameContext>();\r\n    this.appContext = appContext;\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n\r\n    // 如果存在，先删除\r\n    if (this.frameContextMap.has(frameId) === true) {\r\n      const existedFrameContext = this.frameContextMap.get(frameId);\r\n      this.frameContextMap.delete(frameId);\r\n      this.frameContextSet.delete(existedFrameContext);\r\n    }\r\n    frameContext.index = this.frameContextSet.size;\r\n    this.frameContextMap.set(frameId, frameContext);\r\n    this.frameContextSet.add(frameContext);\r\n  }\r\n\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameContextMap.delete(frameId);\r\n    this.frameContextSet.delete(frameContext);\r\n    // 仅在高速模式下才会在bindingDataManager中注册绑定数据实例\r\n    if (this.appContext.runMode === RunMode.highSpeed) {\r\n      const namespace = frameContext.namespace;\r\n      const repositoryName = frameContext.repository && frameContext.repository.name;\r\n      // 获取ns相同的framecontext，如果已经没有组件上下文了需要销毁bindingData\r\n      const frameContexts = this.getFrameContextsByNamespace(namespace);\r\n      if (!frameContexts || frameContexts.length < 1) {\r\n        this.appContext.bindingDataManager.unRegisteBindingData(repositoryName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取FrameContextMap\r\n   */\r\n  public getFrameContextMap() {\r\n    return this.frameContextMap;\r\n  }\r\n\r\n  /**\r\n   * 获取全部FrameContext\r\n   */\r\n  public getFrameContexts(): FrameContext[] {\r\n    return Array.from(this.frameContextSet);\r\n  }\r\n  /**\r\n   * 获取组合表单某个表单的所有frameContext\r\n   * @param namespace 命名空间\r\n   */\r\n  public getFrameContextsByNamespace(namespace: string) {\r\n    return Array.from(this.frameContextSet).filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace);\r\n  }\r\n  /**\r\n   * 根据id获取FrameContext\r\n   */\r\n  public getFrameContextById(frameId: string): FrameContext {\r\n    const targetFrameContext = this.frameContextMap.get(frameId);\r\n    if (targetFrameContext) {\r\n      return targetFrameContext;\r\n    }\r\n    return this.getFrameContextFromAllAppContexts(frameId);\r\n  }\r\n\r\n  /**\r\n   * Get the root FrameContext instance\r\n   * @return Return the FrameContext instance whose parent is null, and undefined otherwise.\r\n   */\r\n  public getRootFrameContext(): FrameContext {\r\n    const frameContexts = this.getFrameContexts();\r\n    const rootFrameContext = frameContexts.find((frameContext: FrameContext) => {\r\n      return frameContext.parent === null;\r\n    });\r\n    return rootFrameContext;\r\n  }\r\n  public dispose() {\r\n    this.frameContextMap.clear();\r\n    this.frameContextSet.clear();\r\n  }\r\n  /**\r\n   * 遍历所有的AppContext查找指定的\r\n   * @summary\r\n   * 1、老表单中所有的frameId均不重复；\r\n   * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；\r\n   * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。\r\n   */\r\n  private getFrameContextFromAllAppContexts(frameId: string): FrameContext {\r\n    if (!this.appContext.appContextManager) {\r\n      return;\r\n    }\r\n    let targetFrameContext: FrameContext;\r\n    const appContexts = this.appContext.appContextManager.getAppContexts();\r\n    appContexts.some((appContext: AppContext) => {\r\n      const frameContextMap = appContext.frameContextManager.getFrameContextMap();\r\n      if (frameContextMap.has(frameId) === true) {\r\n        targetFrameContext = frameContextMap.get(frameId);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return targetFrameContext;\r\n  }\r\n}\r\n\r\nexport { FrameContextManager };\r\n","import { IEmitable } from './types';\r\nimport { Type } from '@angular/core';\r\n\r\nexport class EventBusProxy {\r\n\r\n  constructor(private eventBus: IEmitable, private hostType: Type<any>, private eventTokenValueProvider: () => any) {\r\n  }\r\n\r\n  post(eventName: string, data: any) {\r\n    this.eventBus.post(this.hostType, this.eventTokenValueProvider(), eventName, data);\r\n  }\r\n\r\n  // on(eventName: string, data: any, handler: Function) {\r\n  //   this.eventBus.on(null, this.eventTokenValueProvider(), eventName, (data) => handler(data), this);\r\n  // }\r\n}\r\n\r\n","export enum EventTypeEnum {\r\n    COMPONENT,\r\n    ROUTE\r\n}\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\nexport const NG_DECLARATION = 'NgDeclaration';\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件描述\r\n */\r\nexport interface NgDeclaration {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 事件参数\r\n     */\r\n    params: any;\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    type ?: EventTypeEnum;\r\n}\r\n\r\n// /**\r\n//  * 参数\r\n//  */\r\n// export interface Params {\r\n//     [key: string]: any;\r\n// }\r\n\r\n/**\r\n * NgDeclarationDecorator\r\n * 公开事件装饰器接口\r\n */\r\nexport interface NgDeclarationDecorator {\r\n    (obj?: NgDeclaration): any;\r\n    new(obj?: NgDeclaration): any;\r\n}\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件属性装饰器工厂\r\n */\r\nexport function NgDeclaration(options: NgDeclaration) {\r\n    const decoratorFactory = makePropDecorator(NG_DECLARATION, (obj: NgDeclaration) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame';\r\nimport { NG_DECLARATION, NgDeclaration } from './declaration_decorator';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\n@Injectable()\r\nclass Declaration {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   *  依据定义列表进行初始化\r\n   * @param frameComponent 表单component实例\r\n   * @param ngDeclarations 事件定义列表信息\r\n   */\r\n  public initWithDeclarations(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }): void {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   * 基于事件元数据构建事件\r\n   * 调整访问级别 便于解析表单进行初始化动作\r\n   * @param context 框架上下文\r\n   */\r\n  public bindDeclaration(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();\r\n    if (!ngPublicEventProps) {\r\n      return;\r\n    }\r\n\r\n    Object.keys(ngPublicEventProps).forEach((propertyName: string) => {\r\n      const ngExportEvent: NgDeclaration = ngPublicEventProps[propertyName];\r\n      Object.defineProperty(this, propertyName, {\r\n        value: (params?: any) => {\r\n          // 获取命令处理上下文\r\n          const targetContext: FrameContext = context;\r\n          // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）\r\n          // if (ngExportEvent.frameId) {\r\n          //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);\r\n          // }\r\n          const root = targetContext.root;\r\n          const emitter = ngExportEvent.token;\r\n          const tokenValue = ngExportEvent.token;\r\n          const eventName = ngExportEvent.name;\r\n          let eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));\r\n          const eventType = ngExportEvent.type;\r\n          const eventBus = targetContext.eventBus || root.eventBus;\r\n          if (!eventBus) {\r\n            return;\r\n          }\r\n          const injector = targetContext.injector || root.injector;\r\n          const variableParseService = injector.get<VariableParseService>(VariableParseService);\r\n\r\n          // 执行参数解析\r\n          setTimeout(() => {\r\n            eventArgs = variableParseService.parse(eventArgs, targetContext, params);\r\n            const eventSender = targetContext.frameComponent;\r\n            let currentContext = targetContext;\r\n            const eventId = new Date().valueOf();\r\n            if (eventType && eventType === EventTypeEnum.ROUTE) {\r\n              // 事件依次向上冒泡\r\n              while (currentContext) {\r\n                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);\r\n                // currentContext = currentContext.parent;\r\n                currentContext = this.getParentContext(currentContext);\r\n              }\r\n            } else {\r\n              eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);\r\n            }\r\n          }, 0);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取事件定义列表\r\n   * @returns  事件定义\r\n   */\r\n  public getNgPublicEvent() {\r\n    return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);\r\n  }\r\n\r\n  /**\r\n   * 获取父Context\r\n   * @param context 当前上下文\r\n   */\r\n  private getParentContext(context: FrameContext): FrameContext {\r\n\r\n    // 首先查找直接上级FrameContext\r\n    if (context.parent) {\r\n      return context.parent;\r\n    }\r\n\r\n    // 到了AppContext边界，返回上级AppContext的根FrameContext\r\n    const parentAppContext = context.appContext.parent;\r\n    if (parentAppContext) {\r\n      return parentAppContext.frameContextManager.getRootFrameContext();\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { Declaration };\r\n","import { makePropDecorator } from '../../metadata/index';\r\n\r\nexport const NG_SUBSCRIPTION = 'NgSubscription';\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅描述\r\n */\r\nexport interface NgSubscription {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 待订阅事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 参数映射\r\n     */\r\n    paramMapCollection?: ParamMap[];\r\n}\r\n\r\nexport class ParamMap {\r\n    from: string;\r\n    frameId: string;\r\n    to: string;\r\n}\r\n\r\n/**\r\n * NgSubscriptionDecorator\r\n * 事件订阅装饰器接口\r\n */\r\nexport interface NgSubscriptionDecorator {\r\n    (obj?: NgSubscription): any;\r\n    new(obj?: NgSubscription): any;\r\n}\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅属性装饰器工厂\r\n */\r\nexport function NgSubscription(options: NgSubscription) {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n\r\nexport function getNgSubscriptionDecoratorFactory() {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory;\r\n}\r\n","export enum EventPipeType {\r\n    Compile,\r\n    Parsing\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame/index';\r\nimport { UIState } from '../../ui-state/index';\r\nimport { NG_SUBSCRIPTION, NgSubscription, ParamMap } from './subscription_decorator';\r\nimport { IDisposable } from '../../core/index';\r\n\r\n@Injectable()\r\nclass Subscription {\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, null);\r\n  }\r\n\r\n\r\n  /**\r\n   *  根据订阅列表进行初始化\r\n   * @param frameComponent \r\n   * @param ngEvents 订阅列表\r\n   * @returns eventPipes\r\n   */\r\n  public initWithSubscriptions(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, ngEvents);\r\n  }\r\n\r\n  /**\r\n   * 更改成为public形式 目的为了解析表单可以进行重新绑定\r\n   * @param frameComponent \r\n   * @param ngEvents \r\n   * @returns \r\n   */\r\n  public bindSubscription(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngEventHandlerProps = ngEvents ? ngEvents : this.getNgEvents(frameComponent);\r\n    if (!ngEventHandlerProps) {\r\n      return;\r\n    }\r\n\r\n    const eventPipes: IDisposable[] = [];\r\n    Object.keys(ngEventHandlerProps).forEach((propertyName: string) => {\r\n      const ngImportEvent: NgSubscription = ngEventHandlerProps[propertyName];\r\n\r\n      // 获取待订阅方法详情，尝试执行订阅\r\n      const targetContext = context;\r\n\r\n      const receiver = frameComponent;\r\n      const emitter = ngImportEvent.token;\r\n      const tokenValue = ngImportEvent.token;\r\n      const eventName = ngImportEvent.name;\r\n\r\n      const paramMapCollection = ngImportEvent.paramMapCollection;\r\n      const eventPipe = targetContext.eventBus.on(emitter, tokenValue, eventName, receiver,\r\n        (eventArgs) => {\r\n          this.subscriptionHandler(eventArgs, paramMapCollection, targetContext);\r\n\r\n          const eventHandler: Function = frameComponent[eventName];\r\n          if (!eventHandler) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            eventHandler(receiver, eventArgs);\r\n          } catch {\r\n            throw new Error('Error invoking method ' + eventName);\r\n          }\r\n        }\r\n      );\r\n\r\n      eventPipes.push(eventPipe);\r\n    });\r\n\r\n    return eventPipes;\r\n  }\r\n\r\n  /**\r\n   * 获取组件订阅列表\r\n   * @param frameComponent 表单component\r\n   * @returns 组件订阅列表信息\r\n   */\r\n  public getNgEvents(frameComponent: FrameComponent) {\r\n    return MetadataUtil.getPropsMetadatasByName(frameComponent.constructor, NG_SUBSCRIPTION);\r\n  }\r\n\r\n  private subscriptionHandler(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n\r\n    if (!param || !paramMapCollection || paramMapCollection.length <= 0 || !currentFrameContext) {\r\n      return;\r\n    }\r\n\r\n    this.paramMap2UiState(param, paramMapCollection, currentFrameContext);\r\n  }\r\n\r\n  /**\r\n   * 设置paramMap后，将param映射到UISTATE上\r\n   */\r\n  private paramMap2UiState(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n    for (let i = 0; i < paramMapCollection.length; i++) {\r\n      const from = paramMapCollection[i].from;\r\n      const frameId = paramMapCollection[i].frameId;\r\n      const to = paramMapCollection[i].to;\r\n\r\n      if (!from || !frameId || !to) {\r\n        continue;\r\n      }\r\n      const destContext: FrameContext = this.getFrameContext(frameId, currentFrameContext);\r\n      if (destContext == null) {\r\n        continue;\r\n      }\r\n      this.setUiStateProperty(to, param[from], destContext.uiState);\r\n      // this.setUiStateProperty(to, param[from], currentFrameContext.uiState);\r\n    }\r\n  }\r\n\r\n  private getFrameContext(targetFrameContextId: string, currentContext: FrameContext): FrameContext {\r\n    let destContext: FrameContext = null;\r\n    try {\r\n      destContext = currentContext.appContext.getFrameContext(targetFrameContextId);\r\n    } catch {\r\n      throw new Error('Error in Getting FrameContext');\r\n    }\r\n    return destContext;\r\n  }\r\n\r\n  private setUiStateProperty(propertyName: string, propertyValue: string, uiState: UIState) {\r\n    try {\r\n      uiState.setPropertyValue(propertyName, propertyValue);\r\n    } catch {\r\n      throw new Error(\"Error in Setting Property Value of the current UISTATE\" + uiState);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { Subscription };\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport { IDisposable } from '../core/index';\r\nimport { EventTypeEnum } from '../event-mechanism';\r\nimport { EventPipeType } from './event-pipe-type';\r\n\r\nexport class EventPipe implements IDisposable {\r\n  private lastEventId = -1;\r\n  /**\r\n   * 事件对象\r\n   */\r\n  private eventSubject: Subject<any>;\r\n\r\n  /**\r\n   * 订阅对象Map\r\n   * key=订阅所在的FrameComponent\r\n   * value：订阅evetnSubject产生的Subscription对象（rxjs的）\r\n   */\r\n  private subscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * \r\n   */\r\n  private onceSubscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * EventPipe类型，编译类型表单检查是否在同一上下文中，解析类型表单不判断\r\n   */\r\n  public eventPipeType = EventPipeType.Compile; \r\n  public get subscriptions(): Map<object, Subscription> {\r\n    return this.subscriptionMap;\r\n  }\r\n  constructor(\r\n    public name: string,\r\n    public tokenValue: string,\r\n    public emitter: string,\r\n    private parentEventPipeList: Array<EventPipe>\r\n  ) {\r\n    this.eventSubject = new Subject<any>();\r\n    this.subscriptionMap = new Map<object, Subscription>();\r\n    this.onceSubscriptionMap = new Map<object, Subscription>();\r\n    if (this.parentEventPipeList) {\r\n      this.parentEventPipeList.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送事件\r\n   */\r\n  post(args: any, sender?: any, eventType?: any, eventId?: number) {\r\n    const eventData = {\r\n      args: args,\r\n      sender: sender,\r\n      eventType,\r\n      eventId\r\n    };\r\n    this.eventSubject.next(eventData);\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  subscribe(eventHandler: (value: any) => void, receiver: object): IDisposable {\r\n\r\n    // 对于弹窗，caller是弹窗中的组件，每次caller不同，但还是会重复注册。\r\n    // 重复订阅检测\r\n    const subscriptionInMap = this.subscriptionMap.get(receiver);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(receiver);\r\n    }\r\n\r\n    const subscription = this.eventSubject.subscribe((eventData: any) => {\r\n      const args = eventData.args;\r\n      const sender = eventData.sender;\r\n      const eventType = eventData.eventType || null;\r\n      const eventId = eventData.eventId || 0;\r\n      if (this.lastEventId >= eventId) {\r\n        return;\r\n      }\r\n      this.lastEventId = eventId;\r\n      // 判断sender和receiver的关系，如果在同一个AppContext或者在在一棵树上，则处理\r\n      // 该判断主要解决SPA模式下，一个页面被打开多次的场景。\r\n      if (!(eventType === EventTypeEnum.ROUTE)) {\r\n        if (this.isInSampeScope(sender, receiver) === false) {\r\n          return;\r\n        }\r\n      }\r\n      eventHandler.call(receiver, args);\r\n    });\r\n\r\n    this.subscriptionMap.set(\r\n      receiver,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  subscribeOnce(eventHandler: (value: any) => void, caller: object): IDisposable {\r\n    const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));\r\n    this.onceSubscriptionMap.set(\r\n      caller,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  unSubscribe(subscriber: object) {\r\n    let subscription = this.subscriptionMap.get(subscriber);\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      subscription = null;\r\n      this.subscriptionMap.delete(subscriber);\r\n    } else {\r\n      subscription = this.onceSubscriptionMap.get(subscriber);\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n        subscription = null;\r\n        this.onceSubscriptionMap.delete(subscriber);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 注销使用once方法注册的订阅。\r\n  unSubscribeForOnce() {\r\n    for (const subscriber of Array.from(this.onceSubscriptionMap.keys())) {\r\n      this.unSubscribe(subscriber);\r\n    }\r\n  }\r\n\r\n  matchEmitterToken(emitter: string, tokenValue: string): boolean {\r\n    if (this.emitter && emitter && this.emitter !== emitter) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  examByTargetToken(target: string, tokenValue: string): boolean {\r\n    if (this.emitter !== target) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  dispose(subscriber: object): void {\r\n    this.unSubscribe(subscriber);\r\n    if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {\r\n      const location = this.parentEventPipeList.findIndex(item => item === this);\r\n      if (location !== -1) {\r\n        this.parentEventPipeList.splice(location, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据caller进行注销\r\n   */\r\n  disposeByCaller(caller: any) {\r\n    const subscriptionInMap = this.subscriptionMap.get(caller);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(caller);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否在同一个上下文中\r\n   * @todo\r\n   * 1、强识别了sender和receiver的结构来判断，不合理；\r\n   * 2、应该声明一个接口来约束结构。\r\n   */\r\n  private isInSampeScope(sender: any, receiver: any): boolean {\r\n    // 用来区分编译类型的表单，还是解析类型的表单\r\n    if (this.eventPipeType === EventPipeType.Parsing) {\r\n      return true;\r\n    }\r\n\r\n    // 兼容老代码，sender不存在时，不进行检测\r\n    if (!sender) {\r\n      return true;\r\n    }\r\n\r\n    // 异常处理场景\r\n    if (sender === receiver) {\r\n      return true;\r\n    }\r\n\r\n    // 判断是否是FrameContext\r\n    if (!sender.context || !sender.context.appContext ||\r\n      !receiver.context || !receiver.context.appContext) {\r\n      return false;\r\n    }\r\n\r\n    const senderAppContext = sender.context.appContext;\r\n    const receiverAppContext = receiver.context.appContext;\r\n\r\n    // 情况1：现状\r\n    // 对于老表单，在模块上注入了一个AppContext；\r\n    // 组合表单中主表单的root-component（被组合的表单的root-componetn上没有注入）上注入了AppContext\r\n    // SPA模式下，如法通过Root AppContext区分，是不是同一个菜单内的事件；\r\n    // 只能判断根组件上的AppContext来判断\r\n    // 判断根AppContext是否一致\r\n    if (senderAppContext === receiverAppContext) {\r\n      return true;\r\n    }\r\n\r\n    // 情况2：注入改造后\r\n    // 如果以后注入关系改造了，模块上的AppContext移除掉\r\n    // 组合表单中每个root-component都拥有一个AppContext;\r\n    // 组合表单中主表单的root-component的AppContext为Root AppContext\r\n    // if (senderAppContext.root === receiverAppContext.root) {\r\n    //   return true;\r\n    // }\r\n\r\n    // 情况3：注入改造后老表单兼容\r\n    // 如果以后注入关系改造了，但产品部没有重新编译;\r\n    // 和情况2类似，不同的是模块上还遗留了一个AppContext；\r\n    // 此时Root Appcontext还是模块上的，如何来判断？\r\n    // 1、考虑通过sender的injector一直网上找，找到模块之前的那个组件injector，从其中拿AppContext来判断；\r\n    // 2、找一个全部重新编译的时机再改造。\r\n\r\n    if ((senderAppContext.useIsoluteEventBus && senderAppContext.isoluteEventBus) ||\r\n      (receiverAppContext.useIsoluteEventBus && receiverAppContext.isoluteEventBus)) {\r\n      // 如果存在独立加载js  那么\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EventBusProxy } from './event-bus-proxy';\r\nimport { IEmitable } from './types';\r\nimport { EventPipe } from './event-pipe';\r\nimport { IDisposable } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EventBus implements IEmitable {\r\n  private proxyMap: Map<string, EventBusProxy>;\r\n  private eventMap: Map<string, Array<EventPipe>>;\r\n\r\n  constructor() {\r\n    this.proxyMap = new Map<string, EventBusProxy>();\r\n    this.eventMap = new Map<string, Array<EventPipe>>();\r\n  }\r\n\r\n  getProxy(ownerType: any, eventTokenValueProvider: () => any): EventBusProxy {\r\n    const ownerName = ownerType.constructor.typeName || ownerType.constructor.name;\r\n    if (!this.proxyMap.has(ownerName)) {\r\n      this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));\r\n    }\r\n    return this.proxyMap.get(ownerName);\r\n  }\r\n\r\n  /**\r\n   * 发送事件，通知订阅者接收消息。\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  post(emitterType: any | string, tokenValue: string, eventName: string, eventArgs: any, sender?: any, eventType?: any, eventId?: number): void {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return;\r\n    }\r\n\r\n    if (!emitterType) {\r\n      console.error('post方法的参数emitterType不能为空。');\r\n      return;\r\n    }\r\n    let emitter: string;\r\n    if (emitterType instanceof Type) {\r\n      emitter = emitterType.typeName || emitterType.name;\r\n    } else {\r\n      emitter = emitterType;\r\n    }\r\n    if (typeof eventId === 'undefined') {\r\n      eventId = new Date().valueOf();\r\n    }\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(emitter, tokenValue)) {\r\n        eventPipe.post(eventArgs, sender, eventType, eventId);\r\n        eventPipe.unSubscribeForOnce();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  on(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 注销监听\r\n   * @param target \r\n   * @param tokenValue \r\n   * @param eventName \r\n   * @param caller \r\n   */\r\n  public off(target: string, tokenValue: string, eventName: string, caller: Object) {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (eventPipeList) {\r\n      const index = eventPipeList.findIndex((eventPipe: EventPipe) => {\r\n        if (eventPipe.subscriptions.get(caller)) {\r\n          return eventPipe.name === eventName && eventPipe.tokenValue === tokenValue && eventPipe.emitter === target;\r\n        }\r\n        return false;\r\n      });\r\n      if (index !== -1) {\r\n        eventPipeList.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 订阅一次。接收到一次消息之后自动取消订阅\r\n   */\r\n  once(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 发送一个请求事件，获取监听者的响应并处理\r\n   */\r\n  requestFor(target: string, tokenValue: string, requestName: string, requestValue: any, success: (any) => any, fail?: (string) => any) {\r\n    const eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);\r\n    if (eventPipe) {\r\n      this.once(target, tokenValue, requestName, this, (response) => {\r\n        if (response.status === 'success') {\r\n          success(response.data);\r\n        } else {\r\n          if (fail) {\r\n            fail('No target responser listening');\r\n          }\r\n        }\r\n      });\r\n      eventPipe.post({ target: target, token: tokenValue, data: requestValue });\r\n    } else {\r\n      if (fail) {\r\n        fail('No target responser listening.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听一个请求事件，给出响应\r\n   */\r\n  responseOn(responseSubject: string, requestName: string, callback: (any) => any) {\r\n    this.on('RequestSubject', null, requestName, this, (requestObj) => {\r\n      const response = { status: 'fail', data: null };\r\n      if (responseSubject === requestObj.target) {\r\n        response.data = callback(requestObj.data);\r\n        response.status = 'success';\r\n      }\r\n      this.post(requestObj.target, requestObj.token, requestName, response);\r\n    });\r\n  }\r\n\r\n  private getEventPipe(eventName: string, target: string, tokenValue: string) {\r\n    let eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      eventPipeList = new Array<EventPipe>();\r\n      this.eventMap.set(eventName, eventPipeList);\r\n    }\r\n\r\n    // 1、一个事件不允许多个订阅\r\n    // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    // if (!eventPipe) {\r\n    //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n    // }\r\n\r\n    // 2、一个事件允许多个订阅\r\n    const eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n\r\n    return eventPipe;\r\n  }\r\n\r\n  private findExistEventPipe(eventName: string, target: string, tokenValue: string): EventPipe {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return null;\r\n    }\r\n    // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(target, tokenValue)) {\r\n        return eventPipe;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class EventCache {\r\n  private static tokens = new Map();\r\n\r\n  public static setToken(key: string, value: any) {\r\n    EventCache.tokens.set(key, value);\r\n  }\r\n\r\n  public static getToken(key: string) {\r\n    return EventCache.tokens.get(key);\r\n  }\r\n}\r\n\r\nclass RequestSubject { }\r\nclass DataClass { }\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IExceptionHandler } from './types';\r\nexport const EXCEPTION_HANDLER = new InjectionToken<IExceptionHandler>('@farris/devkit ExceptionHandler');","import { Observable } from 'rxjs';\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace Expression {\r\n  /**\r\n   * 表达式对象\r\n   */\r\n  export interface ExpressionObject {\r\n    /**\r\n     * 表达式唯一标识\r\n     */\r\n    id?: string;\r\n    /**\r\n     * 表达式绑定的路径\r\n     */\r\n    path: string;\r\n    /**\r\n     * 表达式绑定类型State|Entity\r\n     */\r\n    bindingType: ExpressionBindingType;\r\n    /**\r\n     * 表达式类型\r\n     */\r\n    type: ExpressionType;\r\n    /**\r\n     * 表达式\r\n     */\r\n    expression: string;\r\n    /**\r\n     * 表达式依赖\r\n     */\r\n    deps: Array<string>;\r\n    /**\r\n     * 表达式namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 表达式计算结果\r\n     */\r\n    result?: any;\r\n    /**\r\n     * 结果作用路径\r\n     */\r\n    effectPaths?: string[],\r\n    /**\r\n     * 提示信息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 提示消息类型\r\n     */\r\n    messageType?: 'error' | 'info' | 'warning';\r\n    /**\r\n     * \r\n     */\r\n    factory?: any;\r\n  }\r\n\r\n  /**\r\n   * 自定义上下文 \r\n   */\r\n  export interface ICustomContext {\r\n    currentRows?: Array<ICurrentRow>,\r\n    contexts?: { [prop: string]: any },\r\n    patch?: { [prop: string]: any }\r\n  }\r\n\r\n  /**\r\n   * 当前行描述\r\n   */\r\n  export interface ICurrentRow {\r\n    bindingPath: string;\r\n    primaryValue: string;\r\n  }\r\n\r\n  /**\r\n   * 表达式赋值器\r\n   * @deprecated deprecated，never use\r\n   */\r\n  export interface Assigner {\r\n    assign(expressionObject: ExpressionObject);\r\n  }\r\n  /**\r\n   * 表达式执行器\r\n   */\r\n  export interface IExecutor {\r\n    compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any;\r\n  }\r\n  /**\r\n   * 表达式绑定字段类型（表达式绑定到实体、UIState?）\r\n   */\r\n  export enum ExpressionBindingType {\r\n    State = 'State',\r\n    Field = 'Field'\r\n  }\r\n  /**\r\n   * 表达式类型\r\n   */\r\n  export enum ExpressionType {\r\n    /**\r\n     * 必填表达式\r\n     */\r\n    Required = 'require',\r\n    /**\r\n     * 只读表达式\r\n     */\r\n    Readonly = 'readonly',\r\n    /**\r\n     * 计算表达式\r\n     */\r\n    Compute = 'compute',\r\n    /**\r\n     * 依赖表达式\r\n     */\r\n    Dependency = 'dependency',\r\n    /**\r\n     * 是否可见\r\n     */\r\n    Visible = 'visible',\r\n    /**\r\n     * 关联表达式\r\n     */\r\n    Relative = 'relative',\r\n    /**\r\n     * 校验表达式\r\n     */\r\n    Validate = 'validate',\r\n    /**\r\n     * 帮助前\r\n     */\r\n    DataPicking = 'dataPicking'\r\n  }\r\n  /**\r\n   * 事件类型\r\n   */\r\n  export enum EventType {\r\n    ValueChanged = 'VALUE_CHANGED',\r\n    SelectionChanged = 'SELECTION_CHANGED',\r\n    Load = 'Load',\r\n    Append = 'Append',\r\n    Remove = 'Remove',\r\n    Update = 'Update',\r\n  }\r\n  export enum EventSource {\r\n    Field = 'Field',\r\n    State = 'State',\r\n    BindingData = 'BindingData',\r\n    Repository = 'Repository'\r\n  }\r\n  /**\r\n   * 事件参数\r\n   */\r\n  export interface EventArgs {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 变更路径\r\n     */\r\n    path: Array<string>;\r\n    /**\r\n     * 变更类型\r\n     */\r\n    type?: EventType;\r\n    /**\r\n     * 变更来源\r\n     */\r\n    source: EventSource;\r\n    /**\r\n     * 变更后的值\r\n     */\r\n    value?: any;\r\n    /**\r\n     * 上下文\r\n     */\r\n    context?: any;\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 事件数据上下文\r\n     */\r\n    entity?: any;\r\n    id?: any;\r\n    /**\r\n     * 分层加载场景\r\n     */\r\n    isTreeNodeLoadScene?: boolean;\r\n  }\r\n  /**\r\n   * 监听器\r\n   */\r\n  export interface Listener {\r\n    onEvent: Observable<EventArgs>;\r\n  }\r\n  /**\r\n   * 作用器\r\n   */\r\n  export interface Effector {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 作用\r\n     * @param expressionObject \r\n     */\r\n    effect(path: string, value: any, options: EffectOptions);\r\n  }\r\n  export interface EffectOptions {\r\n    /**\r\n     * 指定行\r\n     */\r\n    path?: string[];\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 消息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 消息提示类型\r\n     */\r\n    messageType?: MessageType | 'error' | 'info' | 'warning';\r\n    /**\r\n     * 表达式id\r\n     */\r\n    expressionId?: string;\r\n  }\r\n  export enum MessageType {\r\n    error = 'error',\r\n    info = 'info',\r\n    warning = 'warning'\r\n  }\r\n  /**\r\n   * 事件处理器\r\n   */\r\n  export interface IEventHandler {\r\n    handleEvent(event: EventArgs, expressionObjects: Expression.ExpressionObject[]);\r\n    filter(event: Expression.EventArgs);\r\n    perform(expressionObject: Expression.ExpressionObject, context: any);\r\n    effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;\r\n  }\r\n  export enum EffectPath {\r\n    currentRow = 0\r\n  }\r\n  /**\r\n   * 表达式校验结果\r\n   */\r\n  export interface IValidateResult {\r\n    expressionId: string;\r\n    path: string[];\r\n    result: any;\r\n  }\r\n  /**\r\n   * 表达式计算上下文构造器选项\r\n   */\r\n  export interface IBuilderOptions {\r\n\r\n  }\r\n  export const MESSAGE = {\r\n    'zh-CHS': {\r\n      require: `请输入'$property'`,\r\n      validate: `'$property'校验不通过`,\r\n      dataPicking: '帮助前表达式校验不通过'\r\n    },\r\n    en: {\r\n      require: `Please input '$property'`,\r\n      validate: `'$property' calibration failed`,\r\n      dataPicking: 'Failed to verify the expression before help'\r\n    },\r\n    'zh-CHT': {\r\n      require: `請輸入'$property'`,\r\n      validate: `'$property'校驗不通過`,\r\n      dataPicking: '幫助前表達式校驗不通過'\r\n    }\r\n  };\r\n  export const DEPENDENCY_SPLITER = '/';\r\n}","import { InjectionToken } from \"@angular/core\";\r\nimport { UserSettings } from \"./types\";\r\n\r\nexport const UserSettingsToken = new InjectionToken<UserSettings>('@farris/devkit UserSettingsToken');","import { InjectionToken } from \"@angular/core\";\r\nimport { IFormExpressionManifestService, IFormManifestService } from \"./types\";\r\n\r\nexport const FORM_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormManifestService>('@farris/form_manifest_service');\r\nexport const FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormExpressionManifestService>('@farris/form_expression_manifest_service');\r\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError, switchMap } from \"rxjs/operators\";\r\nimport { Expression } from './types';\r\nimport { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, IFormExpressionManifestService } from \"../manifest/index\";\r\nimport { Translate, TranslateToken } from \"../i18n/index\";\r\nimport { Repository } from \"../repository/index\";\r\n\r\n@Injectable()\r\nexport class ExpressionRegistry {\r\n  private _expressions: Expression.ExpressionObject[] = null;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN) private formExpressionManifestService: IFormExpressionManifestService,\r\n    @Optional() @Inject(TranslateToken) private translate: Translate\r\n  ) {\r\n  }\r\n  /**\r\n   * 加载表达式文件\r\n   */\r\n  public load(): Observable<Expression.ExpressionObject[]> {\r\n    return this.formExpressionManifestService.load().pipe(\r\n      switchMap((describe: Array<any>) => {\r\n        const expressions: Array<Expression.ExpressionObject> = [];\r\n        const exprs = Array.from(describe);\r\n        exprs.forEach((expr: any) => {\r\n          expr.expressions.forEach((expression: any) => {\r\n            const expressionObject: Expression.ExpressionObject = {\r\n              id: expression.id,\r\n              ns: expr.ns,\r\n              path: expr.path,\r\n              bindingType: expr.type,\r\n              type: expression.type,\r\n              expression: expression.value || expression.expr || '',\r\n              message: expression.message || null,\r\n              messageType: expression.messageType || null,\r\n              deps: []\r\n            };\r\n            if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate || expression.type === Expression.ExpressionType.DataPicking)) {\r\n              if (!expression.message) {\r\n                expressionObject.message = this.getExpressionMessage(expression.type);\r\n              }\r\n              if (!expression.messageType) {\r\n                expressionObject.messageType = 'error';\r\n              }\r\n            }\r\n            if (expressionObject.message) {\r\n              this.transform(expressionObject);\r\n            }\r\n            expressions.push(expressionObject);\r\n          });\r\n        });\r\n        this._expressions = expressions;\r\n        this.cleanSpecialCharacters();\r\n        return of(expressions);\r\n      }),\r\n      catchError((e) => {\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 获取所有表达式\r\n   */\r\n  public get expressions(): Observable<Expression.ExpressionObject[]> {\r\n    if (this._expressions) {\r\n      return of(this._expressions);\r\n    }\r\n    return this.load();\r\n  }\r\n  /**\r\n   * 根据表达式id获取对应的表达式对象\r\n   * @param id 表达式id\r\n   * @returns \r\n   */\r\n  public getExpressionById(id: string): Expression.ExpressionObject {\r\n    if (!this._expressions || this._expressions.length < 1) {\r\n      return null;\r\n    }\r\n    return this._expressions.find((expressionObject: Expression.ExpressionObject) => expressionObject.id === id);\r\n  }\r\n  private getExpressionMessage(expressionType: Expression.ExpressionType, defaultValue?: string) {\r\n    if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required || expressionType === Expression.ExpressionType.DataPicking)) {\r\n      return null;\r\n    }\r\n    if (!this.translate) {\r\n      return defaultValue;\r\n    }\r\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\r\n    return Expression.MESSAGE[currentLanguage][expressionType];\r\n  }\r\n  private transform(expressionObject: Expression.ExpressionObject) {\r\n    if (!this.translate) {\r\n      return;\r\n    }\r\n    if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {\r\n      expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);\r\n    }\r\n  }\r\n  private cleanSpecialCharacters() {\r\n    if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {\r\n      return;\r\n    }\r\n    const repository: Repository<any> = this.injector.get(Repository, null);\r\n    if (!repository) {\r\n      return;\r\n    }\r\n    const entityTypeInfo = repository.entityTypeInfo;\r\n    const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n    this._expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expr = expressionObject.expression;\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            return;\r\n          }\r\n          // 去数组\r\n          if (/\\[\\d\\]/g.test(item)) {\r\n            const replacer = item.replace(/\\[\\d\\]/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n          // 去星号\r\n          if (/\\*/g.test(item)) {\r\n            const replacer = item.replace(/\\*/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  private replaceAll(originalValue: string, search: string, replacer: string) {\r\n    return originalValue.split(search).join(replacer);\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype Listener = Expression.Listener;\r\n\r\nexport const LISTENER_TOKEN = new InjectionToken<Listener>('@Farris listener');","import { Observable, Subject } from \"rxjs\";\r\nimport { Change } from \"../binding-data/index\";\r\nimport { Modification } from \"../changeset/index\";\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\nimport { Expression } from '../expression/index';\r\nimport { UIStateObservableParam } from \"../ui-state/index\";\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 变更监听器\r\n */\r\nexport abstract class ChangeListener implements Listener {\r\n  protected subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  abstract buildEventPath(change: Change | Modification |UIStateObservableParam): string[];\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo \r\n   * @param results \r\n   * @param paths \r\n   */\r\n  public findEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        paths.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.findEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          results.push(paths);\r\n        }\r\n      });\r\n    } else if (paths && paths.length > 0) {\r\n      results.push(paths);\r\n    }\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from \"@farris/expression-engine\";\r\nimport { Expression } from '../expression/index';\r\n@Injectable()\r\nexport class ExpressionExecutor implements Expression.IExecutor {\r\n  /**\r\n   * 编译执行\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    if (!expressionObject.factory) {\r\n      const expression = new ExpressionEngineExpression(expressionObject.expression, expressionContext);\r\n      expressionObject.factory = expression.compile();\r\n    }\r\n    const expression: ExpressionEngineExpression = expressionObject.factory;\r\n    return expression.eval(expressionContext);\r\n  }\r\n  /**\r\n   * 解析\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public eval(expression: string, context?: { [prop: string]: any }) {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    const expressionEngine = new ExpressionEngine(expressionContext);\r\n    return expressionEngine.eval(expression);\r\n  }\r\n  /**\r\n   * 构造表达式上下文\r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildContext(context: { [prop: string]: any }): ExpressionContext {\r\n    const expressionContext = new ExpressionContext();\r\n    if (context && Object.keys(context).length > 0) {\r\n      Object.keys(context).forEach((key: string) => {\r\n        expressionContext.set(key, context[key]);\r\n      });\r\n    }\r\n    return expressionContext;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\n\r\n/**\r\n * 表达式计算结果\r\n */\r\n@Injectable()\r\nexport class ExpressionResult {\r\n  constructor(private injector: Injector) {\r\n  }\r\n  /**\r\n   * 更新表达式的值\r\n   * @param expressionId 表达式id\r\n   * @param result \r\n   */\r\n  public set(expressionId: string, result: any) {\r\n    this[expressionId] = result;\r\n  }\r\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { BindingData, BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EMPTY, Observable, of } from \"rxjs\";\r\nimport { AppContext } from \"../app/index\";\r\nimport { FrameContext } from \"../frame/index\";\r\nimport { Repository } from \"../repository/index\";\r\nimport { ENTITY_TEMPLATE, ResolveService } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { ExpressionExecutor } from \"./expression_executor\";\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { Expression } from './types';\r\nimport { ViewModel } from \"../view-model/index\";\r\nimport { ExpressionResult } from \"./expression_result\";\r\nimport { IMessageService, INotifyService, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from \"../core/index\";\r\nimport { Entity, EntityList } from \"../entity\";\r\nimport { Translate, TranslateToken } from \"../i18n\";\r\n\r\n@Injectable()\r\nexport class ExpressionManager {\r\n  private frameContext: FrameContext = null;\r\n  constructor(private injector: Injector, private resolveService: ResolveService, private expressionExecutor: ExpressionExecutor, private expressionRegistry: ExpressionRegistry, private expressionResult: ExpressionResult, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n  }\r\n  /**\r\n   * 根据表达式id进行计算\r\n   * @param expressionId 表达式id\r\n   * @param viewModel viewModel\r\n   * @param rowData rowData\r\n   * @returns \r\n   */\r\n  public eval(expressionId: string, viewModel?: ViewModel, rowData?: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const customContext: Expression.ICustomContext = {};\r\n      const bindingPath = viewModel && viewModel.bindingPath || null;\r\n      if (bindingPath && rowData) {\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n        let primaryKey = 'id';\r\n        if (bindingList) {\r\n          primaryKey = bindingList.primaryKey;\r\n        }\r\n        const primaryValue = rowData[primaryKey] || bindingList.currentId;\r\n        if (primaryValue) {\r\n          customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue }];\r\n        }\r\n      }\r\n      let result = this.execute(expressionObject.expression, customContext);\r\n      if (expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        result = result === true ? true : false;\r\n      }\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n      // console.warn('ExpressionManager 执行失败，未获取到表达式!');\r\n    }\r\n    return undefined;\r\n  }\r\n  public validate(expressionId: string, options: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const patch = options && options.patch || null;\r\n      const customContext: Expression.ICustomContext = {};\r\n      if (patch) {\r\n        customContext.patch = patch;\r\n      }\r\n      const currentRow = options.currentRow || null;\r\n      const currentRows = options.currentRows || [];\r\n      if (currentRow) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        customContext.currentRows.push(currentRow);\r\n      }\r\n      if (currentRows && currentRows.length > 0) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        Array.prototype.push.apply(customContext.currentRows, currentRows)\r\n      }\r\n      const result = this.execute(expressionObject.expression, customContext);\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n    }\r\n    return undefined;\r\n  }\r\n  /**\r\n   * 帮助前封装\r\n   * @param event \r\n   */\r\n  public onDataPicking(configs: { expressionId: string }) {\r\n    const expressionId = configs && configs.expressionId || null;\r\n    if (!expressionId) {\r\n      return of(true);\r\n    }\r\n    const result = this.eval(expressionId);\r\n    if (!result) {\r\n      const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n      if (!expressionObject) {\r\n        return of(true);\r\n      }\r\n      const messageType = expressionObject.messageType || Expression.MessageType.warning;\r\n      const message = expressionObject.message;\r\n      if (message) {\r\n        this.notifyService[messageType](message, { hideTitle: true });\r\n      }\r\n      return EMPTY;\r\n    }\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private execute(expression: string, customContext?: Expression.ICustomContext): any {\r\n    const deps = this.resolveService.resolve(expression);\r\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\r\n    const entityContext = this.buildEntityContext(deps, groupDependencies, customContext);\r\n    const stateContext = this.buildStateContext();\r\n    const data = customContext && customContext.contexts || null;\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    const context = {\r\n      [this.entityOriginalNodeCode]: entityContext,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.frameContext.bindingData,\r\n      repository: this.frameContext.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS',\r\n      ...data\r\n    }\r\n    if (!entityContext) {\r\n      return undefined;\r\n    }\r\n    return this.expressionExecutor.eval(expression, context);\r\n  }\r\n  /**\r\n   * 执行表达式（返回可观察对象）\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private executeAsync(expression: string, customContext?: Expression.ICustomContext): Observable<any> {\r\n    const result = this.execute(expression, customContext);\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 构造实体上下文\r\n   * @param deps \r\n   * @param groupDependencies \r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: Expression.ICustomContext) {\r\n\r\n    const currentRows = context && context.currentRows || null;\r\n    const index = deps.findIndex((dep: string) => {\r\n      const isEntityDependency = this.isEntityDependency(dep);\r\n      // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系\r\n      // 表达式依赖了实体\r\n      if (isEntityDependency) {\r\n        const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\r\n        // 是聚合依赖\r\n        if (isGroupDependency) {\r\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\r\n          if (dependencyLength === 1) {\r\n            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。\r\n            return true;\r\n          } else {\r\n            // 聚合了子表字段，只需要传递当前实体\r\n            return false;\r\n          }\r\n        } else {\r\n          // 当前依赖不是聚合，只需要传递当前实体\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    })\r\n    const isGroupdMainEntity = index !== -1;\r\n\r\n    const options = {};\r\n    if (currentRows && currentRows.length > 0) {\r\n      currentRows.forEach((currentRow: Expression.ICurrentRow) => {\r\n        options[currentRow.bindingPath || '/'] = currentRow.primaryValue;\r\n      });\r\n    }\r\n    const entity = this.getEntity(options);\r\n    const patch = context && context.patch || null;\r\n    if (!entity) {\r\n      return {};\r\n    }\r\n    if (patch && Object.keys(patch).length > 0) {\r\n      Object.keys(patch).forEach((key: string) => {\r\n        const paths = key.split('/').filter(p => p);\r\n        const value = patch[key];\r\n        this.setValue(entity, paths, value);\r\n      });\r\n    }\r\n    if (isGroupdMainEntity) {\r\n      const collection = this.frameContext.repository.entityCollection.toJSON();\r\n      entity['__type__'] = 'List';\r\n      entity['__items__'] = collection;\r\n    }\r\n    return entity;\r\n  }\r\n  private setValue(target: any, paths: string[], value: any) {\r\n    if (paths.length === 1) {\r\n      target[paths[0]] = value;\r\n    } else {\r\n      const propertyName = paths.pop();\r\n      const result = paths.reduce((object: any, path: string) => {\r\n        return object && object[path];\r\n      }, target);\r\n      result[propertyName] = value;\r\n    }\r\n  }\r\n  /**\r\n   * 是否为实体依赖\r\n   * @param dep \r\n   * @returns \r\n   */\r\n  private isEntityDependency(dep: string) {\r\n    return dep.startsWith(ENTITY_TEMPLATE);\r\n  }\r\n  /**\r\n   * 获取实体\r\n   * @param options \r\n   * @returns \r\n   */\r\n  public getEntity(options: { [bindingPath: string]: string }) {\r\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\r\n    const bindingData = this.frameContext.bindingData;\r\n    const childrenEntityPaths = [];\r\n\r\n    let entity = null;\r\n    if (options['/']) {\r\n      // 修正主表\r\n      entity = this.frameContext.bindingData.list.findById(options['/']);\r\n      if (entity) {\r\n        entity = entity.toJSON();\r\n      }\r\n    } else {\r\n      entity = this.frameContext.bindingData.list.currentItem.toJSON();\r\n    }\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n    entity['__type__'] = 'Entity';\r\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n      return entity;\r\n    }\r\n    // 找到所有子表\r\n    childrenEntityPaths.forEach((paths: string[]) => {\r\n      let row = null;\r\n      if (options && options[paths.join('/')]) {\r\n        const parentPaths = paths.slice(0, 1);\r\n        if (paths.length == 2 && options[parentPaths.join('/')]) {\r\n          const parentRow = options[parentPaths.join('/')];\r\n          // 从从表\r\n          // 需要切换上级表\r\n          row = this.getPropertyValue(entity, parentPaths.concat([parentRow, paths[1], options[paths.join('/')]]));\r\n        } else {\r\n          // 不应该使用bindingData，这样就默认使用了当前行\r\n          const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n          const currentRowId = options[paths.join('/')];\r\n          let currentRow: BindingObject = null;\r\n          if (currentRowId !== bindingList.currentId) {\r\n            currentRow = bindingList.findById(currentRowId);\r\n          } else {\r\n            currentRow = bindingList.currentItem;\r\n          }\r\n          if (currentRow && currentRow.primaryKeyValue) {\r\n            row = currentRow.toJSON();\r\n          }\r\n        }\r\n      } else {\r\n        // 如果上级表已经切换了当前行，那么下级表也应该切换\r\n        const parentTableCurrentRowChanged = options && !!Object.keys(options).find(path => {\r\n          const fullPath = path.split('/').join('/');\r\n          return paths.join('/').startsWith(fullPath);\r\n        }) || false;\r\n        if (parentTableCurrentRowChanged) {\r\n          const primaryValue = options && options['/'] || bindingData.list.currentId;\r\n          const entity = this.frameContext.repository.entityCollection.getEntityById(primaryValue);\r\n          const fullPaths = [];\r\n          const data = paths.reduce((object, path) => {\r\n            fullPaths.push(path);\r\n            const item = object && object[path] as EntityList<Entity>;\r\n            if (item) {\r\n              const currentRowId = options && options[fullPaths.join('/')] || item.items[0] && item.items[0].primaryValue || null;\r\n              if (currentRowId) {\r\n                const currentRow = item.get(currentRowId);\r\n                return currentRow || null;\r\n              }\r\n            }\r\n            return null;\r\n          }, entity) as Entity;\r\n          if (data) {\r\n            row = data.toJSON();\r\n          } else {\r\n            row = {};\r\n          }\r\n        } else {\r\n          row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\r\n        }\r\n      }\r\n      const propertyName = paths.pop();\r\n      let parent = paths.reduce((object: any, path: string) => {\r\n        return object && object[path] || null;\r\n      }, entity);\r\n      const list = parent[propertyName];\r\n      const node: any = { __items__: [], ...row && row || {}, __type__: 'List' };\r\n      node.length = () => node.__items__.length;\r\n      if (list && Array.isArray(list)) {\r\n        node.__items__ = [].concat(list);\r\n      }\r\n      parent[propertyName] = node;\r\n    });\r\n    return entity;\r\n  }\r\n  private getPropertyValue(entity: any, paths: string[]) {\r\n    return paths.reduce((object: any, path: string) => {\r\n      if (object['__type__'] === 'List') {\r\n        return object['__items__'].find(item => item.id === path);\r\n      } else if (Array.isArray(object)) {\r\n        return object.find(item => item.id === path);\r\n      } else {\r\n        return object && object[path];\r\n      }\r\n    }, entity);\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    const repository = this.injector.get(Repository);\r\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext() {\r\n    const result = {};\r\n    if (this.frameContext) {\r\n      const rootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { ExpressionManager } from \"./expression_manager\";;\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { ExpressionResult } from \"./expression_result\"\r\nimport { Expression } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ExpressionResultFactory {\r\n  constructor(private injector: Injector, private expressionRegistry: ExpressionRegistry, private expressionManager: ExpressionManager, private expressionResult: ExpressionResult) {\r\n    this.registeEvent();\r\n  }\r\n  private registeEvent() {\r\n    this.expressionRegistry.expressions.subscribe((expressionObjects: Expression.ExpressionObject[]) => {\r\n      // 加载完表达式之后做一次计算\r\n      expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.deps && expressionObject.deps.length > 0) {\r\n          return;\r\n        }\r\n        const result = this.expressionManager.eval(expressionObject.id);\r\n        this.expressionResult[expressionObject.id] = result;\r\n      });\r\n    });\r\n  }\r\n}","import { Injectable, Injector, Inject } from '@angular/core';\r\n// import { FRAME_ID, NAMESPACE } from '../frame/index';\r\nimport { UIState, UIStateObservableParam } from '../ui-state/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { FRAME_ID, NAMESPACE } from '../frame/tokens';\r\ntype EventArgs = Expression.EventArgs;\r\n/**\r\n * 监听UIState变更\r\n */\r\n@Injectable()\r\nclass UIStateChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace, @Inject(FRAME_ID) private frameId: string, private bindingData: BindingData) {\r\n    super();\r\n    this.registerEvent();\r\n  }\r\n  public buildEventPath(change: UIStateObservableParam): string[] {\r\n    return null;\r\n  }\r\n  private registerEvent() {\r\n    if (this.uiState && this.uiState.changes) {\r\n      this.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          path: [change.field],\r\n          type: Expression.EventType.ValueChanged,\r\n          value: change.value,\r\n          source: Expression.EventSource.State,\r\n          frameId: this.frameId\r\n        };\r\n        // console.log(\"UIStateChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { UIStateChangeListener };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from './types';\r\n\r\nexport const ASSIGNER_TOKEN = new InjectionToken<Expression.Assigner>('@Farris expression assigner');\r\nexport const EVENT_HANDLER_TOKEN = new InjectionToken<Expression.IEventHandler>('@Farris_event_handler');","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Entity } from '../entity';\r\nimport { Repository } from '../repository/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n\r\n@Injectable()\r\nclass RepositoryChangeListener extends ChangeListener {\r\n  private bindingData: BindingData;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  private registerEvent() {\r\n    if (this.repository && this.repository.changes) {\r\n      this.repository.changes.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Field,\r\n        };\r\n        // console.log(\"RepositoryChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n    // repository只监听值变化事件\r\n    if (this.repository && this.repository.entityCollectionChange) {\r\n      this.repository.entityCollectionChange.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Repository,\r\n        };\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 构建事件路径参数\r\n   * @param event event\r\n   * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]\r\n   * @returns \r\n   */\r\n  public buildEventPath(event: Modification): string[] {\r\n    const paths = event.path;\r\n    let result = [];\r\n    if (!paths || paths.length < 1) {\r\n      // 主表新增时path为空\r\n      return result;\r\n    }\r\n    // 过滤掉udt的冒号，关联字段的id\r\n    result = paths.filter((path: string, index: number) => {\r\n      if (index % 2 === 0 && path.includes(':')) {\r\n        if (path === ':') {\r\n          return false;\r\n        }\r\n        const primaryKey = path.split(':')[0];\r\n        if (primaryKey !== this.repository.primaryKey) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    // 移除路径中的id字符串\r\n    // result = paths.map((path: string, index: number) => {\r\n    //   if (path.includes(':') && index % 2 === 0) {\r\n    //     return path.split(':')[1];\r\n    //   }\r\n    //   return path;\r\n    // });\r\n    // 此时result中不应该有冒号\r\n    return result;\r\n  }\r\n  private convertEventType(change: Modification): Expression.EventType {\r\n    let eventType = null;\r\n    if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {\r\n      // eventType = Expression.EventType.Append;\r\n      // 不处理新增\r\n    } else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {\r\n      // eventType = Expression.EventType.Remove;\r\n    } else if (change.type === ModifyType.Load) {\r\n      // eventType = Expression.EventType.Load;\r\n    } else if (change.type === ModifyType.ValueChange) {\r\n      //eventType = Expression.EventType.ValueChanged;\r\n      // 不处理值变化\r\n    } else if (change.type === ModifyType.Update) {\r\n      eventType = Expression.EventType.Update\r\n    }\r\n    return eventType;\r\n  }\r\n}\r\n\r\nexport { RepositoryChangeListener }","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { LISTENER_TOKEN } from './tokens';\r\nimport { Expression } from '../expression/index';\r\ntype Listener = Expression.Listener;\r\n@Injectable()\r\nclass ListenerRegistry {\r\n  constructor(@Optional() @Inject(LISTENER_TOKEN) public listeners: Array<Listener>, @Optional() private injector: Injector) {\r\n  }\r\n}\r\nexport { ListenerRegistry };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, BindingList, Change, ChangeType } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n */\r\n@Injectable()\r\nclass BindingDataChangeListener extends ChangeListener {\r\n  private repository: Repository<any> = null;\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.repository = this.injector.get(Repository, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * 注册值变化事件\r\n   */\r\n  private registerEvent() {\r\n    if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\r\n          let eventType = null;\r\n          if (change.type === ChangeType.Append) {\r\n            eventType = EventType.Append;\r\n          } else if (change.type === ChangeType.ValueChanged) {\r\n            eventType = EventType.ValueChanged;\r\n          } else if (change.type === ChangeType.Remove) {\r\n            eventType = EventType.Remove;\r\n          } else if (change.type === ChangeType.Load) {\r\n            // 主表新增\r\n            if (change.create === true) {\r\n              eventType = EventType.Append;\r\n            } else {\r\n              eventType = EventType.Load;\r\n            }\r\n          } else if (change.type === ChangeType.SelectionChanged) {\r\n            eventType = EventType.SelectionChanged\r\n          }\r\n          const path = this.buildEventPath(change);\r\n          const modification: EventArgs = {\r\n            ns: this.namespace,\r\n            path: path,\r\n            type: eventType,\r\n            source: Expression.EventSource.BindingData,\r\n            value: change.value,\r\n            id: change.id,\r\n            isTreeNodeLoadScene: change.isTreeNodeLoadScene\r\n          };\r\n          // console.log(\"BindingDataChangeListener\", modification);\r\n          this.subject.next(modification);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    const path = change.path;\r\n    const paths = [];\r\n    // if (!path || path.length < 1) {\r\n    //   return paths;\r\n    // }\r\n    const primaryValue = this.bindingData.list.currentItem.primaryKeyValue || change.id;\r\n    if (primaryValue) {\r\n      if (!(change.type === ChangeType.Load && change.path.length === 0)) {\r\n        paths.push(`${this.bindingData.list.primaryKey}:${primaryValue}`);\r\n      }\r\n    }\r\n    const currentPath = [];\r\n    for (let index = 0; index < path.length; index++) {\r\n      const propertyName = path[index];\r\n      currentPath.push(propertyName);\r\n      const item = this.bindingData.getValue(currentPath);\r\n      paths.push(propertyName);\r\n      if (item instanceof BindingList) {\r\n        if (currentPath.length < path.length) {\r\n          const bindingList = item as BindingList;\r\n          let currentId = bindingList.currentItem.primaryKeyValue;\r\n          if (index === path.length - 2 && change.id) {\r\n            currentId = change.id;\r\n          }\r\n          paths.push(`${this.bindingData.list.primaryKey}:${currentId}`);\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n}\r\nexport { BindingDataChangeListener };\r\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ListenerRegistry } from './listener_registry';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 监听器\r\n * @description 监听bindingList、UIState变更\r\n */\r\n@Injectable()\r\nclass Listeners {\r\n  private subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  constructor(@Optional() private registry: ListenerRegistry) {\r\n    this.regist();\r\n  }\r\n  private regist() {\r\n    const listeners = this.registry && this.registry.listeners || [];\r\n    if (listeners && listeners.length > 0) {\r\n      listeners.forEach((listener: Listener) => {\r\n        listener.onEvent.subscribe((modification: EventArgs) => {\r\n          this.subject.next(modification);\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { Listeners };\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { Listeners } from \"../listener/index\";\r\nimport { Expression } from \"./types\";\r\n/**\r\n * 事件监听器主要有以下几种类型的事件：\r\n * 1、值变化\r\n * 2、行切换\r\n *    行切换使用场景为需要为数据计算依赖当前行时\r\n * 3、数据加载\r\n */\r\n@Injectable()\r\nexport class ExpressionEventEmitter {\r\n  private onEvent: BehaviorSubject<Array<Expression.EventArgs>>;\r\n  private events: Array<Expression.EventArgs>;\r\n  constructor(private listeners: Listeners) {\r\n    this.events = new Array<Expression.EventArgs>();\r\n    this.listeners.onEvent.subscribe((eventArgs: Expression.EventArgs) => {\r\n      if (this.onEvent && this.onEvent.observers.length > 0) {\r\n        let events = [];\r\n        if (this.events.length > 0) {\r\n          events = [...this.events];\r\n        }\r\n        events.push(eventArgs);\r\n        this.onEvent.next(events);\r\n        this.events = [];\r\n      } else {\r\n        this.events.push(eventArgs);\r\n      }\r\n    });\r\n  }\r\n  public attach(): Observable<Array<Expression.EventArgs>> {\r\n    if (!this.onEvent) {\r\n      this.onEvent = new BehaviorSubject<Array<Expression.EventArgs>>(this.events);\r\n    }\r\n    return this.onEvent.asObservable();\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\nexport const EFFECTOR_TOKEN = new InjectionToken<Expression.Effector>('@farris/effector_token');\r\n\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n/**\r\n * 实体副作用器\r\n * @description 将表达式计算结果赋值给实体属性\r\n */\r\n@Injectable()\r\nexport class RepositoryEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('repository effector 需要指定行信息。');\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      return;\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== value) {\r\n        object[propName] = value;\r\n      }\r\n    } else {\r\n      // console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { UIState } from '../ui-state/index';\r\n\r\n@Injectable()\r\nexport class UIStateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    this.uiState.setPropertyValue(path, value);\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 只读副作用器\r\n */\r\n@Injectable()\r\nexport class ReadonlyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // suprise ?\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 依赖副作用器\r\n * @description 当表达式计算结果为true时，清空字段值\r\n * 当value==true且属性当前值不是null时，设置属性值为null\r\n */\r\n@Injectable()\r\nexport class DependencyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: boolean, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('DependencyEffector 需要指定行信息。');\r\n    }\r\n    if (typeof value !== 'boolean') {\r\n      console.warn(`DependencyEffector 依赖表达式计算结果应该为true/false，当前值为：${value}`);\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      throw new Error(`找不到id：${rowId}对应的实体！`);\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== null && value === true) {\r\n        object[propName] = null;\r\n      }\r\n    } else {\r\n      throw new Error(`[DependencyEffector] 找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n\r\n}","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { EFFECTOR_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class EffectorRegistry {\r\n  constructor(private injector: Injector, @Optional() @Inject(EFFECTOR_TOKEN) public effectors: Array<Expression.Effector>) { }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService } from '../core/index';\r\n\r\n@Injectable()\r\nexport class RelativeEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (value === true && options.message && this.notifyService) {\r\n      const messageType = options.messageType || 'info';\r\n      this.notifyService[messageType](options.message, { hideTitle: true });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService, ComponentType } from '../core/index';\r\nimport { NgFormControl } from '../form/decorators';\r\nimport { RuleType } from '../form/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\n@Injectable()\r\nexport class ValidateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService,\r\n    @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext\r\n  ) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    // const rootViewModel = rootFrameContext.viewModel;\r\n    const expressionId = options.expressionId;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n    }\r\n    if (value === false && options.message) {\r\n      // 更新form错误信息\r\n      // 不是grid，则认为是卡片\r\n      if (!domInfo.isGridComponent) {\r\n        const message = options.message.replace(/\\$property/g, domInfo.propertyName);\r\n        const formErrors = this.buildFormErrors(domPropertyName, message);\r\n        // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      } else {\r\n        // if (expressionId) {\r\n        //   // 增加校验规则\r\n        //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n        // }\r\n      }\r\n      // 不进行汇总展示\r\n      // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);\r\n      // 增加到汇总消息\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      // 更新汇总错误信息\r\n    } else if (value === true) {\r\n      // 移除错误消息\r\n      // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n      if (currentErrors) {\r\n        if (currentErrors.hasOwnProperty('validate')) {\r\n          // require合法，移除require校验提示\r\n          delete currentErrors.validate;\r\n        }\r\n        frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n      } else {\r\n        const formErrors = this.buildFormErrors(domPropertyName, null);\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 通过实体路径获取对应的dom信息\r\n   * @param entityPath\r\n   * @returns\r\n   */\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n\r\n        const isValidFrameContext = frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              // 如果是farris树，则跳过\r\n              const isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;\r\n              if (isFarrisTreeTableComponent) {\r\n                continue;\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getVerifyInformations(frameContext: FrameContext) {\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const verifyInformations = rootViewModel.verifyInformations;\r\n    return verifyInformations;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      message = message.replace(/\\$property/g, 'domPropertyName');\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'validate': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n  private buildVerifyInformations(id: string, frameContext: FrameContext, domPropertyName: string, message: string) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    verifyInformations.push({\r\n      id: id,\r\n      namespace: frameContext.namespace,\r\n      targetField: domPropertyName,\r\n      index: verifyInformations.length + 1,\r\n      title: frameContext.form.formGroupName,\r\n      msg: message,\r\n      type: 'error'\r\n    });\r\n    return verifyInformations;\r\n  }\r\n  private removeValidateVerifyInformations(id: string, frameContext: FrameContext) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    return verifyInformations;\r\n  }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { ComponentType } from '../core/index';\r\nimport { Entity } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NgFormControl, RuleType } from '../form/index';\r\nimport { FrameContext, NAMESPACE } from \"../frame/index\";\r\nimport { Translate, TranslateToken } from '../i18n';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 必填副作用器\r\n * @description 当结算结果为true时设置必填校验，否则删除必填校验\r\n */\r\n@Injectable()\r\nexport class RequiredEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext: FrameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    const pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(p => p));\r\n    const expressionId = options.expressionId;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Require);\r\n    }\r\n    if (value === true) {\r\n      if (options.message) {\r\n        // 更新form错误信息\r\n        // 不是grid，则认为是卡片\r\n        if (!domInfo.isGridComponent) {\r\n          const message = options.message.replace(/\\$property/g, domInfo.propertyName);\r\n          const formErrors = this.buildFormErrors(domPropertyName, message);\r\n          const isValidValue = this.isValidValue(path, pathValue);\r\n          if (!isValidValue) {\r\n            frameContext.form.updateFormErrors(formErrors);\r\n          }\r\n        } else {\r\n          this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);\r\n        }\r\n      }\r\n    } else {\r\n      // 返回非true值时认为非必填\r\n      if (domInfo.isGridComponent) {\r\n        this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);\r\n      } else {\r\n        const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n        if (currentErrors) {\r\n          if (currentErrors.hasOwnProperty('require')) {\r\n            // require合法，移除require校验提示\r\n            delete currentErrors.require;\r\n          }\r\n          frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n        } else {\r\n          const formErrors = this.buildFormErrors(domPropertyName, null);\r\n          frameContext.form.updateFormErrors(formErrors);\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  private updateColumnValidators(frameContext: FrameContext, field: string, datagridColumns: any[][], isRequired: boolean) {\r\n    const frameId = frameContext.frameId;\r\n    const componentRefs = frameContext.appContext.componentManager.get([frameId]) as Map<string, any>;\r\n    if (componentRefs && componentRefs.size > 0) {\r\n      const datagrid = Array.from(componentRefs.values())[0];\r\n      if (datagrid && typeof datagrid.updateColumn === 'function') {\r\n        const columns = datagridColumns.find((array: any[]) => {\r\n          return array.find(item => item.field === field);\r\n        });\r\n        const column = columns && columns.find(item => item.field === field) || null;\r\n        if (column) {\r\n          const validators: any[] = column.validators || [];\r\n          const index = validators.findIndex(item => item.type === 'required');\r\n          if (isRequired) {\r\n            if (index === -1) {\r\n              validators.push({ \"type\": \"required\", \"message\": \"该字段不能为空！\" });\r\n            }\r\n          } else {\r\n            if (index !== -1) {\r\n              validators.splice(index, 1);\r\n            }\r\n          }\r\n          datagrid.updateColumn(field, { validators: [...validators] });\r\n          datagrid.columnsChanged(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean, binding: string, datagridColumns: any[][] } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              // 如果是farris树，则跳过\r\n              const isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;\r\n              if (isFarrisTreeTableComponent) {\r\n                continue;\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent,\r\n                binding: ngFormControl.binding,\r\n                datagridColumns: dgColumnInfo\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getDataPropInfo(path: string) {\r\n    if (!path) {\r\n      return null;\r\n    }\r\n    const paths = path.split('/').filter(p => p);\r\n    return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);\r\n  }\r\n  private isValidValue(path: string, value: any) {\r\n    const dataTypeInfo = this.getDataPropInfo(path);\r\n    if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {\r\n      // 多语字段\r\n      const translate = this.injector.get<Translate>(TranslateToken, null);\r\n      const currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      return !!value[currentLanguage];\r\n    } else if (value === null || value === '' || value === undefined) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'require': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\n\r\n@Injectable()\r\nexport class VisibleEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext,\r\n    private repository: Repository<any>) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 由匿名函数接管，ignore\r\n    const paths = path.split('/').filter(p => p);\r\n    const bindingPaths = this.getTablePaths(paths);\r\n    const bindingPath = bindingPaths.join('/');\r\n    // 主表显隐无需处理\r\n    if (bindingPaths && bindingPaths.length > 0) {\r\n      const isGridComponent = this.isGridComponent(bindingPath);\r\n      if (isGridComponent) {\r\n        const datagridComponent = this.getDatagridComponent(bindingPath);\r\n        if (datagridComponent) {\r\n          // 更新列信息\r\n          // datagridComponent.columnsChanged();\r\n          const fieldPaths = this.getPropertyPaths(paths);\r\n          if (fieldPaths) {\r\n            const field = fieldPaths.join('.');\r\n            if (value) {\r\n              datagridComponent.showColumn(field, false);\r\n            } else {\r\n              datagridComponent.hideColumn(field, false);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const datagridComponent = this.getDatagridComponent(bindingPath);\r\n      if (datagridComponent) {\r\n        datagridComponent.columnsChanged(false);\r\n      }\r\n    }\r\n  }\r\n  private getTablePaths(paths: string[]): string[] {\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  private getDatagridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    let result = null;\r\n    if (matchedFrameContexts) {\r\n      matchedFrameContexts.every((frameContext: FrameContext) => {\r\n        const frameId = frameContext.frameId;\r\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\r\n        if (!componentsMap) {\r\n          return true;\r\n        }\r\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\r\n        if (datagridComponent) {\r\n          result = datagridComponent;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private getPropertyPaths(paths: string[]) {\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  private isGridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const frameContext = frameContexts.find((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    if (frameContext) {\r\n      return !!frameContext.viewModel['dataGridColumnsName'];\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}","import { Expression } from '../expression/index';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { EffectorRegistry } from './effector_registry';\r\nimport { RepositoryEffector } from './repository_effector';\r\nimport { UIStateEffector } from './uistate_effector';\r\nimport { ReadonlyEffector } from './readonly_effector';\r\nimport { DependencyEffector } from './dependency_effector';\r\nimport { RelativeEffector } from './relative_effector';\r\nimport { ValidateEffector } from './validate_effector';\r\nimport { RequiredEffector } from './required_effector';\r\nimport { VisibleEffector } from './visible_effector';\r\n// import { Core } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EffectorFactory {\r\n  constructor(private injector: Injector, private effectorRegistry: EffectorRegistry) { }\r\n  public getEffector(expressionObject: Expression.ExpressionObject) {\r\n    const path = expressionObject.path;\r\n    const ns = expressionObject.ns;\r\n    const bindingType = expressionObject.bindingType;\r\n    const type = expressionObject.type;\r\n    const nsEffectors = this.effectorRegistry.effectors.filter((effector: Expression.Effector) => effector.ns == ns);\r\n    // 计算表达式\r\n    if (type === Expression.ExpressionType.Compute) {\r\n      if (bindingType === Expression.ExpressionBindingType.Field) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof RepositoryEffector);\r\n      } else if (bindingType === Expression.ExpressionBindingType.State) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof UIStateEffector);\r\n      } else {\r\n        throw new Error(`不支持的绑定字段类型：${bindingType}`);\r\n      }\r\n    } else if (type === Expression.ExpressionType.Readonly) {\r\n      // 只读表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ReadonlyEffector);\r\n    } else if (type === Expression.ExpressionType.Dependency) {\r\n      // 依赖表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof DependencyEffector);\r\n    } else if (type === Expression.ExpressionType.Relative) {\r\n      // 关联表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RelativeEffector);\r\n    } else if (type === Expression.ExpressionType.Validate) {\r\n      // 校验表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ValidateEffector);\r\n    } else if (type === Expression.ExpressionType.Required) {\r\n      // 必填表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RequiredEffector);\r\n    } else if (type === Expression.ExpressionType.Visible) {\r\n      // 显隐表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof VisibleEffector);\r\n    } else {\r\n      // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { BindingData, BindingList, BindingObject } from '../binding-data/index';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { EffectorFactory } from '../effector/index';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { FrameContext } from '../frame';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { Translate } from '../i18n/translate';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\n\r\n@Injectable()\r\nexport abstract class EventHandler implements Expression.IEventHandler {\r\n  protected frameContext: FrameContext;\r\n  constructor(protected injector: Injector, protected repository: Repository<any>, protected bindingData: BindingData, protected expressionRegistry: ExpressionRegistry, protected effectorFactory: EffectorFactory, protected expressionExecutor: ExpressionExecutor, protected expressionResult: ExpressionResult) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext);\r\n  }\r\n  public expressionObjects: Expression.ExpressionObject[];\r\n\r\n  public handleEvent(event: Expression.EventArgs, expressionObjects: Expression.ExpressionObject[]) {\r\n    event = Object.assign({}, event);\r\n    this.expressionObjects = expressionObjects;\r\n    this.dispatch(event);\r\n  }\r\n\r\n  //#region 抽象函数\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public abstract filter(event: Expression.EventArgs);\r\n  /**\r\n   * 发布事件\r\n   * @param expressionObject 表达式对象\r\n   * @param event 事件\r\n   */\r\n  public abstract dispatch(event: Expression.EventArgs): void;\r\n  //#endregion\r\n\r\n  //#region 属性\r\n\r\n  /**\r\n   * 主表主键值\r\n   */\r\n  protected get primaryValue() {\r\n    return this.bindingData.list.currentItem.primaryKeyValue;\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region 表达式核心\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   * @returns any\r\n   */\r\n  public perform(expressionObject: Expression.ExpressionObject, context: any) {\r\n    return this.expressionExecutor.compile(expressionObject, context);\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);\r\n      return;\r\n    }\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const effectPaths = expressionObject.effectPaths || [];\r\n      if (effectPaths.length > 0) {\r\n        effectPaths.forEach((path: string) => {\r\n          const effectPath = path.split('/');\r\n          const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id };\r\n          effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n        });\r\n      } else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id };\r\n        effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n      }\r\n    } else {\r\n      throw new Error('not supported！');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region util\r\n\r\n  protected isValidateOrRequiredExpression(expressionObject: Expression.ExpressionObject) {\r\n    return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);\r\n  }\r\n  /**\r\n   * 以事件参数为依据构建实体路径\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  protected getEntityPathFromEvent(event: Expression.EventArgs): string[] {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    if (!event || !event.path || event.path.length < 1) {\r\n      return [];\r\n    }\r\n    const paths = event.path;\r\n    return this.getEntityPath(paths);\r\n  }\r\n  /**\r\n   * 获取事件路径中的实体路径\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 构造实体路径\r\n   * @param path path\r\n   * @description 删除路径中的id字段\r\n   * @returns \r\n   */\r\n  protected buildEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 清理事件路径中的id主键标识\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected cleanEventPath(path: string[]) {\r\n    path = path.filter(p => {\r\n      if (p && p !== ':') {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return path.map((item: string) => {\r\n      if (item.includes(':')) {\r\n        return item.split(':')[1];\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  protected getCurrentRowByPaths(paths: string[]): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件路径中指定子表的事件行\r\n   * @param path \r\n   * @param tableCode \r\n   * @returns \r\n   */\r\n  protected getEventId(path: string[], tableCode: string) {\r\n    if (!path || path.length < 1) {\r\n      throw new Error('invalid path!');\r\n    }\r\n    const propertyIndex = path.findIndex(p => p === tableCode);\r\n    if (propertyIndex === -1) {\r\n      return null;\r\n    }\r\n    const idIndex = propertyIndex + 1;\r\n    if (idIndex > path.length - 1) {\r\n      throw new Error('invalid propertyName or path');\r\n    }\r\n    const id = path[idIndex];\r\n    if (id.indexOf(':') === -1) {\r\n      throw new Error('compute error.');\r\n    }\r\n    return id.split(':')[1];\r\n  }\r\n  //#endregion\r\n\r\n\r\n  //#region  构造上下文\r\n\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext(event: Expression.EventArgs) {\r\n    const ns = event.ns;\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const result = {};\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const anonymousFrameContext = frameContexts[0];\r\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件实体\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildEntityContext(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows?: Array<Expression.ICurrentRow>) {\r\n    const expressionBindingType = expressionObject.bindingType;\r\n    if (expressionBindingType === Expression.ExpressionBindingType.Field) {\r\n      const entityTypeInfo = this.repository.entityTypeInfo;\r\n      const childrenEntityPaths = [];\r\n      ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n      // 获取当前行\r\n      const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;\r\n      const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;\r\n      let entity = this.bindingData.list.findById(primaryValue);\r\n      if (!entity) {\r\n        return {};\r\n      }\r\n      const object = entity.toJSON();\r\n      object['__type__'] = 'Entity';\r\n      if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n        return object;\r\n      }\r\n      childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);\r\n      // 找到所有子表\r\n      childrenEntityPaths.forEach((paths: string[]) => {\r\n        const bindingList = this.bindingData.getValue(paths) as BindingList;\r\n        let currentRowId = bindingList.currentId;\r\n        const propertyName = paths[paths.length - 1];\r\n        // parent 为entity或entitylist或null\r\n        const parent = paths.slice(0, paths.length - 1).reduce((object: any, path: string) => {\r\n          return object && object[path] || null;\r\n        }, object);\r\n        if (!parent) {\r\n          return;\r\n        }\r\n        const data = parent;\r\n        let node: any = null;\r\n        if (!currentRowId) {\r\n          // 当前表没有数据\r\n          node = { __items__: [], __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n        } else {\r\n          // 纠正当前行\r\n          if (currentRows && currentRows.length > 0) {\r\n            // 是否指定了当前行\r\n            const userAssignCurrentRow = currentRows.find(row => {\r\n              const bindingPaths = row.bindingPath.split('/').filter(p => p);\r\n              return bindingPaths.join('/') === paths.join('/');\r\n            });\r\n            if (userAssignCurrentRow) {\r\n              currentRowId = userAssignCurrentRow.primaryValue;\r\n            }\r\n          }\r\n          // 子表当前行\r\n          const row = bindingList.findById(currentRowId);\r\n          // 找到子表当前行的上级\r\n          const list = parent[propertyName];\r\n          node = { __items__: [], ...row && row.toJSON() || {}, __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n\r\n          if (list && Array.isArray(list)) {\r\n            node.__items__ = [].concat(list);\r\n          }\r\n        }\r\n        data[propertyName] = node;\r\n      });\r\n      return object;\r\n    } else if (expressionBindingType === Expression.ExpressionBindingType.State) {\r\n      // todo: 支持状态表达式\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 构造表达式计算上下文\r\n   * @param expressionObject 表达式\r\n   * @param event 事件\r\n   * @param entityContext 实体上下文\r\n   * @param currentRows 当前行\r\n   * @returns \r\n   */\r\n  public buildContext(expressionObject: Expression.ExpressionObject, event: Expression.EventArgs, entityContext?: any, currentRows?: Array<Expression.ICurrentRow>): any {\r\n    let context = [];\r\n    if (entityContext) {\r\n      context.push(entityContext);\r\n    } else {\r\n      const entity = this.buildEntityContext(event, expressionObject, currentRows);\r\n      context.push(entity);\r\n    }\r\n    const stateContext = this.buildStateContext(event);\r\n    const entityCode = this.entityOriginalNodeCode;\r\n    let entity = null;\r\n    if (context.length === 1) {\r\n      entity = context.pop();\r\n    } else {\r\n      entity = context[0];\r\n      if (!entity['__type__']) {\r\n        entity['__type__'] = 'Entity';\r\n      }\r\n      entity['__items__'] = context;\r\n    }\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    return {\r\n      [entityCode]: entity,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.bindingData,\r\n      repository: this.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS'\r\n    };\r\n  }\r\n  //#endregion\r\n  /**\r\n   * 构造副作用路径\r\n   * @param event \r\n   * @param expressionObject \r\n   * @returns \r\n   */\r\n  protected buildEffectPath(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): string[] {\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    const primaryValue = event.path[0] && event.path[0].split(':')[1];\r\n    if (!primaryValue) {\r\n      throw new Error('Invalid event path!');\r\n    }\r\n    if (expressionPaths.length === 1) {\r\n      // 主表简单字段\r\n      return [primaryValue, expressionPaths.pop()];\r\n    } else {\r\n      const result = [primaryValue];\r\n      for (let index = 0; index < expressionPaths.length; index++) {\r\n        const propertyName = expressionPaths[index];\r\n        result.push(propertyName);\r\n        const currentPaths = expressionPaths.slice(0, index + 1);\r\n        const propertyInfo: DataPropInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);\r\n        if (propertyInfo.group === 'List') {\r\n          let id = this.getEventId(event.path, propertyInfo.name) || null;\r\n          // 事件和表达式不是同一个表\r\n          if (!id) {\r\n            const bindingList = this.bindingData.getValue(currentPaths) as BindingList;\r\n            if (bindingList) {\r\n              id = bindingList.currentId;\r\n            }\r\n          }\r\n          result.push(id);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  //#region 辅助方法\r\n  protected getPathInfo(path: string): { path: string, propertyName: string, paths: string[], propertyNames: string[] } {\r\n    const paths = path.split('/').filter(p => p);\r\n    // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）\r\n    const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    const propertyName = paths.slice(entityPath.length).join('/');\r\n    return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\r\n  }\r\n  /**\r\n   * get table paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getTablePathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  /**\r\n   * get property paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getPropertyPathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  /**\r\n   * 分析事件和表达式的关系\r\n   */\r\n  protected analysis(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject) {\r\n    const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n    const eventPaths = this.getEntityPath(event.path.slice(0));\r\n    const eventPathInfo = this.getPathInfo(eventPaths.join('/'));\r\n    if (!expressionPathInfo || !eventPathInfo) {\r\n      console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);\r\n      return null;\r\n    }\r\n    const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);\r\n    const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);\r\n    const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);\r\n    const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);\r\n    const result = {\r\n      distance: undefined,\r\n      eventFromChildren: undefined,\r\n      eventFromParent: undefined,\r\n      expressionTablePaths,\r\n      expressionPropertyNames,\r\n      eventTablePaths,\r\n      eventPropertyNames,\r\n      isSameTable: false\r\n    };\r\n    result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);\r\n    if (result.distance === 1) {\r\n      result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));\r\n      result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));\r\n    }\r\n    result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');\r\n    return result;\r\n  }\r\n\r\n  protected buildCurrentRows(tablePaths: string[], fullPaths: string[]) {\r\n    const currentRows = new Array<Expression.ICurrentRow>();\r\n    if (!tablePaths || tablePaths.length < 1) {\r\n      currentRows.push({\r\n        bindingPath: '/',\r\n        primaryValue: fullPaths[0]\r\n      });\r\n    } else {\r\n      const paths = [];\r\n      tablePaths.forEach((path: string, index: number) => {\r\n        if (index === 0) {\r\n          currentRows.push({\r\n            bindingPath: '/',\r\n            primaryValue: fullPaths[0]\r\n          });\r\n        }\r\n        paths.push(path);\r\n        const primaryValue = fullPaths[index * 2 + 2];\r\n        currentRows.push({\r\n          bindingPath: paths.join('/'),\r\n          primaryValue: primaryValue\r\n        });\r\n      });\r\n    }\r\n    return currentRows;\r\n  }\r\n  protected convertBooleanTypeExpressionResult(expressionObject: Expression.ExpressionObject, result: any) {\r\n    if (this.isBooleanTypeExpression(expressionObject)) {\r\n      return result === true ? true : false;\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n  protected isBooleanTypeExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return this.isReadonlyExpression(expressionObject) || this.isVisibleExpression(expressionObject) || this.isValidateExpression(expressionObject) || this.isRequiredExpression(expressionObject) || this.isDependencyExpression(expressionObject);\r\n  }\r\n  private isReadonlyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Readonly || false;\r\n  }\r\n  private isVisibleExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Visible;\r\n  }\r\n  private isValidateExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Validate;\r\n  }\r\n  private isRequiredExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Required;\r\n  }\r\n  private isDependencyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Dependency;\r\n  }\r\n  //#endregion\r\n}","import { Injectable } from '@angular/core';\r\nimport { DataPropInfo } from '../core';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { EventHandler } from './event_handler';\r\n/**\r\n * 实体值变化处理器\r\n */\r\n@Injectable()\r\nexport class EntityValueChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Expression } from \"../expression/index\";\r\n\r\nexport class EffectorManager {\r\n  /**\r\n   * 批量副作用\r\n   * @param effector effector\r\n   * @param expressionObject 表达式\r\n   * @param paths 作用路径\r\n   * @returns \r\n   */\r\n  public static effect(effector: Expression.Effector, expressionObject: Expression.ExpressionObject, paths: any[][]) {\r\n    if (!paths || paths.length < 1) {\r\n      return;\r\n    }\r\n    paths.forEach((path: any[]) => {\r\n      const effectOptions: Expression.EffectOptions = { path, message: expressionObject.message, expressionId: expressionObject.id };\r\n      effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n    });\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Entity, EntityList } from \"../entity/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class StateValueChangedEventHandler extends EventHandler {\r\n\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const changePaths = this.cleanEventPath(event.path);\r\n        changePaths.splice(0, 0, STATE_TEMPLATE);\r\n        const eventPath = changePaths.join('/');\r\n        if (deps.includes(eventPath)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        // const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    const bindingType = expressionObject.bindingType;\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    if (bindingType === Expression.ExpressionBindingType.State) {\r\n      // 如果表达式作用于uistate\r\n      effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n    } else if (bindingType === Expression.ExpressionBindingType.Field) {\r\n      // 表达式作用于实体属性\r\n      const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n      const bindingPaths = expressionPathInfo.paths;\r\n      const entities = this.repository.entityCollection.getAllEntities();\r\n      if (!entities || entities.length < 1 || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n      } else {\r\n        this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, (currentRows: Expression.ICurrentRow[], paths: string[]) => {\r\n          this.output(event, expressionObject, currentRows, effector, [paths]);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  private effectRows(entities: Entity[], bindingPaths: string[], propertyNames: string[], callback: (currentRows: Expression.ICurrentRow[], paths: string[]) => void, currentRows: Expression.ICurrentRow[] = [], prevPaths: string[] = [], paths: string[] = []) {\r\n    if (!bindingPaths || bindingPaths.length < 1) {\r\n      entities.forEach((entity: Entity) => {\r\n        if (!entity || !entity.primaryValue) {\r\n          return;\r\n        }\r\n        const currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);\r\n        const currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);\r\n        callback(currentCurrentRows, currentPaths);\r\n      });\r\n      currentRows.length = 0;\r\n      paths.length = 0;\r\n    } else {\r\n      let flag = false;\r\n      let nextPrevPaths = prevPaths;\r\n      entities.forEach((entity: Entity) => {\r\n        const prop = bindingPaths[0];\r\n        const entityList = entity[prop] as EntityList<Entity>;\r\n        if (!entityList || entityList.count() < 1) {\r\n          // 下级表没有数据\r\n          return;\r\n        }\r\n        currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });\r\n        paths.push(entity.primaryValue);\r\n        paths.push(prop);\r\n        if (flag === false) {\r\n          flag = true;\r\n          nextPrevPaths.push(prop);\r\n        }\r\n        const nextBindingPaths = bindingPaths.slice(1);\r\n        this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths, paths);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths\r\n   * @param event\r\n   * @returns\r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): { [prop: string]: any; } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Entity } from \"../entity/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryAddEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryRemoveEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n}","import { EventHandler } from \"./event_handler\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { Injectable } from \"@angular/core\";\r\n@Injectable()\r\nexport class RepositoryLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class EntityUpdateEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n      // 重新加载实体时不计算计算表达式，只处理只读、必填等\r\n      if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {\r\n        return false;\r\n      }\r\n      const result = this.analysis(event, expressionObject);\r\n      if (!result) {\r\n        return false;\r\n      }\r\n      // 必须是主表表达式\r\n      if (result.expressionTablePaths.length !== 0) {\r\n        return false;\r\n      }\r\n      const index = expressionObject.deps.findIndex((dep: string) => {\r\n        if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n          return false;\r\n        }\r\n        const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n        const depPathInfo = this.getPathInfo(deps.join('/'));\r\n        if (!depPathInfo) {\r\n          return false;\r\n        }\r\n        if (depPathInfo.paths.length !== 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return index === -1 ? false : true;\r\n    });\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs) {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE, STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataAppendObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // const fullEventPath = event.path || [];\r\n      // event.path like [\"id:7dd77e50-ebed-4639-b483-d12004603640\", \"formEEUR1E1s\"] or undefined or []\r\n      // eventTablePaths like [] or [\"子表s\"]\r\n\r\n      // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方\r\n      // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性\r\n      const groupExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // const eventEntityPath = this.buildEntityPath(event.path);\r\n        // 主表新增\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            // 认为主表新增时不需要处理聚合函数\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表新增\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      const eventTablePaths = this.buildEntityPath(event.path);\r\n      // 事件表中表达式（事件表本身的表达式）\r\n      const relativeExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式\r\n        if (expressionObject.ns !== event.ns) {\r\n          return false;\r\n        }\r\n        const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n        // 过滤掉非当前表的表达式\r\n        if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n          return false;\r\n        }\r\n        // 表达式是计算或依赖表达式并且是分层加载场景，不计算，仅当依赖变化时计算\r\n        if ((expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency) && event.isTreeNodeLoadScene) {\r\n          return false;\r\n        }\r\n        // 没有依赖的表达式\r\n        if (!expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return true;\r\n        }\r\n        // 仅依赖State\r\n        const onlyDependOnState = expressionObject.deps.every((dep: string) => dep.startsWith(STATE_TEMPLATE));\r\n        // 仅依赖当前表或上级表\r\n        // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {\r\n        //   if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n        //     return false;\r\n        //   }\r\n        //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);\r\n        //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n        //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;\r\n        // });\r\n        // if (onlyDependOnState || onlyDependOnCurrentTable) {\r\n        //   return true;\r\n        // }\r\n        if (onlyDependOnState) {\r\n          return true;\r\n        }\r\n\r\n        const result = this.analysis(event, expressionObject);\r\n        if (result && result.distance === 0 && result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 事件表表达式，但依赖下级表的未计算\r\n        return false;\r\n      });\r\n\r\n      // 依赖当前加载数据的表达式\r\n      const depExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1 || (expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {\r\n          return false;\r\n        }\r\n        // 过滤出所有实体依赖\r\n        const deps = expressionObject.deps.filter((dep: string) => dep.startsWith(ENTITY_TEMPLATE));\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表\r\n        // 1、计算事件表路径\r\n        const eventPath = event.path.filter(p => p).join('/');\r\n        // 2、获取依赖字段的表路径\r\n        const index = deps.findIndex((dep: string) => {\r\n          // 去掉ENTITY~前缀\r\n          const depPath = dep.split('/').slice(1).join('/');\r\n          // 获取依赖字段所在的表路径\r\n          const { path } = this.getPathInfo(depPath);\r\n          return path === eventPath;\r\n        });\r\n        return index !== -1;\r\n      });\r\n      return groupExpressions.concat(relativeExpressions, depExpressions);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n          // console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n  /**\r\n   * 新增副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 新增场景需要计算事件表\\事件表上面的表\\下层表的可见、必填、校验\r\n      if (info.distance === 0) {\r\n        if (!info.isSameTable) {\r\n          return;\r\n        }\r\n        // 表达式和事件在同一个表\r\n        const prevPaths = eventPath.slice(0);\r\n        if (eventPath.length === 1) {\r\n          // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push([bindingObject.primaryKeyValue].concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const path = prevPaths.concat(propertyPaths);\r\n            paths.push(path);\r\n          }\r\n        } else {\r\n          // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push(prevPaths.concat([bindingObject.primaryKeyValue]).concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const bindingList = this.bindingData.getValue(info.eventTablePaths) as BindingList;\r\n            if (bindingList && bindingList.currentId) {\r\n              paths.push(prevPaths.concat(bindingList.currentId).concat(propertyPaths));\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 仅处理下级表，跨表跳过\r\n          if (info.expressionTablePaths.length > 1) {\r\n            return;\r\n          }\r\n          // 下层表的可见、必填、校验\r\n          let prevPaths = eventPath.slice(0, eventPath.length);\r\n          // 子表新增\r\n          if (eventPath && eventPath.length > 0) {\r\n            prevPaths = eventPath.slice(0, eventPath.length);\r\n          } else {\r\n            // 主表新增\r\n            prevPaths = [this.bindingData.list.currentId, info.expressionTablePaths[0], null];\r\n          }\r\n\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      paths.forEach((path: any[]) => {\r\n        const currentRows = this.buildCurrentRows(info.expressionTablePaths, path);\r\n        this.output(event, expressionObject, currentRows, effector, [path]);\r\n      });\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { EffectorManager } from '../effector/effector_manager';\r\nimport { BindingList } from '../binding-data';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { EventHandler } from './event_handler';\r\n\r\n@Injectable()\r\nexport class BindingDataValueChangeEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const eventEntityPaths = this.getEntityPath(event.path);\r\n        eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        return deps.includes(eventEntityPaths.join('/'));\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 输出副作用\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    // 首先计算当前表达式和事件会影响那些路径\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const result = this.analysis(event, expressionObject);\r\n    if (!result) {\r\n      return;\r\n    }\r\n    const eventPaths = this.cleanEventPath(event.path);\r\n    const paths: any[][] = [];\r\n    if (result.distance === 0) {\r\n      // 值变化之后影响到了一个表内字段或影响到了同级表字段\r\n      if (result.isSameTable === false) {\r\n        // 同级表跳过\r\n        //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n        return;\r\n      }\r\n      const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n      const path = prevPaths.concat(result.expressionPropertyNames);\r\n      const currentRows = this.buildCurrentRows(result.eventTablePaths, path);\r\n      paths.push(path);\r\n      this.output(event, expressionObject, currentRows, effector, paths);\r\n    } else {\r\n      if (result.eventFromChildren === true) {\r\n        if (result.distance > 1) {\r\n          return;\r\n        }\r\n        // 下级表值变化影响到了上级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);\r\n        const path = prevPaths.concat(result.expressionPropertyNames);\r\n        paths.push(path);\r\n        const currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);\r\n        this.output(event, expressionObject, currentRows, effector, paths);\r\n      } else if (result.eventFromParent === true) {\r\n        if (result.distance > 1) {\r\n          //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n          return;\r\n        }\r\n        // 上级表值变化影响到了下级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n        // 添加下级表nodecode到路径中\r\n        prevPaths.push(result.expressionTablePaths.slice(0).pop());\r\n        // 遍历子表\r\n        const bindingPaths = result.expressionTablePaths;\r\n        const primaryKeyValue = eventPaths[0];\r\n        if (!primaryKeyValue) {\r\n          return;\r\n        }\r\n        let object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);\r\n        // prevPaths like [1,c,1.1,cc]\r\n        for (let index = 1; index < prevPaths.length; index++) {\r\n          const propertyName = prevPaths[index];\r\n          if (object instanceof EntityList) {\r\n            object = object.get(propertyName);\r\n          } else {\r\n            object = object[propertyName];\r\n          }\r\n        }\r\n        const list = object;\r\n        if (list && list instanceof EntityList) {\r\n          if (list.count() === 0) {\r\n            if (expressionObject.type === Expression.ExpressionType.Visible || expressionObject.type === Expression.ExpressionType.Required) {\r\n              const context = this.buildContext(expressionObject, event);\r\n              const value = this.perform(expressionObject, context);\r\n              if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n                return;\r\n              }\r\n              expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);\r\n              if (expressionObject.id) {\r\n                this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n              }\r\n              super.effect(event, expressionObject);\r\n            }\r\n          } else {\r\n            for (let entity of list) {\r\n              if (entity && entity.primaryValue) {\r\n                const path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);\r\n                const currentRows = this.buildCurrentRows(result.expressionTablePaths, path);\r\n                this.output(event, expressionObject, currentRows, effector, [path]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 跨表\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n      return;\r\n    }\r\n    expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n/**\r\n * 删除数据时需要计算的表达式\r\n * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）\r\n */\r\n@Injectable()\r\nexport class BindingDataRemoveObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // 找到聚合相关表达式\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // event.path like [id:xxxx] or [id:xxxx,子表s]\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        // 主表删除\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表删除\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      return expressions;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 删除副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 删除场景仅需要计算事件表上面的表\r\n      if (info.distance !== 0) {\r\n        // 表达式和事件不在同一个表，即下级表删除了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 在过滤时这种情况的应该就排除掉了\r\n          return;\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      EffectorManager.effect(effector, expressionObject, paths);\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    // 过滤第一次空load\r\n    if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {\r\n      return null;\r\n    }\r\n    // 数据加载完成后需要计算当前绑定路径下的只读、显隐、必填、校验表达式\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 影响一个表达式是否要计算的因子有两个：表达式作用的字段、表达式的依赖\r\n        // 以下判断的前提时数据加载场景！！\r\n        // 1、表达式作用的字段\r\n        //    如果加载的数据对应的表就是表达式字段所在的表，应该计算\r\n        // 2、表达式依赖\r\n        //    如果表达式依赖的字段加载了，应该计算\r\n        //    如果表达式没有任何依赖，应该计算\r\n        if (result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 如果没有依赖则应该计算，保证只读、必填、显隐、校验表达式结果正确\r\n        if (!expressionObject.deps || expressionObject.deps.length === 0) {\r\n          return true;\r\n        }\r\n\r\n        // 过滤出所有实体依赖\r\n        const deps = expressionObject.deps.filter((dep: string) => dep.startsWith(ENTITY_TEMPLATE));\r\n        // 未依赖实体，只依赖了uistate，那么绑定数据加载时不需要计算\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表\r\n        // 1、计算事件表路径\r\n        const eventTablePath = this.buildEntityPath(event.path).join('/');\r\n        // 2、获取依赖字段的表路径\r\n        const index = deps.findIndex((dep: string) => {\r\n          // 去掉ENTITY~前缀\r\n          const depPath = dep.split('/').slice(1).join('/');\r\n          // 获取依赖字段所在的表路径\r\n          const { path } = this.getPathInfo(depPath);\r\n          return path === eventTablePath;\r\n        });\r\n        return index !== -1;\r\n      });\r\n      return expressions;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n@Injectable()\r\nexport class BindingDataSelectionChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        // 没有依赖的表达式不需要关注\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 不依赖实体的表达式不需要关注\r\n        let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 只关注从表行切换\r\n        if (result.eventTablePaths.length !== 1) {\r\n          return false;\r\n        }\r\n        // 只关注从从表表达式\r\n        if (result.expressionTablePaths.length !== 2) {\r\n          return false;\r\n        }\r\n        // 只关注事件直接下级的表达式，跨表的不需要关注\r\n        if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {\r\n          return false;\r\n        }\r\n        // 从从表表达式需要依赖上级表\r\n        index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  public dispatch(event: Expression.EventArgs): void {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Optional } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { EVENT_HANDLER_TOKEN } from \"../expression/tokens\";\r\nimport { RepositoryAddEntityEventHandler } from \"./repository_add_entity_event_handler\";\r\nimport { RepositoryRemoveEntityEventHandler } from \"./repository_remove_entity_event_handler\";\r\nimport { EntityValueChangedEventHandler } from \"./entity_value_changed_event_handler\";\r\nimport { StateValueChangedEventHandler } from \"./state_value_changed_event_handler\";\r\nimport { EntityUpdateEventHandler } from \"./entity_update_event_handler\";\r\nimport { RepositoryLoadEventHandler } from \"./repository_load_event_handler\";\r\nimport { BindingDataAppendObjectEventHandler } from \"./binding_data_append_object_event_handler\";\r\nimport { BindingDataValueChangeEventHandler } from \"./binding_data_value_change_event_handler\";\r\nimport { BindingDataRemoveObjectEventHandler } from \"./binding_data_remove_object_event_handler\";\r\nimport { BindingDataLoadEventHandler } from \"./binding_data_load_event_handler\";\r\nimport { BindingDataSelectionChangedEventHandler } from \"./binding_data_selection_changed_event_handler\";\r\n\r\n@Injectable()\r\nexport class EventHandlerRegistry {\r\n  constructor(@Optional() @Inject(EVENT_HANDLER_TOKEN) public handlers: Expression.IEventHandler[]) { }\r\n  /**\r\n   * 实体值变化处理器\r\n   */\r\n  public get entityValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityValueChangedEventHandler);\r\n  }\r\n  /**\r\n   * 状态值变化处理器\r\n   */\r\n  public get stateValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof StateValueChangedEventHandler);\r\n  }\r\n  public get repositoryAddEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryAddEntityEventHandler);\r\n  }\r\n  public get repositoryRemoveEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryRemoveEntityEventHandler);\r\n  }\r\n  public get entityUpdateEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityUpdateEventHandler);\r\n  }\r\n  public get repositoryLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryLoadEventHandler);\r\n  }\r\n  public get bindingDataAppendEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataAppendObjectEventHandler);\r\n  }\r\n  public get bindingDataValueChangeEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataValueChangeEventHandler);\r\n  }\r\n  public get bindingDataRemoveObjectEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataRemoveObjectEventHandler);\r\n  }\r\n  public get bindingDataLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataLoadEventHandler);\r\n  }\r\n  public get bindingDataSelectionChangedHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataSelectionChangedEventHandler);\r\n  }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { ExpressionRegistry } from './expression_registry';\r\nimport { ExpressionEventEmitter } from './expression_event_emitter';\r\nimport { Expression } from './types';\r\nimport { ResolverRegistry, ResolveService } from '../resolver/index';\r\nimport { EventHandlerRegistry } from '../event-handler/index';\r\nimport { Core } from '../core/index';\r\n\r\n@Injectable()\r\nexport class ExpressionEngineImpl {\r\n  private expressionObjects: Array<Expression.ExpressionObject> = new Array<Expression.ExpressionObject>();\r\n  constructor(\r\n    private injector: Injector,\r\n    private expressionRegistry: ExpressionRegistry,\r\n    private expressionEventEmitter: ExpressionEventEmitter,\r\n    private resolverRegistry: ResolverRegistry,\r\n    private eventHandlerRegistry: EventHandlerRegistry,\r\n    private resolveService: ResolveService,\r\n  ) {\r\n    this.expressionRegistry.expressions.subscribe((exprs: Expression.ExpressionObject[]) => {\r\n      if (exprs && exprs.length > 0) {\r\n        this.expressionObjects = exprs;\r\n        // 解析表达式依赖\r\n        this.resolveDependency();\r\n      }\r\n      this.attachEvent();\r\n    });\r\n  }\r\n\r\n  private attachEvent() {\r\n    this.expressionEventEmitter.attach().subscribe((events: Expression.EventArgs[]) => {\r\n      if (!events || events.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1) {\r\n        return;\r\n      }\r\n      events.forEach((event: Expression.EventArgs) => {\r\n        const handler = this.getEventHandler(event);\r\n        if (handler) {\r\n          handler.handleEvent(event, this.expressionObjects);\r\n        } else {\r\n          Core.warn(`没有对应的事件处理器,event=${event.type}`);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 解析表达式依赖\r\n   * @returns\r\n   */\r\n  private resolveDependency() {\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {\r\n      return;\r\n    }\r\n    this.expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expression = expressionObject.expression;\r\n      const dependencies = this.resolveService.resolve(expression);\r\n      expressionObject.deps = dependencies;\r\n    });\r\n  }\r\n  /**\r\n   * 获取表达式事件处理器\r\n   * @param event event\r\n   * @returns\r\n   */\r\n  private getEventHandler(event: Expression.EventArgs): Expression.IEventHandler {\r\n    if (event.type === Expression.EventType.ValueChanged) {\r\n      // 实体值变化\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;\r\n      } else if (event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.entityValueChangedEventHandler;\r\n      } else if (event.source === Expression.EventSource.State) {\r\n        return this.eventHandlerRegistry.stateValueChangedEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Append) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryAddEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Remove) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Update) {\r\n      if (event.source === Expression.EventSource.Repository) {\r\n        return this.eventHandlerRegistry.entityUpdateEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Load) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryLoadEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataLoadEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.SelectionChanged) {\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { ComponentRef } from \"@angular/core\";\r\n/**\r\n * 组件实例管理\r\n */\r\nexport class ComponentRefManager {\r\n  private components: Map<string, any[]> = new Map<string, any[]>();\r\n  /**\r\n   * 增加组件实例\r\n   * @param id \r\n   * @param component \r\n   */\r\n  public add(id: string, component: any) {\r\n    const components = this.components.get(id);\r\n    if (components) {\r\n      components.push(component);\r\n    } else {\r\n      this.components.set(id, [component]);\r\n    }\r\n  }\r\n  /**\r\n   * 删除组件实例\r\n   * @param id \r\n   */\r\n  public remove(id: string) {\r\n    const components = this.components.get(id);\r\n    if (components && components.length > 0) {\r\n      components.length = 0;\r\n      this.components.delete(id);\r\n    }\r\n  }\r\n  /**\r\n   * 通过id获取组件实例\r\n   * @param id \r\n   * @returns \r\n   */\r\n  public get(id: string) {\r\n    if (id) {\r\n      const components = this.components.get(id);\r\n      if (components && components.length > 0) {\r\n        return components;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 是否包含id的组件\r\n   * @param id \r\n   * @returns \r\n   */\r\n  public has(id: string) {\r\n    return this.components.has(id);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.components.clear();\r\n  }\r\n  /**\r\n   * 获取指定类型的组件\r\n   * @param componentType \r\n   * @returns \r\n   */\r\n  public getComponentByType(componentType: any): any {\r\n    const containers = Array.from(this.components.values());\r\n    let component = null;\r\n    for (let containerIndex = 0; containers && containerIndex < containers.length; containerIndex++) {\r\n      const components = containers[containerIndex];\r\n      for (let index = 0; components && index < components.length; index++) {\r\n        if (components[index] instanceof componentType) {\r\n          component = components[index];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return component;\r\n  }\r\n}","import { Injector, Injectable, Optional, SkipSelf, InjectFlags, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';\r\nimport { Context } from '../context/index';\r\nimport { AppContext } from '../app/index';\r\nimport { RouterParamService } from '../misc/index';\r\nimport { FRAME_ID, NAMESPACE } from './tokens';\r\nimport { Change, ChangeType } from '../binding-data/index';\r\nimport { EventBus } from '../event-bus-new/index';\r\nimport { FrameComponent } from './frame_component';\r\nimport { IExceptionHandler } from '../exception/types';\r\nimport { EXCEPTION_HANDLER } from '../exception/tokens';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { Translate } from '../i18n';\r\nimport { UserSettings } from '../i18n/types';\r\nimport { UserSettingsToken } from '../i18n/tokens';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ExpressionEngineImpl } from '../expression/expression_engine_impl';\r\nimport { ExpressionManager } from '../expression/expression_manager';\r\nimport { ExpressionResult } from '../expression/expression_result';\r\nimport { ExpressionResultFactory } from '../expression/expression_result_factory';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser\r\n} from '../variable';\r\nimport { ChangeSetPolicy, CHANGE_SET_POLICY_TOKEN, RunMode, ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN,DestroyOpportunity } from '../core';\r\nimport { Subject } from 'rxjs';\r\nimport { IDisposable } from '../core/index';\r\nimport { ComponentRefManager } from './component_ref_manager';\r\n\r\n\r\n/**\r\n * 组件上下文\r\n * @description \r\n * # 上下文\r\n * ## Overview\r\n * \r\n * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：\r\n * \r\n * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix_2110/farris/devkit/guide/images/image-20210806204755378.png)\r\n * \r\n * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。\r\n * \r\n * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：\r\n * \r\n * ```typescript\r\n * // 方法1\r\n * const rootFrameContext = this.frameContext.root;\r\n * // 方法2\r\n * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');\r\n * ```\r\n * \r\n * 通常在编写`Web构件`时先引入FrameContext，如：\r\n * \r\n * ```javascript\r\n * import {FrameContext,BindingData,Repository} from '@farris/devkit';\r\n * \r\n * constructor(private frameContext:FrameContext){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.frameContext.bindingData;\r\n *     const repository: Repository = this.frameContext.repository;\r\n * }\r\n * ```\r\n * \r\n * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。\r\n * \r\n * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：\r\n * \r\n * ```typescript\r\n * import {BindingData,Repository,ViewModel} from '@farris/devkit';\r\n * \r\n * constructor(private viewModel:ViewModel){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.viewModel.bindingData;\r\n *     const repository: Repository = this.viewModel.repository;\r\n * }\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用操作\r\n * \r\n * ### 获取当前上下文所属的组件\r\n * \r\n * ```typescript\r\n * this.frameContext.frameComponent;\r\n * ```\r\n * \r\n * ### 获取当前上下文的根上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.root;\r\n * ```\r\n * \r\n * ### 获取当前上下文的appContext\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext;\r\n * ```\r\n * \r\n * ### 获取指定frameId的上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n * ```\r\n * \r\n * ### 获取表单所有上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用属性\r\n * \r\n * ### BindingData \r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))\r\n * \r\n * ### Repository\r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))\r\n * \r\n * ### ViewModel\r\n * \r\n * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。\r\n * \r\n * ### namespace\r\n * \r\n * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。\r\n * \r\n * ### root\r\n * \r\n * 获取整个表单的根上下文\r\n * \r\n * ### uiState\r\n * \r\n * 获取当前组件的变量\r\n * \r\n * ### frameId\r\n * \r\n * 上下文标识。\r\n */\r\n@Injectable()\r\nexport class FrameContext extends Context implements IDisposable, OnDestroy {\r\n\r\n  public typeName = 'FrameContext';\r\n\r\n  protected isDestoried = false;\r\n  public isDisposed = false;\r\n  /**\r\n   * id\r\n   */\r\n  public frameId: string;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  // public injector: Injector;\r\n\r\n  /**\r\n   * 应用上下文\r\n   */\r\n  public appContext: AppContext;\r\n\r\n  /**\r\n   * 根组件上下文\r\n   */\r\n  public root: FrameContext;\r\n\r\n  /**\r\n   * 父ViewModel\r\n   */\r\n  public parent: FrameContext;\r\n\r\n  /**\r\n   * 后代节点\r\n   */\r\n  public children: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 命令总线\r\n   */\r\n  public commandBus: CommandBus;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 数据绑定\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 表单\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 所属组件\r\n   */\r\n  public frameComponent: FrameComponent;\r\n\r\n  /**\r\n   * 异常处理\r\n   */\r\n  public exceptionHandler: IExceptionHandler;\r\n\r\n  /**\r\n   * 表单命名空间\r\n   */\r\n  public namespace: string;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public metadata: IContextMetadata = {\r\n    identify: '',\r\n    namespace: '',\r\n    commands: null,\r\n    form: null,\r\n    formControls: null,\r\n    subForms: null,\r\n    stateMachine: null,\r\n    uiStates: null,\r\n    bindingTo: ''\r\n  };\r\n\r\n  /**\r\n   * 暂停事件抛出\r\n   */\r\n  public suspend: boolean;\r\n  public expressionEngineImpl: ExpressionEngineImpl;\r\n  public expressionManager: ExpressionManager;\r\n  public expressionResult: ExpressionResult;\r\n  /**\r\n   * 索引(从0开始)\r\n   */\r\n  public index: number;\r\n  /**\r\n   * 多语\r\n   */\r\n  public translate: Translate;\r\n  /**\r\n   * 上下文销毁流\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  /**\r\n   * 组件引用管理\r\n   */\r\n  public componentRefManager: ComponentRefManager = new ComponentRefManager();\r\n  /**\r\n   * 启用后端变更检测\r\n   */\r\n  public enableServerSideChangeDetection: boolean = false;\r\n  /**\r\n   * 构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(public injector: Injector, @Optional() @SkipSelf() parent: FrameContext) {\r\n    super();\r\n    // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。\r\n    this.appContext = injector.get(AppContext);\r\n    this.destorySignal = new Subject<any>();\r\n    // 确定父子关系\r\n    // 必须对appContext进行判断，原因如下：\r\n    // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；\r\n    // 2、进而导致从RootFrameContext上拿VO变量拿不到。\r\n    if (!parent || parent.appContext !== this.appContext) { // 取消 appContext 的判断\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n    this.frameId = injector.get<string>(FRAME_ID);\r\n    if (this.appContext.contextMetadataManager.exsit(this.frameId)) {\r\n      this.metadata = this.appContext.contextMetadataManager.getContextMetadataByName(this.frameId);\r\n    }\r\n    this.namespace = injector.get(NAMESPACE, null);\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, new BindingData());\r\n    if (!this.appContext.useIsoluteEventBus || (this.appContext.useIsoluteEventBus && !this.appContext.isoluteEventBus)) {\r\n      this.eventBus = this.injector.get(EventBus, null, InjectFlags.Optional);\r\n    } else {\r\n      this.eventBus = this.appContext.isoluteEventBus;\r\n    }\r\n    this.form = this.injector.get<Form>(Form, new Form());\r\n    this.repository = this.injector.get(Repository, this.appContext.repository);\r\n    // 获取变更集策略，默认只提交合法的变更\r\n    const changeSetPolicy = this.injector.get<ChangeSetPolicy>(CHANGE_SET_POLICY_TOKEN, 'valid');\r\n    if (this.repository) {\r\n      this.repository.entityCollection.changeSetPolicy = changeSetPolicy;\r\n    }\r\n    this.enableServerSideChangeDetection = this.injector.get<boolean>(ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN, false);\r\n    this.uiState = this.injector.get<UIState>(UIState, new UIState());\r\n    const defaultViewModel = new ViewModel();\r\n    defaultViewModel.setMetadata(this.metadata);\r\n    this.viewModel = this.injector.get<ViewModel>(ViewModel, defaultViewModel);\r\n    this.variableParseService = injector.get<VariableParseService>(VariableParseService, new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]));\r\n    // 注入exceptionHandler\r\n    this.exceptionHandler = injector.get<IExceptionHandler>(EXCEPTION_HANDLER, null, InjectFlags.Optional);\r\n    // 初始化多语服务\r\n    const translate = injector.get<Translate>(TranslateToken, null);\r\n    this.translate = translate;\r\n    TranslateService.setTranslate(translate);\r\n    // 初始化用户配置\r\n    const userSettings = injector.get<UserSettings>(UserSettingsToken, null);\r\n    UserSettingsService.setUserSettings(userSettings);\r\n    this.initializeRepository();\r\n    this.appContext.regFrameContext(this);\r\n    this.registerAppContextDestroyEvent();\r\n  }\r\n  dispose(options?: any): void {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    this.isDestoried = true;\r\n    this.isDisposed = true;\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n    if (this.appContext) {\r\n      this.appContext.frameContextManager.unregFrameContext(this);\r\n      this.appContext.frameComponentRefresher.unregFrameContext(this);\r\n    }\r\n    if (this.appContext && this.isRootFrameContext() === true) {\r\n      const viewModelNames = this['viewModelNames'];\r\n      if (viewModelNames && Array.isArray(viewModelNames)) {\r\n        viewModelNames.forEach(name => {\r\n          this[name] = null;\r\n        });\r\n      }\r\n      this.appContext.unregisterFromManager();\r\n    }\r\n    if (this.bindingData) {\r\n      this.bindingData.dispose();\r\n      // this.bindingData = null;\r\n    }\r\n    if (this.viewModel) {\r\n      this.viewModel.dispose();\r\n    }\r\n    if (this.form) {\r\n      this.form.dispose();\r\n      this.form = null;\r\n    }\r\n    if (this.commandBus) {\r\n      this.commandBus.dispose();\r\n      this.commandBus = null;\r\n    }\r\n    TranslateService.dispose();\r\n    // this.root = null;\r\n    // this.parent = null;\r\n    // this.uiState = null;\r\n    this.frameComponent = null;\r\n    this.repository = null;\r\n    // this.stateMachine = null;\r\n    // this.appContext = null;\r\n    this.exceptionHandler = null;\r\n    this.expressionManager = null;\r\n    this.expressionEngineImpl = null;\r\n    this.variableParseService = null;\r\n    this.eventBus = null;\r\n    this.translate = null;\r\n    this.injector = null;\r\n    this.expressionResult = null;\r\n    UserSettingsService.setUserSettings(null);\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  /**\r\n   * 通过组件标识获取对应的组件实例\r\n   * @param id 组件标识\r\n   * @returns \r\n   */\r\n  public getComponentById<T>(id: string): T {\r\n    const components = this.componentRefManager.get(id);\r\n    if (components && components.length > 0) {\r\n      const component = components[0] as T;\r\n      return component;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取指定标识的所有组件\r\n   * @param id 组件标识\r\n   */\r\n  public getComponentsById<T>(id: string): T[] {\r\n    return this.componentRefManager.get(id) as T[];\r\n  }\r\n  bindInjector(componentInjector: Injector) {\r\n    this.injector = componentInjector;\r\n  }\r\n\r\n  // #region 初始化\r\n\r\n  /**\r\n   * 初始化\r\n   * @todo:\r\n   * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext\r\n   * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    this.frameComponent = frameComponent;\r\n    this.initializeBindingData();\r\n    this.initializeStateMachine();\r\n    this.initializeUiState();\r\n    this.initializeForm();\r\n    this.initializeCommandBus();\r\n    this.initializeViewModel();\r\n    this.registerExceptionHandler();\r\n    this.initExpression();\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n  public initExpression() {\r\n    this.expressionEngineImpl = this.injector.get<ExpressionEngineImpl>(ExpressionEngineImpl, null);\r\n    this.expressionManager = this.injector.get<ExpressionManager>(ExpressionManager, null);\r\n    const expressionResultFactory = this.injector.get<ExpressionResultFactory>(ExpressionResultFactory, null);\r\n    this.expressionResult = this.injector.get<ExpressionResult>(ExpressionResult, null);\r\n  }\r\n  /**\r\n   * 订阅异常消息\r\n   */\r\n  protected registerExceptionHandler() {\r\n    // tslint:disable: no-string-literal\r\n    const formAppContext = this.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    window[window.location.href] = applicationId;\r\n    if (this.exceptionHandler !== null) {\r\n      const applicationContext = window[applicationId] = window[applicationId] || {};\r\n      if (this.eventBus !== null && this.isRootFrameContext()) {\r\n        applicationContext.isExceptionHandlerExist = true;\r\n        this.exceptionHandler.setContext(this.appContext);\r\n        this.eventBus.on('Exception', '', 'onException', formAppContext, (error) => {\r\n          if (this.isDestoried === true) {\r\n            return;\r\n          }\r\n          if (error && error.error) {\r\n            try {\r\n              error.error.__frame_context__ = this;\r\n            } catch { }\r\n          }\r\n          this.exceptionHandler.handle(error);\r\n        });\r\n      }\r\n      this.destorySignal.subscribe(() => {\r\n        this.eventBus.off('Exception', '', 'onException', formAppContext);\r\n      });\r\n    }\r\n  }\r\n  protected registerAppContextDestroyEvent() {\r\n    if (this.appContext && this.appContext.destorySignal) {\r\n      this.appContext.destorySignal.subscribe((options: any) => {\r\n        if (this.stateMachine) {\r\n          // 仅当菜单关闭时销毁\r\n          if (!(options && options.opportunity === DestroyOpportunity.AppContextDestroy)) {\r\n            this.stateMachine.dispose();\r\n            this.stateMachine = null;\r\n          }\r\n        }\r\n        if (this.repository) {\r\n          this.repository.dispose();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取表单appcontext，即最上层appcontext\r\n   */\r\n  public getFormAppContext() {\r\n    return this.appContext;\r\n  }\r\n  /**\r\n   * 获取frameId\r\n   * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId\r\n   */\r\n  public getFrameId(relativeFrameId: string) {\r\n    if (!relativeFrameId) {\r\n      return this.frameId;\r\n    }\r\n    if (this.namespace && this.namespace.length > 0) {\r\n      return `${this.namespace}_${relativeFrameId}`;\r\n    } else {\r\n      return relativeFrameId;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化Repository\r\n   */\r\n  private initializeRepository() {\r\n\r\n    this.repository.setPaginationConfig(this.repository.paginationInfo);\r\n  }\r\n\r\n  private initializeForm() {\r\n    // 设置Form语言服务\r\n    // this.form.setTranslateService(translateService);\r\n    // 初始化Form，提取FormControl定义，添加FormControl\r\n    // this.form.init(this.bindingData, this.metadata.bindingTo, this);\r\n    // Form\r\n    this.form = this.injector.get<Form>(Form, null);\r\n    if (this.form) {\r\n      // 设置Form语言服务\r\n      this.form.setTranslateService(this.injector.get(TranslateToken, null));\r\n      // 初始化Form，提取FormControl定义，添加FormControl\r\n      const bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;\r\n      this.form.init(this.bindingData, bindingPath, this);\r\n    }\r\n  }\r\n\r\n  private initializeStateMachine() {\r\n    // StateMachine 状态机需要在绑定数据之后加载\r\n    this.stateMachine = this.injector.get<StateMachine>(StateMachine, null);\r\n    if (this.stateMachine) {\r\n      this.stateMachine.initialize(this, this.variableParseService);\r\n    }\r\n  }\r\n\r\n  private initializeCommandBus() {\r\n    const handlerRegistry = this.injector.get<CommandHandlerRegistry>(CommandHandlerRegistry,\r\n      new CommandHandlerRegistry(this.metadata.commandHandlers));\r\n    const extendsRegistry = this.injector.get<CommandHandlerExtenderRegistry>(CommandHandlerExtenderRegistry,\r\n      new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));\r\n    const commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);\r\n    this.commandBus = new CommandBus(commandHandlerFactory);\r\n  }\r\n\r\n  /**\r\n   * 初始化ViewModel\r\n   * @todo\r\n   * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；\r\n   * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；\r\n   */\r\n  private initializeViewModel() {\r\n    if (!this.metadata.bindingTo) {\r\n      this.metadata.bindingTo = this.viewModel.bindingPath;\r\n    }\r\n    this.viewModel.init(this);\r\n    this.regViewModel(this.viewModel);\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化BindingData\r\n   * @summary\r\n   * 老表单：repositoryName为空，复制当前Repository里的数据；\r\n   * 新表单：repositoryName有值，引用全局BindingData里的数据；\r\n   */\r\n  private initializeBindingData() {\r\n    const repositoryName = this.repository.name;\r\n    const isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;\r\n    if (repositoryName && isRunAtHighSpeedMode) {\r\n      const repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);\r\n      this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);\r\n      this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;\r\n      this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n    } else {\r\n      this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if (change.type === ChangeType.GlobalSelectionChanged) {\r\n          this.appContext.handleSelectChange(change, this);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化UIState\r\n   * 合并路由参数到UIState中\r\n   */\r\n  private initializeUiState() {\r\n    const isInFramework = window.location.href.indexOf('platform') > -1;\r\n    const paramTypeTransform = this.injector.get<boolean>(PARAM_TYPE_TRANSFORM_TOKEN, false);\r\n    // 获取UIState\r\n    this.uiState = this.injector.get<UIState>(UIState, null);\r\n    if (!this.uiState) {\r\n      return;\r\n    }\r\n    this.uiState.paramTypeTransform = paramTypeTransform;\r\n    this.uiState.initialize(this);\r\n    // 获取路由参数\r\n    const url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';\r\n    const routerParamService = new RouterParamService();\r\n    const routerParams = routerParamService.getParams(url);\r\n\r\n    // 在UIState为路由参数创建属性\r\n    Object.keys(routerParams).forEach((propName: string) => {\r\n      Object.defineProperty(this.uiState, propName, {\r\n        get: () => {\r\n          return routerParams[propName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册子ViewModel\r\n   * @todo\r\n   * 1、propName写死了\r\n   */\r\n  public regViewModel(viewModel: ViewModel): void {\r\n    if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {\r\n      this.appContext.viewModelManager.register(viewModel.name, viewModel);\r\n    }\r\n    const className = viewModel.constructor.name;\r\n    const parentContext = this.parent;\r\n    let parentViewModel = null;\r\n    if (parentContext && parentContext.viewModel) {\r\n      parentViewModel = parentContext.viewModel;\r\n    }\r\n    if (!parentViewModel) {\r\n      return;\r\n    }\r\n    // 优先使用生成器生成的name\r\n    const childViewModels = parentViewModel['childViewModels'];\r\n    let viewModelName = null;\r\n    if (childViewModels) {\r\n      const name = viewModel.constructor.name;\r\n      viewModelName = childViewModels[viewModel.name] || childViewModels[name];\r\n    } else if (className.length === 1) {\r\n      const classNameTokens = viewModel.name.split('-').map((nameToken, index) => {\r\n        if (index > 0 && nameToken.length) {\r\n          const pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return pasicalName;\r\n        } else if (index === 0 && nameToken.length) {\r\n          const camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return camelName;\r\n        }\r\n        return nameToken;\r\n      });\r\n      viewModelName = classNameTokens.join('');\r\n    } else if (viewModel[\"relateChildName\"]) {\r\n      // 增加该参数的目的  是为了解析表单可以进行和生成型相同的层级结构\r\n      viewModelName = viewModel[\"relateChildName\"];\r\n    }\r\n    // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则\r\n    if (!viewModelName) {\r\n      viewModelName = className[0].toLowerCase() + className.substring(1, className.length);\r\n    }\r\n    parentViewModel['viewModelNames'] = parentViewModel['viewModelNames'] || [];\r\n    parentViewModel[viewModelName] = viewModel;\r\n    parentViewModel['viewModelNames'].push(viewModelName);\r\n    viewModel.bindToParent(parentViewModel);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 检查是否为根FrameContext\r\n   * @summary\r\n   * 检查该FrameContext是不是所在AppContext中的根FrameContext\r\n   */\r\n  public isRootFrameContext() {\r\n    return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);\r\n  }\r\n  /**\r\n   * 通过namespace获取当前表单的root-framecontext(非整个表单)\r\n   * @description\r\n   * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext\r\n   */\r\n  public getVirtualRootFrameContext() {\r\n    let formFrameContext: FrameContext = this;\r\n    let parent = this.parent;\r\n    while (parent) {\r\n      // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext\r\n      if (parent.namespace === this.namespace) {\r\n        formFrameContext = parent;\r\n        parent = parent.parent;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return formFrameContext;\r\n  }\r\n\r\n\r\n  public getContextById(identify: string): any {\r\n    return this.appContext.getContextById(identify);\r\n  }\r\n\r\n  public getViewModel(viewModelName: string): ViewModel {\r\n    const renderAppContext = this.appContext;\r\n    if (renderAppContext) {\r\n      return renderAppContext.viewModelManager.getViewModelByName(viewModelName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public attachViewComponent(viewComponent: FrameComponent) {\r\n    this.frameComponent = viewComponent;\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n\r\n  public invoke(actionPath: string, $event: any) {\r\n    const actionBindingPath = actionPath.split('.');\r\n    const actionName = actionBindingPath[actionBindingPath.length - 1];\r\n    const bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :\r\n      this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);\r\n    if (!bindingViewModel) {\r\n      alert(`未匹配到'${actionPath}'命令的视图模型，请检查事件是否配置正确。`);\r\n    }\r\n    return bindingViewModel[actionName]($event);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-12 14:59:22\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-15 17:26:07\r\n */\r\n\r\nimport { Injector, Injectable, InjectFlags, Optional, ChangeDetectorRef, OnDestroy, ElementRef, Renderer, Renderer2, RendererFactory2, ComponentRef, OnInit } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { Subscription, Declaration } from '../event-mechanism/index';\r\nimport { EventPipe } from '../event-bus-new/index';\r\nimport { ComponentType, IDisposable } from '../core/index';\r\nimport { FRAME_COMPONENT_INIT_HANDLER_TOKEN, onFrameComponentInit } from './tokens';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nabstract class FrameComponent implements OnInit, OnDestroy, IDisposable {\r\n\r\n  /**\r\n   * 变更检测器\r\n   */\r\n  private cd: ChangeDetectorRef;\r\n\r\n  /**\r\n   * 框架ID\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * 框架上下文\r\n   */\r\n  public context: FrameContext;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  public subscription: Subscription;\r\n\r\n  /**\r\n   * 公开事件\r\n   */\r\n  public declaration: Declaration;\r\n\r\n  /**\r\n   * 该组件订阅的EventPipes\r\n   */\r\n  private eventPipes: IDisposable[];\r\n\r\n  private initialized = false;\r\n  /**\r\n   * 组件销毁流\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  /**\r\n   * 组件类型\r\n   */\r\n  public componentType: ComponentType;\r\n  /**\r\n   * 框架构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(protected injector: Injector) {\r\n    this.context = this.injector.get<FrameContext>(FrameContext, null);\r\n    if (this.context) {\r\n      this.initialize();\r\n    }\r\n    this.destorySignal = new Subject<any>();\r\n    // this.context.init(this);\r\n    // this.viewModel = this.context.viewModel;\r\n    // this.cd = this.getChangeDetectorRef();\r\n\r\n    // // 必须先执行context的初始化，然后再初始化Subscription\r\n    // this.initPublicEvent();\r\n\r\n    // this.initSubscription();\r\n\r\n    // this.restComponent();\r\n  }\r\n  /**\r\n   * 是否为表格组件\r\n   * @description 返回true/false时可以信任，但如果返回的是undefined则不应信任\r\n   * @warning 该属性依赖了生成代码，如果非标准的生成型工程也会导致判断失败。\r\n   */\r\n  public get isGridComponent() {\r\n    if (this.context && this.context.viewModel) {\r\n      const dataGridColumnsName = this.context.viewModel['dataGridColumnsName'] || null;\r\n      return dataGridColumnsName ? true : false;\r\n    }\r\n    return undefined;\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.eventPipes) {\r\n      this.eventPipes.forEach((eventPipe: IDisposable) => {\r\n        (eventPipe as EventPipe).disposeByCaller(this);\r\n      });\r\n    }\r\n    this.cd = null;\r\n    // this.viewModel = null;\r\n    this.context.dispose();\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initialize();\r\n  }\r\n\r\n  private initialize() {\r\n    if (!this.initialized) {\r\n      this.context.init(this);\r\n      this.viewModel = this.context.viewModel;\r\n      this.cd = this.getChangeDetectorRef();\r\n\r\n      // 必须先执行context的初始化，然后再初始化Subscription\r\n      this.initPublicEvent();\r\n\r\n      this.initSubscription();\r\n\r\n      this.restComponent();\r\n\r\n      this.onFrameComponentInit();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n  /**\r\n   * 执行组件初始化\r\n   */\r\n  private onFrameComponentInit() {\r\n    const frameComponentInitHandlers = this.injector.get<onFrameComponentInit[]>(FRAME_COMPONENT_INIT_HANDLER_TOKEN, null);\r\n    if (frameComponentInitHandlers && Array.isArray(frameComponentInitHandlers) && frameComponentInitHandlers.length > 0) {\r\n      frameComponentInitHandlers.forEach((handler: onFrameComponentInit) => {\r\n        handler.onComponentInit(this.context);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取变更检测器实例\r\n   * @todo：应该通过注入获取，但注入会引起表单编译。\r\n   */\r\n  private getChangeDetectorRef() {\r\n\r\n    // const cd = this.get<ChangeDetectorRef>(ChangeDetectorRef, null, InjectFlags.Optional);\r\n    const cd = this.injector.get(ChangeDetectorRef, null);\r\n    return cd;\r\n  }\r\n\r\n  /**\r\n   * 将当前组件脱离变更检测树\r\n   */\r\n  public detach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detach();\r\n  }\r\n\r\n  /**\r\n   * 将当前组件重新加入变更检测树\r\n   */\r\n  public reattach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.reattach();\r\n  }\r\n\r\n  /**\r\n   * 对当前组件进行一次变更检查\r\n   */\r\n  public detectChanges() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * 检测ChangeDetection是否有效\r\n   * @todo: Can't be depend on the destroyed property, destroyed.\r\n   */\r\n  private isCdValid() {\r\n    return this.cd && this.cd['destroyed'] === false || false;\r\n  }\r\n\r\n  /**\r\n   * 重置组件状态\r\n   * @todo：AppContext是全局的，\r\n   */\r\n  public restComponent() {\r\n\r\n    if (this.context !== this.context.root) {\r\n      return;\r\n    }\r\n\r\n    // 1、如果AppContext不是root并且父AppContext也不是root不清理;\r\n    // 2、表单Module里注入了FARRIS_DEVKIT_APP_PROVIDERS里面有一个冗余的AppContext注入\r\n    //    导致所有AppContext的根是该冗余的AppContext，所以要检测parent.parent。\r\n    // 只清理根组件的session\r\n    if (this.context.appContext.parent !== null && this.context.appContext.parent.parent !== null) {\r\n      return;\r\n    }\r\n\r\n    // Repository被注册到全局了，模块依赖注入中的对象，没有重置时机，临时在根组件中进行注销。\r\n    // @todo：应该清理全部repository，目前缺少全局管理所有Repository的地方。\r\n    this.context.repository.reset();\r\n    // 重置组件绑定数据\r\n    this.context.bindingData.reset();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 初始化事件订阅\r\n   */\r\n  private initSubscription() {\r\n    this.subscription = this.getSubscription();\r\n    if (!this.subscription) {\r\n      return;\r\n    }\r\n\r\n    this.eventPipes = this.subscription.init(this);\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取component对应的订阅\r\n   * @returns \r\n   */\r\n  public getSubscription() {\r\n    return this.injector.get<Subscription>(Subscription, null);\r\n  }\r\n\r\n  private initPublicEvent() {\r\n\r\n    this.declaration = this.getDeclaration();\r\n    if (!this.declaration) {\r\n      return;\r\n    }\r\n\r\n    this.declaration.init(this);\r\n  }\r\n\r\n  /**\r\n   * 获取当前component对应的declaration\r\n   * @returns \r\n   */\r\n  public getDeclaration() {\r\n    return this.injector.get<Declaration>(Declaration, null);\r\n  }\r\n\r\n  /**\r\n   * 事件触发器，触发事件发布\r\n   * @param eventName 待发布事件\r\n   */\r\n  public trigger(eventName: string, params?: any) {\r\n    const subscription = this.context.commandBus.executingCommandCount$.subscribe((executingCommandCount: number) => {\r\n      if (executingCommandCount !== 0) {\r\n        return;\r\n      }\r\n      this.innerTrigger(eventName, params);\r\n\r\n      // @todo\r\n      // subscription存在未undefine的情况，待进一步排查。\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      } else {\r\n        setTimeout(() => {\r\n          if (subscription) {\r\n            subscription.unsubscribe();\r\n          }\r\n        }, 0);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 内部触发变更检测\r\n   */\r\n  private innerTrigger(eventName: string, params?: any) {\r\n\r\n    // 根据事件名，查找对应的事件处理器\r\n    const eventHandler: any = this.declaration && this.declaration[eventName];\r\n    if (!eventHandler) {\r\n      return;\r\n    }\r\n    // 执行事件\r\n    eventHandler(params);\r\n  }\r\n\r\n}\r\n\r\nexport { FrameComponent };\r\n","\r\n/**\r\n * 上下文事件\r\n */\r\nclass FrameEvent {\r\n\r\n  /**\r\n   * 事件类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  data?: any;\r\n\r\n  /**\r\n   * 框架id数组\r\n   */\r\n  frameIds?: string[];\r\n}\r\n\r\nexport { FrameEvent };\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { FrameEvent } from './frame_event';\r\n\r\n\r\n/**\r\n * 框架事件总线\r\n */\r\n@Injectable()\r\nclass FrameEventBus {\r\n\r\n  /**\r\n   * @todo 暂不实现对订阅的注销\r\n   */\r\n  private subscriptions: any;\r\n\r\n  /**\r\n   * 事件流\r\n   */\r\n  public events: Subject<FrameEvent> = new Subject<FrameEvent>();\r\n\r\n\r\n  /**\r\n   * 注册事件处理\r\n   */\r\n  on(eventType: string, eventHandler: any, frameId: string) {\r\n    this.events.pipe(filter((event: FrameEvent) => {\r\n      if (event.type !== eventType) {\r\n        return false;\r\n      }\r\n      return !event.frameIds || event.frameIds.indexOf(frameId) > -1;\r\n    })).subscribe(eventHandler);\r\n  }\r\n\r\n  /**\r\n   * 取消事件处理\r\n   */\r\n  off(eventType: string, frameId: string): void {\r\n    throw new Error('暂不实现');\r\n  }\r\n\r\n  /**\r\n   * 触发事件\r\n   */\r\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\r\n    const event: FrameEvent = {\r\n      type: eventType,\r\n      data: eventData,\r\n      frameIds: frameIds\r\n    };\r\n    this.events.next(event);\r\n  }\r\n}\r\n\r\nexport { FrameEventBus };\r\n","/**\r\n * 命令处理器工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { CommandHandler } from './command_handler';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtender } from './command_handler_extender';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\n\r\n/**\r\n * 命令处理器工厂\r\n */\r\n@Injectable()\r\nclass CommandHandlerFactory {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlerRegistry  命令处理注册器\r\n   * @param extenderRegistry 命令处理扩展注册器\r\n   */\r\n  constructor(\r\n    private handlerRegistry: CommandHandlerRegistry,\r\n    private extenderRegistry: CommandHandlerExtenderRegistry,\r\n    private frameContext: FrameContext,\r\n    private variableParseService: VariableParseService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 创建命令处理器\r\n   * @param   commandName 命令名称\r\n   * @returns 对应的命令处理器实例\r\n   */\r\n  public create(commandName: string): CommandHandler {\r\n    const rawHandler = this.handlerRegistry.get(commandName);\r\n    rawHandler.init(this.frameContext, this.variableParseService);\r\n    const extenders = this.extenderRegistry.get(commandName);\r\n\r\n    // 遍历extenders，依次对handler进行扩展\r\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\r\n      return extender.extend(handler);\r\n    }, rawHandler);\r\n  }\r\n  public dispose() {\r\n    this.handlerRegistry.dispose();\r\n    this.extenderRegistry.dispose();\r\n    this.frameContext = null;\r\n    this.variableParseService = null;\r\n  }\r\n}\r\n\r\nexport { CommandHandlerFactory };\r\n","/**\r\n * CommandBus相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { IDisposable } from '../core';\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Command } from './command';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\n\r\n/**\r\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\r\n */\r\n@Injectable()\r\nclass CommandBus implements IDisposable{\r\n\r\n  /**\r\n   * handler工厂\r\n   */\r\n  private handlerFactory: CommandHandlerFactory;\r\n\r\n  /**\r\n   * 正在执行的命令数量流（请勿使用，后果自负）\r\n   */\r\n  public executingCommandCount$: BehaviorSubject<number>;\r\n\r\n  /**\r\n   * 正在执行的命令数量\r\n   */\r\n  private executingCommands: Command[];\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(handlerFactory: CommandHandlerFactory) {\r\n    this.handlerFactory = handlerFactory;\r\n    this.executingCommands = [];\r\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 派发命令\r\n   * @param command 要派发的命令\r\n   */\r\n  public dispatch(command: Command): Observable<any> {\r\n    const commandResult$ = new Subject();\r\n    this.executeCommand(command).subscribe({\r\n      next: (lastTaskResult: any) => {\r\n        commandResult$.next(lastTaskResult);\r\n        commandResult$.complete();\r\n      },\r\n      complete: () => {\r\n        commandResult$.complete();\r\n        this.removeCommandFromExecutingQueue(command);\r\n      },\r\n      error: (error: any) => {\r\n        commandResult$.error(error);\r\n        this.removeCommandFromExecutingQueue(command, !this.is401Error(error));\r\n      }\r\n    });\r\n    return commandResult$;\r\n  }\r\n\r\n  /**\r\n   * dispose\r\n   */\r\n  public dispose(){\r\n    this.handlerFactory.dispose();\r\n  }\r\n  /**\r\n   * 执行命令并返回最后一个任务的执行结果流\r\n   */\r\n  private executeCommand(command: Command): Observable<any> {\r\n    this.addCommandToExecutingQueue(command);\r\n    const commandName = command.name;\r\n    const handler = this.handlerFactory.create(commandName);\r\n    const lastTaskResult$ = handler.execute(command);\r\n    return lastTaskResult$;\r\n  }\r\n\r\n\r\n  /**\r\n   * 添加到执行队列\r\n   */\r\n  private addCommandToExecutingQueue(command: Command) {\r\n    this.executingCommands.push(command);\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 从执行队列中移除\r\n   */\r\n  private removeCommandFromExecutingQueue(command: Command, postOrNot: boolean = true) {\r\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\r\n      return executingCommand !== command;\r\n    });\r\n    if (postOrNot === true) {\r\n      this.executingCommandCount$.next(this.executingCommands.length);\r\n    }\r\n  }\r\n\r\n  private is401Error(error: HttpErrorResponse) {\r\n    // 如果error为空，不认为是401错误\r\n    return error && error.status === 401;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandBus };\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { isObservable, of, Subject } from 'rxjs';\r\nimport { CommandContext } from './command_context';\r\nimport { CommandHandler } from './command_handler';\r\nimport {\r\n  ControllerMethod, DeterminingStage, ExecutingStage,\r\n  ForkStage, MethodStage, StageParam\r\n} from './dynamic_command_handler_metadata';\r\n\r\n/**\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *     commandName: 'add1'\r\n * })\r\n * export class add1Handler extends CommandHandler {\r\n *     constructor(\r\n *         public _ListDataService1: ListDataService1,\r\n *         public _StateMachineService1: StateMachineService1\r\n *     ) {\r\n *         super();\r\n *     }\r\n *\r\n *     schedule() {\r\n *         this.addTask('append', (context: CommandContext) => {\r\n *             const args = [];\r\n *             return this.invoke(this._ListDataService1, 'append', args, context);\r\n *         });\r\n *\r\n *         this.addTask('transit', (context: CommandContext) => {\r\n *             const args = [\r\n *                 'Create'\r\n *                     ];\r\n *             return this.invoke(this._StateMachineService1, 'transit', args, context);\r\n *         });\r\n *\r\n *         this.addLink('append', 'transit', `1==1`);\r\n *     }\r\n * }\r\n */\r\n\r\nconst controllerMap = {\r\n  imports: {\r\n\r\n  }\r\n};\r\n\r\ndeclare const System: any;\r\n\r\nexport class DynamicCommandHandler extends CommandHandler {\r\n\r\n  constructor(public commandName: string, private method: ControllerMethod) {\r\n    super();\r\n  }\r\n\r\n  public dynamicInvoke(serviceTocken: string, method: string, args: StageParam[], context: CommandContext) {\r\n    const serviceInstance = context.frameContext.injector.get(serviceTocken, null);\r\n    if (serviceInstance) {\r\n      this.setContextToServiceInstance(serviceInstance, context);\r\n      const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n      const parsedArgs = parsedStageParams.map(param => param.expression);\r\n      // tslint:disable-next-line: ban-types\r\n      const serviceMethod = serviceInstance[method] as Function;\r\n      return serviceMethod.apply(serviceInstance, parsedArgs);\r\n    }\r\n  }\r\n\r\n  public dynamicInvoke2(methodObject: ExecutingStage, context: CommandContext) {\r\n    const { source: serviceUri, service: serviceName, method } = methodObject;\r\n    const args = methodObject.params.map(stageParam => {\r\n      return Object.assign({}, stageParam);\r\n    });\r\n    const result$ = new Subject();\r\n    const serviceSpecifer = serviceUri && serviceUri.toLowerCase();\r\n    if (serviceSpecifer) {\r\n      let serviceModule = controllerMap.imports[serviceSpecifer];\r\n      if (serviceModule) {\r\n        // 表示缓存中存在\r\n        setTimeout(() => {\r\n          this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);\r\n        }, 0);\r\n      } else {\r\n        //  表示不存在\r\n        System.import(serviceSpecifer)\r\n          .then((serviceModule: any) => {\r\n            if (serviceModule) {\r\n              controllerMap.imports[serviceSpecifer] = serviceModule;\r\n            }\r\n            this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);\r\n          });\r\n      }\r\n    }\r\n    return result$;\r\n  }\r\n\r\n  private executeWithServiceModule(serviceModule: any, serviceName: string, context: CommandContext, args: StageParam[], method: string, result$: Subject<unknown>) {\r\n    const serviceConstructor = serviceModule[serviceName];\r\n    if (serviceConstructor) {\r\n      const originalContextInjector = context.frameContext.injector;\r\n      let serviceInstance;\r\n      // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);\r\n      if (context.frameContext.injector.get(serviceName, null)) {\r\n        serviceInstance = context.frameContext.injector.get(serviceName);\r\n      } else {\r\n        const resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);\r\n        const reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);\r\n        context.frameContext.injector = reflectiveInjector;\r\n        serviceInstance = reflectiveInjector.get(serviceName, null);\r\n      }\r\n\r\n      if (serviceInstance) {\r\n        this.setContextToServiceInstance(serviceInstance, context);\r\n        const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n        const parsedArgs = parsedStageParams.map(param => param.expression);\r\n        // tslint:disable-next-line: ban-types\r\n        const serviceMethod = serviceInstance[method] as Function;\r\n        if (!serviceMethod) {\r\n          console.error(\"未找到对应的命令:\" + method);\r\n          return;\r\n        }\r\n        const serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);\r\n        const result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);\r\n        result$$.subscribe({\r\n          next: (result: any) => {\r\n            result$.next(result);\r\n          },\r\n          error: (error: any) => {\r\n            result$.error(error);\r\n          },\r\n          complete: () => {\r\n            result$.complete();\r\n            context.frameContext.injector = originalContextInjector;\r\n          },\r\n        });\r\n        // return serviceMethod.apply(serviceInstance, parsedArgs);\r\n      }\r\n    }\r\n  }\r\n\r\n  schedule() {\r\n    this.scheduleStages(this.method.stages, null);\r\n    // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n    //   if (currentStage.type === '0') {\r\n    //     this.addTask(currentStage.name, (context: CommandContext) => {\r\n    //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n    //     });\r\n    //     if (preStage) {\r\n    //       this.addLink(preStage.name, currentStage.name, `1===1`);\r\n    //     }\r\n    //   } else if (currentStage.type === '2') {\r\n\r\n    //   } else {\r\n    //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n    //   }\r\n    //   return currentStage;\r\n    // }, null);\r\n  }\r\n\r\n  scheduleStages(stages: MethodStage[], initialStage: MethodStage) {\r\n    stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n      if (currentStage.type === 'executing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n        });\r\n      } else if (currentStage.type === 'fork') {\r\n        const forkStages = (currentStage as ForkStage).stages;\r\n        forkStages.forEach(forkStage => {\r\n          this.scheduleStages(forkStage.stages, forkStage);\r\n        });\r\n        this.scheduleStages((currentStage as DeterminingStage).stages, currentStage);\r\n      } else if (currentStage.type === 'determing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return of(true);\r\n        });\r\n      } else {\r\n        throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n      }\r\n      if (preStage) {\r\n        const condition = preStage.type === 'determing' ? (preStage as DeterminingStage).condition : `1===1`;\r\n        this.addLink(preStage.name, currentStage.name, condition);\r\n      }\r\n      return currentStage;\r\n    }, initialStage);\r\n  }\r\n\r\n  private loadProvidersFromModule(serviceModule: { [propertyName: string]: any }) {\r\n    const providerArray = [];\r\n    for (const propertyName in serviceModule) {\r\n      if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {\r\n        const propertyValue = serviceModule[propertyName];\r\n        if (this.isInjectableService(propertyValue)) {\r\n          // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;\r\n          const providerName = propertyName;\r\n          providerArray.push({ provide: providerName, useClass: propertyValue });\r\n          providerArray.push(propertyValue);\r\n        }\r\n      }\r\n    }\r\n    const resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);\r\n    return resolvedReflectiveProviders;\r\n  }\r\n\r\n  private isInjectableService(propertyValue: any) {\r\n    let hasInjectableDecorator = false;\r\n    const isFunction = propertyValue instanceof Function;\r\n    if (isFunction && propertyValue.hasOwnProperty('decorators')) {\r\n      const decorators = propertyValue.decorators as any[];\r\n      const injectableDecorators = decorators.filter(decorator => {\r\n        if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {\r\n          return decorator;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    } else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {\r\n      const decorators = propertyValue.__annotations__ as any[];\r\n      const injectableDecorators = decorators.filter(decoratorFactory => {\r\n        if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {\r\n          return decoratorFactory;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    }\r\n    return hasInjectableDecorator;\r\n  }\r\n}\r\n","import { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandBus } from './command_bus';\r\n\r\n\r\nexport const COMMAND_PROVIDERS = [\r\n  CommandHandlerRegistry,\r\n  CommandHandlerExtenderRegistry,\r\n  CommandHandlerFactory,\r\n  CommandBus,\r\n];\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IValidationHandler } from './types';\r\nexport const VALIDATION_HANDLER = new InjectionToken<IValidationHandler>('@farris/common-service ValidationHandler');","import { Provider } from '@angular/core';\r\nimport { VARIABLE_PROVIDERS } from './variable/index';\r\nimport { AppContext, AppContextManager } from './app/index';\r\n\r\nimport { RestfulService } from './rest/index';\r\nimport { RouterParamService } from './misc/index';\r\n\r\nimport { COMMAND_PROVIDERS } from './command/index';\r\nimport { FrameContext, FrameEventBus } from './frame/index';\r\nimport { Subscription } from './event-mechanism/index';\r\nimport { EventBus } from './event-bus-new/index';\r\nimport { RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener } from './listener/index';\r\nimport { ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor, ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory } from './expression/index';\r\nimport { RepositoryEffector, UIStateEffector, ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN, DependencyEffector, RelativeEffector, ValidateEffector, RequiredEffector, VisibleEffector } from './effector/index';\r\nimport { EntityDependencyResolver, StateDependencyResolver, ResolverRegistry, CommentDependencyResolver, RESOLVER_TOKEN, ResolveService } from './resolver/index';\r\nimport { RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler, StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler, BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry, BindingDataSelectionChangedEventHandler } from './event-handler/index';\r\n\r\n// --------------------------------------------------------------------------------\r\n// Legacy\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for compatibility.\r\n */\r\nexport const FARRIS_DEVKIT_APP_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  VARIABLE_PROVIDERS,\r\n\r\n  AppContext,\r\n  RouterParamService,\r\n  FrameEventBus,\r\n  AppContextManager\r\n];\r\n\r\n// --------------------------------------------------------------------------------\r\n// Current\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for DevkitModule.\r\n */\r\nexport const FARRIS_DEVKIT_MODULE_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  RouterParamService,\r\n  VARIABLE_PROVIDERS,\r\n  AppContextManager,\r\n];\r\n\r\n/**\r\n * Providers for root frame components.\r\n */\r\nexport const FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  AppContext,\r\n];\r\n/**\r\n * 表达式provider\r\n * @description 放置到root-component，整个表单只需要注入一次\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  ListenerRegistry,\r\n  Listeners,\r\n  EffectorRegistry,\r\n  EffectorFactory,\r\n  ExpressionRegistry,\r\n  ExpressionEventEmitter,\r\n  ExpressionExecutor,\r\n  ExpressionManager,\r\n  ExpressionResult,\r\n  ExpressionResultFactory,\r\n  { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true },\r\n  ResolverRegistry,\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true},\r\n  EventHandlerRegistry,\r\n  ExpressionEngineImpl,\r\n  ResolveService\r\n];\r\n/**\r\n * 表达式监听器provider\r\n * @description 放置到每个表单的root上，组合表单root也需要放置\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS: Provider[] = [\r\n  { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true }\r\n];\r\n\r\nexport const FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS: Provider[] = [\r\n  { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RelativeEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true }\r\n];\r\n\r\n/**\r\n * Providers for frame components.\r\n */\r\nexport const FARRIS_DEVKIT_FRAME_PROVIDERS = [\r\n  COMMAND_PROVIDERS,\r\n  FrameContext\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { FARRIS_DEVKIT_MODULE_PROVIDERS } from './providers';\r\n/**\r\n * DevkitModule\r\n */\r\n@NgModule({\r\n  providers: FARRIS_DEVKIT_MODULE_PROVIDERS\r\n})\r\nclass DevkitModule {\r\n}\r\n\r\nexport { DevkitModule };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, Change } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n * @deprecated 已废弃\r\n */\r\n@Injectable()\r\nclass DeprecatedBindingDataChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    return null;\r\n  }\r\n}\r\nexport { DeprecatedBindingDataChangeListener };\r\n","export type Type = (...args) => any;\r\nexport type TTL = number | Date;\r\nexport type Key = string | number | ICacheKey | ICacheKeyBuilder;\r\nexport interface ICacheKeyBuilder<T = any[], U = any> {\r\n  (context: U, args: T): any;\r\n}\r\nexport enum CacheReturnType {\r\n  Static = 1,\r\n  Promise\r\n}\r\nexport interface ICacheKey { }\r\nexport interface ICacheKeyCompare {\r\n  compare(key1: ICacheKey, key2: ICacheKey): boolean;\r\n}\r\nexport class CacheKeyCompare implements ICacheKeyCompare {\r\n  compare(key1: string | number, key2: string | number) {\r\n    return key1 === key2;\r\n  }\r\n}\r\nexport interface ICacheOptions<T> {\r\n  key?: Key;\r\n  // returnType?: CacheReturnType;\r\n  ttl?: TTL;\r\n  cacheKeyCompare?: ICacheKeyCompare;\r\n  provider: ICacheProvider<T>\r\n}\r\nexport interface ICacheObject<TValue> {\r\n  key: Key,\r\n  content: TValue,\r\n  ttl: TTL,\r\n  createAt: Date,\r\n  isExpired(): boolean;\r\n}\r\nexport interface ICacheProvider<TValue> {\r\n  has(key: Key): boolean;\r\n  length(): number;\r\n  set(value: ICacheObject<TValue>);\r\n  get(key: Key): ICacheObject<TValue>;\r\n  delete(key: Key);\r\n  clear();\r\n  keys(): IterableIterator<Key>;\r\n  values(): IterableIterator<ICacheObject<TValue>>;\r\n}\r\n","import { ICacheObject, Key, TTL } from \"../types\";\r\n\r\nexport class CacheObject<T> implements ICacheObject<T>{\r\n  public createAt: Date;\r\n  constructor(public key: Key, public content: T, public ttl: TTL) {\r\n    this.createAt = new Date();\r\n  }\r\n  public isExpired(): boolean {\r\n    if (typeof this.ttl === 'number') {\r\n      return Date.now().valueOf() > this.createAt.valueOf() + this.ttl;\r\n    } else {\r\n      return Date.now() > this.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key, TTL } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n\r\nexport class CacheContainer<T>{\r\n  constructor(protected provider: ICacheProvider<T>) {\r\n    this.provider = provider;\r\n  }\r\n  public get(key: Key): T {\r\n    const cacheObject: ICacheObject<T> = this.provider.get(key);\r\n    if (!cacheObject) {\r\n      return undefined;\r\n    }\r\n    const isExpired = this.isCacheObjectExpired(cacheObject);\r\n    return isExpired ? undefined : cacheObject.content;\r\n  }\r\n  public set(key: Key, value: T, ttl?: TTL) {\r\n    const cacheObject: ICacheObject<T> = new CacheObject(key, value, ttl || 0);\r\n    this.provider.set(cacheObject);\r\n  }\r\n  private isCacheObjectExpired(cacheObject: ICacheObject<T>) {\r\n    if (typeof cacheObject.ttl === 'number') {\r\n      return Date.now().valueOf() > cacheObject.createAt.valueOf() + cacheObject.ttl;\r\n    } else {\r\n      return Date.now() > cacheObject.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { CacheKeyCompare, ICacheKeyCompare, ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\nexport class MemoryCacheProvider<T> implements ICacheProvider<T> {\r\n  protected store: Array<ICacheObject<T>>;\r\n  protected cacheKeyCompare: ICacheKeyCompare;\r\n\r\n  constructor(cacheKeyCompare?: ICacheKeyCompare) {\r\n    this.store = new Array<ICacheObject<T>>();\r\n    this.cacheKeyCompare = cacheKeyCompare || new CacheKeyCompare();\r\n  }\r\n  public has(key: Key): boolean {\r\n    if (this.store.length < 1) {\r\n      return false;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    return index !== -1;\r\n  }\r\n  public length(): number {\r\n    return this.store.length;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.store.push(value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    if (this.store.length < 1) {\r\n      return undefined;\r\n    }\r\n    return this.store.find((item: ICacheObject<T>) => this.cacheKeyCompare.compare(key, item.key));\r\n  }\r\n  public delete(key: Key) {\r\n    if (this.store.length < 1) {\r\n      return;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    this.store.splice(index, 1);\r\n  }\r\n  public clear() {\r\n    this.store.length = 0;\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.store.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.store.values();\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\n/**\r\n * 默认缓存\r\n * @description\r\n * 默认缓存使用Map作为缓存容器，存储速度快。但不支持自定义的key对比，对于简单类型的key使用值对比，对于引用类型的key，对比的是引用的地址。\r\n */\r\nexport class DefaultCacheProvider<T> implements ICacheProvider<T>{\r\n  private buffer: Map<any, ICacheObject<T>>;\r\n\r\n  constructor() {\r\n    this.buffer = new Map<any, ICacheObject<T>>();\r\n  }\r\n  public has(key: Key): boolean {\r\n    return this.buffer.has(key);\r\n  }\r\n  public length(): number {\r\n    return this.buffer.size;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.buffer.set(value.key, value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    return this.buffer.get(key);\r\n  }\r\n  public delete(key: Key) {\r\n    this.buffer.delete(key);\r\n  }\r\n  public clear() {\r\n    this.buffer.clear();\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.buffer.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.buffer.values();\r\n  }\r\n}","\r\n/**\r\n  * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\r\n  *\r\n  * This function will take an already-encoded URL and encode all the non-URL\r\n  * code points. This function will not encode the \"%\" character unless it is\r\n  * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\r\n  * be encoded as `%25foo`).\r\n  *\r\n  * This encode is meant to be \"safe\" and does not throw errors. It will try as\r\n  * hard as it can to properly encode the given URL, including replacing any raw,\r\n  * unpaired surrogate pairs with the Unicode replacement character prior to\r\n  * encoding.\r\n  *\r\n  * @param {string} url\r\n  * @return {string}\r\n  * @public\r\n  */\r\n\r\n export function encodeUrl(url) {\r\n  const ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\r\n  return String(url)\r\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\r\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\r\n    .replace(/#/g,'%23').replace(/&/g,'%26')\r\n}","import { ICacheObject, ICacheOptions } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n/**\r\n * 缓存方法返回值\r\n * @param options ICacheOptions 缓存选项\r\n * @returns MethodDecorator\r\n */\r\nexport function Cacheable<T>(options?: ICacheOptions<T>): MethodDecorator {\r\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\r\n    if (descriptor === undefined) {\r\n      descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\r\n    }\r\n    const className = target.name || target && target.constructor && target.constructor.name;\r\n    const method = descriptor.value;\r\n    descriptor.value = function (...args: any[]) {\r\n      const ttl = options && options.ttl || 0;\r\n      const provider = options && options.provider;\r\n      if (!provider) {\r\n        throw new Error('cache provider is not defined.');\r\n      }\r\n      let key = options && options.key || undefined;\r\n      if (key && key instanceof Function) {\r\n        key = key(this, args);\r\n      }\r\n      let cacheKey = key;\r\n      if (!cacheKey) {\r\n        const argsString: string = JSON.stringify(args);\r\n        cacheKey = `${className}#${String(propertyKey)}#${argsString}`;\r\n      }\r\n      const cacheObject = provider.get(cacheKey);\r\n      if (!cacheObject || (ttl && cacheObject.isExpired() === true)) {\r\n        const result = method.apply(this, args);\r\n        const object: ICacheObject<T> = new CacheObject(cacheKey, result, ttl);\r\n        provider.set(object);\r\n        return result;\r\n      }\r\n\r\n      return cacheObject && cacheObject.content;\r\n    }\r\n    return descriptor;\r\n  }\r\n}"]}