(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash-es'), require('moment'), require('immutable'), require('@angular/forms'), require('validator'), require('date-fns'), require('@angular/common/http'), require('@farris/rtf'), require('@angular/router'), require('@farris/expression-engine'), require('bignumber.js'), require('rxjs/operators'), require('rxjs'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/devkit', ['exports', 'lodash-es', 'moment', 'immutable', '@angular/forms', 'validator', 'date-fns', '@angular/common/http', '@farris/rtf', '@angular/router', '@farris/expression-engine', 'bignumber.js', 'rxjs/operators', 'rxjs', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris.devkit = {}),global.lodashEs,global.moment,global.immutable,global.ng.forms,global.ValidatorJS,global.dateFns,global.ng.common.http,global.rtf,global.ng.router,global.expressionEngine,global.bignumber_js,global.rxjs.operators,global.rxjs,global.ng.core));
}(this, (function (exports,lodashEs,moment,immutable,forms,ValidatorJS,dateFns,http,rtf,router,expressionEngine,bignumber_js,operators,rxjs,core) { 'use strict';

    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;
    var ValidatorJS__default = 'default' in ValidatorJS ? ValidatorJS['default'] : ValidatorJS;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var ANNOTATIONS = '__annotations__';
    var PARAMETERS = '__parameters__';
    var PROP_METADATA = '__prop__metadata__';
    /**
     * @suppress {globalThis}
     */
    function makeDecorator(name, props, parentClass, chainFn, typeFn) {
        var metaCtor = makeMetadataCtor(props);
        function DecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a;
            if (this instanceof DecoratorFactory) {
                metaCtor.call.apply(metaCtor, __spread([this], args));
                return this;
            }
            var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
            var typeDecorator = function createTypeDecorator(cls) {
                typeFn && typeFn.apply(void 0, __spread([cls], args));
                // Use of Object.defineProperty is important since it creates non-enumerable property which
                // prevents the property is copied during subclassing.
                var annotations = cls.hasOwnProperty(ANNOTATIONS) ?
                    cls[ANNOTATIONS] :
                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
                annotations.push(annotationInstance);
                return cls;
            };
            if (chainFn) {
                chainFn(typeDecorator);
            }
            return typeDecorator;
        }
        if (parentClass) {
            DecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        DecoratorFactory.prototype.ngMetadataName = name;
        DecoratorFactory.annotationCls = DecoratorFactory;
        return DecoratorFactory;
    }
    function makeMetadataCtor(props) {
        return function ctor() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (props) {
                var values = props.apply(void 0, __spread(args));
                // tslint:disable-next-line:forin
                for (var propName in values) {
                    this[propName] = values[propName];
                }
            }
        };
    }
    function makeParamDecorator(name, props, parentClass) {
        var metaCtor = makeMetadataCtor(props);
        function ParamDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a;
            if (this instanceof ParamDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
            ParamDecorator.annotation = annotationInstance;
            return ParamDecorator;
            function ParamDecorator(cls, unusedKey, index) {
                // Use of Object.defineProperty is important since it creates non-enumerable property which
                // prevents the property is copied during subclassing.
                var parameters = cls.hasOwnProperty(PARAMETERS) ?
                    cls[PARAMETERS] :
                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
                // there might be gaps if some in between parameters do not have annotations.
                // we pad with nulls.
                while (parameters.length <= index) {
                    parameters.push(null);
                }
                (parameters[index] = parameters[index] || []).push(annotationInstance);
                return cls;
            }
        }
        if (parentClass) {
            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        ParamDecoratorFactory.prototype.ngMetadataName = name;
        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
        return ParamDecoratorFactory;
    }
    function makePropDecorator(name, props, parentClass) {
        var metaCtor = makeMetadataCtor(props);
        function PropDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a;
            if (this instanceof PropDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
            // tslint:disable-next-line:no-shadowed-variable
            return function PropDecorator(target, name) {
                var constructor = target.constructor;
                // Use of Object.defineProperty is important since it creates non-enumerable property which
                // prevents the property is copied during subclassing.
                var meta = constructor.hasOwnProperty(PROP_METADATA) ?
                    constructor[PROP_METADATA] :
                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
                meta[name].unshift(decoratorInstance);
            };
        }
        if (parentClass) {
            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        PropDecoratorFactory.prototype.ngMetadataName = name;
        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
        return PropDecoratorFactory;
    }

    //import { Cacheable, DefaultCacheProvider } from '../../cache';
    /**
     * 元数据解析
     * 约束：
     * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；
     * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加
     */
    var MetadataUtil = /** @class */ (function () {
        function MetadataUtil() {
        }
        // ----------------------------------------
        // 类型元数据
        // ----------------------------------------
        /**
         * 获取类元数据
         * 返回结果形如：
         * [
         *   Injectable
         *   NgViewModel
         *   NgViewModel
         * ]
         */
        MetadataUtil.getClassMetadatas = function (constructor) {
            var metadatas = constructor[ANNOTATIONS];
            return metadatas;
        };
        /**
         * 获取某个class上的某种装饰器
         * 返回结果：NgViewModel
         */
        MetadataUtil.getClassMetadataByName = function (constructor, metadataName) {
            var metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);
            return metadata;
        };
        MetadataUtil.getClassMetadataByNameWithTranslate = function (constructor, metadataName, translateService, keysToTranslate) {
            var allClassMetadatas = this.getClassMetadatas(constructor);
            if (!allClassMetadatas) {
                return null;
            }
            var metadata = allClassMetadatas.find(function (classMetadata) {
                return classMetadata.ngMetadataName === metadataName;
            });
            this.translateMetadataByName(metadata, translateService, keysToTranslate);
            return metadata;
        };
        // ----------------------------------------
        // 属性元数据
        // ----------------------------------------
        /**
         * 获取所有属性的所有元数据
         * 返回格式：
         * {
         *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],
         *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]
         * }
         */
        // @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
        MetadataUtil.getPropsMetadatas = function (constructor) {
            var allPropMetadatas = constructor[PROP_METADATA];
            return allPropMetadatas;
        };
        /**
         * 获取所有属性的某一类型的元数据
         * 如果同一属性
         * 返回结果：
         * {
         *    propName1: NgDefaultValue,
         *    propName2: NgDefaultValue
         * }
         */
        // @Cache({ provider: new MemoryCacheProvider(new MetadataKeyCompare()), key: ((context: any, args: any[]) => { return { constructor: args[0], metadataName: args[1] } }) })
        MetadataUtil.getPropsMetadatasByName = function (constructor, metadataName) {
            var metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);
            return metadatas;
        };
        MetadataUtil.getPropsMetadatasByNameWithTranslate = function (constructor, metadataName, translateService, keysToTranslate) {
            var metadatas = {};
            // 读取构造函数中存储的类属性注解。
            var allPropMetadatas = this.getPropsMetadatas(constructor);
            if (!allPropMetadatas) {
                return metadatas;
            }
            // 遍历所有属性提取注解信息。
            Object.keys(allPropMetadatas).forEach(function (propName) {
                // 提取当前属性注解对象
                var propMetadatas = allPropMetadatas[propName];
                // 提取指定类型的注解项
                var metadata = propMetadatas.find(function (propMetadata) {
                    return propMetadata.ngMetadataName === metadataName;
                });
                if (metadata) {
                    metadatas[propName] = metadata;
                }
            });
            // 翻译指定属性的值
            this.translateMetadatasByName(metadatas, translateService, keysToTranslate);
            return metadatas;
        };
        MetadataUtil.translateMetadatasByName = function (metadatas, translateService, keysToTranslate) {
            var _this = this;
            Object.keys(metadatas).forEach(function (propName) {
                // 提取指定类型的注解项
                _this.translateMetadataByName(metadatas[propName], translateService, keysToTranslate);
            });
            return metadatas;
        };
        MetadataUtil.translateMetadataByName = function (metadata, translateService, keysToTranslate) {
            if (metadata && translateService && keysToTranslate) {
                keysToTranslate.forEach(function (metadataPropKey) {
                    var propertyVariable = metadata[metadataPropKey];
                    try {
                        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {
                            var translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();
                            metadata[metadataPropKey] = translateService.transform(translateKey, null);
                        }
                    }
                    catch (e) {
                        console.info(e);
                    }
                });
            }
            return metadata;
        };
        /**
         * 获取某个属性的所有元数据
         * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]
         */
        MetadataUtil.getPropMetadatasByName = function (constructor, propName) {
            // 暂不实现
            return null;
        };
        /**
         * 获取某个属性的某种元数据
         * 返回格式：NgDefaultValue
         */
        MetadataUtil.getPropMetadataByName = function (constructor, propName, metadataName) {
            // 暂不实现
            return null;
        };
        return MetadataUtil;
    }());

    /**
     * 变更记录
     */
    var Modification = /** @class */ (function () {
        /**
         * 构造函数
         * @param value 新值
         * @param modifyType 变更类型
         * @param path 变更路径
         * @param preValue 旧值
         */
        function Modification(value, modifyType, path, preValue, position) {
            this.type = modifyType;
            this.value = value;
            this.preValue = preValue;
            this.path = path;
            this.position = position;
        }
        return Modification;
    }());
    (function (ModifyType) {
        /**
         * 添加
         */
        ModifyType["Add"] = "ADD";
        /**
         * 添加数据
         */
        ModifyType["AddData"] = "AddData";
        /**
         * 克隆数据
         */
        ModifyType["Clone"] = "CLONE";
        /**
         * 删除
         */
        ModifyType["Remove"] = "REMOVE";
        ModifyType["RemoveData"] = "RemoveData";
        /**
         * 修改
         */
        ModifyType["ValueChange"] = "VALUE_CHANGE";
        /**
         * 加载
         */
        ModifyType["Load"] = "LOAD";
        /**
         * 未改变
         */
        ModifyType["UnChanged"] = "UNCHANGED";
        /**
         * 分页信息变更
         */
        ModifyType["PaginationInfoChange"] = "PAGINATION_INFO_CHANGE";
        /**
         * 插入
         */
        ModifyType["Insert"] = "Insert";
        /**
         * 更新实体
         */
        ModifyType["Update"] = "UPDATE";
    })(exports.ModifyType || (exports.ModifyType = {}));

    /*
     * @Author: Lucus, Witt
     * @Date: 2018-10-30 15:53:59
     * @Last Modified by: Witt
     * @Last Modified time: 2018-11-08 17:25:08
     */
    // function isEqual(value: any, other: any) {
    //   return JSON.stringify(value) === JSON.stringify(other);
    // }
    /**
     * 实体数据变更集
     */
    var ChangeSet = /** @class */ (function () {
        function ChangeSet() {
            /**
             * 变更集合
             */
            this.modifications = [];
        }
        Object.defineProperty(ChangeSet.prototype, "changes", {
            /**
             *  获取所有的变更记录
             */
            get: function () {
                return this.modifications;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 将变更集添加到集合中
         * ### 使用示例
         * ```
         * const changeSet = new ChangeSet();
         * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');
         * changeSet.append(modify)
         * ```
         * @param changeItem 变更数据
         */
        ChangeSet.prototype.append = function (modification) {
            switch (modification.type) {
                case exports.ModifyType.ValueChange:
                    this.appendValueChangeModification(modification);
                    break;
                case exports.ModifyType.Add:
                case exports.ModifyType.Insert:
                case exports.ModifyType.Clone:
                    this.appendAddModification(modification);
                    break;
                case exports.ModifyType.Remove:
                    this.appendRemoveModification(modification);
                    break;
                case exports.ModifyType.Load:
                    break;
                default:
                    break;
            }
        };
        /**
         * 添加值变化变更
         */
        ChangeSet.prototype.appendValueChangeModification = function (modification) {
            var value = modification.value;
            var path = modification.path.join('/');
            var existedModification = this.findModifyItemsPath(modification.path);
            if (existedModification) {
                // 如果存在相同路径的ValueChange类型的变更集，则更新值；
                existedModification.value = value;
            }
            else {
                var existedAddModification = this.findNewAddItemsPath(modification.path);
                if (existedAddModification) {
                    // @todo：
                    // 1、此处逻辑有问题，value是个字符串，不能直接assign；
                    // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。
                    // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；
                    existedAddModification.value = Object.assign({}, existedAddModification.value, value);
                }
                else {
                    // 其他情况，新增一条ValueChange变更。
                    this.modifications.push(modification);
                }
            }
        };
        /**
         * 添加新增变更
         */
        ChangeSet.prototype.appendAddModification = function (modification) {
            var value = modification.value;
            var path = modification.path.join('/');
            var existedModification = this.findNewAddItemsPath(modification.path);
            if (existedModification) {
                // 1、如果已经存在相同路径的Add变更，则合并Value。
                existedModification.value = existedModification.value.concat(value);
            }
            else {
                // 2、如果没有，则新增一条Add变更。
                this.modifications.push(modification);
            }
        };
        /**
         * 添加删除变更
         */
        ChangeSet.prototype.appendRemoveModification = function (modification) {
            var path = modification.path;
            var primaryKey = Object.keys(modification.value)[0];
            var primaryKeyValue = modification.value[primaryKey];
            // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；
            // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）
            this.modifications.forEach(function (addModification) {
                // 只处理新增变更
                if (addModification.type !== exports.ModifyType.Add && addModification.type !== exports.ModifyType.Insert && addModification.type !== exports.ModifyType.Clone) {
                    return;
                }
                // @todo 只考虑主从结构，再深的层次暂不考虑
                if (lodashEs.isEqual(addModification.path, path) === false) {
                    return;
                }
                // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除
                addModification.value = addModification.value.filter(function (addDataItem) {
                    return addDataItem[primaryKey] !== primaryKeyValue;
                });
            });
            // 2、移除对应的修改变更
            var fullRemovePath = path.concat(primaryKey + ":" + primaryKeyValue);
            this.modifications = this.modifications.filter(function (valueModification) {
                if (valueModification.type !== exports.ModifyType.ValueChange) {
                    return true;
                }
                var valueChangePath = Array.from(valueModification.path);
                valueChangePath.pop();
                // 路径相同进行移除
                var isToRemove = lodashEs.isEqual(valueChangePath, fullRemovePath);
                return !isToRemove;
            });
            // 先删除下级删除变更，再插入
            // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景
            this.removeDescendantRemoveModifications(modification);
            this.modifications.push(modification);
        };
        /**
         * 清空变更集合
         */
        ChangeSet.prototype.clear = function () {
            this.modifications = [];
        };
        /**
         * 根据path获取Add类型的变更记录
         * @param path 变更路径
         */
        ChangeSet.prototype.findNewAddItemsPath = function (path) {
            return this.modifications.find(function (value, index) {
                return lodashEs.isEqual(path, value.path) && (value.type === exports.ModifyType.Add || value.type === exports.ModifyType.Insert || value.type === exports.ModifyType.Clone);
            });
        };
        /**
         * 根据path获取ValueChange类型的变更记录
         * @param path 变更路径
         */
        ChangeSet.prototype.findModifyItemsPath = function (path) {
            return this.modifications.find(function (value, index) {
                return lodashEs.isEqual(path, value.path) && value.type === exports.ModifyType.ValueChange;
            });
        };
        /**
         * 删除后代（包括自己）所有的删除变更
         * @todo：临时做一个最小化修改
         */
        ChangeSet.prototype.removeDescendantRemoveModifications = function (parentRemoveModification) {
            var _this = this;
            var parentPathWithId = this.createRemovePathWithId(parentRemoveModification);
            // 删除后代修改变更
            this.modifications = this.modifications.filter(function (modification) {
                if (modification.type !== exports.ModifyType.Remove) {
                    return true;
                }
                var descendantPathWithId = _this.createRemovePathWithId(modification);
                var isDescendant = _this.isDescendantPath(parentPathWithId, descendantPathWithId);
                return !isDescendant;
            });
        };
        /**
         * 获取删除路径的完整格式
         * @summary
         * 1、目前删除变更的路径标记到父集合；
         * 2、为了方便比较，将被删除的数据id加入到路径中
         */
        ChangeSet.prototype.createRemovePathWithId = function (modification) {
            var path = modification.path;
            var primaryKey = Object.keys(modification.value)[0];
            var primaryKeyValue = modification.value[primaryKey];
            var pathWithId = path.concat([primaryKey + ":" + primaryKeyValue]);
            return pathWithId;
        };
        /**
         * 判断是否是后代节点路径
         * @param parentPath 父节点路径
         * @param descendantPath 后代节点
         */
        ChangeSet.prototype.isDescendantPath = function (parentPath, descendantPath) {
            if (parentPath.length > descendantPath.length) {
                return false;
            }
            var isDescendantPath = true;
            parentPath.forEach(function (parentPathItem, parentPathItemIndex) {
                if (parentPathItem !== descendantPath[parentPathItemIndex]) {
                    isDescendantPath = false;
                    return;
                }
            });
            return isDescendantPath;
        };
        return ChangeSet;
    }());

    function isPlainObject(value) {
        if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {
            return false;
        }
        if (Object.getPrototypeOf(value) === null) {
            return true;
        }
        var proto = value;
        while (Object.getPrototypeOf(proto) !== null) {
            proto = Object.getPrototypeOf(proto);
        }
        return Object.getPrototypeOf(value) === proto;
    }
    /**
     * --------------------------------------------------------------------------------
     * NgField
     * --------------------------------------------------------------------------------
     */
    /** 实体属性注解器名称 */
    var NG_FIELD = 'NgField';
    function makeNgFieldDecorator(options) {
        var metadata = {
            primary: false,
            foreign: false
        };
        if (options) {
            var paramType = typeof options;
            switch (paramType) {
                case 'boolean':
                    metadata.primary = Boolean(options);
                    break;
                case 'string':
                    metadata.dataField = String(options);
                    break;
                case 'object':
                    metadata = Object.assign(metadata, options);
                    break;
            }
        }
        return metadata;
    }
    /**
     * 实体属性注解
     *
     * ### 使用示例
     * ```
     * export class UserEntity extends Entity {
     *      @NgField({
     *          primary: true,
     *          dataField: 'id',
     *          ...
     *      })
     *      userid: string;
     *      userName: string;
     * }
     * ```
     */
    var NgField = makePropDecorator(NG_FIELD, makeNgFieldDecorator);
    /**
     * --------------------------------------------------------------------------------
     * NgField
     * --------------------------------------------------------------------------------
     */
    /** NgList 注解器名称 */
    var NG_LIST = 'NgList';
    function makeNgListDecorator(options) {
        if (isPlainObject(options)) {
            return options;
        }
        var type = typeof options;
        if (type === 'string') {
            return {
                dataField: options
            };
        }
        if (type === 'function') {
            return {
                type: options
            };
        }
    }
    /**
     * 实体属性注解
     * ### 使用示例
     * ```
     * export class UserEntity extends Entity {
     *      @NgField({
     *          primary: true,
     *          dataField: 'id',
     *          ...
     *      })
     *      userid: string;
     *      userName: string;
     *      @NgList({
     *          dataField: 'roles',
     *          formType: Role
     *      })
     *      Roles: EntityList<Role>
     * }
     * ```
     */
    var NgList = makePropDecorator(NG_LIST, makeNgListDecorator);
    /**
     * --------------------------------------------------------------------------------
     * NgObject
     * --------------------------------------------------------------------------------
     */
    /** NgObject 实体属性注解器名称 */
    var NG_OBJECT = 'NgObject';
    function makeNgObjectDecorator(options) {
        if (isPlainObject(options)) {
            return options;
        }
        var type = typeof options;
        if (type === 'string') {
            return {
                dataField: options
            };
        }
        if (type === 'function') {
            return {
                type: options
            };
        }
    }
    /**
     * 实体属性注解
     * ### 使用示例
     *
     * ```
     *  export class UserEntity entends Entity {
     *      @NgField(true)  // 设置为主键
     *      id: string;
     *      @NgField('name')  // 设置数据映射字段为 name
     *      userName: string;
     *
     *      depid: string;
     *
     *      @NgObject(Department)  // 设置引用类型为 Department 实体类
     *      epartment: Department;
     *  }
     * ```
     */
    var NgObject = makePropDecorator(NG_OBJECT, makeNgObjectDecorator);
    /**
     * --------------------------------------------------------------------------------
     * NgDynamicProperty
     * --------------------------------------------------------------------------------
     */
    /** NgObject 实体属性注解器名称 */
    var NG_Dynamic = 'NgDynamic';
    function makeNgDynamicDecorator(options) {
        if (isPlainObject(options)) {
            return options;
        }
        var type = typeof options;
        if (type === 'string') {
            return {
                dataField: options
            };
        }
        if (type === 'function') {
            return {
                type: options
            };
        }
    }
    /**
     * 实体属性注解
     * ### 使用示例
     *
     * ```
     *  export class UserEntity entends Entity {
     *      @NgField(true)  // 设置为主键
     *      id: string;
     *      @NgField('name')  // 设置数据映射字段为 name
     *      userName: string;
     *
     *      depid: string;
     *
     *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类
     *      epartment: Department;
     *  }
     * ```
     */
    var NgDynamic = makePropDecorator(NG_Dynamic, makeNgDynamicDecorator);

    var NG_ENTITY = 'NgEntity';
    /**
     * 实体装饰器
     * @param options options
     */
    function NgEntity(options) {
        var decoratorFactory = makeDecorator(NG_ENTITY, function (obj) { return obj; });
        return decoratorFactory(options);
    }

    /**
     * 属性注解器通用方法
     */
    var FieldMetadataUtil = /** @class */ (function () {
        function FieldMetadataUtil() {
        }
        /**
         * 获取实体所有的简单属性元数据
         * @param target 实体类型
         * @returns 形如：{[propName: string]: NgObjectProperty}
         */
        FieldMetadataUtil.getNgFields = function (target) {
            return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);
        };
        /**
         * 获取某个简单属性的元数据
         */
        FieldMetadataUtil.getNgField = function (target, propName) {
            var ngFields = this.getNgFields(target);
            var ngField = ngFields[propName];
            return ngField;
        };
        /**
         * 获取实体属性在原始数据中的属性名
         */
        FieldMetadataUtil.getDataField = function (target, propName) {
            var ngField = this.getNgField(target, propName);
            return ngField.dataField || propName;
        };
        /**
         * 获取标注为NgObject的属性的元数据
         * @param target 实体类型
         * @returns 形如：{[propName: string]: NgObjectProperty}
         */
        FieldMetadataUtil.getNgObjects = function (target) {
            return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);
        };
        FieldMetadataUtil.getNgDynamic = function (target) {
            return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);
        };
        /**
         * 获取标注为NgList的属性的元数据
         * @param target 实体类型
         * @returns 形如：{[propName: string]: NgListProperty}
         */
        FieldMetadataUtil.getNgList = function (target) {
            return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);
        };
        /**
         * 获取实体标注为主键的属性元数据
         * @param target 实体类型
         */
        FieldMetadataUtil.getPrimaryFieldMetadata = function (target) {
            var ngFieldObj = FieldMetadataUtil.getNgFields(target);
            var primaryKey = Object.keys(ngFieldObj).find(function (prop) {
                return ngFieldObj[prop].primary;
            });
            if (primaryKey) {
                var propMeta = ngFieldObj[primaryKey];
                propMeta.property = primaryKey;
                if (!propMeta.dataField) {
                    propMeta.dataField = primaryKey;
                }
                return propMeta;
            }
            return undefined;
        };
        /**
         * 获取主键名称，没有主键时返回空字符串
         */
        FieldMetadataUtil.getPrimaryKey = function (entityType) {
            var primaryNgField = this.getPrimaryFieldMetadata(entityType);
            if (!primaryNgField) {
                return '';
            }
            return primaryNgField.property;
        };
        // static udtMap = {};
        /**
         * 获取NgField 的验证规则元数据
         * @param target 实体类Type
         */
        FieldMetadataUtil.getValidationMetadata = function (target) {
            var fieldMetadatas = FieldMetadataUtil.getNgFields(target);
            // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});
            // let udtParentName = '';
            // Object.keys(this.udtMap).forEach(key => {
            //   // 当前实体是udt类型时
            //   if (this.udtMap[key].type.name === target.name) {
            //     // 找出当前udt实体的父级信息
            //     udtParentName = key;
            //   }
            // });
            var metadatas = {};
            // let primaryId = '';
            // let udtPrimaryId = '';
            // 不进行验证的属性名
            // const excludeIDs = [];
            // 排除udt的主键
            // Object.keys(fieldMetadatas).forEach(key => {
            //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
            //     primaryId = fieldMetadatas[key].dataField;
            //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';
            //     excludeIDs.push(fieldMetadatas[key].dataField);
            //   }
            // });
            Object.keys(fieldMetadatas).forEach(function (key) {
                if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
                    return;
                }
                var validRules = fieldMetadatas[key].validRules;
                // if (excludeIDs.indexOf(key) > -1) {
                //   return;
                // }
                if (validRules && validRules.length) {
                    validRules.map(function (rule) {
                        rule.property = key;
                        rule['targetName'] = target.name;
                    });
                    metadatas[key] = validRules;
                }
            });
            return metadatas;
        };
        FieldMetadataUtil.getValidationMetadataWithPath = function (object) {
            var target = object.constructor;
            var fieldMetadatas = FieldMetadataUtil.getNgFields(target);
            var parentPaths = object.getPaths().path || [];
            var metadatas = {};
            Object.keys(fieldMetadatas).forEach(function (key) {
                if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
                    return;
                }
                var validRules = fieldMetadatas[key].validRules;
                if (validRules && validRules.length) {
                    var propertyPath = parentPaths.concat([]);
                    propertyPath.push(key);
                    var property_1 = propertyPath.join('.');
                    validRules.map(function (rule) {
                        rule.property = key;
                        rule['targetName'] = target.name;
                        rule['path'] = property_1;
                    });
                    metadatas[key] = validRules;
                }
            });
            return metadatas;
        };
        return FieldMetadataUtil;
    }());

    /**
     * 实体元数据工具类
     */
    var EntityMetadataUtil = /** @class */ (function () {
        function EntityMetadataUtil() {
        }
        /**
         * 获取所有属性
         * @todo：封装根据基类获取所有元数据的方法，解决重复代码
         */
        EntityMetadataUtil.getAllNgProperties = function (entityType) {
            var ngPlainProperties = this.getNgFieldProperties(entityType);
            var ngEntityProperties = this.getNgObjectProperties(entityType);
            var ngDynamicProperties = this.getNgDynamicProperties(entityType);
            var ngEntityListProperties = this.getNgObjectProperties(entityType);
            return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
        };
        /**
         * 获取实体元数据描述
         */
        EntityMetadataUtil.getNgEntityMatadata = function (entityType) {
            return MetadataUtil.getClassMetadataByNameWithTranslate(entityType, NG_ENTITY);
        };
        /**
         * 获取NgField的属性元数据
         */
        EntityMetadataUtil.getNgFieldProperties = function (entityType) {
            return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);
        };
        /**
         * 获取NgObject属性元数据
         */
        EntityMetadataUtil.getNgObjectProperties = function (entityType) {
            return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);
        };
        /**
         * 获取NgDynamic属性元数据
         */
        EntityMetadataUtil.getNgDynamicProperties = function (entityType) {
            return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);
        };
        /**
         * 获取NgList属性元数据
         */
        EntityMetadataUtil.getNgListProperties = function (entityType) {
            return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);
        };
        /**
         * 获取主键属性元数据
         */
        EntityMetadataUtil.getPrimaryKeyProperty = function (entityType) {
            var primaryKeyProperty;
            var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
            Object.keys(ngPlainProperties).forEach(function (propName) {
                var ngProperty = ngPlainProperties[propName];
                if (ngProperty.primary === true) {
                    primaryKeyProperty = ngProperty;
                }
            });
            return primaryKeyProperty;
        };
        return EntityMetadataUtil;
    }());

    var PARENT_PATH = '__PARENT_PATH__';
    var PARENT_CLASS = '__PARENT__';

    function EntityFactory(T, data) {
        // const entity = new T(data);
        var entity = EntityTypeCreator.create(T, data);
        return entity;
    }
    function DynamicFactory(T, data) {
        var entity = new T(data);
        return entity;
    }

    var EntityTypeCreator = /** @class */ (function () {
        function EntityTypeCreator() {
        }
        EntityTypeCreator.create = function (constructor, data) {
            var entityType = this.getType(constructor);
            var entity = new entityType(data);
            entity.constructor = constructor;
            return entity;
        };
        // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })
        EntityTypeCreator.createType = function (constructor) {
            var entityType = /** @class */ (function (_super) {
                __extends(EntityType, _super);
                function EntityType(data) {
                    return _super.call(this, data) || this;
                }
                return EntityType;
            }(Entity));
            var entityPrototype = entityType.prototype;
            this.extendProperties(constructor, entityPrototype);
            return entityType;
        };
        EntityTypeCreator.extendProperties = function (constructor, entityPrototype) {
            var ngFields = FieldMetadataUtil.getNgFields(constructor);
            var ngObjects = FieldMetadataUtil.getNgObjects(constructor);
            var ngLists = FieldMetadataUtil.getNgList(constructor);
            var ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
            this.extendPlainProperty(entityPrototype, ngFields);
            this.extendListProperty(entityPrototype, ngLists);
            this.extendObjectProperty(entityPrototype, ngObjects);
            this.extendDynamicProperty(entityPrototype, ngDynamic);
        };
        EntityTypeCreator.extendPlainProperty = function (entityPrototype, ngFields) {
            Object.keys(ngFields).forEach(function (propName) {
                var ngField = ngFields[propName];
                // const dataField = ngField.dataField || propName;
                Object.defineProperty(entityPrototype, propName, {
                    get: function () {
                        var value = this.getPropValue(propName, ngField);
                        return value;
                    },
                    set: function (newPropValue) {
                        // 值相同时不触发变更。
                        var oldPropValue = this.getPropValue(propName, ngField);
                        if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                            return;
                        }
                        this.setPropValue(propName, ngField, newPropValue);
                        var changeSetValue = this.preparePropValue(propName, ngField, newPropValue);
                        this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);
                    }
                });
            });
        };
        EntityTypeCreator.extendListProperty = function (entityPrototype, ngListMetadata) {
            Object.keys(ngListMetadata).forEach(function (propertyName) {
                var key = "__" + propertyName + "__";
                Object.defineProperty(entityPrototype, propertyName, {
                    get: function () {
                        var _this = this;
                        var entityList = this[key];
                        if (!entityList) {
                            var fieldMetadata_1 = ngListMetadata[propertyName];
                            var path = this.createPath(propertyName);
                            var dataField = fieldMetadata_1.dataField || propertyName;
                            var val = this.data[dataField];
                            entityList = new EntityList();
                            entityList[PARENT_CLASS] = this;
                            entityList[PARENT_PATH] = path;
                            if (val) {
                                var entities = val.map(function (v) { return EntityFactory(fieldMetadata_1.type, v); });
                                entityList.loadEntities(entities);
                            }
                            entityList.onListChanged.subscribe(function (value) {
                                if (value) {
                                    if (entityList[PARENT_PATH][0] !== value.path[0]) {
                                        value.path = entityList[PARENT_PATH].concat(value.path);
                                    }
                                    _this.setChanges(value);
                                }
                            });
                            this[key] = entityList;
                        }
                        return entityList;
                    },
                    set: function (value) {
                        this[key] = value;
                    }
                });
            });
        };
        EntityTypeCreator.extendObjectProperty = function (entityPrototype, ngObjectMetadata) {
            Object.keys(ngObjectMetadata).forEach(function (propertyName) {
                var fieldMetadata = ngObjectMetadata[propertyName];
                var key = "__" + propertyName + "__";
                // 如果没有值用一个空对象代替
                Object.defineProperty(entityPrototype, propertyName, {
                    get: function () {
                        var childEntity = this[key];
                        var path = this.createPath(propertyName);
                        if (!childEntity) {
                            var dataField = fieldMetadata.dataField || propertyName;
                            // val不存在时，用空对象代替
                            var val = this.data[dataField] || {};
                            childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);
                            this[key] = childEntity;
                        }
                        return childEntity;
                    },
                    set: function (value) {
                        var path = this.createPath(propertyName);
                        var modifyInfo = {
                            path: path,
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: exports.ModifyType.ValueChange
                        };
                        var childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);
                        this[key] = childEntity;
                        this.setChanges(modifyInfo);
                    }
                });
            });
        };
        EntityTypeCreator.extendDynamicProperty = function (entityPrototype, ngDynamicMetadata) {
            Object.keys(ngDynamicMetadata).forEach(function (propertyName) {
                var fieldMetadata = ngDynamicMetadata[propertyName];
                var key = "__" + propertyName + "__";
                Object.defineProperty(entityPrototype, propertyName, {
                    get: function () {
                        var dynamicEntity = this[key];
                        var path = this.createPath(propertyName);
                        if (!dynamicEntity) {
                            var dataField = fieldMetadata.dataField || propertyName;
                            var originalData = this.data[dataField] || {};
                            dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);
                            this[key] = dynamicEntity;
                        }
                        return dynamicEntity;
                    },
                    set: function (value) {
                        var path = this.createPath(propertyName);
                        var modifyInfo = {
                            path: path,
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: exports.ModifyType.ValueChange
                        };
                        var dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);
                        this[key] = dynamicEntity;
                        this.setChanges(modifyInfo);
                    }
                });
            });
        };
        EntityTypeCreator.getType = function (constructor) {
            if (this.buffer.has(constructor)) {
                return this.buffer.get(constructor);
            }
            var entityType = this.createType(constructor);
            this.buffer.set(constructor, entityType);
            return entityType;
        };
        EntityTypeCreator.buildEntity = function (parentPath, value, parent, fieldMetadata) {
            var instance;
            if (value instanceof fieldMetadata.type) {
                instance = value;
            }
            else {
                instance = EntityFactory(fieldMetadata.type, value);
            }
            instance[PARENT_CLASS] = parent;
            instance[PARENT_PATH] = parentPath;
            instance.onValueChanged.subscribe(function (changes) {
                if (changes) {
                    changes.path = (parent[PARENT_PATH] || []).concat(changes.path);
                    var change = Object.assign({}, changes, { fromParent: true });
                    parent.setChanges(change);
                }
            });
            return instance;
        };
        EntityTypeCreator.buildDynamic = function (parentPath, value, parent, fieldMetadata) {
            var instance;
            if (value instanceof fieldMetadata.type) {
                instance = value;
            }
            else {
                instance = DynamicFactory(fieldMetadata.type, value);
            }
            instance[PARENT_CLASS] = parent;
            instance[PARENT_PATH] = parentPath;
            instance.onValueChanged.subscribe(function (changes) {
                if (changes) {
                    changes.path = (parent[PARENT_PATH] || []).concat(changes.path);
                    parent.setChanges(changes);
                }
            });
            return instance;
        };
        EntityTypeCreator.buffer = new Map();
        return EntityTypeCreator;
    }());

    /**
     * 创建实体
     * @param entityType 实体类型
     * @param entityData 实体数据
     */
    function createEntity(entityType, entityData) {
        var entity;
        if (entityType && entityType.prototype && entityType.prototype.typeName === 'ConcreteEntityPrototype') {
            entity = new entityType(entityData);
        }
        else {
            entity = EntityTypeCreator.create(entityType, entityData); //new entityType(entityData); 
        }
        entity.constructor = entityType;
        return entity;
    }
    /**
     * 批量创建实体
     * @param entityType     实体类型
     * @param entityListData 实体数据数组
     */
    function createEntities(entityType, entityListData) {
        var entities = [];
        entityListData.forEach(function (entityData) {
            var entity = createEntity(entityType, entityData);
            entities.push(entity);
        });
        return entities;
    }
    /**
     * 已弃用：请使用createEntity方法代替。
     */
    function EntityFactory$1(T, data) {
        var entity = new T(data);
        return entity;
    }

    var validationMessage = {};
    /**
     * 验证类型定义
     */
    var ValidationTypes = /** @class */ (function () {
        function ValidationTypes() {
        }
        /**
         * 判断验证类型是否合法
         * @param type 验证类型
         */
        ValidationTypes.isValidType = function (type) {
            var _this = this;
            return (type !== "isValidType" &&
                type !== 'getMessage' &&
                Object.keys(this)
                    .map(function (key) { return _this[key]; })
                    .indexOf(type) !== -1);
        };
        /**
         * 获取指定验证类型的提示信息
         * @param type 验证类型
         * @returns 返回验证信息
         */
        ValidationTypes.getMessage = function (type) {
            var messages = validationMessage[this.CURRENT_LANGUAGE] || validationMessage['zh-CHS'];
            return messages[type] || '';
        };
        ValidationTypes.setCurrentLanguage = function (language) {
            this.CURRENT_LANGUAGE = language;
        };
        ValidationTypes.CURRENT_LANGUAGE = 'zh-CNS';
        /**
         * 条件验证表达式
         */
        ValidationTypes.CUSTOM_VALIDATION = "customValidation";
        /**
         * 必填
         */
        ValidationTypes.REQUIRED = 'required';
        /**
         * 比较值是否相同
         */
        ValidationTypes.EQUALS = 'equals';
        /**
         * 比较值是否不相同
         */
        ValidationTypes.NOT_EQUALS = 'notEquals';
        /**
         * 数字
         */
        ValidationTypes.IS_NUMBER = 'isNumber';
        /**
         * 整数
         */
        ValidationTypes.IS_INT = 'isInt';
        /**
         * 浮点数
         */
        ValidationTypes.IS_FLOAT = 'isFloat';
        /**
         * 字符串
         */
        ValidationTypes.IS_STRING = 'isString';
        /**
         * 布尔值
         */
        ValidationTypes.IS_BOOLEAN = 'isBoolean';
        /**
         * 日期
         */
        ValidationTypes.IS_DATE = 'isDate';
        /**
         * 日期字符串
         */
        ValidationTypes.IS_DATE_STRING = 'isDateString';
        /**
         * 布尔值字符串
         */
        ValidationTypes.IS_BOOLEAN_STRING = 'isBooleanString';
        /**
         * 数字字符串
         */
        ValidationTypes.IS_NUMBER_STRING = 'isNumberString';
        /**
         * 邮箱地址
         */
        ValidationTypes.IS_EMAIL = 'isEmail';
        /**
         * JSON
         */
        ValidationTypes.IS_JSON = 'isJSON';
        /**
         * 字符串小写
         */
        ValidationTypes.IS_LOWERCASE = 'isLowercase';
        /**
         * 字符串大写
         */
        ValidationTypes.IS_UPPERCASE = 'isUppercase';
        /**
         * 数字范围
         */
        ValidationTypes.RANGE = 'range';
        /**
         * 最小值
         */
        ValidationTypes.MIN = 'min';
        /**
         * 最小值
         */
        ValidationTypes.MINVALUE = 'minValue';
        /**
         * 最大值
         */
        ValidationTypes.MAX = 'max';
        /**
         * 最大值
         */
        ValidationTypes.MAXVALUE = 'maxValue';
        /**
         * 长度
         */
        ValidationTypes.LENGTH = 'length';
        /**
         * 字符串最大长度
         */
        ValidationTypes.MAX_LENGTH = 'maxLength';
        /**
         * 字符串最小长度
         */
        ValidationTypes.MIN_LENGTH = 'minLength';
        /**
         * 最小日期
         */
        ValidationTypes.MIN_DATE = 'minDate';
        /**
         * 最大日期
         */
        ValidationTypes.MAX_DATE = 'maxDate';
        /**
         * 排除非法字符
         */
        ValidationTypes.EXCLUDE = 'exclude';
        /**
         * 正则表达式
         */
        ValidationTypes.MATCHES = 'matches';
        ValidationTypes.FIELD_CONTAINER = 'fieldContainer';
        return ValidationTypes;
    }());
    validationMessage['zh-CHS'] = {
        fieldContainer: "$target \u7B2C $value \u884C",
        required: "\u8BF7\u8F93\u5165'$property'",
        equals: "'$property'\u7684\u503C\u4E0E$constraint1\u4E0D\u76F8\u7B49",
        notEquals: "'$property'\u7684\u503C\u4E0D\u80FD\u4E0E'$constraint1'\u76F8\u540C",
        isNumber: "'$property'\u7684\u503C\u4E0D\u662F\u6570\u5B57",
        isInt: "'$property'\u7684\u503C\u4E0D\u662F\u6574\u6570",
        isFloat: "'$property'\u7684\u503C\u4E0D\u662F\u6D6E\u70B9\u578B\u6570\u5B57",
        isBoolean: "'$property'\u7684\u503C\u4E0D\u662F\u5E03\u5C14\u503C",
        isDate: "'$property'\u7684\u503C\u4E0D\u662F\u6709\u6548\u65E5\u671F",
        isEmail: "\u90AE\u7BB1\u5730\u5740\u4E0D\u6B63\u786E",
        min: "'$property'\u7684\u503C\u4E0D\u5E94\u5C0F\u4E8E$constraint1",
        minValue: "'$property'\u7684\u503C\u4E0D\u5E94\u5C0F\u4E8E$constraint1",
        minDate: "'$property'\u7684\u65E5\u671F\u4E0D\u5E94\u65E9\u4E8E$constraint1",
        max: "'$property'\u7684\u503C\u4E0D\u5E94\u5927\u4E8E$constraint1",
        maxValue: "'$property'\u7684\u503C\u4E0D\u5E94\u5927\u4E8E$constraint1",
        maxDate: "'$property'\u4E0D\u5E94\u665A\u4E8E$constraint1",
        isBooleanString: "'$property'\u7684\u503C\u4E0D\u662F\u6709\u6548\u5E03\u5C14\u503C",
        isDateString: "'$property'\u7684\u503C\u4E0D\u662F\u6709\u6548\u7684\u65E5\u671F",
        isLowercase: "'$property'\u7684\u503C\u5E94\u5168\u90E8\u4E3A\u5C0F\u5199\u5B57\u7B26\u4E32",
        isUppercase: "'$property'\u7684\u503C\u5E94\u5168\u90E8\u4E3A\u5927\u5199\u5B57\u7B26\u4E32",
        length: "'$property'\u7684\u957F\u5EA6\u5E94\u4ECB\u4E8E$constraint1~$constraint2\u4E4B\u95F4",
        range: "'$property'\u7684\u503C\u5E94\u4ECB\u4E8E$constraint1~$constraint2\u4E4B\u95F4",
        maxLength: "'$property'\u7684\u957F\u5EA6\u4E0D\u5F97\u5927\u4E8E$constraint1",
        minLength: "'$property'\u7684\u957F\u5EA6\u4E0D\u5F97\u5C0F\u4E8E$constraint1",
        isNumberString: "'$property'\u7684\u503C\u4E0D\u662F\u6570\u5B57",
        exclude: "'$property'\u7684\u503C\u4E0D\u80FD\u5305\u542B\uFF1A$constraint1",
        matches: "'$property'\u6821\u9A8C\u4E0D\u901A\u8FC7"
    };
    validationMessage['en'] = {
        fieldContainer: "$target row $value",
        required: "Please input '$property'",
        equals: "'$property' should equals '$constraint1'",
        notEquals: "'$property' should not equals '$constraint1'",
        isNumber: "'$property' should be number",
        isInt: "'$property' should be integer",
        isFloat: "'$property' should be float",
        isBoolean: "'$property' should be boolean",
        isDate: "'$property' should be date",
        isEmail: "'$property' should be e-mail address",
        min: "'$property' should not less than $constraint1",
        minValue: "'$property' should not less than $constraint1",
        minDate: "'$property' should not early than $constraint1",
        max: "'$property' should not bigger than $constraint1",
        maxValue: "'$property' should not bigger than $constraint1",
        maxDate: "'$property' should not late than $constraint1",
        isBooleanString: "'$property' should be boolean string",
        isDateString: "'$property' should be date string",
        isLowercase: "'$property' should be lowercase charactor",
        isUppercase: "'$property' should be uppercase charactor",
        length: "'$property' length should between $constraint1~$constraint2\u4E4B\u95F4",
        range: "'$property' value should between $constraint1~$constraint2\u4E4B\u95F4",
        maxLength: "'$property' should not longer than $constraint1",
        minLength: "'$property' should not shorter than $constraint1",
        isNumberString: "'$property' should be number string",
        exclude: "'$property' should not include $constraint1",
        matches: "'$property' calibration failed"
    };
    validationMessage['zh-CHT'] = {
        fieldContainer: "$target \u7B2C $value \u884C",
        required: "\u8ACB\u8F38\u5165'$property'",
        equals: "'$property'\u7684\u503C\u8207$constraint1\u4E0D\u76F8\u7B49",
        notEquals: "'$property'\u7684\u503C\u4E0D\u80FD\u8207'$constraint1'\u76F8\u540C",
        isNumber: "'$property'\u7684\u503C\u4E0D\u662F\u6578\u5B57",
        isInt: "'$property'\u7684\u503C\u4E0D\u662F\u6574\u6578",
        isFloat: "'$property'\u7684\u503C\u4E0D\u662F\u6D6E\u9EDE\u578B\u6578\u5B57",
        isBoolean: "'$property'\u7684\u503C\u4E0D\u662F\u4F48\u723E\u503C",
        isDate: "'$property'\u7684\u503C\u4E0D\u662F\u6709\u6548\u65E5\u671F",
        isEmail: "\u90F5\u7BB1\u5730\u5740\u4E0D\u6B63\u78BA",
        min: "'$property'\u7684\u503C\u4E0D\u61C9\u5C0F\u65BC$constraint1",
        minValue: "'$property'\u7684\u503C\u4E0D\u61C9\u5C0F\u65BC$constraint1",
        minDate: "'$property'\u7684\u65E5\u671F\u4E0D\u61C9\u65E9\u65BC$constraint1",
        max: "'$property'\u7684\u503C\u4E0D\u61C9\u5927\u65BC$constraint1",
        maxValue: "'$property'\u7684\u503C\u4E0D\u61C9\u5927\u65BC$constraint1",
        maxDate: "'$property'\u4E0D\u61C9\u665A\u65BC$constraint1",
        isBooleanString: "'$property'\u7684\u503C\u4E0D\u662F\u6709\u6548\u4F48\u723E\u503C",
        isDateString: "'$property'\u7684\u503C\u4E0D\u662F\u6709\u6548\u7684\u65E5\u671F",
        isLowercase: "'$property'\u7684\u503C\u61C9\u5168\u90E8\u7232\u5C0F\u51A9\u5B57\u7B26\u4E32",
        isUppercase: "'$property'\u7684\u503C\u61C9\u5168\u90E8\u7232\u5927\u51A9\u5B57\u7B26\u4E32",
        length: "'$property'\u7684\u9577\u5EA6\u61C9\u4ECB\u65BC$constraint1~$constraint2\u4E4B\u9593",
        range: "'$property'\u7684\u503C\u61C9\u4ECB\u65BC$constraint1~$constraint2\u4E4B\u9593",
        maxLength: "'$property'\u7684\u9577\u5EA6\u4E0D\u5F97\u5927\u65BC$constraint1",
        minLength: "'$property'\u7684\u9577\u5EA6\u4E0D\u5F97\u5C0F\u65BC$constraint1",
        isNumberString: "'$property'\u7684\u503C\u4E0D\u662F\u6578\u5B57",
        exclude: "'$property'\u7684\u503C\u4E0D\u80FD\u5305\u542B\uFF1A$constraint1",
        matches: "'$property'\u6821\u9A57\u4E0D\u901A\u904E"
    };

    /**
     * 验证错误信息
     */
    var ValidationError = /** @class */ (function () {
        function ValidationError() {
            /**
             * 待验证的对象是否为数组集合
             */
            this.isArray = false;
            /**
             * 待验证的对象所属集合中的索引
             */
            this.index = undefined;
        }
        return ValidationError;
    }());

    /**
     * 执行数据验证
     */
    var ValidationExecutor = /** @class */ (function () {
        function ValidationExecutor(validator) {
            this.validator = validator;
            /** 异步验证请求集合 */
            this.awaitingPromises = [];
        }
        /**
         * 将信息中的关键字替换为具体实体对象中的信息
         * @param message 验证信息
         * @param metadata 验证规则
         * @param value 待验证的值
         */
        ValidationExecutor.replaceMessageSpecialTokens = function (message, metadata, value) {
            var messageString;
            if (message instanceof Function) {
                messageString = message(metadata);
            }
            else if (typeof message === 'string') {
                messageString = message;
            }
            if (messageString && metadata.constraints instanceof Array) {
                metadata.constraints.forEach(function (constraint, index) {
                    messageString = messageString.replace(new RegExp("\\$constraint" + (index + 1), 'g'), constraint);
                });
            }
            if (messageString && value !== undefined && value !== null) {
                messageString = messageString.replace(/\$value/g, value);
            }
            if (messageString) {
                messageString = messageString.replace(/\$property/g, metadata.property);
            }
            if (messageString) {
                messageString = messageString.replace(/\$target/g, metadata.targetName);
            }
            return messageString;
        };
        /**
         * 验证实例对象
         * @param object 验证实例对象
         * @param newValue 实体将要更新的值
         * @param validationErrors 验证信息集合
         * @param propertyName 实例对象属性
         * @param index 所属集合实例中索引
         */
        ValidationExecutor.prototype.execute = function (object, newValue, validationErrors, propertyName, index, externalRules, currentRowId, frameContext) {
            var _this = this;
            // if (!currentRowId) {
            //   currentRowId = object.primaryValue;
            // }
            if (!externalRules && frameContext) {
                externalRules = frameContext.form.getValidationRules();
            }
            // 提取实体上定义的验证描述
            // 格式{key:[rule1,rule2]}
            var validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);
            var remainedExternalRules = new Map();
            // 合并额外验证规则
            if (externalRules) {
                // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];
                // if (parentPathArray.length > 1) {
                //   parentPathArray[0] = '';
                // }
                var parentPathArray = [];
                var objectCursor = object;
                while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {
                    var cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';
                    // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {
                    parentPathArray.push(cursorParentPath);
                    // }
                    objectCursor = objectCursor['__PARENT__'];
                    if (objectCursor instanceof EntityList) {
                        objectCursor = objectCursor['__PARENT__'];
                    }
                }
                var parentPath_1 = parentPathArray.reverse().join('/');
                externalRules.forEach(function (rules, path) {
                    if (path) {
                        // 提取额外验证规则字段路径
                        var pathArray = path.split('/');
                        // 提取字段名称
                        var fieldName_1 = pathArray.pop();
                        // 提取字段父路径
                        var fieldParentPath = pathArray.join('/');
                        // 匹配外部验证规则和实体验证规则父路径
                        if (parentPath_1 === fieldParentPath) {
                            validateMetadatas[fieldName_1] = __spread((validateMetadatas[fieldName_1] || []));
                            // 合并外部校验规则到实体校验规则，并同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。
                            if (rules.length) {
                                var targetId_1 = '';
                                rules.forEach(function (rule) {
                                    if (rule.targetId && rule.targetId.length > targetId_1.length) {
                                        targetId_1 = rule.targetId;
                                    }
                                    validateMetadatas[fieldName_1].push(rule);
                                });
                                validateMetadatas[fieldName_1].forEach(function (validateRule) {
                                    validateRule.targetId = targetId_1;
                                    validateRule.targetName = rules[0].targetName;
                                    validateRule.property = rules[0].property;
                                    if (rules[0].frameContext) {
                                        validateRule.frameContext = rules[0].frameContext;
                                    }
                                    validateRule.fullPath = rules[0].fullPath;
                                    validateRule['initialized'] = true;
                                });
                            }
                        }
                        else {
                            remainedExternalRules.set(path, rules);
                        }
                    }
                });
            }
            // 处理校验规则中的属性名称
            // 场景为前端未开启校验或form校验规则中对应绑定路径中对应控件未开启校验，导致上一步骤中组件名、字段名未能同步为对应中文
            if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {
                Object.keys(validateMetadatas).forEach(function (fieldName) {
                    var validateRules = validateMetadatas[fieldName];
                    if (validateRules && validateRules.length > 0) {
                        var firstValidateRule = validateRules[0];
                        var path_1 = firstValidateRule['path'];
                        if (path_1) {
                            validateRules.forEach(function (validateRule) {
                                // 将initialized判断外移减少代码执行次数
                                if (validateRule['initialized'] !== true) {
                                    var bindingPaths = path_1.split('.');
                                    var form = _this.getForm(bindingPaths, frameContext);
                                    var formControl = _this.getFormControl(bindingPaths, frameContext);
                                    if (formControl) {
                                        validateRule.targetId = formControl.id;
                                        validateRule.targetName = form && form.formGroupName;
                                        validateRule.property = formControl.name || formControl.defaultI18nValue || '';
                                    }
                                }
                            });
                        }
                    }
                });
            }
            // 过滤出当前验证属性的验证规则
            if (propertyName) {
                validateMetadatas = Object.keys(validateMetadatas)
                    .filter(function (key) { return key === propertyName; })
                    .reduce(function (val, curr) {
                    var _a;
                    return Object.assign({}, val, (_a = {}, _a[curr] = validateMetadatas[curr], _a));
                }, {});
            }
            // validateMetadatas = {rule:当前属性的所有校验规则}
            Object.keys(validateMetadatas).filter(function (key) {
                return object && (object.hasOwnProperty(key) ||
                    (object.constructor.prototype &&
                        object.constructor.prototype.typeName &&
                        object.constructor.prototype.hasOwnProperty(key)) ||
                    object['__proto__'].hasOwnProperty(key));
            }).forEach(function (key) {
                // todo: 没用兼容value是undefined的情况
                var value = newValue;
                if (newValue === undefined) {
                    value = object[key];
                }
                var isMultLanguageField = false;
                var multiLangFields = _this.getMultiLanguageFields(object);
                if (multiLangFields && multiLangFields.length > 0) {
                    if (multiLangFields.includes(key)) {
                        isMultLanguageField = true;
                    }
                }
                // const value = newValue ||
                var validateRules = validateMetadatas[key];
                if (validateRules.length) {
                    var _a = validateRules[0], fieldName = _a.property, field = _a.targetId, frameContext_1 = _a.frameContext, fullPath = _a.fullPath;
                    // const fieldContainerName = Number.isInteger(index) ?
                    // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;
                    var fieldContainerName = Number.isInteger(index) ?
                        ValidationExecutor.replaceMessageSpecialTokens(ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER), validateRules[0], index + 1) : validateRules[0].targetName;
                    var validationDisplayName = fieldContainerName ? fieldContainerName + " - " + fieldName : "" + fieldName;
                    // const property = validateRules['path'] || key;
                    var validationError = _this.generateValidationError(object, value, key, validationDisplayName, index, field, frameContext_1, fullPath);
                    if (index !== undefined) {
                        validationError['index'] = index;
                    }
                    validationErrors.push(validationError);
                    _this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);
                }
            });
            this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);
            this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);
            // this.sortValidationErrors(validationErrors);
            // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题
            // if (!propertyName) {
            //     this.objectValidations(object, validationErrors);
            // }
        };
        ValidationExecutor.prototype.getMultiLanguageFields = function (entity) {
            if (entity && entity.constructor) {
                var ngFields_1 = FieldMetadataUtil.getNgFields(entity.constructor);
                return Object.keys(ngFields_1).filter(function (fieldName) { return ngFields_1[fieldName].enableMultiLangInput; });
            }
            return null;
        };
        /**
         * 清除通过验证信息
         * @param errors 验证失败信息
         */
        ValidationExecutor.prototype.stripEmptyErrors = function (errors) {
            var _this = this;
            return errors.filter(function (error) {
                if (error.children) {
                    error.children = _this.stripEmptyErrors(error.children);
                }
                if (Object.keys(error.constraints).length === 0) {
                    if (error.children.length === 0) {
                        return false;
                    }
                    else {
                        delete error.constraints;
                    }
                }
                return true;
            });
        };
        /**
         * 生成未通过验证的对象
         * @param object 要验证的实体实例对象
         * @param value 要验证的值
         * @param propertyName 待验证的实体属性名称
         * @param index 验证数据索引
         * @param field 待验证字段
         */
        ValidationExecutor.prototype.generateValidationError = function (object, value, property, propertyName, index, field, frameContext, fullPath) {
            var validationError = new ValidationError();
            validationError.target = object;
            validationError.value = value;
            validationError.property = property;
            validationError.propertyName = propertyName;
            validationError.field = field;
            validationError.index = index;
            validationError.children = [];
            validationError.constraints = {};
            if (frameContext) {
                validationError.frameContext = frameContext;
            }
            validationError.fullPath = fullPath;
            return validationError;
        };
        /**
         * 验证实体中的属性
         * @param object 要验证的实体实例对象
         * @param value 要验证的值
         * @param validateRules 验证规则
         * @param errorMap 难证信息。{[key]: message}
         *
         * key: 验证规则名称
         * message: 验证信息
         */
        ValidationExecutor.prototype.defaultValidations = function (object, value, validateRules, validationError, isMultLanguageField, currentRowId) {
            var _this = this;
            var errorMap = validationError.constraints;
            return validateRules
                .filter(function (validateRule) {
                // 验证实体属性是否符合规则
                var validValue = _this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);
                if (validValue instanceof Promise) {
                    var promise = validValue.then(function (isValid) {
                        if (!isValid) {
                            var _a = _this.createValidationError(object, value, validateRule), type = _a.type, message = _a.messageString;
                            errorMap[type] = message;
                            validationError.rule = validateRule;
                        }
                    });
                    _this.awaitingPromises.push(promise);
                }
                return !validValue;
            })
                .forEach(function (validateRule) {
                // 不符合规则，生成错误信息
                var _a = _this.createValidationError(object, value, validateRule), key = _a.type, message = _a.messageString;
                errorMap[key] = message;
                validationError.rule = validateRule;
            });
        };
        /**
         * 验证列表中的每条记录
         * @param object 要验证的实体实例对象
         * @param errors 验证失败的信息集合
         * @param property 属性名称
         * @param parentIndex 当前集合的父对象所属集合列表中的索引。
         */
        ValidationExecutor.prototype.listValidations = function (object, errors, property, parentIndex, externalRules, frameContext) {
            var _this = this;
            var INDEX_LABEL = "__ACTUAL_INDEX__";
            var listFields = FieldMetadataUtil.getNgList(object.constructor);
            if (!listFields) {
                return;
            }
            var keys = Object.keys(listFields);
            if (property) {
                keys = keys.filter(function (key) { return key === property; });
            }
            keys.forEach(function (propertyName) {
                var metadata = listFields[propertyName];
                var clzType = metadata.type;
                var value = object[propertyName];
                if (value) {
                    var parentPaths = object.getPaths().path || [];
                    parentPaths.push(propertyName);
                    var validationError_1 = _this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);
                    validationError_1.isArray = true;
                    errors.push(validationError_1);
                    value.items.forEach(function (entity, index) {
                        var actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;
                        _this.execute(entity, undefined, validationError_1.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);
                    });
                }
            });
        };
        /**
         * 验证实体中的引用对象
         * @param object 要验证的实体对象
         * @param errors 错误信息集合
         */
        ValidationExecutor.prototype.objectValidations = function (object, errors, property, parentIndex, externalRules, currentRowId, frameContext) {
            var _this = this;
            var objectFields = FieldMetadataUtil.getNgObjects(object.constructor);
            if (!objectFields || Object.keys(objectFields).length < 1) {
                return;
            }
            var keys = Object.keys(objectFields);
            if (property) {
                keys = keys.filter(function (key) { return key === property; });
            }
            keys.forEach(function (propertyName) {
                var metadata = objectFields[propertyName];
                var objectType = metadata.type;
                var value = object[propertyName];
                if (value) {
                    _this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);
                }
            });
        };
        /**
         * 创建验证规则信息
         * @param object 要验证的实体对象
         * @param value 验证的值
         * @param metadata 验证规则
         */
        ValidationExecutor.prototype.createValidationError = function (object, value, metadata) {
            // const targetName = object.constructor ? (object.constructor as any).name : undefined;
            var type = metadata.type;
            // 获取校验提示信息：先使用内置规则获取，获取不到时使用元数据上的提示，以兼容表达式场景
            var message = ValidationTypes.getMessage(type);
            if (!message) {
                message = metadata.message;
            }
            if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {
                if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {
                    // 获取日期类型的提示信息
                    var extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;
                    message = ValidationTypes.getMessage(extType);
                    /*if (metadata.constraints[0]) {
                      metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');
                    }*/
                }
            }
            var messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);
            return { type: type, messageString: messageString, metadata: metadata };
        };
        ValidationExecutor.prototype.getFrameContext = function (bindingPaths, eventFrameContext) {
            if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
                return null;
            }
            var paths = bindingPaths.concat([]);
            paths.pop();
            var bindingPath = paths.join('/');
            var frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find(function (context) { return context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/') === bindingPath; });
            return frameContext || null;
        };
        ValidationExecutor.prototype.getForm = function (bindingPaths, eventFrameContext) {
            if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
                return null;
            }
            var frameContext = this.getFrameContext(bindingPaths, eventFrameContext);
            return frameContext && frameContext.form || null;
        };
        ValidationExecutor.prototype.getFormControl = function (bindingPaths, eventFrameContext) {
            if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
                return null;
            }
            var paths = bindingPaths.concat([]);
            var propertyName = paths.pop();
            var frameContext = this.getFrameContext(bindingPaths, eventFrameContext);
            var formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;
            return formControl;
        };
        ValidationExecutor.prototype.isDateString = function (value) {
            var regex = /\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\s?)?(([0-2]\d:[0-5]\d)?(:[0-5]\d(?:\.\d+)))?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
            return regex.test(value);
        };
        return ValidationExecutor;
    }());

    /**
     * 数据验证帮助类，提供一些公共的操作方法函数
     */
    var ValidationUtils = /** @class */ (function () {
        function ValidationUtils() {
        }
        /**
         * 将错误信息集合转变为可读性高的文本数组
         * @param errors 验证失败错误集合
         * @param messages 返回的错误信息文本集合
         * @param parentPath 验证属性上级路径
         */
        ValidationUtils.createDetailedErrorMessage = function (errors, messages, parentPath) {
            if (messages === void 0) {
                messages = [];
            }
            if (parentPath === void 0) {
                parentPath = '';
            }
            errors.forEach(function (error) {
                var targetName = error.target ? error.target.constructor.name : '';
                var property = error.propertyName;
                var propConstraintFailed = function (propertyName) {
                    return "   - \u5C5E\u6027 " + parentPath + propertyName + " \u9A8C\u8BC1\u5931\u8D25\u7684\u89C4\u5219:  \n" +
                        ("" + Object.keys(error.constraints)
                            .map(function (ruleName) {
                            return "        #" + ruleName + ": " + error.constraints[ruleName] + "\n";
                        })
                            .join(''));
                };
                if (!parentPath) {
                    messages.push("\u7C7B\u578B\u4E3A " + targetName + " \u7684\u5B9E\u4F8B\u5BF9\u8C61\u6570\u636E\u9A8C\u8BC1\u5931\u8D25\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A\n");
                    if (error.constraints) {
                        messages.push(propConstraintFailed(property));
                    }
                    if (error.children.length) {
                        ValidationUtils.createDetailedErrorMessage(error.children, messages, property);
                    }
                }
                else {
                    var formattedProperty = Number.isInteger(+error.index)
                        ? "[" + error.index + "]." + property
                        : "" + (parentPath ? "." : "") + property;
                    if (error.constraints) {
                        messages.push(propConstraintFailed(formattedProperty));
                    }
                    if (error.children.length) {
                        ValidationUtils.createDetailedErrorMessage(error.children, messages, "" + parentPath + formattedProperty);
                    }
                }
            });
            return messages;
        };
        /**
         * 错误信息集合转换为简单对象格式
         * @param errors 错误信息集合
         * @param errObj 返回简单对象。如:
         * ```
         * { name: { required: '必填', max: '最大值99' },
         *   list: {
         *      0: { name:{required: '必填'},
         *           age: { min: '最小值 20' }
         *         },
         *      2: { ... }
         *   }
         * }
         *
         * ```
         */
        ValidationUtils.convertErrorsToNormalObject = function (errors, errObj) {
            errors.forEach(function (err) {
                var property = err.propertyName;
                var buildArray = function (childErrors) {
                    var itemErr = {};
                    childErrors.forEach(function (childErr) {
                        var _a, _b;
                        if (childErr.children.length) {
                            itemErr[childErr.index] = ValidationUtils.convertErrorsToNormalObject(childErr.children, childErr);
                        }
                        else {
                            if (itemErr[childErr.index]) {
                                itemErr[childErr.index] = Object.assign({}, itemErr[childErr.index], (_a = {},
                                    _a[childErr.propertyName] = childErr.constraints,
                                    _a));
                            }
                            else {
                                itemErr[childErr.index] = (_b = {}, _b[childErr.propertyName] = childErr.constraints, _b);
                            }
                        }
                    });
                    return itemErr;
                };
                if (!err.isArray) {
                    if (!err.children.length) {
                        errObj[property] = err.constraints;
                    }
                    else {
                        errObj[property] = ValidationUtils.convertErrorsToNormalObject(err.children, errObj);
                    }
                }
                else {
                    errObj[property] = buildArray(err.children);
                }
            });
            return errObj;
        };
        return ValidationUtils;
    }());

    /**
     * 日期处理类
     */
    var DateUtil = /** @class */ (function () {
        function DateUtil() {
        }
        /**
         * 将日期（或日期字符串）转换为完整的的ISO格式的字符串
         */
        DateUtil.formatISO = function (dateOrDateString) {
            if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                return this.emptyISODateTimeString;
            }
            var dateObj = this.parse(dateOrDateString);
            return dateFns.format(dateObj, this.defaultISOFormat);
        };
        /**
         * 将日期（或日期字符串）转换为指定格式的字符串
         * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
         * @param dateFormat 日期格式字符串
         */
        DateUtil.format = function (dateOrDateString, dateFormat) {
            if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                return this.emptyISODateTimeString;
            }
            var dateObj = this.parse(dateOrDateString);
            dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;
            return dateFns.format(dateObj, dateFormat);
        };
        /**
         * 创建日期
         * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
         */
        DateUtil.parse = function (dateOrDateString) {
            if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                return null;
            }
            if (this.isDate(dateOrDateString) === true) {
                return dateOrDateString;
            }
            return dateFns.parseISO(dateOrDateString);
        };
        /**
         * 是否是日期对象
         */
        DateUtil.isDate = function (date) {
            return dateFns.isDate(date);
        };
        /**
         * 是否是空日期或者空日期字符串
         * @param dateOrDateString 日期或日期字符串
         */
        DateUtil.isEmptyDateOrDateString = function (dateOrDateString) {
            if (this.isDate(dateOrDateString) === true) {
                return this.isEmptyDate(dateOrDateString);
            }
            return this.isEmptyDateString(dateOrDateString);
        };
        /**
         * 是否为空日期字符串
         * @param date 日期对象
         */
        DateUtil.isEmptyDate = function (date) {
            if (!date) {
                return true;
            }
            return false;
        };
        /**
         * 是否是空日期字符串
         * @param dateString 日期字符串
         */
        DateUtil.isEmptyDateString = function (dateString) {
            if (!dateString || dateString.startsWith('0001-01-01') === true) {
                return true;
            }
            return false;
        };
        /**
         * 两个日期是否相等
         * @param dateOrDateString1 日期对象或字符串
         * @param dateOrDateString1 日期对象或字符串
         * @return 相等返回true，否则返回false
         */
        DateUtil.isEqual = function (dateOrDateString1, dateOrDateString2) {
            var dateObj1 = this.parse(dateOrDateString1);
            var dateObj2 = this.parse(dateOrDateString2);
            if (dateObj1 === dateObj2) {
                return true;
            }
            return dateFns.isEqual(dateObj1, dateObj2);
        };
        /**
         * 两个日期是否相等
         * @param dateOrDateString1 日期对象或字符串
         * @param dateOrDateString1 日期对象或字符串
         * @return 返回-1、0、1
         */
        DateUtil.compare = function (dateOrDateString1, dateOrDateString2) {
            var dateObj1 = this.parse(dateOrDateString1);
            var dateObj2 = this.parse(dateOrDateString2);
            if (this.isEqual(dateObj1, dateObj2) === true) {
                return 0;
            }
            // 处理解析后为null的场景，null比所有有效日期小
            if (!dateObj1 && this.isDate(dateObj2) === true) {
                return -1;
            }
            if (!dateObj2 && this.isDate(dateObj1) === true) {
                return 1;
            }
            return dateFns.compareAsc(dateObj1, dateObj2);
        };
        /**
         * 空日期字符串（N版）
         * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除
         */
        // static emptyDateTimeString = '0001-01-01T00:00:00';
        DateUtil.emptyDateTimeString = null;
        /**
         * 默认空日期字符串（ISO标准格式）
         */
        // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';
        DateUtil.emptyISODateTimeString = null;
        /**
         * 默认日期听格式
         */
        DateUtil.defaultISOFormat = "yyyy-MM-dd'T'HH:mm:ssxxx";
        DateUtil.defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';
        DateUtil.defaultDateFormat = 'yyyy-MM-dd';
        DateUtil.defaultTimeFormat = 'HH:mm:ss';
        return DateUtil;
    }());

    var TranslateService = /** @class */ (function () {
        function TranslateService() {
        }
        /**
         * 设置多语服务
         * @param translate translate
         */
        TranslateService.setTranslate = function (translate) {
            if (translate) {
                this.translate = translate;
            }
        };
        /**
         * 获取当前语言
         */
        TranslateService.getCurrentLanguage = function () {
            return this.translate && this.translate.getCurrentLanguage() || this.defaultLanguage;
        };
        TranslateService.dispose = function () {
            this.translate = null;
        };
        TranslateService.defaultLanguage = 'zh-CHS';
        TranslateService.translate = null;
        return TranslateService;
    }());

    /**
     * 校验实体实例对象数据
     */
    var Validator = /** @class */ (function () {
        function Validator() {
            this.validatorJs = ValidatorJS__default;
        }
        /**
         * 验证实例对象中数据是否合法
         * @param object 待校验的实例对象
         * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性
         */
        // tslint:disable-next-line: max-line-length
        Validator.prototype.validate = function (object, propertyName, value, externalRules, index, frameContext) {
            var _this = this;
            var validationErrors = [];
            var executor = new ValidationExecutor(this);
            executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);
            return Promise.all(executor.awaitingPromises).then(function () {
                var errors = executor.stripEmptyErrors(validationErrors);
                _this.sortValidationErrors(errors);
                return _this.buildErrors(errors);
            });
        };
        /**
         * 校验信息排序（为了兼容树形表）
         * @param validationErrors 验证信息数组
         */
        Validator.prototype.sortValidationErrors = function (validationErrors) {
            var _this = this;
            // 如果存在无序号的信息则不排序
            var sortable = true;
            validationErrors.forEach(function (info) {
                if (info.children && info.children.length > 1) {
                    _this.sortValidationErrors(info.children);
                }
                if (typeof info.index !== "number") {
                    sortable = false;
                }
            });
            if (sortable) {
                validationErrors.sort(function (a, b) { return a.index - b.index; });
            }
        };
        /**
         * 执行校验
         * @param object
         * @param propertyName
         * @param value
         * @param externalRules
         * @param index
         * @param frameContext
         * @param ignoreAsyncValidateRules
         * @returns
         */
        Validator.prototype.verify = function (object, propertyName, value, externalRules, index, frameContext, ignoreAsyncValidateRules) {
            var _this = this;
            if (ignoreAsyncValidateRules === void 0) {
                ignoreAsyncValidateRules = false;
            }
            var validationErrors = [];
            var executor = new ValidationExecutor(this);
            executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);
            if (executor.awaitingPromises && executor.awaitingPromises.length > 0 && ignoreAsyncValidateRules === false) {
                return Promise.all(executor.awaitingPromises).then(function () {
                    var errors = executor.stripEmptyErrors(validationErrors);
                    var result = _this.buildErrors(errors);
                    return result;
                });
            }
            else {
                var errors = executor.stripEmptyErrors(validationErrors);
                return this.buildErrors(errors);
            }
        };
        /**
         * 验证实体属性元数据中设置的校验规则是否合法
         * @param object 实例对象
         * @param value 待校验的值
         * @param validateRule 验证规则
         */
        Validator.prototype.validateValueByMetadata = function (object, value, validateRule, isMultLanguageField, currentRowId) {
            var _a;
            var validType = validateRule.type;
            var constraintsToValidate = [];
            if (validateRule.constraints) {
                constraintsToValidate = validateRule.constraints.map(function (param) {
                    if (typeof param === 'function') {
                        return param(object, value);
                    }
                    return param;
                });
            }
            else {
                validateRule.constraints = [];
            }
            if (ValidationTypes.isValidType(validType)) {
                if (validType === ValidationTypes.MAXVALUE) {
                    var rule = constraintsToValidate[0];
                    if (this.isDateString(value) || this.isDate(value) || this.isDateString(rule) || this.isDate(rule)) {
                        // 如果日期值不存在，则不判断大小
                        if (!value) {
                            return true;
                        }
                        if (value.indexOf('~') !== -1) {
                            // 不对日期区间进行校验
                            return true;
                        }
                        return this[ValidationTypes.MAX_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));
                    }
                    else {
                        return this[ValidationTypes.MAXVALUE](value, isMultLanguageField, constraintsToValidate[0]);
                    }
                }
                else if (validType === ValidationTypes.MINVALUE) {
                    // 如果是null或undefined，直接返回true
                    if (constraintsToValidate[0] === null || constraintsToValidate[0] === undefined) {
                        return true;
                    }
                    if (this.isDateString(value) || this.isDate(value)) {
                        if (constraintsToValidate[0] === 0) {
                            return true;
                        }
                        return this[ValidationTypes.MIN_DATE](DateUtil.parse(value), isMultLanguageField, DateUtil.parse(constraintsToValidate[0]));
                    }
                    else if (this.isNumber(value)) {
                        return this[ValidationTypes.MIN](value, isMultLanguageField, constraintsToValidate[0]);
                    }
                }
                else {
                    return this[validType].apply(this, __spread([value, isMultLanguageField], constraintsToValidate));
                }
            }
            else {
                if (typeof validateRule.eval === 'function') {
                    var bindingPath = validateRule.bindingPath;
                    var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                    var fieldName = validateRule.field;
                    if (bindingPaths.length !== 0) {
                        var prefix = bindingPaths.join('/');
                        fieldName = prefix + "/" + fieldName.split('.').filter(function (p) { return p; }).join('/');
                    }
                    var options = { patch: (_a = {}, _a[fieldName] = value, _a) };
                    options.currentRows = [];
                    var parentEntityListPaths = object && typeof object['getEntityListPath'] === 'function' && object.getEntityListPath();
                    if (parentEntityListPaths.length === 4) {
                        var childrenList = parentEntityListPaths.slice(1, 3).reverse();
                        options.currentRows.push({ bindingPath: childrenList[1], primaryValue: childrenList[0].split(':')[1] });
                    }
                    if (currentRowId) {
                        if (validateRule.bindingPath.split('/').filter(function (p) { return p; }).length !== 0) {
                            var primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();
                            options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });
                        }
                        options.currentRow = { bindingPath: validateRule.bindingPath, primaryValue: currentRowId };
                    }
                    else {
                        var primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();
                        options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });
                    }
                    var result = validateRule.eval(options);
                    if (validateRule.type === "require" /* Require */) {
                        var isValid = this.required(value, isMultLanguageField);
                        if (result) {
                            return isValid;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        return result;
                    }
                }
            }
            return true;
        };
        Validator.prototype.buildErrors = function (errors) {
            var msg = new Set(ValidationUtils.createDetailedErrorMessage(errors));
            var newMsg = [];
            msg.forEach(function (v) {
                newMsg.push(v);
            });
            return {
                isValid: errors.length === 0,
                errors: errors,
                message: newMsg.join('')
            };
        };
        /** 自定义验证 */
        Validator.prototype.customValidation = function (value, comparison) {
            return comparison;
        };
        Validator.prototype.isEmptyValue = function (value) {
            var result = value === '' || value === null || value === undefined
                || value === '0001-01-01' || value === '0001-01-01 00:00:00' || value === '0001-01-01T00:00:00';
            return result;
        };
        /** 必填项 */
        Validator.prototype.required = function (value, isMultLanguageField) {
            if (isMultLanguageField) {
                var currentLanguage = TranslateService.getCurrentLanguage();
                if (Object.keys(value).length < 1) {
                    return false;
                }
                // 如果能够获取到当前语言，那么当前语言对应的输入不能为空
                if (currentLanguage) {
                    return !!value[currentLanguage];
                }
                // 如果当前语言为空，那么必填要求至少有一个输入
                // const allEmpty = Object.values(value).every((v: any) => !v || v.length < 1); // .filter((v: any) => !v || v.length < 1);
                // if (allEmpty) {
                //   return false;
                // }
                return true;
            }
            if (typeof value === 'object' && value !== null) {
                if (!Object.keys(value).length) {
                    return false;
                }
                value = Object.values(value)[0];
            }
            // tslint:disable: max-line-length
            return value !== '' && value !== null && value !== undefined
                && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';
        };
        /** 判断两个值是否相等 */
        Validator.prototype.equals = function (value, comparison) {
            return value === comparison;
        };
        /**
         * 检查 value 是否不等于参照值
         * @param value 要检查的值
         * @param comparison 对比参照值
         */
        Validator.prototype.notEquals = function (value, comparison) {
            return value !== comparison;
        };
        /**
         * 判断value 是否为数字
         * @param value 要检查的值
         * @param options 验证选项
         */
        Validator.prototype.isNumber = function (value, options) {
            if (options === void 0) {
                options = {};
            }
            if (value === Infinity || value === -Infinity) {
                return options.allowInfinity;
            }
            if (Number.isNaN(value)) {
                return options.allowNaN;
            }
            return Number.isFinite(value);
        };
        /** 判断value是否为整数 */
        Validator.prototype.isInt = function (value) {
            return Number.isInteger(value);
        };
        /** 是否为浮点类型 */
        Validator.prototype.isFloat = function (value) {
            if (this.isNumber(value) || this.isNumberString(value)) {
                return this.validatorJs.isFloat(value);
            }
            return false;
        };
        /**
         * 检查给定的value 是否布尔值
         */
        Validator.prototype.isBoolean = function (value) {
            return value instanceof Boolean || typeof value === 'boolean';
        };
        /**
         * 检查给定的value 是否为字符串
         */
        Validator.prototype.isString = function (value) {
            return value instanceof String || typeof value === 'string';
        };
        /**
         * 检查给定的value 是否为日期
         */
        Validator.prototype.isDate = function (value) {
            return value instanceof Date && !isNaN(value.getTime());
        };
        /**
         * 检查给定的value 是否为日期字符串
         */
        Validator.prototype.isDateString = function (value) {
            var regex = /\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\s?)?(([0-2]\d:[0-5]\d)?(:[0-5]\d(?:\.\d+)))?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
            return this.isString(value) && regex.test(value) && this.validatorJs.toDate(value);
        };
        /** 判断value 的长度是否在允许的最小值 和最大值之间 */
        Validator.prototype.length = function (value, min, max, isMultLanguageField) {
            return typeof value === 'string' && this.validatorJs.isLength(value, min, max);
        };
        /**
         * 检查给定的value的长度是否符合设定的最小值
         * @param value 待检查的字符串
         * @param min 最小长度
         */
        Validator.prototype.minLength = function (value, isMultLanguageField, min) {
            if (isMultLanguageField) {
                // const currentLanguage = TranslateService.getCurrentLanguage();
                if (typeof value === 'object') {
                    var hasInvalidLangs = Object.values(value).filter(function (v) { return v && v.length < min; });
                    if (hasInvalidLangs && hasInvalidLangs.length > 0) {
                        return false;
                    }
                }
                // if (currentLanguage) {
                //   return value[currentLanguage] ? value[currentLanguage].length > min : true;
                // }
                // 如果无法获取当前语言，则只要有一种语言的输入长度大于最小长度即可。
                // const hasValidLangs = Object.values(value).filter((v: any) => v && v.length > min);
                // if (hasValidLangs.length > 0) {
                //   return true;
                // }
                // return false;
                return true;
            }
            if (value && typeof value !== 'string') {
                value = value.toString();
            }
            return !value || (typeof value === 'string' && this.length(value, min));
        };
        /**
         * 检查给定的value的长度是否符合设定的最大值
         * @param value 待检查的字符串
         * @param max 最大长度
         */
        Validator.prototype.maxLength = function (value, isMultLanguageField, max) {
            if (isMultLanguageField) {
                // const currentLanguage = TranslateService.getCurrentLanguage();
                // if (currentLanguage) {
                //   return value[currentLanguage] ? value[currentLanguage].length < max : true;
                // }
                if (typeof value === 'object') {
                    var hasInvalidLangs = Object.values(value).filter(function (v) { return v && v.length > max; });
                    if (hasInvalidLangs.length > 0) {
                        return false;
                    }
                }
                return true;
            }
            if (typeof value === 'object') {
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        var element = value[key];
                        if (typeof element === 'string' && !this.length(value[key], 0, max)) {
                            return false;
                        }
                    }
                }
                return true;
            }
            if (value && typeof value !== 'string') {
                value = value.toString();
            }
            return !value || (typeof value === 'string' && this.length(value, 0, max));
        };
        /** 检查value的值是否在 最大值与最小值之间 */
        Validator.prototype.range = function (value, isMultLanguageField, min, max) {
            return typeof value === 'number' && this.isNumber(min) && this.isNumber(max) && value >= min && value <= max;
        };
        /**
         * 日期类型的值是否在某个区间
         * @param value value
         * @param min 最小值
         * @param max 最大值
         */
        Validator.prototype.dateRange = function (value, isMultLanguageField, rule, type) {
            // 2010~2020|04~05|03 11:00:00~05 12:00:00
            if (!value) {
                return true;
            }
            if (type === 'maxValue' || type === 'maxDate') {
                if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {
                    return this.maxValue(parseInt(this.getRangeValue(value, 1)), isMultLanguageField, parseInt(rule.split(' ')[0]));
                }
                else if (this.isDayTimeRange(value)) {
                    return true;
                }
            }
            else if (type === 'minValue' || type === 'minDate') {
                if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {
                    return this.maxValue(parseInt(this.getRangeValue(value, 0)), isMultLanguageField, parseInt(rule.split(' ')[0]));
                }
                else if (this.isDayTimeRange(value)) {
                    return true;
                }
            }
            return false;
        };
        Validator.prototype.getRangeValue = function (value, position, splitor) {
            if (splitor === void 0) {
                splitor = '~';
            }
            return value.split(splitor)[position];
        };
        Validator.prototype.isDateRange = function (value) {
            if (typeof value !== 'string') {
                value = value.toString();
            }
            return /(\d{4}|\d{2})/.test(value);
        };
        /**
         * 是否年度区间
         * @param value value
         */
        Validator.prototype.isYearRange = function (value) {
            if (typeof value !== 'string') {
                value = value.toString();
            }
            return /^\d{4}~\d{4}$/.test(value);
        };
        /**
         * 是否为年月区间
         * @param value value
         */
        Validator.prototype.isYearMonthRange = function (value) {
            if (typeof value !== 'string') {
                value = value.toString();
            }
            return /^\d{4}-\d{2}~\d{4}-\d{2}$/.test(value);
        };
        /**
         * 是否为月或天的区间
         * @param value value
         */
        Validator.prototype.isMonthOrDayRange = function (value) {
            if (typeof value !== 'string') {
                value = value.toString();
            }
            return /^[0|1|2|3]\d{1}~[0|1|2|3]\d{1}$/.test(value);
        };
        /**
         * 是否为天+时间的区间
         * @param value value
         */
        Validator.prototype.isDayTimeRange = function (value) {
            if (typeof value !== 'string') {
                value = value.toString();
            }
            return /^[0|1|2|3]\d{1} \d{2}:\d{2}:\d{2}~[0|1|2|3]\d{1} \d{2}:\d{2}:\d{2}$/.test(value);
        };
        /**
         * Checks if the first number is greater than second.
         */
        Validator.prototype.min = function (num, isMultLanguageField, min) {
            return typeof num === 'number' && typeof min === 'number' && num >= min;
        };
        /**
         * 最小值验证
         */
        Validator.prototype.minValue = function (num, isMultLanguageField, min) {
            // 如果值不存在，则不进行最小值的判断
            if (num === null || num === undefined) {
                return true;
            }
            // 按照大数处理
            if ((typeof num === 'string' && num.match(/^(-?\d+)(\.\d+)?$/g)) || (typeof min === 'string' && min.match(/^(-?\d+)(\.\d+)?$/g))) {
                var value = new bignumber_js.BigNumber(num);
                var maxValue = new bignumber_js.BigNumber(min);
                return value.isGreaterThanOrEqualTo(maxValue);
            }
            return typeof num === 'number' && typeof min === 'number' && num >= min;
        };
        /**
         * Checks if the first number is less than second.
         */
        Validator.prototype.max = function (num, isMultLanguageField, max) {
            // 如果值不存在，则不进行最小值的判断
            if (num === null || num === undefined) {
                return true;
            }
            return typeof num === 'number' && typeof max === 'number' && num <= max;
        };
        /**
         * 最大值验证
         */
        Validator.prototype.maxValue = function (num, isMultLanguageField, max) {
            // 如果值不存在，则不进行最小值的判断
            if (num === null || num === undefined) {
                return true;
            }
            // 按照大数处理
            if ((typeof num === 'string' && num.match(/^(-?\d+)(\.\d+)?$/g)) || (typeof max === 'string' && max.match(/^(-?\d+)(\.\d+)?$/g))) {
                var value = new bignumber_js.BigNumber(num);
                var maxValue = new bignumber_js.BigNumber(max);
                return value.isLessThanOrEqualTo(maxValue);
            }
            return typeof num === 'number' && typeof max === 'number' && num <= max;
        };
        /**
         * Checks if the value is a date that's after the specified date.
         */
        Validator.prototype.minDate = function (date, isMultLanguageField, minDate) {
            if (!date) {
                return true;
            }
            return date && date.getTime() >= minDate.getTime();
        };
        /**
         * Checks if the value is a date that's before the specified date.
         */
        Validator.prototype.maxDate = function (date, isMultLanguageField, maxDate) {
            // 如果值不存在，则不进行最小值的判断
            if (date === null || date === undefined) {
                return true;
            }
            return date && date.getTime() <= maxDate.getTime();
        };
        /**
         * Checks if a string is a boolean.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.isBooleanString = function (value) {
            return typeof value === 'string' && this.validatorJs.isBoolean(value);
        };
        /**
         * Checks if the string is numeric.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.isNumberString = function (value) {
            return typeof value === 'string' && this.validatorJs.isNumeric(value);
        };
        /**
         * Checks if the string contains the seed.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.contains = function (value, isMultLanguageField, seed) {
            return typeof value === 'string' && this.validatorJs.contains(value, seed);
        };
        /**
         * Checks if the string does not contain the seed.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.notContains = function (value, isMultLanguageField, seed) {
            return typeof value === 'string' && !this.validatorJs.contains(value, seed);
        };
        /**
         * Checks if the string is an email.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.isEmail = function (value) {
            return typeof value === 'string' && this.validatorJs.isEmail(value);
        };
        /**
         * Checks if the string is valid JSON (note: uses JSON.parse).
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.isJSON = function (value) {
            return typeof value === 'string' && this.validatorJs.isJSON(value);
        };
        /**
         * Checks if the string is lowercase.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.isLowercase = function (value) {
            return typeof value === 'string' && this.validatorJs.isLowercase(value);
        };
        /**
         * Checks if the string is uppercase.
         * If given value is not a string, then it returns false.
         */
        Validator.prototype.isUppercase = function (value) {
            return typeof value === 'string' && this.validatorJs.isUppercase(value);
        };
        /**
         * 验证字符串是否包含非法字符
         * @param value 验证的字符串
         * @param someChars 非法字符。如：#￥%@$
         */
        Validator.prototype.exclude = function (value, isMultLanguageField, someChars) {
            var _this = this;
            var arrChar = someChars.split('');
            var counter = 0;
            arrChar.forEach(function (val) {
                if (_this.contains(value, isMultLanguageField, val)) {
                    counter++;
                }
            });
            return counter === 0;
        };
        /**
         * 自定义正则验证
         * @param value 待验证的字符串
         * @param pattern 正则表达式
         */
        Validator.prototype.matches = function (value, isMultLanguageField, pattern) {
            value = (value === null || value === undefined) ? '' : value.toString();
            if (value === '') {
                return true;
            }
            return this.validatorJs.matches(value, pattern);
        };
        return Validator;
    }());

    /**
     * 实体集合列表
     */
    var EntityList = /** @class */ (function () {
        // #endregion
        /**
         * @param data JSON数据集合
         * @param type 集合中的实体类型
         */
        function EntityList(data, type) {
            var _this = this;
            this.__type__ = 'EntityList';
            // #region 私有属性
            this.originalData = [];
            /**
             * 已废弃：请勿使用
             */
            this.listChanged = new rxjs.Subject();
            /**
             * 已废弃：请勿使用
             */
            this.changeSet = new ChangeSet();
            /**
             * 已废弃：请勿使用
             */
            this.validator = new Validator();
            // #endregion
            // #region 公有属性
            /**
             * 集合改变时触发(新增、行记录修改、删除)
             * @event
             */
            this.onListChanged = this.listChanged.asObservable();
            this.clear();
            if (data) {
                // this.loadEntities(data);
                data.forEach(function (item) {
                    _this.initEntity(EntityFactory$1(type, item));
                });
            }
        }
        Object.defineProperty(EntityList.prototype, "items", {
            /**
             * 获取项集合
             */
            get: function () {
                return this.rawData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityList.prototype, "changes", {
            /**
             * 列表变更集
             */
            get: function () {
                return this.changeSet.changes;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 迭代器
         */
        EntityList.prototype[Symbol.iterator] = function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [5 /*yield**/, __values(this.items)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        };
        // #region 公有方法
        /** 加载实体列表 */
        EntityList.prototype.loadEntities = function (entities) {
            var _this = this;
            this.clear();
            entities.forEach(function (entity) {
                _this.initEntity(entity);
            });
            // 发送Load变更
            var changeItem = {
                path: [],
                value: entities,
                preValue: undefined,
                type: exports.ModifyType.Load,
                target: this
            };
            this.setChanges(changeItem);
        };
        /**
         * 清空
         */
        EntityList.prototype.clear = function () {
            this.rawData = [];
            this.originalData = [];
        };
        /**
         * 添加实体对象到集合中，并返回新加的对象
         * @param entity 实体对象
         * @param isCloned 克隆
         */
        EntityList.prototype.appendNew = function (entity, isCloned) {
            if (isCloned === void 0) {
                isCloned = false;
            }
            var newEntity = this.initEntity(entity, true);
            // 新增变更
            var changeItem = {
                path: [],
                value: [newEntity],
                preValue: undefined,
                type: exports.ModifyType.Add
            };
            if (isCloned === true) {
                changeItem.type = exports.ModifyType.Clone;
            }
            this.setChanges(changeItem);
            return newEntity;
        };
        /**
         * 在指定位置插入实体
         * @param entity 实体
         * @param position 插入位置
         */
        EntityList.prototype.insert = function (entity, position) {
            var newEntity = this.initEntity(entity, true);
            // 新增变更
            var changeItem = {
                path: [],
                value: [newEntity],
                preValue: undefined,
                type: exports.ModifyType.Insert,
                position: position,
            };
            this.setChanges(changeItem);
            return newEntity;
        };
        /**
         * 追加实体
         */
        EntityList.prototype.appendEntity = function (entity) {
            var newEntity = this.initEntity(entity, true);
            // 新增变更
            var changeItem = {
                path: [],
                value: [newEntity],
                preValue: undefined,
                type: exports.ModifyType.Add
            };
            this.setChanges(changeItem);
        };
        /**
         * 批量追加实体
         */
        EntityList.prototype.appendEntities = function (entities) {
            var _this = this;
            var newEntites = entities.map(function (entity) {
                return _this.initEntity(entity, true);
            });
            var changeItem = {
                path: [],
                value: newEntites,
                preValue: undefined,
                type: exports.ModifyType.Add
            };
            this.setChanges(changeItem);
        };
        /**
         * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败
         * @param primaryId 主键ID
         */
        EntityList.prototype.remove = function (primaryId) {
            var _a;
            var total = this.count();
            var indexToRemove = this.rawData.findIndex(function (entity) {
                return entity.primaryValue === primaryId;
            });
            if (indexToRemove === -1) {
                return false;
            }
            var entityToRemove = this.rawData[indexToRemove];
            this.rawData.splice(indexToRemove, 1);
            // 删除变更
            var changeItem = {
                path: [],
                value: (_a = {}, _a[entityToRemove.primaryProperty.dataField] = primaryId, _a),
                preValue: undefined,
                type: exports.ModifyType.Remove
            };
            this.updateIndex(total);
            this.setChanges(changeItem);
            return true;
        };
        /**
         * 从集合中获取指定ID值的实体对象
         * @param id 主键值
         */
        EntityList.prototype.get = function (id) {
            return this.items.find(function (item) {
                return item.primaryValue === id;
            });
        };
        /**
         * 将变更记录添加到集合变更集中
         * @param value 变更记录
         */
        EntityList.prototype.setChanges = function (modinfo) {
            // 向app层发送的变更
            this.listChanged.next(modinfo);
            // 构造向changeSet中添加的chagne
            var change = Object.assign({}, modinfo);
            if ((modinfo.type === exports.ModifyType.Add || modinfo.type === exports.ModifyType.Insert || modinfo.type === exports.ModifyType.Clone) && modinfo.value[0] instanceof Entity) {
                change.value = [modinfo.value[0].data];
            }
            this.changeSet.append(change);
        };
        /** 集合总记录数 */
        EntityList.prototype.count = function () {
            return this.items.length;
        };
        /**
         * 获取实体对象的索引值
         */
        EntityList.prototype.indexOf = function (entity) {
            return this.items.indexOf(entity);
        };
        /**
         * 计算集合中某个属性的总和
         * @param propertyName 属性名称
         */
        EntityList.prototype.sum = function (propertyName) {
            if (this.count() === 0) {
                return 0;
            }
            return this.items.reduce(function (val, curr) {
                return val + curr[propertyName];
            }, 0);
        };
        /**
         * 集合数据验证
         */
        EntityList.prototype.validate = function () {
            var propertyName = this.getPropertyName();
            return rxjs.from(this.validator.validate(this[PARENT_CLASS], propertyName));
        };
        /**
         * 已废弃：请使用toJSON方法代替
         * @deprecated
         */
        EntityList.prototype.toJson = function () {
            return this.rawData;
        };
        /**
         * 转换为JSON格式
         */
        EntityList.prototype.toJSON = function () {
            var result = [];
            this.items.forEach(function (entity) {
                result.push(entity.toJSON());
            });
            return result;
        };
        EntityList.prototype.toArray = function () {
            return this.items;
        };
        // #endregion
        // #region 私有方法
        /**
         * 实体初始化
         * @param entity 实体
         */
        EntityList.prototype.initEntity = function (entity, isNewEntity) {
            var _this = this;
            if (isNewEntity === void 0) {
                isNewEntity = false;
            }
            entity[PARENT_CLASS] = this;
            entity[PARENT_PATH] = this[PARENT_PATH];
            entity.onValueChanged.subscribe(function (v) {
                var path = v.path;
                var value = v.value;
                var preValue = v.preValue;
                var operator = v.type;
                var subChanges = { path: path, value: value, preValue: preValue, type: operator };
                if (v.changeSetValue !== undefined) {
                    subChanges['changeSetValue'] = v.changeSetValue;
                }
                _this.setChanges(subChanges);
            });
            // TODO: 添加数据验证逻辑代码
            var newLength = this.rawData.push(entity);
            this[newLength - 1] = entity;
            if (!isNewEntity) {
                this.originalData.push(entity.toJSON());
            }
            return entity;
        };
        /**
         * 更新索引
         * @param total 总记录数
         */
        EntityList.prototype.updateIndex = function (total) {
            var _this = this;
            for (var i = 0; i < total; i++) {
                delete this[i];
            }
            this.rawData.forEach(function (entity, index) {
                _this[index] = entity;
            });
        };
        /**
         * 获取属性名称
         */
        EntityList.prototype.getPropertyName = function () {
            var path = this[PARENT_PATH];
            if (path && path.length) {
                var name_1 = path[path.length - 1];
                return name_1;
            }
            return undefined;
        };
        return EntityList;
    }());

    // export type ClassType = new (...args: any[]) => any;
    var BigNumberType = 'BigNumber';
    (function (DataChangeType) {
        DataChangeType[DataChangeType["Add"] = 0] = "Add";
        DataChangeType[DataChangeType["Delete"] = 1] = "Delete";
    })(exports.DataChangeType || (exports.DataChangeType = {}));
    (function (HttpMethod) {
        HttpMethod["GET"] = "GET";
        HttpMethod["POST"] = "POST";
        HttpMethod["PUT"] = "PUT";
        HttpMethod["DELETE"] = "DELETE";
    })(exports.HttpMethod || (exports.HttpMethod = {}));
    (function (BackEndMessage) {
        /**
         * 消息级别
         */
        var Level;
        (function (Level) {
            Level["Error"] = "Error";
            Level["Info"] = "Info";
            Level["Warning"] = "Warning";
        })(Level = BackEndMessage.Level || (BackEndMessage.Level = {}));
        /**
         * 消息
         * @description 接口执行成功，但有info/warning级别的消息
         */
        var Message = /** @class */ (function () {
            function Message(bizMessages, context) {
                this.bizMessages = bizMessages;
                this.context = context;
            }
            return Message;
        }());
        BackEndMessage.Message = Message;
    })(exports.BackEndMessage || (exports.BackEndMessage = {}));
    (function (RunMode) {
        RunMode["compatible"] = "compatible";
        RunMode["highSpeed"] = "highSpeed";
    })(exports.RunMode || (exports.RunMode = {}));
    /**
     * 控制器运行模式，compatible | highSpeed
     */
    var DEVKIT_RUN_MODE = new core.InjectionToken('@farris/devkit_run_mode');
    (function (ComponentType) {
        ComponentType["farrisDataGridComponent"] = "farrisDatagridComponent";
        ComponentType["farrisTreeTalbeComponent"] = "farrisTreeTalbeComponent";
        ComponentType["primengTreeComponent"] = "primengTreeComponent";
        ComponentType["kendoGridComponent"] = "kendoGridComponent";
    })(exports.ComponentType || (exports.ComponentType = {}));
    (function (DestroyOpportunity) {
        DestroyOpportunity["AppContextDestroy"] = "AppContextDestroy";
        DestroyOpportunity["MenuOrAppClose"] = "MenuOrAppClose";
    })(exports.DestroyOpportunity || (exports.DestroyOpportunity = {}));

    var UserSettingsService = /** @class */ (function () {
        function UserSettingsService() {
        }
        UserSettingsService.setUserSettings = function (userSettings) {
            this.userSettings = userSettings;
            this.timeZone = undefined;
            this.timeZoneOffset = undefined;
        };
        /**
         * 获取用户配置的时区
         */
        UserSettingsService.getTimeZone = function () {
            if (this.timeZone !== undefined) {
                return this.timeZone;
            }
            var timeZone = this.userSettings && this.userSettings.timeZone || null;
            this.timeZone = timeZone;
            return timeZone;
        };
        UserSettingsService.getTimeZoneOffset = function () {
            if (this.timeZoneOffset !== undefined) {
                return this.timeZoneOffset;
            }
            var timeZoneOffset = this.userSettings && this.userSettings.timeZoneOffset || null;
            this.timeZoneOffset = timeZoneOffset;
            return timeZoneOffset;
        };
        UserSettingsService.userSettings = null;
        UserSettingsService.timeZone = undefined;
        UserSettingsService.timeZoneOffset = undefined;
        return UserSettingsService;
    }());

    //import { timezones } from './time_zones';
    //import { Timezone } from './types';
    var ZonedTime = /** @class */ (function () {
        function ZonedTime() {
        }
        /**
         * 将指定时区的时间转换为UTC时区时间（带时区）
         * @param date 时间
         * @param timeZone 时区
         */
        // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {
        //   timeZone = this.getStandardTimezoneName(timeZone);
        //   return moment.tz(date, timeZone).utc().format();
        // }
        /**
         * 将带时区的时间转换为指定时区的时间字符串
         * @param date 时间
         * @param timeZone 时区
         * @param format 时间格式
         */
        // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {
        //   timeZone = this.getStandardTimezoneName(timeZone);
        //   return moment(date).tz(timeZone).format(format);
        // }
        /**
         * 获取标准时区名称
         * @param tz 时区
         */
        // public static getStandardTimezoneName(tz: string) {
        //   let momentZone = moment.tz.zone(tz);
        //   let standardTimezone = tz;
        //   if (!momentZone) {
        //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));
        //     standardTimezone = timezone && timezone.utc[0] || null;
        //   }
        //   return standardTimezone;
        // }
        ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString = function (date, offset, format) {
            if (offset === void 0) {
                offset = 0;
            }
            if (format === void 0) {
                format = 'YYYY-MM-DD HH:mm:ss.SSS';
            }
            var utcTime = moment(date).utc();
            var offsetMinutes = offset * 60;
            var result = utcTime.add(offsetMinutes, 'm');
            return result.format(format);
        };
        ZonedTime.timeZoneOffsetTimeToUtcTimeString = function (date, offset, format) {
            if (format === void 0) {
                format = 'YYYY-MM-DD HH:mm:ss.SSS';
            }
            return moment(date).utcOffset(offset, true).toISOString();
        };
        return ZonedTime;
    }());

    /**
     * 路由参数服务
     */
    var RouterParamService = /** @class */ (function () {
        function RouterParamService() {
        }
        /**
         * 获取参数
         */
        RouterParamService.prototype.getParams = function (url) {
            var allParams = this.getAllParams();
            return allParams[url] || {};
        };
        /**
         * 设置参数
         */
        RouterParamService.prototype.setParams = function (url, params) {
            var allParams = this.getAllParams();
            allParams[url] = params;
            this.setAllParams(allParams);
        };
        /**
         * 清空参数
         */
        RouterParamService.prototype.clearParams = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 获取全部参数
         */
        RouterParamService.prototype.getAllParams = function () {
            var allParamsJson = window.sessionStorage.getItem('ROUTER_PARAMS') || '{}';
            var allParams = JSON.parse(allParamsJson);
            return allParams;
        };
        /**
         * 设置所有的参数
         */
        RouterParamService.prototype.setAllParams = function (allParams) {
            allParams = allParams || {};
            var allParamsJson = JSON.stringify(allParams);
            window.sessionStorage.setItem('ROUTER_PARAMS', allParamsJson);
        };
        /**
         * 清空所有参数
         */
        RouterParamService.prototype.clearAllParams = function () {
            window.sessionStorage.setItem('ROUTER_PARAMS', '{}');
        };
        RouterParamService.decorators = [
            { type: core.Injectable }
        ];
        return RouterParamService;
    }());

    /**
     * 变更相关定义
     * @author Witt<jiwt@inspur.com>
     */
    (function (ChangeType) {
        ChangeType["Update"] = "Update";
        ChangeType["Load"] = "Load";
        ChangeType["Append"] = "Append";
        ChangeType["Remove"] = "Remove";
        ChangeType["Swap"] = "Swap";
        ChangeType["SelectionChanged"] = "SelectionChanged";
        ChangeType["ValueChanged"] = "ValueChanged";
        ChangeType["UpdateErrors"] = "UpdateErrors";
        ChangeType["GlobalSelectionChanged"] = "GlobalSelectionChanged";
        /**
         * 分页信息变化
         */
        ChangeType["PaginationInfoChange"] = "PaginationInfoChange";
    })(exports.ChangeType || (exports.ChangeType = {}));
    (function (ViewChangeType) {
        ViewChangeType[ViewChangeType["ValueChanged"] = 0] = "ValueChanged";
    })(exports.ViewChangeType || (exports.ViewChangeType = {}));

    /**
     * 绑定属性相关定义
     * @author Witt<jiwt@inspur.com>
     */
    (function (BindingPropertyType) {
        /**
         * 简单类型
         */
        BindingPropertyType["Plain"] = "Plain";
        /**
         * 对象类型
         */
        BindingPropertyType["Object"] = "Object";
        /**
         * 列表类型
         */
        BindingPropertyType["List"] = "List";
        /**
         * 动态类型
         */
        BindingPropertyType["Dynamic"] = "Dynamic";
    })(exports.BindingPropertyType || (exports.BindingPropertyType = {}));

    /**
     * 属性工具类
     */
    var PropertyUtil = /** @class */ (function () {
        function PropertyUtil() {
        }
        /**
         * 获取实体上的属性集合，并将他们转换成BindingProperty集合
         * @param  entityType 实体类型
         * @returns 绑定属性集合
         */
        PropertyUtil.getProperties = function (entityType) {
            var properties = [];
            // Plain
            var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
            Object.keys(ngFieldProperties).forEach(function (propertyName) {
                var ngFieldProperty = ngFieldProperties[propertyName];
                properties.push({
                    name: propertyName,
                    type: exports.BindingPropertyType.Plain,
                    isPrimaryKey: ngFieldProperty.primary,
                    isForeignKey: ngFieldProperty.foreign,
                    enableMultiLangInput: ngFieldProperty.enableMultiLangInput
                });
            });
            // Object
            var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
            Object.keys(ngObjectProperties).forEach(function (propertyName) {
                var ngObjectProperty = ngObjectProperties[propertyName];
                properties.push({
                    name: propertyName,
                    type: exports.BindingPropertyType.Object,
                    entityType: ngObjectProperty.type
                });
            });
            // List
            var ngListProperties = FieldMetadataUtil.getNgList(entityType);
            Object.keys(ngListProperties).forEach(function (propertyName) {
                var ngListProperty = ngListProperties[propertyName];
                properties.push({
                    name: propertyName,
                    type: exports.BindingPropertyType.List,
                    entityType: ngListProperty.type
                });
            });
            // Dynamics
            var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
            Object.keys(ngDynamicProperties).forEach(function (propertyName) {
                var ngDynamicProperty = ngDynamicProperties[propertyName];
                properties.push({
                    name: propertyName,
                    type: exports.BindingPropertyType.Dynamic,
                    entityType: ngDynamicProperty.type
                });
            });
            return properties;
        };
        PropertyUtil.getDynamicProperties = function (dynamicData) {
            var properties = [];
            Object.keys(dynamicData).forEach(function (propertyName) {
                if (dynamicData.hasOwnProperty(propertyName)) {
                    if (dynamicData[propertyName] instanceof Object) {
                        properties.push({
                            name: propertyName,
                            type: exports.BindingPropertyType.Dynamic,
                            entityType: null
                        });
                    }
                    else {
                        properties.push({
                            name: propertyName,
                            type: exports.BindingPropertyType.Plain,
                            isPrimaryKey: false,
                            isForeignKey: false
                        });
                    }
                }
            });
            return properties;
        };
        /**
         * 根据属性名获取属性
         */
        PropertyUtil.getPropertyByName = function (properties, propertyName) {
            var targetProperty = properties.find(function (property) {
                return property.name === propertyName;
            });
            return targetProperty;
        };
        /**
         * 获取实体主键名
         * @param properties 属性集合
         * @returns 主键名
         */
        PropertyUtil.getPrimaryKey = function (properties) {
            // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查
            var primaryProperty = properties.find(function (property) {
                return property.isPrimaryKey === true;
            });
            return primaryProperty ? primaryProperty.name : '';
        };
        return PropertyUtil;
    }());

    /**
     * BindingListTypeFactory
     */
    var BindingListTypeFactory = /** @class */ (function () {
        function BindingListTypeFactory() {
        }
        BindingListTypeFactory.create = function (bindingProperties) {
            var bindingListType = this.getType(bindingProperties);
            var bindingList = new bindingListType(bindingProperties);
            return bindingList;
        };
        /**
         * 创建BindingList模板类
         * @param bindingProperties
         * @returns
         */
        BindingListTypeFactory.createType = function (bindingProperties) {
            var bindingListType = /** @class */ (function (_super) {
                __extends(BindingListType, _super);
                function BindingListType(properties) {
                    return _super.call(this, properties) || this;
                }
                return BindingListType;
            }(BindingList));
            var bindingListTypePrototype = bindingListType.prototype;
            this.extendProperties(bindingListTypePrototype, bindingProperties);
            return bindingListType;
        };
        /**
         * 扩展BindingList模板类属性
         * @param bindingListPrototype bindingList原型
         * @param bindingProperties 属性数组
         */
        BindingListTypeFactory.extendProperties = function (bindingListPrototype, bindingProperties) {
            bindingProperties.forEach(function (bindingProperty) {
                var propertyName = bindingProperty.name;
                Object.defineProperty(bindingListPrototype, propertyName, {
                    get: function () {
                        return this.currentItem[propertyName];
                    }
                });
            });
        };
        /**
         * 获取缓存的bindingList模板类
         * @param bindingProperties bindingList属性
         * @returns
         */
        BindingListTypeFactory.getType = function (bindingProperties) {
            if (this.provider.has(bindingProperties)) {
                return this.provider.get(bindingProperties);
            }
            var bindingListType = this.createType(bindingProperties);
            this.provider.set(bindingProperties, bindingListType);
            return bindingListType;
        };
        BindingListTypeFactory.provider = new Map();
        return BindingListTypeFactory;
    }());

    /**
     * 绑定列表工厂相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。
     *
     * **示例代码**
     * ```ts
     * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);
     * const deptList = BindingListFactory.create(deptProperties);
     * ```
     */
    var BindingListFactory = /** @class */ (function () {
        function BindingListFactory() {
        }
        /**
         * 创建BindingList实例，并扩展其属性
         * @param bindingProperties 绑定属性集合
         */
        BindingListFactory.create = function (bindingProperties) {
            // const bindingList = new BindingList(bindingProperties);
            // this.extendProperties(bindingList, bindingProperties);
            var bindingList = BindingListTypeFactory.create(bindingProperties);
            return bindingList;
        };
        /**
         * 扩展BindingList属性，将当前行上的属性映射到列表上
         * @param bindingList       要扩展的绑定列表
         * @param bindingProperties 绑定属性集合
         */
        BindingListFactory.extendProperties = function (bindingList, bindingProperties) {
            bindingProperties.forEach(function (bindingProperty) {
                var propertyName = bindingProperty.name;
                Object.defineProperty(bindingList, propertyName, {
                    get: function () {
                        return bindingList.currentItem[propertyName];
                    }
                });
            });
        };
        return BindingListFactory;
    }());

    // import { BindingObjectFactory } from './binding_object_factory';
    /**
     * BindingObjectTypeFactory
     */
    var BindingObjectTypeFactory = /** @class */ (function () {
        function BindingObjectTypeFactory() {
        }
        /**
         * 创建BindingObject
         * @param properties
         * @returns
         */
        BindingObjectTypeFactory.create = function (properties) {
            var bindingObjectType = this.getType(properties);
            return new bindingObjectType();
        };
        /**
         * 创建原型类型
         * @param properties
         * @returns
         */
        BindingObjectTypeFactory.createType = function (properties) {
            // 继承原绑定对象所有属性
            var bindingObjectType = /** @class */ (function (_super) {
                __extends(BindingObjectType, _super);
                function BindingObjectType() {
                    return _super.call(this) || this;
                    // this.innerValues = ImmutableMap(Object.assign({}, data));
                }
                return BindingObjectType;
            }(BaseBindingObject));
            // 获取主键
            var primaryKey = PropertyUtil.getPrimaryKey(properties);
            // 设置主键
            bindingObjectType.prototype.primaryKey = primaryKey;
            bindingObjectType.prototype.properties = properties;
            // 将属性扩展到原型对象上
            this.extendProperties(bindingObjectType.prototype, properties);
            return bindingObjectType;
        };
        /**
         * 扩展原型属性
         * @param typePrototype
         * @param properties
         */
        BindingObjectTypeFactory.extendProperties = function (typePrototype, properties) {
            var _this = this;
            // 扩展BindingObject属性
            properties.forEach(function (property) {
                if (property.type === exports.BindingPropertyType.List) {
                    _this.extendListProperty(typePrototype, property);
                }
                else if (property.type === exports.BindingPropertyType.Object) {
                    _this.extendObjectProperty(typePrototype, property);
                }
                else if (property.type === exports.BindingPropertyType.Dynamic) {
                    _this.extendDynamicObjectProperty(typePrototype, property);
                }
                else {
                    _this.extendPlainProperty(typePrototype, property);
                }
            });
        };
        /**
         * 扩展原型列表属性
         * @param typePrototype
         * @param property
         */
        BindingObjectTypeFactory.extendListProperty = function (typePrototype, property) {
            var propertyName = property.name;
            var childListProperties = PropertyUtil.getProperties(property.entityType);
            var key = "_" + propertyName + "_";
            // 将子的BindingList实例赋值给当前属性
            Object.defineProperty(typePrototype, propertyName, {
                get: function () {
                    var _this = this;
                    var bindingList = this[key];
                    if (!bindingList) {
                        bindingList = BindingListFactory.create(childListProperties);
                        this[key] = bindingList;
                        // 加载数据
                        var data = this.getValue(propertyName);
                        if (data) {
                            var bindingObjects = data.map(function (item) {
                                var bindingObject = BindingObjectTypeFactory.create(childListProperties);
                                return bindingObject;
                            });
                            bindingList.load(bindingObjects);
                        }
                        // 指定子List的parent、监听子List的changes事件
                        bindingList.parent = this;
                        bindingList.changes.subscribe(function (change) {
                            change.path.unshift(propertyName);
                            change.isBindingListTransmited = true;
                            _this.changes.next(change);
                        });
                    }
                    return bindingList;
                },
                set: function (bindingList) {
                    this[key] = bindingList;
                }
            });
        };
        /**
         * 扩展原型对象属性
         * @param typePrototype
         * @param property
         */
        BindingObjectTypeFactory.extendObjectProperty = function (typePrototype, property) {
            var propertyName = property.name;
            var childObjectProperties = PropertyUtil.getProperties(property.entityType);
            var key = "_" + propertyName + "_";
            Object.defineProperty(typePrototype, propertyName, {
                get: function () {
                    var _this = this;
                    var bindingObject = this[key];
                    if (!bindingObject) {
                        var value = this.getValue(propertyName) || {};
                        bindingObject = BindingObjectTypeFactory.create(childObjectProperties);
                        this[key] = bindingObject;
                        // 指定子Object的parent、监听子Object的changes事件
                        bindingObject.parent = this;
                        bindingObject.changes.subscribe(function (change) {
                            change.path.unshift(propertyName);
                            _this.changes.next(change);
                        });
                    }
                    return bindingObject;
                },
                set: function (value) {
                    this[key] = value;
                }
            });
        };
        /**
         * 扩展原型动态属性
         * @param typePrototype
         * @param property
         */
        BindingObjectTypeFactory.extendDynamicObjectProperty = function (typePrototype, property) {
            var propertyName = property.name;
            // Object.defineProperty(typePrototype, propertyName, {
            //   value: null
            // });
            typePrototype[propertyName] = null;
        };
        /**
         * 扩展原型简单属性
         * @param typePrototype
         * @param property
         */
        BindingObjectTypeFactory.extendPlainProperty = function (typePrototype, property) {
            var propertyName = property.name;
            Object.defineProperty(typePrototype, propertyName, {
                get: function () {
                    var _a;
                    if (property.enableMultiLangInput === true) {
                        var value = this.getValue(propertyName, false);
                        if (!value) {
                            value = this.getValue(propertyName, false);
                            var langCode = TranslateService.getCurrentLanguage();
                            return _a = {}, _a[langCode] = value, _a;
                        }
                        return value;
                    }
                    else {
                        var value = this.getValue(propertyName);
                        return value;
                    }
                },
                set: function (value) {
                    var oldValue = this.getValue(propertyName);
                    if (value === oldValue) {
                        return;
                    }
                    this.setValue(propertyName, value, true, true);
                }
            });
        };
        /**
         * 获取缓存的bindingList模板类
         * @param properties bindingList属性
         * @returns
         */
        BindingObjectTypeFactory.getType = function (properties) {
            if (this.provider.has(properties)) {
                return this.provider.get(properties);
            }
            var bindingObjectType = this.createType(properties);
            this.provider.set(properties, bindingObjectType);
            return bindingObjectType;
        };
        BindingObjectTypeFactory.provider = new Map();
        return BindingObjectTypeFactory;
    }());

    /**
     * 绑定对象工厂相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。
     *
     * **扩展属性处理**
     *
     * 对于要扩展的属性（BindingProperty）有三种处理：
     * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；
     * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；
     * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；
     *
     * **示例代码**
     *
     * ```ts
     *  const empProperties = PropertyUtil.getProperties(EmpEntity);
     * const empBindingObject = BindingObjectFactory.create(properties);
     * ```
     */
    var BindingObjectFactory = /** @class */ (function () {
        function BindingObjectFactory() {
        }
        /**
         * 创建BindingObject实例
         * @param properties 要扩展的属性集合
         * @returns 带扩展属性的空BindingObject对象
         */
        BindingObjectFactory.create = function (properties, fromEntity) {
            var bindingObjectType = BindingObjectTypeFactory.create(properties /*, data*/);
            bindingObjectType.fromEntity = fromEntity;
            return bindingObjectType;
        };
        BindingObjectFactory.createDynamicBindingObject = function (data) {
            var properties = PropertyUtil.getDynamicProperties(data);
            var object = BindingObjectTypeFactory.create(properties /*, data*/); //new BindingObject(properties);
            this.extendProperties(object, properties);
            return object;
        };
        /**
         * 扩展属性绑定对象的属性
         * @param object     要扩展的绑定对象
         * @param properties 绑定属性集合
         */
        BindingObjectFactory.extendProperties = function (object, properties) {
            var _this = this;
            // 扩展BindingObject属性
            properties.forEach(function (property) {
                if (property.type === exports.BindingPropertyType.List) {
                    _this.extendListProperty(object, property);
                }
                else if (property.type === exports.BindingPropertyType.Object) {
                    _this.extendObjectProperty(object, property);
                }
                else if (property.type === exports.BindingPropertyType.Dynamic) {
                    _this.extendDynamicObjectProperty(object, property);
                }
                else {
                    _this.extendPlainProperty(object, property);
                }
            });
        };
        /**
         * 扩展列表类型的绑定属性
         * @param object     要扩展的绑定对象
         * @param properties 列表类型的绑定属性集合
         */
        BindingObjectFactory.extendListProperty = function (object, property) {
            var propertyName = property.name;
            var childListProperties = PropertyUtil.getProperties(property.entityType);
            var childList = BindingListFactory.create(childListProperties);
            // 指定子List的parent、监听子List的changes事件
            childList.parent = object;
            childList.changes.subscribe(function (change) {
                change.path.unshift(propertyName);
                change.isBindingListTransmited = true;
                object.changes.next(change);
            });
            // 将子的BindingList实例赋值给当前属性
            Object.defineProperty(object, propertyName, {
                value: childList
            });
        };
        /**
         * 扩展对象类型的绑定属性
         * @param object     要扩展的绑定对象
         * @param properties 对象类型的绑定属性集合
         */
        BindingObjectFactory.extendObjectProperty = function (object, property) {
            var propertyName = property.name;
            var childObjectProperties = PropertyUtil.getProperties(property.entityType);
            var childObject = this.create(childObjectProperties);
            // 指定子Object的parent、监听子Object的changes事件
            childObject.parent = object;
            childObject.changes.subscribe(function (change) {
                change.path.unshift(propertyName);
                object.changes.next(change);
            });
            Object.defineProperty(object, propertyName, {
                value: childObject
            });
        };
        BindingObjectFactory.extendDynamicObjectProperty = function (object, property) {
            var propertyName = property.name;
            object[propertyName] = null;
        };
        BindingObjectFactory.attachDynamicObjectProperty = function (object, propertyName, dynamicObject) {
            dynamicObject.parent = object;
            dynamicObject.changes.subscribe(function (change) {
                change.path.unshift(propertyName);
                object.changes.next(change);
            });
            Object.defineProperty(object, propertyName, {
                value: dynamicObject
            });
        };
        /**
         * 扩展简单类型的绑定属性
         * @param object     要扩展的绑定对象
         * @param properties 简单类型的绑定属性集合
         */
        BindingObjectFactory.extendPlainProperty = function (object, property) {
            var propertyName = property.name;
            Object.defineProperty(object, propertyName, {
                get: function () {
                    return object.getValue(propertyName);
                },
                set: function (value) {
                    var oldValue = object.getValue(propertyName);
                    if (value === oldValue) {
                        return;
                    }
                    object.setValue(propertyName, value, true, true);
                }
            });
        };
        return BindingObjectFactory;
    }());

    /**
     * ----------------------------------------
     * NgValidateForm
     * ----------------------------------------
     */
    /**
     * 子表单装饰器名称
     */
    var NG_VALIDATE_FORM = 'NgValidateForm';
    /**
     * 表单装饰器工厂
     */
    function NgValidateForm(options) {
        var decoratorFactory = makeDecorator(NG_VALIDATE_FORM, function (obj) { return obj; });
        return decoratorFactory(options);
    }
    /**
     * ----------------------------------------
     * NgChildForm
     * ----------------------------------------
     */
    /**
     * 子表单装饰器名称
     */
    var NG_CHILD_FORM = 'NgChildForm';
    /**
     * 子表单装饰器工厂
     */
    var NgChildForm = makePropDecorator(NG_CHILD_FORM, function (obj) { return obj; });
    /**
     * ----------------------------------------
     * NgChildFormArray
     * ----------------------------------------
     */
    /**
     * 子表单数组装饰器名称
     * @type {string}
     */
    var NG_CHILD_FORM_ARRAY = 'NgChildFormArray';
    /**
     * 子表单数组装饰器工厂
     */
    var NgChildFormArray = makePropDecorator(NG_CHILD_FORM_ARRAY, function (obj) { return obj; });
    /**
     * ----------------------------------------
     * NgFormControl
     * ----------------------------------------
     */
    /**
     * 表单控件装饰器名称
     * @type {string}
     */
    var NG_FORM_CONTROL = 'NgFormControl';
    /**
     * 表单控件装饰器工厂
     */
    var NgFormControl = makePropDecorator(NG_FORM_CONTROL, function (obj) { return obj; });

    /**
     * 数据路径处理
     */
    var BindingPathConverter = /** @class */ (function () {
        function BindingPathConverter() {
        }
        /**
         * (BindingPathString | BindingPathArray) => BindingPathArray
         * @param bindingPath BindingPath的字符串或者数组格式
         * @return BindingPath数组
         */
        BindingPathConverter.toBindingPathArray = function (bindingPath) {
            var bindingPathArray;
            if (typeof bindingPath === 'string') {
                bindingPathArray = bindingPath.split('/').filter(function (part) {
                    return part !== '';
                });
                return bindingPathArray;
            }
            else {
                bindingPathArray = bindingPath.concat([]);
            }
            return bindingPathArray;
        };
        /**
         * BindingPathArray => BindingPathString
         */
        BindingPathConverter.toBindingPathString = function (bindingPathArray) {
            return '/' + bindingPathArray.join('/');
        };
        return BindingPathConverter;
    }());

    /**
     * BindingPath比较器
     */
    var BindingPathComparer = /** @class */ (function () {
        function BindingPathComparer() {
        }
        /**
         * 是否相等
         */
        BindingPathComparer.isEqual = function (srcPath, dstPath) {
            var srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);
            var dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);
            var isEqual = srcPathArray.every(function (srcPathItem, srcPathIndex) {
                return srcPathItem === dstPathArray[srcPathIndex];
            });
            return isEqual;
        };
        /**
         * 是否是父路径
         */
        BindingPathComparer.isParent = function (childPath, parentPath) {
            var childPathArray = BindingPathConverter.toBindingPathArray(childPath);
            var parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);
            // 长度差1个
            if (childPathArray.length !== parentPathArray.length + 1) {
                return;
            }
            return this.isAncestor(childPath, parentPath);
        };
        /**
         * 是否是祖先路径
         */
        BindingPathComparer.isAncestor = function (descendantPath, ancestorPath) {
            var descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);
            var ancestorPathArray = BindingPathConverter.toBindingPathArray(ancestorPath);
            if (descendantPath.length <= ancestorPathArray.length) {
                return false;
            }
            var isAncestor = ancestorPathArray.every(function (ancestorPathItem, ancestorPathIndex) {
                return ancestorPathItem === descendantPathArray[ancestorPathIndex];
            });
            return isAncestor;
        };
        return BindingPathComparer;
    }());

    /**
     * BindingPath遍历器
     */
    var BindingPathTraverser = /** @class */ (function () {
        function BindingPathTraverser() {
        }
        /**
         * 获取叶子节点的Path
         */
        BindingPathTraverser.getLeafPathString = function (bindingPath) {
            var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
            return bindingPathArray.pop();
        };
        /**
         * 获取父路径
         */
        BindingPathTraverser.getParentPathString = function (bindingPath) {
            var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
            bindingPathArray.pop();
            return '/' + bindingPathArray.join('/');
        };
        return BindingPathTraverser;
    }());

    /**
     * EntityPath转换器
     */
    var EntityPathConverter = /** @class */ (function () {
        function EntityPathConverter() {
        }
        /**
         * 转换为Entity可识别的路径
         * 根：[]
         * 主表：['id:xxx', 'name'],
         * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
         * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
         * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
         * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
         */
        EntityPathConverter.toEntityPathArray = function (bindingPathString, bindingData) {
            var _this = this;
            var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPathString);
            var entityPathArray = [];
            if (bindingPathArray.length === 0) {
                return entityPathArray;
            }
            // 根节点
            var currentBindingObject = bindingData.list.currentItem;
            entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
            bindingPathArray.forEach(function (propName) {
                var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
                switch (propInfo.type) {
                    case exports.BindingPropertyType.Plain:
                        entityPathArray.push(propName);
                        break;
                    case exports.BindingPropertyType.Object:
                        currentBindingObject = currentBindingObject[propName];
                        entityPathArray.push(propName);
                        entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                        break;
                    case exports.BindingPropertyType.List:
                        var currentBindingList = currentBindingObject[propName];
                        currentBindingObject = currentBindingList.currentItem;
                        entityPathArray.push(propName);
                        entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                        break;
                    default:
                        break;
                }
            });
            return entityPathArray;
        };
        /**
         * 创建路径中的主键部分
         */
        EntityPathConverter.createPrimaryKeyPath = function (primaryKey, primaryKeyValue) {
            return primaryKey + ":" + primaryKeyValue;
        };
        return EntityPathConverter;
    }());

    /**
     * 实体路径比较器
     */
    var EntityPathComparer = /** @class */ (function () {
        function EntityPathComparer() {
        }
        return EntityPathComparer;
    }());

    /**
     * 表单路径转换类
     */
    var FormPathConverter = /** @class */ (function () {
        function FormPathConverter() {
        }
        /**
         * ControlPathString => BingingPathArray
         * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）
         * @return BindingPath数组
         */
        FormPathConverter.toBindingPathArray = function (formPahtString) {
            var bindingPathArray = formPahtString.split('.').filter(function (part) {
                return part !== '';
            });
            return bindingPathArray;
        };
        return FormPathConverter;
    }());

    /**
     * 数据路径转换、比较等工具类
     * @summary
     * ----------------------------------------
     * 术语：
     * BindingPath：数组形式；
     * BindingPathString：BindingPath的字符串形式，用/分隔；
     * ControlPathString：BindingPath的字符串形式，用.分隔；
     *
     * EntityPath：数组形式；
     * EntityPathString：EntityPath的字符串形式，使用/分隔；
     * ----------------------------------------
     */

    /*
     * @Author: Witt
     * @Date: 2018-12-27 09:25:38
     * @Last Modified by: Witt
     * @Last Modified time: 2018-12-27 09:39:10
     */
    /**
     * 路径类型
     */

    (function (DataPathNodeType) {
        /**
         * 标记该节点是一个实体主键值，用来在列表上定位一个实体
         */
        DataPathNodeType["DataId"] = "DataId";
        /**
         * 标记该节点是一个属性名，用来在对象上定位一个属性
         */
        DataPathNodeType["PropName"] = "PropName";
    })(exports.DataPathNodeType || (exports.DataPathNodeType = {}));
    /**
     * 路径节点
     */
    var DataPathNode = /** @class */ (function () {
        /**
         * 构造函数
         */
        function DataPathNode(type, data) {
            this.type = type;
            this.value = data;
            this.prev = null;
            this.next = null;
        }
        return DataPathNode;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-12-27 09:26:41
     * @Last Modified by: Witt
     * @Last Modified time: 2019-01-15 22:00:45
     */
    /**
     * 变更路径（简单双向列表）
     */
    var DataPath = /** @class */ (function () {
        /**
         * 构造函数
         */
        function DataPath() {
            this.head = new DataPathNode(null, null);
            this.length = 0;
        }
        /**
         * 添加一个节点到头部
         */
        DataPath.prototype.unshift = function (type, data) {
            var newNode = new DataPathNode(type, data);
            newNode.next = this.head.next;
            newNode.prev = this.head;
            this.head.next = newNode;
            if (newNode.next) {
                newNode.next.prev = newNode;
            }
            this.length++;
        };
        /**
         * 在链表最后追加一个节点
         */
        DataPath.prototype.push = function (type, data) {
            var tailNode = this.getTail();
            var newNode = new DataPathNode(type, data);
            tailNode.next = newNode;
            this.length++;
        };
        /**
         * 获取链表尾部节点
         */
        DataPath.prototype.getTail = function () {
            var lastNode = this.head;
            while (lastNode.next) {
                lastNode = lastNode.next;
            }
            return lastNode;
        };
        /**
         * 转换为数组格式
         */
        DataPath.prototype.toArray = function () {
            var pathArray = [];
            var currentNode = this.head.next;
            while (currentNode) {
                pathArray.push(currentNode.type + ":" + currentNode.value);
                currentNode = currentNode.next;
            }
            return pathArray;
        };
        /**
         * 转换为字符串格式
         */
        DataPath.prototype.toString = function () {
            var pathArray = this.toArray();
            var pathString = pathArray.join(', ');
            return "[" + pathString + "]";
        };
        /**
         * 拷贝
         */
        DataPath.prototype.clone = function () {
            var newDataPath = new DataPath();
            var curDataNode = this.head.next;
            while (curDataNode) {
                newDataPath.push(curDataNode.type, curDataNode.value);
                curDataNode = curDataNode.next;
            }
            return newDataPath;
        };
        return DataPath;
    }());

    /**
     * 数据Path工厂类
     */
    var DataPathCreator$$1 = /** @class */ (function () {
        function DataPathCreator$$1() {
        }
        /**
         * 将长路径数组或字符串转换为
         * @param fullPathArrayOrString 路径数组或字符串
         * @param repository 实体仓库
         * @summary
         * 1、长路径格式说明参考：data-path.md
         */
        DataPathCreator$$1.createByLongPathFromRoot = function (fullPathArrayOrString, entityManager) {
            var dataPath = new DataPath();
            var fullPathArray = fullPathArrayOrString;
            if (!fullPathArray || fullPathArray.length === 0) {
                return dataPath;
            }
            var currentNodeInfo = {
                nodeValue: fullPathArray.shift(),
                nodeType: exports.DataPathNodeType.DataId,
                entityTypeInfo: new DataTypeInfo(entityManager.entityType)
            };
            while (currentNodeInfo) {
                dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);
                // 处理下一个节点
                var nextNodeValue = fullPathArray.shift();
                if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {
                    break;
                }
                currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);
            }
            return dataPath;
        };
        /**
         * 获取下一个路径节点的信息
         * @param parentNodeInfo 当前路径节点信息
         * @param nextNodeValue 下一个路径节点的值
         * @summary
         * 1、这个递归写的很绕，说明数据结构设计不合理；
         * 2、多个因素混用了一个结构；
         */
        DataPathCreator$$1.getNextPathNodeInfo = function (parentNodeInfo, nextNodeValue) {
            var parentNodeValue = parentNodeInfo.nodeValue;
            var parentNodeType = parentNodeInfo.nodeType;
            var parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;
            if (!nextNodeValue || !parentEntityTypeInfo) {
                return null;
            }
            var nextPathNodeInfo = {
                nodeValue: nextNodeValue,
                nodeType: null,
                entityTypeInfo: null
            };
            // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变
            if (parentNodeType === exports.DataPathNodeType.DataId) {
                nextPathNodeInfo.nodeType = exports.DataPathNodeType.PropName;
                nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;
            }
            else {
                // DataNodeType=Object：必然对应一个属性信息
                var nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);
                if (nextPropInfo.group === exports.DataPropGroup.List) {
                    // EntityPropGroup=EntityList：下一个节点是List类型。
                    nextPathNodeInfo.nodeType = exports.DataPathNodeType.DataId;
                    nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;
                }
                else {
                    // EntityPropGroup=Entity：       下级entityTypeInfo为
                    // EntityPropGroup=Dynamic|Plain：null
                    nextPathNodeInfo.nodeType = exports.DataPathNodeType.PropName;
                    nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === exports.DataPropGroup.Object ? nextPropInfo.typeInfo : null;
                }
            }
            return nextPathNodeInfo;
        };
        /**
         * @param fullPathArrayOrString 路径数组或字符串
         * @param repository 实体仓库
         * @summary
         * 1、长路径格式说明参考：data-path.md
         * 2、shortPathArrayOrString暂时只支持字符串数组
         */
        DataPathCreator$$1.createByShortPathFromRoot = function (shortPathArrayOrString, entityManager, bindingData) {
            var dataPath = new DataPath();
            var shortPathArray = shortPathArrayOrString;
            // 根节点
            var currentBindingObject = bindingData.list.currentItem;
            var currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);
            dataPath.push(exports.DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);
            // 遍历下级节点
            shortPathArray.forEach(function (propName) {
                var propInfo = currentEntityTypeInfo.getPropInfoByName(propName);
                switch (propInfo.group) {
                    case exports.DataPropGroup.Plain:
                        dataPath.push(exports.DataPathNodeType.PropName, propName);
                        break;
                    case exports.DataPropGroup.Object:
                        currentBindingObject = currentBindingObject[propName];
                        currentEntityTypeInfo = propInfo.typeInfo;
                        dataPath.push(exports.DataPathNodeType.PropName, propName);
                        break;
                    case exports.DataPropGroup.List:
                        var currentBindingList = currentBindingObject[propName];
                        currentBindingObject = currentBindingList.currentItem;
                        currentEntityTypeInfo = propInfo.typeInfo;
                        dataPath.push(exports.DataPathNodeType.PropName, propName);
                        dataPath.push(exports.DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);
                        break;
                    default:
                        break;
                }
            });
            return dataPath;
        };
        return DataPathCreator$$1;
    }());

    /**
     * 获取path对应的实体
     * @summary
     * 关于path的格式如下：
     * - 主表：[parentId]
     * - 主表关联: [parentId, assoInfo]
     * - 从表: [parentId, child1s, child1Id]
     * - 从表关联：[parentId, child1s, child1Id, assoInfo]
     * - 从从表: [parentId, child1s, child1Id, grand11s, grand11Id]
     * - 从从表关联：[parentId, child1s, child1Id, grand11s, grand11Id, assoInfo]
     */

    /*
     * @Author: Witt
     * @Date: 2019-08-14 14:11:51
     * @Last Modified by: Witt
     * @Last Modified time: 2019-08-14 16:11:51
     */
    /**
     * 实体属性分组
     */

    (function (DataPropGroup) {
        /**
         * 简单类型
         */
        DataPropGroup["Plain"] = "Plain";
        /**
         * 实体类型
         */
        DataPropGroup["Object"] = "Object";
        /**
         * 动态实体类型
         */
        DataPropGroup["Dynamic"] = "Dynamic";
        /**
         * 列表类型
         */
        DataPropGroup["List"] = "List";
    })(exports.DataPropGroup || (exports.DataPropGroup = {}));
    /**
     * 实体属性信息
     */
    var DataPropInfo = /** @class */ (function () {
        function DataPropInfo() {
        }
        return DataPropInfo;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-12-07 09:05:09
     * @Last Modified by: Witt
     * @Last Modified time: 2018-12-27 20:35:02
     */
    /**
     * 实体类型信息
     * @todo：
     * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；
     * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。
     */
    var DataTypeInfo = /** @class */ (function () {
        /**
         * 构造函数
         * @todo：不应该识别
         */
        function DataTypeInfo(type) {
            this.type = type;
            this.primaryKey = '';
            this.foreignKey = '';
            this.propInfoMap = new Map();
            this.collectEntityInfos();
            this.collectPropInfos();
        }
        Object.defineProperty(DataTypeInfo.prototype, "isValueObject", {
            /**
             * 是否为值对象
             */
            get: function () {
                return !this.primaryKey;
            },
            enumerable: true,
            configurable: true
        });
        DataTypeInfo.prototype.getBindingPathByTableName = function (tableName) {
            var fullEntityPath = this.getFullEntityPath(this, tableName);
            if (!fullEntityPath) {
                return null;
            }
            fullEntityPath.splice(0, 1);
            return '/' + fullEntityPath.join('/');
        };
        DataTypeInfo.prototype.getFullEntityPath = function (dataTypeInfo, tableName, paths) {
            if (paths === void 0) {
                paths = [];
            }
            if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
                return paths;
            }
            var props = Array.from(dataTypeInfo.propInfoMap.values()).filter(function (p) { return p.typeInfo; });
            if (props.length < 1) {
                paths = [];
                return paths;
            }
            if (dataTypeInfo.entityInfo) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
            for (var idx = 0; idx < props.length; idx++) {
                var dataTypeInfo_1 = props[idx].typeInfo;
                var path = this.getFullEntityPath(dataTypeInfo_1, tableName);
                if (!path || path.length < 1) {
                    continue;
                }
                else {
                    paths = paths.concat(path);
                    return paths;
                }
            }
            return null;
        };
        /**
         * 获取全部属性信息
         */
        DataTypeInfo.prototype.getPropInfos = function () {
            return Array.from(this.propInfoMap.values()).filter(function (propInfo) { return !propInfo.isVOField; });
        };
        /**
         * 获取全部属性的名称
         */
        DataTypeInfo.prototype.getPropNames = function () {
            var propNames = [];
            var propInfos = this.getPropInfos();
            propInfos.forEach(function (propInfo) {
                propNames.push(propInfo.name);
            });
            return propNames;
        };
        /**
         * 根据group获取属性信息数组
         */
        DataTypeInfo.prototype.getPropInfosByGroup = function (group) {
            var allPropInfos = Array.from(this.propInfoMap.values());
            var propInfos = allPropInfos.filter(function (propInfo) {
                return propInfo.group === group && !propInfo.isVOField;
            });
            return propInfos;
        };
        /**
         * 根据group获取属性名称数组
         * @param group 属性分组
         */
        DataTypeInfo.prototype.getPropNamesByGroup = function (group) {
            var propNames = [];
            var propInfos = this.getPropInfosByGroup(group);
            propInfos.forEach(function (propInfo) {
                propNames.push(propInfo.name);
            });
            return propNames;
        };
        /**
         * 根据propName获取属性信息
         */
        DataTypeInfo.prototype.getPropInfoByName = function (propName) {
            if (this.propInfoMap.has(propName)) {
                return this.propInfoMap.get(propName);
            }
            return null;
        };
        /**
         * 根据path获取属性信息
         */
        DataTypeInfo.prototype.getPropInfoByPath = function (path) {
            // 先复制，防止shift方法产生污染
            var arrPath = path.concat([]);
            if (arrPath.length === 0) {
                throw Error("\u5C5E\u6027\u8DEF\u5F84\u4E0D\u80FD\u4E3A\u7A7A");
            }
            // 循环查找
            var typeInfo = this;
            var propInfo = null;
            while (typeInfo && arrPath.length > 0) {
                var propName = arrPath.shift();
                propInfo = typeInfo.getPropInfoByName(propName);
                if (!propInfo) {
                    throw Error("\u8DEF\u5F84" + path + "\u4E2D\u5B58\u5728\u4E0D\u6B63\u786E\u7684\u8282\u70B9" + propName + "\uFF0C\u8BF7\u68C0\u67E5");
                }
                typeInfo = propInfo.typeInfo;
                // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)
                if (propInfo.group === exports.DataPropGroup.Dynamic && arrPath.length > 0) {
                    propInfo = null;
                    typeInfo = null;
                }
            }
            return propInfo;
        };
        /**
         * 根据path获取对应属性的TypeInfo
         */
        DataTypeInfo.prototype.getTypeInfoByPath = function (path) {
            // 空数组时返回
            if (path.length === 0) {
                return this;
            }
            // 获取对应属性信息
            var propInfo = this.getPropInfoByPath(path);
            if (!propInfo.typeInfo) {
                throw Error("\u8DEF\u5F84" + path + "\u65E0\u6CD5\u5B9A\u4F4D\u5230\u4E00\u4E2AEntityTypeInfo\uFF0C\u8BF7\u68C0\u67E5");
            }
            return propInfo.typeInfo;
        };
        /**
         * 获取主键的属性信息
         */
        DataTypeInfo.prototype.getPrimaryKeyPropInfo = function () {
            return this.getPropInfoByName(this.primaryKey);
        };
        /**
         * 根据name获取影射名
         */
        DataTypeInfo.prototype.getPropMappingByName = function (name) {
            var propInfo = this.getPropInfoByName(name);
            if (!propInfo) {
                return '';
            }
            return propInfo.mapping;
        };
        /**
         * 根据path获取映射名
         */
        DataTypeInfo.prototype.getPropMappingByPath = function (path) {
            var propInfo = this.getPropInfoByPath(path);
            if (!propInfo) {
                return '';
            }
            return propInfo.mapping;
        };
        /**
         * 检查属性是否属于特定的分组
         */
        DataTypeInfo.prototype.checkPropGroup = function (propName, propGroup) {
            var propInfo = this.getPropInfoByName(propName);
            if (propInfo && propInfo.group === propGroup) {
                return true;
            }
            return false;
        };
        /**
         * --------------------------------------------------------------------------------
         * 属性元数据 => 属性描述信息
         * --------------------------------------------------------------------------------
         */
        /**
         * 搜集所有属性信息
         * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。
         */
        DataTypeInfo.prototype.collectPropInfos = function () {
            var _this = this;
            // 简单属性
            var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);
            Object.keys(ngPlainProperties).forEach(function (propName) {
                var ngProperty = ngPlainProperties[propName];
                if (ngProperty.primary === true) {
                    _this.primaryKey = propName;
                }
                if (ngProperty.foreign === true) {
                    _this.foreignKey = propName;
                }
                _this.addPropInfo(exports.DataPropGroup.Plain, propName, ngProperty.dataField, null, ngProperty);
            });
            // 实体属性
            var ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);
            Object.keys(ngEntityProperties).forEach(function (propName) {
                var ngProperty = ngEntityProperties[propName];
                _this.addPropInfo(exports.DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);
            });
            // 动态实体属性
            var ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);
            Object.keys(ngDynamicProperties).forEach(function (propName) {
                var ngProperty = ngDynamicProperties[propName];
                _this.addPropInfo(exports.DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);
            });
            // 实体列表属性
            var ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);
            Object.keys(ngEntityListProperties).forEach(function (propName) {
                var ngProperty = ngEntityListProperties[propName];
                _this.addPropInfo(exports.DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);
            });
        };
        DataTypeInfo.prototype.collectEntityInfos = function () {
            var entityInfo = EntityMetadataUtil.getNgEntityMatadata(this.type);
            if (!entityInfo) {
                // 应用于解析表单
                entityInfo = {
                    originalCode: this.type["code"],
                    nodeCode: this.type["label"]
                };
            }
            this.entityInfo = entityInfo;
        };
        /**
         * 添加属性信息
         */
        DataTypeInfo.prototype.addPropInfo = function (group, name, mapping, type, metadataInfo) {
            // 没有设置影射时，用属性名充当影射
            mapping = mapping ? mapping : name;
            var typeInfo = null;
            if (type) {
                typeInfo = new DataTypeInfo(type);
            }
            var propInfo = { group: group, name: name, mapping: mapping, typeInfo: typeInfo, metadataInfo: metadataInfo };
            this.propInfoMap.set(name, propInfo);
            // 将vo字段也加入便于表达式查找
            var originalDataField = metadataInfo && metadataInfo.originalDataField;
            if (originalDataField && !this.propInfoMap.has(originalDataField)) {
                this.propInfoMap.set(originalDataField, __assign({}, propInfo, { isVOField: true }));
            }
            else if (metadataInfo && metadataInfo.type) {
                var entityInfo = EntityMetadataUtil.getNgEntityMatadata(metadataInfo.type);
                if (entityInfo && entityInfo.originalCode) {
                    this.propInfoMap.set(entityInfo.originalCode, __assign({}, propInfo, { isVOField: true }));
                }
            }
        };
        return DataTypeInfo;
    }());

    /**
     * 表单模块路径
     */
    var FORM_PATH_TOKEN = new core.InjectionToken('@farris/devkit form path token');
    /**
     * 后端消息处理器
     */
    var BACK_END_MESSAGE_HANDLER_TOKEN = new core.InjectionToken('@farris/devkit_back_end_message_handler');
    var MESSAGE_SERVICE_TOKEN = new core.InjectionToken('@farris/message_service_token');
    var NOTIFY_SERVICE_TOKEN = new core.InjectionToken('@farris/notify_service_token');
    /**
     * 变更集提交策略,entire | valid
     * @description entire是指提交所有变更，valid是指仅提交前端校验通过的变更
     */
    var CHANGE_SET_POLICY_TOKEN = new core.InjectionToken('@farris/changeset_policy_token');
    /**
     * 启用服务器端变更检测
     */
    var ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN = new core.InjectionToken('@farris/enable_server_side_change_detection_token');
    /**
     * 启用编辑态过滤排序
     */
    var ENABLE_EDIT_STATE_FILTER_SORTING = new core.InjectionToken('@farris/enable_edit_state_filter_sorting_token');

    /**
      * Encode a URL to a percent-encoded form, excluding already-encoded sequences.
      *
      * This function will take an already-encoded URL and encode all the non-URL
      * code points. This function will not encode the "%" character unless it is
      * not part of a valid sequence (`%20` will be left as-is, but `%foo` will
      * be encoded as `%25foo`).
      *
      * This encode is meant to be "safe" and does not throw errors. It will try as
      * hard as it can to properly encode the given URL, including replacing any raw,
      * unpaired surrogate pairs with the Unicode replacement character prior to
      * encoding.
      *
      * @param {string} url
      * @return {string}
      * @public
      */
    function encodeUrl(url) {
        var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
        var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
        var UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\uFFFD$2';
        return String(url)
            .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)
            .replace(ENCODE_CHARS_REGEXP, encodeURI)
            .replace(/#/g, '%23').replace(/&/g, '%26');
    }

    var Core = /** @class */ (function () {
        function Core() {
        }
        Core.warn = function (message) {
            var optionalParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalParams[_i - 1] = arguments[_i];
            }
            this.logable() && console && console.warn.apply(console, __spread([message], optionalParams));
        };
        Core.error = function (message) {
            var optionalParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalParams[_i - 1] = arguments[_i];
            }
            this.logable() && console && console.error.apply(console, __spread([message], optionalParams));
        };
        Core.log = function (message) {
            var optionalParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalParams[_i - 1] = arguments[_i];
            }
            this.logable() && console && console.log.apply(console, __spread([message], optionalParams));
        };
        Core.logable = function () {
            return window && window.localStorage && window.localStorage.getItem('__DEVKIT_LOGABLE__') === 'true' || false;
        };
        return Core;
    }());

    function escape(value) {
        if (!value || typeof value !== 'string') {
            return value;
        }
        return value
            .replace(/[\\]/g, '\\\\')
            .replace(/[\"]/g, '\\\"')
            .replace(/[\/]/g, '\\/')
            .replace(/[\b]/g, '\\b')
            .replace(/[\f]/g, '\\f')
            .replace(/[\n]/g, '\\n')
            .replace(/[\r]/g, '\\r')
            .replace(/[\t]/g, '\\t');
    }

    var RESOLVER_TOKEN = new core.InjectionToken('@farris_resolver_token');
    var ENTITY_TEMPLATE = 'ENTITY~';
    var STATE_TEMPLATE = 'STATE~';
    var GROUP_FUNCTIONS = ['SumByProp', 'CountByProp', 'AvgByProp', 'MaxByProp', 'MinByProp', 'IsExistRecord', 'ListContains', 'ListGreaterThan', 'ListLessThan', 'ListStartWith', 'ListEndWith', 'MultiplyChildNumber', 'SortChildData', 'IsContainMatch', 'MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'];

    var ResolverRegistry = /** @class */ (function () {
        function ResolverRegistry(injector, resolvers) {
            this.injector = injector;
            this.resolvers = resolvers;
        }
        ResolverRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ResolverRegistry.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [RESOLVER_TOKEN,] }] }
            ];
        };
        return ResolverRegistry;
    }());

    var NG_REPOSITORY = 'NgRepository';
    /**
     * NgRepository
     */
    function NgRepository(options) {
        var decoratorFactory = makeDecorator(NG_REPOSITORY, function (obj) { return obj; });
        return decoratorFactory(options);
    }

    // tslint:disable: no-bitwise
    /**
     * 实体集合
     * @todo：应该用EntityList代替。
     */
    var EntityCollection = /** @class */ (function () {
        /**
         * 构造函数
         */
        function EntityCollection(entityType) {
            this.innerEntitySet = new Set();
            this.innerEntityMap = new Map();
            this.collectionChanged = new rxjs.Subject();
            this.changes = new rxjs.Subject();
            this.entityType = entityType;
            this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;
        }
        Object.defineProperty(EntityCollection.prototype, "changeSetPolicy", {
            get: function () {
                return this._changeSetPolicy;
            },
            /**
             *变更策略
             */
            set: function (policy) {
                this._changeSetPolicy = policy;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 实体数量
         */
        EntityCollection.prototype.count = function () {
            return this.innerEntitySet.size;
        };
        Object.defineProperty(EntityCollection.prototype, "entityTypeName", {
            get: function () {
                return this.entityType.name;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 是否包含指定主键值的实体
         * @param id 主键值
         */
        EntityCollection.prototype.has = function (id) {
            return this.innerEntityMap.has(id);
        };
        /**
         * 清空全部实体
         */
        EntityCollection.prototype.clear = function () {
            this.innerEntityMap.clear();
            this.innerEntitySet.clear();
            this.notifyCollectionChanged(new Modification([], exports.ModifyType.Load));
        };
        /**
         * 清空全部实体
         * @param isReset 是否为重置实体操作
         */
        EntityCollection.prototype.reset = function (notify) {
            if (notify === void 0) {
                notify = true;
            }
            this.innerEntityMap.forEach(function (entity) {
                entity.unsubscribe.next();
                entity.unsubscribe.complete();
            });
            this.innerEntitySet.forEach(function (entity) {
                entity.unsubscribe.next();
                entity.unsubscribe.complete();
            });
            this.innerEntityMap.clear();
            this.innerEntitySet.clear();
            if (notify === true) {
                var modification = new Modification([], exports.ModifyType.Load);
                modification.isReset = true;
                this.notifyCollectionChanged(modification);
            }
        };
        /**
         * 转换为实体数组
         */
        EntityCollection.prototype.toArray = function () {
            return Array.from(this.innerEntitySet);
        };
        /**
         * 转换为JSON数组
         */
        EntityCollection.prototype.toJSON = function () {
            var result = [];
            var entities = this.toArray();
            entities.forEach(function (entity) {
                result.push(entity.toJSON());
            });
            return result;
        };
        /**
         * 批量加载实体
         */
        EntityCollection.prototype.loadEntities = function (entities, entityCreate) {
            var _this = this;
            if (entityCreate === void 0) {
                entityCreate = false;
            }
            this.innerEntityMap.clear();
            this.innerEntitySet.clear();
            entities.forEach(function (entity) {
                _this.extendChangeSetPolicyProperty(entity);
                _this.innerEntitySet.add(entity);
                _this.innerEntityMap.set(entity[_this.primaryKey], entity);
                _this.listenEntityChangeEvent(entity);
            });
            var modification = new Modification(entities, exports.ModifyType.Load);
            modification.entityCreate = entityCreate;
            this.notifyCollectionChanged(modification);
        };
        /**
         * 追加实体
         * @param entity 要追加的实体
         * @param isCloned 实体是否是克隆的
         */
        EntityCollection.prototype.addEntity = function (entity, isCloned) {
            if (isCloned === void 0) {
                isCloned = false;
            }
            this.verifyEntityToAdd(entity);
            this.extendChangeSetPolicyProperty(entity);
            this.innerEntitySet.add(entity);
            this.innerEntityMap.set(entity[this.primaryKey], entity);
            this.listenEntityChangeEvent(entity);
            var modifyType = isCloned ? exports.ModifyType.Clone : exports.ModifyType.Add;
            this.notifyCollectionChanged(new Modification([entity], modifyType));
        };
        /**
         * 在当前行前或后插入数据
         * @param entity 实体
         * @param position 位置
         */
        EntityCollection.prototype.insertEntity = function (entity, position) {
            this.verifyEntityToAdd(entity);
            this.extendChangeSetPolicyProperty(entity);
            this.innerEntitySet.add(entity);
            this.innerEntityMap.set(entity[this.primaryKey], entity);
            this.listenEntityChangeEvent(entity);
            this.notifyCollectionChanged(new Modification(entity, exports.ModifyType.Insert, null, null, position));
        };
        /**
         * 更新实体
         * @param entity entity
         * @param data 实体数据
         */
        EntityCollection.prototype.updateEntity = function (entity, data) {
            entity.load(data);
            this.notifyCollectionChanged(new Modification(data, exports.ModifyType.Update, null, null));
        };
        /**
         * 批量追加实体
         * @param entities 要加载的实体数组
         */
        EntityCollection.prototype.addEntities = function (entities, options) {
            var _this = this;
            if (options === void 0) {
                options = null;
            }
            if (!entities) {
                return;
            }
            var entitiesToAdd = [];
            entities.forEach(function (entity) {
                _this.verifyEntityToAdd(entity);
                entitiesToAdd.push(entity);
            });
            entitiesToAdd.forEach(function (entity) {
                _this.extendChangeSetPolicyProperty(entity);
                _this.innerEntitySet.add(entity);
                _this.innerEntityMap.set(entity[_this.primaryKey], entity);
                _this.listenEntityChangeEvent(entity);
            });
            var isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;
            var modification = new Modification(entitiesToAdd, exports.ModifyType.Add);
            modification.isTreeNodeLoadScene = isTreeNodeLoadScene;
            this.notifyCollectionChanged(modification);
        };
        /**
         * 添加实体（不切换当前行）
         * @param entities 实体
         */
        EntityCollection.prototype.addData = function (entities, options) {
            var _this = this;
            if (options === void 0) {
                options = null;
            }
            if (!entities) {
                return;
            }
            var entitiesToAdd = [];
            entities.forEach(function (entity) {
                _this.verifyEntityToAdd(entity);
                entitiesToAdd.push(entity);
            });
            entitiesToAdd.forEach(function (entity) {
                _this.extendChangeSetPolicyProperty(entity);
                _this.innerEntitySet.add(entity);
                _this.innerEntityMap.set(entity[_this.primaryKey], entity);
                _this.listenEntityChangeEvent(entity);
            });
            // 针对树分层加载场景
            var isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;
            var modification = new Modification(entitiesToAdd, exports.ModifyType.AddData);
            modification.isTreeNodeLoadScene = isTreeNodeLoadScene;
            this.notifyCollectionChanged(modification);
        };
        /**
         * 为实体扩展变更策略属性
         * @param entity
         */
        EntityCollection.prototype.extendChangeSetPolicyProperty = function (entity) {
            if (entity) {
                entity.changeSetPolicy = this.changeSetPolicy;
            }
        };
        /**
         * 根据主键值获取实体
         */
        EntityCollection.prototype.getEntityById = function (identity) {
            if (this.innerEntityMap.has(identity) === false) {
                return null;
            }
            var entity = this.innerEntityMap.get(identity);
            return entity;
        };
        /**
         * 根据路径获取实体
         */
        EntityCollection.prototype.getEntityByPath = function (pathArray) {
            var rootEntityId = pathArray[0].split(':')[1];
            var parentNode = this.getEntityById(rootEntityId);
            for (var i = 1; i < pathArray.length && parentNode; i = i + 1) {
                var currentPath = pathArray[i];
                if ((parentNode instanceof Entity) || (parentNode.typeName === 'ConcreteEntityPrototype')) {
                    // @todo：强识了别冒号
                    if (currentPath.indexOf(':') === -1) {
                        parentNode = parentNode[pathArray[i]];
                    }
                }
                else {
                    parentNode = parentNode.get(pathArray[i].split(':')[1]);
                }
            }
            return parentNode;
        };
        /**
         * id:1/a/id:2/c
         * @param pathArray 路径数组
         */
        EntityCollection.prototype.getEntitiesByPath = function (pathArray) {
            var rootEntityId = pathArray[0].split(':')[1];
            var entity = this.getEntityById(rootEntityId);
            for (var i = 1; i < pathArray.length && entity; i += 2) {
                var path = pathArray[i];
                entity = entity[path];
                if (!(entity instanceof EntityList)) {
                    throw new Error('路径格式错误');
                }
                if ((i + 1) < pathArray.length) {
                    var id = pathArray[i + 1].split(':')[1];
                    entity = entity.get(id);
                }
            }
            return entity;
        };
        /**
         * 返回符合指定条件的实体集合
         * @param predicate 条件谓词
         */
        EntityCollection.prototype.getEntities = function (predicate) {
            var entities = Array.from(this.innerEntitySet);
            var matchedEntities = entities.filter(predicate);
            return matchedEntities;
        };
        /**
         * 获取全部实体
         */
        EntityCollection.prototype.getAllEntities = function () {
            return Array.from(this.innerEntitySet);
        };
        /**
         * 根据主键值删除对应实体
         * @param identity 主键值
         */
        EntityCollection.prototype.removeEntityById = function (identity) {
            this.verifyEntityToRemove(identity);
            var entityToRemove = this.innerEntityMap.get(identity);
            this.innerEntityMap.delete(identity);
            this.innerEntitySet.delete(entityToRemove);
            this.notifyCollectionChanged(new Modification([entityToRemove], exports.ModifyType.Remove));
            return entityToRemove;
        };
        EntityCollection.prototype.removeEntitiesByIds = function (id) {
        };
        /**
         * 删除符合条件的实体集合
         */
        EntityCollection.prototype.removeEntities = function (predicate) {
            var _this = this;
            var entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
            entitiesToRemove.forEach(function (entityToRemove) {
                _this.innerEntityMap.delete(entityToRemove[_this.primaryKey]);
                _this.innerEntitySet.delete(entityToRemove);
            });
            this.notifyCollectionChanged(new Modification(entitiesToRemove, exports.ModifyType.Remove));
            return entitiesToRemove;
        };
        /**
         * 移除数据（不切换当前行）
         * @param predicate 过滤函数
         */
        EntityCollection.prototype.removeData = function (predicate) {
            var _this = this;
            var entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
            entitiesToRemove.forEach(function (entityToRemove) {
                _this.innerEntityMap.delete(entityToRemove[_this.primaryKey]);
                _this.innerEntitySet.delete(entityToRemove);
            });
            this.notifyCollectionChanged(new Modification(entitiesToRemove, exports.ModifyType.RemoveData));
            return entitiesToRemove;
        };
        /**
         * 重置子表数据
         * @param paths 路径
         * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']
         * @description path参数格式
         * ```json
         * [
         * "id:b5ed23ca-88d9-4377-98ec-92f35c1325f1",
         * "cityMDMs",
         * "id:373706af-622f-4aea-a006-dddbffd7bda3",
         * "zoneMDMs"
         * ]
         * ```
         * @param entities 实体数组
         */
        EntityCollection.prototype.resetEntities = function (paths, entities) {
            if (paths[0].indexOf(':') === -1) {
                throw new Error('路径格式错误');
            }
            // 获取主实体
            var id = paths[0].split(':')[1];
            var entity = this.innerEntityMap.get(id);
            var entityList = entity[paths[1]];
            if (!entity) {
                throw new Error("\u627E\u4E0D\u5230\u4E3B\u952E\u4E3A" + id + "\u7684\u5B9E\u4F53");
            }
            for (var index = 2; index < paths.length; index += 2) {
                var pathInfo = paths[index].split(':');
                var entityId = pathInfo[1];
                // 获取到当前层级的实体
                entity = entityList.get(entityId);
                if (!entity) {
                    throw new Error("\u627E\u4E0D\u5230\u4E3B\u952E\u4E3A" + id + "\u7684\u5B9E\u4F53");
                }
                // 获取当前层级实体下的列表属性
                entityList = entity[paths[index + 1]];
            }
            entityList.clear();
            entityList.loadEntities(entities);
        };
        /**
         * 验证实体是否能够添加
         */
        EntityCollection.prototype.verifyEntityToAdd = function (entity) {
            if (this.has(entity[this.primaryKey])) {
                throw new Error("The repository already had an item with the save identity of '" + entity[this.primaryKey] + "'");
            }
            return true;
        };
        /**
         * 验证实体是否能移除
         */
        EntityCollection.prototype.verifyEntityToRemove = function (identity) {
            if (!this.has(identity)) {
                throw new Error("The entity with identity of '" + identity + " dose not exsit.'");
            }
            return true;
        };
        /**
         * 实体集合变更流
         */
        EntityCollection.prototype.notifyCollectionChanged = function (modification) {
            this.collectionChanged.next(modification);
        };
        EntityCollection.prototype.listenEntityChangeEvent = function (entity) {
            var _this = this;
            if (entity) {
                entity.onValueChanged.subscribe(function (change) { return _this.changes.next(change); });
            }
        };
        Object.defineProperty(EntityCollection.prototype, "pageSize", {
            /**
             * 获取分页大小
             * @description 如果用户未指定分页大小则默认为0，即获取所有数据
             */
            get: function () {
                if (!!this.paginationInfo) {
                    return this.paginationInfo.pageSize || 0;
                }
                return 0;
            },
            //#region 分页
            /**
             * 设置分页大小
             */
            set: function (pageSize) {
                if (typeof (pageSize) !== 'number' || pageSize < 0) {
                    throw new Error('Invalid parameter:pageSize');
                }
                var original = this.paginationInfo;
                // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });
                // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
                // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));
                this.paginationInfo = Object.assign({}, original, { pageSize: pageSize });
                this.notifyCollectionChanged(new Modification(this.paginationInfo, exports.ModifyType.PaginationInfoChange));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityCollection.prototype, "totalCount", {
            /**
             * 获取数据总条数
             */
            get: function () {
                if (!!this.paginationInfo) {
                    return this.paginationInfo.total || 0;
                }
                return 0;
            },
            /**
             * 设置数据总条数
             */
            set: function (total) {
                if (typeof (total) !== 'number' || total < 0) {
                    throw new Error('Invalid parameter:total');
                }
                var original = this.paginationInfo;
                // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });
                // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
                this.paginationInfo = Object.assign({}, original, { total: total });
                this.notifyCollectionChanged(new Modification(this.paginationInfo, exports.ModifyType.PaginationInfoChange));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityCollection.prototype, "pageIndex", {
            /**
             * 获取当前页码
             */
            get: function () {
                if (!!this.paginationInfo) {
                    return this.paginationInfo.pageIndex || 1;
                }
                return 1;
            },
            /**
             * 设置当前页码
             */
            set: function (pageIndex) {
                if (typeof (pageIndex) !== 'number' || pageIndex < 0) {
                    throw new Error('Invalid parameter:pageIndex');
                }
                var original = this.paginationInfo;
                // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });
                // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
                this.paginationInfo = Object.assign({}, original, { pageIndex: pageIndex });
                this.notifyCollectionChanged(new Modification(this.paginationInfo, exports.ModifyType.PaginationInfoChange));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 更新分页信息
         * @param path 绑定路径
         * @param pageInfo 分页信息
         */
        EntityCollection.prototype.updatePaginationInfoByPath = function (path, pageInfo) {
            var original = this.paginationInfo;
            var pageIndex = pageInfo.pageIndex, pageSize = pageInfo.pageSize;
            var total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;
            var paginationInfo = Object.assign({}, original, { pageIndex: pageIndex, pageSize: pageSize, total: total });
            this.setPaginationConfigByPath(path, paginationInfo);
        };
        /**
         * 根据路径获取分页大小
         * @param path 路径
         */
        EntityCollection.prototype.getPaginationConfigByPath = function (path, defaultValue) {
            if (!path || path === '/') {
                return this.paginationInfo;
            }
            if (typeof path !== 'string') {
                throw new Error('路径必须为字符串！');
            }
            var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; }).map(function (item) { return item.trim(); });
            var config = this.paginationInfo;
            paths.forEach(function (item) {
                if (config && config.hasOwnProperty(item)) {
                    config = config[item];
                }
                else {
                    config = null;
                }
            });
            return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
        };
        /**
         * 设置分页信息
         * @param path 路径
         * @param value 值，其中总条数key为total
         */
        EntityCollection.prototype.setPaginationConfigByPath = function (path, value) {
            var original = JSON.stringify(this.paginationInfo);
            if (!path || path === '/') {
                this.paginationInfo = value;
            }
            else {
                if (!Array.isArray(path)) {
                    path = path.toString().match(/[^/[\]]+/g) || [];
                }
                path.slice(0, -1).reduce(function (prev, current, index) {
                    return Object(prev[current]) === prev[current]
                        ? prev[current]
                        : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                            ? []
                            : {};
                }, this.paginationInfo)[path[path.length - 1]] = value;
            }
            if (JSON.stringify(this.paginationInfo) !== original) {
                this.notifyCollectionChanged(new Modification(this.paginationInfo, exports.ModifyType.PaginationInfoChange));
            }
            return this.paginationInfo;
        };
        return EntityCollection;
    }());

    /*
     * @Author: Witt
     * @Date: 2019-03-07 17:24:38
     * @Last Modified by:   Witt
     * @Last Modified time: 2019-03-11 19:50:38
     */
    /**
     * 实体管理类
     */
    var EntityManager = /** @class */ (function () {
        /**
         * 构造函数
         */
        function EntityManager(entityCollection) {
            this.entityCollection = entityCollection;
            this.entityType = entityCollection.entityType;
        }
        // #region 创建实体相关方法
        /**
         * 创建实体
         */
        EntityManager.prototype.createEntity = function (entityData) {
            var entity = createEntity(this.entityType, entityData);
            return entity;
        };
        /**
         * 批量创建实体
         */
        EntityManager.prototype.createEntities = function (entityListData, entityType) {
            var entities = createEntities(this.entityType, entityListData);
            return entities;
        };
        /**
         * 批量创建下级实体
         * @param fPath fpath
         * @param entityListData 实体数据
         */
        EntityManager.prototype.createEntitiesByPath = function (fPath, entityListData) {
            var subPaths = fPath.split('/');
            if (subPaths.length < 3) {
                throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fPath + "]\u683C\u5F0F\u4E0D\u5BF9");
            }
            if (entityListData.length < 1) {
                return [];
            }
            var childEntityList;
            var propInfo;
            var propName;
            for (var i = 2; i < subPaths.length; i = i + 2) {
                var fid = subPaths[i - 1];
                propName = subPaths[i];
                var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
                childEntityList = parentEntity[propName];
                var entityType = propInfo ? propInfo.propEntityType : this.entityType;
                propInfo = EntityUtil.getPropInfo(entityType, propName);
                if (!childEntityList) {
                    throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fPath);
                }
            }
            var entities = entityListData.map(function (entityData) {
                return createEntity(propInfo.propEntityType, entityData);
            });
            return entities;
        };
        // #endregion
        // #region 获取实体、实体数组相关方法
        /**
         * 获取path对应的实体
         */
        EntityManager.prototype.getEntityByPath = function (path) {
            var entity = this.getEntityNodeByPath(path);
            return entity;
        };
        /**
         * 获取path对应的实体
         */
        EntityManager.prototype.getEntitiesByPath = function (path) {
            var entityCollectionOrList = this.getEntityNodeByPath(path);
            var entities;
            if (entityCollectionOrList instanceof EntityCollection === true) {
                entities = entityCollectionOrList.toArray();
            }
            else {
                entities = entityCollectionOrList.toArray();
            }
            return entities;
        };
        /**
         * 获取实体节点
         * @param path 节点路径
         */
        EntityManager.prototype.getEntityNodeByPath = function (path) {
            var dataPath = DataPathCreator$$1.createByLongPathFromRoot(path, this);
            var entityNode = this.entityCollection;
            var pathNode = dataPath.head.next;
            while (pathNode) {
                if (pathNode.type === exports.DataPathNodeType.DataId) {
                    if (entityNode instanceof EntityCollection === true) {
                        entityNode = entityNode.getEntityById(pathNode.value);
                    }
                    else {
                        entityNode = entityNode.get(pathNode.value);
                    }
                }
                else {
                    entityNode = entityNode[pathNode.value];
                }
                if (!entityNode) {
                    throw new Error("\u627E\u4E0D\u5230" + pathNode.value + "\u5BF9\u5E94\u7684\u6570\u636E\u8282\u70B9");
                }
                pathNode = pathNode.next;
            }
            return entityNode;
        };
        // #endregion
        // #region 获取、设置属性值
        /**
         * 获取path对应的实体属性值
         */
        EntityManager.prototype.getPropValueByPath = function (path) {
            var propName = path.pop();
            var entity = this.getEntityByPath(path);
            return entity[propName];
        };
        /**
         * 设置path对应实体的属性值
         */
        EntityManager.prototype.setPropValueByPath = function (path, propValue) {
            var propName = path.pop();
            var entity = this.getEntityByPath(path);
            entity[propName] = propValue;
        };
        // #endregion
        // #region 插入实体
        /**
         * 在path对应实体前插入实体
         */
        EntityManager.prototype.insertEntityBeforeByPath = function (fpath) {
            throw new Error('Not Implemented');
        };
        /**
         * 在path对应实体前批量插入实体
         */
        EntityManager.prototype.insertEntitiesBeforeByPath = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 在path对应实体前插入实体
         */
        EntityManager.prototype.insertEntityAfterByPath = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 在path对应实体前批量插入实体
         */
        EntityManager.prototype.insertEntitiesAfterByPath = function () {
            throw new Error('Not Implemented');
        };
        // #endregion
        // #region 追加实体
        /**
         * 在path对应的实体集合中追加1个实体
         */
        // public appendEntityByPath(fpath: string[], entity: Entity): void {
        //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
        //   if (entityCollectionOrList instanceof EntityCollection === true) {
        //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
        //     entityCollection.addEntity(entity);
        //   } else {
        //     const entityList = (entityCollectionOrList as EntityList<Entity>);
        //     entityList.appendEntity(entity);
        //   }
        // }
        /**
         * 根据path获取实体集合
         * @param fpath 路径 /id/childsNode/id/xxx
         * @param entityData 实体数据
         * @param initialData[可选] 默认值
         */
        EntityManager.prototype.appendEntityByPath = function (fpath, entityData, initialData, isCloned) {
            if (isCloned === void 0) {
                isCloned = false;
            }
            var subPaths = fpath.split('/');
            if (subPaths.length < 3) {
                throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
            }
            var childEntityList;
            var propInfo;
            var propName;
            for (var i = 2; i < subPaths.length; i = i + 2) {
                var fid = subPaths[i - 1];
                propName = subPaths[i];
                // todo: EntityCollection重构之后这里无需差异处理
                var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
                childEntityList = parentEntity[propName];
                var entityType = propInfo ? propInfo.propEntityType : this.entityType;
                propInfo = EntityUtil.getPropInfo(entityType, propName);
                if (!childEntityList) {
                    throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
                }
            }
            // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
            var childEntity = createEntity(propInfo.propEntityType, entityData);
            // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值
            // if (initialData) {
            //   EntityUtil.appendInitialData(childEntity, initialData);
            // }
            childEntityList.appendNew(childEntity, isCloned);
            return childEntity;
        };
        /**
         * 在指定位置插入实体
         * @param fpath 父路径
         * @param entityData 实体数据
         * @param initialData 初始数据
         * @param position 插入位置
         */
        EntityManager.prototype.insertEntityByPath = function (fpath, entityData, initialData, position) {
            var subPaths = fpath.split('/');
            if (subPaths.length < 3) {
                throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
            }
            var childEntityList;
            var propInfo;
            var propName;
            for (var i = 2; i < subPaths.length; i = i + 2) {
                var fid = subPaths[i - 1];
                propName = subPaths[i];
                // todo: EntityCollection重构之后这里无需差异处理
                var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
                childEntityList = parentEntity[propName];
                var entityType = propInfo ? propInfo.propEntityType : this.entityType;
                propInfo = EntityUtil.getPropInfo(entityType, propName);
                if (!childEntityList) {
                    throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
                }
            }
            // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
            var childEntity = createEntity(propInfo.propEntityType, entityData);
            // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值
            // if (initialData) {
            //   EntityUtil.appendInitialData(childEntity, initialData);
            // }
            childEntityList.insert(childEntity, position);
            return childEntity;
        };
        /**
         * 在path对应的实体集合中追加多个实体
         */
        EntityManager.prototype.appendEntitiesByPath = function (fpath, entities) {
            var entityCollectionOrList = this.getEntityNodeByPath(fpath);
            if (entityCollectionOrList instanceof EntityCollection === true) {
                var entityCollection = entityCollectionOrList;
                entityCollection.addEntities(entities);
            }
            else {
                var entityList = entityCollectionOrList;
                entityList.appendEntities(entities);
            }
        };
        // #endregion
        // #region 删除实体
        /**
         * 从fapth对应的实体集合中删除id对应的实体
         */
        // public removeEntityByPath(fpath: string[], id: string): void {
        //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
        //   if (entityCollectionOrList instanceof EntityCollection === true) {
        //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
        //     entityCollection.removeEntityById(id);
        //   } else {
        //     const entityList = (entityCollectionOrList as EntityList<Entity>);
        //     entityList.remove(id);
        //   }
        // }
        /**
         * 根据path获取实体集合
         * @param fpath path
         */
        EntityManager.prototype.removeEntityByPath = function (fpath, id) {
            var subPaths = fpath.split('/');
            if (subPaths.length < 3) {
                throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
            }
            var childEntityList;
            for (var i = 2; i < subPaths.length; i = i + 2) {
                var fid = subPaths[i - 1];
                var propName = subPaths[i];
                var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
                childEntityList = parentEntity[propName];
                if (!childEntityList) {
                    throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
                }
            }
            childEntityList.remove(id);
        };
        /**
         * 从fapth对应的实体集合中删除ids对应的实体
         */
        EntityManager.prototype.removeEntitiesByPath = function (fpath, ids) {
            // const entityCollectionOrList = this.getEntityNodeByPath(fpath);
            // if (entityCollectionOrList instanceof EntityCollection === true) {
            //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
            //   entityCollection.removeEntitiesByIds(ids);
            // } else {
            //   const entityList = (entityCollectionOrList as EntityList<Entity>);
            //   entityList.remove(ids);
            // }
            throw new Error('Not Implemented');
        };
        // #endregion
        // #region 清空变更集相关方法
        /**
         * 清空所有实体的变更集
         */
        EntityManager.prototype.clearAllEntityChanges = function () {
            var entities = this.entityCollection.toArray();
            entities.forEach(function (entity) {
                entity.changes.splice(0, entity.changes.length);
            });
        };
        /**
         * 清空id指定的实体变更集
         */
        EntityManager.prototype.clearEntityChangesById = function (id) {
            var entity = this.entityCollection.getEntityById(id);
            if (!entity) {
                return;
            }
            entity.changes.splice(0, entity.changes.length);
        };
        /**
         * 清空ids数组中指定的实体的变更集
         */
        EntityManager.prototype.clearEntityChangesByIds = function (ids) {
            var _this = this;
            if (!ids || ids.length < 0) {
                return;
            }
            ids.forEach(function (id) {
                _this.clearEntityChangesById(id);
            });
        };
        // #endregion
        // #region 变更集检查相关方法
        /**
         * 检查所有的实体，是否有未提交的变更
         */
        EntityManager.prototype.checkAllEntityChanges = function () {
            var entities = this.entityCollection.toArray();
            var hasChanges = entities.some(function (entity) {
                if (entity.changes.length > 0) {
                    return true;
                }
                else {
                    return false;
                }
            });
            return hasChanges;
        };
        /**
         * 检查id对应的实体，是否有未提交的变更
         */
        EntityManager.prototype.checkEntityChangesById = function (id) {
            var entity = this.entityCollection.getEntityById(id);
            if (!entity) {
                return false;
            }
            return entity.changes.length > 0;
        };
        // #endregion
        // #region 不规范方法，待废弃
        /**
         * 待废弃
         * @deprecated
         */
        EntityManager.prototype.clearEntityChangesByArray = function (idArray) {
            this.clearEntityChangesByIds(idArray);
        };
        return EntityManager;
    }());

    // tslint:disable: no-bitwise
    var PaginationManager = /** @class */ (function () {
        function PaginationManager(entityType, paginationConfig) {
            this.entityType = entityType;
            this.paginationConfig = paginationConfig;
            if (this.paginationConfig === null || this.paginationConfig === undefined) {
                this.paginationConfig = this.getNgListProperties();
            }
            // 兼容老表单，将之前的主表分页信息展开到分页配置根中
            this.expandMainEntityConfig();
            this.deleteMainEntityConfig();
            this.removeLasts();
        }
        /**
         * 主表分页信息展开到分页配置根中
         */
        PaginationManager.prototype.expandMainEntityConfig = function () {
            var entityName = this.entityType.typeName || this.entityType.name;
            if (this.paginationConfig.hasOwnProperty(entityName)) {
                var entityConfig = this.paginationConfig[entityName];
                this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);
            }
            else {
                this.paginationConfig = Object.assign(this.paginationConfig, { pageSize: this.paginationConfig['pageSize'] || 0 });
            }
        };
        /**
         * 删除子表分页配置key后面的s
         */
        PaginationManager.prototype.removeLasts = function () {
            var _this = this;
            var entityName = this.entityType.typeName || this.entityType.name;
            Object.keys(this.paginationConfig).forEach(function (key) {
                if (key !== entityName && key.endsWith('s')) {
                    var newKey = key.substring(0, key.length - 1);
                    _this.paginationConfig[newKey] = _this.paginationConfig[key];
                    delete _this.paginationConfig[key];
                }
            });
        };
        /**
         * 删除主表实体配置信息
         */
        PaginationManager.prototype.deleteMainEntityConfig = function () {
            var entityName = this.entityType.typeName || this.entityType.name;
            delete this.paginationConfig[entityName];
        };
        Object.defineProperty(PaginationManager.prototype, "pagination", {
            /**
             * 获取分页信息
             */
            get: function () {
                return this.paginationConfig;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取分页信息
         * @param path 路径
         * @param defaultValue 默认值
         */
        PaginationManager.prototype.getPaginationConfigByPath = function (path, defaultValue) {
            if (!path || path === '/') {
                return this.paginationConfig;
            }
            if (typeof path !== 'string') {
                throw new Error('路径必须为字符串！');
            }
            path = path.substring(1);
            var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; });
            var config = this.paginationConfig;
            paths.forEach(function (item) {
                if (config && config.hasOwnProperty(item)) {
                    config = config[item];
                }
                else {
                    config = null;
                }
            });
            return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
        };
        /**
         * 设置分页信息
         * @param path 路径
         * @param value 值
         */
        PaginationManager.prototype.setPaginationConfigByPath = function (path, value) {
            if (!Array.isArray(path)) {
                path = path.toString().match(/[^/[\]]+/g) || [];
            }
            path.slice(0, -1).reduce(function (prev, current, index) {
                return Object(prev[current]) === prev[current]
                    ? prev[current]
                    : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                        ? []
                        : {};
            }, this.paginationConfig)[path[path.length - 1]] = value;
            return this.paginationConfig;
        };
        /**
         * 递归获取当前实体的所有NgList属性
         * @param defaultPageSize defaultPageSize
         */
        PaginationManager.prototype.getNgListProperties = function (defaultPageSize) {
            if (defaultPageSize === void 0) {
                defaultPageSize = 0;
            }
            var getChilds = function (objectType) {
                var listProperties = FieldMetadataUtil.getNgList(objectType);
                var result = {};
                if (Object.keys(listProperties).length < 1) {
                    return result;
                }
                Object.keys(listProperties).forEach(function (prop) {
                    var itemTypeName = listProperties[prop].dataField;
                    // 去掉尾部的s
                    if (itemTypeName.endsWith('s')) {
                        itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);
                    }
                    result[itemTypeName] = {
                        pageSize: defaultPageSize
                    };
                    var child = getChilds(listProperties[prop].type);
                    if (child !== null && Object.keys(child).length > 0) {
                        result = Object.assign({}, result, child);
                    }
                });
                return result;
            };
            var childs = getChilds(this.entityType);
            var root = Object.assign({}, { pageSize: defaultPageSize }, childs);
            return root;
        };
        PaginationManager.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PaginationManager.ctorParameters = function () {
            return [
                { type: undefined },
                { type: undefined }
            ];
        };
        return PaginationManager;
    }());

    var DataChangeHistory = /** @class */ (function () {
        function DataChangeHistory() {
            this.history = [];
        }
        DataChangeHistory.prototype.addChange = function (dataChange) {
            var changeType = exports.DataChangeType[dataChange.changeType];
            this["on" + changeType + "Data"](dataChange);
        };
        DataChangeHistory.prototype.addChanges = function (dataChange) {
            var _this = this;
            dataChange.forEach(function (change) { return _this.addChange(change); });
        };
        DataChangeHistory.prototype.clear = function () {
            this.history.splice(0, this.history.length);
        };
        DataChangeHistory.prototype.clearByIds = function (ids) {
            this.history = this.history.filter(function (item) {
                var e_1, _a;
                if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                    try {
                        for (var ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                            var id = ids_1_1.value;
                            var include = item.fpath.split('/').includes(id);
                            return !include;
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return))
                                _a.call(ids_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    return !ids.includes(item.dataId);
                }
            });
        };
        DataChangeHistory.prototype.isChanged = function () {
            return this.history.length > 0;
        };
        DataChangeHistory.prototype.onAddData = function (dataChange) {
            this.history.push(dataChange);
        };
        DataChangeHistory.prototype.onDeleteData = function (dataChange) {
            var index = this.history.findIndex(function (item) { return item.dataId === dataChange.dataId && item.changeType === exports.DataChangeType.Add; });
            if (index >= 0) {
                this.history.splice(index, 1);
            }
            else {
                this.history.push(dataChange);
            }
        };
        return DataChangeHistory;
    }());

    /**
     * 排序条件管理
     */
    var SortConditionManager = /** @class */ (function () {
        function SortConditionManager() {
            this.sorts = new Map();
        }
        /**
         * 根据bingdingPath获取排序规则
         * @param bindingPath bindingPath
         * @param directionConverter converter
         */
        SortConditionManager.prototype.getConditionsByBindingPath = function (bindingPath, directionConverter) {
            var conditions = this.sorts.get(bindingPath) || [];
            if (conditions.length < 1) {
                return conditions;
            }
            if (typeof directionConverter === 'function') {
                conditions = conditions.map(function (condition) {
                    var sortType = directionConverter(condition.SortType);
                    return { SortField: condition.SortField, SortType: sortType };
                });
            }
            return conditions;
        };
        /**
         * 增加排序条件
         * @param bindingPath 绑定路径
         * @param field 排序字段
         * @param direction 排序方向 asc|desc
         */
        SortConditionManager.prototype.addCondition = function (bindingPath, field, direction) {
            // 取消排序
            if (!field || !direction) {
                this.sorts.delete(bindingPath);
                return;
            }
            var isBindingPathExist = this.sorts.has(bindingPath);
            var condition = { SortField: field, SortType: direction };
            if (!isBindingPathExist) {
                this.sorts.set(bindingPath, [condition]);
            }
            else {
                var bindingPathSortConditions = this.sorts.get(bindingPath) || [];
                // new condition will override the previous condition
                var conditionIndex = bindingPathSortConditions.findIndex(function (item) { return item.SortField === field; });
                if (conditionIndex !== -1) {
                    bindingPathSortConditions[conditionIndex] = condition;
                }
                else {
                    bindingPathSortConditions.push(condition);
                }
            }
        };
        SortConditionManager.prototype.removeCondition = function (bindingPath, field) {
            throw new Error('not implement!');
        };
        /**
         * 批量增加排序条件
         * @param bindingPath bindingPath
         * @param fields fields , seprated by comma
         * @param directions directions , seprated by comma
         * @description set conditions and overwrite all conditions which has the same bindingPath
         */
        SortConditionManager.prototype.setConditions = function (bindingPath, fields, directions) {
            // 取消排序
            if (!fields || !directions) {
                this.sorts.delete(bindingPath);
                return;
            }
            var filedsArray = fields.split(',').filter(function (item) { return item; });
            var directionsArray = directions.split(',').filter(function (item) { return item; });
            if (filedsArray.length !== directionsArray.length) {
                throw new Error('arguments error,fields and direction are not match.');
            }
            var conditions = [];
            filedsArray.forEach(function (field, index) {
                var condition = { SortField: field, SortType: directionsArray[index] };
                conditions.push(condition);
            });
            this.sorts.set(bindingPath, conditions);
        };
        /**
         * 清空所有排序条件
         */
        SortConditionManager.prototype.clear = function () {
            this.sorts.clear();
        };
        return SortConditionManager;
    }());

    /**
     * 过滤条件管理器
     */
    var FilterConditionManager = /** @class */ (function () {
        function FilterConditionManager() {
            this.filters = new Map();
        }
        /**
         * 获取过滤条件
         * @param bindingPath 绑定路径
         */
        FilterConditionManager.prototype.getFilters = function (bindingPath) {
            return this.filters.get(bindingPath) || [];
        };
        /**
         * 自定义合并
         * @param bindingPath 绑定路径
         * @param merge 合并函数
         */
        FilterConditionManager.prototype.mergeCondition = function (bindingPath, merge) {
            var conditions = this.filters.get(bindingPath) || [];
            var result = merge(conditions);
            this.filters.set(bindingPath, result);
        };
        /**
         * 增加过滤条件
         * @param bindingPath 绑定路径
         * @param condition 过滤条件
         */
        FilterConditionManager.prototype.addCondition = function (bindingPath, condition) {
            // 通过bindingPath获取对应的过滤条件
            var conditions = this.filters.get(bindingPath);
            var index = this.findConditionIndex(bindingPath, condition);
            if (index !== -1) {
                conditions[index] = condition;
            }
            else {
                conditions.push(condition);
            }
        };
        /**
         * 批量增加过滤条件
         * @param bindingPath 绑定路径
         * @param conditions 过滤条件数组
         */
        FilterConditionManager.prototype.addConditions = function (bindingPath, conditions) {
            var _this = this;
            if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {
                return;
            }
            conditions.forEach(function (condition) {
                _this.addCondition(bindingPath, condition);
            });
        };
        /**
         * 删除过滤条件
         * @param bindingPath 绑定路径
         * @param predicate 条件表达式
         */
        FilterConditionManager.prototype.removeCondition = function (bindingPath, predicate) {
            var _this = this;
            var conditions = this.filters.get(bindingPath);
            if (!conditions || conditions.length < 1) {
                return;
            }
            var removes = conditions.filter(predicate);
            if (removes) {
                removes.forEach(function (condition) {
                    var index = _this.findConditionIndex(bindingPath, condition);
                    if (index >= 0) {
                        conditions.splice(index, 1);
                    }
                });
            }
        };
        /**
         * 清空过滤条件
         */
        FilterConditionManager.prototype.clear = function () {
            this.filters.clear();
        };
        /**
         * 设置过滤条件数组
         * @param bindingPath 绑定路径
         * @param conditions 过滤条件数组
         */
        FilterConditionManager.prototype.setConditions = function (bindingPath, conditions) {
            this.filters.set(bindingPath, conditions);
        };
        /**
         * 查找过滤条件索引
         * @param bindingPath 绑定路径
         * @param condition 过滤条件
         */
        FilterConditionManager.prototype.findConditionIndex = function (bindingPath, condition) {
            if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {
                return -1;
            }
            var conditions = this.filters.get(bindingPath);
            if (!conditions || conditions.length < 1) {
                return -1;
            }
            return conditions.findIndex(function (value, index) {
                var e_1, _a;
                var isEqual = true;
                var props = Object.keys(condition);
                try {
                    for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                        var prop = props_1_1.value;
                        if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {
                            isEqual = false;
                            break;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                            _a.call(props_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return isEqual;
            });
        };
        return FilterConditionManager;
    }());

    // tslint:disable: no-bitwise
    // get uniqueId
    var UID = /** @class */ (function () {
        function UID() {
        }
        UID.create = function (redix) {
            var timestamp = Date.now().valueOf();
            var uuid = 0;
            if (timestamp > UID.previous) {
                UID.previous = timestamp;
                uuid = timestamp;
            }
            else {
                UID.previous = UID.previous + 100;
                uuid = UID.previous;
            }
            return uuid.toString(redix);
        };
        UID.previous = 0;
        return UID;
    }());

    /**
     * 本地仓库
     * @description
     * # Repository
     *
     * Repository负责与后台接口交互并将接口返回的数据转换为Entity集合进行保存。因此Repository有两个重要的职责：后端交互、数据存储。
     * Repository中存储的数据是Entity类型，可以通过API对数据进行修改或删除。由于Repository和BindingData相互监听，对数据仓库的操作最终会通过BindingData更新到界面上。
     *
     * ## 实体操作
     * 实体操作仅对Repository本地已经存在的数据进行操作，不会发送请求。
     *
     * - 通过主键获取实体
     *
     *   ```javascript
     *    this.repository.entityCollection.getEntityById("id");
     *   ```
     *
     * - 删除实体数据
     *
     *   ```javascript
     *   this.repository.entityCollection.removeEntityById("id")
     *   ```
     *
     * - 清空所有实体
     *
     *   ```javascript
     *   this.repository.entityCollection.clear();
     *   ```
     *
     * - 将实体数据转换为json格式
     *
     *   ```javascript
     *   this.repository.entityCollection.toJSON();
     *   ```
     *
     * - 添加实体
     *
     *   ```javascript
     *   this.repository.entityCollection.addEntity(entity:T);
     *   ```
     * - 添加子表实体
     *
     *   ```javascript
     *   const befRepository = this.repository as BefRepository<any>;
     *   const entityManager = befRepository.entityManager;
     *   entityManager.appendEntityByPath("/主实体Id/子表名s",{子表JSON数据});
     *   ```
     * - 批量添加实体
     *
     *   ```javascript
     *   this.repository.entityCollection.addEntities(entities:T[])
     *   ```
     *
     * - 批量添加子表实体
     *
     *   ```javascript
     *   const befRepository = this.repository as BefRepository<any>;
     *   const entityManager = befRepository.entityManager;
     *   const childrenEntities = entityManager.createEntitiesByPath(["主实体Id","子表名s"], entityListData: any[])
     *   entityManager.appendEntitiesByPath(["主实体Id","子表名s"],childrenEntities);
     *   ```
     *
     * - 批量加载实体
     *
     *   ```javascript
     *   this.repository.entityCollection.loadEntities(entities:T[]);
     *   ```
     *
     *   > 加载实体会将本地仓库数据置为加载的实体。
     *
     * - 创建实体
     *
     *   ```javascript
     *   this.repository.buildEntity(JSON数据);
     *   ```
     *
     * - 批量创建实体
     *
     *   ```javascript
     *   this.repository.buildEntities(JSON数据);
     *   ```
     *
     * - 获取子表数据
     *
     *   ```javascript
     *   const befRepository = this.repository as BefRepository<any>;
     *   const entityManager = befRepository.entityManager;
     *   entityManager.getEntityByPath(["主实体Id","子表名","子表id"]);
     *   ```
     *
     *   !> **注意** entityManager属性仅存在于BefRepository类，因此在使用EntityManager时应先将Repository转换为BefRepository
     *
     * - 获取所有子表数据
     *
     *   ```javascript
     *   const befRepository = this.repository as BefRepository<any>;
     *   const entityManager = befRepository.entityManager;
     *   entityManager.getEntitiesByPath(["主实体Id","子表名"]);
     *   ```
     *
     *   > EntityManager不仅可以获取子表数据，同样可以获取主表数据。
     *   >
     *   > ```javascript
     *   > entityManager.getEntitiesByPath(["主实体Id"]);
     *   > ```
     *
     * - 获取实体属性值
     *
     *   ```javascript
     *   const entity = this.repository.entityCollection.getEntityById("id");
     *   cosnt name = entity['name'];
     *   // 或者
     *   const entity: any = this.repository.entityCollection.getEntityById("id");
     *   cosnt name = entity.name;
     *   ```
     *
     * ## 后端交互
     *
     * ​	通过接口操作后端数据，会直接对数据产生影响。
     *
     * - 更新实体数据
     *
     *   ```javascript
     *   this.repository.updateById('id');
     *   ```
     *
     * - 删除实体
     *
     *   ```javascript
     *   this.repository.removeById("id");
     *   ```
     *
     * - 批量删除实体
     *
     *   ```javascript
     *   this.repository.removeByIds(ids:string[])
     *   ```
     *
     * - 删除下级表数据
     *
     *   ```javascript
     *   this.repository.removeByPath(['主表Id','子表名','子表Id'])
     *   ```
     *
     * - 新增主实体
     *
     *   ```javascript
     *   this.repository.append();
     *   ```
     *
     * - 新增子实体
     *
     *   ```javascript
     *   this.repository.appendByPath(['主表id','子表名']);
     *   ```
     *
     * - 加载实体数据
     *
     *   ```javascript
     *   this.repository.getById('id');
     *   ```
     *
     * - 获取主表数据
     *
     *   ```javascript
     *   this.repository.getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)
     *
     *   ```
     *
     *   > pageSize、pageIndex可以不传。
     *
     * - 获取主表数据（POST方法）
     *
     *   ```javascript
     *   this.repository.filter(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)
     *   ```
     *
     * - 提交指定实体变更到后端
     *
     *   ```javascript
     *   this.repository.updateChangesById("id");
     *   ```
     *
     * - 提交所有变更
     *
     *   ```javascript
     *   this.repository.updateAllChanges();
     *   ```
     *
     * - 应用变更（保存）
     *
     *   ```javascript
     *   this.repository.applyChanges();
     *   ```
     *
     * - 取消变更
     *
     *   ```javascript
     *   this.repository.cancelChanges();
     *   ```
     *
     * - 清除Repository所有变更
     *
     *   ```javascript
     *   const befRepository = this.repository as BefRepository<any>;
     *   befRepository.entityManager.clearAllEntityChanges();
     *   ```
     *
     * - 批量新增子表数据
     *   ```javascript
     *   this.repository.batchAppendByPath(path: string, defaultValues: Array<any>);
     *   ```
     *
     *   > path `string`：/主表id/从表前端nodeCode，如果/1/orders
     *   >
     *   > defaultValues `Array<any>`：新增从表时的默认值，数组，元素为对象，key为字段名，value为默认值。
     *
     * - 批量删除子表数据
     *
     *   ```javascript
     *   this.repository.batchRemoveByPath(path: string, ids: string);
     *   ```
     *
     *   > path `string`： /主表id/从表前端nodeCode，如果/1/orders
     *   >
     *   > ids `string` ：要删除的子表数据id，格式为`id1,id2,id3`
     */
    var Repository = /** @class */ (function () {
        // #endregion
        /**
         * 构造函数
         */
        function Repository() {
            /**
             * 用户分页配置信息
             */
            this.paginationInfo = null;
            this.readMetadata();
            if (this.entityType) {
                this.entityTypeInfo = new DataTypeInfo(this.entityType);
                this.entityCollection = new EntityCollection(this.entityType);
            }
            this.dataChangeHistory = new DataChangeHistory();
            this.sortConditionManager = new SortConditionManager();
            this.filterConditionManager = new FilterConditionManager();
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(Repository.prototype, "primaryKey", {
            // #endregion
            // #region get/set方法
            /**
             * 实体主键
             */
            get: function () {
                return this.entityCollection.primaryKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Repository.prototype, "changes", {
            get: function () {
                return this.entityCollection.changes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Repository.prototype, "entityCollectionChange", {
            /**
             * 实体变更集合
             */
            get: function () {
                return this.entityCollection.collectionChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Repository.prototype, "name", {
            /**
             * 获取名称
             */
            get: function () {
                // 1、老表单没有name属性
                // 2、不能使用construcotr.name，压缩脚本会把name改掉，或者压缩成相同的名称（目前发现已知）
                if (!this.innerName) {
                    var guid = UID.create();
                    this.innerName = "Repository_" + guid;
                }
                return this.innerName;
            },
            /**
             * 设置名称
             */
            set: function (value) {
                this.innerName = value;
            },
            enumerable: true,
            configurable: true
        });
        Repository.prototype.dispose = function (options) {
            this.paginationManager = null;
            if (this.destroy$) {
                this.destroy$.next();
                this.destroy$.complete();
                this.destroy$ = null;
            }
            if (this.entityCollection) {
                this.entityCollection.reset(false);
                // this.entityCollection = null;
            }
        };
        Repository.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        Repository.prototype.updateEntityType = function (entityType) {
            this.entityType = entityType;
            this.entityTypeInfo = new DataTypeInfo(this.entityType);
            this.entityCollection = new EntityCollection(this.entityType);
        };
        /**
         * 读取元数据
         */
        Repository.prototype.readMetadata = function () {
            var repositoryMetadata = MetadataUtil.getClassMetadataByName(this.constructor, 'NgRepository');
            if (repositoryMetadata) {
                // API地址
                this.apiUri = repositoryMetadata.apiUrl;
                // 实体类型
                this.entityType = repositoryMetadata.entityType;
            }
        };
        /**
         * 初始化分页配置
         * @param config - 用户分页配置
         */
        Repository.prototype.setPaginationConfig = function (config) {
            this.paginationManager = new PaginationManager(this.entityType, config);
            var _a = (this.paginationManager.getPaginationConfigByPath('/') || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
            // tslint:disable-next-line: max-line-length
            this.entityCollection.paginationInfo = Object.assign({ pageSize: pageSize }, this.paginationManager.pagination, this.entityCollection.paginationInfo);
            // 无需再单独设置一次pageSize，减少一次变更
            // this.entityCollection.pageSize = pageSize;
        };
        /**
         * 重置状态
         */
        Repository.prototype.reset = function () {
            this.entityCollection.reset();
        };
        /**
         * 创建实体
         * @param data
         */
        Repository.prototype.buildEntity = function (data) {
            var entity = createEntity(this.entityType, data);
            return entity;
        };
        /**
         * 批量创建实体
         * @param listData
         */
        Repository.prototype.buildEntities = function (listData) {
            var entities = createEntities(this.entityType, listData);
            return entities;
        };
        Repository.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Repository.ctorParameters = function () { return []; };
        return Repository;
    }());

    /*
     * @Author: Witt
     * @Date: 2019-02-28 15:46:07
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-09-03 19:10:53
     */
    /**
     * 空Repository实现
     */
    var DefaultRepository = /** @class */ (function (_super) {
        __extends(DefaultRepository, _super);
        function DefaultRepository(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            // 初始化实体管理器
            _this.entityManager = new EntityManager(_this.entityCollection);
            return _this;
        }
        /**
         * 获取实体列表
         */
        DefaultRepository.prototype.getEntities = function (filter, sorts, pageSize, pageIndex) {
            throw new Error('Not Implemented');
        };
        DefaultRepository.prototype.filter = function (filter, sorts, pageSize, pageIndex) {
            throw new Error('Not Implemented');
        };
        /**
         * 获取实体列表
         */
        DefaultRepository.prototype.getList = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 根据id获取实体
         * @param id 主实体id
         */
        DefaultRepository.prototype.getById = function (id) {
            throw new Error('Not Implemented');
        };
        /**
         * 根据id获取子表分页的实体
         * @param id 主实体id
         */
        DefaultRepository.prototype.getEntityById = function (id) {
            throw new Error('Not Implemented');
        };
        /**
         * 分页查询从表/从从表数据
         * @param path 绑定路径
         * @param ids 绑定路径对应的主键
         * @param filter 过滤条件
         * @param sort 排序
         */
        DefaultRepository.prototype.queryChild = function (paths, pageIndex, pageSize, filter, sort) {
            throw new Error('Not Implemented');
        };
        /**
         * 根据id更新实体
         */
        DefaultRepository.prototype.updateById = function (id) {
            throw new Error('Not Implemented');
        };
        /**
         * 更新实体数据(子表分页)
         * @param id 实体主键
         */
        DefaultRepository.prototype.updateEntityById = function (id) {
            throw new Error('Not Implemented');
        };
        /**
         * 创建实体
         */
        DefaultRepository.prototype.create = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 创建新实体，并追加到实体列表
         */
        DefaultRepository.prototype.append = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 创建新的子实体，并追加到实体列表
         */
        DefaultRepository.prototype.appendByPath = function (path) {
            throw new Error('Not Implemented');
        };
        /**
         * 再指定位置插入数据
         * @param position 插入位置
         * @param defaultValue 默认值
         */
        DefaultRepository.prototype.insert = function (position, defaultValue) {
            throw new Error('Not Implemented');
        };
        /**
         * 在指定实体路径插入实体
         * @param path 实体路径
         * @param position 插入位置
         */
        DefaultRepository.prototype.insertByPath = function (path, position) {
            throw new Error('Not Implemented');
        };
        /**
         * 根据id删除对应实体
         */
        DefaultRepository.prototype.removeById = function (id, ifSave) {
            throw new Error('Not Implemented');
        };
        /**
         * 根据ids批量删除实体
         * @param ids ids
         * @param ifSave 是否保存
         */
        DefaultRepository.prototype.batchRemove = function (ids, ifSave) {
            throw new Error('Not Implemented');
        };
        /**
         * 根据ids批量删除实体
         */
        DefaultRepository.prototype.removeByIds = function (id, ifSave) {
            throw new Error('Not Implemented');
        };
        /**
         * 根据id删除path对应的后代实体
         */
        DefaultRepository.prototype.removeByPath = function (path, id) {
            throw new Error('Not Implemented');
        };
        /**
         * 提交id对应的根实体变更
         */
        DefaultRepository.prototype.updateChangesById = function (id) {
            throw new Error('Not Implemented');
        };
        /**
         * 提交path对应的实体变更
         */
        DefaultRepository.prototype.updateChangesByPath = function (path, id) {
            throw new Error('Not Implemented');
        };
        /**
         * 更新所有变更
         */
        DefaultRepository.prototype.updateAllChanges = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 应用服务器端变更
         */
        DefaultRepository.prototype.applyChanges = function () {
            throw new Error('Not Implemented');
        };
        /**
         * 保存id对应数据的变更
         */
        DefaultRepository.prototype.applyChangesById = function (id) {
            throw new Error('Not Implemented');
        };
        /**
         * 取消变更集
         */
        DefaultRepository.prototype.cancelChanges = function (options) {
            throw new Error('Not Implemented');
        };
        /**
         * 批量删除子表
         */
        DefaultRepository.prototype.batchRemoveByPath = function (path, ids) {
            throw new Error('Not Implemented');
        };
        /**
         * 批量新增从表/从从表数据
         * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
         * @param defaultValues 默认实体数据数组
         */
        DefaultRepository.prototype.batchAppendByPath = function (path, defaultValues) {
            throw new Error('Not Implemented');
        };
        /**
         * 批量新增主表数据
         * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
         * @param defaultValues 默认实体数据数组
         */
        DefaultRepository.prototype.batchAppend = function (defaultValues) {
            throw new Error('Not Implemented');
        };
        DefaultRepository.prototype.hasChanges = function () {
            throw new Error('Not Implemented');
        };
        DefaultRepository.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DefaultRepository.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return DefaultRepository;
    }(Repository));

    var EntityDependencyResolver = /** @class */ (function () {
        function EntityDependencyResolver(repository) {
            this.repository = repository;
            this.entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;
        }
        /**
         * 解析用户表达式中的实体依赖
         * @param expr 用户配置的完整表达式
         * @returns
         */
        EntityDependencyResolver.prototype.resolve = function (expr) {
            var groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);
            var entityDependencies = this.getEntityDependency(expr);
            // 去除错误的到子表的依赖
            if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {
                groupFunctionDependencies.forEach(function (dep) {
                    var index = entityDependencies.findIndex(function (item) { return dep.startsWith(item); });
                    if (index !== -1) {
                        entityDependencies.splice(index, 1);
                    }
                });
            }
            // 去重
            var merged = __spread(groupFunctionDependencies, entityDependencies);
            var deps = __spread(new Set(merged));
            return deps;
        };
        /**
         * 获取合法的实体属性表达式
         * @param entityPropertyExpression 实体属性表达式
         * @returns
         */
        EntityDependencyResolver.prototype.getValidEntityPropertyExpression = function (entityPropertyExpression) {
            var propPaths = entityPropertyExpression.split('.');
            var propInfo = null;
            try {
                propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);
            }
            catch (e) { }
            if (!propInfo) {
                if (propPaths.length > 1) {
                    propPaths.pop();
                    return this.getValidEntityPropertyExpression(propPaths.join('.'));
                }
                else {
                    return null;
                }
            }
            else {
                return entityPropertyExpression.split('.');
            }
        };
        /**
         * 获取所有实体依赖
         * @param expr 表达式字符串
         * @returns
         */
        EntityDependencyResolver.prototype.getEntityDependency = function (expr) {
            var _this = this;
            var deps = [];
            if (this.entityTypeInfo) {
                // 使用正则匹配出所有实体
                var regex = new RegExp("[\\'\\\"]?\\s*(" + this.entityTypeInfo.entityInfo.nodeCode + "|" + this.entityTypeInfo.entityInfo.originalCode + ")[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\\"]?", 'g');
                var entityPropertyExpressions = expr.match(regex);
                if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                    // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                    entityPropertyExpressions.forEach(function (item) {
                        if (item.indexOf('.') === -1) {
                            return;
                        }
                        // 去空格
                        item = item.trim().replace(/\"/g, '');
                        var paths = ExpressionUtil.convertToNodeCode(item, _this.repository.entityTypeInfo);
                        item = paths.join('.');
                        // 截去主实体及点
                        item = item.substr(item.indexOf('.') + 1);
                        var dep = _this.getValidEntityPropertyExpression(item);
                        if (dep && Array.isArray(dep) && dep.length > 0) {
                            // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据
                            dep.splice(0, 0, ENTITY_TEMPLATE);
                            deps.push(dep.join('/'));
                        }
                    });
                }
            }
            return deps;
        };
        EntityDependencyResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityDependencyResolver.ctorParameters = function () {
            return [
                { type: Repository }
            ];
        };
        return EntityDependencyResolver;
    }());

    var CONTEXT_FUNCTIONS = ['GetContextParameter', 'GetSessionValue'];
    var StateDependencyResolver = /** @class */ (function () {
        function StateDependencyResolver() {
        }
        StateDependencyResolver.prototype.resolve = function (expr) {
            var deps = [];
            var regex = new RegExp("DefaultFunction\\.(" + CONTEXT_FUNCTIONS.join('|') + ")\\s*\\([^\\r\\n\\)]*\\)", 'g');
            var contextFunctions = expr.match(regex);
            if (contextFunctions && contextFunctions.length > 0) {
                // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析
                var argumentsRegex_1 = /\(([^\r\n\)]*)\)/;
                contextFunctions.forEach(function (groupFunction) {
                    var argumentMatchResult = groupFunction.match(argumentsRegex_1);
                    if (argumentMatchResult.length === 2) {
                        var argument = argumentMatchResult[1].trim().replace(/\"/g, '');
                        var dep = ['STATE~'];
                        dep.push(argument);
                        deps.push(dep.join('/'));
                    }
                });
            }
            return deps;
        };
        return StateDependencyResolver;
    }());

    /**
     * 用户自定义参数解析器
     */
    var CommentDependencyResolver = /** @class */ (function () {
        function CommentDependencyResolver() {
        }
        CommentDependencyResolver.prototype.resolve = function (expr) {
            var dependencies = [];
            if (!expr || expr.length < 1) {
                return dependencies;
            }
            var defineRegex = /\/\*\*\s*__define__\((.*)\)\s*\*\//;
            var defineMatchArray = expr.match(defineRegex);
            if (defineMatchArray && defineMatchArray.length === 2) {
                var defineString = defineMatchArray[1].trim();
                var defineObject = null;
                try {
                    defineObject = JSON.parse(defineString);
                }
                catch (e) {
                    console.warn("\u81EA\u5B9A\u4E49\u4F9D\u8D56\u89E3\u6790\u5931\u8D25\uFF1A" + defineString);
                }
                if (defineObject && defineObject.hasOwnProperty('deps') && Array.isArray(defineObject['deps'])) {
                    dependencies.push.apply(dependencies, __spread(defineObject['deps']));
                }
            }
            return dependencies;
        };
        CommentDependencyResolver.decorators = [
            { type: core.Injectable }
        ];
        return CommentDependencyResolver;
    }());

    var ResolveService = /** @class */ (function () {
        function ResolveService(injector, resolverRegistry) {
            this.injector = injector;
            this.resolverRegistry = resolverRegistry;
        }
        ResolveService.prototype.resolve = function (expression) {
            var deps = [];
            if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {
                return;
            }
            // 优先使用用户自定义的依赖
            var commentDependencyResolver = this.resolverRegistry.resolvers.find(function (resolver) { return resolver instanceof CommentDependencyResolver; });
            if (commentDependencyResolver) {
                var commentDependencies = commentDependencyResolver.resolve(expression);
                if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {
                    deps.push.apply(deps, __spread(commentDependencies));
                }
            }
            // 如果用户已经自定义了依赖，则不再计算
            if (deps && deps.length > 0) {
                return deps;
            }
            this.resolverRegistry.resolvers.forEach(function (resolver) {
                // 再解析一次也可以，返回的依然是空数组
                if (resolver instanceof CommentDependencyResolver) {
                    return;
                }
                var dependency = resolver.resolve(expression);
                if (dependency && dependency.length > 0) {
                    deps.push.apply(deps, __spread(dependency));
                }
            });
            // 去重
            return __spread(new Set(deps));
        };
        ResolveService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ResolveService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: ResolverRegistry }
            ];
        };
        return ResolveService;
    }());

    // export * from './resolver';

    var ExpressionUtil = /** @class */ (function () {
        function ExpressionUtil() {
        }
        ExpressionUtil.getGroupFunctionDependency = function (expr, entityTypeInfo) {
            var _this = this;
            var deps = [];
            // 获取聚合函数依赖项
            var groupFunctionRegex = new RegExp("DefaultFunction\\.(" + GROUP_FUNCTIONS.join('|') + ")\\s*\\([^\\r\\n\\)]*\\)", 'g');
            var groupFunctions = expr.match(groupFunctionRegex);
            if (groupFunctions && groupFunctions.length > 0) {
                // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析
                var argumentsRegex_1 = /\(([^\r\n\)]*)\)/;
                var methodNameRegex_1 = /DefaultFunction\.(\S*)\(/;
                groupFunctions.forEach(function (groupFunction) {
                    var argumentMatchResult = groupFunction.match(argumentsRegex_1);
                    var methodNameMatchResult = groupFunction.match(methodNameRegex_1);
                    var methodName = null;
                    if (methodNameMatchResult && methodNameMatchResult.length == 2) {
                        methodName = methodNameMatchResult[1];
                    }
                    if (argumentMatchResult.length === 2) {
                        var argument = argumentMatchResult[1];
                        var args = argument.split(',').map(function (p) { return p.replace(/\"/g, ''); });
                        if (args && args.length === 2) {
                            var item = args.join('.');
                            item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                            // 移除主表code
                            item = item.substr(item.indexOf('.') + 1);
                            var dep = item.split('.');
                            dep.splice(0, 0, ENTITY_TEMPLATE);
                            deps.push(dep.join('/'));
                        }
                        else if (args && args.length === 3) {
                            if (methodName === 'MultiplyChildNumber') {
                                // support MultiplyChildNumber
                                // [Entity.childrens,prop1,prop2]
                                var prefix = args[0]; // like Entity.childrens
                                // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                                var prop1FullPath = prefix + "." + args[1];
                                var prop2FullPath = prefix + "." + args[2];
                                [prop1FullPath, prop2FullPath].forEach(function (item) {
                                    item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                                    item = item.substr(item.indexOf('.') + 1);
                                    var dep = item.split('.');
                                    dep.splice(0, 0, ENTITY_TEMPLATE);
                                    deps.push(dep.join('/'));
                                });
                            }
                            else if (methodName === 'IsContainMatch' || methodName === 'SortChildData') {
                                // [Entity.childrens,prop1,prop2]
                                var prefix = args[0]; // like Entity.childrens
                                // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                                var item = prefix + "." + args[1];
                                item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                                item = item.substr(item.indexOf('.') + 1);
                                var dep = item.split('.');
                                dep.splice(0, 0, ENTITY_TEMPLATE);
                                deps.push(dep.join('/'));
                            }
                        }
                        else if (args && args.length === 4) ;
                        else if (args && args.length === 5) {
                            if (['MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'].includes(methodName)) {
                                // [Entity.childrens,prop1,prop2]
                                var prefix = args[0]; // like Entity.childrens
                                // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                                var prop1FullPath = prefix + "." + args[1];
                                var prop2FullPath = prefix + "." + args[2];
                                [prop1FullPath, prop2FullPath].forEach(function (item) {
                                    item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                                    item = item.substr(item.indexOf('.') + 1);
                                    var dep = item.split('.');
                                    dep.splice(0, 0, ENTITY_TEMPLATE);
                                    deps.push(dep.join('/'));
                                });
                            }
                        }
                        else {
                            throw new Error("\u65E0\u6CD5\u89E3\u6790\u53C2\u6570\uFF1A " + JSON.stringify(argument));
                        }
                    }
                });
            }
            return deps;
        };
        /**
         * 将voCode转换为前端nodeCode
         * @param entityExpression like Entity.Child.p1
         * @returns
         */
        ExpressionUtil.convertToNodeCode = function (entityExpression, entityTypeInfo) {
            // UserEntity.storys.p1
            var nodeCodes = [];
            if (entityTypeInfo && entityExpression.includes('.')) {
                var entityExpressions = entityExpression.split('.') || [];
                var dataTypeInfo = entityTypeInfo;
                for (var index = 0; index < entityExpressions.length; index++) {
                    var prop = entityExpressions[index];
                    if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {
                        // 第一个是主表code，不能转nodeCode
                        if (index === 0) {
                            nodeCodes.push(dataTypeInfo.entityInfo.originalCode);
                        }
                        else {
                            nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);
                        }
                        // 下一级可能为子表、对象或属性
                        var nextNodeCode = entityExpressions[index + 1];
                        if (!nextNodeCode) {
                            break;
                        }
                        var nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);
                        if (!nextNodeCodePropInfo) {
                            break;
                        }
                        // 下一级为子表或对象
                        if (nextNodeCodePropInfo.typeInfo) {
                            dataTypeInfo = nextNodeCodePropInfo.typeInfo;
                        }
                    }
                    else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {
                        var dataPropInfo = dataTypeInfo.getPropInfoByName(prop);
                        nodeCodes.push(dataPropInfo.name);
                    }
                    else {
                        // throw new Error(`错误的属性参数 ${entityExpression}`);
                        break;
                    }
                }
            }
            return nodeCodes;
        };
        /**
         * 找到元数据中所有实体路径
         * @param dataTypeInfo
         * @param results
         * @param paths
         */
        ExpressionUtil.getChildrenEntityPaths = function (dataTypeInfo, results, paths) {
            var _this = this;
            if (paths === void 0) {
                paths = [];
            }
            var list = dataTypeInfo.getPropInfosByGroup(exports.DataPropGroup.List);
            if (list && list.length > 0) {
                list.forEach(function (dataPropInfo) {
                    if (paths.length === 0) {
                        results.push([dataPropInfo.name]);
                    }
                    var childrens = dataPropInfo.typeInfo.getPropInfosByGroup(exports.DataPropGroup.List);
                    if (childrens && childrens.length > 0) {
                        paths.push(dataPropInfo.name);
                        childrens.forEach(function (dataPropInfo) {
                            _this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);
                        });
                    }
                    else {
                        if (paths.length !== 0) {
                            paths.push(dataPropInfo.name);
                            results.push(__spread(paths));
                        }
                        paths.length = 0;
                    }
                });
            }
            else {
                if (paths.length > 0) {
                    paths.push(dataTypeInfo.entityInfo.nodeCode);
                    results.push(__spread(paths));
                }
                paths.length = 0;
            }
        };
        /**
         * 获取指定绑定路径的当前行数据
         * @param paths 绑定路径
         * @param bindingData
         * @returns
         */
        ExpressionUtil.getCurrentRowByPaths = function (paths, bindingData) {
            var result = null;
            var bindingList = bindingData.getValue(paths);
            if (bindingList && bindingList.length > 0) {
                var primaryValue = bindingList.currentItem.primaryKeyValue || null;
                // 使用事件中的主键
                // 主表或下级表新增，此时事件行就是当前行，无需处理
                if (primaryValue) {
                    var bindingObject = bindingList.findById(primaryValue);
                    if (bindingObject) {
                        result = bindingObject.toJSON();
                    }
                }
            }
            return result;
        };
        /**
         * 从实体路径中获取级数最大的从表或从从表
         * @param paths
         * @returns
         */
        ExpressionUtil.getAvailableChildrenPathsFromEntityPaths = function (paths, entityTypeInfo) {
            var nodeCodes = [];
            paths = __spread(paths);
            while (paths.length > 0) {
                var dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
                if (dataPropInfo && dataPropInfo.group === 'List') {
                    nodeCodes = paths;
                    break;
                }
                paths.pop();
            }
            return nodeCodes;
        };
        /**
         * 从路径中获取绑定路径
         * @param paths 路径
         * @param entityTypeInfo entityTypeInfo
         * @returns
         */
        ExpressionUtil.getBindingPath = function (paths, entityTypeInfo) {
            paths = this.getEntityPath(paths);
            var entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);
            return entityPaths;
        };
        ExpressionUtil.getEntityPath = function (path) {
            var paths = path.filter(function (value, index) {
                if (index % 2 === 0 && value.includes(':')) {
                    return false;
                }
                else {
                    return true;
                }
            });
            return paths;
        };
        return ExpressionUtil;
    }());

    var DataTypeInfoUtil = /** @class */ (function () {
        function DataTypeInfoUtil() {
        }
        /**
         * 递归获取实体的所有下级实体编号
         * @param dataTypeInfo
         * @param results
        */
        DataTypeInfoUtil.getChildrenNodeCodes = function (dataTypeInfo, results) {
            var _this = this;
            if (results === void 0) {
                results = [];
            }
            var list = dataTypeInfo.getPropInfosByGroup(exports.DataPropGroup.List);
            if (list && list.length > 0) {
                list.forEach(function (dataPropInfo) {
                    results.push(dataPropInfo.name);
                    var childrens = dataPropInfo.typeInfo.getPropInfosByGroup(exports.DataPropGroup.List);
                    if (childrens && childrens.length > 0) {
                        childrens.forEach(function (dataPropInfo) {
                            results.push(dataPropInfo.name);
                            _this.getChildrenNodeCodes(dataPropInfo.typeInfo, results);
                        });
                    }
                });
            }
        };
        return DataTypeInfoUtil;
    }());

    /**
     * 表单定义
     */
    var Form = /** @class */ (function (_super) {
        __extends(Form, _super);
        /**
         * 构造函数
         */
        function Form() {
            var _this = _super.call(this, {}, null, null) || this;
            _this.raisedByValidateEffector = false;
            _this.isShowValidationMsg = false;
            _this.validatorJs = ValidatorJS__default;
            _this.controlIdMap = {};
            _this.cardControls = {};
            _this.isShowPropMap = {};
            _this.destroy$ = new rxjs.Subject();
            return _this;
            // this.excludeRuleTypes = {};
        }
        Object.defineProperty(Form.prototype, "formGroupName", {
            /**
             * 名称
             */
            get: function () {
                return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "enableValidate", {
            /**
             * 是否启用表单验证
             */
            get: function () {
                return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "translateService", {
            get: function () {
                return this.translate;
            },
            enumerable: true,
            configurable: true
        });
        Form.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        Form.prototype.dispose = function (options) {
            if (this.destroy$) {
                this.destroy$.next();
                this.destroy$.complete();
                this.destroy$ = null;
            }
            Form.insMap[this.constructor.name] = null;
            this.frameContext = null;
            this.bindingData = null;
            this.ngChildForms = null;
            this.metaDatas = null;
            this.ngFormControls = {};
            this.controls = {};
            this.disposeValidation();
        };
        /**
         * 将formControl的错误信息更新到cardControl上
         */
        Form.updateErrors = function (propertyName, errorObj, id, value, isGrid) {
            Object.keys(Form.insMap).forEach(function (key) {
                var form = Form.insMap[key];
                if (!form) {
                    return;
                }
                if (id) {
                    form.setControlValue(propertyName, value);
                }
                if (form.enableValidate) {
                    form.isFormValid(propertyName, errorObj, id, isGrid);
                }
            });
        };
        /**
         * 设置dom属性为显示状态
         * @param domPropertyName dom属性
         */
        Form.prototype.setIsShowmap = function (domPropertyName) {
            this.isShowPropMap[domPropertyName] = true;
        };
        Form.prototype.setShowValidationMsg = function (flag) {
            this.raisedByValidateEffector = false;
            this.isShowValidationMsg = flag;
        };
        Form.prototype.setControlValue = function (key, value) {
            var bindingObject = this.bindingData && this.bindingData.getObject() || null;
            if (bindingObject && bindingObject.controlMap) {
                bindingObject.controlMap[key] = this.getGridItemControl(key, value);
            }
        };
        /**
         * 根据dom属性名称获取错误信息
         * @param domPropertyName dom属性名称
         */
        Form.prototype.getCardControlErrors = function (domPropertyName) {
            this.setIsShowmap(domPropertyName);
            return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
        };
        /**
         * 获取字段校验错误
         * @param domPropertyName
         * @returns
         */
        Form.prototype.getFormControlErrors = function (domPropertyName) {
            return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
        };
        Form.prototype.getGridControlErrors = function (domPropertyName, id) {
            this.setIsShowmap(domPropertyName);
            return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];
        };
        Form.prototype.isFormValid = function (propertyName, errorObj, id, isGrid) {
            var _this = this;
            var prefix = '';
            // 如果校验信息是由表达式触发的，不处理
            if (this.raisedByValidateEffector) {
                return;
            }
            var isGridComponent = this.frameContext.frameComponent.isGridComponent;
            if (isGridComponent !== undefined) {
                isGrid = isGridComponent;
            }
            //拼接子表frontNodeCode
            var bindingPaths = this.bindingPath.split('/').filter(function (p) { return p; });
            if (bindingPaths.length > 0) {
                prefix = bindingPaths.join('.').concat('.');
            }
            // 界面上绑定的字段名
            var domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);
            // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件
            if (propertyName && !domPropertyName) {
                return true;
            }
            // 若界面上不存在当前属性（动态列），不进行验证
            if (domPropertyName && !this.isShowPropMap[domPropertyName]) {
                return true;
            }
            var isValid = true;
            var bindingObject = this.bindingData.getObject();
            var currentId = bindingObject.primaryKeyValue;
            var isSubForm = this.bindingPath !== '/';
            var bindingList = this.bindingData.getList();
            // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况
            if (isSubForm && bindingList.innerList.size === 0) {
                return true;
            }
            // 无数据时不做校验
            if (!currentId) {
                return true;
            }
            // dataGrid修改时，根据id，创建formControl，并设置错误对象
            if (id && domPropertyName) {
                // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {
                //   this.controlIdMap[id] = {};
                // }
                this.controlIdMap[id] = this.controlIdMap[id] || {};
                this.controlIdMap[id][domPropertyName] = {
                    errors: errorObj
                };
            }
            // 将grid的FormControl同步到界面展示用的controlIDMap中
            // const currentBindingObject = bindingList.currentItem as BindingObject;
            var currentBindingObject = bindingObject;
            if (id && id !== currentId) {
                return;
            }
            // 验证全部字段时，清空已有的错误信息
            if (!propertyName && !id) {
                currentBindingObject.controlMap = {};
                this.controlIdMap = {};
                this.cardControls = {};
            }
            Object.keys(this.controls).forEach(function (key) {
                if (_this.isShowPropMap[key] !== true) {
                    return;
                }
                // 同步实体错误信息
                if (key === domPropertyName) {
                    // 实体验证的信息直接赋值
                    if (errorObj && Object.keys(errorObj).length > 0) {
                        // 卡片的错误
                        if (!isGrid) {
                            // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息
                            // 遍历错误，将validator返回的错误信息国际化
                            Object.keys(errorObj).map(function (validType) {
                                var validationError = errorObj[validType] && errorObj[validType]['error'] || null;
                                if (validationError) {
                                    var validateRule = validationError.rule;
                                    var ngFormControl = _this.getngFormControlByBinding(validateRule.field);
                                    if (ngFormControl) {
                                        validateRule.property = ngFormControl.name || ngFormControl.defaultI18nValue;
                                        validateRule.targetId = ngFormControl.id;
                                        validateRule.targetName = _this.formGroupName;
                                        // 修正校验必填表达式类型和多语资源中key不一致的问题
                                        var fixedValidType = validType === 'require' ? 'required' : validType;
                                        var messageTemplate = ValidationTypes.getMessage(fixedValidType);
                                        if (messageTemplate) {
                                            var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);
                                            errorObj[validType]['name'] = invalidMessage;
                                        }
                                    }
                                    // todo: ngFormControl暂时不设置
                                    // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);
                                }
                            });
                            _this.cardControls[key] = {
                                errors: errorObj
                            };
                        }
                    }
                    else {
                        _this.cardControls[key] = {};
                    }
                }
                if (_this.controls[key] && _this.controls[key].errors && Object.keys(_this.controls[key].errors).length > 0) {
                    // 将错误同步到界面展示的位置
                    // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息
                    _this.cardControls[key] = {
                        errors: __assign({}, _this.cardControls[key] && _this.cardControls[key].errors, _this.controls[key].errors)
                    };
                    isValid = false;
                }
            });
            // 处理只开启前端校验，未在BE上启用必填校验的情况
            if (this.cardControls) {
                Object.keys(this.cardControls).forEach(function (key) {
                    if (_this.cardControls[key] && _this.cardControls[key].errors) {
                        Object.keys(_this.cardControls[key].errors).forEach(function (validType) {
                            if (typeof _this.cardControls[key].errors[validType] !== 'object') {
                                // 获取对应的校验信息
                                var validateRules = _this.ngFormControls[key].validRules || [];
                                var rules = [].concat(validateRules);
                                var validateRule = rules.find(function (item) { return item.type === validType; });
                                if (validateRule) {
                                    validateRule.targetName = _this.formGroupName;
                                    var messageTemplate = ValidationTypes.getMessage(validType);
                                    var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');
                                    _this.cardControls[key].errors[key] = { value: _this.controls[key] && _this.controls[key].value || '', name: invalidMessage };
                                }
                            }
                        });
                    }
                });
            }
            Object.keys(this.cardControls).forEach(function (key) {
                if (_this.cardControls[key] && _this.cardControls[key].errors && Object.keys(_this.cardControls[key].errors).length > 0) {
                    isValid = false;
                }
            });
            return isValid;
        };
        /**
         * 更新表单错误信息
         * @param errors 错误消息
         */
        Form.prototype.updateFormErrors = function (errors, forceShow, from) {
            var _this = this;
            if (forceShow === void 0) {
                forceShow = false;
            }
            if (from === void 0) {
                from = '';
            }
            if (from && from === 'backend') {
                this.clearBackendError();
            }
            // 原来是否已经显示错误，如果已经显示了则增加，否则替换
            if (this.isShowValidationMsg === true || forceShow === true) {
                this.isShowValidationMsg = true;
                Object.keys(errors).forEach(function (key) {
                    if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {
                        // 如果控件本身没有错误，则直接使用外部传递过来的错误，否则合并错误
                        _this.cardControls[key] = {
                            errors: __assign({}, _this.cardControls[key] && _this.cardControls[key].errors, errors[key].errors)
                        };
                    }
                    else {
                        // 移除内存中的错误信息
                        _this.cardControls[key] = {
                            errors: {}
                        };
                        // 重置控件错误信息
                        _this.controls[key].setErrors(null);
                        _this.controls[key].markAsTouched();
                    }
                });
            }
        };
        /**
         * 清空后端消息
         */
        Form.prototype.clearBackendError = function () {
            var _this = this;
            Object.keys(this.cardControls).forEach(function (key) {
                var errors = _this.cardControls[key] && _this.cardControls[key].errors || null;
                if (errors) {
                    Object.keys(errors).forEach(function (errorType) {
                        if (errorType && errorType.startsWith('backend-message-')) {
                            delete errors[errorType];
                        }
                    });
                    if (errors && Object.keys(errors).length === 0) {
                        delete _this.cardControls[key].errors;
                    }
                }
                else {
                    _this.cardControls[key] = {};
                }
            });
        };
        /**
         * 根据实体属性获取ngFormControl
         * @param binding 控件绑定的实体属性名
         */
        Form.prototype.getngFormControlByBinding = function (binding) {
            return Object.values(this.ngFormControls).find(function (ngFormControl) { return ngFormControl.binding && ngFormControl.binding === binding; });
        };
        Form.prototype.disposeValidation = function () {
            var _this = this;
            var properties = this.constructor[PROP_METADATA];
            if (properties && Object.keys(properties).length > 0) {
                Object.keys(properties).forEach(function (key) {
                    var props = _this.constructor[PROP_METADATA][key];
                    if (props && props.length > 0) {
                        props.forEach(function (item) {
                            if (item.validRules && Array.isArray(item.validRules) && item.validRules.length > 0) {
                                item.validRules = item.validRules.filter(function (item) { return !(item.eval && typeof (item.eval) === 'function'); });
                            }
                        });
                    }
                });
            }
        };
        /**
         * 根据dom属性和校验类型获取错误信息
         * @param domProperty dom属性
         * @param validateRuleType 校验类型
         */
        Form.prototype.getErrorMessage = function (domProperty, validateRuleType) {
            var formControl = this.ngFormControls[domProperty];
            if (formControl) {
                var validRules = formControl.validRules;
                var rules = [];
                if (!Array.isArray(validRules)) {
                    rules.push(validRules);
                }
                else {
                    rules.push.apply(rules, __spread(validRules));
                }
                var rule = rules.find(function (item) { return item.type === validateRuleType; });
                if (rule) {
                    var controlName = formControl.name;
                    var messageTemplate = ValidationTypes.getMessage(validateRuleType);
                    var message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);
                    return message;
                }
                return null;
            }
            return null;
        };
        /**
         * 初始化Form
         * @param context 上下文
         */
        Form.prototype.init = function (bindingData, bindingPath, frameContext) {
            var _this = this;
            this.frameContext = frameContext;
            this.bindingData = bindingData;
            this.bindingPath = bindingPath;
            // 校验信息变化时重置卡片校验信息
            if (this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.verifycationChanged) {
                this.frameContext.viewModel.verifycationChanged.subscribe(function (verifycations) {
                    if (!verifycations || verifycations.length < 1) {
                        _this.resetCardValidMsg();
                    }
                });
            }
            this.buildForm();
            // @todo: 这种方式做key，如果脚本被压缩，存在风险
            Form.insMap[this.constructor.name] = this;
        };
        /**
         * 构造表单
         */
        Form.prototype.buildForm = function () {
            this.collectMetadatas();
            // this.createChildFormArrays();
            this.createChildForms();
            this.createControls();
        };
        /**
         * 重置表单验证信息
         */
        Form.prototype.resetCardValidMsg = function () {
            var _this = this;
            this.cardControls = {};
            // 剔除 列表中新增后取消,删除的项对应的control信息
            Object.keys(this.controlIdMap).forEach(function (id) {
                if (!_this.bindingData.getList().innerList.map(function (x) { return x.id; }).includes(id)) {
                    delete _this.controlIdMap[id];
                }
            });
            this.resetFormControls();
            this.setShowValidationMsg(false);
        };
        /**
         * 更新字段校验规则
         * @param propertyName 属性名
         * @param isRequired 是否必填
         */
        Form.prototype.updateFieldValidateRule = function (propertyName, isRequired) {
            var _this = this;
            if (!propertyName) {
                return;
            }
            var formControl = this.controls[propertyName];
            // 清空全部校验条件
            if (formControl) {
                formControl.clearValidators();
                formControl.markAsUntouched();
                formControl.markAsPristine();
                formControl.setErrors([]);
            }
            // 动态必填场景时生成器不再在formControl上生成必填规则
            // 因此validRules可能为空
            var ngFormControl = this.ngFormControls[propertyName];
            var validateRules = ngFormControl && ngFormControl.validRules || [];
            if (!Array.isArray(validateRules)) {
                validateRules = [validateRules];
            }
            var requiredRuleIndex = validateRules.findIndex(function (validateRule) { return validateRule.type === ValidationTypes.REQUIRED; });
            if (isRequired) {
                // 必填但控件没有必填规则，添加必填规则
                if (requiredRuleIndex == -1) {
                    var validateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };
                    // 扩展属性，以生成正确的错误提示
                    var displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';
                    validateRule.targetId = ngFormControl && ngFormControl.id || null;
                    validateRule.targetName = this.formGroupName;
                    validateRule.property = displayFieldName;
                    validateRule.field = ngFormControl && ngFormControl.binding;
                    validateRules.push(validateRule);
                }
            }
            else {
                // 非必填场景，如果有必填规则，移除
                if (requiredRuleIndex !== -1) {
                    validateRules.splice(requiredRuleIndex, 1);
                }
            }
            // 整理校验规则
            var validators = [];
            Array.prototype.forEach.call(validateRules, (function (ruleObj) {
                var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propertyName]);
                if (validateFn) {
                    validators.push(validateFn);
                }
            }));
            this.ngFormControls[propertyName].validRules = validateRules;
            this.controls[propertyName].setValidators(validators);
        };
        Form.prototype.addFieldValidateRule = function (propertyName, message, expressionId, ruleType) {
            var formControl = this.controls[propertyName];
            if (formControl) {
                // 清空全部校验条件
                formControl.setErrors(null);
            }
            var ngFormControl = this.ngFormControls[propertyName];
            var validateRules = this.ngFormControls[propertyName].validRules;
            if (!validateRules) {
                validateRules = [];
            }
            if (!Array.isArray(validateRules)) {
                validateRules = [validateRules];
            }
            var index = validateRules.findIndex(function (rule) { return rule && rule.expressionId === expressionId; });
            if (index !== -1) {
                validateRules.splice(index, 1);
            }
            var bindingPath = this.frameContext.viewModel.bindingPath;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            if (bindingPaths.length !== 0) {
                var prefix = bindingPaths.join('/');
                var binding = ngFormControl.binding || '';
                var property = binding.split('.').join('/');
            }
            var context = this.frameContext;
            var validateRule = {
                type: ruleType,
                message: message,
                expressionId: expressionId,
                constraints: [],
                bindingPath: bindingPaths.join('/'),
                eval: function (options) {
                    return context.viewModel.expression.validate(expressionId, options);
                }
            };
            validateRules.push(validateRule);
            this.ngFormControls[propertyName].validRules = validateRules;
            // if (this.ngFormControls[propertyName] && validateRules.length > 0) {
            //   const validators: ValidatorFn[] = [];
            //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {
            //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);
            //     if (validateFn) {
            //       validators.push(validateFn);
            //     }
            //   }));
            //   this.controls[propertyName].setValidators(validators);
            // }
        };
        /**
         * 根据规则对象生成validator
         * @param ruleObj: ValidateRule
         */
        Form.prototype.getValidatorByRuleObj = function (ruleObj, ngFormControl) {
            var _this = this;
            var type = ruleObj.type, _a = ruleObj.constraints, constraints = _a === void 0 ? [] : _a, _b = ruleObj.message, message = _b === void 0 ? null : _b;
            var displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';
            var ruleHandlerObj = {
                required: function (control) {
                    var value = control.value;
                    var isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';
                    var parentPaths = _this.bindingPath.split('/').filter(function (p) { return p; });
                    var controlPaths = ngFormControl.binding.split('.');
                    var paths = parentPaths.concat(controlPaths);
                    var propInfo = _this.getPropInfoByPath(paths);
                    var isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;
                    if (isMultiLangInput) {
                        var currentLanguage = TranslateService.getCurrentLanguage();
                        var currentLangValue = value && value[currentLanguage];
                        isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';
                    }
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);
                    var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    if (isValid && control.errors && control.errors.required) {
                        // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题
                        delete control.errors.required;
                        _this.isFormValid(paths.join('.'));
                    }
                    return isValid ? null : { required: { value: control.value, name: invalidMessage } };
                },
                maxLength: function (control) {
                    var isInValid = control.value && control.value.toString().length > constraints[0];
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                    var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;
                },
                minLength: function (control) {
                    var isInValid = control.value && control.value.toString().length < constraints[0];
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                    var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;
                },
                minValue: function (control) {
                    var isInValid = false;
                    var invalidMessage = '';
                    // 这里只做最小值判断，如果用户未输入则不应该做判断
                    if (control.value === null || control.value === undefined) {
                        return null;
                    }
                    if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                        isInValid = control.value < constraints[0];
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                        // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;
                    }
                    else if (ngFormControl && ngFormControl.bigNumber === true) {
                        // 大数
                        var minValue = new bignumber_js.BigNumber(constraints[0]);
                        var value = new bignumber_js.BigNumber(control.value);
                        isInValid = minValue.isGreaterThan(value);
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    }
                    else {
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);
                        // 假定为日期
                        // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或""，则不对比大小，无意义
                        if (!constraints || constraints.length < 1 || !constraints[0]) {
                            return null;
                        }
                        if (control.value instanceof Date) {
                            isInValid = control.value < dateFns.parseISO(constraints[0]);
                        }
                        else {
                            isInValid = dateFns.parseISO(control.value) < dateFns.parseISO(constraints[0]);
                        }
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    }
                    return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;
                },
                maxValue: function (control) {
                    var isInValid = false;
                    var invalidMessage = '';
                    if (control.value === null || control.value === undefined) {
                        return null;
                    }
                    if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                        isInValid = control.value > constraints[0];
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                        // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;
                    }
                    else if (ngFormControl && ngFormControl.bigNumber === true) {
                        // 大数
                        var maxValue = new bignumber_js.BigNumber(constraints[0]);
                        var value = new bignumber_js.BigNumber(control.value);
                        isInValid = maxValue.isLessThan(value);
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    }
                    else {
                        // 假定为日期
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);
                        if (control.value instanceof Date) {
                            isInValid = control.value > new Date(constraints[0]);
                            // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;
                        }
                        else {
                            isInValid = new Date(control.value) > new Date(constraints[0]);
                            // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;
                        }
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    }
                    return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;
                },
                exclude: function (control) {
                    var isValid = typeof control.value === 'string' && !_this.validatorJs.contains(control.value, constraints[0]);
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);
                    var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };
                },
                matches: function (control) {
                    var value = (control.value === null || control.value === undefined) ? '' : control.value.toString();
                    var isValid = value === '' ? true : _this.validatorJs.matches(value, constraints[0]);
                    var invalidMessage = message;
                    if (!invalidMessage) {
                        var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);
                        invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    }
                    return isValid ? null : { matches: { value: control.value, name: invalidMessage } };
                }
            };
            return ruleHandlerObj[type];
        };
        /**
         * 搜集属性装饰器
         */
        Form.prototype.collectMetadatas = function () {
            this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :
                MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM, this.translateService, ['formGroupName']);
            this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);
            this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);
        };
        Form.prototype.collectionFormControlMetadats = function (preloadMetadata) {
            var _this = this;
            if (preloadMetadata === void 0) {
                preloadMetadata = null;
            }
            var metadatas = preloadMetadata ? MetadataUtil.translateMetadatasByName(preloadMetadata, this.translateService, ['name']) :
                MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);
            // 向验证规则中附加表单信息，用于显示验证提示。
            if (metadatas) {
                Object.keys(metadatas).forEach(function (propName) {
                    var ngFormControl = metadatas[propName];
                    var displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';
                    var formControlId = ngFormControl.id;
                    if (Array.isArray(ngFormControl.validRules)) {
                        ngFormControl.validRules.forEach(function (validationRule) {
                            validationRule.targetId = formControlId;
                            validationRule.targetName = _this.formGroupName;
                            validationRule.property = displayFieldName;
                            validationRule.field = ngFormControl.binding;
                        });
                    }
                });
            }
            return metadatas;
        };
        // 获取grid中每条数据的formControl
        Form.prototype.getGridItemControl = function (propName, value) {
            var _this = this;
            var createControlFromRules = function (propertyName) {
                var validators = [];
                // 设置form中定义的验证规则
                if (_this.ngFormControls[propertyName] && Array.isArray(_this.ngFormControls[propertyName].validRules)) {
                    Array.prototype.forEach.call(_this.ngFormControls[propertyName].validRules, (function (ruleObj) {
                        var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propertyName]);
                        if (validateFn) {
                            validators.push(validateFn);
                        }
                    }));
                }
                return new forms.FormControl(value, { validators: validators, updateOn: 'blur' });
            };
            return createControlFromRules(propName);
        };
        // 根据实体属性名获取界面绑定的属性名
        Form.prototype.getDomPropertyNameByEntityProp = function (propertyName, prefix) {
            var _this = this;
            if (prefix === void 0) {
                prefix = '';
            }
            var domPropertyName = '';
            Object.keys(this.ngFormControls).forEach(function (key) {
                var binding = "" + prefix + _this.ngFormControls[key].binding;
                if (binding === propertyName) {
                    domPropertyName = key;
                }
            });
            return domPropertyName;
        };
        /**
         * 创建FormControl
         */
        Form.prototype.createControls = function () {
            var _this = this;
            Object.keys(this.ngFormControls).forEach(function (propName) {
                var ngFormControl = _this.ngFormControls[propName];
                var validators = [];
                // 设置form中定义的验证规则
                if (Array.isArray(_this.ngFormControls[propName].validRules)) {
                    Array.prototype.forEach.call(_this.ngFormControls[propName].validRules, (function (ruleObj) {
                        var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propName]);
                        if (validateFn) {
                            validators.push(validateFn);
                        }
                    }));
                }
                var updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';
                var control = new forms.FormControl(null, { validators: validators, updateOn: updateOn });
                if (ngFormControl.binding) {
                    _this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);
                }
                _this.controls[propName] = control;
                _this[propName] = control;
            });
        };
        /**
         * 创建FormGroup
         */
        Form.prototype.createChildForms = function () {
            var _this = this;
            Object.keys(this.ngChildForms).forEach(function (propName) {
                var ngFormGroup = _this.ngChildForms[propName];
                // 构造子Form
                var formGroup = new ngFormGroup.formType();
                formGroup.init(_this.bindingData, _this.bindingPath, _this.frameContext);
                _this.controls[propName] = formGroup;
                _this[propName] = formGroup;
            });
        };
        /*
        * 新增FormControls
         */
        Form.prototype.addControls = function (column, converter) {
            var updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';
            var formControl = new forms.FormControl('', { updateOn: updateOn });
            var fieldPath = column.dataField;
            // 日期格式  需要格式化
            // this.setUpBindingDataPipeline(formControl, fieldPath, converter);
            if (column.editor && column.editor.binding) {
                this.setUpBindingDataPipeline(formControl, fieldPath, converter);
                this.controls[column.editor.binding.path] = formControl;
                this[column.editor.binding.path] = formControl;
            }
        };
        /**
         * 搭建control和table之间的通道
         * @param control 控件
         * @param bindingFieldPath 绑定的字段名
         */
        Form.prototype.setUpBindingDataPipeline = function (control, bindingFieldPath, converter) {
            var _this = this;
            if (!this.bindingData) {
                throw Error('当前组件上下文中找不到BindingData，请检查！');
            }
            // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息
            // __FRAME_CONTEXT__ 未使用
            /*if (converter) {
              converter['__FRAME_CONTEXT__'] = this.frameContext;
            }*/
            // 将bindignPath与bindingFieldPath合并
            if (this.bindingPath.length > 1) {
                bindingFieldPath = this.bindingPath.substr(1).replace(/\//g, '.') + '.' + bindingFieldPath;
            }
            var bindingPaths = bindingFieldPath.split('.');
            var propertyName = bindingPaths[bindingPaths.length - 1];
            // 设置初始值
            var initValue = this.getValueFromBindingData(bindingPaths, converter);
            control.setValue(initValue);
            // 设置初始值
            // BindingData => control
            this.bindingData.changes.pipe(operators.takeUntil(this.destroy$)).pipe(operators.filter(function (change) {
                var bindingObject = _this.bindingData.getObject();
                var changePath = change.path.join('.');
                if (change.isUdt) {
                    return changePath === bindingFieldPath;
                }
                if (change.type === exports.ChangeType.ValueChanged) {
                    // path完全匹配
                    return changePath === bindingFieldPath;
                }
                else if (change.type === exports.ChangeType.Load || change.type === exports.ChangeType.SelectionChanged || change.type === exports.ChangeType.Remove || change.type === exports.ChangeType.Update) {
                    // 对于ObjectChanged、SelectionChanged，匹配到父级
                    var changePathWithDot = changePath === '' ? changePath : changePath + '.';
                    // 主表新增或切换时，重置错误信息
                    if (change && change.type === exports.ChangeType.Load) {
                        _this.resetCardValidMsg();
                    }
                    return bindingFieldPath.indexOf(changePathWithDot) === 0;
                }
                else if (change.type === exports.ChangeType.UpdateErrors) {
                    if (changePath === bindingFieldPath) {
                        _this.cardControls[propertyName] = _this.cardControls[propertyName] || {};
                        if (bindingFieldPath && _this.controls[propertyName]) {
                            if (bindingObject.primaryKeyValue === change.id) {
                                _this.cardControls[propertyName].errors = change.errors;
                            }
                        }
                        // 没有错误时
                        if (!change.path || !bindingFieldPath || !change.errors) {
                            _this.cardControls[propertyName].errors = null;
                            _this.isFormValid(bindingFieldPath);
                        }
                        return false;
                    }
                }
                else {
                    return false;
                }
            })).subscribe(function (change) {
                var fullEntityProp = propertyName;
                // udt字段展示时需要将父级属性名和自身属性名用'_'连接
                var pathPrefix = '';
                if (change.isUdt) {
                    if (change.isGrid) {
                        // grid 将从表主字段去除
                        change.path.shift();
                    }
                    if (change.path.length) {
                        pathPrefix = change.path.join('.');
                    }
                    fullEntityProp = pathPrefix;
                }
                var value = _this.bindingData.getValue(bindingPaths, false);
                var newControlValue = converter ? converter.convertFrom(value) : value;
                // 设置FormControl
                var domPropName = _this.getDomPropertyNameByEntityProp(fullEntityProp);
                _this.cardControls[domPropName] = _this.cardControls[domPropName] || {};
                if (change.errors) {
                    _this.cardControls[domPropName].errors = change.errors;
                }
                // dataGrid保存时，根据id，创建formControl，并设置错误对象
                if (change.id) {
                    if (_this.controlIdMap[change.id] && Object.keys(_this.controlIdMap[change.id]).length === 0) {
                        _this.controlIdMap[change.id] = {};
                    }
                    _this.controlIdMap[change.id] = _this.controlIdMap[change.id] || {};
                    if (change.errors) {
                        _this.controlIdMap[change.id][domPropName] = {
                            errors: change.errors
                        };
                    }
                }
                // 如果和控件上的值一样，则不再更新控件的值
                if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {
                    return;
                }
                // 正则判断是否为日期
                control.setValue(newControlValue);
            });
            // control => BindingData
            control.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (value) {
                var oldBindingValue = _this.bindingData.getValue(bindingPaths);
                // 如果是日期，比较年月日是否相等，相等则不重新赋值
                if (value && value.constructor && value.constructor.name === 'Date') {
                    var isValidDate = !isNaN(value);
                    if (!isValidDate) {
                        return;
                    }
                    if (oldBindingValue && converter) {
                        var oldValue = converter.convertFrom(oldBindingValue);
                        if (_this.compareDate(value, oldValue) === true) {
                            return;
                        }
                    }
                }
                // 如果是日期，比较年月日是否相等，相等则不重新赋值
                if (_this.isDate(converter) === true) {
                    if (DateUtil.isEqual(value, oldBindingValue) === true) {
                        return;
                    }
                }
                // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData
                var newBindingValue = converter ? converter.convertTo(value) : value;
                if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {
                    return;
                }
                // if (!this.isFormValid(propertyName, null, null, false)) {
                //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};
                //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);
                // } else {
                _this.clearBackEndMessages(propertyName);
                var emitEventToView = _this.frameContext.appContext.runMode === exports.RunMode.highSpeed;
                _this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: _this.frameContext });
                //}
            });
        };
        /**
         * 判断是否是日期字段
         * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；
         * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；
         * 3、不能使用constructor.name,压缩后name变了；
         * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况
         * @todo
         * 为日期字段添加注解，根据注解来判断
         */
        Form.prototype.isDate = function (converter) {
            var isDateConverter = false;
            // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {
            //   isDateConverter = true;
            // }
            if (converter && converter.hasOwnProperty('format') === true) {
                isDateConverter = true;
            }
            return isDateConverter;
        };
        /**
         * 比较日期（只比较年月日）
         */
        Form.prototype.compareDate = function (srcDate, dstDate) {
            if (!srcDate || !dstDate) {
                return srcDate === dstDate;
            }
            var isEqual = srcDate.getFullYear() === dstDate.getFullYear()
                && srcDate.getMonth() === dstDate.getMonth()
                && srcDate.getDate() === dstDate.getDate()
                && srcDate.getHours() === dstDate.getHours()
                && srcDate.getMinutes() === dstDate.getMinutes()
                && srcDate.getSeconds() === dstDate.getSeconds();
            return isEqual;
        };
        Form.prototype.getPropInfoByPath = function (path) {
            var entityType = this.frameContext && this.frameContext.repository.entityType || null;
            if (entityType) {
                var dataTypeInfo = new DataTypeInfo(entityType);
                var propInfo = dataTypeInfo.getPropInfoByPath(path);
                return propInfo;
                // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;
            }
            return null;
        };
        /**
         * 从BindingData中获取指定路径的值
         */
        Form.prototype.getValueFromBindingData = function (bindingPaths, converter) {
            var value = this.bindingData.getValue(bindingPaths);
            var converteredValue = converter ? converter.convertFrom(value) : value;
            return converteredValue;
        };
        Form.prototype.getEntityValueChangingListeners = function () {
            var _this = this;
            var listeners = {};
            Object.keys(this.ngFormControls).forEach(function (propName) {
                var ngFormControl = _this.ngFormControls[propName];
                if (ngFormControl.valueChanging) {
                    listeners[ngFormControl.binding] = ngFormControl.valueChanging;
                }
            });
            return listeners;
        };
        Form.prototype.getEntityValueChangedListeners = function () {
            var _this = this;
            var listeners = {};
            Object.keys(this.ngFormControls).forEach(function (propName) {
                var ngFormControl = _this.ngFormControls[propName];
                if (ngFormControl.valueChanged) {
                    listeners[ngFormControl.binding] = ngFormControl.valueChanged;
                }
            });
            return listeners;
        };
        /**
         * 获取所有的前端验证规则
         * @description
         * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔
         */
        Form.prototype.getValidationRules = function () {
            var _this = this;
            var validatoinRules = new Map();
            var parentPath = this.bindingPath;
            if (parentPath.length && parentPath === '/') {
                parentPath = '';
            }
            Object.keys(this.ngFormControls).forEach(function (propName) {
                // const fieldName = `${parentPath}/${propName}`;
                if (_this.isShowPropMap[propName] === true || Object.keys(_this.isShowPropMap).length === 0) {
                    var ngFormControl_1 = _this.ngFormControls[propName];
                    var displayFieldName_1 = ngFormControl_1.name || ngFormControl_1.defaultI18nValue || '';
                    var bindingPathArray = ngFormControl_1.binding ? ngFormControl_1.binding.split('.') : [propName];
                    var fieldNameArray = __spread([parentPath], bindingPathArray);
                    var fieldName_1 = fieldNameArray.join('/');
                    if (Array.isArray(ngFormControl_1.validRules) && ngFormControl_1.validRules.length > 0) {
                        var validationrulesToAdd = __spread(ngFormControl_1.validRules);
                        // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {
                        //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));
                        // }
                        validationrulesToAdd.forEach(function (validationRule) {
                            validationRule.targetId = ngFormControl_1.id;
                            validationRule.targetName = _this.formGroupName;
                            validationRule.property = displayFieldName_1;
                            validationRule.field = ngFormControl_1.binding;
                            validationRule.fullPath = fieldName_1;
                            if (_this.frameContext) {
                                validationRule.frameContext = _this.frameContext;
                            }
                        });
                        validatoinRules.set(fieldName_1, validationrulesToAdd);
                    }
                    else {
                        validatoinRules.set(fieldName_1, [{
                                type: 'setDisplayInfo',
                                targetId: ngFormControl_1.id,
                                targetName: _this.formGroupName,
                                property: displayFieldName_1,
                                fullPath: fieldName_1,
                                frameContext: _this.frameContext
                            }]);
                    }
                }
            });
            return validatoinRules;
        };
        Form.prototype.setTranslateService = function (translateService) {
            if (!translateService) {
                return;
            }
            this.translate = translateService;
            ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());
        };
        /**
         * 重置控件状态
         */
        Form.prototype.resetFormControls = function () {
            var _this = this;
            if (Object.keys(this.controls).length > 0) {
                Object.keys(this.controls).forEach(function (prop) {
                    var formControl = _this.controls[prop];
                    formControl.markAsUntouched();
                    formControl.markAsPristine();
                });
            }
        };
        Form.prototype.clearBackEndMessages = function (domPropertyName) {
            var _this = this;
            if (domPropertyName) {
                if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(function (item) { return item.startsWith('message-'); })) {
                    var messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(function (item) { return item.startsWith('message-'); });
                    var errors_1 = __assign({}, this.cardControls[domPropertyName]['errors']);
                    messageKeys.forEach(function (key) { return delete errors_1[key]; });
                    this.cardControls[domPropertyName] = { errors: errors_1 };
                }
            }
            else {
                Object.keys(this.cardControls).forEach(function (propertyName) {
                    if (_this.cardControls[propertyName] && _this.cardControls[propertyName]['errors'] && !!Object.keys(_this.cardControls[propertyName]['errors']).find(function (item) { return item.startsWith('message-'); })) {
                        var messageKeys = Object.keys(_this.cardControls[propertyName]['errors']).filter(function (item) { return item.startsWith('message-'); });
                        var errors_2 = __assign({}, _this.cardControls[propertyName]['errors']);
                        messageKeys.forEach(function (key) { return delete errors_2[key]; });
                        _this.cardControls[propertyName] = { errors: errors_2 };
                    }
                });
            }
        };
        /**
         * 存放所有实例的映射
         */
        Form.insMap = {};
        Form.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Form.ctorParameters = function () { return []; };
        return Form;
    }(forms.FormGroup));

    /**
     * 实体操作工具类
     */
    var EntityUtil = /** @class */ (function () {
        function EntityUtil() {
        }
        /**
         * 将entity的数据加载到bindingObject中，并保持两者同步。
         * @param entity        实体对象
         * @param bindingObject 绑定对象
         */
        EntityUtil.loadEntity = function (entity, bindingObject) {
            var _this = this;
            // 遍历bindingObject的properties进行赋值
            bindingObject.properties.forEach(function (property) {
                var propertyName = property.name;
                if (property.type === exports.BindingPropertyType.List) {
                    _this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);
                }
                else if (property.type === exports.BindingPropertyType.Object) {
                    if (entity && entity[propertyName] && _this.isEffectiveField(entity, propertyName)) {
                        _this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                    }
                }
                else if (property.type === exports.BindingPropertyType.Dynamic) {
                    if (entity && entity[propertyName]) {
                        var dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);
                        BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);
                        _this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                    }
                }
                else {
                    if (_this.isEffectiveField(entity, propertyName)) {
                        var value = entity[propertyName];
                        bindingObject.setValue(propertyName, value, false, false);
                    }
                }
            });
            this.setUpEntityPipeline(entity, bindingObject);
        };
        /**
         * 建立entity和bindingObject之间的关联
         * @param entity        实体对象
         * @param bindingObject 绑定对象
         */
        EntityUtil.setUpEntityPipeline = function (entity, bindingObject) {
            if (!entity || !bindingObject) {
                return;
            }
            // 监听entity变更
            entity.onValueChanged.pipe(operators.takeUntil(entity.unsubscribe)).subscribe(function (modification) {
                if (modification.type !== exports.ModifyType.ValueChange || modification.path.length === 0 || modification.fromParent === true) {
                    return;
                }
                var propertyName = modification.path[modification.path.length - 1];
                var primaryKeyPath = modification.path[modification.path.length - 2];
                // 验证主键是否匹配
                // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）
                if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {
                    var primaryKey = bindingObject.primaryKey;
                    var primaryKeyValue = bindingObject.getValue(primaryKey);
                    if (primaryKeyPath !== primaryKey + ":" + primaryKeyValue) {
                        return;
                    }
                }
                // TODO:修复动态列不触发变更的问题，临时方案，应该有单独的dynamicBindingObject类
                if (modification.dynamic) {
                    if (bindingObject['__original__']) {
                        return;
                    }
                    var value_1 = modification.value;
                    var target_1 = bindingObject[propertyName];
                    if (!target_1) {
                        return;
                    }
                    Object.keys(value_1).forEach(function (key) {
                        if (target_1.getValue(key) === value_1[key]) {
                            return;
                        }
                        target_1.setValue(key, value_1[key], true, false);
                    });
                }
                else {
                    // 值没有发生变化，不再设置
                    // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环
                    if (bindingObject.getValue(propertyName) === modification.value) {
                        return;
                    }
                    bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);
                }
            });
            // 监听bindingObject变更
            bindingObject.viewChanges.pipe(operators.takeUntil(bindingObject.unsubscribe)).subscribe(function (viewChange) {
                var value = viewChange.value;
                var propertyName = viewChange.path[0];
                var pathPrefix = '';
                var pathData = entity.getPaths();
                var paths = pathData.path;
                var id = bindingObject['id'];
                bindingObject['__original__'] = true;
                // if (pathData.isUdt) {
                // grid中udt没有id，从父级中取出id，以便存放验证信息
                var getParentId = function (target) {
                    var parentId = '';
                    var findId = function (item) {
                        if (item && item && item['id']) {
                            parentId = item['id'];
                            return;
                        }
                        else if (item['parent']) {
                            findId(item['parent']);
                        }
                    };
                    findId(target);
                    return parentId;
                };
                id = getParentId(bindingObject);
                // if (pathData.isGrid) {
                //   // grid 将从表主字段去除
                //   paths.pop();
                // }
                if (paths.length) {
                    pathPrefix = paths.join('.') + '.';
                }
                // }
                var controlProp = pathPrefix + propertyName;
                // 调用实体验证，并将错误信息合并到formControl上
                var entityValidate = function (callback) {
                    var enableValidate = Object.values(Form.insMap).find(function (item) { return item && item.enableValidate; });
                    if (!enableValidate) {
                        if (typeof callback === 'function') {
                            callback(null);
                        }
                        return;
                    }
                    entity.validateFromUtilSync(propertyName, value, function (result) {
                        var _a;
                        var errorObj = {};
                        if (result.errors && result.errors.length > 0) {
                            result.errors.forEach(function (error) {
                                if (error.constraints) {
                                    Object.keys(error.constraints).forEach(function (key) {
                                        errorObj[key] = {
                                            value: value,
                                            name: error.constraints[key],
                                            error: error
                                        };
                                    });
                                }
                            });
                        }
                        // 先设置实体验证信息，再设置form验证信息，然后在form.isFormValid内部整合实体验证form验证信息
                        Form.updateErrors(controlProp, errorObj, id, value, pathData.isGrid);
                        var formErrors = viewChange['errors'] || {};
                        var mergedErrors = Object.assign({}, formErrors, errorObj);
                        var validateError = null;
                        if (Object.keys(mergedErrors).length > 0) {
                            validateError = (_a = {}, _a[propertyName] = mergedErrors, _a);
                        }
                        if (typeof (callback) === 'function') {
                            callback(validateError);
                        }
                    }, viewChange.context);
                };
                // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）
                // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）
                if (bindingObject.primaryKey) {
                    var primaryKey = bindingObject.primaryKey;
                    if (propertyName !== primaryKey) {
                        if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {
                            entityValidate();
                            return;
                        }
                    }
                    else if (entity[propertyName] !== value) {
                        // todo: 因异步校验未结束实体主键没有被赋值，导致实体其他属性无法赋值，待后续前端校验重构时去掉
                        entity[propertyName] = value;
                        entityValidate();
                        return;
                    }
                }
                // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
                if (entity[propertyName] === value) {
                    entityValidate();
                    return;
                }
                // 调用表单验证,通过后调用实体验证
                // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动
                entityValidate(function (errors) {
                    entity.errors = errors;
                    entity[propertyName] = value;
                });
            });
        };
        /**
         * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。
         * @param entityList  实体列表
         * @param bindingList 绑定列表
         */
        EntityUtil.loadEntityList = function (entityList, bindingList) {
            this.loadEntities(entityList.items, bindingList);
            this.setUpEntityListPipeline(entityList, bindingList);
        };
        /**
         * 建立entityList和bindingList之间的关联
         * @param entityList  实体列表
         * @param bindingList 绑定列表
         */
        EntityUtil.setUpEntityListPipeline = function (entityList, bindingList) {
            var _this = this;
            entityList.onListChanged.subscribe(function (modification) {
                var target = modification['target'];
                if (target && target !== entityList) {
                    return;
                }
                switch (modification.type) {
                    // 添加实体
                    case exports.ModifyType.Add:
                    case exports.ModifyType.Clone:
                        {
                            var entitiesToAdd = modification.value;
                            if (entitiesToAdd.length === 0) {
                                return;
                            }
                            // 检查父id是否一致，冒泡导致的变更不处理
                            var paths_1 = modification.path;
                            var parentPath_1 = paths_1[paths_1.length - 2];
                            var parentId_1 = bindingList.parent.primaryKeyValue;
                            if (parentPath_1.indexOf(parentId_1) === -1) {
                                return;
                            }
                            _this.appendEntities(modification.value, bindingList, modification.type === exports.ModifyType.Clone);
                        }
                        break;
                    case exports.ModifyType.Insert:
                        {
                            // 检查父id是否一致，冒泡导致的变更不处理
                            var paths_2 = modification.path;
                            var parentPath_2 = paths_2[paths_2.length - 2];
                            var parentId_2 = bindingList.parent.primaryKeyValue;
                            var position = modification.position;
                            if (parentPath_2.indexOf(parentId_2) === -1) {
                                return;
                            }
                            _this.insertEntity(modification.value[0], bindingList, position);
                        }
                        break;
                    // 删除实体
                    case exports.ModifyType.Remove:
                        {
                            // 检查父id是否一致，冒泡导致的变更不处理
                            var paths_3 = modification.path;
                            var parentPath_3 = paths_3[paths_3.length - 2];
                            var parentId_3 = bindingList.parent.primaryKeyValue;
                            if (parentPath_3.indexOf(parentId_3) === -1) {
                                return;
                            }
                            // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）
                            var id = modification.value[bindingList.primaryKey];
                            bindingList.removeByIds([id]);
                            // this.removeEntities(<Entity[]>modification.value, bindingList);
                        }
                        break;
                    // 加载实体
                    case exports.ModifyType.Load:
                        // 检查父id是否一致，冒泡导致的变更不处理
                        var paths = modification.path;
                        var parentPath = paths[paths.length - 2];
                        var parentId = bindingList.parent.primaryKeyValue;
                        if (parentPath.indexOf(parentId) === -1) {
                            return;
                        }
                        var entities = modification.value;
                        _this.loadEntities(entities, bindingList);
                        break;
                    default:
                        break;
                }
            });
        };
        /**
         * 监听repository变化，保持repository和bindingList同步。
         * @param repository  实体仓库
         * @param bindingList 绑定列表
         */
        EntityUtil.loadRepository = function (repository, bindingList) {
            var _this = this;
            // 初次加载
            var entities = Array.from(repository.entityCollection.toArray());
            this.loadEntities(entities, bindingList);
            // 监听变化
            repository.entityCollectionChange.pipe(operators.takeUntil(repository.destroy$)).subscribe(function (modification) {
                switch (modification.type) {
                    case exports.ModifyType.Load:
                        bindingList.clear(true);
                        _this.loadEntities(modification.value, bindingList, modification.entityCreate);
                        break;
                    case exports.ModifyType.Add:
                    case exports.ModifyType.Clone:
                        _this.appendEntities(modification.value, bindingList, modification.type === exports.ModifyType.Clone, { isTreeNodeLoadScene: modification.isTreeNodeLoadScene });
                        break;
                    case exports.ModifyType.AddData:
                        _this.addData(modification.value, bindingList, { isTreeNodeLoadScene: modification.isTreeNodeLoadScene });
                        break;
                    case exports.ModifyType.Insert:
                        _this.insertEntity(modification.value, bindingList, modification.position);
                        break;
                    case exports.ModifyType.Remove:
                        _this.removeEntities(modification.value, bindingList);
                        break;
                    case exports.ModifyType.RemoveData:
                        _this.removeData(modification.value, bindingList);
                        break;
                    case exports.ModifyType.PaginationInfoChange:
                        // 分页信息无需同步到bindingList，放到bindingData即可。保留此处只是为了兼容产品部可能使用bindingList上分页信息的场景
                        bindingList.paginationInfo = modification.value;
                        break;
                    default:
                        break;
                }
            });
            // 监听BindingList数据变化
            bindingList.changes.pipe(operators.takeUntil(bindingList.destroy$)).subscribe(function (change) {
                if (change.type === exports.ChangeType.PaginationInfoChange) {
                    var entityCollection = repository.entityCollection;
                    // const entityTypeName = entityCollection.entityTypeName;
                    // const original = entityCollection.paginationInfo[entityTypeName];
                    // const entityPaginationInfo = Object.assign({}, original, change.value);
                    entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);
                }
            });
        };
        /**
         * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中
         * @param entities    实体数组
         * @param bindingList 绑定列表
         */
        EntityUtil.loadEntities = function (entities, bindingList, entityCreate) {
            if (entityCreate === void 0) {
                entityCreate = false;
            }
            var bindingObjects = this.createBindingObjects(entities, bindingList);
            bindingList.load(bindingObjects, entityCreate);
        };
        /**
         * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中
         * @param entities    实体数组
         * @param bindingList 绑定列表
         * @param isCloned 是否克隆数据
         * @param options 上下文
         */
        EntityUtil.appendEntities = function (entities, bindingList, isCloned, options) {
            if (isCloned === void 0) {
                isCloned = false;
            }
            if (options === void 0) {
                options = null;
            }
            var bindingObjects = this.createBindingObjects(entities, bindingList);
            bindingList.append(bindingObjects, isCloned, options);
        };
        /**
         * 是否是有效的字段
         * @param entity 实体
         * @param propertyName 字段
         * @returns
         */
        EntityUtil.isEffectiveField = function (entity, propertyName) {
            if (!entity || !propertyName) {
                return false;
            }
            propertyName = propertyName.toLowerCase();
            if (entity['__farris_effective_fields__']) {
                return entity['__farris_effective_fields__'].includes(propertyName);
            }
            if (entity['farris_effective_fields'] && typeof entity['farris_effective_fields'] === 'string') {
                var effectiveFields = entity['farris_effective_fields'].split(',').filter(function (p) { return p; }).map(function (item) { return item.toLowerCase(); });
                entity['__farris_effective_fields__'] = effectiveFields;
                return effectiveFields.includes(propertyName);
            }
            return true;
        };
        /**
         * 增加实体数据（不切换当前行）
         * @param entities
         * @param bindingList
         */
        EntityUtil.addData = function (entities, bindingList, options) {
            if (options === void 0) {
                options = null;
            }
            var bindingObjects = this.createBindingObjects(entities, bindingList);
            bindingList.addData(bindingObjects, options);
        };
        EntityUtil.insertEntity = function (entity, bindingList, position) {
            var bindingObject = this.createBindingObject(entity, bindingList);
            bindingList.insert(bindingObject, position);
        };
        /**
         * 从bindingList移除entities对应的BindingObject对象
         * @param entities    实体数组
         * @param bindingList 绑定列表
         */
        EntityUtil.removeEntities = function (entities, bindingList) {
            if (entities === null || entities.length === 0) {
                return;
            }
            // 归集要删除的id数组
            var primaryKey = bindingList.primaryKey;
            var ids = [];
            entities.forEach(function (entity) {
                ids.push(entity[primaryKey]);
            });
            bindingList.removeByIds(ids);
        };
        EntityUtil.removeData = function (entities, bindingList) {
            if (entities === null || entities.length === 0) {
                return;
            }
            // 归集要删除的id数组
            var primaryKey = bindingList.primaryKey;
            var ids = [];
            entities.forEach(function (entity) {
                ids.push(entity[primaryKey]);
            });
            bindingList.removeDataByIds(ids);
        };
        /**
         * 将entities中的Entity对象转换为BindingObject对象
         * @param entities    实体数组
         * @param bindingList 绑定列表
         */
        EntityUtil.createBindingObjects = function (entities, bindingList) {
            var _this = this;
            if (entities === null || entities.length === 0) {
                return [];
            }
            var bindingObjects = [];
            entities.forEach(function (entity) {
                var bindingObject = BindingObjectFactory.create(bindingList.properties, true);
                // bindingObject['_ENTITY_'] = entity;
                _this.loadEntity(entity, bindingObject);
                // // 为bindingObject设置默认值initialData属性
                // if (entity['initialData']) {
                //   bindingObject['initialData'] = entity['initialData'];
                // }
                bindingObjects.push(bindingObject);
            });
            return bindingObjects;
        };
        EntityUtil.createBindingObject = function (entity, bindingList) {
            var bindingObject = BindingObjectFactory.create(bindingList.properties, true);
            this.loadEntity(entity, bindingObject);
            return bindingObject;
        };
        EntityUtil.watchReposiroty = function (repository, bindingData) {
            // reposiroty => bindingData
            repository.entityCollectionChange.subscribe(function (modification) {
                switch (modification.type) {
                    case exports.ModifyType.PaginationInfoChange:
                        bindingData.pagingInfo = modification.value;
                        break;
                    default:
                        break;
                }
            });
        };
        /**
         * 查找属性的类型
         * @param entityType 实体类型
         * @param targetPropName 属性名称
         * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）
         */
        EntityUtil.getPropInfo = function (entityType, targetPropName) {
            var propType;
            var propEntityType;
            // NgField
            var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
            Object.keys(ngFieldProperties).forEach(function (propName) {
                if (propName === targetPropName) {
                    propType = 'NgField';
                    propEntityType = null;
                }
            });
            // NgObject
            var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
            Object.keys(ngObjectProperties).forEach(function (propName) {
                if (propName === targetPropName) {
                    propType = 'NgObject';
                    propEntityType = ngObjectProperties[propName].type;
                }
            });
            // NgList
            var ngListProperties = FieldMetadataUtil.getNgList(entityType);
            Object.keys(ngListProperties).forEach(function (propName) {
                if (propName === targetPropName) {
                    propType = 'NgList';
                    propEntityType = ngListProperties[propName].type;
                }
            });
            var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
            Object.keys(ngDynamicProperties).forEach(function (propName) {
                if (propName === targetPropName) {
                    propType = 'NgDynamic';
                    propEntityType = ngDynamicProperties[propName].type;
                }
            });
            return { propType: propType, propEntityType: propEntityType };
        };
        /**
         * 获取实体的主键名
         * @param entityType 实体类型
         */
        EntityUtil.getPrimaryKey = function (entityType) {
            var primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
            if (primaryNgFiledProp) {
                return primaryNgFiledProp.dataField;
            }
            else {
                return '';
            }
        };
        /**
         * 是否为对象属性
         */
        EntityUtil.isObjectProp = function (entityType, targetPropName) {
            var isObjectProp = false;
            var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
            Object.keys(ngObjectProperties).forEach(function (propName) {
                if (propName === targetPropName) {
                    isObjectProp = true;
                }
            });
            return isObjectProp;
        };
        /**
         * 检查是否是动态列属性
         */
        EntityUtil.isDynamicProp = function (entityType, targetPropName) {
            var isDynamicProp = false;
            var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
            Object.keys(ngDynamicProperties).forEach(function (propName) {
                if (propName === targetPropName) {
                    isDynamicProp = true;
                }
            });
            return isDynamicProp;
        };
        /**
         * 为实体增加initialData属性
         * @param entity 实体实例
         * @param initialData 默认值对象
         */
        EntityUtil.appendInitialData = function (entity, initialData) {
            var data = Object.assign({}, initialData);
            delete data.id;
            delete data.parentID;
            entity['initialData'] = data;
        };
        return EntityUtil;
    }());

    // tslint:disable: max-line-length member-ordering
    /**
     * 绑定数据
     * @description
     * # BindingData
     *
     * BindingData用于直接和界面绑定，它持有一个不可变的数据集合（BindingList），数据集合中是一个个不可变的数据对象（BindingObject）。
     *
     * ## 更新界面数据
     *
     * ### 接口定义
     *
     * ```javascript
     * //根据paths设置属性值
     * //@param paths 属性路径数组
     * //@param value 属性值
     * //@param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。
     * //@param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。
     * public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true)
     * ```
     *
     * ### 示例
     *
     * - 更新主表数据
     *
     *   ```javascript
     *   bindingData.setValue(['name'],'ESG');
     *   ```
     *
     * - 更新子表数据
     *
     *   ```javascript
     *   bindingData.setValue(['soItems','price'],20);
     *   ```
     *
     * - 更新业务字段数据
     *
     *   ```javascript
     *   bindingData.setValue(['udt','udt_field'],'value');
     *   ```
     *
     * - 仅更新界面数据（不提交变更集）
     *
     *   ```javascript
     *   bindingData.setValue(['name'],'ESG',true,false);
     *   ```
     *
     *   > 注意：
     *   >
     *   > 仅更新界面数据时bindingData必须是对应组件上下文的bindingData。
     *   >
     *   > 更新数据的命令挂载到不同的组件，产生的效果也不相同。如果命令挂到了卡片视图模型，那么可以直接在构件中注入`FrameContext`或`BindingData`并更新数据就可以。但如果命令挂到了非卡片视图 * 模型，则应该先获取到卡片上下文的bindingData。
     *   >
     *   > - 命令挂在卡片视图模型:
     *   >
     *   >   ```javascript
     *   >   const frameContext = this.frameContext.bindingData;
     *   >   frameContext.bindingData.setValue(['name'],'ESG');
     *   >   ```
     *   >
     *   > - 命令挂在非卡片视图模型：
     *   >
     *   >   ```javascript
     *   >   const cardFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('card-frameId');
     *   >   cardFrameContext.bindingData.setValue(['name'],'ESG');
     *   >   ```
     *
     * ## 获取界面数据
     *
     * ### 接口定义
     *
     *   ```javascript
     *   //获取paths对应的属性值
     *   //@param  paths 属性路径数组
     *   //@returns 属性值
     *   public getValue(paths: string[], useInitValue = false)
     *   ```
     *
     * ### 示例
     *
     * - 获取主表数据
     *
     *   ```javascript
     *   bindingData.getValue(['name']) //'ESG'
     *   ```
     *
     * - 获取从表中字段属性
     *
     *   ```javascript
     *   bindingData.getValue(['soItems','price']); // 20
     *   ```
     *
     * - 获取业务字段数据
     *
     *   ```javascript
     *   bindingData.getValue(['udt','udt_field']); // 'value'
     *   ```
     *
     * ## 获取指定BindingObject
     *
     * ### 接口定义
     *
     * ```javascript
     * //通过主键获取对应的bindingObject
     * bindingData.list.findById(id: string): BindingObject;
     * ```
     *
     * ### 示例
     * - 获取某个主实体
     *   ```javascript
     *   bindingData.list.findById("id");
     *   ```
     * - 获取某个实体下子表的所有数据
     *   ```javascript
     *   // 获取主实体
     *   const bindingObject = bindingData.list.findById("id") as BindingObject;
     *   // 获取该实体下的某个子表数据
     *   const bindingList = bindingObject.getValue("soItems") as BindingList;
     *   ```
     *
     * - 获取子表某一行数据
     *
     *   ```javascript
     *   //获取主实体
     *   const bindingObject = bindingData.list.findById("id") as BindingObject;
     *   //获取该实体下的某个子表数据
     *   const bindingList = bindingObject.getValue("soItems") as BindingList;
     *   //子表行数据
     *   const childrenBindingObject = bindingList.findById('子表数据id');
     *   const name = childrenBindingObject.getValue("name"); // 或者childrenBindingObject['name']
     *   ```
     *
     * ## 常见问题
     *
     * ### 赋值或取值时为何不用指定主键？
     *
     *    示例中取值或赋值时并没有指定主键值，这是由于BindingData赋值或取值时都是对当前行就行操作的，所以不需要指定主键。所以在计算&行切换场景下会导致取值或赋值错误，如本来想给第一行的某个字 * 段赋值，结果由于行切换导致把值赋给了其他行。
     *
     *    如果遇到赋值错误的情况可以通过BindingObject赋值或取值。
     *
     * ### 通过bindingData赋值了，界面也刷新了，但保存不上
     *
     *    这种情况多发生在有后端请求的情况下，比如通过bindingData赋值后紧接着有一个后端请求。由于bindingData赋值是异步的（目前是），这就可能导致赋值还没有结束（还没有产生变更）请求就发送 * 了，从而请求中没有对应的变更，请求回来后会默认清空本地变更，从而导致界面上显示数据已经修改，但数据库中数据并未修改。
     *
     *    解决该类问题可以通过实体赋值的方式，给实体赋值是同步的，赋值完成后变更就会产生，这样再发送请求时就可以把变更带到后端。
     */
    var BindingData = /** @class */ (function () {
        function BindingData() {
            this.paginationInfo = null;
        }
        Object.defineProperty(BindingData.prototype, "pagingInfo", {
            get: function () {
                return this.paginationInfo;
            },
            set: function (pagingInfo) {
                this.paginationInfo = pagingInfo;
                this.firePagingChangeEvent();
            },
            enumerable: true,
            configurable: true
        });
        BindingData.prototype.dispose = function (options) {
            this.list.dispose();
        };
        BindingData.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        /**
         * 设置分页信息
         * @param skip 跳过
         * @param take 获取
         * @param bindingPath 路径
         */
        BindingData.prototype.setPagingInfo = function (skip, take, bindingPath) {
            if (bindingPath.length < 1 || bindingPath === '/') {
                this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });
            }
            else {
                var pagingInfo = this.paginationInfo || {};
                var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }); // .map(item => item.substring(0, item.length - 1));
                var nodeCode = bindingPaths[bindingPaths.length - 1];
                // 去s
                nodeCode = nodeCode.substr(0, nodeCode.length - 1);
                // 找到父级
                // 获取当前实体上级的主键
                var paths = bindingPaths.slice(0, bindingPaths.length - 1);
                var parentObject = this.getValue(paths);
                if (parentObject && parentObject[parentObject.primaryKey]) {
                    // const key = `${nodeCode}_${parentObject[parentObject.primaryKey]}`;
                    var key = "" + nodeCode;
                    pagingInfo = pagingInfo[key] || {};
                    pagingInfo.pageIndex = ((skip / take) || 0) + 1;
                    pagingInfo.pageSize = take || 0;
                }
            }
            this.firePagingChangeEvent();
        };
        BindingData.prototype.updatePagingInfo = function (pageInfo, bindingPath) {
            if (bindingPath.length < 1 || bindingPath === '/') {
                this.paginationInfo = Object.assign(this.paginationInfo, pageInfo);
            }
            else {
                var pagingInfo = this.paginationInfo || {};
                var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }); // .map(item => item.substring(0, item.length - 1));
                var nodeCode = bindingPaths[bindingPaths.length - 1];
                // 去s
                nodeCode = nodeCode.substr(0, nodeCode.length - 1);
                pagingInfo[nodeCode] = Object.assign(pagingInfo[nodeCode], pageInfo);
            }
            this.firePagingChangeEvent();
        };
        BindingData.prototype.firePagingChangeEvent = function () {
            this.list.changes.next({
                type: exports.ChangeType.PaginationInfoChange,
                path: this.bindingPath && this.bindingPath.split('/').filter(function (p) { return p; }) || [],
                value: this.paginationInfo
            });
        };
        Object.defineProperty(BindingData.prototype, "changes", {
            /**
             * 变更集
             */
            get: function () {
                return this.list.changes;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置值变化执行器工厂
         * @param value 值变化执行器工厂
         */
        BindingData.prototype.setValueChangeInvokerFactory = function (value) {
            this.valueChangeInvokerFactory = value;
        };
        BindingData.prototype.getValudChangeInvokerFactory = function () {
            return this.valueChangeInvokerFactory;
        };
        /**
         * 初始化（已废弃）
         */
        BindingData.prototype.init = function (repository, bindingPath) {
            this.initByRepository(repository, bindingPath);
        };
        /**
         * 根据Repository对BindingData进行初始化
         */
        BindingData.prototype.initByRepository = function (repository, bindingPath) {
            this.bindingPath = bindingPath;
            this.properties = PropertyUtil.getProperties(repository.entityType);
            this.list = BindingListFactory.create(this.properties);
            // 从repository初始化bindingData
            this.pagingInfo = repository.entityCollection.paginationInfo;
            // @todo
            // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边
            EntityUtil.loadRepository(repository, this.list);
            this.dataTypeInfo = repository.entityTypeInfo;
            this.extendProperties(this.properties);
        };
        /**
         * 初始化
         */
        BindingData.prototype.initByBindingList = function (bindingList, bindingPath) {
            this.list = bindingList;
            this.bindingPath = bindingPath;
            this.extendProperties(this.list.properties);
        };
        BindingData.prototype.setDataTypeInfo = function (dataTypeInfo) {
            this.dataTypeInfo = dataTypeInfo;
        };
        /**
         * 获取界面数据
         * @param paths 属性路径数组
         * @param useInitValue 是否使用默认值，默认为`false`
         * @returns 属性值
         */
        BindingData.prototype.getValue = function (paths, useInitValue) {
            if (useInitValue === void 0) {
                useInitValue = false;
            }
            var target = this.list;
            paths.forEach(function (path) {
                if (target) {
                    target = target[path];
                }
            });
            if (useInitValue === true && paths && paths.length > 0) {
                var initValue = this.getInitValueByPaths(paths);
                if (target === undefined && target !== initValue) {
                    target = initValue;
                }
            }
            return target;
        };
        /**
         * 该方法可以更新绑定层数据，从而达到更新界面数据的目的，进而更新本地仓库实体数据，产生变更，下次请求时会将变更带到后端并更新后端数据。
         * @param paths 属性路径数组
         * @param value 属性值
         * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。
         * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。
         * @description
         * ## 示例
         *
         * ### 更新界面数据
         * 使用该方法时只传递path和value参数，其余参数使用默认值。该用法会更新界面数据，同时更新实体数据，实体数据更新时会产生变更，这样在下次请求时会将该变更带到后端，
         * 进而更新后端数据。
         * ```typescript
         * this.frameContext.bindingData.setValue(paths,value);
         * ```
         *
         * ### 仅更新界面数据
         * 有些场景下我们希望只更新界面的数据，不希望对后端数据产生影响，此时除传递paths和value参数外，还需要将emitEventToView设为true，emitEventToEntity设为false，
         * 此时必须使用对应BindingData的setValue方法：
         * ```typescript
         * const tableFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');
         * tableFrameContext.bindingData.setValue(paths,value,true,false);
         * ```
         * ## 注意事项
         * setValue为异步方法，如果调用该方法后随即发送后端请求，此时实体变更尚未产生，但请求已经发送，变更无法带到后端，导致变更丢失，出现界面上显示数据已经修改，
         * 但后端并未修改的问题。
         * 因此，如果赋值后随即发送请求应该使用实体赋值的方法。
         */
        BindingData.prototype.setValue = function (paths, value, emitEventToView, emitEventToEntity, errors, context) {
            if (emitEventToView === void 0) {
                emitEventToView = false;
            }
            if (emitEventToEntity === void 0) {
                emitEventToEntity = true;
            }
            if (errors === void 0) {
                errors = {};
            }
            if (!paths || paths.length === 0) {
                throw Error('路径不能为空');
            }
            var parentPaths = paths.slice(0, paths.length - 1);
            var propName = paths[paths.length - 1];
            var parent = this.getValue(parentPaths);
            if (!parent) {
                throw Error('找不到要设置的对象');
            }
            if (parent instanceof BindingData) {
                parent = parent.list.currentItem;
            }
            else if (parent instanceof BindingList) {
                parent = parent.currentItem;
            }
            if (!!this.valueChangeInvokerFactory) {
                parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, this.valueChangeInvokerFactory(paths), context);
            }
            else {
                parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, null, context);
            }
        };
        /**
         * 根据paths清空属性值
         */
        BindingData.prototype.clearValue = function (paths, emitEventToView, emitEventToEntity, context) {
            if (emitEventToView === void 0) {
                emitEventToView = false;
            }
            if (emitEventToEntity === void 0) {
                emitEventToEntity = true;
            }
            var initValue;
            var propInfo = this.dataTypeInfo.getPropInfoByPath(paths);
            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {
                initValue = propInfo.metadataInfo.initValue;
            }
            else {
                // 原来的帮助映射中，强行纠正了数值的情况，保持一致
                var oldValue = this.getValue(paths);
                if (typeof oldValue === 'number') {
                    initValue = 0;
                }
                else {
                    initValue = '';
                }
            }
            this.setValue(paths, initValue, emitEventToView, emitEventToEntity, null, context);
        };
        /**
         * 获取当前列表
         */
        BindingData.prototype.getList = function () {
            if (!this.bindingPath || this.bindingPath === '/') {
                return this.list;
            }
            var bindingPath = this.bindingPath.substr(1);
            var bindingPathArray = bindingPath.split('/').filter(function (part) {
                return part !== '';
            });
            return this.getValue(bindingPathArray);
        };
        /**
         * 获取当前对象
         */
        BindingData.prototype.getObject = function () {
            var bindingList = this.getList();
            return bindingList.currentItem;
        };
        /**
         * 绑定路径（仅路径部分，不包括属性）
         * @param bindingPath 绑定路径
         */
        BindingData.prototype.getPath = function (bindingPath) {
            var _this = this;
            var bindingPaths = bindingPath.filter(function (p) { return p; });
            var path = [this.list.primaryKey + ":" + this.list.currentId];
            bindingPaths.forEach(function (item) {
                path.push(item);
                var list = _this[item];
                if (list) {
                    path.push(list.primaryKey + ":" + list.currentId);
                }
            });
            return path;
        };
        /**
         * 清空绑定数据
         */
        BindingData.prototype.reset = function () {
            this.list.clear(true);
        };
        /**
         * 通过绑定路径获取属性初始值
         * @param paths 绑定路径
         */
        BindingData.prototype.getInitValueByPaths = function (paths) {
            var initValue;
            var propInfo = this.dataTypeInfo && this.dataTypeInfo.getPropInfoByPath(paths) || null;
            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {
                initValue = propInfo.metadataInfo.initValue;
            }
            return initValue;
        };
        /**
         * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。
         * @param properties 关联实体的属性集合
         */
        BindingData.prototype.extendProperties = function (properties) {
            var _this = this;
            properties.forEach(function (property) {
                var propName = property.name;
                Object.defineProperty(_this, propName, {
                    get: function () {
                        return _this.list.currentItem[propName];
                    },
                    set: function (value) {
                        _this.list.currentItem[propName] = value;
                    }
                });
            });
        };
        BindingData.decorators = [
            { type: core.Injectable }
        ];
        return BindingData;
    }());

    (function (Compare) {
        /**
         * 等于
         */
        Compare[Compare["Equal"] = 0] = "Equal";
        /**
         * 不等于
         */
        Compare[Compare["NotEqual"] = 1] = "NotEqual";
        /**
         * 大于
         */
        Compare[Compare["Greater"] = 2] = "Greater";
        /**
         * 大于等于
         */
        Compare[Compare["GreaterOrEqual"] = 3] = "GreaterOrEqual";
        /**
         * 小于
         */
        Compare[Compare["Less"] = 4] = "Less";
        /**
         * 小于等于
         */
        Compare[Compare["LessOrEqual"] = 5] = "LessOrEqual";
        /**
         * 包含
         */
        Compare[Compare["Like"] = 6] = "Like";
        /**
         * 不包含
         */
        Compare[Compare["NotLike"] = 9] = "NotLike";
        Compare[Compare["In"] = 14] = "In";
        /**
         * 为空
         */
        Compare[Compare["Empty"] = 1001] = "Empty";
        /**
         * 不为空
         */
        Compare[Compare["NotEmpty"] = 1002] = "NotEmpty";
    })(exports.Compare || (exports.Compare = {}));
    (function (FilterRelation) {
        FilterRelation[FilterRelation["Empty"] = 0] = "Empty";
        /**
         * 并且
         */
        FilterRelation[FilterRelation["And"] = 1] = "And";
        /**
         * 或者
         */
        FilterRelation[FilterRelation["Or"] = 2] = "Or";
    })(exports.FilterRelation || (exports.FilterRelation = {}));
    (function (ExpressValueType) {
        /**
         * 值
         */
        ExpressValueType[ExpressValueType["Value"] = 0] = "Value";
        /**
         * 表达式
         */
        ExpressValueType[ExpressValueType["Expression"] = 1] = "Expression";
        /**
         * 前端表达式
         */
        ExpressValueType["FrontExpress"] = "frontExpress";
    })(exports.ExpressValueType || (exports.ExpressValueType = {}));
    var LeftBracket = [
        '', '(', '((', '((('
    ];
    var RighttBracket = [
        '', ')', '))', ')))'
    ];

    var DataFilter = /** @class */ (function () {
        function DataFilter() {
        }
        DataFilter.prototype.getCurrentLanguage = function () {
            return window.localStorage.getItem('languageCode') || 'zh-CHS';
        };
        DataFilter.prototype.getCompareResult = function (fieldDataValue, operator, targetValue) {
            var op = parseInt('' + operator, 10);
            switch (op) {
                case exports.Compare.Equal:
                    return fieldDataValue == targetValue;
                case exports.Compare.NotEqual:
                    return ('' + fieldDataValue).toLowerCase() !== ('' + targetValue).toLowerCase();
                case exports.Compare.Greater:
                    return fieldDataValue > targetValue;
                case exports.Compare.GreaterOrEqual:
                    return fieldDataValue >= targetValue;
                case exports.Compare.Less:
                    return fieldDataValue < targetValue;
                case exports.Compare.LessOrEqual:
                    return fieldDataValue <= targetValue;
                case exports.Compare.Like:
                    return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) > -1;
                case exports.Compare.NotLike:
                    return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) === -1;
                case exports.Compare.In:
                    targetValue = targetValue || [];
                    return targetValue.findIndex(function (n) { return n == fieldDataValue; }) > -1;
                case 1001: // Empty
                    return fieldDataValue === '' || fieldDataValue === null;
                case 1002: // NotEmpty
                    return fieldDataValue !== '' && fieldDataValue !== null;
                case 1003: // Null
                    return fieldDataValue === null;
                case 1004: // NotNull
                    return fieldDataValue !== null;
            }
        };
        DataFilter.prototype.getValue = function (object, propertyName) {
            return propertyName.split('.').filter(function (p) { return p; }).reduce(function (result, property) {
                if (result) {
                    return result[property] === undefined ? null : result[property];
                }
                else {
                    return null;
                }
            }, object);
        };
        DataFilter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DataFilter.ctorParameters = function () { return []; };
        return DataFilter;
    }());

    var ArrayFilterConditionDataFilter = /** @class */ (function (_super) {
        __extends(ArrayFilterConditionDataFilter, _super);
        function ArrayFilterConditionDataFilter() {
            return _super.call(this) || this;
        }
        ArrayFilterConditionDataFilter.prototype.filter = function (data, conditions) {
            var _this = this;
            if (data && data.size) {
                return data.filter(function (n) { return _this.validateRowData(n, conditions); });
            }
            return data;
        };
        ArrayFilterConditionDataFilter.prototype.validateRowData = function (bindingObject, conditions) {
            if (!conditions || conditions.length === 0) {
                return true;
            }
            return this.checkRowDataWithCondition(bindingObject, conditions);
        };
        ArrayFilterConditionDataFilter.prototype.checkRowDataWithCondition = function (bindingObject, conditions) {
            var _this = this;
            var resultObj = null;
            if (conditions) {
                resultObj = {};
                conditions.forEach(function (condition) {
                    var field = condition.FilterField;
                    var fieldValue = _this.getValue(bindingObject, field);
                    var bindingProperty = bindingObject.properties.find(function (item) { return item.name === field; });
                    if (bindingProperty && bindingProperty.enableMultiLangInput && fieldValue) {
                        fieldValue = fieldValue[_this.getCurrentLanguage()];
                    }
                    var where = condition;
                    var Value = where.Value, operator1 = where.Compare;
                    if (where) {
                        var r = _this.getCompareResult(fieldValue, operator1, Value);
                        if (resultObj[field] === undefined) {
                            resultObj[field] = [r];
                        }
                        else {
                            resultObj[field].push(r);
                        }
                    }
                });
            }
            // return this.checkAllFieldResult(resultObj);
            var fields = Object.keys(resultObj);
            var result = [];
            fields.forEach(function (f) {
                var _filters = conditions.filter(function (n) { return n.FilterField === f; });
                if (resultObj[f].length === 1) {
                    result.push(resultObj[f][0]);
                }
                else {
                    if (_filters[0].Relation === 1 && resultObj[f].length === 2) { // and
                        result.push(resultObj[f][0] && resultObj[f][1]);
                    }
                    else { // or
                        result.push(resultObj[f].indexOf(true) > -1);
                    }
                }
            });
            return result.indexOf(false) === -1;
        };
        ArrayFilterConditionDataFilter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ArrayFilterConditionDataFilter.ctorParameters = function () { return []; };
        return ArrayFilterConditionDataFilter;
    }(DataFilter));

    var ObjectFilterConditionDataFilter = /** @class */ (function (_super) {
        __extends(ObjectFilterConditionDataFilter, _super);
        function ObjectFilterConditionDataFilter() {
            return _super.call(this) || this;
        }
        ObjectFilterConditionDataFilter.prototype.filter = function (data, conditions) {
            var _this = this;
            if (data && data.size) {
                return data.filter(function (row) { return _this.validateRowData(row, conditions); });
            }
            return data;
        };
        ObjectFilterConditionDataFilter.prototype.validateRowData = function (bindingObject, conditions) {
            if (!conditions || Object.keys(conditions).length === 0) {
                return true;
            }
            return this.checkAllFieldInRowData(bindingObject, conditions);
        };
        ObjectFilterConditionDataFilter.prototype.checkAllFieldInRowData = function (bindingObject, conditions) {
            var _this = this;
            var resultObj = null;
            var currentLanguage = this.getCurrentLanguage();
            if (conditions) {
                var fields = Object.keys(conditions);
                resultObj = {};
                fields.forEach(function (field) {
                    var fieldValue = _this.getValue(bindingObject, field);
                    var property = bindingObject.properties.find(function (item) { return item.name === field; });
                    if (property && property.enableMultiLangInput && fieldValue) {
                        fieldValue = fieldValue[currentLanguage];
                    }
                    var where = conditions[field];
                    var value1 = where.value1, operator1 = where.operator1, relation = where.relation, operator2 = where.operator2, value2 = where.value2;
                    if (where) {
                        var result = _this.getCompareResult(fieldValue, operator1, value1);
                        resultObj[field] = result;
                        if (relation) {
                            var result2 = _this.getCompareResult(fieldValue, operator2, value2);
                            resultObj[field] = _this.getRelationResult(result, relation, result2);
                        }
                    }
                });
            }
            return this.checkAllFieldResult(resultObj);
        };
        ObjectFilterConditionDataFilter.prototype.getRelationResult = function (result1, relation, result2) {
            var _relation = relation.toLowerCase();
            if (_relation === 'and') {
                return result1 && result2;
            }
            else {
                return result1 || result2;
            }
        };
        ObjectFilterConditionDataFilter.prototype.checkAllFieldResult = function (resultObj) {
            if (!resultObj) {
                return true;
            }
            return Object.values(resultObj).reduce(function (c, n) {
                return c && n;
            }, true);
        };
        ObjectFilterConditionDataFilter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ObjectFilterConditionDataFilter.ctorParameters = function () { return []; };
        return ObjectFilterConditionDataFilter;
    }(DataFilter));

    /**
     * 绑定列表相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * BindingList是一个BindingObject集合
     */
    var BindingList = /** @class */ (function () {
        /**
         * 构造函数
         */
        function BindingList(properties) {
            this.__type__ = 'BindingList';
            this.sortFields = [];
            this.sortDirections = [];
            /**
             * 界面数据源
             */
            this.defaultView = null;
            // #region 分页相关
            /**
             * 分页信息
             */
            this._paginationInfo = null;
            this.properties = properties;
            this.primaryKey = PropertyUtil.getPrimaryKey(properties);
            this.changes = new rxjs.Subject();
            this.innerList = immutable.List();
            this.currentId = null;
            this.destroy$ = new rxjs.Subject();
            this.updateDefaultView(this.changes);
        }
        Object.defineProperty(BindingList.prototype, "paginationInfo", {
            get: function () {
                return this._paginationInfo;
            },
            set: function (sPaginationInfo) {
                this._paginationInfo = sPaginationInfo;
                if (this._paginationInfo === sPaginationInfo) {
                    return;
                }
                this.changes.next({
                    type: exports.ChangeType.PaginationInfoChange,
                    path: [],
                    value: this._paginationInfo
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingList.prototype, "pageIndex", {
            /**
             * 获取页码
             */
            get: function () {
                if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageIndex")) {
                    return this.paginationInfo.pageIndex;
                }
                return 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingList.prototype, "pageSize", {
            /**
             * 获取分页大小
             */
            get: function () {
                if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageSize")) {
                    return this.paginationInfo.pageSize;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingList.prototype, "total", {
            /**
             * 获取数据总项数
             */
            get: function () {
                if (!!this.paginationInfo) {
                    return this.paginationInfo.total || this.paginationInfo.totalCount;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingList.prototype, "skip", {
            /**
             * 获取跳过的数据条数
             */
            get: function () {
                var pageIndex = this.pageIndex;
                var pageSize = this.pageSize;
                return (pageIndex - 1) * pageSize;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 前台设置分页信息
         * @param skip skip
         * @param take take
         */
        BindingList.prototype.setPaginationInfo = function (skip, take) {
            this.paginationInfo = Object.assign({}, this.paginationInfo, {
                pageSize: take,
                pageIndex: skip / take + 1
            });
            /*this.changes.next({
              type: ChangeType.PaginationInfoChange,
              path: [],
              value: this.paginationInfo
            });*/
        };
        Object.defineProperty(BindingList.prototype, "currentItem", {
            //#endregion
            /**
             * 当前行对应的绑定对象
             * 如果currentId为null，则创建一个空结构，防止绑定报错；
             */
            get: function () {
                var currentItem = this.findById(this.currentId);
                if (!currentItem) {
                    if (!this.emptyCurrentItem) {
                        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);
                    }
                    return this.emptyCurrentItem;
                }
                return currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingList.prototype, "length", {
            /**
             * 绑定对象的数量
             */
            get: function () {
                return this.innerList.count();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 销毁
         * @param options
         */
        BindingList.prototype.dispose = function (options) {
            this.clear(true);
            if (this.destroy$) {
                this.destroy$.next();
                this.destroy$.complete();
                this.destroy$ = null;
            }
        };
        /**
         * 添加[Symbol.iterator]，使之能通过for of遍历
         */
        BindingList.prototype[Symbol.iterator] = function () {
            var self = this;
            var index = -1;
            var size = this.innerList.size;
            return {
                next: function () {
                    index++;
                    if (index < size) {
                        return { done: false, value: self.innerList.get(index) };
                    }
                    return { done: true, value: undefined };
                }
            };
        };
        /**
         * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。
         * @param objects 要加载绑定对象数组
         */
        BindingList.prototype.load = function (objects, entityCreate) {
            var _this = this;
            if (entityCreate === void 0) {
                entityCreate = false;
            }
            // 重置列表
            this.innerList = this.innerList.clear();
            if (objects.length !== 0) {
                // 加载数据
                objects.forEach(function (object) {
                    _this.add(object);
                });
                // 设置默认当前行
                var currentItem = this.findById(this.currentId);
                if (!currentItem) {
                    var firstId = objects[0][this.primaryKey];
                    this.setCurrentId(firstId, false, false);
                }
            }
            else {
                this.currentId = null;
            }
            var change = {
                type: exports.ChangeType.Load,
                path: [],
                value: objects
            };
            change.create = entityCreate;
            // 触发事件
            this.changes.next(change);
        };
        /**
         * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。
         * @param objects 要加载绑定对象数组
         */
        BindingList.prototype.append = function (objects, isCloned, options) {
            var _this = this;
            if (isCloned === void 0) {
                isCloned = false;
            }
            if (options === void 0) {
                options = null;
            }
            if (objects.length === 0) {
                return;
            }
            // 加载BindingObject
            objects.forEach(function (object) {
                _this.add(object);
            });
            // 当前行为新追加的最后1行
            var lastId = objects[objects.length - 1][this.primaryKey];
            this.setCurrentId(lastId, true, true);
            // 触发事件
            var change = {
                type: exports.ChangeType.Append,
                path: [],
                value: objects,
                isTreeNodeLoadScene: options && options.isTreeNodeLoadScene
            };
            if (isCloned) {
                change.isCloned = true;
            }
            this.changes.next(change);
        };
        /**
         * 增加数据
         * @param objects 实体
         * @param options 上下文
         * @description 增加实体数据，但不切换当前行
         */
        BindingList.prototype.addData = function (objects, options) {
            var _this = this;
            if (options === void 0) {
                options = null;
            }
            if (objects.length === 0) {
                return;
            }
            // 加载BindingObject
            objects.forEach(function (object) {
                _this.add(object);
            });
            // 触发事件
            this.changes.next({
                type: exports.ChangeType.Append,
                path: [],
                value: objects,
                isTreeNodeLoadScene: options && options.isTreeNodeLoadScene
            });
        };
        BindingList.prototype.insert = function (object, position) {
            var _this = this;
            var currentIndex = this.innerList.findIndex(function (obj) { return obj.primaryKeyValue === _this.currentId; });
            // 加载BindingObject
            if (position === 1) {
                this.innerList = this.innerList.insert(currentIndex + 1, object);
            }
            else if (position === -1) {
                this.innerList = this.innerList.insert(currentIndex, object);
            }
            else {
                this.innerList = this.innerList.push(object);
            }
            object.parent = this;
            // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
            object.changes.subscribe(function (change) {
                _this.changes.next(change);
            });
            this.setCurrentId(object.primaryKeyValue, true, true);
            // 触发事件
            this.changes.next({
                type: exports.ChangeType.Append,
                path: [],
                value: object,
                detail: {
                    type: 'insert',
                    position: position
                }
            });
        };
        /**
         * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。
         * @param object 绑定对象
         */
        BindingList.prototype.add = function (object) {
            var _this = this;
            this.innerList = this.innerList.push(object);
            object.parent = this;
            // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
            object.changes.subscribe(function (change) {
                _this.changes.next(change);
            });
        };
        /**
         * 删除主键值数组对应的绑定对象。
         * @param ids 主键值数组
         */
        BindingList.prototype.removeByIds = function (ids) {
            var _this = this;
            if (!ids || ids.length === 0) {
                return;
            }
            var nextCurrentId = this.currentId;
            ids.forEach(function (id) {
                // 如果当前行被删除，计算下一当前行
                if (id === nextCurrentId) {
                    nextCurrentId = _this.getCurrentIdBeforeDeleting();
                }
                // 删除对象，找不到时跳过
                var index = _this.getIndexById(id);
                if (index === -1) {
                    return;
                }
                _this.innerList = _this.innerList.delete(index);
            });
            // 重新设置当前行
            if (this.innerList.count() === 0) {
                this.currentId = null;
            }
            else {
                this.setCurrentId(nextCurrentId, false, false);
            }
            // 出发行删除事件
            this.changes.next({
                type: exports.ChangeType.Remove,
                path: [],
                value: ids
            });
        };
        /**
         * 删除数据（不切换当前行）
         * @param ids ids
         */
        BindingList.prototype.removeDataByIds = function (ids) {
            var _this = this;
            if (!ids || ids.length === 0) {
                return;
            }
            ids.forEach(function (id) {
                // 删除对象，找不到时跳过
                var index = _this.getIndexById(id);
                if (index === -1) {
                    return;
                }
                _this.innerList = _this.innerList.delete(index);
            });
            // 出发行删除事件
            this.changes.next({
                type: exports.ChangeType.Remove,
                path: [],
                value: ids
            });
        };
        /**
         * 清空
         */
        BindingList.prototype.clear = function (clearOnly) {
            if (clearOnly === void 0) {
                clearOnly = false;
            }
            this.innerList.forEach(function (item) {
                item['_ENTITY_'] = null;
                item.unsubscribe.next();
                item.unsubscribe.complete();
                item.changes.complete();
                item.viewChanges.complete();
            });
            this.innerList = this.innerList.clear();
            if (!clearOnly) {
                this.currentId = null;
                this.changes.next({
                    type: exports.ChangeType.Remove,
                    path: [],
                    value: []
                });
            }
        };
        /**
         * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。
         * - 如果被删除的行是最后1行，则上移1行；
         * - 其他情况，下移1行。
         */
        BindingList.prototype.getCurrentIdBeforeDeleting = function () {
            var nextIndex = -1;
            var currentIndex = this.getIndexById(this.currentId);
            if (currentIndex === this.length - 1) {
                nextIndex = currentIndex - 1;
            }
            else {
                nextIndex = currentIndex + 1;
            }
            return this.getIdByIndex(nextIndex);
        };
        /**
         * 根据主键值获取对应绑定对象
         * @param   id 要查找的主键值
         * @returns 找到时返回对应BindingObject， 找不到时返回null
         */
        BindingList.prototype.findById = function (id) {
            var _this = this;
            var target;
            target = this.innerList.find(function (item) {
                return item.getValue(_this.primaryKey) === id;
            });
            return target === undefined ? null : target;
        };
        /**
         * 将主键值为id的绑定对象设置为当前行
         * @param  id        要设置的主键值
         * @param  emitEvent 是否发送当前行变更事件
         * @param  force 强制切换
         */
        BindingList.prototype.setCurrentId = function (id, emitEvent, emitGlobalEvent, force) {
            if (emitEvent === void 0) {
                emitEvent = true;
            }
            if (emitGlobalEvent === void 0) {
                emitGlobalEvent = true;
            }
            if (force === void 0) {
                force = false;
            }
            if (this.currentId === id && !force) {
                return;
            }
            // 不存在时设置为null
            // const currentObj = this.findById(id);
            // if (!currentObj) {
            //   this.currentId = null;
            // } else {
            //   this.currentId = id;
            // }
            // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。
            var currentObj = this.findById(id);
            if (!currentObj && !force) {
                return;
            }
            this.currentId = id;
            // 发出行切换事件
            if (emitEvent === true) {
                this.changes.next({
                    type: exports.ChangeType.SelectionChanged,
                    path: [],
                    value: this.currentItem,
                    force: force
                });
            }
            // 是否发送全局的行切换事件
            if (emitGlobalEvent === true) {
                this.changes.next({
                    type: exports.ChangeType.GlobalSelectionChanged,
                    path: [],
                    value: this.currentItem,
                    force: force
                });
            }
        };
        /**
         * 根据主键值为id的绑定对象的索引
         * @param id 主键值
         * @returns 找到时返回对应的index，找不到时返回-1
         */
        BindingList.prototype.getIndexById = function (id) {
            var _this = this;
            return this.innerList.findIndex(function (obj) {
                return obj[_this.primaryKey] === id;
            });
        };
        /**
         * 根据索引位置获取对应绑定对象的主键值
         * @reutrn 找到时返回对应主键值，找不到返回null
         */
        BindingList.prototype.getIdByIndex = function (index) {
            if (index < 0 || index > this.length) {
                return null;
            }
            if (this.innerList.has(index) === false) {
                return null;
            }
            var obj = this.innerList.get(index);
            return obj[this.primaryKey];
        };
        /**
         * 转换为BindingObject数组
         */
        BindingList.prototype.toArray = function () {
            return this.innerList.toArray();
        };
        /**
         * 交互数据位置
         * @param id1 id1
         * @param id2 id2
         */
        BindingList.prototype.swapById = function (id1, id2) {
            var item1 = this.innerList.find(function (element) { return element.primaryKeyValue === id1; });
            var item2 = this.innerList.find(function (element) { return element.primaryKeyValue === id2; });
            this.innerList = this.innerList.map(function (bindingObject, index) {
                if (bindingObject.primaryKeyValue === id1) {
                    return item2;
                }
                else if (bindingObject.primaryKeyValue === id2) {
                    return item1;
                }
                else
                    return bindingObject;
            }).toList();
            this.changes.next({
                type: exports.ChangeType.Swap,
                path: [],
                detail: {
                    type: 'swap',
                    id: [id1, id2]
                }
            });
        };
        /**
         * 转换为JSON对象
         * @param options 配置
         * @returns 普通对象数组
         */
        BindingList.prototype.toJSON = function (options) {
            var result = [];
            this.innerList.forEach(function (obj) {
                result.push(obj.toJSON(options));
            });
            return result;
        };
        /**
         * 过滤列表数据
         * @param conditions 过滤条件
         */
        BindingList.prototype.filter = function (conditions) {
            if (this.defaultView === null) {
                this.defaultView = this.innerList.toList();
            }
            var list;
            if (Array.isArray(conditions)) {
                var filter_1 = new ArrayFilterConditionDataFilter();
                list = this.defaultView.filter(function (bindingObject) {
                    return filter_1.validateRowData(bindingObject, conditions);
                }).toList();
            }
            else {
                var filter_2 = new ObjectFilterConditionDataFilter();
                list = this.defaultView.filter(function (bindingObject) {
                    return filter_2.validateRowData(bindingObject, conditions);
                }).toList();
            }
            // 如果有排序条件，则对过滤后的结果进行排序
            if (this.sortFields && this.sortFields.length > 0) {
                this.innerList = list.sort(this.comparator(this.sortFields, this.sortDirections)).toList();
            }
            else {
                this.innerList = list;
            }
        };
        /**
         * 获取分页信息
         * @param path 路径
         * @param defaultValue 默认值
         * @throws 路径必须为字符串！
         */
        BindingList.prototype.getPaginationConfigByPath = function (path, defaultValue) {
            if (!path || path === '/') {
                return this.paginationInfo;
            }
            if (typeof path !== 'string') {
                throw new Error('路径必须为字符串！');
            }
            path = path.substring(1);
            var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; }).map(function (item) { return item.trim(); });
            var config = this.paginationInfo;
            paths.forEach(function (item) {
                if (config && config.hasOwnProperty(item)) {
                    config = config[item];
                }
                else {
                    config = null;
                }
            });
            return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
        };
        /**
         * 对bindingList就行排序
         * @param fields - 排序字段
         * @param directions - 排序规则字段
         * @param options - 参数
         * @throws argument error
         */
        BindingList.prototype.sortBy = function (fields, directions, options) {
            if (!this.defaultView) {
                this.defaultView = this.innerList.toList();
            }
            // 默认升序
            var arrFields = typeof fields === 'string' ? fields.split(',').filter(function (p) { return p; }) : fields || [];
            var arrDirections = typeof directions === 'string' ? directions.split(',').filter(function (p) { return p; }) : directions || [];
            // 排序字段和排序方式应一致
            if (arrFields.length !== arrDirections.length) {
                throw new Error('sortBy:fields and directions not match');
            }
            this.sortFields = arrFields;
            this.sortDirections = arrDirections;
            if (!this.sortFields || this.sortFields.length < 1) {
                if (this.defaultView) {
                    this.innerList = this.defaultView.toList();
                    // 清空过滤条件后重置原始数据源
                    this.defaultView = null;
                }
            }
            else {
                this.innerList = this.innerList.sort(this.comparator(arrFields, arrDirections)).toList();
            }
        };
        BindingList.prototype.getValue = function (target, propName, isMultiLangProp, currentLanguage) {
            if (isMultiLangProp === void 0) {
                isMultiLangProp = false;
            }
            if (currentLanguage === void 0) {
                currentLanguage = 'zh-CHS';
            }
            var e_1, _a;
            if (target instanceof BindingList) {
                target = target.currentItem;
            }
            else if (target instanceof BindingData) {
                target = target.list.currentItem;
            }
            var result = null;
            if (propName.indexOf('.') === -1) {
                result = target[propName];
            }
            else {
                var props = propName.split('.');
                try {
                    for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                        var prop = props_1_1.value;
                        target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                            _a.call(props_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
            if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {
                return result[currentLanguage];
            }
            else {
                return result;
            }
        };
        /**
         * 排序器
         * @param props - 排序字段
         * @param orders - 排序规则
         * @returns
         */
        BindingList.prototype.comparator = function (props, orders) {
            var _this = this;
            return function (item1, item2) {
                return props.reduce(function (result, prop) {
                    if (result === 0) {
                        var bindingProperty = _this.properties.find(function (item) { return item.name === prop; });
                        var isMultiLangProp = false;
                        if (bindingProperty) {
                            isMultiLangProp = bindingProperty.enableMultiLangInput;
                        }
                        var currentLanguage = TranslateService.getCurrentLanguage();
                        var order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                        var item1Value = _this.getValue(item1, prop, isMultiLangProp, currentLanguage);
                        var item2Value = _this.getValue(item2, prop, isMultiLangProp, currentLanguage);
                        if (item1Value === null || item1Value === undefined) {
                            item1Value = '';
                        }
                        if (item2Value === null || item2Value === undefined) {
                            item2Value = '';
                        }
                        if (typeof item1Value === 'string' && typeof item2Value === 'string') {
                            var localeCompareResult = item1Value.localeCompare(item2Value);
                            result = localeCompareResult * order;
                        }
                        else {
                            if (item1Value > item2Value) {
                                result = order * 1;
                            }
                            if (item1Value < item2Value) {
                                result = order * -1;
                            }
                        }
                    }
                    return result;
                }, 0);
            };
        };
        BindingList.prototype.updateDefaultView = function (change) {
            var _this = this;
            change.pipe(operators.takeUntil(this.destroy$)).subscribe(function (change) {
                var _a;
                if (_this.defaultView !== null && ((change.path.length === 0 && [exports.ChangeType.Load, exports.ChangeType.Append, exports.ChangeType.Remove, exports.ChangeType.Swap].includes(change.type)) || (change.type === exports.ChangeType.ValueChanged && change.isBindingListTransmited !== true))) {
                    switch (change.type) {
                        case exports.ChangeType.Load:
                            _this.defaultView = _this.innerList.toList();
                            break;
                        case exports.ChangeType.Append: {
                            // 插入
                            if (change.detail && change.detail.type === 'insert') {
                                var position = change.detail.position;
                                var object = change.value;
                                var currentIndex = _this.innerList.findIndex(function (obj) { return obj.primaryKeyValue === _this.currentId; });
                                // 加载BindingObject
                                if (position === 1) {
                                    _this.defaultView = _this.defaultView.insert(currentIndex + 1, object);
                                }
                                else if (position === -1) {
                                    _this.defaultView = _this.defaultView.insert(currentIndex, object);
                                }
                                else {
                                    _this.defaultView = _this.defaultView.push(object);
                                }
                            }
                            else {
                                var objects = change.value;
                                _this.defaultView = (_a = _this.defaultView).push.apply(_a, __spread(objects));
                            }
                            break;
                        }
                        case exports.ChangeType.Remove:
                            var ids = change.value;
                            if (ids.length === 0) {
                                _this.defaultView = _this.defaultView.clear();
                            }
                            else {
                                ids.forEach(function (id) {
                                    var index = _this.defaultView.findIndex(function (bindingObject) { return bindingObject.primaryKeyValue === id; });
                                    _this.defaultView = _this.defaultView.delete(index);
                                });
                            }
                            break;
                        case exports.ChangeType.ValueChanged:
                            var id_1 = change.id;
                            var bindingObject = _this.defaultView.find(function (obj) { return obj.primaryKeyValue === id_1; });
                            var paths = change.path.concat([]);
                            var propertyName = paths.pop();
                            var target = paths.reduce(function (object, path) {
                                return object[path];
                            }, bindingObject);
                            if (target) {
                                target.setValue(propertyName, change.value);
                            }
                            break;
                        case exports.ChangeType.Swap:
                            var _b = __read(change.detail && change.detail.id, 2), id1_1 = _b[0], id2_1 = _b[1];
                            var item1_1 = _this.defaultView.find(function (element) { return element.primaryKeyValue === id1_1; });
                            var item2_1 = _this.defaultView.find(function (element) { return element.primaryKeyValue === id2_1; });
                            _this.defaultView = _this.defaultView.map(function (bindingObject, index) {
                                if (bindingObject.primaryKeyValue === id1_1) {
                                    return item2_1;
                                }
                                else if (bindingObject.primaryKeyValue === id2_1) {
                                    return item1_1;
                                }
                                else
                                    return bindingObject;
                            }).toList();
                            break;
                        // case ChangeType.SortChanged:
                        //   const { fields = [], directions = [] } = change.detail || {};
                        //   this.defaultView = this.defaultView.sort(this.comparator(fields, directions)).toList();
                        //   break;
                    }
                }
            });
        };
        return BindingList;
    }());

    /**
     * 绑定对象基类
     */
    var BaseBindingObject = /** @class */ (function () {
        // private __differ__ = this.differ();
        function BaseBindingObject() {
            this.__type__ = 'BindingObject';
            /**
             * 绑定到实体
             */
            this.fromEntity = undefined;
            /**
             * 标识是否提交过
             */
            this.isShowValidationMsg = false;
            /**
             * 销毁流
             */
            this.unsubscribe = new rxjs.Subject();
            /**
             * 以{ [propertyName]: FormControl }的形式存放每条数据的control
             */
            this.controlMap = {};
            this.innerValues = immutable.Map();
            this.changes = new rxjs.Subject();
            this.viewChanges = new rxjs.Subject();
        }
        Object.defineProperty(BaseBindingObject.prototype, "primaryKeyValue", {
            /**
             * 主键值
             */
            get: function () {
                return this.primaryKey ? this.getValue(this.primaryKey) : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseBindingObject.prototype, "rowPrimaryKeyValue", {
            /**
             * 数据行的主键值
             */
            get: function () {
                var row = this.getRow(this);
                return row && row.primaryKeyValue || null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置是否提交过
         */
        BaseBindingObject.prototype.setShowValidationMsg = function (flag) {
            this.isShowValidationMsg = flag;
        };
        // public abstract load(data: any);
        /**
         * 根据属性名获取属性值
         * @param   propertyName 属性名
         * @returns 属性值
         */
        BaseBindingObject.prototype.getValue = function (propertyName) {
            return this.innerValues.get(propertyName);
        };
        /**
         * 设置属性值
         * @param propertyName        属性名
         * @param propertyValue       属性值
         * @param emitEventToView     是否通知View层去更新界面，默认为false
         * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
         * @param errors              错误消息
         * @param invokeOnValueChange 值变化事件执行句柄
         */
        BaseBindingObject.prototype.setValue = function (propertyName, propertyValue, emitEventToView, emitEventToEntity, errors, invokeOnValueChange, context) {
            var _this = this;
            if (emitEventToView === void 0) {
                emitEventToView = false;
            }
            if (emitEventToEntity === void 0) {
                emitEventToEntity = false;
            }
            // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值
            // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {
            //   return;
            // }
            var oldPropertyValue = this.getValue(propertyName);
            // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue
            // if (oldPropertyValue === propertyValue) {
            //   return;
            // }
            if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
                // 设定缺省
                invokeOnValueChange = function (preValue, value, entityChanged, primaryValue) {
                    return rxjs.of(true);
                };
            }
            if (emitEventToEntity === true) {
                // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；
                // if(!this.innerValues.has(propertyName)) {
                //   return;
                // }
                // 执行实体值变化前事件
                invokeOnValueChange(oldPropertyValue, propertyValue, false, this.rowPrimaryKeyValue).subscribe(function (result) {
                    if (result) {
                        //this.__differ__.onValueChange();
                        // 如果成功，执行变化，并通知实体变化
                        _this.innerValues = _this.innerValues.set(propertyName, propertyValue);
                        // this.data[propertyName] = propertyValue;
                        var viewChange = _this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);
                        _this.viewChanges.next(viewChange);
                        // 如果需要通知视图，通知视图相应修改
                        if (emitEventToView === true) {
                            var change = _this.buildChangesContext(propertyName, propertyValue, context, errors);
                            _this.changes.next(change);
                        }
                        // 执行实体值变化后事件
                        invokeOnValueChange(oldPropertyValue, propertyValue, true, _this.rowPrimaryKeyValue).subscribe();
                    }
                    else {
                        // 如果失败，不再通知实体变化
                        // 并执行界面回滚操作
                        var change = _this.buildChangesContext(propertyName, oldPropertyValue, context, errors);
                        _this.changes.next(change);
                    }
                });
            }
            else {
                //this.__differ__.onValueChange();
                // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件
                this.innerValues = this.innerValues.set(propertyName, propertyValue);
                // this.data[propertyName] = propertyValue;
                if (emitEventToView === true) {
                    var change = this.buildChangesContext(propertyName, propertyValue, context, errors);
                    this.changes.next(change);
                }
                // 执行实体值变化后事件
                invokeOnValueChange(oldPropertyValue, propertyValue, true, this.rowPrimaryKeyValue).subscribe();
            }
        };
        /**
         * 将BindingObject实例转换成JSON对象
         */
        BaseBindingObject.prototype.toJSON = function (options) {
            var _this = this;
            //if (!this.__differ__.isChange()) {
            //  return this.__differ__.value();
            //}
            var langCode = this.getCurrentLanguage(); //window.localStorage.getItem('languageCode') || 'zh-CHS';
            var result = {};
            this.properties.forEach(function (property) {
                var _a;
                var propName = property.name;
                if (property.type === exports.BindingPropertyType.List) {
                    var list = _this[propName];
                    result[propName] = list.toJSON(options);
                }
                else if (property.type === exports.BindingPropertyType.Object) {
                    var object = _this[propName];
                    result[propName] = object.toJSON(options);
                }
                else if (property.type === exports.BindingPropertyType.Dynamic) {
                    var object = _this[propName];
                    result[propName] = object.toJSON(options);
                }
                else {
                    // 1、对于多语录入字段；
                    // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。
                    if (property.enableMultiLangInput === true) {
                        // 忽略多语字段，只返回当前语言
                        if (options && options.ignoreMultiLangInput === true) {
                            var multiLangValueObj = _this.getValue(propName);
                            if (multiLangValueObj) {
                                result[propName] = multiLangValueObj[langCode];
                            }
                            else {
                                result[propName] = multiLangValueObj;
                            }
                        }
                        else if (options && options.useFullMultiLangProperty) {
                            // 给审批提供的扩展 @2021-10-13
                            var multiLangValueObj = _this.getValue(propName);
                            if (multiLangValueObj) {
                                result[propName + "_MULTILANGUAGE"] = multiLangValueObj;
                                // 除返回多语字段外，将当前语言也返回
                                result[propName] = multiLangValueObj[langCode];
                            }
                        }
                        else {
                            var multiLangValueObj = _this.getValue(propName);
                            if (!multiLangValueObj) {
                                result[propName] = (_a = {}, _a[langCode] = multiLangValueObj, _a);
                            }
                            else {
                                result[propName] = multiLangValueObj;
                            }
                        }
                    }
                    else {
                        result[propName] = _this.getValue(propName);
                    }
                }
            });
            // this.__differ__.update(result);
            return result;
        };
        /**
         * 获取当前语言
         * @returns
         */
        BaseBindingObject.prototype.getCurrentLanguage = function () {
            this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';
            return this.currentLanguage;
        };
        /**
         * 构造bindignData变更上下文
         * @param propertyName
         * @param propertyValue
         * @param context
         * @param errors
         * @param type
         * @returns
         */
        BaseBindingObject.prototype.buildChangesContext = function (propertyName, propertyValue, context, errors, type) {
            if (type === void 0) {
                type = exports.ChangeType.ValueChanged;
            }
            var object = this.getRow(this);
            var id = object ? object.primaryKeyValue : null;
            return {
                type: type,
                path: [propertyName],
                value: propertyValue,
                id: id,
                errors: errors,
                context: context
            };
        };
        /**
         * 构造viewChanges上下文
         * @param propertyName
         * @param value
         * @param preValue
         * @param errors
         * @param context
         * @param type
         * @returns
         */
        BaseBindingObject.prototype.buildViewChangesContext = function (propertyName, value, preValue, errors, context, type) {
            if (type === void 0) {
                type = exports.ViewChangeType.ValueChanged;
            }
            return {
                type: type,
                path: [propertyName],
                value: value,
                preValue: preValue,
                errors: errors,
                context: context
            };
        };
        BaseBindingObject.prototype.getRow = function (bindingObject) {
            if (bindingObject && bindingObject.fromEntity) {
                return bindingObject;
            }
            if (bindingObject.parent && !(bindingObject.parent instanceof BindingList)) {
                return this.getRow(bindingObject.parent);
            }
            else {
                return bindingObject;
            }
        };
        BaseBindingObject.prototype.makeHash = function () {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 10; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text;
        };
        BaseBindingObject.prototype.differ = function () {
            var _this = this;
            var previous, next, value;
            return {
                onValueChange: function () {
                    next = _this.makeHash();
                },
                isChange: function () {
                    return next !== previous;
                },
                update: function (result) {
                    value = result;
                    previous = next;
                },
                value: function () {
                    return value;
                }
            };
        };
        return BaseBindingObject;
    }());

    /**
     * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。
     */
    var BindingObject = /** @class */ (function (_super) {
        __extends(BindingObject, _super);
        /**
         * 构造函数
         * @param properties 属性集合
         */
        function BindingObject(properties) {
            var _this = _super.call(this) || this;
            _this.properties = properties;
            _this.primaryKey = PropertyUtil.getPrimaryKey(properties);
            return _this;
        }
        return BindingObject;
    }(BaseBindingObject));

    var BindingDataFactory = /** @class */ (function () {
        function BindingDataFactory() {
        }
        /**
         * 根据Repository创建一个BindingData
         */
        BindingDataFactory.createFromRepository = function (repository, bindingPath) {
            var bindingData = new BindingData();
            var bindingProperties = PropertyUtil.getProperties(repository.entityType);
            var bindingList = BindingListFactory.create(bindingProperties);
            bindingData.initByBindingList(bindingList, bindingPath);
            bindingData.setDataTypeInfo(repository.entityTypeInfo);
            EntityUtil.loadRepository(repository, bindingList);
            // 从repository初始化bindingData
            bindingData.pagingInfo = repository.entityCollection.paginationInfo;
            return bindingData;
        };
        /**
         * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）
         * @internal
         * @summary
         * 1、该方法暂时仅供内部单元测试使用；
         * 2、该方法暂时只创建BindingData，不建立双向关联
         */
        BindingDataFactory.createFromEntityManager = function (entityManager, bindingPath) {
            var bindingData = new BindingData();
            var bindingProperties = PropertyUtil.getProperties(entityManager.entityType);
            var bindingList = BindingListFactory.create(bindingProperties);
            bindingData.initByBindingList(bindingList, bindingPath);
            // 初始化数据
            var entities = entityManager.getEntitiesByPath([]);
            EntityUtil.loadEntities(entities, bindingList);
            return bindingData;
        };
        /**
         * 根据已经存在的BindingData创建一个新的BindingData
         */
        BindingDataFactory.createFromExistingBindingData = function (existingBindingData, bindingPath) {
            var bindingData = new BindingData();
            bindingData.initByBindingList(existingBindingData.list, bindingPath);
            return bindingData;
        };
        return BindingDataFactory;
    }());

    /**
     * 绑定装饰器相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * NgBindingData装饰器名称
     * @formType {string}
     */
    var NG_BINDING_DATA = 'NgBindingData';
    /**
     * NgBindingContext
     */
    // export const NgBindingData: NgBindingDataDecorator =
    //   makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);
    function NgBindingData(options) {
        var decoratorFactory = makeDecorator(NG_BINDING_DATA, function (obj) { return obj; });
        return decoratorFactory(options);
    }

    /**
     * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）
     */
    var DataPathUtil = /** @class */ (function () {
        function DataPathUtil() {
        }
        /**
         * 转换成BindingData可识别的路径
         */
        DataPathUtil.convertToBindingPathArray = function (path) {
            var bindingPathArray = path.split('/').filter(function (part) {
                return part !== '';
            });
            return bindingPathArray;
        };
        /**
         * 转换为Entity可识别的路径
         * 根：[]
         * 主表：['id:xxx', 'name'],
         * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
         * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
         * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
         * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
         */
        DataPathUtil.convertToEntityPathArray = function (path, bindingData) {
            var _this = this;
            var bindingPathArray = this.convertToBindingPathArray(path);
            var entityPathArray = [];
            if (bindingPathArray.length === 0) {
                return entityPathArray;
            }
            // 根节点
            var currentBindingObject = bindingData.list.currentItem;
            entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
            bindingPathArray.forEach(function (propName) {
                var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
                switch (propInfo.type) {
                    case exports.BindingPropertyType.Plain:
                        entityPathArray.push(propName);
                        break;
                    case exports.BindingPropertyType.Object:
                        currentBindingObject = currentBindingObject[propName];
                        entityPathArray.push(propName);
                        entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                        break;
                    case exports.BindingPropertyType.List:
                        var currentBindingList = currentBindingObject[propName];
                        currentBindingObject = currentBindingList.currentItem;
                        entityPathArray.push(propName);
                        entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                        break;
                    default:
                        break;
                }
            });
            return entityPathArray;
        };
        /**
         * 转换为RestUrl里的路径
         *
         * 返回结果：
         * 主表（/）：/
         * 从表（/jiwtEdus）：/xxx/jiwtEdus
         * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades
         */
        DataPathUtil.convertToRestUrl = function (path, bindingData) {
            var bindingPathArray = this.convertToBindingPathArray(path);
            var restPathArray = [];
            var currentBindingObject = bindingData.list.currentItem;
            restPathArray.push(currentBindingObject.primaryKeyValue);
            bindingPathArray.forEach(function (propName) {
                var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
                if (propInfo.type !== exports.BindingPropertyType.List) {
                    throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
                }
                var currentBindingList = currentBindingObject[propName];
                currentBindingObject = currentBindingList.currentItem;
                restPathArray.push(propName);
                restPathArray.push(currentBindingObject.primaryKeyValue);
            });
            // 移除最后一个主键
            restPathArray.pop();
            return '/' + restPathArray.join('/');
        };
        /**
         * 获取叶子节点的Path
         */
        DataPathUtil.getLeafPath = function (path) {
            var pathArray = DataPathUtil.convertToBindingPathArray(path);
            return pathArray.pop();
        };
        /**
         * 获取父路径
         */
        DataPathUtil.getParentPath = function (path) {
            var pathArray = DataPathUtil.convertToBindingPathArray(path);
            pathArray.pop();
            return '/' + pathArray.join('/');
        };
        /**
         * 创建路径中的主键部分
         */
        DataPathUtil.createPrimaryKeyPath = function (primaryKey, primaryKeyValue) {
            return primaryKey + ":" + primaryKeyValue;
        };
        return DataPathUtil;
    }());

    // tslint:disable: max-line-length
    /**
     * GUID创建服务
     * @scope 静态类没有提供Provider
     */
    var Guid = /** @class */ (function () {
        function Guid(guid) {
            if (!guid) {
                throw new TypeError('Invalid argument; `value` has no value.');
            }
            this.value = Guid.EMPTY;
            if (guid) {
                this.value = guid;
            }
        }
        Guid.isGuid = function (guid) {
            var value = guid.toString();
            return guid && (guid instanceof Guid || Guid.validator.test(value));
        };
        Guid.create = function () {
            return new Guid(UID.create());
        };
        Guid.createEmpty = function () {
            return new Guid('');
        };
        Guid.parse = function (guid) {
            return new Guid(guid);
        };
        Guid.raw = function () {
            return UID.create();
        };
        Guid.prototype.equals = function (other) {
            // Comparing string `value` against provided `guid` will auto-call
            // toString on `guid` for comparison
            return Guid.isGuid(other) && this.value === other.toString();
        };
        Guid.prototype.isEmpty = function () {
            return this.value === Guid.EMPTY;
        };
        Guid.prototype.toString = function () {
            return this.value;
        };
        Guid.prototype.toJSON = function () {
            return {
                value: this.value,
            };
        };
        Guid.validator = new RegExp('^[a-z0-9]+$', 'i');
        Guid.EMPTY = '';
        return Guid;
    }());

    var RunModeService = /** @class */ (function () {
        function RunModeService() {
        }
        RunModeService.setRunMode = function (mode) {
            RunModeService.mode = mode;
        };
        RunModeService.getRunMode = function () {
            return RunModeService.mode;
        };
        RunModeService.mode = null;
        return RunModeService;
    }());

    /**
     * @author Lucas Huang
     * 实体抽象基类，所有实体必须扩展自Entity
     *
     * ### 使用示例
     * ```
     * export class UserEntity extends Entity {
     *    userId: string;
     *    userName: string;
     *
     *    constructor(data: any){
     *        super(data);
     *    }
     * }
     * ```
     */
    var Entity = /** @class */ (function () {
        // #endregion
        /**
         * @param data JSON数据
         */
        function Entity(data) {
            // #region 私有、保护属性
            /**
             * 验证错误集合
             */
            this.validErrors = {};
            this.primaryFieldMetadata = null;
            this.originalData = undefined;
            /**
             * 增量变更集合
             */
            this.changeSet = new ChangeSet();
            /**
             * 是否正在验证
             */
            this.isValidating = false;
            /**
             * 新数据
             */
            this.newData = undefined;
            /**
             * 销毁流
             */
            this.unsubscribe = new rxjs.Subject();
            // #endregion
            // #region 公有属性
            /**
             * 变更流
             */
            this.valueChanged = new rxjs.Subject();
            /**
             * 属性值改变时触发
             *
             * ### 使用示例
             * ```
             *  const entity = new UserEntity(data);
             *  entity.onValueChanged.subscribe((data: Modification) => {
             *      console.log(data);
             *  })
             *
             * ```
             *
             * @event
             */
            this.onValueChanged = this.valueChanged.asObservable();
            this.onUpdate = new rxjs.Subject();
            this.validator = new Validator();
            this.newData = Object.assign({}, data);
            this.originalData = Object.assign({}, data);
            this.onValueChanged = this.valueChanged;
            // this.onValueChanged = this.valueChanged.pipe(
            //     scan((x: Modification, curr: Modification) => {
            //         if (x) {
            //             if (isEqual(x.path, curr.path) && x.type === curr.type) {
            //                 return Object.assign(x, curr);
            //             }
            //             return curr;
            //         }
            //         return curr;
            //     })
            // );
            if (RunModeService.getRunMode() === exports.RunMode.compatible) {
                this.initialize();
            }
            // this.validate();
        }
        Object.defineProperty(Entity.prototype, "data", {
            /**
             * 返回JSON格式的数据
             */
            get: function () {
                return this.newData;
            },
            set: function (value) {
                this.newData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "errors", {
            /**
             * 验证错误集合
             */
            get: function () {
                return this.validErrors;
            },
            set: function (errors) {
                this.validErrors = errors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "changeSetPolicy", {
            get: function () {
                return this._changeSetPolicy;
            },
            set: function (policy) {
                this._changeSetPolicy = policy;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "changes", {
            /**
             * 实体变更集
             */
            get: function () {
                return this.changeSet.changes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "primaryProperty", {
            /**
             * 实体主键元数据
             */
            get: function () {
                if (!this.primaryFieldMetadata) {
                    this.primaryFieldMetadata = FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);
                }
                return this.primaryFieldMetadata;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "primaryKey", {
            /**
             * 主键
             * @todo
             * 1、没有主键时返回''不合理，应该返回undefined
             */
            get: function () {
                if (this.primaryProperty) {
                    return this.primaryProperty.property;
                }
                else {
                    return '';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "primaryValue", {
            /**
             * 实体主键值
             * 1、没有主键时返回''不合理，应该返回undefined
             */
            get: function () {
                if (this.primaryKey) {
                    // return this[this.primaryProperty.property].toString();
                    var primaryValue = this[this.primaryProperty.property];
                    return primaryValue ? primaryValue : '';
                }
                else {
                    return '';
                }
            },
            enumerable: true,
            configurable: true
        });
        // #region 公有方法
        /**
         * 将变更记录保存至变更集中
         * @param value 变更记录
         */
        Entity.prototype.setChanges = function (value) {
            var propertyName = value.path[value.path.length - 1];
            // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。
            // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
            this.valueChanged.next(value);
            if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName) && this.changeSetPolicy === 'valid')) {
                if (value && value.changeSetValue !== undefined) {
                    value = JSON.parse(JSON.stringify(value));
                    value.value = value.changeSetValue;
                }
                this.changeSet.append(value);
            }
        };
        /**
         * 校验实体各属性的值
         * @param propertyName 属性名称，如果为空，则验证实体中所有设置了验证规则的属性
         * @returns Observable<ValidationResult>
         * ### 示例
         * ```
         *  const entity = new UserEntity(data);
         *  entity.validate().subscribe(result =>{
         *      if(result.isValid){
         *          ...
         *      } else {
         *          console.log(result.message);
         *      }
         *  })
         *
         * ```
         */
        // tslint:disable-next-line: max-line-length
        Entity.prototype.validate = function (propertyName, value, externalRules, index, frameContext) {
            var _this = this;
            return rxjs.from(this.validator.validate(this, propertyName, value, externalRules, index, frameContext)).pipe(operators.tap(function (result) {
                if (!result.isValid) {
                    _this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
                }
                else {
                    _this.validErrors = {};
                }
            }));
        };
        Entity.prototype.validateAll = function (validateContext) {
        };
        // 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb
        Entity.prototype.validateFromUtil = function (propertyName, value, cb, context) {
            var _this = this;
            this.validErrors = {};
            rxjs.from(this.validator.validate(this, propertyName, value, null, undefined, context && context.frameContext || null)).subscribe(function (result) {
                if (!result.isValid) {
                    _this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
                }
                // 不应重新赋值，这里仅是实体校验通过
                /*else {
                  // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
                  if (this[propertyName] === value) {
                    return;
                  }
                  this[propertyName] = value;
                }*/
                cb(result);
            });
        };
        /**
         * 同步校验
         * @param propertyName
         * @param value
         * @param cb
         */
        Entity.prototype.validateFromUtilSync = function (propertyName, value, cb, context) {
            this.validErrors = {};
            var result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);
            if (result && !result.isValid) {
                this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
            }
            cb(result);
        };
        Entity.prototype.getPaths = function () {
            var pathObj = {
                path: [],
                isUdt: false,
                isGrid: false
            };
            var handleParent = function (item) {
                var parentPaths = item[PARENT_PATH];
                if (parentPaths) {
                    var prop = parentPaths[parentPaths.length - 1];
                    // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段
                    if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                        pathObj.isUdt = true;
                    }
                    // 存在类型为ngList，则判断为grid
                    if (item instanceof EntityList === true) {
                        pathObj.isGrid = true;
                    }
                    else {
                        pathObj.path.push(prop);
                    }
                }
                if (item[PARENT_CLASS]) {
                    handleParent(item[PARENT_CLASS]);
                }
            };
            handleParent(this);
            pathObj.path = pathObj.path.reverse();
            return pathObj;
        };
        Entity.prototype.getEntityListPath = function () {
            var paths = [];
            var handleParent = function (item) {
                var parentPaths = item[PARENT_PATH];
                if (parentPaths) {
                    if (item instanceof EntityList === true) {
                        var path = parentPaths.concat([]).reverse();
                        Array.prototype.push.apply(paths, path);
                    }
                }
                if (item[PARENT_CLASS]) {
                    handleParent(item[PARENT_CLASS]);
                }
            };
            handleParent(this);
            return paths.reverse();
        };
        Entity.prototype.getMainEntityPrimaryValue = function () {
            var item = this;
            while (item[PARENT_CLASS]) {
                item = item[PARENT_CLASS];
            }
            return item.primaryValue;
        };
        /**
         * 加载数据
         * @param data 新数据
         */
        Entity.prototype.load = function (data, options) {
            if (options === void 0) {
                options = {};
            }
            if (!data) {
                data = {};
            }
            this.loadFields(data);
            if (!options || (options && options.loadChild !== false)) {
                this.loadLists(data);
            }
            this.loadObjects(data);
            this.loadDynamicObjects(data);
            this.newData = Object.assign({}, data);
            this.originalData = Object.assign({}, data);
        };
        /**
         * 转换为JSON
         * @param buildChanges 是否构造变更集
         * @param includeMultiLanguageField 是否包含多语字段
         */
        Entity.prototype.toJSON = function (buildChanges) {
            var _this = this;
            var result = {};
            // 简单属性
            var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
            Object.keys(ngFields).forEach(function (propName) {
                var ngField = ngFields[propName];
                var dataField = ngField.dataField || propName;
                if (buildChanges === true && ngField.enableTimeZone === true) {
                    result[dataField] = _this.data[propName];
                }
                else {
                    result[dataField] = _this[propName];
                }
            });
            // 对象属性
            var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
            Object.keys(ngObjects).forEach(function (propName) {
                var ngObject = ngObjects[propName];
                var dataField = ngObject.dataField || propName;
                result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
            });
            // 动态属性
            var ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
            Object.keys(ngDynamics).forEach(function (propName) {
                var ngDynamic = ngDynamics[propName];
                var dataField = ngDynamic.dataField || propName;
                result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
            });
            // 列表属性
            var ngLists = FieldMetadataUtil.getNgList(this.constructor);
            Object.keys(ngLists).forEach(function (propName) {
                var ngList = ngLists[propName];
                var dataField = ngList.dataField || propName;
                result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
            });
            return result;
        };
        // #endregion
        //#region 实体初始化相关private方法
        /**
         * 初始化实体
         */
        Entity.prototype.initialize = function () {
            var constructor = this.constructor;
            var ngFields = FieldMetadataUtil.getNgFields(constructor);
            var ngObjects = FieldMetadataUtil.getNgObjects(constructor);
            var ngLists = FieldMetadataUtil.getNgList(constructor);
            var ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
            this.initializeNormalField(ngFields);
            this.initializeList(ngLists);
            this.initializeObject(ngObjects);
            this.initializeDynamic(ngDynamic);
        };
        /**
         * 创建path
         * @param propertyName 属性名称
         */
        Entity.prototype.createPath = function (propertyName) {
            var primaryFieldMetadata = this.primaryProperty;
            if (primaryFieldMetadata) {
                var primaryDataField = primaryFieldMetadata.dataField;
                return [primaryDataField + ':' + this.primaryValue, propertyName];
            }
            else {
                return [':', propertyName];
            }
        };
        /**
         * 属性字段初始化
         * @param ngFields 属性字段元数据
         */
        Entity.prototype.initializeNormalField = function (ngFields) {
            var _this = this;
            Object.keys(ngFields).forEach(function (propName) {
                var ngField = ngFields[propName];
                var dataField = ngField.dataField || propName;
                if (delete _this[propName]) {
                    Object.defineProperty(_this, propName, {
                        get: function () {
                            var value = this.getPropValue(propName, ngField);
                            return value;
                        },
                        set: function (newPropValue) {
                            // 值相同时不触发变更。
                            var oldPropValue = this.getPropValue(propName, ngField);
                            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                                return;
                            }
                            this.setPropValue(propName, ngField, newPropValue);
                            var changeSetValue = this.preparePropValue(propName, ngField, newPropValue);
                            this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);
                        }
                    });
                }
            });
        };
        /**
         * 初始化列表类型的元数据
         * @param ngListMetadata 列表类型元数据
         */
        Entity.prototype.initializeList = function (ngListMetadata) {
            var _this = this;
            Object.keys(ngListMetadata).forEach(function (propertyName) {
                var fieldMetadata = ngListMetadata[propertyName];
                var path = _this.createPath(propertyName);
                var dataField = fieldMetadata.dataField || propertyName;
                var val = _this.data[dataField];
                var entityList = new EntityList();
                entityList[PARENT_CLASS] = _this;
                entityList[PARENT_PATH] = path;
                if (val) {
                    var entities = val.map(function (v) { return EntityFactory(fieldMetadata.type, v); });
                    entityList.loadEntities(entities);
                }
                entityList.onListChanged.subscribe(function (value) {
                    if (value) {
                        if (entityList[PARENT_PATH][0] !== value.path[0]) {
                            value.path = entityList[PARENT_PATH].concat(value.path);
                        }
                        _this.setChanges(value);
                    }
                });
                _this[propertyName] = entityList;
            });
        };
        /**
         * 初始化子对象
         * @param ngObjectMetadata 子对象元数据
         */
        Entity.prototype.initializeObject = function (ngObjectMetadata) {
            var _this = this;
            Object.keys(ngObjectMetadata).forEach(function (propertyName) {
                var fieldMetadata = ngObjectMetadata[propertyName];
                var path = _this.createPath(propertyName);
                var dataField = fieldMetadata.dataField || propertyName;
                // val不存在时，用空对象代替
                var val = _this.data[dataField] || {};
                var createEntityFromJsonData = function (value) {
                    var instance;
                    if (value instanceof fieldMetadata.type) {
                        instance = value;
                    }
                    else {
                        instance = EntityFactory(fieldMetadata.type, value);
                    }
                    instance[PARENT_CLASS] = _this;
                    instance[PARENT_PATH] = path;
                    instance.onValueChanged.subscribe(function (changes) {
                        if (changes) {
                            changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                            _this.setChanges(changes);
                        }
                    });
                    return instance;
                };
                // 如果没有值用一个空对象代替
                var childEntity = createEntityFromJsonData(val);
                if (delete _this[propertyName]) {
                    Object.defineProperty(_this, propertyName, {
                        get: function () {
                            return childEntity;
                        },
                        set: function (value) {
                            var modifyInfo = {
                                path: childEntity[PARENT_PATH],
                                value: value.data,
                                preValue: this[propertyName].data,
                                type: exports.ModifyType.ValueChange
                            };
                            childEntity = createEntityFromJsonData(value);
                            this.setChanges(modifyInfo);
                        }
                    });
                }
            });
        };
        Entity.prototype.initializeDynamic = function (ngDynamicMetadata) {
            var _this = this;
            Object.keys(ngDynamicMetadata).forEach(function (propertyName) {
                var fieldMetadata = ngDynamicMetadata[propertyName];
                var path = _this.createPath(propertyName);
                var dataField = fieldMetadata.dataField || propertyName;
                var originalData = _this.data[dataField] || {};
                var createEntityFromJsonData = function (value) {
                    var instance;
                    if (value instanceof fieldMetadata.type) {
                        instance = value;
                    }
                    else {
                        instance = EntityFactory(fieldMetadata.type, value);
                    }
                    instance[PARENT_CLASS] = _this;
                    instance[PARENT_PATH] = path;
                    instance.onValueChanged.subscribe(function (changes) {
                        if (changes) {
                            changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                            _this.setChanges(changes);
                        }
                    });
                    return instance;
                };
                var dynamicEntity = createEntityFromJsonData(originalData);
                if (delete _this[propertyName]) {
                    Object.defineProperty(_this, propertyName, {
                        get: function () {
                            return dynamicEntity;
                        },
                        set: function (value) {
                            var modifyInfo = {
                                path: dynamicEntity[PARENT_PATH],
                                value: value.data,
                                preValue: this[propertyName].data,
                                type: exports.ModifyType.ValueChange
                            };
                            dynamicEntity = createEntityFromJsonData(value);
                            this.setChanges(modifyInfo);
                        }
                    });
                }
            });
        };
        //#endregion
        // #region 加载实体数据相关private、projected方法
        /**
         * 加载简单字段值
         * @todo 临时用修改的方式模拟
         */
        Entity.prototype.loadFields = function (data) {
            var _this = this;
            var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
            Object.keys(ngFields).forEach(function (propName) {
                var ngField = ngFields[propName];
                var dataField = ngField.dataField || propName;
                // if (ngField.primary === false) {
                //   this[propName] = data[dataField];
                // }
                var propValue = data[dataField];
                if (ngField.enableTimeZone === true) {
                    var timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                    if (timeZoneOffset !== null && propValue) {
                        propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);
                    }
                }
                _this[propName] = propValue;
            });
        };
        /**
         * 加载子列表数据
         * @param data 数据
         */
        Entity.prototype.loadLists = function (data) {
            var _this = this;
            var ngLists = FieldMetadataUtil.getNgList(this.constructor);
            Object.keys(ngLists).forEach(function (propName) {
                var ngList = ngLists[propName];
                var dataField = ngList.dataField || propName;
                var entityType = ngList.type;
                // 创建实体
                var listData = data[dataField];
                if (listData) {
                    var entities = listData.map(function (entityData) {
                        return EntityFactory(entityType, entityData);
                    });
                    _this[propName].loadEntities(entities);
                }
                else {
                    _this[propName].loadEntities([]);
                }
            });
        };
        Entity.prototype.loadObjects = function (data) {
            var _this = this;
            var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
            Object.keys(ngObjects).forEach(function (propName) {
                var ngObject = ngObjects[propName];
                var dataField = ngObject.dataField || propName;
                var objectData = data[dataField];
                var entity = _this[propName];
                if (!entity || !objectData) {
                    return;
                }
                entity.load(objectData);
            });
        };
        Entity.prototype.loadDynamicObjects = function (data) {
            var _this = this;
            var ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);
            Object.keys(ngDynamicObjects).forEach(function (propName) {
                var ngDynamicObject = ngDynamicObjects[propName];
                var dataField = ngDynamicObject.dataField || propName;
                var dynamicData = data[dataField] || {};
                var dynamicEntity = _this[propName];
                if (!dynamicEntity) {
                    return;
                }
                dynamicEntity.loadDynamicData(dynamicData);
            });
        };
        // #endregion
        // #region 私有工具方法
        /**
         * 发送值变更
         */
        Entity.prototype.emitValueChange = function (propName, propMetadata, newPropValue, oldPropValue, changeSetValue) {
            if (changeSetValue === void 0) {
                changeSetValue = undefined;
            }
            var change = {
                path: this.createPath(propName),
                value: newPropValue,
                changeSetValue: changeSetValue,
                preValue: oldPropValue,
                type: exports.ModifyType.ValueChange
            };
            if (this[PARENT_PATH]) {
                change.path = this[PARENT_PATH].concat(change.path);
            }
            this.setChanges(change);
        };
        /**
         * 准备提交给后端的属性值
         * @param propName 属性
         * @param propMetadata 属性描述
         * @param propValue 属性值
         */
        Entity.prototype.preparePropValue = function (propName, propMetadata, propValue) {
            var value = undefined;
            // 只要启用时区，传给后端的时间就必须带时区，因此当获取用户时区失败的时候，获取浏览器当前时区
            if (propMetadata.enableTimeZone === true) {
                var timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                if (timeZoneOffset !== null && propValue) {
                    value = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);
                }
            }
            return value;
        };
        /**
         * 获取属性值
         */
        Entity.prototype.getPropValue = function (propName, propMetadata) {
            var _a;
            var dataField = propMetadata.dataField || propName;
            var value = this.data[dataField];
            // 对多语录入字段，query不返回问题进行兼容
            if (propMetadata.enableMultiLangInput === true && !value) {
                var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
                var originDataField = dataField.replace('_MULTILANGUAGE', '');
                return _a = {},
                    _a[langCode] = this.data[originDataField],
                    _a;
            }
            // 启用时区
            if (propMetadata.enableTimeZone === true) {
                var timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                if (timeZoneOffset !== null && value) {
                    return ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(value, timeZoneOffset);
                }
            }
            if (propMetadata.originalDataFieldType === BigNumberType) {
                value = value !== null && value !== undefined && value.toString() || null;
            }
            return value;
        };
        /**
         * 设置属性值
         */
        Entity.prototype.setPropValue = function (propName, propMetadata, propValue) {
            var dataField = propMetadata.dataField || propName;
            if (propMetadata.originalDataFieldType === BigNumberType) {
                this.data[dataField] = propValue === null ? null : propValue && propValue.toString() || '';
            }
            else {
                if (propMetadata.enableTimeZone === true) {
                    var timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                    if (timeZoneOffset !== null && propValue) {
                        propValue = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);
                    }
                }
                this.data[dataField] = propValue;
            }
        };
        /**
         * 检查属性值是否发生变化
         */
        Entity.prototype.isPropValueChanged = function (propName, propMetadata, newPropValue, oldPropValue) {
            if (propMetadata.enableMultiLangInput === true) {
                if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                    return false;
                }
                return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
            }
            else if (propMetadata.originalDataFieldType === BigNumberType) {
                if (typeof newPropValue !== 'string' && newPropValue !== null && newPropValue !== undefined) {
                    newPropValue = newPropValue.toString();
                }
                return newPropValue !== oldPropValue;
            }
            else {
                return newPropValue !== oldPropValue;
            }
        };
        /**
         * 多语录入字段的值是否为空
         */
        Entity.prototype.isEmptyMultiLangPropValue = function (value) {
            if (!value) {
                return true;
            }
            var keys = Object.keys(value);
            if (keys.length === 0) {
                return true;
            }
            // 值全部为空，视为空
            var vals = Object.values(value);
            var allEmptyVal = vals.every(function (val) {
                return !val;
            });
            if (allEmptyVal === true) {
                return true;
            }
            return false;
        };
        return Entity;
    }());

    /**
     * 支持动态字段集合的动态实体
     */
    var DynamicEntity = /** @class */ (function (_super) {
        __extends(DynamicEntity, _super);
        /**
         * @param data JSON数据
         */
        function DynamicEntity(data) {
            var _this = _super.call(this, data) || this;
            _this.loadDynamicData(data);
            return _this;
        }
        Object.defineProperty(DynamicEntity.prototype, "IsNested", {
            /**
             * 是否是嵌套的动态实体
             */
            get: function () {
                return this[PARENT_CLASS] instanceof DynamicEntity;
            },
            enumerable: true,
            configurable: true
        });
        DynamicEntity.prototype.loadDynamicData = function (dynamicData) {
            this.initializeDynamicField(dynamicData);
            // super.loadFields(dynamicData);
        };
        /**
         * 初始化动态数据
         * @param dynamicData 动态数据
         */
        DynamicEntity.prototype.initializeDynamicField = function (dynamicData) {
            var _this = this;
            // 遍历动态数据的key，创建动态实体属性。
            Object.keys(dynamicData).forEach(function (propertyName) {
                var dataField = propertyName;
                if (delete _this[propertyName]) {
                    if (dynamicData[propertyName] instanceof Object) {
                        var path_1 = _this.createPath(propertyName);
                        var dynamicEntity_1 = _this.createDynamicEntityFromJsonData(dynamicData[propertyName], path_1);
                        // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};
                        // NgObject({
                        //     /** 字段名称 */
                        //     dataField: propertyName,
                        //     /** 原始字段名称 */
                        //     originalDataField: propertyName,
                        //     /** 是否为外键 */
                        //     type: DynamicEntity
                        // })(this, propertyName);
                        Object.defineProperty(_this, propertyName, {
                            get: function () {
                                return dynamicEntity_1;
                            },
                            set: function (value) {
                                var modifyInfo = {
                                    path: dynamicEntity_1[PARENT_PATH],
                                    value: value.data,
                                    preValue: this[propertyName].data,
                                    type: exports.ModifyType.ValueChange
                                };
                                dynamicEntity_1 = this.createDynamicEntityFromJsonData(value, path_1);
                                this.setChanges(modifyInfo);
                            }
                        });
                    }
                    else {
                        // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};
                        // NgField({
                        //     /** 字段名称 */
                        //     dataField: propertyName,
                        //     /** 原始字段名称 */
                        //     originalDataField: propertyName,
                        //     /** 是否为主键 */
                        //     primary: false,
                        //     /** 是否为外键 */
                        //     foreign: false
                        // })(this, propertyName);
                        Object.defineProperty(_this, propertyName, {
                            // 定义返回数据方法。
                            get: function () {
                                // 从初始数据返回字段值。
                                return this.data[dataField];
                            },
                            set: function (value) {
                                // 值相同时不触发变更。
                                var oldValue = this.data[dataField];
                                if (oldValue === value) {
                                    return;
                                }
                                // 更新元数据数据。
                                this.data[dataField] = value;
                                // 变更集
                                var changes = {
                                    type: exports.ModifyType.ValueChange,
                                    path: this.createPath(propertyName),
                                    value: value,
                                    preValue: oldValue
                                };
                                if (this[PARENT_PATH]) {
                                    changes.path = this[PARENT_PATH].concat(changes.path);
                                }
                                this.setChanges(changes);
                            }
                        });
                    }
                }
            });
        };
        DynamicEntity.prototype.createDynamicEntityFromJsonData = function (value, parentPath) {
            var _this = this;
            var instance;
            if (value instanceof DynamicEntity) {
                instance = value;
            }
            else {
                instance = new DynamicEntity(value);
                instance.constructor = DynamicEntity;
            }
            instance[PARENT_CLASS] = this;
            instance[PARENT_PATH] = parentPath;
            instance.onValueChanged.pipe(operators.takeUntil(this.unsubscribe)).subscribe(function (changes) {
                if (changes) {
                    changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                    _this.setChanges(changes);
                }
            });
            return instance;
        };
        /**
         * 将变更记录保存至变更集中
         * @param value 变更记录
         * @todo
         * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；
         * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。
         */
        DynamicEntity.prototype.setChanges = function (value) {
            var _a;
            var propertyName = value.path[value.path.length - 1];
            var preValue = Object.assign({}, this.data);
            this.newData = Object.assign(this.newData, (_a = {}, _a[propertyName] = value.value, _a));
            var parentPath = value.path;
            if (value.path.length > 2) {
                parentPath = value.path.slice(0, value.path.length - 2);
            }
            // 统一不使用构造函数（保持和其他位置对Modification的构造一致）
            // const parentModification = new Modification(this.data, value.type, parentPath, preValue);
            var parentModification = {
                path: parentPath,
                value: this.data,
                preValue: preValue,
                type: value.type,
                dynamic: true
            };
            this.valueChanged.next(parentModification);
            this.changeSet.append(value);
        };
        /**
         * toJSON
         */
        DynamicEntity.prototype.toJSON = function () {
            return this.data;
        };
        return DynamicEntity;
    }(Entity));

    var ENTITY_DATA_SERVICE_TOKEN = new core.InjectionToken('@farris/devkit ENTITY_DATA_SERVICE');

    var entityPrototype = {
        /**
         * 获取属性值
         */
        getFieldValue: function (schemaField) {
            var _a;
            var fieldName = schemaField.label;
            var value = this.data[fieldName];
            // 对多语录入字段，query不返回问题进行兼容
            if (schemaField.multiLanguage === true && !value) {
                var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
                var originDataField = fieldName.replace('_MULTILANGUAGE', '');
                return _a = {},
                    _a[langCode] = this.data[originDataField],
                    _a;
            }
            return value;
        },
        /**
         * 设置属性值
         */
        setFieldValue: function (schemaField, propertyValue) {
            var fieldName = schemaField.label;
            this.data[fieldName] = propertyValue;
        },
        /**
         * 获取复杂类型对象的值
         * @param schemaField Schema字段描述
         * @returns 复杂类型对象的值
         */
        getComplexFieldValue: function (schemaField) {
            var fieldName = schemaField.label;
            var objectPropertyValue = this.innerEntities[fieldName];
            return objectPropertyValue;
        },
        /**
         * 向实体复杂类型字段赋值
         * @param schemaField Schema字段描述
         * @param ComplexField 复杂类型字段的类型定义
         * @param propertyValue 属性值
         */
        setComplexFieldValue: function (schemaField, ComplexField, propertyValue) {
            // 提取字段名
            var fieldName = schemaField.label;
            var complexFieldInstance = null;
            if (propertyValue instanceof ComplexField) {
                complexFieldInstance = propertyValue;
            }
            else {
                complexFieldInstance = new ComplexField(propertyValue);
                complexFieldInstance.constructor = ComplexField;
            }
            // 提取复杂类型对象的值
            var objectPropertyValue = this.innerEntities[fieldName];
            var propertyPath = (objectPropertyValue && objectPropertyValue[PARENT_PATH]) || complexFieldInstance[PARENT_PATH];
            // 构造变更信息
            var changeInfo = {
                // 提取变更对象相对于根实体的路径
                path: propertyPath,
                // 记录对象最新值
                value: propertyValue,
                // 记录对象历史值
                preValue: (this[fieldName] && this[fieldName].data) || null,
                // 标记这是一个值变化变更
                type: exports.ModifyType.ValueChange
            };
            // 创建新的对象
            this.innerEntities[fieldName] = complexFieldInstance;
            // this.innerEntities[fieldName] = new ComplexField(propertyValue);
            // 记录本次数据变更
            if (!this.isInitializing) {
                this.setChanges(changeInfo);
            }
        },
        /**
         * 获取指定的子实体列表
         * @param schemaEntity 实体描述
         * @returns 子实体列表
         */
        getEntities: function (schemaEntity) {
            var dataField = schemaEntity.label;
            var listPropertyValue = this.innerEntities[dataField];
            return listPropertyValue;
        },
        /**
         * 更新指定子实体的值
         * @param schemaEntity 实体描述
         * @param propertyValue 实体列表
         */
        setEntities: function (schemaEntity, propertyValue) {
            var dataField = schemaEntity.label;
            this.innerEntities[dataField] = propertyValue;
        },
        /**
         * 检查属性值是否发生变化
         */
        isFieldValueChanged: function (schemaField, newPropValue, oldPropValue) {
            if (schemaField.multiLanguage === true) {
                if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                    return false;
                }
                return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
            }
            else {
                return newPropValue !== oldPropValue;
            }
        },
        /**
         * 多语录入字段的值是否为空
         */
        isEmptyMultiLangPropValue: function (value) {
            if (!value) {
                return true;
            }
            var keys = Object.keys(value);
            if (keys.length === 0) {
                return true;
            }
            // 值全部为空，视为空
            var vals = Object.values(value);
            var allEmptyVal = vals.every(function (val) {
                return !val;
            });
            if (allEmptyVal === true) {
                return true;
            }
            return false;
        },
        /**
         * 发送值变更
         */
        emitFieldValueChange: function (schemaField, newPropValue, oldPropValue) {
            if (!this.isInitializing) {
                var fieldName = schemaField.label;
                var changeInfo = {
                    path: this.createPath(fieldName),
                    value: newPropValue,
                    preValue: oldPropValue,
                    type: exports.ModifyType.ValueChange
                };
                if (this[PARENT_PATH]) {
                    changeInfo.path = this[PARENT_PATH].concat(changeInfo.path);
                }
                this.setChanges(changeInfo);
            }
        },
        /**
         * 将变更记录保存至变更集中
         * @param value 变更记录
         */
        setChanges: function (value) {
            var propertyName = value.path[value.path.length - 1];
            // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。
            // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
            this.valueChanged.next(value);
            if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {
                this.changeSet.append(value);
            }
        },
        /**
         * 创建path
         * @param propertyName 属性名称
         */
        createPath: function (propertyName) {
            if (this.primaryKey) {
                return [this.primaryKey + ':' + this.primaryValue, propertyName];
            }
            else {
                return [':', propertyName];
            }
        },
        getPaths: function () {
            var pathObj = {
                path: [],
                isUdt: false,
                isGrid: false
            };
            var handleParent = function (item) {
                var parentPaths = item[PARENT_PATH];
                if (parentPaths) {
                    var prop = parentPaths[parentPaths.length - 1];
                    // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段
                    if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                        pathObj.isUdt = true;
                    }
                    // 存在类型为ngList，则判断为grid
                    if (item instanceof EntityList === true) {
                        pathObj.isGrid = true;
                    }
                    else {
                        pathObj.path.push(prop);
                    }
                }
                if (item[PARENT_CLASS]) {
                    handleParent(item[PARENT_CLASS]);
                }
            };
            handleParent(this);
            pathObj.path = pathObj.path.reverse();
            return pathObj;
        },
        validate: function (propertyName, value, externalRules, index) {
            var _this = this;
            return rxjs.from(this.validator.validate(this, propertyName, value, externalRules, index)).pipe(operators.tap(function (result) {
                if (!result.isValid) {
                    _this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
                }
                else {
                    _this.validErrors = {};
                }
            }));
        },
        validateAll: function (validateContext) {
        },
        /**
         * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb
         */
        validateFromUtil: function (propertyName, value, cb) {
            var _this = this;
            this.validErrors = {};
            rxjs.from(this.validator.validate(this, propertyName, value)).subscribe(function (result) {
                if (!result.isValid) {
                    _this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
                }
                // 不应重新赋值，这里仅是实体校验通过
                /*else {
                  // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
                  if (this[propertyName] === value) {
                    return;
                  }
                  this[propertyName] = value;
                }*/
                cb(result);
            });
        },
        /**
         * 将实体数据转换为JSON格式
         */
        toJSON: function (buildChanges) {
            var _this = this;
            // 声明转换初始值
            var result = {};
            // 提取简单类型字段的值
            var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
            Object.keys(ngFields).forEach(function (propName) {
                var ngField = ngFields[propName];
                var dataField = ngField.dataField || propName;
                if (buildChanges === true && ngField.enableTimeZone === true) {
                    result[dataField] = _this.data[propName];
                }
                else {
                    result[dataField] = _this[propName];
                }
            });
            // 提取对象类型字段的值
            var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
            Object.keys(ngObjects).forEach(function (propName) {
                var ngObject = ngObjects[propName];
                var dataField = ngObject.dataField || propName;
                result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
            });
            // 提取动态属性字段的值
            var ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
            Object.keys(ngDynamics).forEach(function (propName) {
                var ngDynamic = ngDynamics[propName];
                var dataField = ngDynamic.dataField || propName;
                result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
            });
            // 提取列表字段的属性
            var ngLists = FieldMetadataUtil.getNgList(this.constructor);
            Object.keys(ngLists).forEach(function (propName) {
                var ngList = ngLists[propName];
                var dataField = ngList.dataField || propName;
                result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
            });
            return result;
        }
    };

    /**
     * schema
     */
    var Schema = /** @class */ (function () {
        function Schema() {
        }
        return Schema;
    }());
    /**
     * 实体
     */
    var SchemaEntity = /** @class */ (function () {
        function SchemaEntity() {
        }
        return SchemaEntity;
    }());
    /**
     * 实体类型对象
     */
    var SchemaEntityType = /** @class */ (function () {
        function SchemaEntityType() {
        }
        return SchemaEntityType;
    }());
    /**
     * 字段
     */
    var SchemaEntityField = /** @class */ (function () {
        function SchemaEntityField() {
        }
        return SchemaEntityField;
    }());
    /**
     * 字段类型对象
     */
    var SchemaEntityFieldType = /** @class */ (function () {
        function SchemaEntityFieldType() {
        }
        return SchemaEntityFieldType;
    }());
    /**
     * 字段编辑器对象
     */
    var SchemaEntityFieldEditor = /** @class */ (function () {
        function SchemaEntityFieldEditor() {
        }
        return SchemaEntityFieldEditor;
    }());
    (function (SchemaEntityField$Type) {
        /**
         * 简单类型字段
         */
        SchemaEntityField$Type["SimpleField"] = "SimpleField";
        /**
         * 关联/UDT类型字段
         */
        SchemaEntityField$Type["ComplexField"] = "ComplexField";
    })(exports.SchemaEntityField$Type || (exports.SchemaEntityField$Type = {}));
    (function (SchemaEntityFieldType$Type) {
        /**
         * 字符串
         */
        SchemaEntityFieldType$Type["StringType"] = "StringType";
        /**
         * 备注
         */
        SchemaEntityFieldType$Type["TextType"] = "TextType";
        /**
         * 数字（整数、浮点数）
         */
        SchemaEntityFieldType$Type["NumericType"] = "NumericType";
        /**
         * 布尔
         */
        SchemaEntityFieldType$Type["BooleanType"] = "BooleanType";
        /**
         * 日期
         */
        SchemaEntityFieldType$Type["DateType"] = "DateType";
        /**
         * 日期时间
         */
        SchemaEntityFieldType$Type["DateTimeType"] = "DateTimeType";
        /**
         * 枚举
         */
        SchemaEntityFieldType$Type["EnumType"] = "EnumType";
        /**
         * 实体类
         */
        SchemaEntityFieldType$Type["EntityType"] = "EntityType";
        /**
         * 分级码
         */
        SchemaEntityFieldType$Type["HierarchyType"] = "HierarchyType";
        /**
         * 对象
         */
        SchemaEntityFieldType$Type["ObjectType"] = "ObjectType";
        /**
         * 数字（大数据）
         */
        SchemaEntityFieldType$Type["BigNumericType"] = "BigNumericType";
    })(exports.SchemaEntityFieldType$Type || (exports.SchemaEntityFieldType$Type = {}));
    (function (SchemaEntityFieldTypeName) {
        /**
         * 简单类型字段
         */
        SchemaEntityFieldTypeName["String"] = "String";
        /**
         * 日期时间
         */
        SchemaEntityFieldTypeName["DateTime"] = "DateTime";
        /**
         * 日期
         */
        SchemaEntityFieldTypeName["Date"] = "Date";
        /**
         * 枚举
         */
        SchemaEntityFieldTypeName["Enum"] = "Enum";
        /**
         * 布尔
         */
        SchemaEntityFieldTypeName["Boolean"] = "Boolean";
        /**
         * 数字
         */
        SchemaEntityFieldTypeName["Number"] = "Number";
        /**
         * 备注
         */
        SchemaEntityFieldTypeName["Text"] = "Text";
        /**
         * 大数字
         */
        SchemaEntityFieldTypeName["BigNumber"] = "BigNumber";
    })(exports.SchemaEntityFieldTypeName || (exports.SchemaEntityFieldTypeName = {}));

    /**
     * 实体类型工厂
     * 用来根据实体Schema描述信息创建实体类型
     */
    var EntityTypeFactory = /** @class */ (function () {
        function EntityTypeFactory() {
        }
        /**
         * 由实体Schema结构创建实体类型
         * @param schema 实体Schema结构
         * @returns 实体类型
         */
        EntityTypeFactory.prototype.create = function (schema) {
            // 提取Schema定义中的第一个是实体描述
            var schemaType = schema.entities[0].type;
            // 创建实体类型
            var entityType = this.createClass(schemaType, schema.entities[0]);
            return entityType;
        };
        /**
         * 由实体Schema类型描述创建实体类
         * @param schemaType Schema实体类型描述
         * @returns 实体类型
         */
        EntityTypeFactory.prototype.createClass = function (schemaType, relateSchema) {
            var attachEntityInstanceData = this.createEntityInstanceDataInitializer(schemaType);
            // 创建指定实体类型的初始化函数，用来在实体类型构造函数中为实体实例赋值
            var initialize = function (entityInstance, entityData, entityTypeConstructor) {
                entityInstance.isInitializing = true;
                attachEntityInstanceData(entityInstance, entityData, entityTypeConstructor);
                entityInstance.isInitializing = false;
            };
            // 声明实体类构造函数
            var ConcreteEntity = function (data) {
                var _this = this;
                // 创建实体变更集
                this.changeSet = new ChangeSet();
                // 初始化实体验证状态
                this.isValidating = false;
                // 设置unsubscribe 取消订阅事件
                this.unsubscribe = new rxjs.Subject();
                // 初始化实体验证信息
                this.validErrors = {};
                // 初始化验证器
                this.validator = new Validator();
                // 初始化实体数据副本
                this.innerData = Object.assign({}, data);
                // 初始化子实体对象集合
                this.innerEntities = {};
                // 初始化实体值变化事件
                this.valueChanged = new rxjs.Subject();
                this.onValueChanged = this.valueChanged;
                this.validateFromUtilSync = function (propertyName, value, cb, context) {
                    this.validErrors = {};
                    var result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);
                    if (result && !result.isValid) {
                        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
                    }
                    cb(result);
                };
                // 调用初始化方法，初始化实体数据
                initialize(this, data, ConcreteEntity);
                this.load = function (newData) {
                    attachEntityInstanceData(_this, newData, ConcreteEntity);
                    _this.data = newData;
                };
            };
            // 在实体类构造函数中记录视图类型名称
            ConcreteEntity.typeName = schemaType.name + "Entity";
            ConcreteEntity.code = relateSchema.code;
            ConcreteEntity.label = relateSchema.label;
            // 在实体类构造函数中记录其下直接引用的子类型
            ConcreteEntity.types = {};
            ConcreteEntity.__prop__metadata__ = {};
            // 构造实体类的原型对象
            var entityTypePrototype = Object.assign({ typeName: 'ConcreteEntityPrototype' }, entityPrototype);
            // 向实体类原型对象中定义预制属性
            this.definePresetProperty(entityTypePrototype, schemaType);
            // 向实体类原型对象中定义字段属性get/set方法
            this.defineFieldsToPrototype(entityTypePrototype, schemaType.fields, schemaType.primary, ConcreteEntity);
            // 向实体类原型对象中定义访问子实体的get/set方法
            this.defineEntitiesToPrototype(entityTypePrototype, schemaType.entities, ConcreteEntity);
            // 将实体类的原型对象指向新构造的原型对象。
            ConcreteEntity.prototype = entityTypePrototype;
            return ConcreteEntity;
        };
        /**
         * 向实体类原型对象中定义预制属性
         * @param prototypeObject 实体类原型对象
         * @param schemaType Schema类型描述
         */
        EntityTypeFactory.prototype.definePresetProperty = function (prototypeObject, schemaType) {
            /**
             * 实体数据
             */
            Object.defineProperty(prototypeObject, 'data', {
                get: function () {
                    if (!this.innerData) {
                        this.innerData = {};
                    }
                    return this.innerData;
                },
                set: function (value) {
                    this.innerData = value;
                }
            });
            /**
             * 实体验证信息
             */
            Object.defineProperty(prototypeObject, 'errors', {
                get: function () {
                    return this.validErrors;
                },
                set: function (errors) {
                    this.validErrors = errors;
                }
            });
            /**
             * 实体变更集
             */
            Object.defineProperty(prototypeObject, 'changes', {
                get: function () {
                    return this.changeSet.changes;
                }
            });
            /**
             * 实体主键
             */
            Object.defineProperty(prototypeObject, 'primaryProperty', {
                // tslint:disable-next-line: only-arrow-functions
                get: function () {
                    // return schemaType.primary;
                    return prototypeObject.innerPrimaryProperty || { dataField: schemaType.primary };
                }
            });
            /**
             * 实体主键
             */
            Object.defineProperty(prototypeObject, 'primaryKey', {
                // tslint:disable-next-line: only-arrow-functions
                get: function () {
                    return schemaType.primary || '';
                }
            });
            /**
             * 实体主键的值
             */
            Object.defineProperty(prototypeObject, 'primaryValue', {
                get: function () {
                    if (this.primaryKey) {
                        // return this[this.primaryProperty.property].toString();
                        var primaryValue = this[this.primaryKey];
                        return primaryValue ? primaryValue : '';
                    }
                    else {
                        return '';
                    }
                }
            });
        };
        /**
         * 向实体类定义字段属性
         * @param prototypeObject 实体类原型对象
         * @param fields 字段描述集合
         * @param parentEntityType 父类型
         */
        EntityTypeFactory.prototype.defineFieldsToPrototype = function (prototypeObject, fields, primary, parentEntityType) {
            var _this = this;
            if (fields && fields.length) {
                // 遍历Schema中描述的字段，在实体原型对象上定义字段访问函数
                fields.forEach(function (schemaEntityField) {
                    switch (schemaEntityField.$type) {
                        // 定义简单类型字段
                        case exports.SchemaEntityField$Type.SimpleField:
                            _this.defineSimpleFieldToPrototype(prototypeObject, schemaEntityField, primary, parentEntityType);
                            break;
                        // 定义复杂类型字段
                        case exports.SchemaEntityField$Type.ComplexField:
                            _this.defineComplexFieldToPrototype(prototypeObject, schemaEntityField, parentEntityType);
                            break;
                    }
                });
            }
        };
        /**
         * 向实体类定义简单类型字段
         * @param prototypeObject 实体类原型对象
         * @param schemaField 字段描述
         */
        EntityTypeFactory.prototype.defineSimpleFieldToPrototype = function (prototypeObject, schemaField, primary, parentEntityType) {
            var propertyName = schemaField.label;
            Object.defineProperty(prototypeObject, propertyName, {
                get: function () {
                    return this.getFieldValue(schemaField);
                },
                set: function (newPropValue) {
                    // 值相同时不触发变更。
                    var oldPropValue = this.getFieldValue(schemaField);
                    if (this.isFieldValueChanged(schemaField, newPropValue, oldPropValue) === false) {
                        return;
                    }
                    this.setFieldValue(schemaField, newPropValue);
                    this.emitFieldValueChange(schemaField, newPropValue, oldPropValue);
                }
            });
            var fieldMetadata = {
                /** 字段名称 */
                dataField: this.getDataField(schemaField),
                /** 原始字段名称 */
                originalDataField: schemaField.code,
                /** 原始字段类型 */
                originalDataFieldType: schemaField.type.name,
                /**
                 * 原始字段
                 * @description 对应到scheme的path属性
                 */
                path: schemaField.path,
                primary: schemaField.label === primary,
                enableMultiLangInput: this.getEnableMultiLangInput(schemaField),
                defaultValue: schemaField.defaultValue,
                ngMetadataName: NG_FIELD
            };
            if (schemaField['enableStdTimeFormat'] && fieldMetadata.originalDataFieldType == "DateTime") {
                fieldMetadata["enableTimeZone"] = true;
            }
            if (fieldMetadata.primary) {
                prototypeObject.innerPrimaryProperty = fieldMetadata;
            }
            if (!parentEntityType.__prop__metadata__[propertyName]) {
                parentEntityType.__prop__metadata__[propertyName] = [];
            }
            parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);
        };
        EntityTypeFactory.prototype.getDataField = function (schemaField) {
            if (schemaField.multiLanguage) {
                return schemaField.label + "_" + "MULTILANGUAGE";
            }
            return schemaField.label;
        };
        EntityTypeFactory.prototype.getEnableMultiLangInput = function (schemaField) {
            if (schemaField.multiLanguage) {
                return true;
            }
        };
        /**
         * 向实体类定义复杂类型字段
         * @param prototypeObject 实体类原型对象
         * @param schemaField 字段描述
         * @param parentEntityType 父类型
         */
        EntityTypeFactory.prototype.defineComplexFieldToPrototype = function (prototypeObject, schemaField, parentEntityType) {
            var complexFieldType = this.createClass(schemaField.type, schemaField);
            parentEntityType.types[schemaField.type.name] = complexFieldType;
            var propertyName = schemaField.label;
            Object.defineProperty(prototypeObject, propertyName, {
                get: function () {
                    var fieldValue = this.getComplexFieldValue(schemaField);
                    return fieldValue;
                },
                set: function (value) {
                    this.setComplexFieldValue(schemaField, complexFieldType, value);
                }
            });
            var fieldMetadata = {
                /** 映射字段 */
                dataField: schemaField.label,
                /** 原始字段名称 */
                originalDataField: schemaField.code,
                /** 引用实体类型 */
                type: complexFieldType,
                /**
                 * 原始字段
                 * @description 对应到scheme的path属性
                 */
                path: schemaField.path,
                ngMetadataName: NG_OBJECT
            };
            if (!parentEntityType.__prop__metadata__[propertyName]) {
                parentEntityType.__prop__metadata__[propertyName] = [];
            }
            parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);
        };
        /**
         * 向实体类定义子实体
         * @param prototypeObject 实体类原型对象
         * @param entities 实体描述集合
         * @param parentEntityType 父类型
         */
        EntityTypeFactory.prototype.defineEntitiesToPrototype = function (prototypeObject, entities, parentEntityType) {
            var _this = this;
            if (entities && entities.length) {
                // 遍历Schema中描述的子实体，在实体对象上定义子实体列表
                entities.forEach(function (schemaEntity) {
                    var complexFieldType = _this.createClass(schemaEntity.type, schemaEntity);
                    parentEntityType.types[schemaEntity.type.name] = complexFieldType;
                    // 提取子实体在实体对象上的属性名
                    var propertyName = schemaEntity.label;
                    Object.defineProperty(prototypeObject, propertyName, {
                        get: function () {
                            var fieldValue = this.getEntities(schemaEntity);
                            return fieldValue;
                        },
                        set: function (value) {
                            this.setEntities(schemaEntity, value);
                        }
                    });
                    var entitMetadata = {
                        /** 字段名称 */
                        dataField: schemaEntity.label,
                        /** 原始字段名称 */
                        originalDataField: '',
                        /** 实体类型 */
                        type: complexFieldType,
                        ngMetadataName: NG_LIST
                    };
                    if (!parentEntityType.__prop__metadata__[propertyName]) {
                        parentEntityType.__prop__metadata__[propertyName] = [];
                    }
                    parentEntityType.__prop__metadata__[propertyName].push(entitMetadata);
                });
            }
        };
        /**
         * 创建初始化实体对象方法
         * @param schemaType 实体类型描述
         * @returns 初始化实体对象方法
         */
        EntityTypeFactory.prototype.createEntityInstanceDataInitializer = function (schemaType) {
            /**
             * 实体初始化函数，用来初始化实体的复杂类型数据和子实体数据
             * @param entityInstance 实体类型实例
             * @param data 实体原始数据
             * @param entityTypeConstructor 实体类型构造函数
             */
            var initializer = function (entityInstance, entityData, entityTypeConstructor) {
                // 初始化复杂类型字段
                schemaType.fields
                    // 过滤复杂类型字段
                    .filter(function (field) { return field.$type === exports.SchemaEntityField$Type.ComplexField; })
                    // 遍历复杂类型字段创建对应实体类型数据
                    .forEach(function (field) {
                    // 提取字段名
                    var fieldName = field.label;
                    // 提取实体类型下的所有子实体类型
                    var includedEntityTypes = entityTypeConstructor.types;
                    // 获取复杂类型字段对应的实体类型
                    var ComplexField = includedEntityTypes[field.type.name];
                    // 提取复杂类型字段原始数据
                    var fieldData = entityData ? entityData[fieldName] : null;
                    // 创建复杂类型字段对象路径
                    var path = entityInstance.createPath(fieldName);
                    var complexFieldValue = entityInstance[fieldName];
                    if (complexFieldValue instanceof ComplexField) {
                        complexFieldValue.load(fieldData);
                    }
                    else {
                        // 创建复杂类型字段实体实例
                        complexFieldValue = new ComplexField(fieldData);
                        complexFieldValue.constructor = ComplexField;
                        complexFieldValue[PARENT_CLASS] = entityInstance;
                        complexFieldValue[PARENT_PATH] = path;
                        complexFieldValue.onValueChanged.subscribe(function (changes) {
                            if (changes) {
                                changes.path = (entityInstance[PARENT_PATH] || []).concat(changes.path);
                                var modification = __assign({}, changes, { fromParent: true });
                                entityInstance.setChanges(modification);
                            }
                        });
                        entityInstance[fieldName] = complexFieldValue;
                    }
                });
                // 初始化子实体
                if (schemaType.entities) {
                    // 遍历子实体创建对应实体类型的数据
                    schemaType.entities.forEach(function (schemaEntity) {
                        // 提取子实体名
                        var subEntityName = schemaEntity.label;
                        // 提取实体类型下的所有子实体类型
                        var includedEntityTypes = entityTypeConstructor.types;
                        // 创建子实体对象路径
                        var path = entityInstance.createPath(subEntityName);
                        // 创建子实体对象集合
                        var entityList = entityInstance[subEntityName];
                        if (!(entityList instanceof EntityList)) {
                            entityList = new EntityList();
                            // 向子实体列表注册子实体变化事件
                            entityList.onListChanged.subscribe(function (value) {
                                if (value) {
                                    if (entityList[PARENT_PATH][0] !== value.path[0]) {
                                        value.path = entityList[PARENT_PATH].concat(value.path);
                                    }
                                    entityInstance.setChanges(value);
                                }
                            });
                            // 向实体类型实例上直接存储子实体对象列表
                            entityInstance[subEntityName] = entityList;
                        }
                        entityList[PARENT_CLASS] = entityTypeConstructor;
                        entityList[PARENT_PATH] = path;
                        // 提取子实体类型名称
                        var schemaEntityTypeName = schemaEntity.type.name;
                        // 获取子实体类型
                        var ConcreteEntity = includedEntityTypes[schemaEntityTypeName];
                        var originalEntityDataArray = entityData ? entityData[subEntityName] : null;
                        // 构造子实体集合
                        if (originalEntityDataArray) {
                            // 遍历子实体原始数据，构造实体对象集合
                            var entities = originalEntityDataArray.map(function (originalEntityData) {
                                var concreteEntityInstance = new ConcreteEntity(originalEntityData);
                                concreteEntityInstance.constructor = ConcreteEntity;
                                return concreteEntityInstance;
                            });
                            // 向子实体列表中添加子实体对象
                            entityList.loadEntities(entities);
                        }
                    });
                }
                // 初始化简单字段
                schemaType.fields
                    // 过滤复杂类型字段
                    .filter(function (field) { return field.$type === exports.SchemaEntityField$Type.SimpleField; })
                    // 遍历复杂类型字段创建对应实体类型数据
                    .forEach(function (field) {
                    // 提取字段名
                    var fieldName = field.label;
                    var propValue = entityData ? entityData[fieldName] : null;
                    if (field['enableTimeZone'] === true) {
                        var timeZoneOffset = UserSettingsService.getTimeZoneOffset();
                        if (timeZoneOffset !== null && propValue) {
                            propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);
                        }
                    }
                    entityInstance[fieldName] = propValue;
                });
            };
            return initializer;
        };
        return EntityTypeFactory;
    }());

    /* eslint-disable new-cap */
    var RestfulService = /** @class */ (function () {
        /**
         * 构造函数
         * @param httpClient http客户端
         */
        function RestfulService(httpClient) {
            this.httpClient = httpClient;
        }
        /**
         * 发送GET请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        RestfulService.prototype.get = function (uri, params, options) {
            return this.request(uri, 'GET', params, options);
        };
        /**
         * 发送POST请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        RestfulService.prototype.put = function (uri, body, params, options) {
            var optionsWithBody = this.addBody(options, body);
            return this.request(uri, 'PUT', params, optionsWithBody);
        };
        /**
         * 发送PUT请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        RestfulService.prototype.post = function (uri, body, params, options) {
            var optionsWithBody = this.addBody(options, body);
            return this.request(uri, 'POST', params, optionsWithBody);
        };
        /**
         * 发送DELETE请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        RestfulService.prototype.delete = function (uri, params, options) {
            return this.request(uri, 'DELETE', params, options);
        };
        /**
         * 发送请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        RestfulService.prototype.request = function (uri, method, params, options) {
            if (options === void 0) {
                options = {};
            }
            options = options || {};
            if (params) {
                var httpParams = this.buildParams(params);
                options.params = httpParams;
            }
            var methodName = method;
            uri = rtf.BasePathService.convertPath(uri);
            var result = this.httpClient.request(methodName, uri, options);
            return result;
        };
        /**
         * 构造Http请求参数
         * @param params 请求参数
         */
        RestfulService.prototype.buildParams = function (params) {
            var httpParams = new http.HttpParams();
            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    var value = params[key].toString();
                    httpParams = httpParams.append(key, value);
                }
            }
            return httpParams;
        };
        RestfulService.prototype.addBody = function (options, body) {
            options = options || {};
            var mergedOptions = Object.assign(options, { body: body });
            return mergedOptions;
        };
        RestfulService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RestfulService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return RestfulService;
    }());

    /**
     * ----------------------------------------
     * NgCommandHandler
     * ----------------------------------------
     */
    /**
     * 命令处理装饰器名称
     */
    var NG_COMMAND_HANDLER = 'NgCommandHandler';
    /**
     * 命令处理装饰器工厂
     */
    // export const NgCommandHandler: NgCommandHandlerDecorator =
    //   makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);
    function NgCommandHandler(options) {
        var decoratorFactory = makeDecorator(NG_COMMAND_HANDLER, function (handler) { return handler; });
        return decoratorFactory(options);
    }
    /**
     * ----------------------------------------
     * NgCommandHandlerExtender
     * ----------------------------------------
     */
    /**
     * 命令处理扩展装饰器名称
     */
    var NG_COMMAND_HANDLER_EXTENDER = 'NgCommandHandlerExtender';
    /**
     * 命令处理扩展装饰器工厂
     */
    function NgCommandHandlerExtender(options) {
        var decoratorFactory = makeDecorator(NG_COMMAND_HANDLER_EXTENDER, function (extender) { return extender; });
        return decoratorFactory(options);
    }

    /*
     * @Author: aalizzwell
     * @Date: 2019-10-25 13:30:52
     * @Last Modified by:   aalizzwell
     * @Last Modified time: 2019-10-25 13:30:52
     */
    var isObservable = function (value) {
        if (!value) {
            return false;
        }
        if (value[Symbol.observable] && value === value[Symbol.observable]()) {
            return true;
        }
        if (value['@@observable'] && value === value['@@observable']()) {
            return true;
        }
        if (value instanceof rxjs.Observable) {
            return true;
        }
        return false;
    };

    /**
     * 任务节点
     */
    var TaskNode = /** @class */ (function () {
        /**
         * 构造函数
         */
        function TaskNode(name, func) {
            this.name = name;
            this.func = func;
        }
        /**
         * 执行任务函数
         */
        TaskNode.prototype.execute = function (context) {
            var result = this.func(context);
            var result$ = isObservable(result) ? result : rxjs.of(result);
            return result$;
        };
        return TaskNode;
    }());

    /**
     * session变量解析
     * @author Witt <jiwt@inspur.com>
     */
    var VARIABLE_PARSERS = new core.InjectionToken('variable parsers');

    /*
     * StateMachine变量解析
     * @Author: Witt
     * @Date: 2018-12-04 17:09:42
     * @Last Modified by: Witt
     * @Last Modified time: 2019-10-30 11:07:10
     */
    // import { AppContext } from '../app/index';
    // import { FrameContext } from '../frame/index';
    // import { CommandContext } from '../command/index';
    /**
     * 解析辅助工具类
     */
    var ParseUtil = /** @class */ (function () {
        function ParseUtil() {
        }
        /**
         * 获取应用上下文
         */
        ParseUtil.getAppContext = function (context) {
            if (context.typeName === 'CommandContext') {
                return context.frameContext.appContext;
            }
            else if (context.appContext) {
                return context.appContext;
            }
            else if (context.typeName === 'AppContext') {
                return context;
            }
            else {
                throw new Error('上下文中找不到AppContext，请检查！');
            }
        };
        /**
         * 获取当前Frame的Context
         */
        ParseUtil.getFrameContext = function (context) {
            if (context.typeName === 'CommandContext') {
                return context.frameContext;
            }
            else if (context.typeName === 'FrameContext') {
                return context;
            }
            else {
                throw new Error('上下文中找不到FrameContext，请检查！');
            }
        };
        /**
         * 获取根Frame的Context
         */
        ParseUtil.getRootFrameContext = function (context) {
            var frameContext = this.getFrameContext(context);
            return frameContext.root;
        };
        /**
         * 根据frameId获取FrameContext
         */
        ParseUtil.getFrameContextById = function (context, frameId) {
            var appContext = this.getAppContext(context);
            return appContext.frameContextManager.getFrameContextById(frameId);
        };
        return ParseUtil;
    }());

    /**
     * 数据源变量解析
     * @author Witt <jiwt@inspur.com>
     */
    /**
     * 数据变量解析
     */
    var DataVariableParser = /** @class */ (function () {
        function DataVariableParser() {
        }
        /**
         * 解析变量
         * @param expression 表达式
         * @param context 上下文
         */
        DataVariableParser.prototype.parse = function (expression, context) {
            var _this = this;
            var appContext = ParseUtil.getAppContext(context);
            var paths = this.extractPaths(expression);
            if (paths.length === 1) {
                var value = this.getValue(paths[0], appContext);
                // 1、单个的表达式：直接求值
                if (expression === "{DATA~" + paths[0] + "}") {
                    return value;
                }
                else if (expression === "{:DATA~" + paths[0] + "}") {
                    // 该内容是JSON的一部分，需要转义特殊字符
                    return escape(value);
                }
            }
            // 2、其他情况：字符串替换
            paths.forEach(function (path) {
                var replaceValue = _this.getValue(path, appContext);
                var searchValue = "{DATA~" + path + "}";
                expression = expression.replace(searchValue, replaceValue);
                var target = "{:DATA~" + path + "}";
                if (expression.includes(target)) {
                    var value = escape(replaceValue);
                    expression = expression.replace(target, value);
                }
            });
            return expression;
        };
        /**
         * 提取路径
         */
        DataVariableParser.prototype.extractPaths = function (expression) {
            var paths = [];
            // 查找所有的uiState变量字符串
            var DATA_PATTERN_G = /\{:?DATA~(\S+?)\}/g;
            var dataVariables = expression.match(DATA_PATTERN_G);
            if (dataVariables === null) {
                return [];
            }
            // 提取后边的路径
            var DATA_PATTERN = /\{:?DATA~(\S+?)\}/;
            dataVariables.forEach(function (dataVariable) {
                var pathMatches = dataVariable.match(DATA_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    paths.push(pathMatches[1]);
                }
            });
            return paths;
        };
        /**
         * 获取值
         * @param path 路径：/
         */
        DataVariableParser.prototype.getValue = function (path, appContext) {
            var parts = path.split('/').filter(function (part) {
                return part !== '';
            });
            var frameContext = appContext.getFrameContext(parts[0]);
            if (!frameContext) {
                throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
            }
            var bindingData = frameContext.bindingData;
            if (!bindingData) {
                throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
            }
            return bindingData.getValue(parts.slice(1));
        };
        DataVariableParser.decorators = [
            { type: core.Injectable }
        ];
        return DataVariableParser;
    }());

    /**
     * session变量解析
     * @author Witt <jiwt@inspur.com>
     */
    /**
     * 数据变量解析
     */
    var UIStateVariableParser = /** @class */ (function () {
        function UIStateVariableParser() {
        }
        /**
         * 解析变量
         * @param expression 形如：/frameId/stateName
         * @param context 上下文
         */
        UIStateVariableParser.prototype.parse = function (expression, context) {
            var _this = this;
            var appContext = ParseUtil.getAppContext(context);
            var paths = this.extractPaths(expression);
            if (paths.length === 1) {
                var value = this.getUIState(paths[0], appContext);
                // 1、单个的表达式：直接求值
                if (expression === "{UISTATE~" + paths[0] + "}") {
                    return value;
                }
                else if (expression === "{:UISTATE~" + paths[0] + "}") {
                    return escape(value);
                }
            }
            // 2、其他情况：字符串替换
            paths.forEach(function (path) {
                var searchValue = "{UISTATE~" + path + "}";
                var replaceValue = _this.getUIState(path, appContext);
                expression = expression.replace(searchValue, replaceValue);
                var target = "{:UISTATE~" + path + "}";
                if (expression.includes(target)) {
                    var value = escape(replaceValue);
                    expression = expression.replace(target, value);
                }
            });
            return expression;
        };
        /**
         * 提取路径
         * 变量格式：{}
         */
        UIStateVariableParser.prototype.extractPaths = function (expression) {
            var paths = [];
            // 查找所有的uiState变量字符串
            var UI_STATE_PATTERN_G = /\{:?UISTATE~(\S+?)\}/g;
            var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
            if (uiStateVariables === null) {
                return [];
            }
            // 提取后边的路径
            var UI_STATE_PATTERN = /\{:?UISTATE~(\S+?)\}/;
            uiStateVariables.forEach(function (uiStateVariable) {
                var pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    paths.push(pathMatches[1]);
                }
            });
            return paths;
        };
        /**
         * 获取UIState
         */
        UIStateVariableParser.prototype.getUIState = function (path, appContext) {
            var parts = path.split('/').filter(function (part) {
                return part !== '';
            });
            var _a = __read(parts, 2), frameId = _a[0], stateName = _a[1];
            var frameContext = appContext.getFrameContext(frameId);
            var state = frameContext && frameContext.uiState[stateName];
            if (state && state.constructor.toString().startsWith('function Date()')) {
                return this.formatDate(state);
            }
            for (var i = 2; i < parts.length; i++) {
                state = state[parts[i]];
                // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。
                if (!state) {
                    return state;
                }
            }
            return state;
        };
        /**
         * @todo：待删除
         */
        UIStateVariableParser.prototype.formatDate = function (value) {
            if (!value) {
                return '';
            }
            // 年
            var year = value.getFullYear();
            // 月
            var month = (value.getMonth() + 1).toString();
            month = month.length === 1 ? ('0' + month) : month;
            // 日
            var day = value.getDate().toString();
            day = day.length === 1 ? ('0' + day) : day;
            return year + "-" + month + "-" + day;
        };
        UIStateVariableParser.decorators = [
            { type: core.Injectable }
        ];
        return UIStateVariableParser;
    }());

    /*
     * StateMachine变量解析
     * @Author: Witt
     * @Date: 2018-12-04 17:09:42
     * @Last Modified by: Witt
     * @Last Modified time: 2019-10-30 11:07:10
     */
    /**
     * 状态机变量解析
     * @summary
     *
     * 解析策略：
     * 1、不带frameId，从顶层StateMachine中解析
     * {STATEMACHINE~/states/key}
     * {STATEMACHINE~/renderStates/key}
     *
     * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析
     * {STATEMACHINE~/frameId/states/key}
     * {STATEMACHINE~/frameId/renderStates/key}
     *
     * 存在的问题：
     * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；
     * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；
     * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。
     */
    var StateMachineVariableParser = /** @class */ (function () {
        /**
         * 构造函数
         */
        function StateMachineVariableParser() {
        }
        /**
         * 解析变量
         * @param expression 变量：格式形如：/frameId/componentId/stateName
         * @param context 上下文
         */
        StateMachineVariableParser.prototype.parse = function (expression, context) {
            var _this = this;
            var paths = this.extractPaths(expression);
            // 1、单个的表达式：直接求值
            if (paths.length === 1 && expression === "{STATEMACHINE~" + paths[0] + "}") {
                return this.getValue(paths[0], context);
            }
            // 2、其他情况：字符串替换
            paths.forEach(function (path) {
                var searchValue = "{STATEMACHINE~" + path + "}";
                var replaceValue = _this.getValue(path, context);
                expression = expression.replace(searchValue, replaceValue);
            });
            return expression;
        };
        /**
         * 提取Session变量名
         * 变量格式：{}
         */
        StateMachineVariableParser.prototype.extractPaths = function (expression) {
            var paths = [];
            // 查找所有的StateMachine变量字符串
            var STATE_MACHINE_PATTERN_G = /\{STATEMACHINE~(\S+?)\}/g;
            var stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);
            if (stateMachineVariables === null) {
                return [];
            }
            // 提取后边的路径
            var STATE_MACHINE_PATTERN = /\{STATEMACHINE~(\S+?)\}/;
            stateMachineVariables.forEach(function (sessionVariable) {
                var pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    paths.push(pathMatches[1]);
                }
            });
            return paths;
        };
        /**
         * 获取对应的值
         */
        StateMachineVariableParser.prototype.getValue = function (path, context) {
            var pathObj = this.getPathObj(path);
            var stateMachine = this.getTargetStateMachine(pathObj.frameId, context);
            if (pathObj.type === 'currentState') {
                return stateMachine.context.state;
            }
            else if (pathObj.type === 'renderStates') {
                return stateMachine[pathObj.name];
            }
            else {
                throw new Error("\u4E0D\u652F\u7C7B\u578B\u4E3A" + pathObj.type + "\u7684\u72B6\u6001\u673A\u53D8\u91CF");
            }
        };
        /**
         * 解析path，并获取对应的StateMachine实例
         */
        StateMachineVariableParser.prototype.getTargetStateMachine = function (frameId, context) {
            var targetFrameContext;
            if (frameId) {
                targetFrameContext = ParseUtil.getFrameContextById(context, frameId);
            }
            else {
                targetFrameContext = ParseUtil.getRootFrameContext(context);
            }
            if (!targetFrameContext || !targetFrameContext.stateMachine) {
                throw new Error('找不到对应的状态机实例，请检查！');
            }
            return targetFrameContext.stateMachine;
        };
        /**
         * 将Path解析为格式化的Path对象
         */
        StateMachineVariableParser.prototype.getPathObj = function (path) {
            var parsedPathObj;
            var parts = this.splitPath(path);
            if (parts[0] === 'currentState' || parts[0] === 'renderStates') {
                parsedPathObj = {
                    frameId: '',
                    type: parts[0],
                    name: parts[1]
                };
            }
            else {
                parsedPathObj = {
                    frameId: parts[0],
                    type: parts[1],
                    name: parts[2]
                };
            }
            return parsedPathObj;
        };
        /**
         * 分隔Path
         */
        StateMachineVariableParser.prototype.splitPath = function (path) {
            var parts = path.split('/').filter(function (part) {
                return part !== '';
            });
            return parts;
        };
        StateMachineVariableParser.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        StateMachineVariableParser.ctorParameters = function () { return []; };
        return StateMachineVariableParser;
    }());

    /**
     * session变量解析
     * @author Witt <jiwt@inspur.com>
     */
    /**
     * 命令变量解析
     * {COMMAND~/params/key}
     * {COMMAND~/results/taskName}
     */
    var CommandVariableParser = /** @class */ (function () {
        /**
         * 构造函数
         */
        function CommandVariableParser() {
        }
        /**
         * 解析变量
         * @param expression 变量：格式形如：/frameId/componentId/stateName
         * @param context 上下文
         */
        CommandVariableParser.prototype.parse = function (expression, context) {
            var _this = this;
            var paths = this.extractPaths(expression);
            // 1、单个的表达式：直接求值
            if (paths.length === 1 && expression === "{COMMAND~" + paths[0] + "}") {
                return this.getValue(paths[0], context);
            }
            // 2、其他情况：字符串替换
            paths.forEach(function (path) {
                var searchValue = "{COMMAND~" + path + "}";
                var replaceValue = _this.getValue(path, context);
                expression = expression.replace(searchValue, replaceValue);
            });
            return expression;
        };
        /**
         * 提取Session变量名
         * 变量格式：{}
         */
        CommandVariableParser.prototype.extractPaths = function (expression) {
            var paths = [];
            // 查找所有的uiState变量字符串
            var UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
            var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
            if (uiStateVariables === null) {
                return [];
            }
            // 提取后边的路径
            var UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
            uiStateVariables.forEach(function (sessionVariable) {
                var pathMatches = sessionVariable.match(UI_STATE_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    paths.push(pathMatches[1]);
                }
            });
            return paths;
        };
        /**
         * 获取UIState
         */
        CommandVariableParser.prototype.getValue = function (path, context) {
            if (context instanceof CommandContext === false) {
                throw new Error('当前上下文不支持COMMAND变量，请检查！');
            }
            var parts = path.split('/').filter(function (part) {
                return part !== '';
            });
            var type = parts.shift();
            if (type === 'params') {
                var paramKey = parts.shift();
                return context.command.params[paramKey];
            }
            else if (type === 'results') {
                return parts.reduce(function (results, paramKey) {
                    return results && results[paramKey];
                }, context.results);
            }
        };
        CommandVariableParser.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommandVariableParser.ctorParameters = function () { return []; };
        return CommandVariableParser;
    }());

    /**
     * 变量解析服务
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * 变量解析服务
     * 职责：
     * 1、解析字符串中的变量，并替换成相应的值；
     * 2、对表达式进行求值。
     *
     * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？
     */
    var VariableParseService = /** @class */ (function () {
        /**
         * 构造变量解析服务
         * @param parsers 解析器集合
         */
        function VariableParseService(parsers) {
            this.parsers = parsers;
        }
        /**
         * 解析表达式
         * @param expression 表达式
         * @param context 上下文
         */
        VariableParseService.prototype.parse = function (target, context, eventParam) {
            var _this = this;
            if (typeof target === 'string' && target.length > 0) {
                // 字符串，直接解析
                return this.parseExpression(target, context, eventParam);
            }
            else if (Array.isArray(target)) {
                // 遍历数组
                target.forEach(function (item, itemIndex) {
                    if (typeof item === 'string') {
                        target[itemIndex] = _this.parseExpression(item, context, eventParam);
                    }
                    else {
                        target[itemIndex] = _this.parse(item, context, eventParam);
                    }
                });
            }
            else if (typeof target === 'object' && target !== null) {
                // 遍历对象可枚举属性
                var keys = Object.keys(target);
                keys.forEach(function (key) {
                    if (typeof target[key] === 'string') {
                        target[key] = _this.parseExpression(target[key], context, eventParam);
                    }
                    else {
                        target[key] = _this.parse(target[key], context, eventParam);
                    }
                });
            }
            return target;
        };
        /**
         * 表达式求值
         */
        VariableParseService.prototype.evaluate = function (expression, context, eventParam) {
            var parsedExpression = this.parse(expression, context, eventParam);
            return (new Function('return ' + parsedExpression))();
        };
        /**
         * 解析表达式
         * @param expression 表达式
         * @param context 上下文
         */
        VariableParseService.prototype.parseExpression = function (expression, context, eventParam) {
            // 空串直接返回
            if (expression === '') {
                return '';
            }
            this.parsers.forEach(function (parser) {
                if (typeof expression === 'string') {
                    expression = parser.parse(expression, context, eventParam);
                }
            });
            return expression;
        };
        VariableParseService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        VariableParseService.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Inject, args: [VARIABLE_PARSERS,] }] }
            ];
        };
        return VariableParseService;
    }());

    /**
     * session变量解析
     * @author Witt <jiwt@inspur.com>
     */
    var VARIABLE_MATCHER = /#{\S+?}/g;
    /**
     * 数据变量解析
     */
    var FrameIdVariableParser = /** @class */ (function () {
        function FrameIdVariableParser() {
        }
        /**
         * 解析变量
         * @param expression 形如：/#{root-component}/stateName
         * @param context 上下文
         */
        FrameIdVariableParser.prototype.parse = function (expression, context) {
            var _this = this;
            this.context = context;
            var variables = this.extractVariables(expression);
            if (!variables || variables.length < 1) {
                return expression;
            }
            variables.forEach(function (exp) {
                var frameId = _this.getVariableValue(exp);
                expression = expression.replace(VARIABLE_MATCHER, frameId);
            });
            return expression;
        };
        /**
         * 计算表达式的值
         * @param expression like #{root-component}
         */
        FrameIdVariableParser.prototype.getVariableValue = function (expression) {
            var relativeFrameId = expression.substring(2, expression.length - 1);
            return this.getFullFrameId(relativeFrameId);
        };
        FrameIdVariableParser.prototype.extractVariables = function (expression) {
            if (!expression) {
                return [];
            }
            return expression.match(VARIABLE_MATCHER);
        };
        /**
         * 获取补全的frameId
         * @param frameId frameId
         */
        FrameIdVariableParser.prototype.getFullFrameId = function (frameId) {
            var frameContext = ParseUtil.getFrameContext(this.context);
            var namespace = frameContext.namespace || '';
            var prefix = namespace ? namespace + "_" : '';
            return "" + prefix + frameId;
        };
        FrameIdVariableParser.decorators = [
            { type: core.Injectable }
        ];
        return FrameIdVariableParser;
    }());

    var FORM_STATES_EXP = /\{FORMSTATE~\/(\S+?)\}/g;
    var FORM_STATE_EXP = /\{FORMSTATE~\/(\S+?)\}/;
    var FormStateVariableParser = /** @class */ (function () {
        function FormStateVariableParser() {
        }
        /**
         * 解析表达式变量
         */
        FormStateVariableParser.prototype.parse = function (expression, context) {
            var _this = this;
            this.context = context;
            var variables = this.extractVariables(expression);
            if (!variables || variables.length < 1) {
                return expression;
            }
            variables.forEach(function (variableExpression) {
                var exprs = variableExpression.match(FORM_STATE_EXP);
                if (exprs && exprs.length === 2) {
                    var variable = exprs[1];
                    var value = _this.getVariableValue(variable);
                    expression = expression.replace(FORM_STATE_EXP, value);
                }
            });
            return expression;
        };
        /**
         * 获取变量的值
         * @param variable 变量
         */
        FormStateVariableParser.prototype.getVariableValue = function (variable) {
            var frameContext = ParseUtil.getFrameContext(this.context);
            var appContext = frameContext.appContext;
            var formVariable = appContext.params.get(variable);
            return formVariable;
        };
        /**
         * 获取到表达式中所有FormState变量数组
         * @param expression 表达式
         */
        FormStateVariableParser.prototype.extractVariables = function (expression) {
            if (!expression) {
                return null;
            }
            var formStates = expression.match(FORM_STATES_EXP);
            if (!formStates || formStates.length < 1) {
                return null;
            }
            return formStates;
        };
        return FormStateVariableParser;
    }());

    var EVENT_PARAMS_EXP = /\{EVENTPARAM~\/(\S+?)\}/g;
    var EVENT_PARAM_EXP = /\{EVENTPARAM~\/(\S+?)\}/;
    /**
     * 命令参数解析器
     */
    var EventParamVariableParser = /** @class */ (function () {
        function EventParamVariableParser() {
        }
        EventParamVariableParser.prototype.parse = function (expression, context, eventParam) {
            var _this = this;
            this.context = context;
            var variables = this.extractVariables(expression);
            if (!variables || variables.length < 1) {
                return expression;
            }
            variables.forEach(function (variableExpression) {
                var exprs = variableExpression.match(EVENT_PARAM_EXP);
                if (exprs && exprs.length === 2) {
                    var variable = exprs[1];
                    var value = _this.getVariableValue(variable, eventParam);
                    expression = expression.replace(EVENT_PARAM_EXP, value);
                }
            });
            return expression;
        };
        /**
         * 匹配表达式中的符合正则表达式的项
         * @param expression 表达式
         * @returns
         */
        EventParamVariableParser.prototype.extractVariables = function (expression) {
            if (!expression) {
                return null;
            }
            var variables = expression.match(EVENT_PARAMS_EXP);
            if (!variables || variables.length < 1) {
                return null;
            }
            return variables;
        };
        /**
         * 获取变量的值
         * @param variable 变量
         */
        EventParamVariableParser.prototype.getVariableValue = function (variable, eventParam) {
            if (!eventParam || !variable) {
                return null;
            }
            var variables = variable.split('/').filter(function (p) { return p; });
            var result = variables.reduce(function (target, key) {
                if (target) {
                    return target[key];
                }
                else {
                    return null;
                }
            }, eventParam);
            return result;
        };
        EventParamVariableParser.decorators = [
            { type: core.Injectable }
        ];
        return EventParamVariableParser;
    }());

    // Providers
    var VARIABLE_PROVIDERS = [
        { provide: VARIABLE_PARSERS, multi: true, useClass: FrameIdVariableParser },
        { provide: VARIABLE_PARSERS, multi: true, useClass: FormStateVariableParser },
        { provide: VARIABLE_PARSERS, multi: true, useClass: EventParamVariableParser },
        { provide: VARIABLE_PARSERS, multi: true, useClass: DataVariableParser },
        { provide: VARIABLE_PARSERS, multi: true, useClass: UIStateVariableParser },
        { provide: VARIABLE_PARSERS, multi: true, useClass: StateMachineVariableParser },
        { provide: VARIABLE_PARSERS, multi: true, useClass: CommandVariableParser },
        VariableParseService
    ];

    /**
     * 任务链接
     */
    var TaskLink = /** @class */ (function () {
        /**
         * 构造函数
         */
        function TaskLink(from, to, condition) {
            this.from = from;
            this.to = to;
            this.condition = condition;
        }
        /**
         * 是否能够
         */
        TaskLink.prototype.canLink = function (context) {
            var type = typeof this.condition;
            var canLink;
            switch (type) {
                case 'boolean':
                    canLink = this.condition;
                    break;
                case 'function':
                    canLink = this.condition(context);
                    break;
                case 'string':
                    var parseService = context && context.frameContext && context.frameContext.injector && context.frameContext.injector.get(VariableParseService);
                    canLink = parseService && parseService.evaluate(this.condition, context);
                    break;
                default:
                    canLink = false;
                    break;
            }
            return canLink;
        };
        return TaskLink;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-10-17 14:13:40
     * @Last Modified by: Witt
     * @Last Modified time: 2018-10-17 16:08:34
     */
    /**
     * 任务执行流程
     */
    var TaskFlow = /** @class */ (function () {
        function TaskFlow() {
            /**
             * 节点集合
             */
            this.nodes = [];
            /**
             * 边集合
             */
            this.links = [];
            // #endregion
        }
        // #region 节点操作
        /**
         * 添加节点
         */
        TaskFlow.prototype.addNode = function (name, func) {
            var node = new TaskNode(name, func);
            this.nodes.push(node);
        };
        /**
         * 批量添加链接
         */
        TaskFlow.prototype.addNodes = function (nodes) {
            this.nodes = this.nodes.concat(nodes);
        };
        /**
         * 在目标节点之前插入一个节点
         * @param target 目标节点名称
         * @param name 名称
         * @param func 函数
         */
        TaskFlow.prototype.insertNode = function (target, name, func) {
            var index = this.findNodeIndex(target);
            var node = this.createNode(name, func);
            this.nodes.splice(index, 0, node);
        };
        /**
         * 在目标节点之前插入一个节点
         */
        TaskFlow.prototype.appendNode = function (target, name, func) {
            var index = this.findNodeIndex(target) + 1;
            var node = this.createNode(name, func);
            this.nodes.splice(index, 0, node);
        };
        /**
         * 获取节点索引
         * @param name 名称
         */
        TaskFlow.prototype.findNodeIndex = function (name) {
            return this.nodes.findIndex(function (node) {
                return node.name === name;
            });
        };
        /**
         * 创建任务节点
         * @param name 名称
         * @param func 函数
         */
        TaskFlow.prototype.createNode = function (name, func) {
            var node = new TaskNode(name, func);
            return node;
        };
        // #endregion
        // #region 链接操作
        /**
         * 添加链接
         * @param name 名称
         * @param func 函数
         */
        TaskFlow.prototype.addLink = function (from, to, condition) {
            var link = this.createLink(from, to, condition);
            this.links.push(link);
        };
        /**
         * 批量添加链接
         */
        TaskFlow.prototype.addLinks = function (links) {
            this.links = this.links.concat(links);
        };
        /**
         * 创建链接
         */
        TaskFlow.prototype.createLink = function (from, to, condition) {
            var link = new TaskLink(from, to, condition);
            return link;
        };
        // #endregion
        // #region 流程控制
        /**
         * 获取下一个节点
         * @param from    源节点名称
         * @param context 上下文
         */
        TaskFlow.prototype.getNext = function (from, context) {
            if (!from) {
                return this.nodes.shift();
            }
            // 符合满足条件的边
            var nextLink = this.links.find(function (link) {
                return link.from === from && link.canLink(context);
            });
            if (!nextLink) {
                return;
            }
            return this.nodes.find(function (node) {
                return node.name === nextLink.to;
            });
        };
        // #endregion
        // #region 其他方法
        /**
         * 克隆任务流
         */
        TaskFlow.prototype.clone = function () {
            var taskFlow = new TaskFlow();
            taskFlow.addNodes(this.nodes);
            taskFlow.addLinks(this.links);
            return taskFlow;
        };
        return TaskFlow;
    }());

    /**
     * Command上下文
     */
    var CommandContext = /** @class */ (function () {
        /**
         * 构造函数
         * @param command 命令
         * @param frameContext 框架上下文
         */
        function CommandContext(command, frameContext) {
            this.typeName = 'CommandContext';
            /**
             * 执行结果
             * 记录每一个task执行的结果
             */
            this.results = {};
            this.command = command;
            this.frameContext = frameContext;
        }
        CommandContext.prototype.dispose = function () {
            this.eventParam = null;
            this.command = null;
            this.results = null;
            this.latestResult = null;
            this.frameContext = null;
        };
        CommandContext.prototype.clearResults = function () {
            this.results = null;
        };
        return CommandContext;
    }());

    var TranslateToken = new core.InjectionToken('@farris/devkit TranslateToken');

    /**
     * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。
     */
    var CommandHandler = /** @class */ (function () {
        /**
         * 构造函数
         */
        function CommandHandler() {
            this.destroy$ = new rxjs.Subject();
        }
        CommandHandler.prototype.dispose = function (options) {
            if (this.destroy$) {
                this.destroy$.next();
                this.destroy$.complete();
            }
            this.frameContext = null;
        };
        CommandHandler.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        /**
         * 初始化
         */
        CommandHandler.prototype.init = function (frameContext, variableParseService) {
            this.frameContext = frameContext;
            this.parseService = variableParseService;
            this.taskFlow = new TaskFlow();
            this.schedule();
        };
        /**
         * 执行任务
         * @param command 要执行的命令
         * @return 最后一个任务的执行结果
         * @todo：按功能拆分小函数
         */
        CommandHandler.prototype.execute = function (command) {
            var _this = this;
            var lastTaskResult$ = new rxjs.Subject();
            var taskFlow = this.taskFlow.clone();
            // setTimeout暂时不能去掉的原因：
            // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；
            // 2、关闭前命令需要延迟执行。
            setTimeout(function () {
                if (!_this.frameContext || _this.frameContext.isDisposed) {
                    return rxjs.EMPTY;
                }
                // 1、解析参数
                // 避免解析变量时修改了原始的command
                var _a = __assign({}, command).eventParam, eventParam = _a === void 0 ? null : _a;
                delete command.eventParam;
                var commandToExecute = JSON.parse(JSON.stringify(command));
                commandToExecute.params = _this.paramsTransform(commandToExecute.params);
                commandToExecute.params = _this.parseService.parse(commandToExecute.params, _this.frameContext, eventParam);
                command.eventParam = eventParam;
                commandToExecute.eventParam = eventParam;
                _this.transParamTypes(commandToExecute.params, commandToExecute.paramDescriptions);
                // 2、串联任务流
                var initContext = new CommandContext(commandToExecute, _this.frameContext);
                initContext.eventParam = command.eventParam || null;
                var context$ = new rxjs.BehaviorSubject(initContext);
                var currentTask = taskFlow.getNext('', initContext);
                var highOrder$ = context$.pipe(operators.concatMap(function (context) {
                    var result$ = currentTask.execute(context);
                    return result$.pipe(operators.take(1), operators.map(function (result) {
                        // 写入执行结果
                        context.results[currentTask.name] = result;
                        context.latestResult = result;
                        currentTask = taskFlow.getNext(currentTask.name, context);
                        // 操作控制流
                        if (currentTask) {
                            context$.next(context);
                        }
                        else {
                            context$.complete();
                        }
                        // 将结果流转换为context流
                        return context;
                    }), operators.throwIfEmpty(function () {
                        context$.complete();
                    }));
                }));
                // 3、执行合并后的任务流
                highOrder$.pipe(operators.takeLast(1)).subscribe({
                    next: function (context) {
                        _this.waitForDestroy(context);
                        lastTaskResult$.next(context.latestResult);
                    },
                    error: function (error) {
                        _this.waitForDestroy(initContext);
                        _this.displayError(error);
                        lastTaskResult$.error(error || '');
                    },
                    complete: function () {
                        _this.waitForDestroy(initContext);
                        lastTaskResult$.complete();
                    },
                });
            }, 0);
            return lastTaskResult$;
        };
        /**
         * 等待销毁
         * @param commandContext
         */
        CommandHandler.prototype.waitForDestroy = function (commandContext) {
            if (!commandContext) {
                return;
            }
            commandContext.clearResults();
            if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {
                this.frameContext.appContext.destorySignal.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                    if (commandContext) {
                        commandContext.dispose();
                        commandContext = null;
                    }
                });
            }
        };
        /**
         * 显示错误信息
         */
        CommandHandler.prototype.displayError = function (error) {
            if (!error) {
                return;
            }
            if (!console || !console.error) {
                return;
            }
            console.error(error);
        };
        /**
         * 参数国际化转换方法
         */
        CommandHandler.prototype.paramsTransform = function (params) {
            var exp = /\{\{(\w+)\}\}/g;
            if (!params) {
                return null;
            }
            var translateService = this.frameContext && this.frameContext.injector && this.frameContext.injector.get(TranslateToken, null) || null;
            var pArray = Object.keys(params);
            var result = {};
            if (pArray.length === 0) {
                return params;
            }
            pArray.forEach(function (p) {
                var ele = params[p];
                if (ele && exp.test(ele) && translateService) {
                    ele = ele.replace(exp, function ($1, $2) {
                        return translateService.transform($2, null);
                    });
                }
                result[p] = ele;
            });
            return result;
        };
        /**
         * 添加任务，只有子类可以添加任务，外部不能访问
         * @param name  任务名称
         * @param func 任务函数
         */
        CommandHandler.prototype.addTask = function (name, func) {
            this.taskFlow.addNode(name, func);
        };
        /**
         * 添加任务，只有子类可以添加任务，外部不能访问
         * @param name  任务名称
         * @param func 任务函数
         */
        CommandHandler.prototype.addLink = function (from, to, condition) {
            this.taskFlow.addLink(from, to, condition);
        };
        /**
         * 插入任务
         * @param  name 要扩展的任务名称
         * @param  func 扩展函数
         */
        CommandHandler.prototype.insertTask = function (target, name, func) {
            throw new Error('Not Implemented');
        };
        /**
         * 插入任务
         * @param  name 要扩展的任务名称
         * @param  func 扩展函数
         */
        CommandHandler.prototype.afterTask = function (target, name, func) {
            throw new Error('Not Implemented');
        };
        /**
         * 替换任务
         * @param  name 要替换的任务名称
         * @param  func 替换函数
         */
        CommandHandler.prototype.replaceTask = function (name, func) {
            throw new Error('Not Implement');
        };
        /**
         * 调用方法
         */
        CommandHandler.prototype.invoke = function (serviceInstance, method, args, context) {
            this.setContextToServiceInstance(serviceInstance, context);
            var parsedArgs = this.parseService.parse(args, context, context.eventParam);
            return serviceInstance[method].apply(serviceInstance, __spread(parsedArgs));
        };
        /**
         * 为服务设置命令上下文
         * @todo
         * 通过这种方式存在很大问题：
         * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；
         * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。
         * 建议解决方案：
         * 1、将context修改为某个特殊属性名；
         * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，
         *    这就要求需要使用context的服务需要是实现一个IContext接口。
         */
        CommandHandler.prototype.setContextToServiceInstance = function (serviceInstance, context) {
            // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖
            var serviceContext = serviceInstance.context;
            if (serviceContext && (serviceContext instanceof CommandContext === false)) {
                return;
            }
            serviceInstance.context = context;
        };
        /**
         * 根据参数描述信息转换参数类型
         */
        CommandHandler.prototype.transParamTypes = function (params, paramDescriptions) {
            if (!paramDescriptions) {
                return;
            }
            var keys = Object.keys(params);
            keys.forEach(function (key) {
                if (!paramDescriptions[key] || !paramDescriptions[key].type) {
                    return;
                }
                var parType = paramDescriptions[key].type;
                var value = params[key];
                if (value === undefined || value === null || typeof value === parType) {
                    return; // 值不存在或类型匹配，无需处理
                }
                switch (parType) {
                    case 'string':
                        // 其实转换前的参数都是string，这里不会走到
                        params[key] = value + '';
                        break;
                    case 'int':
                    case 'double':
                    case 'number':
                        // 前端数值类型只有number，这里兼容命令构件上设置为int和double的情况
                        var numResult = Number(value);
                        if (isNaN(numResult)) {
                            throw Error("\u7C7B\u578B\u8F6C\u6362\u5931\u8D25\uFF0C\u53C2\u6570" + key + "\u503C\u4E3A" + value + "\uFF0C\u65E0\u6CD5\u8F6C\u6362\u4E3A" + parType + "\u7C7B\u578B\u3002");
                        }
                        params[key] = numResult;
                        break;
                    case 'boolean':
                        var boolResult = void 0;
                        var strValue = (value + '').toLowerCase();
                        if (strValue === 'true') {
                            boolResult = true;
                        }
                        else if (strValue === 'false') {
                            boolResult = false;
                        }
                        else {
                            // throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);
                            boolResult = false;
                        }
                        params[key] = boolResult;
                        break;
                    case 'datetime':
                        // todo：日期时间暂不处理
                        break;
                    case 'object':
                        // 表达式解析出来的参数，无需处理，按原类型返回
                        // todo: 输入参数是个json串，转成object
                        break;
                    default:
                        break;
                }
            });
        };
        return CommandHandler;
    }());
    /**
     * 命令处理器注入Token
     */
    var COMMAND_HANDLERS_TOKEN = new core.InjectionToken('@Farris Command Handlers');

    /**
     * 命令处理注册器相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * 命令处理注册器
     */
    var CommandHandlerRegistry = /** @class */ (function () {
        /**
         * 构造函数
         * @param handlers 命令处理实例数组
         */
        function CommandHandlerRegistry(handlers) {
            var self = this;
            this.handlerMap = new Map();
            if (handlers) {
                handlers.forEach(function (handler) {
                    self.regist(handler);
                });
            }
        }
        /**
         * 添加命令处理
         * @param  commandName    命令名称
         * @param  commandHandler 命令处理实例
         */
        CommandHandlerRegistry.prototype.set = function (commandName, commandHandler) {
            if (this.handlerMap.has(commandName)) {
                throw new Error(commandName + '对应的CommandHandler已经存在');
            }
            this.handlerMap.set(commandName, commandHandler);
        };
        /**
         * 获取命令处理
         * @param   commandName 命令名称
         * @returns 命令处理实例
         */
        CommandHandlerRegistry.prototype.get = function (commandName) {
            if (this.handlerMap.has(commandName) === false) {
                throw new Error('找不到' + commandName + '对应的CommandHandler');
            }
            return this.handlerMap.get(commandName);
        };
        /**
         * 注册命令处理
         * @param handlers 命令处理实例
         */
        CommandHandlerRegistry.prototype.regist = function (commandHandler) {
            var commandName = commandHandler.commandName;
            if (!commandName) {
                // 根据metadata获取对应的Command名称
                var handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);
                if (!handlerMetadata) {
                    throw new Error('CommandHandler必须指定要处理的命令名称');
                }
                commandName = handlerMetadata.commandName;
            }
            this.set(commandName, commandHandler);
        };
        /**
         * 清空所有命令处理器
         */
        CommandHandlerRegistry.prototype.dispose = function () {
            if (this.handlerMap) {
                this.handlerMap.forEach(function (handler) {
                    handler.dispose();
                });
            }
            this.handlerMap.clear();
        };
        CommandHandlerRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommandHandlerRegistry.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [COMMAND_HANDLERS_TOKEN,] }] }
            ];
        };
        return CommandHandlerRegistry;
    }());

    /**
     * 命令处理扩展相关
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * 命令处理扩展抽象类
     *
     * CommandHandler由一个个Task串联而成，这些Task不是一成不变，
     * 通过CommandHandlerExtender可以在不同的时机对它扩展，
     * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。
     *
     * ### 定义并注册扩展
     *
     * **定义一个扩展**
     *
     * 按如下步骤可以实现一个扩展：
     * - 继承CommandHandlerExtender抽象基类；
     * - 实现extend方法，在其内部对任务进行扩展、替换；
     * - 添加NgCommandHandlerExtender指定要扩展的命令。
     *
     * ```ts
     * @Injectable()
     * @NgCommandHandlerExtender({
     *    commandName: 'formLoad'
     *  })
     * class FormLoadExtender extends CommandHandlerExtender {
     *
     *   extend(handler: CommandHandler): CommandHandler {
     *
     *     // 扩展一个任务
     *     handler.extendTask('loadData', (originalResult) => {
     *       console.log('do sth. to the original result');
     *     });
     *
     *     // 替换一个任务
     *     handler.extendTask('transitState', () => {
     *       console.log('transit to other state');
     *     });
     *
     *     return handler;
     *   }
     * }
     * ```
     * 在extend方法内部：
     * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；
     * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。
     *
     * **注册扩展**
     *
     * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，
     * 由它来统一进行注册。
     * ```ts
     * @NgModule({
     *   imports: [
     *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])
     *   ]
     * })
     * class SimpleModule {}
     * ```
     */
    var CommandHandlerExtender = /** @class */ (function () {
        function CommandHandlerExtender() {
        }
        CommandHandlerExtender.decorators = [
            { type: core.Injectable }
        ];
        return CommandHandlerExtender;
    }());
    /**
     * 命令处理器扩展注入Token
     */
    var COMMAND_HANDLER_EXTENDERS_TOKEN = new core.InjectionToken('@farris/devkit CommandHandler Extenders');

    /**
     * 命令处理扩展注册器相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * 命令处理扩展注册器
     */
    var CommandHandlerExtenderRegistry = /** @class */ (function () {
        /**
         * 构造函数
         * @param extenders 命令扩展实例数组
         */
        function CommandHandlerExtenderRegistry(extenders) {
            var self = this;
            this.extendersMap = new Map();
            if (extenders) {
                extenders.forEach(function (extender) {
                    self.regist(extender);
                });
            }
        }
        /**
         * 获取命令扩展实例数组
         * @param   commandName 命令名称
         * @returns 命令处理扩展实例数组
         */
        CommandHandlerExtenderRegistry.prototype.get = function (commandName) {
            if (this.extendersMap.has(commandName) === false) {
                return [];
            }
            return this.extendersMap.get(commandName);
        };
        /**
         * 添加命令扩展
         * @param commandName Command名称
         * @param extender    CommandHandlerExtender实例
         * @return void
         */
        CommandHandlerExtenderRegistry.prototype.set = function (commandName, extender) {
            if (this.extendersMap.has(commandName)) {
                // 如果commandName对应的扩展已经存在，则在扩展数组中追加
                this.extendersMap.get(commandName).push(extender);
            }
            else {
                // 如果不存在，则创建新的扩展数组，并追加
                this.extendersMap.set(commandName, [extender]);
            }
        };
        /**
         * 注册命令扩展
         * @param extender CommandHandlerExtender实例
         */
        CommandHandlerExtenderRegistry.prototype.regist = function (extender) {
            // 通过元数据获取要扩展的Comamnd名称
            var extenderMetadata = MetadataUtil.getClassMetadataByName(extender.constructor, NG_COMMAND_HANDLER_EXTENDER);
            if (!extenderMetadata) {
                throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');
            }
            var commandName = extenderMetadata.commandName;
            // 添加到Map中
            this.set(commandName, extender);
        };
        CommandHandlerExtenderRegistry.prototype.dispose = function () {
            this.extendersMap.clear();
        };
        CommandHandlerExtenderRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommandHandlerExtenderRegistry.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [COMMAND_HANDLER_EXTENDERS_TOKEN,] }] }
            ];
        };
        return CommandHandlerExtenderRegistry;
    }());

    /**
     * NgComponentState元数据名称
     */
    var NG_COMPONENT_STATE = 'NgParam';
    /**
     * NgUIState
     */
    var NgParam = makePropDecorator(NG_COMPONENT_STATE, function (obj) { return obj; });

    var UIStateMetadataUtil = /** @class */ (function () {
        function UIStateMetadataUtil() {
        }
        /**
         * 获取NgUIState的属性元数据
         * @param
         * @returns 属性元数据对象
         * @example
         * 返回格式：
         * {
         *    '属性名称': <NgUIStateProperty>{ ...}
         * }
         */
        UIStateMetadataUtil.getUIFields = function (target) {
            return MetadataUtil.getPropsMetadatasByName(target, NG_COMPONENT_STATE);
        };
        return UIStateMetadataUtil;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-11-17 13:38:23
     * @Last Modified by: Witt
     * @Last Modified time: 2018-11-17 13:38:50
     * @todo：临时删除原有功能，待重构
     */
    /**
     * UI状态
     */
    var UIState = /** @class */ (function () {
        function UIState() {
            this.paramTypeTransform = false;
            this.changes = new rxjs.Subject();
            this.innerData = Object.assign({});
            this._init();
        }
        UIState.prototype._init = function () {
            var uiFields = UIStateMetadataUtil.getUIFields(this.constructor);
            this.initializeUIField(uiFields);
        };
        UIState.prototype.initialize = function (context) {
            var uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);
            this.initializeUIField(uiFields);
        };
        UIState.prototype.initializeUIField = function (uiFieldMetadata) {
            var _this = this;
            Object.keys(uiFieldMetadata).forEach(function (propertyName) {
                var fieldMetadata = uiFieldMetadata[propertyName];
                var uiField = fieldMetadata.stateName || propertyName;
                if (delete _this[propertyName]) {
                    _this.defineProperty(propertyName, uiField);
                }
            });
        };
        UIState.prototype.isExistProperty = function (propertyName) {
            if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {
                return true;
            }
            return false;
        };
        UIState.prototype.defineProperty = function (propertyName, field) {
            if (field === void 0) {
                field = null;
            }
            Object.defineProperty(this, propertyName, {
                get: function () {
                    return field !== null ? this.innerData[field] : this.innerData[propertyName];
                },
                set: function (value) {
                    // 值相同时不触发变更
                    var oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];
                    if (this.paramTypeTransform === true) {
                        var ngParams = UIStateMetadataUtil.getUIFields(this.constructor);
                        var ngParam = ngParams && ngParams[propertyName] || null;
                        var dataType = ngParam && ngParam.originalDataType || null;
                        if (dataType) {
                            value = this.transform(value, dataType);
                        }
                    }
                    if (oldValue === value) {
                        return;
                    }
                    if (field !== null) {
                        this.innerData[field] = value;
                    }
                    else {
                        this.innerData[propertyName] = value;
                    }
                    this.changes.next({
                        field: propertyName,
                        value: value
                    });
                }
            });
        };
        UIState.prototype.setPropertyValue = function (propertyName, value) {
            if (propertyName === '' || propertyName === undefined) {
                return;
            }
            if (!this.isExistProperty(propertyName)) {
                this.defineProperty(propertyName);
            }
            this[propertyName] = value;
        };
        UIState.prototype.transform = function (target, dataType) {
            if (!dataType) {
                return target;
            }
            dataType = dataType.toLowerCase();
            if (dataType === 'string') {
                if (target === null || target === undefined) {
                    return target;
                }
                return target.toString();
            }
            else if (dataType === 'number') {
                if (target === undefined) {
                    return undefined;
                }
                var result = Number(target);
                if (isNaN(result)) {
                    throw new Error(target + "\u65E0\u6CD5\u8F6C\u6362\u4E3A\u6570\u5B57\uFF01");
                }
                return result;
            }
            else if (dataType === 'boolean') {
                if (typeof target === 'boolean') {
                    return target;
                }
                else {
                    if (target === null || target === undefined) {
                        return false;
                    }
                    target = target.toString().toLowerCase();
                    if (target === 'false') {
                        return false;
                    }
                    else if (target === 'true') {
                        return true;
                    }
                    else {
                        throw new Error(target + "\u65E0\u6CD5\u8F6C\u6362\u4E3A\u5E03\u5C14\u7C7B\u578B\uFF01");
                    }
                }
            }
            else if (dataType === 'date' || dataType === 'datetime') {
                // 日期、日期时间在前端依然按照字符串处理
                return target;
            }
            else if (dataType === 'object') {
                if (typeof target === 'object') {
                    return target;
                }
                else {
                    try {
                        return JSON.parse(target);
                    }
                    catch (_a) {
                        throw new Error(target + "\u65E0\u6CD5\u8F6C\u6362\u4E3A\u5BF9\u8C61\uFF01");
                    }
                }
            }
            else {
                return target;
            }
        };
        UIState.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UIState.ctorParameters = function () { return []; };
        return UIState;
    }());

    /**
     * 变量类型转换
     */
    var PARAM_TYPE_TRANSFORM_TOKEN = new core.InjectionToken('@farris/devkit_param_type_transform');

    /**
     * --------------------------------------------------------------------------------
     * State相关
     * --------------------------------------------------------------------------------
     */
    /**
     * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。
     */
    var State = /** @class */ (function () {
        /**
         * 构造函数
         * @param name 状态名称
         */
        function State(name) {
            this.name = name;
        }
        return State;
    }());
    /**
     * 初始渲染状态
     */
    var initialUIState = false;

    /**
     * 状态机上下文
     */
    var StateMachineContext = /** @class */ (function () {
        /**
         * 构造函数
         * @param stateMachine 状态机
         * @param initialState 初始状态
         */
        function StateMachineContext(stateMachine) {
            this.stateMachine = stateMachine;
            // this.state = initialState.name;
        }
        StateMachineContext.prototype.initialize = function (variableParseService, initialState) {
            this.frameContext = this.stateMachine && this.stateMachine.frameContext || null;
            this.state = this.state || (initialState ? initialState.name : '');
            this.parser = variableParseService;
            this.stateMachineEvent = this.stateMachine.stateMachineEvent;
        };
        /**
         * 状态迁移
         * @param stateName 下一状态的名称
         */
        StateMachineContext.prototype.transitTo = function (stateName) {
            var nextState = this.stateMachine.states[stateName];
            if (nextState) {
                this.state = nextState.name;
                this.stateMachine.render();
            }
        };
        StateMachineContext.prototype.parse = function (expression, targetType) {
            if (expression === null || expression === undefined) {
                return expression;
            }
            var context = this.stateMachineEvent.getFrameContext(expression) || this.stateMachine.frameContext;
            switch (targetType) {
                case 'source':
                    return this.parseSourceValue(expression, context);
                case 'target':
                    return this.parser.parse(expression, context);
            }
        };
        StateMachineContext.prototype.parseSourceValue = function (expression, context) {
            if (expression === null || expression === undefined) {
                return expression;
            }
            var result = expression.trim();
            result = this.parser.parse(result, context);
            if (result === 'state') {
                result = this.state;
            }
            return result;
        };
        // 兼容旧版本
        StateMachineContext.prototype.get = function (expression) {
            return this.getUIState(expression);
        };
        // 解析uistate变量表达式并返回表达式的值
        StateMachineContext.prototype.getUIState = function (expression) {
            if (!expression) {
                return;
            }
            var frameContext = this.stateMachineEvent.getFrameContext(expression);
            if (!frameContext) {
                return;
            }
            this.stateMachineEvent.ListenUIStateChange(frameContext, expression);
            if (this.parser) {
                var value = this.parser.parse(expression, frameContext);
                if (value === null) {
                    return null;
                }
                if (typeof value === 'object' && Object.keys(value).length === 0) {
                    return null;
                }
                return value;
            }
            else {
                throw new Error('未初始化变量解析器。');
            }
        };
        // 解析data变量表达式并返回表达式的值
        StateMachineContext.prototype.getData = function (expression) {
            if (!expression) {
                return;
            }
            var frameContext = this.stateMachineEvent.getFrameContext(expression);
            if (!frameContext) {
                return;
            }
            this.stateMachineEvent.ListenEntityChange(frameContext, expression);
            if (this.parser) {
                var value = this.parser.parse(expression, frameContext);
                if (value === null) {
                    return null;
                }
                if (typeof value === 'object' && Object.keys(value).length === 0) {
                    return null;
                }
                return value;
            }
            else {
                throw new Error('未初始化变量解析器。');
            }
        };
        return StateMachineContext;
    }());

    /**
     * 状态机事件，监听uistate的变化和entity的变化
     */
    var StateMachineEvent = /** @class */ (function () {
        function StateMachineEvent(stateMachine) {
            this.stateMachine = stateMachine;
            this.uiFieldList = [];
            this.dataFieldList = [];
            this.frameContextMap = new Map();
            this.dataFrameContextMap = new Map();
        }
        Object.defineProperty(StateMachineEvent.prototype, "appContext", {
            get: function () {
                return this.stateMachine.appContext;
            },
            enumerable: true,
            configurable: true
        });
        StateMachineEvent.prototype.initialize = function (frameContext) {
            this.frameContext = frameContext;
        };
        /**
         * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
         */
        StateMachineEvent.prototype.extractPaths = function (expression) {
            var path = '';
            var UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}$/g;
            var DATA_PATTERN_G = /\{DATA~(\S+?)\}$/g;
            if (typeof expression === 'string') {
                var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
                var dataVariables = expression.match(DATA_PATTERN_G);
                if (uiStateVariables !== null) {
                    var UI_STATE_PATTERN_1 = /\{UISTATE~(\S+?)\}$/;
                    uiStateVariables.forEach(function (uiStateVariable) {
                        var pathMatches = uiStateVariable.match(UI_STATE_PATTERN_1);
                        if (pathMatches != null && pathMatches.length === 2) {
                            path = pathMatches[1];
                        }
                    });
                }
                if (dataVariables !== null) {
                    var DATA_PATTERN_1 = /\{DATA~(\S+?)\}$/;
                    dataVariables.forEach(function (dataVariable) {
                        var pathMatches = dataVariable.match(DATA_PATTERN_1);
                        if (pathMatches != null && pathMatches.length === 2) {
                            path = pathMatches[1];
                        }
                    });
                }
            }
            return path;
        };
        // 根据表达式返回当前组件的frameContext
        StateMachineEvent.prototype.getFrameContext = function (expression) {
            var frameId = this.extractPaths(expression).split('/')[1] || '';
            if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {
                var relativeFrameId = frameId.substring(2, frameId.length - 1);
                frameId = this.frameContext.namespace ? this.frameContext.namespace + "_" + relativeFrameId : relativeFrameId;
            }
            return this.appContext.getFrameContext(frameId);
        };
        // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)
        StateMachineEvent.prototype.getFrameField = function (expression) {
            return this.extractPaths(expression).split('/')[2];
        };
        // 监听表单变量的变化
        StateMachineEvent.prototype.ListenUIStateChange = function (frameContext, expression) {
            var _this = this;
            var frameField = this.getFrameField(expression);
            if (!this.frameContextMap.has(frameContext)) {
                this.frameContextMap.set(frameContext, this.uiFieldList);
                frameContext.uiState.changes.subscribe(function (data) {
                    if (data.field && _this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {
                        _this.stateMachine.render();
                    }
                });
            }
            if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {
                this.uiFieldList.push(frameField);
            }
        };
        // 监听实体数据的变化
        StateMachineEvent.prototype.ListenEntityChange = function (frameContext, expression) {
            var _this = this;
            if (!this.dataFrameContextMap.has(frameContext)) {
                this.dataFrameContextMap.set(frameContext, this.dataFieldList);
                frameContext.bindingData.changes.subscribe(function (change) {
                    // 切换当前行用到的是
                    if (change.type === 'Load' || change.type === 'SelectionChanged') {
                        _this.stateMachine.render();
                    }
                    if (change.path.join() && _this.isAccordingValue(_this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {
                        _this.stateMachine.render();
                    }
                });
            }
            if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {
                this.dataFieldList.push(expression);
            }
        };
        // 监听是否是解析的数据发生变化
        StateMachineEvent.prototype.isAccordingValue = function (arr, path) {
            return arr.find(function (item) {
                return item.indexOf(path) > -1;
            }) === undefined ? false : true;
        };
        StateMachineEvent.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        StateMachineEvent.ctorParameters = function () {
            return [
                { type: StateMachine }
            ];
        };
        return StateMachineEvent;
    }());

    /**
     * 预置界面效果处理
     */
    var effectHandlers = {
        /**
         * 预置状态迁移处理
         */
        transit: {
            /**
             * 执行状态迁移
             * @param stateMachine  状态机对象
             * @param stateName     下一状态的名称
             * @param preconditions 迁移条件
             */
            // tslint:disable-next-line: only-arrow-functions
            perform: function (statemachine, stateName, preconditons) {
                if (preconditons === void 0) {
                    preconditons = [];
                }
                var nextState = statemachine.states[stateName];
                statemachine.context.transitTo(nextState.name);
                statemachine.render();
            }
        }
    };
    /**
     * 状态机
     *
     * ### 基本概念
     * 状态机中有三个重要的概念：
     * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；
     * - 控件状态（RenderState）：控制具体控件的状态；
     * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。
     *
     * ### 定义状态机
     *
     * **基本步骤**
     *
     * - 继承StateMachine基类，并添加NgStatemachine注解；
     * - 定义页面状态、控件状态、迁移动作。
     *
     * **状态机中的注解**
     *
     * - NgStatemachine：将类标记为状态机，并进行扩展；
     * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；
     * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，
     *   一般情况下是通过对页面状态进行逻辑运算来确定。
     * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。
     *
     * ```ts
     * @Injectable()
     * @NgStatemachine()
     * class SimpleStateMachine extends StateMachine {
     *
     *   // 查看状态，设置为初始状态
     *   @NgState({ initialState: true })
     *   viewState: State;
     *
     *   // 编辑状态
     *   @NgState()
     *   editState: State;
     *
     *   // 编辑按钮是否允许点击
     *   @NgRenderState({
     *     render: (context) => context.state === 'viewState'
     *   })
     *   canEdit: RenderState;
     *
     *   // 保存按钮是否允许点击
     *   @NgRenderState({
     *     render: (context) => context.state === 'editState'
     *   })
     *   canSave: RenderState;
     *
     *   // 输入控件是否允许输入
     *   @NgRenderState({
     *     render: (context) => context.state === 'editState'
     *   })
     *   canInput: RenderState;
     *
     *   // 迁移到编辑状态
     *   @NgAction({ transitTo: 'editState' })
     *   edit: Action;
     *
     *   // 迁移到查看状态
     *   @NgAction({ transitTo: 'viewState' })
     *   view: Action;
     * }
     * ```
     * 在上边的代码中做了如下定义：
     * - 两个页面状态：查看状态、编辑状态，
     * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，
     * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。
     *
     *
     * ### 在模板中使用状态机
     *
     * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。
     *
     * ```html
     * <button type="button" [disabled]="!viewModel.stateMachine.canEdit">编辑</button>
     * <button type="button" [disabled]="!viewModel.stateMachine.canSave">保存</button>
     * <input id="code" [disabled]="!viewModel.stateMachine.canInput" />
     * <input id="name" [disabled]="!viewModel.stateMachine.canInput" />
     * ```
     *
     * ### 执行状态迁移
     * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。
     * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。
     * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：
     * ```ts
     * @Injectable()
     * @NgCommandHandler({
     *   commandName: 'save'
     * })
     * class SaveHandler extends CommandHandler {
     *
     *   schedule() {
     *     this.addTask('save', () => {
     *       // 实现保存
     *     });
     *
     *     // 状态迁移
     *     this.addTask('transitState', ) => {
     *       this.stateMachine['view']();
     *     });
     *   }
     * }
     * ```
     */
    var StateMachine = /** @class */ (function () {
        /**
         * 构造函数
         */
        function StateMachine() {
            var _this = this;
            this.isStateInited = false;
            this.isDisposed = false;
            var propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
            // 遍历所有属性装饰器，并调用相应的build方法
            if (propsMetadatas) {
                Object.keys(propsMetadatas).forEach(function (propName) {
                    var propMetadatas = propsMetadatas[propName];
                    propMetadatas.forEach(function (propMetadata) {
                        _this['build' + propMetadata.ngMetadataName](propName, propMetadata);
                    });
                });
            }
            // if (!this.initialState) {
            //   throw new Error('请在NgState注解中指定状态机的初始状态。');
            // }
            this.stateChange = new rxjs.BehaviorSubject(false);
            this.context = new StateMachineContext(this);
            this.stateMachineEvent = new StateMachineEvent(this);
        }
        StateMachine.prototype.dispose = function (options) {
            this.isDisposed = true;
            this.frameContext = null;
            this.appContext = null;
            this.context = null;
            this.stateMachineEvent = null;
            this.metadatas = null;
        };
        StateMachine.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。
        StateMachine.prototype.initialize = function (frameContext, variableParseService) {
            this.appContext = frameContext.appContext;
            this.frameContext = frameContext;
            var stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();
            this.metadatas = stateMachineMetadata;
            this.buildStateMachine(stateMachineMetadata);
            // if (!this.initialState) {
            //   throw new Error('请在NgState注解中指定状态机的初始状态。');
            // }
            this.context.initialize(variableParseService, this.initialState);
            this.stateMachineEvent.initialize(this.frameContext);
            this.render();
        };
        StateMachine.prototype.collectionMetadata = function () {
            var stateMachineMetadata = {
                states: {},
                renderStates: {},
                actions: {}
            };
            var propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
            if (propsMetadatas) {
                Object.keys(propsMetadatas).forEach(function (propName) {
                    var propMetadatas = propsMetadatas[propName];
                    propMetadatas.forEach(function (propMetadata) {
                        switch (propMetadata.ngMetadataName) {
                            case 'NgState':
                                stateMachineMetadata.states[propName] = propMetadata;
                                break;
                            case 'NgRenderState':
                                stateMachineMetadata.renderStates[propName] = propMetadata;
                                break;
                            case 'NgAction':
                                stateMachineMetadata.actions[propName] = propMetadata;
                                break;
                        }
                    });
                });
            }
            return stateMachineMetadata;
        };
        StateMachine.prototype.buildStateMachine = function (metadata) {
            var _this = this;
            Object.keys(metadata.states).forEach(function (stateName) {
                _this.buildNgState(stateName, metadata.states[stateName]);
            });
            Object.keys(metadata.renderStates).forEach(function (renderStateName) {
                _this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);
            });
            Object.keys(metadata.actions).forEach(function (actionName) {
                _this.buildNgAction(actionName, metadata.actions[actionName]);
            });
        };
        /**
         * 构造状态
         * @param stateName 状态名称
         * @param ngState   状态对象
         */
        StateMachine.prototype.buildNgState = function (stateName, ngState) {
            this.states = this.states || {};
            this[stateName] = new State(stateName);
            this.states[stateName] = this[stateName];
            if (ngState.initialState) {
                this.initialState = this[stateName];
            }
        };
        /**
         * 构造界面状态
         * @param renderStateName 渲染状态名称
         * @param ngRenderState   渲染状态元数据
         */
        StateMachine.prototype.buildNgRenderState = function (renderStateName, ngRenderState) {
            this.renderStates = this.renderStates || {};
            this[renderStateName] = initialUIState;
            this.renderStates[renderStateName] = this[renderStateName];
            // 将renderState上指定的render加入到renders中
            this.renders = this.renders || {};
            this.renders[renderStateName] = ngRenderState.render;
        };
        /**
         * 构造动作
         * @param actionName 动作名称
         * @param ngAction   动作元数据
         */
        StateMachine.prototype.buildNgAction = function (actionName, ngAction) {
            var _this = this;
            this[actionName] = function () {
                effectHandlers.transit.perform(_this, ngAction.transitTo, ngAction.precondition);
            };
        };
        /**
         * 重新计算所有渲染状态的值
         * 当 state切换的时候，调用遍历所有的render方法，更改renderState
         */
        StateMachine.prototype.render = function () {
            if (this.isDisposed) {
                return;
            }
            for (var renderStateName in this.renderStates) {
                if (this.renderStates.hasOwnProperty(renderStateName) === false) {
                    continue;
                }
                var stateRender = this.renders[renderStateName];
                if (!stateRender) {
                    continue;
                }
                // 调用render方法，更新renderState
                this.renderStates[renderStateName] = stateRender(this.context);
                this[renderStateName] = this.renderStates[renderStateName];
            }
            this.stateChange.next(this.context.state);
        };
        return StateMachine;
    }());

    /**
     * NgState
     */
    var NgState = makePropDecorator('NgState', function (obj) { return obj; });
    /**
     * NgRenderState
     */
    var NgRenderState = makePropDecorator('NgRenderState', function (obj) { return obj; });
    /**
     * NgRenderStateDecorator
     */
    var NgAction = makePropDecorator('NgAction', function (action) { return action; });

    /**
     * 命令装饰器名称
     * @type {string}
     */
    var NG_COMMAND = 'NgCommand';
    /**
     * 命令装饰器工厂
     * @type {any}
     */
    var NgCommand = makePropDecorator(NG_COMMAND, function (obj) { return obj; });

    /**
     * ViewModel是界面层访问应用层的入口。
     *
     * ### 定义ViewModel
     *
     * 定义ViewModel需要以下几个步骤：
     *
     * 1、定义的ViewModel需要继承ViewModel基类
     * 2、使用NgViewModel关联相关对象，比如：绑定数据（SinmpleDemoBindingData）、表单（SimpleDemoForm）、
     *    状态机（SimpleDemoStateMachine）等，但所有这些关联都是可选的，用不到或者自己单独实现时，不指定即可。
     * 3、同时我们需要传递一个injector给基类的构造函数，在ViewModel实例化时，会从injector获取NgViewModel声明的各个类型的实例。
     *
     * 下面我们来定义一个简单的ViewModel，代码如下：
     * ```ts
     * import { Injector, Injectable } from '@angular/core';
     * import { NgViewModel, ViewModel } from '@farris/devkit';
     *
     * @Injectable()
     * @NgViewModel({
     *   children: [],
     *   binding: SimpleDemoBindingData,
     *   form: SimpleDemoForm,
     *   stateMachine: SimpleDemoStateMachine,
     * })
     * class SimpleDemoViewModel extends ViewModel {
     *    constructor(injector: Injector) {
     *      super(injector);
     *    }
     *    @NgCommand({
     *      name: 'formLoad',
     *      params: {
     *        dataId: '1'
     *      }
     *    })
     *    public formLoad() {}
     * }
     * export { SimpleDemoViewModel };
     * ```
     *
     * 通过组件的构造函数，我们将ViewModel注入进组件
     * ```ts
     * @Component({
     *   selector: 'app-simple-demo',
     *   templateUrl: './simple-demo.component.html'
     * })
     * class SimpleDemoComponent implements OnInit {
     *
     *   public viewModel: SimpleDemoViewModel;
     *
     *   constructor(viewModel: SimpleDemoViewModel) {
     *     this.viewModel = viewModel;
     *   }
     * }
     * ```
     *
     * ### 组件模板中使用ViewModel
     *
     * 我们可以在模板中绑定NgViewModel中指定的 BindingData、Form、StateMachine的实例。
     * ```html
     * * <!--绑定数据-->
     * <p>{{viewModel.bindingData.name}}</p>
     *
     * <!--绑定表单-->
     * <form [formGroup]="viewModel.form">
     *   <input type="text" formControlName="name">
     * </form>
     *
     * <!--绑定状态机-->
     * <button type="button" [disabled]="!viewModel.stateMachine.canAdd">新增 </button>
     * * ```
     *
     * 我们在模板中绑定绑定viewModel的一个方法作为事件处理，这个方法可以是普通的方法，也可以是用NgCommand注解修饰过的。
     * ```html
     * <button type="button" (click)="viewModel.add()">新增 </button>
     * ```
     *
     * ### 组合的ViewModle
     *
     * 当界面比较复杂时，我们对界面按一定的粒度进行拆分，拆分出来的各个组成部分分别对应一个ViewModel，这样就形成了一个ViewModel树。
     * 我们在父的ViewModel的NgViewModel注解中通过在children属性中声明它的子ViewModel，将它们关联起来。
     * 假设我们有一个左列表右卡片的界面，我们可以为左列表、右卡片分别定义一个ViewModel，然后在页面的ViewModel中，将它们组合起来，
     * 代码如下：
     * ```ts
     * @Injectable()
     *  @NgViewModel({
     *  children: [LeftListViewModel, RightCardViewModel],
     *    binding: NestedDemoBindingData,
     * })
     * class NestedDemoViewModel extends ViewModel {
     *   constructor(injector: Injector) {
     *     super(injector);
     *   }
     * }
     * export { NestedDemoViewModel };
     * ```
     */
    var ViewModel = /** @class */ (function () {
        /**
         * kendogrid option
         */
        // constructor(metadata?: IContextMetadata) {
        //   if (!this.bindingPath && metadata && metadata.bindingTo) {
        //     this.bindingPath = metadata.bindingTo;
        //   }
        // }
        function ViewModel() {
            /**
             * 界面验证信息
             */
            this.verifyInformations = [];
            this.verifycationChanged = new rxjs.Subject();
        }
        Object.defineProperty(ViewModel.prototype, "expression", {
            /**
             * 表达式服务
             */
            get: function () {
                return this.frameContext.expressionManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewModel.prototype, "expressionResult", {
            /**
             * 表达式结果
             */
            get: function () {
                return this.frameContext.expressionResult;
            },
            enumerable: true,
            configurable: true
        });
        ViewModel.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        ViewModel.prototype.dispose = function (options) {
            // this.frameContext = null;
            // this.bindingData = null;
            // this.stateMachine = null;
            this.form = null;
            // this.uiState = null;
            if (this.entityValueChangingListeners) {
                this.entityValueChangingListeners.clear();
            }
            if (this.entityValueChangedListeners) {
                this.entityValueChangedListeners.clear();
            }
            if (this.verifycationChanged) {
                this.verifycationChanged.complete();
                this.verifycationChanged = null;
            }
        };
        ViewModel.prototype.setMetadata = function (metadata) {
            if (!this.bindingPath && metadata && metadata.bindingTo) {
                this.bindingPath = metadata.bindingTo;
            }
        };
        /**
         * 初始化
         */
        ViewModel.prototype.init = function (context) {
            var _this = this;
            if (!this.name) {
                this.name = context.metadata.viewModelCode || this.constructor.name;
            }
            this.frameContext = context;
            this.bindingData = context.bindingData;
            this.uiState = context.uiState;
            this.form = context.form;
            this.stateMachine = context.stateMachine;
            this.buildCommands(context);
            this.entityValueChangingListeners = new Map();
            this.entityValueChangedListeners = new Map();
            // 为bindingData赋值值变化监听器
            if (this.bindingData) {
                this.bindingData.setValueChangeInvokerFactory(function (paths) {
                    return function (preValue, value, entityChanged, primaryValue) {
                        var plainPath = '/' + paths.join('/');
                        var command;
                        if (entityChanged === false) {
                            command = _this.entityValueChangingListeners[plainPath];
                        }
                        else {
                            command = _this.entityValueChangedListeners[plainPath];
                        }
                        if (!!command) {
                            var change_1 = {
                                paths: paths,
                                preValue: preValue,
                                value: value,
                                id: primaryValue,
                                changed: entityChanged
                            };
                            var triggerFlag_1 = 'trigger:';
                            var commands = command.split(';').filter(function (p) { return p; });
                            // 过滤出所有值变化前后事件
                            var valueChangeCommands = commands.filter(function (item) { return !item.startsWith(triggerFlag_1); });
                            // 过滤出所有组件通讯
                            var triggers = commands.filter(function (item) { return item.startsWith(triggerFlag_1); });
                            var squence = valueChangeCommands.concat(triggers);
                            var valueChangeSuccess_1 = true;
                            return rxjs.from(squence).pipe(operators.concatMap(function (item) {
                                if (!valueChangeSuccess_1 && entityChanged === false) {
                                    return rxjs.EMPTY;
                                }
                                if (item.startsWith(triggerFlag_1)) {
                                    // 值变化前后事件绑定了组件通信
                                    var eventName = item.substring(8);
                                    _this.frameContext.frameComponent.trigger(eventName);
                                    valueChangeSuccess_1 = true;
                                    return rxjs.of(true);
                                }
                                else {
                                    return _this[item](change_1).pipe(operators.tap(function (result) {
                                        valueChangeSuccess_1 = result;
                                    }));
                                }
                            }), operators.every(function (result) { return result; }));
                            // return this[command](change).pipe(map(result => {
                            //   return result === false ? false : true;
                            // }));
                        }
                        else {
                            return rxjs.of(true);
                        }
                    };
                });
            }
            this.initListeners();
        };
        /**
         * 绑定命令
         */
        ViewModel.prototype.buildCommands = function (context) {
            var _this = this;
            var ngCommands = context.metadata.commands || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_COMMAND);
            this.metadatas = ngCommands;
            this.keybindingMap = new Map();
            Object.keys(ngCommands).forEach(function (propertyName) {
                var ngCommand = ngCommands[propertyName];
                // 注册快捷键
                if (ngCommand.keyBinding) {
                    _this.keybindingMap.set(propertyName, ngCommand.keyBinding);
                }
                Object.defineProperty(_this, propertyName, {
                    value: function (data) {
                        if (context.isDisposed) {
                            return rxjs.EMPTY;
                        }
                        // 获取命令处理上下文
                        var targetContext = context;
                        if (ngCommand.frameId) {
                            targetContext = context.appContext.getFrameContext(ngCommand.frameId);
                        }
                        var command = {
                            name: ngCommand.name,
                            params: ngCommand.params,
                            paramDescriptions: ngCommand.paramDescriptions,
                            eventParam: data || null
                        };
                        return targetContext.commandBus.dispatch(command);
                    }
                });
            });
        };
        /**
         * 从Form获取监听器
         */
        ViewModel.prototype.initListeners = function () {
            var _this = this;
            var extractPath = function (bindingBasePath, bindingPath) {
                return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter(function (item) { return item.length > 0; }).join('/');
            };
            if (this.form) {
                var valueChangingListeners_1 = this.form.getEntityValueChangingListeners();
                Object.keys(valueChangingListeners_1).forEach(function (bindingPath) {
                    var plainPath = extractPath(_this.bindingPath, bindingPath);
                    _this.entityValueChangingListeners[plainPath] = valueChangingListeners_1[bindingPath];
                });
                var valueChangedListeners_1 = this.form.getEntityValueChangedListeners();
                Object.keys(valueChangedListeners_1).forEach(function (bindingPath) {
                    var plainPath = extractPath(_this.bindingPath, bindingPath);
                    _this.entityValueChangedListeners[plainPath] = valueChangedListeners_1[bindingPath];
                });
            }
        };
        ViewModel.prototype.bindToParent = function (parent) {
            var _this = this;
            if (parent) {
                if (parent.verifycationChanged) {
                    parent.verifycationChanged.subscribe(function (verifyInformations) {
                        if (_this.verifycationChanged) {
                            _this.verifycationChanged.next(verifyInformations);
                        }
                    });
                }
            }
        };
        /**
         * 合并审批及表单表达式并计算结果
         * @param expression 表达式
         * @returns
         */
        ViewModel.prototype.transform = function (expression) {
            if (Array.isArray(expression)) {
                var wfConf = expression.find(function (item) { return item && item.source === 'wf'; });
                if (wfConf && wfConf.value) {
                    return this.transform(wfConf.value);
                }
                else {
                    return this.transform(expression[0]);
                }
            }
            else {
                if (typeof expression === 'boolean') {
                    return expression;
                }
                else if (typeof expression === 'string') {
                    return new Function('ctx', "return " + expression).apply(this.frameContext, [this]);
                }
                else {
                    // 表达式result
                    return expression;
                }
            }
        };
        ViewModel.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ViewModel.ctorParameters = function () { return []; };
        return ViewModel;
    }());

    var Context = /** @class */ (function () {
        function Context() {
            /**
             * 上下文变量
             */
            this.params = new Map();
        }
        /**
         * 获取变量
         */
        Context.prototype.getParam = function (key) {
            return this.params.get(key);
        };
        /**
         * 设置变量
         */
        Context.prototype.setParam = function (key, value) {
            this.params.set(key, value);
        };
        Context.decorators = [
            { type: core.Injectable }
        ];
        return Context;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-12-29 10:46:01
     * @Last Modified by: Witt
     * @Last Modified time: 2018-12-30 17:56:02
     */
    /**
     * BindingData管理类
     */
    var BindingDataManager = /** @class */ (function () {
        /**
         * 构造函数
         */
        function BindingDataManager() {
            this.bindingDataMap = new Map();
        }
        /**
         * 获取BindingDataMap
         */
        BindingDataManager.prototype.getBindingDataMap = function () {
            return this.bindingDataMap;
        };
        /**
         * 根据name获取BindingData
         * @return 找不到时返回undefined
         */
        BindingDataManager.prototype.getBindingDataByName = function (name) {
            return this.bindingDataMap.get(name);
        };
        /**
         * 初始化全局的BindingData
         * @description 仅在高速模式时注册bindingData
         */
        BindingDataManager.prototype.regBindingData = function (name, bindingData) {
            this.bindingDataMap.set(name, bindingData);
        };
        BindingDataManager.prototype.unRegisteBindingData = function (name) {
            this.bindingDataMap.delete(name);
        };
        /**
         * 是否Repository已经存在
         */
        BindingDataManager.prototype.ifBindingDataExits = function (name) {
            var bindingData = this.getBindingDataByName(name);
            return bindingData ? true : false;
        };
        BindingDataManager.prototype.dispose = function () {
            this.bindingDataMap.clear();
        };
        return BindingDataManager;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-12-29 10:46:01
     * @Last Modified by: Witt
     * @Last Modified time: 2018-12-30 18:06:11
     */
    /**
     * Repository管理类
     */
    var RepositoryManager = /** @class */ (function () {
        /**
         * 构造函数
         */
        function RepositoryManager() {
            this.repositoryMap = new Map();
        }
        /**
         * 注册Repository
         */
        RepositoryManager.prototype.regRepository = function (name, repository) {
            this.repositoryMap.set(name, repository);
        };
        RepositoryManager.prototype.unRegisteRepository = function (name) {
            this.repositoryMap.delete(name);
        };
        /**
         * 获取RepositoryMap
         * @internal
         */
        RepositoryManager.prototype.getRepositoryMap = function () {
            return this.repositoryMap;
        };
        /**
         * 获取Repository数组
         */
        RepositoryManager.prototype.getRepositories = function () {
            return Array.from(this.repositoryMap.values());
        };
        /**
         * 根据name获取Repository
         */
        RepositoryManager.prototype.getRepositoryByName = function (name) {
            return this.repositoryMap.get(name);
        };
        /**
         * 是否Repository已经存在
         */
        RepositoryManager.prototype.ifRepositoryExits = function (name) {
            var repository = this.getRepositoryByName(name);
            return repository ? true : false;
        };
        RepositoryManager.prototype.dispose = function () {
            // this.repositoryMap.forEach((repo: Repository<any>) => {
            //   if (repo) {
            //     repo.entityCollection.reset(false);
            //   }
            // });
            this.repositoryMap.clear();
        };
        RepositoryManager.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RepositoryManager.ctorParameters = function () { return []; };
        return RepositoryManager;
    }());

    /**
     * FrameComponent刷新器
     */
    var FrameComponentRefresher = /** @class */ (function () {
        /**
         * 构造函数
         */
        function FrameComponentRefresher() {
            this.frameComponentMap = new Map();
        }
        /**
         * 刷新组件
         */
        FrameComponentRefresher.prototype.refreshComponents = function () {
            this.frameComponentMap.forEach(function (component, frameId) {
                if (typeof component['onFormLoad'] === 'function') {
                    component.onFormLoad();
                }
            });
        };
        /**
         * 注册组件
         * @param frameId   FrameId
         * @param component Frame组件实例
         */
        FrameComponentRefresher.prototype.regFrameComponent = function (frameId, component) {
            this.frameComponentMap.set(frameId, component);
        };
        /**
         * 注销组件注册
         */
        FrameComponentRefresher.prototype.unregFrameContext = function (frameContext) {
            var frameId = frameContext.frameId;
            this.frameComponentMap.delete(frameId);
        };
        FrameComponentRefresher.prototype.dispose = function () {
            this.frameComponentMap.clear();
        };
        return FrameComponentRefresher;
    }());

    /**
     * 变更检测控制器
     */
    var ChangeDetectionController = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ChangeDetectionController(frameContextManager) {
            this.frameContextManager = frameContextManager;
        }
        Object.defineProperty(ChangeDetectionController.prototype, "frameContexts", {
            /**
             * 所有的FrameContext数组
             */
            get: function () {
                return this.frameContextManager.getFrameContexts();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 将所有的FrameComponent重新加入到变更检测树
         * @todo
         * 1、该方法仅供数据源变更产生大量变更时优化性能使用；
         * 2、加setTimeout来保证数据变更流完成之后，再执行变更检测，目前父对象是通过subscribe监听子对象变化，导致产生异步；
         * 3、应该从根本上解决该问题，而不是setTimeout。
         */
        ChangeDetectionController.prototype.reattach = function () {
            var _this = this;
            setTimeout(function () {
                _this.frameContexts.forEach(function (frameContext) {
                    frameContext.frameComponent.reattach();
                    frameContext.frameComponent.detectChanges();
                });
            });
        };
        /**
         * 将所有的FrameComponent脱离变更检测树
         */
        ChangeDetectionController.prototype.detach = function () {
            this.frameContexts.forEach(function (frameContext) {
                frameContext.frameComponent.detach();
            });
        };
        return ChangeDetectionController;
    }());

    /**
     * The manager for all appContexts.
     * @summary
     * 1, The generator create unique frameId dynamically for each frameContext in the combination forms.
     * 2, Combined form and Host form visit each other by these unique frameIds.
     * 3, Now we make these forms has own appContext, they can't visit each other in old way.
     * 4, For compatible purpose, we collect all appContexts together and search frameContext in these appContexts by unque frameId.
     */
    var AppContextManager = /** @class */ (function () {
        /**
         * constructor
         */
        function AppContextManager() {
            this.appContextSet = new Set();
        }
        /**
         * Register AppContext
         */
        AppContextManager.prototype.registerAppContext = function (appContext) {
            this.appContextSet.add(appContext);
        };
        /**
         * Unregister AppContext
         */
        AppContextManager.prototype.unregisterAppContext = function (appContext) {
            this.appContextSet.delete(appContext);
        };
        /**
         * Get an array of all AppContexts.
         */
        AppContextManager.prototype.getAppContexts = function () {
            return Array.from(this.appContextSet);
        };
        return AppContextManager;
    }());

    var ComponentManager = /** @class */ (function () {
        function ComponentManager(appContext) {
            this.appContext = appContext;
        }
        ComponentManager.prototype.get = function (paths) {
            if (!Array.isArray(paths) || paths.length < 1) {
                throw new Error('Argument error !');
            }
            if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {
                return null;
            }
            var componentRefs = this.appContext.componentRefs;
            var component = componentRefs;
            paths.forEach(function (path) {
                component = component && component.get(path) || null;
            });
            return component;
        };
        /**
         * 获取指定frame下所有的组件
         * @param frameId
         * @returns
         */
        ComponentManager.prototype.getComponentsByFrameId = function (frameId) {
            if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {
                return null;
            }
            var componentRefs = this.appContext.componentRefs;
            return componentRefs.get(frameId);
        };
        return ComponentManager;
    }());

    /**
     * 表单Id
     */
    var FORM_ID = new core.InjectionToken('@farris/devkit FORM_ID');

    var DomService = /** @class */ (function () {
        function DomService() {
        }
        DomService.prototype.getElementByBinding = function (contents, bindingFieldId, parentElement) {
            var e_1, _a;
            var controls = [];
            try {
                for (var contents_1 = __values(contents), contents_1_1 = contents_1.next(); !contents_1_1.done; contents_1_1 = contents_1.next()) {
                    var element = contents_1_1.value;
                    // 优先变量数据集合类组件
                    if (element.fields) { // 列表
                        var childControls = this.getElementByBinding(element.fields, bindingFieldId, element);
                        controls.push.apply(controls, __spread(childControls));
                    }
                    // 其次遍历容器类组件
                    else if (element.contents) { // 容器组件
                        var childControls = this.getElementByBinding(element.contents, bindingFieldId, element);
                        controls.push.apply(controls, __spread(childControls));
                    }
                    // 再次遍历集合类字段节点
                    else if (element.editor) {
                        var childControls = this.getElementByBinding([element.editor], bindingFieldId, element);
                        controls.push.apply(controls, __spread(childControls));
                    }
                    // 最后遍历输入类组件
                    else if (element.binding && element.binding.field === bindingFieldId) {
                        controls.push({
                            element: element,
                            parentElement: parentElement
                        });
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (contents_1_1 && !contents_1_1.done && (_a = contents_1.return))
                        _a.call(contents_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            return controls;
        };
        return DomService;
    }());

    var FormContent = /** @class */ (function () {
        function FormContent() {
        }
        return FormContent;
    }());
    var FormContentForDB = /** @class */ (function () {
        function FormContentForDB(content) {
            this.Id = content.Id;
            this.Code = content.Code;
            this.Name = content.Name;
            this.Contents = JSON.stringify(content.Contents);
        }
        return FormContentForDB;
    }());
    var FormMetadaDataDom = /** @class */ (function () {
        function FormMetadaDataDom() {
        }
        return FormMetadaDataDom;
    }());
    var FormModule = /** @class */ (function () {
        function FormModule() {
        }
        return FormModule;
    }());
    // export class FormDeclaration {
    //     events: Array<any>;
    //     commands: Array<any>;
    //     states: Array<any>;
    // }
    var FormOptions = /** @class */ (function () {
        function FormOptions() {
        }
        return FormOptions;
    }());

    var SchemaService = /** @class */ (function () {
        function SchemaService() {
        }
        /**
         * 根据字段标识数组获取指定字段集合
         * @param fieldIds 字段标识数组
         * @param schema 实体结构
         * @param viewModel 视图模型
         * @returns 已Map形式存储的指定字段字典
         */
        SchemaService.prototype.getFieldsByIds = function (fieldIds, schema, viewModel) {
            var specifiedFieldsMap = new Map();
            var entities = schema.entities;
            if (entities && entities.length && viewModel) {
                var entityPath = viewModel.bindTo;
                var fields = this.getEntityFields(entities, entityPath);
                var fieldsMap_1 = this.flattenFields(fields);
                fieldIds.forEach(function (fieldId) {
                    if (fieldsMap_1.has(fieldId)) {
                        specifiedFieldsMap.set(fieldId, fieldsMap_1.get(fieldId));
                    }
                });
            }
            return specifiedFieldsMap;
        };
        /**
         * 将字段列表打平为字典结构
         * @param fields 字段属性
         * @param fieldsMap 缺省参数，用来存储字段的Map对象
         * @returns 以Map形式存储的字段字段
         */
        SchemaService.prototype.flattenFields = function (fields, fieldsMap) {
            if (fieldsMap === void 0) {
                fieldsMap = new Map();
            }
            var e_1, _a;
            try {
                for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                    var field = fields_1_1.value;
                    fieldsMap.set(field.id, field);
                    if (field.type && field.type.fields && field.type.fields.length > 0) {
                        this.flattenFields(field.type.fields, fieldsMap);
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return))
                        _a.call(fields_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            return fieldsMap;
        };
        /**
         * 获取表字段列表
         * @param entities 实体对象集合
         * @param entityPath 指定实体路径，根实体路径为'/'
         */
        SchemaService.prototype.getEntityFields = function (entities, entityPath) {
            var e_2, _a;
            if (entities && entities.length) {
                var splitIndex = entityPath.indexOf('/');
                if (splitIndex > -1) {
                    entityPath = entityPath.slice(splitIndex + 1, entityPath.length);
                }
                try {
                    // 遍历所有实体，查找匹配指定路径的实体
                    for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                        var entity = entities_1_1.value;
                        if (entityPath === '' || entityPath === entity.code || entityPath === entity.label) {
                            return entity.type.fields;
                        }
                        else {
                            var fields = this.getEntityFields(entity.type.entities, entityPath);
                            if (fields && fields.length) {
                                return fields;
                            }
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return))
                            _a.call(entities_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
            }
            return [];
        };
        return SchemaService;
    }());

    var ContextMetadataBuilder = /** @class */ (function () {
        function ContextMetadataBuilder() {
        }
        /**
         * 构造应用程序上下文元数据
         * @param formMetadataContent 表单元数据
         * @param stateMachineMetadata 状态机元数
         * @returns 应用程序上下文元数据
         */
        ContextMetadataBuilder.prototype.buildAppContextMetadata = function (formMetadataContent, stateMachineMetadata) {
            var module = formMetadataContent.module;
            var uiStates = module.states;
            var appContextMetadata = {
                identify: module.code,
                namespace: '',
                stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),
                uiStates: this.buildUiStateMetadata(uiStates)
            };
            return appContextMetadata;
        };
        /**
         * 构造视图上下文元数据
         * @param componentId 组件标识
         * @param viewModel 视图模型元数据
         * @param declarations 外部接口定义
         * @param subscriptions 事件订阅定义
         * @returns 视图上下文元数据
         */
        ContextMetadataBuilder.prototype.buildViewContextMetadata = function (component, viewModel, schema, controllers, dynamicOptions) {
            var contextMetadata = {
                identify: component.id,
                namespace: '',
                commands: this.buildCommand(viewModel.commands),
                commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),
                commandHandlerExtends: [],
                form: this.buildFormMetadata(viewModel),
                formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component, dynamicOptions),
                subForms: null,
                uiStates: this.buildUiStateMetadata(viewModel.states),
                bindingTo: viewModel.bindTo,
                viewModelCode: viewModel.code
            };
            return contextMetadata;
        };
        ContextMetadataBuilder.prototype.buildCommand = function (commandMetadataArray) {
            var commands = {};
            commandMetadataArray.reduce(function (previousValue, commandMetadata) {
                var ngCommand = {
                    name: commandMetadata.code,
                    params: {},
                    paramDescriptions: {}
                };
                commandMetadata.params.reduce(function (previousCommand, param) {
                    previousCommand.params[param.name] = param.value;
                    previousCommand.paramDescriptions[param.name] = { type: 'string' };
                    return previousCommand;
                }, ngCommand);
                previousValue[commandMetadata.code] = ngCommand;
                return previousValue;
            }, commands);
            return commands;
        };
        ContextMetadataBuilder.prototype.buildFormMetadata = function (viewModel) {
            return {
                formGroupName: viewModel.name,
                enableValidate: viewModel.enableValidation
            };
        };
        ContextMetadataBuilder.prototype.buildFormControlMetadata = function (formFields, viewModel, schema, component, dynamicOptions) {
            var _this = this;
            var formControls = {};
            var formFieldIds = formFields.map(function (formField) { return formField.id; });
            var schemaService = new SchemaService();
            var formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);
            var domService = new DomService();
            formFields.reduce(function (previousValue, field) {
                var schemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;
                var binding = schemaEntityField ? schemaEntityField.bindingPath : '';
                var parentElement = {};
                // parentElement 作为引用方式 往外传递
                var domElements = domService.getElementByBinding(component.contents, field.id, parentElement);
                var validRules = [];
                var matchedElement;
                var parentMatchedElement;
                if (domElements && domElements.length >= 1) {
                    matchedElement = domElements[0].element;
                    parentMatchedElement = domElements[0].parentElement;
                    var keys_1 = 'maxValue,minValue,required,require';
                    Object.keys(matchedElement).forEach(function (key) {
                        if (keys_1.includes(key)) {
                            if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                                // 把最大值属性转换成validRule
                                validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });
                            }
                            else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                                // 把最小值属性转换成validRule
                                validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });
                            }
                            else if (key === 'required' || key === 'require') {
                                // 把必填属性转换成validRule
                                // 必填表达式可以为状态机
                                if (matchedElement[key] === 'true' || matchedElement[key] === true) {
                                    validRules.push({ type: 'required', constraints: [true] });
                                }
                            }
                        }
                    });
                }
                previousValue[field.fieldName] = {
                    /** 控件标识 */
                    id: field.fieldName,
                    /** 控件名称 todo: 需要支持多语言 */
                    name: _this.getTitle(matchedElement, parentMatchedElement, field.fieldName),
                    /** 绑定字段路径 */
                    binding: binding,
                    /** 控件值更新时机 */
                    updateOn: field.updateOn,
                    /** 控件默认名称 */
                    defaultI18nValue: _this.getTitle(matchedElement, parentMatchedElement, field.fieldName),
                    valueChanging: field.valueChanging,
                    valueChanged: field.valueChanged,
                    valueConverter: _this.generateConverter(schemaEntityField, dynamicOptions),
                    /** 验证规则 */
                    validRules: validRules
                };
                return previousValue;
            }, formControls);
            return formControls;
        };
        /**
         * 获取对应的title值
         * @param matchedElement
         * @param defaultValue
         * @returns
         */
        ContextMetadataBuilder.prototype.getTitle = function (matchedElement, parentMatchedElement, defaultValue) {
            if (!matchedElement) {
                return defaultValue;
            }
            if (parentMatchedElement.type == 'GridField') {
                return parentMatchedElement.caption || defaultValue;
            }
            return matchedElement.title || defaultValue;
        };
        /**
         * 构造对应的converter
         * @param field
         * @returns
         */
        ContextMetadataBuilder.prototype.generateConverter = function (field, dynamicOptions) {
            var valueConverterMap = dynamicOptions["valueConverterMap"];
            if (!valueConverterMap || !field) {
                return;
            }
            if (field.type && (field.type.name == 'Date' || field.type.name == 'DateTime') && !field.converter) {
                field.converter = valueConverterMap["Date"];
            }
            if (field.multiLanguage && !field.converter) {
                field.converter = valueConverterMap["MultiLang"];
            }
            return field.converter;
        };
        /**
         * 由状态机元数据创建状态机上下文描述
         * @param stateMachineMetadata 状态机元数据
         * @returns 状态机上下文描述
         */
        ContextMetadataBuilder.prototype.buildStataMachineMetadata = function (stateMachineMetadata) {
            var _this = this;
            // 声明状态机上下文元数据
            var stateMachine = {
                states: {},
                renderStates: {},
                actions: {}
            };
            if (!stateMachineMetadata) {
                return stateMachine;
            }
            // 由状态机元数据构造NgState
            stateMachineMetadata.state.reduce(function (previousValue, state) {
                previousValue.states[state.state] = {
                    initialState: state.state === stateMachineMetadata.initialState
                };
                return previousValue;
            }, stateMachine);
            // 由状态机元数据构造NgRenderState
            Object.keys(stateMachineMetadata.renderState)
                .reduce(function (previousValue, renderStateName) {
                var renderStateMetadata = stateMachineMetadata.renderState[renderStateName];
                var renderFunction = _this.buildRenderFunction(renderStateMetadata);
                previousValue.renderStates[renderStateName] = {
                    render: renderFunction
                };
                // previousValue.renderStates[renderStateName] = {
                //   render: (context: StateMachineContext) => {
                //     return context.parser.parse(renderStateMetadata.condition, this);
                //   }
                // };
                return previousValue;
            }, stateMachine);
            // 由状态机元数据构造NgAction
            Object.keys(stateMachineMetadata.action)
                .reduce(function (previousValue, actionName) {
                var actionMetadata = stateMachineMetadata.action[actionName];
                previousValue.actions[actionName] = {
                    precondition: actionMetadata.precondition,
                    transitTo: actionMetadata.transitTo
                };
                return previousValue;
            }, stateMachine);
            // 返回状态机元数据
            return stateMachine;
        };
        ContextMetadataBuilder.prototype.buildUiStateMetadata = function (states) {
            var uiStates = {};
            states.reduce(function (previousValue, uiState) {
                previousValue[uiState.code] = {
                    stateName: uiState.code
                };
                return previousValue;
            }, uiStates);
            return uiStates;
        };
        ContextMetadataBuilder.prototype.buildRenderFunction = function (renderStateMetadata) {
            if (renderStateMetadata && renderStateMetadata.condition.length) {
                var renderFunctionString = renderStateMetadata.condition.reduce(function (previousFunctionString, condition) {
                    var conditionTarget = condition.target;
                    if (!conditionTarget.startsWith('\'')) {
                        conditionTarget = "'" + conditionTarget;
                    }
                    if (!conditionTarget.endsWith('\'')) {
                        conditionTarget = conditionTarget + "'";
                    }
                    var conditionSource = condition.source;
                    if (conditionSource.indexOf('\'') < 0) {
                        conditionSource = "'" + conditionSource + "'";
                    }
                    if (conditionSource.indexOf('getUIState') > -1) {
                        conditionSource = conditionSource.replace('getUIState', 'context.getUIState');
                    }
                    if (conditionSource.indexOf('getData') > -1) {
                        conditionSource = conditionSource.replace('getData', 'context.getData');
                    }
                    // tslint:disable-next-line: max-line-length
                    var functionString = (condition.lBracket || '') + "context.parse(" + conditionSource + ",'source')" + condition.compare + condition.target + (condition.rBracket || '');
                    if (condition.relation) {
                        switch (condition.relation.trim().toLocaleLowerCase()) {
                            case 'or':
                                functionString += '||';
                                break;
                            case 'and':
                                functionString += '&&';
                                break;
                        }
                    }
                    return previousFunctionString + functionString;
                }, '');
                if (renderFunctionString) {
                    return new Function('context', "return " + renderFunctionString + ";");
                }
            }
            return new Function('context', 'return true;');
        };
        ContextMetadataBuilder.prototype.buildCommandHandlers = function (commandMetadataArray, controllers) {
            var commandHandlers = [];
            commandMetadataArray.reduce(function (previousValue, commandReference) {
                var commandName = commandReference.code;
                var controllerId = commandReference.cmpId;
                var controller = controllers[controllerId];
                var method = Object.assign({}, controller.methods[commandReference.handlerName]);
                method.params = method.params && method.params.map(function (param) { return Object.assign({}, param); });
                if (method.params && method.params.length) {
                    commandReference.params.reduce(function (previousMethodValue, param) {
                        var methodParam = previousMethodValue.params.find(function (value) { return value.name === param.name; });
                        if (methodParam) {
                            methodParam.expression = param.value;
                        }
                        return previousMethodValue;
                    }, method);
                }
                var commandHandler = new DynamicCommandHandler(commandName, method);
                previousValue.push(commandHandler);
                return previousValue;
            }, commandHandlers);
            return commandHandlers;
        };
        return ContextMetadataBuilder;
    }());

    /**
     * ViewModel管理类
     */
    var ViewModelManager = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ViewModelManager() {
            this.viewModelMap = new Map();
        }
        /**
         * 获取ViewModelMap
         */
        ViewModelManager.prototype.getViewModelMap = function () {
            return this.viewModelMap;
        };
        /**
         * 根据name获取ViewModel
         * @return 找不到时返回undefined
         */
        ViewModelManager.prototype.getViewModelByName = function (name) {
            return this.viewModelMap.get(name);
        };
        /**
         * 初始化全局的viewModel
         */
        ViewModelManager.prototype.register = function (name, viewModel) {
            this.viewModelMap.set(name, viewModel);
        };
        /**
         * 是否Repository已经存在
         */
        ViewModelManager.prototype.exsit = function (name) {
            var viewModel = this.getViewModelByName(name);
            return viewModel ? true : false;
        };
        ViewModelManager.prototype.dispose = function () {
            this.viewModelMap.clear();
        };
        return ViewModelManager;
    }());

    /**
     * ContextMetadata管理类
     */
    var ContextMetadataManager = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ContextMetadataManager() {
            this.contextMetadataMap = new Map();
        }
        /**
         * 获取ContextMetadataMap
         */
        ContextMetadataManager.prototype.getContextMetadataMap = function () {
            return this.contextMetadataMap;
        };
        /**
         * 根据name获取ContextMetadata
         * @return 找不到时返回undefined
         */
        ContextMetadataManager.prototype.getContextMetadataByName = function (name) {
            return this.contextMetadataMap.get(name);
        };
        /**
         * 初始化全局的ContextMetadata
         */
        ContextMetadataManager.prototype.register = function (name, contextMetadata) {
            this.contextMetadataMap.set(name, contextMetadata);
        };
        /**
         * ContextMetadata是否已经存在
         */
        ContextMetadataManager.prototype.exsit = function (name) {
            var contextMetadata = this.getContextMetadataByName(name);
            return contextMetadata ? true : false;
        };
        return ContextMetadataManager;
    }());

    var FRAME_ID = new core.InjectionToken('@farris/devkit FRAME_ID');
    /**
     * 表单命名空间
     */
    var NAMESPACE = new core.InjectionToken('@farris/devkit NAMESPACE');
    /**
     * 组件初始化时的处理器
     */
    var FRAME_COMPONENT_INIT_HANDLER_TOKEN = new core.InjectionToken('@farris/frame_component_init_handler_token');

    var AppContext = /** @class */ (function (_super) {
        __extends(AppContext, _super);
        /**
         * 构造函数
         */
        function AppContext(injector, appContextManager, parent) {
            var _this = _super.call(this) || this;
            _this.typeName = 'AppContext';
            /**
             * 是否已经销毁
             */
            _this.isFormDestoryed = false;
            /**
             * 应用程序标识
             */
            _this.applicationId = null;
            _this.token = null;
            /**
             * 是否使用独立的eventBus
             * @memberof AppContext
             */
            _this.useIsoluteEventBus = false;
            /**
             * 应用上下文元数据描述
             */
            _this.metadata = {};
            /**
             * 编辑态时启用表格头
             */
            _this.enableGridHeaderWhenEditing = false;
            _this.disposed = false;
            _this.destorySignal = new rxjs.Subject();
            _this.injector = injector;
            _this.appContextManager = appContextManager;
            _this.formId = _this.injector && _this.injector.get(FORM_ID, null) || null;
            // 默认运行模式为兼容模式
            _this.runMode = _this.injector && _this.injector.get(DEVKIT_RUN_MODE, exports.RunMode.compatible) || exports.RunMode.compatible;
            RunModeService.setRunMode(_this.runMode);
            _this.params.set('formId', _this.formId);
            _this.params.set('appId', _this.ApplicationId);
            _this.params.set('token', _this.Token);
            // 确定父子关系
            if (!parent) {
                _this.parent = null;
                _this.root = _this;
            }
            else {
                _this.parent = parent;
                _this.root = parent.root;
            }
            _this.registerToManager();
            _this.frameContextManager = new FrameContextManager(_this);
            _this.frameComponentRefresher = new FrameComponentRefresher();
            _this.repositoryManager = new RepositoryManager();
            _this.bindingDataManager = new BindingDataManager();
            _this.changeDetectionController = new ChangeDetectionController(_this.frameContextManager);
            _this.messagePipe = new rxjs.Subject();
            _this.componentRefs = new Map();
            _this.componentManager = new ComponentManager(_this);
            _this.contextMetadataManager = new ContextMetadataManager();
            _this.opened = false;
            // this.sortConditionManager = new SortConditionManager();
            // this.filterConditionManager = new FilterConditionManager();
            _this.router = _this.injector && _this.injector.get(router.Router);
            _this.viewModelManager = new ViewModelManager();
            _this.contextMetadataBuilder = new ContextMetadataBuilder();
            _this.variableParseService = new VariableParseService([
                new FrameIdVariableParser(),
                new DataVariableParser(),
                new UIStateVariableParser(),
                new StateMachineVariableParser(),
                new CommandVariableParser()
            ]);
            return _this;
        }
        Object.defineProperty(AppContext.prototype, "frameContexts", {
            /**
             * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
             * @deprecated
             * @summary
             * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。
             */
            get: function () {
                return this.frameContextManager.getFrameContextMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppContext.prototype, "formModule", {
            get: function () {
                return this.formMetadataContent ? this.formMetadataContent.module : null;
            },
            enumerable: true,
            configurable: true
        });
        AppContext.prototype.dispose = function (options) {
            if (this.disposed) {
                return;
            }
            this.isFormDestoryed = true;
            this.disposed = true;
            this.router = null;
            this.unregisterFromManager();
            this.componentRefs.clear();
            if (this.stateMachine) {
                this.stateMachine.dispose();
                this.stateMachine = null;
            }
            this.frameComponentRefresher.dispose();
            this.frameContextManager.dispose();
            this.repositoryManager.dispose();
            this.viewModelManager.dispose();
            this.bindingDataManager.dispose();
            if (this.messagePipe) {
                this.messagePipe.complete();
                this.messagePipe = null;
            }
            this.injector = null;
            if (this.destorySignal) {
                this.destorySignal.next(options);
                this.destorySignal.complete();
            }
        };
        AppContext.prototype.ngOnDestroy = function () {
            this.dispose({ opportunity: exports.DestroyOpportunity.AppContextDestroy });
        };
        /**
         * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文
         * @param formMetadataContent 表单元数据
         * @param stateMachineMetadata 状态机元数据
         * @param controllers 前端构件元数据
         */
        AppContext.prototype.initializeByMetadata = function (formMetadataContent, stateMachineMetadata, controllers, options) {
            this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);
            if (!this.stateMachine) {
                // 避免由于组合表单，获取到父级状态机实例的问题
                // this.stateMachine = this.injector.get(StateMachine, new StateMachine());
                this.stateMachine = new StateMachine();
            }
            this.formMetadataContent = formMetadataContent;
            this.controllers = controllers;
            this.dynamicOptions = options;
        };
        /**
         * Register current AppContext instance to AppContextManager
         */
        AppContext.prototype.registerToManager = function () {
            if (!this.appContextManager) {
                return;
            }
            this.appContextManager.registerAppContext(this);
        };
        /**
         * Unregister current AppContext instance from AppContextManager
         */
        AppContext.prototype.unregisterFromManager = function () {
            if (!this.appContextManager) {
                return;
            }
            this.appContextManager.unregisterAppContext(this);
        };
        /**
         * 注册FrameContext
         */
        AppContext.prototype.regFrameContext = function (frameContext) {
            var repository = frameContext.repository;
            var repositoryName = repository.name;
            // Repository
            if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
                this.repositoryManager.regRepository(repositoryName, repository);
            }
            // BindingData
            if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
                var bindingData = null;
                // 仅高速模式下使用bindingDataManager
                if (this.runMode === exports.RunMode.highSpeed) {
                    bindingData = BindingDataFactory.createFromRepository(repository, '/');
                    this.bindingDataManager.regBindingData(repositoryName, bindingData);
                }
            }
            // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
            this.frameContextManager.regFrameContext(frameContext);
        };
        AppContext.prototype.regContextMetadata = function (componentId, contextMetadata) {
            if (!this.contextMetadataManager.exsit(componentId)) {
                this.contextMetadataManager.register(componentId, contextMetadata);
            }
        };
        /**
         * 获取整个表单的AppContext
         */
        AppContext.prototype.getFormAppContext = function () {
            return this;
        };
        /**
         * 销毁表单
         * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制
         */
        AppContext.prototype.destory = function () {
            this.dispose();
        };
        Object.defineProperty(AppContext.prototype, "isDestoryed", {
            get: function () {
                return this.isFormDestoryed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppContext.prototype, "ApplicationId", {
            /**
             * 应用id
             */
            get: function () {
                if (!!this.applicationId) {
                    return this.applicationId;
                }
                this.applicationId = UID.create();
                return this.applicationId;
            },
            set: function (appId) {
                this.applicationId = appId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppContext.prototype, "Token", {
            get: function () {
                if (!!this.token) {
                    return this.token;
                }
                this.token = UID.create();
                return this.token;
            },
            set: function (token) {
                this.token = token;
            },
            enumerable: true,
            configurable: true
        });
        // #region 弃用的老方法
        /**
         * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
         * @deprecated
         */
        AppContext.prototype.registerCommandHandler = function (frameId, component) {
            this.frameComponentRefresher.regFrameComponent(frameId, component);
        };
        /**
         * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
         * @deprecated
         */
        AppContext.prototype.refresh = function () {
            this.frameComponentRefresher.refreshComponents();
        };
        /**
         * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。
         * @deprecated
         */
        AppContext.prototype.getFrameContext = function (frameId) {
            return this.frameContextManager.getFrameContextById(frameId);
        };
        AppContext.prototype.getContextById = function (identify) {
            var context = this.frameContextManager.getFrameContextById(identify);
            return context;
        };
        /**
         * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
         * @deprecated
         */
        AppContext.prototype.getAllFrameContexts = function () {
            return this.frameContextManager.getFrameContextMap();
        };
        /**
         * 处理行变更
         */
        AppContext.prototype.handleSelectChange = function (change, srcFrameContext) {
            var force = change.force || false;
            this.frameContexts.forEach(function (targetFrameContext) {
                // 相同的FrameCotnext或者Repository不一致的情况下，不同步
                if (targetFrameContext === srcFrameContext
                    || targetFrameContext.repository !== srcFrameContext.repository) {
                    return;
                }
                var bindingData = targetFrameContext.bindingData;
                var bindingList = bindingData.getValue(change.path);
                var currentId = change.value['id'];
                if (bindingList && bindingList.currentId !== currentId || force) {
                    // 设置当前行，但不对外广播
                    bindingList.setCurrentId(currentId, true, false, force);
                }
            });
        };
        // #endregion
        AppContext.prototype.buildRenderViewContext = function (componentId) {
            // 提取视图模型集合
            var viewModels = this.formModule.viewmodels;
            // 提取组件描述集合
            var viewComponents = this.formModule.components;
            // 提取schema节点
            var schema = this.formModule.schemas[0];
            // 查找匹配指定标识的组件节点
            var matchedComponent = viewComponents.find(function (component) { return component.id === componentId; });
            // 匹配指定组件的视图模型节点
            var matchedViewModel = viewModels.find(function (viewModel) { return matchedComponent.viewModel === viewModel.id; });
            // 查找匹配视图模型的父节点
            var parentViewModel = viewModels.find(function (viewModel) { return viewModel.id === matchedViewModel.parent; });
            var parentComponentId = '';
            // 如果匹配上上级视图模型，提上级视图标识
            if (parentViewModel) {
                var parentComponent = viewComponents.find(function (component) { return component.viewModel === parentViewModel.id; });
                if (parentComponent) {
                    parentComponentId = parentComponent.id;
                }
            }
            // 如果存在上级组件，提取器上下文对象。
            // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;
            // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);
            this.buildRenderViewContextRecursively(matchedViewModel, schema);
        };
        AppContext.prototype.buildRenderViewContextRecursively = function (viewModel, schema) {
            var _this = this;
            var controllers = this.controllers;
            var viewComponents = this.formModule.components;
            var matchedComponent = viewComponents.find(function (component) { return component.viewModel === viewModel.id; });
            var contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers, this.dynamicOptions);
            // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);
            // const commandHandlerExtends: CommandHandlerExtender[] = [];
            // const viewContext = new ViewComponentContext();
            //   contextMetadata,
            //   this,
            //   parent,
            //   this.injector
            // );
            // this.regFrameContext(viewContext);
            // viewContext.init();
            var contextMetadataId = (this.namespace ? (this.namespace + '_') : '') + matchedComponent.id;
            contextMetadata.namespace = this.namespace || '';
            this.regContextMetadata(contextMetadataId, contextMetadata);
            var viewModels = this.formModule.viewmodels;
            var subViewModels = viewModels.filter(function (subViewModel) { return subViewModel.parent === viewModel.id; });
            if (subViewModels && subViewModels.length) {
                subViewModels.forEach(function (subViewModel) {
                    _this.buildRenderViewContextRecursively(subViewModel, schema);
                });
            }
        };
        AppContext.prototype.getComponentProviders = function (componentId) {
            var contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);
            var bindingData = new BindingData();
            var form = new Form();
            var namespace = contextMetadata.namespace;
            var repository = this.repository || this.injector.get(Repository, null);
            var stateMachine = this.stateMachine;
            var uiState = new UIState();
            var viewModel = new ViewModel();
            viewModel.setMetadata(contextMetadata);
            return [
                { provide: FRAME_ID, useValue: componentId },
                { provide: NAMESPACE, useValue: namespace },
                { provide: FrameContext, useClass: FrameContext },
                { provide: AppContext, useValue: this },
                { provide: BindingData, useValue: bindingData },
                { provide: Form, useValue: form },
                { provide: Repository, useValue: repository },
                { provide: StateMachine, useValue: stateMachine },
                { provide: UIState, useValue: uiState },
                { provide: ViewModel, useValue: viewModel },
                {
                    provide: VariableParseService, useValue: new VariableParseService([
                        new FrameIdVariableParser(),
                        new DataVariableParser(),
                        new UIStateVariableParser(),
                        new StateMachineVariableParser(),
                        new CommandVariableParser()
                    ])
                }
            ];
        };
        AppContext.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AppContext.ctorParameters = function () {
            return [
                { type: core.Injector, decorators: [{ type: core.Optional }] },
                { type: AppContextManager, decorators: [{ type: core.Optional }] },
                { type: AppContext, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
            ];
        };
        return AppContext;
    }(Context));

    /*
     * @Author: Witt
     * @Date: 2018-12-30 17:11:37
     * @Last Modified by: Witt
     * @Last Modified time: 2018-12-30 17:19:01
     */
    /**
     * FrameContext管理类
     */
    var FrameContextManager = /** @class */ (function () {
        /**
         * 构造函数
         */
        function FrameContextManager(appContext) {
            this.frameContextMap = new Map();
            this.frameContextSet = new Set();
            this.appContext = appContext;
        }
        /**
         * 注册FrameContext
         */
        FrameContextManager.prototype.regFrameContext = function (frameContext) {
            var frameId = frameContext.frameId;
            // 如果存在，先删除
            if (this.frameContextMap.has(frameId) === true) {
                var existedFrameContext = this.frameContextMap.get(frameId);
                this.frameContextMap.delete(frameId);
                this.frameContextSet.delete(existedFrameContext);
            }
            frameContext.index = this.frameContextSet.size;
            this.frameContextMap.set(frameId, frameContext);
            this.frameContextSet.add(frameContext);
        };
        /**
         * 注销组件注册
         */
        FrameContextManager.prototype.unregFrameContext = function (frameContext) {
            var frameId = frameContext.frameId;
            this.frameContextMap.delete(frameId);
            this.frameContextSet.delete(frameContext);
            // 仅在高速模式下才会在bindingDataManager中注册绑定数据实例
            if (this.appContext.runMode === exports.RunMode.highSpeed) {
                var namespace = frameContext.namespace;
                var repositoryName = frameContext.repository && frameContext.repository.name;
                // 获取ns相同的framecontext，如果已经没有组件上下文了需要销毁bindingData
                var frameContexts = this.getFrameContextsByNamespace(namespace);
                if (!frameContexts || frameContexts.length < 1) {
                    this.appContext.bindingDataManager.unRegisteBindingData(repositoryName);
                }
            }
        };
        /**
         * 获取FrameContextMap
         */
        FrameContextManager.prototype.getFrameContextMap = function () {
            return this.frameContextMap;
        };
        /**
         * 获取全部FrameContext
         */
        FrameContextManager.prototype.getFrameContexts = function () {
            return Array.from(this.frameContextSet);
        };
        /**
         * 获取组合表单某个表单的所有frameContext
         * @param namespace 命名空间
         */
        FrameContextManager.prototype.getFrameContextsByNamespace = function (namespace) {
            return Array.from(this.frameContextSet).filter(function (frameContext) { return frameContext && frameContext.namespace === namespace; });
        };
        /**
         * 根据id获取FrameContext
         */
        FrameContextManager.prototype.getFrameContextById = function (frameId) {
            var targetFrameContext = this.frameContextMap.get(frameId);
            if (targetFrameContext) {
                return targetFrameContext;
            }
            return this.getFrameContextFromAllAppContexts(frameId);
        };
        /**
         * Get the root FrameContext instance
         * @return Return the FrameContext instance whose parent is null, and undefined otherwise.
         */
        FrameContextManager.prototype.getRootFrameContext = function () {
            var frameContexts = this.getFrameContexts();
            var rootFrameContext = frameContexts.find(function (frameContext) {
                return frameContext.parent === null;
            });
            return rootFrameContext;
        };
        FrameContextManager.prototype.dispose = function () {
            this.frameContextMap.clear();
            this.frameContextSet.clear();
        };
        /**
         * 遍历所有的AppContext查找指定的
         * @summary
         * 1、老表单中所有的frameId均不重复；
         * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；
         * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。
         */
        FrameContextManager.prototype.getFrameContextFromAllAppContexts = function (frameId) {
            if (!this.appContext.appContextManager) {
                return;
            }
            var targetFrameContext;
            var appContexts = this.appContext.appContextManager.getAppContexts();
            appContexts.some(function (appContext) {
                var frameContextMap = appContext.frameContextManager.getFrameContextMap();
                if (frameContextMap.has(frameId) === true) {
                    targetFrameContext = frameContextMap.get(frameId);
                    return true;
                }
                else {
                    return false;
                }
            });
            return targetFrameContext;
        };
        FrameContextManager.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FrameContextManager.ctorParameters = function () {
            return [
                { type: AppContext }
            ];
        };
        return FrameContextManager;
    }());

    /**
     * 应用（表单）上下文
     * ----------------------------------------
     * @todo
     * 1、AppContext与其他组成部分之间应该使用依赖注入；
     * 2、各个Manager之间的依赖应该使用依赖注入处理；
     * 3、由于目前的修改原则是不引起大量的重新编译，只能暂时通过new来实现。
     * ----------------------------------------
     */

    var EventBusProxy = /** @class */ (function () {
        function EventBusProxy(eventBus, hostType, eventTokenValueProvider) {
            this.eventBus = eventBus;
            this.hostType = hostType;
            this.eventTokenValueProvider = eventTokenValueProvider;
        }
        EventBusProxy.prototype.post = function (eventName, data) {
            this.eventBus.post(this.hostType, this.eventTokenValueProvider(), eventName, data);
        };
        return EventBusProxy;
    }());

    var NG_DECLARATION = 'NgDeclaration';
    /**
     * NgDeclaration
     * 公开事件属性装饰器工厂
     */
    function NgDeclaration(options) {
        var decoratorFactory = makePropDecorator(NG_DECLARATION, function (obj) { return obj; });
        return decoratorFactory(options);
    }

    (function (EventTypeEnum) {
        EventTypeEnum[EventTypeEnum["COMPONENT"] = 0] = "COMPONENT";
        EventTypeEnum[EventTypeEnum["ROUTE"] = 1] = "ROUTE";
    })(exports.EventTypeEnum || (exports.EventTypeEnum = {}));

    var Declaration = /** @class */ (function () {
        function Declaration() {
        }
        /**
         * 初始化
         */
        Declaration.prototype.init = function (frameComponent) {
            if (!frameComponent) {
                return;
            }
            this.bindDeclaration(frameComponent, null);
        };
        /**
         *  依据定义列表进行初始化
         * @param frameComponent 表单component实例
         * @param ngDeclarations 事件定义列表信息
         */
        Declaration.prototype.initWithDeclarations = function (frameComponent, ngDeclarations) {
            if (!frameComponent) {
                return;
            }
            this.bindDeclaration(frameComponent, null);
        };
        /**
         * 基于事件元数据构建事件
         * 调整访问级别 便于解析表单进行初始化动作
         * @param context 框架上下文
         */
        Declaration.prototype.bindDeclaration = function (frameComponent, ngDeclarations) {
            var _this = this;
            var context = frameComponent.context;
            if (!context) {
                return;
            }
            var ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();
            if (!ngPublicEventProps) {
                return;
            }
            Object.keys(ngPublicEventProps).forEach(function (propertyName) {
                var ngExportEvent = ngPublicEventProps[propertyName];
                Object.defineProperty(_this, propertyName, {
                    value: function (params) {
                        // 获取命令处理上下文
                        var targetContext = context;
                        // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）
                        // if (ngExportEvent.frameId) {
                        //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);
                        // }
                        var root = targetContext.root;
                        var emitter = ngExportEvent.token;
                        var tokenValue = ngExportEvent.token;
                        var eventName = ngExportEvent.name;
                        var eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));
                        var eventType = ngExportEvent.type;
                        var eventBus = targetContext.eventBus || root.eventBus;
                        if (!eventBus) {
                            return;
                        }
                        var injector = targetContext.injector || root.injector;
                        var variableParseService = injector.get(VariableParseService);
                        // 执行参数解析
                        setTimeout(function () {
                            eventArgs = variableParseService.parse(eventArgs, targetContext, params);
                            var eventSender = targetContext.frameComponent;
                            var currentContext = targetContext;
                            var eventId = new Date().valueOf();
                            if (eventType && eventType === exports.EventTypeEnum.ROUTE) {
                                // 事件依次向上冒泡
                                while (currentContext) {
                                    currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);
                                    // currentContext = currentContext.parent;
                                    currentContext = _this.getParentContext(currentContext);
                                }
                            }
                            else {
                                eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);
                            }
                        }, 0);
                    }
                });
            });
        };
        /**
         * 获取事件定义列表
         * @returns  事件定义
         */
        Declaration.prototype.getNgPublicEvent = function () {
            return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);
        };
        /**
         * 获取父Context
         * @param context 当前上下文
         */
        Declaration.prototype.getParentContext = function (context) {
            // 首先查找直接上级FrameContext
            if (context.parent) {
                return context.parent;
            }
            // 到了AppContext边界，返回上级AppContext的根FrameContext
            var parentAppContext = context.appContext.parent;
            if (parentAppContext) {
                return parentAppContext.frameContextManager.getRootFrameContext();
            }
            return null;
        };
        Declaration.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Declaration.ctorParameters = function () { return []; };
        return Declaration;
    }());

    var NG_SUBSCRIPTION = 'NgSubscription';
    var ParamMap = /** @class */ (function () {
        function ParamMap() {
        }
        return ParamMap;
    }());
    /**
     * NgSubscription
     * 事件订阅属性装饰器工厂
     */
    function NgSubscription(options) {
        var decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, function (obj) { return obj; });
        return decoratorFactory(options);
    }
    function getNgSubscriptionDecoratorFactory() {
        var decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, function (obj) { return obj; });
        return decoratorFactory;
    }

    var Subscription = /** @class */ (function () {
        function Subscription() {
        }
        /**
         * 初始化
         */
        Subscription.prototype.init = function (frameComponent) {
            if (!frameComponent) {
                return;
            }
            return this.bindSubscription(frameComponent, null);
        };
        /**
         *  根据订阅列表进行初始化
         * @param frameComponent
         * @param ngEvents 订阅列表
         * @returns eventPipes
         */
        Subscription.prototype.initWithSubscriptions = function (frameComponent, ngEvents) {
            if (!frameComponent) {
                return;
            }
            return this.bindSubscription(frameComponent, ngEvents);
        };
        /**
         * 更改成为public形式 目的为了解析表单可以进行重新绑定
         * @param frameComponent
         * @param ngEvents
         * @returns
         */
        Subscription.prototype.bindSubscription = function (frameComponent, ngEvents) {
            var _this = this;
            var context = frameComponent.context;
            if (!context) {
                return;
            }
            var ngEventHandlerProps = ngEvents ? ngEvents : this.getNgEvents(frameComponent);
            if (!ngEventHandlerProps) {
                return;
            }
            var eventPipes = [];
            Object.keys(ngEventHandlerProps).forEach(function (propertyName) {
                var ngImportEvent = ngEventHandlerProps[propertyName];
                // 获取待订阅方法详情，尝试执行订阅
                var targetContext = context;
                var receiver = frameComponent;
                var emitter = ngImportEvent.token;
                var tokenValue = ngImportEvent.token;
                var eventName = ngImportEvent.name;
                var paramMapCollection = ngImportEvent.paramMapCollection;
                var eventPipe = targetContext.eventBus.on(emitter, tokenValue, eventName, receiver, function (eventArgs) {
                    _this.subscriptionHandler(eventArgs, paramMapCollection, targetContext);
                    var eventHandler = frameComponent[eventName];
                    if (!eventHandler) {
                        return;
                    }
                    try {
                        eventHandler(receiver, eventArgs);
                    }
                    catch (_a) {
                        throw new Error('Error invoking method ' + eventName);
                    }
                });
                eventPipes.push(eventPipe);
            });
            return eventPipes;
        };
        /**
         * 获取组件订阅列表
         * @param frameComponent 表单component
         * @returns 组件订阅列表信息
         */
        Subscription.prototype.getNgEvents = function (frameComponent) {
            return MetadataUtil.getPropsMetadatasByName(frameComponent.constructor, NG_SUBSCRIPTION);
        };
        Subscription.prototype.subscriptionHandler = function (param, paramMapCollection, currentFrameContext) {
            if (!param || !paramMapCollection || paramMapCollection.length <= 0 || !currentFrameContext) {
                return;
            }
            this.paramMap2UiState(param, paramMapCollection, currentFrameContext);
        };
        /**
         * 设置paramMap后，将param映射到UISTATE上
         */
        Subscription.prototype.paramMap2UiState = function (param, paramMapCollection, currentFrameContext) {
            for (var i = 0; i < paramMapCollection.length; i++) {
                var from = paramMapCollection[i].from;
                var frameId = paramMapCollection[i].frameId;
                var to = paramMapCollection[i].to;
                if (!from || !frameId || !to) {
                    continue;
                }
                var destContext = this.getFrameContext(frameId, currentFrameContext);
                if (destContext == null) {
                    continue;
                }
                this.setUiStateProperty(to, param[from], destContext.uiState);
                // this.setUiStateProperty(to, param[from], currentFrameContext.uiState);
            }
        };
        Subscription.prototype.getFrameContext = function (targetFrameContextId, currentContext) {
            var destContext = null;
            try {
                destContext = currentContext.appContext.getFrameContext(targetFrameContextId);
            }
            catch (_a) {
                throw new Error('Error in Getting FrameContext');
            }
            return destContext;
        };
        Subscription.prototype.setUiStateProperty = function (propertyName, propertyValue, uiState) {
            try {
                uiState.setPropertyValue(propertyName, propertyValue);
            }
            catch (_a) {
                throw new Error("Error in Setting Property Value of the current UISTATE" + uiState);
            }
        };
        Subscription.decorators = [
            { type: core.Injectable }
        ];
        return Subscription;
    }());

    var EventPipeType;
    (function (EventPipeType) {
        EventPipeType[EventPipeType["Compile"] = 0] = "Compile";
        EventPipeType[EventPipeType["Parsing"] = 1] = "Parsing";
    })(EventPipeType || (EventPipeType = {}));

    var EventPipe = /** @class */ (function () {
        function EventPipe(name, tokenValue, emitter, parentEventPipeList) {
            this.name = name;
            this.tokenValue = tokenValue;
            this.emitter = emitter;
            this.parentEventPipeList = parentEventPipeList;
            this.lastEventId = -1;
            /**
             * EventPipe类型，编译类型表单检查是否在同一上下文中，解析类型表单不判断
             */
            this.eventPipeType = EventPipeType.Compile;
            this.eventSubject = new rxjs.Subject();
            this.subscriptionMap = new Map();
            this.onceSubscriptionMap = new Map();
            if (this.parentEventPipeList) {
                this.parentEventPipeList.push(this);
            }
        }
        Object.defineProperty(EventPipe.prototype, "subscriptions", {
            get: function () {
                return this.subscriptionMap;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 发送事件
         */
        EventPipe.prototype.post = function (args, sender, eventType, eventId) {
            var eventData = {
                args: args,
                sender: sender,
                eventType: eventType,
                eventId: eventId
            };
            this.eventSubject.next(eventData);
        };
        /**
         * 订阅事件
         */
        EventPipe.prototype.subscribe = function (eventHandler, receiver) {
            var _this = this;
            // 对于弹窗，caller是弹窗中的组件，每次caller不同，但还是会重复注册。
            // 重复订阅检测
            var subscriptionInMap = this.subscriptionMap.get(receiver);
            if (subscriptionInMap != null) {
                subscriptionInMap.unsubscribe();
                this.subscriptionMap.delete(receiver);
            }
            var subscription = this.eventSubject.subscribe(function (eventData) {
                var args = eventData.args;
                var sender = eventData.sender;
                var eventType = eventData.eventType || null;
                var eventId = eventData.eventId || 0;
                if (_this.lastEventId >= eventId) {
                    return;
                }
                _this.lastEventId = eventId;
                // 判断sender和receiver的关系，如果在同一个AppContext或者在在一棵树上，则处理
                // 该判断主要解决SPA模式下，一个页面被打开多次的场景。
                if (!(eventType === exports.EventTypeEnum.ROUTE)) {
                    if (_this.isInSampeScope(sender, receiver) === false) {
                        return;
                    }
                }
                eventHandler.call(receiver, args);
            });
            this.subscriptionMap.set(receiver, subscription);
            return this;
        };
        EventPipe.prototype.subscribeOnce = function (eventHandler, caller) {
            var subscription = this.eventSubject.subscribe(function (value) { return eventHandler.call(caller, value); });
            this.onceSubscriptionMap.set(caller, subscription);
            return this;
        };
        EventPipe.prototype.unSubscribe = function (subscriber) {
            var subscription = this.subscriptionMap.get(subscriber);
            if (subscription) {
                subscription.unsubscribe();
                subscription = null;
                this.subscriptionMap.delete(subscriber);
            }
            else {
                subscription = this.onceSubscriptionMap.get(subscriber);
                if (subscription) {
                    subscription.unsubscribe();
                    subscription = null;
                    this.onceSubscriptionMap.delete(subscriber);
                }
            }
        };
        // 注销使用once方法注册的订阅。
        EventPipe.prototype.unSubscribeForOnce = function () {
            var e_1, _a;
            try {
                for (var _b = __values(Array.from(this.onceSubscriptionMap.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var subscriber = _c.value;
                    this.unSubscribe(subscriber);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        };
        EventPipe.prototype.matchEmitterToken = function (emitter, tokenValue) {
            if (this.emitter && emitter && this.emitter !== emitter) {
                return false;
            }
            if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
                return false;
            }
            return true;
        };
        EventPipe.prototype.examByTargetToken = function (target, tokenValue) {
            if (this.emitter !== target) {
                return false;
            }
            if (this.tokenValue !== tokenValue) {
                return false;
            }
            return true;
        };
        EventPipe.prototype.dispose = function (subscriber) {
            var _this = this;
            this.unSubscribe(subscriber);
            if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {
                var location_1 = this.parentEventPipeList.findIndex(function (item) { return item === _this; });
                if (location_1 !== -1) {
                    this.parentEventPipeList.splice(location_1, 1);
                }
            }
        };
        /**
         * 根据caller进行注销
         */
        EventPipe.prototype.disposeByCaller = function (caller) {
            var subscriptionInMap = this.subscriptionMap.get(caller);
            if (subscriptionInMap != null) {
                subscriptionInMap.unsubscribe();
                this.subscriptionMap.delete(caller);
            }
        };
        /**
         * 检查是否在同一个上下文中
         * @todo
         * 1、强识别了sender和receiver的结构来判断，不合理；
         * 2、应该声明一个接口来约束结构。
         */
        EventPipe.prototype.isInSampeScope = function (sender, receiver) {
            // 用来区分编译类型的表单，还是解析类型的表单
            if (this.eventPipeType === EventPipeType.Parsing) {
                return true;
            }
            // 兼容老代码，sender不存在时，不进行检测
            if (!sender) {
                return true;
            }
            // 异常处理场景
            if (sender === receiver) {
                return true;
            }
            // 判断是否是FrameContext
            if (!sender.context || !sender.context.appContext ||
                !receiver.context || !receiver.context.appContext) {
                return false;
            }
            var senderAppContext = sender.context.appContext;
            var receiverAppContext = receiver.context.appContext;
            // 情况1：现状
            // 对于老表单，在模块上注入了一个AppContext；
            // 组合表单中主表单的root-component（被组合的表单的root-componetn上没有注入）上注入了AppContext
            // SPA模式下，如法通过Root AppContext区分，是不是同一个菜单内的事件；
            // 只能判断根组件上的AppContext来判断
            // 判断根AppContext是否一致
            if (senderAppContext === receiverAppContext) {
                return true;
            }
            // 情况2：注入改造后
            // 如果以后注入关系改造了，模块上的AppContext移除掉
            // 组合表单中每个root-component都拥有一个AppContext;
            // 组合表单中主表单的root-component的AppContext为Root AppContext
            // if (senderAppContext.root === receiverAppContext.root) {
            //   return true;
            // }
            // 情况3：注入改造后老表单兼容
            // 如果以后注入关系改造了，但产品部没有重新编译;
            // 和情况2类似，不同的是模块上还遗留了一个AppContext；
            // 此时Root Appcontext还是模块上的，如何来判断？
            // 1、考虑通过sender的injector一直网上找，找到模块之前的那个组件injector，从其中拿AppContext来判断；
            // 2、找一个全部重新编译的时机再改造。
            if ((senderAppContext.useIsoluteEventBus && senderAppContext.isoluteEventBus) ||
                (receiverAppContext.useIsoluteEventBus && receiverAppContext.isoluteEventBus)) {
                // 如果存在独立加载js  那么
                return true;
            }
            return false;
        };
        return EventPipe;
    }());

    var EventBus = /** @class */ (function () {
        function EventBus() {
            this.proxyMap = new Map();
            this.eventMap = new Map();
        }
        EventBus.prototype.getProxy = function (ownerType, eventTokenValueProvider) {
            var ownerName = ownerType.constructor.typeName || ownerType.constructor.name;
            if (!this.proxyMap.has(ownerName)) {
                this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));
            }
            return this.proxyMap.get(ownerName);
        };
        /**
         * 发送事件，通知订阅者接收消息。
         */
        // tslint:disable-next-line: max-line-length
        EventBus.prototype.post = function (emitterType, tokenValue, eventName, eventArgs, sender, eventType, eventId) {
            var e_1, _a;
            var eventPipeList = this.eventMap.get(eventName);
            if (!eventPipeList) {
                return;
            }
            if (!emitterType) {
                console.error('post方法的参数emitterType不能为空。');
                return;
            }
            var emitter;
            if (emitterType instanceof core.Type) {
                emitter = emitterType.typeName || emitterType.name;
            }
            else {
                emitter = emitterType;
            }
            if (typeof eventId === 'undefined') {
                eventId = new Date().valueOf();
            }
            try {
                for (var eventPipeList_1 = __values(eventPipeList), eventPipeList_1_1 = eventPipeList_1.next(); !eventPipeList_1_1.done; eventPipeList_1_1 = eventPipeList_1.next()) {
                    var eventPipe = eventPipeList_1_1.value;
                    if (eventPipe.matchEmitterToken(emitter, tokenValue)) {
                        eventPipe.post(eventArgs, sender, eventType, eventId);
                        eventPipe.unSubscribeForOnce();
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (eventPipeList_1_1 && !eventPipeList_1_1.done && (_a = eventPipeList_1.return))
                        _a.call(eventPipeList_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        };
        /**
         * 订阅事件
         */
        EventBus.prototype.on = function (target, tokenValue, eventName, caller, handler) {
            return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);
        };
        /**
         * 注销监听
         * @param target
         * @param tokenValue
         * @param eventName
         * @param caller
         */
        EventBus.prototype.off = function (target, tokenValue, eventName, caller) {
            var eventPipeList = this.eventMap.get(eventName);
            if (eventPipeList) {
                var index = eventPipeList.findIndex(function (eventPipe) {
                    if (eventPipe.subscriptions.get(caller)) {
                        return eventPipe.name === eventName && eventPipe.tokenValue === tokenValue && eventPipe.emitter === target;
                    }
                    return false;
                });
                if (index !== -1) {
                    eventPipeList.splice(index, 1);
                }
            }
        };
        /**
         * 订阅一次。接收到一次消息之后自动取消订阅
         */
        EventBus.prototype.once = function (target, tokenValue, eventName, caller, handler) {
            return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);
        };
        /**
         * 发送一个请求事件，获取监听者的响应并处理
         */
        EventBus.prototype.requestFor = function (target, tokenValue, requestName, requestValue, success, fail) {
            var eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);
            if (eventPipe) {
                this.once(target, tokenValue, requestName, this, function (response) {
                    if (response.status === 'success') {
                        success(response.data);
                    }
                    else {
                        if (fail) {
                            fail('No target responser listening');
                        }
                    }
                });
                eventPipe.post({ target: target, token: tokenValue, data: requestValue });
            }
            else {
                if (fail) {
                    fail('No target responser listening.');
                }
            }
        };
        /**
         * 监听一个请求事件，给出响应
         */
        EventBus.prototype.responseOn = function (responseSubject, requestName, callback) {
            var _this = this;
            this.on('RequestSubject', null, requestName, this, function (requestObj) {
                var response = { status: 'fail', data: null };
                if (responseSubject === requestObj.target) {
                    response.data = callback(requestObj.data);
                    response.status = 'success';
                }
                _this.post(requestObj.target, requestObj.token, requestName, response);
            });
        };
        EventBus.prototype.getEventPipe = function (eventName, target, tokenValue) {
            var eventPipeList = this.eventMap.get(eventName);
            if (!eventPipeList) {
                eventPipeList = new Array();
                this.eventMap.set(eventName, eventPipeList);
            }
            // 1、一个事件不允许多个订阅
            // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
            // if (!eventPipe) {
            //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
            // }
            // 2、一个事件允许多个订阅
            var eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
            return eventPipe;
        };
        EventBus.prototype.findExistEventPipe = function (eventName, target, tokenValue) {
            var e_2, _a;
            var eventPipeList = this.eventMap.get(eventName);
            if (!eventPipeList) {
                return null;
            }
            try {
                // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
                for (var eventPipeList_2 = __values(eventPipeList), eventPipeList_2_1 = eventPipeList_2.next(); !eventPipeList_2_1.done; eventPipeList_2_1 = eventPipeList_2.next()) {
                    var eventPipe = eventPipeList_2_1.value;
                    if (eventPipe.matchEmitterToken(target, tokenValue)) {
                        return eventPipe;
                    }
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (eventPipeList_2_1 && !eventPipeList_2_1.done && (_a = eventPipeList_2.return))
                        _a.call(eventPipeList_2);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
            return null;
        };
        EventBus.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EventBus.ctorParameters = function () { return []; };
        return EventBus;
    }());
    var EventCache = /** @class */ (function () {
        function EventCache() {
        }
        EventCache.setToken = function (key, value) {
            EventCache.tokens.set(key, value);
        };
        EventCache.getToken = function (key) {
            return EventCache.tokens.get(key);
        };
        EventCache.tokens = new Map();
        return EventCache;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-30 11:08:18
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-06-01 17:10:04
     */
    var EXCEPTION_HANDLER = new core.InjectionToken('@farris/devkit ExceptionHandler');

    var UserSettingsToken = new core.InjectionToken('@farris/devkit UserSettingsToken');

    // tslint:disable-next-line: no-namespace
    (function (Expression) {
        /**
         * 表达式绑定字段类型（表达式绑定到实体、UIState?）
         */
        var ExpressionBindingType;
        (function (ExpressionBindingType) {
            ExpressionBindingType["State"] = "State";
            ExpressionBindingType["Field"] = "Field";
        })(ExpressionBindingType = Expression.ExpressionBindingType || (Expression.ExpressionBindingType = {}));
        /**
         * 表达式类型
         */
        var ExpressionType;
        (function (ExpressionType) {
            /**
             * 必填表达式
             */
            ExpressionType["Required"] = "require";
            /**
             * 只读表达式
             */
            ExpressionType["Readonly"] = "readonly";
            /**
             * 计算表达式
             */
            ExpressionType["Compute"] = "compute";
            /**
             * 依赖表达式
             */
            ExpressionType["Dependency"] = "dependency";
            /**
             * 是否可见
             */
            ExpressionType["Visible"] = "visible";
            /**
             * 关联表达式
             */
            ExpressionType["Relative"] = "relative";
            /**
             * 校验表达式
             */
            ExpressionType["Validate"] = "validate";
            /**
             * 帮助前
             */
            ExpressionType["DataPicking"] = "dataPicking";
        })(ExpressionType = Expression.ExpressionType || (Expression.ExpressionType = {}));
        /**
         * 事件类型
         */
        var EventType;
        (function (EventType) {
            EventType["ValueChanged"] = "VALUE_CHANGED";
            EventType["SelectionChanged"] = "SELECTION_CHANGED";
            EventType["Load"] = "Load";
            EventType["Append"] = "Append";
            EventType["Remove"] = "Remove";
            EventType["Update"] = "Update";
        })(EventType = Expression.EventType || (Expression.EventType = {}));
        var EventSource;
        (function (EventSource) {
            EventSource["Field"] = "Field";
            EventSource["State"] = "State";
            EventSource["BindingData"] = "BindingData";
            EventSource["Repository"] = "Repository";
        })(EventSource = Expression.EventSource || (Expression.EventSource = {}));
        var MessageType;
        (function (MessageType) {
            MessageType["error"] = "error";
            MessageType["info"] = "info";
            MessageType["warning"] = "warning";
        })(MessageType = Expression.MessageType || (Expression.MessageType = {}));
        var EffectPath;
        (function (EffectPath) {
            EffectPath[EffectPath["currentRow"] = 0] = "currentRow";
        })(EffectPath = Expression.EffectPath || (Expression.EffectPath = {}));
        Expression.MESSAGE = {
            'zh-CHS': {
                require: "\u8BF7\u8F93\u5165'$property'",
                validate: "'$property'\u6821\u9A8C\u4E0D\u901A\u8FC7",
                dataPicking: '帮助前表达式校验不通过'
            },
            en: {
                require: "Please input '$property'",
                validate: "'$property' calibration failed",
                dataPicking: 'Failed to verify the expression before help'
            },
            'zh-CHT': {
                require: "\u8ACB\u8F38\u5165'$property'",
                validate: "'$property'\u6821\u9A57\u4E0D\u901A\u904E",
                dataPicking: '幫助前表達式校驗不通過'
            }
        };
        Expression.DEPENDENCY_SPLITER = '/';
    })(exports.Expression || (exports.Expression = {}));

    var FORM_MANIFEST_SERVICE_TOKEN = new core.InjectionToken('@farris/form_manifest_service');
    var FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = new core.InjectionToken('@farris/form_expression_manifest_service');

    var ExpressionRegistry = /** @class */ (function () {
        function ExpressionRegistry(injector, formExpressionManifestService, translate) {
            this.injector = injector;
            this.formExpressionManifestService = formExpressionManifestService;
            this.translate = translate;
            this._expressions = null;
        }
        /**
         * 加载表达式文件
         */
        ExpressionRegistry.prototype.load = function () {
            var _this = this;
            return this.formExpressionManifestService.load().pipe(operators.switchMap(function (describe) {
                var expressions = [];
                var exprs = Array.from(describe);
                exprs.forEach(function (expr) {
                    expr.expressions.forEach(function (expression) {
                        var expressionObject = {
                            id: expression.id,
                            ns: expr.ns,
                            path: expr.path,
                            bindingType: expr.type,
                            type: expression.type,
                            expression: expression.value || expression.expr || '',
                            message: expression.message || null,
                            messageType: expression.messageType || null,
                            deps: []
                        };
                        if ((expression.type === exports.Expression.ExpressionType.Required || expression.type === exports.Expression.ExpressionType.Validate || expression.type === exports.Expression.ExpressionType.DataPicking)) {
                            if (!expression.message) {
                                expressionObject.message = _this.getExpressionMessage(expression.type);
                            }
                            if (!expression.messageType) {
                                expressionObject.messageType = 'error';
                            }
                        }
                        if (expressionObject.message) {
                            _this.transform(expressionObject);
                        }
                        expressions.push(expressionObject);
                    });
                });
                _this._expressions = expressions;
                _this.cleanSpecialCharacters();
                return rxjs.of(expressions);
            }), operators.catchError(function (e) {
                return rxjs.of([]);
            }));
        };
        Object.defineProperty(ExpressionRegistry.prototype, "expressions", {
            /**
             * 获取所有表达式
             */
            get: function () {
                if (this._expressions) {
                    return rxjs.of(this._expressions);
                }
                return this.load();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 根据表达式id获取对应的表达式对象
         * @param id 表达式id
         * @returns
         */
        ExpressionRegistry.prototype.getExpressionById = function (id) {
            if (!this._expressions || this._expressions.length < 1) {
                return null;
            }
            return this._expressions.find(function (expressionObject) { return expressionObject.id === id; });
        };
        ExpressionRegistry.prototype.getExpressionMessage = function (expressionType, defaultValue) {
            if (!(expressionType === exports.Expression.ExpressionType.Validate || expressionType === exports.Expression.ExpressionType.Required || expressionType === exports.Expression.ExpressionType.DataPicking)) {
                return null;
            }
            if (!this.translate) {
                return defaultValue;
            }
            var currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
            return exports.Expression.MESSAGE[currentLanguage][expressionType];
        };
        ExpressionRegistry.prototype.transform = function (expressionObject) {
            if (!this.translate) {
                return;
            }
            if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {
                expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);
            }
        };
        ExpressionRegistry.prototype.cleanSpecialCharacters = function () {
            var _this = this;
            if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {
                return;
            }
            var repository = this.injector.get(Repository, null);
            if (!repository) {
                return;
            }
            var entityTypeInfo = repository.entityTypeInfo;
            var regex = new RegExp("[\\'\\\"]?\\s*(" + entityTypeInfo.entityInfo.nodeCode + "|" + entityTypeInfo.entityInfo.originalCode + ")[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\\"]?", 'g');
            this._expressions.forEach(function (expressionObject) {
                var expr = expressionObject.expression;
                var entityPropertyExpressions = expr.match(regex);
                if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                    // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                    entityPropertyExpressions.forEach(function (item) {
                        if (item.indexOf('.') === -1) {
                            return;
                        }
                        // 去数组
                        if (/\[\d\]/g.test(item)) {
                            var replacer = item.replace(/\[\d\]/g, '');
                            expressionObject.expression = _this.replaceAll(expressionObject.expression, item, replacer);
                        }
                        // 去星号
                        if (/\*/g.test(item)) {
                            var replacer = item.replace(/\*/g, '');
                            expressionObject.expression = _this.replaceAll(expressionObject.expression, item, replacer);
                        }
                    });
                }
            });
        };
        ExpressionRegistry.prototype.replaceAll = function (originalValue, search, replacer) {
            return originalValue.split(search).join(replacer);
        };
        ExpressionRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionRegistry.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [TranslateToken,] }] }
            ];
        };
        return ExpressionRegistry;
    }());

    var LISTENER_TOKEN = new core.InjectionToken('@Farris listener');

    /**
     * 变更监听器
     */
    var ChangeListener = /** @class */ (function () {
        function ChangeListener() {
            this.subject = new rxjs.Subject();
        }
        Object.defineProperty(ChangeListener.prototype, "onEvent", {
            get: function () {
                return this.subject;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 找到元数据中所有实体路径
         * @param dataTypeInfo
         * @param results
         * @param paths
         */
        ChangeListener.prototype.findEntityPaths = function (dataTypeInfo, results, paths) {
            var _this = this;
            if (paths === void 0) {
                paths = [];
            }
            var list = dataTypeInfo.getPropInfosByGroup(exports.DataPropGroup.List);
            if (list && list.length > 0) {
                list.forEach(function (dataPropInfo) {
                    paths.push(dataPropInfo.name);
                    var childrens = dataPropInfo.typeInfo.getPropInfosByGroup(exports.DataPropGroup.List);
                    if (childrens && childrens.length > 0) {
                        childrens.forEach(function (dataPropInfo) {
                            _this.findEntityPaths(dataPropInfo.typeInfo, results, paths);
                        });
                    }
                    else {
                        results.push(paths);
                    }
                });
            }
            else if (paths && paths.length > 0) {
                results.push(paths);
            }
        };
        return ChangeListener;
    }());

    var ExpressionExecutor = /** @class */ (function () {
        function ExpressionExecutor() {
        }
        /**
         * 编译执行
         * @param expression
         * @param context
         * @returns
         */
        ExpressionExecutor.prototype.compile = function (expressionObject, context) {
            if (Object.prototype.toString.call(context) !== '[object Object]') {
                throw new Error('上下文必须为对象！');
            }
            var expressionContext = this.buildContext(context);
            if (!expressionObject.factory) {
                var expression_1 = new expressionEngine.Expression(expressionObject.expression, expressionContext);
                expressionObject.factory = expression_1.compile();
            }
            var expression = expressionObject.factory;
            return expression.eval(expressionContext);
        };
        /**
         * 解析
         * @param expression
         * @param context
         * @returns
         */
        ExpressionExecutor.prototype.eval = function (expression, context) {
            if (Object.prototype.toString.call(context) !== '[object Object]') {
                throw new Error('上下文必须为对象！');
            }
            var expressionContext = this.buildContext(context);
            var expressionEngine$$1 = new expressionEngine.ExpressionEngine(expressionContext);
            return expressionEngine$$1.eval(expression);
        };
        /**
         * 构造表达式上下文
         * @param context
         * @returns
         */
        ExpressionExecutor.prototype.buildContext = function (context) {
            var expressionContext = new expressionEngine.ExpressionContext();
            if (context && Object.keys(context).length > 0) {
                Object.keys(context).forEach(function (key) {
                    expressionContext.set(key, context[key]);
                });
            }
            return expressionContext;
        };
        ExpressionExecutor.decorators = [
            { type: core.Injectable }
        ];
        return ExpressionExecutor;
    }());

    /**
     * 表达式计算结果
     */
    var ExpressionResult = /** @class */ (function () {
        function ExpressionResult(injector) {
            this.injector = injector;
        }
        /**
         * 更新表达式的值
         * @param expressionId 表达式id
         * @param result
         */
        ExpressionResult.prototype.set = function (expressionId, result) {
            this[expressionId] = result;
        };
        ExpressionResult.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionResult.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return ExpressionResult;
    }());

    var ExpressionManager = /** @class */ (function () {
        function ExpressionManager(injector, resolveService, expressionExecutor, expressionRegistry, expressionResult, messageService, notifyService) {
            this.injector = injector;
            this.resolveService = resolveService;
            this.expressionExecutor = expressionExecutor;
            this.expressionRegistry = expressionRegistry;
            this.expressionResult = expressionResult;
            this.messageService = messageService;
            this.notifyService = notifyService;
            this.frameContext = null;
            this.frameContext = this.injector.get(FrameContext, null);
        }
        /**
         * 根据表达式id进行计算
         * @param expressionId 表达式id
         * @param viewModel viewModel
         * @param rowData rowData
         * @returns
         */
        ExpressionManager.prototype.eval = function (expressionId, viewModel, rowData) {
            var expressionObject = this.expressionRegistry.getExpressionById(expressionId);
            if (expressionObject) {
                var customContext = {};
                var bindingPath = viewModel && viewModel.bindingPath || null;
                if (bindingPath && rowData) {
                    var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                    var bindingList = this.frameContext.bindingData.getValue(bindingPaths);
                    var primaryKey = 'id';
                    if (bindingList) {
                        primaryKey = bindingList.primaryKey;
                    }
                    var primaryValue = rowData[primaryKey] || bindingList.currentId;
                    if (primaryValue) {
                        customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue: primaryValue }];
                    }
                }
                var result = this.execute(expressionObject.expression, customContext);
                if (expressionObject.type === exports.Expression.ExpressionType.Readonly || expressionObject.type === exports.Expression.ExpressionType.Required || expressionObject.type === exports.Expression.ExpressionType.Visible) {
                    result = result === true ? true : false;
                }
                this.expressionResult.set(expressionId, result);
                return result;
            }
            return undefined;
        };
        ExpressionManager.prototype.validate = function (expressionId, options) {
            var expressionObject = this.expressionRegistry.getExpressionById(expressionId);
            if (expressionObject) {
                var patch = options && options.patch || null;
                var customContext = {};
                if (patch) {
                    customContext.patch = patch;
                }
                var currentRow = options.currentRow || null;
                var currentRows = options.currentRows || [];
                if (currentRow) {
                    customContext.currentRows = customContext.currentRows || [];
                    customContext.currentRows.push(currentRow);
                }
                if (currentRows && currentRows.length > 0) {
                    customContext.currentRows = customContext.currentRows || [];
                    Array.prototype.push.apply(customContext.currentRows, currentRows);
                }
                var result = this.execute(expressionObject.expression, customContext);
                this.expressionResult.set(expressionId, result);
                return result;
            }
            return undefined;
        };
        /**
         * 帮助前封装
         * @param event
         */
        ExpressionManager.prototype.onDataPicking = function (configs) {
            var expressionId = configs && configs.expressionId || null;
            if (!expressionId) {
                return rxjs.of(true);
            }
            var result = this.eval(expressionId);
            if (!result) {
                var expressionObject = this.expressionRegistry.getExpressionById(expressionId);
                if (!expressionObject) {
                    return rxjs.of(true);
                }
                var messageType = expressionObject.messageType || exports.Expression.MessageType.warning;
                var message = expressionObject.message;
                if (message) {
                    this.notifyService[messageType](message, { hideTitle: true });
                }
                return rxjs.EMPTY;
            }
            return rxjs.of(result);
        };
        /**
         * 执行表达式计算
         * @param expression 表达式
         * @param customContext 自定义上下文
         * @returns
         */
        ExpressionManager.prototype.execute = function (expression, customContext) {
            var _a;
            var deps = this.resolveService.resolve(expression);
            var groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);
            var entityContext = this.buildEntityContext(deps, groupDependencies, customContext);
            var stateContext = this.buildStateContext();
            var data = customContext && customContext.contexts || null;
            var translate = this.injector.get(TranslateToken, null);
            var context = __assign((_a = {}, _a[this.entityOriginalNodeCode] = entityContext, _a), stateContext, { BigNumber: bignumber_js.BigNumber, frameContext: this.frameContext, bindingData: this.frameContext.bindingData, repository: this.frameContext.repository, CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS' }, data);
            if (!entityContext) {
                return undefined;
            }
            return this.expressionExecutor.eval(expression, context);
        };
        /**
         * 执行表达式（返回可观察对象）
         * @param expression 表达式
         * @param customContext 自定义上下文
         * @returns
         */
        ExpressionManager.prototype.executeAsync = function (expression, customContext) {
            var result = this.execute(expression, customContext);
            return rxjs.of(result);
        };
        /**
         * 构造实体上下文
         * @param deps
         * @param groupDependencies
         * @param context
         * @returns
         */
        ExpressionManager.prototype.buildEntityContext = function (deps, groupDependencies, context) {
            var _this = this;
            var currentRows = context && context.currentRows || null;
            var index = deps.findIndex(function (dep) {
                var isEntityDependency = _this.isEntityDependency(dep);
                // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系
                // 表达式依赖了实体
                if (isEntityDependency) {
                    var isGroupDependency = groupDependencies.findIndex(function (item) { return item === dep; }) !== -1;
                    // 是聚合依赖
                    if (isGroupDependency) {
                        var dependencyLength = dep.split('/').filter(function (p) { return p; }).length - 1;
                        if (dependencyLength === 1) {
                            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。
                            return true;
                        }
                        else {
                            // 聚合了子表字段，只需要传递当前实体
                            return false;
                        }
                    }
                    else {
                        // 当前依赖不是聚合，只需要传递当前实体
                        return false;
                    }
                }
                return false;
            });
            var isGroupdMainEntity = index !== -1;
            var options = {};
            if (currentRows && currentRows.length > 0) {
                currentRows.forEach(function (currentRow) {
                    options[currentRow.bindingPath || '/'] = currentRow.primaryValue;
                });
            }
            var entity = this.getEntity(options);
            var patch = context && context.patch || null;
            if (!entity) {
                return {};
            }
            if (patch && Object.keys(patch).length > 0) {
                Object.keys(patch).forEach(function (key) {
                    var paths = key.split('/').filter(function (p) { return p; });
                    var value = patch[key];
                    _this.setValue(entity, paths, value);
                });
            }
            if (isGroupdMainEntity) {
                var collection = this.frameContext.repository.entityCollection.toJSON();
                entity['__type__'] = 'List';
                entity['__items__'] = collection;
            }
            return entity;
        };
        ExpressionManager.prototype.setValue = function (target, paths, value) {
            if (paths.length === 1) {
                target[paths[0]] = value;
            }
            else {
                var propertyName = paths.pop();
                var result = paths.reduce(function (object, path) {
                    return object && object[path];
                }, target);
                result[propertyName] = value;
            }
        };
        /**
         * 是否为实体依赖
         * @param dep
         * @returns
         */
        ExpressionManager.prototype.isEntityDependency = function (dep) {
            return dep.startsWith(ENTITY_TEMPLATE);
        };
        /**
         * 获取实体
         * @param options
         * @returns
         */
        ExpressionManager.prototype.getEntity = function (options) {
            var _this = this;
            var entityTypeInfo = this.frameContext.repository.entityTypeInfo;
            var bindingData = this.frameContext.bindingData;
            var childrenEntityPaths = [];
            var entity = null;
            if (options['/']) {
                // 修正主表
                entity = this.frameContext.bindingData.list.findById(options['/']);
                if (entity) {
                    entity = entity.toJSON();
                }
            }
            else {
                entity = this.frameContext.bindingData.list.currentItem.toJSON();
            }
            if (!entity) {
                return null;
            }
            ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
            entity['__type__'] = 'Entity';
            if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
                return entity;
            }
            // 找到所有子表
            childrenEntityPaths.forEach(function (paths) {
                var row = null;
                if (options && options[paths.join('/')]) {
                    var parentPaths = paths.slice(0, 1);
                    if (paths.length == 2 && options[parentPaths.join('/')]) {
                        var parentRow = options[parentPaths.join('/')];
                        // 从从表
                        // 需要切换上级表
                        row = _this.getPropertyValue(entity, parentPaths.concat([parentRow, paths[1], options[paths.join('/')]]));
                    }
                    else {
                        // 不应该使用bindingData，这样就默认使用了当前行
                        var bindingList = bindingData.getValue(paths);
                        var currentRowId = options[paths.join('/')];
                        var currentRow = null;
                        if (currentRowId !== bindingList.currentId) {
                            currentRow = bindingList.findById(currentRowId);
                        }
                        else {
                            currentRow = bindingList.currentItem;
                        }
                        if (currentRow && currentRow.primaryKeyValue) {
                            row = currentRow.toJSON();
                        }
                    }
                }
                else {
                    // 如果上级表已经切换了当前行，那么下级表也应该切换
                    var parentTableCurrentRowChanged = options && !!Object.keys(options).find(function (path) {
                        var fullPath = path.split('/').join('/');
                        return paths.join('/').startsWith(fullPath);
                    }) || false;
                    if (parentTableCurrentRowChanged) {
                        var primaryValue = options && options['/'] || bindingData.list.currentId;
                        var entity_1 = _this.frameContext.repository.entityCollection.getEntityById(primaryValue);
                        var fullPaths_1 = [];
                        var data = paths.reduce(function (object, path) {
                            fullPaths_1.push(path);
                            var item = object && object[path];
                            if (item) {
                                var currentRowId = options && options[fullPaths_1.join('/')] || item.items[0] && item.items[0].primaryValue || null;
                                if (currentRowId) {
                                    var currentRow = item.get(currentRowId);
                                    return currentRow || null;
                                }
                            }
                            return null;
                        }, entity_1);
                        if (data) {
                            row = data.toJSON();
                        }
                        else {
                            row = {};
                        }
                    }
                    else {
                        row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);
                    }
                }
                var propertyName = paths.pop();
                var parent = paths.reduce(function (object, path) {
                    return object && object[path] || null;
                }, entity);
                var list = parent[propertyName];
                var node = __assign({ __items__: [] }, row && row || {}, { __type__: 'List' });
                node.length = function () { return node.__items__.length; };
                if (list && Array.isArray(list)) {
                    node.__items__ = [].concat(list);
                }
                parent[propertyName] = node;
            });
            return entity;
        };
        ExpressionManager.prototype.getPropertyValue = function (entity, paths) {
            return paths.reduce(function (object, path) {
                if (object['__type__'] === 'List') {
                    return object['__items__'].find(function (item) { return item.id === path; });
                }
                else if (Array.isArray(object)) {
                    return object.find(function (item) { return item.id === path; });
                }
                else {
                    return object && object[path];
                }
            }, entity);
        };
        Object.defineProperty(ExpressionManager.prototype, "entityOriginalNodeCode", {
            /**
             * 获取主实体原始字段名
             */
            get: function () {
                var repository = this.injector.get(Repository);
                return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 构造变量上下文
         * @param event
         * @returns
         */
        ExpressionManager.prototype.buildStateContext = function () {
            var result = {};
            if (this.frameContext) {
                var rootFrameContext = this.frameContext.getVirtualRootFrameContext();
                if (rootFrameContext) {
                    var uiState_1 = rootFrameContext.viewModel.uiState;
                    var propertyNames = Object.getOwnPropertyNames(uiState_1) || [];
                    propertyNames.forEach(function (prop) {
                        if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                            result[prop] = uiState_1[prop];
                        }
                    });
                }
            }
            return result;
        };
        ExpressionManager.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionManager.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: ResolveService },
                { type: ExpressionExecutor },
                { type: ExpressionRegistry },
                { type: ExpressionResult },
                { type: undefined, decorators: [{ type: core.Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [NOTIFY_SERVICE_TOKEN,] }] }
            ];
        };
        return ExpressionManager;
    }());

    var ExpressionResultFactory = /** @class */ (function () {
        function ExpressionResultFactory(injector, expressionRegistry, expressionManager, expressionResult) {
            this.injector = injector;
            this.expressionRegistry = expressionRegistry;
            this.expressionManager = expressionManager;
            this.expressionResult = expressionResult;
            this.registeEvent();
        }
        ExpressionResultFactory.prototype.registeEvent = function () {
            var _this = this;
            this.expressionRegistry.expressions.subscribe(function (expressionObjects) {
                // 加载完表达式之后做一次计算
                expressionObjects.forEach(function (expressionObject) {
                    if (expressionObject.deps && expressionObject.deps.length > 0) {
                        return;
                    }
                    var result = _this.expressionManager.eval(expressionObject.id);
                    _this.expressionResult[expressionObject.id] = result;
                });
            });
        };
        ExpressionResultFactory.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionResultFactory.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: ExpressionRegistry },
                { type: ExpressionManager },
                { type: ExpressionResult }
            ];
        };
        return ExpressionResultFactory;
    }());

    var ASSIGNER_TOKEN = new core.InjectionToken('@Farris expression assigner');
    var EVENT_HANDLER_TOKEN = new core.InjectionToken('@Farris_event_handler');

    /**
     * 监听UIState变更
     */
    var UIStateChangeListener = /** @class */ (function (_super) {
        __extends(UIStateChangeListener, _super);
        function UIStateChangeListener(injector, uiState, namespace, frameId, bindingData) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.uiState = uiState;
            _this.namespace = namespace;
            _this.frameId = frameId;
            _this.bindingData = bindingData;
            _this.registerEvent();
            return _this;
        }
        UIStateChangeListener.prototype.buildEventPath = function (change) {
            return null;
        };
        UIStateChangeListener.prototype.registerEvent = function () {
            var _this = this;
            if (this.uiState && this.uiState.changes) {
                this.uiState.changes.subscribe(function (change) {
                    var modification = {
                        ns: _this.namespace,
                        path: [change.field],
                        type: exports.Expression.EventType.ValueChanged,
                        value: change.value,
                        source: exports.Expression.EventSource.State,
                        frameId: _this.frameId
                    };
                    // console.log("UIStateChangeListener", modification);
                    _this.subject.next(modification);
                });
            }
        };
        UIStateChangeListener.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UIStateChangeListener.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: UIState },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: String, decorators: [{ type: core.Inject, args: [FRAME_ID,] }] },
                { type: BindingData }
            ];
        };
        return UIStateChangeListener;
    }(ChangeListener));

    var EventType = exports.Expression.EventType;
    var RepositoryChangeListener = /** @class */ (function (_super) {
        __extends(RepositoryChangeListener, _super);
        function RepositoryChangeListener(injector, repository, namespace) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.repository = repository;
            _this.namespace = namespace;
            _this.bindingData = _this.injector.get(BindingData, null);
            _this.registerEvent();
            return _this;
        }
        RepositoryChangeListener.prototype.registerEvent = function () {
            var _this = this;
            if (this.repository && this.repository.changes) {
                this.repository.changes.subscribe(function (change) {
                    var eventType = _this.convertEventType(change);
                    if (!eventType) {
                        return;
                    }
                    var path = _this.buildEventPath(change);
                    var modification = {
                        ns: _this.namespace,
                        type: eventType,
                        path: path,
                        value: change.value,
                        source: exports.Expression.EventSource.Field,
                    };
                    // console.log("RepositoryChangeListener", modification);
                    _this.subject.next(modification);
                });
            }
            // repository只监听值变化事件
            if (this.repository && this.repository.entityCollectionChange) {
                this.repository.entityCollectionChange.subscribe(function (change) {
                    var eventType = _this.convertEventType(change);
                    if (!eventType) {
                        return;
                    }
                    var path = _this.buildEventPath(change);
                    var modification = {
                        ns: _this.namespace,
                        type: eventType,
                        path: path,
                        value: change.value,
                        source: exports.Expression.EventSource.Repository,
                    };
                    _this.subject.next(modification);
                });
            }
        };
        /**
         * 构建事件路径参数
         * @param event event
         * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]
         * @returns
         */
        RepositoryChangeListener.prototype.buildEventPath = function (event) {
            var _this = this;
            var paths = event.path;
            var result = [];
            if (!paths || paths.length < 1) {
                // 主表新增时path为空
                return result;
            }
            // 过滤掉udt的冒号，关联字段的id
            result = paths.filter(function (path, index) {
                if (index % 2 === 0 && path.includes(':')) {
                    if (path === ':') {
                        return false;
                    }
                    var primaryKey = path.split(':')[0];
                    if (primaryKey !== _this.repository.primaryKey) {
                        return false;
                    }
                }
                return true;
            });
            // 移除路径中的id字符串
            // result = paths.map((path: string, index: number) => {
            //   if (path.includes(':') && index % 2 === 0) {
            //     return path.split(':')[1];
            //   }
            //   return path;
            // });
            // 此时result中不应该有冒号
            return result;
        };
        RepositoryChangeListener.prototype.convertEventType = function (change) {
            var eventType = null;
            if (change.type === exports.ModifyType.Add || change.type === exports.ModifyType.AddData || change.type === exports.ModifyType.Insert) ;
            else if (change.type === exports.ModifyType.Remove || change.type === exports.ModifyType.RemoveData) ;
            else if (change.type === exports.ModifyType.Load) ;
            else if (change.type === exports.ModifyType.ValueChange) ;
            else if (change.type === exports.ModifyType.Update) {
                eventType = exports.Expression.EventType.Update;
            }
            return eventType;
        };
        RepositoryChangeListener.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RepositoryChangeListener.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Repository },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] }
            ];
        };
        return RepositoryChangeListener;
    }(ChangeListener));

    var ListenerRegistry = /** @class */ (function () {
        function ListenerRegistry(listeners, injector) {
            this.listeners = listeners;
            this.injector = injector;
        }
        ListenerRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ListenerRegistry.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [LISTENER_TOKEN,] }] },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        return ListenerRegistry;
    }());

    var EventType$1 = exports.Expression.EventType;
    /**
     * 监听bindingList变更
     * @description 主要用于监听行切换等事件
     */
    var BindingDataChangeListener = /** @class */ (function (_super) {
        __extends(BindingDataChangeListener, _super);
        function BindingDataChangeListener(injector, bindingData, namespace) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.bindingData = bindingData;
            _this.namespace = namespace;
            _this.repository = null;
            _this.repository = _this.injector.get(Repository, null);
            _this.registerEvent();
            return _this;
        }
        /**
         * 注册值变化事件
         */
        BindingDataChangeListener.prototype.registerEvent = function () {
            var _this = this;
            if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {
                this.bindingData.changes.subscribe(function (change) {
                    if ((change.type === exports.ChangeType.Append && change.isCloned !== true) || change.type === exports.ChangeType.ValueChanged || change.type === exports.ChangeType.Remove || change.type === exports.ChangeType.Load || change.type === exports.ChangeType.SelectionChanged) {
                        var eventType = null;
                        if (change.type === exports.ChangeType.Append) {
                            eventType = EventType$1.Append;
                        }
                        else if (change.type === exports.ChangeType.ValueChanged) {
                            eventType = EventType$1.ValueChanged;
                        }
                        else if (change.type === exports.ChangeType.Remove) {
                            eventType = EventType$1.Remove;
                        }
                        else if (change.type === exports.ChangeType.Load) {
                            // 主表新增
                            if (change.create === true) {
                                eventType = EventType$1.Append;
                            }
                            else {
                                eventType = EventType$1.Load;
                            }
                        }
                        else if (change.type === exports.ChangeType.SelectionChanged) {
                            eventType = EventType$1.SelectionChanged;
                        }
                        var path = _this.buildEventPath(change);
                        var modification = {
                            ns: _this.namespace,
                            path: path,
                            type: eventType,
                            source: exports.Expression.EventSource.BindingData,
                            value: change.value,
                            id: change.id,
                            isTreeNodeLoadScene: change.isTreeNodeLoadScene
                        };
                        // console.log("BindingDataChangeListener", modification);
                        _this.subject.next(modification);
                    }
                });
            }
        };
        BindingDataChangeListener.prototype.buildEventPath = function (change) {
            var path = change.path;
            var paths = [];
            // if (!path || path.length < 1) {
            //   return paths;
            // }
            var primaryValue = this.bindingData.list.currentItem.primaryKeyValue || change.id;
            if (primaryValue) {
                if (!(change.type === exports.ChangeType.Load && change.path.length === 0)) {
                    paths.push(this.bindingData.list.primaryKey + ":" + primaryValue);
                }
            }
            var currentPath = [];
            for (var index = 0; index < path.length; index++) {
                var propertyName = path[index];
                currentPath.push(propertyName);
                var item = this.bindingData.getValue(currentPath);
                paths.push(propertyName);
                if (item instanceof BindingList) {
                    if (currentPath.length < path.length) {
                        var bindingList = item;
                        var currentId = bindingList.currentItem.primaryKeyValue;
                        if (index === path.length - 2 && change.id) {
                            currentId = change.id;
                        }
                        paths.push(this.bindingData.list.primaryKey + ":" + currentId);
                    }
                }
            }
            return paths;
        };
        BindingDataChangeListener.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BindingDataChangeListener.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: BindingData },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] }
            ];
        };
        return BindingDataChangeListener;
    }(ChangeListener));

    /**
     * 监听器
     * @description 监听bindingList、UIState变更
     */
    var Listeners = /** @class */ (function () {
        function Listeners(registry) {
            this.registry = registry;
            this.subject = new rxjs.Subject();
            this.regist();
        }
        Object.defineProperty(Listeners.prototype, "onEvent", {
            get: function () {
                return this.subject;
            },
            enumerable: true,
            configurable: true
        });
        Listeners.prototype.regist = function () {
            var _this = this;
            var listeners = this.registry && this.registry.listeners || [];
            if (listeners && listeners.length > 0) {
                listeners.forEach(function (listener) {
                    listener.onEvent.subscribe(function (modification) {
                        _this.subject.next(modification);
                    });
                });
            }
        };
        Listeners.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Listeners.ctorParameters = function () {
            return [
                { type: ListenerRegistry, decorators: [{ type: core.Optional }] }
            ];
        };
        return Listeners;
    }());

    /**
     * 事件监听器主要有以下几种类型的事件：
     * 1、值变化
     * 2、行切换
     *    行切换使用场景为需要为数据计算依赖当前行时
     * 3、数据加载
     */
    var ExpressionEventEmitter = /** @class */ (function () {
        function ExpressionEventEmitter(listeners) {
            var _this = this;
            this.listeners = listeners;
            this.events = new Array();
            this.listeners.onEvent.subscribe(function (eventArgs) {
                if (_this.onEvent && _this.onEvent.observers.length > 0) {
                    var events = [];
                    if (_this.events.length > 0) {
                        events = __spread(_this.events);
                    }
                    events.push(eventArgs);
                    _this.onEvent.next(events);
                    _this.events = [];
                }
                else {
                    _this.events.push(eventArgs);
                }
            });
        }
        ExpressionEventEmitter.prototype.attach = function () {
            if (!this.onEvent) {
                this.onEvent = new rxjs.BehaviorSubject(this.events);
            }
            return this.onEvent.asObservable();
        };
        ExpressionEventEmitter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionEventEmitter.ctorParameters = function () {
            return [
                { type: Listeners }
            ];
        };
        return ExpressionEventEmitter;
    }());

    var EFFECTOR_TOKEN = new core.InjectionToken('@farris/effector_token');

    /**
     * 实体副作用器
     * @description 将表达式计算结果赋值给实体属性
     */
    var RepositoryEffector = /** @class */ (function () {
        function RepositoryEffector(injector, repository, namespace, bindingData) {
            this.injector = injector;
            this.repository = repository;
            this.namespace = namespace;
            this.bindingData = bindingData;
            this.ns = namespace;
        }
        RepositoryEffector.prototype.effect = function (path, value, options) {
            if (!options || !options.path) {
                throw new Error('repository effector 需要指定行信息。');
            }
            var propertyPath = options.path;
            var rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
            var entity = this.repository.entityCollection.getEntityById(rowId);
            if (rowId && !entity) {
                return;
            }
            // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
            var propName = propertyPath.pop();
            var object = entity;
            for (var index = 1; index < propertyPath.length; index++) {
                var propertyName = propertyPath[index];
                if (object instanceof EntityList) {
                    object = object.get(propertyName);
                }
                else {
                    object = object[propertyName];
                }
            }
            if (object) {
                if (object[propName] !== value) {
                    object[propName] = value;
                }
            }
        };
        RepositoryEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RepositoryEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Repository },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: BindingData }
            ];
        };
        return RepositoryEffector;
    }());

    var UIStateEffector = /** @class */ (function () {
        function UIStateEffector(injector, uiState, namespace) {
            this.injector = injector;
            this.uiState = uiState;
            this.namespace = namespace;
            this.ns = namespace;
        }
        UIStateEffector.prototype.effect = function (path, value, options) {
            this.uiState.setPropertyValue(path, value);
        };
        UIStateEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UIStateEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: UIState },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] }
            ];
        };
        return UIStateEffector;
    }());

    /**
     * 只读副作用器
     */
    var ReadonlyEffector = /** @class */ (function () {
        function ReadonlyEffector(injector, namespace, frameContext) {
            this.injector = injector;
            this.namespace = namespace;
            this.frameContext = frameContext;
            this.ns = namespace;
        }
        ReadonlyEffector.prototype.effect = function (path, value, options) {
            // suprise ?
        };
        ReadonlyEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ReadonlyEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: FrameContext }
            ];
        };
        return ReadonlyEffector;
    }());

    /**
     * 依赖副作用器
     * @description 当表达式计算结果为true时，清空字段值
     * 当value==true且属性当前值不是null时，设置属性值为null
     */
    var DependencyEffector = /** @class */ (function () {
        function DependencyEffector(injector, repository, namespace, bindingData) {
            this.injector = injector;
            this.repository = repository;
            this.namespace = namespace;
            this.bindingData = bindingData;
            this.ns = namespace;
        }
        DependencyEffector.prototype.effect = function (path, value, options) {
            if (!options || !options.path) {
                throw new Error('DependencyEffector 需要指定行信息。');
            }
            if (typeof value !== 'boolean') {
                console.warn("DependencyEffector \u4F9D\u8D56\u8868\u8FBE\u5F0F\u8BA1\u7B97\u7ED3\u679C\u5E94\u8BE5\u4E3Atrue/false\uFF0C\u5F53\u524D\u503C\u4E3A\uFF1A" + value);
            }
            var propertyPath = options.path;
            var rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
            var entity = this.repository.entityCollection.getEntityById(rowId);
            if (rowId && !entity) {
                throw new Error("\u627E\u4E0D\u5230id\uFF1A" + rowId + "\u5BF9\u5E94\u7684\u5B9E\u4F53\uFF01");
            }
            // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
            var propName = propertyPath.pop();
            var object = entity;
            for (var index = 1; index < propertyPath.length; index++) {
                var propertyName = propertyPath[index];
                if (object instanceof EntityList) {
                    object = object.get(propertyName);
                }
                else {
                    object = object[propertyName];
                }
            }
            if (object) {
                if (object[propName] !== null && value === true) {
                    object[propName] = null;
                }
            }
            else {
                throw new Error("[DependencyEffector] \u627E\u4E0D\u5230\u5B9E\u4F53\u5BF9\u5E94\u7684\u8DEF\u5F84\uFF1A" + propertyPath.push(propName));
            }
        };
        DependencyEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DependencyEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Repository },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: BindingData }
            ];
        };
        return DependencyEffector;
    }());

    var EffectorRegistry = /** @class */ (function () {
        function EffectorRegistry(injector, effectors) {
            this.injector = injector;
            this.effectors = effectors;
        }
        EffectorRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EffectorRegistry.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [EFFECTOR_TOKEN,] }] }
            ];
        };
        return EffectorRegistry;
    }());

    var RelativeEffector = /** @class */ (function () {
        function RelativeEffector(injector, messageService, notifyService, namespace) {
            this.injector = injector;
            this.messageService = messageService;
            this.notifyService = notifyService;
            this.namespace = namespace;
            this.ns = namespace;
        }
        RelativeEffector.prototype.effect = function (path, value, options) {
            if (value === true && options.message && this.notifyService) {
                var messageType = options.messageType || 'info';
                this.notifyService[messageType](options.message, { hideTitle: true });
            }
        };
        RelativeEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RelativeEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [NOTIFY_SERVICE_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] }
            ];
        };
        return RelativeEffector;
    }());

    var ValidateEffector = /** @class */ (function () {
        function ValidateEffector(injector, messageService, notifyService, namespace, frameContext) {
            this.injector = injector;
            this.messageService = messageService;
            this.notifyService = notifyService;
            this.namespace = namespace;
            this.frameContext = frameContext;
            this.ns = namespace;
        }
        ValidateEffector.prototype.effect = function (path, value, options) {
            var _a;
            // 校验不通过时返回false
            var domInfo = this.getDomInfoByEntityPath(path);
            if (!domInfo) {
                return;
            }
            var frameContext = domInfo.frameContext;
            var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
            // const rootViewModel = rootFrameContext.viewModel;
            var expressionId = options.expressionId;
            var domPropertyName = domInfo.domPropertyName;
            if (expressionId) {
                // 增加校验规则
                frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "validate" /* Validate */);
            }
            if (value === false && options.message) {
                // 更新form错误信息
                // 不是grid，则认为是卡片
                if (!domInfo.isGridComponent) {
                    var message = options.message.replace(/\$property/g, domInfo.propertyName);
                    var formErrors = this.buildFormErrors(domPropertyName, message);
                    // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息
                    frameContext.form.updateFormErrors(formErrors);
                }
                // 不进行汇总展示
                // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);
                // 增加到汇总消息
                // rootViewModel.verifycationChanged.next(verifyInformations);
                // 更新汇总错误信息
            }
            else if (value === true) {
                // 移除错误消息
                // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);
                // rootViewModel.verifycationChanged.next(verifyInformations);
                var currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
                if (currentErrors) {
                    if (currentErrors.hasOwnProperty('validate')) {
                        // require合法，移除require校验提示
                        delete currentErrors.validate;
                    }
                    frameContext.form.updateFormErrors((_a = {}, _a[domPropertyName] = { errors: currentErrors }, _a));
                }
                else {
                    var formErrors = this.buildFormErrors(domPropertyName, null);
                    frameContext.form.updateFormErrors(formErrors);
                }
            }
        };
        /**
         * 通过实体路径获取对应的dom信息
         * @param entityPath
         * @returns
         */
        ValidateEffector.prototype.getDomInfoByEntityPath = function (entityPath) {
            var e_1, _a, e_2, _b;
            var result = null;
            if (!entityPath) {
                return result;
            }
            entityPath = entityPath.split('/').filter(function (p) { return p; }).join('.');
            var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
            if (frameContexts && frameContexts.length > 0) {
                try {
                    for (var frameContexts_1 = __values(frameContexts), frameContexts_1_1 = frameContexts_1.next(); !frameContexts_1_1.done; frameContexts_1_1 = frameContexts_1.next()) {
                        var frameContext = frameContexts_1_1.value;
                        if (result) {
                            break;
                        }
                        var isValidFrameContext = frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0;
                        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                            var keys = Object.keys(frameContext.form.ngFormControls);
                            try {
                                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                                    var propertyName = keys_1_1.value;
                                    var ngFormControl = frameContext.form.ngFormControls[propertyName];
                                    var bindingPath = frameContext.viewModel.bindingPath || '/';
                                    var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                                    var bindings = ngFormControl.binding.split('.');
                                    bindings = bindingPaths.concat(bindings);
                                    if (entityPath === bindings.join('.')) {
                                        // 判断对应的组件是什么类型
                                        var dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                                        var dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                                        if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                            var isEditableGrid = dgColumnInfo.find(function (array) {
                                                var readonlyGroup = array.every(function (column) { return !(column.hasOwnProperty('editor') && column.editor); });
                                                if (!readonlyGroup) {
                                                    return true;
                                                }
                                                else {
                                                    return false;
                                                }
                                            });
                                            if (!isEditableGrid) {
                                                continue;
                                            }
                                        }
                                        // 如果是farris树，则跳过
                                        var isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === exports.ComponentType.farrisTreeTalbeComponent;
                                        if (isFarrisTreeTableComponent) {
                                            continue;
                                        }
                                        var isGridComponent = false;
                                        if (dgColumnNames) {
                                            isGridComponent = true;
                                        }
                                        result = {
                                            domPropertyName: propertyName,
                                            propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                            frameContext: frameContext,
                                            id: ngFormControl.id,
                                            isGridComponent: isGridComponent
                                        };
                                        break;
                                    }
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (keys_1_1 && !keys_1_1.done && (_b = keys_1.return))
                                        _b.call(keys_1);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (frameContexts_1_1 && !frameContexts_1_1.done && (_a = frameContexts_1.return))
                            _a.call(frameContexts_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
            return result;
        };
        ValidateEffector.prototype.getVerifyInformations = function (frameContext) {
            var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
            var rootViewModel = rootFrameContext.viewModel;
            var verifyInformations = rootViewModel.verifyInformations;
            return verifyInformations;
        };
        ValidateEffector.prototype.buildFormErrors = function (domPropertyName, message) {
            var _a, _b;
            if (message) {
                message = message.replace(/\$property/g, 'domPropertyName');
                return _a = {},
                    _a[domPropertyName] = {
                        errors: {
                            'validate': {
                                name: message
                            }
                        }
                    },
                    _a;
            }
            else {
                return _b = {},
                    _b[domPropertyName] = {
                        errors: {}
                    },
                    _b;
            }
        };
        ValidateEffector.prototype.buildVerifyInformations = function (id, frameContext, domPropertyName, message) {
            var verifyInformations = this.getVerifyInformations(frameContext);
            var index = verifyInformations.findIndex(function (item) {
                return item.id === id;
            });
            if (index !== -1) {
                verifyInformations.splice(index, 1);
            }
            verifyInformations.push({
                id: id,
                namespace: frameContext.namespace,
                targetField: domPropertyName,
                index: verifyInformations.length + 1,
                title: frameContext.form.formGroupName,
                msg: message,
                type: 'error'
            });
            return verifyInformations;
        };
        ValidateEffector.prototype.removeValidateVerifyInformations = function (id, frameContext) {
            var verifyInformations = this.getVerifyInformations(frameContext);
            var index = verifyInformations.findIndex(function (item) {
                return item.id === id;
            });
            if (index !== -1) {
                verifyInformations.splice(index, 1);
            }
            return verifyInformations;
        };
        ValidateEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ValidateEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [NOTIFY_SERVICE_TOKEN,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: FrameContext }
            ];
        };
        return ValidateEffector;
    }());

    /**
     * 必填副作用器
     * @description 当结算结果为true时设置必填校验，否则删除必填校验
     */
    var RequiredEffector = /** @class */ (function () {
        function RequiredEffector(injector, repository, namespace, frameContext) {
            this.injector = injector;
            this.repository = repository;
            this.namespace = namespace;
            this.frameContext = frameContext;
            this.ns = namespace;
        }
        RequiredEffector.prototype.effect = function (path, value, options) {
            var _a;
            // 校验不通过时返回false
            var domInfo = this.getDomInfoByEntityPath(path);
            if (!domInfo) {
                return;
            }
            var frameContext = domInfo.frameContext;
            var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
            var rootViewModel = rootFrameContext.viewModel;
            var domPropertyName = domInfo.domPropertyName;
            var pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(function (p) { return p; }));
            var expressionId = options.expressionId;
            if (expressionId) {
                // 增加校验规则
                frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "require" /* Require */);
            }
            if (value === true) {
                if (options.message) {
                    // 更新form错误信息
                    // 不是grid，则认为是卡片
                    if (!domInfo.isGridComponent) {
                        var message = options.message.replace(/\$property/g, domInfo.propertyName);
                        var formErrors = this.buildFormErrors(domPropertyName, message);
                        var isValidValue = this.isValidValue(path, pathValue);
                        if (!isValidValue) {
                            frameContext.form.updateFormErrors(formErrors);
                        }
                    }
                    else {
                        this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);
                    }
                }
            }
            else {
                // 返回非true值时认为非必填
                if (domInfo.isGridComponent) {
                    this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);
                }
                else {
                    var currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
                    if (currentErrors) {
                        if (currentErrors.hasOwnProperty('require')) {
                            // require合法，移除require校验提示
                            delete currentErrors.require;
                        }
                        frameContext.form.updateFormErrors((_a = {}, _a[domPropertyName] = { errors: currentErrors }, _a));
                    }
                    else {
                        var formErrors = this.buildFormErrors(domPropertyName, null);
                        frameContext.form.updateFormErrors(formErrors);
                    }
                }
            }
        };
        RequiredEffector.prototype.updateColumnValidators = function (frameContext, field, datagridColumns, isRequired) {
            var frameId = frameContext.frameId;
            var componentRefs = frameContext.appContext.componentManager.get([frameId]);
            if (componentRefs && componentRefs.size > 0) {
                var datagrid = Array.from(componentRefs.values())[0];
                if (datagrid && typeof datagrid.updateColumn === 'function') {
                    var columns = datagridColumns.find(function (array) {
                        return array.find(function (item) { return item.field === field; });
                    });
                    var column = columns && columns.find(function (item) { return item.field === field; }) || null;
                    if (column) {
                        var validators = column.validators || [];
                        var index = validators.findIndex(function (item) { return item.type === 'required'; });
                        if (isRequired) {
                            if (index === -1) {
                                validators.push({ "type": "required", "message": "该字段不能为空！" });
                            }
                        }
                        else {
                            if (index !== -1) {
                                validators.splice(index, 1);
                            }
                        }
                        datagrid.updateColumn(field, { validators: __spread(validators) });
                        datagrid.columnsChanged(false);
                    }
                }
            }
        };
        RequiredEffector.prototype.getDomInfoByEntityPath = function (entityPath) {
            var e_1, _a, e_2, _b;
            var result = null;
            if (!entityPath) {
                return result;
            }
            entityPath = entityPath.split('/').filter(function (p) { return p; }).join('.');
            var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
            if (frameContexts && frameContexts.length > 0) {
                try {
                    for (var frameContexts_1 = __values(frameContexts), frameContexts_1_1 = frameContexts_1.next(); !frameContexts_1_1.done; frameContexts_1_1 = frameContexts_1.next()) {
                        var frameContext = frameContexts_1_1.value;
                        if (result) {
                            break;
                        }
                        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                            var keys = Object.keys(frameContext.form.ngFormControls);
                            try {
                                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                                    var propertyName = keys_1_1.value;
                                    var ngFormControl = frameContext.form.ngFormControls[propertyName];
                                    var bindingPath = frameContext.viewModel.bindingPath || '/';
                                    var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                                    var bindings = ngFormControl.binding.split('.');
                                    bindings = bindingPaths.concat(bindings);
                                    if (entityPath === bindings.join('.')) {
                                        // 判断对应的组件是什么类型
                                        var dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                                        var dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                                        if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                            var isEditableGrid = dgColumnInfo.find(function (array) {
                                                var readonlyGroup = array.every(function (column) { return !(column.hasOwnProperty('editor') && column.editor); });
                                                if (!readonlyGroup) {
                                                    return true;
                                                }
                                                else {
                                                    return false;
                                                }
                                            });
                                            if (!isEditableGrid) {
                                                continue;
                                            }
                                        }
                                        // 如果是farris树，则跳过
                                        var isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === exports.ComponentType.farrisTreeTalbeComponent;
                                        if (isFarrisTreeTableComponent) {
                                            continue;
                                        }
                                        var isGridComponent = false;
                                        if (dgColumnNames) {
                                            isGridComponent = true;
                                        }
                                        result = {
                                            domPropertyName: propertyName,
                                            propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                            frameContext: frameContext,
                                            id: ngFormControl.id,
                                            isGridComponent: isGridComponent,
                                            binding: ngFormControl.binding,
                                            datagridColumns: dgColumnInfo
                                        };
                                        break;
                                    }
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (keys_1_1 && !keys_1_1.done && (_b = keys_1.return))
                                        _b.call(keys_1);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (frameContexts_1_1 && !frameContexts_1_1.done && (_a = frameContexts_1.return))
                            _a.call(frameContexts_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
            return result;
        };
        RequiredEffector.prototype.getDataPropInfo = function (path) {
            if (!path) {
                return null;
            }
            var paths = path.split('/').filter(function (p) { return p; });
            return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);
        };
        RequiredEffector.prototype.isValidValue = function (path, value) {
            var dataTypeInfo = this.getDataPropInfo(path);
            if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {
                // 多语字段
                var translate = this.injector.get(TranslateToken, null);
                var currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';
                if (Object.keys(value).length < 1) {
                    return false;
                }
                return !!value[currentLanguage];
            }
            else if (value === null || value === '' || value === undefined) {
                return false;
            }
            return true;
        };
        RequiredEffector.prototype.buildFormErrors = function (domPropertyName, message) {
            var _a, _b;
            if (message) {
                return _a = {},
                    _a[domPropertyName] = {
                        errors: {
                            'require': {
                                name: message
                            }
                        }
                    },
                    _a;
            }
            else {
                return _b = {},
                    _b[domPropertyName] = {
                        errors: {}
                    },
                    _b;
            }
        };
        RequiredEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RequiredEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Repository },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: FrameContext }
            ];
        };
        return RequiredEffector;
    }());

    var VisibleEffector = /** @class */ (function () {
        function VisibleEffector(injector, namespace, frameContext, repository) {
            this.injector = injector;
            this.namespace = namespace;
            this.frameContext = frameContext;
            this.repository = repository;
            this.ns = namespace;
        }
        VisibleEffector.prototype.effect = function (path, value, options) {
            // 由匿名函数接管，ignore
            var paths = path.split('/').filter(function (p) { return p; });
            var bindingPaths = this.getTablePaths(paths);
            var bindingPath = bindingPaths.join('/');
            // 主表显隐无需处理
            if (bindingPaths && bindingPaths.length > 0) {
                var isGridComponent = this.isGridComponent(bindingPath);
                if (isGridComponent) {
                    var datagridComponent = this.getDatagridComponent(bindingPath);
                    if (datagridComponent) {
                        // 更新列信息
                        // datagridComponent.columnsChanged();
                        var fieldPaths = this.getPropertyPaths(paths);
                        if (fieldPaths) {
                            var field = fieldPaths.join('.');
                            if (value) {
                                datagridComponent.showColumn(field, false);
                            }
                            else {
                                datagridComponent.hideColumn(field, false);
                            }
                        }
                    }
                }
            }
            else {
                var datagridComponent = this.getDatagridComponent(bindingPath);
                if (datagridComponent) {
                    datagridComponent.columnsChanged(false);
                }
            }
        };
        VisibleEffector.prototype.getTablePaths = function (paths) {
            var entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
            return entityPaths;
        };
        VisibleEffector.prototype.getDatagridComponent = function (bindingPath) {
            var _this = this;
            var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];
            var matchedFrameContexts = frameContexts.filter(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString() === bindingPath.split('/').filter(function (p) { return p; }).toString(); });
            var result = null;
            if (matchedFrameContexts) {
                matchedFrameContexts.every(function (frameContext) {
                    var frameId = frameContext.frameId;
                    var componentsMap = _this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                    if (!componentsMap) {
                        return true;
                    }
                    var datagridComponent = Array.from(componentsMap.values()).find(function (component) { return component && component['__component_type__'] === 'DatagridComponent'; });
                    if (datagridComponent) {
                        result = datagridComponent;
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            return result;
        };
        VisibleEffector.prototype.getPropertyPaths = function (paths) {
            var tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
            return paths.slice(tablePaths.length);
        };
        VisibleEffector.prototype.isGridComponent = function (bindingPath) {
            var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];
            var frameContext = frameContexts.find(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString() === bindingPath.split('/').filter(function (p) { return p; }).toString(); });
            if (frameContext) {
                return !!frameContext.viewModel['dataGridColumnsName'];
            }
            else {
                return false;
            }
        };
        VisibleEffector.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        VisibleEffector.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] },
                { type: FrameContext },
                { type: Repository }
            ];
        };
        return VisibleEffector;
    }());

    // import { Core } from '../core/index';
    var EffectorFactory = /** @class */ (function () {
        function EffectorFactory(injector, effectorRegistry) {
            this.injector = injector;
            this.effectorRegistry = effectorRegistry;
        }
        EffectorFactory.prototype.getEffector = function (expressionObject) {
            var path = expressionObject.path;
            var ns = expressionObject.ns;
            var bindingType = expressionObject.bindingType;
            var type = expressionObject.type;
            var nsEffectors = this.effectorRegistry.effectors.filter(function (effector) { return effector.ns == ns; });
            // 计算表达式
            if (type === exports.Expression.ExpressionType.Compute) {
                if (bindingType === exports.Expression.ExpressionBindingType.Field) {
                    return nsEffectors.find(function (effector) { return effector instanceof RepositoryEffector; });
                }
                else if (bindingType === exports.Expression.ExpressionBindingType.State) {
                    return nsEffectors.find(function (effector) { return effector instanceof UIStateEffector; });
                }
                else {
                    throw new Error("\u4E0D\u652F\u6301\u7684\u7ED1\u5B9A\u5B57\u6BB5\u7C7B\u578B\uFF1A" + bindingType);
                }
            }
            else if (type === exports.Expression.ExpressionType.Readonly) {
                // 只读表达式
                return nsEffectors.find(function (effector) { return effector instanceof ReadonlyEffector; });
            }
            else if (type === exports.Expression.ExpressionType.Dependency) {
                // 依赖表达式
                return nsEffectors.find(function (effector) { return effector instanceof DependencyEffector; });
            }
            else if (type === exports.Expression.ExpressionType.Relative) {
                // 关联表达式
                return nsEffectors.find(function (effector) { return effector instanceof RelativeEffector; });
            }
            else if (type === exports.Expression.ExpressionType.Validate) {
                // 校验表达式
                return nsEffectors.find(function (effector) { return effector instanceof ValidateEffector; });
            }
            else if (type === exports.Expression.ExpressionType.Required) {
                // 必填表达式
                return nsEffectors.find(function (effector) { return effector instanceof RequiredEffector; });
            }
            else if (type === exports.Expression.ExpressionType.Visible) {
                // 显隐表达式
                return nsEffectors.find(function (effector) { return effector instanceof VisibleEffector; });
            }
            else {
                // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);
                return null;
            }
        };
        EffectorFactory.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EffectorFactory.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: EffectorRegistry }
            ];
        };
        return EffectorFactory;
    }());

    // export * from './types';

    var EventHandler = /** @class */ (function () {
        function EventHandler(injector, repository, bindingData, expressionRegistry, effectorFactory, expressionExecutor, expressionResult) {
            this.injector = injector;
            this.repository = repository;
            this.bindingData = bindingData;
            this.expressionRegistry = expressionRegistry;
            this.effectorFactory = effectorFactory;
            this.expressionExecutor = expressionExecutor;
            this.expressionResult = expressionResult;
            this.frameContext = this.injector.get(FrameContext);
        }
        EventHandler.prototype.handleEvent = function (event, expressionObjects) {
            event = Object.assign({}, event);
            this.expressionObjects = expressionObjects;
            this.dispatch(event);
        };
        Object.defineProperty(EventHandler.prototype, "primaryValue", {
            //#endregion
            //#region 属性
            /**
             * 主表主键值
             */
            get: function () {
                return this.bindingData.list.currentItem.primaryKeyValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandler.prototype, "entityOriginalNodeCode", {
            /**
             * 获取主实体原始字段名
             */
            get: function () {
                return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;
            },
            enumerable: true,
            configurable: true
        });
        //#endregion
        //#region 表达式核心
        /**
         * 执行表达式计算
         * @param expression 表达式
         * @param context 上下文
         * @returns any
         */
        EventHandler.prototype.perform = function (expressionObject, context) {
            return this.expressionExecutor.compile(expressionObject, context);
        };
        /**
         * 副作用
         * @param event event
         * @param expressionObject expressionObject
         */
        EventHandler.prototype.effect = function (event, expressionObject) {
            var effectTo = expressionObject.bindingType;
            var effector = this.effectorFactory.getEffector(expressionObject);
            if (!effector) {
                // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);
                return;
            }
            if (effectTo === exports.Expression.ExpressionBindingType.Field) {
                var effectPaths = expressionObject.effectPaths || [];
                if (effectPaths.length > 0) {
                    effectPaths.forEach(function (path) {
                        var effectPath = path.split('/');
                        var effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id };
                        effector.effect(expressionObject.path, expressionObject.result, effectOptions);
                    });
                }
                else if (expressionObject.type === exports.Expression.ExpressionType.Required || expressionObject.type === exports.Expression.ExpressionType.Validate || expressionObject.type === exports.Expression.ExpressionType.Readonly || expressionObject.type === exports.Expression.ExpressionType.Visible) {
                    var effectOptions = { message: expressionObject.message, expressionId: expressionObject.id };
                    effector.effect(expressionObject.path, expressionObject.result, effectOptions);
                }
            }
            else {
                throw new Error('not supported！');
            }
        };
        //#endregion
        //#region util
        EventHandler.prototype.isValidateOrRequiredExpression = function (expressionObject) {
            return expressionObject && (expressionObject.type === exports.Expression.ExpressionType.Validate || expressionObject.type === exports.Expression.ExpressionType.Required);
        };
        /**
         * 以事件参数为依据构建实体路径
         * @param event event
         * @returns
         */
        EventHandler.prototype.getEntityPathFromEvent = function (event) {
            event = JSON.parse(JSON.stringify(event));
            if (!event || !event.path || event.path.length < 1) {
                return [];
            }
            var paths = event.path;
            return this.getEntityPath(paths);
        };
        /**
         * 获取事件路径中的实体路径
         * @param path path
         * @returns
         */
        EventHandler.prototype.getEntityPath = function (path) {
            var paths = path.filter(function (value, index) {
                if (index % 2 === 0 && value.includes(':')) {
                    return false;
                }
                else {
                    return true;
                }
            });
            return paths;
        };
        /**
         * 构造实体路径
         * @param path path
         * @description 删除路径中的id字段
         * @returns
         */
        EventHandler.prototype.buildEntityPath = function (path) {
            var paths = path.filter(function (value, index) {
                if (index % 2 === 0 && value.includes(':')) {
                    return false;
                }
                else {
                    return true;
                }
            });
            return paths;
        };
        /**
         * 清理事件路径中的id主键标识
         * @param path path
         * @returns
         */
        EventHandler.prototype.cleanEventPath = function (path) {
            path = path.filter(function (p) {
                if (p && p !== ':') {
                    return true;
                }
                else {
                    return false;
                }
            });
            return path.map(function (item) {
                if (item.includes(':')) {
                    return item.split(':')[1];
                }
                else {
                    return item;
                }
            });
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        EventHandler.prototype.getCurrentRowByPaths = function (paths) {
            var result = null;
            var bindingList = this.bindingData.getValue(paths);
            if (bindingList && bindingList.length > 0) {
                var primaryValue = bindingList.currentItem.primaryKeyValue || null;
                if (primaryValue) {
                    var bindingObject = bindingList.findById(primaryValue);
                    if (bindingObject) {
                        result = bindingObject.toJSON();
                    }
                }
            }
            return result;
        };
        /**
         * 获取事件路径中指定子表的事件行
         * @param path
         * @param tableCode
         * @returns
         */
        EventHandler.prototype.getEventId = function (path, tableCode) {
            if (!path || path.length < 1) {
                throw new Error('invalid path!');
            }
            var propertyIndex = path.findIndex(function (p) { return p === tableCode; });
            if (propertyIndex === -1) {
                return null;
            }
            var idIndex = propertyIndex + 1;
            if (idIndex > path.length - 1) {
                throw new Error('invalid propertyName or path');
            }
            var id = path[idIndex];
            if (id.indexOf(':') === -1) {
                throw new Error('compute error.');
            }
            return id.split(':')[1];
        };
        //#endregion
        //#region  构造上下文
        /**
         * 构造变量上下文
         * @param event
         * @returns
         */
        EventHandler.prototype.buildStateContext = function (event) {
            var ns = event.ns;
            var appContext = this.injector.get(AppContext, null);
            var frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
            var result = {};
            if (frameContexts && frameContexts.length > 0) {
                var anonymousFrameContext = frameContexts[0];
                var rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
                if (rootFrameContext) {
                    var uiState_1 = rootFrameContext.viewModel.uiState;
                    var propertyNames = Object.getOwnPropertyNames(uiState_1) || [];
                    propertyNames.forEach(function (prop) {
                        if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                            result[prop] = uiState_1[prop];
                        }
                    });
                }
            }
            return result;
        };
        /**
         * 获取事件实体
         * @param event
         * @returns
         */
        EventHandler.prototype.buildEntityContext = function (event, expressionObject, currentRows) {
            var _this = this;
            var expressionBindingType = expressionObject.bindingType;
            if (expressionBindingType === exports.Expression.ExpressionBindingType.Field) {
                var entityTypeInfo = this.repository.entityTypeInfo;
                var childrenEntityPaths = [];
                ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
                // 获取当前行
                var row = currentRows && currentRows.find(function (row) { return row.bindingPath === '' || row.bindingPath === '/'; }) || null;
                var primaryValue = row && row.primaryValue || this.bindingData.list.currentId;
                var entity = this.bindingData.list.findById(primaryValue);
                if (!entity) {
                    return {};
                }
                var object_1 = entity.toJSON();
                object_1['__type__'] = 'Entity';
                if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
                    return object_1;
                }
                childrenEntityPaths.sort(function (v1, v2) { return v1.length - v2.length; });
                // 找到所有子表
                childrenEntityPaths.forEach(function (paths) {
                    var bindingList = _this.bindingData.getValue(paths);
                    var currentRowId = bindingList.currentId;
                    var propertyName = paths[paths.length - 1];
                    // parent 为entity或entitylist或null
                    var parent = paths.slice(0, paths.length - 1).reduce(function (object, path) {
                        return object && object[path] || null;
                    }, object_1);
                    if (!parent) {
                        return;
                    }
                    var data = parent;
                    var node = null;
                    if (!currentRowId) {
                        // 当前表没有数据
                        node = { __items__: [], __type__: 'List' };
                        node.length = function () { return node.__items__.length; };
                    }
                    else {
                        // 纠正当前行
                        if (currentRows && currentRows.length > 0) {
                            // 是否指定了当前行
                            var userAssignCurrentRow = currentRows.find(function (row) {
                                var bindingPaths = row.bindingPath.split('/').filter(function (p) { return p; });
                                return bindingPaths.join('/') === paths.join('/');
                            });
                            if (userAssignCurrentRow) {
                                currentRowId = userAssignCurrentRow.primaryValue;
                            }
                        }
                        // 子表当前行
                        var row_1 = bindingList.findById(currentRowId);
                        // 找到子表当前行的上级
                        var list = parent[propertyName];
                        node = __assign({ __items__: [] }, row_1 && row_1.toJSON() || {}, { __type__: 'List' });
                        node.length = function () { return node.__items__.length; };
                        if (list && Array.isArray(list)) {
                            node.__items__ = [].concat(list);
                        }
                    }
                    data[propertyName] = node;
                });
                return object_1;
            }
            else if (expressionBindingType === exports.Expression.ExpressionBindingType.State) ;
            else {
                return null;
            }
        };
        /**
         * 构造表达式计算上下文
         * @param expressionObject 表达式
         * @param event 事件
         * @param entityContext 实体上下文
         * @param currentRows 当前行
         * @returns
         */
        EventHandler.prototype.buildContext = function (expressionObject, event, entityContext, currentRows) {
            var _a;
            var context = [];
            if (entityContext) {
                context.push(entityContext);
            }
            else {
                var entity_1 = this.buildEntityContext(event, expressionObject, currentRows);
                context.push(entity_1);
            }
            var stateContext = this.buildStateContext(event);
            var entityCode = this.entityOriginalNodeCode;
            var entity = null;
            if (context.length === 1) {
                entity = context.pop();
            }
            else {
                entity = context[0];
                if (!entity['__type__']) {
                    entity['__type__'] = 'Entity';
                }
                entity['__items__'] = context;
            }
            var translate = this.injector.get(TranslateToken, null);
            return __assign((_a = {}, _a[entityCode] = entity, _a), stateContext, { BigNumber: bignumber_js.BigNumber, frameContext: this.frameContext, bindingData: this.bindingData, repository: this.repository, CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS' });
        };
        //#endregion
        /**
         * 构造副作用路径
         * @param event
         * @param expressionObject
         * @returns
         */
        EventHandler.prototype.buildEffectPath = function (event, expressionObject) {
            var expressionPaths = expressionObject.path.split('/').filter(function (p) { return p; });
            var primaryValue = event.path[0] && event.path[0].split(':')[1];
            if (!primaryValue) {
                throw new Error('Invalid event path!');
            }
            if (expressionPaths.length === 1) {
                // 主表简单字段
                return [primaryValue, expressionPaths.pop()];
            }
            else {
                var result = [primaryValue];
                for (var index = 0; index < expressionPaths.length; index++) {
                    var propertyName = expressionPaths[index];
                    result.push(propertyName);
                    var currentPaths = expressionPaths.slice(0, index + 1);
                    var propertyInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);
                    if (propertyInfo.group === 'List') {
                        var id = this.getEventId(event.path, propertyInfo.name) || null;
                        // 事件和表达式不是同一个表
                        if (!id) {
                            var bindingList = this.bindingData.getValue(currentPaths);
                            if (bindingList) {
                                id = bindingList.currentId;
                            }
                        }
                        result.push(id);
                    }
                }
                return result;
            }
        };
        //#region 辅助方法
        EventHandler.prototype.getPathInfo = function (path) {
            var paths = path.split('/').filter(function (p) { return p; });
            // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
            var entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
            var propertyName = paths.slice(entityPath.length).join('/');
            return { path: entityPath.join('/'), propertyName: propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(function (p) { return p; }) };
        };
        /**
         * get table paths from event paths
         * @param paths event paths
         * @returns
         */
        EventHandler.prototype.getTablePathsFromEventPaths = function (paths) {
            paths = this.getEntityPath(paths);
            var entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
            return entityPaths;
        };
        /**
         * get property paths from event paths
         * @param paths event paths
         * @returns
         */
        EventHandler.prototype.getPropertyPathsFromEventPaths = function (paths) {
            paths = this.getEntityPath(paths);
            var tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
            return paths.slice(tablePaths.length);
        };
        /**
         * 分析事件和表达式的关系
         */
        EventHandler.prototype.analysis = function (event, expressionObject) {
            var expressionPathInfo = this.getPathInfo(expressionObject.path);
            var eventPaths = this.getEntityPath(event.path.slice(0));
            var eventPathInfo = this.getPathInfo(eventPaths.join('/'));
            if (!expressionPathInfo || !eventPathInfo) {
                console.warn("\u8868\u8FBE\u5F0F\u8DEF\u5F84\u6216\u4E8B\u4EF6\u8DEF\u5F84\u9519\u8BEF\uFF0C\u83B7\u53D6\u8DEF\u5F84\u4FE1\u606F\u5931\u8D25\u3002");
                return null;
            }
            var expressionTablePaths = expressionPathInfo.path.split('/').filter(function (p) { return p; });
            var expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(function (p) { return p; });
            var eventTablePaths = eventPathInfo.path.split('/').filter(function (p) { return p; });
            var eventPropertyNames = eventPathInfo.propertyName.split('/').filter(function (p) { return p; });
            var result = {
                distance: undefined,
                eventFromChildren: undefined,
                eventFromParent: undefined,
                expressionTablePaths: expressionTablePaths,
                expressionPropertyNames: expressionPropertyNames,
                eventTablePaths: eventTablePaths,
                eventPropertyNames: eventPropertyNames,
                isSameTable: false
            };
            result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);
            if (result.distance === 1) {
                result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));
                result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));
            }
            result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');
            return result;
        };
        EventHandler.prototype.buildCurrentRows = function (tablePaths, fullPaths) {
            var currentRows = new Array();
            if (!tablePaths || tablePaths.length < 1) {
                currentRows.push({
                    bindingPath: '/',
                    primaryValue: fullPaths[0]
                });
            }
            else {
                var paths_1 = [];
                tablePaths.forEach(function (path, index) {
                    if (index === 0) {
                        currentRows.push({
                            bindingPath: '/',
                            primaryValue: fullPaths[0]
                        });
                    }
                    paths_1.push(path);
                    var primaryValue = fullPaths[index * 2 + 2];
                    currentRows.push({
                        bindingPath: paths_1.join('/'),
                        primaryValue: primaryValue
                    });
                });
            }
            return currentRows;
        };
        EventHandler.prototype.convertBooleanTypeExpressionResult = function (expressionObject, result) {
            if (this.isBooleanTypeExpression(expressionObject)) {
                return result === true ? true : false;
            }
            else {
                return result;
            }
        };
        EventHandler.prototype.isBooleanTypeExpression = function (expressionObject) {
            return this.isReadonlyExpression(expressionObject) || this.isVisibleExpression(expressionObject) || this.isValidateExpression(expressionObject) || this.isRequiredExpression(expressionObject) || this.isDependencyExpression(expressionObject);
        };
        EventHandler.prototype.isReadonlyExpression = function (expressionObject) {
            return expressionObject && expressionObject.type === exports.Expression.ExpressionType.Readonly || false;
        };
        EventHandler.prototype.isVisibleExpression = function (expressionObject) {
            return expressionObject && expressionObject.type === exports.Expression.ExpressionType.Visible;
        };
        EventHandler.prototype.isValidateExpression = function (expressionObject) {
            return expressionObject && expressionObject.type === exports.Expression.ExpressionType.Validate;
        };
        EventHandler.prototype.isRequiredExpression = function (expressionObject) {
            return expressionObject && expressionObject.type === exports.Expression.ExpressionType.Required;
        };
        EventHandler.prototype.isDependencyExpression = function (expressionObject) {
            return expressionObject && expressionObject.type === exports.Expression.ExpressionType.Dependency;
        };
        EventHandler.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EventHandler.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: Repository },
                { type: BindingData },
                { type: ExpressionRegistry },
                { type: EffectorFactory },
                { type: ExpressionExecutor },
                { type: ExpressionResult }
            ];
        };
        return EventHandler;
    }());

    /**
     * 实体值变化处理器
     */
    var EntityValueChangedEventHandler = /** @class */ (function (_super) {
        __extends(EntityValueChangedEventHandler, _super);
        function EntityValueChangedEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 获取相关表达式
         * @param event event
         */
        EntityValueChangedEventHandler.prototype.filter = function (event) {
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        EntityValueChangedEventHandler.prototype.dispatch = function (event) {
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        EntityValueChangedEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        EntityValueChangedEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return EntityValueChangedEventHandler;
    }(EventHandler));

    var EffectorManager = /** @class */ (function () {
        function EffectorManager() {
        }
        /**
         * 批量副作用
         * @param effector effector
         * @param expressionObject 表达式
         * @param paths 作用路径
         * @returns
         */
        EffectorManager.effect = function (effector, expressionObject, paths) {
            if (!paths || paths.length < 1) {
                return;
            }
            paths.forEach(function (path) {
                var effectOptions = { path: path, message: expressionObject.message, expressionId: expressionObject.id };
                effector.effect(expressionObject.path, expressionObject.result, effectOptions);
            });
        };
        return EffectorManager;
    }());

    var StateValueChangedEventHandler = /** @class */ (function (_super) {
        __extends(StateValueChangedEventHandler, _super);
        function StateValueChangedEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 获取相关表达式
         * @param event event
         */
        StateValueChangedEventHandler.prototype.filter = function (event) {
            var _this = this;
            if (this.expressionObjects && this.expressionObjects.length > 0) {
                return this.expressionObjects.filter(function (expressionObject) {
                    var deps = expressionObject.deps;
                    if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                        return false;
                    }
                    var changePaths = _this.cleanEventPath(event.path);
                    changePaths.splice(0, 0, STATE_TEMPLATE);
                    var eventPath = changePaths.join('/');
                    if (deps.includes(eventPath)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                });
            }
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        StateValueChangedEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    // const entityContext = this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 副作用
         * @param event event
         * @param expressionObject expressionObject
         */
        StateValueChangedEventHandler.prototype.effect = function (event, expressionObject) {
            var _this = this;
            var effector = this.effectorFactory.getEffector(expressionObject);
            var bindingType = expressionObject.bindingType;
            if (!effector) {
                return;
            }
            if (bindingType === exports.Expression.ExpressionBindingType.State) {
                // 如果表达式作用于uistate
                effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });
            }
            else if (bindingType === exports.Expression.ExpressionBindingType.Field) {
                // 表达式作用于实体属性
                var expressionPathInfo = this.getPathInfo(expressionObject.path);
                var bindingPaths = expressionPathInfo.paths;
                var entities = this.repository.entityCollection.getAllEntities();
                if (!entities || entities.length < 1 || expressionObject.type === exports.Expression.ExpressionType.Visible) {
                    effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });
                }
                else {
                    this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, function (currentRows, paths) {
                        _this.output(event, expressionObject, currentRows, effector, [paths]);
                    });
                }
            }
        };
        StateValueChangedEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
            var context = this.buildContext(expressionObject, event, null, currentRows);
            var value = this.perform(expressionObject, context);
            if (value === undefined) {
                return;
            }
            expressionObject.result = value;
            if (expressionObject.id) {
                this.expressionResult.set(expressionObject.id, expressionObject.result);
            }
            EffectorManager.effect(effector, expressionObject, paths);
        };
        StateValueChangedEventHandler.prototype.effectRows = function (entities, bindingPaths, propertyNames, callback, currentRows, prevPaths, paths) {
            var _this = this;
            if (currentRows === void 0) {
                currentRows = [];
            }
            if (prevPaths === void 0) {
                prevPaths = [];
            }
            if (paths === void 0) {
                paths = [];
            }
            if (!bindingPaths || bindingPaths.length < 1) {
                entities.forEach(function (entity) {
                    if (!entity || !entity.primaryValue) {
                        return;
                    }
                    var currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);
                    var currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);
                    callback(currentCurrentRows, currentPaths);
                });
                currentRows.length = 0;
                paths.length = 0;
            }
            else {
                var flag_1 = false;
                var nextPrevPaths_1 = prevPaths;
                entities.forEach(function (entity) {
                    var prop = bindingPaths[0];
                    var entityList = entity[prop];
                    if (!entityList || entityList.count() < 1) {
                        // 下级表没有数据
                        return;
                    }
                    currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });
                    paths.push(entity.primaryValue);
                    paths.push(prop);
                    if (flag_1 === false) {
                        flag_1 = true;
                        nextPrevPaths_1.push(prop);
                    }
                    var nextBindingPaths = bindingPaths.slice(1);
                    _this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths_1, paths);
                });
            }
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        StateValueChangedEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        StateValueChangedEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return StateValueChangedEventHandler;
    }(EventHandler));

    var RepositoryAddEntityEventHandler = /** @class */ (function (_super) {
        __extends(RepositoryAddEntityEventHandler, _super);
        function RepositoryAddEntityEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 获取相关表达式
         * @param event event
         * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段
         */
        RepositoryAddEntityEventHandler.prototype.filter = function (event) {
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        RepositoryAddEntityEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = result;
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        RepositoryAddEntityEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        RepositoryAddEntityEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return RepositoryAddEntityEventHandler;
    }(EventHandler));

    var RepositoryRemoveEntityEventHandler = /** @class */ (function (_super) {
        __extends(RepositoryRemoveEntityEventHandler, _super);
        function RepositoryRemoveEntityEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 获取相关表达式
         * @param event event
         */
        RepositoryRemoveEntityEventHandler.prototype.filter = function (event) {
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        RepositoryRemoveEntityEventHandler.prototype.dispatch = function (event) {
        };
        RepositoryRemoveEntityEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return RepositoryRemoveEntityEventHandler;
    }(EventHandler));

    var RepositoryLoadEventHandler = /** @class */ (function (_super) {
        __extends(RepositoryLoadEventHandler, _super);
        function RepositoryLoadEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RepositoryLoadEventHandler.prototype.filter = function (event) {
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        RepositoryLoadEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = result;
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        RepositoryLoadEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        RepositoryLoadEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return RepositoryLoadEventHandler;
    }(EventHandler));

    var EntityUpdateEventHandler = /** @class */ (function (_super) {
        __extends(EntityUpdateEventHandler, _super);
        function EntityUpdateEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EntityUpdateEventHandler.prototype.filter = function (event) {
            var _this = this;
            return this.expressionObjects.filter(function (expressionObject) {
                // 重新加载实体时不计算计算表达式，只处理只读、必填等
                if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === exports.Expression.ExpressionType.Compute || expressionObject.type === exports.Expression.ExpressionType.Dependency || expressionObject.type === exports.Expression.ExpressionType.DataPicking) {
                    return false;
                }
                var result = _this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                // 必须是主表表达式
                if (result.expressionTablePaths.length !== 0) {
                    return false;
                }
                var index = expressionObject.deps.findIndex(function (dep) {
                    if (!dep.startsWith(ENTITY_TEMPLATE)) {
                        return false;
                    }
                    var deps = dep.split(exports.Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                    var depPathInfo = _this.getPathInfo(deps.join('/'));
                    if (!depPathInfo) {
                        return false;
                    }
                    if (depPathInfo.paths.length !== 0) {
                        return false;
                    }
                    return true;
                });
                return index === -1 ? false : true;
            });
        };
        /**
         * 发布事件
         * @param event event
         */
        EntityUpdateEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        EntityUpdateEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            var result = null;
            var bindingList = this.bindingData.getValue(paths);
            var eventEntityPath = this.getEntityPath(event.path);
            if (bindingList && bindingList.length > 0) {
                var primaryValue = bindingList.currentItem.primaryKeyValue || null;
                // 使用事件中的主键
                var childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
                if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                    // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                    primaryValue = event.id || null;
                    if (!primaryValue) {
                        primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                    }
                }
                if (primaryValue) {
                    var bindingObject = bindingList.findById(primaryValue);
                    if (bindingObject) {
                        result = bindingObject.toJSON();
                    }
                }
            }
            return result;
        };
        EntityUpdateEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return EntityUpdateEventHandler;
    }(EventHandler));

    var BindingDataAppendObjectEventHandler = /** @class */ (function (_super) {
        __extends(BindingDataAppendObjectEventHandler, _super);
        function BindingDataAppendObjectEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 过滤出需要计算的表达式
         * @param event event
         * @returns
         */
        BindingDataAppendObjectEventHandler.prototype.filter = function (event) {
            var _this = this;
            if (this.expressionObjects && this.expressionObjects.length > 0) {
                // const fullEventPath = event.path || [];
                // event.path like ["id:7dd77e50-ebed-4639-b483-d12004603640", "formEEUR1E1s"] or undefined or []
                // eventTablePaths like [] or ["子表s"]
                // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方
                // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性
                var groupExpressions = this.expressionObjects.filter(function (expressionObject) {
                    if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {
                        return false;
                    }
                    var eventTablePaths = _this.buildEntityPath(event.path);
                    var info = _this.analysis(event, expressionObject);
                    if (!info) {
                        return false;
                    }
                    // const eventEntityPath = this.buildEntityPath(event.path);
                    // 主表新增
                    if (eventTablePaths.length === 0) {
                        if (expressionObject.bindingType === exports.Expression.ExpressionBindingType.Field) {
                            // 认为主表新增时不需要处理聚合函数
                            return false;
                        }
                    }
                    // 从表或从从表新增
                    eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);
                    // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增
                    // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']
                    // 仅处理上级表达式
                    if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {
                        return false;
                    }
                    // 不支持跨表
                    if (!info.eventTablePaths.join(exports.Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(exports.Expression.DEPENDENCY_SPLITER))) {
                        return false;
                    }
                    var index = expressionObject.deps.findIndex(function (dep) {
                        // 依赖
                        if (!dep.startsWith(eventTablePaths.join(exports.Expression.DEPENDENCY_SPLITER))) {
                            return false;
                        }
                        var deps = dep.split(exports.Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                        var dependPathInfo = _this.getPathInfo(deps.join(exports.Expression.DEPENDENCY_SPLITER));
                        if (dependPathInfo && dependPathInfo.paths.join(exports.Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(exports.Expression.DEPENDENCY_SPLITER)) {
                            return true;
                        }
                        return false;
                    });
                    return index === -1 ? false : true;
                });
                var eventTablePaths_1 = this.buildEntityPath(event.path);
                // 事件表中表达式（事件表本身的表达式）
                var relativeExpressions = this.expressionObjects.filter(function (expressionObject) {
                    // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式
                    if (expressionObject.ns !== event.ns) {
                        return false;
                    }
                    var expressionPathInfo = _this.getPathInfo(expressionObject.path);
                    // 过滤掉非当前表的表达式
                    if (expressionPathInfo.paths.join(exports.Expression.DEPENDENCY_SPLITER) !== eventTablePaths_1.join(exports.Expression.DEPENDENCY_SPLITER)) {
                        return false;
                    }
                    // 表达式是计算或依赖表达式并且是分层加载场景，不计算，仅当依赖变化时计算
                    if ((expressionObject.type === exports.Expression.ExpressionType.Compute || expressionObject.type === exports.Expression.ExpressionType.Dependency) && event.isTreeNodeLoadScene) {
                        return false;
                    }
                    // 没有依赖的表达式
                    if (!expressionObject.deps || expressionObject.deps.length < 1) {
                        return true;
                    }
                    // 仅依赖State
                    var onlyDependOnState = expressionObject.deps.every(function (dep) { return dep.startsWith(STATE_TEMPLATE); });
                    // 仅依赖当前表或上级表
                    // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {
                    //   if (!dep.startsWith(ENTITY_TEMPLATE)) {
                    //     return false;
                    //   }
                    //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);
                    //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                    //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;
                    // });
                    // if (onlyDependOnState || onlyDependOnCurrentTable) {
                    //   return true;
                    // }
                    if (onlyDependOnState) {
                        return true;
                    }
                    var result = _this.analysis(event, expressionObject);
                    if (result && result.distance === 0 && result.isSameTable) {
                        return true;
                    }
                    // 事件表表达式，但依赖下级表的未计算
                    return false;
                });
                // 依赖当前加载数据的表达式
                var depExpressions = this.expressionObjects.filter(function (expressionObject) {
                    if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1 || (expressionObject.type !== exports.Expression.ExpressionType.Visible && expressionObject.type !== exports.Expression.ExpressionType.Required && expressionObject.type !== exports.Expression.ExpressionType.Validate)) {
                        return false;
                    }
                    // 过滤出所有实体依赖
                    var deps = expressionObject.deps.filter(function (dep) { return dep.startsWith(ENTITY_TEMPLATE); });
                    if (!deps || deps.length < 1) {
                        return false;
                    }
                    var result = _this.analysis(event, expressionObject);
                    if (!result) {
                        return false;
                    }
                    // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表
                    // 1、计算事件表路径
                    var eventPath = event.path.filter(function (p) { return p; }).join('/');
                    // 2、获取依赖字段的表路径
                    var index = deps.findIndex(function (dep) {
                        // 去掉ENTITY~前缀
                        var depPath = dep.split('/').slice(1).join('/');
                        // 获取依赖字段所在的表路径
                        var path = _this.getPathInfo(depPath).path;
                        return path === eventPath;
                    });
                    return index !== -1;
                });
                return groupExpressions.concat(relativeExpressions, depExpressions);
            }
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        BindingDataAppendObjectEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        BindingDataAppendObjectEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        /**
         * 新增副作用器
         * @param event event
         * @param expressionObject 表达式
         * @returns
         */
        BindingDataAppendObjectEventHandler.prototype.effect = function (event, expressionObject) {
            var _this = this;
            var effectTo = expressionObject.bindingType;
            var eventPath = this.cleanEventPath(event.path);
            var effector = this.effectorFactory.getEffector(expressionObject);
            if (!effector) {
                return;
            }
            var info = this.analysis(event, expressionObject);
            if (!info) {
                return;
            }
            var expressionPaths = expressionObject.path.split('/').filter(function (p) { return p; });
            if (effectTo === exports.Expression.ExpressionBindingType.Field) {
                var paths_1 = [];
                var propertyPaths_1 = expressionPaths.slice(info.expressionTablePaths.length);
                // 新增场景需要计算事件表\事件表上面的表\下层表的可见、必填、校验
                if (info.distance === 0) {
                    if (!info.isSameTable) {
                        return;
                    }
                    // 表达式和事件在同一个表
                    var prevPaths_1 = eventPath.slice(0);
                    if (eventPath.length === 1) {
                        // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径
                        if (event.value && Array.isArray(event.value)) {
                            event.value.forEach(function (bindingObject) {
                                paths_1.push([bindingObject.primaryKeyValue].concat(propertyPaths_1));
                            });
                        }
                        else {
                            var path = prevPaths_1.concat(propertyPaths_1);
                            paths_1.push(path);
                        }
                    }
                    else {
                        // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键
                        if (event.value && Array.isArray(event.value)) {
                            event.value.forEach(function (bindingObject) {
                                paths_1.push(prevPaths_1.concat([bindingObject.primaryKeyValue]).concat(propertyPaths_1));
                            });
                        }
                        else {
                            var bindingList = this.bindingData.getValue(info.eventTablePaths);
                            if (bindingList && bindingList.currentId) {
                                paths_1.push(prevPaths_1.concat(bindingList.currentId).concat(propertyPaths_1));
                            }
                        }
                    }
                }
                else {
                    // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据
                    if (info.eventFromParent === true) {
                        // 仅处理下级表，跨表跳过
                        if (info.expressionTablePaths.length > 1) {
                            return;
                        }
                        // 下层表的可见、必填、校验
                        var prevPaths = eventPath.slice(0, eventPath.length);
                        // 子表新增
                        if (eventPath && eventPath.length > 0) {
                            prevPaths = eventPath.slice(0, eventPath.length);
                        }
                        else {
                            // 主表新增
                            prevPaths = [this.bindingData.list.currentId, info.expressionTablePaths[0], null];
                        }
                        var path = prevPaths.concat(propertyPaths_1);
                        paths_1.push(path);
                    }
                    else if (info.eventFromChildren === true) {
                        var prevPaths = eventPath.slice(0, eventPath.length - 1);
                        var path = prevPaths.concat(propertyPaths_1);
                        paths_1.push(path);
                    }
                    else {
                        return;
                    }
                }
                paths_1.forEach(function (path) {
                    var currentRows = _this.buildCurrentRows(info.expressionTablePaths, path);
                    _this.output(event, expressionObject, currentRows, effector, [path]);
                });
            }
            else if (effectTo === exports.Expression.ExpressionBindingType.State) {
                console.error('not supported！');
            }
        };
        BindingDataAppendObjectEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
            var context = this.buildContext(expressionObject, event, null, currentRows);
            var value = this.perform(expressionObject, context);
            if (value === undefined) {
                return;
            }
            expressionObject.result = value;
            if (expressionObject.id) {
                this.expressionResult.set(expressionObject.id, expressionObject.result);
            }
            EffectorManager.effect(effector, expressionObject, paths);
        };
        BindingDataAppendObjectEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return BindingDataAppendObjectEventHandler;
    }(EventHandler));

    var BindingDataValueChangeEventHandler = /** @class */ (function (_super) {
        __extends(BindingDataValueChangeEventHandler, _super);
        function BindingDataValueChangeEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BindingDataValueChangeEventHandler.prototype.filter = function (event) {
            var _this = this;
            if (this.expressionObjects && this.expressionObjects.length > 0) {
                return this.expressionObjects.filter(function (expressionObject) {
                    var deps = expressionObject.deps;
                    if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                        return false;
                    }
                    var eventEntityPaths = _this.getEntityPath(event.path);
                    eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);
                    return deps.includes(eventEntityPaths.join('/'));
                });
            }
            return null;
        };
        /**
         * 发布事件
         * @param event event
         */
        BindingDataValueChangeEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 输出副作用
         * @param event event
         * @param expressionObject 表达式
         * @returns
         */
        BindingDataValueChangeEventHandler.prototype.effect = function (event, expressionObject) {
            var e_1, _a;
            // 首先计算当前表达式和事件会影响那些路径
            var effector = this.effectorFactory.getEffector(expressionObject);
            if (!effector) {
                return;
            }
            var result = this.analysis(event, expressionObject);
            if (!result) {
                return;
            }
            var eventPaths = this.cleanEventPath(event.path);
            var paths = [];
            if (result.distance === 0) {
                // 值变化之后影响到了一个表内字段或影响到了同级表字段
                if (result.isSameTable === false) {
                    // 同级表跳过
                    //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);
                    return;
                }
                var prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);
                var path = prevPaths.concat(result.expressionPropertyNames);
                var currentRows = this.buildCurrentRows(result.eventTablePaths, path);
                paths.push(path);
                this.output(event, expressionObject, currentRows, effector, paths);
            }
            else {
                if (result.eventFromChildren === true) {
                    if (result.distance > 1) {
                        return;
                    }
                    // 下级表值变化影响到了上级表的表达式
                    var prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);
                    var path = prevPaths.concat(result.expressionPropertyNames);
                    paths.push(path);
                    var currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);
                    this.output(event, expressionObject, currentRows, effector, paths);
                }
                else if (result.eventFromParent === true) {
                    if (result.distance > 1) {
                        //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);
                        return;
                    }
                    // 上级表值变化影响到了下级表的表达式
                    var prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);
                    // 添加下级表nodecode到路径中
                    prevPaths.push(result.expressionTablePaths.slice(0).pop());
                    // 遍历子表
                    var bindingPaths = result.expressionTablePaths;
                    var primaryKeyValue = eventPaths[0];
                    if (!primaryKeyValue) {
                        return;
                    }
                    var object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);
                    // prevPaths like [1,c,1.1,cc]
                    for (var index = 1; index < prevPaths.length; index++) {
                        var propertyName = prevPaths[index];
                        if (object instanceof EntityList) {
                            object = object.get(propertyName);
                        }
                        else {
                            object = object[propertyName];
                        }
                    }
                    var list = object;
                    if (list && list instanceof EntityList) {
                        if (list.count() === 0) {
                            if (expressionObject.type === exports.Expression.ExpressionType.Visible || expressionObject.type === exports.Expression.ExpressionType.Required) {
                                var context = this.buildContext(expressionObject, event);
                                var value = this.perform(expressionObject, context);
                                if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                                    return;
                                }
                                expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);
                                if (expressionObject.id) {
                                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                                }
                                _super.prototype.effect.call(this, event, expressionObject);
                            }
                        }
                        else {
                            try {
                                for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                                    var entity = list_1_1.value;
                                    if (entity && entity.primaryValue) {
                                        var path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);
                                        var currentRows = this.buildCurrentRows(result.expressionTablePaths, path);
                                        this.output(event, expressionObject, currentRows, effector, [path]);
                                    }
                                }
                            }
                            catch (e_1_1) {
                                e_1 = { error: e_1_1 };
                            }
                            finally {
                                try {
                                    if (list_1_1 && !list_1_1.done && (_a = list_1.return))
                                        _a.call(list_1);
                                }
                                finally {
                                    if (e_1)
                                        throw e_1.error;
                                }
                            }
                        }
                    }
                }
            }
        };
        BindingDataValueChangeEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
            var context = this.buildContext(expressionObject, event, null, currentRows);
            var value = this.perform(expressionObject, context);
            if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                return;
            }
            expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);
            if (expressionObject.id) {
                this.expressionResult.set(expressionObject.id, expressionObject.result);
            }
            EffectorManager.effect(effector, expressionObject, paths);
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        BindingDataValueChangeEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            event = JSON.parse(JSON.stringify(event));
            var result = null;
            var bindingList = this.bindingData.getValue(paths);
            var eventEntityPath = this.getEntityPath(event.path);
            if (bindingList && bindingList.length > 0) {
                var primaryValue = bindingList.currentItem.primaryKeyValue || null;
                // 使用事件中的主键
                var childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
                if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                    // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                    primaryValue = event.id || null;
                    if (!primaryValue) {
                        primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                    }
                }
                if (primaryValue) {
                    var bindingObject = bindingList.findById(primaryValue);
                    if (bindingObject) {
                        result = bindingObject.toJSON();
                    }
                }
            }
            return result;
        };
        BindingDataValueChangeEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return BindingDataValueChangeEventHandler;
    }(EventHandler));

    /**
     * 删除数据时需要计算的表达式
     * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）
     */
    var BindingDataRemoveObjectEventHandler = /** @class */ (function (_super) {
        __extends(BindingDataRemoveObjectEventHandler, _super);
        function BindingDataRemoveObjectEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 过滤出需要计算的表达式
         * @param event event
         * @returns
         */
        BindingDataRemoveObjectEventHandler.prototype.filter = function (event) {
            var _this = this;
            if (this.expressionObjects && this.expressionObjects.length > 0) {
                // 找到聚合相关表达式
                var expressions = this.expressionObjects.filter(function (expressionObject) {
                    if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {
                        return false;
                    }
                    var info = _this.analysis(event, expressionObject);
                    if (!info) {
                        return false;
                    }
                    // event.path like [id:xxxx] or [id:xxxx,子表s]
                    var eventTablePaths = _this.buildEntityPath(event.path);
                    // 主表删除
                    if (eventTablePaths.length === 0) {
                        if (expressionObject.bindingType === exports.Expression.ExpressionBindingType.Field) {
                            return false;
                        }
                    }
                    // 从表或从从表删除
                    eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);
                    // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增
                    // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']
                    // 仅处理上级表达式
                    if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {
                        return false;
                    }
                    // 不支持跨表
                    if (!info.eventTablePaths.join(exports.Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(exports.Expression.DEPENDENCY_SPLITER))) {
                        return false;
                    }
                    var index = expressionObject.deps.findIndex(function (dep) {
                        // 依赖
                        if (!dep.startsWith(eventTablePaths.join(exports.Expression.DEPENDENCY_SPLITER))) {
                            return false;
                        }
                        var deps = dep.split(exports.Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                        var dependPathInfo = _this.getPathInfo(deps.join(exports.Expression.DEPENDENCY_SPLITER));
                        if (dependPathInfo && dependPathInfo.paths.join(exports.Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(exports.Expression.DEPENDENCY_SPLITER)) {
                            return true;
                        }
                        return false;
                    });
                    return index === -1 ? false : true;
                });
                return expressions;
            }
        };
        /**
         * 发布事件
         * @param event event
         */
        BindingDataRemoveObjectEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 删除副作用器
         * @param event event
         * @param expressionObject 表达式
         * @returns
         */
        BindingDataRemoveObjectEventHandler.prototype.effect = function (event, expressionObject) {
            var effectTo = expressionObject.bindingType;
            var eventPath = this.cleanEventPath(event.path);
            var effector = this.effectorFactory.getEffector(expressionObject);
            if (!effector) {
                return;
            }
            var info = this.analysis(event, expressionObject);
            if (!info) {
                return;
            }
            var expressionPaths = expressionObject.path.split('/').filter(function (p) { return p; });
            if (effectTo === exports.Expression.ExpressionBindingType.Field) {
                var paths = [];
                var propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);
                // 删除场景仅需要计算事件表上面的表
                if (info.distance !== 0) {
                    // 表达式和事件不在同一个表，即下级表删除了一批数据
                    if (info.eventFromParent === true) {
                        // 在过滤时这种情况的应该就排除掉了
                        return;
                    }
                    else if (info.eventFromChildren === true) {
                        var prevPaths = eventPath.slice(0, eventPath.length - 1);
                        var path = prevPaths.concat(propertyPaths);
                        paths.push(path);
                    }
                    else {
                        return;
                    }
                }
                EffectorManager.effect(effector, expressionObject, paths);
            }
            else if (effectTo === exports.Expression.ExpressionBindingType.State) {
                console.error('not supported！');
            }
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        BindingDataRemoveObjectEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        BindingDataRemoveObjectEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return BindingDataRemoveObjectEventHandler;
    }(EventHandler));

    var BindingDataLoadEventHandler = /** @class */ (function (_super) {
        __extends(BindingDataLoadEventHandler, _super);
        function BindingDataLoadEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BindingDataLoadEventHandler.prototype.filter = function (event) {
            var _this = this;
            // 过滤第一次空load
            if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {
                return null;
            }
            // 数据加载完成后需要计算当前绑定路径下的只读、显隐、必填、校验表达式
            if (this.expressionObjects && this.expressionObjects.length > 0) {
                var expressions = this.expressionObjects.filter(function (expressionObject) {
                    if (expressionObject.ns !== event.ns || (expressionObject.type !== exports.Expression.ExpressionType.Readonly && expressionObject.type !== exports.Expression.ExpressionType.Visible && expressionObject.type !== exports.Expression.ExpressionType.Required && expressionObject.type !== exports.Expression.ExpressionType.Validate)) {
                        return false;
                    }
                    var result = _this.analysis(event, expressionObject);
                    if (!result) {
                        return false;
                    }
                    // 影响一个表达式是否要计算的因子有两个：表达式作用的字段、表达式的依赖
                    // 以下判断的前提时数据加载场景！！
                    // 1、表达式作用的字段
                    //    如果加载的数据对应的表就是表达式字段所在的表，应该计算
                    // 2、表达式依赖
                    //    如果表达式依赖的字段加载了，应该计算
                    //    如果表达式没有任何依赖，应该计算
                    if (result.isSameTable) {
                        return true;
                    }
                    // 如果没有依赖则应该计算，保证只读、必填、显隐、校验表达式结果正确
                    if (!expressionObject.deps || expressionObject.deps.length === 0) {
                        return true;
                    }
                    // 过滤出所有实体依赖
                    var deps = expressionObject.deps.filter(function (dep) { return dep.startsWith(ENTITY_TEMPLATE); });
                    // 未依赖实体，只依赖了uistate，那么绑定数据加载时不需要计算
                    if (!deps || deps.length < 1) {
                        return false;
                    }
                    // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表
                    // 1、计算事件表路径
                    var eventTablePath = _this.buildEntityPath(event.path).join('/');
                    // 2、获取依赖字段的表路径
                    var index = deps.findIndex(function (dep) {
                        // 去掉ENTITY~前缀
                        var depPath = dep.split('/').slice(1).join('/');
                        // 获取依赖字段所在的表路径
                        var path = _this.getPathInfo(depPath).path;
                        return path === eventTablePath;
                    });
                    return index !== -1;
                });
                return expressions;
            }
            else {
                return null;
            }
        };
        /**
         * 发布事件
         * @param event event
         */
        BindingDataLoadEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        /**
         * 获取子表事件行
         * @param paths
         * @param event
         * @returns
         */
        BindingDataLoadEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
            return this.getCurrentRowByPaths(paths);
        };
        BindingDataLoadEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return BindingDataLoadEventHandler;
    }(EventHandler));

    var BindingDataSelectionChangedEventHandler = /** @class */ (function (_super) {
        __extends(BindingDataSelectionChangedEventHandler, _super);
        function BindingDataSelectionChangedEventHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 过滤出需要计算的表达式
         * @param event event
         * @returns
         */
        BindingDataSelectionChangedEventHandler.prototype.filter = function (event) {
            var _this = this;
            if (this.expressionObjects && this.expressionObjects.length > 0) {
                return this.expressionObjects.filter(function (expressionObject) {
                    var deps = expressionObject.deps;
                    // 没有依赖的表达式不需要关注
                    if (!deps || deps.length < 1) {
                        return false;
                    }
                    // 不依赖实体的表达式不需要关注
                    var index = deps.findIndex(function (dep) { return dep.startsWith(ENTITY_TEMPLATE); });
                    if (index === -1) {
                        return false;
                    }
                    var result = _this.analysis(event, expressionObject);
                    if (!result) {
                        return false;
                    }
                    // 只关注从表行切换
                    if (result.eventTablePaths.length !== 1) {
                        return false;
                    }
                    // 只关注从从表表达式
                    if (result.expressionTablePaths.length !== 2) {
                        return false;
                    }
                    // 只关注事件直接下级的表达式，跨表的不需要关注
                    if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {
                        return false;
                    }
                    // 从从表表达式需要依赖上级表
                    index = deps.findIndex(function (dep) { return dep.startsWith(ENTITY_TEMPLATE + "/" + result.eventTablePaths[0]); });
                    if (index === -1) {
                        return false;
                    }
                    return true;
                });
            }
            return null;
        };
        BindingDataSelectionChangedEventHandler.prototype.dispatch = function (event) {
            var _this = this;
            var expressions = this.filter(event);
            if (expressions && expressions.length > 0) {
                expressions.forEach(function (expressionObject) {
                    var entityContext = _this.buildEntityContext(event, expressionObject);
                    var context = _this.buildContext(expressionObject, event, entityContext);
                    var result = _this.perform(expressionObject, context);
                    if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                        return;
                    }
                    expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                    if (expressionObject.id) {
                        _this.expressionResult.set(expressionObject.id, expressionObject.result);
                    }
                    _this.effect(event, expressionObject);
                });
            }
        };
        BindingDataSelectionChangedEventHandler.decorators = [
            { type: core.Injectable }
        ];
        return BindingDataSelectionChangedEventHandler;
    }(EventHandler));

    var EventHandlerRegistry = /** @class */ (function () {
        function EventHandlerRegistry(handlers) {
            this.handlers = handlers;
        }
        Object.defineProperty(EventHandlerRegistry.prototype, "entityValueChangedEventHandler", {
            /**
             * 实体值变化处理器
             */
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof EntityValueChangedEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "stateValueChangedEventHandler", {
            /**
             * 状态值变化处理器
             */
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof StateValueChangedEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "repositoryAddEntityEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof RepositoryAddEntityEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "repositoryRemoveEntityEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof RepositoryRemoveEntityEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "entityUpdateEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof EntityUpdateEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "repositoryLoadEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof RepositoryLoadEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "bindingDataAppendEntityEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof BindingDataAppendObjectEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "bindingDataValueChangeEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof BindingDataValueChangeEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "bindingDataRemoveObjectEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof BindingDataRemoveObjectEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "bindingDataLoadEventHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof BindingDataLoadEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventHandlerRegistry.prototype, "bindingDataSelectionChangedHandler", {
            get: function () {
                return this.handlers && this.handlers.find(function (handler) { return handler instanceof BindingDataSelectionChangedEventHandler; });
            },
            enumerable: true,
            configurable: true
        });
        EventHandlerRegistry.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EventHandlerRegistry.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [EVENT_HANDLER_TOKEN,] }] }
            ];
        };
        return EventHandlerRegistry;
    }());

    var ExpressionEngineImpl = /** @class */ (function () {
        function ExpressionEngineImpl(injector, expressionRegistry, expressionEventEmitter, resolverRegistry, eventHandlerRegistry, resolveService) {
            var _this = this;
            this.injector = injector;
            this.expressionRegistry = expressionRegistry;
            this.expressionEventEmitter = expressionEventEmitter;
            this.resolverRegistry = resolverRegistry;
            this.eventHandlerRegistry = eventHandlerRegistry;
            this.resolveService = resolveService;
            this.expressionObjects = new Array();
            this.expressionRegistry.expressions.subscribe(function (exprs) {
                if (exprs && exprs.length > 0) {
                    _this.expressionObjects = exprs;
                    // 解析表达式依赖
                    _this.resolveDependency();
                }
                _this.attachEvent();
            });
        }
        ExpressionEngineImpl.prototype.attachEvent = function () {
            var _this = this;
            this.expressionEventEmitter.attach().subscribe(function (events) {
                if (!events || events.length < 1 || !_this.expressionObjects || _this.expressionObjects.length < 1) {
                    return;
                }
                events.forEach(function (event) {
                    var handler = _this.getEventHandler(event);
                    if (handler) {
                        handler.handleEvent(event, _this.expressionObjects);
                    }
                    else {
                        Core.warn("\u6CA1\u6709\u5BF9\u5E94\u7684\u4E8B\u4EF6\u5904\u7406\u5668,event=" + event.type);
                    }
                });
            });
        };
        /**
         * 解析表达式依赖
         * @returns
         */
        ExpressionEngineImpl.prototype.resolveDependency = function () {
            var _this = this;
            if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {
                return;
            }
            this.expressionObjects.forEach(function (expressionObject) {
                var expression = expressionObject.expression;
                var dependencies = _this.resolveService.resolve(expression);
                expressionObject.deps = dependencies;
            });
        };
        /**
         * 获取表达式事件处理器
         * @param event event
         * @returns
         */
        ExpressionEngineImpl.prototype.getEventHandler = function (event) {
            if (event.type === exports.Expression.EventType.ValueChanged) {
                // 实体值变化
                if (event.source === exports.Expression.EventSource.BindingData) {
                    return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;
                }
                else if (event.source === exports.Expression.EventSource.Field) {
                    return this.eventHandlerRegistry.entityValueChangedEventHandler;
                }
                else if (event.source === exports.Expression.EventSource.State) {
                    return this.eventHandlerRegistry.stateValueChangedEventHandler;
                }
            }
            else if (event.type === exports.Expression.EventType.Append) {
                if (event.source === exports.Expression.EventSource.Repository || event.source === exports.Expression.EventSource.Field) {
                    return this.eventHandlerRegistry.repositoryAddEntityEventHandler;
                }
                else if (event.source === exports.Expression.EventSource.BindingData) {
                    return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;
                }
            }
            else if (event.type === exports.Expression.EventType.Remove) {
                if (event.source === exports.Expression.EventSource.Repository || event.source === exports.Expression.EventSource.Field) {
                    return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;
                }
                else if (event.source === exports.Expression.EventSource.BindingData) {
                    return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;
                }
            }
            else if (event.type === exports.Expression.EventType.Update) {
                if (event.source === exports.Expression.EventSource.Repository) {
                    return this.eventHandlerRegistry.entityUpdateEventHandler;
                }
            }
            else if (event.type === exports.Expression.EventType.Load) {
                if (event.source === exports.Expression.EventSource.Repository || event.source === exports.Expression.EventSource.Field) {
                    return this.eventHandlerRegistry.repositoryLoadEventHandler;
                }
                else if (event.source === exports.Expression.EventSource.BindingData) {
                    return this.eventHandlerRegistry.bindingDataLoadEventHandler;
                }
            }
            else if (event.type === exports.Expression.EventType.SelectionChanged) {
                if (event.source === exports.Expression.EventSource.BindingData) {
                    return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;
                }
            }
            return null;
        };
        ExpressionEngineImpl.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExpressionEngineImpl.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: ExpressionRegistry },
                { type: ExpressionEventEmitter },
                { type: ResolverRegistry },
                { type: EventHandlerRegistry },
                { type: ResolveService }
            ];
        };
        return ExpressionEngineImpl;
    }());

    /**
     * 组件实例管理
     */
    var ComponentRefManager = /** @class */ (function () {
        function ComponentRefManager() {
            this.components = new Map();
        }
        /**
         * 增加组件实例
         * @param id
         * @param component
         */
        ComponentRefManager.prototype.add = function (id, component) {
            var components = this.components.get(id);
            if (components) {
                components.push(component);
            }
            else {
                this.components.set(id, [component]);
            }
        };
        /**
         * 删除组件实例
         * @param id
         */
        ComponentRefManager.prototype.remove = function (id) {
            var components = this.components.get(id);
            if (components && components.length > 0) {
                components.length = 0;
                this.components.delete(id);
            }
        };
        /**
         * 通过id获取组件实例
         * @param id
         * @returns
         */
        ComponentRefManager.prototype.get = function (id) {
            if (id) {
                var components = this.components.get(id);
                if (components && components.length > 0) {
                    return components;
                }
            }
            return null;
        };
        /**
         * 是否包含id的组件
         * @param id
         * @returns
         */
        ComponentRefManager.prototype.has = function (id) {
            return this.components.has(id);
        };
        /**
         * 清空
         */
        ComponentRefManager.prototype.clear = function () {
            this.components.clear();
        };
        /**
         * 获取指定类型的组件
         * @param componentType
         * @returns
         */
        ComponentRefManager.prototype.getComponentByType = function (componentType) {
            var containers = Array.from(this.components.values());
            var component = null;
            for (var containerIndex = 0; containers && containerIndex < containers.length; containerIndex++) {
                var components = containers[containerIndex];
                for (var index = 0; components && index < components.length; index++) {
                    if (components[index] instanceof componentType) {
                        component = components[index];
                        break;
                    }
                }
            }
            return component;
        };
        return ComponentRefManager;
    }());

    /**
     * 组件上下文
     * @description
     * # 上下文
     * ## Overview
     *
     * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：
     *
     * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix_2110/farris/devkit/guide/images/image-20210806204755378.png)
     *
     * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。
     *
     * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：
     *
     * ```typescript
     * // 方法1
     * const rootFrameContext = this.frameContext.root;
     * // 方法2
     * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');
     * ```
     *
     * 通常在编写`Web构件`时先引入FrameContext，如：
     *
     * ```javascript
     * import {FrameContext,BindingData,Repository} from '@farris/devkit';
     *
     * constructor(private frameContext:FrameContext){}
     *
     * public method(){
     *     const bindingData: BindingData = this.frameContext.bindingData;
     *     const repository: Repository = this.frameContext.repository;
     * }
     * ```
     *
     * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。
     *
     * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：
     *
     * ```typescript
     * import {BindingData,Repository,ViewModel} from '@farris/devkit';
     *
     * constructor(private viewModel:ViewModel){}
     *
     * public method(){
     *     const bindingData: BindingData = this.viewModel.bindingData;
     *     const repository: Repository = this.viewModel.repository;
     * }
     * ```
     *
     *
     *
     * ## 常用操作
     *
     * ### 获取当前上下文所属的组件
     *
     * ```typescript
     * this.frameContext.frameComponent;
     * ```
     *
     * ### 获取当前上下文的根上下文
     *
     * ```typescript
     * this.frameContext.root;
     * ```
     *
     * ### 获取当前上下文的appContext
     *
     * ```typescript
     * this.frameContext.appContext;
     * ```
     *
     * ### 获取指定frameId的上下文
     *
     * ```typescript
     * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');
     * ```
     *
     * ### 获取表单所有上下文
     *
     * ```typescript
     * this.frameContext.appContext.frameContextManager.getFrameContexts();
     * ```
     *
     *
     *
     * ## 常用属性
     *
     * ### BindingData
     *
     * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))
     *
     * ### Repository
     *
     * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))
     *
     * ### ViewModel
     *
     * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。
     *
     * ### namespace
     *
     * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。
     *
     * ### root
     *
     * 获取整个表单的根上下文
     *
     * ### uiState
     *
     * 获取当前组件的变量
     *
     * ### frameId
     *
     * 上下文标识。
     */
    var FrameContext = /** @class */ (function (_super) {
        __extends(FrameContext, _super);
        /**
         * 构造函数
         * @param injector 注入器
         */
        function FrameContext(injector, parent) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.typeName = 'FrameContext';
            _this.isDestoried = false;
            _this.isDisposed = false;
            _this.metadata = {
                identify: '',
                namespace: '',
                commands: null,
                form: null,
                formControls: null,
                subForms: null,
                stateMachine: null,
                uiStates: null,
                bindingTo: ''
            };
            /**
             * 组件引用管理
             */
            _this.componentRefManager = new ComponentRefManager();
            /**
             * 启用后端变更检测
             */
            _this.enableServerSideChangeDetection = false;
            // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。
            _this.appContext = injector.get(AppContext);
            _this.destorySignal = new rxjs.Subject();
            // 确定父子关系
            // 必须对appContext进行判断，原因如下：
            // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；
            // 2、进而导致从RootFrameContext上拿VO变量拿不到。
            if (!parent || parent.appContext !== _this.appContext) { // 取消 appContext 的判断
                _this.parent = null;
                _this.root = _this;
            }
            else {
                _this.parent = parent;
                _this.root = parent.root;
            }
            _this.frameId = injector.get(FRAME_ID);
            if (_this.appContext.contextMetadataManager.exsit(_this.frameId)) {
                _this.metadata = _this.appContext.contextMetadataManager.getContextMetadataByName(_this.frameId);
            }
            _this.namespace = injector.get(NAMESPACE, null);
            _this.bindingData = _this.injector.get(BindingData, new BindingData());
            if (!_this.appContext.useIsoluteEventBus || (_this.appContext.useIsoluteEventBus && !_this.appContext.isoluteEventBus)) {
                _this.eventBus = _this.injector.get(EventBus, null, core.InjectFlags.Optional);
            }
            else {
                _this.eventBus = _this.appContext.isoluteEventBus;
            }
            _this.form = _this.injector.get(Form, new Form());
            _this.repository = _this.injector.get(Repository, _this.appContext.repository);
            // 获取变更集策略，默认只提交合法的变更
            var changeSetPolicy = _this.injector.get(CHANGE_SET_POLICY_TOKEN, 'valid');
            if (_this.repository) {
                _this.repository.entityCollection.changeSetPolicy = changeSetPolicy;
            }
            _this.enableServerSideChangeDetection = _this.injector.get(ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN, false);
            _this.uiState = _this.injector.get(UIState, new UIState());
            var defaultViewModel = new ViewModel();
            defaultViewModel.setMetadata(_this.metadata);
            _this.viewModel = _this.injector.get(ViewModel, defaultViewModel);
            _this.variableParseService = injector.get(VariableParseService, new VariableParseService([
                new FrameIdVariableParser(),
                new DataVariableParser(),
                new UIStateVariableParser(),
                new StateMachineVariableParser(),
                new CommandVariableParser()
            ]));
            // 注入exceptionHandler
            _this.exceptionHandler = injector.get(EXCEPTION_HANDLER, null, core.InjectFlags.Optional);
            // 初始化多语服务
            var translate = injector.get(TranslateToken, null);
            _this.translate = translate;
            TranslateService.setTranslate(translate);
            // 初始化用户配置
            var userSettings = injector.get(UserSettingsToken, null);
            UserSettingsService.setUserSettings(userSettings);
            _this.initializeRepository();
            _this.appContext.regFrameContext(_this);
            _this.registerAppContextDestroyEvent();
            return _this;
        }
        FrameContext.prototype.dispose = function (options) {
            var _this = this;
            if (this.isDisposed) {
                return;
            }
            this.isDestoried = true;
            this.isDisposed = true;
            if (this.destorySignal) {
                this.destorySignal.next();
                this.destorySignal.complete();
            }
            if (this.appContext) {
                this.appContext.frameContextManager.unregFrameContext(this);
                this.appContext.frameComponentRefresher.unregFrameContext(this);
            }
            if (this.appContext && this.isRootFrameContext() === true) {
                var viewModelNames = this['viewModelNames'];
                if (viewModelNames && Array.isArray(viewModelNames)) {
                    viewModelNames.forEach(function (name) {
                        _this[name] = null;
                    });
                }
                this.appContext.unregisterFromManager();
            }
            if (this.bindingData) {
                this.bindingData.dispose();
                // this.bindingData = null;
            }
            if (this.viewModel) {
                this.viewModel.dispose();
            }
            if (this.form) {
                this.form.dispose();
                this.form = null;
            }
            if (this.commandBus) {
                this.commandBus.dispose();
                this.commandBus = null;
            }
            TranslateService.dispose();
            // this.root = null;
            // this.parent = null;
            // this.uiState = null;
            this.frameComponent = null;
            this.repository = null;
            // this.stateMachine = null;
            // this.appContext = null;
            this.exceptionHandler = null;
            this.expressionManager = null;
            this.expressionEngineImpl = null;
            this.variableParseService = null;
            this.eventBus = null;
            this.translate = null;
            this.injector = null;
            this.expressionResult = null;
            UserSettingsService.setUserSettings(null);
        };
        FrameContext.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        /**
         * 通过组件标识获取对应的组件实例
         * @param id 组件标识
         * @returns
         */
        FrameContext.prototype.getComponentById = function (id) {
            var components = this.componentRefManager.get(id);
            if (components && components.length > 0) {
                var component = components[0];
                return component;
            }
            return null;
        };
        /**
         * 获取指定标识的所有组件
         * @param id 组件标识
         */
        FrameContext.prototype.getComponentsById = function (id) {
            return this.componentRefManager.get(id);
        };
        FrameContext.prototype.bindInjector = function (componentInjector) {
            this.injector = componentInjector;
        };
        // #region 初始化
        /**
         * 初始化
         * @todo:
         * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext
         * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。
         */
        FrameContext.prototype.init = function (frameComponent) {
            this.frameComponent = frameComponent;
            this.initializeBindingData();
            this.initializeStateMachine();
            this.initializeUiState();
            this.initializeForm();
            this.initializeCommandBus();
            this.initializeViewModel();
            this.registerExceptionHandler();
            this.initExpression();
            this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
        };
        FrameContext.prototype.initExpression = function () {
            this.expressionEngineImpl = this.injector.get(ExpressionEngineImpl, null);
            this.expressionManager = this.injector.get(ExpressionManager, null);
            var expressionResultFactory = this.injector.get(ExpressionResultFactory, null);
            this.expressionResult = this.injector.get(ExpressionResult, null);
        };
        /**
         * 订阅异常消息
         */
        FrameContext.prototype.registerExceptionHandler = function () {
            var _this = this;
            // tslint:disable: no-string-literal
            var formAppContext = this.getFormAppContext();
            var applicationId = formAppContext.ApplicationId;
            window[window.location.href] = applicationId;
            if (this.exceptionHandler !== null) {
                var applicationContext = window[applicationId] = window[applicationId] || {};
                if (this.eventBus !== null && this.isRootFrameContext()) {
                    applicationContext.isExceptionHandlerExist = true;
                    this.exceptionHandler.setContext(this.appContext);
                    this.eventBus.on('Exception', '', 'onException', formAppContext, function (error) {
                        if (_this.isDestoried === true) {
                            return;
                        }
                        if (error && error.error) {
                            try {
                                error.error.__frame_context__ = _this;
                            }
                            catch (_a) { }
                        }
                        _this.exceptionHandler.handle(error);
                    });
                }
                this.destorySignal.subscribe(function () {
                    _this.eventBus.off('Exception', '', 'onException', formAppContext);
                });
            }
        };
        FrameContext.prototype.registerAppContextDestroyEvent = function () {
            var _this = this;
            if (this.appContext && this.appContext.destorySignal) {
                this.appContext.destorySignal.subscribe(function (options) {
                    if (_this.stateMachine) {
                        // 仅当菜单关闭时销毁
                        if (!(options && options.opportunity === exports.DestroyOpportunity.AppContextDestroy)) {
                            _this.stateMachine.dispose();
                            _this.stateMachine = null;
                        }
                    }
                    if (_this.repository) {
                        _this.repository.dispose();
                    }
                });
            }
        };
        /**
         * 获取表单appcontext，即最上层appcontext
         */
        FrameContext.prototype.getFormAppContext = function () {
            return this.appContext;
        };
        /**
         * 获取frameId
         * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId
         */
        FrameContext.prototype.getFrameId = function (relativeFrameId) {
            if (!relativeFrameId) {
                return this.frameId;
            }
            if (this.namespace && this.namespace.length > 0) {
                return this.namespace + "_" + relativeFrameId;
            }
            else {
                return relativeFrameId;
            }
        };
        /**
         * 初始化Repository
         */
        FrameContext.prototype.initializeRepository = function () {
            this.repository.setPaginationConfig(this.repository.paginationInfo);
        };
        FrameContext.prototype.initializeForm = function () {
            // 设置Form语言服务
            // this.form.setTranslateService(translateService);
            // 初始化Form，提取FormControl定义，添加FormControl
            // this.form.init(this.bindingData, this.metadata.bindingTo, this);
            // Form
            this.form = this.injector.get(Form, null);
            if (this.form) {
                // 设置Form语言服务
                this.form.setTranslateService(this.injector.get(TranslateToken, null));
                // 初始化Form，提取FormControl定义，添加FormControl
                var bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;
                this.form.init(this.bindingData, bindingPath, this);
            }
        };
        FrameContext.prototype.initializeStateMachine = function () {
            // StateMachine 状态机需要在绑定数据之后加载
            this.stateMachine = this.injector.get(StateMachine, null);
            if (this.stateMachine) {
                this.stateMachine.initialize(this, this.variableParseService);
            }
        };
        FrameContext.prototype.initializeCommandBus = function () {
            var handlerRegistry = this.injector.get(CommandHandlerRegistry, new CommandHandlerRegistry(this.metadata.commandHandlers));
            var extendsRegistry = this.injector.get(CommandHandlerExtenderRegistry, new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));
            var commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);
            this.commandBus = new CommandBus(commandHandlerFactory);
        };
        /**
         * 初始化ViewModel
         * @todo
         * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；
         * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；
         */
        FrameContext.prototype.initializeViewModel = function () {
            if (!this.metadata.bindingTo) {
                this.metadata.bindingTo = this.viewModel.bindingPath;
            }
            this.viewModel.init(this);
            this.regViewModel(this.viewModel);
        };
        /**
         * 初始化BindingData
         * @summary
         * 老表单：repositoryName为空，复制当前Repository里的数据；
         * 新表单：repositoryName有值，引用全局BindingData里的数据；
         */
        FrameContext.prototype.initializeBindingData = function () {
            var _this = this;
            var repositoryName = this.repository.name;
            var isRunAtHighSpeedMode = this.appContext.runMode === exports.RunMode.highSpeed;
            if (repositoryName && isRunAtHighSpeedMode) {
                var repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);
                this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);
                this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;
                this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);
                EntityUtil.watchReposiroty(this.repository, this.bindingData);
            }
            else {
                this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);
                EntityUtil.watchReposiroty(this.repository, this.bindingData);
                this.bindingData.changes.subscribe(function (change) {
                    if (change.type === exports.ChangeType.GlobalSelectionChanged) {
                        _this.appContext.handleSelectChange(change, _this);
                    }
                });
            }
        };
        /**
         * 初始化UIState
         * 合并路由参数到UIState中
         */
        FrameContext.prototype.initializeUiState = function () {
            var _this = this;
            var isInFramework = window.location.href.indexOf('platform') > -1;
            var paramTypeTransform = this.injector.get(PARAM_TYPE_TRANSFORM_TOKEN, false);
            // 获取UIState
            this.uiState = this.injector.get(UIState, null);
            if (!this.uiState) {
                return;
            }
            this.uiState.paramTypeTransform = paramTypeTransform;
            this.uiState.initialize(this);
            // 获取路由参数
            var url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';
            var routerParamService = new RouterParamService();
            var routerParams = routerParamService.getParams(url);
            // 在UIState为路由参数创建属性
            Object.keys(routerParams).forEach(function (propName) {
                Object.defineProperty(_this.uiState, propName, {
                    get: function () {
                        return routerParams[propName];
                    }
                });
            });
        };
        /**
         * 注册子ViewModel
         * @todo
         * 1、propName写死了
         */
        FrameContext.prototype.regViewModel = function (viewModel) {
            if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {
                this.appContext.viewModelManager.register(viewModel.name, viewModel);
            }
            var className = viewModel.constructor.name;
            var parentContext = this.parent;
            var parentViewModel = null;
            if (parentContext && parentContext.viewModel) {
                parentViewModel = parentContext.viewModel;
            }
            if (!parentViewModel) {
                return;
            }
            // 优先使用生成器生成的name
            var childViewModels = parentViewModel['childViewModels'];
            var viewModelName = null;
            if (childViewModels) {
                var name_1 = viewModel.constructor.name;
                viewModelName = childViewModels[viewModel.name] || childViewModels[name_1];
            }
            else if (className.length === 1) {
                var classNameTokens = viewModel.name.split('-').map(function (nameToken, index) {
                    if (index > 0 && nameToken.length) {
                        var pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);
                        return pasicalName;
                    }
                    else if (index === 0 && nameToken.length) {
                        var camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);
                        return camelName;
                    }
                    return nameToken;
                });
                viewModelName = classNameTokens.join('');
            }
            else if (viewModel["relateChildName"]) {
                // 增加该参数的目的  是为了解析表单可以进行和生成型相同的层级结构
                viewModelName = viewModel["relateChildName"];
            }
            // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则
            if (!viewModelName) {
                viewModelName = className[0].toLowerCase() + className.substring(1, className.length);
            }
            parentViewModel['viewModelNames'] = parentViewModel['viewModelNames'] || [];
            parentViewModel[viewModelName] = viewModel;
            parentViewModel['viewModelNames'].push(viewModelName);
            viewModel.bindToParent(parentViewModel);
        };
        // #endregion
        /**
         * 检查是否为根FrameContext
         * @summary
         * 检查该FrameContext是不是所在AppContext中的根FrameContext
         */
        FrameContext.prototype.isRootFrameContext = function () {
            return this.parent === null || (this.appContext.runMode === exports.RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);
        };
        /**
         * 通过namespace获取当前表单的root-framecontext(非整个表单)
         * @description
         * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext
         */
        FrameContext.prototype.getVirtualRootFrameContext = function () {
            var formFrameContext = this;
            var parent = this.parent;
            while (parent) {
                // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext
                if (parent.namespace === this.namespace) {
                    formFrameContext = parent;
                    parent = parent.parent;
                }
                else {
                    break;
                }
            }
            return formFrameContext;
        };
        FrameContext.prototype.getContextById = function (identify) {
            return this.appContext.getContextById(identify);
        };
        FrameContext.prototype.getViewModel = function (viewModelName) {
            var renderAppContext = this.appContext;
            if (renderAppContext) {
                return renderAppContext.viewModelManager.getViewModelByName(viewModelName);
            }
            return null;
        };
        FrameContext.prototype.attachViewComponent = function (viewComponent) {
            this.frameComponent = viewComponent;
            this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
        };
        FrameContext.prototype.invoke = function (actionPath, $event) {
            var actionBindingPath = actionPath.split('.');
            var actionName = actionBindingPath[actionBindingPath.length - 1];
            var bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :
                this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);
            if (!bindingViewModel) {
                alert("\u672A\u5339\u914D\u5230'" + actionPath + "'\u547D\u4EE4\u7684\u89C6\u56FE\u6A21\u578B\uFF0C\u8BF7\u68C0\u67E5\u4E8B\u4EF6\u662F\u5426\u914D\u7F6E\u6B63\u786E\u3002");
            }
            return bindingViewModel[actionName]($event);
        };
        FrameContext.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FrameContext.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: FrameContext, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
            ];
        };
        return FrameContext;
    }(Context));

    /*
     * @Author: Witt
     * @Date: 2019-03-12 14:59:22
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-06-15 17:26:07
     */
    var FrameComponent = /** @class */ (function () {
        /**
         * 框架构造函数
         * @param injector 注入器
         */
        function FrameComponent(injector) {
            this.injector = injector;
            this.initialized = false;
            this.context = this.injector.get(FrameContext, null);
            if (this.context) {
                this.initialize();
            }
            this.destorySignal = new rxjs.Subject();
            // this.context.init(this);
            // this.viewModel = this.context.viewModel;
            // this.cd = this.getChangeDetectorRef();
            // // 必须先执行context的初始化，然后再初始化Subscription
            // this.initPublicEvent();
            // this.initSubscription();
            // this.restComponent();
        }
        Object.defineProperty(FrameComponent.prototype, "isGridComponent", {
            /**
             * 是否为表格组件
             * @description 返回true/false时可以信任，但如果返回的是undefined则不应信任
             * @warning 该属性依赖了生成代码，如果非标准的生成型工程也会导致判断失败。
             */
            get: function () {
                if (this.context && this.context.viewModel) {
                    var dataGridColumnsName = this.context.viewModel['dataGridColumnsName'] || null;
                    return dataGridColumnsName ? true : false;
                }
                return undefined;
            },
            enumerable: true,
            configurable: true
        });
        FrameComponent.prototype.dispose = function (options) {
            var _this = this;
            if (this.eventPipes) {
                this.eventPipes.forEach(function (eventPipe) {
                    eventPipe.disposeByCaller(_this);
                });
            }
            this.cd = null;
            // this.viewModel = null;
            this.context.dispose();
            if (this.destorySignal) {
                this.destorySignal.next();
                this.destorySignal.complete();
            }
        };
        FrameComponent.prototype.ngOnInit = function () {
            this.initialize();
        };
        FrameComponent.prototype.initialize = function () {
            if (!this.initialized) {
                this.context.init(this);
                this.viewModel = this.context.viewModel;
                this.cd = this.getChangeDetectorRef();
                // 必须先执行context的初始化，然后再初始化Subscription
                this.initPublicEvent();
                this.initSubscription();
                this.restComponent();
                this.onFrameComponentInit();
                this.initialized = true;
            }
        };
        /**
         * 执行组件初始化
         */
        FrameComponent.prototype.onFrameComponentInit = function () {
            var _this = this;
            var frameComponentInitHandlers = this.injector.get(FRAME_COMPONENT_INIT_HANDLER_TOKEN, null);
            if (frameComponentInitHandlers && Array.isArray(frameComponentInitHandlers) && frameComponentInitHandlers.length > 0) {
                frameComponentInitHandlers.forEach(function (handler) {
                    handler.onComponentInit(_this.context);
                });
            }
        };
        /**
         * 获取变更检测器实例
         * @todo：应该通过注入获取，但注入会引起表单编译。
         */
        FrameComponent.prototype.getChangeDetectorRef = function () {
            // const cd = this.get<ChangeDetectorRef>(ChangeDetectorRef, null, InjectFlags.Optional);
            var cd = this.injector.get(core.ChangeDetectorRef, null);
            return cd;
        };
        /**
         * 将当前组件脱离变更检测树
         */
        FrameComponent.prototype.detach = function () {
            if (this.isCdValid() === false) {
                return;
            }
            this.cd.detach();
        };
        /**
         * 将当前组件重新加入变更检测树
         */
        FrameComponent.prototype.reattach = function () {
            if (this.isCdValid() === false) {
                return;
            }
            this.cd.reattach();
        };
        /**
         * 对当前组件进行一次变更检查
         */
        FrameComponent.prototype.detectChanges = function () {
            if (this.isCdValid() === false) {
                return;
            }
            this.cd.detectChanges();
        };
        /**
         * 检测ChangeDetection是否有效
         * @todo: Can't be depend on the destroyed property, destroyed.
         */
        FrameComponent.prototype.isCdValid = function () {
            return this.cd && this.cd['destroyed'] === false || false;
        };
        /**
         * 重置组件状态
         * @todo：AppContext是全局的，
         */
        FrameComponent.prototype.restComponent = function () {
            if (this.context !== this.context.root) {
                return;
            }
            // 1、如果AppContext不是root并且父AppContext也不是root不清理;
            // 2、表单Module里注入了FARRIS_DEVKIT_APP_PROVIDERS里面有一个冗余的AppContext注入
            //    导致所有AppContext的根是该冗余的AppContext，所以要检测parent.parent。
            // 只清理根组件的session
            if (this.context.appContext.parent !== null && this.context.appContext.parent.parent !== null) {
                return;
            }
            // Repository被注册到全局了，模块依赖注入中的对象，没有重置时机，临时在根组件中进行注销。
            // @todo：应该清理全部repository，目前缺少全局管理所有Repository的地方。
            this.context.repository.reset();
            // 重置组件绑定数据
            this.context.bindingData.reset();
        };
        FrameComponent.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        /**
         * 初始化事件订阅
         */
        FrameComponent.prototype.initSubscription = function () {
            this.subscription = this.getSubscription();
            if (!this.subscription) {
                return;
            }
            this.eventPipes = this.subscription.init(this);
        };
        /**
         * 获取component对应的订阅
         * @returns
         */
        FrameComponent.prototype.getSubscription = function () {
            return this.injector.get(Subscription, null);
        };
        FrameComponent.prototype.initPublicEvent = function () {
            this.declaration = this.getDeclaration();
            if (!this.declaration) {
                return;
            }
            this.declaration.init(this);
        };
        /**
         * 获取当前component对应的declaration
         * @returns
         */
        FrameComponent.prototype.getDeclaration = function () {
            return this.injector.get(Declaration, null);
        };
        /**
         * 事件触发器，触发事件发布
         * @param eventName 待发布事件
         */
        FrameComponent.prototype.trigger = function (eventName, params) {
            var _this = this;
            var subscription = this.context.commandBus.executingCommandCount$.subscribe(function (executingCommandCount) {
                if (executingCommandCount !== 0) {
                    return;
                }
                _this.innerTrigger(eventName, params);
                // @todo
                // subscription存在未undefine的情况，待进一步排查。
                if (subscription) {
                    subscription.unsubscribe();
                }
                else {
                    setTimeout(function () {
                        if (subscription) {
                            subscription.unsubscribe();
                        }
                    }, 0);
                }
            });
        };
        /**
         * 内部触发变更检测
         */
        FrameComponent.prototype.innerTrigger = function (eventName, params) {
            // 根据事件名，查找对应的事件处理器
            var eventHandler = this.declaration && this.declaration[eventName];
            if (!eventHandler) {
                return;
            }
            // 执行事件
            eventHandler(params);
        };
        FrameComponent.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FrameComponent.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return FrameComponent;
    }());

    /**
     * 上下文事件
     */
    var FrameEvent = /** @class */ (function () {
        function FrameEvent() {
        }
        return FrameEvent;
    }());

    /**
     * 框架事件总线
     */
    var FrameEventBus = /** @class */ (function () {
        function FrameEventBus() {
            /**
             * 事件流
             */
            this.events = new rxjs.Subject();
        }
        /**
         * 注册事件处理
         */
        FrameEventBus.prototype.on = function (eventType, eventHandler, frameId) {
            this.events.pipe(operators.filter(function (event) {
                if (event.type !== eventType) {
                    return false;
                }
                return !event.frameIds || event.frameIds.indexOf(frameId) > -1;
            })).subscribe(eventHandler);
        };
        /**
         * 取消事件处理
         */
        FrameEventBus.prototype.off = function (eventType, frameId) {
            throw new Error('暂不实现');
        };
        /**
         * 触发事件
         */
        FrameEventBus.prototype.trigger = function (eventType, eventData, frameIds) {
            var event = {
                type: eventType,
                data: eventData,
                frameIds: frameIds
            };
            this.events.next(event);
        };
        FrameEventBus.decorators = [
            { type: core.Injectable }
        ];
        return FrameEventBus;
    }());

    /**
     * 命令处理器工厂相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * 命令处理器工厂
     */
    var CommandHandlerFactory = /** @class */ (function () {
        /**
         * 构造函数
         * @param handlerRegistry  命令处理注册器
         * @param extenderRegistry 命令处理扩展注册器
         */
        function CommandHandlerFactory(handlerRegistry, extenderRegistry, frameContext, variableParseService) {
            this.handlerRegistry = handlerRegistry;
            this.extenderRegistry = extenderRegistry;
            this.frameContext = frameContext;
            this.variableParseService = variableParseService;
        }
        /**
         * 创建命令处理器
         * @param   commandName 命令名称
         * @returns 对应的命令处理器实例
         */
        CommandHandlerFactory.prototype.create = function (commandName) {
            var rawHandler = this.handlerRegistry.get(commandName);
            rawHandler.init(this.frameContext, this.variableParseService);
            var extenders = this.extenderRegistry.get(commandName);
            // 遍历extenders，依次对handler进行扩展
            return extenders.reduce(function (handler, extender) {
                return extender.extend(handler);
            }, rawHandler);
        };
        CommandHandlerFactory.prototype.dispose = function () {
            this.handlerRegistry.dispose();
            this.extenderRegistry.dispose();
            this.frameContext = null;
            this.variableParseService = null;
        };
        CommandHandlerFactory.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommandHandlerFactory.ctorParameters = function () {
            return [
                { type: CommandHandlerRegistry },
                { type: CommandHandlerExtenderRegistry },
                { type: FrameContext },
                { type: VariableParseService }
            ];
        };
        return CommandHandlerFactory;
    }());

    /**
     * CommandBus相关定义
     * @author Witt<jiwt@inspur.com>
     */
    /**
     * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
     */
    var CommandBus = /** @class */ (function () {
        /**
         * 构造函数
         */
        function CommandBus(handlerFactory) {
            this.handlerFactory = handlerFactory;
            this.executingCommands = [];
            this.executingCommandCount$ = new rxjs.BehaviorSubject(this.executingCommands.length);
        }
        /**
         * 派发命令
         * @param command 要派发的命令
         */
        CommandBus.prototype.dispatch = function (command) {
            var _this = this;
            var commandResult$ = new rxjs.Subject();
            this.executeCommand(command).subscribe({
                next: function (lastTaskResult) {
                    commandResult$.next(lastTaskResult);
                    commandResult$.complete();
                },
                complete: function () {
                    commandResult$.complete();
                    _this.removeCommandFromExecutingQueue(command);
                },
                error: function (error) {
                    commandResult$.error(error);
                    _this.removeCommandFromExecutingQueue(command, !_this.is401Error(error));
                }
            });
            return commandResult$;
        };
        /**
         * dispose
         */
        CommandBus.prototype.dispose = function () {
            this.handlerFactory.dispose();
        };
        /**
         * 执行命令并返回最后一个任务的执行结果流
         */
        CommandBus.prototype.executeCommand = function (command) {
            this.addCommandToExecutingQueue(command);
            var commandName = command.name;
            var handler = this.handlerFactory.create(commandName);
            var lastTaskResult$ = handler.execute(command);
            return lastTaskResult$;
        };
        /**
         * 添加到执行队列
         */
        CommandBus.prototype.addCommandToExecutingQueue = function (command) {
            this.executingCommands.push(command);
            this.executingCommandCount$.next(this.executingCommands.length);
        };
        /**
         * 从执行队列中移除
         */
        CommandBus.prototype.removeCommandFromExecutingQueue = function (command, postOrNot) {
            if (postOrNot === void 0) {
                postOrNot = true;
            }
            this.executingCommands = this.executingCommands.filter(function (executingCommand) {
                return executingCommand !== command;
            });
            if (postOrNot === true) {
                this.executingCommandCount$.next(this.executingCommands.length);
            }
        };
        CommandBus.prototype.is401Error = function (error) {
            // 如果error为空，不认为是401错误
            return error && error.status === 401;
        };
        CommandBus.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommandBus.ctorParameters = function () {
            return [
                { type: CommandHandlerFactory }
            ];
        };
        return CommandBus;
    }());

    var COMMAND_PROVIDERS = [
        CommandHandlerRegistry,
        CommandHandlerExtenderRegistry,
        CommandHandlerFactory,
        CommandBus,
    ];

    /**
     * @Injectable()
     * @NgCommandHandler({
     *     commandName: 'add1'
     * })
     * export class add1Handler extends CommandHandler {
     *     constructor(
     *         public _ListDataService1: ListDataService1,
     *         public _StateMachineService1: StateMachineService1
     *     ) {
     *         super();
     *     }
     *
     *     schedule() {
     *         this.addTask('append', (context: CommandContext) => {
     *             const args = [];
     *             return this.invoke(this._ListDataService1, 'append', args, context);
     *         });
     *
     *         this.addTask('transit', (context: CommandContext) => {
     *             const args = [
     *                 'Create'
     *                     ];
     *             return this.invoke(this._StateMachineService1, 'transit', args, context);
     *         });
     *
     *         this.addLink('append', 'transit', `1==1`);
     *     }
     * }
     */
    var controllerMap = {
        imports: {}
    };
    var DynamicCommandHandler = /** @class */ (function (_super) {
        __extends(DynamicCommandHandler, _super);
        function DynamicCommandHandler(commandName, method) {
            var _this = _super.call(this) || this;
            _this.commandName = commandName;
            _this.method = method;
            return _this;
        }
        DynamicCommandHandler.prototype.dynamicInvoke = function (serviceTocken, method, args, context) {
            var serviceInstance = context.frameContext.injector.get(serviceTocken, null);
            if (serviceInstance) {
                this.setContextToServiceInstance(serviceInstance, context);
                var parsedStageParams = this.parseService.parse(args, context);
                var parsedArgs = parsedStageParams.map(function (param) { return param.expression; });
                // tslint:disable-next-line: ban-types
                var serviceMethod = serviceInstance[method];
                return serviceMethod.apply(serviceInstance, parsedArgs);
            }
        };
        DynamicCommandHandler.prototype.dynamicInvoke2 = function (methodObject, context) {
            var _this = this;
            var serviceUri = methodObject.source, serviceName = methodObject.service, method = methodObject.method;
            var args = methodObject.params.map(function (stageParam) {
                return Object.assign({}, stageParam);
            });
            var result$ = new rxjs.Subject();
            var serviceSpecifer = serviceUri && serviceUri.toLowerCase();
            if (serviceSpecifer) {
                var serviceModule_1 = controllerMap.imports[serviceSpecifer];
                if (serviceModule_1) {
                    // 表示缓存中存在
                    setTimeout(function () {
                        _this.executeWithServiceModule(serviceModule_1, serviceName, context, args, method, result$);
                    }, 0);
                }
                else {
                    //  表示不存在
                    System.import(serviceSpecifer)
                        .then(function (serviceModule) {
                        if (serviceModule) {
                            controllerMap.imports[serviceSpecifer] = serviceModule;
                        }
                        _this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);
                    });
                }
            }
            return result$;
        };
        DynamicCommandHandler.prototype.executeWithServiceModule = function (serviceModule, serviceName, context, args, method, result$) {
            var serviceConstructor = serviceModule[serviceName];
            if (serviceConstructor) {
                var originalContextInjector_1 = context.frameContext.injector;
                var serviceInstance = void 0;
                // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);
                if (context.frameContext.injector.get(serviceName, null)) {
                    serviceInstance = context.frameContext.injector.get(serviceName);
                }
                else {
                    var resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);
                    var reflectiveInjector = core.ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);
                    context.frameContext.injector = reflectiveInjector;
                    serviceInstance = reflectiveInjector.get(serviceName, null);
                }
                if (serviceInstance) {
                    this.setContextToServiceInstance(serviceInstance, context);
                    var parsedStageParams = this.parseService.parse(args, context);
                    var parsedArgs = parsedStageParams.map(function (param) { return param.expression; });
                    // tslint:disable-next-line: ban-types
                    var serviceMethod = serviceInstance[method];
                    if (!serviceMethod) {
                        console.error("未找到对应的命令:" + method);
                        return;
                    }
                    var serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);
                    var result$$ = rxjs.isObservable(serviceMethodResult) ? serviceMethodResult : rxjs.of(serviceMethodResult);
                    result$$.subscribe({
                        next: function (result) {
                            result$.next(result);
                        },
                        error: function (error) {
                            result$.error(error);
                        },
                        complete: function () {
                            result$.complete();
                            context.frameContext.injector = originalContextInjector_1;
                        },
                    });
                    // return serviceMethod.apply(serviceInstance, parsedArgs);
                }
            }
        };
        DynamicCommandHandler.prototype.schedule = function () {
            this.scheduleStages(this.method.stages, null);
            // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {
            //   if (currentStage.type === '0') {
            //     this.addTask(currentStage.name, (context: CommandContext) => {
            //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);
            //     });
            //     if (preStage) {
            //       this.addLink(preStage.name, currentStage.name, `1===1`);
            //     }
            //   } else if (currentStage.type === '2') {
            //   } else {
            //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);
            //   }
            //   return currentStage;
            // }, null);
        };
        DynamicCommandHandler.prototype.scheduleStages = function (stages, initialStage) {
            var _this = this;
            stages.reduce(function (preStage, currentStage) {
                if (currentStage.type === 'executing') {
                    _this.addTask(currentStage.name, function (context) {
                        return _this.dynamicInvoke2(currentStage, context);
                    });
                }
                else if (currentStage.type === 'fork') {
                    var forkStages = currentStage.stages;
                    forkStages.forEach(function (forkStage) {
                        _this.scheduleStages(forkStage.stages, forkStage);
                    });
                    _this.scheduleStages(currentStage.stages, currentStage);
                }
                else if (currentStage.type === 'determing') {
                    _this.addTask(currentStage.name, function (context) {
                        return rxjs.of(true);
                    });
                }
                else {
                    throw new Error("unknow method stage type, the " + currentStage.name + "'s type is " + currentStage.type);
                }
                if (preStage) {
                    var condition = preStage.type === 'determing' ? preStage.condition : "1===1";
                    _this.addLink(preStage.name, currentStage.name, condition);
                }
                return currentStage;
            }, initialStage);
        };
        DynamicCommandHandler.prototype.loadProvidersFromModule = function (serviceModule) {
            var providerArray = [];
            for (var propertyName in serviceModule) {
                if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {
                    var propertyValue = serviceModule[propertyName];
                    if (this.isInjectableService(propertyValue)) {
                        // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;
                        var providerName = propertyName;
                        providerArray.push({ provide: providerName, useClass: propertyValue });
                        providerArray.push(propertyValue);
                    }
                }
            }
            var resolvedReflectiveProviders = core.ReflectiveInjector.resolve(providerArray);
            return resolvedReflectiveProviders;
        };
        DynamicCommandHandler.prototype.isInjectableService = function (propertyValue) {
            var hasInjectableDecorator = false;
            var isFunction = propertyValue instanceof Function;
            if (isFunction && propertyValue.hasOwnProperty('decorators')) {
                var decorators = propertyValue.decorators;
                var injectableDecorators = decorators.filter(function (decorator) {
                    if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {
                        return decorator;
                    }
                });
                hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
            }
            else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {
                var decorators = propertyValue.__annotations__;
                var injectableDecorators = decorators.filter(function (decoratorFactory) {
                    if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {
                        return decoratorFactory;
                    }
                });
                hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
            }
            return hasInjectableDecorator;
        };
        return DynamicCommandHandler;
    }(CommandHandler));

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-30 11:08:18
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-06-01 17:10:04
     */
    var VALIDATION_HANDLER = new core.InjectionToken('@farris/common-service ValidationHandler');

    // --------------------------------------------------------------------------------
    // Legacy
    // --------------------------------------------------------------------------------
    /**
     * Providers for compatibility.
     */
    var FARRIS_DEVKIT_APP_PROVIDERS = [
        EventBus,
        Subscription,
        RestfulService,
        VARIABLE_PROVIDERS,
        AppContext,
        RouterParamService,
        FrameEventBus,
        AppContextManager
    ];
    // --------------------------------------------------------------------------------
    // Current
    // --------------------------------------------------------------------------------
    /**
     * Providers for DevkitModule.
     */
    var FARRIS_DEVKIT_MODULE_PROVIDERS = [
        EventBus,
        Subscription,
        RestfulService,
        RouterParamService,
        VARIABLE_PROVIDERS,
        AppContextManager,
    ];
    /**
     * Providers for root frame components.
     */
    var FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS = [
        AppContext,
    ];
    /**
     * 表达式provider
     * @description 放置到root-component，整个表单只需要注入一次
     */
    var FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS = [
        ListenerRegistry,
        Listeners,
        EffectorRegistry,
        EffectorFactory,
        ExpressionRegistry,
        ExpressionEventEmitter,
        ExpressionExecutor,
        ExpressionManager,
        ExpressionResult,
        ExpressionResultFactory,
        { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true },
        { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true },
        { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true },
        ResolverRegistry,
        { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true },
        { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true },
        EventHandlerRegistry,
        ExpressionEngineImpl,
        ResolveService
    ];
    /**
     * 表达式监听器provider
     * @description 放置到每个表单的root上，组合表单root也需要放置
     */
    var FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS = [
        { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true },
        { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true },
        { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true }
    ];
    var FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS = [
        { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: RelativeEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true },
        { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true }
    ];
    /**
     * Providers for frame components.
     */
    var FARRIS_DEVKIT_FRAME_PROVIDERS = [
        COMMAND_PROVIDERS,
        FrameContext
    ];

    /**
     * DevkitModule
     */
    var DevkitModule = /** @class */ (function () {
        function DevkitModule() {
        }
        DevkitModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: FARRIS_DEVKIT_MODULE_PROVIDERS
                    },] }
        ];
        return DevkitModule;
    }());

    /**
     * 监听bindingList变更
     * @description 主要用于监听行切换等事件
     * @deprecated 已废弃
     */
    var DeprecatedBindingDataChangeListener = /** @class */ (function (_super) {
        __extends(DeprecatedBindingDataChangeListener, _super);
        function DeprecatedBindingDataChangeListener(injector, bindingData, namespace) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.bindingData = bindingData;
            _this.namespace = namespace;
            return _this;
        }
        DeprecatedBindingDataChangeListener.prototype.buildEventPath = function (change) {
            return null;
        };
        DeprecatedBindingDataChangeListener.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DeprecatedBindingDataChangeListener.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: BindingData },
                { type: undefined, decorators: [{ type: core.Inject, args: [NAMESPACE,] }] }
            ];
        };
        return DeprecatedBindingDataChangeListener;
    }(ChangeListener));

    (function (CacheReturnType) {
        CacheReturnType[CacheReturnType["Static"] = 1] = "Static";
        CacheReturnType[CacheReturnType["Promise"] = 2] = "Promise";
    })(exports.CacheReturnType || (exports.CacheReturnType = {}));
    var CacheKeyCompare = /** @class */ (function () {
        function CacheKeyCompare() {
        }
        CacheKeyCompare.prototype.compare = function (key1, key2) {
            return key1 === key2;
        };
        return CacheKeyCompare;
    }());

    var CacheObject = /** @class */ (function () {
        function CacheObject(key, content, ttl) {
            this.key = key;
            this.content = content;
            this.ttl = ttl;
            this.createAt = new Date();
        }
        CacheObject.prototype.isExpired = function () {
            if (typeof this.ttl === 'number') {
                return Date.now().valueOf() > this.createAt.valueOf() + this.ttl;
            }
            else {
                return Date.now() > this.ttl.valueOf();
            }
        };
        return CacheObject;
    }());

    /**
     * 缓存方法返回值
     * @param options ICacheOptions 缓存选项
     * @returns MethodDecorator
     */
    function Cacheable(options) {
        return function (target, propertyKey, descriptor) {
            if (descriptor === undefined) {
                descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);
            }
            var className = target.name || target && target.constructor && target.constructor.name;
            var method = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var ttl = options && options.ttl || 0;
                var provider = options && options.provider;
                if (!provider) {
                    throw new Error('cache provider is not defined.');
                }
                var key = options && options.key || undefined;
                if (key && key instanceof Function) {
                    key = key(this, args);
                }
                var cacheKey = key;
                if (!cacheKey) {
                    var argsString = JSON.stringify(args);
                    cacheKey = className + "#" + String(propertyKey) + "#" + argsString;
                }
                var cacheObject = provider.get(cacheKey);
                if (!cacheObject || (ttl && cacheObject.isExpired() === true)) {
                    var result = method.apply(this, args);
                    var object = new CacheObject(cacheKey, result, ttl);
                    provider.set(object);
                    return result;
                }
                return cacheObject && cacheObject.content;
            };
            return descriptor;
        };
    }

    var CacheContainer = /** @class */ (function () {
        function CacheContainer(provider) {
            this.provider = provider;
            this.provider = provider;
        }
        CacheContainer.prototype.get = function (key) {
            var cacheObject = this.provider.get(key);
            if (!cacheObject) {
                return undefined;
            }
            var isExpired = this.isCacheObjectExpired(cacheObject);
            return isExpired ? undefined : cacheObject.content;
        };
        CacheContainer.prototype.set = function (key, value, ttl) {
            var cacheObject = new CacheObject(key, value, ttl || 0);
            this.provider.set(cacheObject);
        };
        CacheContainer.prototype.isCacheObjectExpired = function (cacheObject) {
            if (typeof cacheObject.ttl === 'number') {
                return Date.now().valueOf() > cacheObject.createAt.valueOf() + cacheObject.ttl;
            }
            else {
                return Date.now() > cacheObject.ttl.valueOf();
            }
        };
        return CacheContainer;
    }());

    var MemoryCacheProvider = /** @class */ (function () {
        function MemoryCacheProvider(cacheKeyCompare) {
            this.store = new Array();
            this.cacheKeyCompare = cacheKeyCompare || new CacheKeyCompare();
        }
        MemoryCacheProvider.prototype.has = function (key) {
            var _this = this;
            if (this.store.length < 1) {
                return false;
            }
            var index = this.store.findIndex(function (item) { return item && _this.cacheKeyCompare.compare(key, item.key); });
            return index !== -1;
        };
        MemoryCacheProvider.prototype.length = function () {
            return this.store.length;
        };
        MemoryCacheProvider.prototype.set = function (value) {
            this.store.push(value);
        };
        MemoryCacheProvider.prototype.get = function (key) {
            var _this = this;
            if (this.store.length < 1) {
                return undefined;
            }
            return this.store.find(function (item) { return _this.cacheKeyCompare.compare(key, item.key); });
        };
        MemoryCacheProvider.prototype.delete = function (key) {
            var _this = this;
            if (this.store.length < 1) {
                return;
            }
            var index = this.store.findIndex(function (item) { return item && _this.cacheKeyCompare.compare(key, item.key); });
            this.store.splice(index, 1);
        };
        MemoryCacheProvider.prototype.clear = function () {
            this.store.length = 0;
        };
        MemoryCacheProvider.prototype.keys = function () {
            return this.store.keys();
        };
        MemoryCacheProvider.prototype.values = function () {
            return this.store.values();
        };
        return MemoryCacheProvider;
    }());

    /**
     * 默认缓存
     * @description
     * 默认缓存使用Map作为缓存容器，存储速度快。但不支持自定义的key对比，对于简单类型的key使用值对比，对于引用类型的key，对比的是引用的地址。
     */
    var DefaultCacheProvider = /** @class */ (function () {
        function DefaultCacheProvider() {
            this.buffer = new Map();
        }
        DefaultCacheProvider.prototype.has = function (key) {
            return this.buffer.has(key);
        };
        DefaultCacheProvider.prototype.length = function () {
            return this.buffer.size;
        };
        DefaultCacheProvider.prototype.set = function (value) {
            this.buffer.set(value.key, value);
        };
        DefaultCacheProvider.prototype.get = function (key) {
            return this.buffer.get(key);
        };
        DefaultCacheProvider.prototype.delete = function (key) {
            this.buffer.delete(key);
        };
        DefaultCacheProvider.prototype.clear = function () {
            this.buffer.clear();
        };
        DefaultCacheProvider.prototype.keys = function () {
            return this.buffer.keys();
        };
        DefaultCacheProvider.prototype.values = function () {
            return this.buffer.values();
        };
        return DefaultCacheProvider;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ɵb = exports.Expression;
    exports.ɵc = ChangeListener;
    exports.ɵe = DeprecatedBindingDataChangeListener;
    exports.ɵa = FormStateVariableParser;
    exports.ANNOTATIONS = ANNOTATIONS;
    exports.PARAMETERS = PARAMETERS;
    exports.PROP_METADATA = PROP_METADATA;
    exports.makeDecorator = makeDecorator;
    exports.makeParamDecorator = makeParamDecorator;
    exports.makePropDecorator = makePropDecorator;
    exports.MetadataUtil = MetadataUtil;
    exports.ChangeSet = ChangeSet;
    exports.Modification = Modification;
    exports.Entity = Entity;
    exports.DynamicEntity = DynamicEntity;
    exports.createEntity = createEntity;
    exports.createEntities = createEntities;
    exports.EntityFactory = EntityFactory$1;
    exports.EntityList = EntityList;
    exports.NG_FIELD = NG_FIELD;
    exports.NgField = NgField;
    exports.NG_LIST = NG_LIST;
    exports.NgList = NgList;
    exports.NG_OBJECT = NG_OBJECT;
    exports.NgObject = NgObject;
    exports.NG_Dynamic = NG_Dynamic;
    exports.NgDynamic = NgDynamic;
    exports.NG_ENTITY = NG_ENTITY;
    exports.NgEntity = NgEntity;
    exports.FieldMetadataUtil = FieldMetadataUtil;
    exports.EntityMetadataUtil = EntityMetadataUtil;
    exports.PARENT_PATH = PARENT_PATH;
    exports.PARENT_CLASS = PARENT_CLASS;
    exports.ENTITY_DATA_SERVICE_TOKEN = ENTITY_DATA_SERVICE_TOKEN;
    exports.ValidationTypes = ValidationTypes;
    exports.Validator = Validator;
    exports.ValidationError = ValidationError;
    exports.entityPrototype = entityPrototype;
    exports.EntityTypeFactory = EntityTypeFactory;
    exports.EntityTypeCreator = EntityTypeCreator;
    exports.RestfulService = RestfulService;
    exports.NG_REPOSITORY = NG_REPOSITORY;
    exports.NgRepository = NgRepository;
    exports.EntityCollection = EntityCollection;
    exports.EntityManager = EntityManager;
    exports.Repository = Repository;
    exports.DefaultRepository = DefaultRepository;
    exports.SortConditionManager = SortConditionManager;
    exports.FilterConditionManager = FilterConditionManager;
    exports.BigNumberType = BigNumberType;
    exports.DEVKIT_RUN_MODE = DEVKIT_RUN_MODE;
    exports.DataPathNode = DataPathNode;
    exports.DataPath = DataPath;
    exports.DataPathCreator = DataPathCreator$$1;
    exports.DataPropInfo = DataPropInfo;
    exports.DataTypeInfo = DataTypeInfo;
    exports.FORM_PATH_TOKEN = FORM_PATH_TOKEN;
    exports.BACK_END_MESSAGE_HANDLER_TOKEN = BACK_END_MESSAGE_HANDLER_TOKEN;
    exports.MESSAGE_SERVICE_TOKEN = MESSAGE_SERVICE_TOKEN;
    exports.NOTIFY_SERVICE_TOKEN = NOTIFY_SERVICE_TOKEN;
    exports.CHANGE_SET_POLICY_TOKEN = CHANGE_SET_POLICY_TOKEN;
    exports.ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN = ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN;
    exports.ENABLE_EDIT_STATE_FILTER_SORTING = ENABLE_EDIT_STATE_FILTER_SORTING;
    exports.encodeUrl = encodeUrl;
    exports.Core = Core;
    exports.escape = escape;
    exports.NG_COMMAND_HANDLER = NG_COMMAND_HANDLER;
    exports.NgCommandHandler = NgCommandHandler;
    exports.NG_COMMAND_HANDLER_EXTENDER = NG_COMMAND_HANDLER_EXTENDER;
    exports.NgCommandHandlerExtender = NgCommandHandlerExtender;
    exports.TaskNode = TaskNode;
    exports.TaskLink = TaskLink;
    exports.TaskFlow = TaskFlow;
    exports.CommandContext = CommandContext;
    exports.CommandHandler = CommandHandler;
    exports.COMMAND_HANDLERS_TOKEN = COMMAND_HANDLERS_TOKEN;
    exports.CommandHandlerRegistry = CommandHandlerRegistry;
    exports.CommandHandlerExtender = CommandHandlerExtender;
    exports.COMMAND_HANDLER_EXTENDERS_TOKEN = COMMAND_HANDLER_EXTENDERS_TOKEN;
    exports.CommandHandlerExtenderRegistry = CommandHandlerExtenderRegistry;
    exports.CommandHandlerFactory = CommandHandlerFactory;
    exports.CommandBus = CommandBus;
    exports.COMMAND_PROVIDERS = COMMAND_PROVIDERS;
    exports.DynamicCommandHandler = DynamicCommandHandler;
    exports.BaseBindingObject = BaseBindingObject;
    exports.BindingObject = BindingObject;
    exports.BindingList = BindingList;
    exports.BindingData = BindingData;
    exports.PropertyUtil = PropertyUtil;
    exports.EntityUtil = EntityUtil;
    exports.BindingListFactory = BindingListFactory;
    exports.BindingObjectFactory = BindingObjectFactory;
    exports.BindingDataFactory = BindingDataFactory;
    exports.NG_BINDING_DATA = NG_BINDING_DATA;
    exports.NgBindingData = NgBindingData;
    exports.BindingObjectTypeFactory = BindingObjectTypeFactory;
    exports.BindingListTypeFactory = BindingListTypeFactory;
    exports.Form = Form;
    exports.NG_VALIDATE_FORM = NG_VALIDATE_FORM;
    exports.NgValidateForm = NgValidateForm;
    exports.NG_CHILD_FORM = NG_CHILD_FORM;
    exports.NgChildForm = NgChildForm;
    exports.NG_CHILD_FORM_ARRAY = NG_CHILD_FORM_ARRAY;
    exports.NgChildFormArray = NgChildFormArray;
    exports.NG_FORM_CONTROL = NG_FORM_CONTROL;
    exports.NgFormControl = NgFormControl;
    exports.State = State;
    exports.initialUIState = initialUIState;
    exports.StateMachineContext = StateMachineContext;
    exports.effectHandlers = effectHandlers;
    exports.StateMachine = StateMachine;
    exports.NgState = NgState;
    exports.NgRenderState = NgRenderState;
    exports.NgAction = NgAction;
    exports.UIState = UIState;
    exports.NG_COMPONENT_STATE = NG_COMPONENT_STATE;
    exports.NgParam = NgParam;
    exports.UIStateMetadataUtil = UIStateMetadataUtil;
    exports.PARAM_TYPE_TRANSFORM_TOKEN = PARAM_TYPE_TRANSFORM_TOKEN;
    exports.EventBus = EventBus;
    exports.EventCache = EventCache;
    exports.EventBusProxy = EventBusProxy;
    exports.EventPipe = EventPipe;
    exports.NG_DECLARATION = NG_DECLARATION;
    exports.NgDeclaration = NgDeclaration;
    exports.Declaration = Declaration;
    exports.NG_SUBSCRIPTION = NG_SUBSCRIPTION;
    exports.ParamMap = ParamMap;
    exports.NgSubscription = NgSubscription;
    exports.getNgSubscriptionDecoratorFactory = getNgSubscriptionDecoratorFactory;
    exports.Subscription = Subscription;
    exports.ViewModel = ViewModel;
    exports.NG_COMMAND = NG_COMMAND;
    exports.NgCommand = NgCommand;
    exports.Context = Context;
    exports.BindingDataManager = BindingDataManager;
    exports.RepositoryManager = RepositoryManager;
    exports.FrameContextManager = FrameContextManager;
    exports.FrameComponentRefresher = FrameComponentRefresher;
    exports.AppContext = AppContext;
    exports.AppContextManager = AppContextManager;
    exports.ViewModelManager = ViewModelManager;
    exports.FORM_ID = FORM_ID;
    exports.EXCEPTION_HANDLER = EXCEPTION_HANDLER;
    exports.VALIDATION_HANDLER = VALIDATION_HANDLER;
    exports.VARIABLE_PARSERS = VARIABLE_PARSERS;
    exports.FrameIdVariableParser = FrameIdVariableParser;
    exports.DataVariableParser = DataVariableParser;
    exports.UIStateVariableParser = UIStateVariableParser;
    exports.CommandVariableParser = CommandVariableParser;
    exports.StateMachineVariableParser = StateMachineVariableParser;
    exports.VariableParseService = VariableParseService;
    exports.EventParamVariableParser = EventParamVariableParser;
    exports.VARIABLE_PROVIDERS = VARIABLE_PROVIDERS;
    exports.FrameContext = FrameContext;
    exports.FrameComponent = FrameComponent;
    exports.FrameEvent = FrameEvent;
    exports.FrameEventBus = FrameEventBus;
    exports.FRAME_ID = FRAME_ID;
    exports.NAMESPACE = NAMESPACE;
    exports.FRAME_COMPONENT_INIT_HANDLER_TOKEN = FRAME_COMPONENT_INIT_HANDLER_TOKEN;
    exports.RouterParamService = RouterParamService;
    exports.DataPathUtil = DataPathUtil;
    exports.UID = UID;
    exports.Guid = Guid;
    exports.RunModeService = RunModeService;
    exports.DateUtil = DateUtil;
    exports.BindingPathConverter = BindingPathConverter;
    exports.BindingPathComparer = BindingPathComparer;
    exports.BindingPathTraverser = BindingPathTraverser;
    exports.EntityPathConverter = EntityPathConverter;
    exports.EntityPathComparer = EntityPathComparer;
    exports.FormPathConverter = FormPathConverter;
    exports.ExpressionUtil = ExpressionUtil;
    exports.DataTypeInfoUtil = DataTypeInfoUtil;
    exports.FARRIS_DEVKIT_APP_PROVIDERS = FARRIS_DEVKIT_APP_PROVIDERS;
    exports.FARRIS_DEVKIT_MODULE_PROVIDERS = FARRIS_DEVKIT_MODULE_PROVIDERS;
    exports.FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS = FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS;
    exports.FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS = FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS;
    exports.FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS = FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS;
    exports.FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS = FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS;
    exports.FARRIS_DEVKIT_FRAME_PROVIDERS = FARRIS_DEVKIT_FRAME_PROVIDERS;
    exports.DevkitModule = DevkitModule;
    exports.TranslateToken = TranslateToken;
    exports.UserSettingsToken = UserSettingsToken;
    exports.ZonedTime = ZonedTime;
    exports.Schema = Schema;
    exports.SchemaEntity = SchemaEntity;
    exports.SchemaEntityType = SchemaEntityType;
    exports.SchemaEntityField = SchemaEntityField;
    exports.SchemaEntityFieldType = SchemaEntityFieldType;
    exports.SchemaEntityFieldEditor = SchemaEntityFieldEditor;
    exports.DomService = DomService;
    exports.FormContent = FormContent;
    exports.FormContentForDB = FormContentForDB;
    exports.FormMetadaDataDom = FormMetadaDataDom;
    exports.FormModule = FormModule;
    exports.FormOptions = FormOptions;
    exports.LISTENER_TOKEN = LISTENER_TOKEN;
    exports.UIStateChangeListener = UIStateChangeListener;
    exports.RepositoryChangeListener = RepositoryChangeListener;
    exports.ListenerRegistry = ListenerRegistry;
    exports.BindingDataChangeListener = BindingDataChangeListener;
    exports.Listeners = Listeners;
    exports.FORM_MANIFEST_SERVICE_TOKEN = FORM_MANIFEST_SERVICE_TOKEN;
    exports.FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN;
    exports.ExpressionEventEmitter = ExpressionEventEmitter;
    exports.ExpressionRegistry = ExpressionRegistry;
    exports.ExpressionExecutor = ExpressionExecutor;
    exports.ExpressionEngineImpl = ExpressionEngineImpl;
    exports.ExpressionManager = ExpressionManager;
    exports.ExpressionResult = ExpressionResult;
    exports.ExpressionResultFactory = ExpressionResultFactory;
    exports.ASSIGNER_TOKEN = ASSIGNER_TOKEN;
    exports.EVENT_HANDLER_TOKEN = EVENT_HANDLER_TOKEN;
    exports.EFFECTOR_TOKEN = EFFECTOR_TOKEN;
    exports.RepositoryEffector = RepositoryEffector;
    exports.UIStateEffector = UIStateEffector;
    exports.ReadonlyEffector = ReadonlyEffector;
    exports.DependencyEffector = DependencyEffector;
    exports.EffectorRegistry = EffectorRegistry;
    exports.EffectorFactory = EffectorFactory;
    exports.RelativeEffector = RelativeEffector;
    exports.ValidateEffector = ValidateEffector;
    exports.RequiredEffector = RequiredEffector;
    exports.VisibleEffector = VisibleEffector;
    exports.RESOLVER_TOKEN = RESOLVER_TOKEN;
    exports.ENTITY_TEMPLATE = ENTITY_TEMPLATE;
    exports.STATE_TEMPLATE = STATE_TEMPLATE;
    exports.GROUP_FUNCTIONS = GROUP_FUNCTIONS;
    exports.ResolverRegistry = ResolverRegistry;
    exports.EntityDependencyResolver = EntityDependencyResolver;
    exports.StateDependencyResolver = StateDependencyResolver;
    exports.CommentDependencyResolver = CommentDependencyResolver;
    exports.ResolveService = ResolveService;
    exports.EntityValueChangedEventHandler = EntityValueChangedEventHandler;
    exports.StateValueChangedEventHandler = StateValueChangedEventHandler;
    exports.RepositoryAddEntityEventHandler = RepositoryAddEntityEventHandler;
    exports.RepositoryRemoveEntityEventHandler = RepositoryRemoveEntityEventHandler;
    exports.RepositoryLoadEventHandler = RepositoryLoadEventHandler;
    exports.EntityUpdateEventHandler = EntityUpdateEventHandler;
    exports.BindingDataAppendObjectEventHandler = BindingDataAppendObjectEventHandler;
    exports.BindingDataValueChangeEventHandler = BindingDataValueChangeEventHandler;
    exports.BindingDataRemoveObjectEventHandler = BindingDataRemoveObjectEventHandler;
    exports.BindingDataLoadEventHandler = BindingDataLoadEventHandler;
    exports.BindingDataSelectionChangedEventHandler = BindingDataSelectionChangedEventHandler;
    exports.EventHandlerRegistry = EventHandlerRegistry;
    exports.EventHandler = EventHandler;
    exports.CacheKeyCompare = CacheKeyCompare;
    exports.Cacheable = Cacheable;
    exports.CacheContainer = CacheContainer;
    exports.CacheObject = CacheObject;
    exports.MemoryCacheProvider = MemoryCacheProvider;
    exports.DefaultCacheProvider = DefaultCacheProvider;
    exports.DataFilter = DataFilter;
    exports.LeftBracket = LeftBracket;
    exports.RighttBracket = RighttBracket;
    exports.ArrayFilterConditionDataFilter = ArrayFilterConditionDataFilter;
    exports.ObjectFilterConditionDataFilter = ObjectFilterConditionDataFilter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-devkit.umd.js.map