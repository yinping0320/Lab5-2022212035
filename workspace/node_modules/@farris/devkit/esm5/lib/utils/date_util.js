import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';
/**
 * 日期处理类
 */
var DateUtil = /** @class */ (function () {
    function DateUtil() {
    }
    /**
     * 将日期（或日期字符串）转换为完整的的ISO格式的字符串
     */
    DateUtil.formatISO = function (dateOrDateString) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        var dateObj = this.parse(dateOrDateString);
        return format(dateObj, this.defaultISOFormat);
    };
    /**
     * 将日期（或日期字符串）转换为指定格式的字符串
     * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
     * @param dateFormat 日期格式字符串
     */
    DateUtil.format = function (dateOrDateString, dateFormat) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        var dateObj = this.parse(dateOrDateString);
        dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;
        return format(dateObj, dateFormat);
    };
    /**
     * 创建日期
     * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
     */
    DateUtil.parse = function (dateOrDateString) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return null;
        }
        if (this.isDate(dateOrDateString) === true) {
            return dateOrDateString;
        }
        return parseISO(dateOrDateString);
    };
    /**
     * 是否是日期对象
     */
    DateUtil.isDate = function (date) {
        return isDate(date);
    };
    /**
     * 是否是空日期或者空日期字符串
     * @param dateOrDateString 日期或日期字符串
     */
    DateUtil.isEmptyDateOrDateString = function (dateOrDateString) {
        if (this.isDate(dateOrDateString) === true) {
            return this.isEmptyDate(dateOrDateString);
        }
        return this.isEmptyDateString(dateOrDateString);
    };
    /**
     * 是否为空日期字符串
     * @param date 日期对象
     */
    DateUtil.isEmptyDate = function (date) {
        if (!date) {
            return true;
        }
        return false;
    };
    /**
     * 是否是空日期字符串
     * @param dateString 日期字符串
     */
    DateUtil.isEmptyDateString = function (dateString) {
        if (!dateString || dateString.startsWith('0001-01-01') === true) {
            return true;
        }
        return false;
    };
    /**
     * 两个日期是否相等
     * @param dateOrDateString1 日期对象或字符串
     * @param dateOrDateString1 日期对象或字符串
     * @return 相等返回true，否则返回false
     */
    DateUtil.isEqual = function (dateOrDateString1, dateOrDateString2) {
        var dateObj1 = this.parse(dateOrDateString1);
        var dateObj2 = this.parse(dateOrDateString2);
        if (dateObj1 === dateObj2) {
            return true;
        }
        return isEqual(dateObj1, dateObj2);
    };
    /**
     * 两个日期是否相等
     * @param dateOrDateString1 日期对象或字符串
     * @param dateOrDateString1 日期对象或字符串
     * @return 返回-1、0、1
     */
    DateUtil.compare = function (dateOrDateString1, dateOrDateString2) {
        var dateObj1 = this.parse(dateOrDateString1);
        var dateObj2 = this.parse(dateOrDateString2);
        if (this.isEqual(dateObj1, dateObj2) === true) {
            return 0;
        }
        // 处理解析后为null的场景，null比所有有效日期小
        if (!dateObj1 && this.isDate(dateObj2) === true) {
            return -1;
        }
        if (!dateObj2 && this.isDate(dateObj1) === true) {
            return 1;
        }
        return compareAsc(dateObj1, dateObj2);
    };
    /**
     * 空日期字符串（N版）
     * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除
     */
    // static emptyDateTimeString = '0001-01-01T00:00:00';
    DateUtil.emptyDateTimeString = null;
    /**
     * 默认空日期字符串（ISO标准格式）
     */
    // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';
    DateUtil.emptyISODateTimeString = null;
    /**
     * 默认日期听格式
     */
    DateUtil.defaultISOFormat = "yyyy-MM-dd'T'HH:mm:ssxxx";
    DateUtil.defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';
    DateUtil.defaultDateFormat = 'yyyy-MM-dd';
    DateUtil.defaultTimeFormat = 'HH:mm:ss';
    return DateUtil;
}());
export { DateUtil };
//# sourceMappingURL=data:application/json;base64,