import * as tslib_1 from "tslib";
import { DataPropGroup } from '../core/index';
import { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from '../resolver/index';
var ExpressionUtil = /** @class */ (function () {
    function ExpressionUtil() {
    }
    ExpressionUtil.getGroupFunctionDependency = function (expr, entityTypeInfo) {
        var _this = this;
        var deps = [];
        // 获取聚合函数依赖项
        var groupFunctionRegex = new RegExp("DefaultFunction\\.(" + GROUP_FUNCTIONS.join('|') + ")\\s*\\([^\\r\\n\\)]*\\)", 'g');
        var groupFunctions = expr.match(groupFunctionRegex);
        if (groupFunctions && groupFunctions.length > 0) {
            // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析
            var argumentsRegex_1 = /\(([^\r\n\)]*)\)/;
            var methodNameRegex_1 = /DefaultFunction\.(\S*)\(/;
            groupFunctions.forEach(function (groupFunction) {
                var argumentMatchResult = groupFunction.match(argumentsRegex_1);
                var methodNameMatchResult = groupFunction.match(methodNameRegex_1);
                var methodName = null;
                if (methodNameMatchResult && methodNameMatchResult.length == 2) {
                    methodName = methodNameMatchResult[1];
                }
                if (argumentMatchResult.length === 2) {
                    var argument = argumentMatchResult[1];
                    var args = argument.split(',').map(function (p) { return p.replace(/\"/g, ''); });
                    if (args && args.length === 2) {
                        var item = args.join('.');
                        item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                        // 移除主表code
                        item = item.substr(item.indexOf('.') + 1);
                        var dep = item.split('.');
                        dep.splice(0, 0, ENTITY_TEMPLATE);
                        deps.push(dep.join('/'));
                    }
                    else if (args && args.length === 3) {
                        if (methodName === 'MultiplyChildNumber') {
                            // support MultiplyChildNumber
                            // [Entity.childrens,prop1,prop2]
                            var prefix = args[0]; // like Entity.childrens
                            // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                            var prop1FullPath = prefix + "." + args[1];
                            var prop2FullPath = prefix + "." + args[2];
                            [prop1FullPath, prop2FullPath].forEach(function (item) {
                                item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                                item = item.substr(item.indexOf('.') + 1);
                                var dep = item.split('.');
                                dep.splice(0, 0, ENTITY_TEMPLATE);
                                deps.push(dep.join('/'));
                            });
                        }
                        else if (methodName === 'IsContainMatch' || methodName === 'SortChildData') {
                            // [Entity.childrens,prop1,prop2]
                            var prefix = args[0]; // like Entity.childrens
                            // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                            var item = prefix + "." + args[1];
                            item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                            item = item.substr(item.indexOf('.') + 1);
                            var dep = item.split('.');
                            dep.splice(0, 0, ENTITY_TEMPLATE);
                            deps.push(dep.join('/'));
                        }
                    }
                    else if (args && args.length === 4) {
                    }
                    else if (args && args.length === 5) {
                        if (['MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'].includes(methodName)) {
                            // [Entity.childrens,prop1,prop2]
                            var prefix = args[0]; // like Entity.childrens
                            // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                            var prop1FullPath = prefix + "." + args[1];
                            var prop2FullPath = prefix + "." + args[2];
                            [prop1FullPath, prop2FullPath].forEach(function (item) {
                                item = _this.convertToNodeCode(item, entityTypeInfo).join('.');
                                item = item.substr(item.indexOf('.') + 1);
                                var dep = item.split('.');
                                dep.splice(0, 0, ENTITY_TEMPLATE);
                                deps.push(dep.join('/'));
                            });
                        }
                    }
                    else {
                        throw new Error("\u65E0\u6CD5\u89E3\u6790\u53C2\u6570\uFF1A " + JSON.stringify(argument));
                    }
                }
            });
        }
        return deps;
    };
    /**
     * 将voCode转换为前端nodeCode
     * @param entityExpression like Entity.Child.p1
     * @returns
     */
    ExpressionUtil.convertToNodeCode = function (entityExpression, entityTypeInfo) {
        // UserEntity.storys.p1
        var nodeCodes = [];
        if (entityTypeInfo && entityExpression.includes('.')) {
            var entityExpressions = entityExpression.split('.') || [];
            var dataTypeInfo = entityTypeInfo;
            for (var index = 0; index < entityExpressions.length; index++) {
                var prop = entityExpressions[index];
                if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {
                    // 第一个是主表code，不能转nodeCode
                    if (index === 0) {
                        nodeCodes.push(dataTypeInfo.entityInfo.originalCode);
                    }
                    else {
                        nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);
                    }
                    // 下一级可能为子表、对象或属性
                    var nextNodeCode = entityExpressions[index + 1];
                    if (!nextNodeCode) {
                        break;
                    }
                    var nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);
                    if (!nextNodeCodePropInfo) {
                        break;
                    }
                    // 下一级为子表或对象
                    if (nextNodeCodePropInfo.typeInfo) {
                        dataTypeInfo = nextNodeCodePropInfo.typeInfo;
                    }
                }
                else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {
                    var dataPropInfo = dataTypeInfo.getPropInfoByName(prop);
                    nodeCodes.push(dataPropInfo.name);
                }
                else {
                    // throw new Error(`错误的属性参数 ${entityExpression}`);
                    break;
                }
            }
        }
        return nodeCodes;
    };
    /**
     * 找到元数据中所有实体路径
     * @param dataTypeInfo
     * @param results
     * @param paths
     */
    ExpressionUtil.getChildrenEntityPaths = function (dataTypeInfo, results, paths) {
        var _this = this;
        if (paths === void 0) { paths = []; }
        var list = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach(function (dataPropInfo) {
                if (paths.length === 0) {
                    results.push([dataPropInfo.name]);
                }
                var childrens = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);
                if (childrens && childrens.length > 0) {
                    paths.push(dataPropInfo.name);
                    childrens.forEach(function (dataPropInfo) {
                        _this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);
                    });
                }
                else {
                    if (paths.length !== 0) {
                        paths.push(dataPropInfo.name);
                        results.push(tslib_1.__spread(paths));
                    }
                    paths.length = 0;
                }
            });
        }
        else {
            if (paths.length > 0) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
                results.push(tslib_1.__spread(paths));
            }
            paths.length = 0;
        }
    };
    /**
     * 获取指定绑定路径的当前行数据
     * @param paths 绑定路径
     * @param bindingData
     * @returns
     */
    ExpressionUtil.getCurrentRowByPaths = function (paths, bindingData) {
        var result = null;
        var bindingList = bindingData.getValue(paths);
        if (bindingList && bindingList.length > 0) {
            var primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            // 主表或下级表新增，此时事件行就是当前行，无需处理
            if (primaryValue) {
                var bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    };
    /**
     * 从实体路径中获取级数最大的从表或从从表
     * @param paths
     * @returns
     */
    ExpressionUtil.getAvailableChildrenPathsFromEntityPaths = function (paths, entityTypeInfo) {
        var nodeCodes = [];
        paths = tslib_1.__spread(paths);
        while (paths.length > 0) {
            var dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
            if (dataPropInfo && dataPropInfo.group === 'List') {
                nodeCodes = paths;
                break;
            }
            paths.pop();
        }
        return nodeCodes;
    };
    /**
     * 从路径中获取绑定路径
     * @param paths 路径
     * @param entityTypeInfo entityTypeInfo
     * @returns
     */
    ExpressionUtil.getBindingPath = function (paths, entityTypeInfo) {
        paths = this.getEntityPath(paths);
        var entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);
        return entityPaths;
    };
    ExpressionUtil.getEntityPath = function (path) {
        var paths = path.filter(function (value, index) {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    };
    return ExpressionUtil;
}());
export { ExpressionUtil };
//# sourceMappingURL=data:application/json;base64,