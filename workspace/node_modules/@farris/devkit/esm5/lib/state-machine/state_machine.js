import { BehaviorSubject } from 'rxjs';
import { MetadataUtil } from '../metadata/index';
import { StateMachineContext } from './context';
import { State, initialUIState } from './types';
import { StateMachineEvent } from './state_machine_event';
/**
 * 预置界面效果处理
 */
export var effectHandlers = {
    /**
     * 预置状态迁移处理
     */
    transit: {
        /**
         * 执行状态迁移
         * @param stateMachine  状态机对象
         * @param stateName     下一状态的名称
         * @param preconditions 迁移条件
         */
        // tslint:disable-next-line: only-arrow-functions
        perform: function (statemachine, stateName, preconditons) {
            if (preconditons === void 0) { preconditons = []; }
            var nextState = statemachine.states[stateName];
            statemachine.context.transitTo(nextState.name);
            statemachine.render();
        }
    }
};
/**
 * 状态机
 *
 * ### 基本概念
 * 状态机中有三个重要的概念：
 * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；
 * - 控件状态（RenderState）：控制具体控件的状态；
 * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。
 *
 * ### 定义状态机
 *
 * **基本步骤**
 *
 * - 继承StateMachine基类，并添加NgStatemachine注解；
 * - 定义页面状态、控件状态、迁移动作。
 *
 * **状态机中的注解**
 *
 * - NgStatemachine：将类标记为状态机，并进行扩展；
 * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；
 * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，
 *   一般情况下是通过对页面状态进行逻辑运算来确定。
 * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。
 *
 * ```ts
 * @Injectable()
 * @NgStatemachine()
 * class SimpleStateMachine extends StateMachine {
 *
 *   // 查看状态，设置为初始状态
 *   @NgState({ initialState: true })
 *   viewState: State;
 *
 *   // 编辑状态
 *   @NgState()
 *   editState: State;
 *
 *   // 编辑按钮是否允许点击
 *   @NgRenderState({
 *     render: (context) => context.state === 'viewState'
 *   })
 *   canEdit: RenderState;
 *
 *   // 保存按钮是否允许点击
 *   @NgRenderState({
 *     render: (context) => context.state === 'editState'
 *   })
 *   canSave: RenderState;
 *
 *   // 输入控件是否允许输入
 *   @NgRenderState({
 *     render: (context) => context.state === 'editState'
 *   })
 *   canInput: RenderState;
 *
 *   // 迁移到编辑状态
 *   @NgAction({ transitTo: 'editState' })
 *   edit: Action;
 *
 *   // 迁移到查看状态
 *   @NgAction({ transitTo: 'viewState' })
 *   view: Action;
 * }
 * ```
 * 在上边的代码中做了如下定义：
 * - 两个页面状态：查看状态、编辑状态，
 * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，
 * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。
 *
 *
 * ### 在模板中使用状态机
 *
 * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。
 *
 * ```html
 * <button type="button" [disabled]="!viewModel.stateMachine.canEdit">编辑</button>
 * <button type="button" [disabled]="!viewModel.stateMachine.canSave">保存</button>
 * <input id="code" [disabled]="!viewModel.stateMachine.canInput" />
 * <input id="name" [disabled]="!viewModel.stateMachine.canInput" />
 * ```
 *
 * ### 执行状态迁移
 * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。
 * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。
 * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：
 * ```ts
 * @Injectable()
 * @NgCommandHandler({
 *   commandName: 'save'
 * })
 * class SaveHandler extends CommandHandler {
 *
 *   schedule() {
 *     this.addTask('save', () => {
 *       // 实现保存
 *     });
 *
 *     // 状态迁移
 *     this.addTask('transitState', ) => {
 *       this.stateMachine['view']();
 *     });
 *   }
 * }
 * ```
 */
var StateMachine = /** @class */ (function () {
    /**
     * 构造函数
     */
    function StateMachine() {
        var _this = this;
        this.isStateInited = false;
        this.isDisposed = false;
        var propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
        // 遍历所有属性装饰器，并调用相应的build方法
        if (propsMetadatas) {
            Object.keys(propsMetadatas).forEach(function (propName) {
                var propMetadatas = propsMetadatas[propName];
                propMetadatas.forEach(function (propMetadata) {
                    _this['build' + propMetadata.ngMetadataName](propName, propMetadata);
                });
            });
        }
        // if (!this.initialState) {
        //   throw new Error('请在NgState注解中指定状态机的初始状态。');
        // }
        this.stateChange = new BehaviorSubject(false);
        this.context = new StateMachineContext(this);
        this.stateMachineEvent = new StateMachineEvent(this);
    }
    StateMachine.prototype.dispose = function (options) {
        this.isDisposed = true;
        this.frameContext = null;
        this.appContext = null;
        this.context = null;
        this.stateMachineEvent = null;
        this.metadatas = null;
    };
    StateMachine.prototype.ngOnDestroy = function () {
        this.dispose();
    };
    // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。
    StateMachine.prototype.initialize = function (frameContext, variableParseService) {
        this.appContext = frameContext.appContext;
        this.frameContext = frameContext;
        var stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();
        this.metadatas = stateMachineMetadata;
        this.buildStateMachine(stateMachineMetadata);
        // if (!this.initialState) {
        //   throw new Error('请在NgState注解中指定状态机的初始状态。');
        // }
        this.context.initialize(variableParseService, this.initialState);
        this.stateMachineEvent.initialize(this.frameContext);
        this.render();
    };
    StateMachine.prototype.collectionMetadata = function () {
        var stateMachineMetadata = {
            states: {},
            renderStates: {},
            actions: {}
        };
        var propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
        if (propsMetadatas) {
            Object.keys(propsMetadatas).forEach(function (propName) {
                var propMetadatas = propsMetadatas[propName];
                propMetadatas.forEach(function (propMetadata) {
                    switch (propMetadata.ngMetadataName) {
                        case 'NgState':
                            stateMachineMetadata.states[propName] = propMetadata;
                            break;
                        case 'NgRenderState':
                            stateMachineMetadata.renderStates[propName] = propMetadata;
                            break;
                        case 'NgAction':
                            stateMachineMetadata.actions[propName] = propMetadata;
                            break;
                    }
                });
            });
        }
        return stateMachineMetadata;
    };
    StateMachine.prototype.buildStateMachine = function (metadata) {
        var _this = this;
        Object.keys(metadata.states).forEach(function (stateName) {
            _this.buildNgState(stateName, metadata.states[stateName]);
        });
        Object.keys(metadata.renderStates).forEach(function (renderStateName) {
            _this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);
        });
        Object.keys(metadata.actions).forEach(function (actionName) {
            _this.buildNgAction(actionName, metadata.actions[actionName]);
        });
    };
    /**
     * 构造状态
     * @param stateName 状态名称
     * @param ngState   状态对象
     */
    StateMachine.prototype.buildNgState = function (stateName, ngState) {
        this.states = this.states || {};
        this[stateName] = new State(stateName);
        this.states[stateName] = this[stateName];
        if (ngState.initialState) {
            this.initialState = this[stateName];
        }
    };
    /**
     * 构造界面状态
     * @param renderStateName 渲染状态名称
     * @param ngRenderState   渲染状态元数据
     */
    StateMachine.prototype.buildNgRenderState = function (renderStateName, ngRenderState) {
        this.renderStates = this.renderStates || {};
        this[renderStateName] = initialUIState;
        this.renderStates[renderStateName] = this[renderStateName];
        // 将renderState上指定的render加入到renders中
        this.renders = this.renders || {};
        this.renders[renderStateName] = ngRenderState.render;
    };
    /**
     * 构造动作
     * @param actionName 动作名称
     * @param ngAction   动作元数据
     */
    StateMachine.prototype.buildNgAction = function (actionName, ngAction) {
        var _this = this;
        this[actionName] = function () {
            effectHandlers.transit.perform(_this, ngAction.transitTo, ngAction.precondition);
        };
    };
    /**
     * 重新计算所有渲染状态的值
     * 当 state切换的时候，调用遍历所有的render方法，更改renderState
     */
    StateMachine.prototype.render = function () {
        if (this.isDisposed) {
            return;
        }
        for (var renderStateName in this.renderStates) {
            if (this.renderStates.hasOwnProperty(renderStateName) === false) {
                continue;
            }
            var stateRender = this.renders[renderStateName];
            if (!stateRender) {
                continue;
            }
            // 调用render方法，更新renderState
            this.renderStates[renderStateName] = stateRender(this.context);
            this[renderStateName] = this.renderStates[renderStateName];
        }
        this.stateChange.next(this.context.state);
    };
    return StateMachine;
}());
export { StateMachine };
//# sourceMappingURL=data:application/json;base64,