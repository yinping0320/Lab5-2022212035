import { Injectable } from '@angular/core';
import { StateMachine } from './state_machine';
/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
var StateMachineEvent = /** @class */ (function () {
    function StateMachineEvent(stateMachine) {
        this.stateMachine = stateMachine;
        this.uiFieldList = [];
        this.dataFieldList = [];
        this.frameContextMap = new Map();
        this.dataFrameContextMap = new Map();
    }
    Object.defineProperty(StateMachineEvent.prototype, "appContext", {
        get: function () {
            return this.stateMachine.appContext;
        },
        enumerable: true,
        configurable: true
    });
    StateMachineEvent.prototype.initialize = function (frameContext) {
        this.frameContext = frameContext;
    };
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     */
    StateMachineEvent.prototype.extractPaths = function (expression) {
        var path = '';
        var UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}$/g;
        var DATA_PATTERN_G = /\{DATA~(\S+?)\}$/g;
        if (typeof expression === 'string') {
            var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
            var dataVariables = expression.match(DATA_PATTERN_G);
            if (uiStateVariables !== null) {
                var UI_STATE_PATTERN_1 = /\{UISTATE~(\S+?)\}$/;
                uiStateVariables.forEach(function (uiStateVariable) {
                    var pathMatches = uiStateVariable.match(UI_STATE_PATTERN_1);
                    if (pathMatches != null && pathMatches.length === 2) {
                        path = pathMatches[1];
                    }
                });
            }
            if (dataVariables !== null) {
                var DATA_PATTERN_1 = /\{DATA~(\S+?)\}$/;
                dataVariables.forEach(function (dataVariable) {
                    var pathMatches = dataVariable.match(DATA_PATTERN_1);
                    if (pathMatches != null && pathMatches.length === 2) {
                        path = pathMatches[1];
                    }
                });
            }
        }
        return path;
    };
    // 根据表达式返回当前组件的frameContext
    StateMachineEvent.prototype.getFrameContext = function (expression) {
        var frameId = this.extractPaths(expression).split('/')[1] || '';
        if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {
            var relativeFrameId = frameId.substring(2, frameId.length - 1);
            frameId = this.frameContext.namespace ? this.frameContext.namespace + "_" + relativeFrameId : relativeFrameId;
        }
        return this.appContext.getFrameContext(frameId);
    };
    // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)
    StateMachineEvent.prototype.getFrameField = function (expression) {
        return this.extractPaths(expression).split('/')[2];
    };
    // 监听表单变量的变化
    StateMachineEvent.prototype.ListenUIStateChange = function (frameContext, expression) {
        var _this = this;
        var frameField = this.getFrameField(expression);
        if (!this.frameContextMap.has(frameContext)) {
            this.frameContextMap.set(frameContext, this.uiFieldList);
            frameContext.uiState.changes.subscribe(function (data) {
                if (data.field && _this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {
                    _this.stateMachine.render();
                }
            });
        }
        if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {
            this.uiFieldList.push(frameField);
        }
    };
    // 监听实体数据的变化
    StateMachineEvent.prototype.ListenEntityChange = function (frameContext, expression) {
        var _this = this;
        if (!this.dataFrameContextMap.has(frameContext)) {
            this.dataFrameContextMap.set(frameContext, this.dataFieldList);
            frameContext.bindingData.changes.subscribe(function (change) {
                // 切换当前行用到的是
                if (change.type === 'Load' || change.type === 'SelectionChanged') {
                    _this.stateMachine.render();
                }
                if (change.path.join() && _this.isAccordingValue(_this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {
                    _this.stateMachine.render();
                }
            });
        }
        if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {
            this.dataFieldList.push(expression);
        }
    };
    // 监听是否是解析的数据发生变化
    StateMachineEvent.prototype.isAccordingValue = function (arr, path) {
        return arr.find(function (item) {
            return item.indexOf(path) > -1;
        }) === undefined ? false : true;
    };
    StateMachineEvent.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    StateMachineEvent.ctorParameters = function () { return [
        { type: StateMachine }
    ]; };
    return StateMachineEvent;
}());
export { StateMachineEvent };
//# sourceMappingURL=data:application/json;base64,