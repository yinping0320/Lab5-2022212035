/**
 * 命令处理扩展相关
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable, InjectionToken } from '@angular/core';
/**
 * 命令处理扩展抽象类
 *
 * CommandHandler由一个个Task串联而成，这些Task不是一成不变，
 * 通过CommandHandlerExtender可以在不同的时机对它扩展，
 * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。
 *
 * ### 定义并注册扩展
 *
 * **定义一个扩展**
 *
 * 按如下步骤可以实现一个扩展：
 * - 继承CommandHandlerExtender抽象基类；
 * - 实现extend方法，在其内部对任务进行扩展、替换；
 * - 添加NgCommandHandlerExtender指定要扩展的命令。
 *
 * ```ts
 * @Injectable()
 * @NgCommandHandlerExtender({
 *    commandName: 'formLoad'
 *  })
 * class FormLoadExtender extends CommandHandlerExtender {
 *
 *   extend(handler: CommandHandler): CommandHandler {
 *
 *     // 扩展一个任务
 *     handler.extendTask('loadData', (originalResult) => {
 *       console.log('do sth. to the original result');
 *     });
 *
 *     // 替换一个任务
 *     handler.extendTask('transitState', () => {
 *       console.log('transit to other state');
 *     });
 *
 *     return handler;
 *   }
 * }
 * ```
 * 在extend方法内部：
 * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；
 * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。
 *
 * **注册扩展**
 *
 * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，
 * 由它来统一进行注册。
 * ```ts
 * @NgModule({
 *   imports: [
 *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])
 *   ]
 * })
 * class SimpleModule {}
 * ```
 */
var CommandHandlerExtender = /** @class */ (function () {
    function CommandHandlerExtender() {
    }
    CommandHandlerExtender.decorators = [
        { type: Injectable }
    ];
    return CommandHandlerExtender;
}());
/**
 * 命令处理器扩展注入Token
 */
var COMMAND_HANDLER_EXTENDERS_TOKEN = new InjectionToken('@farris/devkit CommandHandler Extenders');
export { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1REc7QUFDSDtJQUFBO0lBU0EsQ0FBQzs7Z0JBVEEsVUFBVTs7SUFTWCw2QkFBQztDQUFBLEFBVEQsSUFTQztBQUdEOztHQUVHO0FBQ0gsSUFBTSwrQkFBK0IsR0FBRyxJQUFJLGNBQWMsQ0FBeUIseUNBQXlDLENBQUMsQ0FBQztBQUU5SCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDlkb3ku6TlpITnkIbmianlsZXnm7jlhbNcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyJztcclxuXHJcbi8qKlxyXG4gKiDlkb3ku6TlpITnkIbmianlsZXmir3osaHnsbtcclxuICpcclxuICogQ29tbWFuZEhhbmRsZXLnlLHkuIDkuKrkuKpUYXNr5Liy6IGU6ICM5oiQ77yM6L+Z5LqbVGFza+S4jeaYr+S4gOaIkOS4jeWPmO+8jFxyXG4gKiDpgJrov4dDb21tYW5kSGFuZGxlckV4dGVuZGVy5Y+v5Lul5Zyo5LiN5ZCM55qE5pe25py65a+55a6D5omp5bGV77yMXHJcbiAqIOmAmui/h+Wug+aIkeS7rOWPr+S7peWcqOS7u+WKoeS5i+WQjuaWsOWinuS4gOS4quS7u+WKoeaIluiAheabv+aNouaOieWOn+adpeeahOS4gOS4quS7u+WKoeOAglxyXG4gKlxyXG4gKiAjIyMg5a6a5LmJ5bm25rOo5YaM5omp5bGVXHJcbiAqXHJcbiAqICoq5a6a5LmJ5LiA5Liq5omp5bGVKipcclxuICpcclxuICog5oyJ5aaC5LiL5q2l6aqk5Y+v5Lul5a6e546w5LiA5Liq5omp5bGV77yaXHJcbiAqIC0g57un5om/Q29tbWFuZEhhbmRsZXJFeHRlbmRlcuaKveixoeWfuuexu++8m1xyXG4gKiAtIOWunueOsGV4dGVuZOaWueazle+8jOWcqOWFtuWGhemDqOWvueS7u+WKoei/m+ihjOaJqeWxleOAgeabv+aNou+8m1xyXG4gKiAtIOa3u+WKoE5nQ29tbWFuZEhhbmRsZXJFeHRlbmRlcuaMh+WumuimgeaJqeWxleeahOWRveS7pOOAglxyXG4gKlxyXG4gKiBgYGB0c1xyXG4gKiBASW5qZWN0YWJsZSgpXHJcbiAqIEBOZ0NvbW1hbmRIYW5kbGVyRXh0ZW5kZXIoe1xyXG4gKiAgICBjb21tYW5kTmFtZTogJ2Zvcm1Mb2FkJ1xyXG4gKiAgfSlcclxuICogY2xhc3MgRm9ybUxvYWRFeHRlbmRlciBleHRlbmRzIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIge1xyXG4gKlxyXG4gKiAgIGV4dGVuZChoYW5kbGVyOiBDb21tYW5kSGFuZGxlcik6IENvbW1hbmRIYW5kbGVyIHtcclxuICpcclxuICogICAgIC8vIOaJqeWxleS4gOS4quS7u+WKoVxyXG4gKiAgICAgaGFuZGxlci5leHRlbmRUYXNrKCdsb2FkRGF0YScsIChvcmlnaW5hbFJlc3VsdCkgPT4ge1xyXG4gKiAgICAgICBjb25zb2xlLmxvZygnZG8gc3RoLiB0byB0aGUgb3JpZ2luYWwgcmVzdWx0Jyk7XHJcbiAqICAgICB9KTtcclxuICpcclxuICogICAgIC8vIOabv+aNouS4gOS4quS7u+WKoVxyXG4gKiAgICAgaGFuZGxlci5leHRlbmRUYXNrKCd0cmFuc2l0U3RhdGUnLCAoKSA9PiB7XHJcbiAqICAgICAgIGNvbnNvbGUubG9nKCd0cmFuc2l0IHRvIG90aGVyIHN0YXRlJyk7XHJcbiAqICAgICB9KTtcclxuICpcclxuICogICAgIHJldHVybiBoYW5kbGVyO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICog5ZyoZXh0ZW5k5pa55rOV5YaF6YOo77yaXHJcbiAqIC0g6YCa6L+HZXh0ZW5kVGFza+aWueazleaJqeWxleS7u+WKoe+8jOS4gOS4quS7u+WKoeWPr+S7peiiq+WkmuasoeaJqeWxle+8jOWkmuS4quaJqeWxleS+neasoemZhOWKoOWIsOWOn+adpeeahOS7u+WKoeS5i+S4iu+8m1xyXG4gKiAtIOmAmui/h3JlcGxhY2VUYXNr5pa55rOV5pu/5o2i5Lu75Yqh77yM5LiA5Liq5Lu75Yqh5Y+v5Lul6KKr5aSa5qyh5pu/5o2i77yM5Lul5pyA5ZCO5LiA5Liq5pu/5o2i5Li65YeG44CCXHJcbiAqXHJcbiAqICoq5rOo5YaM5omp5bGVKipcclxuICpcclxuICog5oiR5Lus5bCG5YyF5ZCrRm9ybUxvYWRIYW5kbGVyRXh0ZW5kZXLnmoTmlbDnu4TkvKDpgJLnu5lDb21tYW5kTW9kdWxlLnNldHVw5pa55rOV77yMXHJcbiAqIOeUseWug+adpee7n+S4gOi/m+ihjOazqOWGjOOAglxyXG4gKiBgYGB0c1xyXG4gKiBATmdNb2R1bGUoe1xyXG4gKiAgIGltcG9ydHM6IFtcclxuICogICAgIENvbW1hbmRNb2R1bGUuc2V0dXAoW0Zvcm1Mb2FkSGFuZGxlcl0sIFtGb3JtTG9hZEhhbmRsZXJFeHRlbmRlcl0pXHJcbiAqICAgXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBTaW1wbGVNb2R1bGUge31cclxuICogYGBgXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmFic3RyYWN0IGNsYXNzIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIge1xyXG5cclxuICAvKipcclxuICAgKiDmianlsZXmlrnms5VcclxuICAgKiBAcGFyYW0gaGFuZGxlciDopoHmianlsZXnmoTlkb3ku6TlpITnkIblmahcclxuICAgKi9cclxuICBhYnN0cmFjdCBleHRlbmQoaGFuZGxlcjogQ29tbWFuZEhhbmRsZXIpOiBDb21tYW5kSGFuZGxlcjtcclxuXHJcbn1cclxuXHJcblxyXG4vKipcclxuICog5ZG95Luk5aSE55CG5Zmo5omp5bGV5rOo5YWlVG9rZW5cclxuICovXHJcbmNvbnN0IENPTU1BTkRfSEFORExFUl9FWFRFTkRFUlNfVE9LRU4gPSBuZXcgSW5qZWN0aW9uVG9rZW48Q29tbWFuZEhhbmRsZXJFeHRlbmRlcj4oJ0BmYXJyaXMvZGV2a2l0IENvbW1hbmRIYW5kbGVyIEV4dGVuZGVycycpO1xyXG5cclxuZXhwb3J0IHsgQ29tbWFuZEhhbmRsZXJFeHRlbmRlciwgQ09NTUFORF9IQU5ETEVSX0VYVEVOREVSU19UT0tFTiB9O1xyXG4iXX0=