/**
 * 命令处理器工厂相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { FrameContext } from '../frame/index';
import { CommandHandlerRegistry } from './command_handler_registry';
import { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';
import { VariableParseService } from '../variable/variable_parse_service';
/**
 * 命令处理器工厂
 */
var CommandHandlerFactory = /** @class */ (function () {
    /**
     * 构造函数
     * @param handlerRegistry  命令处理注册器
     * @param extenderRegistry 命令处理扩展注册器
     */
    function CommandHandlerFactory(handlerRegistry, extenderRegistry, frameContext, variableParseService) {
        this.handlerRegistry = handlerRegistry;
        this.extenderRegistry = extenderRegistry;
        this.frameContext = frameContext;
        this.variableParseService = variableParseService;
    }
    /**
     * 创建命令处理器
     * @param   commandName 命令名称
     * @returns 对应的命令处理器实例
     */
    CommandHandlerFactory.prototype.create = function (commandName) {
        var rawHandler = this.handlerRegistry.get(commandName);
        rawHandler.init(this.frameContext, this.variableParseService);
        var extenders = this.extenderRegistry.get(commandName);
        // 遍历extenders，依次对handler进行扩展
        return extenders.reduce(function (handler, extender) {
            return extender.extend(handler);
        }, rawHandler);
    };
    CommandHandlerFactory.prototype.dispose = function () {
        this.handlerRegistry.dispose();
        this.extenderRegistry.dispose();
        this.frameContext = null;
        this.variableParseService = null;
    };
    CommandHandlerFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandHandlerFactory.ctorParameters = function () { return [
        { type: CommandHandlerRegistry },
        { type: CommandHandlerExtenderRegistry },
        { type: FrameContext },
        { type: VariableParseService }
    ]; };
    return CommandHandlerFactory;
}());
export { CommandHandlerFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfaGFuZGxlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTFFOztHQUVHO0FBQ0g7SUFHRTs7OztPQUlHO0lBQ0gsK0JBQ1UsZUFBdUMsRUFDdkMsZ0JBQWdELEVBQ2hELFlBQTBCLEVBQzFCLG9CQUEwQztRQUgxQyxvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUFDdkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFnQztRQUNoRCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0lBRXBELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksc0NBQU0sR0FBYixVQUFjLFdBQW1CO1FBQy9CLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pELFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXpELDZCQUE2QjtRQUM3QixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBQyxPQUF1QixFQUFFLFFBQWdDO1lBQ2hGLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUNNLHVDQUFPLEdBQWQ7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO0lBQ25DLENBQUM7O2dCQXBDRixVQUFVOzs7O2dCQVJGLHNCQUFzQjtnQkFFdEIsOEJBQThCO2dCQUo5QixZQUFZO2dCQUtaLG9CQUFvQjs7SUEwQzdCLDRCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7QUFFRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDlkb3ku6TlpITnkIblmajlt6XljoLnm7jlhbPlrprkuYlcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJy4uL2ZyYW1lL2luZGV4JztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcic7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyUmVnaXN0cnkgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9yZWdpc3RyeSc7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9leHRlbmRlcic7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJSZWdpc3RyeSB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyX3JlZ2lzdHJ5JztcclxuaW1wb3J0IHsgVmFyaWFibGVQYXJzZVNlcnZpY2UgfSBmcm9tICcuLi92YXJpYWJsZS92YXJpYWJsZV9wYXJzZV9zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiDlkb3ku6TlpITnkIblmajlt6XljoJcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQ29tbWFuZEhhbmRsZXJGYWN0b3J5IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIGhhbmRsZXJSZWdpc3RyeSAg5ZG95Luk5aSE55CG5rOo5YaM5ZmoXHJcbiAgICogQHBhcmFtIGV4dGVuZGVyUmVnaXN0cnkg5ZG95Luk5aSE55CG5omp5bGV5rOo5YaM5ZmoXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGhhbmRsZXJSZWdpc3RyeTogQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSxcclxuICAgIHByaXZhdGUgZXh0ZW5kZXJSZWdpc3RyeTogQ29tbWFuZEhhbmRsZXJFeHRlbmRlclJlZ2lzdHJ5LFxyXG4gICAgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgIHByaXZhdGUgdmFyaWFibGVQYXJzZVNlcnZpY2U6IFZhcmlhYmxlUGFyc2VTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rlkb3ku6TlpITnkIblmahcclxuICAgKiBAcGFyYW0gICBjb21tYW5kTmFtZSDlkb3ku6TlkI3np7BcclxuICAgKiBAcmV0dXJucyDlr7nlupTnmoTlkb3ku6TlpITnkIblmajlrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlKGNvbW1hbmROYW1lOiBzdHJpbmcpOiBDb21tYW5kSGFuZGxlciB7XHJcbiAgICBjb25zdCByYXdIYW5kbGVyID0gdGhpcy5oYW5kbGVyUmVnaXN0cnkuZ2V0KGNvbW1hbmROYW1lKTtcclxuICAgIHJhd0hhbmRsZXIuaW5pdCh0aGlzLmZyYW1lQ29udGV4dCwgdGhpcy52YXJpYWJsZVBhcnNlU2VydmljZSk7XHJcbiAgICBjb25zdCBleHRlbmRlcnMgPSB0aGlzLmV4dGVuZGVyUmVnaXN0cnkuZ2V0KGNvbW1hbmROYW1lKTtcclxuXHJcbiAgICAvLyDpgY3ljoZleHRlbmRlcnPvvIzkvp3mrKHlr7loYW5kbGVy6L+b6KGM5omp5bGVXHJcbiAgICByZXR1cm4gZXh0ZW5kZXJzLnJlZHVjZSgoaGFuZGxlcjogQ29tbWFuZEhhbmRsZXIsIGV4dGVuZGVyOiBDb21tYW5kSGFuZGxlckV4dGVuZGVyKSA9PiB7XHJcbiAgICAgIHJldHVybiBleHRlbmRlci5leHRlbmQoaGFuZGxlcik7XHJcbiAgICB9LCByYXdIYW5kbGVyKTtcclxuICB9XHJcbiAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmhhbmRsZXJSZWdpc3RyeS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmV4dGVuZGVyUmVnaXN0cnkuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQgPSBudWxsO1xyXG4gICAgdGhpcy52YXJpYWJsZVBhcnNlU2VydmljZSA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBDb21tYW5kSGFuZGxlckZhY3RvcnkgfTtcclxuIl19