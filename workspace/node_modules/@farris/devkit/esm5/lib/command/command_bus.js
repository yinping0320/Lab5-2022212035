/**
 * CommandBus相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CommandHandlerFactory } from './command_handler_factory';
/**
 * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
 */
var CommandBus = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CommandBus(handlerFactory) {
        this.handlerFactory = handlerFactory;
        this.executingCommands = [];
        this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
    }
    /**
     * 派发命令
     * @param command 要派发的命令
     */
    CommandBus.prototype.dispatch = function (command) {
        var _this = this;
        var commandResult$ = new Subject();
        this.executeCommand(command).subscribe({
            next: function (lastTaskResult) {
                commandResult$.next(lastTaskResult);
                commandResult$.complete();
            },
            complete: function () {
                commandResult$.complete();
                _this.removeCommandFromExecutingQueue(command);
            },
            error: function (error) {
                commandResult$.error(error);
                _this.removeCommandFromExecutingQueue(command, !_this.is401Error(error));
            }
        });
        return commandResult$;
    };
    /**
     * dispose
     */
    CommandBus.prototype.dispose = function () {
        this.handlerFactory.dispose();
    };
    /**
     * 执行命令并返回最后一个任务的执行结果流
     */
    CommandBus.prototype.executeCommand = function (command) {
        this.addCommandToExecutingQueue(command);
        var commandName = command.name;
        var handler = this.handlerFactory.create(commandName);
        var lastTaskResult$ = handler.execute(command);
        return lastTaskResult$;
    };
    /**
     * 添加到执行队列
     */
    CommandBus.prototype.addCommandToExecutingQueue = function (command) {
        this.executingCommands.push(command);
        this.executingCommandCount$.next(this.executingCommands.length);
    };
    /**
     * 从执行队列中移除
     */
    CommandBus.prototype.removeCommandFromExecutingQueue = function (command, postOrNot) {
        if (postOrNot === void 0) { postOrNot = true; }
        this.executingCommands = this.executingCommands.filter(function (executingCommand) {
            return executingCommand !== command;
        });
        if (postOrNot === true) {
            this.executingCommandCount$.next(this.executingCommands.length);
        }
    };
    CommandBus.prototype.is401Error = function (error) {
        // 如果error为空，不认为是401错误
        return error && error.status === 401;
    };
    CommandBus.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandBus.ctorParameters = function () { return [
        { type: CommandHandlerFactory }
    ]; };
    return CommandBus;
}());
export { CommandBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUdILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEU7O0dBRUc7QUFDSDtJQWtCRTs7T0FFRztJQUNILG9CQUFtQixjQUFxQztRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVEOzs7T0FHRztJQUNJLDZCQUFRLEdBQWYsVUFBZ0IsT0FBZ0I7UUFBaEMsaUJBaUJDO1FBaEJDLElBQU0sY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDckMsSUFBSSxFQUFFLFVBQUMsY0FBbUI7Z0JBQ3hCLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3BDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1QixDQUFDO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUIsS0FBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFDRCxLQUFLLEVBQUUsVUFBQyxLQUFVO2dCQUNoQixjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixLQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLENBQUM7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSSw0QkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSyxtQ0FBYyxHQUF0QixVQUF1QixPQUFnQjtRQUNyQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNqQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RCxJQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFHRDs7T0FFRztJQUNLLCtDQUEwQixHQUFsQyxVQUFtQyxPQUFnQjtRQUNqRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7T0FFRztJQUNLLG9EQUErQixHQUF2QyxVQUF3QyxPQUFnQixFQUFFLFNBQXlCO1FBQXpCLDBCQUFBLEVBQUEsZ0JBQXlCO1FBQ2pGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFVBQUMsZ0JBQXlCO1lBQy9FLE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVPLCtCQUFVLEdBQWxCLFVBQW1CLEtBQXdCO1FBQ3pDLHNCQUFzQjtRQUN0QixPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQztJQUN2QyxDQUFDOztnQkEzRkYsVUFBVTs7OztnQkFMRixxQkFBcUI7O0lBa0c5QixpQkFBQztDQUFBLEFBN0ZELElBNkZDO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbW1hbmRCdXPnm7jlhbPlrprkuYlcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kJztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogQ29tbWFuZEJ1c+eUqOS6jua0vuWPkUNvbW1hbmTvvIzlroPmjqXlj5fkuIDkuKpDb21tYW5k5a6e5L6L77yM5p+l5om+5a+55bqU55qEQ29tbWFuZEhhbmRsZXLvvIzlubbmiafooYzjgIJcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQ29tbWFuZEJ1cyBpbXBsZW1lbnRzIElEaXNwb3NhYmxle1xyXG5cclxuICAvKipcclxuICAgKiBoYW5kbGVy5bel5Y6CXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVyRmFjdG9yeTogQ29tbWFuZEhhbmRsZXJGYWN0b3J5O1xyXG5cclxuICAvKipcclxuICAgKiDmraPlnKjmiafooYznmoTlkb3ku6TmlbDph4/mtYHvvIjor7fli7/kvb/nlKjvvIzlkI7mnpzoh6rotJ/vvIlcclxuICAgKi9cclxuICBwdWJsaWMgZXhlY3V0aW5nQ29tbWFuZENvdW50JDogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XHJcblxyXG4gIC8qKlxyXG4gICAqIOato+WcqOaJp+ihjOeahOWRveS7pOaVsOmHj1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZXhlY3V0aW5nQ29tbWFuZHM6IENvbW1hbmRbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGhhbmRsZXJGYWN0b3J5OiBDb21tYW5kSGFuZGxlckZhY3RvcnkpIHtcclxuICAgIHRoaXMuaGFuZGxlckZhY3RvcnkgPSBoYW5kbGVyRmFjdG9yeTtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMgPSBbXTtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZENvdW50JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmtL7lj5Hlkb3ku6RcclxuICAgKiBAcGFyYW0gY29tbWFuZCDopoHmtL7lj5HnmoTlkb3ku6RcclxuICAgKi9cclxuICBwdWJsaWMgZGlzcGF0Y2goY29tbWFuZDogQ29tbWFuZCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBjb21tYW5kUmVzdWx0JCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKGNvbW1hbmQpLnN1YnNjcmliZSh7XHJcbiAgICAgIG5leHQ6IChsYXN0VGFza1Jlc3VsdDogYW55KSA9PiB7XHJcbiAgICAgICAgY29tbWFuZFJlc3VsdCQubmV4dChsYXN0VGFza1Jlc3VsdCk7XHJcbiAgICAgICAgY29tbWFuZFJlc3VsdCQuY29tcGxldGUoKTtcclxuICAgICAgfSxcclxuICAgICAgY29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ29tbWFuZEZyb21FeGVjdXRpbmdRdWV1ZShjb21tYW5kKTtcclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgY29tbWFuZFJlc3VsdCQuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ29tbWFuZEZyb21FeGVjdXRpbmdRdWV1ZShjb21tYW5kLCAhdGhpcy5pczQwMUVycm9yKGVycm9yKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNvbW1hbmRSZXN1bHQkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZGlzcG9zZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwb3NlKCl7XHJcbiAgICB0aGlzLmhhbmRsZXJGYWN0b3J5LmRpc3Bvc2UoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5omn6KGM5ZG95Luk5bm26L+U5Zue5pyA5ZCO5LiA5Liq5Lu75Yqh55qE5omn6KGM57uT5p6c5rWBXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleGVjdXRlQ29tbWFuZChjb21tYW5kOiBDb21tYW5kKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHRoaXMuYWRkQ29tbWFuZFRvRXhlY3V0aW5nUXVldWUoY29tbWFuZCk7XHJcbiAgICBjb25zdCBjb21tYW5kTmFtZSA9IGNvbW1hbmQubmFtZTtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmhhbmRsZXJGYWN0b3J5LmNyZWF0ZShjb21tYW5kTmFtZSk7XHJcbiAgICBjb25zdCBsYXN0VGFza1Jlc3VsdCQgPSBoYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCk7XHJcbiAgICByZXR1cm4gbGFzdFRhc2tSZXN1bHQkO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOa3u+WKoOWIsOaJp+ihjOmYn+WIl1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkQ29tbWFuZFRvRXhlY3V0aW5nUXVldWUoY29tbWFuZDogQ29tbWFuZCkge1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcy5wdXNoKGNvbW1hbmQpO1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kQ291bnQkLm5leHQodGhpcy5leGVjdXRpbmdDb21tYW5kcy5sZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LuO5omn6KGM6Zif5YiX5Lit56e76ZmkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQ6IENvbW1hbmQsIHBvc3RPck5vdDogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMgPSB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmZpbHRlcigoZXhlY3V0aW5nQ29tbWFuZDogQ29tbWFuZCkgPT4ge1xyXG4gICAgICByZXR1cm4gZXhlY3V0aW5nQ29tbWFuZCAhPT0gY29tbWFuZDtcclxuICAgIH0pO1xyXG4gICAgaWYgKHBvc3RPck5vdCA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQubmV4dCh0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzNDAxRXJyb3IoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSB7XHJcbiAgICAvLyDlpoLmnpxlcnJvcuS4uuepuu+8jOS4jeiupOS4uuaYrzQwMemUmeivr1xyXG4gICAgcmV0dXJuIGVycm9yICYmIGVycm9yLnN0YXR1cyA9PT0gNDAxO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbW1hbmRCdXMgfTtcclxuIl19