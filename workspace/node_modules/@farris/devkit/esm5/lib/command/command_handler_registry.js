/**
 * 命令处理注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { MetadataUtil } from '../metadata/index';
import { NG_COMMAND_HANDLER } from './decorators';
import { COMMAND_HANDLERS_TOKEN } from './command_handler';
/**
 * 命令处理注册器
 */
var CommandHandlerRegistry = /** @class */ (function () {
    /**
     * 构造函数
     * @param handlers 命令处理实例数组
     */
    function CommandHandlerRegistry(handlers) {
        var self = this;
        this.handlerMap = new Map();
        if (handlers) {
            handlers.forEach(function (handler) {
                self.regist(handler);
            });
        }
    }
    /**
     * 添加命令处理
     * @param  commandName    命令名称
     * @param  commandHandler 命令处理实例
     */
    CommandHandlerRegistry.prototype.set = function (commandName, commandHandler) {
        if (this.handlerMap.has(commandName)) {
            throw new Error(commandName + '对应的CommandHandler已经存在');
        }
        this.handlerMap.set(commandName, commandHandler);
    };
    /**
     * 获取命令处理
     * @param   commandName 命令名称
     * @returns 命令处理实例
     */
    CommandHandlerRegistry.prototype.get = function (commandName) {
        if (this.handlerMap.has(commandName) === false) {
            throw new Error('找不到' + commandName + '对应的CommandHandler');
        }
        return this.handlerMap.get(commandName);
    };
    /**
     * 注册命令处理
     * @param handlers 命令处理实例
     */
    CommandHandlerRegistry.prototype.regist = function (commandHandler) {
        var commandName = commandHandler.commandName;
        if (!commandName) {
            // 根据metadata获取对应的Command名称
            var handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);
            if (!handlerMetadata) {
                throw new Error('CommandHandler必须指定要处理的命令名称');
            }
            commandName = handlerMetadata.commandName;
        }
        this.set(commandName, commandHandler);
    };
    /**
     * 清空所有命令处理器
     */
    CommandHandlerRegistry.prototype.dispose = function () {
        if (this.handlerMap) {
            this.handlerMap.forEach(function (handler) {
                handler.dispose();
            });
        }
        this.handlerMap.clear();
    };
    CommandHandlerRegistry.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandHandlerRegistry.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [COMMAND_HANDLERS_TOKEN,] }] }
    ]; };
    return CommandHandlerRegistry;
}());
export { CommandHandlerRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2hhbmRsZXJfcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQW9CLE1BQU0sY0FBYyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUczRTs7R0FFRztBQUNIO0lBUUU7OztPQUdHO0lBQ0gsZ0NBQXVELFFBQTBCO1FBQy9FLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO1FBQ3BELElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQXVCO2dCQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLG9DQUFHLEdBQVYsVUFBVyxXQUFtQixFQUFFLGNBQThCO1FBQzVELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsdUJBQXVCLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLG9DQUFHLEdBQVYsVUFBVyxXQUFtQjtRQUM1QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHVDQUFNLEdBQWIsVUFBYyxjQUE4QjtRQUMxQyxJQUFJLFdBQVcsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsMkJBQTJCO1lBQzNCLElBQU0sZUFBZSxHQUNuQixZQUFZLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RGLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUMvQztZQUNELFdBQVcsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNEOztPQUVHO0lBQ0ksd0NBQU8sR0FBZDtRQUNFLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87Z0JBQzdCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixDQUFDOztnQkF6RUYsVUFBVTs7Ozs0Q0FZSSxRQUFRLFlBQUksTUFBTSxTQUFDLHNCQUFzQjs7SUErRHhELDZCQUFDO0NBQUEsQUEzRUQsSUEyRUM7QUFFRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDlkb3ku6TlpITnkIbms6jlhozlmajnm7jlhbPlrprkuYlcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1ldGFkYXRhVXRpbCB9IGZyb20gJy4uL21ldGFkYXRhL2luZGV4JztcclxuaW1wb3J0IHsgTkdfQ09NTUFORF9IQU5ETEVSLCBOZ0NvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcclxuaW1wb3J0IHsgQ09NTUFORF9IQU5ETEVSU19UT0tFTiwgQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcic7XHJcblxyXG5cclxuLyoqXHJcbiAqIOWRveS7pOWkhOeQhuazqOWGjOWZqFxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDb21tYW5kSGFuZGxlclJlZ2lzdHJ5IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29tbWFuZEhhbmRsZXIgTWFwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVyTWFwOiBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlcj47XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSBoYW5kbGVycyDlkb3ku6TlpITnkIblrp7kvovmlbDnu4RcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KENPTU1BTkRfSEFORExFUlNfVE9LRU4paGFuZGxlcnM6IENvbW1hbmRIYW5kbGVyW10pIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgdGhpcy5oYW5kbGVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIENvbW1hbmRIYW5kbGVyPigpO1xyXG4gICAgaWYgKGhhbmRsZXJzKSB7XHJcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goKGhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKSA9PiB7XHJcbiAgICAgICAgc2VsZi5yZWdpc3QoaGFuZGxlcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5re75Yqg5ZG95Luk5aSE55CGXHJcbiAgICogQHBhcmFtICBjb21tYW5kTmFtZSAgICDlkb3ku6TlkI3np7BcclxuICAgKiBAcGFyYW0gIGNvbW1hbmRIYW5kbGVyIOWRveS7pOWkhOeQhuWunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXQoY29tbWFuZE5hbWU6IHN0cmluZywgY29tbWFuZEhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKSB7XHJcbiAgICBpZiAodGhpcy5oYW5kbGVyTWFwLmhhcyhjb21tYW5kTmFtZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbW1hbmROYW1lICsgJ+WvueW6lOeahENvbW1hbmRIYW5kbGVy5bey57uP5a2Y5ZyoJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZXJNYXAuc2V0KGNvbW1hbmROYW1lLCBjb21tYW5kSGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blkb3ku6TlpITnkIZcclxuICAgKiBAcGFyYW0gICBjb21tYW5kTmFtZSDlkb3ku6TlkI3np7BcclxuICAgKiBAcmV0dXJucyDlkb3ku6TlpITnkIblrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0KGNvbW1hbmROYW1lOiBzdHJpbmcpOiBDb21tYW5kSGFuZGxlciB7XHJcbiAgICBpZiAodGhpcy5oYW5kbGVyTWFwLmhhcyhjb21tYW5kTmFtZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign5om+5LiN5YiwJyArIGNvbW1hbmROYW1lICsgJ+WvueW6lOeahENvbW1hbmRIYW5kbGVyJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyTWFwLmdldChjb21tYW5kTmFtZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDms6jlhozlkb3ku6TlpITnkIZcclxuICAgKiBAcGFyYW0gaGFuZGxlcnMg5ZG95Luk5aSE55CG5a6e5L6LXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ2lzdChjb21tYW5kSGFuZGxlcjogQ29tbWFuZEhhbmRsZXIpIHtcclxuICAgIGxldCBjb21tYW5kTmFtZSA9IGNvbW1hbmRIYW5kbGVyLmNvbW1hbmROYW1lO1xyXG4gICAgaWYgKCFjb21tYW5kTmFtZSkge1xyXG4gICAgICAvLyDmoLnmja5tZXRhZGF0YeiOt+WPluWvueW6lOeahENvbW1hbmTlkI3np7BcclxuICAgICAgY29uc3QgaGFuZGxlck1ldGFkYXRhOiBOZ0NvbW1hbmRIYW5kbGVyID1cclxuICAgICAgICBNZXRhZGF0YVV0aWwuZ2V0Q2xhc3NNZXRhZGF0YUJ5TmFtZShjb21tYW5kSGFuZGxlci5jb25zdHJ1Y3RvciwgTkdfQ09NTUFORF9IQU5ETEVSKTtcclxuICAgICAgaWYgKCFoYW5kbGVyTWV0YWRhdGEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbW1hbmRIYW5kbGVy5b+F6aG75oyH5a6a6KaB5aSE55CG55qE5ZG95Luk5ZCN56ewJyk7XHJcbiAgICAgIH1cclxuICAgICAgY29tbWFuZE5hbWUgPSBoYW5kbGVyTWV0YWRhdGEuY29tbWFuZE5hbWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldChjb21tYW5kTmFtZSwgY29tbWFuZEhhbmRsZXIpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmuIXnqbrmiYDmnInlkb3ku6TlpITnkIblmahcclxuICAgKi9cclxuICBwdWJsaWMgZGlzcG9zZSgpIHtcclxuICAgIGlmICh0aGlzLmhhbmRsZXJNYXApIHtcclxuICAgICAgdGhpcy5oYW5kbGVyTWFwLmZvckVhY2goaGFuZGxlciA9PiB7XHJcbiAgICAgICAgaGFuZGxlci5kaXNwb3NlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYW5kbGVyTWFwLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSB9O1xyXG4iXX0=