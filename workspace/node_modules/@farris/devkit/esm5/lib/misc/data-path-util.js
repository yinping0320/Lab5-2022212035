import { BindingPropertyType, PropertyUtil } from '../binding-data/index';
/**
 * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）
 */
var DataPathUtil = /** @class */ (function () {
    function DataPathUtil() {
    }
    /**
     * 转换成BindingData可识别的路径
     */
    DataPathUtil.convertToBindingPathArray = function (path) {
        var bindingPathArray = path.split('/').filter(function (part) {
            return part !== '';
        });
        return bindingPathArray;
    };
    /**
     * 转换为Entity可识别的路径
     * 根：[]
     * 主表：['id:xxx', 'name'],
     * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
     * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
     * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
     * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
     */
    DataPathUtil.convertToEntityPathArray = function (path, bindingData) {
        var _this = this;
        var bindingPathArray = this.convertToBindingPathArray(path);
        var entityPathArray = [];
        if (bindingPathArray.length === 0) {
            return entityPathArray;
        }
        // 根节点
        var currentBindingObject = bindingData.list.currentItem;
        entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
        bindingPathArray.forEach(function (propName) {
            var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            switch (propInfo.type) {
                case BindingPropertyType.Plain:
                    entityPathArray.push(propName);
                    break;
                case BindingPropertyType.Object:
                    currentBindingObject = currentBindingObject[propName];
                    entityPathArray.push(propName);
                    entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                case BindingPropertyType.List:
                    var currentBindingList = currentBindingObject[propName];
                    currentBindingObject = currentBindingList.currentItem;
                    entityPathArray.push(propName);
                    entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                default:
                    break;
            }
        });
        return entityPathArray;
    };
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdus
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades
     */
    DataPathUtil.convertToRestUrl = function (path, bindingData) {
        var bindingPathArray = this.convertToBindingPathArray(path);
        var restPathArray = [];
        var currentBindingObject = bindingData.list.currentItem;
        restPathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach(function (propName) {
            var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
            }
            var currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            restPathArray.push(propName);
            restPathArray.push(currentBindingObject.primaryKeyValue);
        });
        // 移除最后一个主键
        restPathArray.pop();
        return '/' + restPathArray.join('/');
    };
    /**
     * 获取叶子节点的Path
     */
    DataPathUtil.getLeafPath = function (path) {
        var pathArray = DataPathUtil.convertToBindingPathArray(path);
        return pathArray.pop();
    };
    /**
     * 获取父路径
     */
    DataPathUtil.getParentPath = function (path) {
        var pathArray = DataPathUtil.convertToBindingPathArray(path);
        pathArray.pop();
        return '/' + pathArray.join('/');
    };
    /**
     * 创建路径中的主键部分
     */
    DataPathUtil.createPrimaryKeyPath = function (primaryKey, primaryKeyValue) {
        return primaryKey + ":" + primaryKeyValue;
    };
    return DataPathUtil;
}());
export { DataPathUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1wYXRoLXV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9taXNjL2RhdGEtcGF0aC11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2Rjs7R0FFRztBQUNIO0lBQUE7SUFzSEEsQ0FBQztJQXBIQzs7T0FFRztJQUNXLHNDQUF5QixHQUF2QyxVQUF3QyxJQUFZO1FBQ2xELElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFZO1lBQzNELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ1cscUNBQXdCLEdBQXRDLFVBQXVDLElBQVksRUFBRSxXQUF3QjtRQUE3RSxpQkF5Q0M7UUF4Q0MsSUFBTSxnQkFBZ0IsR0FBYSxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEUsSUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO1FBRXJDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqQyxPQUFPLGVBQWUsQ0FBQztTQUN4QjtRQUVELE1BQU07UUFDTixJQUFJLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3hELGVBQWUsQ0FBQyxJQUFJLENBQ2xCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQ2pHLENBQUM7UUFFRixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFnQjtZQUN4QyxJQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsaUJB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R0FBRyxFQUFFLENBQUM7UUFDaEIsT0FBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7O09BRUc7SUFDWSxpQ0FBb0IsR0FBbkMsVUFBb0MsVUFBa0IsRUFBRSxlQUF1QjtRQUM3RSxPQUFVLFVBQVUsU0FBSSxlQUFpQixDQUFDO0lBQzVDLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF0SEQsSUFzSEM7QUFFRCxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5kaW5nRGF0YSwgQmluZGluZ1Byb3BlcnR5VHlwZSwgUHJvcGVydHlVdGlsIH0gZnJvbSAnLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuLyoqXHJcbiAqIOi3r+W+hOWkhOeQhuW3peWFt+exu++8iOWkhOeQhi9QYXRoTm9kZTEvUGF0aE5vZGUyLy4uLuagvOW8j+eahOi3r+W+hO+8iVxyXG4gKi9cclxuY2xhc3MgRGF0YVBhdGhVdGlsIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5oiQQmluZGluZ0RhdGHlj6/or4bliKvnmoTot6/lvoRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRUb0JpbmRpbmdQYXRoQXJyYXkocGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGhBcnJheSA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBiaW5kaW5nUGF0aEFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5Li6RW50aXR55Y+v6K+G5Yir55qE6Lev5b6EXHJcbiAgICog5qC577yaW11cclxuICAgKiDkuLvooajvvJpbJ2lkOnh4eCcsICduYW1lJ10sXHJcbiAgICog5YWz6IGU77yaWydpZDp4eHgnLCAnZGVwdEluZm8nLCAnaWQ6eHh4JywgJ25hbWUnXVxyXG4gICAqIFVEVDogWydpZDp4eHgnLCAndXBkYXRlSW5mbycsICc6JywgJ2NyZWF0ZWRPbiddXHJcbiAgICog5LuO6KGo77yaWydpZDp4eHgnLCAnZWR1cycsICdpZDp4eHgnLCAnbmFtZSddLFxyXG4gICAqIOS7juS7juihqO+8mlsnaWQ6eHh4JywgJ2VkdXMnLCAnaWQ6eHh4JywgJ2dyYWRlcycsICdpZDp4eHgnLCAnbmFtZSddXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0VG9FbnRpdHlQYXRoQXJyYXkocGF0aDogc3RyaW5nLCBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aEFycmF5OiBzdHJpbmdbXSA9IHRoaXMuY29udmVydFRvQmluZGluZ1BhdGhBcnJheShwYXRoKTtcclxuICAgIGNvbnN0IGVudGl0eVBhdGhBcnJheTogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBpZiAoYmluZGluZ1BhdGhBcnJheS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIGVudGl0eVBhdGhBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmoLnoioLngrlcclxuICAgIGxldCBjdXJyZW50QmluZGluZ09iamVjdCA9IGJpbmRpbmdEYXRhLmxpc3QuY3VycmVudEl0ZW07XHJcbiAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChcclxuICAgICAgdGhpcy5jcmVhdGVQcmltYXJ5S2V5UGF0aChjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5LCBjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5VmFsdWUpXHJcbiAgICApO1xyXG5cclxuICAgIGJpbmRpbmdQYXRoQXJyYXkuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wSW5mbyA9IFByb3BlcnR5VXRpbC5nZXRQcm9wZXJ0eUJ5TmFtZShjdXJyZW50QmluZGluZ09iamVjdC5wcm9wZXJ0aWVzLCBwcm9wTmFtZSk7XHJcbiAgICAgIHN3aXRjaCAocHJvcEluZm8udHlwZSkge1xyXG4gICAgICAgIGNhc2UgQmluZGluZ1Byb3BlcnR5VHlwZS5QbGFpbjpcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKHByb3BOYW1lKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQmluZGluZ1Byb3BlcnR5VHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICBjdXJyZW50QmluZGluZ09iamVjdCA9IGN1cnJlbnRCaW5kaW5nT2JqZWN0W3Byb3BOYW1lXTtcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKHByb3BOYW1lKTtcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKFxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByaW1hcnlLZXlQYXRoKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXksIGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXlWYWx1ZSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJpbmRpbmdQcm9wZXJ0eVR5cGUuTGlzdDpcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRCaW5kaW5nTGlzdCA9IGN1cnJlbnRCaW5kaW5nT2JqZWN0W3Byb3BOYW1lXTtcclxuICAgICAgICAgIGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gY3VycmVudEJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgICAgICAgZW50aXR5UGF0aEFycmF5LnB1c2gocHJvcE5hbWUpO1xyXG4gICAgICAgICAgZW50aXR5UGF0aEFycmF5LnB1c2goXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJpbWFyeUtleVBhdGgoY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleSwgY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleVZhbHVlKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZW50aXR5UGF0aEFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5Li6UmVzdFVybOmHjOeahOi3r+W+hFxyXG4gICAqXHJcbiAgICog6L+U5Zue57uT5p6c77yaXHJcbiAgICog5Li76KGo77yIL++8ie+8mi9cclxuICAgKiDku47ooajvvIgvaml3dEVkdXPvvInvvJoveHh4L2ppd3RFZHVzXHJcbiAgICog5LuO5LuO6KGo77yIL2ppd3RFZHVzL2ppd3RHcmFkZXPvvInvvJogL3h4eC9qaXd0RWR1cy94eHgvaml3dEdyYWRlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvUmVzdFVybChwYXRoOiBzdHJpbmcsIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aEFycmF5OiBzdHJpbmdbXSA9IHRoaXMuY29udmVydFRvQmluZGluZ1BhdGhBcnJheShwYXRoKTtcclxuICAgIGNvbnN0IHJlc3RQYXRoQXJyYXk6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgbGV0IGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbTtcclxuICAgIHJlc3RQYXRoQXJyYXkucHVzaChjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5VmFsdWUpO1xyXG5cclxuICAgIGJpbmRpbmdQYXRoQXJyYXkuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wSW5mbyA9IFByb3BlcnR5VXRpbC5nZXRQcm9wZXJ0eUJ5TmFtZShjdXJyZW50QmluZGluZ09iamVjdC5wcm9wZXJ0aWVzLCBwcm9wTmFtZSk7XHJcbiAgICAgIGlmIChwcm9wSW5mby50eXBlICE9PSBCaW5kaW5nUHJvcGVydHlUeXBlLkxpc3QpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvcEluZm8ubmFtZX3kuI3mmK/lrZDooajlr7nlupTnmoTlsZ7mgKdgKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBjdXJyZW50QmluZGluZ0xpc3QgPSBjdXJyZW50QmluZGluZ09iamVjdFtwcm9wTmFtZV07XHJcbiAgICAgIGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gY3VycmVudEJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgICByZXN0UGF0aEFycmF5LnB1c2gocHJvcE5hbWUpO1xyXG4gICAgICByZXN0UGF0aEFycmF5LnB1c2goY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleVZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOenu+mZpOacgOWQjuS4gOS4quS4u+mUrlxyXG4gICAgcmVzdFBhdGhBcnJheS5wb3AoKTtcclxuICAgIHJldHVybiAnLycgKyByZXN0UGF0aEFycmF5LmpvaW4oJy8nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWPtuWtkOiKgueCueeahFBhdGhcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldExlYWZQYXRoKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwYXRoQXJyYXkgPSBEYXRhUGF0aFV0aWwuY29udmVydFRvQmluZGluZ1BhdGhBcnJheShwYXRoKTtcclxuICAgIHJldHVybiBwYXRoQXJyYXkucG9wKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bniLbot6/lvoRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFBhcmVudFBhdGgocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHBhdGhBcnJheSA9IERhdGFQYXRoVXRpbC5jb252ZXJ0VG9CaW5kaW5nUGF0aEFycmF5KHBhdGgpO1xyXG4gICAgcGF0aEFycmF5LnBvcCgpO1xyXG4gICAgcmV0dXJuICcvJyArIHBhdGhBcnJheS5qb2luKCcvJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rot6/lvoTkuK3nmoTkuLvplK7pg6jliIZcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVQcmltYXJ5S2V5UGF0aChwcmltYXJ5S2V5OiBzdHJpbmcsIHByaW1hcnlLZXlWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gYCR7cHJpbWFyeUtleX06JHtwcmltYXJ5S2V5VmFsdWV9YDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IERhdGFQYXRoVXRpbCB9O1xyXG4iXX0=