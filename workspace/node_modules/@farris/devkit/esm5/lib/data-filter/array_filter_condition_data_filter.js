import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DataFilter } from './data_filter';
var ArrayFilterConditionDataFilter = /** @class */ (function (_super) {
    tslib_1.__extends(ArrayFilterConditionDataFilter, _super);
    function ArrayFilterConditionDataFilter() {
        return _super.call(this) || this;
    }
    ArrayFilterConditionDataFilter.prototype.filter = function (data, conditions) {
        var _this = this;
        if (data && data.size) {
            return data.filter(function (n) { return _this.validateRowData(n, conditions); });
        }
        return data;
    };
    ArrayFilterConditionDataFilter.prototype.validateRowData = function (bindingObject, conditions) {
        if (!conditions || conditions.length === 0) {
            return true;
        }
        return this.checkRowDataWithCondition(bindingObject, conditions);
    };
    ArrayFilterConditionDataFilter.prototype.checkRowDataWithCondition = function (bindingObject, conditions) {
        var _this = this;
        var resultObj = null;
        if (conditions) {
            resultObj = {};
            conditions.forEach(function (condition) {
                var field = condition.FilterField;
                var fieldValue = _this.getValue(bindingObject, field);
                var bindingProperty = bindingObject.properties.find(function (item) { return item.name === field; });
                if (bindingProperty && bindingProperty.enableMultiLangInput && fieldValue) {
                    fieldValue = fieldValue[_this.getCurrentLanguage()];
                }
                var where = condition;
                var Value = where.Value, operator1 = where.Compare;
                if (where) {
                    var r = _this.getCompareResult(fieldValue, operator1, Value);
                    if (resultObj[field] === undefined) {
                        resultObj[field] = [r];
                    }
                    else {
                        resultObj[field].push(r);
                    }
                }
            });
        }
        // return this.checkAllFieldResult(resultObj);
        var fields = Object.keys(resultObj);
        var result = [];
        fields.forEach(function (f) {
            var _filters = conditions.filter(function (n) { return n.FilterField === f; });
            if (resultObj[f].length === 1) {
                result.push(resultObj[f][0]);
            }
            else {
                if (_filters[0].Relation === 1 && resultObj[f].length === 2) { // and
                    result.push(resultObj[f][0] && resultObj[f][1]);
                }
                else { // or
                    result.push(resultObj[f].indexOf(true) > -1);
                }
            }
        });
        return result.indexOf(false) === -1;
    };
    ArrayFilterConditionDataFilter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ArrayFilterConditionDataFilter.ctorParameters = function () { return []; };
    return ArrayFilterConditionDataFilter;
}(DataFilter));
export { ArrayFilterConditionDataFilter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlfZmlsdGVyX2NvbmRpdGlvbl9kYXRhX2ZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2RhdGEtZmlsdGVyL2FycmF5X2ZpbHRlcl9jb25kaXRpb25fZGF0YV9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQztJQUNvRCwwREFBVTtJQUM1RDtlQUNFLGlCQUFPO0lBQ1QsQ0FBQztJQUNNLCtDQUFNLEdBQWIsVUFBYyxJQUF5QixFQUFFLFVBQTZCO1FBQXRFLGlCQUtDO1FBSkMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ00sd0RBQWUsR0FBdEIsVUFBdUIsYUFBNEIsRUFBRSxVQUFlO1FBQ2xFLElBQUksQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ08sa0VBQXlCLEdBQWpDLFVBQWtDLGFBQTRCLEVBQUUsVUFBVTtRQUExRSxpQkF3Q0M7UUF2Q0MsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksVUFBVSxFQUFFO1lBQ2QsU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUNmLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFTO2dCQUMzQixJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO2dCQUNwQyxJQUFJLFVBQVUsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDckQsSUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO2dCQUNyRixJQUFJLGVBQWUsSUFBSSxlQUFlLENBQUMsb0JBQW9CLElBQUksVUFBVSxFQUFFO29CQUN6RSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7aUJBQ3BEO2dCQUNELElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQztnQkFDaEIsSUFBQSxtQkFBSyxFQUFFLHlCQUFrQixDQUFXO2dCQUM1QyxJQUFJLEtBQUssRUFBRTtvQkFDVCxJQUFNLENBQUMsR0FBRyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFDOUQsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxFQUFFO3dCQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDeEI7eUJBQU07d0JBQ0wsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDMUI7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsOENBQThDO1FBQzlDLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEMsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDO1lBQ2YsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxXQUFXLEtBQUssQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7WUFDL0QsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTTtvQkFDbkUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2pEO3FCQUFNLEVBQUUsS0FBSztvQkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDOUM7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7O2dCQXpERixVQUFVOzs7O0lBMERYLHFDQUFDO0NBQUEsQUExREQsQ0FDb0QsVUFBVSxHQXlEN0Q7U0F6RFksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhRmlsdGVyIH0gZnJvbSAnLi9kYXRhX2ZpbHRlcic7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBcnJheUZpbHRlckNvbmRpdGlvbkRhdGFGaWx0ZXIgZXh0ZW5kcyBEYXRhRmlsdGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBmaWx0ZXIoZGF0YTogTGlzdDxCaW5kaW5nT2JqZWN0PiwgY29uZGl0aW9uczogRmlsdGVyQ29uZGl0aW9uW10pIHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEuc2l6ZSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5maWx0ZXIoKG4pID0+IHRoaXMudmFsaWRhdGVSb3dEYXRhKG4sIGNvbmRpdGlvbnMpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxuICBwdWJsaWMgdmFsaWRhdGVSb3dEYXRhKGJpbmRpbmdPYmplY3Q6IEJpbmRpbmdPYmplY3QsIGNvbmRpdGlvbnM6IGFueSkge1xyXG4gICAgaWYgKCFjb25kaXRpb25zIHx8IGNvbmRpdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tSb3dEYXRhV2l0aENvbmRpdGlvbihiaW5kaW5nT2JqZWN0LCBjb25kaXRpb25zKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBjaGVja1Jvd0RhdGFXaXRoQ29uZGl0aW9uKGJpbmRpbmdPYmplY3Q6IEJpbmRpbmdPYmplY3QsIGNvbmRpdGlvbnMpIHtcclxuICAgIGxldCByZXN1bHRPYmogPSBudWxsO1xyXG4gICAgaWYgKGNvbmRpdGlvbnMpIHtcclxuICAgICAgcmVzdWx0T2JqID0ge307XHJcbiAgICAgIGNvbmRpdGlvbnMuZm9yRWFjaCgoY29uZGl0aW9uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmllbGQgPSBjb25kaXRpb24uRmlsdGVyRmllbGQ7XHJcbiAgICAgICAgbGV0IGZpZWxkVmFsdWUgPSB0aGlzLmdldFZhbHVlKGJpbmRpbmdPYmplY3QsIGZpZWxkKTtcclxuICAgICAgICBjb25zdCBiaW5kaW5nUHJvcGVydHkgPSBiaW5kaW5nT2JqZWN0LnByb3BlcnRpZXMuZmluZCgoaXRlbSkgPT4gaXRlbS5uYW1lID09PSBmaWVsZCk7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdQcm9wZXJ0eSAmJiBiaW5kaW5nUHJvcGVydHkuZW5hYmxlTXVsdGlMYW5nSW5wdXQgJiYgZmllbGRWYWx1ZSkge1xyXG4gICAgICAgICAgZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWVbdGhpcy5nZXRDdXJyZW50TGFuZ3VhZ2UoKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHdoZXJlID0gY29uZGl0aW9uO1xyXG4gICAgICAgIGNvbnN0IHsgVmFsdWUsIENvbXBhcmU6IG9wZXJhdG9yMSB9ID0gd2hlcmU7XHJcbiAgICAgICAgaWYgKHdoZXJlKSB7XHJcbiAgICAgICAgICBjb25zdCByID0gdGhpcy5nZXRDb21wYXJlUmVzdWx0KGZpZWxkVmFsdWUsIG9wZXJhdG9yMSwgVmFsdWUpO1xyXG4gICAgICAgICAgaWYgKHJlc3VsdE9ialtmaWVsZF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXN1bHRPYmpbZmllbGRdID0gW3JdO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0T2JqW2ZpZWxkXS5wdXNoKHIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyByZXR1cm4gdGhpcy5jaGVja0FsbEZpZWxkUmVzdWx0KHJlc3VsdE9iaik7XHJcbiAgICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyhyZXN1bHRPYmopO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBmaWVsZHMuZm9yRWFjaCgoZikgPT4ge1xyXG4gICAgICBjb25zdCBfZmlsdGVycyA9IGNvbmRpdGlvbnMuZmlsdGVyKChuKSA9PiBuLkZpbHRlckZpZWxkID09PSBmKTtcclxuICAgICAgaWYgKHJlc3VsdE9ialtmXS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICByZXN1bHQucHVzaChyZXN1bHRPYmpbZl1bMF0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChfZmlsdGVyc1swXS5SZWxhdGlvbiA9PT0gMSAmJiByZXN1bHRPYmpbZl0ubGVuZ3RoID09PSAyKSB7IC8vIGFuZFxyXG4gICAgICAgICAgcmVzdWx0LnB1c2gocmVzdWx0T2JqW2ZdWzBdICYmIHJlc3VsdE9ialtmXVsxXSk7XHJcbiAgICAgICAgfSBlbHNlIHsgLy8gb3JcclxuICAgICAgICAgIHJlc3VsdC5wdXNoKHJlc3VsdE9ialtmXS5pbmRleE9mKHRydWUpID4gLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdC5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XHJcbiAgfVxyXG59XHJcbiJdfQ==