import { Injectable } from '@angular/core';
import { Compare } from './types';
var DataFilter = /** @class */ (function () {
    function DataFilter() {
    }
    DataFilter.prototype.getCurrentLanguage = function () {
        return window.localStorage.getItem('languageCode') || 'zh-CHS';
    };
    DataFilter.prototype.getCompareResult = function (fieldDataValue, operator, targetValue) {
        var op = parseInt('' + operator, 10);
        switch (op) {
            case Compare.Equal:
                return fieldDataValue == targetValue;
            case Compare.NotEqual:
                return ('' + fieldDataValue).toLowerCase() !== ('' + targetValue).toLowerCase();
            case Compare.Greater:
                return fieldDataValue > targetValue;
            case Compare.GreaterOrEqual:
                return fieldDataValue >= targetValue;
            case Compare.Less:
                return fieldDataValue < targetValue;
            case Compare.LessOrEqual:
                return fieldDataValue <= targetValue;
            case Compare.Like:
                return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) > -1;
            case Compare.NotLike:
                return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) === -1;
            case Compare.In:
                targetValue = targetValue || [];
                return targetValue.findIndex(function (n) { return n == fieldDataValue; }) > -1;
            case 1001: // Empty
                return fieldDataValue === '' || fieldDataValue === null;
            case 1002: // NotEmpty
                return fieldDataValue !== '' && fieldDataValue !== null;
            case 1003: // Null
                return fieldDataValue === null;
            case 1004: // NotNull
                return fieldDataValue !== null;
        }
    };
    DataFilter.prototype.getValue = function (object, propertyName) {
        return propertyName.split('.').filter(function (p) { return p; }).reduce(function (result, property) {
            if (result) {
                return result[property] === undefined ? null : result[property];
            }
            else {
                return null;
            }
        }, object);
    };
    DataFilter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataFilter.ctorParameters = function () { return []; };
    return DataFilter;
}());
export { DataFilter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLWZpbHRlci9kYXRhX2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQTBDLE1BQU0sU0FBUyxDQUFDO0FBSTFFO0lBRUU7SUFBZ0IsQ0FBQztJQUVQLHVDQUFrQixHQUE1QjtRQUNFLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksUUFBUSxDQUFDO0lBQ2pFLENBQUM7SUFDTSxxQ0FBZ0IsR0FBdkIsVUFBd0IsY0FBbUIsRUFBRSxRQUFpQixFQUFFLFdBQWdCO1FBQzlFLElBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLFFBQVEsRUFBRSxFQUFFO1lBQ1YsS0FBSyxPQUFPLENBQUMsS0FBSztnQkFDaEIsT0FBTyxjQUFjLElBQUksV0FBVyxDQUFDO1lBQ3ZDLEtBQUssT0FBTyxDQUFDLFFBQVE7Z0JBQ25CLE9BQU8sQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEYsS0FBSyxPQUFPLENBQUMsT0FBTztnQkFDbEIsT0FBTyxjQUFjLEdBQUcsV0FBVyxDQUFDO1lBQ3RDLEtBQUssT0FBTyxDQUFDLGNBQWM7Z0JBQ3pCLE9BQU8sY0FBYyxJQUFJLFdBQVcsQ0FBQztZQUN2QyxLQUFLLE9BQU8sQ0FBQyxJQUFJO2dCQUNmLE9BQU8sY0FBYyxHQUFHLFdBQVcsQ0FBQztZQUN0QyxLQUFLLE9BQU8sQ0FBQyxXQUFXO2dCQUN0QixPQUFPLGNBQWMsSUFBSSxXQUFXLENBQUM7WUFDdkMsS0FBSyxPQUFPLENBQUMsSUFBSTtnQkFDZixPQUFPLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNyRixLQUFLLE9BQU8sQ0FBQyxPQUFPO2dCQUNsQixPQUFPLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN2RixLQUFLLE9BQU8sQ0FBQyxFQUFFO2dCQUNiLFdBQVcsR0FBRyxXQUFXLElBQUksRUFBRSxDQUFDO2dCQUNoQyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLElBQUksY0FBYyxFQUFuQixDQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDaEUsS0FBSyxJQUFJLEVBQUUsUUFBUTtnQkFDakIsT0FBTyxjQUFjLEtBQUssRUFBRSxJQUFJLGNBQWMsS0FBSyxJQUFJLENBQUM7WUFDMUQsS0FBSyxJQUFJLEVBQUUsV0FBVztnQkFDcEIsT0FBTyxjQUFjLEtBQUssRUFBRSxJQUFJLGNBQWMsS0FBSyxJQUFJLENBQUM7WUFDMUQsS0FBSyxJQUFJLEVBQUUsT0FBTztnQkFDaEIsT0FBTyxjQUFjLEtBQUssSUFBSSxDQUFDO1lBQ2pDLEtBQUssSUFBSSxFQUFFLFVBQVU7Z0JBQ25CLE9BQU8sY0FBYyxLQUFLLElBQUksQ0FBQztTQUNsQztJQUNILENBQUM7SUFDTSw2QkFBUSxHQUFmLFVBQWdCLE1BQVcsRUFBRSxZQUFvQjtRQUMvQyxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxFQUFELENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQVcsRUFBRSxRQUFnQjtZQUNqRixJQUFJLE1BQU0sRUFBRTtnQkFDVixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2pFO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDO2FBQ2I7UUFDSCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDYixDQUFDOztnQkEvQ0YsVUFBVTs7OztJQWdEWCxpQkFBQztDQUFBLEFBaERELElBZ0RDO1NBL0NxQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21wYXJlLCBGaWx0ZXJDb25kaXRpb24sIE9iamVjdEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEYXRhRmlsdGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gIGFic3RyYWN0IGZpbHRlcihkYXRhOiBMaXN0PEJpbmRpbmdPYmplY3Q+LCBjb25kaXRpb25zOiBBcnJheTxGaWx0ZXJDb25kaXRpb24+IHwgT2JqZWN0RmlsdGVyQ29uZGl0aW9uKTtcclxuICBwcm90ZWN0ZWQgZ2V0Q3VycmVudExhbmd1YWdlKCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJykgfHwgJ3poLUNIUyc7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXRDb21wYXJlUmVzdWx0KGZpZWxkRGF0YVZhbHVlOiBhbnksIG9wZXJhdG9yOiBDb21wYXJlLCB0YXJnZXRWYWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCBvcCA9IHBhcnNlSW50KCcnICsgb3BlcmF0b3IsIDEwKTtcclxuICAgIHN3aXRjaCAob3ApIHtcclxuICAgICAgY2FzZSBDb21wYXJlLkVxdWFsOlxyXG4gICAgICAgIHJldHVybiBmaWVsZERhdGFWYWx1ZSA9PSB0YXJnZXRWYWx1ZTtcclxuICAgICAgY2FzZSBDb21wYXJlLk5vdEVxdWFsOlxyXG4gICAgICAgIHJldHVybiAoJycgKyBmaWVsZERhdGFWYWx1ZSkudG9Mb3dlckNhc2UoKSAhPT0gKCcnICsgdGFyZ2V0VmFsdWUpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGNhc2UgQ29tcGFyZS5HcmVhdGVyOlxyXG4gICAgICAgIHJldHVybiBmaWVsZERhdGFWYWx1ZSA+IHRhcmdldFZhbHVlO1xyXG4gICAgICBjYXNlIENvbXBhcmUuR3JlYXRlck9yRXF1YWw6XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlID49IHRhcmdldFZhbHVlO1xyXG4gICAgICBjYXNlIENvbXBhcmUuTGVzczpcclxuICAgICAgICByZXR1cm4gZmllbGREYXRhVmFsdWUgPCB0YXJnZXRWYWx1ZTtcclxuICAgICAgY2FzZSBDb21wYXJlLkxlc3NPckVxdWFsOlxyXG4gICAgICAgIHJldHVybiBmaWVsZERhdGFWYWx1ZSA8PSB0YXJnZXRWYWx1ZTtcclxuICAgICAgY2FzZSBDb21wYXJlLkxpa2U6XHJcbiAgICAgICAgcmV0dXJuICgnJyArIGZpZWxkRGF0YVZhbHVlKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGFyZ2V0VmFsdWUudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuICAgICAgY2FzZSBDb21wYXJlLk5vdExpa2U6XHJcbiAgICAgICAgcmV0dXJuICgnJyArIGZpZWxkRGF0YVZhbHVlKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGFyZ2V0VmFsdWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xyXG4gICAgICBjYXNlIENvbXBhcmUuSW46XHJcbiAgICAgICAgdGFyZ2V0VmFsdWUgPSB0YXJnZXRWYWx1ZSB8fCBbXTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0VmFsdWUuZmluZEluZGV4KChuKSA9PiBuID09IGZpZWxkRGF0YVZhbHVlKSA+IC0xO1xyXG4gICAgICBjYXNlIDEwMDE6IC8vIEVtcHR5XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlID09PSAnJyB8fCBmaWVsZERhdGFWYWx1ZSA9PT0gbnVsbDtcclxuICAgICAgY2FzZSAxMDAyOiAvLyBOb3RFbXB0eVxyXG4gICAgICAgIHJldHVybiBmaWVsZERhdGFWYWx1ZSAhPT0gJycgJiYgZmllbGREYXRhVmFsdWUgIT09IG51bGw7XHJcbiAgICAgIGNhc2UgMTAwMzogLy8gTnVsbFxyXG4gICAgICAgIHJldHVybiBmaWVsZERhdGFWYWx1ZSA9PT0gbnVsbDtcclxuICAgICAgY2FzZSAxMDA0OiAvLyBOb3ROdWxsXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRGF0YVZhbHVlICE9PSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuICBwdWJsaWMgZ2V0VmFsdWUob2JqZWN0OiBhbnksIHByb3BlcnR5TmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gcHJvcGVydHlOYW1lLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCkucmVkdWNlKChyZXN1bHQ6IGFueSwgcHJvcGVydHk6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFtwcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiByZXN1bHRbcHJvcGVydHldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9LCBvYmplY3QpO1xyXG4gIH1cclxufVxyXG4iXX0=