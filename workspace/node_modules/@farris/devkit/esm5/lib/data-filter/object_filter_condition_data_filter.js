import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DataFilter } from './data_filter';
var ObjectFilterConditionDataFilter = /** @class */ (function (_super) {
    tslib_1.__extends(ObjectFilterConditionDataFilter, _super);
    function ObjectFilterConditionDataFilter() {
        return _super.call(this) || this;
    }
    ObjectFilterConditionDataFilter.prototype.filter = function (data, conditions) {
        var _this = this;
        if (data && data.size) {
            return data.filter(function (row) { return _this.validateRowData(row, conditions); });
        }
        return data;
    };
    ObjectFilterConditionDataFilter.prototype.validateRowData = function (bindingObject, conditions) {
        if (!conditions || Object.keys(conditions).length === 0) {
            return true;
        }
        return this.checkAllFieldInRowData(bindingObject, conditions);
    };
    ObjectFilterConditionDataFilter.prototype.checkAllFieldInRowData = function (bindingObject, conditions) {
        var _this = this;
        var resultObj = null;
        var currentLanguage = this.getCurrentLanguage();
        if (conditions) {
            var fields = Object.keys(conditions);
            resultObj = {};
            fields.forEach(function (field) {
                var fieldValue = _this.getValue(bindingObject, field);
                var property = bindingObject.properties.find(function (item) { return item.name === field; });
                if (property && property.enableMultiLangInput && fieldValue) {
                    fieldValue = fieldValue[currentLanguage];
                }
                var where = conditions[field];
                var value1 = where.value1, operator1 = where.operator1, relation = where.relation, operator2 = where.operator2, value2 = where.value2;
                if (where) {
                    var result = _this.getCompareResult(fieldValue, operator1, value1);
                    resultObj[field] = result;
                    if (relation) {
                        var result2 = _this.getCompareResult(fieldValue, operator2, value2);
                        resultObj[field] = _this.getRelationResult(result, relation, result2);
                    }
                }
            });
        }
        return this.checkAllFieldResult(resultObj);
    };
    ObjectFilterConditionDataFilter.prototype.getRelationResult = function (result1, relation, result2) {
        var _relation = relation.toLowerCase();
        if (_relation === 'and') {
            return result1 && result2;
        }
        else {
            return result1 || result2;
        }
    };
    ObjectFilterConditionDataFilter.prototype.checkAllFieldResult = function (resultObj) {
        if (!resultObj) {
            return true;
        }
        return Object.values(resultObj).reduce(function (c, n) {
            return c && n;
        }, true);
    };
    ObjectFilterConditionDataFilter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ObjectFilterConditionDataFilter.ctorParameters = function () { return []; };
    return ObjectFilterConditionDataFilter;
}(DataFilter));
export { ObjectFilterConditionDataFilter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0X2ZpbHRlcl9jb25kaXRpb25fZGF0YV9maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLWZpbHRlci9vYmplY3RfZmlsdGVyX2NvbmRpdGlvbl9kYXRhX2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzNDO0lBQ3FELDJEQUFVO0lBQzdEO2VBQ0UsaUJBQU87SUFDVCxDQUFDO0lBQ00sZ0RBQU0sR0FBYixVQUFjLElBQXlCLEVBQUUsVUFBaUM7UUFBMUUsaUJBS0M7UUFKQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxFQUFyQyxDQUFxQyxDQUFDLENBQUM7U0FDcEU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTSx5REFBZSxHQUF0QixVQUF1QixhQUE0QixFQUFFLFVBQWlDO1FBQ3BGLElBQUksQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUNPLGdFQUFzQixHQUE5QixVQUErQixhQUE0QixFQUFFLFVBQWlDO1FBQTlGLGlCQTBCQztRQXpCQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbEQsSUFBSSxVQUFVLEVBQUU7WUFDZCxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3ZDLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDZixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztnQkFDbkIsSUFBSSxVQUFVLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3JELElBQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQW5CLENBQW1CLENBQUMsQ0FBQztnQkFDOUUsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLG9CQUFvQixJQUFJLFVBQVUsRUFBRTtvQkFDM0QsVUFBVSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztpQkFDMUM7Z0JBRUQsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN4QixJQUFBLHFCQUFNLEVBQUUsMkJBQVMsRUFBRSx5QkFBUSxFQUFFLDJCQUFTLEVBQUUscUJBQU0sQ0FBVztnQkFDakUsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsSUFBTSxNQUFNLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ3BFLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUM7b0JBQzFCLElBQUksUUFBUSxFQUFFO3dCQUNaLElBQU0sT0FBTyxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3dCQUNyRSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7cUJBQ3RFO2lCQUNGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDTywyREFBaUIsR0FBekIsVUFBMEIsT0FBZ0IsRUFBRSxRQUFzQixFQUFFLE9BQWdCO1FBQ2xGLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6QyxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7WUFDdkIsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDO1NBQzNCO2FBQU07WUFDTCxPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBQ08sNkRBQW1CLEdBQTNCLFVBQTRCLFNBQXFDO1FBQy9ELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDWCxDQUFDOztnQkEzREYsVUFBVTs7OztJQTREWCxzQ0FBQztDQUFBLEFBNURELENBQ3FELFVBQVUsR0EyRDlEO1NBM0RZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YUZpbHRlciB9IGZyb20gJy4vZGF0YV9maWx0ZXInO1xyXG5pbXBvcnQgeyBPYmplY3RGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XHJcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RmlsdGVyQ29uZGl0aW9uRGF0YUZpbHRlciBleHRlbmRzIERhdGFGaWx0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcbiAgcHVibGljIGZpbHRlcihkYXRhOiBMaXN0PEJpbmRpbmdPYmplY3Q+LCBjb25kaXRpb25zOiBPYmplY3RGaWx0ZXJDb25kaXRpb24pIHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEuc2l6ZSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5maWx0ZXIoKHJvdykgPT4gdGhpcy52YWxpZGF0ZVJvd0RhdGEocm93LCBjb25kaXRpb25zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbiAgcHVibGljIHZhbGlkYXRlUm93RGF0YShiaW5kaW5nT2JqZWN0OiBCaW5kaW5nT2JqZWN0LCBjb25kaXRpb25zOiBPYmplY3RGaWx0ZXJDb25kaXRpb24pIHtcclxuICAgIGlmICghY29uZGl0aW9ucyB8fCBPYmplY3Qua2V5cyhjb25kaXRpb25zKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5jaGVja0FsbEZpZWxkSW5Sb3dEYXRhKGJpbmRpbmdPYmplY3QsIGNvbmRpdGlvbnMpO1xyXG4gIH1cclxuICBwcml2YXRlIGNoZWNrQWxsRmllbGRJblJvd0RhdGEoYmluZGluZ09iamVjdDogQmluZGluZ09iamVjdCwgY29uZGl0aW9uczogT2JqZWN0RmlsdGVyQ29uZGl0aW9uKSB7XHJcbiAgICBsZXQgcmVzdWx0T2JqID0gbnVsbDtcclxuICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9IHRoaXMuZ2V0Q3VycmVudExhbmd1YWdlKCk7XHJcbiAgICBpZiAoY29uZGl0aW9ucykge1xyXG4gICAgICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyhjb25kaXRpb25zKTtcclxuICAgICAgcmVzdWx0T2JqID0ge307XHJcbiAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xyXG4gICAgICAgIGxldCBmaWVsZFZhbHVlID0gdGhpcy5nZXRWYWx1ZShiaW5kaW5nT2JqZWN0LCBmaWVsZCk7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSBiaW5kaW5nT2JqZWN0LnByb3BlcnRpZXMuZmluZCgoaXRlbSkgPT4gaXRlbS5uYW1lID09PSBmaWVsZCk7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmVuYWJsZU11bHRpTGFuZ0lucHV0ICYmIGZpZWxkVmFsdWUpIHtcclxuICAgICAgICAgIGZpZWxkVmFsdWUgPSBmaWVsZFZhbHVlW2N1cnJlbnRMYW5ndWFnZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB3aGVyZSA9IGNvbmRpdGlvbnNbZmllbGRdO1xyXG4gICAgICAgIGNvbnN0IHsgdmFsdWUxLCBvcGVyYXRvcjEsIHJlbGF0aW9uLCBvcGVyYXRvcjIsIHZhbHVlMiB9ID0gd2hlcmU7XHJcbiAgICAgICAgaWYgKHdoZXJlKSB7XHJcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldENvbXBhcmVSZXN1bHQoZmllbGRWYWx1ZSwgb3BlcmF0b3IxLCB2YWx1ZTEpO1xyXG4gICAgICAgICAgcmVzdWx0T2JqW2ZpZWxkXSA9IHJlc3VsdDtcclxuICAgICAgICAgIGlmIChyZWxhdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQyID0gdGhpcy5nZXRDb21wYXJlUmVzdWx0KGZpZWxkVmFsdWUsIG9wZXJhdG9yMiwgdmFsdWUyKTtcclxuICAgICAgICAgICAgcmVzdWx0T2JqW2ZpZWxkXSA9IHRoaXMuZ2V0UmVsYXRpb25SZXN1bHQocmVzdWx0LCByZWxhdGlvbiwgcmVzdWx0Mik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmNoZWNrQWxsRmllbGRSZXN1bHQocmVzdWx0T2JqKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRSZWxhdGlvblJlc3VsdChyZXN1bHQxOiBib29sZWFuLCByZWxhdGlvbjogJ2FuZCcgfCAnb3InLCByZXN1bHQyOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBfcmVsYXRpb24gPSByZWxhdGlvbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKF9yZWxhdGlvbiA9PT0gJ2FuZCcpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDEgJiYgcmVzdWx0MjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQxIHx8IHJlc3VsdDI7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgY2hlY2tBbGxGaWVsZFJlc3VsdChyZXN1bHRPYmo6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KSB7XHJcbiAgICBpZiAoIXJlc3VsdE9iaikge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdE9iaikucmVkdWNlKChjLCBuKSA9PiB7XHJcbiAgICAgIHJldHVybiBjICYmIG47XHJcbiAgICB9LCB0cnVlKTtcclxuICB9XHJcbn1cclxuIl19