/**
 * 组件实例管理
 */
var ComponentRefManager = /** @class */ (function () {
    function ComponentRefManager() {
        this.components = new Map();
    }
    /**
     * 增加组件实例
     * @param id
     * @param component
     */
    ComponentRefManager.prototype.add = function (id, component) {
        var components = this.components.get(id);
        if (components) {
            components.push(component);
        }
        else {
            this.components.set(id, [component]);
        }
    };
    /**
     * 删除组件实例
     * @param id
     */
    ComponentRefManager.prototype.remove = function (id) {
        var components = this.components.get(id);
        if (components && components.length > 0) {
            components.length = 0;
            this.components.delete(id);
        }
    };
    /**
     * 通过id获取组件实例
     * @param id
     * @returns
     */
    ComponentRefManager.prototype.get = function (id) {
        if (id) {
            var components = this.components.get(id);
            if (components && components.length > 0) {
                return components;
            }
        }
        return null;
    };
    /**
     * 是否包含id的组件
     * @param id
     * @returns
     */
    ComponentRefManager.prototype.has = function (id) {
        return this.components.has(id);
    };
    /**
     * 清空
     */
    ComponentRefManager.prototype.clear = function () {
        this.components.clear();
    };
    /**
     * 获取指定类型的组件
     * @param componentType
     * @returns
     */
    ComponentRefManager.prototype.getComponentByType = function (componentType) {
        var containers = Array.from(this.components.values());
        var component = null;
        for (var containerIndex = 0; containers && containerIndex < containers.length; containerIndex++) {
            var components = containers[containerIndex];
            for (var index = 0; components && index < components.length; index++) {
                if (components[index] instanceof componentType) {
                    component = components[index];
                    break;
                }
            }
        }
        return component;
    };
    return ComponentRefManager;
}());
export { ComponentRefManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X3JlZl9tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZnJhbWUvY29tcG9uZW50X3JlZl9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOztHQUVHO0FBQ0g7SUFBQTtRQUNVLGVBQVUsR0FBdUIsSUFBSSxHQUFHLEVBQWlCLENBQUM7SUF3RXBFLENBQUM7SUF2RUM7Ozs7T0FJRztJQUNJLGlDQUFHLEdBQVYsVUFBVyxFQUFVLEVBQUUsU0FBYztRQUNuQyxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQyxJQUFJLFVBQVUsRUFBRTtZQUNkLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ksb0NBQU0sR0FBYixVQUFjLEVBQVU7UUFDdEIsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNJLGlDQUFHLEdBQVYsVUFBVyxFQUFVO1FBQ25CLElBQUksRUFBRSxFQUFFO1lBQ04sSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDM0MsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZDLE9BQU8sVUFBVSxDQUFDO2FBQ25CO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRDs7OztPQUlHO0lBQ0ksaUNBQUcsR0FBVixVQUFXLEVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSSxtQ0FBSyxHQUFaO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNJLGdEQUFrQixHQUF6QixVQUEwQixhQUFrQjtRQUMxQyxJQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDckIsS0FBSyxJQUFJLGNBQWMsR0FBRyxDQUFDLEVBQUUsVUFBVSxJQUFJLGNBQWMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxFQUFFO1lBQy9GLElBQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM5QyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxVQUFVLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BFLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLGFBQWEsRUFBRTtvQkFDOUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDOUIsTUFBTTtpQkFDUDthQUNGO1NBQ0Y7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBekVELElBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIOe7hOS7tuWunuS+i+euoeeQhlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFJlZk1hbmFnZXIge1xyXG4gIHByaXZhdGUgY29tcG9uZW50czogTWFwPHN0cmluZywgYW55W10+ID0gbmV3IE1hcDxzdHJpbmcsIGFueVtdPigpO1xyXG4gIC8qKlxyXG4gICAqIOWinuWKoOe7hOS7tuWunuS+i1xyXG4gICAqIEBwYXJhbSBpZCBcclxuICAgKiBAcGFyYW0gY29tcG9uZW50IFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGQoaWQ6IHN0cmluZywgY29tcG9uZW50OiBhbnkpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMuZ2V0KGlkKTtcclxuICAgIGlmIChjb21wb25lbnRzKSB7XHJcbiAgICAgIGNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jb21wb25lbnRzLnNldChpZCwgW2NvbXBvbmVudF0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDliKDpmaTnu4Tku7blrp7kvotcclxuICAgKiBAcGFyYW0gaWQgXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZShpZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLmdldChpZCk7XHJcbiAgICBpZiAoY29tcG9uZW50cyAmJiBjb21wb25lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29tcG9uZW50cy5sZW5ndGggPSAwO1xyXG4gICAgICB0aGlzLmNvbXBvbmVudHMuZGVsZXRlKGlkKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog6YCa6L+HaWTojrflj5bnu4Tku7blrp7kvotcclxuICAgKiBAcGFyYW0gaWQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGdldChpZDogc3RyaW5nKSB7XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgY29uc3QgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cy5nZXQoaWQpO1xyXG4gICAgICBpZiAoY29tcG9uZW50cyAmJiBjb21wb25lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXR1cm4gY29tcG9uZW50cztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuWMheWQq2lk55qE57uE5Lu2XHJcbiAgICogQHBhcmFtIGlkIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYXMoaWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5oYXMoaWQpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmuIXnqbpcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICB0aGlzLmNvbXBvbmVudHMuY2xlYXIoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5oyH5a6a57G75Z6L55qE57uE5Lu2XHJcbiAgICogQHBhcmFtIGNvbXBvbmVudFR5cGUgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGdldENvbXBvbmVudEJ5VHlwZShjb21wb25lbnRUeXBlOiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgY29udGFpbmVycyA9IEFycmF5LmZyb20odGhpcy5jb21wb25lbnRzLnZhbHVlcygpKTtcclxuICAgIGxldCBjb21wb25lbnQgPSBudWxsO1xyXG4gICAgZm9yIChsZXQgY29udGFpbmVySW5kZXggPSAwOyBjb250YWluZXJzICYmIGNvbnRhaW5lckluZGV4IDwgY29udGFpbmVycy5sZW5ndGg7IGNvbnRhaW5lckluZGV4KyspIHtcclxuICAgICAgY29uc3QgY29tcG9uZW50cyA9IGNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xyXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGNvbXBvbmVudHMgJiYgaW5kZXggPCBjb21wb25lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgIGlmIChjb21wb25lbnRzW2luZGV4XSBpbnN0YW5jZW9mIGNvbXBvbmVudFR5cGUpIHtcclxuICAgICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaW5kZXhdO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gIH1cclxufSJdfQ==