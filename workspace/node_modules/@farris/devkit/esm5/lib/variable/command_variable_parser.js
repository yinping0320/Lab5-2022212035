/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { CommandContext } from '../command/index';
/**
 * 命令变量解析
 * {COMMAND~/params/key}
 * {COMMAND~/results/taskName}
 */
var CommandVariableParser = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CommandVariableParser() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    CommandVariableParser.prototype.parse = function (expression, context) {
        var _this = this;
        var paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === "{COMMAND~" + paths[0] + "}") {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(function (path) {
            var searchValue = "{COMMAND~" + path + "}";
            var replaceValue = _this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    };
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    CommandVariableParser.prototype.extractPaths = function (expression) {
        var paths = [];
        // 查找所有的uiState变量字符串
        var UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
        var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        var UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
        uiStateVariables.forEach(function (sessionVariable) {
            var pathMatches = sessionVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    };
    /**
     * 获取UIState
     */
    CommandVariableParser.prototype.getValue = function (path, context) {
        if (context instanceof CommandContext === false) {
            throw new Error('当前上下文不支持COMMAND变量，请检查！');
        }
        var parts = path.split('/').filter(function (part) {
            return part !== '';
        });
        var type = parts.shift();
        if (type === 'params') {
            var paramKey = parts.shift();
            return context.command.params[paramKey];
        }
        else if (type === 'results') {
            return parts.reduce(function (results, paramKey) {
                return results && results[paramKey];
            }, context.results);
        }
    };
    CommandVariableParser.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandVariableParser.ctorParameters = function () { return []; };
    return CommandVariableParser;
}());
export { CommandVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9jb21tYW5kX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdsRDs7OztHQUlHO0FBQ0g7SUFHRTs7T0FFRztJQUNIO0lBQ0EsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxxQ0FBSyxHQUFaLFVBQWEsVUFBa0IsRUFBRSxPQUFZO1FBQTdDLGlCQWdCQztRQWZDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUMsZ0JBQWdCO1FBQ2hCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksVUFBVSxLQUFLLGNBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFHLEVBQUU7WUFDaEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztRQUVELGVBQWU7UUFDZixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNoQixJQUFNLFdBQVcsR0FBRyxjQUFZLElBQUksTUFBRyxDQUFDO1lBQ3hDLElBQU0sWUFBWSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xELFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSyw0Q0FBWSxHQUFwQixVQUFxQixVQUFrQjtRQUNyQyxJQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7UUFFM0Isb0JBQW9CO1FBQ3BCLElBQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUM7UUFDakQsSUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDN0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELFVBQVU7UUFDVixJQUFNLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDO1FBQzlDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFBLGVBQWU7WUFDdEMsSUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSyx3Q0FBUSxHQUFoQixVQUFpQixJQUFZLEVBQUUsT0FBWTtRQUN6QyxJQUFJLE9BQU8sWUFBWSxjQUFjLEtBQUssS0FBSyxFQUFFO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUMzQztRQUNELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBWTtZQUNoRCxPQUFPLElBQUksS0FBSyxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0IsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ3JCLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMvQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pDO2FBQU0sSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE9BQVksRUFBRSxRQUFnQjtnQkFDakQsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDOztnQkE3RUYsVUFBVTs7OztJQThFWCw0QkFBQztDQUFBLEFBOUVELElBOEVDO0FBRUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogc2Vzc2lvbuWPmOmHj+ino+aekFxyXG4gKiBAYXV0aG9yIFdpdHQgPGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1hbmRDb250ZXh0IH0gZnJvbSAnLi4vY29tbWFuZC9pbmRleCc7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VyIH0gZnJvbSAnLi92YXJpYWJsZV9wYXJzZXInO1xyXG5cclxuLyoqXHJcbiAqIOWRveS7pOWPmOmHj+ino+aekFxyXG4gKiB7Q09NTUFORH4vcGFyYW1zL2tleX1cclxuICoge0NPTU1BTkR+L3Jlc3VsdHMvdGFza05hbWV9XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIENvbW1hbmRWYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5p6Q5Y+Y6YePXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g5Y+Y6YeP77ya5qC85byP5b2i5aaC77yaL2ZyYW1lSWQvY29tcG9uZW50SWQvc3RhdGVOYW1lXHJcbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnNlKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHBhdGhzID0gdGhpcy5leHRyYWN0UGF0aHMoZXhwcmVzc2lvbik7XHJcblxyXG4gICAgLy8gMeOAgeWNleS4queahOihqOi+vuW8j++8muebtOaOpeaxguWAvFxyXG4gICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMSAmJiBleHByZXNzaW9uID09PSBge0NPTU1BTkR+JHtwYXRoc1swXX19YCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShwYXRoc1swXSwgY29udGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMuOAgeWFtuS7luaDheWGte+8muWtl+espuS4suabv+aNolxyXG4gICAgcGF0aHMuZm9yRWFjaChwYXRoID0+IHtcclxuICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBge0NPTU1BTkR+JHtwYXRofX1gO1xyXG4gICAgICBjb25zdCByZXBsYWNlVmFsdWUgPSB0aGlzLmdldFZhbHVlKHBhdGgsIGNvbnRleHQpO1xyXG4gICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmj5Dlj5ZTZXNzaW9u5Y+Y6YeP5ZCNXHJcbiAgICog5Y+Y6YeP5qC85byP77yae31cclxuICAgKi9cclxuICBwcml2YXRlIGV4dHJhY3RQYXRocyhleHByZXNzaW9uOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvLyDmn6Xmib7miYDmnInnmoR1aVN0YXRl5Y+Y6YeP5a2X56ym5LiyXHJcbiAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOX0cgPSAvXFx7Q09NTUFORH4oXFxTKz8pXFx9L2c7XHJcbiAgICBjb25zdCB1aVN0YXRlVmFyaWFibGVzID0gZXhwcmVzc2lvbi5tYXRjaChVSV9TVEFURV9QQVRURVJOX0cpO1xyXG4gICAgaWYgKHVpU3RhdGVWYXJpYWJsZXMgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaPkOWPluWQjui+ueeahOi3r+W+hFxyXG4gICAgY29uc3QgVUlfU1RBVEVfUEFUVEVSTiA9IC9cXHtDT01NQU5EfihcXFMrPylcXH0vO1xyXG4gICAgdWlTdGF0ZVZhcmlhYmxlcy5mb3JFYWNoKHNlc3Npb25WYXJpYWJsZSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhdGhNYXRjaGVzID0gc2Vzc2lvblZhcmlhYmxlLm1hdGNoKFVJX1NUQVRFX1BBVFRFUk4pO1xyXG4gICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBwYXRocy5wdXNoKHBhdGhNYXRjaGVzWzFdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhdGhzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WVUlTdGF0ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0VmFsdWUocGF0aDogc3RyaW5nLCBjb250ZXh0OiBhbnkpIHtcclxuICAgIGlmIChjb250ZXh0IGluc3RhbmNlb2YgQ29tbWFuZENvbnRleHQgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign5b2T5YmN5LiK5LiL5paH5LiN5pSv5oyBQ09NTUFOROWPmOmHj++8jOivt+ajgOafpe+8gScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwYXJ0OiBzdHJpbmcpID0+IHtcclxuICAgICAgcmV0dXJuIHBhcnQgIT09ICcnO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCB0eXBlID0gcGFydHMuc2hpZnQoKTtcclxuICAgIGlmICh0eXBlID09PSAncGFyYW1zJykge1xyXG4gICAgICBjb25zdCBwYXJhbUtleSA9IHBhcnRzLnNoaWZ0KCk7XHJcbiAgICAgIHJldHVybiBjb250ZXh0LmNvbW1hbmQucGFyYW1zW3BhcmFtS2V5XTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Jlc3VsdHMnKSB7XHJcbiAgICAgIHJldHVybiBwYXJ0cy5yZWR1Y2UoKHJlc3VsdHM6IGFueSwgcGFyYW1LZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXN1bHRzICYmIHJlc3VsdHNbcGFyYW1LZXldO1xyXG4gICAgICB9LCBjb250ZXh0LnJlc3VsdHMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZFZhcmlhYmxlUGFyc2VyIH07XHJcbiJdfQ==