import { Injectable } from '@angular/core';
var EVENT_PARAMS_EXP = /\{EVENTPARAM~\/(\S+?)\}/g;
var EVENT_PARAM_EXP = /\{EVENTPARAM~\/(\S+?)\}/;
/**
 * 命令参数解析器
 */
var EventParamVariableParser = /** @class */ (function () {
    function EventParamVariableParser() {
    }
    EventParamVariableParser.prototype.parse = function (expression, context, eventParam) {
        var _this = this;
        this.context = context;
        var variables = this.extractVariables(expression);
        if (!variables || variables.length < 1) {
            return expression;
        }
        variables.forEach(function (variableExpression) {
            var exprs = variableExpression.match(EVENT_PARAM_EXP);
            if (exprs && exprs.length === 2) {
                var variable = exprs[1];
                var value = _this.getVariableValue(variable, eventParam);
                expression = expression.replace(EVENT_PARAM_EXP, value);
            }
        });
        return expression;
    };
    /**
     * 匹配表达式中的符合正则表达式的项
     * @param expression 表达式
     * @returns
     */
    EventParamVariableParser.prototype.extractVariables = function (expression) {
        if (!expression) {
            return null;
        }
        var variables = expression.match(EVENT_PARAMS_EXP);
        if (!variables || variables.length < 1) {
            return null;
        }
        return variables;
    };
    /**
     * 获取变量的值
     * @param variable 变量
     */
    EventParamVariableParser.prototype.getVariableValue = function (variable, eventParam) {
        if (!eventParam || !variable) {
            return null;
        }
        var variables = variable.split('/').filter(function (p) { return p; });
        var result = variables.reduce(function (target, key) {
            if (target) {
                return target[key];
            }
            else {
                return null;
            }
        }, eventParam);
        return result;
    };
    EventParamVariableParser.decorators = [
        { type: Injectable }
    ];
    return EventParamVariableParser;
}());
export { EventParamVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfcGFyYW1fdmFyaWFibGVfcGFyc2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvZXZlbnRfcGFyYW1fdmFyaWFibGVfcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsSUFBTSxnQkFBZ0IsR0FBRywwQkFBMEIsQ0FBQztBQUNwRCxJQUFNLGVBQWUsR0FBRyx5QkFBeUIsQ0FBQztBQUVsRDs7R0FFRztBQUNIO0lBQUE7SUFxREEsQ0FBQztJQWpEUSx3Q0FBSyxHQUFaLFVBQWEsVUFBa0IsRUFBRSxPQUFZLEVBQUUsVUFBZ0I7UUFBL0QsaUJBZUM7UUFkQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QyxPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUNELFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQSxrQkFBa0I7WUFDbEMsSUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3hELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUMvQixJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLElBQU0sS0FBSyxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQzFELFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN6RDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxtREFBZ0IsR0FBeEIsVUFBeUIsVUFBa0I7UUFDekMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUNEOzs7T0FHRztJQUNLLG1EQUFnQixHQUF4QixVQUF5QixRQUFnQixFQUFFLFVBQWU7UUFDeEQsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQVcsRUFBRSxHQUFXO1lBQ3ZELElBQUksTUFBTSxFQUFFO2dCQUNWLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3BCO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDO2FBQ2I7UUFDSCxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDZixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztnQkFwREYsVUFBVTs7SUFxRFgsK0JBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXBEWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VyIH0gZnJvbSAnLi92YXJpYWJsZV9wYXJzZXInO1xyXG5jb25zdCBFVkVOVF9QQVJBTVNfRVhQID0gL1xce0VWRU5UUEFSQU1+XFwvKFxcUys/KVxcfS9nO1xyXG5jb25zdCBFVkVOVF9QQVJBTV9FWFAgPSAvXFx7RVZFTlRQQVJBTX5cXC8oXFxTKz8pXFx9LztcclxuXHJcbi8qKlxyXG4gKiDlkb3ku6Tlj4LmlbDop6PmnpDlmahcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV2ZW50UGFyYW1WYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcclxuICBwdWJsaWMgY29udGV4dDogYW55O1xyXG5cclxuICBwdWJsaWMgcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnksIGV2ZW50UGFyYW0/OiBhbnkpIHtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICBjb25zdCB2YXJpYWJsZXMgPSB0aGlzLmV4dHJhY3RWYXJpYWJsZXMoZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoIXZhcmlhYmxlcyB8fCB2YXJpYWJsZXMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICAgIH1cclxuICAgIHZhcmlhYmxlcy5mb3JFYWNoKHZhcmlhYmxlRXhwcmVzc2lvbiA9PiB7XHJcbiAgICAgIGNvbnN0IGV4cHJzID0gdmFyaWFibGVFeHByZXNzaW9uLm1hdGNoKEVWRU5UX1BBUkFNX0VYUCk7XHJcbiAgICAgIGlmIChleHBycyAmJiBleHBycy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGV4cHJzWzFdO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYXJpYWJsZVZhbHVlKHZhcmlhYmxlLCBldmVudFBhcmFtKTtcclxuICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKEVWRU5UX1BBUkFNX0VYUCwgdmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBleHByZXNzaW9uO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDljLnphY3ooajovr7lvI/kuK3nmoTnrKblkIjmraPliJnooajovr7lvI/nmoTpoblcclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcml2YXRlIGV4dHJhY3RWYXJpYWJsZXMoZXhwcmVzc2lvbjogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWV4cHJlc3Npb24pIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YXJpYWJsZXMgPSBleHByZXNzaW9uLm1hdGNoKEVWRU5UX1BBUkFNU19FWFApO1xyXG4gICAgaWYgKCF2YXJpYWJsZXMgfHwgdmFyaWFibGVzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFyaWFibGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blj5jph4/nmoTlgLxcclxuICAgKiBAcGFyYW0gdmFyaWFibGUg5Y+Y6YePXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYXJpYWJsZVZhbHVlKHZhcmlhYmxlOiBzdHJpbmcsIGV2ZW50UGFyYW06IGFueSkge1xyXG4gICAgaWYgKCFldmVudFBhcmFtIHx8ICF2YXJpYWJsZSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHZhcmlhYmxlcyA9IHZhcmlhYmxlLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICBjb25zdCByZXN1bHQgPSB2YXJpYWJsZXMucmVkdWNlKCh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSwgZXZlbnRQYXJhbSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufSJdfQ==