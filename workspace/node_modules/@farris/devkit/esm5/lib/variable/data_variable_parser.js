/**
 * 数据源变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { ParseUtil } from './parse_util';
import { escape } from '../core/escape';
/**
 * 数据变量解析
 */
var DataVariableParser = /** @class */ (function () {
    function DataVariableParser() {
    }
    /**
     * 解析变量
     * @param expression 表达式
     * @param context 上下文
     */
    DataVariableParser.prototype.parse = function (expression, context) {
        var _this = this;
        var appContext = ParseUtil.getAppContext(context);
        var paths = this.extractPaths(expression);
        if (paths.length === 1) {
            var value = this.getValue(paths[0], appContext);
            // 1、单个的表达式：直接求值
            if (expression === "{DATA~" + paths[0] + "}") {
                return value;
            }
            else if (expression === "{:DATA~" + paths[0] + "}") {
                // 该内容是JSON的一部分，需要转义特殊字符
                return escape(value);
            }
        }
        // 2、其他情况：字符串替换
        paths.forEach(function (path) {
            var replaceValue = _this.getValue(path, appContext);
            var searchValue = "{DATA~" + path + "}";
            expression = expression.replace(searchValue, replaceValue);
            var target = "{:DATA~" + path + "}";
            if (expression.includes(target)) {
                var value = escape(replaceValue);
                expression = expression.replace(target, value);
            }
        });
        return expression;
    };
    /**
     * 提取路径
     */
    DataVariableParser.prototype.extractPaths = function (expression) {
        var paths = [];
        // 查找所有的uiState变量字符串
        var DATA_PATTERN_G = /\{:?DATA~(\S+?)\}/g;
        var dataVariables = expression.match(DATA_PATTERN_G);
        if (dataVariables === null) {
            return [];
        }
        // 提取后边的路径
        var DATA_PATTERN = /\{:?DATA~(\S+?)\}/;
        dataVariables.forEach(function (dataVariable) {
            var pathMatches = dataVariable.match(DATA_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    };
    /**
     * 获取值
     * @param path 路径：/
     */
    DataVariableParser.prototype.getValue = function (path, appContext) {
        var parts = path.split('/').filter(function (part) {
            return part !== '';
        });
        var frameContext = appContext.getFrameContext(parts[0]);
        if (!frameContext) {
            throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
        }
        var bindingData = frameContext.bindingData;
        if (!bindingData) {
            throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
        }
        return bindingData.getValue(parts.slice(1));
    };
    DataVariableParser.decorators = [
        { type: Injectable }
    ];
    return DataVariableParser;
}());
export { DataVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9kYXRhX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFDSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDOztHQUVHO0FBQ0g7SUFBQTtJQXFGQSxDQUFDO0lBbEZDOzs7O09BSUc7SUFDSCxrQ0FBSyxHQUFMLFVBQU0sVUFBa0IsRUFBRSxPQUFZO1FBQXRDLGlCQTZCQztRQTVCQyxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELElBQU0sS0FBSyxHQUFhLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEQsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNsRCxnQkFBZ0I7WUFDaEIsSUFBSSxVQUFVLEtBQUssV0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQUcsRUFBRTtnQkFDdkMsT0FBTyxLQUFLLENBQUM7YUFDZDtpQkFBTSxJQUFJLFVBQVUsS0FBSyxZQUFVLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBRyxFQUFFO2dCQUMvQyx3QkFBd0I7Z0JBQ3hCLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCO1NBQ0Y7UUFFRCxlQUFlO1FBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQVk7WUFDekIsSUFBTSxZQUFZLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDckQsSUFBTSxXQUFXLEdBQUcsV0FBUyxJQUFJLE1BQUcsQ0FBQztZQUNyQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFFM0QsSUFBTSxNQUFNLEdBQUcsWUFBVSxJQUFJLE1BQUcsQ0FBQztZQUNqQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9CLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDbkMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2hEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7O09BRUc7SUFDSyx5Q0FBWSxHQUFwQixVQUFxQixVQUFrQjtRQUNyQyxJQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7UUFFM0Isb0JBQW9CO1FBQ3BCLElBQU0sY0FBYyxHQUFHLG9CQUFvQixDQUFDO1FBQzVDLElBQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsSUFBTSxZQUFZLEdBQUcsbUJBQW1CLENBQUM7UUFDekMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFlBQVk7WUFDaEMsSUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNyRCxJQUFJLFdBQVcsSUFBSSxJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7T0FHRztJQUNLLHFDQUFRLEdBQWhCLFVBQWlCLElBQVksRUFBRSxVQUFzQjtRQUNuRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQVk7WUFDaEQsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUksSUFBSSxxREFBVSxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBSSxJQUFJLHFEQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Z0JBbEZGLFVBQVU7O0lBcUZYLHlCQUFDO0NBQUEsQUFyRkQsSUFxRkM7QUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDmlbDmja7mupDlj5jph4/op6PmnpBcclxuICogQGF1dGhvciBXaXR0IDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAvaW5kZXgnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuaW1wb3J0IHsgUGFyc2VVdGlsIH0gZnJvbSAnLi9wYXJzZV91dGlsJztcclxuaW1wb3J0IHsgZXNjYXBlIH0gZnJvbSAnLi4vY29yZS9lc2NhcGUnO1xyXG4vKipcclxuICog5pWw5o2u5Y+Y6YeP6Kej5p6QXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIERhdGFWYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5p6Q5Y+Y6YePXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IFBhcnNlVXRpbC5nZXRBcHBDb250ZXh0KGNvbnRleHQpO1xyXG4gICAgY29uc3QgcGF0aHM6IHN0cmluZ1tdID0gdGhpcy5leHRyYWN0UGF0aHMoZXhwcmVzc2lvbik7XHJcblxyXG4gICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUocGF0aHNbMF0sIGFwcENvbnRleHQpO1xyXG4gICAgICAvLyAx44CB5Y2V5Liq55qE6KGo6L6+5byP77ya55u05o6l5rGC5YC8XHJcbiAgICAgIGlmIChleHByZXNzaW9uID09PSBge0RBVEF+JHtwYXRoc1swXX19YCkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uID09PSBgezpEQVRBfiR7cGF0aHNbMF19fWApIHtcclxuICAgICAgICAvLyDor6XlhoXlrrnmmK9KU09O55qE5LiA6YOo5YiG77yM6ZyA6KaB6L2s5LmJ54m55q6K5a2X56ymXHJcbiAgICAgICAgcmV0dXJuIGVzY2FwZSh2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAy44CB5YW25LuW5oOF5Ya177ya5a2X56ym5Liy5pu/5o2iXHJcbiAgICBwYXRocy5mb3JFYWNoKChwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gdGhpcy5nZXRWYWx1ZShwYXRoLCBhcHBDb250ZXh0KTtcclxuICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBge0RBVEF+JHtwYXRofX1gO1xyXG4gICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xyXG5cclxuICAgICAgY29uc3QgdGFyZ2V0ID0gYHs6REFUQX4ke3BhdGh9fWA7XHJcbiAgICAgIGlmIChleHByZXNzaW9uLmluY2x1ZGVzKHRhcmdldCkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGVzY2FwZShyZXBsYWNlVmFsdWUpO1xyXG4gICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UodGFyZ2V0LCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBleHByZXNzaW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5o+Q5Y+W6Lev5b6EXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0UGF0aHMoZXhwcmVzc2lvbjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvLyDmn6Xmib7miYDmnInnmoR1aVN0YXRl5Y+Y6YeP5a2X56ym5LiyXHJcbiAgICBjb25zdCBEQVRBX1BBVFRFUk5fRyA9IC9cXHs6P0RBVEF+KFxcUys/KVxcfS9nO1xyXG4gICAgY29uc3QgZGF0YVZhcmlhYmxlcyA9IGV4cHJlc3Npb24ubWF0Y2goREFUQV9QQVRURVJOX0cpO1xyXG4gICAgaWYgKGRhdGFWYXJpYWJsZXMgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaPkOWPluWQjui+ueeahOi3r+W+hFxyXG4gICAgY29uc3QgREFUQV9QQVRURVJOID0gL1xcezo/REFUQX4oXFxTKz8pXFx9LztcclxuICAgIGRhdGFWYXJpYWJsZXMuZm9yRWFjaChkYXRhVmFyaWFibGUgPT4ge1xyXG4gICAgICBjb25zdCBwYXRoTWF0Y2hlcyA9IGRhdGFWYXJpYWJsZS5tYXRjaChEQVRBX1BBVFRFUk4pO1xyXG4gICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBwYXRocy5wdXNoKHBhdGhNYXRjaGVzWzFdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blgLxcclxuICAgKiBAcGFyYW0gcGF0aCDot6/lvoTvvJovXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZShwYXRoOiBzdHJpbmcsIGFwcENvbnRleHQ6IEFwcENvbnRleHQpOiBhbnkge1xyXG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwYXJ0OiBzdHJpbmcpID0+IHtcclxuICAgICAgcmV0dXJuIHBhcnQgIT09ICcnO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gYXBwQ29udGV4dC5nZXRGcmFtZUNvbnRleHQocGFydHNbMF0pO1xyXG4gICAgaWYgKCFmcmFtZUNvbnRleHQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3BhdGh95LiN5q2j56Gu77yM6K+35qOA5p+l77yBYCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgICBpZiAoIWJpbmRpbmdEYXRhKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtwYXRofeS4jeato+ehru+8jOivt+ajgOafpe+8gWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhLmdldFZhbHVlKHBhcnRzLnNsaWNlKDEpKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRGF0YVZhcmlhYmxlUGFyc2VyIH07XHJcbiJdfQ==