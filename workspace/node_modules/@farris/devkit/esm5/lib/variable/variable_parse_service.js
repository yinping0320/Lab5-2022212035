/**
 * 变量解析服务
 * @author Witt<jiwt@inspur.com>
 */
import { Inject, Injectable } from '@angular/core';
import { VARIABLE_PARSERS } from './variable_parser';
/**
 * 变量解析服务
 * 职责：
 * 1、解析字符串中的变量，并替换成相应的值；
 * 2、对表达式进行求值。
 *
 * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？
 */
var VariableParseService = /** @class */ (function () {
    /**
     * 构造变量解析服务
     * @param parsers 解析器集合
     */
    function VariableParseService(parsers) {
        this.parsers = parsers;
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    VariableParseService.prototype.parse = function (target, context, eventParam) {
        var _this = this;
        if (typeof target === 'string' && target.length > 0) {
            // 字符串，直接解析
            return this.parseExpression(target, context, eventParam);
        }
        else if (Array.isArray(target)) {
            // 遍历数组
            target.forEach(function (item, itemIndex) {
                if (typeof item === 'string') {
                    target[itemIndex] = _this.parseExpression(item, context, eventParam);
                }
                else {
                    target[itemIndex] = _this.parse(item, context, eventParam);
                }
            });
        }
        else if (typeof target === 'object' && target !== null) {
            // 遍历对象可枚举属性
            var keys = Object.keys(target);
            keys.forEach(function (key) {
                if (typeof target[key] === 'string') {
                    target[key] = _this.parseExpression(target[key], context, eventParam);
                }
                else {
                    target[key] = _this.parse(target[key], context, eventParam);
                }
            });
        }
        return target;
    };
    /**
     * 表达式求值
     */
    VariableParseService.prototype.evaluate = function (expression, context, eventParam) {
        var parsedExpression = this.parse(expression, context, eventParam);
        return (new Function('return ' + parsedExpression))();
    };
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    VariableParseService.prototype.parseExpression = function (expression, context, eventParam) {
        // 空串直接返回
        if (expression === '') {
            return '';
        }
        this.parsers.forEach(function (parser) {
            if (typeof expression === 'string') {
                expression = parser.parse(expression, context, eventParam);
            }
        });
        return expression;
    };
    VariableParseService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VariableParseService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [VARIABLE_PARSERS,] }] }
    ]; };
    return VariableParseService;
}());
export { VariableParseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVfcGFyc2Vfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3ZhcmlhYmxlL3ZhcmlhYmxlX3BhcnNlX3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFrQixnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR3JFOzs7Ozs7O0dBT0c7QUFDSDtJQVFFOzs7T0FHRztJQUNILDhCQUFzQyxPQUF5QjtRQUM3RCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLG9DQUFLLEdBQVosVUFBYSxNQUFXLEVBQUUsT0FBYSxFQUFFLFVBQWdCO1FBQXpELGlCQStCQztRQTlCQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUVuRCxXQUFXO1lBQ1gsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FFMUQ7YUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFFaEMsT0FBTztZQUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsU0FBUztnQkFDN0IsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQzVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3JFO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQzNEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FFSjthQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFFeEQsWUFBWTtZQUNaLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7Z0JBQ2QsSUFBSSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3RFO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQzVEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLHVDQUFRLEdBQWYsVUFBZ0IsVUFBa0IsRUFBRSxPQUFhLEVBQUUsVUFBZ0I7UUFDakUsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckUsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLDhDQUFlLEdBQXZCLFVBQXdCLFVBQWtCLEVBQUUsT0FBWSxFQUFFLFVBQWU7UUFFdkUsU0FBUztRQUNULElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUNyQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO1lBQ3pCLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO2dCQUNsQyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzVEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOztnQkFoRkYsVUFBVTs7Ozs0Q0FZSSxNQUFNLFNBQUMsZ0JBQWdCOztJQXFFdEMsMkJBQUM7Q0FBQSxBQWpGRCxJQWlGQztBQUVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWPmOmHj+ino+aekOacjeWKoVxyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciwgVkFSSUFCTEVfUEFSU0VSUyB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuXHJcblxyXG4vKipcclxuICog5Y+Y6YeP6Kej5p6Q5pyN5YqhXHJcbiAqIOiBjOi0o++8mlxyXG4gKiAx44CB6Kej5p6Q5a2X56ym5Liy5Lit55qE5Y+Y6YeP77yM5bm25pu/5o2i5oiQ55u45bqU55qE5YC877ybXHJcbiAqIDLjgIHlr7nooajovr7lvI/ov5vooYzmsYLlgLzjgIJcclxuICpcclxuICogQHRvZG8g5a+56KGo6L6+5byP5rGC5YC855qE6YOo5YiG5ZKM6KGo6L6+5byP5Yqf6IO96YeN5Y+g77yM5piv5ZCm6L2s56e75Yiw6KGo6L6+5byP5Lit77yfXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFZhcmlhYmxlUGFyc2VTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5p6Q5Zmo6ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwYXJzZXJzOiBWYXJpYWJsZVBhcnNlcltdO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlj5jph4/op6PmnpDmnI3liqFcclxuICAgKiBAcGFyYW0gcGFyc2VycyDop6PmnpDlmajpm4blkIhcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFZBUklBQkxFX1BBUlNFUlMpIHBhcnNlcnM6IFZhcmlhYmxlUGFyc2VyW10pIHtcclxuICAgIHRoaXMucGFyc2VycyA9IHBhcnNlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyc2UodGFyZ2V0OiBhbnksIGNvbnRleHQ/OiBhbnksIGV2ZW50UGFyYW0/OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnICYmIHRhcmdldC5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAvLyDlrZfnrKbkuLLvvIznm7TmjqXop6PmnpBcclxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByZXNzaW9uKHRhcmdldCwgY29udGV4dCwgZXZlbnRQYXJhbSk7XHJcblxyXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcclxuXHJcbiAgICAgIC8vIOmBjeWOhuaVsOe7hFxyXG4gICAgICB0YXJnZXQuZm9yRWFjaCgoaXRlbSwgaXRlbUluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgdGFyZ2V0W2l0ZW1JbmRleF0gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbihpdGVtLCBjb250ZXh0LCBldmVudFBhcmFtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGFyZ2V0W2l0ZW1JbmRleF0gPSB0aGlzLnBhcnNlKGl0ZW0sIGNvbnRleHQsIGV2ZW50UGFyYW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0JyAmJiB0YXJnZXQgIT09IG51bGwpIHtcclxuXHJcbiAgICAgIC8vIOmBjeWOhuWvueixoeWPr+aemuS4vuWxnuaAp1xyXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KTtcclxuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHRhcmdldFtrZXldID0gdGhpcy5wYXJzZUV4cHJlc3Npb24odGFyZ2V0W2tleV0sIGNvbnRleHQsIGV2ZW50UGFyYW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHRoaXMucGFyc2UodGFyZ2V0W2tleV0sIGNvbnRleHQsIGV2ZW50UGFyYW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOi+vuW8j+axguWAvFxyXG4gICAqL1xyXG4gIHB1YmxpYyBldmFsdWF0ZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ/OiBhbnksIGV2ZW50UGFyYW0/OiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgcGFyc2VkRXhwcmVzc2lvbiA9IHRoaXMucGFyc2UoZXhwcmVzc2lvbiwgY29udGV4dCwgZXZlbnRQYXJhbSk7XHJcbiAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBwYXJzZWRFeHByZXNzaW9uKSkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+aekOihqOi+vuW8j1xyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOihqOi+vuW8j1xyXG4gICAqIEBwYXJhbSBjb250ZXh0IOS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgcGFyc2VFeHByZXNzaW9uKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogYW55LCBldmVudFBhcmFtOiBhbnkpOiBzdHJpbmcge1xyXG5cclxuICAgIC8vIOepuuS4suebtOaOpei/lOWbnlxyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBhcnNlcnMuZm9yRWFjaChwYXJzZXIgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgZXhwcmVzc2lvbiA9IHBhcnNlci5wYXJzZShleHByZXNzaW9uLCBjb250ZXh0LCBldmVudFBhcmFtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFZhcmlhYmxlUGFyc2VTZXJ2aWNlIH07XHJcbiJdfQ==