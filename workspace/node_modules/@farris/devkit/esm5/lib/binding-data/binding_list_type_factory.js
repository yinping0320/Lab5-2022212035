import * as tslib_1 from "tslib";
import { BindingList } from "./binding_list";
/**
 * BindingListTypeFactory
 */
var BindingListTypeFactory = /** @class */ (function () {
    function BindingListTypeFactory() {
    }
    BindingListTypeFactory.create = function (bindingProperties) {
        var bindingListType = this.getType(bindingProperties);
        var bindingList = new bindingListType(bindingProperties);
        return bindingList;
    };
    /**
     * 创建BindingList模板类
     * @param bindingProperties
     * @returns
     */
    BindingListTypeFactory.createType = function (bindingProperties) {
        var bindingListType = /** @class */ (function (_super) {
            tslib_1.__extends(BindingListType, _super);
            function BindingListType(properties) {
                return _super.call(this, properties) || this;
            }
            return BindingListType;
        }(BindingList));
        var bindingListTypePrototype = bindingListType.prototype;
        this.extendProperties(bindingListTypePrototype, bindingProperties);
        return bindingListType;
    };
    /**
     * 扩展BindingList模板类属性
     * @param bindingListPrototype bindingList原型
     * @param bindingProperties 属性数组
     */
    BindingListTypeFactory.extendProperties = function (bindingListPrototype, bindingProperties) {
        bindingProperties.forEach(function (bindingProperty) {
            var propertyName = bindingProperty.name;
            Object.defineProperty(bindingListPrototype, propertyName, {
                get: function () {
                    return this.currentItem[propertyName];
                }
            });
        });
    };
    /**
     * 获取缓存的bindingList模板类
     * @param bindingProperties bindingList属性
     * @returns
     */
    BindingListTypeFactory.getType = function (bindingProperties) {
        if (this.provider.has(bindingProperties)) {
            return this.provider.get(bindingProperties);
        }
        var bindingListType = this.createType(bindingProperties);
        this.provider.set(bindingProperties, bindingListType);
        return bindingListType;
    };
    BindingListTypeFactory.provider = new Map();
    return BindingListTypeFactory;
}());
export { BindingListTypeFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19saXN0X3R5cGVfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2JpbmRpbmctZGF0YS9iaW5kaW5nX2xpc3RfdHlwZV9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0M7O0dBRUc7QUFDSDtJQUFBO0lBa0RBLENBQUM7SUFoRGUsNkJBQU0sR0FBcEIsVUFBcUIsaUJBQW9DO1FBQ3ZELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN4RCxJQUFNLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFDRDs7OztPQUlHO0lBQ1ksaUNBQVUsR0FBekIsVUFBMEIsaUJBQW9DO1FBQzVELElBQU0sZUFBZTtZQUFpQywyQ0FBVztZQUMvRCx5QkFBWSxVQUE2Qjt1QkFDdkMsa0JBQU0sVUFBVSxDQUFDO1lBQ25CLENBQUM7WUFDSCxzQkFBQztRQUFELENBQUMsQUFKdUIsQ0FBOEIsV0FBVyxFQUloRSxDQUFBO1FBQ0QsSUFBTSx3QkFBd0IsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDO1FBQzNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFDRDs7OztPQUlHO0lBQ1ksdUNBQWdCLEdBQS9CLFVBQWdDLG9CQUFpQyxFQUFFLGlCQUFvQztRQUNyRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxlQUFnQztZQUN6RCxJQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxFQUFFO2dCQUN4RCxHQUFHLEVBQUU7b0JBQ0gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNZLDhCQUFPLEdBQXRCLFVBQXVCLGlCQUFvQztRQUN6RCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFoRGMsK0JBQVEsR0FBOEMsSUFBSSxHQUFHLEVBQXdDLENBQUM7SUFpRHZILDZCQUFDO0NBQUEsQUFsREQsSUFrREM7U0FsRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENsYXNzVHlwZSB9IGZyb20gXCIuLi9lbnRpdHlcIjtcclxuaW1wb3J0IHsgQmluZGluZ0xpc3QgfSBmcm9tIFwiLi9iaW5kaW5nX2xpc3RcIjtcclxuaW1wb3J0IHsgQmluZGluZ1Byb3BlcnR5IH0gZnJvbSBcIi4vYmluZGluZ19wcm9wZXJ0eVwiO1xyXG4vKipcclxuICogQmluZGluZ0xpc3RUeXBlRmFjdG9yeVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJpbmRpbmdMaXN0VHlwZUZhY3Rvcnkge1xyXG4gIHByaXZhdGUgc3RhdGljIHByb3ZpZGVyOiBNYXA8QmluZGluZ1Byb3BlcnR5W10sIFR5cGU8QmluZGluZ0xpc3Q+PiA9IG5ldyBNYXA8QmluZGluZ1Byb3BlcnR5W10sIFR5cGU8QmluZGluZ0xpc3Q+PigpO1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJpbmRpbmdQcm9wZXJ0aWVzOiBCaW5kaW5nUHJvcGVydHlbXSkge1xyXG4gICAgY29uc3QgYmluZGluZ0xpc3RUeXBlID0gdGhpcy5nZXRUeXBlKGJpbmRpbmdQcm9wZXJ0aWVzKTtcclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gbmV3IGJpbmRpbmdMaXN0VHlwZShiaW5kaW5nUHJvcGVydGllcyk7XHJcbiAgICByZXR1cm4gYmluZGluZ0xpc3Q7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWIm+W7ukJpbmRpbmdMaXN05qih5p2/57G7XHJcbiAgICogQHBhcmFtIGJpbmRpbmdQcm9wZXJ0aWVzIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZVR5cGUoYmluZGluZ1Byb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdKTogQ2xhc3NUeXBlPEJpbmRpbmdMaXN0PiB7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdFR5cGUgPSBjbGFzcyBCaW5kaW5nTGlzdFR5cGUgZXh0ZW5kcyBCaW5kaW5nTGlzdCB7XHJcbiAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0VHlwZVByb3RvdHlwZSA9IGJpbmRpbmdMaXN0VHlwZS5wcm90b3R5cGU7XHJcbiAgICB0aGlzLmV4dGVuZFByb3BlcnRpZXMoYmluZGluZ0xpc3RUeXBlUHJvdG90eXBlLCBiaW5kaW5nUHJvcGVydGllcyk7XHJcbiAgICByZXR1cm4gYmluZGluZ0xpc3RUeXBlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmianlsZVCaW5kaW5nTGlzdOaooeadv+exu+WxnuaAp1xyXG4gICAqIEBwYXJhbSBiaW5kaW5nTGlzdFByb3RvdHlwZSBiaW5kaW5nTGlzdOWOn+Wei1xyXG4gICAqIEBwYXJhbSBiaW5kaW5nUHJvcGVydGllcyDlsZ7mgKfmlbDnu4RcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBleHRlbmRQcm9wZXJ0aWVzKGJpbmRpbmdMaXN0UHJvdG90eXBlOiBCaW5kaW5nTGlzdCwgYmluZGluZ1Byb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdKSB7XHJcbiAgICBiaW5kaW5nUHJvcGVydGllcy5mb3JFYWNoKChiaW5kaW5nUHJvcGVydHk6IEJpbmRpbmdQcm9wZXJ0eSkgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBiaW5kaW5nUHJvcGVydHkubmFtZTtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJpbmRpbmdMaXN0UHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRJdGVtW3Byb3BlcnR5TmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bnvJPlrZjnmoRiaW5kaW5nTGlzdOaooeadv+exu1xyXG4gICAqIEBwYXJhbSBiaW5kaW5nUHJvcGVydGllcyBiaW5kaW5nTGlzdOWxnuaAp1xyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGdldFR5cGUoYmluZGluZ1Byb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdKTogVHlwZTxCaW5kaW5nTGlzdD4ge1xyXG4gICAgaWYgKHRoaXMucHJvdmlkZXIuaGFzKGJpbmRpbmdQcm9wZXJ0aWVzKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXQoYmluZGluZ1Byb3BlcnRpZXMpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmluZGluZ0xpc3RUeXBlID0gdGhpcy5jcmVhdGVUeXBlKGJpbmRpbmdQcm9wZXJ0aWVzKTtcclxuICAgIHRoaXMucHJvdmlkZXIuc2V0KGJpbmRpbmdQcm9wZXJ0aWVzLCBiaW5kaW5nTGlzdFR5cGUpO1xyXG4gICAgcmV0dXJuIGJpbmRpbmdMaXN0VHlwZTtcclxuICB9XHJcbn0iXX0=