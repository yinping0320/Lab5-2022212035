import { Subject, of } from 'rxjs';
import { Map } from 'immutable';
import { ChangeType, ViewChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
import { BindingList } from './binding_list';
/**
 * 绑定对象基类
 */
var BaseBindingObject = /** @class */ (function () {
    // private __differ__ = this.differ();
    function BaseBindingObject() {
        this.__type__ = 'BindingObject';
        /**
         * 绑定到实体
         */
        this.fromEntity = undefined;
        /**
         * 标识是否提交过
         */
        this.isShowValidationMsg = false;
        /**
         * 销毁流
         */
        this.unsubscribe = new Subject();
        /**
         * 以{ [propertyName]: FormControl }的形式存放每条数据的control
         */
        this.controlMap = {};
        this.innerValues = Map();
        this.changes = new Subject();
        this.viewChanges = new Subject();
    }
    Object.defineProperty(BaseBindingObject.prototype, "primaryKeyValue", {
        /**
         * 主键值
         */
        get: function () {
            return this.primaryKey ? this.getValue(this.primaryKey) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseBindingObject.prototype, "rowPrimaryKeyValue", {
        /**
         * 数据行的主键值
         */
        get: function () {
            var row = this.getRow(this);
            return row && row.primaryKeyValue || null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置是否提交过
     */
    BaseBindingObject.prototype.setShowValidationMsg = function (flag) {
        this.isShowValidationMsg = flag;
    };
    // public abstract load(data: any);
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    BaseBindingObject.prototype.getValue = function (propertyName) {
        return this.innerValues.get(propertyName);
    };
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    BaseBindingObject.prototype.setValue = function (propertyName, propertyValue, emitEventToView, emitEventToEntity, errors, invokeOnValueChange, context) {
        var _this = this;
        if (emitEventToView === void 0) { emitEventToView = false; }
        if (emitEventToEntity === void 0) { emitEventToEntity = false; }
        // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值
        // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {
        //   return;
        // }
        var oldPropertyValue = this.getValue(propertyName);
        // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue
        // if (oldPropertyValue === propertyValue) {
        //   return;
        // }
        if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
            // 设定缺省
            invokeOnValueChange = function (preValue, value, entityChanged, primaryValue) {
                return of(true);
            };
        }
        if (emitEventToEntity === true) {
            // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；
            // if(!this.innerValues.has(propertyName)) {
            //   return;
            // }
            // 执行实体值变化前事件
            invokeOnValueChange(oldPropertyValue, propertyValue, false, this.rowPrimaryKeyValue).subscribe(function (result) {
                if (result) {
                    //this.__differ__.onValueChange();
                    // 如果成功，执行变化，并通知实体变化
                    _this.innerValues = _this.innerValues.set(propertyName, propertyValue);
                    // this.data[propertyName] = propertyValue;
                    var viewChange = _this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);
                    _this.viewChanges.next(viewChange);
                    // 如果需要通知视图，通知视图相应修改
                    if (emitEventToView === true) {
                        var change = _this.buildChangesContext(propertyName, propertyValue, context, errors);
                        _this.changes.next(change);
                    }
                    // 执行实体值变化后事件
                    invokeOnValueChange(oldPropertyValue, propertyValue, true, _this.rowPrimaryKeyValue).subscribe();
                }
                else {
                    // 如果失败，不再通知实体变化
                    // 并执行界面回滚操作
                    var change = _this.buildChangesContext(propertyName, oldPropertyValue, context, errors);
                    _this.changes.next(change);
                }
            });
        }
        else {
            //this.__differ__.onValueChange();
            // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件
            this.innerValues = this.innerValues.set(propertyName, propertyValue);
            // this.data[propertyName] = propertyValue;
            if (emitEventToView === true) {
                var change = this.buildChangesContext(propertyName, propertyValue, context, errors);
                this.changes.next(change);
            }
            // 执行实体值变化后事件
            invokeOnValueChange(oldPropertyValue, propertyValue, true, this.rowPrimaryKeyValue).subscribe();
        }
    };
    /**
     * 将BindingObject实例转换成JSON对象
     */
    BaseBindingObject.prototype.toJSON = function (options) {
        var _this = this;
        //if (!this.__differ__.isChange()) {
        //  return this.__differ__.value();
        //}
        var langCode = this.getCurrentLanguage(); //window.localStorage.getItem('languageCode') || 'zh-CHS';
        var result = {};
        this.properties.forEach(function (property) {
            var _a;
            var propName = property.name;
            if (property.type === BindingPropertyType.List) {
                var list = _this[propName];
                result[propName] = list.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Object) {
                var object = _this[propName];
                result[propName] = object.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                var object = _this[propName];
                result[propName] = object.toJSON(options);
            }
            else {
                // 1、对于多语录入字段；
                // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。
                if (property.enableMultiLangInput === true) {
                    // 忽略多语字段，只返回当前语言
                    if (options && options.ignoreMultiLangInput === true) {
                        var multiLangValueObj = _this.getValue(propName);
                        if (multiLangValueObj) {
                            result[propName] = multiLangValueObj[langCode];
                        }
                        else {
                            result[propName] = multiLangValueObj;
                        }
                    }
                    else if (options && options.useFullMultiLangProperty) {
                        // 给审批提供的扩展 @2021-10-13
                        var multiLangValueObj = _this.getValue(propName);
                        if (multiLangValueObj) {
                            result[propName + "_MULTILANGUAGE"] = multiLangValueObj;
                            // 除返回多语字段外，将当前语言也返回
                            result[propName] = multiLangValueObj[langCode];
                        }
                    }
                    else {
                        var multiLangValueObj = _this.getValue(propName);
                        if (!multiLangValueObj) {
                            result[propName] = (_a = {}, _a[langCode] = multiLangValueObj, _a);
                        }
                        else {
                            result[propName] = multiLangValueObj;
                        }
                    }
                }
                else {
                    result[propName] = _this.getValue(propName);
                }
            }
        });
        // this.__differ__.update(result);
        return result;
    };
    /**
     * 获取当前语言
     * @returns
     */
    BaseBindingObject.prototype.getCurrentLanguage = function () {
        this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';
        return this.currentLanguage;
    };
    /**
     * 构造bindignData变更上下文
     * @param propertyName
     * @param propertyValue
     * @param context
     * @param errors
     * @param type
     * @returns
     */
    BaseBindingObject.prototype.buildChangesContext = function (propertyName, propertyValue, context, errors, type) {
        if (type === void 0) { type = ChangeType.ValueChanged; }
        var object = this.getRow(this);
        var id = object ? object.primaryKeyValue : null;
        return {
            type: type,
            path: [propertyName],
            value: propertyValue,
            id: id,
            errors: errors,
            context: context
        };
    };
    /**
     * 构造viewChanges上下文
     * @param propertyName
     * @param value
     * @param preValue
     * @param errors
     * @param context
     * @param type
     * @returns
     */
    BaseBindingObject.prototype.buildViewChangesContext = function (propertyName, value, preValue, errors, context, type) {
        if (type === void 0) { type = ViewChangeType.ValueChanged; }
        return {
            type: type,
            path: [propertyName],
            value: value,
            preValue: preValue,
            errors: errors,
            context: context
        };
    };
    BaseBindingObject.prototype.getRow = function (bindingObject) {
        if (bindingObject && bindingObject.fromEntity) {
            return bindingObject;
        }
        if (bindingObject.parent && !(bindingObject.parent instanceof BindingList)) {
            return this.getRow(bindingObject.parent);
        }
        else {
            return bindingObject;
        }
    };
    BaseBindingObject.prototype.makeHash = function () {
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        for (var i = 0; i < 10; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        return text;
    };
    BaseBindingObject.prototype.differ = function () {
        var _this = this;
        var previous, next, value;
        return {
            onValueChange: function () {
                next = _this.makeHash();
            },
            isChange: function () {
                return next !== previous;
            },
            update: function (result) {
                value = result;
                previous = next;
            },
            value: function () {
                return value;
            }
        };
    };
    return BaseBindingObject;
}());
export { BaseBindingObject };
//# sourceMappingURL=data:application/json;base64,