import { PropertyUtil as BindingPropertyUtil } from './property_util';
import { EntityUtil as EntityLoadUtil } from './entity_util';
import { BindingListFactory } from './binding_list_factory';
import { BindingData } from './binding_data';
var BindingDataFactory = /** @class */ (function () {
    function BindingDataFactory() {
    }
    /**
     * 根据Repository创建一个BindingData
     */
    BindingDataFactory.createFromRepository = function (repository, bindingPath) {
        var bindingData = new BindingData();
        var bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);
        var bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, bindingPath);
        bindingData.setDataTypeInfo(repository.entityTypeInfo);
        EntityLoadUtil.loadRepository(repository, bindingList);
        // 从repository初始化bindingData
        bindingData.pagingInfo = repository.entityCollection.paginationInfo;
        return bindingData;
    };
    /**
     * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）
     * @internal
     * @summary
     * 1、该方法暂时仅供内部单元测试使用；
     * 2、该方法暂时只创建BindingData，不建立双向关联
     */
    BindingDataFactory.createFromEntityManager = function (entityManager, bindingPath) {
        var bindingData = new BindingData();
        var bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);
        var bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, bindingPath);
        // 初始化数据
        var entities = entityManager.getEntitiesByPath([]);
        EntityLoadUtil.loadEntities(entities, bindingList);
        return bindingData;
    };
    /**
     * 根据已经存在的BindingData创建一个新的BindingData
     */
    BindingDataFactory.createFromExistingBindingData = function (existingBindingData, bindingPath) {
        var bindingData = new BindingData();
        bindingData.initByBindingList(existingBindingData.list, bindingPath);
        return bindingData;
    };
    return BindingDataFactory;
}());
export { BindingDataFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9iaW5kaW5nLWRhdGEvYmluZGluZ19kYXRhX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFlBQVksSUFBSSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxVQUFVLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QztJQUFBO0lBOENBLENBQUM7SUE1Q0M7O09BRUc7SUFDVyx1Q0FBb0IsR0FBbEMsVUFBbUMsVUFBOEIsRUFBRSxXQUFtQjtRQUNwRixJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLElBQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRixJQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxXQUFXLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELFdBQVcsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZELGNBQWMsQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXZELDRCQUE0QjtRQUM1QixXQUFXLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUM7UUFDcEUsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNXLDBDQUF1QixHQUFyQyxVQUFzQyxhQUFvQyxFQUFFLFdBQW1CO1FBQzdGLElBQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RGLElBQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFeEQsUUFBUTtRQUNSLElBQU0sUUFBUSxHQUFhLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRCxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUVuRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDVyxnREFBNkIsR0FBM0MsVUFBNEMsbUJBQWdDLEVBQUUsV0FBbUI7UUFDL0YsSUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN0QyxXQUFXLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUE5Q0QsSUE4Q0M7QUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9pbmRleCc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnksIEVudGl0eU1hbmFnZXIgfSBmcm9tICcuLi9yZXBvc2l0b3J5L2luZGV4JztcclxuaW1wb3J0IHsgUHJvcGVydHlVdGlsIGFzIEJpbmRpbmdQcm9wZXJ0eVV0aWwgfSBmcm9tICcuL3Byb3BlcnR5X3V0aWwnO1xyXG5pbXBvcnQgeyBFbnRpdHlVdGlsIGFzIEVudGl0eUxvYWRVdGlsIH0gZnJvbSAnLi9lbnRpdHlfdXRpbCc7XHJcbmltcG9ydCB7IEJpbmRpbmdMaXN0RmFjdG9yeSB9IGZyb20gJy4vYmluZGluZ19saXN0X2ZhY3RvcnknO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSB9IGZyb20gJy4vYmluZGluZ19kYXRhJztcclxuXHJcblxyXG5jbGFzcyBCaW5kaW5nRGF0YUZhY3Rvcnkge1xyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5SZXBvc2l0b3J55Yib5bu65LiA5LiqQmluZGluZ0RhdGFcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21SZXBvc2l0b3J5KHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5PiwgYmluZGluZ1BhdGg6IHN0cmluZyk6IEJpbmRpbmdEYXRhIHtcclxuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gbmV3IEJpbmRpbmdEYXRhKCk7XHJcbiAgICBjb25zdCBiaW5kaW5nUHJvcGVydGllcyA9IEJpbmRpbmdQcm9wZXJ0eVV0aWwuZ2V0UHJvcGVydGllcyhyZXBvc2l0b3J5LmVudGl0eVR5cGUpO1xyXG4gICAgY29uc3QgYmluZGluZ0xpc3QgPSBCaW5kaW5nTGlzdEZhY3RvcnkuY3JlYXRlKGJpbmRpbmdQcm9wZXJ0aWVzKTtcclxuICAgIGJpbmRpbmdEYXRhLmluaXRCeUJpbmRpbmdMaXN0KGJpbmRpbmdMaXN0LCBiaW5kaW5nUGF0aCk7XHJcbiAgICBiaW5kaW5nRGF0YS5zZXREYXRhVHlwZUluZm8ocmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbyk7XHJcbiAgICBFbnRpdHlMb2FkVXRpbC5sb2FkUmVwb3NpdG9yeShyZXBvc2l0b3J5LCBiaW5kaW5nTGlzdCk7XHJcblxyXG4gICAgLy8g5LuOcmVwb3NpdG9yeeWIneWni+WMlmJpbmRpbmdEYXRhXHJcbiAgICBiaW5kaW5nRGF0YS5wYWdpbmdJbmZvID0gcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnBhZ2luYXRpb25JbmZvO1xyXG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2uRW50aXR5TWFuYWdlcuWIm+W7ukJpbmRpbmdEYXRh77yM5bm25bu656uL5Y+M5ZCR5YWz6IGU77yI6K+35Yu/5L2/55So77yJXHJcbiAgICogQGludGVybmFsXHJcbiAgICogQHN1bW1hcnlcclxuICAgKiAx44CB6K+l5pa55rOV5pqC5pe25LuF5L6b5YaF6YOo5Y2V5YWD5rWL6K+V5L2/55So77ybXHJcbiAgICogMuOAgeivpeaWueazleaaguaXtuWPquWIm+W7ukJpbmRpbmdEYXRh77yM5LiN5bu656uL5Y+M5ZCR5YWz6IGUXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tRW50aXR5TWFuYWdlcihlbnRpdHlNYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyPEVudGl0eT4sIGJpbmRpbmdQYXRoOiBzdHJpbmcpOiBCaW5kaW5nRGF0YSB7XHJcbiAgICBjb25zdCBiaW5kaW5nRGF0YSA9IG5ldyBCaW5kaW5nRGF0YSgpO1xyXG4gICAgY29uc3QgYmluZGluZ1Byb3BlcnRpZXMgPSBCaW5kaW5nUHJvcGVydHlVdGlsLmdldFByb3BlcnRpZXMoZW50aXR5TWFuYWdlci5lbnRpdHlUeXBlKTtcclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gQmluZGluZ0xpc3RGYWN0b3J5LmNyZWF0ZShiaW5kaW5nUHJvcGVydGllcyk7XHJcbiAgICBiaW5kaW5nRGF0YS5pbml0QnlCaW5kaW5nTGlzdChiaW5kaW5nTGlzdCwgYmluZGluZ1BhdGgpO1xyXG5cclxuICAgIC8vIOWIneWni+WMluaVsOaNrlxyXG4gICAgY29uc3QgZW50aXRpZXM6IEVudGl0eVtdID0gZW50aXR5TWFuYWdlci5nZXRFbnRpdGllc0J5UGF0aChbXSk7XHJcbiAgICBFbnRpdHlMb2FkVXRpbC5sb2FkRW50aXRpZXMoZW50aXRpZXMsIGJpbmRpbmdMaXN0KTtcclxuXHJcbiAgICByZXR1cm4gYmluZGluZ0RhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja7lt7Lnu4/lrZjlnKjnmoRCaW5kaW5nRGF0YeWIm+W7uuS4gOS4quaWsOeahEJpbmRpbmdEYXRhXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tRXhpc3RpbmdCaW5kaW5nRGF0YShleGlzdGluZ0JpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSwgYmluZGluZ1BhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcclxuICAgIGJpbmRpbmdEYXRhLmluaXRCeUJpbmRpbmdMaXN0KGV4aXN0aW5nQmluZGluZ0RhdGEubGlzdCwgYmluZGluZ1BhdGgpO1xyXG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQmluZGluZ0RhdGFGYWN0b3J5IH07XHJcbiJdfQ==