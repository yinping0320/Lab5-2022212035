/**
 * 排序条件管理
 */
var SortConditionManager = /** @class */ (function () {
    function SortConditionManager() {
        this.sorts = new Map();
    }
    /**
     * 根据bingdingPath获取排序规则
     * @param bindingPath bindingPath
     * @param directionConverter converter
     */
    SortConditionManager.prototype.getConditionsByBindingPath = function (bindingPath, directionConverter) {
        var conditions = this.sorts.get(bindingPath) || [];
        if (conditions.length < 1) {
            return conditions;
        }
        if (typeof directionConverter === 'function') {
            conditions = conditions.map(function (condition) {
                var sortType = directionConverter(condition.SortType);
                return { SortField: condition.SortField, SortType: sortType };
            });
        }
        return conditions;
    };
    /**
     * 增加排序条件
     * @param bindingPath 绑定路径
     * @param field 排序字段
     * @param direction 排序方向 asc|desc
     */
    SortConditionManager.prototype.addCondition = function (bindingPath, field, direction) {
        // 取消排序
        if (!field || !direction) {
            this.sorts.delete(bindingPath);
            return;
        }
        var isBindingPathExist = this.sorts.has(bindingPath);
        var condition = { SortField: field, SortType: direction };
        if (!isBindingPathExist) {
            this.sorts.set(bindingPath, [condition]);
        }
        else {
            var bindingPathSortConditions = this.sorts.get(bindingPath) || [];
            // new condition will override the previous condition
            var conditionIndex = bindingPathSortConditions.findIndex(function (item) { return item.SortField === field; });
            if (conditionIndex !== -1) {
                bindingPathSortConditions[conditionIndex] = condition;
            }
            else {
                bindingPathSortConditions.push(condition);
            }
        }
    };
    SortConditionManager.prototype.removeCondition = function (bindingPath, field) {
        throw new Error('not implement!');
    };
    /**
     * 批量增加排序条件
     * @param bindingPath bindingPath
     * @param fields fields , seprated by comma
     * @param directions directions , seprated by comma
     * @description set conditions and overwrite all conditions which has the same bindingPath
     */
    SortConditionManager.prototype.setConditions = function (bindingPath, fields, directions) {
        // 取消排序
        if (!fields || !directions) {
            this.sorts.delete(bindingPath);
            return;
        }
        var filedsArray = fields.split(',').filter(function (item) { return item; });
        var directionsArray = directions.split(',').filter(function (item) { return item; });
        if (filedsArray.length !== directionsArray.length) {
            throw new Error('arguments error,fields and direction are not match.');
        }
        var conditions = [];
        filedsArray.forEach(function (field, index) {
            var condition = { SortField: field, SortType: directionsArray[index] };
            conditions.push(condition);
        });
        this.sorts.set(bindingPath, conditions);
    };
    /**
     * 清空所有排序条件
     */
    SortConditionManager.prototype.clear = function () {
        this.sorts.clear();
    };
    return SortConditionManager;
}());
export { SortConditionManager };
//# sourceMappingURL=data:application/json;base64,