import * as tslib_1 from "tslib";
/**
 * 过滤条件管理器
 */
var FilterConditionManager = /** @class */ (function () {
    function FilterConditionManager() {
        this.filters = new Map();
    }
    /**
     * 获取过滤条件
     * @param bindingPath 绑定路径
     */
    FilterConditionManager.prototype.getFilters = function (bindingPath) {
        return this.filters.get(bindingPath) || [];
    };
    /**
     * 自定义合并
     * @param bindingPath 绑定路径
     * @param merge 合并函数
     */
    FilterConditionManager.prototype.mergeCondition = function (bindingPath, merge) {
        var conditions = this.filters.get(bindingPath) || [];
        var result = merge(conditions);
        this.filters.set(bindingPath, result);
    };
    /**
     * 增加过滤条件
     * @param bindingPath 绑定路径
     * @param condition 过滤条件
     */
    FilterConditionManager.prototype.addCondition = function (bindingPath, condition) {
        // 通过bindingPath获取对应的过滤条件
        var conditions = this.filters.get(bindingPath);
        var index = this.findConditionIndex(bindingPath, condition);
        if (index !== -1) {
            conditions[index] = condition;
        }
        else {
            conditions.push(condition);
        }
    };
    /**
     * 批量增加过滤条件
     * @param bindingPath 绑定路径
     * @param conditions 过滤条件数组
     */
    FilterConditionManager.prototype.addConditions = function (bindingPath, conditions) {
        var _this = this;
        if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {
            return;
        }
        conditions.forEach(function (condition) {
            _this.addCondition(bindingPath, condition);
        });
    };
    /**
     * 删除过滤条件
     * @param bindingPath 绑定路径
     * @param predicate 条件表达式
     */
    FilterConditionManager.prototype.removeCondition = function (bindingPath, predicate) {
        var _this = this;
        var conditions = this.filters.get(bindingPath);
        if (!conditions || conditions.length < 1) {
            return;
        }
        var removes = conditions.filter(predicate);
        if (removes) {
            removes.forEach(function (condition) {
                var index = _this.findConditionIndex(bindingPath, condition);
                if (index >= 0) {
                    conditions.splice(index, 1);
                }
            });
        }
    };
    /**
     * 清空过滤条件
     */
    FilterConditionManager.prototype.clear = function () {
        this.filters.clear();
    };
    /**
     * 设置过滤条件数组
     * @param bindingPath 绑定路径
     * @param conditions 过滤条件数组
     */
    FilterConditionManager.prototype.setConditions = function (bindingPath, conditions) {
        this.filters.set(bindingPath, conditions);
    };
    /**
     * 查找过滤条件索引
     * @param bindingPath 绑定路径
     * @param condition 过滤条件
     */
    FilterConditionManager.prototype.findConditionIndex = function (bindingPath, condition) {
        if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {
            return -1;
        }
        var conditions = this.filters.get(bindingPath);
        if (!conditions || conditions.length < 1) {
            return -1;
        }
        return conditions.findIndex(function (value, index) {
            var e_1, _a;
            var isEqual = true;
            var props = Object.keys(condition);
            try {
                for (var props_1 = tslib_1.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {
                        isEqual = false;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return isEqual;
        });
    };
    return FilterConditionManager;
}());
export { FilterConditionManager };
//# sourceMappingURL=data:application/json;base64,