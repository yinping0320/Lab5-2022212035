/*
 * @Author: Witt
 * @Date: 2019-03-07 17:24:38
 * @Last Modified by:   Witt
 * @Last Modified time: 2019-03-11 19:50:38
 */
import { createEntity, createEntities } from '../entity/index';
import { EntityCollection } from './entity_collection';
import { DataPathCreator, DataPathNodeType } from '../core/index';
import { EntityUtil } from '../binding-data/entity_util';
/**
 * 实体管理类
 */
var EntityManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function EntityManager(entityCollection) {
        this.entityCollection = entityCollection;
        this.entityType = entityCollection.entityType;
    }
    // #region 创建实体相关方法
    /**
     * 创建实体
     */
    EntityManager.prototype.createEntity = function (entityData) {
        var entity = createEntity(this.entityType, entityData);
        return entity;
    };
    /**
     * 批量创建实体
     */
    EntityManager.prototype.createEntities = function (entityListData, entityType) {
        var entities = createEntities(this.entityType, entityListData);
        return entities;
    };
    /**
     * 批量创建下级实体
     * @param fPath fpath
     * @param entityListData 实体数据
     */
    EntityManager.prototype.createEntitiesByPath = function (fPath, entityListData) {
        var subPaths = fPath.split('/');
        if (subPaths.length < 3) {
            throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fPath + "]\u683C\u5F0F\u4E0D\u5BF9");
        }
        if (entityListData.length < 1) {
            return [];
        }
        var childEntityList;
        var propInfo;
        var propName;
        for (var i = 2; i < subPaths.length; i = i + 2) {
            var fid = subPaths[i - 1];
            propName = subPaths[i];
            var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            var entityType = propInfo ? propInfo.propEntityType : this.entityType;
            propInfo = EntityUtil.getPropInfo(entityType, propName);
            if (!childEntityList) {
                throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fPath);
            }
        }
        var entities = entityListData.map(function (entityData) {
            return createEntity(propInfo.propEntityType, entityData);
        });
        return entities;
    };
    // #endregion
    // #region 获取实体、实体数组相关方法
    /**
     * 获取path对应的实体
     */
    EntityManager.prototype.getEntityByPath = function (path) {
        var entity = this.getEntityNodeByPath(path);
        return entity;
    };
    /**
     * 获取path对应的实体
     */
    EntityManager.prototype.getEntitiesByPath = function (path) {
        var entityCollectionOrList = this.getEntityNodeByPath(path);
        var entities;
        if (entityCollectionOrList instanceof EntityCollection === true) {
            entities = entityCollectionOrList.toArray();
        }
        else {
            entities = entityCollectionOrList.toArray();
        }
        return entities;
    };
    /**
     * 获取实体节点
     * @param path 节点路径
     */
    EntityManager.prototype.getEntityNodeByPath = function (path) {
        var dataPath = DataPathCreator.createByLongPathFromRoot(path, this);
        var entityNode = this.entityCollection;
        var pathNode = dataPath.head.next;
        while (pathNode) {
            if (pathNode.type === DataPathNodeType.DataId) {
                if (entityNode instanceof EntityCollection === true) {
                    entityNode = entityNode.getEntityById(pathNode.value);
                }
                else {
                    entityNode = entityNode.get(pathNode.value);
                }
            }
            else {
                entityNode = entityNode[pathNode.value];
            }
            if (!entityNode) {
                throw new Error("\u627E\u4E0D\u5230" + pathNode.value + "\u5BF9\u5E94\u7684\u6570\u636E\u8282\u70B9");
            }
            pathNode = pathNode.next;
        }
        return entityNode;
    };
    // #endregion
    // #region 获取、设置属性值
    /**
     * 获取path对应的实体属性值
     */
    EntityManager.prototype.getPropValueByPath = function (path) {
        var propName = path.pop();
        var entity = this.getEntityByPath(path);
        return entity[propName];
    };
    /**
     * 设置path对应实体的属性值
     */
    EntityManager.prototype.setPropValueByPath = function (path, propValue) {
        var propName = path.pop();
        var entity = this.getEntityByPath(path);
        entity[propName] = propValue;
    };
    // #endregion
    // #region 插入实体
    /**
     * 在path对应实体前插入实体
     */
    EntityManager.prototype.insertEntityBeforeByPath = function (fpath) {
        throw new Error('Not Implemented');
    };
    /**
     * 在path对应实体前批量插入实体
     */
    EntityManager.prototype.insertEntitiesBeforeByPath = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 在path对应实体前插入实体
     */
    EntityManager.prototype.insertEntityAfterByPath = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 在path对应实体前批量插入实体
     */
    EntityManager.prototype.insertEntitiesAfterByPath = function () {
        throw new Error('Not Implemented');
    };
    // #endregion
    // #region 追加实体
    /**
     * 在path对应的实体集合中追加1个实体
     */
    // public appendEntityByPath(fpath: string[], entity: Entity): void {
    //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
    //   if (entityCollectionOrList instanceof EntityCollection === true) {
    //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
    //     entityCollection.addEntity(entity);
    //   } else {
    //     const entityList = (entityCollectionOrList as EntityList<Entity>);
    //     entityList.appendEntity(entity);
    //   }
    // }
    /**
     * 根据path获取实体集合
     * @param fpath 路径 /id/childsNode/id/xxx
     * @param entityData 实体数据
     * @param initialData[可选] 默认值
     */
    EntityManager.prototype.appendEntityByPath = function (fpath, entityData, initialData, isCloned) {
        if (isCloned === void 0) { isCloned = false; }
        var subPaths = fpath.split('/');
        if (subPaths.length < 3) {
            throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
        }
        var childEntityList;
        var propInfo;
        var propName;
        for (var i = 2; i < subPaths.length; i = i + 2) {
            var fid = subPaths[i - 1];
            propName = subPaths[i];
            // todo: EntityCollection重构之后这里无需差异处理
            var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            var entityType = propInfo ? propInfo.propEntityType : this.entityType;
            propInfo = EntityUtil.getPropInfo(entityType, propName);
            if (!childEntityList) {
                throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
            }
        }
        // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
        var childEntity = createEntity(propInfo.propEntityType, entityData);
        // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值
        // if (initialData) {
        //   EntityUtil.appendInitialData(childEntity, initialData);
        // }
        childEntityList.appendNew(childEntity, isCloned);
        return childEntity;
    };
    /**
     * 在指定位置插入实体
     * @param fpath 父路径
     * @param entityData 实体数据
     * @param initialData 初始数据
     * @param position 插入位置
     */
    EntityManager.prototype.insertEntityByPath = function (fpath, entityData, initialData, position) {
        var subPaths = fpath.split('/');
        if (subPaths.length < 3) {
            throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
        }
        var childEntityList;
        var propInfo;
        var propName;
        for (var i = 2; i < subPaths.length; i = i + 2) {
            var fid = subPaths[i - 1];
            propName = subPaths[i];
            // todo: EntityCollection重构之后这里无需差异处理
            var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            var entityType = propInfo ? propInfo.propEntityType : this.entityType;
            propInfo = EntityUtil.getPropInfo(entityType, propName);
            if (!childEntityList) {
                throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
            }
        }
        // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
        var childEntity = createEntity(propInfo.propEntityType, entityData);
        // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值
        // if (initialData) {
        //   EntityUtil.appendInitialData(childEntity, initialData);
        // }
        childEntityList.insert(childEntity, position);
        return childEntity;
    };
    /**
     * 在path对应的实体集合中追加多个实体
     */
    EntityManager.prototype.appendEntitiesByPath = function (fpath, entities) {
        var entityCollectionOrList = this.getEntityNodeByPath(fpath);
        if (entityCollectionOrList instanceof EntityCollection === true) {
            var entityCollection = entityCollectionOrList;
            entityCollection.addEntities(entities);
        }
        else {
            var entityList = entityCollectionOrList;
            entityList.appendEntities(entities);
        }
    };
    // #endregion
    // #region 删除实体
    /**
     * 从fapth对应的实体集合中删除id对应的实体
     */
    // public removeEntityByPath(fpath: string[], id: string): void {
    //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
    //   if (entityCollectionOrList instanceof EntityCollection === true) {
    //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
    //     entityCollection.removeEntityById(id);
    //   } else {
    //     const entityList = (entityCollectionOrList as EntityList<Entity>);
    //     entityList.remove(id);
    //   }
    // }
    /**
     * 根据path获取实体集合
     * @param fpath path
     */
    EntityManager.prototype.removeEntityByPath = function (fpath, id) {
        var subPaths = fpath.split('/');
        if (subPaths.length < 3) {
            throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
        }
        var childEntityList;
        for (var i = 2; i < subPaths.length; i = i + 2) {
            var fid = subPaths[i - 1];
            var propName = subPaths[i];
            var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            if (!childEntityList) {
                throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
            }
        }
        childEntityList.remove(id);
    };
    /**
     * 从fapth对应的实体集合中删除ids对应的实体
     */
    EntityManager.prototype.removeEntitiesByPath = function (fpath, ids) {
        // const entityCollectionOrList = this.getEntityNodeByPath(fpath);
        // if (entityCollectionOrList instanceof EntityCollection === true) {
        //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
        //   entityCollection.removeEntitiesByIds(ids);
        // } else {
        //   const entityList = (entityCollectionOrList as EntityList<Entity>);
        //   entityList.remove(ids);
        // }
        throw new Error('Not Implemented');
    };
    // #endregion
    // #region 清空变更集相关方法
    /**
     * 清空所有实体的变更集
     */
    EntityManager.prototype.clearAllEntityChanges = function () {
        var entities = this.entityCollection.toArray();
        entities.forEach(function (entity) {
            entity.changes.splice(0, entity.changes.length);
        });
    };
    /**
     * 清空id指定的实体变更集
     */
    EntityManager.prototype.clearEntityChangesById = function (id) {
        var entity = this.entityCollection.getEntityById(id);
        if (!entity) {
            return;
        }
        entity.changes.splice(0, entity.changes.length);
    };
    /**
     * 清空ids数组中指定的实体的变更集
     */
    EntityManager.prototype.clearEntityChangesByIds = function (ids) {
        var _this = this;
        if (!ids || ids.length < 0) {
            return;
        }
        ids.forEach(function (id) {
            _this.clearEntityChangesById(id);
        });
    };
    // #endregion
    // #region 变更集检查相关方法
    /**
     * 检查所有的实体，是否有未提交的变更
     */
    EntityManager.prototype.checkAllEntityChanges = function () {
        var entities = this.entityCollection.toArray();
        var hasChanges = entities.some(function (entity) {
            if (entity.changes.length > 0) {
                return true;
            }
            else {
                return false;
            }
        });
        return hasChanges;
    };
    /**
     * 检查id对应的实体，是否有未提交的变更
     */
    EntityManager.prototype.checkEntityChangesById = function (id) {
        var entity = this.entityCollection.getEntityById(id);
        if (!entity) {
            return false;
        }
        return entity.changes.length > 0;
    };
    // #endregion
    // #region 不规范方法，待废弃
    /**
     * 待废弃
     * @deprecated
     */
    EntityManager.prototype.clearEntityChangesByArray = function (idArray) {
        this.clearEntityChangesByIds(idArray);
    };
    return EntityManager;
}());
export { EntityManager };
//# sourceMappingURL=data:application/json;base64,