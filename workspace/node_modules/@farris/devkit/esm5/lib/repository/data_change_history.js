import * as tslib_1 from "tslib";
import { DataChangeType } from '../core';
var DataChangeHistory = /** @class */ (function () {
    function DataChangeHistory() {
        this.history = [];
    }
    DataChangeHistory.prototype.addChange = function (dataChange) {
        var changeType = DataChangeType[dataChange.changeType];
        this["on" + changeType + "Data"](dataChange);
    };
    DataChangeHistory.prototype.addChanges = function (dataChange) {
        var _this = this;
        dataChange.forEach(function (change) { return _this.addChange(change); });
    };
    DataChangeHistory.prototype.clear = function () {
        this.history.splice(0, this.history.length);
    };
    DataChangeHistory.prototype.clearByIds = function (ids) {
        this.history = this.history.filter(function (item) {
            var e_1, _a;
            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                try {
                    for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                        var id = ids_1_1.value;
                        var include = item.fpath.split('/').includes(id);
                        return !include;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                return !ids.includes(item.dataId);
            }
        });
    };
    DataChangeHistory.prototype.isChanged = function () {
        return this.history.length > 0;
    };
    DataChangeHistory.prototype.onAddData = function (dataChange) {
        this.history.push(dataChange);
    };
    DataChangeHistory.prototype.onDeleteData = function (dataChange) {
        var index = this.history.findIndex(function (item) { return item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add; });
        if (index >= 0) {
            this.history.splice(index, 1);
        }
        else {
            this.history.push(dataChange);
        }
    };
    return DataChangeHistory;
}());
export { DataChangeHistory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9jaGFuZ2VfaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3JlcG9zaXRvcnkvZGF0YV9jaGFuZ2VfaGlzdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyRDtJQUVJO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNNLHFDQUFTLEdBQWhCLFVBQWlCLFVBQXNCO1FBQ25DLElBQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE9BQUssVUFBVSxTQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQ00sc0NBQVUsR0FBakIsVUFBa0IsVUFBd0I7UUFBMUMsaUJBRUM7UUFERyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDTSxpQ0FBSyxHQUFaO1FBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUNNLHNDQUFVLEdBQWpCLFVBQWtCLEdBQWE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUk7O1lBQ25DLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTs7b0JBQzlELEtBQWlCLElBQUEsUUFBQSxpQkFBQSxHQUFHLENBQUEsd0JBQUEseUNBQUU7d0JBQWpCLElBQU0sRUFBRSxnQkFBQTt3QkFDVCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQ25ELE9BQU8sQ0FBQyxPQUFPLENBQUM7cUJBQ25COzs7Ozs7Ozs7YUFDSjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxxQ0FBUyxHQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDTyxxQ0FBUyxHQUFqQixVQUFrQixVQUFzQjtRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ08sd0NBQVksR0FBcEIsVUFBcUIsVUFBc0I7UUFDdkMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsR0FBRyxFQUEzRSxDQUEyRSxDQUFDLENBQUM7UUFDMUgsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNqQztJQUNMLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0M7QUFDRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFDaGFuZ2UsIERhdGFDaGFuZ2VUeXBlIH0gZnJvbSAnLi4vY29yZSc7XHJcblxyXG5jbGFzcyBEYXRhQ2hhbmdlSGlzdG9yeSB7XHJcbiAgICBwcml2YXRlIGhpc3Rvcnk6IEFycmF5PERhdGFDaGFuZ2U+O1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gW107XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkQ2hhbmdlKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2UpIHtcclxuICAgICAgICBjb25zdCBjaGFuZ2VUeXBlID0gRGF0YUNoYW5nZVR5cGVbZGF0YUNoYW5nZS5jaGFuZ2VUeXBlXTtcclxuICAgICAgICB0aGlzW2BvbiR7Y2hhbmdlVHlwZX1EYXRhYF0oZGF0YUNoYW5nZSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkQ2hhbmdlcyhkYXRhQ2hhbmdlOiBEYXRhQ2hhbmdlW10pIHtcclxuICAgICAgICBkYXRhQ2hhbmdlLmZvckVhY2goY2hhbmdlID0+IHRoaXMuYWRkQ2hhbmdlKGNoYW5nZSkpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5zcGxpY2UoMCwgdGhpcy5oaXN0b3J5Lmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2xlYXJCeUlkcyhpZHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gdGhpcy5oaXN0b3J5LmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uZnBhdGggJiYgaXRlbS5mcGF0aCAhPT0gJy8nICYmIGl0ZW0uZnBhdGguaW5jbHVkZXMoJy8nKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmNsdWRlID0gaXRlbS5mcGF0aC5zcGxpdCgnLycpLmluY2x1ZGVzKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWluY2x1ZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlkcy5pbmNsdWRlcyhpdGVtLmRhdGFJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBpc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbkFkZERhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGRhdGFDaGFuZ2UpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbkRlbGV0ZURhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5oaXN0b3J5LmZpbmRJbmRleChpdGVtID0+IGl0ZW0uZGF0YUlkID09PSBkYXRhQ2hhbmdlLmRhdGFJZCAmJiBpdGVtLmNoYW5nZVR5cGUgPT09IERhdGFDaGFuZ2VUeXBlLkFkZCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZGF0YUNoYW5nZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7IERhdGFDaGFuZ2VIaXN0b3J5IH07XHJcbiJdfQ==