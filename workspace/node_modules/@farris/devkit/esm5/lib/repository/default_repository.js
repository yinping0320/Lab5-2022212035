/*
 * @Author: Witt
 * @Date: 2019-02-28 15:46:07
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-09-03 19:10:53
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Repository } from './repository';
import { EntityManager } from './entity_manager';
/**
 * 空Repository实现
 */
var DefaultRepository = /** @class */ (function (_super) {
    tslib_1.__extends(DefaultRepository, _super);
    function DefaultRepository(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        // 初始化实体管理器
        _this.entityManager = new EntityManager(_this.entityCollection);
        return _this;
    }
    /**
     * 获取实体列表
     */
    DefaultRepository.prototype.getEntities = function (filter, sorts, pageSize, pageIndex) {
        throw new Error('Not Implemented');
    };
    DefaultRepository.prototype.filter = function (filter, sorts, pageSize, pageIndex) {
        throw new Error('Not Implemented');
    };
    /**
     * 获取实体列表
     */
    DefaultRepository.prototype.getList = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 根据id获取实体
     * @param id 主实体id
     */
    DefaultRepository.prototype.getById = function (id) {
        throw new Error('Not Implemented');
    };
    /**
     * 根据id获取子表分页的实体
     * @param id 主实体id
     */
    DefaultRepository.prototype.getEntityById = function (id) {
        throw new Error('Not Implemented');
    };
    /**
     * 分页查询从表/从从表数据
     * @param path 绑定路径
     * @param ids 绑定路径对应的主键
     * @param filter 过滤条件
     * @param sort 排序
     */
    DefaultRepository.prototype.queryChild = function (paths, pageIndex, pageSize, filter, sort) {
        throw new Error('Not Implemented');
    };
    /**
     * 根据id更新实体
     */
    DefaultRepository.prototype.updateById = function (id) {
        throw new Error('Not Implemented');
    };
    /**
     * 更新实体数据(子表分页)
     * @param id 实体主键
     */
    DefaultRepository.prototype.updateEntityById = function (id) {
        throw new Error('Not Implemented');
    };
    /**
     * 创建实体
     */
    DefaultRepository.prototype.create = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 创建新实体，并追加到实体列表
     */
    DefaultRepository.prototype.append = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 创建新的子实体，并追加到实体列表
     */
    DefaultRepository.prototype.appendByPath = function (path) {
        throw new Error('Not Implemented');
    };
    /**
     * 再指定位置插入数据
     * @param position 插入位置
     * @param defaultValue 默认值
     */
    DefaultRepository.prototype.insert = function (position, defaultValue) {
        throw new Error('Not Implemented');
    };
    /**
     * 在指定实体路径插入实体
     * @param path 实体路径
     * @param position 插入位置
     */
    DefaultRepository.prototype.insertByPath = function (path, position) {
        throw new Error('Not Implemented');
    };
    /**
     * 根据id删除对应实体
     */
    DefaultRepository.prototype.removeById = function (id, ifSave) {
        throw new Error('Not Implemented');
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    DefaultRepository.prototype.batchRemove = function (ids, ifSave) {
        throw new Error('Not Implemented');
    };
    /**
     * 根据ids批量删除实体
     */
    DefaultRepository.prototype.removeByIds = function (id, ifSave) {
        throw new Error('Not Implemented');
    };
    /**
     * 根据id删除path对应的后代实体
     */
    DefaultRepository.prototype.removeByPath = function (path, id) {
        throw new Error('Not Implemented');
    };
    /**
     * 提交id对应的根实体变更
     */
    DefaultRepository.prototype.updateChangesById = function (id) {
        throw new Error('Not Implemented');
    };
    /**
     * 提交path对应的实体变更
     */
    DefaultRepository.prototype.updateChangesByPath = function (path, id) {
        throw new Error('Not Implemented');
    };
    /**
     * 更新所有变更
     */
    DefaultRepository.prototype.updateAllChanges = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 应用服务器端变更
     */
    DefaultRepository.prototype.applyChanges = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 保存id对应数据的变更
     */
    DefaultRepository.prototype.applyChangesById = function (id) {
        throw new Error('Not Implemented');
    };
    /**
     * 取消变更集
     */
    DefaultRepository.prototype.cancelChanges = function (options) {
        throw new Error('Not Implemented');
    };
    /**
     * 批量删除子表
     */
    DefaultRepository.prototype.batchRemoveByPath = function (path, ids) {
        throw new Error('Not Implemented');
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    DefaultRepository.prototype.batchAppendByPath = function (path, defaultValues) {
        throw new Error('Not Implemented');
    };
    /**
     * 批量新增主表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    DefaultRepository.prototype.batchAppend = function (defaultValues) {
        throw new Error('Not Implemented');
    };
    DefaultRepository.prototype.hasChanges = function () {
        throw new Error('Not Implemented');
    };
    DefaultRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultRepository.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return DefaultRepository;
}(Repository));
export { DefaultRepository };
//# sourceMappingURL=data:application/json;base64,