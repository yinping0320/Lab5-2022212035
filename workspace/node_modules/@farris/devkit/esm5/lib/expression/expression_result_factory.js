import { Injectable, Injector } from "@angular/core";
import { ExpressionManager } from "./expression_manager";
;
import { ExpressionRegistry } from "./expression_registry";
import { ExpressionResult } from "./expression_result";
var ExpressionResultFactory = /** @class */ (function () {
    function ExpressionResultFactory(injector, expressionRegistry, expressionManager, expressionResult) {
        this.injector = injector;
        this.expressionRegistry = expressionRegistry;
        this.expressionManager = expressionManager;
        this.expressionResult = expressionResult;
        this.registeEvent();
    }
    ExpressionResultFactory.prototype.registeEvent = function () {
        var _this = this;
        this.expressionRegistry.expressions.subscribe(function (expressionObjects) {
            // 加载完表达式之后做一次计算
            expressionObjects.forEach(function (expressionObject) {
                if (expressionObject.deps && expressionObject.deps.length > 0) {
                    return;
                }
                var result = _this.expressionManager.eval(expressionObject.id);
                _this.expressionResult[expressionObject.id] = result;
            });
        });
    };
    ExpressionResultFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExpressionResultFactory.ctorParameters = function () { return [
        { type: Injector },
        { type: ExpressionRegistry },
        { type: ExpressionManager },
        { type: ExpressionResult }
    ]; };
    return ExpressionResultFactory;
}());
export { ExpressionResultFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9yZXN1bHRfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9yZXN1bHRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUFBLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFHdEQ7SUFFRSxpQ0FBb0IsUUFBa0IsRUFBVSxrQkFBc0MsRUFBVSxpQkFBb0MsRUFBVSxnQkFBa0M7UUFBNUosYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUM5SyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNPLDhDQUFZLEdBQXBCO1FBQUEsaUJBV0M7UUFWQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFDLGlCQUFnRDtZQUM3RixnQkFBZ0I7WUFDaEIsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQUMsZ0JBQTZDO2dCQUN0RSxJQUFJLGdCQUFnQixDQUFDLElBQUksSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDN0QsT0FBTztpQkFDUjtnQkFDRCxJQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQ3RELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFoQkYsVUFBVTs7OztnQkFOVSxRQUFRO2dCQUVwQixrQkFBa0I7Z0JBRGxCLGlCQUFpQjtnQkFFakIsZ0JBQWdCOztJQW9CekIsOEJBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWhCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEV4cHJlc3Npb25NYW5hZ2VyIH0gZnJvbSBcIi4vZXhwcmVzc2lvbl9tYW5hZ2VyXCI7O1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uUmVnaXN0cnkgfSBmcm9tIFwiLi9leHByZXNzaW9uX3JlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7IEV4cHJlc3Npb25SZXN1bHQgfSBmcm9tIFwiLi9leHByZXNzaW9uX3Jlc3VsdFwiXHJcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblJlc3VsdEZhY3Rvcnkge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGV4cHJlc3Npb25SZWdpc3RyeTogRXhwcmVzc2lvblJlZ2lzdHJ5LCBwcml2YXRlIGV4cHJlc3Npb25NYW5hZ2VyOiBFeHByZXNzaW9uTWFuYWdlciwgcHJpdmF0ZSBleHByZXNzaW9uUmVzdWx0OiBFeHByZXNzaW9uUmVzdWx0KSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVFdmVudCgpO1xyXG4gIH1cclxuICBwcml2YXRlIHJlZ2lzdGVFdmVudCgpIHtcclxuICAgIHRoaXMuZXhwcmVzc2lvblJlZ2lzdHJ5LmV4cHJlc3Npb25zLnN1YnNjcmliZSgoZXhwcmVzc2lvbk9iamVjdHM6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdFtdKSA9PiB7XHJcbiAgICAgIC8vIOWKoOi9veWujOihqOi+vuW8j+S5i+WQjuWBmuS4gOasoeiuoeeul1xyXG4gICAgICBleHByZXNzaW9uT2JqZWN0cy5mb3JFYWNoKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5kZXBzICYmIGV4cHJlc3Npb25PYmplY3QuZGVwcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZXhwcmVzc2lvbk1hbmFnZXIuZXZhbChleHByZXNzaW9uT2JqZWN0LmlkKTtcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHRbZXhwcmVzc2lvbk9iamVjdC5pZF0gPSByZXN1bHQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59Il19