import { Injectable } from "@angular/core";
import { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from "@farris/expression-engine";
var ExpressionExecutor = /** @class */ (function () {
    function ExpressionExecutor() {
    }
    /**
     * 编译执行
     * @param expression
     * @param context
     * @returns
     */
    ExpressionExecutor.prototype.compile = function (expressionObject, context) {
        if (Object.prototype.toString.call(context) !== '[object Object]') {
            throw new Error('上下文必须为对象！');
        }
        var expressionContext = this.buildContext(context);
        if (!expressionObject.factory) {
            var expression_1 = new ExpressionEngineExpression(expressionObject.expression, expressionContext);
            expressionObject.factory = expression_1.compile();
        }
        var expression = expressionObject.factory;
        return expression.eval(expressionContext);
    };
    /**
     * 解析
     * @param expression
     * @param context
     * @returns
     */
    ExpressionExecutor.prototype.eval = function (expression, context) {
        if (Object.prototype.toString.call(context) !== '[object Object]') {
            throw new Error('上下文必须为对象！');
        }
        var expressionContext = this.buildContext(context);
        var expressionEngine = new ExpressionEngine(expressionContext);
        return expressionEngine.eval(expression);
    };
    /**
     * 构造表达式上下文
     * @param context
     * @returns
     */
    ExpressionExecutor.prototype.buildContext = function (context) {
        var expressionContext = new ExpressionContext();
        if (context && Object.keys(context).length > 0) {
            Object.keys(context).forEach(function (key) {
                expressionContext.set(key, context[key]);
            });
        }
        return expressionContext;
    };
    ExpressionExecutor.decorators = [
        { type: Injectable }
    ];
    return ExpressionExecutor;
}());
export { ExpressionExecutor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLElBQUksMEJBQTBCLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUxSDtJQUFBO0lBZ0RBLENBQUM7SUE5Q0M7Ozs7O09BS0c7SUFDSSxvQ0FBTyxHQUFkLFVBQWUsZ0JBQTZDLEVBQUUsT0FBaUM7UUFDN0YsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssaUJBQWlCLEVBQUU7WUFDakUsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM5QjtRQUNELElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQzdCLElBQU0sWUFBVSxHQUFHLElBQUksMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDbEcsZ0JBQWdCLENBQUMsT0FBTyxHQUFHLFlBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNqRDtRQUNELElBQU0sVUFBVSxHQUErQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFDeEUsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksaUNBQUksR0FBWCxVQUFZLFVBQWtCLEVBQUUsT0FBaUM7UUFDL0QsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssaUJBQWlCLEVBQUU7WUFDakUsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM5QjtRQUNELElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRCxJQUFNLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNLLHlDQUFZLEdBQXBCLFVBQXFCLE9BQWdDO1FBQ25ELElBQU0saUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBQ2xELElBQUksT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQVc7Z0JBQ3ZDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQzs7Z0JBL0NGLFVBQVU7O0lBZ0RYLHlCQUFDO0NBQUEsQUFoREQsSUFnREM7U0EvQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24gYXMgRXhwcmVzc2lvbkVuZ2luZUV4cHJlc3Npb24sIEV4cHJlc3Npb25Db250ZXh0LCBFeHByZXNzaW9uRW5naW5lIH0gZnJvbSBcIkBmYXJyaXMvZXhwcmVzc2lvbi1lbmdpbmVcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uRXhlY3V0b3IgaW1wbGVtZW50cyBFeHByZXNzaW9uLklFeGVjdXRvciB7XHJcbiAgLyoqXHJcbiAgICog57yW6K+R5omn6KGMXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24gXHJcbiAgICogQHBhcmFtIGNvbnRleHQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBpbGUoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0LCBjb250ZXh0PzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pOiBhbnkge1xyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjb250ZXh0KSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfkuIrkuIvmloflv4XpobvkuLrlr7nosaHvvIEnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGV4cHJlc3Npb25Db250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoY29udGV4dCk7XHJcbiAgICBpZiAoIWV4cHJlc3Npb25PYmplY3QuZmFjdG9yeSkge1xyXG4gICAgICBjb25zdCBleHByZXNzaW9uID0gbmV3IEV4cHJlc3Npb25FbmdpbmVFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QuZXhwcmVzc2lvbiwgZXhwcmVzc2lvbkNvbnRleHQpO1xyXG4gICAgICBleHByZXNzaW9uT2JqZWN0LmZhY3RvcnkgPSBleHByZXNzaW9uLmNvbXBpbGUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGV4cHJlc3Npb246IEV4cHJlc3Npb25FbmdpbmVFeHByZXNzaW9uID0gZXhwcmVzc2lvbk9iamVjdC5mYWN0b3J5O1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb24uZXZhbChleHByZXNzaW9uQ29udGV4dCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOino+aekFxyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIFxyXG4gICAqIEBwYXJhbSBjb250ZXh0IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBldmFsKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dD86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGNvbnRleHQpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+S4iuS4i+aWh+W/hemhu+S4uuWvueixoe+8gScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhwcmVzc2lvbkNvbnRleHQgPSB0aGlzLmJ1aWxkQ29udGV4dChjb250ZXh0KTtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25FbmdpbmUgPSBuZXcgRXhwcmVzc2lvbkVuZ2luZShleHByZXNzaW9uQ29udGV4dCk7XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbkVuZ2luZS5ldmFsKGV4cHJlc3Npb24pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmnoTpgKDooajovr7lvI/kuIrkuIvmlodcclxuICAgKiBAcGFyYW0gY29udGV4dCBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkQ29udGV4dChjb250ZXh0OiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSk6IEV4cHJlc3Npb25Db250ZXh0IHtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25Db250ZXh0ID0gbmV3IEV4cHJlc3Npb25Db250ZXh0KCk7XHJcbiAgICBpZiAoY29udGV4dCAmJiBPYmplY3Qua2V5cyhjb250ZXh0KS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgZXhwcmVzc2lvbkNvbnRleHQuc2V0KGtleSwgY29udGV4dFtrZXldKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXhwcmVzc2lvbkNvbnRleHQ7XHJcbiAgfVxyXG59Il19