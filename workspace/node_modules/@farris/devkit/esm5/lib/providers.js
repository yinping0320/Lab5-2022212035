import { VARIABLE_PROVIDERS } from './variable/index';
import { AppContext, AppContextManager } from './app/index';
import { RestfulService } from './rest/index';
import { RouterParamService } from './misc/index';
import { COMMAND_PROVIDERS } from './command/index';
import { FrameContext, FrameEventBus } from './frame/index';
import { Subscription } from './event-mechanism/index';
import { EventBus } from './event-bus-new/index';
import { RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener } from './listener/index';
import { ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor, ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory } from './expression/index';
import { RepositoryEffector, UIStateEffector, ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN, DependencyEffector, RelativeEffector, ValidateEffector, RequiredEffector, VisibleEffector } from './effector/index';
import { EntityDependencyResolver, StateDependencyResolver, ResolverRegistry, CommentDependencyResolver, RESOLVER_TOKEN, ResolveService } from './resolver/index';
import { RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler, StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler, BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry, BindingDataSelectionChangedEventHandler } from './event-handler/index';
// --------------------------------------------------------------------------------
// Legacy
// --------------------------------------------------------------------------------
/**
 * Providers for compatibility.
 */
export var FARRIS_DEVKIT_APP_PROVIDERS = [
    EventBus,
    Subscription,
    RestfulService,
    VARIABLE_PROVIDERS,
    AppContext,
    RouterParamService,
    FrameEventBus,
    AppContextManager
];
// --------------------------------------------------------------------------------
// Current
// --------------------------------------------------------------------------------
/**
 * Providers for DevkitModule.
 */
export var FARRIS_DEVKIT_MODULE_PROVIDERS = [
    EventBus,
    Subscription,
    RestfulService,
    RouterParamService,
    VARIABLE_PROVIDERS,
    AppContextManager,
];
/**
 * Providers for root frame components.
 */
export var FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS = [
    AppContext,
];
/**
 * 表达式provider
 * @description 放置到root-component，整个表单只需要注入一次
 */
export var FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS = [
    ListenerRegistry,
    Listeners,
    EffectorRegistry,
    EffectorFactory,
    ExpressionRegistry,
    ExpressionEventEmitter,
    ExpressionExecutor,
    ExpressionManager,
    ExpressionResult,
    ExpressionResultFactory,
    { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true },
    { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true },
    { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true },
    ResolverRegistry,
    { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true },
    EventHandlerRegistry,
    ExpressionEngineImpl,
    ResolveService
];
/**
 * 表达式监听器provider
 * @description 放置到每个表单的root上，组合表单root也需要放置
 */
export var FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS = [
    { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true },
    { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true },
    { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true }
];
export var FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS = [
    { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: RelativeEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true },
    { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true }
];
/**
 * Providers for frame components.
 */
export var FARRIS_DEVKIT_FRAME_PROVIDERS = [
    COMMAND_PROVIDERS,
    FrameContext
];
//# sourceMappingURL=data:application/json;base64,