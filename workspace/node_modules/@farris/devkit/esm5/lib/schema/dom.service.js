import * as tslib_1 from "tslib";
var DomService = /** @class */ (function () {
    function DomService() {
    }
    DomService.prototype.getElementByBinding = function (contents, bindingFieldId, parentElement) {
        var e_1, _a;
        var controls = [];
        try {
            for (var contents_1 = tslib_1.__values(contents), contents_1_1 = contents_1.next(); !contents_1_1.done; contents_1_1 = contents_1.next()) {
                var element = contents_1_1.value;
                // 优先变量数据集合类组件
                if (element.fields) { // 列表
                    var childControls = this.getElementByBinding(element.fields, bindingFieldId, element);
                    controls.push.apply(controls, tslib_1.__spread(childControls));
                }
                // 其次遍历容器类组件
                else if (element.contents) { // 容器组件
                    var childControls = this.getElementByBinding(element.contents, bindingFieldId, element);
                    controls.push.apply(controls, tslib_1.__spread(childControls));
                }
                // 再次遍历集合类字段节点
                else if (element.editor) {
                    var childControls = this.getElementByBinding([element.editor], bindingFieldId, element);
                    controls.push.apply(controls, tslib_1.__spread(childControls));
                }
                // 最后遍历输入类组件
                else if (element.binding && element.binding.field === bindingFieldId) {
                    controls.push({
                        element: element,
                        parentElement: parentElement
                    });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (contents_1_1 && !contents_1_1.done && (_a = contents_1.return)) _a.call(contents_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return controls;
    };
    return DomService;
}());
export { DomService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9zY2hlbWEvZG9tLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBRUU7SUFBZ0IsQ0FBQztJQUVWLHdDQUFtQixHQUExQixVQUEyQixRQUFlLEVBQUUsY0FBc0IsRUFBRSxhQUFhOztRQUMvRSxJQUFNLFFBQVEsR0FBNkIsRUFBRSxDQUFDOztZQUM5QyxLQUFzQixJQUFBLGFBQUEsaUJBQUEsUUFBUSxDQUFBLGtDQUFBLHdEQUFFO2dCQUEzQixJQUFNLE9BQU8scUJBQUE7Z0JBQ2hCLGNBQWM7Z0JBQ2QsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSztvQkFDekIsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUN4RixRQUFRLENBQUMsSUFBSSxPQUFiLFFBQVEsbUJBQVMsYUFBYSxHQUFFO2lCQUNqQztnQkFDRCxZQUFZO3FCQUNQLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU87b0JBQ2xDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDMUYsUUFBUSxDQUFDLElBQUksT0FBYixRQUFRLG1CQUFTLGFBQWEsR0FBRTtpQkFDakM7Z0JBQ0QsY0FBYztxQkFDVCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7b0JBQ3ZCLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQzFGLFFBQVEsQ0FBQyxJQUFJLE9BQWIsUUFBUSxtQkFBUyxhQUFhLEdBQUU7aUJBQ2pDO2dCQUNELFlBQVk7cUJBQ1AsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLGNBQWMsRUFBRTtvQkFDcEUsUUFBUSxDQUFDLElBQUksQ0FBQzt3QkFDWixPQUFPLEVBQUUsT0FBTzt3QkFDaEIsYUFBYSxFQUFFLGFBQWE7cUJBQzdCLENBQUMsQ0FBQztpQkFDSjthQUNGOzs7Ozs7Ozs7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBaENELElBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERvbVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0RWxlbWVudEJ5QmluZGluZyhjb250ZW50czogYW55W10sIGJpbmRpbmdGaWVsZElkOiBzdHJpbmcsIHBhcmVudEVsZW1lbnQpOiBFbGVtZW50QnlCaW5kaW5nUmVzdWx0W10ge1xyXG4gICAgY29uc3QgY29udHJvbHM6IEVsZW1lbnRCeUJpbmRpbmdSZXN1bHRbXSA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNvbnRlbnRzKSB7XHJcbiAgICAgIC8vIOS8mOWFiOWPmOmHj+aVsOaNrumbhuWQiOexu+e7hOS7tlxyXG4gICAgICBpZiAoZWxlbWVudC5maWVsZHMpIHsgLy8g5YiX6KGoXHJcbiAgICAgICAgY29uc3QgY2hpbGRDb250cm9scyA9IHRoaXMuZ2V0RWxlbWVudEJ5QmluZGluZyhlbGVtZW50LmZpZWxkcywgYmluZGluZ0ZpZWxkSWQsIGVsZW1lbnQpO1xyXG4gICAgICAgIGNvbnRyb2xzLnB1c2goLi4uY2hpbGRDb250cm9scyk7XHJcbiAgICAgIH1cclxuICAgICAgLy8g5YW25qyh6YGN5Y6G5a655Zmo57G757uE5Lu2XHJcbiAgICAgIGVsc2UgaWYgKGVsZW1lbnQuY29udGVudHMpIHsgLy8g5a655Zmo57uE5Lu2XHJcbiAgICAgICAgY29uc3QgY2hpbGRDb250cm9scyA9IHRoaXMuZ2V0RWxlbWVudEJ5QmluZGluZyhlbGVtZW50LmNvbnRlbnRzLCBiaW5kaW5nRmllbGRJZCwgZWxlbWVudCk7XHJcbiAgICAgICAgY29udHJvbHMucHVzaCguLi5jaGlsZENvbnRyb2xzKTtcclxuICAgICAgfVxyXG4gICAgICAvLyDlho3mrKHpgY3ljobpm4blkIjnsbvlrZfmrrXoioLngrlcclxuICAgICAgZWxzZSBpZiAoZWxlbWVudC5lZGl0b3IpIHtcclxuICAgICAgICBjb25zdCBjaGlsZENvbnRyb2xzID0gdGhpcy5nZXRFbGVtZW50QnlCaW5kaW5nKFtlbGVtZW50LmVkaXRvcl0sIGJpbmRpbmdGaWVsZElkLCBlbGVtZW50KTtcclxuICAgICAgICBjb250cm9scy5wdXNoKC4uLmNoaWxkQ29udHJvbHMpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOacgOWQjumBjeWOhui+k+WFpeexu+e7hOS7tlxyXG4gICAgICBlbHNlIGlmIChlbGVtZW50LmJpbmRpbmcgJiYgZWxlbWVudC5iaW5kaW5nLmZpZWxkID09PSBiaW5kaW5nRmllbGRJZCkge1xyXG4gICAgICAgIGNvbnRyb2xzLnB1c2goe1xyXG4gICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgICAgIHBhcmVudEVsZW1lbnQ6IHBhcmVudEVsZW1lbnRcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRyb2xzO1xyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIEVsZW1lbnRCeUJpbmRpbmdSZXN1bHQge1xyXG4gIGVsZW1lbnQ6IGFueTtcclxuICBwYXJlbnRFbGVtZW50OiBhbnk7XHJcbn0iXX0=