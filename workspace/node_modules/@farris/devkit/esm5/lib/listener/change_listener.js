import { Subject } from "rxjs";
import { DataPropGroup } from "../core";
/**
 * 变更监听器
 */
var ChangeListener = /** @class */ (function () {
    function ChangeListener() {
        this.subject = new Subject();
    }
    Object.defineProperty(ChangeListener.prototype, "onEvent", {
        get: function () {
            return this.subject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 找到元数据中所有实体路径
     * @param dataTypeInfo
     * @param results
     * @param paths
     */
    ChangeListener.prototype.findEntityPaths = function (dataTypeInfo, results, paths) {
        var _this = this;
        if (paths === void 0) { paths = []; }
        var list = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach(function (dataPropInfo) {
                paths.push(dataPropInfo.name);
                var childrens = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);
                if (childrens && childrens.length > 0) {
                    childrens.forEach(function (dataPropInfo) {
                        _this.findEntityPaths(dataPropInfo.typeInfo, results, paths);
                    });
                }
                else {
                    results.push(paths);
                }
            });
        }
        else if (paths && paths.length > 0) {
            results.push(paths);
        }
    };
    return ChangeListener;
}());
export { ChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlX2xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvbGlzdGVuZXIvY2hhbmdlX2xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHM0MsT0FBTyxFQUFFLGFBQWEsRUFBOEIsTUFBTSxTQUFTLENBQUM7QUFPcEU7O0dBRUc7QUFDSDtJQUFBO1FBQ1ksWUFBTyxHQUF1QixJQUFJLE9BQU8sRUFBYSxDQUFDO0lBNkJuRSxDQUFDO0lBNUJDLHNCQUFXLG1DQUFPO2FBQWxCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBRUQ7Ozs7O09BS0c7SUFDSSx3Q0FBZSxHQUF0QixVQUF1QixZQUEwQixFQUFFLE9BQWMsRUFBRSxLQUFvQjtRQUF2RixpQkFpQkM7UUFqQmtFLHNCQUFBLEVBQUEsVUFBb0I7UUFDckYsSUFBTSxJQUFJLEdBQW1CLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEYsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQTBCO2dCQUN0QyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUIsSUFBTSxTQUFTLEdBQW1CLFlBQVksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoRyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDckMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQTBCO3dCQUMzQyxLQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUM5RCxDQUFDLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQTlCRCxJQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tIFwiLi4vYmluZGluZy1kYXRhL2luZGV4XCI7XHJcbmltcG9ydCB7IE1vZGlmaWNhdGlvbiB9IGZyb20gXCIuLi9jaGFuZ2VzZXQvaW5kZXhcIjtcclxuaW1wb3J0IHsgRGF0YVByb3BHcm91cCwgRGF0YVByb3BJbmZvLCBEYXRhVHlwZUluZm8gfSBmcm9tIFwiLi4vY29yZVwiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0gfSBmcm9tIFwiLi4vdWktc3RhdGUvaW5kZXhcIjtcclxuXHJcbnR5cGUgRXZlbnRBcmdzID0gRXhwcmVzc2lvbi5FdmVudEFyZ3M7XHJcbnR5cGUgTGlzdGVuZXIgPSBFeHByZXNzaW9uLkxpc3RlbmVyO1xyXG5cclxuLyoqXHJcbiAqIOWPmOabtOebkeWQrOWZqFxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENoYW5nZUxpc3RlbmVyIGltcGxlbWVudHMgTGlzdGVuZXIge1xyXG4gIHByb3RlY3RlZCBzdWJqZWN0OiBTdWJqZWN0PEV2ZW50QXJncz4gPSBuZXcgU3ViamVjdDxFdmVudEFyZ3M+KCk7XHJcbiAgcHVibGljIGdldCBvbkV2ZW50KCk6IE9ic2VydmFibGU8RXZlbnRBcmdzPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdWJqZWN0O1xyXG4gIH1cclxuICBhYnN0cmFjdCBidWlsZEV2ZW50UGF0aChjaGFuZ2U6IENoYW5nZSB8IE1vZGlmaWNhdGlvbiB8VUlTdGF0ZU9ic2VydmFibGVQYXJhbSk6IHN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIOaJvuWIsOWFg+aVsOaNruS4reaJgOacieWunuS9k+i3r+W+hFxyXG4gICAqIEBwYXJhbSBkYXRhVHlwZUluZm8gXHJcbiAgICogQHBhcmFtIHJlc3VsdHMgXHJcbiAgICogQHBhcmFtIHBhdGhzIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaW5kRW50aXR5UGF0aHMoZGF0YVR5cGVJbmZvOiBEYXRhVHlwZUluZm8sIHJlc3VsdHM6IGFueVtdLCBwYXRoczogc3RyaW5nW10gPSBbXSkge1xyXG4gICAgY29uc3QgbGlzdDogRGF0YVByb3BJbmZvW10gPSBkYXRhVHlwZUluZm8uZ2V0UHJvcEluZm9zQnlHcm91cChEYXRhUHJvcEdyb3VwLkxpc3QpO1xyXG4gICAgaWYgKGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxpc3QuZm9yRWFjaCgoZGF0YVByb3BJbmZvOiBEYXRhUHJvcEluZm8pID0+IHtcclxuICAgICAgICBwYXRocy5wdXNoKGRhdGFQcm9wSW5mby5uYW1lKTtcclxuICAgICAgICBjb25zdCBjaGlsZHJlbnM6IERhdGFQcm9wSW5mb1tdID0gZGF0YVByb3BJbmZvLnR5cGVJbmZvLmdldFByb3BJbmZvc0J5R3JvdXAoRGF0YVByb3BHcm91cC5MaXN0KTtcclxuICAgICAgICBpZiAoY2hpbGRyZW5zICYmIGNoaWxkcmVucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjaGlsZHJlbnMuZm9yRWFjaCgoZGF0YVByb3BJbmZvOiBEYXRhUHJvcEluZm8pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5maW5kRW50aXR5UGF0aHMoZGF0YVByb3BJbmZvLnR5cGVJbmZvLCByZXN1bHRzLCBwYXRocyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHBhdGhzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmIChwYXRocyAmJiBwYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHJlc3VsdHMucHVzaChwYXRocyk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19