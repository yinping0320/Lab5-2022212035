import * as tslib_1 from "tslib";
import { Injectable, Injector, Inject } from '@angular/core';
// import { FRAME_ID, NAMESPACE } from '../frame/index';
import { UIState } from '../ui-state/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { BindingData } from '../binding-data/index';
import { FRAME_ID, NAMESPACE } from '../frame/tokens';
/**
 * 监听UIState变更
 */
var UIStateChangeListener = /** @class */ (function (_super) {
    tslib_1.__extends(UIStateChangeListener, _super);
    function UIStateChangeListener(injector, uiState, namespace, frameId, bindingData) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.uiState = uiState;
        _this.namespace = namespace;
        _this.frameId = frameId;
        _this.bindingData = bindingData;
        _this.registerEvent();
        return _this;
    }
    UIStateChangeListener.prototype.buildEventPath = function (change) {
        return null;
    };
    UIStateChangeListener.prototype.registerEvent = function () {
        var _this = this;
        if (this.uiState && this.uiState.changes) {
            this.uiState.changes.subscribe(function (change) {
                var modification = {
                    ns: _this.namespace,
                    path: [change.field],
                    type: Expression.EventType.ValueChanged,
                    value: change.value,
                    source: Expression.EventSource.State,
                    frameId: _this.frameId
                };
                // console.log("UIStateChangeListener", modification);
                _this.subject.next(modification);
            });
        }
    };
    UIStateChangeListener.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UIStateChangeListener.ctorParameters = function () { return [
        { type: Injector },
        { type: UIState },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: String, decorators: [{ type: Inject, args: [FRAME_ID,] }] },
        { type: BindingData }
    ]; };
    return UIStateChangeListener;
}(ChangeListener));
export { UIStateChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvbGlzdGVuZXIvdWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0Qsd0RBQXdEO0FBQ3hELE9BQU8sRUFBRSxPQUFPLEVBQTBCLE1BQU0sbUJBQW1CLENBQUM7QUFDcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV0RDs7R0FFRztBQUNIO0lBQ29DLGlEQUFjO0lBQ2hELCtCQUFvQixRQUFrQixFQUFVLE9BQWdCLEVBQTZCLFNBQVMsRUFBNEIsT0FBZSxFQUFVLFdBQXdCO1FBQW5MLFlBQ0UsaUJBQU8sU0FFUjtRQUhtQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsYUFBTyxHQUFQLE9BQU8sQ0FBUztRQUE2QixlQUFTLEdBQVQsU0FBUyxDQUFBO1FBQTRCLGFBQU8sR0FBUCxPQUFPLENBQVE7UUFBVSxpQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUVqTCxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7O0lBQ3ZCLENBQUM7SUFDTSw4Q0FBYyxHQUFyQixVQUFzQixNQUE4QjtRQUNsRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTyw2Q0FBYSxHQUFyQjtRQUFBLGlCQWVDO1FBZEMsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQThCO2dCQUM1RCxJQUFNLFlBQVksR0FBYztvQkFDOUIsRUFBRSxFQUFFLEtBQUksQ0FBQyxTQUFTO29CQUNsQixJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO29CQUNwQixJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZO29CQUN2QyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7b0JBQ25CLE1BQU0sRUFBRSxVQUFVLENBQUMsV0FBVyxDQUFDLEtBQUs7b0JBQ3BDLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTztpQkFDdEIsQ0FBQztnQkFDRixzREFBc0Q7Z0JBQ3RELEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOztnQkF4QkYsVUFBVTs7OztnQkFYVSxRQUFRO2dCQUVwQixPQUFPO2dEQVdxRCxNQUFNLFNBQUMsU0FBUzs2Q0FBc0IsTUFBTSxTQUFDLFFBQVE7Z0JBUmpILFdBQVc7O0lBK0JwQiw0QkFBQztDQUFBLEFBekJELENBQ29DLGNBQWMsR0F3QmpEO0FBQ0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8vIGltcG9ydCB7IEZSQU1FX0lELCBOQU1FU1BBQ0UgfSBmcm9tICcuLi9mcmFtZS9pbmRleCc7XHJcbmltcG9ydCB7IFVJU3RhdGUsIFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0gfSBmcm9tICcuLi91aS1zdGF0ZS9pbmRleCc7XHJcbmltcG9ydCB7IENoYW5nZUxpc3RlbmVyIH0gZnJvbSAnLi9jaGFuZ2VfbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhIH0gZnJvbSAnLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuaW1wb3J0IHsgRlJBTUVfSUQsIE5BTUVTUEFDRSB9IGZyb20gJy4uL2ZyYW1lL3Rva2Vucyc7XHJcbnR5cGUgRXZlbnRBcmdzID0gRXhwcmVzc2lvbi5FdmVudEFyZ3M7XHJcbi8qKlxyXG4gKiDnm5HlkKxVSVN0YXRl5Y+Y5pu0XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFVJU3RhdGVDaGFuZ2VMaXN0ZW5lciBleHRlbmRzIENoYW5nZUxpc3RlbmVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSB1aVN0YXRlOiBVSVN0YXRlLCBASW5qZWN0KE5BTUVTUEFDRSkgcHJpdmF0ZSBuYW1lc3BhY2UsIEBJbmplY3QoRlJBTUVfSUQpIHByaXZhdGUgZnJhbWVJZDogc3RyaW5nLCBwcml2YXRlIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudCgpO1xyXG4gIH1cclxuICBwdWJsaWMgYnVpbGRFdmVudFBhdGgoY2hhbmdlOiBVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudCgpIHtcclxuICAgIGlmICh0aGlzLnVpU3RhdGUgJiYgdGhpcy51aVN0YXRlLmNoYW5nZXMpIHtcclxuICAgICAgdGhpcy51aVN0YXRlLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0pID0+IHtcclxuICAgICAgICBjb25zdCBtb2RpZmljYXRpb246IEV2ZW50QXJncyA9IHtcclxuICAgICAgICAgIG5zOiB0aGlzLm5hbWVzcGFjZSxcclxuICAgICAgICAgIHBhdGg6IFtjaGFuZ2UuZmllbGRdLFxyXG4gICAgICAgICAgdHlwZTogRXhwcmVzc2lvbi5FdmVudFR5cGUuVmFsdWVDaGFuZ2VkLFxyXG4gICAgICAgICAgdmFsdWU6IGNoYW5nZS52YWx1ZSxcclxuICAgICAgICAgIHNvdXJjZTogRXhwcmVzc2lvbi5FdmVudFNvdXJjZS5TdGF0ZSxcclxuICAgICAgICAgIGZyYW1lSWQ6IHRoaXMuZnJhbWVJZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJVSVN0YXRlQ2hhbmdlTGlzdGVuZXJcIiwgbW9kaWZpY2F0aW9uKTtcclxuICAgICAgICB0aGlzLnN1YmplY3QubmV4dChtb2RpZmljYXRpb24pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuZXhwb3J0IHsgVUlTdGF0ZUNoYW5nZUxpc3RlbmVyIH07XHJcbiJdfQ==