import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { ModifyType } from '../changeset/index';
import { Repository } from '../repository/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { BindingData } from '../binding-data/index';
import { NAMESPACE } from '../frame/tokens';
var EventType = Expression.EventType;
var RepositoryChangeListener = /** @class */ (function (_super) {
    tslib_1.__extends(RepositoryChangeListener, _super);
    function RepositoryChangeListener(injector, repository, namespace) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.repository = repository;
        _this.namespace = namespace;
        _this.bindingData = _this.injector.get(BindingData, null);
        _this.registerEvent();
        return _this;
    }
    RepositoryChangeListener.prototype.registerEvent = function () {
        var _this = this;
        if (this.repository && this.repository.changes) {
            this.repository.changes.subscribe(function (change) {
                var eventType = _this.convertEventType(change);
                if (!eventType) {
                    return;
                }
                var path = _this.buildEventPath(change);
                var modification = {
                    ns: _this.namespace,
                    type: eventType,
                    path: path,
                    value: change.value,
                    source: Expression.EventSource.Field,
                };
                // console.log("RepositoryChangeListener", modification);
                _this.subject.next(modification);
            });
        }
        // repository只监听值变化事件
        if (this.repository && this.repository.entityCollectionChange) {
            this.repository.entityCollectionChange.subscribe(function (change) {
                var eventType = _this.convertEventType(change);
                if (!eventType) {
                    return;
                }
                var path = _this.buildEventPath(change);
                var modification = {
                    ns: _this.namespace,
                    type: eventType,
                    path: path,
                    value: change.value,
                    source: Expression.EventSource.Repository,
                };
                _this.subject.next(modification);
            });
        }
    };
    /**
     * 构建事件路径参数
     * @param event event
     * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]
     * @returns
     */
    RepositoryChangeListener.prototype.buildEventPath = function (event) {
        var _this = this;
        var paths = event.path;
        var result = [];
        if (!paths || paths.length < 1) {
            // 主表新增时path为空
            return result;
        }
        // 过滤掉udt的冒号，关联字段的id
        result = paths.filter(function (path, index) {
            if (index % 2 === 0 && path.includes(':')) {
                if (path === ':') {
                    return false;
                }
                var primaryKey = path.split(':')[0];
                if (primaryKey !== _this.repository.primaryKey) {
                    return false;
                }
            }
            return true;
        });
        // 移除路径中的id字符串
        // result = paths.map((path: string, index: number) => {
        //   if (path.includes(':') && index % 2 === 0) {
        //     return path.split(':')[1];
        //   }
        //   return path;
        // });
        // 此时result中不应该有冒号
        return result;
    };
    RepositoryChangeListener.prototype.convertEventType = function (change) {
        var eventType = null;
        if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {
            // eventType = Expression.EventType.Append;
            // 不处理新增
        }
        else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {
            // eventType = Expression.EventType.Remove;
        }
        else if (change.type === ModifyType.Load) {
            // eventType = Expression.EventType.Load;
        }
        else if (change.type === ModifyType.ValueChange) {
            //eventType = Expression.EventType.ValueChanged;
            // 不处理值变化
        }
        else if (change.type === ModifyType.Update) {
            eventType = Expression.EventType.Update;
        }
        return eventType;
    };
    RepositoryChangeListener.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RepositoryChangeListener.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] }
    ]; };
    return RepositoryChangeListener;
}(ChangeListener));
export { RepositoryChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9jaGFuZ2VfbGlzdGVuZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9saXN0ZW5lci9yZXBvc2l0b3J5X2NoYW5nZV9saXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUc1QyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO0FBRXZDO0lBQ3VDLG9EQUFjO0lBRW5ELGtDQUFvQixRQUFrQixFQUFVLFVBQThCLEVBQTZCLFNBQVM7UUFBcEgsWUFDRSxpQkFBTyxTQUdSO1FBSm1CLGNBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxnQkFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFBNkIsZUFBUyxHQUFULFNBQVMsQ0FBQTtRQUVsSCxLQUFJLENBQUMsV0FBVyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFjLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyRSxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7O0lBQ3ZCLENBQUM7SUFFTyxnREFBYSxHQUFyQjtRQUFBLGlCQXFDQztRQXBDQyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVB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SUFDTyxtREFBZ0IsR0FBeEIsVUFBeUIsTUFBb0I7UUFDM0MsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDN0csMkNBQTJDO1lBQzNDLFFBQVE7U0FDVDthQUFNLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLFVBQVUsRUFBRTtZQUNyRiwyQ0FBMkM7U0FDNUM7YUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtZQUMxQyx5Q0FBeUM7U0FDMUM7YUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUNqRCxnREFBZ0Q7WUFDaEQsU0FBUztTQUNWO2FBQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDNUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFBO1NBQ3hDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Z0JBbkdGLFVBQVU7Ozs7Z0JBWmtCLFFBQVE7Z0JBRzVCLFVBQVU7Z0RBWWdFLE1BQU0sU0FBQyxTQUFTOztJQWlHbkcsK0JBQUM7Q0FBQSxBQXBHRCxDQUN1QyxjQUFjLEdBbUdwRDtBQUVELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNb2RpZmljYXRpb24sIE1vZGlmeVR5cGUgfSBmcm9tICcuLi9jaGFuZ2VzZXQvaW5kZXgnO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHknO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yeS9pbmRleCc7XHJcbmltcG9ydCB7IENoYW5nZUxpc3RlbmVyIH0gZnJvbSAnLi9jaGFuZ2VfbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhIH0gZnJvbSAnLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuaW1wb3J0IHsgTkFNRVNQQUNFIH0gZnJvbSAnLi4vZnJhbWUvdG9rZW5zJztcclxuXHJcbnR5cGUgRXZlbnRBcmdzID0gRXhwcmVzc2lvbi5FdmVudEFyZ3M7XHJcbmNvbnN0IEV2ZW50VHlwZSA9IEV4cHJlc3Npb24uRXZlbnRUeXBlO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBSZXBvc2l0b3J5Q2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBDaGFuZ2VMaXN0ZW5lciB7XHJcbiAgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGE7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxFbnRpdHk+LCBASW5qZWN0KE5BTUVTUEFDRSkgcHJpdmF0ZSBuYW1lc3BhY2UpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhID0gdGhpcy5pbmplY3Rvci5nZXQ8QmluZGluZ0RhdGE+KEJpbmRpbmdEYXRhLCBudWxsKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlckV2ZW50KCkge1xyXG4gICAgaWYgKHRoaXMucmVwb3NpdG9yeSAmJiB0aGlzLnJlcG9zaXRvcnkuY2hhbmdlcykge1xyXG4gICAgICB0aGlzLnJlcG9zaXRvcnkuY2hhbmdlcy5zdWJzY3JpYmUoKGNoYW5nZTogTW9kaWZpY2F0aW9uKSA9PiB7XHJcbiAgICAgICAgbGV0IGV2ZW50VHlwZSA9IHRoaXMuY29udmVydEV2ZW50VHlwZShjaGFuZ2UpO1xyXG4gICAgICAgIGlmICghZXZlbnRUeXBlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkRXZlbnRQYXRoKGNoYW5nZSk7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uOiBFdmVudEFyZ3MgPSB7XHJcbiAgICAgICAgICBuczogdGhpcy5uYW1lc3BhY2UsXHJcbiAgICAgICAgICB0eXBlOiBldmVudFR5cGUsXHJcbiAgICAgICAgICBwYXRoOiBwYXRoLFxyXG4gICAgICAgICAgdmFsdWU6IGNoYW5nZS52YWx1ZSxcclxuICAgICAgICAgIHNvdXJjZTogRXhwcmVzc2lvbi5FdmVudFNvdXJjZS5GaWVsZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiUmVwb3NpdG9yeUNoYW5nZUxpc3RlbmVyXCIsIG1vZGlmaWNhdGlvbik7XHJcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQobW9kaWZpY2F0aW9uKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyByZXBvc2l0b3J55Y+q55uR5ZCs5YC85Y+Y5YyW5LqL5Lu2XHJcbiAgICBpZiAodGhpcy5yZXBvc2l0b3J5ICYmIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uQ2hhbmdlLnN1YnNjcmliZSgoY2hhbmdlOiBNb2RpZmljYXRpb24pID0+IHtcclxuICAgICAgICBsZXQgZXZlbnRUeXBlID0gdGhpcy5jb252ZXJ0RXZlbnRUeXBlKGNoYW5nZSk7XHJcbiAgICAgICAgaWYgKCFldmVudFR5cGUpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRFdmVudFBhdGgoY2hhbmdlKTtcclxuICAgICAgICBjb25zdCBtb2RpZmljYXRpb246IEV2ZW50QXJncyA9IHtcclxuICAgICAgICAgIG5zOiB0aGlzLm5hbWVzcGFjZSxcclxuICAgICAgICAgIHR5cGU6IGV2ZW50VHlwZSxcclxuICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICB2YWx1ZTogY2hhbmdlLnZhbHVlLFxyXG4gICAgICAgICAgc291cmNlOiBFeHByZXNzaW9uLkV2ZW50U291cmNlLlJlcG9zaXRvcnksXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnN1YmplY3QubmV4dChtb2RpZmljYXRpb24pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5p6E5bu65LqL5Lu26Lev5b6E5Y+C5pWwXHJcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XHJcbiAgICogQGRlc2NyaXB0aW9uIOaehOW7uuWujOS5i+WQjueahOi3r+W+hOexu+S8vFtpZCxwcm9wXSBvciBbaWQs5LuO6KGo5ZCNcyzku47ooajlvZPliY3ooYxpZCzku47ooajlsZ7mgKddIG9yIFtpZCx1ZHQsdWR0X3Byb3BdXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGJ1aWxkRXZlbnRQYXRoKGV2ZW50OiBNb2RpZmljYXRpb24pOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwYXRocyA9IGV2ZW50LnBhdGg7XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBpZiAoIXBhdGhzIHx8IHBhdGhzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgLy8g5Li76KGo5paw5aKe5pe2cGF0aOS4uuepulxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLy8g6L+H5ruk5o6JdWR055qE5YaS5Y+377yM5YWz6IGU5a2X5q6155qEaWRcclxuICAgIHJlc3VsdCA9IHBhdGhzLmZpbHRlcigocGF0aDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGlmIChpbmRleCAlIDIgPT09IDAgJiYgcGF0aC5pbmNsdWRlcygnOicpKSB7XHJcbiAgICAgICAgaWYgKHBhdGggPT09ICc6Jykge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcmltYXJ5S2V5ID0gcGF0aC5zcGxpdCgnOicpWzBdO1xyXG4gICAgICAgIGlmIChwcmltYXJ5S2V5ICE9PSB0aGlzLnJlcG9zaXRvcnkucHJpbWFyeUtleSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgLy8g56e76Zmk6Lev5b6E5Lit55qEaWTlrZfnrKbkuLJcclxuICAgIC8vIHJlc3VsdCA9IHBhdGhzLm1hcCgocGF0aDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAvLyAgIGlmIChwYXRoLmluY2x1ZGVzKCc6JykgJiYgaW5kZXggJSAyID09PSAwKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHBhdGguc3BsaXQoJzonKVsxXTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gICByZXR1cm4gcGF0aDtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8g5q2k5pe2cmVzdWx05Lit5LiN5bqU6K+l5pyJ5YaS5Y+3XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBwcml2YXRlIGNvbnZlcnRFdmVudFR5cGUoY2hhbmdlOiBNb2RpZmljYXRpb24pOiBFeHByZXNzaW9uLkV2ZW50VHlwZSB7XHJcbiAgICBsZXQgZXZlbnRUeXBlID0gbnVsbDtcclxuICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gTW9kaWZ5VHlwZS5BZGQgfHwgY2hhbmdlLnR5cGUgPT09IE1vZGlmeVR5cGUuQWRkRGF0YSB8fCBjaGFuZ2UudHlwZSA9PT0gTW9kaWZ5VHlwZS5JbnNlcnQpIHtcclxuICAgICAgLy8gZXZlbnRUeXBlID0gRXhwcmVzc2lvbi5FdmVudFR5cGUuQXBwZW5kO1xyXG4gICAgICAvLyDkuI3lpITnkIbmlrDlop5cclxuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IE1vZGlmeVR5cGUuUmVtb3ZlIHx8IGNoYW5nZS50eXBlID09PSBNb2RpZnlUeXBlLlJlbW92ZURhdGEpIHtcclxuICAgICAgLy8gZXZlbnRUeXBlID0gRXhwcmVzc2lvbi5FdmVudFR5cGUuUmVtb3ZlO1xyXG4gICAgfSBlbHNlIGlmIChjaGFuZ2UudHlwZSA9PT0gTW9kaWZ5VHlwZS5Mb2FkKSB7XHJcbiAgICAgIC8vIGV2ZW50VHlwZSA9IEV4cHJlc3Npb24uRXZlbnRUeXBlLkxvYWQ7XHJcbiAgICB9IGVsc2UgaWYgKGNoYW5nZS50eXBlID09PSBNb2RpZnlUeXBlLlZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgIC8vZXZlbnRUeXBlID0gRXhwcmVzc2lvbi5FdmVudFR5cGUuVmFsdWVDaGFuZ2VkO1xyXG4gICAgICAvLyDkuI3lpITnkIblgLzlj5jljJZcclxuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IE1vZGlmeVR5cGUuVXBkYXRlKSB7XHJcbiAgICAgIGV2ZW50VHlwZSA9IEV4cHJlc3Npb24uRXZlbnRUeXBlLlVwZGF0ZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV2ZW50VHlwZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFJlcG9zaXRvcnlDaGFuZ2VMaXN0ZW5lciB9Il19