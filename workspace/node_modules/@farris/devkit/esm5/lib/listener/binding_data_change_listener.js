import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData, BindingList, ChangeType } from '../binding-data/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { NAMESPACE } from '../frame/index';
import { Repository } from '../repository/index';
var EventType = Expression.EventType;
/**
 * 监听bindingList变更
 * @description 主要用于监听行切换等事件
 */
var BindingDataChangeListener = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataChangeListener, _super);
    function BindingDataChangeListener(injector, bindingData, namespace) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.bindingData = bindingData;
        _this.namespace = namespace;
        _this.repository = null;
        _this.repository = _this.injector.get(Repository, null);
        _this.registerEvent();
        return _this;
    }
    /**
     * 注册值变化事件
     */
    BindingDataChangeListener.prototype.registerEvent = function () {
        var _this = this;
        if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {
            this.bindingData.changes.subscribe(function (change) {
                if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {
                    var eventType = null;
                    if (change.type === ChangeType.Append) {
                        eventType = EventType.Append;
                    }
                    else if (change.type === ChangeType.ValueChanged) {
                        eventType = EventType.ValueChanged;
                    }
                    else if (change.type === ChangeType.Remove) {
                        eventType = EventType.Remove;
                    }
                    else if (change.type === ChangeType.Load) {
                        // 主表新增
                        if (change.create === true) {
                            eventType = EventType.Append;
                        }
                        else {
                            eventType = EventType.Load;
                        }
                    }
                    else if (change.type === ChangeType.SelectionChanged) {
                        eventType = EventType.SelectionChanged;
                    }
                    var path = _this.buildEventPath(change);
                    var modification = {
                        ns: _this.namespace,
                        path: path,
                        type: eventType,
                        source: Expression.EventSource.BindingData,
                        value: change.value,
                        id: change.id,
                        isTreeNodeLoadScene: change.isTreeNodeLoadScene
                    };
                    // console.log("BindingDataChangeListener", modification);
                    _this.subject.next(modification);
                }
            });
        }
    };
    BindingDataChangeListener.prototype.buildEventPath = function (change) {
        var path = change.path;
        var paths = [];
        // if (!path || path.length < 1) {
        //   return paths;
        // }
        var primaryValue = this.bindingData.list.currentItem.primaryKeyValue || change.id;
        if (primaryValue) {
            if (!(change.type === ChangeType.Load && change.path.length === 0)) {
                paths.push(this.bindingData.list.primaryKey + ":" + primaryValue);
            }
        }
        var currentPath = [];
        for (var index = 0; index < path.length; index++) {
            var propertyName = path[index];
            currentPath.push(propertyName);
            var item = this.bindingData.getValue(currentPath);
            paths.push(propertyName);
            if (item instanceof BindingList) {
                if (currentPath.length < path.length) {
                    var bindingList = item;
                    var currentId = bindingList.currentItem.primaryKeyValue;
                    if (index === path.length - 2 && change.id) {
                        currentId = change.id;
                    }
                    paths.push(this.bindingData.list.primaryKey + ":" + currentId);
                }
            }
        }
        return paths;
    };
    BindingDataChangeListener.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BindingDataChangeListener.ctorParameters = function () { return [
        { type: Injector },
        { type: BindingData },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] }
    ]; };
    return BindingDataChangeListener;
}(ChangeListener));
export { BindingDataChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2NoYW5nZV9saXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2xpc3RlbmVyL2JpbmRpbmdfZGF0YV9jaGFuZ2VfbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBVSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHakQsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQztBQUN2Qzs7O0dBR0c7QUFDSDtJQUN3QyxxREFBYztJQUVwRCxtQ0FBb0IsUUFBa0IsRUFBVSxXQUF3QixFQUE2QixTQUFTO1FBQTlHLFlBQ0UsaUJBQU8sU0FHUjtRQUptQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsaUJBQVcsR0FBWCxXQUFXLENBQWE7UUFBNkIsZUFBUyxHQUFULFNBQVMsQ0FBQTtRQUR0RyxnQkFBVSxHQUFvQixJQUFJLENBQUM7UUFHekMsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEQsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDOztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSyxpREFBYSxHQUFyQjtRQUFBLGlCQW9DQztRQW5DQyxJQUFJLElBQUksQ0FBQyxXQUFXLElB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QUNELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSwgQmluZGluZ0xpc3QsIENoYW5nZSwgQ2hhbmdlVHlwZSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IENoYW5nZUxpc3RlbmVyIH0gZnJvbSAnLi9jaGFuZ2VfbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IE5BTUVTUEFDRSB9IGZyb20gJy4uL2ZyYW1lL2luZGV4JztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xyXG5cclxudHlwZSBFdmVudEFyZ3MgPSBFeHByZXNzaW9uLkV2ZW50QXJncztcclxuY29uc3QgRXZlbnRUeXBlID0gRXhwcmVzc2lvbi5FdmVudFR5cGU7XHJcbi8qKlxyXG4gKiDnm5HlkKxiaW5kaW5nTGlzdOWPmOabtFxyXG4gKiBAZGVzY3JpcHRpb24g5Li76KaB55So5LqO55uR5ZCs6KGM5YiH5o2i562J5LqL5Lu2XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEJpbmRpbmdEYXRhQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBDaGFuZ2VMaXN0ZW5lciB7XHJcbiAgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4gPSBudWxsO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSwgQEluamVjdChOQU1FU1BBQ0UpIHByaXZhdGUgbmFtZXNwYWNlKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gdGhpcy5pbmplY3Rvci5nZXQoUmVwb3NpdG9yeSwgbnVsbCk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjOWAvOWPmOWMluS6i+S7tlxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudCgpIHtcclxuICAgIGlmICh0aGlzLmJpbmRpbmdEYXRhICYmIHRoaXMuYmluZGluZ0RhdGEuY2hhbmdlcyAmJiB0eXBlb2YgdGhpcy5iaW5kaW5nRGF0YS5jaGFuZ2VzLnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aGlzLmJpbmRpbmdEYXRhLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IENoYW5nZSkgPT4ge1xyXG4gICAgICAgIGlmICgoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuQXBwZW5kICYmIGNoYW5nZS5pc0Nsb25lZCAhPT0gdHJ1ZSkgfHwgY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuVmFsdWVDaGFuZ2VkIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLlJlbW92ZSB8fCBjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5Mb2FkIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLlNlbGVjdGlvbkNoYW5nZWQpIHtcclxuICAgICAgICAgIGxldCBldmVudFR5cGUgPSBudWxsO1xyXG4gICAgICAgICAgaWYgKGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkFwcGVuZCkge1xyXG4gICAgICAgICAgICBldmVudFR5cGUgPSBFdmVudFR5cGUuQXBwZW5kO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5WYWx1ZUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgZXZlbnRUeXBlID0gRXZlbnRUeXBlLlZhbHVlQ2hhbmdlZDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGV2ZW50VHlwZSA9IEV2ZW50VHlwZS5SZW1vdmU7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkxvYWQpIHtcclxuICAgICAgICAgICAgLy8g5Li76KGo5paw5aKeXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2UuY3JlYXRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgZXZlbnRUeXBlID0gRXZlbnRUeXBlLkFwcGVuZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBldmVudFR5cGUgPSBFdmVudFR5cGUuTG9hZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5TZWxlY3Rpb25DaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIGV2ZW50VHlwZSA9IEV2ZW50VHlwZS5TZWxlY3Rpb25DaGFuZ2VkXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZEV2ZW50UGF0aChjaGFuZ2UpO1xyXG4gICAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uOiBFdmVudEFyZ3MgPSB7XHJcbiAgICAgICAgICAgIG5zOiB0aGlzLm5hbWVzcGFjZSxcclxuICAgICAgICAgICAgcGF0aDogcGF0aCxcclxuICAgICAgICAgICAgdHlwZTogZXZlbnRUeXBlLFxyXG4gICAgICAgICAgICBzb3VyY2U6IEV4cHJlc3Npb24uRXZlbnRTb3VyY2UuQmluZGluZ0RhdGEsXHJcbiAgICAgICAgICAgIHZhbHVlOiBjaGFuZ2UudmFsdWUsXHJcbiAgICAgICAgICAgIGlkOiBjaGFuZ2UuaWQsXHJcbiAgICAgICAgICAgIGlzVHJlZU5vZGVMb2FkU2NlbmU6IGNoYW5nZS5pc1RyZWVOb2RlTG9hZFNjZW5lXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJCaW5kaW5nRGF0YUNoYW5nZUxpc3RlbmVyXCIsIG1vZGlmaWNhdGlvbik7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dChtb2RpZmljYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYnVpbGRFdmVudFBhdGgoY2hhbmdlOiBDaGFuZ2UpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwYXRoID0gY2hhbmdlLnBhdGg7XHJcbiAgICBjb25zdCBwYXRocyA9IFtdO1xyXG4gICAgLy8gaWYgKCFwYXRoIHx8IHBhdGgubGVuZ3RoIDwgMSkge1xyXG4gICAgLy8gICByZXR1cm4gcGF0aHM7XHJcbiAgICAvLyB9XHJcbiAgICBjb25zdCBwcmltYXJ5VmFsdWUgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudEl0ZW0ucHJpbWFyeUtleVZhbHVlIHx8IGNoYW5nZS5pZDtcclxuICAgIGlmIChwcmltYXJ5VmFsdWUpIHtcclxuICAgICAgaWYgKCEoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuTG9hZCAmJiBjaGFuZ2UucGF0aC5sZW5ndGggPT09IDApKSB7XHJcbiAgICAgICAgcGF0aHMucHVzaChgJHt0aGlzLmJpbmRpbmdEYXRhLmxpc3QucHJpbWFyeUtleX06JHtwcmltYXJ5VmFsdWV9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gW107XHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcGF0aC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gcGF0aFtpbmRleF07XHJcbiAgICAgIGN1cnJlbnRQYXRoLnB1c2gocHJvcGVydHlOYW1lKTtcclxuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYmluZGluZ0RhdGEuZ2V0VmFsdWUoY3VycmVudFBhdGgpO1xyXG4gICAgICBwYXRocy5wdXNoKHByb3BlcnR5TmFtZSk7XHJcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgQmluZGluZ0xpc3QpIHtcclxuICAgICAgICBpZiAoY3VycmVudFBhdGgubGVuZ3RoIDwgcGF0aC5sZW5ndGgpIHtcclxuICAgICAgICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gaXRlbSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgIGxldCBjdXJyZW50SWQgPSBiaW5kaW5nTGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWU7XHJcbiAgICAgICAgICBpZiAoaW5kZXggPT09IHBhdGgubGVuZ3RoIC0gMiAmJiBjaGFuZ2UuaWQpIHtcclxuICAgICAgICAgICAgY3VycmVudElkID0gY2hhbmdlLmlkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcGF0aHMucHVzaChgJHt0aGlzLmJpbmRpbmdEYXRhLmxpc3QucHJpbWFyeUtleX06JHtjdXJyZW50SWR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IEJpbmRpbmdEYXRhQ2hhbmdlTGlzdGVuZXIgfTtcclxuIl19