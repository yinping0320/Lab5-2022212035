/**
  * Encode a URL to a percent-encoded form, excluding already-encoded sequences.
  *
  * This function will take an already-encoded URL and encode all the non-URL
  * code points. This function will not encode the "%" character unless it is
  * not part of a valid sequence (`%20` will be left as-is, but `%foo` will
  * be encoded as `%25foo`).
  *
  * This encode is meant to be "safe" and does not throw errors. It will try as
  * hard as it can to properly encode the given URL, including replacing any raw,
  * unpaired surrogate pairs with the Unicode replacement character prior to
  * encoding.
  *
  * @param {string} url
  * @return {string}
  * @public
  */
export function encodeUrl(url) {
    var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
    var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
    var UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\uFFFD$2';
    return String(url)
        .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)
        .replace(ENCODE_CHARS_REGEXP, encodeURI)
        .replace(/#/g, '%23').replace(/&/g, '%26');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlX3VybC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvcmUvZW5jb2RlX3VybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7OztJQWdCSTtBQUVILE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBRztJQUM1QixJQUFNLG1CQUFtQixHQUFHLDBHQUEwRyxDQUFDO0lBQ3ZJLElBQU0sK0JBQStCLEdBQUcsMEVBQTBFLENBQUM7SUFDbkgsSUFBTSxnQ0FBZ0MsR0FBRyxZQUFZLENBQUM7SUFDdEQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ2YsT0FBTyxDQUFDLCtCQUErQixFQUFFLGdDQUFnQyxDQUFDO1NBQzFFLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUM7U0FDdkMsT0FBTyxDQUFDLElBQUksRUFBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAgKiBFbmNvZGUgYSBVUkwgdG8gYSBwZXJjZW50LWVuY29kZWQgZm9ybSwgZXhjbHVkaW5nIGFscmVhZHktZW5jb2RlZCBzZXF1ZW5jZXMuXHJcbiAgKlxyXG4gICogVGhpcyBmdW5jdGlvbiB3aWxsIHRha2UgYW4gYWxyZWFkeS1lbmNvZGVkIFVSTCBhbmQgZW5jb2RlIGFsbCB0aGUgbm9uLVVSTFxyXG4gICogY29kZSBwb2ludHMuIFRoaXMgZnVuY3Rpb24gd2lsbCBub3QgZW5jb2RlIHRoZSBcIiVcIiBjaGFyYWN0ZXIgdW5sZXNzIGl0IGlzXHJcbiAgKiBub3QgcGFydCBvZiBhIHZhbGlkIHNlcXVlbmNlIChgJTIwYCB3aWxsIGJlIGxlZnQgYXMtaXMsIGJ1dCBgJWZvb2Agd2lsbFxyXG4gICogYmUgZW5jb2RlZCBhcyBgJTI1Zm9vYCkuXHJcbiAgKlxyXG4gICogVGhpcyBlbmNvZGUgaXMgbWVhbnQgdG8gYmUgXCJzYWZlXCIgYW5kIGRvZXMgbm90IHRocm93IGVycm9ycy4gSXQgd2lsbCB0cnkgYXNcclxuICAqIGhhcmQgYXMgaXQgY2FuIHRvIHByb3Blcmx5IGVuY29kZSB0aGUgZ2l2ZW4gVVJMLCBpbmNsdWRpbmcgcmVwbGFjaW5nIGFueSByYXcsXHJcbiAgKiB1bnBhaXJlZCBzdXJyb2dhdGUgcGFpcnMgd2l0aCB0aGUgVW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgcHJpb3IgdG9cclxuICAqIGVuY29kaW5nLlxyXG4gICpcclxuICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcclxuICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAqIEBwdWJsaWNcclxuICAqL1xyXG5cclxuIGV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVcmwodXJsKSB7XHJcbiAgY29uc3QgRU5DT0RFX0NIQVJTX1JFR0VYUCA9IC8oPzpbXlxceDIxXFx4MjVcXHgyNi1cXHgzQlxceDNEXFx4M0YtXFx4NUJcXHg1RFxceDVGXFx4NjEtXFx4N0FcXHg3RV18JSg/OlteMC05QS1GYS1mXXxbMC05QS1GYS1mXVteMC05QS1GYS1mXXwkKSkrL2c7XHJcbiAgY29uc3QgVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFR0VYUCA9IC8oXnxbXlxcdUQ4MDAtXFx1REJGRl0pW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oW15cXHVEQzAwLVxcdURGRkZdfCQpL2c7XHJcbiAgY29uc3QgVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFUExBQ0UgPSAnJDFcXHVGRkZEJDInO1xyXG4gIHJldHVybiBTdHJpbmcodXJsKVxyXG4gICAgLnJlcGxhY2UoVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFR0VYUCwgVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFUExBQ0UpXHJcbiAgICAucmVwbGFjZShFTkNPREVfQ0hBUlNfUkVHRVhQLCBlbmNvZGVVUkkpXHJcbiAgICAucmVwbGFjZSgvIy9nLCclMjMnKS5yZXBsYWNlKC8mL2csJyUyNicpXHJcbn0iXX0=