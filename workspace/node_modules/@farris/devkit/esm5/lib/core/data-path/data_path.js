/*
 * @Author: Witt
 * @Date: 2018-12-27 09:26:41
 * @Last Modified by: Witt
 * @Last Modified time: 2019-01-15 22:00:45
 */
import { DataPathNode } from './data_path_node';
/**
 * 变更路径（简单双向列表）
 */
var DataPath = /** @class */ (function () {
    /**
     * 构造函数
     */
    function DataPath() {
        this.head = new DataPathNode(null, null);
        this.length = 0;
    }
    /**
     * 添加一个节点到头部
     */
    DataPath.prototype.unshift = function (type, data) {
        var newNode = new DataPathNode(type, data);
        newNode.next = this.head.next;
        newNode.prev = this.head;
        this.head.next = newNode;
        if (newNode.next) {
            newNode.next.prev = newNode;
        }
        this.length++;
    };
    /**
     * 在链表最后追加一个节点
     */
    DataPath.prototype.push = function (type, data) {
        var tailNode = this.getTail();
        var newNode = new DataPathNode(type, data);
        tailNode.next = newNode;
        this.length++;
    };
    /**
     * 获取链表尾部节点
     */
    DataPath.prototype.getTail = function () {
        var lastNode = this.head;
        while (lastNode.next) {
            lastNode = lastNode.next;
        }
        return lastNode;
    };
    /**
     * 转换为数组格式
     */
    DataPath.prototype.toArray = function () {
        var pathArray = [];
        var currentNode = this.head.next;
        while (currentNode) {
            pathArray.push(currentNode.type + ":" + currentNode.value);
            currentNode = currentNode.next;
        }
        return pathArray;
    };
    /**
     * 转换为字符串格式
     */
    DataPath.prototype.toString = function () {
        var pathArray = this.toArray();
        var pathString = pathArray.join(', ');
        return "[" + pathString + "]";
    };
    /**
     * 拷贝
     */
    DataPath.prototype.clone = function () {
        var newDataPath = new DataPath();
        var curDataNode = this.head.next;
        while (curDataNode) {
            newDataPath.push(curDataNode.type, curDataNode.value);
            curDataNode = curDataNode.next;
        }
        return newDataPath;
    };
    return DataPath;
}());
export { DataPath };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9wYXRoLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29yZS9kYXRhLXBhdGgvZGF0YV9wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBb0IsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRTs7R0FFRztBQUNIO0lBWUU7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNJLDBCQUFPLEdBQWQsVUFBZSxJQUFzQixFQUFFLElBQVM7UUFDOUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDOUIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUN6QixJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQzdCO1FBRUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLHVCQUFJLEdBQVgsVUFBWSxJQUFzQixFQUFFLElBQVM7UUFDM0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hDLElBQU0sT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3QyxRQUFRLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMEJBQU8sR0FBZDtRQUNFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekIsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3BCLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMEJBQU8sR0FBZDtRQUNFLElBQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxPQUFPLFdBQVcsRUFBRTtZQUNsQixTQUFTLENBQUMsSUFBSSxDQUFJLFdBQVcsQ0FBQyxJQUFJLFNBQUksV0FBVyxDQUFDLEtBQU8sQ0FBQyxDQUFFO1lBQzVELFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMkJBQVEsR0FBZjtRQUNFLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQyxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sTUFBSSxVQUFVLE1BQUcsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSSx3QkFBSyxHQUFaO1FBQ0UsSUFBTSxXQUFXLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNuQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxPQUFPLFdBQVcsRUFBRTtZQUNsQixXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RELFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBM0ZELElBMkZDO0FBRUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjogV2l0dFxyXG4gKiBARGF0ZTogMjAxOC0xMi0yNyAwOToyNjo0MVxyXG4gKiBATGFzdCBNb2RpZmllZCBieTogV2l0dFxyXG4gKiBATGFzdCBNb2RpZmllZCB0aW1lOiAyMDE5LTAxLTE1IDIyOjAwOjQ1XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRGF0YVBhdGhOb2RlLCBEYXRhUGF0aE5vZGVUeXBlIH0gZnJvbSAnLi9kYXRhX3BhdGhfbm9kZSc7XHJcbi8qKlxyXG4gKiDlj5jmm7Tot6/lvoTvvIjnroDljZXlj4zlkJHliJfooajvvIlcclxuICovXHJcbmNsYXNzIERhdGFQYXRoIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5aS06IqC54K5XHJcbiAgICovXHJcbiAgcHVibGljIGhlYWQ6IERhdGFQYXRoTm9kZTtcclxuXHJcbiAgLyoqXHJcbiAgICog6ZW/5bqmXHJcbiAgICovXHJcbiAgcHVibGljIGxlbmd0aDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaGVhZCA9IG5ldyBEYXRhUGF0aE5vZGUobnVsbCwgbnVsbCk7XHJcbiAgICB0aGlzLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqDkuIDkuKroioLngrnliLDlpLTpg6hcclxuICAgKi9cclxuICBwdWJsaWMgdW5zaGlmdCh0eXBlOiBEYXRhUGF0aE5vZGVUeXBlLCBkYXRhOiBhbnkpIHtcclxuICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgRGF0YVBhdGhOb2RlKHR5cGUsIGRhdGEpO1xyXG4gICAgbmV3Tm9kZS5uZXh0ID0gdGhpcy5oZWFkLm5leHQ7XHJcbiAgICBuZXdOb2RlLnByZXYgPSB0aGlzLmhlYWQ7XHJcblxyXG4gICAgdGhpcy5oZWFkLm5leHQgPSBuZXdOb2RlO1xyXG4gICAgaWYgKG5ld05vZGUubmV4dCkge1xyXG4gICAgICBuZXdOb2RlLm5leHQucHJldiA9IG5ld05vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5sZW5ndGgrKztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWcqOmTvuihqOacgOWQjui/veWKoOS4gOS4quiKgueCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXNoKHR5cGU6IERhdGFQYXRoTm9kZVR5cGUsIGRhdGE6IGFueSkge1xyXG4gICAgY29uc3QgdGFpbE5vZGUgPSB0aGlzLmdldFRhaWwoKTtcclxuICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgRGF0YVBhdGhOb2RlKHR5cGUsIGRhdGEpO1xyXG4gICAgdGFpbE5vZGUubmV4dCA9IG5ld05vZGU7XHJcbiAgICB0aGlzLmxlbmd0aCsrO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W6ZO+6KGo5bC+6YOo6IqC54K5XHJcbiAgICovXHJcbiAgcHVibGljIGdldFRhaWwoKTogRGF0YVBhdGhOb2RlIHtcclxuICAgIGxldCBsYXN0Tm9kZSA9IHRoaXMuaGVhZDtcclxuICAgIHdoaWxlIChsYXN0Tm9kZS5uZXh0KSB7XHJcbiAgICAgIGxhc3ROb2RlID0gbGFzdE5vZGUubmV4dDtcclxuICAgIH1cclxuICAgIHJldHVybiBsYXN0Tm9kZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4uuaVsOe7hOagvOW8j1xyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0FycmF5KCkge1xyXG4gICAgY29uc3QgcGF0aEFycmF5ID0gW107XHJcbiAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLmhlYWQubmV4dDtcclxuICAgIHdoaWxlIChjdXJyZW50Tm9kZSkge1xyXG4gICAgICBwYXRoQXJyYXkucHVzaChgJHtjdXJyZW50Tm9kZS50eXBlfToke2N1cnJlbnROb2RlLnZhbHVlfWApIDtcclxuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGhBcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4uuWtl+espuS4suagvOW8j1xyXG4gICAqL1xyXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgIGNvbnN0IHBhdGhBcnJheSA9IHRoaXMudG9BcnJheSgpO1xyXG4gICAgY29uc3QgcGF0aFN0cmluZyA9IHBhdGhBcnJheS5qb2luKCcsICcpO1xyXG4gICAgcmV0dXJuIGBbJHtwYXRoU3RyaW5nfV1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ou36LSdXHJcbiAgICovXHJcbiAgcHVibGljIGNsb25lKCk6IERhdGFQYXRoIHtcclxuICAgIGNvbnN0IG5ld0RhdGFQYXRoID0gbmV3IERhdGFQYXRoKCk7XHJcbiAgICBsZXQgY3VyRGF0YU5vZGUgPSB0aGlzLmhlYWQubmV4dDtcclxuICAgIHdoaWxlIChjdXJEYXRhTm9kZSkge1xyXG4gICAgICBuZXdEYXRhUGF0aC5wdXNoKGN1ckRhdGFOb2RlLnR5cGUsIGN1ckRhdGFOb2RlLnZhbHVlKTtcclxuICAgICAgY3VyRGF0YU5vZGUgPSBjdXJEYXRhTm9kZS5uZXh0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld0RhdGFQYXRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRGF0YVBhdGggfTtcclxuIl19