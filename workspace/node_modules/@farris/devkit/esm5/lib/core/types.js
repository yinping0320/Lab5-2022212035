import { InjectionToken } from '@angular/core';
// export type ClassType = new (...args: any[]) => any;
export var BigNumberType = 'BigNumber';
export var DataChangeType;
(function (DataChangeType) {
    DataChangeType[DataChangeType["Add"] = 0] = "Add";
    DataChangeType[DataChangeType["Delete"] = 1] = "Delete";
})(DataChangeType || (DataChangeType = {}));
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
})(HttpMethod || (HttpMethod = {}));
/**
 * 后端消息
 */
// tslint:disable-next-line: no-namespace
export var BackEndMessage;
(function (BackEndMessage) {
    /**
     * 消息级别
     */
    var Level;
    (function (Level) {
        Level["Error"] = "Error";
        Level["Info"] = "Info";
        Level["Warning"] = "Warning";
    })(Level = BackEndMessage.Level || (BackEndMessage.Level = {}));
    /**
     * 消息
     * @description 接口执行成功，但有info/warning级别的消息
     */
    var Message = /** @class */ (function () {
        function Message(bizMessages, context) {
            this.bizMessages = bizMessages;
            this.context = context;
        }
        return Message;
    }());
    BackEndMessage.Message = Message;
})(BackEndMessage || (BackEndMessage = {}));
export var RunMode;
(function (RunMode) {
    RunMode["compatible"] = "compatible";
    RunMode["highSpeed"] = "highSpeed";
})(RunMode || (RunMode = {}));
/**
 * 控制器运行模式，compatible | highSpeed
 */
export var DEVKIT_RUN_MODE = new InjectionToken('@farris/devkit_run_mode');
/**
 * 组件类型
 */
export var ComponentType;
(function (ComponentType) {
    ComponentType["farrisDataGridComponent"] = "farrisDatagridComponent";
    ComponentType["farrisTreeTalbeComponent"] = "farrisTreeTalbeComponent";
    ComponentType["primengTreeComponent"] = "primengTreeComponent";
    ComponentType["kendoGridComponent"] = "kendoGridComponent";
})(ComponentType || (ComponentType = {}));
export var DestroyOpportunity;
(function (DestroyOpportunity) {
    DestroyOpportunity["AppContextDestroy"] = "AppContextDestroy";
    DestroyOpportunity["MenuOrAppClose"] = "MenuOrAppClose";
})(DestroyOpportunity || (DestroyOpportunity = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0MsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxXQUFXLENBQUM7QUFXekMsTUFBTSxDQUFOLElBQVksY0FBOEI7QUFBMUMsV0FBWSxjQUFjO0lBQUcsaURBQUcsQ0FBQTtJQUFFLHVEQUFNLENBQUE7QUFBQyxDQUFDLEVBQTlCLGNBQWMsS0FBZCxjQUFjLFFBQWdCO0FBVzFDLE1BQU0sQ0FBTixJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7SUFDcEIseUJBQVcsQ0FBQTtJQUNYLDJCQUFhLENBQUE7SUFDYix5QkFBVyxDQUFBO0lBQ1gsK0JBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUxXLFVBQVUsS0FBVixVQUFVLFFBS3JCO0FBRUQ7O0dBRUc7QUFDSCx5Q0FBeUM7QUFDekMsTUFBTSxLQUFXLGNBQWMsQ0EyRTlCO0FBM0VELFdBQWlCLGNBQWM7SUFDN0I7O09BRUc7SUFDSCxJQUFZLEtBSVg7SUFKRCxXQUFZLEtBQUs7UUFDZix3QkFBZSxDQUFBO1FBQ2Ysc0JBQWEsQ0FBQTtRQUNiLDRCQUFtQixDQUFBO0lBQ3JCLENBQUMsRUFKVyxLQUFLLEdBQUwsb0JBQUssS0FBTCxvQkFBSyxRQUloQjtJQWlERDs7O09BR0c7SUFDSDtRQUdFLGlCQUFZLFdBQTBCLEVBQUUsT0FBd0I7WUFDOUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDekIsQ0FBQztRQUNILGNBQUM7SUFBRCxDQUFDLEFBUEQsSUFPQztJQVBZLHNCQUFPLFVBT25CLENBQUE7QUFPSCxDQUFDLEVBM0VnQixjQUFjLEtBQWQsY0FBYyxRQTJFOUI7QUE4Q0QsTUFBTSxDQUFOLElBQVksT0FHWDtBQUhELFdBQVksT0FBTztJQUNqQixvQ0FBeUIsQ0FBQTtJQUN6QixrQ0FBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSFcsT0FBTyxLQUFQLE9BQU8sUUFHbEI7QUFDRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBVSx5QkFBeUIsQ0FBQyxDQUFDO0FBSXRGOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksYUFLWDtBQUxELFdBQVksYUFBYTtJQUN2QixvRUFBbUQsQ0FBQTtJQUNuRCxzRUFBcUQsQ0FBQTtJQUNyRCw4REFBNkMsQ0FBQTtJQUM3QywwREFBeUMsQ0FBQTtBQUMzQyxDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEI7QUFHRCxNQUFNLENBQU4sSUFBWSxrQkFHWDtBQUhELFdBQVksa0JBQWtCO0lBQzVCLDZEQUF1QyxDQUFBO0lBQ3ZDLHVEQUFpQyxDQUFBO0FBQ25DLENBQUMsRUFIVyxrQkFBa0IsS0FBbEIsa0JBQWtCLFFBRzdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC9pbmRleCc7XHJcblxyXG4vLyBleHBvcnQgdHlwZSBDbGFzc1R5cGUgPSBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XHJcbmV4cG9ydCBjb25zdCBCaWdOdW1iZXJUeXBlID0gJ0JpZ051bWJlcic7XHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGlvbiB7XHJcbiAgcGFnZVNpemU6IG51bWJlcjtcclxuICBwYWdlSW5kZXg6IG51bWJlcjtcclxuICB0b3RhbDogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0RGF0YSB7XHJcbiAgZGF0YT86IGFueVtdO1xyXG4gIHBhZ2luYXRpb24/OiBQYWdpbmF0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBEYXRhQ2hhbmdlVHlwZSB7IEFkZCwgRGVsZXRlIH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUNoYW5nZSB7XHJcbiAgLyoqXHJcbiAgICog5Y+Y5pu06Lev5b6E77yM5Li76KaB6ZKI5a+55bim5LuO6KGo55qE5oOF5Ya1XHJcbiAgICovXHJcbiAgZnBhdGg/OiBzdHJpbmc7XHJcbiAgZGF0YUlkOiBzdHJpbmc7XHJcbiAgY2hhbmdlVHlwZTogRGF0YUNoYW5nZVR5cGU7XHJcbiAgW3Byb3A6IHN0cmluZ106IGFueTtcclxufVxyXG5leHBvcnQgZW51bSBIdHRwTWV0aG9kIHtcclxuICBHRVQgPSAnR0VUJyxcclxuICBQT1NUID0gJ1BPU1QnLFxyXG4gIFBVVCA9ICdQVVQnLFxyXG4gIERFTEVURSA9ICdERUxFVEUnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlkI7nq6/mtojmga9cclxuICovXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgQmFja0VuZE1lc3NhZ2Uge1xyXG4gIC8qKlxyXG4gICAqIOa2iOaBr+e6p+WIq1xyXG4gICAqL1xyXG4gIGV4cG9ydCBlbnVtIExldmVsIHtcclxuICAgIEVycm9yID0gJ0Vycm9yJyxcclxuICAgIEluZm8gPSAnSW5mbycsXHJcbiAgICBXYXJuaW5nID0gJ1dhcm5pbmcnXHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWQjuerr+a2iOaBr+WvueixoVxyXG4gICAqL1xyXG4gIGV4cG9ydCBpbnRlcmZhY2UgSU1lc3NhZ2Uge1xyXG4gICAgY29udGV4dDogSU1lc3NhZ2VDb250ZXh0O1xyXG4gICAgYml6TWVzc2FnZXM6IElCaXpNZXNzYWdlW107XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa2iOaBr+S9jee9rlxyXG4gICAqL1xyXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUxvY2F0aW9uIHtcclxuICAgIC8qKlxyXG4gICAgICog6KGo5ZCNXHJcbiAgICAgKi9cclxuICAgIG5vZGVDb2RlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOWvueW6lOeahOihjFxyXG4gICAgICovXHJcbiAgICByb3dzPzogc3RyaW5nW107XHJcbiAgICAvKipcclxuICAgICAqIOWvueW6lOeahOWIl1xyXG4gICAgICovXHJcbiAgICBjb2x1bW5zPzogc3RyaW5nW107XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa2iOaBr+e7k+aehFxyXG4gICAqL1xyXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUJpek1lc3NhZ2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmtojmga/kvY3nva5cclxuICAgICAqL1xyXG4gICAgbG9jYXRpb24/OiBJTG9jYXRpb247XHJcbiAgICAvKipcclxuICAgICAqIOa2iOaBr+WGheWuuVxyXG4gICAgICovXHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOa2iOaBr+e6p+WIq1xyXG4gICAgICovXHJcbiAgICBsZXZlbDogTGV2ZWw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa2iOaBr+S4iuS4i+aWh1xyXG4gICAqL1xyXG4gIGV4cG9ydCBpbnRlcmZhY2UgSU1lc3NhZ2VDb250ZXh0IHtcclxuICAgIG5zOiBzdHJpbmc7XHJcbiAgICBhcHBDb250ZXh0OiBBcHBDb250ZXh0O1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmtojmga9cclxuICAgKiBAZGVzY3JpcHRpb24g5o6l5Y+j5omn6KGM5oiQ5Yqf77yM5L2G5pyJaW5mby93YXJuaW5n57qn5Yir55qE5raI5oGvXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIE1lc3NhZ2UgaW1wbGVtZW50cyBJTWVzc2FnZSB7XHJcbiAgICBwdWJsaWMgY29udGV4dDogSU1lc3NhZ2VDb250ZXh0O1xyXG4gICAgcHVibGljIGJpek1lc3NhZ2VzOiBJQml6TWVzc2FnZVtdO1xyXG4gICAgY29uc3RydWN0b3IoYml6TWVzc2FnZXM6IElCaXpNZXNzYWdlW10sIGNvbnRleHQ6IElNZXNzYWdlQ29udGV4dCkge1xyXG4gICAgICB0aGlzLmJpek1lc3NhZ2VzID0gYml6TWVzc2FnZXM7XHJcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa2iOaBr+WkhOeQhueoi+W6j1xyXG4gICAqL1xyXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUJhY2tFbmRNZXNzYWdlSGFuZGxlciB7XHJcbiAgICBoYW5kbGUobWVzc2FnZTogSU1lc3NhZ2UsIGNvbnRleHQ/OiBhbnkpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZVNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIOaPkOekulxyXG4gICAqIEBwYXJhbSBtZXNzYWdlXHJcbiAgICovXHJcbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcpO1xyXG4gIC8qKlxyXG4gICAqIOmUmeivr1xyXG4gICAqIEBwYXJhbSBtZXNzYWdlXHJcbiAgICovXHJcbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nKTtcclxuICAvKipcclxuICAgKiDorablkYpcclxuICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAqL1xyXG4gIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTm90aWZ5U2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICog5o+Q56S6XHJcbiAgICogQHBhcmFtIG1lc3NhZ2VcclxuICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAqL1xyXG4gIGluZm8obWVzc2FnZTogc3RyaW5nLCBvcHRpb25zPzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pO1xyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbnRlbnQg5oiQ5Yqf5o+Q56S6XHJcbiAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgKi9cclxuICBzdWNjZXNzKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTtcclxuICAvKipcclxuICAgKiDorablkYrmj5DnpLpcclxuICAgKiBAcGFyYW0gY29udGVudFxyXG4gICAqL1xyXG4gIHdhcm5pbmcoY29udGVudDogc3RyaW5nKTtcclxuICAvKipcclxuICAgKiDplJnor6/mj5DnpLpcclxuICAgKiBAcGFyYW0gY29udGVudFxyXG4gICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICovXHJcbiAgZXJyb3IoY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBSdW5Nb2RlIHtcclxuICBjb21wYXRpYmxlID0gJ2NvbXBhdGlibGUnLFxyXG4gIGhpZ2hTcGVlZCA9ICdoaWdoU3BlZWQnXHJcbn1cclxuLyoqXHJcbiAqIOaOp+WItuWZqOi/kOihjOaooeW8j++8jGNvbXBhdGlibGUgfCBoaWdoU3BlZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBERVZLSVRfUlVOX01PREUgPSBuZXcgSW5qZWN0aW9uVG9rZW48UnVuTW9kZT4oJ0BmYXJyaXMvZGV2a2l0X3J1bl9tb2RlJyk7XHJcbmV4cG9ydCBpbnRlcmZhY2UgSURpc3Bvc2FibGUge1xyXG4gIGRpc3Bvc2UoYXJncz86IElEaXNwb3NlT3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIOe7hOS7tuexu+Wei1xyXG4gKi9cclxuZXhwb3J0IGVudW0gQ29tcG9uZW50VHlwZSB7XHJcbiAgZmFycmlzRGF0YUdyaWRDb21wb25lbnQgPSAnZmFycmlzRGF0YWdyaWRDb21wb25lbnQnLFxyXG4gIGZhcnJpc1RyZWVUYWxiZUNvbXBvbmVudCA9ICdmYXJyaXNUcmVlVGFsYmVDb21wb25lbnQnLFxyXG4gIHByaW1lbmdUcmVlQ29tcG9uZW50ID0gJ3ByaW1lbmdUcmVlQ29tcG9uZW50JyxcclxuICBrZW5kb0dyaWRDb21wb25lbnQgPSAna2VuZG9HcmlkQ29tcG9uZW50J1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDaGFuZ2VTZXRQb2xpY3kgPSAnZW50aXJlJyB8ICd2YWxpZCc7XHJcbmV4cG9ydCBlbnVtIERlc3Ryb3lPcHBvcnR1bml0eSB7XHJcbiAgQXBwQ29udGV4dERlc3Ryb3kgPSAnQXBwQ29udGV4dERlc3Ryb3knLFxyXG4gIE1lbnVPckFwcENsb3NlID0gJ01lbnVPckFwcENsb3NlJ1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgSURpc3Bvc2VPcHRpb25zIHtcclxuICBvcHBvcnR1bml0eTogRGVzdHJveU9wcG9ydHVuaXR5O1xyXG59XHJcblxyXG4iXX0=