/*
 * @Author: Lucus, Witt
 * @Date: 2018-10-30 15:53:59
 * @Last Modified by: Witt
 * @Last Modified time: 2018-11-08 17:25:08
 */
import { ModifyType } from './types';
import { isEqual } from 'lodash-es';
// function isEqual(value: any, other: any) {
//   return JSON.stringify(value) === JSON.stringify(other);
// }
/**
 * 实体数据变更集
 */
var ChangeSet = /** @class */ (function () {
    function ChangeSet() {
        /**
         * 变更集合
         */
        this.modifications = [];
    }
    Object.defineProperty(ChangeSet.prototype, "changes", {
        /**
         *  获取所有的变更记录
         */
        get: function () {
            return this.modifications;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 将变更集添加到集合中
     * ### 使用示例
     * ```
     * const changeSet = new ChangeSet();
     * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');
     * changeSet.append(modify)
     * ```
     * @param changeItem 变更数据
     */
    ChangeSet.prototype.append = function (modification) {
        switch (modification.type) {
            case ModifyType.ValueChange:
                this.appendValueChangeModification(modification);
                break;
            case ModifyType.Add:
            case ModifyType.Insert:
            case ModifyType.Clone:
                this.appendAddModification(modification);
                break;
            case ModifyType.Remove:
                this.appendRemoveModification(modification);
                break;
            case ModifyType.Load:
                break;
            default:
                break;
        }
    };
    /**
     * 添加值变化变更
     */
    ChangeSet.prototype.appendValueChangeModification = function (modification) {
        var value = modification.value;
        var path = modification.path.join('/');
        var existedModification = this.findModifyItemsPath(modification.path);
        if (existedModification) {
            // 如果存在相同路径的ValueChange类型的变更集，则更新值；
            existedModification.value = value;
        }
        else {
            var existedAddModification = this.findNewAddItemsPath(modification.path);
            if (existedAddModification) {
                // @todo：
                // 1、此处逻辑有问题，value是个字符串，不能直接assign；
                // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。
                // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；
                existedAddModification.value = Object.assign({}, existedAddModification.value, value);
            }
            else {
                // 其他情况，新增一条ValueChange变更。
                this.modifications.push(modification);
            }
        }
    };
    /**
     * 添加新增变更
     */
    ChangeSet.prototype.appendAddModification = function (modification) {
        var value = modification.value;
        var path = modification.path.join('/');
        var existedModification = this.findNewAddItemsPath(modification.path);
        if (existedModification) {
            // 1、如果已经存在相同路径的Add变更，则合并Value。
            existedModification.value = existedModification.value.concat(value);
        }
        else {
            // 2、如果没有，则新增一条Add变更。
            this.modifications.push(modification);
        }
    };
    /**
     * 添加删除变更
     */
    ChangeSet.prototype.appendRemoveModification = function (modification) {
        var path = modification.path;
        var primaryKey = Object.keys(modification.value)[0];
        var primaryKeyValue = modification.value[primaryKey];
        // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；
        // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）
        this.modifications.forEach(function (addModification) {
            // 只处理新增变更
            if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {
                return;
            }
            // @todo 只考虑主从结构，再深的层次暂不考虑
            if (isEqual(addModification.path, path) === false) {
                return;
            }
            // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除
            addModification.value = addModification.value.filter(function (addDataItem) {
                return addDataItem[primaryKey] !== primaryKeyValue;
            });
        });
        // 2、移除对应的修改变更
        var fullRemovePath = path.concat(primaryKey + ":" + primaryKeyValue);
        this.modifications = this.modifications.filter(function (valueModification) {
            if (valueModification.type !== ModifyType.ValueChange) {
                return true;
            }
            var valueChangePath = Array.from(valueModification.path);
            valueChangePath.pop();
            // 路径相同进行移除
            var isToRemove = isEqual(valueChangePath, fullRemovePath);
            return !isToRemove;
        });
        // 先删除下级删除变更，再插入
        // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景
        this.removeDescendantRemoveModifications(modification);
        this.modifications.push(modification);
    };
    /**
     * 清空变更集合
     */
    ChangeSet.prototype.clear = function () {
        this.modifications = [];
    };
    /**
     * 根据path获取Add类型的变更记录
     * @param path 变更路径
     */
    ChangeSet.prototype.findNewAddItemsPath = function (path) {
        return this.modifications.find(function (value, index) {
            return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);
        });
    };
    /**
     * 根据path获取ValueChange类型的变更记录
     * @param path 变更路径
     */
    ChangeSet.prototype.findModifyItemsPath = function (path) {
        return this.modifications.find(function (value, index) {
            return isEqual(path, value.path) && value.type === ModifyType.ValueChange;
        });
    };
    /**
     * 删除后代（包括自己）所有的删除变更
     * @todo：临时做一个最小化修改
     */
    ChangeSet.prototype.removeDescendantRemoveModifications = function (parentRemoveModification) {
        var _this = this;
        var parentPathWithId = this.createRemovePathWithId(parentRemoveModification);
        // 删除后代修改变更
        this.modifications = this.modifications.filter(function (modification) {
            if (modification.type !== ModifyType.Remove) {
                return true;
            }
            var descendantPathWithId = _this.createRemovePathWithId(modification);
            var isDescendant = _this.isDescendantPath(parentPathWithId, descendantPathWithId);
            return !isDescendant;
        });
    };
    /**
     * 获取删除路径的完整格式
     * @summary
     * 1、目前删除变更的路径标记到父集合；
     * 2、为了方便比较，将被删除的数据id加入到路径中
     */
    ChangeSet.prototype.createRemovePathWithId = function (modification) {
        var path = modification.path;
        var primaryKey = Object.keys(modification.value)[0];
        var primaryKeyValue = modification.value[primaryKey];
        var pathWithId = path.concat([primaryKey + ":" + primaryKeyValue]);
        return pathWithId;
    };
    /**
     * 判断是否是后代节点路径
     * @param parentPath 父节点路径
     * @param descendantPath 后代节点
     */
    ChangeSet.prototype.isDescendantPath = function (parentPath, descendantPath) {
        if (parentPath.length > descendantPath.length) {
            return false;
        }
        var isDescendantPath = true;
        parentPath.forEach(function (parentPathItem, parentPathItemIndex) {
            if (parentPathItem !== descendantPath[parentPathItemIndex]) {
                isDescendantPath = false;
                return;
            }
        });
        return isDescendantPath;
    };
    return ChangeSet;
}());
export { ChangeSet };
//# sourceMappingURL=data:application/json;base64,