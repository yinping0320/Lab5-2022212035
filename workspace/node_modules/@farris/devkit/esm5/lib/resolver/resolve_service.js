import * as tslib_1 from "tslib";
import { Injectable, Injector } from "@angular/core";
import { CommentDependencyResolver } from "./comment_dependency_resolver";
import { ResolverRegistry } from "./resolver_registry";
var ResolveService = /** @class */ (function () {
    function ResolveService(injector, resolverRegistry) {
        this.injector = injector;
        this.resolverRegistry = resolverRegistry;
    }
    ResolveService.prototype.resolve = function (expression) {
        var deps = [];
        if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {
            return;
        }
        // 优先使用用户自定义的依赖
        var commentDependencyResolver = this.resolverRegistry.resolvers.find(function (resolver) { return resolver instanceof CommentDependencyResolver; });
        if (commentDependencyResolver) {
            var commentDependencies = commentDependencyResolver.resolve(expression);
            if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {
                deps.push.apply(deps, tslib_1.__spread(commentDependencies));
            }
        }
        // 如果用户已经自定义了依赖，则不再计算
        if (deps && deps.length > 0) {
            return deps;
        }
        this.resolverRegistry.resolvers.forEach(function (resolver) {
            // 再解析一次也可以，返回的依然是空数组
            if (resolver instanceof CommentDependencyResolver) {
                return;
            }
            var dependency = resolver.resolve(expression);
            if (dependency && dependency.length > 0) {
                deps.push.apply(deps, tslib_1.__spread(dependency));
            }
        });
        // 去重
        return tslib_1.__spread(new Set(deps));
    };
    ResolveService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ResolveService.ctorParameters = function () { return [
        { type: Injector },
        { type: ResolverRegistry }
    ]; };
    return ResolveService;
}());
export { ResolveService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcmVzb2x2ZXIvcmVzb2x2ZV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd2RDtJQUVFLHdCQUFvQixRQUFrQixFQUFVLGdCQUFrQztRQUE5RCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUFJLENBQUM7SUFDaEYsZ0NBQU8sR0FBZCxVQUFlLFVBQWtCO1FBQy9CLElBQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUcsT0FBTztTQUNSO1FBQ0QsZUFBZTtRQUNmLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsUUFBUSxZQUFZLHlCQUF5QixFQUE3QyxDQUE2QyxDQUFDLENBQUM7UUFDL0ksSUFBSSx5QkFBeUIsRUFBRTtZQUM3QixJQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMxRSxJQUFJLG1CQUFtQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvRixJQUFJLENBQUMsSUFBSSxPQUFULElBQUksbUJBQVMsbUJBQW1CLEdBQUU7YUFDbkM7U0FDRjtRQUNELHFCQUFxQjtRQUNyQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFtQjtZQUMxRCxxQkFBcUI7WUFDckIsSUFBSSxRQUFRLFlBQVkseUJBQXlCLEVBQUU7Z0JBQ2pELE9BQU87YUFDUjtZQUNELElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDaEQsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxJQUFJLE9BQVQsSUFBSSxtQkFBUyxVQUFVLEdBQUU7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILEtBQUs7UUFDTCx3QkFBVyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUM1QixDQUFDOztnQkFoQ0YsVUFBVTs7OztnQkFMVSxRQUFRO2dCQUVwQixnQkFBZ0I7O0lBb0N6QixxQkFBQztDQUFBLEFBakNELElBaUNDO1NBaENZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbW1lbnREZXBlbmRlbmN5UmVzb2x2ZXIgfSBmcm9tIFwiLi9jb21tZW50X2RlcGVuZGVuY3lfcmVzb2x2ZXJcIjtcclxuaW1wb3J0IHsgUmVzb2x2ZXJSZWdpc3RyeSB9IGZyb20gXCIuL3Jlc29sdmVyX3JlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7IElSZXNvbHZlciB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXNvbHZlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVzb2x2ZXJSZWdpc3RyeTogUmVzb2x2ZXJSZWdpc3RyeSkgeyB9XHJcbiAgcHVibGljIHJlc29sdmUoZXhwcmVzc2lvbjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkZXBzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgaWYgKCF0aGlzLnJlc29sdmVyUmVnaXN0cnkgfHwgIXRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMgfHwgdGhpcy5yZXNvbHZlclJlZ2lzdHJ5LnJlc29sdmVycy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIOS8mOWFiOS9v+eUqOeUqOaIt+iHquWumuS5ieeahOS+nei1llxyXG4gICAgY29uc3QgY29tbWVudERlcGVuZGVuY3lSZXNvbHZlciA9IHRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMuZmluZCgocmVzb2x2ZXI6IElSZXNvbHZlcikgPT4gcmVzb2x2ZXIgaW5zdGFuY2VvZiBDb21tZW50RGVwZW5kZW5jeVJlc29sdmVyKTtcclxuICAgIGlmIChjb21tZW50RGVwZW5kZW5jeVJlc29sdmVyKSB7XHJcbiAgICAgIGNvbnN0IGNvbW1lbnREZXBlbmRlbmNpZXMgPSBjb21tZW50RGVwZW5kZW5jeVJlc29sdmVyLnJlc29sdmUoZXhwcmVzc2lvbik7XHJcbiAgICAgIGlmIChjb21tZW50RGVwZW5kZW5jaWVzICYmIEFycmF5LmlzQXJyYXkoY29tbWVudERlcGVuZGVuY2llcykgJiYgY29tbWVudERlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZGVwcy5wdXNoKC4uLmNvbW1lbnREZXBlbmRlbmNpZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDlpoLmnpznlKjmiLflt7Lnu4/oh6rlrprkuYnkuobkvp3otZbvvIzliJnkuI3lho3orqHnrpdcclxuICAgIGlmIChkZXBzICYmIGRlcHMubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gZGVwcztcclxuICAgIH1cclxuICAgIHRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMuZm9yRWFjaCgocmVzb2x2ZXI6IElSZXNvbHZlcikgPT4ge1xyXG4gICAgICAvLyDlho3op6PmnpDkuIDmrKHkuZ/lj6/ku6XvvIzov5Tlm57nmoTkvp3nhLbmmK/nqbrmlbDnu4RcclxuICAgICAgaWYgKHJlc29sdmVyIGluc3RhbmNlb2YgQ29tbWVudERlcGVuZGVuY3lSZXNvbHZlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBkZXBlbmRlbmN5ID0gcmVzb2x2ZXIucmVzb2x2ZShleHByZXNzaW9uKTtcclxuICAgICAgaWYgKGRlcGVuZGVuY3kgJiYgZGVwZW5kZW5jeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZGVwcy5wdXNoKC4uLmRlcGVuZGVuY3kpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIOWOu+mHjVxyXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGRlcHMpXTtcclxuICB9XHJcbn0iXX0=