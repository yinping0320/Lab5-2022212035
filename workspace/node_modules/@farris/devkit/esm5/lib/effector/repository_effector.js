import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData } from '../binding-data/index';
import { EntityList } from '../entity/index';
import { NAMESPACE } from '../frame/tokens';
import { Repository } from '../repository/index';
/**
 * 实体副作用器
 * @description 将表达式计算结果赋值给实体属性
 */
var RepositoryEffector = /** @class */ (function () {
    function RepositoryEffector(injector, repository, namespace, bindingData) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.bindingData = bindingData;
        this.ns = namespace;
    }
    RepositoryEffector.prototype.effect = function (path, value, options) {
        if (!options || !options.path) {
            throw new Error('repository effector 需要指定行信息。');
        }
        var propertyPath = options.path;
        var rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
        var entity = this.repository.entityCollection.getEntityById(rowId);
        if (rowId && !entity) {
            return;
        }
        // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
        var propName = propertyPath.pop();
        var object = entity;
        for (var index = 1; index < propertyPath.length; index++) {
            var propertyName = propertyPath[index];
            if (object instanceof EntityList) {
                object = object.get(propertyName);
            }
            else {
                object = object[propertyName];
            }
        }
        if (object) {
            if (object[propName] !== value) {
                object[propName] = value;
            }
        }
        else {
            // console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);
        }
    };
    RepositoryEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RepositoryEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: BindingData }
    ]; };
    return RepositoryEffector;
}());
export { RepositoryEffector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9lZmZlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VmZmVjdG9yL3JlcG9zaXRvcnlfZWZmZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQVUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRDs7O0dBR0c7QUFDSDtJQUdFLDRCQUFvQixRQUFrQixFQUFVLFVBQThCLEVBQTZCLFNBQVMsRUFBVSxXQUF3QjtRQUFsSSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFBNkIsY0FBUyxHQUFULFNBQVMsQ0FBQTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3BKLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxtQ0FBTSxHQUFiLFVBQWMsSUFBWSxFQUFFLEtBQVUsRUFBRSxPQUFpQztRQUN2RSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2xDLElBQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBQ25GLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3BCLE9BQU87U0FDUjtRQUNELGlHQUFpRztRQUNqRyxJQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEMsSUFBSSxNQUFNLEdBQVEsTUFBTSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3hELElBQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7Z0JBQ2hDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDL0I7U0FDRjtRQUNELElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxFQUFFO2dCQUM5QixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1NBQ0Y7YUFBTTtZQUNMLDhEQUE4RDtTQUMvRDtJQUNILENBQUM7O2dCQW5DRixVQUFVOzs7O2dCQVZrQixRQUFRO2dCQUs1QixVQUFVO2dEQVFnRSxNQUFNLFNBQUMsU0FBUztnQkFaMUYsV0FBVzs7SUE2Q3BCLHlCQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0FuQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IEVudGl0eSwgRW50aXR5TGlzdCB9IGZyb20gJy4uL2VudGl0eS9pbmRleCc7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9uL2luZGV4JztcclxuaW1wb3J0IHsgTkFNRVNQQUNFIH0gZnJvbSAnLi4vZnJhbWUvdG9rZW5zJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xyXG4vKipcclxuICog5a6e5L2T5Ymv5L2c55So5ZmoXHJcbiAqIEBkZXNjcmlwdGlvbiDlsIbooajovr7lvI/orqHnrpfnu5PmnpzotYvlgLznu5nlrp7kvZPlsZ7mgKdcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlFZmZlY3RvciBpbXBsZW1lbnRzIEV4cHJlc3Npb24uRWZmZWN0b3Ige1xyXG4gIHB1YmxpYyBuczogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5PiwgQEluamVjdChOQU1FU1BBQ0UpIHByaXZhdGUgbmFtZXNwYWNlLCBwcml2YXRlIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSkge1xyXG4gICAgdGhpcy5ucyA9IG5hbWVzcGFjZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBlZmZlY3QocGF0aDogc3RyaW5nLCB2YWx1ZTogYW55LCBvcHRpb25zOiBFeHByZXNzaW9uLkVmZmVjdE9wdGlvbnMpIHtcclxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5wYXRoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVwb3NpdG9yeSBlZmZlY3RvciDpnIDopoHmjIflrprooYzkv6Hmga/jgIInKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IG9wdGlvbnMucGF0aDtcclxuICAgIGNvbnN0IHJvd0lkID0gcHJvcGVydHlQYXRoWzBdIHx8IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWU7XHJcbiAgICBsZXQgZW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChyb3dJZCk7XHJcbiAgICBpZiAocm93SWQgJiYgIWVudGl0eSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBwcm9wZXJ0eVBhdGggbGlrZSA6IFsxLCBjaGlsZDFzLCAxLjEsIGNoaWxkMnMsIDEuMS4xLHByb3BOYW1lXSBvciBbMSx1ZHQscHJvcE5hbWVdIG9yIFsxLHByb3BdXHJcbiAgICBjb25zdCBwcm9wTmFtZSA9IHByb3BlcnR5UGF0aC5wb3AoKTtcclxuICAgIGxldCBvYmplY3Q6IGFueSA9IGVudGl0eTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBwcm9wZXJ0eVBhdGgubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IHByb3BlcnR5UGF0aFtpbmRleF07XHJcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBFbnRpdHlMaXN0KSB7XHJcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmdldChwcm9wZXJ0eU5hbWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtwcm9wZXJ0eU5hbWVdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAob2JqZWN0KSB7XHJcbiAgICAgIGlmIChvYmplY3RbcHJvcE5hbWVdICE9PSB2YWx1ZSkge1xyXG4gICAgICAgIG9iamVjdFtwcm9wTmFtZV0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gY29uc29sZS5lcnJvcihg5om+5LiN5Yiw5a6e5L2T5a+55bqU55qE6Lev5b6E77yaJHtwcm9wZXJ0eVBhdGgucHVzaChwcm9wTmFtZSl9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19