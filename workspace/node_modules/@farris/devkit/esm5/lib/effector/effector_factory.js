import { Expression } from '../expression/index';
import { Injectable, Injector } from '@angular/core';
import { EffectorRegistry } from './effector_registry';
import { RepositoryEffector } from './repository_effector';
import { UIStateEffector } from './uistate_effector';
import { ReadonlyEffector } from './readonly_effector';
import { DependencyEffector } from './dependency_effector';
import { RelativeEffector } from './relative_effector';
import { ValidateEffector } from './validate_effector';
import { RequiredEffector } from './required_effector';
import { VisibleEffector } from './visible_effector';
// import { Core } from '../core/index';
var EffectorFactory = /** @class */ (function () {
    function EffectorFactory(injector, effectorRegistry) {
        this.injector = injector;
        this.effectorRegistry = effectorRegistry;
    }
    EffectorFactory.prototype.getEffector = function (expressionObject) {
        var path = expressionObject.path;
        var ns = expressionObject.ns;
        var bindingType = expressionObject.bindingType;
        var type = expressionObject.type;
        var nsEffectors = this.effectorRegistry.effectors.filter(function (effector) { return effector.ns == ns; });
        // 计算表达式
        if (type === Expression.ExpressionType.Compute) {
            if (bindingType === Expression.ExpressionBindingType.Field) {
                return nsEffectors.find(function (effector) { return effector instanceof RepositoryEffector; });
            }
            else if (bindingType === Expression.ExpressionBindingType.State) {
                return nsEffectors.find(function (effector) { return effector instanceof UIStateEffector; });
            }
            else {
                throw new Error("\u4E0D\u652F\u6301\u7684\u7ED1\u5B9A\u5B57\u6BB5\u7C7B\u578B\uFF1A" + bindingType);
            }
        }
        else if (type === Expression.ExpressionType.Readonly) {
            // 只读表达式
            return nsEffectors.find(function (effector) { return effector instanceof ReadonlyEffector; });
        }
        else if (type === Expression.ExpressionType.Dependency) {
            // 依赖表达式
            return nsEffectors.find(function (effector) { return effector instanceof DependencyEffector; });
        }
        else if (type === Expression.ExpressionType.Relative) {
            // 关联表达式
            return nsEffectors.find(function (effector) { return effector instanceof RelativeEffector; });
        }
        else if (type === Expression.ExpressionType.Validate) {
            // 校验表达式
            return nsEffectors.find(function (effector) { return effector instanceof ValidateEffector; });
        }
        else if (type === Expression.ExpressionType.Required) {
            // 必填表达式
            return nsEffectors.find(function (effector) { return effector instanceof RequiredEffector; });
        }
        else if (type === Expression.ExpressionType.Visible) {
            // 显隐表达式
            return nsEffectors.find(function (effector) { return effector instanceof VisibleEffector; });
        }
        else {
            // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);
            return null;
        }
    };
    EffectorFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EffectorFactory.ctorParameters = function () { return [
        { type: Injector },
        { type: EffectorRegistry }
    ]; };
    return EffectorFactory;
}());
export { EffectorFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0b3JfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VmZmVjdG9yL2VmZmVjdG9yX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsd0NBQXdDO0FBRXhDO0lBRUUseUJBQW9CLFFBQWtCLEVBQVUsZ0JBQWtDO1FBQTlELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUksQ0FBQztJQUNoRixxQ0FBVyxHQUFsQixVQUFtQixnQkFBNkM7UUFDOUQsSUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQU0sRUFBRSxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUMvQixJQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7UUFDakQsSUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBNkIsSUFBSyxPQUFBLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7UUFDakgsUUFBUTtRQUNSLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFO1lBQzlDLElBQUksV0FBVyxLQUFLLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUU7Z0JBQzFELE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQTZCLElBQUssT0FBQSxRQUFRLFlBQVksa0JBQWtCLEVBQXRDLENBQXNDLENBQUMsQ0FBQzthQUNwRztpQkFBTSxJQUFJLFdBQVcsS0FBSyxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFO2dCQUNqRSxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUE2QixJQUFLLE9BQUEsUUFBUSxZQUFZLGVBQWUsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDO2FBQ2pHO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsdUVBQWMsV0FBYSxDQUFDLENBQUM7YUFDOUM7U0FDRjthQUFNLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFO1lBQ3RELFFBQVE7WUFDUixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUE2QixJQUFLLE9BQUEsUUFBUSxZQUFZLGdCQUFnQixFQUFwQyxDQUFvQyxDQUFDLENBQUM7U0FDbEc7YUFBTSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRTtZQUN4RCxRQUFRO1lBQ1IsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBNkIsSUFBSyxPQUFBLFFBQVEsWUFBWSxrQkFBa0IsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFDO1NBQ3BHO2FBQU0sSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7WUFDdEQsUUFBUTtZQUNSLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQTZCLElBQUssT0FBQSxRQUFRLFlBQVksZ0JBQWdCLEVBQXBDLENBQW9DLENBQUMsQ0FBQztTQUNsRzthQUFNLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFO1lBQ3RELFFBQVE7WUFDUixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUE2QixJQUFLLE9BQUEsUUFBUSxZQUFZLGdCQUFnQixFQUFwQyxDQUFvQyxDQUFDLENBQUM7U0FDbEc7YUFBTSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRTtZQUN0RCxRQUFRO1lBQ1IsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBNkIsSUFBSyxPQUFBLFFBQVEsWUFBWSxnQkFBZ0IsRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO1NBQ2xHO2FBQU0sSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7WUFDckQsUUFBUTtZQUNSLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQTZCLElBQUssT0FBQSxRQUFRLFlBQVksZUFBZSxFQUFuQyxDQUFtQyxDQUFDLENBQUM7U0FDakc7YUFBTTtZQUNMLG9EQUFvRDtZQUNwRCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7Z0JBeENGLFVBQVU7Ozs7Z0JBWlUsUUFBUTtnQkFDcEIsZ0JBQWdCOztJQW9EekIsc0JBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQXhDWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFZmZlY3RvclJlZ2lzdHJ5IH0gZnJvbSAnLi9lZmZlY3Rvcl9yZWdpc3RyeSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnlFZmZlY3RvciB9IGZyb20gJy4vcmVwb3NpdG9yeV9lZmZlY3Rvcic7XHJcbmltcG9ydCB7IFVJU3RhdGVFZmZlY3RvciB9IGZyb20gJy4vdWlzdGF0ZV9lZmZlY3Rvcic7XHJcbmltcG9ydCB7IFJlYWRvbmx5RWZmZWN0b3IgfSBmcm9tICcuL3JlYWRvbmx5X2VmZmVjdG9yJztcclxuaW1wb3J0IHsgRGVwZW5kZW5jeUVmZmVjdG9yIH0gZnJvbSAnLi9kZXBlbmRlbmN5X2VmZmVjdG9yJztcclxuaW1wb3J0IHsgUmVsYXRpdmVFZmZlY3RvciB9IGZyb20gJy4vcmVsYXRpdmVfZWZmZWN0b3InO1xyXG5pbXBvcnQgeyBWYWxpZGF0ZUVmZmVjdG9yIH0gZnJvbSAnLi92YWxpZGF0ZV9lZmZlY3Rvcic7XHJcbmltcG9ydCB7IFJlcXVpcmVkRWZmZWN0b3IgfSBmcm9tICcuL3JlcXVpcmVkX2VmZmVjdG9yJztcclxuaW1wb3J0IHsgVmlzaWJsZUVmZmVjdG9yIH0gZnJvbSAnLi92aXNpYmxlX2VmZmVjdG9yJztcclxuLy8gaW1wb3J0IHsgQ29yZSB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRWZmZWN0b3JGYWN0b3J5IHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBlZmZlY3RvclJlZ2lzdHJ5OiBFZmZlY3RvclJlZ2lzdHJ5KSB7IH1cclxuICBwdWJsaWMgZ2V0RWZmZWN0b3IoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSB7XHJcbiAgICBjb25zdCBwYXRoID0gZXhwcmVzc2lvbk9iamVjdC5wYXRoO1xyXG4gICAgY29uc3QgbnMgPSBleHByZXNzaW9uT2JqZWN0Lm5zO1xyXG4gICAgY29uc3QgYmluZGluZ1R5cGUgPSBleHByZXNzaW9uT2JqZWN0LmJpbmRpbmdUeXBlO1xyXG4gICAgY29uc3QgdHlwZSA9IGV4cHJlc3Npb25PYmplY3QudHlwZTtcclxuICAgIGNvbnN0IG5zRWZmZWN0b3JzID0gdGhpcy5lZmZlY3RvclJlZ2lzdHJ5LmVmZmVjdG9ycy5maWx0ZXIoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3Rvci5ucyA9PSBucyk7XHJcbiAgICAvLyDorqHnrpfooajovr7lvI9cclxuICAgIGlmICh0eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLkNvbXB1dGUpIHtcclxuICAgICAgaWYgKGJpbmRpbmdUeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25CaW5kaW5nVHlwZS5GaWVsZCkge1xyXG4gICAgICAgIHJldHVybiBuc0VmZmVjdG9ycy5maW5kKChlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvcikgPT4gZWZmZWN0b3IgaW5zdGFuY2VvZiBSZXBvc2l0b3J5RWZmZWN0b3IpO1xyXG4gICAgICB9IGVsc2UgaWYgKGJpbmRpbmdUeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25CaW5kaW5nVHlwZS5TdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBuc0VmZmVjdG9ycy5maW5kKChlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvcikgPT4gZWZmZWN0b3IgaW5zdGFuY2VvZiBVSVN0YXRlRWZmZWN0b3IpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg5LiN5pSv5oyB55qE57uR5a6a5a2X5q6157G75Z6L77yaJHtiaW5kaW5nVHlwZX1gKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlYWRvbmx5KSB7XHJcbiAgICAgIC8vIOWPquivu+ihqOi+vuW8j1xyXG4gICAgICByZXR1cm4gbnNFZmZlY3RvcnMuZmluZCgoZWZmZWN0b3I6IEV4cHJlc3Npb24uRWZmZWN0b3IpID0+IGVmZmVjdG9yIGluc3RhbmNlb2YgUmVhZG9ubHlFZmZlY3Rvcik7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuRGVwZW5kZW5jeSkge1xyXG4gICAgICAvLyDkvp3otZbooajovr7lvI9cclxuICAgICAgcmV0dXJuIG5zRWZmZWN0b3JzLmZpbmQoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3RvciBpbnN0YW5jZW9mIERlcGVuZGVuY3lFZmZlY3Rvcik7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVsYXRpdmUpIHtcclxuICAgICAgLy8g5YWz6IGU6KGo6L6+5byPXHJcbiAgICAgIHJldHVybiBuc0VmZmVjdG9ycy5maW5kKChlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvcikgPT4gZWZmZWN0b3IgaW5zdGFuY2VvZiBSZWxhdGl2ZUVmZmVjdG9yKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WYWxpZGF0ZSkge1xyXG4gICAgICAvLyDmoKHpqozooajovr7lvI9cclxuICAgICAgcmV0dXJuIG5zRWZmZWN0b3JzLmZpbmQoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3RvciBpbnN0YW5jZW9mIFZhbGlkYXRlRWZmZWN0b3IpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlcXVpcmVkKSB7XHJcbiAgICAgIC8vIOW/heWhq+ihqOi+vuW8j1xyXG4gICAgICByZXR1cm4gbnNFZmZlY3RvcnMuZmluZCgoZWZmZWN0b3I6IEV4cHJlc3Npb24uRWZmZWN0b3IpID0+IGVmZmVjdG9yIGluc3RhbmNlb2YgUmVxdWlyZWRFZmZlY3Rvcik7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuVmlzaWJsZSkge1xyXG4gICAgICAvLyDmmL7pmpDooajovr7lvI9cclxuICAgICAgcmV0dXJuIG5zRWZmZWN0b3JzLmZpbmQoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3RvciBpbnN0YW5jZW9mIFZpc2libGVFZmZlY3Rvcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDb3JlLndhcm4oYEVmZmVjdG9yRmFjdG9yeSDmsqHmnInmib7liLDlr7nlupTnmoTlia/kvZznlKjlmaggJHt0eXBlfWApO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19