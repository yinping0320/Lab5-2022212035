import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext } from '../frame/frame_context';
import { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, ComponentType } from '../core/index';
import { NAMESPACE } from '../frame/tokens';
var ValidateEffector = /** @class */ (function () {
    function ValidateEffector(injector, messageService, notifyService, namespace, frameContext) {
        this.injector = injector;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.ns = namespace;
    }
    ValidateEffector.prototype.effect = function (path, value, options) {
        var _a;
        // 校验不通过时返回false
        var domInfo = this.getDomInfoByEntityPath(path);
        if (!domInfo) {
            return;
        }
        var frameContext = domInfo.frameContext;
        var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        // const rootViewModel = rootFrameContext.viewModel;
        var expressionId = options.expressionId;
        var domPropertyName = domInfo.domPropertyName;
        if (expressionId) {
            // 增加校验规则
            frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "validate" /* Validate */);
        }
        if (value === false && options.message) {
            // 更新form错误信息
            // 不是grid，则认为是卡片
            if (!domInfo.isGridComponent) {
                var message = options.message.replace(/\$property/g, domInfo.propertyName);
                var formErrors = this.buildFormErrors(domPropertyName, message);
                // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息
                frameContext.form.updateFormErrors(formErrors);
            }
            else {
                // if (expressionId) {
                //   // 增加校验规则
                //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);
                // }
            }
            // 不进行汇总展示
            // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);
            // 增加到汇总消息
            // rootViewModel.verifycationChanged.next(verifyInformations);
            // 更新汇总错误信息
        }
        else if (value === true) {
            // 移除错误消息
            // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);
            // rootViewModel.verifycationChanged.next(verifyInformations);
            var currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
            if (currentErrors) {
                if (currentErrors.hasOwnProperty('validate')) {
                    // require合法，移除require校验提示
                    delete currentErrors.validate;
                }
                frameContext.form.updateFormErrors((_a = {}, _a[domPropertyName] = { errors: currentErrors }, _a));
            }
            else {
                var formErrors = this.buildFormErrors(domPropertyName, null);
                frameContext.form.updateFormErrors(formErrors);
            }
        }
    };
    /**
     * 通过实体路径获取对应的dom信息
     * @param entityPath
     * @returns
     */
    ValidateEffector.prototype.getDomInfoByEntityPath = function (entityPath) {
        var e_1, _a, e_2, _b;
        var result = null;
        if (!entityPath) {
            return result;
        }
        entityPath = entityPath.split('/').filter(function (p) { return p; }).join('.');
        var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
        if (frameContexts && frameContexts.length > 0) {
            try {
                for (var frameContexts_1 = tslib_1.__values(frameContexts), frameContexts_1_1 = frameContexts_1.next(); !frameContexts_1_1.done; frameContexts_1_1 = frameContexts_1.next()) {
                    var frameContext = frameContexts_1_1.value;
                    if (result) {
                        break;
                    }
                    var isValidFrameContext = frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0;
                    if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                        var keys = Object.keys(frameContext.form.ngFormControls);
                        try {
                            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                                var propertyName = keys_1_1.value;
                                var ngFormControl = frameContext.form.ngFormControls[propertyName];
                                var bindingPath = frameContext.viewModel.bindingPath || '/';
                                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                                var bindings = ngFormControl.binding.split('.');
                                bindings = bindingPaths.concat(bindings);
                                if (entityPath === bindings.join('.')) {
                                    // 判断对应的组件是什么类型
                                    var dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                                    var dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                                    if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                        var isEditableGrid = dgColumnInfo.find(function (array) {
                                            var readonlyGroup = array.every(function (column) { return !(column.hasOwnProperty('editor') && column.editor); });
                                            if (!readonlyGroup) {
                                                return true;
                                            }
                                            else {
                                                return false;
                                            }
                                        });
                                        if (!isEditableGrid) {
                                            continue;
                                        }
                                    }
                                    // 如果是farris树，则跳过
                                    var isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;
                                    if (isFarrisTreeTableComponent) {
                                        continue;
                                    }
                                    var isGridComponent = false;
                                    if (dgColumnNames) {
                                        isGridComponent = true;
                                    }
                                    result = {
                                        domPropertyName: propertyName,
                                        propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                        frameContext: frameContext,
                                        id: ngFormControl.id,
                                        isGridComponent: isGridComponent
                                    };
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (keys_1_1 && !keys_1_1.done && (_b = keys_1.return)) _b.call(keys_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (frameContexts_1_1 && !frameContexts_1_1.done && (_a = frameContexts_1.return)) _a.call(frameContexts_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return result;
    };
    ValidateEffector.prototype.getVerifyInformations = function (frameContext) {
        var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        var rootViewModel = rootFrameContext.viewModel;
        var verifyInformations = rootViewModel.verifyInformations;
        return verifyInformations;
    };
    ValidateEffector.prototype.buildFormErrors = function (domPropertyName, message) {
        var _a, _b;
        if (message) {
            message = message.replace(/\$property/g, 'domPropertyName');
            return _a = {},
                _a[domPropertyName] = {
                    errors: {
                        'validate': {
                            name: message
                        }
                    }
                },
                _a;
        }
        else {
            return _b = {},
                _b[domPropertyName] = {
                    errors: {}
                },
                _b;
        }
    };
    ValidateEffector.prototype.buildVerifyInformations = function (id, frameContext, domPropertyName, message) {
        var verifyInformations = this.getVerifyInformations(frameContext);
        var index = verifyInformations.findIndex(function (item) {
            return item.id === id;
        });
        if (index !== -1) {
            verifyInformations.splice(index, 1);
        }
        verifyInformations.push({
            id: id,
            namespace: frameContext.namespace,
            targetField: domPropertyName,
            index: verifyInformations.length + 1,
            title: frameContext.form.formGroupName,
            msg: message,
            type: 'error'
        });
        return verifyInformations;
    };
    ValidateEffector.prototype.removeValidateVerifyInformations = function (id, frameContext) {
        var verifyInformations = this.getVerifyInformations(frameContext);
        var index = verifyInformations.findIndex(function (item) {
            return item.id === id;
        });
        if (index !== -1) {
            verifyInformations.splice(index, 1);
        }
        return verifyInformations;
    };
    ValidateEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ValidateEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NOTIFY_SERVICE_TOKEN,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: FrameContext }
    ]; };
    return ValidateEffector;
}());
export { ValidateEffector };
//# sourceMappingURL=data:application/json;base64,