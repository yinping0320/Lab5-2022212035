import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData } from '../binding-data/index';
import { EntityList } from '../entity/index';
import { NAMESPACE } from '../frame/tokens';
import { Repository } from '../repository/index';
/**
 * 依赖副作用器
 * @description 当表达式计算结果为true时，清空字段值
 * 当value==true且属性当前值不是null时，设置属性值为null
 */
var DependencyEffector = /** @class */ (function () {
    function DependencyEffector(injector, repository, namespace, bindingData) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.bindingData = bindingData;
        this.ns = namespace;
    }
    DependencyEffector.prototype.effect = function (path, value, options) {
        if (!options || !options.path) {
            throw new Error('DependencyEffector 需要指定行信息。');
        }
        if (typeof value !== 'boolean') {
            console.warn("DependencyEffector \u4F9D\u8D56\u8868\u8FBE\u5F0F\u8BA1\u7B97\u7ED3\u679C\u5E94\u8BE5\u4E3Atrue/false\uFF0C\u5F53\u524D\u503C\u4E3A\uFF1A" + value);
        }
        var propertyPath = options.path;
        var rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
        var entity = this.repository.entityCollection.getEntityById(rowId);
        if (rowId && !entity) {
            throw new Error("\u627E\u4E0D\u5230id\uFF1A" + rowId + "\u5BF9\u5E94\u7684\u5B9E\u4F53\uFF01");
        }
        // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
        var propName = propertyPath.pop();
        var object = entity;
        for (var index = 1; index < propertyPath.length; index++) {
            var propertyName = propertyPath[index];
            if (object instanceof EntityList) {
                object = object.get(propertyName);
            }
            else {
                object = object[propertyName];
            }
        }
        if (object) {
            if (object[propName] !== null && value === true) {
                object[propName] = null;
            }
        }
        else {
            throw new Error("[DependencyEffector] \u627E\u4E0D\u5230\u5B9E\u4F53\u5BF9\u5E94\u7684\u8DEF\u5F84\uFF1A" + propertyPath.push(propName));
        }
    };
    DependencyEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DependencyEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: BindingData }
    ]; };
    return DependencyEffector;
}());
export { DependencyEffector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeV9lZmZlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VmZmVjdG9yL2RlcGVuZGVuY3lfZWZmZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQVUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRDs7OztHQUlHO0FBQ0g7SUFHRSw0QkFBb0IsUUFBa0IsRUFBVSxVQUE4QixFQUE2QixTQUFTLEVBQVUsV0FBd0I7UUFBbEksYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQTZCLGNBQVMsR0FBVCxTQUFTLENBQUE7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUNwSixJQUFJLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUN0QixDQUFDO0lBQ00sbUNBQU0sR0FBYixVQUFjLElBQVksRUFBRSxLQUFjLEVBQUUsT0FBaUM7UUFDM0UsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyw4SUFBa0QsS0FBTyxDQUFDLENBQUM7U0FDekU7UUFDRCxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2xDLElBQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBQ25GLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQVMsS0FBSyx5Q0FBUSxDQUFDLENBQUM7U0FDekM7UUFDRCxpR0FBaUc7UUFDakcsSUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BDLElBQUksTUFBTSxHQUFRLE1BQU0sQ0FBQztRQUN6QixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN4RCxJQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekMsSUFBSSxNQUFNLFlBQVksVUFBVSxFQUFFO2dCQUNoQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQy9CO1NBQ0Y7UUFDRCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO2dCQUMvQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ3pCO1NBQ0Y7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsNEZBQW1DLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFHLENBQUMsQ0FBQztTQUNuRjtJQUNILENBQUM7O2dCQXJDRixVQUFVOzs7O2dCQVprQixRQUFRO2dCQUs1QixVQUFVO2dEQVVnRSxNQUFNLFNBQUMsU0FBUztnQkFkMUYsV0FBVzs7SUFrRHBCLHlCQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0F0Q1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IEVudGl0eSwgRW50aXR5TGlzdCB9IGZyb20gJy4uL2VudGl0eS9pbmRleCc7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9uL2luZGV4JztcclxuaW1wb3J0IHsgTkFNRVNQQUNFIH0gZnJvbSAnLi4vZnJhbWUvdG9rZW5zJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xyXG5cclxuLyoqXHJcbiAqIOS+nei1luWJr+S9nOeUqOWZqFxyXG4gKiBAZGVzY3JpcHRpb24g5b2T6KGo6L6+5byP6K6h566X57uT5p6c5Li6dHJ1ZeaXtu+8jOa4heepuuWtl+auteWAvFxyXG4gKiDlvZN2YWx1ZT09dHJ1ZeS4lOWxnuaAp+W9k+WJjeWAvOS4jeaYr251bGzml7bvvIzorr7nva7lsZ7mgKflgLzkuLpudWxsXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEZXBlbmRlbmN5RWZmZWN0b3IgaW1wbGVtZW50cyBFeHByZXNzaW9uLkVmZmVjdG9yIHtcclxuICBwdWJsaWMgbnM6IHN0cmluZztcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT4sIEBJbmplY3QoTkFNRVNQQUNFKSBwcml2YXRlIG5hbWVzcGFjZSwgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpIHtcclxuICAgIHRoaXMubnMgPSBuYW1lc3BhY2U7XHJcbiAgfVxyXG4gIHB1YmxpYyBlZmZlY3QocGF0aDogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbiwgb3B0aW9uczogRXhwcmVzc2lvbi5FZmZlY3RPcHRpb25zKSB7XHJcbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucGF0aCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlcGVuZGVuY3lFZmZlY3RvciDpnIDopoHmjIflrprooYzkv6Hmga/jgIInKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykge1xyXG4gICAgICBjb25zb2xlLndhcm4oYERlcGVuZGVuY3lFZmZlY3RvciDkvp3otZbooajovr7lvI/orqHnrpfnu5PmnpzlupTor6XkuLp0cnVlL2ZhbHNl77yM5b2T5YmN5YC85Li677yaJHt2YWx1ZX1gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IG9wdGlvbnMucGF0aDtcclxuICAgIGNvbnN0IHJvd0lkID0gcHJvcGVydHlQYXRoWzBdIHx8IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWU7XHJcbiAgICBsZXQgZW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChyb3dJZCk7XHJcbiAgICBpZiAocm93SWQgJiYgIWVudGl0eSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYOaJvuS4jeWIsGlk77yaJHtyb3dJZH3lr7nlupTnmoTlrp7kvZPvvIFgKTtcclxuICAgIH1cclxuICAgIC8vIHByb3BlcnR5UGF0aCBsaWtlIDogWzEsIGNoaWxkMXMsIDEuMSwgY2hpbGQycywgMS4xLjEscHJvcE5hbWVdIG9yIFsxLHVkdCxwcm9wTmFtZV0gb3IgWzEscHJvcF1cclxuICAgIGNvbnN0IHByb3BOYW1lID0gcHJvcGVydHlQYXRoLnBvcCgpO1xyXG4gICAgbGV0IG9iamVjdDogYW55ID0gZW50aXR5O1xyXG4gICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IHByb3BlcnR5UGF0aC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gcHJvcGVydHlQYXRoW2luZGV4XTtcclxuICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEVudGl0eUxpc3QpIHtcclxuICAgICAgICBvYmplY3QgPSBvYmplY3QuZ2V0KHByb3BlcnR5TmFtZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3Byb3BlcnR5TmFtZV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChvYmplY3QpIHtcclxuICAgICAgaWYgKG9iamVjdFtwcm9wTmFtZV0gIT09IG51bGwgJiYgdmFsdWUgPT09IHRydWUpIHtcclxuICAgICAgICBvYmplY3RbcHJvcE5hbWVdID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBbRGVwZW5kZW5jeUVmZmVjdG9yXSDmib7kuI3liLDlrp7kvZPlr7nlupTnmoTot6/lvoTvvJoke3Byb3BlcnR5UGF0aC5wdXNoKHByb3BOYW1lKX1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59Il19