import * as tslib_1 from "tslib";
import { ModifyType } from '../changeset/types';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { Entity } from './entity';
import { takeUntil } from 'rxjs/operators';
/**
 * 支持动态字段集合的动态实体
 */
var DynamicEntity = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicEntity, _super);
    /**
     * @param data JSON数据
     */
    function DynamicEntity(data) {
        var _this = _super.call(this, data) || this;
        _this.loadDynamicData(data);
        return _this;
    }
    Object.defineProperty(DynamicEntity.prototype, "IsNested", {
        /**
         * 是否是嵌套的动态实体
         */
        get: function () {
            return this[PARENT_CLASS] instanceof DynamicEntity;
        },
        enumerable: true,
        configurable: true
    });
    DynamicEntity.prototype.loadDynamicData = function (dynamicData) {
        this.initializeDynamicField(dynamicData);
        // super.loadFields(dynamicData);
    };
    /**
     * 初始化动态数据
     * @param dynamicData 动态数据
     */
    DynamicEntity.prototype.initializeDynamicField = function (dynamicData) {
        var _this = this;
        // 遍历动态数据的key，创建动态实体属性。
        Object.keys(dynamicData).forEach(function (propertyName) {
            var dataField = propertyName;
            if (delete _this[propertyName]) {
                if (dynamicData[propertyName] instanceof Object) {
                    var path_1 = _this.createPath(propertyName);
                    var dynamicEntity_1 = _this.createDynamicEntityFromJsonData(dynamicData[propertyName], path_1);
                    // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};
                    // NgObject({
                    //     /** 字段名称 */
                    //     dataField: propertyName,
                    //     /** 原始字段名称 */
                    //     originalDataField: propertyName,
                    //     /** 是否为外键 */
                    //     type: DynamicEntity
                    // })(this, propertyName);
                    Object.defineProperty(_this, propertyName, {
                        get: function () {
                            return dynamicEntity_1;
                        },
                        set: function (value) {
                            var modifyInfo = {
                                path: dynamicEntity_1[PARENT_PATH],
                                value: value.data,
                                preValue: this[propertyName].data,
                                type: ModifyType.ValueChange
                            };
                            dynamicEntity_1 = this.createDynamicEntityFromJsonData(value, path_1);
                            this.setChanges(modifyInfo);
                        }
                    });
                }
                else {
                    // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};
                    // NgField({
                    //     /** 字段名称 */
                    //     dataField: propertyName,
                    //     /** 原始字段名称 */
                    //     originalDataField: propertyName,
                    //     /** 是否为主键 */
                    //     primary: false,
                    //     /** 是否为外键 */
                    //     foreign: false
                    // })(this, propertyName);
                    Object.defineProperty(_this, propertyName, {
                        // 定义返回数据方法。
                        get: function () {
                            // 从初始数据返回字段值。
                            return this.data[dataField];
                        },
                        set: function (value) {
                            // 值相同时不触发变更。
                            var oldValue = this.data[dataField];
                            if (oldValue === value) {
                                return;
                            }
                            // 更新元数据数据。
                            this.data[dataField] = value;
                            // 变更集
                            var changes = {
                                type: ModifyType.ValueChange,
                                path: this.createPath(propertyName),
                                value: value,
                                preValue: oldValue
                            };
                            if (this[PARENT_PATH]) {
                                changes.path = this[PARENT_PATH].concat(changes.path);
                            }
                            this.setChanges(changes);
                        }
                    });
                }
            }
        });
    };
    DynamicEntity.prototype.createDynamicEntityFromJsonData = function (value, parentPath) {
        var _this = this;
        var instance;
        if (value instanceof DynamicEntity) {
            instance = value;
        }
        else {
            instance = new DynamicEntity(value);
            instance.constructor = DynamicEntity;
        }
        instance[PARENT_CLASS] = this;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.pipe(takeUntil(this.unsubscribe)).subscribe(function (changes) {
            if (changes) {
                changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                _this.setChanges(changes);
            }
        });
        return instance;
    };
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     * @todo
     * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；
     * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。
     */
    DynamicEntity.prototype.setChanges = function (value) {
        var _a;
        var propertyName = value.path[value.path.length - 1];
        var preValue = Object.assign({}, this.data);
        this.newData = Object.assign(this.newData, (_a = {}, _a[propertyName] = value.value, _a));
        var parentPath = value.path;
        if (value.path.length > 2) {
            parentPath = value.path.slice(0, value.path.length - 2);
        }
        // 统一不使用构造函数（保持和其他位置对Modification的构造一致）
        // const parentModification = new Modification(this.data, value.type, parentPath, preValue);
        var parentModification = {
            path: parentPath,
            value: this.data,
            preValue: preValue,
            type: value.type,
            dynamic: true
        };
        this.valueChanged.next(parentModification);
        this.changeSet.append(value);
    };
    /**
     * toJSON
     */
    DynamicEntity.prototype.toJSON = function () {
        return this.data;
    };
    return DynamicEntity;
}(Entity));
export { DynamicEntity };
//# sourceMappingURL=data:application/json;base64,