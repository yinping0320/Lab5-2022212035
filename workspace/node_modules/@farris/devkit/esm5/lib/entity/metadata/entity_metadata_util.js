import { MetadataUtil } from '../../metadata/index';
import { NG_ENTITY } from './entity_decorator';
// import { NgProperty } from './ng_property';
// import { NG_FIELD,   NgFieldProperty   } from './ng_field';
// import { NG_OBJECT,  NgObjectProperty  } from './ng_object';
// import { NG_Dynamic, NgDynamicProperty } from './ng_dynamic';
// import { NG_LIST,    NgListProperty    } from './ng_list';
import { NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST } from './field_decorator';
/**
 * 实体元数据工具类
 */
var EntityMetadataUtil = /** @class */ (function () {
    function EntityMetadataUtil() {
    }
    /**
     * 获取所有属性
     * @todo：封装根据基类获取所有元数据的方法，解决重复代码
     */
    EntityMetadataUtil.getAllNgProperties = function (entityType) {
        var ngPlainProperties = this.getNgFieldProperties(entityType);
        var ngEntityProperties = this.getNgObjectProperties(entityType);
        var ngDynamicProperties = this.getNgDynamicProperties(entityType);
        var ngEntityListProperties = this.getNgObjectProperties(entityType);
        return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
    };
    /**
     * 获取实体元数据描述
     */
    EntityMetadataUtil.getNgEntityMatadata = function (entityType) {
        return MetadataUtil.getClassMetadataByNameWithTranslate(entityType, NG_ENTITY);
    };
    /**
     * 获取NgField的属性元数据
     */
    EntityMetadataUtil.getNgFieldProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);
    };
    /**
     * 获取NgObject属性元数据
     */
    EntityMetadataUtil.getNgObjectProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);
    };
    /**
     * 获取NgDynamic属性元数据
     */
    EntityMetadataUtil.getNgDynamicProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);
    };
    /**
     * 获取NgList属性元数据
     */
    EntityMetadataUtil.getNgListProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);
    };
    /**
     * 获取主键属性元数据
     */
    EntityMetadataUtil.getPrimaryKeyProperty = function (entityType) {
        var primaryKeyProperty;
        var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
        Object.keys(ngPlainProperties).forEach(function (propName) {
            var ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                primaryKeyProperty = ngProperty;
            }
        });
        return primaryKeyProperty;
    };
    return EntityMetadataUtil;
}());
export { EntityMetadataUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X21ldGFkYXRhX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvbWV0YWRhdGEvZW50aXR5X21ldGFkYXRhX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELE9BQU8sRUFBWSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCw4Q0FBOEM7QUFDOUMsOERBQThEO0FBQzlELCtEQUErRDtBQUMvRCxnRUFBZ0U7QUFDaEUsNkRBQTZEO0FBQzdELE9BQU8sRUFDTyxRQUFRLEVBQW1CLFNBQVMsRUFDaEQsVUFBVSxFQUFxQixPQUFPLEVBQ3ZDLE1BQU0sbUJBQW1CLENBQUM7QUFFM0I7O0dBRUc7QUFDSDtJQUFBO0lBa0VBLENBQUM7SUFoRUM7OztPQUdHO0lBQ0kscUNBQWtCLEdBQXpCLFVBQTBCLFVBQXdCO1FBQ2hELElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLElBQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQ3JCLGlCQUFpQixFQUFJLGtCQUFrQixFQUN2QyxtQkFBbUIsRUFBRSxzQkFBc0IsQ0FDNUMsQ0FBQztJQUNKLENBQUM7SUFDRDs7T0FFRztJQUNJLHNDQUFtQixHQUExQixVQUEyQixVQUFlO1FBQ3hDLE9BQU8sWUFBWSxDQUFDLG1DQUFtQyxDQUFDLFVBQVUsRUFBQyxTQUFTLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBQ0Q7O09BRUc7SUFDSSx1Q0FBb0IsR0FBM0IsVUFBNEIsVUFBZTtRQUN6QyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0NBQXFCLEdBQTVCLFVBQTZCLFVBQWU7UUFDMUMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRDs7T0FFRztJQUNJLHlDQUFzQixHQUE3QixVQUE4QixVQUFlO1FBQzNDLE9BQU8sWUFBWSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxzQ0FBbUIsR0FBMUIsVUFBMkIsVUFBZTtRQUN4QyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0NBQXFCLEdBQTVCLFVBQTZCLFVBQXdCO1FBQ25ELElBQUksa0JBQWtCLENBQUM7UUFDdkIsSUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBZ0I7WUFDdEQsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFvQixDQUFDO1lBQ2xFLElBQUksVUFBVSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQy9CLGtCQUFrQixHQUFHLFVBQVUsQ0FBQzthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBbEVELElBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uL2VudGl0eSc7XHJcbmltcG9ydCB7IE5nRW50aXR5LCBOR19FTlRJVFkgfSBmcm9tICcuL2VudGl0eV9kZWNvcmF0b3InO1xyXG4vLyBpbXBvcnQgeyBOZ1Byb3BlcnR5IH0gZnJvbSAnLi9uZ19wcm9wZXJ0eSc7XHJcbi8vIGltcG9ydCB7IE5HX0ZJRUxELCAgIE5nRmllbGRQcm9wZXJ0eSAgIH0gZnJvbSAnLi9uZ19maWVsZCc7XHJcbi8vIGltcG9ydCB7IE5HX09CSkVDVCwgIE5nT2JqZWN0UHJvcGVydHkgIH0gZnJvbSAnLi9uZ19vYmplY3QnO1xyXG4vLyBpbXBvcnQgeyBOR19EeW5hbWljLCBOZ0R5bmFtaWNQcm9wZXJ0eSB9IGZyb20gJy4vbmdfZHluYW1pYyc7XHJcbi8vIGltcG9ydCB7IE5HX0xJU1QsICAgIE5nTGlzdFByb3BlcnR5ICAgIH0gZnJvbSAnLi9uZ19saXN0JztcclxuaW1wb3J0IHtcclxuICBOZ1Byb3BlcnR5LCBOR19GSUVMRCwgTmdGaWVsZFByb3BlcnR5LCBOR19PQkpFQ1QsIE5nT2JqZWN0UHJvcGVydHksXHJcbiAgTkdfRHluYW1pYywgTmdEeW5hbWljUHJvcGVydHksIE5HX0xJU1QsICAgIE5nTGlzdFByb3BlcnR5XHJcbn0gZnJvbSAnLi9maWVsZF9kZWNvcmF0b3InO1xyXG5cclxuLyoqXHJcbiAqIOWunuS9k+WFg+aVsOaNruW3peWFt+exu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVudGl0eU1ldGFkYXRhVXRpbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaJgOacieWxnuaAp1xyXG4gICAqIEB0b2Rv77ya5bCB6KOF5qC55o2u5Z+657G76I635Y+W5omA5pyJ5YWD5pWw5o2u55qE5pa55rOV77yM6Kej5Yaz6YeN5aSN5Luj56CBXHJcbiAgICovXHJcbiAgc3RhdGljIGdldEFsbE5nUHJvcGVydGllcyhlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4pOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTmdQcm9wZXJ0eSB9IHtcclxuICAgIGNvbnN0IG5nUGxhaW5Qcm9wZXJ0aWVzID0gdGhpcy5nZXROZ0ZpZWxkUHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuICAgIGNvbnN0IG5nRW50aXR5UHJvcGVydGllcyA9IHRoaXMuZ2V0TmdPYmplY3RQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xyXG4gICAgY29uc3QgbmdEeW5hbWljUHJvcGVydGllcyA9IHRoaXMuZ2V0TmdEeW5hbWljUHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuICAgIGNvbnN0IG5nRW50aXR5TGlzdFByb3BlcnRpZXMgPSB0aGlzLmdldE5nT2JqZWN0UHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuXHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxcclxuICAgICAgbmdQbGFpblByb3BlcnRpZXMsICAgbmdFbnRpdHlQcm9wZXJ0aWVzLFxyXG4gICAgICBuZ0R5bmFtaWNQcm9wZXJ0aWVzLCBuZ0VudGl0eUxpc3RQcm9wZXJ0aWVzXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blrp7kvZPlhYPmlbDmja7mj4/ov7BcclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdFbnRpdHlNYXRhZGF0YShlbnRpdHlUeXBlOiBhbnkpOiBOZ0VudGl0eXtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0Q2xhc3NNZXRhZGF0YUJ5TmFtZVdpdGhUcmFuc2xhdGUoZW50aXR5VHlwZSxOR19FTlRJVFkpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5ZOZ0ZpZWxk55qE5bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nRmllbGRQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBOZ0ZpZWxkUHJvcGVydHkgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIE5HX0ZJRUxEKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlk5nT2JqZWN05bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nT2JqZWN0UHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTmdPYmplY3RQcm9wZXJ0eSB9IHtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgTkdfT0JKRUNUKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlk5nRHluYW1pY+WxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXROZ0R5bmFtaWNQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBOZ0R5bmFtaWNQcm9wZXJ0eSB9IHtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgTkdfRHluYW1pYyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZOZ0xpc3TlsZ7mgKflhYPmlbDmja5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdMaXN0UHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTmdMaXN0UHJvcGVydHkgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIE5HX0xJU1QpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5Li76ZSu5bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldFByaW1hcnlLZXlQcm9wZXJ0eShlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4pOiBOZ0ZpZWxkUHJvcGVydHkge1xyXG4gICAgbGV0IHByaW1hcnlLZXlQcm9wZXJ0eTtcclxuICAgIGNvbnN0IG5nUGxhaW5Qcm9wZXJ0aWVzID0gRW50aXR5TWV0YWRhdGFVdGlsLmdldE5nRmllbGRQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xyXG4gICAgT2JqZWN0LmtleXMobmdQbGFpblByb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdQcm9wZXJ0eSA9IG5nUGxhaW5Qcm9wZXJ0aWVzW3Byb3BOYW1lXSBhcyBOZ0ZpZWxkUHJvcGVydHk7XHJcbiAgICAgIGlmIChuZ1Byb3BlcnR5LnByaW1hcnkgPT09IHRydWUpIHtcclxuICAgICAgICBwcmltYXJ5S2V5UHJvcGVydHkgPSBuZ1Byb3BlcnR5O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcHJpbWFyeUtleVByb3BlcnR5O1xyXG4gIH1cclxufVxyXG4iXX0=