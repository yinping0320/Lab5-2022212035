import { MetadataUtil } from '../../metadata/index';
import { NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST } from './field_decorator';
/**
 * 属性注解器通用方法
 */
var FieldMetadataUtil = /** @class */ (function () {
    function FieldMetadataUtil() {
    }
    /**
     * 获取实体所有的简单属性元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    FieldMetadataUtil.getNgFields = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);
    };
    /**
     * 获取某个简单属性的元数据
     */
    FieldMetadataUtil.getNgField = function (target, propName) {
        var ngFields = this.getNgFields(target);
        var ngField = ngFields[propName];
        return ngField;
    };
    /**
     * 获取实体属性在原始数据中的属性名
     */
    FieldMetadataUtil.getDataField = function (target, propName) {
        var ngField = this.getNgField(target, propName);
        return ngField.dataField || propName;
    };
    /**
     * 获取标注为NgObject的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    FieldMetadataUtil.getNgObjects = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);
    };
    FieldMetadataUtil.getNgDynamic = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);
    };
    /**
     * 获取标注为NgList的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgListProperty}
     */
    FieldMetadataUtil.getNgList = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);
    };
    /**
     * 获取实体标注为主键的属性元数据
     * @param target 实体类型
     */
    FieldMetadataUtil.getPrimaryFieldMetadata = function (target) {
        var ngFieldObj = FieldMetadataUtil.getNgFields(target);
        var primaryKey = Object.keys(ngFieldObj).find(function (prop) {
            return ngFieldObj[prop].primary;
        });
        if (primaryKey) {
            var propMeta = ngFieldObj[primaryKey];
            propMeta.property = primaryKey;
            if (!propMeta.dataField) {
                propMeta.dataField = primaryKey;
            }
            return propMeta;
        }
        return undefined;
    };
    /**
     * 获取主键名称，没有主键时返回空字符串
     */
    FieldMetadataUtil.getPrimaryKey = function (entityType) {
        var primaryNgField = this.getPrimaryFieldMetadata(entityType);
        if (!primaryNgField) {
            return '';
        }
        return primaryNgField.property;
    };
    // static udtMap = {};
    /**
     * 获取NgField 的验证规则元数据
     * @param target 实体类Type
     */
    FieldMetadataUtil.getValidationMetadata = function (target) {
        var fieldMetadatas = FieldMetadataUtil.getNgFields(target);
        // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});
        // let udtParentName = '';
        // Object.keys(this.udtMap).forEach(key => {
        //   // 当前实体是udt类型时
        //   if (this.udtMap[key].type.name === target.name) {
        //     // 找出当前udt实体的父级信息
        //     udtParentName = key;
        //   }
        // });
        var metadatas = {};
        // let primaryId = '';
        // let udtPrimaryId = '';
        // 不进行验证的属性名
        // const excludeIDs = [];
        // 排除udt的主键
        // Object.keys(fieldMetadatas).forEach(key => {
        //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
        //     primaryId = fieldMetadatas[key].dataField;
        //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';
        //     excludeIDs.push(fieldMetadatas[key].dataField);
        //   }
        // });
        Object.keys(fieldMetadatas).forEach(function (key) {
            if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
                return;
            }
            var validRules = fieldMetadatas[key].validRules;
            // if (excludeIDs.indexOf(key) > -1) {
            //   return;
            // }
            if (validRules && validRules.length) {
                validRules.map(function (rule) {
                    rule.property = key;
                    rule['targetName'] = target.name;
                });
                metadatas[key] = validRules;
            }
        });
        return metadatas;
    };
    FieldMetadataUtil.getValidationMetadataWithPath = function (object) {
        var target = object.constructor;
        var fieldMetadatas = FieldMetadataUtil.getNgFields(target);
        var parentPaths = object.getPaths().path || [];
        var metadatas = {};
        Object.keys(fieldMetadatas).forEach(function (key) {
            if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
                return;
            }
            var validRules = fieldMetadatas[key].validRules;
            if (validRules && validRules.length) {
                var propertyPath = parentPaths.concat([]);
                propertyPath.push(key);
                var property_1 = propertyPath.join('.');
                validRules.map(function (rule) {
                    rule.property = key;
                    rule['targetName'] = target.name;
                    rule['path'] = property_1;
                });
                metadatas[key] = validRules;
            }
        });
        return metadatas;
    };
    return FieldMetadataUtil;
}());
export { FieldMetadataUtil };
//# sourceMappingURL=data:application/json;base64,