import * as tslib_1 from "tslib";
import { ModifyType } from "../changeset";
import { Entity } from "./entity";
import { DynamicFactory, EntityFactory } from "./entity_factory";
import { EntityList } from "./entity_list";
import { FieldMetadataUtil } from "./metadata";
import { PARENT_CLASS, PARENT_PATH } from "./types";
var EntityTypeCreator = /** @class */ (function () {
    function EntityTypeCreator() {
    }
    EntityTypeCreator.create = function (constructor, data) {
        var entityType = this.getType(constructor);
        var entity = new entityType(data);
        entity.constructor = constructor;
        return entity;
    };
    // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })
    EntityTypeCreator.createType = function (constructor) {
        var entityType = /** @class */ (function (_super) {
            tslib_1.__extends(EntityType, _super);
            function EntityType(data) {
                return _super.call(this, data) || this;
            }
            return EntityType;
        }(Entity));
        var entityPrototype = entityType.prototype;
        this.extendProperties(constructor, entityPrototype);
        return entityType;
    };
    EntityTypeCreator.extendProperties = function (constructor, entityPrototype) {
        var ngFields = FieldMetadataUtil.getNgFields(constructor);
        var ngObjects = FieldMetadataUtil.getNgObjects(constructor);
        var ngLists = FieldMetadataUtil.getNgList(constructor);
        var ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
        this.extendPlainProperty(entityPrototype, ngFields);
        this.extendListProperty(entityPrototype, ngLists);
        this.extendObjectProperty(entityPrototype, ngObjects);
        this.extendDynamicProperty(entityPrototype, ngDynamic);
    };
    EntityTypeCreator.extendPlainProperty = function (entityPrototype, ngFields) {
        Object.keys(ngFields).forEach(function (propName) {
            var ngField = ngFields[propName];
            // const dataField = ngField.dataField || propName;
            Object.defineProperty(entityPrototype, propName, {
                get: function () {
                    var value = this.getPropValue(propName, ngField);
                    return value;
                },
                set: function (newPropValue) {
                    // 值相同时不触发变更。
                    var oldPropValue = this.getPropValue(propName, ngField);
                    if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                        return;
                    }
                    this.setPropValue(propName, ngField, newPropValue);
                    var changeSetValue = this.preparePropValue(propName, ngField, newPropValue);
                    this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);
                }
            });
        });
    };
    EntityTypeCreator.extendListProperty = function (entityPrototype, ngListMetadata) {
        Object.keys(ngListMetadata).forEach(function (propertyName) {
            var key = "__" + propertyName + "__";
            Object.defineProperty(entityPrototype, propertyName, {
                get: function () {
                    var _this = this;
                    var entityList = this[key];
                    if (!entityList) {
                        var fieldMetadata_1 = ngListMetadata[propertyName];
                        var path = this.createPath(propertyName);
                        var dataField = fieldMetadata_1.dataField || propertyName;
                        var val = this.data[dataField];
                        entityList = new EntityList();
                        entityList[PARENT_CLASS] = this;
                        entityList[PARENT_PATH] = path;
                        if (val) {
                            var entities = val.map(function (v) { return EntityFactory(fieldMetadata_1.type, v); });
                            entityList.loadEntities(entities);
                        }
                        entityList.onListChanged.subscribe(function (value) {
                            if (value) {
                                if (entityList[PARENT_PATH][0] !== value.path[0]) {
                                    value.path = entityList[PARENT_PATH].concat(value.path);
                                }
                                _this.setChanges(value);
                            }
                        });
                        this[key] = entityList;
                    }
                    return entityList;
                },
                set: function (value) {
                    this[key] = value;
                }
            });
        });
    };
    EntityTypeCreator.extendObjectProperty = function (entityPrototype, ngObjectMetadata) {
        Object.keys(ngObjectMetadata).forEach(function (propertyName) {
            var fieldMetadata = ngObjectMetadata[propertyName];
            var key = "__" + propertyName + "__";
            // 如果没有值用一个空对象代替
            Object.defineProperty(entityPrototype, propertyName, {
                get: function () {
                    var childEntity = this[key];
                    var path = this.createPath(propertyName);
                    if (!childEntity) {
                        var dataField = fieldMetadata.dataField || propertyName;
                        // val不存在时，用空对象代替
                        var val = this.data[dataField] || {};
                        childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);
                        this[key] = childEntity;
                    }
                    return childEntity;
                },
                set: function (value) {
                    var path = this.createPath(propertyName);
                    var modifyInfo = {
                        path: path,
                        value: value.data,
                        preValue: this[propertyName].data,
                        type: ModifyType.ValueChange
                    };
                    var childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);
                    this[key] = childEntity;
                    this.setChanges(modifyInfo);
                }
            });
        });
    };
    EntityTypeCreator.extendDynamicProperty = function (entityPrototype, ngDynamicMetadata) {
        Object.keys(ngDynamicMetadata).forEach(function (propertyName) {
            var fieldMetadata = ngDynamicMetadata[propertyName];
            var key = "__" + propertyName + "__";
            Object.defineProperty(entityPrototype, propertyName, {
                get: function () {
                    var dynamicEntity = this[key];
                    var path = this.createPath(propertyName);
                    if (!dynamicEntity) {
                        var dataField = fieldMetadata.dataField || propertyName;
                        var originalData = this.data[dataField] || {};
                        dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);
                        this[key] = dynamicEntity;
                    }
                    return dynamicEntity;
                },
                set: function (value) {
                    var path = this.createPath(propertyName);
                    var modifyInfo = {
                        path: path,
                        value: value.data,
                        preValue: this[propertyName].data,
                        type: ModifyType.ValueChange
                    };
                    var dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);
                    this[key] = dynamicEntity;
                    this.setChanges(modifyInfo);
                }
            });
        });
    };
    EntityTypeCreator.getType = function (constructor) {
        if (this.buffer.has(constructor)) {
            return this.buffer.get(constructor);
        }
        var entityType = this.createType(constructor);
        this.buffer.set(constructor, entityType);
        return entityType;
    };
    EntityTypeCreator.buildEntity = function (parentPath, value, parent, fieldMetadata) {
        var instance;
        if (value instanceof fieldMetadata.type) {
            instance = value;
        }
        else {
            instance = EntityFactory(fieldMetadata.type, value);
        }
        instance[PARENT_CLASS] = parent;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.subscribe(function (changes) {
            if (changes) {
                changes.path = (parent[PARENT_PATH] || []).concat(changes.path);
                var change = Object.assign({}, changes, { fromParent: true });
                parent.setChanges(change);
            }
        });
        return instance;
    };
    EntityTypeCreator.buildDynamic = function (parentPath, value, parent, fieldMetadata) {
        var instance;
        if (value instanceof fieldMetadata.type) {
            instance = value;
        }
        else {
            instance = DynamicFactory(fieldMetadata.type, value);
        }
        instance[PARENT_CLASS] = parent;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.subscribe(function (changes) {
            if (changes) {
                changes.path = (parent[PARENT_PATH] || []).concat(changes.path);
                parent.setChanges(changes);
            }
        });
        return instance;
    };
    EntityTypeCreator.buffer = new Map();
    return EntityTypeCreator;
}());
export { EntityTypeCreator };
//# sourceMappingURL=data:application/json;base64,