import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { ModifyType } from '../changeset';
import { EntityList } from './entity_list';
import { FieldMetadataUtil } from './metadata/field_metadata_util';
import { PARENT_CLASS, PARENT_PATH } from './types';
import { ValidationUtils } from './validator/validation_utils';
export var entityPrototype = {
    /**
     * 获取属性值
     */
    getFieldValue: function (schemaField) {
        var _a;
        var fieldName = schemaField.label;
        var value = this.data[fieldName];
        // 对多语录入字段，query不返回问题进行兼容
        if (schemaField.multiLanguage === true && !value) {
            var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
            var originDataField = fieldName.replace('_MULTILANGUAGE', '');
            return _a = {},
                _a[langCode] = this.data[originDataField],
                _a;
        }
        return value;
    },
    /**
     * 设置属性值
     */
    setFieldValue: function (schemaField, propertyValue) {
        var fieldName = schemaField.label;
        this.data[fieldName] = propertyValue;
    },
    /**
     * 获取复杂类型对象的值
     * @param schemaField Schema字段描述
     * @returns 复杂类型对象的值
     */
    getComplexFieldValue: function (schemaField) {
        var fieldName = schemaField.label;
        var objectPropertyValue = this.innerEntities[fieldName];
        return objectPropertyValue;
    },
    /**
     * 向实体复杂类型字段赋值
     * @param schemaField Schema字段描述
     * @param ComplexField 复杂类型字段的类型定义
     * @param propertyValue 属性值
     */
    setComplexFieldValue: function (schemaField, ComplexField, propertyValue) {
        // 提取字段名
        var fieldName = schemaField.label;
        var complexFieldInstance = null;
        if (propertyValue instanceof ComplexField) {
            complexFieldInstance = propertyValue;
        }
        else {
            complexFieldInstance = new ComplexField(propertyValue);
            complexFieldInstance.constructor = ComplexField;
        }
        // 提取复杂类型对象的值
        var objectPropertyValue = this.innerEntities[fieldName];
        var propertyPath = (objectPropertyValue && objectPropertyValue[PARENT_PATH]) || complexFieldInstance[PARENT_PATH];
        // 构造变更信息
        var changeInfo = {
            // 提取变更对象相对于根实体的路径
            path: propertyPath,
            // 记录对象最新值
            value: propertyValue,
            // 记录对象历史值
            preValue: (this[fieldName] && this[fieldName].data) || null,
            // 标记这是一个值变化变更
            type: ModifyType.ValueChange
        };
        // 创建新的对象
        this.innerEntities[fieldName] = complexFieldInstance;
        // this.innerEntities[fieldName] = new ComplexField(propertyValue);
        // 记录本次数据变更
        if (!this.isInitializing) {
            this.setChanges(changeInfo);
        }
    },
    /**
     * 获取指定的子实体列表
     * @param schemaEntity 实体描述
     * @returns 子实体列表
     */
    getEntities: function (schemaEntity) {
        var dataField = schemaEntity.label;
        var listPropertyValue = this.innerEntities[dataField];
        return listPropertyValue;
    },
    /**
     * 更新指定子实体的值
     * @param schemaEntity 实体描述
     * @param propertyValue 实体列表
     */
    setEntities: function (schemaEntity, propertyValue) {
        var dataField = schemaEntity.label;
        this.innerEntities[dataField] = propertyValue;
    },
    /**
     * 检查属性值是否发生变化
     */
    isFieldValueChanged: function (schemaField, newPropValue, oldPropValue) {
        if (schemaField.multiLanguage === true) {
            if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                return false;
            }
            return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
        }
        else {
            return newPropValue !== oldPropValue;
        }
    },
    /**
     * 多语录入字段的值是否为空
     */
    isEmptyMultiLangPropValue: function (value) {
        if (!value) {
            return true;
        }
        var keys = Object.keys(value);
        if (keys.length === 0) {
            return true;
        }
        // 值全部为空，视为空
        var vals = Object.values(value);
        var allEmptyVal = vals.every(function (val) {
            return !val;
        });
        if (allEmptyVal === true) {
            return true;
        }
        return false;
    },
    /**
     * 发送值变更
     */
    emitFieldValueChange: function (schemaField, newPropValue, oldPropValue) {
        if (!this.isInitializing) {
            var fieldName = schemaField.label;
            var changeInfo = {
                path: this.createPath(fieldName),
                value: newPropValue,
                preValue: oldPropValue,
                type: ModifyType.ValueChange
            };
            if (this[PARENT_PATH]) {
                changeInfo.path = this[PARENT_PATH].concat(changeInfo.path);
            }
            this.setChanges(changeInfo);
        }
    },
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     */
    setChanges: function (value) {
        var propertyName = value.path[value.path.length - 1];
        // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。
        // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        this.valueChanged.next(value);
        if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {
            this.changeSet.append(value);
        }
    },
    /**
     * 创建path
     * @param propertyName 属性名称
     */
    createPath: function (propertyName) {
        if (this.primaryKey) {
            return [this.primaryKey + ':' + this.primaryValue, propertyName];
        }
        else {
            return [':', propertyName];
        }
    },
    getPaths: function () {
        var pathObj = {
            path: [],
            isUdt: false,
            isGrid: false
        };
        var handleParent = function (item) {
            var parentPaths = item[PARENT_PATH];
            if (parentPaths) {
                var prop = parentPaths[parentPaths.length - 1];
                // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段
                if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                    pathObj.isUdt = true;
                }
                // 存在类型为ngList，则判断为grid
                if (item instanceof EntityList === true) {
                    pathObj.isGrid = true;
                }
                else {
                    pathObj.path.push(prop);
                }
            }
            if (item[PARENT_CLASS]) {
                handleParent(item[PARENT_CLASS]);
            }
        };
        handleParent(this);
        pathObj.path = pathObj.path.reverse();
        return pathObj;
    },
    validate: function (propertyName, value, externalRules, index) {
        var _this = this;
        return from(this.validator.validate(this, propertyName, value, externalRules, index)).pipe(tap(function (result) {
            if (!result.isValid) {
                _this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
            }
            else {
                _this.validErrors = {};
            }
        }));
    },
    validateAll: function (validateContext) {
    },
    /**
     * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb
     */
    validateFromUtil: function (propertyName, value, cb) {
        var _this = this;
        this.validErrors = {};
        from(this.validator.validate(this, propertyName, value)).subscribe(function (result) {
            if (!result.isValid) {
                _this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
            }
            // 不应重新赋值，这里仅是实体校验通过
            /*else {
              // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
              if (this[propertyName] === value) {
                return;
              }
              this[propertyName] = value;
            }*/
            cb(result);
        });
    },
    /**
     * 将实体数据转换为JSON格式
     */
    toJSON: function (buildChanges) {
        var _this = this;
        // 声明转换初始值
        var result = {};
        // 提取简单类型字段的值
        var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach(function (propName) {
            var ngField = ngFields[propName];
            var dataField = ngField.dataField || propName;
            if (buildChanges === true && ngField.enableTimeZone === true) {
                result[dataField] = _this.data[propName];
            }
            else {
                result[dataField] = _this[propName];
            }
        });
        // 提取对象类型字段的值
        var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach(function (propName) {
            var ngObject = ngObjects[propName];
            var dataField = ngObject.dataField || propName;
            result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
        });
        // 提取动态属性字段的值
        var ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamics).forEach(function (propName) {
            var ngDynamic = ngDynamics[propName];
            var dataField = ngDynamic.dataField || propName;
            result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
        });
        // 提取列表字段的属性
        var ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach(function (propName) {
            var ngList = ngLists[propName];
            var dataField = ngList.dataField || propName;
            result[dataField] = _this[propName] ? _this[propName].toJSON(buildChanges) : {};
        });
        return result;
    }
};
//# sourceMappingURL=data:application/json;base64,