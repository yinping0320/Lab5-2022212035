/*
 * @Author: Witt
 * @Date: 2018-11-17 13:38:23
 * @Last Modified by: Witt
 * @Last Modified time: 2018-11-17 13:38:50
 * @todo：临时删除原有功能，待重构
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { UIStateMetadataUtil } from './uistate_metadata_util';
/**
 * UI状态
 */
var UIState = /** @class */ (function () {
    function UIState() {
        this.paramTypeTransform = false;
        this.changes = new Subject();
        this.innerData = Object.assign({});
        this._init();
    }
    UIState.prototype._init = function () {
        var uiFields = UIStateMetadataUtil.getUIFields(this.constructor);
        this.initializeUIField(uiFields);
    };
    UIState.prototype.initialize = function (context) {
        var uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);
        this.initializeUIField(uiFields);
    };
    UIState.prototype.initializeUIField = function (uiFieldMetadata) {
        var _this = this;
        Object.keys(uiFieldMetadata).forEach(function (propertyName) {
            var fieldMetadata = uiFieldMetadata[propertyName];
            var uiField = fieldMetadata.stateName || propertyName;
            if (delete _this[propertyName]) {
                _this.defineProperty(propertyName, uiField);
            }
        });
    };
    UIState.prototype.isExistProperty = function (propertyName) {
        if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {
            return true;
        }
        return false;
    };
    UIState.prototype.defineProperty = function (propertyName, field) {
        if (field === void 0) { field = null; }
        Object.defineProperty(this, propertyName, {
            get: function () {
                return field !== null ? this.innerData[field] : this.innerData[propertyName];
            },
            set: function (value) {
                // 值相同时不触发变更
                var oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];
                if (this.paramTypeTransform === true) {
                    var ngParams = UIStateMetadataUtil.getUIFields(this.constructor);
                    var ngParam = ngParams && ngParams[propertyName] || null;
                    var dataType = ngParam && ngParam.originalDataType || null;
                    if (dataType) {
                        value = this.transform(value, dataType);
                    }
                }
                if (oldValue === value) {
                    return;
                }
                if (field !== null) {
                    this.innerData[field] = value;
                }
                else {
                    this.innerData[propertyName] = value;
                }
                this.changes.next({
                    field: propertyName,
                    value: value
                });
            }
        });
    };
    UIState.prototype.setPropertyValue = function (propertyName, value) {
        if (propertyName === '' || propertyName === undefined) {
            return;
        }
        if (!this.isExistProperty(propertyName)) {
            this.defineProperty(propertyName);
        }
        this[propertyName] = value;
    };
    UIState.prototype.transform = function (target, dataType) {
        if (!dataType) {
            return target;
        }
        dataType = dataType.toLowerCase();
        if (dataType === 'string') {
            if (target === null || target === undefined) {
                return target;
            }
            return target.toString();
        }
        else if (dataType === 'number') {
            if (target === undefined) {
                return undefined;
            }
            var result = Number(target);
            if (isNaN(result)) {
                throw new Error(target + "\u65E0\u6CD5\u8F6C\u6362\u4E3A\u6570\u5B57\uFF01");
            }
            return result;
        }
        else if (dataType === 'boolean') {
            if (typeof target === 'boolean') {
                return target;
            }
            else {
                if (target === null || target === undefined) {
                    return false;
                }
                target = target.toString().toLowerCase();
                if (target === 'false') {
                    return false;
                }
                else if (target === 'true') {
                    return true;
                }
                else {
                    throw new Error(target + "\u65E0\u6CD5\u8F6C\u6362\u4E3A\u5E03\u5C14\u7C7B\u578B\uFF01");
                }
            }
        }
        else if (dataType === 'date' || dataType === 'datetime') {
            // 日期、日期时间在前端依然按照字符串处理
            return target;
        }
        else if (dataType === 'object') {
            if (typeof target === 'object') {
                return target;
            }
            else {
                try {
                    return JSON.parse(target);
                }
                catch (_a) {
                    throw new Error(target + "\u65E0\u6CD5\u8F6C\u6362\u4E3A\u5BF9\u8C61\uFF01");
                }
            }
        }
        else {
            return target;
        }
    };
    UIState.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UIState.ctorParameters = function () { return []; };
    return UIState;
}());
export { UIState };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlfc3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi91aS1zdGF0ZS91aV9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFPOUQ7O0dBRUc7QUFDSDtJQVVFO1FBRE8sdUJBQWtCLEdBQUcsS0FBSyxDQUFDO1FBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQTBCLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCx1QkFBSyxHQUFMO1FBQ0UsSUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELDRCQUFVLEdBQVYsVUFBVyxPQUFZO1FBQ3JCLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxtQ0FBaUIsR0FBekIsVUFBMEIsZUFBMkM7UUFBckUsaUJBU0M7UUFSQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFlBQVk7WUFDL0MsSUFBTSxh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LElBQUksUUFBUSxLQUFLLE1BQU0sSUFBSSxRQUFRLEtBQUssVUFBVSxFQUFFO1lBQ3pELHNCQUFzQjtZQUN0QixPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU0sSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM5QixPQUFPLE1BQU0sQ0FBQzthQUNmO2lCQUFNO2dCQUNMLElBQUk7b0JBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUMzQjtnQkFBQyxXQUFNO29CQUNOLE1BQU0sSUFBSSxLQUFLLENBQUksTUFBTSxxREFBVSxDQUFDLENBQUM7aUJBQ3RDO2FBQ0Y7U0FDRjthQUFNO1lBQ0wsT0FBTyxNQUFNLENBQUM7U0FDZjtJQUNILENBQUM7O2dCQXhJRixVQUFVOzs7O0lBeUlYLGNBQUM7Q0FBQSxBQXpJRCxJQXlJQztTQXhJWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjogV2l0dFxyXG4gKiBARGF0ZTogMjAxOC0xMS0xNyAxMzozODoyM1xyXG4gKiBATGFzdCBNb2RpZmllZCBieTogV2l0dFxyXG4gKiBATGFzdCBNb2RpZmllZCB0aW1lOiAyMDE4LTExLTE3IDEzOjM4OjUwXHJcbiAqIEB0b2Rv77ya5Li05pe25Yig6Zmk5Y6f5pyJ5Yqf6IO977yM5b6F6YeN5p6EXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFVJU3RhdGVNZXRhZGF0YVV0aWwgfSBmcm9tICcuL3Vpc3RhdGVfbWV0YWRhdGFfdXRpbCc7XHJcbmltcG9ydCB7IE5nUGFyYW0gfSBmcm9tICcuL2RlY29yYXRvcnMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtIHtcclxuICBmaWVsZDogc3RyaW5nO1xyXG4gIHZhbHVlOiBhbnk7XHJcbn1cclxuLyoqXHJcbiAqIFVJ54q25oCBXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBVSVN0YXRlIHtcclxuICAvKipcclxuICAgKiBAZGVwcmVjYXRlZCBpbm5lckRhdGHkuLrnirbmgIHmnLrlhoXpg6jlj5jph4/vvIzlpJbpg6jor7fkuI3opoHkvb/nlKhcclxuICAgKi9cclxuICBpbm5lckRhdGE6IHt9O1xyXG5cclxuICAvLyDnm5HlkKzlj5jljJZcclxuICBwdWJsaWMgY2hhbmdlczogU3ViamVjdDxVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtPjtcclxuICBwdWJsaWMgcGFyYW1UeXBlVHJhbnNmb3JtID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNoYW5nZXMgPSBuZXcgU3ViamVjdDxVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtPigpO1xyXG4gICAgdGhpcy5pbm5lckRhdGEgPSBPYmplY3QuYXNzaWduKHt9KTtcclxuICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcblxyXG4gIF9pbml0KCkge1xyXG4gICAgY29uc3QgdWlGaWVsZHMgPSBVSVN0YXRlTWV0YWRhdGFVdGlsLmdldFVJRmllbGRzKHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgdGhpcy5pbml0aWFsaXplVUlGaWVsZCh1aUZpZWxkcyk7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKGNvbnRleHQ6IGFueSkge1xyXG4gICAgY29uc3QgdWlGaWVsZHMgPSBjb250ZXh0Lm1ldGFkYXRhLnVpU3RhdGVzIHx8IFVJU3RhdGVNZXRhZGF0YVV0aWwuZ2V0VUlGaWVsZHModGhpcy5jb25zdHJ1Y3Rvcik7XHJcbiAgICB0aGlzLmluaXRpYWxpemVVSUZpZWxkKHVpRmllbGRzKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVVJRmllbGQodWlGaWVsZE1ldGFkYXRhOiB7IFtrZXk6IHN0cmluZ106IE5nUGFyYW0gfSk6IHZvaWQge1xyXG4gICAgT2JqZWN0LmtleXModWlGaWVsZE1ldGFkYXRhKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XHJcbiAgICAgIGNvbnN0IGZpZWxkTWV0YWRhdGEgPSB1aUZpZWxkTWV0YWRhdGFbcHJvcGVydHlOYW1lXSBhcyBOZ1BhcmFtO1xyXG4gICAgICBjb25zdCB1aUZpZWxkID0gZmllbGRNZXRhZGF0YS5zdGF0ZU5hbWUgfHwgcHJvcGVydHlOYW1lO1xyXG5cclxuICAgICAgaWYgKGRlbGV0ZSB0aGlzW3Byb3BlcnR5TmFtZV0pIHtcclxuICAgICAgICB0aGlzLmRlZmluZVByb3BlcnR5KHByb3BlcnR5TmFtZSwgdWlGaWVsZCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGlzRXhpc3RQcm9wZXJ0eShwcm9wZXJ0eU5hbWU6IGFueSkge1xyXG4gICAgaWYgKHRoaXMuaW5uZXJEYXRhLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkgfHwgdGhpcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZWZpbmVQcm9wZXJ0eShwcm9wZXJ0eU5hbWU6IGFueSwgZmllbGQ6IGFueSA9IG51bGwpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkICE9PSBudWxsID8gdGhpcy5pbm5lckRhdGFbZmllbGRdIDogdGhpcy5pbm5lckRhdGFbcHJvcGVydHlOYW1lXTtcclxuICAgICAgfSxcclxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAvLyDlgLznm7jlkIzml7bkuI3op6blj5Hlj5jmm7RcclxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGZpZWxkICE9PSBudWxsID8gdGhpcy5pbm5lckRhdGFbZmllbGRdIDogdGhpcy5pbm5lckRhdGFbcHJvcGVydHlOYW1lXTtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbVR5cGVUcmFuc2Zvcm0gPT09IHRydWUpIHtcclxuICAgICAgICAgIGNvbnN0IG5nUGFyYW1zID0gVUlTdGF0ZU1ldGFkYXRhVXRpbC5nZXRVSUZpZWxkcyh0aGlzLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgIGNvbnN0IG5nUGFyYW0gPSBuZ1BhcmFtcyAmJiBuZ1BhcmFtc1twcm9wZXJ0eU5hbWVdIHx8IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IG5nUGFyYW0gJiYgbmdQYXJhbS5vcmlnaW5hbERhdGFUeXBlIHx8IG51bGw7XHJcbiAgICAgICAgICBpZiAoZGF0YVR5cGUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnRyYW5zZm9ybSh2YWx1ZSwgZGF0YVR5cGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmaWVsZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhpcy5pbm5lckRhdGFbZmllbGRdID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuaW5uZXJEYXRhW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VzLm5leHQoe1xyXG4gICAgICAgICAgZmllbGQ6IHByb3BlcnR5TmFtZSxcclxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5TmFtZTogYW55LCB2YWx1ZTogYW55KSB7XHJcbiAgICBpZiAocHJvcGVydHlOYW1lID09PSAnJyB8fCBwcm9wZXJ0eU5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcclxuICAgICAgdGhpcy5kZWZpbmVQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xyXG4gICAgfVxyXG4gICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gdmFsdWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgdHJhbnNmb3JtKHRhcmdldDogYW55LCBkYXRhVHlwZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWRhdGFUeXBlKSB7XHJcbiAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICBkYXRhVHlwZSA9IGRhdGFUeXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoZGF0YVR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IG51bGwgfHwgdGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0YXJnZXQudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVzdWx0ID0gTnVtYmVyKHRhcmdldCk7XHJcbiAgICAgIGlmIChpc05hTihyZXN1bHQpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldH3ml6Dms5XovazmjaLkuLrmlbDlrZfvvIFgKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IG51bGwgfHwgdGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YXJnZXR95peg5rOV6L2s5o2i5Li65biD5bCU57G75Z6L77yBYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnZGF0ZScgfHwgZGF0YVR5cGUgPT09ICdkYXRldGltZScpIHtcclxuICAgICAgLy8g5pel5pyf44CB5pel5pyf5pe26Ze05Zyo5YmN56uv5L6d54S25oyJ54Wn5a2X56ym5Liy5aSE55CGXHJcbiAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0YXJnZXQpO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldH3ml6Dms5XovazmjaLkuLrlr7nosaHvvIFgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==