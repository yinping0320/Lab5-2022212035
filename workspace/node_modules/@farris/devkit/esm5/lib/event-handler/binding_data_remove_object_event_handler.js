import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
/**
 * 删除数据时需要计算的表达式
 * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）
 */
var BindingDataRemoveObjectEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataRemoveObjectEventHandler, _super);
    function BindingDataRemoveObjectEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    BindingDataRemoveObjectEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            // 找到聚合相关表达式
            var expressions = this.expressionObjects.filter(function (expressionObject) {
                if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {
                    return false;
                }
                var info = _this.analysis(event, expressionObject);
                if (!info) {
                    return false;
                }
                // event.path like [id:xxxx] or [id:xxxx,子表s]
                var eventTablePaths = _this.buildEntityPath(event.path);
                // 主表删除
                if (eventTablePaths.length === 0) {
                    if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {
                        return false;
                    }
                }
                // 从表或从从表删除
                eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);
                // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增
                // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']
                // 仅处理上级表达式
                if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {
                    return false;
                }
                // 不支持跨表
                if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                    return false;
                }
                var index = expressionObject.deps.findIndex(function (dep) {
                    // 依赖
                    if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                        return false;
                    }
                    var deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                    var dependPathInfo = _this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                    if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {
                        return true;
                    }
                    return false;
                });
                return index === -1 ? false : true;
            });
            return expressions;
        }
    };
    /**
     * 发布事件
     * @param event event
     */
    BindingDataRemoveObjectEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 删除副作用器
     * @param event event
     * @param expressionObject 表达式
     * @returns
     */
    BindingDataRemoveObjectEventHandler.prototype.effect = function (event, expressionObject) {
        var effectTo = expressionObject.bindingType;
        var eventPath = this.cleanEventPath(event.path);
        var effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            return;
        }
        var info = this.analysis(event, expressionObject);
        if (!info) {
            return;
        }
        var expressionPaths = expressionObject.path.split('/').filter(function (p) { return p; });
        if (effectTo === Expression.ExpressionBindingType.Field) {
            var paths = [];
            var propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);
            // 删除场景仅需要计算事件表上面的表
            if (info.distance !== 0) {
                // 表达式和事件不在同一个表，即下级表删除了一批数据
                if (info.eventFromParent === true) {
                    // 在过滤时这种情况的应该就排除掉了
                    return;
                }
                else if (info.eventFromChildren === true) {
                    var prevPaths = eventPath.slice(0, eventPath.length - 1);
                    var path = prevPaths.concat(propertyPaths);
                    paths.push(path);
                }
                else {
                    return;
                }
            }
            EffectorManager.effect(effector, expressionObject, paths);
        }
        else if (effectTo === Expression.ExpressionBindingType.State) {
            console.error('not supported！');
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    BindingDataRemoveObjectEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    BindingDataRemoveObjectEventHandler.decorators = [
        { type: Injectable }
    ];
    return BindingDataRemoveObjectEventHandler;
}(EventHandler));
export { BindingDataRemoveObjectEventHandler };
//# sourceMappingURL=data:application/json;base64,