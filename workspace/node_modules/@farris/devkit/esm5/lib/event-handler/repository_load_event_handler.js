import * as tslib_1 from "tslib";
import { EventHandler } from "./event_handler";
import { Injectable } from "@angular/core";
var RepositoryLoadEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(RepositoryLoadEventHandler, _super);
    function RepositoryLoadEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RepositoryLoadEventHandler.prototype.filter = function (event) {
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    RepositoryLoadEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    RepositoryLoadEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    RepositoryLoadEventHandler.decorators = [
        { type: Injectable }
    ];
    return RepositoryLoadEventHandler;
}(EventHandler));
export { RepositoryLoadEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9sb2FkX2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1oYW5kbGVyL3JlcG9zaXRvcnlfbG9hZF9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQztJQUNnRCxzREFBWTtJQUQ1RDs7SUFxQ0EsQ0FBQztJQW5DUSwyQ0FBTSxHQUFiLFVBQWMsS0FBMkI7UUFDdkMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ksNkNBQVEsR0FBZixVQUFnQixLQUEyQjtRQUEzQyxpQkFrQkM7UUFqQkMsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsZ0JBQTZDO2dCQUNoRSxJQUFNLGFBQWEsR0FBRyxLQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RFLElBQU0sT0FBTyxHQUFHLEtBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUMxRSxJQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUcsQ0FBQyxLQUFJLENBQUMsOEJBQThCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDakYsT0FBTztpQkFDUjtnQkFDRCxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2dCQUNqQyxJQUFJLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtvQkFDdkIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3pFO3FCQUFNO2lCQUNOO2dCQUNELEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLHlEQUFvQixHQUEzQixVQUE0QixLQUFlLEVBQUUsS0FBMkI7UUFDdEUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Z0JBcENGLFVBQVU7O0lBcUNYLGlDQUFDO0NBQUEsQUFyQ0QsQ0FDZ0QsWUFBWSxHQW9DM0Q7U0FwQ1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24vaW5kZXhcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlMb2FkRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcclxuICBwdWJsaWMgZmlsdGVyKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWPkeW4g+S6i+S7tlxyXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwYXRjaChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5maWx0ZXIoZXZlbnQpO1xyXG4gICAgaWYgKGV4cHJlc3Npb25zICYmIGV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGV4dCA9IHRoaXMuYnVpbGRFbnRpdHlDb250ZXh0KGV2ZW50LGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmJ1aWxkQ29udGV4dChleHByZXNzaW9uT2JqZWN0LCBldmVudCwgZW50aXR5Q29udGV4dCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtKGV4cHJlc3Npb25PYmplY3QsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCYmICF0aGlzLmlzVmFsaWRhdGVPclJlcXVpcmVkRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0KSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCA9IHJlc3VsdDtcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5pZCkge1xyXG4gICAgICAgICAgdGhpcy5leHByZXNzaW9uUmVzdWx0LnNldChleHByZXNzaW9uT2JqZWN0LmlkLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a2Q6KGo5LqL5Lu26KGMXHJcbiAgICogQHBhcmFtIHBhdGhzIFxyXG4gICAqIEBwYXJhbSBldmVudCBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q3VycmVudFJvd0J5RXZlbnQocGF0aHM6IHN0cmluZ1tdLCBldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpOiBudWxsIHwgeyBbcHJvcDogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFJvd0J5UGF0aHMocGF0aHMpO1xyXG4gIH1cclxufSJdfQ==