import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { EventHandler } from "./event_handler";
var RepositoryAddEntityEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(RepositoryAddEntityEventHandler, _super);
    function RepositoryAddEntityEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 获取相关表达式
     * @param event event
     * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段
     */
    RepositoryAddEntityEventHandler.prototype.filter = function (event) {
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    RepositoryAddEntityEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    RepositoryAddEntityEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    RepositoryAddEntityEventHandler.decorators = [
        { type: Injectable }
    ];
    return RepositoryAddEntityEventHandler;
}(EventHandler));
export { RepositoryAddEntityEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9hZGRfZW50aXR5X2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1oYW5kbGVyL3JlcG9zaXRvcnlfYWRkX2VudGl0eV9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUNxRCwyREFBWTtJQURqRTs7SUF5Q0EsQ0FBQztJQXZDQzs7OztPQUlHO0lBQ0ksZ0RBQU0sR0FBYixVQUFjLEtBQTJCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNEOzs7T0FHRztJQUNJLGtEQUFRLEdBQWYsVUFBZ0IsS0FBMkI7UUFBM0MsaUJBaUJDO1FBaEJDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGdCQUE2QztnQkFDaEUsSUFBTSxhQUFhLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN0RSxJQUFNLE9BQU8sR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDMUUsSUFBTSxNQUFNLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFHLENBQUMsS0FBSSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2pGLE9BQU87aUJBQ1I7Z0JBQ0QsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFDakMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZCLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN6RTtnQkFDRCxLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSw4REFBb0IsR0FBM0IsVUFBNEIsS0FBZSxFQUFFLEtBQTJCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7O2dCQXhDRixVQUFVOztJQXlDWCxzQ0FBQztDQUFBLEFBekNELENBQ3FELFlBQVksR0F3Q2hFO1NBeENZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tIFwiLi4vZW50aXR5L2luZGV4XCI7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi4vZXhwcmVzc2lvblwiO1xyXG5pbXBvcnQgeyBFTlRJVFlfVEVNUExBVEUgfSBmcm9tIFwiLi4vcmVzb2x2ZXIvaW5kZXhcIjtcclxuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfaGFuZGxlclwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeUFkZEVudGl0eUV2ZW50SGFuZGxlciBleHRlbmRzIEV2ZW50SGFuZGxlciB7XHJcbiAgLyoqXHJcbiAgICog6I635Y+W55u45YWz6KGo6L6+5byPXHJcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XHJcbiAgICogQGRlc2NyaXB0aW9uIOS4jeaUr+aMgeS4u+ihqOebtOaOpeS+nei1luWtkOihqOWxnuaAp+eahOaDheWGte+8jOWPquiDveiBmuWQiOWtkOihqOeahOWtl+autVxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaWx0ZXIoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Y+R5biD5LqL5Lu2XHJcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XHJcbiAgICovXHJcbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xyXG4gICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmZpbHRlcihldmVudCk7XHJcbiAgICBpZiAoZXhwcmVzc2lvbnMgJiYgZXhwcmVzc2lvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBlbnRpdHlDb250ZXh0ID0gdGhpcy5idWlsZEVudGl0eUNvbnRleHQoZXZlbnQsZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50LCBlbnRpdHlDb250ZXh0KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBlcmZvcm0oZXhwcmVzc2lvbk9iamVjdCwgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHQuc2V0KGV4cHJlc3Npb25PYmplY3QuaWQsIGV4cHJlc3Npb25PYmplY3QucmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a2Q6KGo5LqL5Lu26KGMXHJcbiAgICogQHBhcmFtIHBhdGhzIFxyXG4gICAqIEBwYXJhbSBldmVudCBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q3VycmVudFJvd0J5RXZlbnQocGF0aHM6IHN0cmluZ1tdLCBldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpOiBudWxsIHwgeyBbcHJvcDogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFJvd0J5UGF0aHMocGF0aHMpO1xyXG4gIH1cclxufSJdfQ==