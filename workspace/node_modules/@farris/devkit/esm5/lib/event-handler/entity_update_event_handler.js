import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { Expression } from "../expression/index";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { ExpressionUtil } from "../utils/expression_util";
import { EventHandler } from "./event_handler";
var EntityUpdateEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(EntityUpdateEventHandler, _super);
    function EntityUpdateEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EntityUpdateEventHandler.prototype.filter = function (event) {
        var _this = this;
        return this.expressionObjects.filter(function (expressionObject) {
            // 重新加载实体时不计算计算表达式，只处理只读、必填等
            if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {
                return false;
            }
            var result = _this.analysis(event, expressionObject);
            if (!result) {
                return false;
            }
            // 必须是主表表达式
            if (result.expressionTablePaths.length !== 0) {
                return false;
            }
            var index = expressionObject.deps.findIndex(function (dep) {
                if (!dep.startsWith(ENTITY_TEMPLATE)) {
                    return false;
                }
                var deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                var depPathInfo = _this.getPathInfo(deps.join('/'));
                if (!depPathInfo) {
                    return false;
                }
                if (depPathInfo.paths.length !== 0) {
                    return false;
                }
                return true;
            });
            return index === -1 ? false : true;
        });
    };
    /**
     * 发布事件
     * @param event event
     */
    EntityUpdateEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    EntityUpdateEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        var result = null;
        var bindingList = this.bindingData.getValue(paths);
        var eventEntityPath = this.getEntityPath(event.path);
        if (bindingList && bindingList.length > 0) {
            var primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            var childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
            if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                primaryValue = event.id || null;
                if (!primaryValue) {
                    primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                }
            }
            if (primaryValue) {
                var bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    };
    EntityUpdateEventHandler.decorators = [
        { type: Injectable }
    ];
    return EntityUpdateEventHandler;
}(EventHandler));
export { EntityUpdateEventHandler };
//# sourceMappingURL=data:application/json;base64,