import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
var BindingDataSelectionChangedEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataSelectionChangedEventHandler, _super);
    function BindingDataSelectionChangedEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    BindingDataSelectionChangedEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter(function (expressionObject) {
                var deps = expressionObject.deps;
                // 没有依赖的表达式不需要关注
                if (!deps || deps.length < 1) {
                    return false;
                }
                // 不依赖实体的表达式不需要关注
                var index = deps.findIndex(function (dep) { return dep.startsWith(ENTITY_TEMPLATE); });
                if (index === -1) {
                    return false;
                }
                var result = _this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                // 只关注从表行切换
                if (result.eventTablePaths.length !== 1) {
                    return false;
                }
                // 只关注从从表表达式
                if (result.expressionTablePaths.length !== 2) {
                    return false;
                }
                // 只关注事件直接下级的表达式，跨表的不需要关注
                if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {
                    return false;
                }
                // 从从表表达式需要依赖上级表
                index = deps.findIndex(function (dep) { return dep.startsWith(ENTITY_TEMPLATE + "/" + result.eventTablePaths[0]); });
                if (index === -1) {
                    return false;
                }
                return true;
            });
        }
        return null;
    };
    BindingDataSelectionChangedEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    BindingDataSelectionChangedEventHandler.decorators = [
        { type: Injectable }
    ];
    return BindingDataSelectionChangedEventHandler;
}(EventHandler));
export { BindingDataSelectionChangedEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX3NlbGVjdGlvbl9jaGFuZ2VkX2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ldmVudC1oYW5kbGVyL2JpbmRpbmdfZGF0YV9zZWxlY3Rpb25fY2hhbmdlZF9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0M7SUFDNkQsbUVBQVk7SUFEekU7O0lBZ0VBLENBQUM7SUE5REM7Ozs7T0FJRztJQUNJLHdEQUFNLEdBQWIsVUFBYyxLQUEyQjtRQUF6QyxpQkFzQ0M7UUFyQ0MsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFVBQUMsZ0JBQTZDO2dCQUNqRixJQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7Z0JBQ25DLGdCQUFnQjtnQkFDaEIsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDNUIsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsaUJBQWlCO2dCQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDO2dCQUNuRSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDaEIsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsSUFBTSxNQUFNLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxXQUFXO2dCQUNYLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUN2QyxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxZQUFZO2dCQUNaLElBQUksTUFBTSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQzVDLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELHlCQUF5QjtnQkFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ3ZGLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELGdCQUFnQjtnQkFDaEIsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsVUFBVSxDQUFJLGVBQWUsU0FBSSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBRyxDQUFDLEVBQWpFLENBQWlFLENBQUMsQ0FBQztnQkFDakcsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ2hCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNNLDBEQUFRLEdBQWYsVUFBZ0IsS0FBMkI7UUFBM0MsaUJBaUJDO1FBaEJDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGdCQUE2QztnQkFDaEUsSUFBTSxhQUFhLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN2RSxJQUFNLE9BQU8sR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDMUUsSUFBTSxNQUFNLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2xGLE9BQU87aUJBQ1I7Z0JBQ0QsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFBQSxDQUFDO2dCQUM3RixJQUFJLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtvQkFDdkIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3pFO2dCQUNELEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7O2dCQS9ERixVQUFVOztJQWdFWCw4Q0FBQztDQUFBLEFBaEVELENBQzZELFlBQVksR0ErRHhFO1NBL0RZLHVDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24vaW5kZXhcIjtcclxuaW1wb3J0IHsgRU5USVRZX1RFTVBMQVRFIH0gZnJvbSBcIi4uL3Jlc29sdmVyL2luZGV4XCI7XHJcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL2V2ZW50X2hhbmRsZXJcIjtcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmluZGluZ0RhdGFTZWxlY3Rpb25DaGFuZ2VkRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcclxuICAvKipcclxuICAgKiDov4fmu6Tlh7rpnIDopoHorqHnrpfnmoTooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZmlsdGVyKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xyXG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbk9iamVjdHMgJiYgdGhpcy5leHByZXNzaW9uT2JqZWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmZpbHRlcigoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGVwcyA9IGV4cHJlc3Npb25PYmplY3QuZGVwcztcclxuICAgICAgICAvLyDmsqHmnInkvp3otZbnmoTooajovr7lvI/kuI3pnIDopoHlhbPms6hcclxuICAgICAgICBpZiAoIWRlcHMgfHwgZGVwcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOS4jeS+nei1luWunuS9k+eahOihqOi+vuW8j+S4jemcgOimgeWFs+azqFxyXG4gICAgICAgIGxldCBpbmRleCA9IGRlcHMuZmluZEluZGV4KGRlcCA9PiBkZXAuc3RhcnRzV2l0aChFTlRJVFlfVEVNUExBVEUpKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYW5hbHlzaXMoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWPquWFs+azqOS7juihqOihjOWIh+aNolxyXG4gICAgICAgIGlmIChyZXN1bHQuZXZlbnRUYWJsZVBhdGhzLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlj6rlhbPms6jku47ku47ooajooajovr7lvI9cclxuICAgICAgICBpZiAocmVzdWx0LmV4cHJlc3Npb25UYWJsZVBhdGhzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlj6rlhbPms6jkuovku7bnm7TmjqXkuIvnuqfnmoTooajovr7lvI/vvIzot6jooajnmoTkuI3pnIDopoHlhbPms6hcclxuICAgICAgICBpZiAoIXJlc3VsdC5leHByZXNzaW9uVGFibGVQYXRocy5qb2luKCcvJykuc3RhcnRzV2l0aChyZXN1bHQuZXZlbnRUYWJsZVBhdGhzLmpvaW4oJy8nKSkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5LuO5LuO6KGo6KGo6L6+5byP6ZyA6KaB5L6d6LWW5LiK57qn6KGoXHJcbiAgICAgICAgaW5kZXggPSBkZXBzLmZpbmRJbmRleChkZXAgPT4gZGVwLnN0YXJ0c1dpdGgoYCR7RU5USVRZX1RFTVBMQVRFfS8ke3Jlc3VsdC5ldmVudFRhYmxlUGF0aHNbMF19YCkpO1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIHB1YmxpYyBkaXNwYXRjaChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpOiB2b2lkIHtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5maWx0ZXIoZXZlbnQpO1xyXG4gICAgaWYgKGV4cHJlc3Npb25zICYmIGV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGV4dCA9IHRoaXMuYnVpbGRFbnRpdHlDb250ZXh0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoZXhwcmVzc2lvbk9iamVjdCwgZXZlbnQsIGVudGl0eUNvbnRleHQpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGVyZm9ybShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gdGhpcy5jb252ZXJ0Qm9vbGVhblR5cGVFeHByZXNzaW9uUmVzdWx0KGV4cHJlc3Npb25PYmplY3QsIHJlc3VsdCk7O1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHQuc2V0KGV4cHJlc3Npb25PYmplY3QuaWQsIGV4cHJlc3Npb25PYmplY3QucmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=