import moment from 'moment';
//import { timezones } from './time_zones';
//import { Timezone } from './types';
var ZonedTime = /** @class */ (function () {
    function ZonedTime() {
    }
    /**
     * 将指定时区的时间转换为UTC时区时间（带时区）
     * @param date 时间
     * @param timeZone 时区
     */
    // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {
    //   timeZone = this.getStandardTimezoneName(timeZone);
    //   return moment.tz(date, timeZone).utc().format();
    // }
    /**
     * 将带时区的时间转换为指定时区的时间字符串
     * @param date 时间
     * @param timeZone 时区
     * @param format 时间格式
     */
    // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {
    //   timeZone = this.getStandardTimezoneName(timeZone);
    //   return moment(date).tz(timeZone).format(format);
    // }
    /**
     * 获取标准时区名称
     * @param tz 时区
     */
    // public static getStandardTimezoneName(tz: string) {
    //   let momentZone = moment.tz.zone(tz);
    //   let standardTimezone = tz;
    //   if (!momentZone) {
    //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));
    //     standardTimezone = timezone && timezone.utc[0] || null;
    //   }
    //   return standardTimezone;
    // }
    ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString = function (date, offset, format) {
        if (offset === void 0) { offset = 0; }
        if (format === void 0) { format = 'YYYY-MM-DD HH:mm:ss.SSS'; }
        var utcTime = moment(date).utc();
        var offsetMinutes = offset * 60;
        var result = utcTime.add(offsetMinutes, 'm');
        return result.format(format);
    };
    ZonedTime.timeZoneOffsetTimeToUtcTimeString = function (date, offset, format) {
        if (format === void 0) { format = 'YYYY-MM-DD HH:mm:ss.SSS'; }
        return moment(date).utcOffset(offset, true).toISOString();
    };
    return ZonedTime;
}());
export { ZonedTime };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZWRfdGltZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2kxOG4vem9uZWRfdGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsMkNBQTJDO0FBQzNDLHFDQUFxQztBQUNyQztJQUFBO0lBMkNBLENBQUM7SUExQ0M7Ozs7T0FJRztJQUNILHlGQUF5RjtJQUN6Rix1REFBdUQ7SUFDdkQscURBQXFEO0lBQ3JELElBQUk7SUFDSjs7Ozs7T0FLRztJQUNILHVKQUF1SjtJQUN2Six1REFBdUQ7SUFDdkQscURBQXFEO0lBQ3JELElBQUk7SUFDSjs7O09BR0c7SUFDSCxzREFBc0Q7SUFDdEQseUNBQXlDO0lBQ3pDLCtCQUErQjtJQUMvQix1QkFBdUI7SUFDdkIsdUdBQXVHO0lBQ3ZHLDhEQUE4RDtJQUM5RCxNQUFNO0lBQ04sNkJBQTZCO0lBQzdCLElBQUk7SUFFVSxvREFBMEMsR0FBeEQsVUFBeUQsSUFBNEIsRUFBRSxNQUFrQixFQUFFLE1BQTBDO1FBQTlELHVCQUFBLEVBQUEsVUFBa0I7UUFBRSx1QkFBQSxFQUFBLGtDQUEwQztRQUNuSixJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkMsSUFBTSxhQUFhLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNhLDJDQUFpQyxHQUEvQyxVQUFnRCxJQUE0QixFQUFFLE1BQWMsRUFBRSxNQUEwQztRQUExQyx1QkFBQSxFQUFBLGtDQUEwQztRQUN0SSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVELENBQUM7SUFDSCxnQkFBQztBQUFELENBQUMsQUEzQ0QsSUEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbi8vaW1wb3J0IHsgdGltZXpvbmVzIH0gZnJvbSAnLi90aW1lX3pvbmVzJztcclxuLy9pbXBvcnQgeyBUaW1lem9uZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5leHBvcnQgY2xhc3MgWm9uZWRUaW1lIHtcclxuICAvKipcclxuICAgKiDlsIbmjIflrprml7bljLrnmoTml7bpl7TovazmjaLkuLpVVEPml7bljLrml7bpl7TvvIjluKbml7bljLrvvIlcclxuICAgKiBAcGFyYW0gZGF0ZSDml7bpl7RcclxuICAgKiBAcGFyYW0gdGltZVpvbmUg5pe25Yy6XHJcbiAgICovXHJcbiAgLy8gcHVibGljIHN0YXRpYyB6b25lZFRpbWVUb1V0YyhkYXRlOiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyLCB0aW1lWm9uZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAvLyAgIHRpbWVab25lID0gdGhpcy5nZXRTdGFuZGFyZFRpbWV6b25lTmFtZSh0aW1lWm9uZSk7XHJcbiAgLy8gICByZXR1cm4gbW9tZW50LnR6KGRhdGUsIHRpbWVab25lKS51dGMoKS5mb3JtYXQoKTtcclxuICAvLyB9XHJcbiAgLyoqXHJcbiAgICog5bCG5bim5pe25Yy655qE5pe26Ze06L2s5o2i5Li65oyH5a6a5pe25Yy655qE5pe26Ze05a2X56ym5LiyXHJcbiAgICogQHBhcmFtIGRhdGUg5pe26Ze0XHJcbiAgICogQHBhcmFtIHRpbWVab25lIOaXtuWMulxyXG4gICAqIEBwYXJhbSBmb3JtYXQg5pe26Ze05qC85byPXHJcbiAgICovXHJcbiAgLy8gcHVibGljIHN0YXRpYyB6b25lZFRpbWVUb1NwZWNpYWxab25lVGltZVN0cmluZyhkYXRlOiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyLCB0aW1lWm9uZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZyA9ICdZWVlZLU1NLUREIEhIOm1tOnNzLlNTUycpOiBzdHJpbmcge1xyXG4gIC8vICAgdGltZVpvbmUgPSB0aGlzLmdldFN0YW5kYXJkVGltZXpvbmVOYW1lKHRpbWVab25lKTtcclxuICAvLyAgIHJldHVybiBtb21lbnQoZGF0ZSkudHoodGltZVpvbmUpLmZvcm1hdChmb3JtYXQpO1xyXG4gIC8vIH1cclxuICAvKipcclxuICAgKiDojrflj5bmoIflh4bml7bljLrlkI3np7BcclxuICAgKiBAcGFyYW0gdHog5pe25Yy6XHJcbiAgICovXHJcbiAgLy8gcHVibGljIHN0YXRpYyBnZXRTdGFuZGFyZFRpbWV6b25lTmFtZSh0ejogc3RyaW5nKSB7XHJcbiAgLy8gICBsZXQgbW9tZW50Wm9uZSA9IG1vbWVudC50ei56b25lKHR6KTtcclxuICAvLyAgIGxldCBzdGFuZGFyZFRpbWV6b25lID0gdHo7XHJcbiAgLy8gICBpZiAoIW1vbWVudFpvbmUpIHtcclxuICAvLyAgICAgY29uc3QgdGltZXpvbmUgPSB0aW1lem9uZXMuZmluZCgoaXRlbTogVGltZXpvbmUpID0+IGl0ZW0udmFsdWUgPT09IHR6IHx8IGl0ZW0udXRjLmluY2x1ZGVzKHR6KSk7XHJcbiAgLy8gICAgIHN0YW5kYXJkVGltZXpvbmUgPSB0aW1lem9uZSAmJiB0aW1lem9uZS51dGNbMF0gfHwgbnVsbDtcclxuICAvLyAgIH1cclxuICAvLyAgIHJldHVybiBzdGFuZGFyZFRpbWV6b25lO1xyXG4gIC8vIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyB6b25lZFRpbWVUb1NwZWNpYWxUaW1lWm9uZU9mZnNldFRpbWVTdHJpbmcoZGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlciwgb2Zmc2V0OiBudW1iZXIgPSAwLCBmb3JtYXQ6IHN0cmluZyA9ICdZWVlZLU1NLUREIEhIOm1tOnNzLlNTUycpIHtcclxuICAgIGNvbnN0IHV0Y1RpbWUgPSBtb21lbnQoZGF0ZSkudXRjKCk7XHJcbiAgICBjb25zdCBvZmZzZXRNaW51dGVzID0gb2Zmc2V0ICogNjA7XHJcbiAgICBjb25zdCByZXN1bHQgPSB1dGNUaW1lLmFkZChvZmZzZXRNaW51dGVzLCAnbScpO1xyXG4gICAgcmV0dXJuIHJlc3VsdC5mb3JtYXQoZm9ybWF0KTtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyB0aW1lWm9uZU9mZnNldFRpbWVUb1V0Y1RpbWVTdHJpbmcoZGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlciwgb2Zmc2V0OiBudW1iZXIsIGZvcm1hdDogc3RyaW5nID0gJ1lZWVktTU0tREQgSEg6bW06c3MuU1NTJykge1xyXG4gICAgcmV0dXJuIG1vbWVudChkYXRlKS51dGNPZmZzZXQob2Zmc2V0LCB0cnVlKS50b0lTT1N0cmluZygpO1xyXG4gIH1cclxufSJdfQ==