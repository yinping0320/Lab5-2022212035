/*
 * @Author: Witt
 * @Date: 2018-12-30 17:11:37
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-30 17:19:01
 */
// tslint:disable: max-line-length
import { Injectable } from '@angular/core';
import { RunMode } from '../core';
import { AppContext } from './app_context';
/**
 * FrameContext管理类
 */
var FrameContextManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function FrameContextManager(appContext) {
        this.frameContextMap = new Map();
        this.frameContextSet = new Set();
        this.appContext = appContext;
    }
    /**
     * 注册FrameContext
     */
    FrameContextManager.prototype.regFrameContext = function (frameContext) {
        var frameId = frameContext.frameId;
        // 如果存在，先删除
        if (this.frameContextMap.has(frameId) === true) {
            var existedFrameContext = this.frameContextMap.get(frameId);
            this.frameContextMap.delete(frameId);
            this.frameContextSet.delete(existedFrameContext);
        }
        frameContext.index = this.frameContextSet.size;
        this.frameContextMap.set(frameId, frameContext);
        this.frameContextSet.add(frameContext);
    };
    /**
     * 注销组件注册
     */
    FrameContextManager.prototype.unregFrameContext = function (frameContext) {
        var frameId = frameContext.frameId;
        this.frameContextMap.delete(frameId);
        this.frameContextSet.delete(frameContext);
        // 仅在高速模式下才会在bindingDataManager中注册绑定数据实例
        if (this.appContext.runMode === RunMode.highSpeed) {
            var namespace = frameContext.namespace;
            var repositoryName = frameContext.repository && frameContext.repository.name;
            // 获取ns相同的framecontext，如果已经没有组件上下文了需要销毁bindingData
            var frameContexts = this.getFrameContextsByNamespace(namespace);
            if (!frameContexts || frameContexts.length < 1) {
                this.appContext.bindingDataManager.unRegisteBindingData(repositoryName);
            }
        }
    };
    /**
     * 获取FrameContextMap
     */
    FrameContextManager.prototype.getFrameContextMap = function () {
        return this.frameContextMap;
    };
    /**
     * 获取全部FrameContext
     */
    FrameContextManager.prototype.getFrameContexts = function () {
        return Array.from(this.frameContextSet);
    };
    /**
     * 获取组合表单某个表单的所有frameContext
     * @param namespace 命名空间
     */
    FrameContextManager.prototype.getFrameContextsByNamespace = function (namespace) {
        return Array.from(this.frameContextSet).filter(function (frameContext) { return frameContext && frameContext.namespace === namespace; });
    };
    /**
     * 根据id获取FrameContext
     */
    FrameContextManager.prototype.getFrameContextById = function (frameId) {
        var targetFrameContext = this.frameContextMap.get(frameId);
        if (targetFrameContext) {
            return targetFrameContext;
        }
        return this.getFrameContextFromAllAppContexts(frameId);
    };
    /**
     * Get the root FrameContext instance
     * @return Return the FrameContext instance whose parent is null, and undefined otherwise.
     */
    FrameContextManager.prototype.getRootFrameContext = function () {
        var frameContexts = this.getFrameContexts();
        var rootFrameContext = frameContexts.find(function (frameContext) {
            return frameContext.parent === null;
        });
        return rootFrameContext;
    };
    FrameContextManager.prototype.dispose = function () {
        this.frameContextMap.clear();
        this.frameContextSet.clear();
    };
    /**
     * 遍历所有的AppContext查找指定的
     * @summary
     * 1、老表单中所有的frameId均不重复；
     * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；
     * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。
     */
    FrameContextManager.prototype.getFrameContextFromAllAppContexts = function (frameId) {
        if (!this.appContext.appContextManager) {
            return;
        }
        var targetFrameContext;
        var appContexts = this.appContext.appContextManager.getAppContexts();
        appContexts.some(function (appContext) {
            var frameContextMap = appContext.frameContextManager.getFrameContextMap();
            if (frameContextMap.has(frameId) === true) {
                targetFrameContext = frameContextMap.get(frameId);
                return true;
            }
            else {
                return false;
            }
        });
        return targetFrameContext;
    };
    FrameContextManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameContextManager.ctorParameters = function () { return [
        { type: AppContext }
    ]; };
    return FrameContextManager;
}());
export { FrameContextManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVfY29udGV4X21hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9hcHAvZnJhbWVfY29udGV4X21hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFDSCxrQ0FBa0M7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRS9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7O0dBRUc7QUFDSDtJQWtCRTs7T0FFRztJQUNILDZCQUFZLFVBQXNCO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQXdCLENBQUM7UUFDdkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSSw2Q0FBZSxHQUF0QixVQUF1QixZQUEwQjtRQUMvQyxJQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBRXJDLFdBQVc7UUFDWCxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM5QyxJQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDbEQ7UUFDRCxZQUFZLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQy9DLElBQUksQ0FBQyxlQUFlLENB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RSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsVUFBc0I7WUFDdEMsSUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDNUUsSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDekMsa0JBQWtCLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxPQUFPLEtBQUssQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7O2dCQXBJRixVQUFVOzs7O2dCQUxGLFVBQVU7O0lBMEluQiwwQkFBQztDQUFBLEFBcklELElBcUlDO0FBRUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiBXaXR0XHJcbiAqIEBEYXRlOiAyMDE4LTEyLTMwIDE3OjExOjM3XHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBXaXR0XHJcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTgtMTItMzAgMTc6MTk6MDFcclxuICovXHJcbi8vIHRzbGludDpkaXNhYmxlOiBtYXgtbGluZS1sZW5ndGhcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSwgUnVuTW9kZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICcuLi9mcmFtZS9pbmRleCc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuL2FwcF9jb250ZXh0JztcclxuXHJcbi8qKlxyXG4gKiBGcmFtZUNvbnRleHTnrqHnkIbnsbtcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRnJhbWVDb250ZXh0TWFuYWdlciBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogRnJhbWVDb250ZXh05a2X5YW4KOWFvOWuueiAgeihqOWNlSlcclxuICAgKi9cclxuICBwcml2YXRlIGZyYW1lQ29udGV4dE1hcDogTWFwPHN0cmluZywgRnJhbWVDb250ZXh0PjtcclxuXHJcbiAgLyoqXHJcbiAgICogRnJhbWVDb250ZXh06ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBmcmFtZUNvbnRleHRTZXQ6IFNldDxGcmFtZUNvbnRleHQ+O1xyXG5cclxuICAvKipcclxuICAgKiBBcHBDb250ZXh0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhcHBDb250ZXh0OiBBcHBDb250ZXh0O1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihhcHBDb250ZXh0OiBBcHBDb250ZXh0KSB7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBGcmFtZUNvbnRleHQ+KCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dFNldCA9IG5ldyBTZXQ8RnJhbWVDb250ZXh0PigpO1xyXG4gICAgdGhpcy5hcHBDb250ZXh0ID0gYXBwQ29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjEZyYW1lQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdGcmFtZUNvbnRleHQoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGZyYW1lSWQgPSBmcmFtZUNvbnRleHQuZnJhbWVJZDtcclxuXHJcbiAgICAvLyDlpoLmnpzlrZjlnKjvvIzlhYjliKDpmaRcclxuICAgIGlmICh0aGlzLmZyYW1lQ29udGV4dE1hcC5oYXMoZnJhbWVJZCkgPT09IHRydWUpIHtcclxuICAgICAgY29uc3QgZXhpc3RlZEZyYW1lQ29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0TWFwLmdldChmcmFtZUlkKTtcclxuICAgICAgdGhpcy5mcmFtZUNvbnRleHRNYXAuZGVsZXRlKGZyYW1lSWQpO1xyXG4gICAgICB0aGlzLmZyYW1lQ29udGV4dFNldC5kZWxldGUoZXhpc3RlZEZyYW1lQ29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBmcmFtZUNvbnRleHQuaW5kZXggPSB0aGlzLmZyYW1lQ29udGV4dFNldC5zaXplO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRNYXAuc2V0KGZyYW1lSWQsIGZyYW1lQ29udGV4dCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dFNldC5hZGQoZnJhbWVDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOmUgOe7hOS7tuazqOWGjFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1bnJlZ0ZyYW1lQ29udGV4dChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCk6IHZvaWQge1xyXG4gICAgY29uc3QgZnJhbWVJZCA9IGZyYW1lQ29udGV4dC5mcmFtZUlkO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRNYXAuZGVsZXRlKGZyYW1lSWQpO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRTZXQuZGVsZXRlKGZyYW1lQ29udGV4dCk7XHJcbiAgICAvLyDku4XlnKjpq5jpgJ/mqKHlvI/kuIvmiY3kvJrlnKhiaW5kaW5nRGF0YU1hbmFnZXLkuK3ms6jlhoznu5HlrprmlbDmja7lrp7kvotcclxuICAgIGlmICh0aGlzLmFwcENvbnRleHQucnVuTW9kZSA9PT0gUnVuTW9kZS5oaWdoU3BlZWQpIHtcclxuICAgICAgY29uc3QgbmFtZXNwYWNlID0gZnJhbWVDb250ZXh0Lm5hbWVzcGFjZTtcclxuICAgICAgY29uc3QgcmVwb3NpdG9yeU5hbWUgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeSAmJiBmcmFtZUNvbnRleHQucmVwb3NpdG9yeS5uYW1lO1xyXG4gICAgICAvLyDojrflj5Zuc+ebuOWQjOeahGZyYW1lY29udGV4dO+8jOWmguaenOW3sue7j+ayoeaciee7hOS7tuS4iuS4i+aWh+S6humcgOimgemUgOavgWJpbmRpbmdEYXRhXHJcbiAgICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSB0aGlzLmdldEZyYW1lQ29udGV4dHNCeU5hbWVzcGFjZShuYW1lc3BhY2UpO1xyXG4gICAgICBpZiAoIWZyYW1lQ29udGV4dHMgfHwgZnJhbWVDb250ZXh0cy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgdGhpcy5hcHBDb250ZXh0LmJpbmRpbmdEYXRhTWFuYWdlci51blJlZ2lzdGVCaW5kaW5nRGF0YShyZXBvc2l0b3J5TmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlkZyYW1lQ29udGV4dE1hcFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGcmFtZUNvbnRleHRNYXAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHRNYXA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blhajpg6hGcmFtZUNvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RnJhbWVDb250ZXh0cygpOiBGcmFtZUNvbnRleHRbXSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmZyYW1lQ29udGV4dFNldCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlue7hOWQiOihqOWNleafkOS4quihqOWNleeahOaJgOaciWZyYW1lQ29udGV4dFxyXG4gICAqIEBwYXJhbSBuYW1lc3BhY2Ug5ZG95ZCN56m66Ze0XHJcbiAgICovXHJcbiAgcHVibGljIGdldEZyYW1lQ29udGV4dHNCeU5hbWVzcGFjZShuYW1lc3BhY2U6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5mcmFtZUNvbnRleHRTZXQpLmZpbHRlcigoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQubmFtZXNwYWNlID09PSBuYW1lc3BhY2UpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmoLnmja5pZOiOt+WPlkZyYW1lQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQ6IHN0cmluZyk6IEZyYW1lQ29udGV4dCB7XHJcbiAgICBjb25zdCB0YXJnZXRGcmFtZUNvbnRleHQgPSB0aGlzLmZyYW1lQ29udGV4dE1hcC5nZXQoZnJhbWVJZCk7XHJcbiAgICBpZiAodGFyZ2V0RnJhbWVDb250ZXh0KSB7XHJcbiAgICAgIHJldHVybiB0YXJnZXRGcmFtZUNvbnRleHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5nZXRGcmFtZUNvbnRleHRGcm9tQWxsQXBwQ29udGV4dHMoZnJhbWVJZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIHJvb3QgRnJhbWVDb250ZXh0IGluc3RhbmNlXHJcbiAgICogQHJldHVybiBSZXR1cm4gdGhlIEZyYW1lQ29udGV4dCBpbnN0YW5jZSB3aG9zZSBwYXJlbnQgaXMgbnVsbCwgYW5kIHVuZGVmaW5lZCBvdGhlcndpc2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJvb3RGcmFtZUNvbnRleHQoKTogRnJhbWVDb250ZXh0IHtcclxuICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSB0aGlzLmdldEZyYW1lQ29udGV4dHMoKTtcclxuICAgIGNvbnN0IHJvb3RGcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHRzLmZpbmQoKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSA9PiB7XHJcbiAgICAgIHJldHVybiBmcmFtZUNvbnRleHQucGFyZW50ID09PSBudWxsO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcm9vdEZyYW1lQ29udGV4dDtcclxuICB9XHJcbiAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dE1hcC5jbGVhcigpO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRTZXQuY2xlYXIoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6YGN5Y6G5omA5pyJ55qEQXBwQ29udGV4dOafpeaJvuaMh+WumueahFxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgeiAgeihqOWNleS4reaJgOacieeahGZyYW1lSWTlnYfkuI3ph43lpI3vvJtcclxuICAgKiAy44CB546w5Zyo6ZqU56a75LqGQXBwQ29udHh077yM5Zyo5b2T5YmNQXBwQ29udGV4dOaJvuS4jeWIsOeahOaXtuWAme+8jOafpeaJvuaJgOaciUFwcENvbnRleHTvvJtcclxuICAgKiAz44CB6ZqU56a75ZCO77yM5qCH5YeG55qE6K6/6Zeu5pa55byP5piv6YCa6L+H5LqL5Lu26YCa5L+h77yM5q2k5aSE5LuF5LuF5piv5Li05pe25YW85a6544CCXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRGcmFtZUNvbnRleHRGcm9tQWxsQXBwQ29udGV4dHMoZnJhbWVJZDogc3RyaW5nKTogRnJhbWVDb250ZXh0IHtcclxuICAgIGlmICghdGhpcy5hcHBDb250ZXh0LmFwcENvbnRleHRNYW5hZ2VyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCB0YXJnZXRGcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dDtcclxuICAgIGNvbnN0IGFwcENvbnRleHRzID0gdGhpcy5hcHBDb250ZXh0LmFwcENvbnRleHRNYW5hZ2VyLmdldEFwcENvbnRleHRzKCk7XHJcbiAgICBhcHBDb250ZXh0cy5zb21lKChhcHBDb250ZXh0OiBBcHBDb250ZXh0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGZyYW1lQ29udGV4dE1hcCA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRNYXAoKTtcclxuICAgICAgaWYgKGZyYW1lQ29udGV4dE1hcC5oYXMoZnJhbWVJZCkgPT09IHRydWUpIHtcclxuICAgICAgICB0YXJnZXRGcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHRNYXAuZ2V0KGZyYW1lSWQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGFyZ2V0RnJhbWVDb250ZXh0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRnJhbWVDb250ZXh0TWFuYWdlciB9O1xyXG4iXX0=