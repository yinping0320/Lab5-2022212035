/*
 * @Author: Witt
 * @Date: 2018-12-29 10:46:01
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-30 18:06:11
 */
import { Injectable } from '@angular/core';
/**
 * Repository管理类
 */
var RepositoryManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function RepositoryManager() {
        this.repositoryMap = new Map();
    }
    /**
     * 注册Repository
     */
    RepositoryManager.prototype.regRepository = function (name, repository) {
        this.repositoryMap.set(name, repository);
    };
    RepositoryManager.prototype.unRegisteRepository = function (name) {
        this.repositoryMap.delete(name);
    };
    /**
     * 获取RepositoryMap
     * @internal
     */
    RepositoryManager.prototype.getRepositoryMap = function () {
        return this.repositoryMap;
    };
    /**
     * 获取Repository数组
     */
    RepositoryManager.prototype.getRepositories = function () {
        return Array.from(this.repositoryMap.values());
    };
    /**
     * 根据name获取Repository
     */
    RepositoryManager.prototype.getRepositoryByName = function (name) {
        return this.repositoryMap.get(name);
    };
    /**
     * 是否Repository已经存在
     */
    RepositoryManager.prototype.ifRepositoryExits = function (name) {
        var repository = this.getRepositoryByName(name);
        return repository ? true : false;
    };
    RepositoryManager.prototype.dispose = function () {
        // this.repositoryMap.forEach((repo: Repository<any>) => {
        //   if (repo) {
        //     repo.entityCollection.reset(false);
        //   }
        // });
        this.repositoryMap.clear();
    };
    RepositoryManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RepositoryManager.ctorParameters = function () { return []; };
    return RepositoryManager;
}());
export { RepositoryManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9tYW5hbmdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9yZXBvc2l0b3J5X21hbmFuZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFLN0Q7O0dBRUc7QUFDSDtJQU9FOztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO0lBQzdELENBQUM7SUFFRDs7T0FFRztJQUNJLHlDQUFhLEdBQXBCLFVBQXFCLElBQVksRUFBRSxVQUE4QjtRQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLCtDQUFtQixHQUExQixVQUEyQixJQUFZO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDRDs7O09BR0c7SUFDSSw0Q0FBZ0IsR0FBdkI7UUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMkNBQWUsR0FBdEI7UUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNJLCtDQUFtQixHQUExQixVQUEyQixJQUFZO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNkNBQWlCLEdBQXhCLFVBQXlCLElBQVk7UUFDbkMsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDO0lBQ00sbUNBQU8sR0FBZDtRQUNFLDBEQUEwRDtRQUMxRCxnQkFBZ0I7UUFDaEIsMENBQTBDO1FBQzFDLE1BQU07UUFDTixNQUFNO1FBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDOztnQkE1REYsVUFBVTs7OztJQThEWCx3QkFBQztDQUFBLEFBOURELElBOERDO0FBRUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiBXaXR0XHJcbiAqIEBEYXRlOiAyMDE4LTEyLTI5IDEwOjQ2OjAxXHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBXaXR0XHJcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTgtMTItMzAgMTg6MDY6MTFcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3J5L2luZGV4JztcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICcuLi9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBSZXBvc2l0b3J5566h55CG57G7XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFJlcG9zaXRvcnlNYW5hZ2VyIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xyXG4gIC8qKlxyXG4gICAqIHJlcG9zaXRvcnlNYXBcclxuICAgKi9cclxuICBwcml2YXRlIHJlcG9zaXRvcnlNYXA6IE1hcDxzdHJpbmcsIFJlcG9zaXRvcnk8RW50aXR5Pj47XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5TWFwID0gbmV3IE1hcDxzdHJpbmcsIFJlcG9zaXRvcnk8RW50aXR5Pj4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjFJlcG9zaXRvcnlcclxuICAgKi9cclxuICBwdWJsaWMgcmVnUmVwb3NpdG9yeShuYW1lOiBzdHJpbmcsIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5Pik6IHZvaWQge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5TWFwLnNldChuYW1lLCByZXBvc2l0b3J5KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1blJlZ2lzdGVSZXBvc2l0b3J5KG5hbWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5TWFwLmRlbGV0ZShuYW1lKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+WUmVwb3NpdG9yeU1hcFxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZXBvc2l0b3J5TWFwKCk6IE1hcDxzdHJpbmcsIFJlcG9zaXRvcnk8RW50aXR5Pj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeU1hcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPllJlcG9zaXRvcnnmlbDnu4RcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmVwb3NpdG9yaWVzKCk6IFJlcG9zaXRvcnk8RW50aXR5PltdIHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucmVwb3NpdG9yeU1hcC52YWx1ZXMoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5uYW1l6I635Y+WUmVwb3NpdG9yeVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZXBvc2l0b3J5QnlOYW1lKG5hbWU6IHN0cmluZyk6IFJlcG9zaXRvcnk8RW50aXR5PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5TWFwLmdldChuYW1lKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaYr+WQplJlcG9zaXRvcnnlt7Lnu4/lrZjlnKhcclxuICAgKi9cclxuICBwdWJsaWMgaWZSZXBvc2l0b3J5RXhpdHMobmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gdGhpcy5nZXRSZXBvc2l0b3J5QnlOYW1lKG5hbWUpO1xyXG4gICAgcmV0dXJuIHJlcG9zaXRvcnkgPyB0cnVlIDogZmFsc2U7XHJcbiAgfVxyXG4gIHB1YmxpYyBkaXNwb3NlKCkge1xyXG4gICAgLy8gdGhpcy5yZXBvc2l0b3J5TWFwLmZvckVhY2goKHJlcG86IFJlcG9zaXRvcnk8YW55PikgPT4ge1xyXG4gICAgLy8gICBpZiAocmVwbykge1xyXG4gICAgLy8gICAgIHJlcG8uZW50aXR5Q29sbGVjdGlvbi5yZXNldChmYWxzZSk7XHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH0pO1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5TWFwLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUmVwb3NpdG9yeU1hbmFnZXIgfTtcclxuIl19