import { Observable, Subject } from "rxjs";
import { Change } from "../binding-data/index";
import { Modification } from "../changeset/index";
import { DataTypeInfo } from "../core";
import { Expression } from '../expression/index';
import { UIStateObservableParam } from "../ui-state/index";
declare type EventArgs = Expression.EventArgs;
declare type Listener = Expression.Listener;
/**
 * 变更监听器
 */
export declare abstract class ChangeListener implements Listener {
    protected subject: Subject<EventArgs>;
    readonly onEvent: Observable<EventArgs>;
    abstract buildEventPath(change: Change | Modification | UIStateObservableParam): string[];
    /**
     * 找到元数据中所有实体路径
     * @param dataTypeInfo
     * @param results
     * @param paths
     */
    findEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths?: string[]): void;
}
export {};
