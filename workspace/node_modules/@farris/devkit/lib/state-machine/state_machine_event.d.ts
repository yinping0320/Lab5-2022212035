import { StateMachine } from './state_machine';
import { FrameContext } from '../frame/index';
import { AppContext } from '../app';
/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
export declare class StateMachineEvent {
    stateMachine: StateMachine;
    frameContext: FrameContext;
    readonly appContext: AppContext;
    uiFieldList: Array<string>;
    frameContextMap: Map<FrameContext, Array<string>>;
    dataFieldList: Array<string>;
    dataFrameContextMap: Map<FrameContext, Array<string>>;
    constructor(stateMachine: StateMachine);
    initialize(frameContext: FrameContext): void;
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     */
    private extractPaths;
    getFrameContext(expression: any): FrameContext;
    getFrameField(expression: any): string;
    ListenUIStateChange(frameContext: FrameContext, expression: any): void;
    ListenEntityChange(frameContext: FrameContext, expression: any): void;
    isAccordingValue(arr: any, path: string): boolean;
}
