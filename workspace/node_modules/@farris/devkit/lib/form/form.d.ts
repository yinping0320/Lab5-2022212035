import { OnDestroy } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { FrameContext } from '../frame/index';
import { BindingData } from '../binding-data/index';
import { ValidateRule } from '../entity/validator/types';
import { NgFormControl } from './decorators';
import { ControlValueConverter } from './control_value_converter';
import { Translate } from '../i18n/translate';
import { RuleType } from './types';
import { IDisposable } from '../core';
/**
 * 表单定义
 */
declare class Form extends FormGroup implements IDisposable, OnDestroy {
    /**
     * 存放所有实例的映射
     */
    static insMap: {
        [formName: string]: Form;
    };
    /**
     * 名称
     */
    readonly formGroupName: string;
    /**
     * 是否启用表单验证
     */
    readonly enableValidate: boolean;
    readonly translateService: Translate;
    /**
     * 排除的校验规则类型
     */
    /**
     * 上下文
     */
    protected frameContext: FrameContext;
    /**
     * 构造函数
     */
    constructor();
    ngOnDestroy(): void;
    dispose(options?: any): void;
    /**
     * 绑定数据
     */
    protected bindingData: BindingData;
    /**
     * 绑定路径
     */
    protected bindingPath: string;
    /**
     * Form描述
     */
    private ngValidateForm;
    /**
     * 结构描述：FormControl
     */
    ngFormControls: {
        [propName: string]: NgFormControl;
    };
    /**
     * 元数据
     */
    metaDatas: {
        [propName: string]: any;
    };
    /**
     * 结构描述：FormGroup
     */
    private ngChildForms;
    /**
     * 存放某条数据下的属性错误信息
     */
    private controlIdMap;
    /**
     * 用于存储属性错误
     */
    private cardControls;
    private raisedByValidateEffector;
    isShowValidationMsg: boolean;
    isShowPropMap: {
        [domPropertyName: string]: boolean;
    };
    private translate;
    private validatorJs;
    private destroy$;
    /**
     * 将formControl的错误信息更新到cardControl上
     */
    static updateErrors(propertyName: any, errorObj: any, id: any, value?: any, isGrid?: any): void;
    /**
     * 设置dom属性为显示状态
     * @param domPropertyName dom属性
     */
    setIsShowmap(domPropertyName: string): void;
    setShowValidationMsg(flag: boolean): void;
    setControlValue(key: string, value: any): void;
    /**
     * 根据dom属性名称获取错误信息
     * @param domPropertyName dom属性名称
     */
    getCardControlErrors(domPropertyName?: string): object;
    /**
     * 获取字段校验错误
     * @param domPropertyName
     * @returns
     */
    getFormControlErrors(domPropertyName?: string): any;
    getGridControlErrors(domPropertyName: string, id: string): object;
    isFormValid(propertyName?: string, errorObj?: object, id?: string, isGrid?: boolean): boolean;
    /**
     * 更新表单错误信息
     * @param errors 错误消息
     */
    updateFormErrors(errors: {
        [domPropertyName: string]: {
            errors: {
                [ruleType: string]: {
                    name: string;
                    [prop: string]: any;
                };
            };
        };
    }, forceShow?: boolean, from?: string): void;
    /**
     * 清空后端消息
     */
    clearBackendError(): void;
    /**
     * 根据实体属性获取ngFormControl
     * @param binding 控件绑定的实体属性名
     */
    private getngFormControlByBinding;
    private disposeValidation;
    /**
     * 根据dom属性和校验类型获取错误信息
     * @param domProperty dom属性
     * @param validateRuleType 校验类型
     */
    private getErrorMessage;
    /**
     * 初始化Form
     * @param context 上下文
     */
    init(bindingData: BindingData, bindingPath: string, frameContext?: FrameContext): void;
    /**
     * 构造表单
     */
    buildForm(): void;
    /**
     * 重置表单验证信息
     */
    resetCardValidMsg(): void;
    /**
     * 更新字段校验规则
     * @param propertyName 属性名
     * @param isRequired 是否必填
     */
    updateFieldValidateRule(propertyName: string, isRequired: boolean): void;
    addFieldValidateRule(propertyName: string, message: string, expressionId: string, ruleType: RuleType): void;
    /**
     * 根据规则对象生成validator
     * @param ruleObj: ValidateRule
     */
    private getValidatorByRuleObj;
    /**
     * 搜集属性装饰器
     */
    private collectMetadatas;
    private collectionFormControlMetadats;
    getGridItemControl(propName: string, value: any): FormControl;
    getDomPropertyNameByEntityProp(propertyName: string, prefix?: string): string;
    /**
     * 创建FormControl
     */
    createControls(): void;
    /**
     * 创建FormGroup
     */
    createChildForms(): void;
    addControls(column: any, converter?: ControlValueConverter): void;
    /**
     * 搭建control和table之间的通道
     * @param control 控件
     * @param bindingFieldPath 绑定的字段名
     */
    private setUpBindingDataPipeline;
    /**
     * 判断是否是日期字段
     * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；
     * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；
     * 3、不能使用constructor.name,压缩后name变了；
     * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况
     * @todo
     * 为日期字段添加注解，根据注解来判断
     */
    private isDate;
    /**
     * 比较日期（只比较年月日）
     */
    compareDate(srcDate: Date, dstDate: Date): boolean;
    private getPropInfoByPath;
    /**
     * 从BindingData中获取指定路径的值
     */
    private getValueFromBindingData;
    getEntityValueChangingListeners(): {
        [property: string]: string;
    };
    getEntityValueChangedListeners(): {
        [property: string]: string;
    };
    /**
     * 获取所有的前端验证规则
     * @description
     * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔
     */
    getValidationRules(): Map<string, ValidateRule[]>;
    setTranslateService(translateService: Translate): void;
    /**
     * 重置控件状态
     */
    private resetFormControls;
    private clearBackEndMessages;
}
export { Form };
