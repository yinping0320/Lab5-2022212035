import { Modification } from './types';
/**
 * 实体数据变更集
 */
declare class ChangeSet {
    /**
     * 变更集合
     */
    protected modifications: Modification[];
    /**
     *  获取所有的变更记录
     */
    readonly changes: Modification[];
    /**
     * 将变更集添加到集合中
     * ### 使用示例
     * ```
     * const changeSet = new ChangeSet();
     * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');
     * changeSet.append(modify)
     * ```
     * @param changeItem 变更数据
     */
    append(modification: Modification): void;
    /**
     * 添加值变化变更
     */
    private appendValueChangeModification;
    /**
     * 添加新增变更
     */
    private appendAddModification;
    /**
     * 添加删除变更
     */
    private appendRemoveModification;
    /**
     * 清空变更集合
     */
    clear(): void;
    /**
     * 根据path获取Add类型的变更记录
     * @param path 变更路径
     */
    private findNewAddItemsPath;
    /**
     * 根据path获取ValueChange类型的变更记录
     * @param path 变更路径
     */
    private findModifyItemsPath;
    /**
     * 删除后代（包括自己）所有的删除变更
     * @todo：临时做一个最小化修改
     */
    private removeDescendantRemoveModifications;
    /**
     * 获取删除路径的完整格式
     * @summary
     * 1、目前删除变更的路径标记到父集合；
     * 2、为了方便比较，将被删除的数据id加入到路径中
     */
    private createRemovePathWithId;
    /**
     * 判断是否是后代节点路径
     * @param parentPath 父节点路径
     * @param descendantPath 后代节点
     */
    private isDescendantPath;
}
export { ChangeSet };
