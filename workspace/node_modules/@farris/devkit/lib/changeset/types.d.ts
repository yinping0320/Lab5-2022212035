/**
 * 变更记录
 */
export declare class Modification {
    /**
     * 实体变更路径。如：[1, 'name']
     * 说明： 1 为实体主键ID， name 为属性名称
     */
    path?: string[];
    /**
     * 原值
     */
    preValue?: any;
    /**
     * 变更后的新值
     *
     * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：
     * - Add: value的值为json 对象
     * - ValueChange: value的值为string\number\boolean等简单数据
     * - Remove: value的值为键值对{[key:string]: value} key为主键字段
     *
     */
    value: any;
    /**
     * 变更类型
     */
    type: ModifyType;
    /**
     * 数据是否通过验证
     */
    isValid?: boolean;
    /**
     * 数据验证结果
     */
    errors?: {
        [type: string]: string;
    };
    /**
     * 插入位置
     */
    position?: 1 | -1;
    /**
     * 变更集的值
     */
    changeSetValue?: any;
    /**
     * 重置数据
     */
    isReset?: boolean;
    entityCreate?: boolean;
    dynamic?: boolean;
    fromParent?: boolean;
    /**
     * 是否分层加载场景
     * @description 分层加载使用的变更类型为新增，和真正的新增场景冲突，导致后续根据变更类型处理时出现问题
     */
    isTreeNodeLoadScene?: boolean;
    /**
     * 构造函数
     * @param value 新值
     * @param modifyType 变更类型
     * @param path 变更路径
     * @param preValue 旧值
     */
    constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any, position?: 1 | -1);
}
/**
 * 变更类型
 */
export declare enum ModifyType {
    /**
     * 添加
     */
    Add = "ADD",
    /**
     * 添加数据
     */
    AddData = "AddData",
    /**
     * 克隆数据
     */
    Clone = "CLONE",
    /**
     * 删除
     */
    Remove = "REMOVE",
    RemoveData = "RemoveData",
    /**
     * 修改
     */
    ValueChange = "VALUE_CHANGE",
    /**
     * 加载
     */
    Load = "LOAD",
    /**
     * 未改变
     */
    UnChanged = "UNCHANGED",
    /**
     * 分页信息变更
     */
    PaginationInfoChange = "PAGINATION_INFO_CHANGE",
    /**
     * 插入
     */
    Insert = "Insert",
    /**
     * 更新实体
     */
    Update = "UPDATE"
}
