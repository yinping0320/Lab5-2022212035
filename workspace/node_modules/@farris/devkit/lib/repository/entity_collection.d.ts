import { Type } from '@angular/core';
import { Modification } from '../changeset/index';
import { Subject } from 'rxjs';
import { Entity } from '../entity/index';
import { ChangeSetPolicy } from '../core';
/**
 * 实体集合
 * @todo：应该用EntityList代替。
 */
declare class EntityCollection<T extends Entity> {
    /**
     * 内部实体Set
     */
    private innerEntitySet;
    /**
     * 变更提交策略
     */
    private _changeSetPolicy;
    /**
     *变更策略
     */
    changeSetPolicy: ChangeSetPolicy;
    /**
     * 内部实体Map
     */
    private innerEntityMap;
    changes: Subject<Modification>;
    /**
     * Entity集合变更流
     */
    collectionChanged: Subject<Modification>;
    /**
     * 实体类型
     */
    readonly entityType: Type<T>;
    /**
     * 实体主键
     */
    readonly primaryKey: string;
    /**
     * 实体当前分页信息
     */
    paginationInfo: any;
    /**
     * 构造函数
     */
    constructor(entityType: any);
    /**
     * 实体数量
     */
    count(): number;
    readonly entityTypeName: string;
    /**
     * 是否包含指定主键值的实体
     * @param id 主键值
     */
    has(id: string): boolean;
    /**
     * 清空全部实体
     */
    clear(): void;
    /**
     * 清空全部实体
     * @param isReset 是否为重置实体操作
     */
    reset(notify?: boolean): void;
    /**
     * 转换为实体数组
     */
    toArray(): Entity[];
    /**
     * 转换为JSON数组
     */
    toJSON(): any[];
    /**
     * 批量加载实体
     */
    loadEntities(entities: any[], entityCreate?: boolean): void;
    /**
     * 追加实体
     * @param entity 要追加的实体
     * @param isCloned 实体是否是克隆的
     */
    addEntity(entity: any, isCloned?: boolean): void;
    /**
     * 在当前行前或后插入数据
     * @param entity 实体
     * @param position 位置
     */
    insertEntity(entity: any, position: 1 | -1): void;
    /**
     * 更新实体
     * @param entity entity
     * @param data 实体数据
     */
    updateEntity(entity: any, data: any): void;
    /**
     * 批量追加实体
     * @param entities 要加载的实体数组
     */
    addEntities(entities: any[], options?: any): void;
    /**
     * 添加实体（不切换当前行）
     * @param entities 实体
     */
    addData(entities: any[], options?: any): void;
    /**
     * 为实体扩展变更策略属性
     * @param entity
     */
    private extendChangeSetPolicyProperty;
    /**
     * 根据主键值获取实体
     */
    getEntityById(identity: string): any;
    /**
     * 根据路径获取实体
     */
    getEntityByPath(pathArray: string[]): any;
    /**
     * id:1/a/id:2/c
     * @param pathArray 路径数组
     */
    getEntitiesByPath(pathArray: string[]): any;
    /**
     * 返回符合指定条件的实体集合
     * @param predicate 条件谓词
     */
    getEntities(predicate: (value: any, index: number, array: any[]) => any): any[];
    /**
     * 获取全部实体
     */
    getAllEntities(): any[];
    /**
     * 根据主键值删除对应实体
     * @param identity 主键值
     */
    removeEntityById(identity: string): any;
    removeEntitiesByIds(id: string): void;
    /**
     * 删除符合条件的实体集合
     */
    removeEntities(predicate: (value: any, index: number, array: any[]) => any): any[];
    /**
     * 移除数据（不切换当前行）
     * @param predicate 过滤函数
     */
    removeData(predicate: (value: any, index: number, array: any[]) => any): any[];
    /**
     * 重置子表数据
     * @param paths 路径
     * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']
     * @description path参数格式
     * ```json
     * [
     * "id:b5ed23ca-88d9-4377-98ec-92f35c1325f1",
     * "cityMDMs",
     * "id:373706af-622f-4aea-a006-dddbffd7bda3",
     * "zoneMDMs"
     * ]
     * ```
     * @param entities 实体数组
     */
    resetEntities(paths: string[], entities: any[]): void;
    /**
     * 验证实体是否能够添加
     */
    private verifyEntityToAdd;
    /**
     * 验证实体是否能移除
     */
    private verifyEntityToRemove;
    /**
     * 实体集合变更流
     */
    private notifyCollectionChanged;
    private listenEntityChangeEvent;
    /**
     * 设置分页大小
     */
    /**
    * 获取分页大小
    * @description 如果用户未指定分页大小则默认为0，即获取所有数据
    */
    pageSize: number;
    /**
     * 设置数据总条数
     */
    /**
    * 获取数据总条数
    */
    totalCount: number;
    /**
     * 设置当前页码
     */
    /**
    * 获取当前页码
    */
    pageIndex: number;
    /**
     * 更新分页信息
     * @param path 绑定路径
     * @param pageInfo 分页信息
     */
    updatePaginationInfoByPath(path: string, pageInfo: {
        pageIndex: any;
        pageSize: any;
        totalCount: any;
        [prop: string]: any;
    }): void;
    /**
     * 根据路径获取分页大小
     * @param path 路径
     */
    getPaginationConfigByPath(path: string, defaultValue?: any): any;
    /**
     * 设置分页信息
     * @param path 路径
     * @param value 值，其中总条数key为total
     */
    setPaginationConfigByPath(path: string | Array<any>, value: any): any;
}
export { EntityCollection };
