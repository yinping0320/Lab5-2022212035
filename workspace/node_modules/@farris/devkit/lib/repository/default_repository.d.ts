import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { Entity } from '../entity/index';
import { Repository } from './repository';
import { EntityManager } from './entity_manager';
/**
 * 空Repository实现
 */
declare class DefaultRepository<T extends Entity> extends Repository<T> {
    private injector;
    /**
     * 实体管理器
     * @internal
     */
    entityManager: EntityManager<T>;
    constructor(injector: Injector);
    /**
     * 获取实体列表
     */
    getEntities(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]>;
    filter(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]>;
    /**
     * 获取实体列表
     */
    getList(): Observable<T[]>;
    /**
     * 根据id获取实体
     * @param id 主实体id
     */
    getById(id: string): Observable<T>;
    /**
     * 根据id获取子表分页的实体
     * @param id 主实体id
     */
    getEntityById(id: string): Observable<T>;
    /**
     * 分页查询从表/从从表数据
     * @param path 绑定路径
     * @param ids 绑定路径对应的主键
     * @param filter 过滤条件
     * @param sort 排序
     */
    queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]>;
    /**
     * 根据id更新实体
     */
    updateById(id: string): Observable<T>;
    /**
     * 更新实体数据(子表分页)
     * @param id 实体主键
     */
    updateEntityById(id: string): Observable<T>;
    /**
     * 创建实体
     */
    create(): Observable<any>;
    /**
     * 创建新实体，并追加到实体列表
     */
    append(): Observable<any>;
    /**
     * 创建新的子实体，并追加到实体列表
     */
    appendByPath(path: string): Observable<any>;
    /**
     * 再指定位置插入数据
     * @param position 插入位置
     * @param defaultValue 默认值
     */
    insert(position: 1 | -1, defaultValue?: any): Observable<any>;
    /**
     * 在指定实体路径插入实体
     * @param path 实体路径
     * @param position 插入位置
     */
    insertByPath(path: string, position: 1 | -1): Observable<any>;
    /**
     * 根据id删除对应实体
     */
    removeById(id: string, ifSave?: boolean): Observable<any>;
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    batchRemove(ids: string[], ifSave?: boolean): Observable<any>;
    /**
     * 根据ids批量删除实体
     */
    removeByIds(id: string[], ifSave?: boolean): Observable<any>;
    /**
     * 根据id删除path对应的后代实体
     */
    removeByPath(path: string, id: string): void;
    /**
     * 提交id对应的根实体变更
     */
    updateChangesById(id: string): Observable<boolean>;
    /**
     * 提交path对应的实体变更
     */
    updateChangesByPath(path: string, id: string): Observable<boolean>;
    /**
     * 更新所有变更
     */
    updateAllChanges(): Observable<boolean>;
    /**
     * 应用服务器端变更
     */
    applyChanges(): Observable<boolean>;
    /**
     * 保存id对应数据的变更
     */
    applyChangesById(id: string): Observable<boolean>;
    /**
     * 取消变更集
     */
    cancelChanges(options?: any): Observable<boolean>;
    /**
     * 批量删除子表
     */
    batchRemoveByPath(path: string, ids: string): Observable<boolean>;
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any>;
    /**
     * 批量新增主表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    batchAppend(defaultValues: Array<any>): Observable<any>;
    hasChanges(): Observable<any>;
}
export { DefaultRepository };
