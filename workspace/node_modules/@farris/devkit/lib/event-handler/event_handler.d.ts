import { Injector } from '@angular/core';
import { BindingData } from '../binding-data/index';
import { EffectorFactory } from '../effector/index';
import { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';
import { Repository } from '../repository/index';
import { FrameContext } from '../frame';
export declare abstract class EventHandler implements Expression.IEventHandler {
    protected injector: Injector;
    protected repository: Repository<any>;
    protected bindingData: BindingData;
    protected expressionRegistry: ExpressionRegistry;
    protected effectorFactory: EffectorFactory;
    protected expressionExecutor: ExpressionExecutor;
    protected expressionResult: ExpressionResult;
    protected frameContext: FrameContext;
    constructor(injector: Injector, repository: Repository<any>, bindingData: BindingData, expressionRegistry: ExpressionRegistry, effectorFactory: EffectorFactory, expressionExecutor: ExpressionExecutor, expressionResult: ExpressionResult);
    expressionObjects: Expression.ExpressionObject[];
    handleEvent(event: Expression.EventArgs, expressionObjects: Expression.ExpressionObject[]): void;
    /**
     * 获取相关表达式
     * @param event event
     */
    abstract filter(event: Expression.EventArgs): any;
    /**
     * 发布事件
     * @param expressionObject 表达式对象
     * @param event 事件
     */
    abstract dispatch(event: Expression.EventArgs): void;
    /**
     * 主表主键值
     */
    protected readonly primaryValue: any;
    /**
     * 获取主实体原始字段名
     */
    protected readonly entityOriginalNodeCode: string;
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param context 上下文
     * @returns any
     */
    perform(expressionObject: Expression.ExpressionObject, context: any): any;
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;
    protected isValidateOrRequiredExpression(expressionObject: Expression.ExpressionObject): boolean;
    /**
     * 以事件参数为依据构建实体路径
     * @param event event
     * @returns
     */
    protected getEntityPathFromEvent(event: Expression.EventArgs): string[];
    /**
     * 获取事件路径中的实体路径
     * @param path path
     * @returns
     */
    protected getEntityPath(path: string[]): string[];
    /**
     * 构造实体路径
     * @param path path
     * @description 删除路径中的id字段
     * @returns
     */
    protected buildEntityPath(path: string[]): string[];
    /**
     * 清理事件路径中的id主键标识
     * @param path path
     * @returns
     */
    protected cleanEventPath(path: string[]): string[];
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    protected getCurrentRowByPaths(paths: string[]): null | {
        [prop: string]: any;
    };
    /**
     * 获取事件路径中指定子表的事件行
     * @param path
     * @param tableCode
     * @returns
     */
    protected getEventId(path: string[], tableCode: string): string;
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext(event: Expression.EventArgs): {};
    /**
     * 获取事件实体
     * @param event
     * @returns
     */
    buildEntityContext(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows?: Array<Expression.ICurrentRow>): any;
    /**
     * 构造表达式计算上下文
     * @param expressionObject 表达式
     * @param event 事件
     * @param entityContext 实体上下文
     * @param currentRows 当前行
     * @returns
     */
    buildContext(expressionObject: Expression.ExpressionObject, event: Expression.EventArgs, entityContext?: any, currentRows?: Array<Expression.ICurrentRow>): any;
    /**
     * 构造副作用路径
     * @param event
     * @param expressionObject
     * @returns
     */
    protected buildEffectPath(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): string[];
    protected getPathInfo(path: string): {
        path: string;
        propertyName: string;
        paths: string[];
        propertyNames: string[];
    };
    /**
     * get table paths from event paths
     * @param paths event paths
     * @returns
     */
    protected getTablePathsFromEventPaths(paths: string[]): string[];
    /**
     * get property paths from event paths
     * @param paths event paths
     * @returns
     */
    protected getPropertyPathsFromEventPaths(paths: string[]): string[];
    /**
     * 分析事件和表达式的关系
     */
    protected analysis(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): {
        distance: any;
        eventFromChildren: any;
        eventFromParent: any;
        expressionTablePaths: string[];
        expressionPropertyNames: string[];
        eventTablePaths: string[];
        eventPropertyNames: string[];
        isSameTable: boolean;
    };
    protected buildCurrentRows(tablePaths: string[], fullPaths: string[]): Expression.ICurrentRow[];
    protected convertBooleanTypeExpressionResult(expressionObject: Expression.ExpressionObject, result: any): any;
    protected isBooleanTypeExpression(expressionObject: Expression.ExpressionObject): boolean;
    private isReadonlyExpression;
    private isVisibleExpression;
    private isValidateExpression;
    private isRequiredExpression;
    private isDependencyExpression;
}
