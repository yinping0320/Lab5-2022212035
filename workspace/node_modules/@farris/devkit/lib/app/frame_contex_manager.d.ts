import { IDisposable } from '../core';
import { FrameContext } from '../frame/index';
import { AppContext } from './app_context';
/**
 * FrameContext管理类
 */
declare class FrameContextManager implements IDisposable {
    /**
     * FrameContext字典(兼容老表单)
     */
    private frameContextMap;
    /**
     * FrameContext集合
     */
    private frameContextSet;
    /**
     * AppContext
     */
    private appContext;
    /**
     * 构造函数
     */
    constructor(appContext: AppContext);
    /**
     * 注册FrameContext
     */
    regFrameContext(frameContext: FrameContext): void;
    /**
     * 注销组件注册
     */
    unregFrameContext(frameContext: FrameContext): void;
    /**
     * 获取FrameContextMap
     */
    getFrameContextMap(): Map<string, FrameContext>;
    /**
     * 获取全部FrameContext
     */
    getFrameContexts(): FrameContext[];
    /**
     * 获取组合表单某个表单的所有frameContext
     * @param namespace 命名空间
     */
    getFrameContextsByNamespace(namespace: string): FrameContext[];
    /**
     * 根据id获取FrameContext
     */
    getFrameContextById(frameId: string): FrameContext;
    /**
     * Get the root FrameContext instance
     * @return Return the FrameContext instance whose parent is null, and undefined otherwise.
     */
    getRootFrameContext(): FrameContext;
    dispose(): void;
    /**
     * 遍历所有的AppContext查找指定的
     * @summary
     * 1、老表单中所有的frameId均不重复；
     * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；
     * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。
     */
    private getFrameContextFromAllAppContexts;
}
export { FrameContextManager };
