import { Modification } from '../changeset';
import { Schema, SchemaEntity, SchemaEntityField } from '../schema/schema';
export interface AbstractEntityType {
    typeName: string;
    types: any;
    __prop__metadata__: any;
}
/**
 * 实体类型工厂
 * 用来根据实体Schema描述信息创建实体类型
 */
export declare class EntityTypeFactory {
    constructor();
    /**
     * 由实体Schema结构创建实体类型
     * @param schema 实体Schema结构
     * @returns 实体类型
     */
    create(schema: Schema): {
        (data: any): void;
        typeName: string;
        code: any;
        label: any;
        types: {};
        __prop__metadata__: {};
        prototype: {
            typeName: string;
        } & {
            getFieldValue: (schemaField: SchemaEntityField) => any;
            setFieldValue: (schemaField: SchemaEntityField, propertyValue: any) => void;
            getComplexFieldValue: (schemaField: SchemaEntityField) => any;
            setComplexFieldValue: (schemaField: SchemaEntityField, ComplexField: any, propertyValue: any) => void;
            getEntities: (schemaEntity: SchemaEntity) => any;
            setEntities: (schemaEntity: SchemaEntity, propertyValue: any) => void;
            isFieldValueChanged: (schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) => boolean;
            isEmptyMultiLangPropValue(value: any): boolean;
            emitFieldValueChange: (schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) => void;
            setChanges: (value: Modification) => void;
            createPath: (propertyName: string) => string[];
            getPaths(): {
                path: any[];
                isUdt: boolean;
                isGrid: boolean;
            };
            validate(propertyName?: string, value?: any, externalRules?: Map<string, import("./validator").ValidateRule[]>, index?: number): import("rxjs").Observable<import("./validator").ValidationResult>;
            validateAll(validateContext?: Map<string, import("./validator").ValidateRule[]>): void;
            validateFromUtil(propertyName: string, value: any, cb: any): void;
            toJSON(buildChanges?: boolean): {};
        };
    };
    /**
     * 由实体Schema类型描述创建实体类
     * @param schemaType Schema实体类型描述
     * @returns 实体类型
     */
    private createClass;
    /**
     * 向实体类原型对象中定义预制属性
     * @param prototypeObject 实体类原型对象
     * @param schemaType Schema类型描述
     */
    private definePresetProperty;
    /**
     * 向实体类定义字段属性
     * @param prototypeObject 实体类原型对象
     * @param fields 字段描述集合
     * @param parentEntityType 父类型
     */
    private defineFieldsToPrototype;
    /**
     * 向实体类定义简单类型字段
     * @param prototypeObject 实体类原型对象
     * @param schemaField 字段描述
     */
    private defineSimpleFieldToPrototype;
    private getDataField;
    private getEnableMultiLangInput;
    /**
     * 向实体类定义复杂类型字段
     * @param prototypeObject 实体类原型对象
     * @param schemaField 字段描述
     * @param parentEntityType 父类型
     */
    private defineComplexFieldToPrototype;
    /**
     * 向实体类定义子实体
     * @param prototypeObject 实体类原型对象
     * @param entities 实体描述集合
     * @param parentEntityType 父类型
     */
    private defineEntitiesToPrototype;
    /**
     * 创建初始化实体对象方法
     * @param schemaType 实体类型描述
     * @returns 初始化实体对象方法
     */
    private createEntityInstanceDataInitializer;
}
