import { NgFieldProperty, NgObjectProperty, NgListProperty } from './field_decorator';
import { ValidateRule } from '../validator/types';
/**
 * 属性注解器通用方法
 */
export declare class FieldMetadataUtil {
    /**
     * 获取实体所有的简单属性元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    static getNgFields(target: any): {
        [propName: string]: NgFieldProperty;
    };
    /**
     * 获取某个简单属性的元数据
     */
    static getNgField(target: any, propName: string): NgFieldProperty;
    /**
     * 获取实体属性在原始数据中的属性名
     */
    static getDataField(target: any, propName: string): string;
    /**
     * 获取标注为NgObject的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    static getNgObjects(target: any): {
        [propName: string]: NgObjectProperty;
    };
    static getNgDynamic(target: any): {
        [propName: string]: NgObjectProperty;
    };
    /**
     * 获取标注为NgList的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgListProperty}
     */
    static getNgList(target: any): {
        [propName: string]: NgListProperty;
    };
    /**
     * 获取实体标注为主键的属性元数据
     * @param target 实体类型
     */
    static getPrimaryFieldMetadata(target: any): NgFieldProperty | undefined;
    /**
     * 获取主键名称，没有主键时返回空字符串
     */
    static getPrimaryKey(entityType: any): string;
    /**
     * 获取NgField 的验证规则元数据
     * @param target 实体类Type
     */
    static getValidationMetadata(target: any): {
        [key: string]: ValidateRule[];
    };
    static getValidationMetadataWithPath(object: any): {
        [key: string]: ValidateRule[];
    };
}
