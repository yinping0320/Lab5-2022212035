import { ClassType } from '../types';
import { ValidateRule } from '../validator/index';
export interface NgProperty {
    /**
     * 数据字段名
     * @summary
     * 服务器端返回的数据中，该属性对应的key。
     */
    dataField?: string;
    /**
     * 原始字段名称（请勿使用，待删除）
     */
    originalDataField?: string;
    /**
     * 原始字段类型（请勿使用，待删除）
     */
    originalDataFieldType?: string;
    /**
     * 属性类型
     */
    type?: any;
    /**
     * 原始字段
     * @description 对应到scheme的path属性
     */
    path?: string;
}
/**
 * --------------------------------------------------------------------------------
 * NgField
 * --------------------------------------------------------------------------------
 */
/** 实体属性注解器名称 */
export declare const NG_FIELD = "NgField";
/** 实体属性元数据选项 */
export interface NgFieldProperty extends NgProperty {
    /** 属性名称 */
    property?: string;
    /** 字段名称 */
    dataField?: string;
    /** 原始字段名称 */
    originalDataField?: string;
    /** 原始字段类型 */
    originalDataFieldType?: string;
    /** 是否为主键 */
    primary?: boolean;
    /** 是否为外键 */
    foreign?: boolean;
    /** 默认值 */
    defaultValue?: any;
    /** 验证规则 */
    validRules?: ValidateRule[];
    /** 初始值，用于字段清空后 */
    initValue?: any;
    /** 启用多语录入 */
    enableMultiLangInput?: boolean;
    /**
     * 启用时区
     */
    enableTimeZone?: boolean;
    /**
     * 原始字段
     * @description 对应到scheme的path属性
     */
    path?: string;
}
/** 实体属性注解器 */
export interface NgFieldPropertyDecorator {
    /**
     * @constructor
     * @param obj 参数obj的值类型可以为 NgFieldProperty、string、ClassType
     *
     * 当为string 时，则设其映射字段；
     *
     * 当为ClassType时，则设置集合中的记录类型
     */
    (obj: NgFieldProperty | string | ClassType): any;
    (obj?: NgFieldProperty | string | boolean): any;
    new (obj?: NgFieldProperty | string | boolean): any;
}
/**
 * 实体属性注解
 *
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *      @NgField({
 *          primary: true,
 *          dataField: 'id',
 *          ...
 *      })
 *      userid: string;
 *      userName: string;
 * }
 * ```
 */
export declare const NgField: NgFieldPropertyDecorator;
/**
 * --------------------------------------------------------------------------------
 * NgField
 * --------------------------------------------------------------------------------
 */
/** NgList 注解器名称 */
export declare const NG_LIST = "NgList";
/**
 * 集合类型元数据选项
 */
export interface NgListProperty extends NgProperty {
    /** 表名 */
    tableName?: string;
    /** 字段名称 */
    dataField?: string;
    /** 原始字段名称 */
    originalDataField?: string;
    /** 实体类型 */
    type?: any;
    /**
     * 原始字段
     * @description 对应到scheme的path属性
     */
    path?: string;
}
/** 集合类型注解器 */
export interface NgListPropertyDecorator {
    /**
     * @constructor
     * @param obj 参数obj的值类型可以为 NgListProperty、string、ClassType
     *
     * 当为string 时，则设其映射字段；
     *
     * 当为ClassType时，则设置集合中的记录类型
     */
    (obj: NgListProperty | string | ClassType): any;
    new (obj: NgListProperty | string | ClassType): any;
}
/**
 * 实体属性注解
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *      @NgField({
 *          primary: true,
 *          dataField: 'id',
 *          ...
 *      })
 *      userid: string;
 *      userName: string;
 *      @NgList({
 *          dataField: 'roles',
 *          formType: Role
 *      })
 *      Roles: EntityList<Role>
 * }
 * ```
 */
export declare const NgList: NgListPropertyDecorator;
/**
 * --------------------------------------------------------------------------------
 * NgObject
 * --------------------------------------------------------------------------------
 */
/** NgObject 实体属性注解器名称 */
export declare const NG_OBJECT = "NgObject";
/**
 * 引用类型元数据选项
 */
export interface NgObjectProperty extends NgProperty {
    /** 映射字段 */
    dataField?: string;
    /** 原始字段名称 */
    originalDataField?: string;
    /** 表名 */
    tableName?: string;
    /** 引用实体类型 */
    type?: ClassType;
    /** 树分级类型 path|parent */
    hierarchyType?: string;
    /**
     * 原始字段
     * @description 对应到scheme的path属性
     */
    path?: string;
}
/** 引用类型注解器 */
export interface NgObjectPropertyDecorator {
    /**
     * @constructor
     * @param obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType
     *
     * 当为string 时，则设其映射字段；
     *
     * 当为ClassType时，则设置集合中的记录类型
     */
    (obj: NgObjectProperty | string | ClassType): any;
    new (obj: NgObjectProperty | string | ClassType): any;
}
/**
 * 实体属性注解
 * ### 使用示例
 *
 * ```
 *  export class UserEntity entends Entity {
 *      @NgField(true)  // 设置为主键
 *      id: string;
 *      @NgField('name')  // 设置数据映射字段为 name
 *      userName: string;
 *
 *      depid: string;
 *
 *      @NgObject(Department)  // 设置引用类型为 Department 实体类
 *      epartment: Department;
 *  }
 * ```
 */
export declare const NgObject: NgObjectPropertyDecorator;
/**
 * --------------------------------------------------------------------------------
 * NgDynamicProperty
 * --------------------------------------------------------------------------------
 */
/** NgObject 实体属性注解器名称 */
export declare const NG_Dynamic = "NgDynamic";
/**
 * 引用类型元数据选项
 */
export interface NgDynamicProperty extends NgProperty {
    /** 映射字段 */
    dataField?: string;
    /** 原始字段名称 */
    originalDataField?: string;
    /** 表名 */
    tableName?: string;
    /** 引用实体类型 */
    type?: ClassType;
    /**
     * 原始字段
     * @description 对应到scheme的path属性
     */
    path?: string;
}
/** 引用类型注解器 */
export interface NgDynamicPropertyDecorator {
    /**
     * @constructor
     * @param obj 参数obj的值类型可以为 NgDynamicProperty、string、ClassType
     *
     * 当为string 时，则设其映射字段；
     *
     * 当为ClassType时，则设置集合中的记录类型
     */
    (obj: NgDynamicProperty | string | ClassType): any;
    new (obj: NgDynamicProperty | string | ClassType): any;
}
/**
 * 实体属性注解
 * ### 使用示例
 *
 * ```
 *  export class UserEntity entends Entity {
 *      @NgField(true)  // 设置为主键
 *      id: string;
 *      @NgField('name')  // 设置数据映射字段为 name
 *      userName: string;
 *
 *      depid: string;
 *
 *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类
 *      epartment: Department;
 *  }
 * ```
 */
export declare const NgDynamic: NgDynamicPropertyDecorator;
