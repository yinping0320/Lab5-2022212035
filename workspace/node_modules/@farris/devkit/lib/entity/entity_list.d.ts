import { Observable } from 'rxjs';
import { Modification } from '../changeset/types';
import { Entity } from './entity';
import { ClassType } from './types';
import { ValidationResult } from './validator/types';
export interface IList<T> {
    [index: number]: T;
}
/**
 * 实体集合列表
 */
export declare class EntityList<T extends Entity> implements IList<T>, Iterable<T> {
    __type__: string;
    private originalData;
    /**
     * 已废弃：请勿使用
     */
    private rawData;
    /**
     * 已废弃：请勿使用
     */
    private listChanged;
    /**
     * 已废弃：请勿使用
     */
    private changeSet;
    /**
     * 已废弃：请勿使用
     */
    private validator;
    /**
     * 集合改变时触发(新增、行记录修改、删除)
     * @event
     */
    onListChanged: Observable<Modification>;
    /**
     * 获取项集合
     */
    readonly items: T[];
    /**
     * 列表变更集
     */
    readonly changes: Modification[];
    /**
     * 获取指定索引处的值
     */
    [index: number]: T;
    /**
     * 迭代器
     */
    [Symbol.iterator](): Iterator<T>;
    /**
     * @param data JSON数据集合
     * @param type 集合中的实体类型
     */
    constructor(data?: any[], type?: ClassType);
    /** 加载实体列表 */
    loadEntities(entities: T[]): void;
    /**
     * 清空
     */
    clear(): void;
    /**
     * 添加实体对象到集合中，并返回新加的对象
     * @param entity 实体对象
     * @param isCloned 克隆
     */
    appendNew(entity: T, isCloned?: boolean): T;
    /**
     * 在指定位置插入实体
     * @param entity 实体
     * @param position 插入位置
     */
    insert(entity: T, position?: 1 | -1): T;
    /**
     * 追加实体
     */
    appendEntity(entity: T): void;
    /**
     * 批量追加实体
     */
    appendEntities(entities: T[]): void;
    /**
     * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败
     * @param primaryId 主键ID
     */
    remove(primaryId: string): boolean;
    /**
     * 从集合中获取指定ID值的实体对象
     * @param id 主键值
     */
    get(id: string): T;
    /**
     * 将变更记录添加到集合变更集中
     * @param value 变更记录
     */
    setChanges(modinfo: Modification): void;
    /** 集合总记录数 */
    count(): number;
    /**
     * 获取实体对象的索引值
     */
    indexOf(entity: T): number;
    /**
     * 计算集合中某个属性的总和
     * @param propertyName 属性名称
     */
    sum(propertyName: string): number;
    /**
     * 集合数据验证
     */
    validate(): Observable<ValidationResult>;
    /**
     * 已废弃：请使用toJSON方法代替
     * @deprecated
     */
    toJson(): T[];
    /**
     * 转换为JSON格式
     */
    toJSON(): any[];
    toArray(): T[];
    /**
     * 实体初始化
     * @param entity 实体
     */
    private initEntity;
    /**
     * 更新索引
     * @param total 总记录数
     */
    private updateIndex;
    /**
     * 获取属性名称
     */
    private getPropertyName;
}
