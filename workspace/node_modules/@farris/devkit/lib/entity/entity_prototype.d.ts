import { Observable } from 'rxjs';
import { Modification } from '../changeset';
import { SchemaEntity, SchemaEntityField } from '../schema/schema';
import { ValidateRule, ValidationResult } from './validator/types';
export declare const entityPrototype: {
    /**
     * 获取属性值
     */
    getFieldValue: (schemaField: SchemaEntityField) => any;
    /**
     * 设置属性值
     */
    setFieldValue: (schemaField: SchemaEntityField, propertyValue: any) => void;
    /**
     * 获取复杂类型对象的值
     * @param schemaField Schema字段描述
     * @returns 复杂类型对象的值
     */
    getComplexFieldValue: (schemaField: SchemaEntityField) => any;
    /**
     * 向实体复杂类型字段赋值
     * @param schemaField Schema字段描述
     * @param ComplexField 复杂类型字段的类型定义
     * @param propertyValue 属性值
     */
    setComplexFieldValue: (schemaField: SchemaEntityField, ComplexField: any, propertyValue: any) => void;
    /**
     * 获取指定的子实体列表
     * @param schemaEntity 实体描述
     * @returns 子实体列表
     */
    getEntities: (schemaEntity: SchemaEntity) => any;
    /**
     * 更新指定子实体的值
     * @param schemaEntity 实体描述
     * @param propertyValue 实体列表
     */
    setEntities: (schemaEntity: SchemaEntity, propertyValue: any) => void;
    /**
     * 检查属性值是否发生变化
     */
    isFieldValueChanged: (schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) => boolean;
    /**
     * 多语录入字段的值是否为空
     */
    isEmptyMultiLangPropValue(value: any): boolean;
    /**
     * 发送值变更
     */
    emitFieldValueChange: (schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) => void;
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     */
    setChanges: (value: Modification) => void;
    /**
     * 创建path
     * @param propertyName 属性名称
     */
    createPath: (propertyName: string) => string[];
    getPaths(): {
        path: any[];
        isUdt: boolean;
        isGrid: boolean;
    };
    validate(propertyName?: string, value?: any, externalRules?: Map<string, ValidateRule[]>, index?: number): Observable<ValidationResult>;
    validateAll(validateContext?: Map<string, ValidateRule[]>): void;
    /**
     * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb
     */
    validateFromUtil(propertyName: string, value: any, cb: any): void;
    /**
     * 将实体数据转换为JSON格式
     */
    toJSON(buildChanges?: boolean): {};
};
