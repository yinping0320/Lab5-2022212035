import { Validator } from './validator';
import { ValidateRule } from './types';
import { ValidationError } from './validation_error';
import { Entity } from '../entity';
import { FrameContext } from '../../frame/index';
/**
 * 执行数据验证
 */
export declare class ValidationExecutor<T extends Entity> {
    private validator;
    constructor(validator: Validator<T>);
    /** 异步验证请求集合 */
    awaitingPromises: Promise<any>[];
    /**
     * 将信息中的关键字替换为具体实体对象中的信息
     * @param message 验证信息
     * @param metadata 验证规则
     * @param value 待验证的值
     */
    static replaceMessageSpecialTokens(message: any, metadata: ValidateRule, value: any): string;
    /**
     * 验证实例对象
     * @param object 验证实例对象
     * @param newValue 实体将要更新的值
     * @param validationErrors 验证信息集合
     * @param propertyName 实例对象属性
     * @param index 所属集合实例中索引
     */
    execute(object: T, newValue: any, validationErrors: ValidationError[], propertyName?: string, index?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext): void;
    private getMultiLanguageFields;
    /**
     * 清除通过验证信息
     * @param errors 验证失败信息
     */
    stripEmptyErrors(errors: ValidationError[]): ValidationError[];
    /**
     * 生成未通过验证的对象
     * @param object 要验证的实体实例对象
     * @param value 要验证的值
     * @param propertyName 待验证的实体属性名称
     * @param index 验证数据索引
     * @param field 待验证字段
     */
    private generateValidationError;
    /**
     * 验证实体中的属性
     * @param object 要验证的实体实例对象
     * @param value 要验证的值
     * @param validateRules 验证规则
     * @param errorMap 难证信息。{[key]: message}
     *
     * key: 验证规则名称
     * message: 验证信息
     */
    private defaultValidations;
    /**
     * 验证列表中的每条记录
     * @param object 要验证的实体实例对象
     * @param errors 验证失败的信息集合
     * @param property 属性名称
     * @param parentIndex 当前集合的父对象所属集合列表中的索引。
     */
    private listValidations;
    /**
     * 验证实体中的引用对象
     * @param object 要验证的实体对象
     * @param errors 错误信息集合
     */
    private objectValidations;
    /**
     * 创建验证规则信息
     * @param object 要验证的实体对象
     * @param value 验证的值
     * @param metadata 验证规则
     */
    private createValidationError;
    private getFrameContext;
    private getForm;
    private getFormControl;
    isDateString(value: any): boolean;
}
