import { ValidateRule, IsNumberOptions, ValidationResult } from './types';
import { Entity } from '../entity';
import { FrameContext } from '../../frame/index';
/**
 * 校验实体实例对象数据
 */
export declare class Validator<T extends Entity> {
    constructor();
    private validatorJs;
    /**
     * 验证实例对象中数据是否合法
     * @param object 待校验的实例对象
     * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性
     */
    validate(object: T, propertyName?: string, value?: any, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Promise<ValidationResult>;
    /**
     * 校验信息排序（为了兼容树形表）
     * @param validationErrors 验证信息数组
     */
    private sortValidationErrors;
    /**
     * 执行校验
     * @param object
     * @param propertyName
     * @param value
     * @param externalRules
     * @param index
     * @param frameContext
     * @param ignoreAsyncValidateRules
     * @returns
     */
    verify(object: T, propertyName?: string, value?: any, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext, ignoreAsyncValidateRules?: boolean): Promise<ValidationResult> | {
        isValid: boolean;
        errors: any;
        message: string;
    };
    /**
     * 验证实体属性元数据中设置的校验规则是否合法
     * @param object 实例对象
     * @param value 待校验的值
     * @param validateRule 验证规则
     */
    validateValueByMetadata(object: any, value: any, validateRule: ValidateRule, isMultLanguageField?: boolean, currentRowId?: string): boolean | any;
    private buildErrors;
    /** 自定义验证 */
    customValidation(value: any, comparison: boolean): boolean;
    private isEmptyValue;
    /** 必填项 */
    required(value: any, isMultLanguageField?: boolean): boolean;
    /** 判断两个值是否相等 */
    equals(value: any, comparison: any): boolean;
    /**
     * 检查 value 是否不等于参照值
     * @param value 要检查的值
     * @param comparison 对比参照值
     */
    notEquals(value: any, comparison: any): boolean;
    /**
     * 判断value 是否为数字
     * @param value 要检查的值
     * @param options 验证选项
     */
    isNumber(value: any, options?: IsNumberOptions): boolean;
    /** 判断value是否为整数 */
    isInt(value: number): boolean;
    /** 是否为浮点类型 */
    isFloat(value: any): boolean;
    /**
     * 检查给定的value 是否布尔值
     */
    isBoolean(value: any): boolean;
    /**
     * 检查给定的value 是否为字符串
     */
    isString(value: any): boolean;
    /**
     * 检查给定的value 是否为日期
     */
    isDate(value: any): boolean;
    /**
     * 检查给定的value 是否为日期字符串
     */
    isDateString(value: any): boolean;
    /** 判断value 的长度是否在允许的最小值 和最大值之间 */
    length(value: any, min: number, max?: number, isMultLanguageField?: boolean): boolean;
    /**
     * 检查给定的value的长度是否符合设定的最小值
     * @param value 待检查的字符串
     * @param min 最小长度
     */
    minLength(value: any, isMultLanguageField: boolean, min: number): boolean;
    /**
     * 检查给定的value的长度是否符合设定的最大值
     * @param value 待检查的字符串
     * @param max 最大长度
     */
    maxLength(value: any, isMultLanguageField: boolean, max: number): boolean;
    /** 检查value的值是否在 最大值与最小值之间 */
    range(value: number, isMultLanguageField: boolean, min: number, max: number): boolean;
    /**
     * 日期类型的值是否在某个区间
     * @param value value
     * @param min 最小值
     * @param max 最大值
     */
    dateRange(value: any, isMultLanguageField: boolean, rule: string, type: string): boolean;
    private getRangeValue;
    private isDateRange;
    /**
     * 是否年度区间
     * @param value value
     */
    private isYearRange;
    /**
     * 是否为年月区间
     * @param value value
     */
    private isYearMonthRange;
    /**
     * 是否为月或天的区间
     * @param value value
     */
    private isMonthOrDayRange;
    /**
     * 是否为天+时间的区间
     * @param value value
     */
    private isDayTimeRange;
    /**
     * Checks if the first number is greater than second.
     */
    min(num: number, isMultLanguageField: boolean, min: number): boolean;
    /**
     * 最小值验证
     */
    minValue(num: number | string, isMultLanguageField: boolean, min: number | string): boolean;
    /**
     * Checks if the first number is less than second.
     */
    max(num: number, isMultLanguageField: boolean, max: number): boolean;
    /**
     * 最大值验证
     */
    maxValue(num: number | string, isMultLanguageField: boolean, max: number | string): boolean;
    /**
     * Checks if the value is a date that's after the specified date.
     */
    minDate(date: Date, isMultLanguageField: boolean, minDate: Date): boolean;
    /**
     * Checks if the value is a date that's before the specified date.
     */
    maxDate(date: Date, isMultLanguageField: boolean, maxDate: Date): boolean;
    /**
     * Checks if a string is a boolean.
     * If given value is not a string, then it returns false.
     */
    isBooleanString(value: string): boolean;
    /**
     * Checks if the string is numeric.
     * If given value is not a string, then it returns false.
     */
    isNumberString(value: string): boolean;
    /**
     * Checks if the string contains the seed.
     * If given value is not a string, then it returns false.
     */
    contains(value: string, isMultLanguageField: boolean, seed: string): boolean;
    /**
     * Checks if the string does not contain the seed.
     * If given value is not a string, then it returns false.
     */
    notContains(value: string, isMultLanguageField: boolean, seed: string): boolean;
    /**
     * Checks if the string is an email.
     * If given value is not a string, then it returns false.
     */
    isEmail(value: string): boolean;
    /**
     * Checks if the string is valid JSON (note: uses JSON.parse).
     * If given value is not a string, then it returns false.
     */
    isJSON(value: string): boolean;
    /**
     * Checks if the string is lowercase.
     * If given value is not a string, then it returns false.
     */
    isLowercase(value: string): boolean;
    /**
     * Checks if the string is uppercase.
     * If given value is not a string, then it returns false.
     */
    isUppercase(value: string): boolean;
    /**
     * 验证字符串是否包含非法字符
     * @param value 验证的字符串
     * @param someChars 非法字符。如：#￥%@$
     */
    exclude(value: string, isMultLanguageField: boolean, someChars: string): boolean;
    /**
     * 自定义正则验证
     * @param value 待验证的字符串
     * @param pattern 正则表达式
     */
    matches(value: string, isMultLanguageField: boolean, pattern: any): boolean;
}
