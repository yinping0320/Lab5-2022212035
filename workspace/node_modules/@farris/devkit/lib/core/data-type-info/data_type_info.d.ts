import { Type } from '@angular/core';
import { NgEntity } from '../../entity/metadata/index';
import { DataPropGroup, DataPropInfo } from './data_prop_info';
/**
 * 实体类型信息
 * @todo：
 * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；
 * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。
 */
declare class DataTypeInfo {
    entityInfo: NgEntity;
    /**
     * 数据类型
     */
    type: Type<any>;
    /**
     * 属性集合
     */
    propInfoMap: Map<string, DataPropInfo>;
    /**
     * 主键
     */
    primaryKey: string;
    /**
     * 外键
     */
    foreignKey: string;
    /**
     * 是否为值对象
     */
    readonly isValueObject: boolean;
    /**
     * 构造函数
     * @todo：不应该识别
     */
    constructor(type: any);
    getBindingPathByTableName(tableName: string): string;
    private getFullEntityPath;
    /**
     * 获取全部属性信息
     */
    getPropInfos(): DataPropInfo[];
    /**
     * 获取全部属性的名称
     */
    getPropNames(): string[];
    /**
     * 根据group获取属性信息数组
     */
    getPropInfosByGroup(group: DataPropGroup): DataPropInfo[];
    /**
     * 根据group获取属性名称数组
     * @param group 属性分组
     */
    getPropNamesByGroup(group: DataPropGroup): string[];
    /**
     * 根据propName获取属性信息
     */
    getPropInfoByName(propName: string): DataPropInfo;
    /**
     * 根据path获取属性信息
     */
    getPropInfoByPath(path: string[]): DataPropInfo;
    /**
     * 根据path获取对应属性的TypeInfo
     */
    getTypeInfoByPath(path: string[]): DataTypeInfo;
    /**
     * 获取主键的属性信息
     */
    getPrimaryKeyPropInfo(): DataPropInfo;
    /**
     * 根据name获取影射名
     */
    getPropMappingByName(name: string): string;
    /**
     * 根据path获取映射名
     */
    getPropMappingByPath(path: string[]): string;
    /**
     * 检查属性是否属于特定的分组
     */
    checkPropGroup(propName: string, propGroup: DataPropGroup): boolean;
    /**
     * --------------------------------------------------------------------------------
     * 属性元数据 => 属性描述信息
     * --------------------------------------------------------------------------------
     */
    /**
     * 搜集所有属性信息
     * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。
     */
    private collectPropInfos;
    private collectEntityInfos;
    /**
     * 添加属性信息
     */
    private addPropInfo;
}
export { DataTypeInfo };
