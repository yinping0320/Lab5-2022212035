import { EventBusProxy } from './event-bus-proxy';
import { IEmitable } from './types';
import { IDisposable } from '../core/index';
export declare class EventBus implements IEmitable {
    private proxyMap;
    private eventMap;
    constructor();
    getProxy(ownerType: any, eventTokenValueProvider: () => any): EventBusProxy;
    /**
     * 发送事件，通知订阅者接收消息。
     */
    post(emitterType: any | string, tokenValue: string, eventName: string, eventArgs: any, sender?: any, eventType?: any, eventId?: number): void;
    /**
     * 订阅事件
     */
    on(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable;
    /**
     * 注销监听
     * @param target
     * @param tokenValue
     * @param eventName
     * @param caller
     */
    off(target: string, tokenValue: string, eventName: string, caller: Object): void;
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     */
    once(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable;
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     */
    requestFor(target: string, tokenValue: string, requestName: string, requestValue: any, success: (any: any) => any, fail?: (string: any) => any): void;
    /**
     * 监听一个请求事件，给出响应
     */
    responseOn(responseSubject: string, requestName: string, callback: (any: any) => any): void;
    private getEventPipe;
    private findExistEventPipe;
}
export declare class EventCache {
    private static tokens;
    static setToken(key: string, value: any): void;
    static getToken(key: string): any;
}
