import { Translate } from '../../i18n';
/**
 * 元数据解析
 * 约束：
 * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；
 * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加
 */
declare class MetadataUtil {
    /**
     * 获取类元数据
     * 返回结果形如：
     * [
     *   Injectable
     *   NgViewModel
     *   NgViewModel
     * ]
     */
    static getClassMetadatas(constructor: any): any[];
    /**
     * 获取某个class上的某种装饰器
     * 返回结果：NgViewModel
     */
    static getClassMetadataByName(constructor: any, metadataName: string): any;
    static getClassMetadataByNameWithTranslate(constructor: any, metadataName: string, translateService?: Translate, keysToTranslate?: string[]): any;
    /**
     * 获取所有属性的所有元数据
     * 返回格式：
     * {
     *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],
     *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]
     * }
     */
    static getPropsMetadatas(constructor: any): any;
    /**
     * 获取所有属性的某一类型的元数据
     * 如果同一属性
     * 返回结果：
     * {
     *    propName1: NgDefaultValue,
     *    propName2: NgDefaultValue
     * }
     */
    static getPropsMetadatasByName(constructor: any, metadataName: string): {
        [propName: string]: any;
    };
    static getPropsMetadatasByNameWithTranslate(constructor: any, metadataName: string, translateService?: Translate, keysToTranslate?: string[]): {
        [propName: string]: any;
    };
    static translateMetadatasByName(metadatas: any, translateService?: Translate, keysToTranslate?: string[]): {
        [propName: string]: any;
    };
    static translateMetadataByName(metadata: any, translateService?: Translate, keysToTranslate?: string[]): any;
    /**
     * 获取某个属性的所有元数据
     * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]
     */
    static getPropMetadatasByName(constructor: any, propName: string): any[];
    /**
     * 获取某个属性的某种元数据
     * 返回格式：NgDefaultValue
     */
    static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any;
}
export { MetadataUtil };
