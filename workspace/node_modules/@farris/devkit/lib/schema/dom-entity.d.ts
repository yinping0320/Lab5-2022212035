/**
 * Component节点
 */
export declare class FormComponent {
    id: string;
    type: string;
    viewModel: string;
    componentType: FormComponentType | any;
    contents: any[];
    onInit: null;
    afterViewInit: null;
}
/**
 * 组件类型
 */
export declare enum FormComponentType {
    /**
     * 表单
     */
    Frame = "Frame",
    /**
     * 列表/树表类
     */
    dataGrid = "dataGrid",
    /**
     * 列表视图
     */
    listView = "listView",
    /**
     * 卡片类（待优化，目前类型中带有控件列布局信息）
     */
    form = "form",
    /**
     * 移动审批：人员信息组件
     */
    detailHeaderForMobileApprove = "detailHeaderForMobileApprove",
    /**
     * 移动审批：面板
     */
    panelForMobileApprove = "panelForMobileApprove",
    /**
     * 移动审批：流程图组件
     */
    flowProcessForMobileApprove = "flowProcessForMobileApprove"
}
/**
 * DOM 控件binding实体
 */
export declare class FormBinding {
    type: FormBindingType;
    path: string;
    field: string;
    fullPath: string;
}
/**
 * binding 类型
 */
export declare enum FormBindingType {
    Form = "Form",
    Variable = "Variable"
}
/**
 * dom Json ViewModel 节点实体
 */
export declare class FormViewModel {
    id: string;
    code: string;
    name: string;
    fields: FormViewModelField[];
    commands: any[];
    states: FormVariable[];
    serviceRefs: any[];
    bindTo: string;
    parent?: string;
    enableUnifiedSession?: boolean;
    pagination?: FormViewModelPagination;
}
/**
 * dom Json ViewModel 节点中fields实体
 */
export declare class FormViewModelField {
    type: string;
    id: string;
    fieldName: string;
    groupId: string;
    groupName: string;
    fieldSchema?: any;
    valueChanging?: string;
    valueChanged?: string;
    updateOn?: string;
}
/**
 * dom Json ViewModel 节点中states实体
 */
export declare class FormVariable {
    id: string;
    code: string;
    name: string;
    value?: any;
    type: string;
    category: string;
    fields?: any[];
    defaultValue?: any;
}
/**
 * 变量类型
 */
export declare enum FormVariableCategory {
    locale = "locale",
    remote = "remote"
}
/**
 * 支持的变量类型
 */
export declare const FormVariableTypes: {
    text: string;
    value: string;
}[];
/**
 * DOM GridField 中的数据类型
 */
export declare enum GridFieldDataType {
    string = "string",
    boolean = "boolean",
    date = "date",
    number = "number",
    enum = "enum",
    datetime = "datetime"
}
/**
 * 枚举类型
 */
export declare class EnumData {
    value: string;
    name: string;
}
/**
 * Item类型数据
 */
export declare class ItemData {
    value: string;
    name: string;
}
/**
 * vm 分页配置
 */
export declare class FormViewModelPagination {
    enable: boolean;
    pageList?: string;
    pageSize?: number;
}
/**
 * 组合表单-声明实体
 */
export declare class FormDeclaration {
    events?: DeclarationEvent[];
    commands?: DeclarationCommand[];
    states?: DeclartionState[];
}
/**
 * 组合表单-事件声明实体
 */
export declare class DeclarationEvent {
    hId?: string;
    /** 事件类型：控件的事件/实体的事件 */
    type: 'controlEvent' | 'fieldEvent';
    /** 编号 */
    code: string;
    /** 名称 */
    name: string;
    /** 事件 */
    event: string;
    /** 路径 */
    path: string;
    params: DeclarationParam[];
}
/**
 * 组合表单-参数实体
 */
export declare class DeclarationParam {
    hId?: string;
    /** 编号 */
    code: string;
    /** 名称 */
    name: string;
    /** 参数值 */
    value: string;
}
/**
 * 组合表单-命令声明实体
 */
export declare class DeclarationCommand {
    /** ID */
    hId?: string;
    /** 命令编号 */
    code: string;
    /** 命令名称 */
    name: string;
    /** 命令 */
    command: string;
    /** 路径 */
    path: string;
    /** 命令所在的组件ID */
    componentId: string;
}
/**
 * 组合表单-变量声明实体
 */
export declare class DeclartionState {
    hId?: string;
    /** 编号 */
    code: string;
    /** 名称 */
    name: string;
    /** 变量 */
    state: string;
    /** 变量路径 */
    path: string;
}
/**
 * 组合表单-订阅实体
 */
export declare class Subscription {
    /** 唯一标识 */
    hId?: string;
    /** 源表单 */
    sourceComponent: string;
    /** 原表单的事件编号 */
    subscribeOn: string;
    /** 目标表单 */
    targetComponent: string;
    /** 目标表单的命令编号 */
    invoke: string;
    /** 目标表单的命令所在的组件ID */
    invokeComponentId: string;
    /** 参数 */
    paramMappings: SubscriptionParamMapping[];
}
/**
 * 组合表单-订阅参数实体
 */
export declare class SubscriptionParamMapping {
    /** 源参数编号 */
    sourceCode: string;
    /** 目标参数编号 */
    targetCode: string;
    /** 目标参数类型 */
    targetType: string;
    /** 目标参数路径 */
    targetPath: string;
}
