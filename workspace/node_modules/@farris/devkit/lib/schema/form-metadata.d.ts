import { FormDeclaration } from './dom-entity';
import { Schema } from './schema';
export declare class FormContent {
    Id: string;
    Code: string;
    Name: string;
    Contents: {
        module: FormModule;
        options?: FormOptions;
    };
}
export declare class FormContentForDB {
    Id: string;
    Code: string;
    Name: string;
    Contents: string;
    constructor(content: FormContent);
}
export declare class FormMetadaDataDom {
    module: FormModule;
}
export declare class FormModule {
    id: string;
    code: string;
    name: string;
    caption: string;
    type: string;
    creator: string;
    creationDate: Date;
    updateVersion: string;
    showTitle: boolean;
    boostrap: string;
    schemas: Array<Schema>;
    states: Array<any>;
    contents: Array<any>;
    stateMachines: Array<any>;
    viewmodels: Array<IFormViewModel>;
    components: Array<any>;
    webcmds: Array<any>;
    serviceRefs: Array<any>;
    ctrlLangs: any;
    isMobileApprove: boolean;
    isComposedFrm: boolean;
    projectName: string;
    extraImports: Array<{
        name: string;
        path: string;
    }>;
    externalComponents: Array<any>;
    declarations: FormDeclaration;
    subscriptions: Array<any>;
}
export declare class FormOptions {
    enableTextArea: boolean;
    enableDragAndDropToModifyLayout: boolean;
}
export interface IFormViewModel {
    id: string;
    code: string;
    name: string;
    fields: IFormViewModelField[];
    commands: any[];
    serviceRefs: any[];
    states: IFormViewModelUiState[];
    bindTo: string;
    parent: string;
    pagination: any;
    enableValidation: boolean;
}
export interface IFormViewModelField {
    type: string;
    id: string;
    fieldName: string;
    bindingPath: string;
    groupId: string;
    groupName: string;
    valueChanging: string;
    valueChanged: string;
    updateOn: 'change' | 'blur' | 'submit';
}
export interface IStateMachine {
    initialState: string;
    renderState: {
        [renderStateName: string]: IRenderState;
    };
    state: IState[];
    action: {
        [actionName: string]: IAction;
    };
}
export interface IRenderState {
    name: string;
    condition: IRenderStateCondition[];
    description: string;
}
export interface IRenderStateCondition {
    compare: string;
    lBracket: string;
    rBracket: string;
    relation: string;
    source: string;
    target: string;
}
export interface IState {
    state: string;
    name: string;
    description: string;
}
export interface IAction {
    name: string;
    transitTo: string;
    precondition: any[];
    description: string;
}
export interface IFormViewModelCommand {
    id: string;
    code: string;
    name: string;
    params: IFormViewModelCommandParam[];
    handlerName: string;
    cmpId: string;
    shortcut: any;
    extensions: any[];
}
export interface IFormViewModelCommandParam {
    name: string;
    showName: string;
    value: string;
    description: string;
}
export interface IFormViewModelUiState {
    id: string;
    category: string;
    code: string;
    name: string;
    type: string;
}
