import { Injector, OnDestroy, OnInit } from '@angular/core';
import { FrameContext } from './frame_context';
import { ViewModel } from '../view-model/index';
import { Subscription, Declaration } from '../event-mechanism/index';
import { ComponentType, IDisposable } from '../core/index';
import { Subject } from 'rxjs';
declare abstract class FrameComponent implements OnInit, OnDestroy, IDisposable {
    protected injector: Injector;
    /**
     * 变更检测器
     */
    private cd;
    /**
     * 框架ID
     */
    id: string;
    /**
     * 框架上下文
     */
    context: FrameContext;
    /**
     * 视图模型
     */
    viewModel: ViewModel;
    /**
     * 订阅事件
     */
    subscription: Subscription;
    /**
     * 公开事件
     */
    declaration: Declaration;
    /**
     * 该组件订阅的EventPipes
     */
    private eventPipes;
    private initialized;
    /**
     * 组件销毁流
     */
    destorySignal: Subject<any>;
    /**
     * 组件类型
     */
    componentType: ComponentType;
    /**
     * 框架构造函数
     * @param injector 注入器
     */
    constructor(injector: Injector);
    /**
     * 是否为表格组件
     * @description 返回true/false时可以信任，但如果返回的是undefined则不应信任
     * @warning 该属性依赖了生成代码，如果非标准的生成型工程也会导致判断失败。
     */
    readonly isGridComponent: boolean;
    dispose(options?: any): void;
    ngOnInit(): void;
    private initialize;
    /**
     * 执行组件初始化
     */
    private onFrameComponentInit;
    /**
     * 获取变更检测器实例
     * @todo：应该通过注入获取，但注入会引起表单编译。
     */
    private getChangeDetectorRef;
    /**
     * 将当前组件脱离变更检测树
     */
    detach(): void;
    /**
     * 将当前组件重新加入变更检测树
     */
    reattach(): void;
    /**
     * 对当前组件进行一次变更检查
     */
    detectChanges(): void;
    /**
     * 检测ChangeDetection是否有效
     * @todo: Can't be depend on the destroyed property, destroyed.
     */
    private isCdValid;
    /**
     * 重置组件状态
     * @todo：AppContext是全局的，
     */
    restComponent(): void;
    ngOnDestroy(): void;
    /**
     * 初始化事件订阅
     */
    private initSubscription;
    /**
     * 获取component对应的订阅
     * @returns
     */
    getSubscription(): Subscription;
    private initPublicEvent;
    /**
     * 获取当前component对应的declaration
     * @returns
     */
    getDeclaration(): Declaration;
    /**
     * 事件触发器，触发事件发布
     * @param eventName 待发布事件
     */
    trigger(eventName: string, params?: any): void;
    /**
     * 内部触发变更检测
     */
    private innerTrigger;
}
export { FrameComponent };
