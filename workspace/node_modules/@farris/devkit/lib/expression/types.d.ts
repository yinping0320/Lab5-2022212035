import { Observable } from 'rxjs';
export declare namespace Expression {
    /**
     * 表达式对象
     */
    interface ExpressionObject {
        /**
         * 表达式唯一标识
         */
        id?: string;
        /**
         * 表达式绑定的路径
         */
        path: string;
        /**
         * 表达式绑定类型State|Entity
         */
        bindingType: ExpressionBindingType;
        /**
         * 表达式类型
         */
        type: ExpressionType;
        /**
         * 表达式
         */
        expression: string;
        /**
         * 表达式依赖
         */
        deps: Array<string>;
        /**
         * 表达式namespace
         */
        ns: string;
        /**
         * 表达式计算结果
         */
        result?: any;
        /**
         * 结果作用路径
         */
        effectPaths?: string[];
        /**
         * 提示信息
         */
        message?: string;
        /**
         * 提示消息类型
         */
        messageType?: 'error' | 'info' | 'warning';
        /**
         *
         */
        factory?: any;
    }
    /**
     * 自定义上下文
     */
    interface ICustomContext {
        currentRows?: Array<ICurrentRow>;
        contexts?: {
            [prop: string]: any;
        };
        patch?: {
            [prop: string]: any;
        };
    }
    /**
     * 当前行描述
     */
    interface ICurrentRow {
        bindingPath: string;
        primaryValue: string;
    }
    /**
     * 表达式赋值器
     * @deprecated deprecated，never use
     */
    interface Assigner {
        assign(expressionObject: ExpressionObject): any;
    }
    /**
     * 表达式执行器
     */
    interface IExecutor {
        compile(expressionObject: Expression.ExpressionObject, context?: {
            [prop: string]: any;
        }): any;
    }
    /**
     * 表达式绑定字段类型（表达式绑定到实体、UIState?）
     */
    enum ExpressionBindingType {
        State = "State",
        Field = "Field"
    }
    /**
     * 表达式类型
     */
    enum ExpressionType {
        /**
         * 必填表达式
         */
        Required = "require",
        /**
         * 只读表达式
         */
        Readonly = "readonly",
        /**
         * 计算表达式
         */
        Compute = "compute",
        /**
         * 依赖表达式
         */
        Dependency = "dependency",
        /**
         * 是否可见
         */
        Visible = "visible",
        /**
         * 关联表达式
         */
        Relative = "relative",
        /**
         * 校验表达式
         */
        Validate = "validate",
        /**
         * 帮助前
         */
        DataPicking = "dataPicking"
    }
    /**
     * 事件类型
     */
    enum EventType {
        ValueChanged = "VALUE_CHANGED",
        SelectionChanged = "SELECTION_CHANGED",
        Load = "Load",
        Append = "Append",
        Remove = "Remove",
        Update = "Update"
    }
    enum EventSource {
        Field = "Field",
        State = "State",
        BindingData = "BindingData",
        Repository = "Repository"
    }
    /**
     * 事件参数
     */
    interface EventArgs {
        /**
         * namespace
         */
        ns: string;
        /**
         * 变更路径
         */
        path: Array<string>;
        /**
         * 变更类型
         */
        type?: EventType;
        /**
         * 变更来源
         */
        source: EventSource;
        /**
         * 变更后的值
         */
        value?: any;
        /**
         * 上下文
         */
        context?: any;
        /**
         * frameId
         */
        frameId?: string;
        /**
         * 事件数据上下文
         */
        entity?: any;
        id?: any;
        /**
         * 分层加载场景
         */
        isTreeNodeLoadScene?: boolean;
    }
    /**
     * 监听器
     */
    interface Listener {
        onEvent: Observable<EventArgs>;
    }
    /**
     * 作用器
     */
    interface Effector {
        /**
         * namespace
         */
        ns: string;
        /**
         * 作用
         * @param expressionObject
         */
        effect(path: string, value: any, options: EffectOptions): any;
    }
    interface EffectOptions {
        /**
         * 指定行
         */
        path?: string[];
        /**
         * frameId
         */
        frameId?: string;
        /**
         * 消息
         */
        message?: string;
        /**
         * 消息提示类型
         */
        messageType?: MessageType | 'error' | 'info' | 'warning';
        /**
         * 表达式id
         */
        expressionId?: string;
    }
    enum MessageType {
        error = "error",
        info = "info",
        warning = "warning"
    }
    /**
     * 事件处理器
     */
    interface IEventHandler {
        handleEvent(event: EventArgs, expressionObjects: Expression.ExpressionObject[]): any;
        filter(event: Expression.EventArgs): any;
        perform(expressionObject: Expression.ExpressionObject, context: any): any;
        effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;
    }
    enum EffectPath {
        currentRow = 0
    }
    /**
     * 表达式校验结果
     */
    interface IValidateResult {
        expressionId: string;
        path: string[];
        result: any;
    }
    /**
     * 表达式计算上下文构造器选项
     */
    interface IBuilderOptions {
    }
    const MESSAGE: {
        'zh-CHS': {
            require: string;
            validate: string;
            dataPicking: string;
        };
        en: {
            require: string;
            validate: string;
            dataPicking: string;
        };
        'zh-CHT': {
            require: string;
            validate: string;
            dataPicking: string;
        };
    };
    const DEPENDENCY_SPLITER = "/";
}
