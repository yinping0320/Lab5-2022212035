import { Injector } from "@angular/core";
import { Observable } from "rxjs";
import { ResolveService } from "../resolver/index";
import { ExpressionExecutor } from "./expression_executor";
import { ExpressionRegistry } from "./expression_registry";
import { ViewModel } from "../view-model/index";
import { ExpressionResult } from "./expression_result";
import { IMessageService, INotifyService } from "../core/index";
export declare class ExpressionManager {
    private injector;
    private resolveService;
    private expressionExecutor;
    private expressionRegistry;
    private expressionResult;
    private messageService;
    private notifyService;
    private frameContext;
    constructor(injector: Injector, resolveService: ResolveService, expressionExecutor: ExpressionExecutor, expressionRegistry: ExpressionRegistry, expressionResult: ExpressionResult, messageService: IMessageService, notifyService: INotifyService);
    /**
     * 根据表达式id进行计算
     * @param expressionId 表达式id
     * @param viewModel viewModel
     * @param rowData rowData
     * @returns
     */
    eval(expressionId: string, viewModel?: ViewModel, rowData?: any): any;
    validate(expressionId: string, options: any): any;
    /**
     * 帮助前封装
     * @param event
     */
    onDataPicking(configs: {
        expressionId: string;
    }): Observable<any>;
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    private execute;
    /**
     * 执行表达式（返回可观察对象）
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    private executeAsync;
    /**
     * 构造实体上下文
     * @param deps
     * @param groupDependencies
     * @param context
     * @returns
     */
    private buildEntityContext;
    private setValue;
    /**
     * 是否为实体依赖
     * @param dep
     * @returns
     */
    private isEntityDependency;
    /**
     * 获取实体
     * @param options
     * @returns
     */
    getEntity(options: {
        [bindingPath: string]: string;
    }): any;
    private getPropertyValue;
    /**
     * 获取主实体原始字段名
     */
    protected readonly entityOriginalNodeCode: string;
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext(): {};
}
