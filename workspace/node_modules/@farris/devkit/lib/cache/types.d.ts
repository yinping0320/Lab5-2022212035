export declare type Type = (...args: any[]) => any;
export declare type TTL = number | Date;
export declare type Key = string | number | ICacheKey | ICacheKeyBuilder;
export interface ICacheKeyBuilder<T = any[], U = any> {
    (context: U, args: T): any;
}
export declare enum CacheReturnType {
    Static = 1,
    Promise = 2
}
export interface ICacheKey {
}
export interface ICacheKeyCompare {
    compare(key1: ICacheKey, key2: ICacheKey): boolean;
}
export declare class CacheKeyCompare implements ICacheKeyCompare {
    compare(key1: string | number, key2: string | number): boolean;
}
export interface ICacheOptions<T> {
    key?: Key;
    ttl?: TTL;
    cacheKeyCompare?: ICacheKeyCompare;
    provider: ICacheProvider<T>;
}
export interface ICacheObject<TValue> {
    key: Key;
    content: TValue;
    ttl: TTL;
    createAt: Date;
    isExpired(): boolean;
}
export interface ICacheProvider<TValue> {
    has(key: Key): boolean;
    length(): number;
    set(value: ICacheObject<TValue>): any;
    get(key: Key): ICacheObject<TValue>;
    delete(key: Key): any;
    clear(): any;
    keys(): IterableIterator<Key>;
    values(): IterableIterator<ICacheObject<TValue>>;
}
