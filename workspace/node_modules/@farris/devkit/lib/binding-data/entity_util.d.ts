import { Repository } from '../repository/index';
import { Entity, EntityList } from '../entity/index';
import { BindingList } from './binding_list';
import { BindingObject } from './binding_object';
import { BindingData } from './binding_data';
/**
 * 实体操作工具类
 */
declare class EntityUtil {
    /**
     * 将entity的数据加载到bindingObject中，并保持两者同步。
     * @param entity        实体对象
     * @param bindingObject 绑定对象
     */
    static loadEntity(entity: Entity, bindingObject: BindingObject): void;
    /**
     * 建立entity和bindingObject之间的关联
     * @param entity        实体对象
     * @param bindingObject 绑定对象
     */
    static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject): void;
    /**
     * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。
     * @param entityList  实体列表
     * @param bindingList 绑定列表
     */
    static loadEntityList(entityList: EntityList<any>, bindingList: BindingList): void;
    /**
     * 建立entityList和bindingList之间的关联
     * @param entityList  实体列表
     * @param bindingList 绑定列表
     */
    static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList): void;
    /**
     * 监听repository变化，保持repository和bindingList同步。
     * @param repository  实体仓库
     * @param bindingList 绑定列表
     */
    static loadRepository(repository: Repository<any>, bindingList: BindingList): void;
    /**
     * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static loadEntities(entities: Entity[], bindingList: BindingList, entityCreate?: boolean): void;
    /**
     * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中
     * @param entities    实体数组
     * @param bindingList 绑定列表
     * @param isCloned 是否克隆数据
     * @param options 上下文
     */
    static appendEntities(entities: Entity[], bindingList: BindingList, isCloned?: boolean, options?: any): void;
    /**
     * 是否是有效的字段
     * @param entity 实体
     * @param propertyName 字段
     * @returns
     */
    static isEffectiveField(entity: Entity, propertyName: string): any;
    /**
     * 增加实体数据（不切换当前行）
     * @param entities
     * @param bindingList
     */
    static addData(entities: Entity[], bindingList: BindingList, options?: any): void;
    static insertEntity(entity: Entity, bindingList: BindingList, position: -1 | 1): void;
    /**
     * 从bindingList移除entities对应的BindingObject对象
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static removeEntities(entities: Entity[], bindingList: BindingList): void;
    static removeData(entities: Entity[], bindingList: BindingList): void;
    /**
     * 将entities中的Entity对象转换为BindingObject对象
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static createBindingObjects(entities: Entity[], bindingList: BindingList): any[];
    static createBindingObject(entity: Entity, bindingList: BindingList): BindingObject;
    static watchReposiroty(repository: Repository<any>, bindingData: BindingData): void;
    /**
     * 查找属性的类型
     * @param entityType 实体类型
     * @param targetPropName 属性名称
     * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）
     */
    static getPropInfo(entityType: any, targetPropName: string): {
        propType: string;
        propEntityType: any;
    };
    /**
     * 获取实体的主键名
     * @param entityType 实体类型
     */
    static getPrimaryKey(entityType: any): string;
    /**
     * 是否为对象属性
     */
    static isObjectProp(entityType: any, targetPropName: string): boolean;
    /**
     * 检查是否是动态列属性
     */
    static isDynamicProp(entityType: any, targetPropName: string): boolean;
    /**
     * 为实体增加initialData属性
     * @param entity 实体实例
     * @param initialData 默认值对象
     */
    static appendInitialData(entity: any, initialData: any): void;
}
export { EntityUtil };
