import { Subject } from 'rxjs';
import { Map } from 'immutable';
import { Change, ViewChange } from './changes';
import { BindingProperty } from './binding_property';
import { BindingList } from './binding_list';
import { InvokeOnValueChange } from './types';
/**
 * 绑定对象基类
 */
declare abstract class BaseBindingObject {
    __type__: string;
    /**
     * immutable值对象
     */
    protected innerValues: Map<string, any>;
    /**
     * 当前语言
     */
    protected currentLanguage: string;
    /**
     * 父对象或父列表
     */
    parent: BindingList | BaseBindingObject;
    /**
     * 实体引起的变更
     */
    changes: Subject<Change>;
    /**
     * 界面层引起的变更流
     */
    viewChanges: Subject<ViewChange>;
    /**
     *  属性集合
     */
    properties: BindingProperty[];
    /**
     * 主键名
     */
    primaryKey: string;
    /**
     * 主键值
     */
    readonly primaryKeyValue: any;
    /**
     * 数据行的主键值
     */
    readonly rowPrimaryKeyValue: any;
    /**
     * 绑定到实体
     */
    fromEntity: boolean;
    /**
     * 标识是否提交过
     */
    isShowValidationMsg: boolean;
    /**
     * 销毁流
     */
    unsubscribe: Subject<any>;
    /**
     * 以{ [propertyName]: FormControl }的形式存放每条数据的control
     */
    controlMap: any;
    constructor();
    /**
     * 设置是否提交过
     */
    setShowValidationMsg(flag: boolean): void;
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    getValue(propertyName: string): any;
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    setValue(propertyName: string, propertyValue: any, emitEventToView?: boolean, emitEventToEntity?: boolean, errors?: any, invokeOnValueChange?: InvokeOnValueChange, context?: any): void;
    /**
     * 将BindingObject实例转换成JSON对象
     */
    toJSON(options?: any): any;
    /**
     * 获取当前语言
     * @returns
     */
    protected getCurrentLanguage(): string;
    /**
     * 构造bindignData变更上下文
     * @param propertyName
     * @param propertyValue
     * @param context
     * @param errors
     * @param type
     * @returns
     */
    private buildChangesContext;
    /**
     * 构造viewChanges上下文
     * @param propertyName
     * @param value
     * @param preValue
     * @param errors
     * @param context
     * @param type
     * @returns
     */
    private buildViewChangesContext;
    private getRow;
    private makeHash;
    private differ;
}
export { BaseBindingObject };
