{"version":3,"file":"farris-devkit.js.map","sources":["ng://@farris/devkit/lib/metadata/decorator/decorator.ts","ng://@farris/devkit/lib/metadata/decorator/metadata_util.ts","ng://@farris/devkit/lib/changeset/types.ts","ng://@farris/devkit/lib/changeset/change_set.ts","ng://@farris/devkit/lib/entity/metadata/field_decorator.ts","ng://@farris/devkit/lib/entity/metadata/entity_decorator.ts","ng://@farris/devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/devkit/lib/entity/types.ts","ng://@farris/devkit/lib/entity/entity_factory.ts","ng://@farris/devkit/lib/entity/entity_type_creator.ts","ng://@farris/devkit/lib/entity/entity_creator.ts","ng://@farris/devkit/lib/entity/validator/validation_types.ts","ng://@farris/devkit/lib/entity/validator/validation_error.ts","ng://@farris/devkit/lib/entity/validator/validation_executor.ts","ng://@farris/devkit/lib/entity/validator/validation_utils.ts","ng://@farris/devkit/lib/utils/date_util.ts","ng://@farris/devkit/lib/i18n/translate_service.ts","ng://@farris/devkit/lib/entity/validator/validator.ts","ng://@farris/devkit/lib/entity/entity_list.ts","ng://@farris/devkit/lib/core/types.ts","ng://@farris/devkit/lib/i18n/user_settings_service.ts","ng://@farris/devkit/lib/i18n/zoned_time.ts","ng://@farris/devkit/lib/misc/router-param.service.ts","ng://@farris/devkit/lib/binding-data/changes.ts","ng://@farris/devkit/lib/binding-data/binding_property.ts","ng://@farris/devkit/lib/binding-data/property_util.ts","ng://@farris/devkit/lib/binding-data/binding_list_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/devkit/lib/form/decorators.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/index.ts","ng://@farris/devkit/lib/core/data-path/data_path_node.ts","ng://@farris/devkit/lib/core/data-path/data_path.ts","ng://@farris/devkit/lib/core/data-path/data_path_creator.ts","ng://@farris/devkit/lib/core/data-path/index.ts","ng://@farris/devkit/lib/core/data-type-info/data_prop_info.ts","ng://@farris/devkit/lib/core/data-type-info/data_type_info.ts","ng://@farris/devkit/lib/core/tokens.ts","ng://@farris/devkit/lib/core/encode_url.ts","ng://@farris/devkit/lib/core/core.ts","ng://@farris/devkit/lib/core/escape.ts","ng://@farris/devkit/lib/resolver/types.ts","ng://@farris/devkit/lib/resolver/resolver_registry.ts","ng://@farris/devkit/lib/repository/decorators.ts","ng://@farris/devkit/lib/repository/entity_collection.ts","ng://@farris/devkit/lib/repository/entity_manager.ts","ng://@farris/devkit/lib/repository/pagination_manager.ts","ng://@farris/devkit/lib/repository/data_change_history.ts","ng://@farris/devkit/lib/repository/sort_condition_manager.ts","ng://@farris/devkit/lib/repository/filter_condition_manager.ts","ng://@farris/devkit/lib/misc/uid.ts","ng://@farris/devkit/lib/repository/repository.ts","ng://@farris/devkit/lib/repository/default_repository.ts","ng://@farris/devkit/lib/resolver/entity_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/state_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/comment_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/resolve_service.ts","ng://@farris/devkit/lib/resolver/index.ts","ng://@farris/devkit/lib/utils/expression_util.ts","ng://@farris/devkit/lib/utils/data_type_info_util.ts","ng://@farris/devkit/lib/form/form.ts","ng://@farris/devkit/lib/binding-data/entity_util.ts","ng://@farris/devkit/lib/binding-data/binding_data.ts","ng://@farris/devkit/lib/data-filter/types.ts","ng://@farris/devkit/lib/data-filter/data_filter.ts","ng://@farris/devkit/lib/data-filter/array_filter_condition_data_filter.ts","ng://@farris/devkit/lib/data-filter/object_filter_condition_data_filter.ts","ng://@farris/devkit/lib/binding-data/binding_list.ts","ng://@farris/devkit/lib/binding-data/base_binding_object.ts","ng://@farris/devkit/lib/binding-data/binding_object.ts","ng://@farris/devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/devkit/lib/binding-data/decorators.ts","ng://@farris/devkit/lib/misc/data-path-util.ts","ng://@farris/devkit/lib/misc/guid.ts","ng://@farris/devkit/lib/misc/run_mode_service.ts","ng://@farris/devkit/lib/entity/entity.ts","ng://@farris/devkit/lib/entity/dynamic_entity.ts","ng://@farris/devkit/lib/entity/entity_data_service.ts","ng://@farris/devkit/lib/entity/entity_prototype.ts","ng://@farris/devkit/lib/schema/schema.ts","ng://@farris/devkit/lib/entity/entity_type_factory.ts","ng://@farris/devkit/lib/rest/rest_service.ts","ng://@farris/devkit/lib/command/decorators.ts","ng://@farris/devkit/lib/misc/is-observable.ts","ng://@farris/devkit/lib/command/flow/task_node.ts","ng://@farris/devkit/lib/variable/variable_parser.ts","ng://@farris/devkit/lib/variable/parse_util.ts","ng://@farris/devkit/lib/variable/data_variable_parser.ts","ng://@farris/devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/devkit/lib/variable/command_variable_parser.ts","ng://@farris/devkit/lib/variable/variable_parse_service.ts","ng://@farris/devkit/lib/variable/frame_id_variable_parser.ts","ng://@farris/devkit/lib/variable/form_state_variable_parser.ts","ng://@farris/devkit/lib/variable/event_param_variable_parser.ts","ng://@farris/devkit/lib/variable/index.ts","ng://@farris/devkit/lib/command/flow/task_link.ts","ng://@farris/devkit/lib/command/flow/task_flow.ts","ng://@farris/devkit/lib/command/command_context.ts","ng://@farris/devkit/lib/i18n/translate_token.ts","ng://@farris/devkit/lib/command/command_handler.ts","ng://@farris/devkit/lib/command/command_handler_registry.ts","ng://@farris/devkit/lib/command/command_handler_extender.ts","ng://@farris/devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/devkit/lib/ui-state/decorators.ts","ng://@farris/devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/devkit/lib/ui-state/ui_state.ts","ng://@farris/devkit/lib/ui-state/tokens.ts","ng://@farris/devkit/lib/state-machine/types.ts","ng://@farris/devkit/lib/state-machine/context.ts","ng://@farris/devkit/lib/state-machine/state_machine_event.ts","ng://@farris/devkit/lib/state-machine/state_machine.ts","ng://@farris/devkit/lib/state-machine/decorators.ts","ng://@farris/devkit/lib/view-model/decorators.ts","ng://@farris/devkit/lib/view-model/view_model.ts","ng://@farris/devkit/lib/context/context.ts","ng://@farris/devkit/lib/app/binding_data_manager.ts","ng://@farris/devkit/lib/app/repository_mananger.ts","ng://@farris/devkit/lib/app/frame_component_refresher.ts","ng://@farris/devkit/lib/app/change_detection_controller.ts","ng://@farris/devkit/lib/app/app_context_manager.ts","ng://@farris/devkit/lib/app/component_manager.ts","ng://@farris/devkit/lib/app/tokens.ts","ng://@farris/devkit/lib/schema/dom.service.ts","ng://@farris/devkit/lib/schema/form-metadata.ts","ng://@farris/devkit/lib/schema/schema.service.ts","ng://@farris/devkit/lib/app/app_metadata_collector.ts","ng://@farris/devkit/lib/app/view_model_manager.ts","ng://@farris/devkit/lib/app/render_context_metadata_manager.ts","ng://@farris/devkit/lib/frame/tokens.ts","ng://@farris/devkit/lib/app/app_context.ts","ng://@farris/devkit/lib/app/frame_contex_manager.ts","ng://@farris/devkit/lib/app/index.ts","ng://@farris/devkit/lib/event-bus-new/event-bus-proxy.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration_decorator.ts","ng://@farris/devkit/lib/event-mechanism/declaration/event-type.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription_decorator.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe-type.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe.ts","ng://@farris/devkit/lib/event-bus-new/event-bus.ts","ng://@farris/devkit/lib/exception/tokens.ts","ng://@farris/devkit/lib/i18n/tokens.ts","ng://@farris/devkit/lib/expression/types.ts","ng://@farris/devkit/lib/manifest/tokens.ts","ng://@farris/devkit/lib/expression/expression_registry.ts","ng://@farris/devkit/lib/listener/tokens.ts","ng://@farris/devkit/lib/listener/change_listener.ts","ng://@farris/devkit/lib/expression/expression_executor.ts","ng://@farris/devkit/lib/expression/expression_result.ts","ng://@farris/devkit/lib/expression/expression_manager.ts","ng://@farris/devkit/lib/expression/expression_result_factory.ts","ng://@farris/devkit/lib/expression/tokens.ts","ng://@farris/devkit/lib/listener/ui_state_change_listener.ts","ng://@farris/devkit/lib/listener/repository_change_listener.ts","ng://@farris/devkit/lib/listener/listener_registry.ts","ng://@farris/devkit/lib/listener/binding_data_change_listener.ts","ng://@farris/devkit/lib/listener/listeners.ts","ng://@farris/devkit/lib/expression/expression_event_emitter.ts","ng://@farris/devkit/lib/effector/tokens.ts","ng://@farris/devkit/lib/effector/repository_effector.ts","ng://@farris/devkit/lib/effector/uistate_effector.ts","ng://@farris/devkit/lib/effector/readonly_effector.ts","ng://@farris/devkit/lib/effector/dependency_effector.ts","ng://@farris/devkit/lib/effector/effector_registry.ts","ng://@farris/devkit/lib/effector/relative_effector.ts","ng://@farris/devkit/lib/effector/validate_effector.ts","ng://@farris/devkit/lib/effector/required_effector.ts","ng://@farris/devkit/lib/effector/visible_effector.ts","ng://@farris/devkit/lib/effector/effector_factory.ts","ng://@farris/devkit/lib/effector/index.ts","ng://@farris/devkit/lib/event-handler/event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_value_changed_event_handler.ts","ng://@farris/devkit/lib/effector/effector_manager.ts","ng://@farris/devkit/lib/event-handler/state_value_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_add_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_remove_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_update_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_append_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_value_change_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_remove_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_selection_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/event_handler_registry.ts","ng://@farris/devkit/lib/expression/expression_engine_impl.ts","ng://@farris/devkit/lib/frame/component_ref_manager.ts","ng://@farris/devkit/lib/frame/frame_context.ts","ng://@farris/devkit/lib/frame/frame_component.ts","ng://@farris/devkit/lib/frame/frame_event.ts","ng://@farris/devkit/lib/frame/frame_event_bus.ts","ng://@farris/devkit/lib/command/command_handler_factory.ts","ng://@farris/devkit/lib/command/command_bus.ts","ng://@farris/devkit/lib/command/providers.ts","ng://@farris/devkit/lib/command/dynamic_command_handler.ts","ng://@farris/devkit/lib/validation/tokens.ts","ng://@farris/devkit/lib/providers.ts","ng://@farris/devkit/lib/devkit_module.ts","ng://@farris/devkit/lib/listener/deprecated_binding_data_change_listener.ts","ng://@farris/devkit/lib/cache/types.ts","ng://@farris/devkit/lib/cache/core/cache_object.ts","ng://@farris/devkit/lib/cache/core/decorator.ts","ng://@farris/devkit/lib/cache/core/cache_container.ts","ng://@farris/devkit/lib/cache/provider/memory_cache_provider.ts","ng://@farris/devkit/lib/cache/provider/default_cache_provider.ts","ng://@farris/devkit/farris-devkit.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Type } from '@angular/core';\r\n\r\n/**\r\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * @ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n *\r\n */\r\nexport interface TypeDecorator {\r\n    /**\r\n     * Invoke as ES7 decorator.\r\n     */\r\n    <T extends Type<any>>(type: T): T;\r\n\r\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\r\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\r\n    // so we cannot declare this interface as a subtype.\r\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\r\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\r\n}\r\n\r\nexport const ANNOTATIONS = '__annotations__';\r\nexport const PARAMETERS = '__parameters__';\r\nexport const PROP_METADATA = '__prop__metadata__';\r\n\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nexport function makeDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\r\n    chainFn?: (fn: Function) => void,\r\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\r\n        new(...args: any[]): any;\r\n        (...args: any[]): any;\r\n        (...args: any[]): (cls: any) => any;\r\n    } {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, ...args);\r\n            return this;\r\n        }\r\n\r\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\r\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\r\n            typeFn && typeFn(cls, ...args);\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (cls as any)[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn) { chainFn(typeDecorator); }\r\n        return typeDecorator;\r\n    }\r\n\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\r\n    return DecoratorFactory as any;\r\n}\r\n\r\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\r\n    return function ctor(...args: any[]) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            // tslint:disable-next-line:forin\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function makeParamDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\r\n\r\n        (<any>ParamDecorator).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n\r\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (cls as any)[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n\r\nexport function makePropDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function PropDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n\r\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        return function PropDecorator(target: any, name: string) {\r\n            const constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (constructor as any)[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\r\nimport { Translate } from '../../i18n';\r\n//import { Cacheable, DefaultCacheProvider } from '../../cache';\r\n\r\n/**\r\n * 元数据解析\r\n * 约束：\r\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\r\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\r\n */\r\nclass MetadataUtil {\r\n\r\n  // ----------------------------------------\r\n  // 类型元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取类元数据\r\n   * 返回结果形如：\r\n   * [\r\n   *   Injectable\r\n   *   NgViewModel\r\n   *   NgViewModel\r\n   * ]\r\n   */\r\n  static getClassMetadatas(constructor: any): any[] {\r\n    const metadatas = constructor[ANNOTATIONS];\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个class上的某种装饰器\r\n   * 返回结果：NgViewModel\r\n   */\r\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\r\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\r\n    return metadata;\r\n  }\r\n\r\n  static getClassMetadataByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): any {\r\n    const allClassMetadatas = this.getClassMetadatas(constructor);\r\n    if (!allClassMetadatas) {\r\n      return null;\r\n    }\r\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\r\n      return classMetadata.ngMetadataName === metadataName;\r\n    });\r\n    this.translateMetadataByName(metadata, translateService, keysToTranslate);\r\n    return metadata;\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // 属性元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取所有属性的所有元数据\r\n   * 返回格式：\r\n   * {\r\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\r\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   * }\r\n   */\r\n   // @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPropsMetadatas(constructor: any): any {\r\n    const allPropMetadatas = constructor[PROP_METADATA];\r\n    return allPropMetadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取所有属性的某一类型的元数据\r\n   * 如果同一属性\r\n   * 返回结果：\r\n   * {\r\n   *    propName1: NgDefaultValue,\r\n   *    propName2: NgDefaultValue\r\n   * }\r\n   */\r\n  // @Cache({ provider: new MemoryCacheProvider(new MetadataKeyCompare()), key: ((context: any, args: any[]) => { return { constructor: args[0], metadataName: args[1] } }) })\r\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\r\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\r\n    return metadatas;\r\n  }\r\n  static getPropsMetadatasByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\r\n    const metadatas = {};\r\n    // 读取构造函数中存储的类属性注解。\r\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\r\n    if (!allPropMetadatas) {\r\n      return metadatas;\r\n    }\r\n    // 遍历所有属性提取注解信息。\r\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\r\n      // 提取当前属性注解对象\r\n      const propMetadatas: any[] = allPropMetadatas[propName];\r\n      // 提取指定类型的注解项\r\n      const metadata = propMetadatas.find((propMetadata: any) => {\r\n        return propMetadata.ngMetadataName === metadataName;\r\n      });\r\n      if (metadata) {\r\n        metadatas[propName] = metadata;\r\n      }\r\n    });\r\n    // 翻译指定属性的值\r\n    this.translateMetadatasByName(metadatas, translateService, keysToTranslate);\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadatasByName(metadatas: any, translateService?: Translate, keysToTranslate?: string[])\r\n    : { [propName: string]: any } {\r\n    Object.keys(metadatas).forEach((propName: string) => {\r\n      // 提取指定类型的注解项\r\n      this.translateMetadataByName(metadatas[propName], translateService, keysToTranslate);\r\n    });\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadataByName(metadata: any, translateService?: Translate, keysToTranslate?: string[]): any {\r\n    if (metadata && translateService && keysToTranslate) {\r\n      keysToTranslate.forEach((metadataPropKey) => {\r\n        const propertyVariable: string = metadata[metadataPropKey];\r\n        try {\r\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n        }\r\n        } catch (e) {\r\n          console.info(e);\r\n        }\r\n      });\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的所有元数据\r\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   */\r\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的某种元数据\r\n   * 返回格式：NgDefaultValue\r\n   */\r\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n\r\n  // ----------------------------------------\r\n  // 参数元数据\r\n  // ----------------------------------------\r\n\r\n}\r\n\r\nexport { MetadataUtil };\r\n","/**\r\n * 变更记录\r\n */\r\nexport class Modification {\r\n\r\n  /**\r\n   * 实体变更路径。如：[1, 'name']\r\n   * 说明： 1 为实体主键ID， name 为属性名称\r\n   */\r\n  path?: string[];\r\n\r\n  /**\r\n   * 原值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 变更后的新值\r\n   *\r\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\r\n   * - Add: value的值为json 对象\r\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\r\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\r\n   *\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ModifyType;\r\n\r\n  /**\r\n   * 数据是否通过验证\r\n   */\r\n  isValid?: boolean;\r\n\r\n  /**\r\n   * 数据验证结果\r\n   */\r\n  errors?: { [type: string]: string };\r\n\r\n  /**\r\n   * 插入位置\r\n   */\r\n  position?: 1 | -1;\r\n\r\n  /**\r\n   * 变更集的值\r\n   */\r\n  changeSetValue?: any;\r\n  /**\r\n   * 重置数据\r\n   */\r\n  isReset?: boolean;\r\n  entityCreate?: boolean;\r\n  dynamic?: boolean;\r\n  fromParent?: boolean;\r\n  /**\r\n   * 是否分层加载场景\r\n   * @description 分层加载使用的变更类型为新增，和真正的新增场景冲突，导致后续根据变更类型处理时出现问题\r\n   */\r\n  isTreeNodeLoadScene?: boolean;\r\n  /**\r\n   * 构造函数\r\n   * @param value 新值\r\n   * @param modifyType 变更类型\r\n   * @param path 变更路径\r\n   * @param preValue 旧值\r\n   */\r\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any, position?: 1 | -1) {\r\n    this.type = modifyType;\r\n    this.value = value;\r\n    this.preValue = preValue;\r\n    this.path = path;\r\n    this.position = position;\r\n  }\r\n}\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport enum ModifyType {\r\n\r\n  /**\r\n   * 添加\r\n   */\r\n  Add = 'ADD',\r\n  /**\r\n   * 添加数据\r\n   */\r\n  AddData = 'AddData',\r\n  /**\r\n   * 克隆数据\r\n   */\r\n  Clone = 'CLONE',\r\n  /**\r\n   * 删除\r\n   */\r\n  Remove = 'REMOVE',\r\n  RemoveData = 'RemoveData',\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  ValueChange = 'VALUE_CHANGE',\r\n\r\n  /**\r\n   * 加载\r\n   */\r\n  Load = 'LOAD',\r\n\r\n  /**\r\n   * 未改变\r\n   */\r\n  UnChanged = 'UNCHANGED',\r\n\r\n  /**\r\n   * 分页信息变更\r\n   */\r\n  PaginationInfoChange = 'PAGINATION_INFO_CHANGE',\r\n\r\n  /**\r\n   * 插入\r\n   */\r\n  Insert = 'Insert',\r\n  /**\r\n   * 更新实体\r\n   */\r\n  Update = 'UPDATE'\r\n}\r\n","/*\r\n * @Author: Lucus, Witt\r\n * @Date: 2018-10-30 15:53:59\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-08 17:25:08\r\n */\r\n\r\nimport { Modification, ModifyType } from './types';\r\nimport { isEqual } from 'lodash-es';\r\n// function isEqual(value: any, other: any) {\r\n//   return JSON.stringify(value) === JSON.stringify(other);\r\n// }\r\n\r\n/**\r\n * 实体数据变更集\r\n */\r\nclass ChangeSet {\r\n  /**\r\n   * 变更集合\r\n   */\r\n  protected modifications: Modification[] = [];\r\n\r\n  /**\r\n   *  获取所有的变更记录\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.modifications;\r\n  }\r\n\r\n  /**\r\n   * 将变更集添加到集合中\r\n   * ### 使用示例\r\n   * ```\r\n   * const changeSet = new ChangeSet();\r\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\r\n   * changeSet.append(modify)\r\n   * ```\r\n   * @param changeItem 变更数据\r\n   */\r\n  public append(modification: Modification) {\r\n    switch (modification.type) {\r\n      case ModifyType.ValueChange:\r\n        this.appendValueChangeModification(modification);\r\n        break;\r\n      case ModifyType.Add:\r\n      case ModifyType.Insert:\r\n      case ModifyType.Clone:\r\n        this.appendAddModification(modification);\r\n        break;\r\n      case ModifyType.Remove:\r\n        this.appendRemoveModification(modification);\r\n        break;\r\n      case ModifyType.Load:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加值变化变更\r\n   */\r\n  private appendValueChangeModification(modification: Modification) {\r\n    const value = modification.value;\r\n    const path = modification.path.join('/');\r\n    const existedModification = this.findModifyItemsPath(modification.path);\r\n    if (existedModification) {\r\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\r\n      existedModification.value = value;\r\n    } else {\r\n      const existedAddModification = this.findNewAddItemsPath(modification.path);\r\n      if (existedAddModification) {\r\n        // @todo：\r\n        // 1、此处逻辑有问题，value是个字符串，不能直接assign；\r\n        // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\r\n        // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\r\n        existedAddModification.value = Object.assign({}, existedAddModification.value, value);\r\n      } else {\r\n        // 其他情况，新增一条ValueChange变更。\r\n        this.modifications.push(modification);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加新增变更\r\n   */\r\n  private appendAddModification(modification: Modification) {\r\n    const value = modification.value;\r\n    const path = modification.path.join('/');\r\n    const existedModification = this.findNewAddItemsPath(modification.path);\r\n    if (existedModification) {\r\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\r\n      existedModification.value = existedModification.value.concat(value);\r\n    } else {\r\n      // 2、如果没有，则新增一条Add变更。\r\n      this.modifications.push(modification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加删除变更\r\n   */\r\n  private appendRemoveModification(modification: Modification) {\r\n\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n\r\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\r\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\r\n    this.modifications.forEach((addModification: Modification) => {\r\n      // 只处理新增变更\r\n      if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {\r\n        return;\r\n      }\r\n\r\n      // @todo 只考虑主从结构，再深的层次暂不考虑\r\n      if (isEqual(addModification.path, path) === false) {\r\n        return;\r\n      }\r\n\r\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\r\n      addModification.value = addModification.value.filter((addDataItem: any) => {\r\n        return addDataItem[primaryKey] !== primaryKeyValue;\r\n      });\r\n    });\r\n\r\n    // 2、移除对应的修改变更\r\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\r\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\r\n      if (valueModification.type !== ModifyType.ValueChange) {\r\n        return true;\r\n      }\r\n      const valueChangePath = Array.from(valueModification.path);\r\n      valueChangePath.pop();\r\n\r\n      // 路径相同进行移除\r\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\r\n      return !isToRemove;\r\n    });\r\n\r\n    // 先删除下级删除变更，再插入\r\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\r\n    this.removeDescendantRemoveModifications(modification);\r\n    this.modifications.push(modification);\r\n  }\r\n\r\n  /**\r\n   * 清空变更集合\r\n   */\r\n  public clear() {\r\n    this.modifications = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据path获取Add类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findNewAddItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据path获取ValueChange类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findModifyItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除后代（包括自己）所有的删除变更\r\n   * @todo：临时做一个最小化修改\r\n   */\r\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\r\n\r\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\r\n\r\n    // 删除后代修改变更\r\n    this.modifications = this.modifications.filter((modification: Modification) => {\r\n      if (modification.type !== ModifyType.Remove) {\r\n        return true;\r\n      }\r\n      const descendantPathWithId = this.createRemovePathWithId(modification);\r\n      const isDescendant = this.isDescendantPath(parentPathWithId, descendantPathWithId);\r\n      return !isDescendant;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取删除路径的完整格式\r\n   * @summary\r\n   * 1、目前删除变更的路径标记到父集合；\r\n   * 2、为了方便比较，将被删除的数据id加入到路径中\r\n   */\r\n  private createRemovePathWithId(modification: Modification) {\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\r\n    return pathWithId;\r\n  }\r\n\r\n  /**\r\n   * 判断是否是后代节点路径\r\n   * @param parentPath 父节点路径\r\n   * @param descendantPath 后代节点\r\n   */\r\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\r\n    if (parentPath.length > descendantPath.length) {\r\n      return false;\r\n    }\r\n\r\n    let isDescendantPath = true;\r\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\r\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\r\n        isDescendantPath = false;\r\n        return;\r\n      }\r\n    });\r\n\r\n    return isDescendantPath;\r\n  }\r\n\r\n}\r\n\r\nexport { ChangeSet };\r\n\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { ClassType } from '../types';\r\nimport { ValidateRule } from '../validator/index';\r\n\r\nfunction isPlainObject(value): boolean {\r\n  if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\r\n    return false;\r\n  }\r\n  if (Object.getPrototypeOf(value) === null) {\r\n    return true;\r\n  }\r\n  let proto = value;\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n  return Object.getPrototypeOf(value) === proto;\r\n}\r\n\r\nexport interface NgProperty {\r\n\r\n  /**\r\n   * 数据字段名\r\n   * @summary\r\n   * 服务器端返回的数据中，该属性对应的key。\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称（请勿使用，待删除）\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 原始字段类型（请勿使用，待删除）\r\n   */\r\n  originalDataFieldType?: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type?: any;\r\n\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** 实体属性注解器名称 */\r\nexport const NG_FIELD = 'NgField';\r\n\r\n/** 实体属性元数据选项 */\r\nexport interface NgFieldProperty extends NgProperty {\r\n\r\n  /** 属性名称 */\r\n  property?: string;\r\n\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n\r\n  /** 原始字段类型 */\r\n  originalDataFieldType?: string;\r\n\r\n  /** 是否为主键 */\r\n  primary?: boolean;\r\n\r\n  /** 是否为外键 */\r\n  foreign?: boolean;\r\n\r\n  /** 默认值 */\r\n  defaultValue?: any;\r\n\r\n  /** 验证规则 */\r\n  validRules?: ValidateRule[];\r\n\r\n  /** 初始值，用于字段清空后 */\r\n  initValue?: any;\r\n\r\n  /** 启用多语录入 */\r\n  enableMultiLangInput?: boolean;\r\n  /**\r\n   * 启用时区\r\n   */\r\n  enableTimeZone?: boolean;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 实体属性注解器 */\r\nexport interface NgFieldPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgFieldProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgFieldProperty | string | ClassType): any;\r\n  (obj?: NgFieldProperty | string | boolean): any;\r\n  new(obj?: NgFieldProperty | string | boolean): any;\r\n}\r\n\r\nfunction makeNgFieldDecorator(options?: NgFieldProperty | string | boolean): any {\r\n  let metadata: NgFieldProperty = {\r\n    primary: false,\r\n    foreign: false\r\n  };\r\n\r\n  if (options) {\r\n    const paramType = typeof options;\r\n    switch (paramType) {\r\n      case 'boolean':\r\n        metadata.primary = Boolean(options);\r\n        break;\r\n      case 'string':\r\n        metadata.dataField = String(options);\r\n        break;\r\n      case 'object':\r\n        metadata = Object.assign(metadata, options);\r\n        break;\r\n    }\r\n  }\r\n  return metadata;\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n * }\r\n * ```\r\n */\r\nexport const NgField: NgFieldPropertyDecorator = makePropDecorator(NG_FIELD, makeNgFieldDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgList 注解器名称 */\r\nexport const NG_LIST = 'NgList';\r\n\r\n/**\r\n * 集合类型元数据选项\r\n */\r\nexport interface NgListProperty extends NgProperty {\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 实体类型 */\r\n  type?: any;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 集合类型注解器 */\r\nexport interface NgListPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgListProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgListProperty | string | ClassType): any;\r\n  new(obj: NgListProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgListDecorator(options: NgListProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n *      @NgList({\r\n *          dataField: 'roles',\r\n *          formType: Role\r\n *      })\r\n *      Roles: EntityList<Role>\r\n * }\r\n * ```\r\n */\r\nexport const NgList: NgListPropertyDecorator = makePropDecorator(NG_LIST, makeNgListDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgObject\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_OBJECT = 'NgObject';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgObjectProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /** 树分级类型 path|parent */\r\n  hierarchyType?: string;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgObjectPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgObjectProperty | string | ClassType): any;\r\n  new(obj: NgObjectProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgObjectDecorator(options: NgObjectProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgObject(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgObject: NgObjectPropertyDecorator = makePropDecorator(NG_OBJECT, makeNgObjectDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgDynamicProperty\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_Dynamic = 'NgDynamic';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgDynamicProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgDynamicPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgDynamicProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgDynamicProperty | string | ClassType): any;\r\n  new(obj: NgDynamicProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgDynamicDecorator(options: NgDynamicProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgDynamic: NgDynamicPropertyDecorator = makePropDecorator(NG_Dynamic, makeNgDynamicDecorator);\r\n","import { makeDecorator } from \"../../metadata/index\";\r\n\r\nexport const NG_ENTITY = 'NgEntity';\r\n\r\n/**\r\n * 实体描述\r\n */\r\nexport interface NgEntity {\r\n  /**\r\n   * 原始编号,对应schema中的code\r\n   */\r\n  originalCode: string;\r\n  /**\r\n   * 后端转换完之后的编号,对应schema中的label\r\n   */\r\n  nodeCode: string;\r\n  /**\r\n   * 允许为空\r\n   */\r\n  allowEmpty?: boolean | string;\r\n}\r\n/**\r\n * 实体装饰器\r\n */\r\nexport interface NgEntityDecorator {\r\n  (obj?: NgEntity): any;\r\n  new(obj?: NgEntity): any;\r\n}\r\n/**\r\n * 实体装饰器\r\n * @param options options\r\n */\r\nexport function NgEntity(options: NgEntity) {\r\n  const decoratorFactory = makeDecorator(NG_ENTITY, (obj: NgEntity) => obj);\r\n  return decoratorFactory(options);\r\n}","import { MetadataUtil } from '../../metadata/index';\r\nimport {\r\n  NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST, NgFieldProperty, NgObjectProperty, NgListProperty\r\n} from './field_decorator';\r\nimport { ValidateRule } from '../validator/types';\r\n\r\n/**\r\n * 属性注解器通用方法\r\n */\r\nexport class FieldMetadataUtil {\r\n  /**\r\n   * 获取实体所有的简单属性元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgFields(target: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取某个简单属性的元数据\r\n   */\r\n  static getNgField(target: any, propName: string): NgFieldProperty {\r\n    const ngFields = this.getNgFields(target);\r\n    const ngField = ngFields[propName] as NgFieldProperty;\r\n    return ngField;\r\n  }\r\n\r\n  /**\r\n   * 获取实体属性在原始数据中的属性名\r\n   */\r\n  static getDataField(target: any, propName: string) {\r\n    const ngField = this.getNgField(target, propName);\r\n    return ngField.dataField || propName;\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgObject的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgObjects(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);\r\n  }\r\n\r\n  static getNgDynamic(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgList的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgListProperty}\r\n   */\r\n  static getNgList(target: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取实体标注为主键的属性元数据\r\n   * @param target 实体类型\r\n   */\r\n  static getPrimaryFieldMetadata(target: any): NgFieldProperty | undefined {\r\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\r\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\r\n      return ngFieldObj[prop].primary;\r\n    });\r\n\r\n    if (primaryKey) {\r\n      const propMeta = ngFieldObj[primaryKey];\r\n      propMeta.property = primaryKey;\r\n      if (!propMeta.dataField) {\r\n        propMeta.dataField = primaryKey;\r\n      }\r\n\r\n      return propMeta;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 获取主键名称，没有主键时返回空字符串\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\r\n    if (!primaryNgField) {\r\n      return '';\r\n    }\r\n    return primaryNgField.property;\r\n  }\r\n\r\n  // static udtMap = {};\r\n\r\n  /**\r\n   * 获取NgField 的验证规则元数据\r\n   * @param target 实体类Type\r\n   */\r\n  static getValidationMetadata(target: any): { [key: string]: ValidateRule[] } {\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});\r\n    // let udtParentName = '';\r\n    // Object.keys(this.udtMap).forEach(key => {\r\n    //   // 当前实体是udt类型时\r\n    //   if (this.udtMap[key].type.name === target.name) {\r\n    //     // 找出当前udt实体的父级信息\r\n    //     udtParentName = key;\r\n    //   }\r\n    // });\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n    // let primaryId = '';\r\n    // let udtPrimaryId = '';\r\n    // 不进行验证的属性名\r\n    // const excludeIDs = [];\r\n    // 排除udt的主键\r\n    // Object.keys(fieldMetadatas).forEach(key => {\r\n    //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n    //     primaryId = fieldMetadatas[key].dataField;\r\n    //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';\r\n    //     excludeIDs.push(fieldMetadatas[key].dataField);\r\n    //   }\r\n    // });\r\n    Object.keys(fieldMetadatas).forEach(key => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n      // if (excludeIDs.indexOf(key) > -1) {\r\n      //   return;\r\n      // }\r\n      if (validRules && validRules.length) {\r\n        validRules.map(rule => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n  static getValidationMetadataWithPath(object: any): { [key: string]: ValidateRule[] } {\r\n    const target = object.constructor;\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    const parentPaths = object.getPaths().path || [];\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n\r\n    Object.keys(fieldMetadatas).forEach((key) => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n\r\n      if (validRules && validRules.length) {\r\n        const propertyPath = parentPaths.concat([]);\r\n        propertyPath.push(key);\r\n        const property = propertyPath.join('.');\r\n        validRules.map((rule) => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n          rule['path'] = property;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n}\r\n","import { Type } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { Entity } from '../entity';\r\nimport { NgEntity, NG_ENTITY } from './entity_decorator';\r\n// import { NgProperty } from './ng_property';\r\n// import { NG_FIELD,   NgFieldProperty   } from './ng_field';\r\n// import { NG_OBJECT,  NgObjectProperty  } from './ng_object';\r\n// import { NG_Dynamic, NgDynamicProperty } from './ng_dynamic';\r\n// import { NG_LIST,    NgListProperty    } from './ng_list';\r\nimport {\r\n  NgProperty, NG_FIELD, NgFieldProperty, NG_OBJECT, NgObjectProperty,\r\n  NG_Dynamic, NgDynamicProperty, NG_LIST,    NgListProperty\r\n} from './field_decorator';\r\n\r\n/**\r\n * 实体元数据工具类\r\n */\r\nexport class EntityMetadataUtil {\r\n\r\n  /**\r\n   * 获取所有属性\r\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\r\n   */\r\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: NgProperty } {\r\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\r\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\r\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\r\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\r\n\r\n    return Object.assign({},\r\n      ngPlainProperties,   ngEntityProperties,\r\n      ngDynamicProperties, ngEntityListProperties\r\n    );\r\n  }\r\n  /**\r\n   * 获取实体元数据描述\r\n   */\r\n  static getNgEntityMatadata(entityType: any): NgEntity{\r\n    return MetadataUtil.getClassMetadataByNameWithTranslate(entityType,NG_ENTITY);\r\n  }\r\n  /**\r\n   * 获取NgField的属性元数据\r\n   */\r\n  static getNgFieldProperties(entityType: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取NgObject属性元数据\r\n   */\r\n  static getNgObjectProperties(entityType: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);\r\n  }\r\n\r\n  /**\r\n   * 获取NgDynamic属性元数据\r\n   */\r\n  static getNgDynamicProperties(entityType: any): { [propName: string]: NgDynamicProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取NgList属性元数据\r\n   */\r\n  static getNgListProperties(entityType: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取主键属性元数据\r\n   */\r\n  static getPrimaryKeyProperty(entityType: Type<Entity>): NgFieldProperty {\r\n    let primaryKeyProperty;\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        primaryKeyProperty = ngProperty;\r\n      }\r\n    });\r\n\r\n    return primaryKeyProperty;\r\n  }\r\n}\r\n","export const PARENT_PATH = '__PARENT_PATH__';\r\nexport const PARENT_CLASS = '__PARENT__';\r\n\r\nexport type ClassType<T = any> = new (...args: any[]) => T;\r\n\r\nexport interface Dynamic {\r\n  loadDynamicData(dynamicData: any): void;\r\n}\r\n","import { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  // const entity = new T(data);\r\n  const entity: any = EntityTypeCreator.create(T, data);\r\n  return entity;\r\n}\r\nexport function DynamicFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n","import { ModifyType } from \"../changeset\";\r\nimport { Entity } from \"./entity\";\r\nimport { DynamicFactory, EntityFactory } from \"./entity_factory\";\r\nimport { EntityList } from \"./entity_list\";\r\nimport { FieldMetadataUtil, NgDynamicProperty, NgFieldProperty, NgListProperty, NgObjectProperty } from \"./metadata\";\r\nimport { ClassType, PARENT_CLASS, PARENT_PATH } from \"./types\";\r\n\r\nexport class EntityTypeCreator {\r\n  private static buffer = new Map<any, any>();\r\n  public static create(constructor: Function, data: any): Entity {\r\n    const entityType = this.getType(constructor);\r\n    const entity = new entityType(data);\r\n    entity.constructor = constructor;\r\n    return entity;\r\n  }\r\n  // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })\r\n  public static createType(constructor: Function): ClassType<Entity> {\r\n    const entityType = class EntityType extends Entity {\r\n      constructor(data: any) {\r\n        super(data);\r\n      }\r\n    };\r\n    const entityPrototype = entityType.prototype;\r\n    this.extendProperties(constructor, entityPrototype);\r\n    return entityType;\r\n  }\r\n  private static extendProperties(constructor: Function, entityPrototype: Entity) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n    this.extendPlainProperty(entityPrototype, ngFields);\r\n    this.extendListProperty(entityPrototype, ngLists);\r\n    this.extendObjectProperty(entityPrototype, ngObjects);\r\n    this.extendDynamicProperty(entityPrototype, ngDynamic);\r\n  }\r\n\r\n  private static extendPlainProperty(entityPrototype: Entity, ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(function (propName) {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      // const dataField = ngField.dataField || propName;\r\n      Object.defineProperty(entityPrototype, propName, {\r\n        get: function () {\r\n          const value = this.getPropValue(propName, ngField);\r\n          return value;\r\n        },\r\n        set: function (newPropValue) {\r\n          // 值相同时不触发变更。\r\n          const oldPropValue = this.getPropValue(propName, ngField);\r\n          if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n            return;\r\n          }\r\n          this.setPropValue(propName, ngField, newPropValue);\r\n          const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n          this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendListProperty(entityPrototype: Entity, ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(function (propertyName) {\r\n      const key = `__${propertyName}__`;\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let entityList = this[key];\r\n          if (!entityList) {\r\n            const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n            const path = this.createPath(propertyName);\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const val = this.data[dataField];\r\n            entityList = new EntityList<typeof fieldMetadata.type>();\r\n            entityList[PARENT_CLASS] = this;\r\n            entityList[PARENT_PATH] = path;\r\n            if (val) {\r\n              const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n              entityList.loadEntities(entities);\r\n            }\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                this.setChanges(value);\r\n              }\r\n            });\r\n            this[key] = entityList;\r\n          }\r\n          return entityList;\r\n        },\r\n        set: function (value) {\r\n          this[key] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendObjectProperty(entityPrototype: Entity, ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const key = `__${propertyName}__`;\r\n      // 如果没有值用一个空对象代替\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let childEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!childEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            // val不存在时，用空对象代替\r\n            const val = this.data[dataField] || {};\r\n            childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);\r\n            this[key] = childEntity;\r\n          }\r\n          return childEntity;\r\n        },\r\n        set: function (value: any) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          const childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);\r\n          this[key] = childEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendDynamicProperty(entityPrototype: Entity, ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const key = `__${propertyName}__`;\r\n\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let dynamicEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!dynamicEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const originalData = this.data[dataField] || {};\r\n            dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);\r\n            this[key] = dynamicEntity;\r\n          }\r\n          return dynamicEntity;\r\n        },\r\n        set: function (value) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          let dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);\r\n          this[key] = dynamicEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static getType(constructor: Function) {\r\n    if (this.buffer.has(constructor)) {\r\n      return this.buffer.get(constructor);\r\n    }\r\n    const entityType = this.createType(constructor);\r\n    this.buffer.set(constructor, entityType);\r\n    return entityType;\r\n  }\r\n  private static buildEntity(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = EntityFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        const change = Object.assign({}, changes, { fromParent: true });\r\n        parent.setChanges(change);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n  private static buildDynamic(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = DynamicFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        parent.setChanges(changes);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n}","import { Type } from '@angular/core';\r\nimport { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\n/**\r\n * 创建实体\r\n * @param entityType 实体类型\r\n * @param entityData 实体数据\r\n */\r\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\r\n  let entity: any;\r\n  if (entityType && entityType.prototype && entityType.prototype.typeName === 'ConcreteEntityPrototype') {\r\n    entity = new entityType(entityData);\r\n  } else {\r\n    entity = EntityTypeCreator.create(entityType, entityData);//new entityType(entityData); \r\n  }\r\n  entity.constructor = entityType;\r\n  return entity;\r\n}\r\n\r\n/**\r\n * 批量创建实体\r\n * @param entityType     实体类型\r\n * @param entityListData 实体数据数组\r\n */\r\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\r\n  const entities: T[] = [];\r\n  entityListData.forEach((entityData: any) => {\r\n    const entity = createEntity<T>(entityType, entityData);\r\n    entities.push(entity);\r\n  });\r\n  return entities;\r\n}\r\n\r\n/**\r\n * 已弃用：请使用createEntity方法代替。\r\n */\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n\r\n\r\n\r\n","const validationMessage = {};\r\n\r\n/**\r\n * 验证类型定义\r\n */\r\nexport class ValidationTypes {\r\n  static CURRENT_LANGUAGE = 'zh-CNS';\r\n\r\n  /**\r\n   * 条件验证表达式\r\n   */\r\n  static CUSTOM_VALIDATION = `customValidation`;\r\n\r\n  /**\r\n   * 必填\r\n   */\r\n  static REQUIRED = 'required';\r\n\r\n  /**\r\n   * 比较值是否相同\r\n   */\r\n  static EQUALS = 'equals';\r\n\r\n  /**\r\n   * 比较值是否不相同\r\n   */\r\n  static NOT_EQUALS = 'notEquals';\r\n\r\n  /**\r\n   * 数字\r\n   */\r\n  static IS_NUMBER = 'isNumber';\r\n\r\n  /**\r\n   * 整数\r\n   */\r\n  static IS_INT = 'isInt';\r\n\r\n  /**\r\n   * 浮点数\r\n   */\r\n  static IS_FLOAT = 'isFloat';\r\n\r\n  /**\r\n   * 字符串\r\n   */\r\n  static IS_STRING = 'isString';\r\n\r\n  /**\r\n   * 布尔值\r\n   */\r\n  static IS_BOOLEAN = 'isBoolean';\r\n\r\n  /**\r\n   * 日期\r\n   */\r\n  static IS_DATE = 'isDate';\r\n\r\n  /**\r\n   * 日期字符串\r\n   */\r\n  static IS_DATE_STRING = 'isDateString';\r\n\r\n  /**\r\n   * 布尔值字符串\r\n   */\r\n  static IS_BOOLEAN_STRING = 'isBooleanString';\r\n\r\n  /**\r\n   * 数字字符串\r\n   */\r\n  static IS_NUMBER_STRING = 'isNumberString';\r\n\r\n  /**\r\n   * 邮箱地址\r\n   */\r\n  static IS_EMAIL = 'isEmail';\r\n\r\n  /**\r\n   * JSON\r\n   */\r\n  static IS_JSON = 'isJSON';\r\n\r\n  /**\r\n   * 字符串小写\r\n   */\r\n  static IS_LOWERCASE = 'isLowercase';\r\n\r\n  /**\r\n   * 字符串大写\r\n   */\r\n  static IS_UPPERCASE = 'isUppercase';\r\n\r\n  /**\r\n   * 数字范围\r\n   */\r\n  static RANGE = 'range';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MIN = 'min';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MINVALUE = 'minValue';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAX = 'max';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAXVALUE = 'maxValue';\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  static LENGTH = 'length';\r\n\r\n  /**\r\n   * 字符串最大长度\r\n   */\r\n  static MAX_LENGTH = 'maxLength';\r\n\r\n  /**\r\n   * 字符串最小长度\r\n   */\r\n  static MIN_LENGTH = 'minLength';\r\n\r\n  /**\r\n   * 最小日期\r\n   */\r\n  static MIN_DATE = 'minDate';\r\n\r\n  /**\r\n   * 最大日期\r\n   */\r\n  static MAX_DATE = 'maxDate';\r\n\r\n  /**\r\n   * 排除非法字符\r\n   */\r\n  static EXCLUDE = 'exclude';\r\n\r\n  /**\r\n   * 正则表达式\r\n   */\r\n  static MATCHES = 'matches';\r\n\r\n  static FIELD_CONTAINER = 'fieldContainer';\r\n  /**\r\n   * 判断验证类型是否合法\r\n   * @param type 验证类型\r\n   */\r\n  static isValidType(type: string): boolean {\r\n    return (\r\n      type !== `isValidType` &&\r\n      type !== 'getMessage' &&\r\n      Object.keys(this)\r\n        .map(key => (this as any)[key])\r\n        .indexOf(type) !== -1\r\n    );\r\n  }\r\n  /**\r\n   * 获取指定验证类型的提示信息\r\n   * @param type 验证类型\r\n   * @returns 返回验证信息\r\n   */\r\n  static getMessage(type: string): string {\r\n    const messages = validationMessage[this.CURRENT_LANGUAGE] || validationMessage['zh-CHS'];\r\n    return messages[type] || '';\r\n  }\r\n\r\n  static setCurrentLanguage(language: string) {\r\n    this.CURRENT_LANGUAGE = language;\r\n  }\r\n}\r\n\r\nvalidationMessage['zh-CHS'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `请输入'$property'`,\r\n  equals: `'$property'的值与$constraint1不相等`,\r\n  notEquals: `'$property'的值不能与'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是数字`,\r\n  isInt: `'$property'的值不是整数`,\r\n  isFloat: `'$property'的值不是浮点型数字`,\r\n  isBoolean: `'$property'的值不是布尔值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `邮箱地址不正确`,\r\n  min: `'$property'的值不应小于$constraint1`,\r\n  minValue: `'$property'的值不应小于$constraint1`,\r\n  minDate: `'$property'的日期不应早于$constraint1`,\r\n  max: `'$property'的值不应大于$constraint1`,\r\n  maxValue: `'$property'的值不应大于$constraint1`,\r\n  maxDate: `'$property'不应晚于$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效布尔值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值应全部为小写字符串`,\r\n  isUppercase: `'$property'的值应全部为大写字符串`,\r\n  length: `'$property'的长度应介于$constraint1~$constraint2之间`,\r\n  range: `'$property'的值应介于$constraint1~$constraint2之间`,\r\n  maxLength: `'$property'的长度不得大于$constraint1`,\r\n  minLength: `'$property'的长度不得小于$constraint1`,\r\n  isNumberString: `'$property'的值不是数字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校验不通过`\r\n};\r\nvalidationMessage['en'] = {\r\n  fieldContainer: `$target row $value`,\r\n  required: `Please input '$property'`,\r\n  equals: `'$property' should equals '$constraint1'`,\r\n  notEquals: `'$property' should not equals '$constraint1'`,\r\n  isNumber: `'$property' should be number`,\r\n  isInt: `'$property' should be integer`,\r\n  isFloat: `'$property' should be float`,\r\n  isBoolean: `'$property' should be boolean`,\r\n  isDate: `'$property' should be date`,\r\n  isEmail: `'$property' should be e-mail address`,\r\n  min: `'$property' should not less than $constraint1`,\r\n  minValue: `'$property' should not less than $constraint1`,\r\n  minDate: `'$property' should not early than $constraint1`,\r\n  max: `'$property' should not bigger than $constraint1`,\r\n  maxValue: `'$property' should not bigger than $constraint1`,\r\n  maxDate: `'$property' should not late than $constraint1`,\r\n  isBooleanString: `'$property' should be boolean string`,\r\n  isDateString: `'$property' should be date string`,\r\n  isLowercase: `'$property' should be lowercase charactor`,\r\n  isUppercase: `'$property' should be uppercase charactor`,\r\n  length: `'$property' length should between $constraint1~$constraint2之间`,\r\n  range: `'$property' value should between $constraint1~$constraint2之间`,\r\n  maxLength: `'$property' should not longer than $constraint1`,\r\n  minLength: `'$property' should not shorter than $constraint1`,\r\n  isNumberString: `'$property' should be number string`,\r\n  exclude: `'$property' should not include $constraint1`,\r\n  matches: `'$property' calibration failed`\r\n};\r\nvalidationMessage['zh-CHT'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `請輸入'$property'`,\r\n  equals: `'$property'的值與$constraint1不相等`,\r\n  notEquals: `'$property'的值不能與'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是數字`,\r\n  isInt: `'$property'的值不是整數`,\r\n  isFloat: `'$property'的值不是浮點型數字`,\r\n  isBoolean: `'$property'的值不是佈爾值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `郵箱地址不正確`,\r\n  min: `'$property'的值不應小於$constraint1`,\r\n  minValue: `'$property'的值不應小於$constraint1`,\r\n  minDate: `'$property'的日期不應早於$constraint1`,\r\n  max: `'$property'的值不應大於$constraint1`,\r\n  maxValue: `'$property'的值不應大於$constraint1`,\r\n  maxDate: `'$property'不應晚於$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效佈爾值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值應全部爲小冩字符串`,\r\n  isUppercase: `'$property'的值應全部爲大冩字符串`,\r\n  length: `'$property'的長度應介於$constraint1~$constraint2之間`,\r\n  range: `'$property'的值應介於$constraint1~$constraint2之間`,\r\n  maxLength: `'$property'的長度不得大於$constraint1`,\r\n  minLength: `'$property'的長度不得小於$constraint1`,\r\n  isNumberString: `'$property'的值不是數字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校驗不通過`\r\n};\r\n","import { FrameContext } from \"../../frame/index\";\r\n\r\n/**\r\n * 验证错误信息\r\n */\r\nexport class ValidationError {\r\n  /**\r\n   * 所属实体对象\r\n   */\r\n  target?: any;\r\n\r\n  /**\r\n   * 验证实体属性名称\r\n   */\r\n  property: string;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  propertyName?: string;\r\n  /**\r\n   * 验证实体属性值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 验证失败的规则\r\n   * @summary {[formType-规则名称]: string - 验证信息 }\r\n   */\r\n  constraints: { [type: string]: string; };\r\n\r\n  /**\r\n   * 子对象验证错误信息集合\r\n   */\r\n  children: ValidationError[];\r\n\r\n  /**\r\n   * 待验证的对象是否为数组集合\r\n   */\r\n  isArray = false;\r\n\r\n  /**\r\n   * 待验证的对象所属集合中的索引\r\n   */\r\n  index = undefined;\r\n\r\n  /**\r\n   * 验证字段名\r\n   */\r\n  field: string;\r\n  /**\r\n   * 校验规则\r\n   */\r\n  rule: any;\r\n  /**\r\n   * 字段绑定路径\r\n   */\r\n  binding?: string;\r\n  frameContext?: FrameContext;\r\n  /**\r\n   * 错误对应字段的完整绑定路径\r\n   */\r\n  fullPath?: string;\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { Validator } from './validator';\r\nimport { ValidateRule } from './types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { EntityList } from '../entity_list';\r\nimport { FieldMetadataUtil, NgFieldProperty } from '../metadata/index';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 执行数据验证\r\n */\r\nexport class ValidationExecutor<T extends Entity> {\r\n\r\n  constructor(private validator: Validator<T>) { }\r\n\r\n  /** 异步验证请求集合 */\r\n  awaitingPromises: Promise<any>[] = [];\r\n  /**\r\n   * 将信息中的关键字替换为具体实体对象中的信息\r\n   * @param message 验证信息\r\n   * @param metadata 验证规则\r\n   * @param value 待验证的值\r\n   */\r\n  public static replaceMessageSpecialTokens(message: any, metadata: ValidateRule, value: any) {\r\n    let messageString: string;\r\n    if (message instanceof Function) {\r\n      messageString = (message as (args: ValidateRule) => string)(metadata);\r\n    } else if (typeof message === 'string') {\r\n      messageString = message as string;\r\n    }\r\n\r\n    if (messageString && metadata.constraints instanceof Array) {\r\n      metadata.constraints.forEach((constraint, index) => {\r\n        messageString = messageString.replace(new RegExp(`\\\\$constraint${index + 1}`, 'g'), constraint);\r\n      });\r\n    }\r\n\r\n    if (messageString && value !== undefined && value !== null) {\r\n      messageString = messageString.replace(/\\$value/g, value);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$property/g, metadata.property);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$target/g, metadata.targetName);\r\n    }\r\n\r\n    return messageString;\r\n  }\r\n\r\n  /**\r\n   * 验证实例对象\r\n   * @param object 验证实例对象\r\n   * @param newValue 实体将要更新的值\r\n   * @param validationErrors 验证信息集合\r\n   * @param propertyName 实例对象属性\r\n   * @param index 所属集合实例中索引\r\n   */\r\n  execute(object: T, newValue, validationErrors: ValidationError[], propertyName?: string, index?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    // if (!currentRowId) {\r\n    //   currentRowId = object.primaryValue;\r\n    // }\r\n    if (!externalRules && frameContext) {\r\n      externalRules = frameContext.form.getValidationRules();\r\n    }\r\n    // 提取实体上定义的验证描述\r\n    // 格式{key:[rule1,rule2]}\r\n    let validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);\r\n    const remainedExternalRules = new Map<string, ValidateRule[]>();\r\n\r\n    // 合并额外验证规则\r\n    if (externalRules) {\r\n      // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];\r\n      // if (parentPathArray.length > 1) {\r\n      //   parentPathArray[0] = '';\r\n      // }\r\n      const parentPathArray = [];\r\n      let objectCursor = object;\r\n      while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {\r\n        const cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';\r\n        // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {\r\n        parentPathArray.push(cursorParentPath);\r\n        // }\r\n        objectCursor = objectCursor['__PARENT__'];\r\n        if (objectCursor instanceof EntityList) {\r\n          objectCursor = objectCursor['__PARENT__'];\r\n        }\r\n      }\r\n      const parentPath = parentPathArray.reverse().join('/');\r\n\r\n      externalRules.forEach((rules, path) => {\r\n        if (path) {\r\n          // 提取额外验证规则字段路径\r\n          const pathArray = path.split('/');\r\n          // 提取字段名称\r\n          const fieldName = pathArray.pop();\r\n          // 提取字段父路径\r\n          const fieldParentPath = pathArray.join('/');\r\n          // 匹配外部验证规则和实体验证规则父路径\r\n          if (parentPath === fieldParentPath) {\r\n            validateMetadatas[fieldName] = [...(validateMetadatas[fieldName] || [])];\r\n            // 合并外部校验规则到实体校验规则，并同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。\r\n            if (rules.length) {\r\n              let targetId = '';\r\n              rules.forEach(rule => {\r\n                if (rule.targetId && rule.targetId.length > targetId.length) {\r\n                  targetId = rule.targetId;\r\n                }\r\n                validateMetadatas[fieldName].push(rule);\r\n              });\r\n              validateMetadatas[fieldName].forEach((validateRule: ValidateRule) => {\r\n                validateRule.targetId = targetId;\r\n                validateRule.targetName = rules[0].targetName;\r\n                validateRule.property = rules[0].property;\r\n                if (rules[0].frameContext) {\r\n                  validateRule.frameContext = rules[0].frameContext;\r\n                }\r\n                validateRule.fullPath = rules[0].fullPath;\r\n                validateRule['initialized'] = true;\r\n              });\r\n            }\r\n          } else {\r\n            remainedExternalRules.set(path, rules);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 处理校验规则中的属性名称\r\n    // 场景为前端未开启校验或form校验规则中对应绑定路径中对应控件未开启校验，导致上一步骤中组件名、字段名未能同步为对应中文\r\n    if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {\r\n      Object.keys(validateMetadatas).forEach((fieldName: string) => {\r\n        const validateRules = validateMetadatas[fieldName];\r\n        if (validateRules && validateRules.length > 0) {\r\n          const firstValidateRule = validateRules[0];\r\n          const path = firstValidateRule['path'];\r\n          if (path) {\r\n            validateRules.forEach((validateRule: ValidateRule) => {\r\n              // 将initialized判断外移减少代码执行次数\r\n              if (validateRule['initialized'] !== true) {\r\n                const bindingPaths = path.split('.');\r\n                const form = this.getForm(bindingPaths, frameContext);\r\n                const formControl = this.getFormControl(bindingPaths, frameContext);\r\n                if (formControl) {\r\n                  validateRule.targetId = formControl.id;\r\n                  validateRule.targetName = form && form.formGroupName;\r\n                  validateRule.property = formControl.name || formControl.defaultI18nValue || '';\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 过滤出当前验证属性的验证规则\r\n    if (propertyName) {\r\n      validateMetadatas = Object.keys(validateMetadatas)\r\n        .filter(key => key === propertyName)\r\n        .reduce((val, curr) => Object.assign({}, val, { [curr]: validateMetadatas[curr] }), {});\r\n    }\r\n    // validateMetadatas = {rule:当前属性的所有校验规则}\r\n    Object.keys(validateMetadatas).filter((key: string) =>\r\n      object && (\r\n        object.hasOwnProperty(key) ||\r\n        (\r\n          object.constructor.prototype &&\r\n          object.constructor.prototype.typeName &&\r\n          object.constructor.prototype.hasOwnProperty(key)\r\n        ) ||\r\n        object['__proto__'].hasOwnProperty(key)\r\n      )\r\n    ).forEach(key => {\r\n      // todo: 没用兼容value是undefined的情况\r\n      let value = newValue;\r\n      if (newValue === undefined) {\r\n        value = (object as any)[key];\r\n      }\r\n      let isMultLanguageField = false;\r\n      const multiLangFields = this.getMultiLanguageFields(object);\r\n      if (multiLangFields && multiLangFields.length > 0) {\r\n        if (multiLangFields.includes(key)) {\r\n          isMultLanguageField = true;\r\n        }\r\n      }\r\n      // const value = newValue ||\r\n      const validateRules: ValidateRule[] = validateMetadatas[key];\r\n      if (validateRules.length) {\r\n        const { property: fieldName, targetId: field, frameContext, fullPath } = validateRules[0];\r\n        // const fieldContainerName = Number.isInteger(index) ?\r\n        // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;\r\n        const fieldContainerName = Number.isInteger(index) ?\r\n          ValidationExecutor.replaceMessageSpecialTokens(\r\n            ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER),\r\n            validateRules[0], index + 1\r\n          ) : validateRules[0].targetName;\r\n        const validationDisplayName = fieldContainerName ? `${fieldContainerName} - ${fieldName}` : `${fieldName}`;\r\n        // const property = validateRules['path'] || key;\r\n        const validationError = this.generateValidationError(object, value, key, validationDisplayName, index, field, frameContext, fullPath);\r\n        if (index !== undefined) {\r\n          validationError['index'] = index;\r\n        }\r\n        validationErrors.push(validationError);\r\n        this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);\r\n      }\r\n    });\r\n\r\n    this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);\r\n\r\n    this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);\r\n    // this.sortValidationErrors(validationErrors);\r\n\r\n    // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题\r\n    // if (!propertyName) {\r\n    //     this.objectValidations(object, validationErrors);\r\n    // }\r\n  }\r\n\r\n\r\n\r\n  private getMultiLanguageFields(entity: any) {\r\n    if (entity && entity.constructor) {\r\n      const ngFields = FieldMetadataUtil.getNgFields(entity.constructor);\r\n      return Object.keys(ngFields).filter((fieldName: string) => ngFields[fieldName].enableMultiLangInput);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 清除通过验证信息\r\n   * @param errors 验证失败信息\r\n   */\r\n  stripEmptyErrors(errors: ValidationError[]) {\r\n    return errors.filter(error => {\r\n      if (error.children) {\r\n        error.children = this.stripEmptyErrors(error.children);\r\n      }\r\n\r\n      if (Object.keys(error.constraints).length === 0) {\r\n        if (error.children.length === 0) {\r\n          return false;\r\n        } else {\r\n          delete error.constraints;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 生成未通过验证的对象\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param propertyName 待验证的实体属性名称\r\n   * @param index 验证数据索引\r\n   * @param field 待验证字段\r\n   */\r\n  private generateValidationError(object: any, value: any, property: string, propertyName?: string, index?: number, field?: string, frameContext?: FrameContext, fullPath?: string) {\r\n    const validationError = new ValidationError();\r\n\r\n    validationError.target = object;\r\n    validationError.value = value;\r\n\r\n    validationError.property = property;\r\n    validationError.propertyName = propertyName;\r\n    validationError.field = field;\r\n    validationError.index = index;\r\n    validationError.children = [];\r\n    validationError.constraints = {};\r\n    if (frameContext) {\r\n      validationError.frameContext = frameContext;\r\n    }\r\n    validationError.fullPath = fullPath;\r\n    return validationError;\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的属性\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param validateRules 验证规则\r\n   * @param errorMap 难证信息。{[key]: message}\r\n   *\r\n   * key: 验证规则名称\r\n   * message: 验证信息\r\n   */\r\n  private defaultValidations(object: T, value: any, validateRules: ValidateRule[], validationError: ValidationError, isMultLanguageField?: boolean, currentRowId?: string) {\r\n    const errorMap = validationError.constraints;\r\n    return validateRules\r\n      .filter((validateRule) => {\r\n        // 验证实体属性是否符合规则\r\n        const validValue = this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);\r\n        if (validValue instanceof Promise) {\r\n          const promise = validValue.then((isValid) => {\r\n            if (!isValid) {\r\n              const { type, messageString: message } = this.createValidationError(object, value, validateRule);\r\n              errorMap[type] = message;\r\n              validationError.rule = validateRule;\r\n            }\r\n          });\r\n          this.awaitingPromises.push(promise);\r\n        }\r\n        return !validValue;\r\n      })\r\n      .forEach((validateRule) => {\r\n        // 不符合规则，生成错误信息\r\n        const { type: key, messageString: message } = this.createValidationError(object, value, validateRule);\r\n        errorMap[key] = message;\r\n        validationError.rule = validateRule;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 验证列表中的每条记录\r\n   * @param object 要验证的实体实例对象\r\n   * @param errors 验证失败的信息集合\r\n   * @param property 属性名称\r\n   * @param parentIndex 当前集合的父对象所属集合列表中的索引。\r\n   */\r\n  private listValidations(\r\n    object: any,\r\n    errors: ValidationError[],\r\n    property?: string,\r\n    parentIndex?: any,\r\n    externalRules?: Map<string, ValidateRule[]>,\r\n    frameContext?: FrameContext\r\n  ) {\r\n    const INDEX_LABEL = \"__ACTUAL_INDEX__\";\r\n    const listFields = FieldMetadataUtil.getNgList(object.constructor);\r\n    if (!listFields) {\r\n      return;\r\n    }\r\n    let keys = Object.keys(listFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = listFields[propertyName];\r\n      const clzType = metadata.type;\r\n      const value = object[propertyName] as EntityList<T>;\r\n      if (value) {\r\n        const parentPaths = object.getPaths().path || [];\r\n        parentPaths.push(propertyName);\r\n        const validationError = this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);\r\n        validationError.isArray = true;\r\n        errors.push(validationError);\r\n        value.items.forEach((entity, index) => {\r\n          let actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;\r\n          this.execute(entity, undefined, validationError.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的引用对象\r\n   * @param object 要验证的实体对象\r\n   * @param errors 错误信息集合\r\n   */\r\n  private objectValidations(object: T, errors: ValidationError[], property?: string, parentIndex?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    const objectFields = FieldMetadataUtil.getNgObjects(object.constructor);\r\n    if (!objectFields || Object.keys(objectFields).length < 1) {\r\n      return;\r\n    }\r\n\r\n    let keys = Object.keys(objectFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = objectFields[propertyName];\r\n      const objectType = metadata.type;\r\n      const value = object[propertyName];\r\n      if (value) {\r\n        this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建验证规则信息\r\n   * @param object 要验证的实体对象\r\n   * @param value 验证的值\r\n   * @param metadata 验证规则\r\n   */\r\n  private createValidationError(object: T, value: any, metadata: ValidateRule) {\r\n    // const targetName = object.constructor ? (object.constructor as any).name : undefined;\r\n    const type = metadata.type;\r\n    // 获取校验提示信息：先使用内置规则获取，获取不到时使用元数据上的提示，以兼容表达式场景\r\n    let message = ValidationTypes.getMessage(type);\r\n\r\n    if (!message) {\r\n      message = metadata.message;\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {\r\n      if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {\r\n        // 获取日期类型的提示信息\r\n        const extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;\r\n        message = ValidationTypes.getMessage(extType);\r\n        /*if (metadata.constraints[0]) {\r\n          metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');\r\n        }*/\r\n      }\r\n    }\r\n\r\n    const messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);\r\n    return { type, messageString, metadata };\r\n  }\r\n  private getFrameContext(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    paths.pop();\r\n    const bindingPath = paths.join('/');\r\n    const frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find((context: FrameContext) => context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\r\n    return frameContext || null;\r\n  }\r\n  private getForm(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    return frameContext && frameContext.form || null;\r\n  }\r\n  private getFormControl(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    const propertyName = paths.pop();\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    const formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;\r\n    return formControl;\r\n  }\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return regex.test(value);\r\n  }\r\n}\r\n","import { ValidationError } from './validation_error';\r\nimport { ValidationResult } from './types';\r\n/**\r\n * 数据验证帮助类，提供一些公共的操作方法函数\r\n */\r\nexport class ValidationUtils {\r\n\r\n  /**\r\n   * 将错误信息集合转变为可读性高的文本数组\r\n   * @param errors 验证失败错误集合\r\n   * @param messages 返回的错误信息文本集合\r\n   * @param parentPath 验证属性上级路径\r\n   */\r\n  static createDetailedErrorMessage(\r\n    errors: ValidationError[],\r\n    messages: string[] = [],\r\n    parentPath: string = ''\r\n  ): string[] {\r\n    errors.forEach(error => {\r\n      const targetName = error.target ? error.target.constructor.name : '';\r\n      const property = error.propertyName;\r\n\r\n      const propConstraintFailed = (propertyName: string): string =>\r\n        `   - 属性 ${parentPath}${propertyName} 验证失败的规则:  \\n` +\r\n        `${Object.keys(error.constraints)\r\n          .map(ruleName => {\r\n            return `        #${ruleName}: ${error.constraints[ruleName]}\\n`;\r\n          })\r\n          .join('')}`;\r\n\r\n      if (!parentPath) {\r\n        messages.push(`类型为 ${targetName} 的实例对象数据验证失败，详细信息：\\n`);\r\n\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(property));\r\n        }\r\n\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, property);\r\n        }\r\n      } else {\r\n        const formattedProperty = Number.isInteger(+error.index)\r\n          ? `[${error.index}].${property}`\r\n          : `${parentPath ? `.` : ``}${property}`;\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(formattedProperty));\r\n        }\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, `${parentPath}${formattedProperty}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    return messages;\r\n  }\r\n\r\n  /**\r\n   * 错误信息集合转换为简单对象格式\r\n   * @param errors 错误信息集合\r\n   * @param errObj 返回简单对象。如:\r\n   * ```\r\n   * { name: { required: '必填', max: '最大值99' },\r\n   *   list: {\r\n   *      0: { name:{required: '必填'},\r\n   *           age: { min: '最小值 20' }\r\n   *         },\r\n   *      2: { ... }\r\n   *   }\r\n   * }\r\n   *\r\n   * ```\r\n   */\r\n  static convertErrorsToNormalObject(errors: ValidationError[], errObj: {}): {} {\r\n    errors.forEach(err => {\r\n      const property = err.propertyName;\r\n\r\n      const buildArray = (childErrors: ValidationError[]) => {\r\n        const itemErr = {};\r\n        childErrors.forEach((childErr: ValidationError) => {\r\n          if (childErr.children.length) {\r\n            itemErr[childErr.index] = ValidationUtils.convertErrorsToNormalObject(childErr.children, childErr);\r\n          } else {\r\n            if (itemErr[childErr.index]) {\r\n              itemErr[childErr.index] = Object.assign({}, itemErr[childErr.index], {\r\n                [childErr.propertyName]: childErr.constraints\r\n              });\r\n            } else {\r\n              itemErr[childErr.index] = { [childErr.propertyName]: childErr.constraints };\r\n            }\r\n          }\r\n        });\r\n\r\n        return itemErr;\r\n      };\r\n\r\n      if (!err.isArray) {\r\n        if (!err.children.length) {\r\n          errObj[property] = err.constraints;\r\n        } else {\r\n          errObj[property] = ValidationUtils.convertErrorsToNormalObject(err.children, errObj);\r\n        }\r\n      } else {\r\n        errObj[property] = buildArray(err.children);\r\n      }\r\n    });\r\n\r\n    return errObj;\r\n  }\r\n}\r\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\r\n\r\n/**\r\n * 日期处理类\r\n */\r\nclass DateUtil {\r\n\r\n  /**\r\n   * 空日期字符串（N版）\r\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\r\n   */\r\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\r\n  static emptyDateTimeString = null;\r\n\r\n  /**\r\n   * 默认空日期字符串（ISO标准格式）\r\n   */\r\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\r\n  static emptyISODateTimeString = null;\r\n\r\n  /**\r\n   * 默认日期听格式\r\n   */\r\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\r\n\r\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\r\n\r\n  static defaultDateFormat = 'yyyy-MM-dd';\r\n\r\n  static defaultTimeFormat = 'HH:mm:ss';\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\r\n   */\r\n  static formatISO(dateOrDateString: string|Date): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    return format(dateObj, this.defaultISOFormat);\r\n  }\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为指定格式的字符串\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   * @param dateFormat 日期格式字符串\r\n   */\r\n  static format(dateOrDateString: string|Date, dateFormat?: string): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\r\n    return format(dateObj, dateFormat);\r\n  }\r\n\r\n  /**\r\n   * 创建日期\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   */\r\n  static parse(dateOrDateString: string | Date): Date {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return dateOrDateString as Date;\r\n    }\r\n\r\n    return parseISO(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否是日期对象\r\n   */\r\n  static isDate(date: any): boolean {\r\n    return isDate(date);\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期或者空日期字符串\r\n   * @param dateOrDateString 日期或日期字符串\r\n   */\r\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return this.isEmptyDate(dateOrDateString as Date);\r\n    }\r\n    return this.isEmptyDateString(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否为空日期字符串\r\n   * @param date 日期对象\r\n   */\r\n  static isEmptyDate(date: Date) {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期字符串\r\n   * @param dateString 日期字符串\r\n   */\r\n  static isEmptyDateString(dateString: string) {\r\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 相等返回true，否则返回false\r\n   */\r\n  static isEqual(dateOrDateString1: string|Date, dateOrDateString2: string|Date): boolean {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (dateObj1 === dateObj2) {\r\n      return true;\r\n    }\r\n    return isEqual(dateObj1, dateObj2);\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 返回-1、0、1\r\n   */\r\n  static compare(dateOrDateString1: string|Date, dateOrDateString2: string|Date) {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (this.isEqual(dateObj1, dateObj2) === true) {\r\n      return 0;\r\n    }\r\n\r\n    // 处理解析后为null的场景，null比所有有效日期小\r\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\r\n      return -1;\r\n    }\r\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\r\n      return 1;\r\n    }\r\n\r\n    return compareAsc(dateObj1, dateObj2);\r\n  }\r\n}\r\n\r\nexport { DateUtil };\r\n\r\n","import { Translate } from './translate';\r\n\r\nexport class TranslateService {\r\n  private static defaultLanguage = 'zh-CHS';\r\n  public static translate: Translate = null;\r\n  /**\r\n   * 设置多语服务\r\n   * @param translate translate\r\n   */\r\n  public static setTranslate(translate: Translate) {\r\n    if (translate) {\r\n      this.translate = translate;\r\n    }\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   */\r\n  public static getCurrentLanguage() {\r\n    return this.translate && this.translate.getCurrentLanguage() || this.defaultLanguage;\r\n  }\r\n  public static dispose() {\r\n    this.translate = null;\r\n  }\r\n}\r\n","import * as ValidatorJS from 'validator';\r\nimport { ValidateRule, IsNumberOptions, ValidationResult } from './types';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationExecutor } from './validation_executor';\r\nimport { ValidationUtils } from './validation_utils';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { TranslateService } from '../../i18n/translate_service';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { RuleType } from '../../form/index';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 校验实体实例对象数据\r\n */\r\nexport class Validator<T extends Entity> {\r\n  constructor() { }\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  /**\r\n   * 验证实例对象中数据是否合法\r\n   * @param object 待校验的实例对象\r\n   * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  validate(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Promise<ValidationResult> {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    return Promise.all(executor.awaitingPromises).then(() => {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      this.sortValidationErrors(errors);\r\n      return this.buildErrors(errors);\r\n    });\r\n  }\r\n  /**\r\n   * 校验信息排序（为了兼容树形表）\r\n   * @param validationErrors 验证信息数组\r\n   */\r\n  private sortValidationErrors(validationErrors: ValidationError[]) {\r\n    // 如果存在无序号的信息则不排序\r\n    let sortable: boolean = true;\r\n    validationErrors.forEach(info => {\r\n      if (info.children && info.children.length > 1) {\r\n        this.sortValidationErrors(info.children);\r\n      }\r\n      if (typeof info.index !== \"number\") {\r\n        sortable = false;\r\n      }\r\n    });\r\n    if (sortable) {\r\n      validationErrors.sort((a, b) => a.index - b.index);\r\n    }\r\n  }\r\n  /**\r\n   * 执行校验\r\n   * @param object \r\n   * @param propertyName \r\n   * @param value \r\n   * @param externalRules \r\n   * @param index \r\n   * @param frameContext \r\n   * @param ignoreAsyncValidateRules\r\n   * @returns \r\n   */\r\n  public verify(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext, ignoreAsyncValidateRules: boolean = false): Promise<ValidationResult> | { isValid: boolean, errors: any, message: string } {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    if (executor.awaitingPromises && executor.awaitingPromises.length > 0 && ignoreAsyncValidateRules === false) {\r\n      return Promise.all(executor.awaitingPromises).then(() => {\r\n        const errors = executor.stripEmptyErrors(validationErrors);\r\n        const result = this.buildErrors(errors);\r\n        return result;\r\n      });\r\n    } else {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      return this.buildErrors(errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证实体属性元数据中设置的校验规则是否合法\r\n   * @param object 实例对象\r\n   * @param value 待校验的值\r\n   * @param validateRule 验证规则\r\n   */\r\n  validateValueByMetadata(object: any, value: any, validateRule: ValidateRule, isMultLanguageField?: boolean, currentRowId?: string): boolean | any {\r\n    const validType = validateRule.type;\r\n    let constraintsToValidate = [];\r\n    if (validateRule.constraints) {\r\n      constraintsToValidate = validateRule.constraints.map(param => {\r\n        if (typeof param === 'function') {\r\n          return param(object, value);\r\n        }\r\n        return param;\r\n      });\r\n    } else {\r\n      validateRule.constraints = [];\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(validType)) {\r\n      if (validType === ValidationTypes.MAXVALUE) {\r\n        const rule = constraintsToValidate[0];\r\n        if (this.isDateString(value) || this.isDate(value) || this.isDateString(rule) || this.isDate(rule)) {\r\n          // 如果日期值不存在，则不判断大小\r\n          if (!value) {\r\n            return true;\r\n          }\r\n          if (value.indexOf('~') !== -1) {\r\n            // 不对日期区间进行校验\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MAX_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));\r\n        } else {\r\n          return this[ValidationTypes.MAXVALUE](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else if (validType === ValidationTypes.MINVALUE) {\r\n        // 如果是null或undefined，直接返回true\r\n        if (constraintsToValidate[0] === null || constraintsToValidate[0] === undefined) {\r\n          return true;\r\n        }\r\n        if (this.isDateString(value) || this.isDate(value)) {\r\n          if (constraintsToValidate[0] === 0) {\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MIN_DATE](DateUtil.parse(value), isMultLanguageField, DateUtil.parse(constraintsToValidate[0]));\r\n        } else if (this.isNumber(value)) {\r\n          return this[ValidationTypes.MIN](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else {\r\n        return this[validType](value, isMultLanguageField, ...constraintsToValidate);\r\n      }\r\n    } else {\r\n      if (typeof validateRule.eval === 'function') {\r\n        const bindingPath = validateRule.bindingPath;\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        let fieldName = validateRule.field;\r\n        if (bindingPaths.length !== 0) {\r\n          const prefix = bindingPaths.join('/');\r\n          fieldName = `${prefix}/${fieldName.split('.').filter(p => p).join('/')}`;\r\n        }\r\n        const options: any = { patch: { [fieldName]: value } };\r\n        options.currentRows = [];\r\n        const parentEntityListPaths: string[] = object && typeof object['getEntityListPath'] === 'function' && object.getEntityListPath();\r\n        if (parentEntityListPaths.length === 4) {\r\n          const childrenList = parentEntityListPaths.slice(1, 3).reverse();\r\n          options.currentRows.push({ bindingPath: childrenList[1], primaryValue: childrenList[0].split(':')[1] });\r\n        }\r\n        if (currentRowId) {\r\n          if (validateRule.bindingPath.split('/').filter(p => p).length !== 0) {\r\n            const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n            options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n          }\r\n          options.currentRow = { bindingPath: validateRule.bindingPath, primaryValue: currentRowId };\r\n        } else {\r\n          const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n          options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n        }\r\n\r\n        const result = validateRule.eval(options);\r\n        if (validateRule.type === RuleType.Require) {\r\n          const isValid = this.required(value, isMultLanguageField);\r\n          if (result) {\r\n            return isValid;\r\n          } else {\r\n            return true;\r\n          }\r\n        } else {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n  private buildErrors(errors: ValidationError[]) {\r\n    const msg = new Set(ValidationUtils.createDetailedErrorMessage(errors));\r\n    const newMsg = [];\r\n    msg.forEach(v => {\r\n      newMsg.push(v);\r\n    });\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      message: newMsg.join('')\r\n    };\r\n  }\r\n  /** 自定义验证 */\r\n  customValidation(value, comparison: boolean): boolean {\r\n    return comparison;\r\n  }\r\n  private isEmptyValue(value: any) {\r\n    const result = value === '' || value === null || value === undefined\r\n      || value === '0001-01-01' || value === '0001-01-01 00:00:00' || value === '0001-01-01T00:00:00';\r\n    return result;\r\n  }\r\n  /** 必填项 */\r\n  required(value: any, isMultLanguageField?: boolean): boolean {\r\n    if (isMultLanguageField) {\r\n      const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      // 如果能够获取到当前语言，那么当前语言对应的输入不能为空\r\n      if (currentLanguage) {\r\n        return !!value[currentLanguage];\r\n      }\r\n      // 如果当前语言为空，那么必填要求至少有一个输入\r\n      // const allEmpty = Object.values(value).every((v: any) => !v || v.length < 1); // .filter((v: any) => !v || v.length < 1);\r\n      // if (allEmpty) {\r\n      //   return false;\r\n      // }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (!Object.keys(value).length) {\r\n        return false;\r\n      }\r\n      value = Object.values(value)[0];\r\n    }\r\n    // tslint:disable: max-line-length\r\n    return value !== '' && value !== null && value !== undefined\r\n      && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n  }\r\n\r\n  /** 判断两个值是否相等 */\r\n  equals(value: any, comparison: any): boolean {\r\n    return value === comparison;\r\n  }\r\n\r\n  /**\r\n   * 检查 value 是否不等于参照值\r\n   * @param value 要检查的值\r\n   * @param comparison 对比参照值\r\n   */\r\n  notEquals(value: any, comparison: any): boolean {\r\n    return value !== comparison;\r\n  }\r\n\r\n  /**\r\n   * 判断value 是否为数字\r\n   * @param value 要检查的值\r\n   * @param options 验证选项\r\n   */\r\n  isNumber(value: any, options: IsNumberOptions = {}): boolean {\r\n    if (value === Infinity || value === -Infinity) {\r\n      return options.allowInfinity;\r\n    }\r\n\r\n    if (Number.isNaN(value)) {\r\n      return options.allowNaN;\r\n    }\r\n\r\n    return Number.isFinite(value);\r\n  }\r\n\r\n  /** 判断value是否为整数 */\r\n  isInt(value: number) {\r\n    return Number.isInteger(value);\r\n  }\r\n\r\n  /** 是否为浮点类型 */\r\n  isFloat(value: any): boolean {\r\n    if (this.isNumber(value) || this.isNumberString(value)) {\r\n      return this.validatorJs.isFloat(value);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否布尔值\r\n   */\r\n  isBoolean(value: any): boolean {\r\n    return value instanceof Boolean || typeof value === 'boolean';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为字符串\r\n   */\r\n  isString(value: any): boolean {\r\n    return value instanceof String || typeof value === 'string';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期\r\n   */\r\n  isDate(value: any): boolean {\r\n    return value instanceof Date && !isNaN(value.getTime());\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期字符串\r\n   */\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return this.isString(value) && regex.test(value) && this.validatorJs.toDate(value);\r\n  }\r\n\r\n  /** 判断value 的长度是否在允许的最小值 和最大值之间 */\r\n  length(value: any, min: number, max?: number, isMultLanguageField?: boolean): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLength(value, min, max);\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最小值\r\n   * @param value 待检查的字符串\r\n   * @param min 最小长度\r\n   */\r\n  minLength(value: any, isMultLanguageField: boolean, min: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length < min);\r\n        if (hasInvalidLangs && hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length > min : true;\r\n      // }\r\n      // 如果无法获取当前语言，则只要有一种语言的输入长度大于最小长度即可。\r\n      // const hasValidLangs = Object.values(value).filter((v: any) => v && v.length > min);\r\n      // if (hasValidLangs.length > 0) {\r\n      //   return true;\r\n      // }\r\n      // return false;\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, min));\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最大值\r\n   * @param value 待检查的字符串\r\n   * @param max 最大长度\r\n   */\r\n  maxLength(value: any, isMultLanguageField: boolean, max: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length < max : true;\r\n      // }\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length > max);\r\n        if (hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object') {\r\n      for (const key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          const element = value[key];\r\n          if (typeof element === 'string' && !this.length(value[key], 0, max)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, 0, max));\r\n  }\r\n\r\n  /** 检查value的值是否在 最大值与最小值之间 */\r\n  range(value: number, isMultLanguageField: boolean, min: number, max: number): boolean {\r\n    return typeof value === 'number' && this.isNumber(min) && this.isNumber(max) && value >= min && value <= max;\r\n  }\r\n  /**\r\n   * 日期类型的值是否在某个区间\r\n   * @param value value\r\n   * @param min 最小值\r\n   * @param max 最大值\r\n   */\r\n  dateRange(value: any, isMultLanguageField: boolean, rule: string, type: string) {\r\n    // 2010~2020|04~05|03 11:00:00~05 12:00:00\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    if (type === 'maxValue' || type === 'maxDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 1)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    } else if (type === 'minValue' || type === 'minDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 0)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  private getRangeValue(value: string, position: 0 | 1, splitor = '~') {\r\n    return value.split(splitor)[position];\r\n  }\r\n  private isDateRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /(\\d{4}|\\d{2})/.test(value);\r\n  }\r\n  /**\r\n   * 是否年度区间\r\n   * @param value value\r\n   */\r\n  private isYearRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}~\\d{4}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为年月区间\r\n   * @param value value\r\n   */\r\n  private isYearMonthRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}-\\d{2}~\\d{4}-\\d{2}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为月或天的区间\r\n   * @param value value\r\n   */\r\n  private isMonthOrDayRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1}~[0|1|2|3]\\d{1}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为天+时间的区间\r\n   * @param value value\r\n   */\r\n  private isDayTimeRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}~[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is greater than second.\r\n   */\r\n  min(num: number, isMultLanguageField: boolean, min: number): boolean {\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * 最小值验证\r\n   */\r\n  minValue(num: number | string, isMultLanguageField: boolean, min: number | string): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if ((typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) || (typeof min === 'string' && min.match(/^(-?\\d+)(\\.\\d+)?$/g))) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(min);\r\n      return value.isGreaterThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is less than second.\r\n   */\r\n  max(num: number, isMultLanguageField: boolean, max: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * 最大值验证\r\n   */\r\n  maxValue(num: number | string, isMultLanguageField: boolean, max: number | string): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if ((typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) || (typeof max === 'string' && max.match(/^(-?\\d+)(\\.\\d+)?$/g))) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(max);\r\n      return value.isLessThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's after the specified date.\r\n   */\r\n  minDate(date: Date, isMultLanguageField: boolean, minDate: Date): boolean {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() >= minDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's before the specified date.\r\n   */\r\n  maxDate(date: Date, isMultLanguageField: boolean, maxDate: Date): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (date === null || date === undefined) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() <= maxDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if a string is a boolean.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isBooleanString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isBoolean(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is numeric.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isNumberString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isNumeric(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string contains the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  contains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string does not contain the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  notContains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && !this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is an email.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isEmail(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isEmail(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is valid JSON (note: uses JSON.parse).\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isJSON(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isJSON(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is lowercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isLowercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLowercase(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is uppercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isUppercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isUppercase(value);\r\n  }\r\n\r\n  /**\r\n   * 验证字符串是否包含非法字符\r\n   * @param value 验证的字符串\r\n   * @param someChars 非法字符。如：#￥%@$\r\n   */\r\n  exclude(value: string, isMultLanguageField: boolean, someChars: string): boolean {\r\n    const arrChar = someChars.split('');\r\n    let counter = 0;\r\n    arrChar.forEach(val => {\r\n      if (this.contains(value, isMultLanguageField, val)) {\r\n        counter++;\r\n      }\r\n    });\r\n\r\n    return counter === 0;\r\n  }\r\n\r\n  /**\r\n   * 自定义正则验证\r\n   * @param value 待验证的字符串\r\n   * @param pattern 正则表达式\r\n   */\r\n  matches(value: string, isMultLanguageField: boolean, pattern: any): boolean {\r\n    value = (value === null || value === undefined) ? '' : value.toString();\r\n    if (value === '') {\r\n      return true;\r\n    }\r\n    return this.validatorJs.matches(value, pattern);\r\n  }\r\n}\r\n","import { Subject, Observable, from } from 'rxjs';\r\nimport { ChangeSet } from '../changeset/change_set';\r\nimport { Modification, ModifyType } from '../changeset/types';\r\nimport { Entity } from './entity';\r\nimport { EntityFactory } from './entity_creator';\r\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\r\nimport { Validator } from './validator/validator';\r\nimport { ValidationResult } from './validator/types';\r\n\r\nexport interface IList<T> {\r\n  [index: number]: T;\r\n}\r\n/**\r\n * 实体集合列表\r\n */\r\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\r\n  public __type__ = 'EntityList';\r\n\r\n  // #region 私有属性\r\n  private originalData: any[] = [];\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private rawData: T[];\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private listChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private validator = new Validator<T>();\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 集合改变时触发(新增、行记录修改、删除)\r\n   * @event\r\n   */\r\n  public onListChanged = this.listChanged.asObservable();\r\n\r\n  /**\r\n   * 获取项集合\r\n   */\r\n  public get items(): T[] {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 列表变更集\r\n   */\r\n  public get changes() {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 获取指定索引处的值\r\n   */\r\n  [index: number]: T;\r\n\r\n  /**\r\n   * 迭代器\r\n   */\r\n  *[Symbol.iterator](): Iterator<T> {\r\n    yield* this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据集合\r\n   * @param type 集合中的实体类型\r\n   */\r\n  constructor(data?: any[], type?: ClassType) {\r\n    this.clear();\r\n    if (data) {\r\n      // this.loadEntities(data);\r\n      data.forEach(item => {\r\n        this.initEntity(EntityFactory(type, item));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /** 加载实体列表 */\r\n  public loadEntities(entities: T[]) {\r\n    this.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.initEntity(entity);\r\n    });\r\n\r\n    // 发送Load变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: entities,\r\n      preValue: undefined,\r\n      type: ModifyType.Load,\r\n      target: this\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.rawData = [];\r\n    this.originalData = [];\r\n  }\r\n\r\n  /**\r\n   * 添加实体对象到集合中，并返回新加的对象\r\n   * @param entity 实体对象\r\n   * @param isCloned 克隆\r\n   */\r\n  public appendNew(entity: T, isCloned: boolean = false): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    if (isCloned === true) {\r\n      changeItem.type = ModifyType.Clone;\r\n    }\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param entity 实体\r\n   * @param position 插入位置\r\n   */\r\n  public insert(entity: T, position?: 1 | -1): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Insert,\r\n      position: position,\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(entity: T): void {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   */\r\n  public appendEntities(entities: T[]): void {\r\n    const newEntites = entities.map((entity: T) => {\r\n      return this.initEntity(entity, true);\r\n    });\r\n    const changeItem = {\r\n      path: [],\r\n      value: newEntites,\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\r\n   * @param primaryId 主键ID\r\n   */\r\n  public remove(primaryId: string): boolean {\r\n    const total = this.count();\r\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\r\n      return entity.primaryValue === primaryId;\r\n    });\r\n    if (indexToRemove === -1) {\r\n      return false;\r\n    }\r\n    const entityToRemove = this.rawData[indexToRemove];\r\n    this.rawData.splice(indexToRemove, 1);\r\n\r\n    // 删除变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\r\n      preValue: undefined,\r\n      type: ModifyType.Remove\r\n    };\r\n\r\n    this.updateIndex(total);\r\n    this.setChanges(changeItem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 从集合中获取指定ID值的实体对象\r\n   * @param id 主键值\r\n   */\r\n  public get(id: string) {\r\n    return this.items.find(item => {\r\n      return item.primaryValue === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将变更记录添加到集合变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(modinfo: Modification) {\r\n\r\n    // 向app层发送的变更\r\n    this.listChanged.next(modinfo);\r\n\r\n    // 构造向changeSet中添加的chagne\r\n    const change = Object.assign({}, modinfo);\r\n    if ((modinfo.type === ModifyType.Add || modinfo.type === ModifyType.Insert || modinfo.type === ModifyType.Clone) && modinfo.value[0] instanceof Entity) {\r\n      change.value = [modinfo.value[0].data];\r\n    }\r\n    this.changeSet.append(change);\r\n  }\r\n\r\n  /** 集合总记录数 */\r\n  public count() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /**\r\n   * 获取实体对象的索引值\r\n   */\r\n  public indexOf(entity: T): number {\r\n    return this.items.indexOf(entity);\r\n  }\r\n\r\n  /**\r\n   * 计算集合中某个属性的总和\r\n   * @param propertyName 属性名称\r\n   */\r\n  public sum(propertyName: string): number {\r\n    if (this.count() === 0) {\r\n      return 0;\r\n    }\r\n    return this.items.reduce((val, curr: T) => {\r\n      return val + curr[propertyName];\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * 集合数据验证\r\n   */\r\n  public validate(): Observable<ValidationResult> {\r\n    const propertyName = this.getPropertyName();\r\n    return from(this.validator.validate(this[PARENT_CLASS], propertyName));\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用toJSON方法代替\r\n   * @deprecated\r\n   */\r\n  public toJson() {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    this.items.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public toArray(): T[] {\r\n    return this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 私有方法\r\n\r\n  /**\r\n   * 实体初始化\r\n   * @param entity 实体\r\n   */\r\n  private initEntity(entity: T, isNewEntity: boolean = false): T {\r\n    entity[PARENT_CLASS] = this;\r\n    entity[PARENT_PATH] = this[PARENT_PATH];\r\n    entity.onValueChanged.subscribe((v: Modification) => {\r\n      const path = v.path;\r\n      const value = v.value;\r\n      const preValue = v.preValue;\r\n      const operator = v.type;\r\n      const subChanges = { path, value, preValue, type: operator };\r\n      if (v.changeSetValue !== undefined) {\r\n        subChanges['changeSetValue'] = v.changeSetValue;\r\n      }\r\n      this.setChanges(subChanges);\r\n    });\r\n    // TODO: 添加数据验证逻辑代码\r\n    const newLength = this.rawData.push(entity);\r\n    this[newLength - 1] = entity;\r\n    if (!isNewEntity) {\r\n      this.originalData.push(entity.toJSON());\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 更新索引\r\n   * @param total 总记录数\r\n   */\r\n  private updateIndex(total: number) {\r\n    for (let i = 0; i < total; i++) {\r\n      delete this[i];\r\n    }\r\n    this.rawData.forEach((entity, index) => {\r\n      this[index] = entity;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取属性名称\r\n   */\r\n  private getPropertyName() {\r\n    const path = this[PARENT_PATH];\r\n    if (path && path.length) {\r\n      const name = path[path.length - 1];\r\n      return name;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\n\r\n// export type ClassType = new (...args: any[]) => any;\r\nexport const BigNumberType = 'BigNumber';\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  pageIndex: number;\r\n  total: number;\r\n}\r\nexport interface ResultData {\r\n  data?: any[];\r\n  pagination?: Pagination;\r\n}\r\n\r\nexport enum DataChangeType { Add, Delete }\r\n\r\nexport interface DataChange {\r\n  /**\r\n   * 变更路径，主要针对带从表的情况\r\n   */\r\n  fpath?: string;\r\n  dataId: string;\r\n  changeType: DataChangeType;\r\n  [prop: string]: any;\r\n}\r\nexport enum HttpMethod {\r\n  GET = 'GET',\r\n  POST = 'POST',\r\n  PUT = 'PUT',\r\n  DELETE = 'DELETE'\r\n}\r\n\r\n/**\r\n * 后端消息\r\n */\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace BackEndMessage {\r\n  /**\r\n   * 消息级别\r\n   */\r\n  export enum Level {\r\n    Error = 'Error',\r\n    Info = 'Info',\r\n    Warning = 'Warning'\r\n  }\r\n  /**\r\n   * 后端消息对象\r\n   */\r\n  export interface IMessage {\r\n    context: IMessageContext;\r\n    bizMessages: IBizMessage[];\r\n  }\r\n  /**\r\n   * 消息位置\r\n   */\r\n  export interface ILocation {\r\n    /**\r\n     * 表名\r\n     */\r\n    nodeCode: string;\r\n    /**\r\n     * 对应的行\r\n     */\r\n    rows?: string[];\r\n    /**\r\n     * 对应的列\r\n     */\r\n    columns?: string[];\r\n  }\r\n  /**\r\n   * 消息结构\r\n   */\r\n  export interface IBizMessage {\r\n    /**\r\n     * 消息位置\r\n     */\r\n    location?: ILocation;\r\n    /**\r\n     * 消息内容\r\n     */\r\n    message: string;\r\n    /**\r\n     * 消息级别\r\n     */\r\n    level: Level;\r\n  }\r\n  /**\r\n   * 消息上下文\r\n   */\r\n  export interface IMessageContext {\r\n    ns: string;\r\n    appContext: AppContext;\r\n  }\r\n  /**\r\n   * 消息\r\n   * @description 接口执行成功，但有info/warning级别的消息\r\n   */\r\n  export class Message implements IMessage {\r\n    public context: IMessageContext;\r\n    public bizMessages: IBizMessage[];\r\n    constructor(bizMessages: IBizMessage[], context: IMessageContext) {\r\n      this.bizMessages = bizMessages;\r\n      this.context = context;\r\n    }\r\n  }\r\n  /**\r\n   * 消息处理程序\r\n   */\r\n  export interface IBackEndMessageHandler {\r\n    handle(message: IMessage, context?: any);\r\n  }\r\n}\r\n\r\nexport interface IMessageService {\r\n  /**\r\n   * 提示\r\n   * @param message\r\n   */\r\n  info(message: string);\r\n  /**\r\n   * 错误\r\n   * @param message\r\n   */\r\n  error(message: string);\r\n  /**\r\n   * 警告\r\n   * @param message\r\n   */\r\n  warning(message: string);\r\n}\r\n\r\nexport interface INotifyService {\r\n  /**\r\n   * 提示\r\n   * @param message\r\n   * @param options\r\n   */\r\n  info(message: string, options?: { [prop: string]: any });\r\n  /**\r\n   *\r\n   * @param content 成功提示\r\n   * @param options\r\n   */\r\n  success(content: string, options?: { [prop: string]: any });\r\n  /**\r\n   * 警告提示\r\n   * @param content\r\n   */\r\n  warning(content: string);\r\n  /**\r\n   * 错误提示\r\n   * @param content\r\n   * @param options\r\n   */\r\n  error(content: string, options?: { [prop: string]: any });\r\n}\r\n\r\nexport enum RunMode {\r\n  compatible = 'compatible',\r\n  highSpeed = 'highSpeed'\r\n}\r\n/**\r\n * 控制器运行模式，compatible | highSpeed\r\n */\r\nexport const DEVKIT_RUN_MODE = new InjectionToken<RunMode>('@farris/devkit_run_mode');\r\nexport interface IDisposable {\r\n  dispose(args?: IDisposeOptions);\r\n}\r\n/**\r\n * 组件类型\r\n */\r\nexport enum ComponentType {\r\n  farrisDataGridComponent = 'farrisDatagridComponent',\r\n  farrisTreeTalbeComponent = 'farrisTreeTalbeComponent',\r\n  primengTreeComponent = 'primengTreeComponent',\r\n  kendoGridComponent = 'kendoGridComponent'\r\n}\r\n\r\nexport type ChangeSetPolicy = 'entire' | 'valid';\r\nexport enum DestroyOpportunity {\r\n  AppContextDestroy = 'AppContextDestroy',\r\n  MenuOrAppClose = 'MenuOrAppClose'\r\n}\r\nexport interface IDisposeOptions {\r\n  opportunity: DestroyOpportunity;\r\n}\r\n\r\n","import { UserSettings } from \"./types\";\r\nexport class UserSettingsService {\r\n  private static userSettings: UserSettings = null;\r\n  private static timeZone: string = undefined;\r\n  private static timeZoneOffset: number = undefined;\r\n  public static setUserSettings(userSettings: UserSettings) {\r\n    this.userSettings = userSettings;\r\n    this.timeZone = undefined;\r\n    this.timeZoneOffset = undefined;\r\n  }\r\n  /**\r\n   * 获取用户配置的时区\r\n   */\r\n  public static getTimeZone() {\r\n    if (this.timeZone !== undefined) {\r\n      return this.timeZone;\r\n    }\r\n    const timeZone = this.userSettings && this.userSettings.timeZone || null;\r\n    this.timeZone = timeZone;\r\n    return timeZone;\r\n  }\r\n  public static getTimeZoneOffset() {\r\n    if (this.timeZoneOffset !== undefined) {\r\n      return this.timeZoneOffset;\r\n    }\r\n    const timeZoneOffset = this.userSettings && this.userSettings.timeZoneOffset || null;\r\n    this.timeZoneOffset = timeZoneOffset;\r\n    return timeZoneOffset;\r\n  }\r\n}","import moment from 'moment';\r\n//import { timezones } from './time_zones';\r\n//import { Timezone } from './types';\r\nexport class ZonedTime {\r\n  /**\r\n   * 将指定时区的时间转换为UTC时区时间（带时区）\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   */\r\n  // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment.tz(date, timeZone).utc().format();\r\n  // }\r\n  /**\r\n   * 将带时区的时间转换为指定时区的时间字符串\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   * @param format 时间格式\r\n   */\r\n  // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment(date).tz(timeZone).format(format);\r\n  // }\r\n  /**\r\n   * 获取标准时区名称\r\n   * @param tz 时区\r\n   */\r\n  // public static getStandardTimezoneName(tz: string) {\r\n  //   let momentZone = moment.tz.zone(tz);\r\n  //   let standardTimezone = tz;\r\n  //   if (!momentZone) {\r\n  //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));\r\n  //     standardTimezone = timezone && timezone.utc[0] || null;\r\n  //   }\r\n  //   return standardTimezone;\r\n  // }\r\n\r\n  public static zonedTimeToSpecialTimeZoneOffsetTimeString(date: Date | string | number, offset: number = 0, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    const utcTime = moment(date).utc();\r\n    const offsetMinutes = offset * 60;\r\n    const result = utcTime.add(offsetMinutes, 'm');\r\n    return result.format(format);\r\n  }\r\n  public static timeZoneOffsetTimeToUtcTimeString(date: Date | string | number, offset: number, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    return moment(date).utcOffset(offset, true).toISOString();\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * 路由参数服务\r\n */\r\n@Injectable()\r\nclass RouterParamService {\r\n\r\n  /**\r\n   * 获取参数\r\n   */\r\n  public getParams(url: string): any {\r\n    const allParams = this.getAllParams();\r\n    return allParams[url] || {};\r\n  }\r\n\r\n  /**\r\n   * 设置参数\r\n   */\r\n  public setParams(url: string, params: any) {\r\n    const allParams = this.getAllParams();\r\n    allParams[url] = params;\r\n    this.setAllParams(allParams);\r\n  }\r\n\r\n  /**\r\n   * 清空参数\r\n   */\r\n  public clearParams() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取全部参数\r\n   */\r\n  public getAllParams(): any {\r\n    const allParamsJson = window.sessionStorage.getItem('ROUTER_PARAMS') || '{}';\r\n    const allParams = JSON.parse(allParamsJson);\r\n    return allParams;\r\n  }\r\n\r\n  /**\r\n   * 设置所有的参数\r\n   */\r\n  public setAllParams(allParams: any): void {\r\n    allParams = allParams || {};\r\n    const allParamsJson = JSON.stringify(allParams);\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', allParamsJson);\r\n  }\r\n\r\n  /**\r\n   * 清空所有参数\r\n   */\r\n  public clearAllParams() {\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', '{}');\r\n  }\r\n}\r\n\r\nexport { RouterParamService };\r\n","/**\r\n * 变更相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 绑定数据变更\r\n */\r\nexport interface Change {\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ChangeType;\r\n\r\n  /**\r\n   * 变更路径\r\n   */\r\n  path: string[];\r\n\r\n  /**\r\n   * 变更后的值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 变更前的值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 错误信息\r\n   */\r\n  errors?: any;\r\n\r\n  /**\r\n   * 验证后回调，会将验证结果传入\r\n   */\r\n  cb?: Function;\r\n\r\n  /**\r\n   * 是否提交过，为true时开启输入时验证\r\n   */\r\n  isSubmitted?: boolean;\r\n\r\n  /**\r\n   * 在grid中使用，如果存在id，则将errors在form中以\r\n   * {\r\n   *  [id]: errors\r\n   * }\r\n   * 的形式保存一份\r\n   */\r\n  id?: string;\r\n\r\n  isUdt?: boolean;\r\n\r\n  isGrid?: boolean;\r\n  /**\r\n   * 新增\r\n   */\r\n  create?: boolean;\r\n  /**\r\n   * 复制\r\n   */\r\n  isCloned?: boolean;\r\n  /**\r\n   * 是否分层加载场景\r\n   */\r\n  isTreeNodeLoadScene?: boolean;\r\n  /**\r\n   * 详细信息\r\n   */\r\n  detail?: { [prop: string]: any };\r\n  /**\r\n   * 经过bindingList转发\r\n   */\r\n  isBindingListTransmited?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 绑定数据变更类型\r\n */\r\nexport enum ChangeType {\r\n  Update = 'Update',\r\n  Load = 'Load',\r\n  Append = 'Append',\r\n  Remove = 'Remove',\r\n  Swap = 'Swap',\r\n  SelectionChanged = 'SelectionChanged',\r\n  ValueChanged = 'ValueChanged',\r\n  UpdateErrors = 'UpdateErrors',\r\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\r\n  /**\r\n   * 分页信息变化\r\n   */\r\n  PaginationInfoChange = 'PaginationInfoChange'\r\n}\r\n\r\n/**\r\n * 视图变更\r\n */\r\nexport interface ViewChange {\r\n  type: ViewChangeType;\r\n  path: string[];\r\n  value: any;\r\n  preValue?: any;\r\n  context?: any;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 视图变更类型\r\n */\r\nexport enum ViewChangeType {\r\n  ValueChanged\r\n}\r\n\r\n/**\r\n * Form值变化事件\r\n */\r\nexport interface FormValueChange {\r\n  path: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  command: string; // 监听命令\r\n  entityChanged: boolean; // 实体是否已改变\r\n}\r\n\r\n/**\r\n * 实体值变化事件\r\n */\r\nexport interface EntityValueChange {\r\n  paths: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  changed: boolean; // 实体是否已改变\r\n  [prop: string]: any;\r\n}\r\n","/**\r\n * 绑定属性相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 属性类型\r\n */\r\nexport enum BindingPropertyType {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 对象类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List',\r\n\r\n  /**\r\n   * 动态类型\r\n   */\r\n  Dynamic = 'Dynamic'\r\n}\r\n\r\n\r\n/**\r\n * 绑定属性\r\n */\r\nexport interface BindingProperty {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type: BindingPropertyType;\r\n\r\n  /**\r\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\r\n   */\r\n  entityType?: any;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  isPrimaryKey?: boolean;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n}\r\n","import { Type } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\n\r\n/**\r\n * 属性工具类\r\n */\r\nclass PropertyUtil {\r\n\r\n  /**\r\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\r\n   * @param  entityType 实体类型\r\n   * @returns 绑定属性集合\r\n   */\r\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\r\n    const properties = [];\r\n\r\n    // Plain\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\r\n      const ngFieldProperty = ngFieldProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Plain,\r\n        isPrimaryKey: ngFieldProperty.primary,\r\n        isForeignKey: ngFieldProperty.foreign,\r\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\r\n      });\r\n    });\r\n\r\n    // Object\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\r\n      const ngObjectProperty = ngObjectProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Object,\r\n        entityType: ngObjectProperty.type\r\n      });\r\n    });\r\n\r\n    // List\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\r\n      const ngListProperty = ngListProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.List,\r\n        entityType: ngListProperty.type\r\n      });\r\n    });\r\n\r\n    // Dynamics\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\r\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Dynamic,\r\n        entityType: ngDynamicProperty.type\r\n      });\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\r\n    const properties = [];\r\n    Object.keys(dynamicData).forEach((propertyName: string) => {\r\n      if (dynamicData.hasOwnProperty(propertyName)) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Dynamic,\r\n            entityType: null\r\n          });\r\n        } else {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Plain,\r\n            isPrimaryKey: false,\r\n            isForeignKey: false\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return properties;\r\n  }\r\n  /**\r\n   * 根据属性名获取属性\r\n   */\r\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\r\n    const targetProperty = properties.find((property: BindingProperty) => {\r\n      return property.name === propertyName;\r\n    });\r\n    return targetProperty;\r\n  }\r\n\r\n  /**\r\n   * 获取实体主键名\r\n   * @param properties 属性集合\r\n   * @returns 主键名\r\n   */\r\n  static getPrimaryKey(properties: BindingProperty[]): string {\r\n\r\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\r\n    const primaryProperty = properties.find((property: BindingProperty) => {\r\n      return property.isPrimaryKey === true;\r\n    });\r\n    return primaryProperty ? primaryProperty.name : '';\r\n  }\r\n\r\n}\r\n\r\nexport { PropertyUtil };\r\n","import { Type } from \"@angular/core\";\r\nimport { ClassType } from \"../entity\";\r\nimport { BindingList } from \"./binding_list\";\r\nimport { BindingProperty } from \"./binding_property\";\r\n/**\r\n * BindingListTypeFactory\r\n */\r\nexport class BindingListTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingList>> = new Map<BindingProperty[], Type<BindingList>>();\r\n  public static create(bindingProperties: BindingProperty[]) {\r\n    const bindingListType = this.getType(bindingProperties);\r\n    const bindingList = new bindingListType(bindingProperties);\r\n    return bindingList;\r\n  }\r\n  /**\r\n   * 创建BindingList模板类\r\n   * @param bindingProperties \r\n   * @returns \r\n   */\r\n  private static createType(bindingProperties: BindingProperty[]): ClassType<BindingList> {\r\n    const bindingListType = class BindingListType extends BindingList {\r\n      constructor(properties: BindingProperty[]) {\r\n        super(properties);\r\n      }\r\n    }\r\n    const bindingListTypePrototype = bindingListType.prototype;\r\n    this.extendProperties(bindingListTypePrototype, bindingProperties);\r\n    return bindingListType;\r\n  }\r\n  /**\r\n   * 扩展BindingList模板类属性\r\n   * @param bindingListPrototype bindingList原型\r\n   * @param bindingProperties 属性数组\r\n   */\r\n  private static extendProperties(bindingListPrototype: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingListPrototype, propertyName, {\r\n        get: function () {\r\n          return this.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param bindingProperties bindingList属性\r\n   * @returns \r\n   */\r\n  private static getType(bindingProperties: BindingProperty[]): Type<BindingList> {\r\n    if (this.provider.has(bindingProperties)) {\r\n      return this.provider.get(bindingProperties);\r\n    }\r\n    const bindingListType = this.createType(bindingProperties);\r\n    this.provider.set(bindingProperties, bindingListType);\r\n    return bindingListType;\r\n  }\r\n}","/**\r\n * 绑定列表工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListTypeFactory } from './binding_list_type_factory';\r\nimport { BindingProperty } from './binding_property';\r\n\r\n/**\r\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\r\n *\r\n * **示例代码**\r\n * ```ts\r\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\r\n * const deptList = BindingListFactory.create(deptProperties);\r\n * ```\r\n */\r\nclass BindingListFactory {\r\n\r\n  /**\r\n   * 创建BindingList实例，并扩展其属性\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static create(bindingProperties: BindingProperty[]): BindingList {\r\n    // const bindingList = new BindingList(bindingProperties);\r\n    // this.extendProperties(bindingList, bindingProperties);\r\n    const bindingList = BindingListTypeFactory.create(bindingProperties);\r\n    return bindingList;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\r\n   * @param bindingList       要扩展的绑定列表\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingList, propertyName, {\r\n        get: () => {\r\n          return bindingList.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingListFactory };\r\n\r\n","import { Type } from '@angular/core';\r\n//import { Map as ImmutableMap } from 'immutable';\r\nimport { Change } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { ClassType } from '../entity';\r\nimport { BindingObject } from './binding_object';\r\nimport { TranslateService } from '../i18n/translate_service';\r\n// import { BindingObjectFactory } from './binding_object_factory';\r\n\r\n/**\r\n * BindingObjectTypeFactory\r\n */\r\nexport class BindingObjectTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingObject>> = new Map<BindingProperty[], Type<BindingObject>>();\r\n  /**\r\n   * 创建BindingObject\r\n   * @param properties\r\n   * @returns\r\n   */\r\n  public static create(properties: BindingProperty[]) {\r\n    const bindingObjectType = this.getType(properties);\r\n    return new bindingObjectType();\r\n  }\r\n  /**\r\n   * 创建原型类型\r\n   * @param properties\r\n   * @returns\r\n   */\r\n  private static createType(properties: BindingProperty[]): ClassType<BindingObject> {\r\n    // 继承原绑定对象所有属性\r\n    const bindingObjectType = class BindingObjectType extends BaseBindingObject {\r\n      constructor() {\r\n        super();\r\n        // this.innerValues = ImmutableMap(Object.assign({}, data));\r\n\r\n      }\r\n      //#endregion load\r\n\r\n      /*\r\n      public load(data: any) {\r\n        // data包含多语字段\r\n        this.innerValues = ImmutableMap(Object.assign({}, data));\r\n        this.properties.forEach((property: BindingProperty) => {\r\n          if (property.type === BindingPropertyType.List) {\r\n            this.loadLists(property);\r\n          } else if (property.type === BindingPropertyType.Object) {\r\n            this.loadObjects(property);\r\n          } else if (property.type === BindingPropertyType.Dynamic) {\r\n            this.loadDynamicObjects(property);\r\n          } else {\r\n            this.loadFields(property);\r\n          }\r\n        });\r\n      }\r\n      private loadFields(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const dataField = property.dataField || propertyName;\r\n        let value;\r\n        if (property.enableMultiLangInput) {\r\n          value = this.getValue(dataField, false);\r\n        } else {\r\n          value = this.getValue(propertyName);\r\n        }\r\n        this[propertyName] = value;\r\n      }\r\n      private loadLists(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const bindingList: BindingList = this[key];\r\n        if (bindingList) {\r\n          const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map(item => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n        }\r\n      }\r\n      private loadObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const value = this.getValue(propertyName) || {};\r\n        const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n        const bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n        this[key] = bindingObject;\r\n\r\n      }\r\n      private loadDynamicObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const value = this.getValue(propertyName) || {};\r\n        const dynamicObject = BindingObjectFactory.createDynamicBindingObject(value);\r\n        Object.defineProperty(this, propertyName, {\r\n          value: dynamicObject\r\n        });\r\n      }*/\r\n      //#endregion\r\n    };\r\n    // 获取主键\r\n    const primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n    // 设置主键\r\n    bindingObjectType.prototype.primaryKey = primaryKey;\r\n    bindingObjectType.prototype.properties = properties;\r\n    // 将属性扩展到原型对象上\r\n    this.extendProperties(bindingObjectType.prototype, properties);\r\n    return bindingObjectType;\r\n  }\r\n  /**\r\n   * 扩展原型属性\r\n   * @param typePrototype\r\n   * @param properties\r\n   */\r\n  private static extendProperties(typePrototype: BaseBindingObject, properties: BindingProperty[]) {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(typePrototype, property);\r\n      } else {\r\n        this.extendPlainProperty(typePrototype, property);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型列表属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendListProperty(typePrototype: BaseBindingObject, property: BindingProperty) {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingList = this[key];\r\n        if (!bindingList) {\r\n          bindingList = BindingListFactory.create(childListProperties);\r\n          this[key] = bindingList;\r\n          // 加载数据\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map((item) => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n          // 指定子List的parent、监听子List的changes事件\r\n          bindingList.parent = this;\r\n          bindingList.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            change.isBindingListTransmited = true;\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingList;\r\n      },\r\n      set: function (bindingList: BindingList) {\r\n        this[key] = bindingList;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型对象属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingObject = this[key];\r\n        if (!bindingObject) {\r\n          const value = this.getValue(propertyName) || {};\r\n          bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n          this[key] = bindingObject;\r\n          // 指定子Object的parent、监听子Object的changes事件\r\n          bindingObject.parent = this;\r\n          bindingObject.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingObject;\r\n      },\r\n      set: function (value: BaseBindingObject) {\r\n        this[key] = value;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型动态属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendDynamicObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    // Object.defineProperty(typePrototype, propertyName, {\r\n    //   value: null\r\n    // });\r\n    typePrototype[propertyName] = null;\r\n  }\r\n  /**\r\n   * 扩展原型简单属性\r\n   * @param typePrototype\r\n   * @param property\r\n   */\r\n  private static extendPlainProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        if (property.enableMultiLangInput === true) {\r\n          let value = this.getValue(propertyName, false);\r\n          if (!value) {\r\n            value = this.getValue(propertyName, false);\r\n            const langCode = TranslateService.getCurrentLanguage();\r\n            return { [langCode]: value };\r\n          }\r\n          return value;\r\n        } else {\r\n          const value = this.getValue(propertyName);\r\n          return value;\r\n        }\r\n      },\r\n      set: function (value: any) {\r\n        const oldValue = this.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        this.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param properties bindingList属性\r\n   * @returns\r\n   */\r\n  private static getType(properties: BindingProperty[]): Type<BindingObject> {\r\n    if (this.provider.has(properties)) {\r\n      return this.provider.get(properties);\r\n    }\r\n    const bindingObjectType = this.createType(properties);\r\n    this.provider.set(properties, bindingObjectType);\r\n    return bindingObjectType;\r\n  }\r\n}\r\n","/**\r\n * 绑定对象工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Change } from './changes';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingObjectTypeFactory } from './binding_object_type_factory';\r\n\r\n/**\r\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\r\n *\r\n * **扩展属性处理**\r\n *\r\n * 对于要扩展的属性（BindingProperty）有三种处理：\r\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\r\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\r\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\r\n *\r\n * **示例代码**\r\n *\r\n * ```ts\r\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\r\n * const empBindingObject = BindingObjectFactory.create(properties);\r\n * ```\r\n */\r\nclass BindingObjectFactory {\r\n\r\n  /**\r\n   * 创建BindingObject实例\r\n   * @param properties 要扩展的属性集合\r\n   * @returns 带扩展属性的空BindingObject对象\r\n   */\r\n  static create(properties: BindingProperty[], fromEntity?: boolean): BindingObject {\r\n    const bindingObjectType = BindingObjectTypeFactory.create(properties/*, data*/);\r\n    bindingObjectType.fromEntity = fromEntity;\r\n    return bindingObjectType;\r\n  }\r\n\r\n  static createDynamicBindingObject(data: any): BindingObject {\r\n    const properties = PropertyUtil.getDynamicProperties(data);\r\n    const object = BindingObjectTypeFactory.create(properties/*, data*/);//new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * 扩展属性绑定对象的属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 绑定属性集合\r\n   */\r\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(object, property);\r\n      } else {\r\n        this.extendPlainProperty(object, property);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展列表类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 列表类型的绑定属性集合\r\n   */\r\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childList = BindingListFactory.create(childListProperties);\r\n\r\n    // 指定子List的parent、监听子List的changes事件\r\n    childList.parent = object;\r\n    childList.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      change.isBindingListTransmited = true;\r\n      object.changes.next(change);\r\n    });\r\n\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childList\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展对象类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 对象类型的绑定属性集合\r\n   */\r\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childObject = this.create(childObjectProperties);\r\n\r\n    // 指定子Object的parent、监听子Object的changes事件\r\n    childObject.parent = object;\r\n    childObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childObject\r\n    });\r\n  }\r\n\r\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    object[propertyName] = null;\r\n  }\r\n\r\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\r\n    dynamicObject.parent = object;\r\n    dynamicObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n    Object.defineProperty(object, propertyName, {\r\n      value: dynamicObject\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展简单类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 简单类型的绑定属性集合\r\n   */\r\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(object, propertyName, {\r\n      get: () => {\r\n        return object.getValue(propertyName);\r\n      },\r\n      set: (value: any) => {\r\n        const oldValue = object.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        object.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { BindingObjectFactory };\r\n","import { Type } from '@angular/core';\r\nimport { makePropDecorator, makeDecorator } from '../metadata/index';\r\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\r\nimport { Form } from './form';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { ValidateRule } from '../entity';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgValidateForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_VALIDATE_FORM = 'NgValidateForm';\r\n\r\n/**\r\n * 表单描述\r\n */\r\nexport interface NgValidateForm {\r\n\r\n  /**\r\n   * Form名称，用于显示验证信息\r\n   */\r\n  formGroupName: string;\r\n  /**\r\n   * 是否启用验证\r\n   */\r\n  enableValidate: boolean;\r\n}\r\n\r\n/**\r\n * 表单装饰器\r\n */\r\nexport interface NgValidateFormDecorator {\r\n  (obj?: NgValidateForm): any;\r\n  new(obj?: NgValidateForm): any;\r\n}\r\n\r\n/**\r\n * 表单装饰器工厂\r\n */\r\nexport function NgValidateForm(options: NgValidateForm) {\r\n  const decoratorFactory = makeDecorator(NG_VALIDATE_FORM, (obj: NgValidateForm) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_CHILD_FORM = 'NgChildForm';\r\n\r\n/**\r\n * 子表单描述\r\n */\r\nexport interface NgChildForm {\r\n\r\n  /**\r\n   * 子表单类型\r\n   */\r\n  formType: Type<Form>;\r\n}\r\n\r\n/**\r\n * 子表单装饰器\r\n */\r\nexport interface NgChildFormDecorator {\r\n  (obj?: NgChildForm): any;\r\n  new(obj?: NgChildForm): any;\r\n}\r\n\r\n/**\r\n * 子表单装饰器工厂\r\n */\r\nexport const NgChildForm: NgChildFormDecorator =\r\n  makePropDecorator(NG_CHILD_FORM, (obj: NgChildForm) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildFormArray\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单数组装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_CHILD_FORM_ARRAY = 'NgChildFormArray';\r\n\r\n/**\r\n * 子表单数组描述\r\n */\r\nexport interface NgChildFormArray {\r\n\r\n  /**\r\n   * 子表单数组内子表单的类型\r\n   */\r\n  formType: Type<Form>;\r\n\r\n  /**\r\n   * 多行记录\r\n   */\r\n  multi?: boolean;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器\r\n */\r\nexport interface NgFormArrayDecorator {\r\n  (obj?: NgChildFormArray): any;\r\n  new(obj?: NgChildFormArray): any;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器工厂\r\n */\r\nexport const NgChildFormArray: NgFormArrayDecorator =\r\n  makePropDecorator(NG_CHILD_FORM_ARRAY, (obj: NgChildFormArray) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgFormControl\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 表单控件装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_FORM_CONTROL = 'NgFormControl';\r\n\r\n/**\r\n * 表单控件描述\r\n */\r\nexport interface NgFormControl {\r\n  /**\r\n   * 控件标识\r\n   */\r\n  id?: string;\r\n  /**\r\n   * 控件名称\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * 默认控件名称(多语环境翻译无值时使用)\r\n   */\r\n  defaultI18nValue?: string;\r\n\r\n  /**\r\n   * 绑定字段路径\r\n   */\r\n  binding?: string;\r\n\r\n  /**\r\n   * 值转换器\r\n   */\r\n  valueConverter?: ControlValueConverter;\r\n\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * 控件值更新时机\r\n   */\r\n  updateOn?: 'change' | 'blur' | 'submit';\r\n\r\n  /**\r\n   * 同步验证器\r\n   */\r\n  validators?: ValidatorFn | ValidatorFn[] | null;\r\n\r\n  /**\r\n   * 异步验证器\r\n   */\r\n  asyncValidatorFn?: AsyncValidatorFn | AsyncValidatorFn | null;\r\n\r\n  /**\r\n   * 验证规则\r\n   */\r\n  validRules?: ValidateRule | ValidateRule[] | null;\r\n\r\n  /**\r\n   * 值改变前监听器\r\n   */\r\n  valueChanging?: string;\r\n  /**\r\n   * 值改变后监听器\r\n   */\r\n  valueChanged?: string;\r\n  /**\r\n   * 大数\r\n   */\r\n  bigNumber?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器\r\n */\r\nexport interface NgFormControlDecorator {\r\n  (obj?: NgFormControl): any;\r\n  new(obj?: NgFormControl): any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器工厂\r\n */\r\nexport const NgFormControl: NgFormControlDecorator =\r\n  makePropDecorator(NG_FORM_CONTROL, (obj: NgFormControl) => obj);\r\n","/**\r\n * 数据路径处理\r\n */\r\nclass BindingPathConverter {\r\n\r\n  /**\r\n   * (BindingPathString | BindingPathArray) => BindingPathArray\r\n   * @param bindingPath BindingPath的字符串或者数组格式\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\r\n    let bindingPathArray: string[];\r\n    if (typeof bindingPath === 'string') {\r\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n        return part !== '';\r\n      });\r\n      return bindingPathArray;\r\n    } else {\r\n      bindingPathArray = bindingPath.concat([]);\r\n    }\r\n\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * BindingPathArray => BindingPathString\r\n   */\r\n  public static toBindingPathString(bindingPathArray: string[]): string {\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathConverter };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath比较器\r\n */\r\nclass BindingPathComparer {\r\n\r\n  /**\r\n   * 是否相等\r\n   */\r\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\r\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\r\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\r\n\r\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\r\n      return srcPathItem === dstPathArray[srcPathIndex];\r\n    });\r\n\r\n    return isEqual;\r\n  }\r\n\r\n  /**\r\n   * 是否是父路径\r\n   */\r\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\r\n\r\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\r\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\r\n\r\n    // 长度差1个\r\n    if (childPathArray.length !== parentPathArray.length + 1) {\r\n      return;\r\n    }\r\n\r\n    return this.isAncestor(childPath, parentPath);\r\n  }\r\n\r\n  /**\r\n   * 是否是祖先路径\r\n   */\r\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\r\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\r\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\r\n\r\n    if (descendantPath.length <= ancestorPathArray.length) {\r\n      return false;\r\n    }\r\n\r\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\r\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\r\n    });\r\n\r\n    return isAncestor;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingPathComparer };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath遍历器\r\n */\r\nclass BindingPathTraverser {\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return bindingPathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    bindingPathArray.pop();\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathTraverser };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil\r\n} from '../../binding-data/index';\r\nimport { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * EntityPath转换器\r\n */\r\nclass EntityPathConverter {\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityPathConverter };\r\n","\r\n/**\r\n * 实体路径比较器\r\n */\r\nclass EntityPathComparer {\r\n}\r\n\r\nexport { EntityPathComparer };\r\n","\r\n/**\r\n * 表单路径转换类\r\n */\r\nclass FormPathConverter {\r\n\r\n  /**\r\n   * ControlPathString => BingingPathArray\r\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(formPahtString: string): string[] {\r\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n}\r\n\r\nexport { FormPathConverter };\r\n","/**\r\n * 数据路径转换、比较等工具类\r\n * @summary\r\n * ----------------------------------------\r\n * 术语：\r\n * BindingPath：数组形式；\r\n * BindingPathString：BindingPath的字符串形式，用/分隔；\r\n * ControlPathString：BindingPath的字符串形式，用.分隔；\r\n *\r\n * EntityPath：数组形式；\r\n * EntityPathString：EntityPath的字符串形式，使用/分隔；\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 路径处理工具类\r\n * @summary\r\n * --------------------------------------------------------------------------------\r\n * 路径现状\r\n *\r\n * 字符串格式\r\n * 1、BindingPath（/edus/grades/id）：主要用于表达式解析；\r\n * 2、ControlPath（edus.grades.id）： 主要用于FormControl的binding；\r\n * 3、RestPath（/empId/edus/eduId/grades/gradeId）：主要用于创建Rest\r\n * 数组格式：\r\n * 1、BindingPathArray（['edus', 'grades', 'id']）：BindingData模块中使用；\r\n * 2、EntityPathArray（['id:empId', 'edus', 'id:eduId', 'id']）：Entity模块中使用；\r\n * --------------------------------------------------------------------------------\r\n * 转换原则\r\n * 1、除了该工具类，不允许再出现路径转换、比较的方法；\r\n * 2、如果有特殊情况，先在该类中实现对应的方法；\r\n * 1、对于BindingPath、ControlPath统一转换成BingdingPathArray比较\r\n * 2、对于EntityPath统一转换成EntityPathArray进行比较；\r\n * --------------------------------------------------------------------------------\r\n * @todo\r\n * 1909中使用统一的数据结构（双向链表）进行存储，来解决目前混乱的情况\r\n */\r\n\r\n export * from './binding_path_converter';\r\n export * from './binding_path_comparer';\r\n export * from './binding_path_traverser';\r\n export * from './entity_path_converter';\r\n export * from './entity_path_comparer';\r\n export * from './form_path_converter';\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:25:38\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 09:39:10\r\n */\r\n\r\n\r\n/**\r\n * 路径类型\r\n */\r\nenum DataPathNodeType {\r\n\r\n  /**\r\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\r\n   */\r\n  DataId   = 'DataId',\r\n\r\n  /**\r\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\r\n   */\r\n  PropName = 'PropName',\r\n}\r\n\r\n\r\n/**\r\n * 路径节点\r\n */\r\nclass DataPathNode {\r\n\r\n  /**\r\n   * 上一节点\r\n   */\r\n  prev: DataPathNode;\r\n\r\n  /**\r\n   * 下一节点\r\n   */\r\n  next: DataPathNode;\r\n\r\n  /**\r\n   * 节点类型\r\n   */\r\n  type: DataPathNodeType;\r\n\r\n  /**\r\n   * 路径数据\r\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\r\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(type: DataPathNodeType, data: any) {\r\n    this.type = type;\r\n    this.value = data;\r\n\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n\r\nexport { DataPathNodeType, DataPathNode };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:26:41\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-01-15 22:00:45\r\n */\r\n\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\n/**\r\n * 变更路径（简单双向列表）\r\n */\r\nclass DataPath {\r\n\r\n  /**\r\n   * 头节点\r\n   */\r\n  public head: DataPathNode;\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  public length: number;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.head = new DataPathNode(null, null);\r\n    this.length = 0;\r\n  }\r\n\r\n  /**\r\n   * 添加一个节点到头部\r\n   */\r\n  public unshift(type: DataPathNodeType, data: any) {\r\n    const newNode = new DataPathNode(type, data);\r\n    newNode.next = this.head.next;\r\n    newNode.prev = this.head;\r\n\r\n    this.head.next = newNode;\r\n    if (newNode.next) {\r\n      newNode.next.prev = newNode;\r\n    }\r\n\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 在链表最后追加一个节点\r\n   */\r\n  public push(type: DataPathNodeType, data: any) {\r\n    const tailNode = this.getTail();\r\n    const newNode = new DataPathNode(type, data);\r\n    tailNode.next = newNode;\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 获取链表尾部节点\r\n   */\r\n  public getTail(): DataPathNode {\r\n    let lastNode = this.head;\r\n    while (lastNode.next) {\r\n      lastNode = lastNode.next;\r\n    }\r\n    return lastNode;\r\n  }\r\n\r\n  /**\r\n   * 转换为数组格式\r\n   */\r\n  public toArray() {\r\n    const pathArray = [];\r\n    let currentNode = this.head.next;\r\n    while (currentNode) {\r\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为字符串格式\r\n   */\r\n  public toString() {\r\n    const pathArray = this.toArray();\r\n    const pathString = pathArray.join(', ');\r\n    return `[${pathString}]`;\r\n  }\r\n\r\n  /**\r\n   * 拷贝\r\n   */\r\n  public clone(): DataPath {\r\n    const newDataPath = new DataPath();\r\n    let curDataNode = this.head.next;\r\n    while (curDataNode) {\r\n      newDataPath.push(curDataNode.type, curDataNode.value);\r\n      curDataNode = curDataNode.next;\r\n    }\r\n    return newDataPath;\r\n  }\r\n}\r\n\r\nexport { DataPath };\r\n","\r\nimport { DataTypeInfo, DataPropGroup  } from '../../core/index';\r\nimport { Entity  } from '../../entity/index';\r\nimport { Repository, EntityManager } from '../../repository/index';\r\nimport { BindingData } from '../../binding-data/index';\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\nimport { DataPath } from './data_path';\r\n\r\n/**\r\n * 数据Path工厂类\r\n */\r\nclass DataPathCreator {\r\n\r\n  /**\r\n   * 将长路径数组或字符串转换为\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   */\r\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\r\n    const dataPath = new DataPath();\r\n    const fullPathArray = fullPathArrayOrString as string[];\r\n    if (!fullPathArray || fullPathArray.length === 0) {\r\n      return dataPath;\r\n    }\r\n\r\n    let currentNodeInfo = {\r\n      nodeValue: fullPathArray.shift(),\r\n      nodeType: DataPathNodeType.DataId,\r\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\r\n    };\r\n    while (currentNodeInfo) {\r\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\r\n\r\n      // 处理下一个节点\r\n      const nextNodeValue = fullPathArray.shift();\r\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\r\n        break;\r\n      }\r\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\r\n    }\r\n\r\n    return dataPath;\r\n  }\r\n\r\n  /**\r\n   * 获取下一个路径节点的信息\r\n   * @param parentNodeInfo 当前路径节点信息\r\n   * @param nextNodeValue 下一个路径节点的值\r\n   * @summary\r\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\r\n   * 2、多个因素混用了一个结构；\r\n   */\r\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\r\n\r\n    const parentNodeValue = parentNodeInfo.nodeValue;\r\n    const parentNodeType = parentNodeInfo.nodeType;\r\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\r\n\r\n    if (!nextNodeValue || !parentEntityTypeInfo) {\r\n      return null;\r\n    }\r\n\r\n    const nextPathNodeInfo = {\r\n      nodeValue: nextNodeValue,\r\n      nodeType: null,\r\n      entityTypeInfo: null\r\n    };\r\n\r\n\r\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\r\n    if (parentNodeType === DataPathNodeType.DataId) {\r\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\r\n    } else {\r\n\r\n      // DataNodeType=Object：必然对应一个属性信息\r\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\r\n      if (nextPropInfo.group === DataPropGroup.List) {\r\n\r\n        // EntityPropGroup=EntityList：下一个节点是List类型。\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\r\n      } else {\r\n\r\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\r\n        // EntityPropGroup=Dynamic|Plain：null\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\r\n      }\r\n    }\r\n\r\n    return nextPathNodeInfo;\r\n  }\r\n\r\n  /**\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   * 2、shortPathArrayOrString暂时只支持字符串数组\r\n   */\r\n  public static createByShortPathFromRoot(\r\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\r\n  ): DataPath {\r\n\r\n    const dataPath = new DataPath();\r\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\r\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n\r\n    // 遍历下级节点\r\n    shortPathArray.forEach((propName: string) => {\r\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\r\n      switch (propInfo.group) {\r\n        case DataPropGroup.Plain:\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          break;\r\n        case DataPropGroup.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n\r\n          break;\r\n        case DataPropGroup.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return dataPath;\r\n  }\r\n\r\n}\r\n\r\nexport { DataPathCreator };\r\n","/**\r\n * 获取path对应的实体\r\n * @summary\r\n * 关于path的格式如下：\r\n * - 主表：[parentId]\r\n * - 主表关联: [parentId, assoInfo]\r\n * - 从表: [parentId, child1s, child1Id]\r\n * - 从表关联：[parentId, child1s, child1Id, assoInfo]\r\n * - 从从表: [parentId, child1s, child1Id, grand11s, grand11Id]\r\n * - 从从表关联：[parentId, child1s, child1Id, grand11s, grand11Id, assoInfo]\r\n */\r\n\r\n\r\n\r\nexport * from './data_path_node';\r\nexport * from './data_path';\r\nexport * from './data_path_creator';\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-08-14 14:11:51\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-08-14 16:11:51\r\n */\r\n\r\nimport { DataTypeInfo } from './data_type_info';\r\n\r\n\r\n/**\r\n * 实体属性分组\r\n */\r\nenum DataPropGroup {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 动态实体类型\r\n   */\r\n  Dynamic = 'Dynamic',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List'\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实体属性信息\r\n */\r\nclass DataPropInfo {\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  public group: DataPropGroup;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * 影射名称\r\n   */\r\n  public mapping: string;\r\n\r\n  /**\r\n   * 属性类型描述\r\n   */\r\n  public typeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 元数据信息\r\n   * @todo\r\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\r\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\r\n   */\r\n  public metadataInfo?: any;\r\n  /**\r\n   * 是否vo字段\r\n   */\r\n  public isVOField?: boolean;\r\n}\r\n\r\nexport { DataPropGroup, DataPropInfo };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-07 09:05:09\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 20:35:02\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport {\r\n  NgProperty, NgFieldProperty, NgObjectProperty, NgDynamicProperty, NgListProperty,\r\n  EntityMetadataUtil,\r\n  NgEntity\r\n} from '../../entity/metadata/index';\r\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\r\n\r\n/**\r\n * 实体类型信息\r\n * @todo：\r\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\r\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\r\n */\r\nclass DataTypeInfo {\r\n  public entityInfo: NgEntity;\r\n\r\n  /**\r\n   * 数据类型\r\n   */\r\n  public type: Type<any>;\r\n\r\n  /**\r\n   * 属性集合\r\n   */\r\n  public propInfoMap: Map<string, DataPropInfo>;\r\n\r\n  /**\r\n   * 主键\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 外键\r\n   */\r\n  public foreignKey: string;\r\n\r\n  /**\r\n   * 是否为值对象\r\n   */\r\n  public get isValueObject() {\r\n    return !this.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   * @todo：不应该识别\r\n   */\r\n  constructor(type: any) {\r\n    this.type = type;\r\n    this.primaryKey = '';\r\n    this.foreignKey = '';\r\n    this.propInfoMap = new Map<string, DataPropInfo>();\r\n    this.collectEntityInfos();\r\n    this.collectPropInfos();\r\n  }\r\n  public getBindingPathByTableName(tableName: string): string {\r\n    const fullEntityPath = this.getFullEntityPath(this, tableName);\r\n    if (!fullEntityPath) {\r\n      return null;\r\n    }\r\n    fullEntityPath.splice(0, 1);\r\n    return '/' + fullEntityPath.join('/');\r\n  }\r\n  private getFullEntityPath(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = []) {\r\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      return paths;\r\n    }\r\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\r\n    if (props.length < 1) {\r\n      paths = [];\r\n      return paths;\r\n    }\r\n    if (dataTypeInfo.entityInfo) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n    }\r\n\r\n    for (let idx = 0; idx < props.length; idx++) {\r\n      const dataTypeInfo = props[idx].typeInfo;\r\n      const path = this.getFullEntityPath(dataTypeInfo, tableName);\r\n      if (!path || path.length < 1) {\r\n        continue;\r\n      } else {\r\n        paths = paths.concat(path);\r\n        return paths;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取全部属性信息\r\n   */\r\n  public getPropInfos(): DataPropInfo[] {\r\n    return Array.from(this.propInfoMap.values()).filter((propInfo) => !propInfo.isVOField);\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性的名称\r\n   */\r\n  public getPropNames(): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfos();\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性信息数组\r\n   */\r\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\r\n    const allPropInfos = Array.from(this.propInfoMap.values());\r\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\r\n      return propInfo.group === group && !propInfo.isVOField;\r\n    });\r\n    return propInfos;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性名称数组\r\n   * @param group 属性分组\r\n   */\r\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfosByGroup(group);\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据propName获取属性信息\r\n   */\r\n  public getPropInfoByName(propName: string): DataPropInfo {\r\n    if (this.propInfoMap.has(propName)) {\r\n      return this.propInfoMap.get(propName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取属性信息\r\n   */\r\n  public getPropInfoByPath(path: string[]): DataPropInfo {\r\n\r\n    // 先复制，防止shift方法产生污染\r\n    const arrPath = path.concat([]);\r\n    if (arrPath.length === 0) {\r\n      throw Error(`属性路径不能为空`);\r\n    }\r\n\r\n    // 循环查找\r\n    let typeInfo = this;\r\n    let propInfo = null;\r\n    while (typeInfo && arrPath.length > 0) {\r\n\r\n      const propName = arrPath.shift();\r\n      propInfo = typeInfo.getPropInfoByName(propName);\r\n      if (!propInfo) {\r\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\r\n      }\r\n      typeInfo = propInfo.typeInfo;\r\n\r\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\r\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\r\n        propInfo = null;\r\n        typeInfo = null;\r\n      }\r\n    }\r\n\r\n    return propInfo;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取对应属性的TypeInfo\r\n   */\r\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\r\n\r\n    // 空数组时返回\r\n    if (path.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    // 获取对应属性信息\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo.typeInfo) {\r\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\r\n    }\r\n\r\n    return propInfo.typeInfo;\r\n  }\r\n\r\n  /**\r\n   * 获取主键的属性信息\r\n   */\r\n  public getPrimaryKeyPropInfo(): DataPropInfo {\r\n    return this.getPropInfoByName(this.primaryKey);\r\n  }\r\n\r\n  /**\r\n   * 根据name获取影射名\r\n   */\r\n  public getPropMappingByName(name: string): string {\r\n    const propInfo = this.getPropInfoByName(name);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取映射名\r\n   */\r\n  public getPropMappingByPath(path: string[]): string {\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 检查属性是否属于特定的分组\r\n   */\r\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\r\n    const propInfo = this.getPropInfoByName(propName);\r\n    if (propInfo && propInfo.group === propGroup) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------------\r\n   * 属性元数据 => 属性描述信息\r\n   * --------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * 搜集所有属性信息\r\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\r\n   */\r\n  private collectPropInfos() {\r\n\r\n    // 简单属性\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        this.primaryKey = propName;\r\n      }\r\n      if (ngProperty.foreign === true) {\r\n        this.foreignKey = propName;\r\n      }\r\n      this.addPropInfo(DataPropGroup.Plain, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体属性\r\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\r\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityProperties[propName] as NgObjectProperty;\r\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n\r\n    // 动态实体属性\r\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      const ngProperty = ngDynamicProperties[propName] as NgDynamicProperty;\r\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体列表属性\r\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\r\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityListProperties[propName] as NgListProperty;\r\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n  }\r\n  private collectEntityInfos() {\r\n    let entityInfo = EntityMetadataUtil.getNgEntityMatadata(this.type);\r\n    if (!entityInfo) {\r\n      // 应用于解析表单\r\n      entityInfo = {\r\n        originalCode: this.type[\"code\"],\r\n        nodeCode: this.type[\"label\"]\r\n      };\r\n    }\r\n    this.entityInfo = entityInfo;\r\n\r\n  }\r\n  /**\r\n   * 添加属性信息\r\n   */\r\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: NgProperty) {\r\n\r\n    // 没有设置影射时，用属性名充当影射\r\n    mapping = mapping ? mapping : name;\r\n    let typeInfo = null;\r\n    if (type) {\r\n      typeInfo = new DataTypeInfo(type);\r\n    }\r\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\r\n    this.propInfoMap.set(name, propInfo);\r\n    // 将vo字段也加入便于表达式查找\r\n    const originalDataField = metadataInfo && metadataInfo.originalDataField;\r\n    if (originalDataField && !this.propInfoMap.has(originalDataField)) {\r\n      this.propInfoMap.set(originalDataField, { ...propInfo, isVOField: true });\r\n    } else if (metadataInfo && metadataInfo.type) {\r\n      const entityInfo = EntityMetadataUtil.getNgEntityMatadata(metadataInfo.type);\r\n      if (entityInfo && entityInfo.originalCode) {\r\n        this.propInfoMap.set(entityInfo.originalCode, { ...propInfo, isVOField: true });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { DataTypeInfo };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { ChangeSetPolicy, IMessageService, INotifyService } from './types';\r\n/**\r\n * 表单模块路径\r\n */\r\nexport const FORM_PATH_TOKEN = new InjectionToken<string>('@farris/devkit form path token');\r\n/**\r\n * 后端消息处理器\r\n */\r\nexport const BACK_END_MESSAGE_HANDLER_TOKEN = new InjectionToken<string>('@farris/devkit_back_end_message_handler');\r\nexport const MESSAGE_SERVICE_TOKEN = new InjectionToken<IMessageService>('@farris/message_service_token');\r\nexport const NOTIFY_SERVICE_TOKEN = new InjectionToken<INotifyService>('@farris/notify_service_token');\r\n/**\r\n * 变更集提交策略,entire | valid\r\n * @description entire是指提交所有变更，valid是指仅提交前端校验通过的变更\r\n */\r\nexport const CHANGE_SET_POLICY_TOKEN = new InjectionToken<ChangeSetPolicy>('@farris/changeset_policy_token');\r\n/**\r\n * 启用服务器端变更检测\r\n */\r\nexport const ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN = new InjectionToken<boolean>('@farris/enable_server_side_change_detection_token');\r\n/**\r\n * 启用编辑态过滤排序\r\n */\r\nexport const ENABLE_EDIT_STATE_FILTER_SORTING = new InjectionToken<boolean>('@farris/enable_edit_state_filter_sorting_token');\r\n","\r\n/**\r\n  * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\r\n  *\r\n  * This function will take an already-encoded URL and encode all the non-URL\r\n  * code points. This function will not encode the \"%\" character unless it is\r\n  * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\r\n  * be encoded as `%25foo`).\r\n  *\r\n  * This encode is meant to be \"safe\" and does not throw errors. It will try as\r\n  * hard as it can to properly encode the given URL, including replacing any raw,\r\n  * unpaired surrogate pairs with the Unicode replacement character prior to\r\n  * encoding.\r\n  *\r\n  * @param {string} url\r\n  * @return {string}\r\n  * @public\r\n  */\r\n\r\n export function encodeUrl(url) {\r\n  const ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\r\n  return String(url)\r\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\r\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\r\n    .replace(/#/g,'%23').replace(/&/g,'%26')\r\n}","export class Core {\r\n  public static warn(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.warn(message, ...optionalParams);\r\n  }\r\n  public static error(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.error(message, ...optionalParams);\r\n  }\r\n  public static log(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.log(message, ...optionalParams);\r\n  }\r\n  private static logable(): boolean {\r\n    return window && window.localStorage && window.localStorage.getItem('__DEVKIT_LOGABLE__') === 'true' || false;\r\n  }\r\n}","export function escape(value: string) {\r\n  if (!value || typeof value !== 'string') {\r\n    return value;\r\n  }\r\n  return value\r\n    .replace(/[\\\\]/g, '\\\\\\\\')\r\n    .replace(/[\\\"]/g, '\\\\\\\"')\r\n    .replace(/[\\/]/g, '\\\\/')\r\n    .replace(/[\\b]/g, '\\\\b')\r\n    .replace(/[\\f]/g, '\\\\f')\r\n    .replace(/[\\n]/g, '\\\\n')\r\n    .replace(/[\\r]/g, '\\\\r')\r\n    .replace(/[\\t]/g, '\\\\t');\r\n}","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface IResolver {\r\n  resolve(expr: string): string[];\r\n}\r\nexport const RESOLVER_TOKEN = new InjectionToken('@farris_resolver_token');\r\nexport const ENTITY_TEMPLATE = 'ENTITY~';\r\nexport const STATE_TEMPLATE = 'STATE~';\r\nexport const GROUP_FUNCTIONS = ['SumByProp', 'CountByProp', 'AvgByProp', 'MaxByProp', 'MinByProp', 'IsExistRecord', 'ListContains', 'ListGreaterThan', 'ListLessThan', 'ListStartWith', 'ListEndWith', 'MultiplyChildNumber', 'SortChildData', 'IsContainMatch', 'MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'];\r\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { IResolver, RESOLVER_TOKEN } from './types';\r\n\r\n@Injectable()\r\nexport class ResolverRegistry{\r\n  constructor(private injector: Injector, @Optional() @Inject(RESOLVER_TOKEN) public resolvers: Array<IResolver>){}\r\n}","import { Type } from '@angular/core';\r\nimport { makeDecorator } from '../metadata/index';\r\n\r\nexport const NG_REPOSITORY = 'NgRepository';\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport interface NgRepository {\r\n\r\n  /**\r\n     * API地址\r\n     */\r\n    apiUrl: string;\r\n\r\n    /**\r\n     * 实体类型\r\n     */\r\n    entityType: Type<any>;\r\n}\r\n\r\n/**\r\n * NgRepositoryDecorator\r\n */\r\nexport interface NgRepositoryDecorator {\r\n    (obj?: NgRepository): any;\r\n    new(obj?: NgRepository): any;\r\n}\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport function NgRepository(options: NgRepository) {\r\n  const decoratorFactory = makeDecorator(NG_REPOSITORY, (obj: NgRepository) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-01 19:36:51\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:46:42\r\n */\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Subject } from 'rxjs';\r\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\r\nimport { ChangeSetPolicy } from '../core';\r\n// tslint:disable: no-bitwise\r\n/**\r\n * 实体集合\r\n * @todo：应该用EntityList代替。\r\n */\r\nclass EntityCollection<T extends Entity> {\r\n\r\n  /**\r\n   * 内部实体Set\r\n   */\r\n  private innerEntitySet: Set<T>;\r\n  /**\r\n   * 变更提交策略\r\n   */\r\n  private _changeSetPolicy: ChangeSetPolicy;\r\n  /**\r\n   *变更策略 \r\n   */\r\n  public set changeSetPolicy(policy: ChangeSetPolicy) {\r\n    this._changeSetPolicy = policy;\r\n  }\r\n  public get changeSetPolicy(): ChangeSetPolicy {\r\n    return this._changeSetPolicy;\r\n  }\r\n  /**\r\n   * 内部实体Map\r\n   */\r\n  private innerEntityMap: Map<string, T>;\r\n  public changes: Subject<Modification>;\r\n\r\n  /**\r\n   * Entity集合变更流\r\n   */\r\n  public collectionChanged: Subject<Modification>;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public readonly entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public readonly primaryKey: string;\r\n\r\n  /**\r\n   * 实体当前分页信息\r\n   */\r\n  public paginationInfo: any;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityType: any) {\r\n    this.innerEntitySet = new Set<T>();\r\n    this.innerEntityMap = new Map<string, T>();\r\n    this.collectionChanged = new Subject<Modification>();\r\n    this.changes = new Subject<Modification>();\r\n    this.entityType = entityType;\r\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 实体数量\r\n   */\r\n  public count(): number {\r\n    return this.innerEntitySet.size;\r\n  }\r\n\r\n  public get entityTypeName() {\r\n    return this.entityType.name;\r\n  }\r\n  /**\r\n   * 是否包含指定主键值的实体\r\n   * @param id 主键值\r\n   */\r\n  public has(id: string): boolean {\r\n    return this.innerEntityMap.has(id);\r\n  }\r\n\r\n  /**\r\n   * 清空全部实体\r\n   */\r\n  public clear() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\r\n  }\r\n  /**\r\n   * 清空全部实体\r\n   * @param isReset 是否为重置实体操作\r\n   */\r\n  public reset(notify: boolean = true) {\r\n    this.innerEntityMap.forEach(entity => {\r\n      entity.unsubscribe.next();\r\n      entity.unsubscribe.complete();\r\n    });\r\n    this.innerEntitySet.forEach(entity => {\r\n      entity.unsubscribe.next();\r\n      entity.unsubscribe.complete();\r\n    });\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    if (notify === true) {\r\n      const modification = new Modification([], ModifyType.Load);\r\n      modification.isReset = true;\r\n      this.notifyCollectionChanged(modification);\r\n    }\r\n  }\r\n  /**\r\n   * 转换为实体数组\r\n   */\r\n  public toArray(): Entity[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON数组\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    const entities = this.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 批量加载实体\r\n   */\r\n  public loadEntities(entities: any[], entityCreate: boolean = false) {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.extendChangeSetPolicyProperty(entity);\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    const modification = new Modification(entities, ModifyType.Load);\r\n    modification.entityCreate = entityCreate;\r\n    this.notifyCollectionChanged(modification);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param entity 要追加的实体\r\n   * @param isCloned 实体是否是克隆的\r\n   */\r\n  public addEntity(entity: any, isCloned: boolean = false) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.extendChangeSetPolicyProperty(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    const modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;\r\n    this.notifyCollectionChanged(new Modification([entity], modifyType));\r\n  }\r\n  /**\r\n   * 在当前行前或后插入数据\r\n   * @param entity 实体\r\n   * @param position 位置\r\n   */\r\n  public insertEntity(entity: any, position: 1 | -1) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.extendChangeSetPolicyProperty(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));\r\n  }\r\n  /**\r\n   * 更新实体\r\n   * @param entity entity\r\n   * @param data 实体数据\r\n   */\r\n  public updateEntity(entity: any, data: any) {\r\n    entity.load(data);\r\n    this.notifyCollectionChanged(new Modification(data, ModifyType.Update, null, null));\r\n  }\r\n  /**\r\n   * 批量追加实体\r\n   * @param entities 要加载的实体数组\r\n   */\r\n  public addEntities(entities: any[], options: any = null) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.extendChangeSetPolicyProperty(entity);\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    const isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;\r\n    const modification = new Modification(entitiesToAdd, ModifyType.Add);\r\n    modification.isTreeNodeLoadScene = isTreeNodeLoadScene;\r\n    this.notifyCollectionChanged(modification);\r\n  }\r\n  /**\r\n   * 添加实体（不切换当前行）\r\n   * @param entities 实体\r\n   */\r\n  public addData(entities: any[], options: any = null) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.extendChangeSetPolicyProperty(entity);\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    // 针对树分层加载场景\r\n    const isTreeNodeLoadScene = options && options.isTreeNodeLoadScene || false;\r\n    const modification = new Modification(entitiesToAdd, ModifyType.AddData);\r\n    modification.isTreeNodeLoadScene = isTreeNodeLoadScene;\r\n    this.notifyCollectionChanged(modification);\r\n  }\r\n  /**\r\n   * 为实体扩展变更策略属性\r\n   * @param entity \r\n   */\r\n  private extendChangeSetPolicyProperty(entity: any){\r\n    if (entity) {\r\n      entity.changeSetPolicy = this.changeSetPolicy;\r\n    }\r\n  }\r\n  /**\r\n   * 根据主键值获取实体\r\n   */\r\n  getEntityById(identity: string): any {\r\n    if (this.innerEntityMap.has(identity) === false) {\r\n      return null;\r\n    }\r\n    const entity = this.innerEntityMap.get(identity);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 根据路径获取实体\r\n   */\r\n  getEntityByPath(pathArray: string[]): any {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let parentNode: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\r\n      const currentPath = pathArray[i];\r\n      if ((parentNode instanceof Entity) || (\r\n        parentNode.typeName === 'ConcreteEntityPrototype')\r\n      ) {\r\n        // @todo：强识了别冒号\r\n        if (currentPath.indexOf(':') === -1) {\r\n          parentNode = parentNode[pathArray[i]];\r\n        }\r\n      } else {\r\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\r\n      }\r\n    }\r\n    return parentNode;\r\n  }\r\n  /**\r\n   * id:1/a/id:2/c\r\n   * @param pathArray 路径数组\r\n   */\r\n  public getEntitiesByPath(pathArray: string[]) {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let entity: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && entity; i += 2) {\r\n      const path = pathArray[i];\r\n      entity = entity[path];\r\n      if (!(entity instanceof EntityList)) {\r\n        throw new Error('路径格式错误');\r\n      }\r\n      if ((i + 1) < pathArray.length) {\r\n        const id = pathArray[i + 1].split(':')[1];\r\n        entity = entity.get(id);\r\n      }\r\n    }\r\n    return entity;\r\n  }\r\n  /**\r\n   * 返回符合指定条件的实体集合\r\n   * @param predicate 条件谓词\r\n   */\r\n  getEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entities: any[] = Array.from(this.innerEntitySet);\r\n    const matchedEntities = entities.filter(predicate);\r\n    return matchedEntities;\r\n  }\r\n\r\n  /**\r\n   * 获取全部实体\r\n   */\r\n  getAllEntities(): any[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值删除对应实体\r\n   * @param identity 主键值\r\n   */\r\n  removeEntityById(identity: string): any {\r\n    this.verifyEntityToRemove(identity);\r\n    const entityToRemove = this.innerEntityMap.get(identity);\r\n    this.innerEntityMap.delete(identity);\r\n    this.innerEntitySet.delete(entityToRemove);\r\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\r\n    return entityToRemove;\r\n  }\r\n\r\n  removeEntitiesByIds(id: string) {\r\n  }\r\n\r\n  /**\r\n   * 删除符合条件的实体集合\r\n   */\r\n  public removeEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 移除数据（不切换当前行）\r\n   * @param predicate 过滤函数\r\n   */\r\n  public removeData(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 重置子表数据\r\n   * @param paths 路径\r\n   * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']\r\n   * @description path参数格式\r\n   * ```json\r\n   * [\r\n   * \"id:b5ed23ca-88d9-4377-98ec-92f35c1325f1\",\r\n   * \"cityMDMs\",\r\n   * \"id:373706af-622f-4aea-a006-dddbffd7bda3\",\r\n   * \"zoneMDMs\"\r\n   * ]\r\n   * ```\r\n   * @param entities 实体数组\r\n   */\r\n  public resetEntities(paths: string[], entities: any[]) {\r\n    if (paths[0].indexOf(':') === -1) {\r\n      throw new Error('路径格式错误');\r\n    }\r\n    // 获取主实体\r\n    const id = paths[0].split(':')[1];\r\n    let entity: any = this.innerEntityMap.get(id);\r\n    let entityList = entity[paths[1]] as EntityList<any>;\r\n    if (!entity) {\r\n      throw new Error(`找不到主键为${id}的实体`);\r\n    }\r\n    for (let index = 2; index < paths.length; index += 2) {\r\n      const pathInfo = paths[index].split(':');\r\n      const entityId = pathInfo[1];\r\n      // 获取到当前层级的实体\r\n      entity = entityList.get(entityId);\r\n      if (!entity) {\r\n        throw new Error(`找不到主键为${id}的实体`);\r\n      }\r\n      // 获取当前层级实体下的列表属性\r\n      entityList = entity[paths[index + 1]];\r\n    }\r\n    entityList.clear();\r\n    entityList.loadEntities(entities);\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能够添加\r\n   */\r\n  private verifyEntityToAdd(entity: any): boolean {\r\n    if (this.has(entity[this.primaryKey])) {\r\n      throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能移除\r\n   */\r\n  private verifyEntityToRemove(identity: string): boolean {\r\n    if (!this.has(identity)) {\r\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 实体集合变更流\r\n   */\r\n  private notifyCollectionChanged(modification: Modification) {\r\n    this.collectionChanged.next(modification);\r\n  }\r\n  private listenEntityChangeEvent(entity: Entity) {\r\n    if (entity) {\r\n      entity.onValueChanged.subscribe((change: Modification) => this.changes.next(change));\r\n    }\r\n  }\r\n\r\n  //#region 分页\r\n\r\n  /**\r\n   * 设置分页大小\r\n   */\r\n  set pageSize(pageSize: number) {\r\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\r\n      throw new Error('Invalid parameter:pageSize');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\r\n    this.paginationInfo = Object.assign({}, original, { pageSize });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\r\n   */\r\n  get pageSize(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageSize || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置数据总条数\r\n   */\r\n  set totalCount(total: number) {\r\n    if (typeof (total) !== 'number' || total < 0) {\r\n      throw new Error('Invalid parameter:total');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { total });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取数据总条数\r\n   */\r\n  get totalCount(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置当前页码\r\n   */\r\n  set pageIndex(pageIndex: number) {\r\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\r\n      throw new Error('Invalid parameter:pageIndex');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取当前页码\r\n   */\r\n  get pageIndex(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageIndex || 1;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 更新分页信息\r\n   * @param path 绑定路径\r\n   * @param pageInfo 分页信息\r\n   */\r\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\r\n    const original = this.paginationInfo;\r\n    const { pageIndex, pageSize } = pageInfo;\r\n    const total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;\r\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\r\n    this.setPaginationConfigByPath(path, paginationInfo);\r\n  }\r\n  /**\r\n   * 根据路径获取分页大小\r\n   * @param path 路径\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值，其中总条数key为total\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    const original = JSON.stringify(this.paginationInfo);\r\n    if (!path || path === '/') {\r\n      this.paginationInfo = value;\r\n    } else {\r\n      if (!Array.isArray(path)) {\r\n        path = path.toString().match(/[^/[\\]]+/g) || [];\r\n      }\r\n      path.slice(0, -1).reduce((prev, current, index) =>\r\n        Object(prev[current]) === prev[current]\r\n          ? prev[current]\r\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n            ? []\r\n            : {},\r\n        this.paginationInfo)[path[path.length - 1]] = value;\r\n    }\r\n\r\n    if (JSON.stringify(this.paginationInfo) !== original) {\r\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n    }\r\n    return this.paginationInfo;\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { EntityCollection };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-11 19:50:38\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../core/index';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\n\r\n\r\n/**\r\n * 实体管理类\r\n */\r\nclass EntityManager<T extends Entity> {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<Entity>;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<Entity>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    this.entityCollection = entityCollection;\r\n    this.entityType = entityCollection.entityType;\r\n  }\r\n\r\n\r\n  // #region 创建实体相关方法\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(entityData: any): T {\r\n    const entity = createEntity<T>(this.entityType, entityData);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public createEntities(entityListData: any[], entityType: any): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\r\n    return entities;\r\n  }\r\n  /**\r\n   * 批量创建下级实体\r\n   * @param fPath fpath\r\n   * @param entityListData 实体数据\r\n   */\r\n  public createEntitiesByPath(fPath: string, entityListData: any[]) {\r\n    const subPaths = fPath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    if (entityListData.length < 1) {\r\n      return [];\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fPath}`);\r\n      }\r\n    }\r\n    const entities = entityListData.map(entityData => {\r\n      return createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    });\r\n    return entities;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取实体、实体数组相关方法\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntityByPath(path: string[]): Entity {\r\n    const entity = this.getEntityNodeByPath(path) as Entity;\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntitiesByPath(path: string[]): Entity[] {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\r\n    let entities: Entity[];\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\r\n    } else {\r\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体节点\r\n   * @param path 节点路径\r\n   */\r\n  public getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\r\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\r\n    let entityNode: any = this.entityCollection;\r\n    let pathNode = dataPath.head.next;\r\n    while (pathNode) {\r\n      if (pathNode.type === DataPathNodeType.DataId) {\r\n        if (entityNode instanceof EntityCollection === true) {\r\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\r\n        } else {\r\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\r\n        }\r\n      } else {\r\n        entityNode = entityNode[pathNode.value];\r\n      }\r\n      if (!entityNode) {\r\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\r\n      }\r\n      pathNode = pathNode.next;\r\n    }\r\n    return entityNode;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取、设置属性值\r\n\r\n  /**\r\n   * 获取path对应的实体属性值\r\n   */\r\n  public getPropValueByPath(path: string[]): any {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    return entity[propName];\r\n  }\r\n\r\n  /**\r\n   * 设置path对应实体的属性值\r\n   */\r\n  public setPropValueByPath(path: string[], propValue: any): void {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    entity[propName] = propValue;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 插入实体\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityBeforeByPath(fpath: string[]) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesBeforeByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 追加实体\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加1个实体\r\n   */\r\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.addEntity(entity);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.appendEntity(entity);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath 路径 /id/childsNode/id/xxx\r\n   * @param entityData 实体数据\r\n   * @param initialData[可选] 默认值\r\n   */\r\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any, isCloned: boolean = false): Entity {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.appendNew(childEntity, isCloned);\r\n\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param fpath 父路径\r\n   * @param entityData 实体数据\r\n   * @param initialData 初始数据\r\n   * @param position 插入位置\r\n   */\r\n  public insertEntityByPath(fpath: string, entityData: any, initialData?: any, position?: 1 | -1) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.insert(childEntity, position);\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在path对应的实体集合中追加多个实体\r\n   */\r\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n      entityCollection.addEntities(entities);\r\n    } else {\r\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n      entityList.appendEntities(entities);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 删除实体\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除id对应的实体\r\n   */\r\n  // public removeEntityByPath(fpath: string[], id: string): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.removeEntityById(id);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.remove(id);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath path\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      const propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    childEntityList.remove(id);\r\n  }\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除ids对应的实体\r\n   */\r\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\r\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\r\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n    //   entityCollection.removeEntitiesByIds(ids);\r\n    // } else {\r\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n    //   entityList.remove(ids);\r\n    // }\r\n    throw new Error('Not Implemented');\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 清空变更集相关方法\r\n\r\n  /**\r\n   * 清空所有实体的变更集\r\n   */\r\n  public clearAllEntityChanges() {\r\n    const entities = this.entityCollection.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      entity.changes.splice(0, entity.changes.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空id指定的实体变更集\r\n   */\r\n  public clearEntityChangesById(id: string): void {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 清空ids数组中指定的实体的变更集\r\n   */\r\n  public clearEntityChangesByIds(ids: string[]): void {\r\n    if (!ids || ids.length < 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      this.clearEntityChangesById(id);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变更集检查相关方法\r\n\r\n  /**\r\n   * 检查所有的实体，是否有未提交的变更\r\n   */\r\n  public checkAllEntityChanges(): boolean {\r\n\r\n    const entities = this.entityCollection.toArray();\r\n    const hasChanges = entities.some((entity: Entity) => {\r\n      if (entity.changes.length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return hasChanges;\r\n  }\r\n\r\n  /**\r\n   * 检查id对应的实体，是否有未提交的变更\r\n   */\r\n  public checkEntityChangesById(id: string): boolean {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return false;\r\n    }\r\n    return entity.changes.length > 0;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 不规范方法，待废弃\r\n\r\n  /**\r\n   * 待废弃\r\n   * @deprecated\r\n   */\r\n  public clearEntityChangesByArray(idArray: string[]): void {\r\n    this.clearEntityChangesByIds(idArray);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { EntityManager };\r\n","import { Type, Injectable } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n@Injectable()\r\nexport class PaginationManager<T extends Entity> {\r\n\r\n  constructor(private entityType: any, private paginationConfig: any) {\r\n    if (this.paginationConfig === null || this.paginationConfig === undefined) {\r\n      this.paginationConfig = this.getNgListProperties();\r\n    }\r\n    // 兼容老表单，将之前的主表分页信息展开到分页配置根中\r\n    this.expandMainEntityConfig();\r\n    this.deleteMainEntityConfig();\r\n    this.removeLasts();\r\n  }\r\n  /**\r\n   * 主表分页信息展开到分页配置根中\r\n   */\r\n  private expandMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    if (this.paginationConfig.hasOwnProperty(entityName)) {\r\n      const entityConfig = this.paginationConfig[entityName];\r\n      this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\r\n    } else {\r\n      this.paginationConfig = Object.assign(this.paginationConfig, { pageSize: this.paginationConfig['pageSize'] || 0 });\r\n    }\r\n  }\r\n  /**\r\n   * 删除子表分页配置key后面的s\r\n   */\r\n  private removeLasts() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    Object.keys(this.paginationConfig).forEach(key => {\r\n      if (key !== entityName && key.endsWith('s')) {\r\n        const newKey = key.substring(0, key.length - 1);\r\n        this.paginationConfig[newKey] = this.paginationConfig[key];\r\n        delete this.paginationConfig[key];\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 删除主表实体配置信息\r\n   */\r\n  private deleteMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    delete this.paginationConfig[entityName];\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   */\r\n  public get pagination() {\r\n    return this.paginationConfig;\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationConfig;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\r\n    let config = this.paginationConfig;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    if (!Array.isArray(path)) {\r\n      path = path.toString().match(/[^/[\\]]+/g) || [];\r\n    }\r\n    path.slice(0, -1).reduce((prev, current, index) =>\r\n      Object(prev[current]) === prev[current]\r\n        ? prev[current]\r\n        : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n          ? []\r\n          : {},\r\n      this.paginationConfig)[path[path.length - 1]] = value;\r\n    return this.paginationConfig;\r\n  }\r\n\r\n  /**\r\n   * 递归获取当前实体的所有NgList属性\r\n   * @param defaultPageSize defaultPageSize\r\n   */\r\n  private getNgListProperties(defaultPageSize: number = 0) {\r\n\r\n    const getChilds = (objectType: Type<Entity>) => {\r\n      const listProperties = FieldMetadataUtil.getNgList(objectType);\r\n      let result = {};\r\n      if (Object.keys(listProperties).length < 1) {\r\n        return result;\r\n      }\r\n\r\n      Object.keys(listProperties).forEach(prop => {\r\n        let itemTypeName = listProperties[prop].dataField;\r\n        // 去掉尾部的s\r\n        if (itemTypeName.endsWith('s')) {\r\n          itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\r\n        }\r\n        result[itemTypeName] = {\r\n          pageSize: defaultPageSize\r\n        };\r\n        const child = getChilds(listProperties[prop].type);\r\n        if (child !== null && Object.keys(child).length > 0) {\r\n          result = Object.assign({}, result, child);\r\n        }\r\n      });\r\n      return result;\r\n    };\r\n    const childs = getChilds(this.entityType);\r\n    const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\r\n    return root;\r\n  }\r\n\r\n}\r\n","import { DataChange, DataChangeType } from '../core';\r\n\r\nclass DataChangeHistory {\r\n    private history: Array<DataChange>;\r\n    constructor() {\r\n        this.history = [];\r\n    }\r\n    public addChange(dataChange: DataChange) {\r\n        const changeType = DataChangeType[dataChange.changeType];\r\n        this[`on${changeType}Data`](dataChange);\r\n    }\r\n    public addChanges(dataChange: DataChange[]) {\r\n        dataChange.forEach(change => this.addChange(change));\r\n    }\r\n    public clear() {\r\n        this.history.splice(0, this.history.length);\r\n    }\r\n    public clearByIds(ids: string[]) {\r\n        this.history = this.history.filter(item => {\r\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\r\n                for (const id of ids) {\r\n                    const include = item.fpath.split('/').includes(id);\r\n                    return !include;\r\n                }\r\n            } else {\r\n                return !ids.includes(item.dataId);\r\n            }\r\n        });\r\n    }\r\n    public isChanged() {\r\n        return this.history.length > 0;\r\n    }\r\n    private onAddData(dataChange: DataChange) {\r\n        this.history.push(dataChange);\r\n    }\r\n    private onDeleteData(dataChange: DataChange) {\r\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\r\n        if (index >= 0) {\r\n            this.history.splice(index, 1);\r\n        } else {\r\n            this.history.push(dataChange);\r\n        }\r\n    }\r\n}\r\nexport { DataChangeHistory };\r\n","/**\r\n * 排序条件管理\r\n */\r\nexport class SortConditionManager {\r\n  /**\r\n   * 排序条件集合\r\n   * @description\r\n   * 排序条件数据结构描述：\r\n   * ```typescript\r\n   * key: bindingPath\r\n   * value: Array<{field:\"name|etc\",direction:\"asc|desc\"}>\r\n   * ```\r\n   */\r\n  private sorts: Map<string, Array<any>>;\r\n  constructor() {\r\n    this.sorts = new Map<string, Array<any>>();\r\n  }\r\n  /**\r\n   * 根据bingdingPath获取排序规则\r\n   * @param bindingPath bindingPath\r\n   * @param directionConverter converter\r\n   */\r\n  public getConditionsByBindingPath(bindingPath: string, directionConverter?: (direction: 'asc' | 'desc') => any) {\r\n    let conditions = this.sorts.get(bindingPath) || [];\r\n    if (conditions.length < 1) {\r\n      return conditions;\r\n    }\r\n    if (typeof directionConverter === 'function') {\r\n      conditions = conditions.map(condition => {\r\n        const sortType = directionConverter(condition.SortType);\r\n        return { SortField: condition.SortField, SortType: sortType };\r\n      });\r\n    }\r\n    return conditions;\r\n  }\r\n  /**\r\n   * 增加排序条件\r\n   * @param bindingPath 绑定路径\r\n   * @param field 排序字段\r\n   * @param direction 排序方向 asc|desc\r\n   */\r\n  public addCondition(bindingPath: string, field: string, direction: string) {\r\n    // 取消排序\r\n    if (!field || !direction) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const isBindingPathExist = this.sorts.has(bindingPath);\r\n    const condition = { SortField: field, SortType: direction };\r\n    if (!isBindingPathExist) {\r\n      this.sorts.set(bindingPath, [condition]);\r\n    } else {\r\n      const bindingPathSortConditions = this.sorts.get(bindingPath) || [];\r\n      // new condition will override the previous condition\r\n      const conditionIndex = bindingPathSortConditions.findIndex(item => item.SortField === field);\r\n      if (conditionIndex !== -1) {\r\n        bindingPathSortConditions[conditionIndex] = condition;\r\n      } else {\r\n        bindingPathSortConditions.push(condition);\r\n      }\r\n    }\r\n  }\r\n  public removeCondition(bindingPath: string, field: string) {\r\n    throw new Error('not implement!');\r\n  }\r\n  /**\r\n   * 批量增加排序条件\r\n   * @param bindingPath bindingPath\r\n   * @param fields fields , seprated by comma\r\n   * @param directions directions , seprated by comma\r\n   * @description set conditions and overwrite all conditions which has the same bindingPath\r\n   */\r\n  public setConditions(bindingPath: string, fields: string, directions: string) {\r\n    // 取消排序\r\n    if (!fields || !directions) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const filedsArray = fields.split(',').filter(item => item);\r\n    const directionsArray = directions.split(',').filter(item => item);\r\n    if (filedsArray.length !== directionsArray.length) {\r\n      throw new Error('arguments error,fields and direction are not match.');\r\n    }\r\n    const conditions = [];\r\n    filedsArray.forEach((field: string, index: number) => {\r\n      const condition = { SortField: field, SortType: directionsArray[index] };\r\n      conditions.push(condition);\r\n    });\r\n    this.sorts.set(bindingPath, conditions);\r\n  }\r\n  /**\r\n   * 清空所有排序条件\r\n   */\r\n  public clear() {\r\n    this.sorts.clear();\r\n  }\r\n\r\n}\r\n","/**\r\n * 过滤条件管理器\r\n */\r\nexport class FilterConditionManager {\r\n    private filters: Map<string, Array<any>> = new Map<string, Array<any>>();\r\n    /**\r\n     * 获取过滤条件\r\n     * @param bindingPath 绑定路径\r\n     */\r\n    public getFilters(bindingPath: string) {\r\n        return this.filters.get(bindingPath) || [];\r\n    }\r\n    /**\r\n     * 自定义合并\r\n     * @param bindingPath 绑定路径\r\n     * @param merge 合并函数\r\n     */\r\n    public mergeCondition(bindingPath: string, merge: (conditions: any) => any) {\r\n        const conditions = this.filters.get(bindingPath) || [];\r\n        const result = merge(conditions);\r\n        this.filters.set(bindingPath, result);\r\n    }\r\n    /**\r\n     * 增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    public addCondition(bindingPath: string, condition: any) {\r\n        // 通过bindingPath获取对应的过滤条件\r\n        const conditions = this.filters.get(bindingPath);\r\n        const index = this.findConditionIndex(bindingPath, condition);\r\n        if (index !== -1) {\r\n            conditions[index] = condition;\r\n        } else {\r\n            conditions.push(condition);\r\n        }\r\n    }\r\n    /**\r\n     * 批量增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public addConditions(bindingPath: string, conditions: Array<any>) {\r\n        if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {\r\n            return;\r\n        }\r\n        conditions.forEach(condition => {\r\n            this.addCondition(bindingPath, condition);\r\n        });\r\n    }\r\n    /**\r\n     * 删除过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param predicate 条件表达式\r\n     */\r\n    public removeCondition(bindingPath: string, predicate: (value: any, index: number, array: any[]) => boolean) {\r\n        const conditions: Array<{ [propName: string]: any }> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return;\r\n        }\r\n        const removes = conditions.filter(predicate);\r\n        if (removes) {\r\n            removes.forEach(condition => {\r\n                const index = this.findConditionIndex(bindingPath, condition);\r\n                if (index >= 0) {\r\n                    conditions.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 清空过滤条件\r\n     */\r\n    public clear() {\r\n        this.filters.clear();\r\n    }\r\n    /**\r\n     * 设置过滤条件数组\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public setConditions(bindingPath: string, conditions: Array<any>) {\r\n        this.filters.set(bindingPath, conditions);\r\n    }\r\n\r\n    /**\r\n     * 查找过滤条件索引\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    private findConditionIndex(bindingPath: string, condition: any) {\r\n        if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {\r\n            return -1;\r\n        }\r\n        const conditions: Array<any> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return -1;\r\n        }\r\n        return conditions.findIndex((value, index) => {\r\n            let isEqual = true;\r\n            const props = Object.keys(condition);\r\n            for (const prop of props) {\r\n                if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {\r\n                    isEqual = false;\r\n                    break;\r\n                }\r\n            }\r\n            return isEqual;\r\n        });\r\n    }\r\n}\r\n","// tslint:disable: no-bitwise\r\n// get uniqueId\r\nexport class UID {\r\n    private static previous = 0;\r\n    public static create(redix?: number) {\r\n        const timestamp = Date.now().valueOf();\r\n        let uuid = 0;\r\n        if (timestamp > UID.previous) {\r\n            UID.previous = timestamp;\r\n            uuid = timestamp;\r\n        } else {\r\n            UID.previous = UID.previous + 100;\r\n            uuid = UID.previous;\r\n        }\r\n        return uuid.toString(redix);\r\n    }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { DataTypeInfo, IDisposable } from '../core/index';\r\nimport { Modification } from '../changeset/index';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Entity, createEntity, createEntities } from '../entity/index';\r\nimport { NgRepository } from './decorators';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { PaginationManager } from './pagination_manager';\r\nimport { DataChangeHistory } from './data_change_history';\r\nimport { SortConditionManager } from './sort_condition_manager';\r\nimport { FilterConditionManager } from './filter_condition_manager';\r\nimport { UID } from '../misc/uid';\r\n\r\n/**\r\n * 本地仓库\r\n * @description\r\n * # Repository\r\n *\r\n * Repository负责与后台接口交互并将接口返回的数据转换为Entity集合进行保存。因此Repository有两个重要的职责：后端交互、数据存储。\r\n * Repository中存储的数据是Entity类型，可以通过API对数据进行修改或删除。由于Repository和BindingData相互监听，对数据仓库的操作最终会通过BindingData更新到界面上。\r\n *\r\n * ## 实体操作\r\n * 实体操作仅对Repository本地已经存在的数据进行操作，不会发送请求。\r\n *\r\n * - 通过主键获取实体\r\n *\r\n *   ```javascript\r\n *    this.repository.entityCollection.getEntityById(\"id\");\r\n *   ```\r\n *\r\n * - 删除实体数据\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.removeEntityById(\"id\")\r\n *   ```\r\n *\r\n * - 清空所有实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.clear();\r\n *   ```\r\n *\r\n * - 将实体数据转换为json格式\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.toJSON();\r\n *   ```\r\n *\r\n * - 添加实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntity(entity:T);\r\n *   ```\r\n * - 添加子表实体\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.appendEntityByPath(\"/主实体Id/子表名s\",{子表JSON数据});\r\n *   ```\r\n * - 批量添加实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntities(entities:T[])\r\n *   ```\r\n *\r\n * - 批量添加子表实体\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   const childrenEntities = entityManager.createEntitiesByPath([\"主实体Id\",\"子表名s\"], entityListData: any[])\r\n *   entityManager.appendEntitiesByPath([\"主实体Id\",\"子表名s\"],childrenEntities);\r\n *   ```\r\n *\r\n * - 批量加载实体\r\n *\r\n *   ```javascript\r\n *   this.repository.entityCollection.loadEntities(entities:T[]);\r\n *   ```\r\n *\r\n *   > 加载实体会将本地仓库数据置为加载的实体。\r\n *\r\n * - 创建实体\r\n *\r\n *   ```javascript\r\n *   this.repository.buildEntity(JSON数据);\r\n *   ```\r\n *\r\n * - 批量创建实体\r\n *\r\n *   ```javascript\r\n *   this.repository.buildEntities(JSON数据);\r\n *   ```\r\n *\r\n * - 获取子表数据\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntityByPath([\"主实体Id\",\"子表名\",\"子表id\"]);\r\n *   ```\r\n *\r\n *   !> **注意** entityManager属性仅存在于BefRepository类，因此在使用EntityManager时应先将Repository转换为BefRepository\r\n *\r\n * - 获取所有子表数据\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntitiesByPath([\"主实体Id\",\"子表名\"]);\r\n *   ```\r\n *\r\n *   > EntityManager不仅可以获取子表数据，同样可以获取主表数据。\r\n *   >\r\n *   > ```javascript\r\n *   > entityManager.getEntitiesByPath([\"主实体Id\"]);\r\n *   > ```\r\n *\r\n * - 获取实体属性值\r\n *\r\n *   ```javascript\r\n *   const entity = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity['name'];\r\n *   // 或者\r\n *   const entity: any = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity.name;\r\n *   ```\r\n *\r\n * ## 后端交互\r\n *\r\n * ​\t通过接口操作后端数据，会直接对数据产生影响。\r\n *\r\n * - 更新实体数据\r\n *\r\n *   ```javascript\r\n *   this.repository.updateById('id');\r\n *   ```\r\n *\r\n * - 删除实体\r\n *\r\n *   ```javascript\r\n *   this.repository.removeById(\"id\");\r\n *   ```\r\n *\r\n * - 批量删除实体\r\n *\r\n *   ```javascript\r\n *   this.repository.removeByIds(ids:string[])\r\n *   ```\r\n *\r\n * - 删除下级表数据\r\n *\r\n *   ```javascript\r\n *   this.repository.removeByPath(['主表Id','子表名','子表Id'])\r\n *   ```\r\n *\r\n * - 新增主实体\r\n *\r\n *   ```javascript\r\n *   this.repository.append();\r\n *   ```\r\n *\r\n * - 新增子实体\r\n *\r\n *   ```javascript\r\n *   this.repository.appendByPath(['主表id','子表名']);\r\n *   ```\r\n *\r\n * - 加载实体数据\r\n *\r\n *   ```javascript\r\n *   this.repository.getById('id');\r\n *   ```\r\n *\r\n * - 获取主表数据\r\n *\r\n *   ```javascript\r\n *   this.repository.getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *\r\n *   ```\r\n *\r\n *   > pageSize、pageIndex可以不传。\r\n *\r\n * - 获取主表数据（POST方法）\r\n *\r\n *   ```javascript\r\n *   this.repository.filter(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *   ```\r\n *\r\n * - 提交指定实体变更到后端\r\n *\r\n *   ```javascript\r\n *   this.repository.updateChangesById(\"id\");\r\n *   ```\r\n *\r\n * - 提交所有变更\r\n *\r\n *   ```javascript\r\n *   this.repository.updateAllChanges();\r\n *   ```\r\n *\r\n * - 应用变更（保存）\r\n *\r\n *   ```javascript\r\n *   this.repository.applyChanges();\r\n *   ```\r\n *\r\n * - 取消变更\r\n *\r\n *   ```javascript\r\n *   this.repository.cancelChanges();\r\n *   ```\r\n *\r\n * - 清除Repository所有变更\r\n *\r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   befRepository.entityManager.clearAllEntityChanges();\r\n *   ```\r\n *\r\n * - 批量新增子表数据\r\n *   ```javascript\r\n *   this.repository.batchAppendByPath(path: string, defaultValues: Array<any>);\r\n *   ```\r\n *\r\n *   > path `string`：/主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > defaultValues `Array<any>`：新增从表时的默认值，数组，元素为对象，key为字段名，value为默认值。\r\n *\r\n * - 批量删除子表数据\r\n *\r\n *   ```javascript\r\n *   this.repository.batchRemoveByPath(path: string, ids: string);\r\n *   ```\r\n *\r\n *   > path `string`： /主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > ids `string` ：要删除的子表数据id，格式为`id1,id2,id3`\r\n */\r\n@Injectable()\r\nexport abstract class Repository<T extends Entity> implements IDisposable, OnDestroy {\r\n  // #region 私有属性\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  private innerName: string;\r\n\r\n  // #endregion\r\n\r\n  // #region 公有属性（共有属性不应该直接暴露，待包装）\r\n\r\n  /**\r\n   * API地址\r\n   */\r\n  public apiUri: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: any;\r\n\r\n  /**\r\n   * 实体类型信息\r\n   * @todo：实体层应该事先一个EntityTypeInfo，并继承DataTypeInfo。\r\n   */\r\n  public entityTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<T>;\r\n\r\n  /**\r\n   * 用户分页配置信息\r\n   */\r\n  public paginationInfo: any = null;\r\n\r\n  /**\r\n   * 数据变更历史（仅针对主表增加、各种表删除）\r\n   */\r\n  public dataChangeHistory: DataChangeHistory;\r\n\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  public filterConditionManager: FilterConditionManager;\r\n\r\n  // #endregion\r\n\r\n  // #region get/set方法\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public get primaryKey(): string {\r\n    return this.entityCollection.primaryKey;\r\n  }\r\n  public get changes(): Subject<Modification> {\r\n    return this.entityCollection.changes;\r\n  }\r\n  /**\r\n   * 实体变更集合\r\n   */\r\n  public get entityCollectionChange(): Subject<Modification> {\r\n    return this.entityCollection.collectionChanged;\r\n  }\r\n\r\n  /**\r\n   * 获取名称\r\n   */\r\n  public get name(): string {\r\n    // 1、老表单没有name属性\r\n    // 2、不能使用construcotr.name，压缩脚本会把name改掉，或者压缩成相同的名称（目前发现已知）\r\n    if (!this.innerName) {\r\n      const guid = UID.create();\r\n      this.innerName = `Repository_${guid}`;\r\n    }\r\n\r\n    return this.innerName;\r\n  }\r\n  /**\r\n   * 设置名称\r\n   */\r\n  public set name(value: string) {\r\n    this.innerName = value;\r\n  }\r\n\r\n  public paginationManager: PaginationManager<T>;\r\n  public destroy$: Subject<any>;\r\n  // #endregion\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.readMetadata();\r\n    if (this.entityType) {\r\n      this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n      this.entityCollection = new EntityCollection<T>(this.entityType);\r\n    }\r\n    this.dataChangeHistory = new DataChangeHistory();\r\n    this.sortConditionManager = new SortConditionManager();\r\n    this.filterConditionManager = new FilterConditionManager();\r\n    this.destroy$ = new Subject<any>();\r\n  }\r\n  dispose(options?: any) {\r\n    this.paginationManager = null;\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n    if (this.entityCollection) {\r\n      this.entityCollection.reset(false);\r\n      // this.entityCollection = null;\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  public updateEntityType(entityType: any) {\r\n    this.entityType = entityType;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection<T>(this.entityType);\r\n  }\r\n\r\n\r\n  /**\r\n   * 读取元数据\r\n   */\r\n  private readMetadata() {\r\n    const repositoryMetadata: NgRepository = MetadataUtil.getClassMetadataByName(this.constructor, 'NgRepository');\r\n    if (repositoryMetadata) {\r\n      // API地址\r\n      this.apiUri = repositoryMetadata.apiUrl;\r\n      // 实体类型\r\n      this.entityType = repositoryMetadata.entityType;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化分页配置\r\n   * @param config - 用户分页配置\r\n   */\r\n  setPaginationConfig(config: any) {\r\n    this.paginationManager = new PaginationManager(this.entityType, config);\r\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\r\n    // tslint:disable-next-line: max-line-length\r\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.paginationManager.pagination, this.entityCollection.paginationInfo);\r\n    // 无需再单独设置一次pageSize，减少一次变更\r\n    // this.entityCollection.pageSize = pageSize;\r\n  }\r\n  /**\r\n   * 重置状态\r\n   */\r\n  public reset(): void {\r\n    this.entityCollection.reset();\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   * @param data\r\n   */\r\n  public buildEntity(data: any): T {\r\n    const entity = createEntity<T>(this.entityType, data);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   * @param listData\r\n   */\r\n  public buildEntities(listData: any[]): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, listData);\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filters -    过滤条件\r\n   * @param sorts -      排序条件\r\n   * @param pagination - 分页信息\r\n   */\r\n  abstract getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter - 过滤条件\r\n   * @param sorts - 排序条件\r\n   * @param pageSize - 分页大小\r\n   * @param pageIndex - 当前分页\r\n   */\r\n  abstract filter(filter?: any[], sorts?: any[], pageSize?: number | null, pageIndex?: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  abstract getList(): Observable<T[]>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id - 实体标识\r\n   */\r\n  abstract getById(id: string): Observable<T>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id - 主实体id\r\n   */\r\n  abstract getEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path - 绑定路径\r\n   * @param ids - 绑定路径对应的主键\r\n   * @param filter - 过滤条件\r\n   * @param sort - 排序\r\n   */\r\n  abstract queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]>;\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id - 实体id\r\n   */\r\n  abstract updateById(id: string): Observable<T>;\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id - 实体主键\r\n   */\r\n  abstract updateEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 创建新实体，将该实体加载到列表\r\n   */\r\n  abstract create(): Observable<any>;\r\n\r\n  // /**\r\n  //  * 创建后代实体，将该实体加载到后代列表（暂无该场景）\r\n  //  * @param path 路径\r\n  //  */\r\n  // abstract createByPath(path: string);\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  abstract append(): Observable<any>;\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   * @param path - 实体路径\r\n   */\r\n  abstract appendByPath(path: string): Observable<any>;\r\n  /**\r\n   * 再指定位置插入数据\r\n   */\r\n  abstract insert(position: 1 | -1, defaultValue?: any): Observable<any>;\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path - 实体路径\r\n   */\r\n  abstract insertByPath(path: string, position: 1 | -1): Observable<any>;\r\n  /**\r\n   * 根据id删除对应实体\r\n   * @param id - 内码\r\n   */\r\n  abstract removeById(id: string, ifSave?: boolean): Observable<any>;\r\n\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param id - ids\r\n   * @param ifSave - 是否保存\r\n   * @deprecated 已废弃，该接口使用querystring传参，存在超长问题。请使用batchRemove接口替代。\r\n   */\r\n  abstract removeByIds(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids - ids\r\n   * @param ifSave - 是否保存\r\n   */\r\n  abstract batchRemove(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  abstract removeByPath(path: string, id: string);\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  abstract updateChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  abstract updateChangesByPath(path: string, id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  abstract updateAllChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  abstract applyChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  abstract applyChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  abstract cancelChanges(options?: any): Observable<boolean>;\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  abstract batchRemoveByPath(path: string, ids: string): Observable<boolean>;\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path - 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues - 默认实体数据数组\r\n   * @description 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  abstract batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any>;\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues - 默认实体数据数组\r\n   */\r\n  abstract batchAppend(defaultValues: Array<any>): Observable<any>;\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   */\r\n  abstract hasChanges(): Observable<any>;\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-28 15:46:07\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:53\r\n */\r\n\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from './repository';\r\nimport { EntityManager } from './entity_manager';\r\n\r\n/**\r\n * 空Repository实现\r\n */\r\n@Injectable()\r\nclass DefaultRepository<T extends Entity> extends Repository<T> {\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: EntityManager<T>;\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    // 初始化实体管理器\r\n    this.entityManager = new EntityManager(this.entityCollection);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getEntities(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  public filter(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getList(): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取子表分页的实体\r\n   * @param id 主实体id\r\n   */\r\n  public getEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path 绑定路径\r\n   * @param ids 绑定路径对应的主键\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id 实体主键\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public create(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  public append(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   */\r\n  public appendByPath(path: string): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 再指定位置插入数据\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path 实体路径\r\n   * @param position 插入位置\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id删除对应实体\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   */\r\n  public removeByIds(id: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  public removeByPath(path: string, id: string) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  public batchRemoveByPath(path: string, ids: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  public hasChanges(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nexport { DefaultRepository };\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable require-jsdoc */\r\n/* eslint-disable valid-jsdoc */\r\nimport {Injectable} from '@angular/core';\r\nimport {DataTypeInfo} from '../core/index';\r\nimport {Repository} from '../repository/index';\r\nimport {ExpressionUtil} from '../utils/expression_util';\r\nimport {ENTITY_TEMPLATE, IResolver} from './types';\r\n\r\n@Injectable()\r\nexport class EntityDependencyResolver implements IResolver {\r\n  private entityTypeInfo: DataTypeInfo;\r\n  constructor(private repository: Repository<any>) {\r\n    this.entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n  }\r\n  /**\r\n   * 解析用户表达式中的实体依赖\r\n   * @param expr 用户配置的完整表达式\r\n   * @returns\r\n   */\r\n  public resolve(expr: string): string[] {\r\n    const groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);\r\n    const entityDependencies = this.getEntityDependency(expr);\r\n    // 去除错误的到子表的依赖\r\n    if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {\r\n      groupFunctionDependencies.forEach((dep: string) => {\r\n        const index = entityDependencies.findIndex((item) => dep.startsWith(item));\r\n        if (index !== -1) {\r\n          entityDependencies.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n    // 去重\r\n    const merged = [...groupFunctionDependencies, ...entityDependencies];\r\n    const deps = [...new Set(merged)];\r\n    return deps;\r\n  }\r\n  /**\r\n   * 获取合法的实体属性表达式\r\n   * @param entityPropertyExpression 实体属性表达式\r\n   * @returns\r\n   */\r\n  private getValidEntityPropertyExpression(entityPropertyExpression: string): string[] {\r\n    const propPaths = entityPropertyExpression.split('.');\r\n    let propInfo = null;\r\n    try {\r\n      propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);\r\n    } catch (e) { }\r\n    if (!propInfo) {\r\n      if (propPaths.length > 1) {\r\n        propPaths.pop();\r\n        return this.getValidEntityPropertyExpression(propPaths.join('.'));\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return entityPropertyExpression.split('.');\r\n    }\r\n  }\r\n  /**\r\n   * 获取所有实体依赖\r\n   * @param expr 表达式字符串\r\n   * @returns\r\n   */\r\n  private getEntityDependency(expr: string): string[] {\r\n    const deps = [];\r\n    if (this.entityTypeInfo) {\r\n      // 使用正则匹配出所有实体\r\n      const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${this.entityTypeInfo.entityInfo.nodeCode}|${this.entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            return;\r\n          }\r\n          // 去空格\r\n          item = item.trim().replace(/\\\"/g, '');\r\n          const paths = ExpressionUtil.convertToNodeCode(item, this.repository.entityTypeInfo);\r\n          item = paths.join('.');\r\n          // 截去主实体及点\r\n          item = item.substr(item.indexOf('.') + 1);\r\n          const dep = this.getValidEntityPropertyExpression(item);\r\n          if (dep && Array.isArray(dep) && dep.length > 0) {\r\n            // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n    }\r\n    return deps;\r\n  }\r\n}\r\n","import { IResolver } from \"./types\";\r\nconst CONTEXT_FUNCTIONS = ['GetContextParameter', 'GetSessionValue'];\r\nexport class StateDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const deps = [];\r\n    const regex = new RegExp(`DefaultFunction\\\\.(${CONTEXT_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\r\n    const contextFunctions: RegExpMatchArray = expr.match(regex);\r\n    if (contextFunctions && contextFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      contextFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1].trim().replace(/\\\"/g,'');\r\n          const dep = ['STATE~'];\r\n          dep.push(argument);\r\n          deps.push(dep.join('/'));\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { IResolver } from \"./types\";\r\n/**\r\n * 用户自定义参数解析器\r\n */\r\n@Injectable()\r\nexport class CommentDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const dependencies = [];\r\n    if (!expr || expr.length < 1) {\r\n      return dependencies;\r\n    }\r\n    const defineRegex = /\\/\\*\\*\\s*__define__\\((.*)\\)\\s*\\*\\//;\r\n    const defineMatchArray: RegExpMatchArray = expr.match(defineRegex);\r\n    if (defineMatchArray && defineMatchArray.length === 2) {\r\n      const defineString: string = defineMatchArray[1].trim();\r\n      let defineObject = null;\r\n      try {\r\n        defineObject = JSON.parse(defineString);\r\n      } catch (e) { console.warn(`自定义依赖解析失败：${defineString}`); }\r\n      if (defineObject && defineObject.hasOwnProperty('deps') && Array.isArray(defineObject['deps'])) {\r\n        dependencies.push(...defineObject['deps']);\r\n      }\r\n    }\r\n    return dependencies;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { CommentDependencyResolver } from \"./comment_dependency_resolver\";\r\nimport { ResolverRegistry } from \"./resolver_registry\";\r\nimport { IResolver } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ResolveService {\r\n  constructor(private injector: Injector, private resolverRegistry: ResolverRegistry) { }\r\n  public resolve(expression: string) {\r\n    const deps: string[] = [];\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {\r\n      return;\r\n    }\r\n    // 优先使用用户自定义的依赖\r\n    const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver: IResolver) => resolver instanceof CommentDependencyResolver);\r\n    if (commentDependencyResolver) {\r\n      const commentDependencies = commentDependencyResolver.resolve(expression);\r\n      if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {\r\n        deps.push(...commentDependencies);\r\n      }\r\n    }\r\n    // 如果用户已经自定义了依赖，则不再计算\r\n    if (deps && deps.length > 0) {\r\n      return deps;\r\n    }\r\n    this.resolverRegistry.resolvers.forEach((resolver: IResolver) => {\r\n      // 再解析一次也可以，返回的依然是空数组\r\n      if (resolver instanceof CommentDependencyResolver) {\r\n        return;\r\n      }\r\n      const dependency = resolver.resolve(expression);\r\n      if (dependency && dependency.length > 0) {\r\n        deps.push(...dependency);\r\n      }\r\n    });\r\n    // 去重\r\n    return [...new Set(deps)];\r\n  }\r\n}","export * from './types';\r\nexport * from './resolver_registry';\r\nexport * from './entity_dependency_resolver';\r\nexport * from './state_dependency_resolver';\r\nexport * from './comment_dependency_resolver';\r\nexport * from './resolve_service';\r\n// export * from './resolver';","/* eslint-disable valid-jsdoc */\r\n/* eslint-disable require-jsdoc */\r\nimport { BindingData, BindingList } from '../binding-data/index';\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from '../core/index';\r\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from '../resolver/index';\r\n\r\nexport class ExpressionUtil {\r\n  public static getGroupFunctionDependency(expr: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    const deps = [];\r\n    // 获取聚合函数依赖项\r\n    const groupFunctionRegex = new RegExp(`DefaultFunction\\\\.(${GROUP_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\r\n    const groupFunctions: RegExpMatchArray = expr.match(groupFunctionRegex);\r\n    if (groupFunctions && groupFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      const methodNameRegex = /DefaultFunction\\.(\\S*)\\(/;\r\n      groupFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        const methodNameMatchResult = groupFunction.match(methodNameRegex);\r\n        let methodName = null;\r\n        if (methodNameMatchResult && methodNameMatchResult.length == 2) {\r\n          methodName = methodNameMatchResult[1];\r\n        }\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1];\r\n          const args = argument.split(',').map((p) => p.replace(/\\\"/g, ''));\r\n          if (args && args.length === 2) {\r\n            let item: any = args.join('.');\r\n            item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n            // 移除主表code\r\n            item = item.substr(item.indexOf('.') + 1);\r\n            const dep = item.split('.');\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          } else if (args && args.length === 3) {\r\n            if (methodName === 'MultiplyChildNumber') {\r\n              // support MultiplyChildNumber\r\n              // [Entity.childrens,prop1,prop2]\r\n              const prefix = args[0]; // like Entity.childrens\r\n              // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);\r\n              const prop1FullPath = `${prefix}.${args[1]}`;\r\n              const prop2FullPath = `${prefix}.${args[2]}`;\r\n              [prop1FullPath, prop2FullPath].forEach((item) => {\r\n                item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n                item = item.substr(item.indexOf('.') + 1);\r\n                const dep = item.split('.');\r\n                dep.splice(0, 0, ENTITY_TEMPLATE);\r\n                deps.push(dep.join('/'));\r\n              });\r\n            } else if (methodName === 'IsContainMatch' || methodName === 'SortChildData') {\r\n              // [Entity.childrens,prop1,prop2]\r\n              const prefix = args[0]; // like Entity.childrens\r\n              // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);\r\n              let item = `${prefix}.${args[1]}`;\r\n              item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n              item = item.substr(item.indexOf('.') + 1);\r\n              const dep = item.split('.');\r\n              dep.splice(0, 0, ENTITY_TEMPLATE);\r\n              deps.push(dep.join('/'));\r\n            }\r\n          } else if (args && args.length === 4) {\r\n\r\n          } else if (args && args.length === 5) {\r\n            if (['MinValueOfPeriod', 'MaxValueOfPeriod', 'AvgValueOfPeriod'].includes(methodName)) {\r\n              // [Entity.childrens,prop1,prop2]\r\n              const prefix = args[0]; // like Entity.childrens\r\n              // const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);\r\n              const prop1FullPath = `${prefix}.${args[1]}`;\r\n              const prop2FullPath = `${prefix}.${args[2]}`;\r\n              [prop1FullPath, prop2FullPath].forEach((item) => {\r\n                item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n                item = item.substr(item.indexOf('.') + 1);\r\n                const dep = item.split('.');\r\n                dep.splice(0, 0, ENTITY_TEMPLATE);\r\n                deps.push(dep.join('/'));\r\n              });\r\n            }\r\n          } else {\r\n            throw new Error(`无法解析参数： ${JSON.stringify(argument)}`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n  /**\r\n   * 将voCode转换为前端nodeCode\r\n   * @param entityExpression like Entity.Child.p1\r\n   * @returns\r\n   */\r\n  public static convertToNodeCode(entityExpression: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    // UserEntity.storys.p1\r\n    const nodeCodes = [];\r\n    if (entityTypeInfo && entityExpression.includes('.')) {\r\n      const entityExpressions = entityExpression.split('.') || [];\r\n      let dataTypeInfo = entityTypeInfo;\r\n      for (let index = 0; index < entityExpressions.length; index++) {\r\n        const prop = entityExpressions[index];\r\n        if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {\r\n          // 第一个是主表code，不能转nodeCode\r\n          if (index === 0) {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.originalCode);\r\n          } else {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);\r\n          }\r\n\r\n          // 下一级可能为子表、对象或属性\r\n          const nextNodeCode = entityExpressions[index + 1];\r\n          if (!nextNodeCode) {\r\n            break;\r\n          }\r\n          const nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);\r\n          if (!nextNodeCodePropInfo) {\r\n            break;\r\n          }\r\n          // 下一级为子表或对象\r\n          if (nextNodeCodePropInfo.typeInfo) {\r\n            dataTypeInfo = nextNodeCodePropInfo.typeInfo;\r\n          }\r\n        } else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {\r\n          const dataPropInfo = dataTypeInfo.getPropInfoByName(prop);\r\n          nodeCodes.push(dataPropInfo.name);\r\n        } else {\r\n          // throw new Error(`错误的属性参数 ${entityExpression}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo\r\n   * @param results\r\n   * @param paths\r\n   */\r\n  public static getChildrenEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        if (paths.length === 0) {\r\n          results.push([dataPropInfo.name]);\r\n        }\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          paths.push(dataPropInfo.name);\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          if (paths.length !== 0) {\r\n            paths.push(dataPropInfo.name);\r\n            results.push([...paths]);\r\n          }\r\n          paths.length = 0;\r\n        }\r\n      });\r\n    } else {\r\n      if (paths.length > 0) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n        results.push([...paths]);\r\n      }\r\n      paths.length = 0;\r\n    }\r\n  }\r\n  /**\r\n   * 获取指定绑定路径的当前行数据\r\n   * @param paths 绑定路径\r\n   * @param bindingData\r\n   * @returns\r\n   */\r\n  public static getCurrentRowByPaths(paths: string[], bindingData: BindingData): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      const primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      // 主表或下级表新增，此时事件行就是当前行，无需处理\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 从实体路径中获取级数最大的从表或从从表\r\n   * @param paths\r\n   * @returns\r\n   */\r\n  public static getAvailableChildrenPathsFromEntityPaths(paths: string[], entityTypeInfo: DataTypeInfo): string[] {\r\n    let nodeCodes = [];\r\n    paths = [...paths];\r\n    while (paths.length > 0) {\r\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n      if (dataPropInfo && dataPropInfo.group === 'List') {\r\n        nodeCodes = paths;\r\n        break;\r\n      }\r\n      paths.pop();\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 从路径中获取绑定路径\r\n   * @param paths 路径\r\n   * @param entityTypeInfo entityTypeInfo\r\n   * @returns\r\n   */\r\n  public static getBindingPath(paths: string[], entityTypeInfo: DataTypeInfo) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  public static getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n}\r\n","import { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\n\r\nexport class DataTypeInfoUtil {\r\n  /**\r\n   * 递归获取实体的所有下级实体编号\r\n   * @param dataTypeInfo \r\n   * @param results \r\n  */\r\n  public static getChildrenNodeCodes(dataTypeInfo: DataTypeInfo, results: any[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        results.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            results.push(dataPropInfo.name);\r\n            this.getChildrenNodeCodes(dataPropInfo.typeInfo, results);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { ElementRef, Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { MetadataUtil, PROP_METADATA } from '../metadata/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { BindingData, Change, ChangeType, BindingObject } from '../binding-data/index';\r\nimport { ValidateRule, Validation } from '../entity/validator/types';\r\nimport {\r\n  NG_FORM_CONTROL, NgFormControl,\r\n  NG_CHILD_FORM, NgChildForm,\r\n  NgValidateForm, NG_VALIDATE_FORM\r\n} from './decorators';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { DateUtil } from '../utils/index';\r\nimport { Translate } from '../i18n/translate';\r\nimport { ValidationTypes } from '../entity/validator/validation_types';\r\nimport { ValidationExecutor } from '../entity/validator/validation_executor';\r\nimport * as ValidatorJS from 'validator';\r\nimport { ValidationError } from '../entity';\r\nimport { DataPropInfo, DataTypeInfo, RunMode } from '../core';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { RuleType } from './types';\r\nimport { IDisposable } from '../core';\r\nimport { Subject } from 'rxjs';\r\nimport { parseISO } from 'date-fns';\r\n/**\r\n * 表单定义\r\n */\r\n@Injectable()\r\nclass Form extends FormGroup implements IDisposable, OnDestroy {\r\n\r\n  /**\r\n   * 存放所有实例的映射\r\n   */\r\n  static insMap: {\r\n    [formName: string]: Form\r\n  } = {};\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public get formGroupName() {\r\n    return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';\r\n  }\r\n\r\n  /**\r\n   * 是否启用表单验证\r\n   */\r\n  public get enableValidate() {\r\n    return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;\r\n  }\r\n\r\n  public get translateService(): Translate {\r\n    return this.translate;\r\n  }\r\n  /**\r\n   * 排除的校验规则类型\r\n   */\r\n  // private excludeRuleTypes: { [propertyName: string]: string[] };\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    super({}, null, null);\r\n    this.controlIdMap = {};\r\n    this.cardControls = {};\r\n    this.isShowPropMap = {};\r\n    this.destroy$ = new Subject<any>();\r\n    // this.excludeRuleTypes = {};\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n    Form.insMap[this.constructor.name] = null;\r\n    this.frameContext = null;\r\n    this.bindingData = null;\r\n    this.ngChildForms = null;\r\n    this.metaDatas = null;\r\n    this.ngFormControls = {};\r\n    this.controls = {};\r\n    this.disposeValidation();\r\n  }\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  protected bindingData: BindingData;\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  protected bindingPath: string;\r\n  /**\r\n   * Form描述\r\n   */\r\n  private ngValidateForm: NgValidateForm;\r\n  /**\r\n   * 结构描述：FormControl\r\n   */\r\n  public ngFormControls: { [propName: string]: NgFormControl };\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metaDatas: { [propName: string]: any };\r\n  /**\r\n   * 结构描述：FormGroup\r\n   */\r\n  private ngChildForms: { [propName: string]: NgChildForm };\r\n  /**\r\n   * 存放某条数据下的属性错误信息\r\n   */\r\n  private controlIdMap: {\r\n    [id: string]: {\r\n      [propName: string]: object\r\n    }\r\n  };\r\n  /**\r\n   * 用于存储属性错误\r\n   */\r\n  private cardControls: object;\r\n  private raisedByValidateEffector = false;\r\n  public isShowValidationMsg = false;\r\n\r\n  // 属性在页面上展示状态的map,key是html中使用的属性名\r\n  public isShowPropMap: {\r\n    [domPropertyName: string]: boolean\r\n  };\r\n\r\n  private translate: Translate;\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  private destroy$: Subject<any>;\r\n  /**\r\n   * 将formControl的错误信息更新到cardControl上\r\n   */\r\n  static updateErrors(propertyName, errorObj, id, value?, isGrid?) {\r\n    Object.keys(Form.insMap).forEach(key => {\r\n      const form = Form.insMap[key];\r\n      if (!form) {\r\n        return;\r\n      }\r\n      if (id) {\r\n        form.setControlValue(propertyName, value);\r\n      }\r\n      if (form.enableValidate) {\r\n        form.isFormValid(propertyName, errorObj, id, isGrid);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 设置dom属性为显示状态\r\n   * @param domPropertyName dom属性\r\n   */\r\n  public setIsShowmap(domPropertyName: string) {\r\n    this.isShowPropMap[domPropertyName] = true;\r\n  }\r\n\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.raisedByValidateEffector = false;\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n\r\n  public setControlValue(key: string, value: any) {\r\n    const bindingObject: BindingObject = this.bindingData && this.bindingData.getObject() || null;\r\n    if (bindingObject && bindingObject.controlMap) {\r\n      bindingObject.controlMap[key] = this.getGridItemControl(key, value);\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性名称获取错误信息\r\n   * @param domPropertyName dom属性名称\r\n   */\r\n  public getCardControlErrors(domPropertyName?: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  /**\r\n   * 获取字段校验错误\r\n   * @param domPropertyName \r\n   * @returns \r\n   */\r\n  public getFormControlErrors(domPropertyName?: string) {\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  public getGridControlErrors(domPropertyName: string, id: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];\r\n  }\r\n\r\n  public isFormValid(propertyName?: string, errorObj?: object, id?: string, isGrid?: boolean): boolean {\r\n    let prefix = '';\r\n    // 如果校验信息是由表达式触发的，不处理\r\n    if (this.raisedByValidateEffector) {\r\n      return;\r\n    }\r\n    const isGridComponent = this.frameContext.frameComponent.isGridComponent;\r\n    if (isGridComponent !== undefined) {\r\n      isGrid = isGridComponent;\r\n    }\r\n    //拼接子表frontNodeCode\r\n    const bindingPaths = this.bindingPath.split('/').filter(p => p);\r\n    if (bindingPaths.length > 0) {\r\n      prefix = bindingPaths.join('.').concat('.');\r\n    }\r\n    // 界面上绑定的字段名\r\n    const domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);\r\n    // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件\r\n    if (propertyName && !domPropertyName) {\r\n      return true;\r\n    }\r\n    // 若界面上不存在当前属性（动态列），不进行验证\r\n    if (domPropertyName && !this.isShowPropMap[domPropertyName]) {\r\n      return true;\r\n    }\r\n    let isValid = true;\r\n    const bindingObject = this.bindingData.getObject();\r\n    const currentId = bindingObject.primaryKeyValue;\r\n    const isSubForm = this.bindingPath !== '/';\r\n    const bindingList = this.bindingData.getList();\r\n\r\n    // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况\r\n    if (isSubForm && bindingList.innerList.size === 0) {\r\n      return true;\r\n    }\r\n    // 无数据时不做校验\r\n    if (!currentId) {\r\n      return true;\r\n    }\r\n    // dataGrid修改时，根据id，创建formControl，并设置错误对象\r\n    if (id && domPropertyName) {\r\n      // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {\r\n      //   this.controlIdMap[id] = {};\r\n      // }\r\n      this.controlIdMap[id] = this.controlIdMap[id] || {};\r\n      this.controlIdMap[id][domPropertyName] = {\r\n        errors: errorObj\r\n      };\r\n    }\r\n\r\n    // 将grid的FormControl同步到界面展示用的controlIDMap中\r\n    // const currentBindingObject = bindingList.currentItem as BindingObject;\r\n    const currentBindingObject: BindingObject = bindingObject;\r\n\r\n    if (id && id !== currentId) {\r\n      return;\r\n    }\r\n\r\n    // 验证全部字段时，清空已有的错误信息\r\n    if (!propertyName && !id) {\r\n      currentBindingObject.controlMap = {};\r\n      this.controlIdMap = {};\r\n      this.cardControls = {};\r\n    }\r\n    Object.keys(this.controls).forEach((key) => {\r\n      if (this.isShowPropMap[key] !== true) {\r\n        return;\r\n      }\r\n      // 同步实体错误信息\r\n      if (key === domPropertyName) {\r\n        // 实体验证的信息直接赋值\r\n        if (errorObj && Object.keys(errorObj).length > 0) {\r\n          // 卡片的错误\r\n          if (!isGrid) {\r\n            // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息\r\n            // 遍历错误，将validator返回的错误信息国际化\r\n            Object.keys(errorObj).map((validType: any) => {\r\n              const validationError: ValidationError = errorObj[validType] && errorObj[validType]['error'] || null;\r\n              if (validationError) {\r\n                const validateRule: ValidateRule = validationError.rule;\r\n                const ngFormControl = this.getngFormControlByBinding(validateRule.field);\r\n                if (ngFormControl) {\r\n                  validateRule.property = ngFormControl.name || ngFormControl.defaultI18nValue;\r\n                  validateRule.targetId = ngFormControl.id;\r\n                  validateRule.targetName = this.formGroupName;\r\n                  // 修正校验必填表达式类型和多语资源中key不一致的问题\r\n                  const fixedValidType = validType === 'require' ? 'required' : validType;\r\n                  const messageTemplate = ValidationTypes.getMessage(fixedValidType);\r\n                  if (messageTemplate) {\r\n                    const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);\r\n                    errorObj[validType]['name'] = invalidMessage;\r\n                  }\r\n                }\r\n                // todo: ngFormControl暂时不设置\r\n                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);\r\n              }\r\n            });\r\n            this.cardControls[key] = {\r\n              errors: errorObj\r\n            };\r\n          }\r\n        } else {\r\n          this.cardControls[key] = {};\r\n        }\r\n      }\r\n      if (this.controls[key] && this.controls[key].errors && Object.keys(this.controls[key].errors).length > 0) {\r\n        // 将错误同步到界面展示的位置\r\n        // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息\r\n        this.cardControls[key] = {\r\n          errors: {\r\n            ...this.cardControls[key] && this.cardControls[key].errors,\r\n            ...this.controls[key].errors\r\n          }\r\n        };\r\n        isValid = false;\r\n      }\r\n    });\r\n    // 处理只开启前端校验，未在BE上启用必填校验的情况\r\n    if (this.cardControls) {\r\n      Object.keys(this.cardControls).forEach(key => {\r\n        if (this.cardControls[key] && this.cardControls[key].errors) {\r\n          Object.keys(this.cardControls[key].errors).forEach(validType => {\r\n            if (typeof this.cardControls[key].errors[validType] !== 'object') {\r\n              // 获取对应的校验信息\r\n              const validateRules: ValidateRule | ValidateRule[] = this.ngFormControls[key].validRules || [];\r\n              const rules: ValidateRule[] = [].concat(validateRules);\r\n              const validateRule: ValidateRule = rules.find(item => item.type === validType);\r\n              if (validateRule) {\r\n                validateRule.targetName = this.formGroupName;\r\n                const messageTemplate = ValidationTypes.getMessage(validType);\r\n                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');\r\n                this.cardControls[key].errors[key] = { value: this.controls[key] && this.controls[key].value || '', name: invalidMessage };\r\n              }\r\n            }\r\n          })\r\n        }\r\n      });\r\n    }\r\n    Object.keys(this.cardControls).forEach((key) => {\r\n      if (this.cardControls[key] && this.cardControls[key].errors && Object.keys(this.cardControls[key].errors).length > 0) {\r\n        isValid = false;\r\n      }\r\n    });\r\n    return isValid;\r\n  }\r\n  /**\r\n   * 更新表单错误信息\r\n   * @param errors 错误消息\r\n   */\r\n  public updateFormErrors(errors: { [domPropertyName: string]: { errors: { [ruleType: string]: { name: string, [prop: string]: any } } } }, forceShow: boolean = false, from: string = '') {\r\n    if (from && from === 'backend') {\r\n      this.clearBackendError();\r\n    }\r\n    // 原来是否已经显示错误，如果已经显示了则增加，否则替换\r\n    if (this.isShowValidationMsg === true || forceShow === true) {\r\n      this.isShowValidationMsg = true;\r\n      Object.keys(errors).forEach((key: string) => {\r\n        if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {\r\n          // 如果控件本身没有错误，则直接使用外部传递过来的错误，否则合并错误\r\n          this.cardControls[key] = {\r\n            errors: {\r\n              ...this.cardControls[key] && this.cardControls[key].errors,\r\n              ...errors[key].errors\r\n            }\r\n          };\r\n        } else {\r\n          // 移除内存中的错误信息\r\n          this.cardControls[key] = {\r\n            errors: {}\r\n          };\r\n          // 重置控件错误信息\r\n          this.controls[key].setErrors(null);\r\n          this.controls[key].markAsTouched();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 清空后端消息\r\n   */\r\n  public clearBackendError() {\r\n    Object.keys(this.cardControls).forEach(key => {\r\n      const errors = this.cardControls[key] && this.cardControls[key].errors || null;\r\n      if (errors) {\r\n        Object.keys(errors).forEach(errorType => {\r\n          if (errorType && errorType.startsWith('backend-message-')) {\r\n            delete errors[errorType];\r\n          }\r\n        });\r\n        if (errors && Object.keys(errors).length === 0) {\r\n          delete this.cardControls[key].errors;\r\n        }\r\n      } else {\r\n        this.cardControls[key] = {};\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 根据实体属性获取ngFormControl\r\n   * @param binding 控件绑定的实体属性名\r\n   */\r\n  private getngFormControlByBinding(binding: string) {\r\n    return Object.values(this.ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl.binding && ngFormControl.binding === binding);\r\n  }\r\n  private disposeValidation() {\r\n    const properties = this.constructor[PROP_METADATA];\r\n    if (properties && Object.keys(properties).length > 0) {\r\n      Object.keys(properties).forEach((key: string) => {\r\n        const props = this.constructor[PROP_METADATA][key] as any[];\r\n        if (props && props.length > 0) {\r\n          props.forEach((item) => {\r\n            if (item.validRules && Array.isArray(item.validRules) && item.validRules.length > 0) {\r\n              item.validRules = item.validRules.filter(item => !(item.eval && typeof (item.eval) === 'function'));\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性和校验类型获取错误信息\r\n   * @param domProperty dom属性\r\n   * @param validateRuleType 校验类型\r\n   */\r\n  private getErrorMessage(domProperty: string, validateRuleType: string) {\r\n    const formControl = this.ngFormControls[domProperty];\r\n    if (formControl) {\r\n      const validRules = formControl.validRules;\r\n      const rules = [];\r\n      if (!Array.isArray(validRules)) {\r\n        rules.push(validRules);\r\n      } else {\r\n        rules.push(...validRules);\r\n      }\r\n      const rule = rules.find(item => item.type === validateRuleType);\r\n      if (rule) {\r\n        const controlName = formControl.name;\r\n        const messageTemplate = ValidationTypes.getMessage(validateRuleType);\r\n        const message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);\r\n        return message;\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 初始化Form\r\n   * @param context 上下文\r\n   */\r\n  public init(bindingData: BindingData, bindingPath: string, frameContext?: FrameContext) {\r\n    this.frameContext = frameContext;\r\n    this.bindingData = bindingData;\r\n    this.bindingPath = bindingPath;\r\n    // 校验信息变化时重置卡片校验信息\r\n    if (this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.verifycationChanged) {\r\n      this.frameContext.viewModel.verifycationChanged.subscribe((verifycations: any[]) => {\r\n        if (!verifycations || verifycations.length < 1) {\r\n          this.resetCardValidMsg();\r\n        }\r\n      });\r\n    }\r\n    this.buildForm();\r\n    // @todo: 这种方式做key，如果脚本被压缩，存在风险\r\n    Form.insMap[this.constructor.name] = this;\r\n  }\r\n  /**\r\n   * 构造表单\r\n   */\r\n  public buildForm() {\r\n    this.collectMetadatas();\r\n    // this.createChildFormArrays();\r\n    this.createChildForms();\r\n    this.createControls();\r\n  }\r\n\r\n  /**\r\n   * 重置表单验证信息\r\n   */\r\n  public resetCardValidMsg(): void {\r\n    this.cardControls = {};\r\n    // 剔除 列表中新增后取消,删除的项对应的control信息\r\n    Object.keys(this.controlIdMap).forEach(id => {\r\n      if (!this.bindingData.getList().innerList.map(x => x.id).includes(id)) {\r\n        delete this.controlIdMap[id];\r\n      }\r\n    });\r\n    this.resetFormControls();\r\n    this.setShowValidationMsg(false);\r\n  }\r\n  /**\r\n   * 更新字段校验规则\r\n   * @param propertyName 属性名\r\n   * @param isRequired 是否必填\r\n   */\r\n  public updateFieldValidateRule(propertyName: string, isRequired: boolean) {\r\n    if (!propertyName) {\r\n      return;\r\n    }\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n\r\n    // 清空全部校验条件\r\n    if (formControl) {\r\n      formControl.clearValidators();\r\n      formControl.markAsUntouched();\r\n      formControl.markAsPristine();\r\n      formControl.setErrors([]);\r\n    }\r\n    // 动态必填场景时生成器不再在formControl上生成必填规则\r\n    // 因此validRules可能为空\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules: ValidateRule | ValidateRule[] = ngFormControl && ngFormControl.validRules || [];\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const requiredRuleIndex = validateRules.findIndex((validateRule: ValidateRule) => validateRule.type === ValidationTypes.REQUIRED);\r\n    if (isRequired) {\r\n      // 必填但控件没有必填规则，添加必填规则\r\n      if (requiredRuleIndex == -1) {\r\n\r\n        const validateRule: ValidateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };\r\n        // 扩展属性，以生成正确的错误提示\r\n        const displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';\r\n        validateRule.targetId = ngFormControl && ngFormControl.id || null;\r\n        validateRule.targetName = this.formGroupName;\r\n        validateRule.property = displayFieldName;\r\n        validateRule.field = ngFormControl && ngFormControl.binding;\r\n        validateRules.push(validateRule);\r\n      }\r\n    } else {\r\n      // 非必填场景，如果有必填规则，移除\r\n      if (requiredRuleIndex !== -1) {\r\n        validateRules.splice(requiredRuleIndex, 1);\r\n      }\r\n    }\r\n    // 整理校验规则\r\n    const validators: ValidatorFn[] = [];\r\n    Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n      const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n      if (validateFn) {\r\n        validators.push(validateFn);\r\n      }\r\n    }));\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    this.controls[propertyName].setValidators(validators);\r\n  }\r\n  public addFieldValidateRule(propertyName: string, message: string, expressionId: string, ruleType: RuleType) {\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n    if (formControl) {\r\n      // 清空全部校验条件\r\n      formControl.setErrors(null);\r\n    }\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules = this.ngFormControls[propertyName].validRules;\r\n    if (!validateRules) {\r\n      validateRules = [];\r\n    }\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const index = validateRules.findIndex((rule: ValidateRule) => rule && rule.expressionId === expressionId);\r\n    if (index !== -1) {\r\n      validateRules.splice(index, 1);\r\n    }\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    let fieldName = propertyName;\r\n    if (bindingPaths.length !== 0) {\r\n      const prefix = bindingPaths.join('/');\r\n      const binding = ngFormControl.binding || '';\r\n      const property = binding.split('.').join('/');\r\n      fieldName = `${prefix}/${property}`;\r\n    }\r\n    const context = this.frameContext;\r\n    const validateRule: ValidateRule = {\r\n      type: ruleType,\r\n      message: message,\r\n      expressionId: expressionId,\r\n      constraints: [],\r\n      bindingPath: bindingPaths.join('/'),\r\n      eval: function (options?: any) {\r\n        return context.viewModel.expression.validate(expressionId, options);\r\n      }\r\n    };\r\n    validateRules.push(validateRule);\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    // if (this.ngFormControls[propertyName] && validateRules.length > 0) {\r\n    //   const validators: ValidatorFn[] = [];\r\n    //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n    //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n    //     if (validateFn) {\r\n    //       validators.push(validateFn);\r\n    //     }\r\n    //   }));\r\n    //   this.controls[propertyName].setValidators(validators);\r\n    // }\r\n  }\r\n  /**\r\n   * 根据规则对象生成validator\r\n   * @param ruleObj: ValidateRule\r\n   */\r\n  private getValidatorByRuleObj(ruleObj: ValidateRule, ngFormControl: NgFormControl): ValidatorFn {\r\n    const { type, constraints = [], message = null } = ruleObj;\r\n    const displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n    const ruleHandlerObj = {\r\n      required: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = control.value;\r\n        let isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n        const parentPaths = this.bindingPath.split('/').filter(p => p);\r\n        const controlPaths = ngFormControl.binding.split('.');\r\n        const paths = parentPaths.concat(controlPaths);\r\n        const propInfo = this.getPropInfoByPath(paths);\r\n        const isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;\r\n        if (isMultiLangInput) {\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const currentLangValue = value && value[currentLanguage];\r\n          isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';\r\n        }\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        if (isValid && control.errors && control.errors.required) {\r\n          // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题\r\n          delete control.errors.required;\r\n          this.isFormValid(paths.join('.'));\r\n        }\r\n        return isValid ? null : { required: { value: control.value, name: invalidMessage } };\r\n      },\r\n      maxLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length > constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length < constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        // 这里只做最小值判断，如果用户未输入则不应该做判断\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value < constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const minValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = minValue.isGreaterThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);\r\n          // 假定为日期\r\n          // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或\"\"，则不对比大小，无意义\r\n          if (!constraints || constraints.length < 1 || !constraints[0]) {\r\n            return null;\r\n          }\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value < parseISO(constraints[0]);\r\n          } else {\r\n            isInValid = parseISO(control.value) < parseISO(constraints[0]);\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      maxValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value > constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const maxValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = maxValue.isLessThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          // 假定为日期\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;\r\n          } else {\r\n            isInValid = new Date(control.value) > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      exclude: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isValid = typeof control.value === 'string' && !this.validatorJs.contains(control.value, constraints[0]);\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };\r\n      },\r\n      matches: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = (control.value === null || control.value === undefined) ? '' : control.value.toString();\r\n        const isValid = value === '' ? true : this.validatorJs.matches(value, constraints[0]);\r\n        let invalidMessage = message;\r\n        if (!invalidMessage) {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n\r\n        return isValid ? null : { matches: { value: control.value, name: invalidMessage } }\r\n      }\r\n    };\r\n    return ruleHandlerObj[type];\r\n  }\r\n\r\n  /**\r\n   * 搜集属性装饰器\r\n   */\r\n  private collectMetadatas() {\r\n    this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :\r\n      MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM,\r\n        this.translateService, ['formGroupName']);\r\n    this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);\r\n    this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);\r\n  }\r\n\r\n  private collectionFormControlMetadats(preloadMetadata: { [propName: string]: NgFormControl } = null): { [propName: string]: NgFormControl } {\r\n    const metadatas = preloadMetadata ? MetadataUtil.translateMetadatasByName(preloadMetadata, this.translateService, ['name']) :\r\n      MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);\r\n    // 向验证规则中附加表单信息，用于显示验证提示。\r\n    if (metadatas) {\r\n      Object.keys(metadatas).forEach((propName: string) => {\r\n        const ngFormControl = metadatas[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const formControlId = ngFormControl.id;\r\n        if (Array.isArray(ngFormControl.validRules)) {\r\n          ngFormControl.validRules.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = formControlId;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return metadatas;\r\n  }\r\n\r\n  // 获取grid中每条数据的formControl\r\n  getGridItemControl(propName: string, value: any) {\r\n    const createControlFromRules = propertyName => {\r\n      const validators = [];\r\n      // 设置form中定义的验证规则\r\n      if (this.ngFormControls[propertyName] && Array.isArray(this.ngFormControls[propertyName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propertyName].validRules, ((ruleObj) => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n      return new FormControl(value, { validators: validators, updateOn: 'blur' });\r\n    };\r\n    return createControlFromRules(propName);\r\n  }\r\n\r\n  // 根据实体属性名获取界面绑定的属性名\r\n  getDomPropertyNameByEntityProp(propertyName: string, prefix: string = ''): string {\r\n    let domPropertyName = '';\r\n    Object.keys(this.ngFormControls).forEach(key => {\r\n      const binding = `${prefix}${this.ngFormControls[key].binding}`;\r\n      if (binding === propertyName) {\r\n        domPropertyName = key;\r\n      }\r\n    });\r\n    return domPropertyName;\r\n  }\r\n\r\n  /**\r\n   * 创建FormControl\r\n   */\r\n  createControls() {\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      const validators: ValidatorFn[] = [];\r\n\r\n      // 设置form中定义的验证规则\r\n      if (Array.isArray(this.ngFormControls[propName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propName].validRules, (ruleObj => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n\r\n      const updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';\r\n      const control = new FormControl(null, { validators: validators, updateOn: updateOn });\r\n      if (ngFormControl.binding) {\r\n        this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);\r\n      }\r\n      this.controls[propName] = control;\r\n      this[propName] = control;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建FormGroup\r\n   */\r\n  createChildForms() {\r\n    Object.keys(this.ngChildForms).forEach((propName: string) => {\r\n      const ngFormGroup = this.ngChildForms[propName];\r\n\r\n      // 构造子Form\r\n      const formGroup = new ngFormGroup.formType();\r\n      formGroup.init(this.bindingData, this.bindingPath, this.frameContext);\r\n\r\n      this.controls[propName] = formGroup;\r\n      this[propName] = formGroup;\r\n    });\r\n  }\r\n  /*\r\n  * 新增FormControls\r\n   */\r\n  addControls(column: any, converter?: ControlValueConverter) {\r\n\r\n    const updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';\r\n    const formControl = new FormControl('', { updateOn: updateOn });\r\n    const fieldPath = column.dataField;\r\n\r\n    // 日期格式  需要格式化\r\n    // this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n    if (column.editor && column.editor.binding) {\r\n      this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n      this.controls[column.editor.binding.path] = formControl;\r\n      this[column.editor.binding.path] = formControl;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 搭建control和table之间的通道\r\n   * @param control 控件\r\n   * @param bindingFieldPath 绑定的字段名\r\n   */\r\n  private setUpBindingDataPipeline(control: FormControl, bindingFieldPath, converter?: ControlValueConverter) {\r\n\r\n    if (!this.bindingData) {\r\n      throw Error('当前组件上下文中找不到BindingData，请检查！');\r\n    }\r\n\r\n    // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息\r\n    // __FRAME_CONTEXT__ 未使用\r\n    /*if (converter) {\r\n      converter['__FRAME_CONTEXT__'] = this.frameContext;\r\n    }*/\r\n\r\n    // 将bindignPath与bindingFieldPath合并\r\n    if (this.bindingPath.length > 1) {\r\n      bindingFieldPath = this.bindingPath.substr(1).replace(/\\//g, '.') + '.' + bindingFieldPath;\r\n    }\r\n    const bindingPaths: string[] = bindingFieldPath.split('.');\r\n    const propertyName = bindingPaths[bindingPaths.length - 1];\r\n    // 设置初始值\r\n    const initValue = this.getValueFromBindingData(bindingPaths, converter);\r\n    control.setValue(initValue);\r\n\r\n    // 设置初始值\r\n\r\n    // BindingData => control\r\n    this.bindingData.changes.pipe(takeUntil(this.destroy$)).pipe(filter((change: Change) => {\r\n      const bindingObject = this.bindingData.getObject();\r\n      const changePath = change.path.join('.');\r\n      if (change.isUdt) {\r\n        return changePath === bindingFieldPath;\r\n      }\r\n      if (change.type === ChangeType.ValueChanged) {\r\n        // path完全匹配\r\n        return changePath === bindingFieldPath;\r\n      } else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {\r\n        // 对于ObjectChanged、SelectionChanged，匹配到父级\r\n        const changePathWithDot = changePath === '' ? changePath : changePath + '.';\r\n        // 主表新增或切换时，重置错误信息\r\n        if (change && change.type === ChangeType.Load) {\r\n          this.resetCardValidMsg();\r\n        }\r\n        return bindingFieldPath.indexOf(changePathWithDot) === 0;\r\n      } else if (change.type === ChangeType.UpdateErrors) {\r\n        if (changePath === bindingFieldPath) {\r\n          this.cardControls[propertyName] = this.cardControls[propertyName] || {};\r\n          if (bindingFieldPath && this.controls[propertyName]) {\r\n            if (bindingObject.primaryKeyValue === change.id) {\r\n              this.cardControls[propertyName].errors = change.errors;\r\n            } else {\r\n              // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面\r\n              // this.cardControls[propertyName].errors = null;\r\n              // this.isFormValid(bindingFieldPath);\r\n            }\r\n          }\r\n          // 没有错误时\r\n          if (!change.path || !bindingFieldPath || !change.errors) {\r\n            this.cardControls[propertyName].errors = null;\r\n            this.isFormValid(bindingFieldPath);\r\n          }\r\n          return false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    })).subscribe((change: Change) => {\r\n      let fullEntityProp = propertyName;\r\n      // udt字段展示时需要将父级属性名和自身属性名用'_'连接\r\n      let pathPrefix = '';\r\n      if (change.isUdt) {\r\n        if (change.isGrid) {\r\n          // grid 将从表主字段去除\r\n          change.path.shift();\r\n        }\r\n        if (change.path.length) {\r\n          pathPrefix = change.path.join('.');\r\n        }\r\n        fullEntityProp = pathPrefix;\r\n      }\r\n\r\n      const value = this.bindingData.getValue(bindingPaths, false);\r\n      const newControlValue = converter ? converter.convertFrom(value) : value;\r\n      // 设置FormControl\r\n      const domPropName = this.getDomPropertyNameByEntityProp(fullEntityProp);\r\n      this.cardControls[domPropName] = this.cardControls[domPropName] || {};\r\n      if (change.errors) {\r\n        this.cardControls[domPropName].errors = change.errors;\r\n      }\r\n      // dataGrid保存时，根据id，创建formControl，并设置错误对象\r\n      if (change.id) {\r\n        if (this.controlIdMap[change.id] && Object.keys(this.controlIdMap[change.id]).length === 0) {\r\n          this.controlIdMap[change.id] = {};\r\n        }\r\n        this.controlIdMap[change.id] = this.controlIdMap[change.id] || {};\r\n        if (change.errors) {\r\n          this.controlIdMap[change.id][domPropName] = {\r\n            errors: change.errors\r\n          };\r\n        }\r\n      }\r\n      // 如果和控件上的值一样，则不再更新控件的值\r\n      if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {\r\n        return;\r\n      }\r\n\r\n      // 正则判断是否为日期\r\n      control.setValue(newControlValue);\r\n\r\n    });\r\n\r\n    // control => BindingData\r\n    control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value: any) => {\r\n      const oldBindingValue = this.bindingData.getValue(bindingPaths);\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (value && value.constructor && value.constructor.name === 'Date') {\r\n        const isValidDate = !isNaN(value);\r\n        if (!isValidDate) {\r\n          return;\r\n        }\r\n        if (oldBindingValue && converter) {\r\n          const oldValue = converter.convertFrom(oldBindingValue);\r\n\r\n          if (this.compareDate(value, oldValue) === true) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (this.isDate(converter) === true) {\r\n        if (DateUtil.isEqual(value, oldBindingValue) === true) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData\r\n      const newBindingValue = converter ? converter.convertTo(value) : value;\r\n      if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {\r\n        return;\r\n      }\r\n      // if (!this.isFormValid(propertyName, null, null, false)) {\r\n      //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};\r\n      //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);\r\n      // } else {\r\n      this.clearBackEndMessages(propertyName);\r\n      const emitEventToView = this.frameContext.appContext.runMode === RunMode.highSpeed;\r\n      this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: this.frameContext });\r\n      //}\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否是日期字段\r\n   * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；\r\n   * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；\r\n   * 3、不能使用constructor.name,压缩后name变了；\r\n   * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况\r\n   * @todo\r\n   * 为日期字段添加注解，根据注解来判断\r\n   */\r\n  private isDate(converter: ControlValueConverter): boolean {\r\n    let isDateConverter = false;\r\n\r\n    // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {\r\n    //   isDateConverter = true;\r\n    // }\r\n    if (converter && converter.hasOwnProperty('format') === true) {\r\n      isDateConverter = true;\r\n    }\r\n    return isDateConverter;\r\n  }\r\n\r\n  /**\r\n   * 比较日期（只比较年月日）\r\n   */\r\n  compareDate(srcDate: Date, dstDate: Date) {\r\n    if (!srcDate || !dstDate) {\r\n      return srcDate === dstDate;\r\n    }\r\n    const isEqual =\r\n      srcDate.getFullYear() === dstDate.getFullYear()\r\n      && srcDate.getMonth() === dstDate.getMonth()\r\n      && srcDate.getDate() === dstDate.getDate()\r\n      && srcDate.getHours() === dstDate.getHours()\r\n      && srcDate.getMinutes() === dstDate.getMinutes()\r\n      && srcDate.getSeconds() === dstDate.getSeconds();\r\n    return isEqual;\r\n  }\r\n\r\n  private getPropInfoByPath(path: Array<string>): DataPropInfo {\r\n    const entityType = this.frameContext && this.frameContext.repository.entityType || null;\r\n    if (entityType) {\r\n      const dataTypeInfo = new DataTypeInfo(entityType);\r\n      const propInfo: DataPropInfo = dataTypeInfo.getPropInfoByPath(path);\r\n      return propInfo;\r\n      // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 从BindingData中获取指定路径的值\r\n   */\r\n  private getValueFromBindingData(bindingPaths: string[], converter?: ControlValueConverter) {\r\n    const value = this.bindingData.getValue(bindingPaths);\r\n    const converteredValue = converter ? converter.convertFrom(value) : value;\r\n    return converteredValue;\r\n  }\r\n\r\n  public getEntityValueChangingListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanging) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanging;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n\r\n  public getEntityValueChangedListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanged) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanged;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n  /**\r\n   * 获取所有的前端验证规则\r\n   * @description\r\n   * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔\r\n   */\r\n  public getValidationRules(): Map<string, ValidateRule[]> {\r\n    const validatoinRules = new Map<string, ValidateRule[]>();\r\n    let parentPath = this.bindingPath;\r\n    if (parentPath.length && parentPath === '/') {\r\n      parentPath = '';\r\n    }\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      // const fieldName = `${parentPath}/${propName}`;\r\n\r\n      if (this.isShowPropMap[propName] === true || Object.keys(this.isShowPropMap).length === 0) {\r\n        const ngFormControl = this.ngFormControls[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const bindingPathArray = ngFormControl.binding ? ngFormControl.binding.split('.') : [propName];\r\n        const fieldNameArray = [parentPath, ...bindingPathArray];\r\n        const fieldName = fieldNameArray.join('/');\r\n        if (Array.isArray(ngFormControl.validRules) && ngFormControl.validRules.length > 0) {\r\n          let validationrulesToAdd = [...ngFormControl.validRules];\r\n          // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {\r\n          //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));\r\n          // }\r\n          validationrulesToAdd.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = ngFormControl.id;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n            validationRule.fullPath = fieldName;\r\n            if (this.frameContext) {\r\n              validationRule.frameContext = this.frameContext;\r\n            }\r\n          });\r\n          validatoinRules.set(fieldName, validationrulesToAdd);\r\n        } else {\r\n          validatoinRules.set(fieldName, [{\r\n            type: 'setDisplayInfo',\r\n            targetId: ngFormControl.id,\r\n            targetName: this.formGroupName,\r\n            property: displayFieldName,\r\n            fullPath: fieldName,\r\n            frameContext: this.frameContext\r\n          }]);\r\n        }\r\n      }\r\n    });\r\n    return validatoinRules;\r\n  }\r\n\r\n  public setTranslateService(translateService: Translate) {\r\n    if (!translateService) {\r\n      return;\r\n    }\r\n    this.translate = translateService;\r\n    ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());\r\n  }\r\n  /**\r\n   * 重置控件状态\r\n   */\r\n  private resetFormControls() {\r\n    if (Object.keys(this.controls).length > 0) {\r\n      Object.keys(this.controls).forEach((prop) => {\r\n        const formControl: AbstractControl = this.controls[prop];\r\n        formControl.markAsUntouched();\r\n        formControl.markAsPristine();\r\n      });\r\n    }\r\n\r\n  }\r\n  private clearBackEndMessages(domPropertyName: string) {\r\n    if (domPropertyName) {\r\n      if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n        const messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(item => item.startsWith('message-'));\r\n        const errors = { ...this.cardControls[domPropertyName]['errors'] };\r\n        messageKeys.forEach(key => delete errors[key]);\r\n        this.cardControls[domPropertyName] = { errors: errors };\r\n      }\r\n    } else {\r\n      Object.keys(this.cardControls).forEach(propertyName => {\r\n        if (this.cardControls[propertyName] && this.cardControls[propertyName]['errors'] && !!Object.keys(this.cardControls[propertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n          const messageKeys = Object.keys(this.cardControls[propertyName]['errors']).filter(item => item.startsWith('message-'));\r\n          const errors = { ...this.cardControls[propertyName]['errors'] };\r\n          messageKeys.forEach(key => delete errors[key]);\r\n          this.cardControls[propertyName] = { errors: errors };\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport { Form };\r\n","import { Repository } from '../repository/index';\r\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { ViewChange, Change, ChangeType } from './changes';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { Form } from '../form/index';\r\nimport { Pagination } from '../core';\r\nimport { BindingData } from './binding_data';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 实体操作工具类\r\n */\r\nclass EntityUtil {\r\n\r\n  /**\r\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\r\n    // 遍历bindingObject的properties进行赋值\r\n    bindingObject.properties.forEach((property: BindingProperty) => {\r\n      const propertyName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        if (entity && entity[propertyName] && this.isEffectiveField(entity, propertyName)) {\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        if (entity && entity[propertyName]) {\r\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\r\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else {\r\n        if (this.isEffectiveField(entity, propertyName)) {\r\n          const value = entity[propertyName];\r\n          bindingObject.setValue(propertyName, value, false, false);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setUpEntityPipeline(entity, bindingObject);\r\n  }\r\n\r\n  /**\r\n   * 建立entity和bindingObject之间的关联\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\r\n    if (!entity || !bindingObject) {\r\n      return;\r\n    }\r\n    // 监听entity变更\r\n    entity.onValueChanged.pipe(takeUntil(entity.unsubscribe)).subscribe((modification: Modification) => {\r\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0 || modification.fromParent === true) {\r\n        return;\r\n      }\r\n      const propertyName = modification.path[modification.path.length - 1];\r\n      const primaryKeyPath = modification.path[modification.path.length - 2];\r\n\r\n      // 验证主键是否匹配\r\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\r\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\r\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\r\n          return;\r\n        }\r\n      }\r\n      // TODO:修复动态列不触发变更的问题，临时方案，应该有单独的dynamicBindingObject类\r\n      if (modification.dynamic) {\r\n        if (bindingObject['__original__']) {\r\n          return;\r\n        }\r\n        const value = modification.value;\r\n        const target = bindingObject[propertyName];\r\n        if (!target) {\r\n          return;\r\n        }\r\n        Object.keys(value).forEach((key: string) => {\r\n          if (target.getValue(key) === value[key]) {\r\n            return;\r\n          }\r\n          target.setValue(key, value[key], true, false);\r\n        });\r\n      } else {\r\n        // 值没有发生变化，不再设置\r\n        // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\r\n        if (bindingObject.getValue(propertyName) === modification.value) {\r\n          return;\r\n        }\r\n        bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\r\n      }\r\n    });\r\n    // 监听bindingObject变更\r\n    bindingObject.viewChanges.pipe(takeUntil(bindingObject.unsubscribe)).subscribe((viewChange: ViewChange) => {\r\n      const value = viewChange.value;\r\n      const propertyName = viewChange.path[0];\r\n\r\n      let pathPrefix = '';\r\n      const pathData = entity.getPaths();\r\n      const paths = pathData.path;\r\n      let id = bindingObject['id'];\r\n      bindingObject['__original__'] = true;\r\n      // if (pathData.isUdt) {\r\n      // grid中udt没有id，从父级中取出id，以便存放验证信息\r\n      const getParentId = (target: any) => {\r\n        let parentId = '';\r\n        const findId = (item: any) => {\r\n          if (item && item && item['id']) {\r\n            parentId = item['id'];\r\n            return;\r\n          } else if (item['parent']) {\r\n            findId(item['parent']);\r\n          }\r\n        };\r\n        findId(target);\r\n        return parentId;\r\n      };\r\n      id = getParentId(bindingObject);\r\n      // if (pathData.isGrid) {\r\n      //   // grid 将从表主字段去除\r\n      //   paths.pop();\r\n      // }\r\n      if (paths.length) {\r\n        pathPrefix = paths.join('.') + '.';\r\n      }\r\n      // }\r\n      const controlProp = pathPrefix + propertyName;\r\n      // 调用实体验证，并将错误信息合并到formControl上\r\n      const entityValidate = (callback?: (error: any) => void) => {\r\n        const enableValidate = Object.values(Form.insMap).find(item => item && item.enableValidate);\r\n        if (!enableValidate) {\r\n          if (typeof callback === 'function') {\r\n            callback(null);\r\n          }\r\n          return;\r\n        }\r\n        entity.validateFromUtilSync(propertyName, value, result => {\r\n          const errorObj = {};\r\n          if (result.errors && result.errors.length > 0) {\r\n            result.errors.forEach((error: any) => {\r\n              if (error.constraints) {\r\n                Object.keys(error.constraints).forEach(key => {\r\n                  errorObj[key] = {\r\n                    value: value,\r\n                    name: error.constraints[key],\r\n                    error: error\r\n                  };\r\n                });\r\n              }\r\n            });\r\n          }\r\n          // 先设置实体验证信息，再设置form验证信息，然后在form.isFormValid内部整合实体验证form验证信息\r\n          Form.updateErrors(controlProp, errorObj, id, value, pathData.isGrid);\r\n          const formErrors = viewChange['errors'] || {};\r\n          const mergedErrors = Object.assign({}, formErrors, errorObj);\r\n          let validateError = null;\r\n          if (Object.keys(mergedErrors).length > 0) {\r\n            validateError = { [propertyName]: mergedErrors };\r\n          }\r\n          if (typeof (callback) === 'function') {\r\n            callback(validateError);\r\n          }\r\n        }, viewChange.context);\r\n      };\r\n\r\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\r\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\r\n      if (bindingObject.primaryKey) {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        if (propertyName !== primaryKey) {\r\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\r\n            entityValidate();\r\n            return;\r\n          }\r\n        } else if (entity[propertyName] !== value) {\r\n          // todo: 因异步校验未结束实体主键没有被赋值，导致实体其他属性无法赋值，待后续前端校验重构时去掉\r\n          entity[propertyName] = value;\r\n          entityValidate();\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n      if (entity[propertyName] === value) {\r\n        entityValidate();\r\n        return;\r\n      }\r\n\r\n      // 调用表单验证,通过后调用实体验证\r\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\r\n      entityValidate((errors: any) => {\r\n        entity.errors = errors;\r\n        entity[propertyName] = value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\r\n    this.loadEntities(entityList.items, bindingList);\r\n    this.setUpEntityListPipeline(entityList, bindingList);\r\n  }\r\n\r\n  /**\r\n   * 建立entityList和bindingList之间的关联\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\r\n    entityList.onListChanged.subscribe((modification: Modification) => {\r\n      const target = modification['target'];\r\n      if (target && target !== entityList) {\r\n        return;\r\n      }\r\n      switch (modification.type) {\r\n        // 添加实体\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          {\r\n            const entitiesToAdd = <Entity[]>modification.value;\r\n            if (entitiesToAdd.length === 0) {\r\n              return;\r\n            }\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n\r\n            this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\r\n          }\r\n          break;\r\n        case ModifyType.Insert:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            const position = modification.position;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            this.insertEntity(modification.value[0], bindingList, position);\r\n          }\r\n          break;\r\n        // 删除实体\r\n        case ModifyType.Remove:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\r\n            const id = modification.value[bindingList.primaryKey];\r\n            bindingList.removeByIds([id]);\r\n            // this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          }\r\n          break;\r\n\r\n        // 加载实体\r\n        case ModifyType.Load:\r\n          // 检查父id是否一致，冒泡导致的变更不处理\r\n          const paths = modification.path;\r\n          const parentPath = paths[paths.length - 2];\r\n          const parentId = bindingList.parent.primaryKeyValue;\r\n          if (parentPath.indexOf(parentId) === -1) {\r\n            return;\r\n          }\r\n          const entities = modification.value;\r\n          this.loadEntities(entities, bindingList);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 监听repository变化，保持repository和bindingList同步。\r\n   * @param repository  实体仓库\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\r\n    // 初次加载\r\n    const entities = Array.from(repository.entityCollection.toArray());\r\n    this.loadEntities(entities, bindingList);\r\n\r\n    // 监听变化\r\n    repository.entityCollectionChange.pipe(takeUntil(repository.destroy$)).subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.Load:\r\n          bindingList.clear(true);\r\n          this.loadEntities(<Entity[]>modification.value, bindingList, modification.entityCreate);\r\n          break;\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone, { isTreeNodeLoadScene: modification.isTreeNodeLoadScene });\r\n          break;\r\n        case ModifyType.AddData:\r\n          this.addData(<Entity[]>modification.value, bindingList, { isTreeNodeLoadScene: modification.isTreeNodeLoadScene });\r\n          break;\r\n        case ModifyType.Insert:\r\n          this.insertEntity(modification.value, bindingList, modification.position);\r\n          break;\r\n        case ModifyType.Remove:\r\n          this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.RemoveData:\r\n          this.removeData(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.PaginationInfoChange:\r\n          // 分页信息无需同步到bindingList，放到bindingData即可。保留此处只是为了兼容产品部可能使用bindingList上分页信息的场景\r\n          bindingList.paginationInfo = <Pagination>modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // 监听BindingList数据变化\r\n    bindingList.changes.pipe(takeUntil(bindingList.destroy$)).subscribe((change: Change) => {\r\n      if (change.type === ChangeType.PaginationInfoChange) {\r\n        const entityCollection = repository.entityCollection;\r\n        // const entityTypeName = entityCollection.entityTypeName;\r\n        // const original = entityCollection.paginationInfo[entityTypeName];\r\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\r\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntities(entities: Entity[], bindingList: BindingList, entityCreate: boolean = false) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.load(bindingObjects, entityCreate);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   * @param isCloned 是否克隆数据\r\n   * @param options 上下文\r\n   */\r\n  static appendEntities(entities: Entity[], bindingList: BindingList, isCloned: boolean = false, options: any = null) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.append(bindingObjects, isCloned, options);\r\n  }\r\n  /**\r\n   * 是否是有效的字段\r\n   * @param entity 实体\r\n   * @param propertyName 字段\r\n   * @returns\r\n   */\r\n  static isEffectiveField(entity: Entity, propertyName: string) {\r\n    if (!entity || !propertyName) {\r\n      return false;\r\n    }\r\n    propertyName = propertyName.toLowerCase();\r\n    if (entity['__farris_effective_fields__']) {\r\n      return entity['__farris_effective_fields__'].includes(propertyName);\r\n    }\r\n    if (entity['farris_effective_fields'] && typeof entity['farris_effective_fields'] === 'string') {\r\n      const effectiveFields = entity['farris_effective_fields'].split(',').filter(p => p).map(item => item.toLowerCase());\r\n      entity['__farris_effective_fields__'] = effectiveFields;\r\n      return effectiveFields.includes(propertyName);\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * 增加实体数据（不切换当前行）\r\n   * @param entities\r\n   * @param bindingList\r\n   */\r\n  static addData(entities: Entity[], bindingList: BindingList, options: any = null) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.addData(bindingObjects, options);\r\n  }\r\n  static insertEntity(entity: Entity, bindingList: BindingList, position: -1 | 1) {\r\n    const bindingObject = this.createBindingObject(entity, bindingList);\r\n    bindingList.insert(bindingObject, position);\r\n  }\r\n  /**\r\n   * 从bindingList移除entities对应的BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeByIds(ids);\r\n  }\r\n  static removeData(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeDataByIds(ids);\r\n  }\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return [];\r\n    }\r\n    const bindingObjects = [];\r\n    entities.forEach((entity: Entity) => {\r\n      const bindingObject = BindingObjectFactory.create(bindingList.properties, true);\r\n      // bindingObject['_ENTITY_'] = entity;\r\n      this.loadEntity(entity, bindingObject);\r\n\r\n      // // 为bindingObject设置默认值initialData属性\r\n      // if (entity['initialData']) {\r\n      //   bindingObject['initialData'] = entity['initialData'];\r\n      // }\r\n      bindingObjects.push(bindingObject);\r\n    });\r\n    return bindingObjects;\r\n  }\r\n  static createBindingObject(entity: Entity, bindingList: BindingList) {\r\n    const bindingObject = BindingObjectFactory.create(bindingList.properties, true);\r\n    this.loadEntity(entity, bindingObject);\r\n    return bindingObject;\r\n  }\r\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\r\n    // reposiroty => bindingData\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingData.pagingInfo = modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string,) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData(entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n}\r\n\r\nexport { EntityUtil };\r\n","// tslint:disable: max-line-length member-ordering\r\n/**\r\n * 绑定数据相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\r\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\r\n */\r\n\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTypeInfo } from '../core/data-type-info';\r\nimport { Repository } from '../repository/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BindingObject } from './binding_object';\r\nimport { InvokeOnValueChange } from './types';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 绑定数据\r\n * @description\r\n * # BindingData\r\n * \r\n * BindingData用于直接和界面绑定，它持有一个不可变的数据集合（BindingList），数据集合中是一个个不可变的数据对象（BindingObject）。\r\n * \r\n * ## 更新界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //根据paths设置属性值\r\n * //@param paths 属性路径数组\r\n * //@param value 属性值\r\n * //@param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n * //@param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n * public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true)\r\n * ```\r\n * \r\n * ### 示例\r\n * \r\n * - 更新主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG');\r\n *   ```\r\n * \r\n * - 更新子表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['soItems','price'],20);\r\n *   ```\r\n * \r\n * - 更新业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['udt','udt_field'],'value');\r\n *   ```\r\n * \r\n * - 仅更新界面数据（不提交变更集）\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG',true,false);\r\n *   ```\r\n * \r\n *   > 注意：\r\n *   >\r\n *   > 仅更新界面数据时bindingData必须是对应组件上下文的bindingData。\r\n *   >\r\n *   > 更新数据的命令挂载到不同的组件，产生的效果也不相同。如果命令挂到了卡片视图模型，那么可以直接在构件中注入`FrameContext`或`BindingData`并更新数据就可以。但如果命令挂到了非卡片视图 * 模型，则应该先获取到卡片上下文的bindingData。\r\n *   >\r\n *   > - 命令挂在卡片视图模型:\r\n *   >\r\n *   >   ```javascript\r\n *   >   const frameContext = this.frameContext.bindingData;\r\n *   >   frameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n *   >\r\n *   > - 命令挂在非卡片视图模型：\r\n *   >\r\n *   >   ```javascript\r\n *   >   const cardFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('card-frameId');\r\n *   >   cardFrameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n * \r\n * ## 获取界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n *   ```javascript\r\n *   //获取paths对应的属性值\r\n *   //@param  paths 属性路径数组\r\n *   //@returns 属性值\r\n *   public getValue(paths: string[], useInitValue = false)\r\n *   ```\r\n * \r\n * ### 示例\r\n * \r\n * - 获取主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['name']) //'ESG'\r\n *   ```\r\n * \r\n * - 获取从表中字段属性\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['soItems','price']); // 20\r\n *   ```\r\n * \r\n * - 获取业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['udt','udt_field']); // 'value'\r\n *   ```\r\n * \r\n * ## 获取指定BindingObject\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //通过主键获取对应的bindingObject\r\n * bindingData.list.findById(id: string): BindingObject;\r\n * ```\r\n * \r\n * ### 示例\r\n * - 获取某个主实体\r\n *   ```javascript\r\n *   bindingData.list.findById(\"id\");\r\n *   ```\r\n * - 获取某个实体下子表的所有数据\r\n *   ```javascript\r\n *   // 获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   // 获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   ```\r\n * \r\n * - 获取子表某一行数据\r\n * \r\n *   ```javascript\r\n *   //获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   //获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   //子表行数据\r\n *   const childrenBindingObject = bindingList.findById('子表数据id');\r\n *   const name = childrenBindingObject.getValue(\"name\"); // 或者childrenBindingObject['name']\r\n *   ```\r\n * \r\n * ## 常见问题\r\n * \r\n * ### 赋值或取值时为何不用指定主键？\r\n * \r\n *    示例中取值或赋值时并没有指定主键值，这是由于BindingData赋值或取值时都是对当前行就行操作的，所以不需要指定主键。所以在计算&行切换场景下会导致取值或赋值错误，如本来想给第一行的某个字 * 段赋值，结果由于行切换导致把值赋给了其他行。\r\n * \r\n *    如果遇到赋值错误的情况可以通过BindingObject赋值或取值。\r\n * \r\n * ### 通过bindingData赋值了，界面也刷新了，但保存不上\r\n * \r\n *    这种情况多发生在有后端请求的情况下，比如通过bindingData赋值后紧接着有一个后端请求。由于bindingData赋值是异步的（目前是），这就可能导致赋值还没有结束（还没有产生变更）请求就发送 * 了，从而请求中没有对应的变更，请求回来后会默认清空本地变更，从而导致界面上显示数据已经修改，但数据库中数据并未修改。\r\n * \r\n *    解决该类问题可以通过实体赋值的方式，给实体赋值是同步的，赋值完成后变更就会产生，这样再发送请求时就可以把变更带到后端。\r\n */\r\n@Injectable()\r\nclass BindingData implements IDisposable, OnDestroy{\r\n  /**\r\n   * 数据类型描述\r\n   */\r\n  private dataTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 绑定该路径\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 可绑定的属性描述\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 行切换事件暂停抛出\r\n   */\r\n  public rowSelectedEventSuspend: boolean;\r\n  /**\r\n   * 数据列表\r\n   */\r\n  public list: BindingList;\r\n  private paginationInfo = null;\r\n\r\n  public set pagingInfo(pagingInfo: any) {\r\n    this.paginationInfo = pagingInfo;\r\n    this.firePagingChangeEvent();\r\n  }\r\n\r\n  public get pagingInfo() {\r\n    return this.paginationInfo;\r\n  }\r\n  dispose(options?: any) {\r\n    this.list.dispose();\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param skip 跳过\r\n   * @param take 获取\r\n   * @param bindingPath 路径\r\n   */\r\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      // 找到父级\r\n      // 获取当前实体上级的主键\r\n      const paths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n      const parentObject = this.getValue(paths) as BindingObject;\r\n      if (parentObject && parentObject[parentObject.primaryKey]) {\r\n        // const key = `${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n        const key = `${nodeCode}`;\r\n        pagingInfo = pagingInfo[key] || {};\r\n        pagingInfo.pageIndex = ((skip / take) || 0) + 1;\r\n        pagingInfo.pageSize = take || 0;\r\n      }\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  public updatePagingInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number }, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, pageInfo);\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      pagingInfo[nodeCode] = Object.assign(pagingInfo[nodeCode], pageInfo);\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  private firePagingChangeEvent() {\r\n    this.list.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: this.bindingPath && this.bindingPath.split('/').filter(p => p) || [],\r\n      value: this.paginationInfo\r\n    });\r\n  }\r\n  /**\r\n   * 变更集\r\n   */\r\n  public get changes(): Subject<Change> {\r\n    return this.list.changes;\r\n  }\r\n\r\n  /**\r\n   * 值变化执行器工厂，根据路径产生执行器\r\n   */\r\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\r\n\r\n  /**\r\n   * 设置值变化执行器工厂\r\n   * @param value 值变化执行器工厂\r\n   */\r\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\r\n    this.valueChangeInvokerFactory = value;\r\n  }\r\n  public getValudChangeInvokerFactory() {\r\n    return this.valueChangeInvokerFactory;\r\n  }\r\n\r\n  /**\r\n   * 初始化（已废弃）\r\n   */\r\n  public init(repository: Repository<any>, bindingPath: string) {\r\n    this.initByRepository(repository, bindingPath);\r\n  }\r\n\r\n  /**\r\n   * 根据Repository对BindingData进行初始化\r\n   */\r\n  public initByRepository(repository: Repository<any>, bindingPath: string) {\r\n    this.bindingPath = bindingPath;\r\n\r\n    this.properties = PropertyUtil.getProperties(repository.entityType);\r\n    this.list = BindingListFactory.create(this.properties);\r\n    // 从repository初始化bindingData\r\n    this.pagingInfo = repository.entityCollection.paginationInfo;\r\n    // @todo\r\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\r\n    EntityUtil.loadRepository(repository, this.list);\r\n    this.dataTypeInfo = repository.entityTypeInfo;\r\n\r\n    this.extendProperties(this.properties);\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public initByBindingList(bindingList: BindingList, bindingPath: string) {\r\n    this.list = bindingList;\r\n    this.bindingPath = bindingPath;\r\n    this.extendProperties(this.list.properties);\r\n  }\r\n  public setDataTypeInfo(dataTypeInfo: DataTypeInfo) {\r\n    this.dataTypeInfo = dataTypeInfo;\r\n  }\r\n  /**\r\n   * 获取界面数据\r\n   * @param paths 属性路径数组\r\n   * @param useInitValue 是否使用默认值，默认为`false`\r\n   * @returns 属性值\r\n   */\r\n  public getValue(paths: string[], useInitValue = false) {\r\n    let target: any = this.list;\r\n    paths.forEach((path: string) => {\r\n      if (target) {\r\n        target = target[path];\r\n      }\r\n    });\r\n    if (useInitValue === true && paths && paths.length > 0) {\r\n      const initValue = this.getInitValueByPaths(paths);\r\n      if (target === undefined && target !== initValue) {\r\n        target = initValue;\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 该方法可以更新绑定层数据，从而达到更新界面数据的目的，进而更新本地仓库实体数据，产生变更，下次请求时会将变更带到后端并更新后端数据。\r\n   * @param paths 属性路径数组\r\n   * @param value 属性值\r\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n   * @description\r\n   * ## 示例\r\n   * \r\n   * ### 更新界面数据\r\n   * 使用该方法时只传递path和value参数，其余参数使用默认值。该用法会更新界面数据，同时更新实体数据，实体数据更新时会产生变更，这样在下次请求时会将该变更带到后端，\r\n   * 进而更新后端数据。\r\n   * ```typescript\r\n   * this.frameContext.bindingData.setValue(paths,value);\r\n   * ```\r\n   * \r\n   * ### 仅更新界面数据\r\n   * 有些场景下我们希望只更新界面的数据，不希望对后端数据产生影响，此时除传递paths和value参数外，还需要将emitEventToView设为true，emitEventToEntity设为false，\r\n   * 此时必须使用对应BindingData的setValue方法：\r\n   * ```typescript\r\n   * const tableFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n   * tableFrameContext.bindingData.setValue(paths,value,true,false);\r\n   * ```\r\n   * ## 注意事项\r\n   * setValue为异步方法，如果调用该方法后随即发送后端请求，此时实体变更尚未产生，但请求已经发送，变更无法带到后端，导致变更丢失，出现界面上显示数据已经修改，\r\n   * 但后端并未修改的问题。\r\n   * 因此，如果赋值后随即发送请求应该使用实体赋值的方法。\r\n   */\r\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true, errors: any = {}, context?: any) {\r\n\r\n    if (!paths || paths.length === 0) {\r\n      throw Error('路径不能为空');\r\n    }\r\n    const parentPaths = paths.slice(0, paths.length - 1);\r\n    const propName = paths[paths.length - 1];\r\n\r\n    let parent = this.getValue(parentPaths);\r\n    if (!parent) {\r\n      throw Error('找不到要设置的对象');\r\n    }\r\n    if (parent instanceof BindingData) {\r\n      parent = parent.list.currentItem;\r\n    } else if (parent instanceof BindingList) {\r\n      parent = parent.currentItem;\r\n    }\r\n    if (!!this.valueChangeInvokerFactory) {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, this.valueChangeInvokerFactory(paths), context);\r\n    } else {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, null, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据paths清空属性值\r\n   */\r\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true, context?: any) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    } else {\r\n\r\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\r\n      const oldValue = this.getValue(paths);\r\n      if (typeof oldValue === 'number') {\r\n        initValue = 0;\r\n      } else {\r\n        initValue = '';\r\n      }\r\n    }\r\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity, null, context);\r\n  }\r\n\r\n  /**\r\n   * 获取当前列表\r\n   */\r\n  public getList() {\r\n    if (!this.bindingPath || this.bindingPath === '/') {\r\n      return this.list;\r\n    }\r\n\r\n    const bindingPath = this.bindingPath.substr(1);\r\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.getValue(bindingPathArray);\r\n  }\r\n\r\n  /**\r\n   * 获取当前对象\r\n   */\r\n  public getObject() {\r\n    const bindingList = this.getList();\r\n    return bindingList.currentItem;\r\n  }\r\n  /**\r\n   * 绑定路径（仅路径部分，不包括属性）\r\n   * @param bindingPath 绑定路径\r\n   */\r\n  public getPath(bindingPath?: string[]) {\r\n    const bindingPaths = bindingPath.filter(p => p);\r\n    const path = [`${this.list.primaryKey}:${this.list.currentId}`];\r\n\r\n    bindingPaths.forEach((item: string) => {\r\n      path.push(item);\r\n      const list = this[item] as BindingList;\r\n      if (list) {\r\n        path.push(`${list.primaryKey}:${list.currentId}`);\r\n      }\r\n    });\r\n    return path;\r\n  }\r\n  /**\r\n   * 清空绑定数据\r\n   */\r\n  public reset() {\r\n    this.list.clear(true);\r\n  }\r\n  /**\r\n   * 通过绑定路径获取属性初始值\r\n   * @param paths 绑定路径\r\n   */\r\n  private getInitValueByPaths(paths: Array<string>) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo && this.dataTypeInfo.getPropInfoByPath(paths) || null;\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    }\r\n    return initValue;\r\n  }\r\n  /**\r\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\r\n   * @param properties 关联实体的属性集合\r\n   */\r\n  private extendProperties(properties: BindingProperty[]) {\r\n    properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.list.currentItem[propName];\r\n        },\r\n        set: (value: any) => {\r\n          this.list.currentItem[propName] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingData };\r\n","export enum Compare {\r\n  /**\r\n   * 等于\r\n   */\r\n  Equal = 0,\r\n  /**\r\n   * 不等于\r\n   */\r\n  NotEqual = 1,\r\n  /**\r\n   * 大于\r\n   */\r\n  Greater = 2,\r\n  /**\r\n   * 大于等于\r\n   */\r\n  GreaterOrEqual = 3,\r\n  /**\r\n   * 小于\r\n   */\r\n  Less = 4,\r\n  /**\r\n   * 小于等于\r\n   */\r\n  LessOrEqual = 5,\r\n  /**\r\n   * 包含\r\n   */\r\n  Like = 6,\r\n  /**\r\n   * 不包含\r\n   */\r\n  NotLike = 9,\r\n  In = 14,\r\n  /**\r\n   * 为空\r\n   */\r\n  Empty = 1001,\r\n  /**\r\n   * 不为空\r\n   */\r\n  NotEmpty = 1002\r\n}\r\n\r\nexport enum FilterRelation {\r\n  Empty = 0,\r\n  /**\r\n   * 并且\r\n   */\r\n  And = 1,\r\n  /**\r\n   * 或者\r\n   */\r\n  Or = 2\r\n}\r\n\r\nexport interface FilterCondition {\r\n  /**\r\n   * 字段\r\n   */\r\n  FilterField: string;\r\n  /**\r\n   * 值\r\n   */\r\n  Value: string;\r\n  /**\r\n   * 左括号\r\n   */\r\n  Lbracket?: string;\r\n  /**\r\n   * 右括号\r\n   */\r\n  Rbracket?: string;\r\n  /**\r\n   * 关系\r\n   */\r\n  Relation?: FilterRelation;\r\n  /**\r\n   * 比较符\r\n   */\r\n  Compare?: Compare;\r\n  /**\r\n   * 表达式类型\r\n   */\r\n  Expresstype?: ExpressValueType;\r\n}\r\n\r\n/**\r\n * 值类型\r\n */\r\nexport enum ExpressValueType {\r\n  /**\r\n   * 值\r\n   */\r\n  Value = 0,\r\n  /**\r\n   * 表达式\r\n   */\r\n  Expression = 1,\r\n  /**\r\n   * 前端表达式\r\n   */\r\n  FrontExpress = 'frontExpress'\r\n}\r\n\r\n\r\nexport const LeftBracket = [\r\n  '', '(', '((', '((('\r\n];\r\n\r\nexport const RighttBracket = [\r\n  '', ')', '))', ')))'\r\n];\r\n/**\r\n * 对象类型过滤条件\r\n */\r\nexport type ObjectFilterCondition = { [filterField: string]: { operator1: Compare, operator2?: Compare, relation: 'and' | 'or', value1: any, value2: any } }\r\n","import { Injectable } from '@angular/core';\r\nimport { Compare, FilterCondition, ObjectFilterCondition } from './types';\r\nimport { List } from 'immutable';\r\nimport { BindingObject } from '../binding-data';\r\n\r\n@Injectable()\r\nexport abstract class DataFilter {\r\n  constructor() { }\r\n  abstract filter(data: List<BindingObject>, conditions: Array<FilterCondition> | ObjectFilterCondition);\r\n  protected getCurrentLanguage() {\r\n    return window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n  }\r\n  public getCompareResult(fieldDataValue: any, operator: Compare, targetValue: any) {\r\n    const op = parseInt('' + operator, 10);\r\n    switch (op) {\r\n      case Compare.Equal:\r\n        return fieldDataValue == targetValue;\r\n      case Compare.NotEqual:\r\n        return ('' + fieldDataValue).toLowerCase() !== ('' + targetValue).toLowerCase();\r\n      case Compare.Greater:\r\n        return fieldDataValue > targetValue;\r\n      case Compare.GreaterOrEqual:\r\n        return fieldDataValue >= targetValue;\r\n      case Compare.Less:\r\n        return fieldDataValue < targetValue;\r\n      case Compare.LessOrEqual:\r\n        return fieldDataValue <= targetValue;\r\n      case Compare.Like:\r\n        return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) > -1;\r\n      case Compare.NotLike:\r\n        return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) === -1;\r\n      case Compare.In:\r\n        targetValue = targetValue || [];\r\n        return targetValue.findIndex((n) => n == fieldDataValue) > -1;\r\n      case 1001: // Empty\r\n        return fieldDataValue === '' || fieldDataValue === null;\r\n      case 1002: // NotEmpty\r\n        return fieldDataValue !== '' && fieldDataValue !== null;\r\n      case 1003: // Null\r\n        return fieldDataValue === null;\r\n      case 1004: // NotNull\r\n        return fieldDataValue !== null;\r\n    }\r\n  }\r\n  public getValue(object: any, propertyName: string) {\r\n    return propertyName.split('.').filter(p => p).reduce((result: any, property: string) => {\r\n      if (result) {\r\n        return result[property] === undefined ? null : result[property];\r\n      } else {\r\n        return null;\r\n      }\r\n    }, object);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataFilter } from './data_filter';\r\nimport { FilterCondition } from './types';\r\nimport { List } from 'immutable';\r\nimport { BindingObject } from '../binding-data';\r\n\r\n@Injectable()\r\nexport class ArrayFilterConditionDataFilter extends DataFilter {\r\n  constructor() {\r\n    super();\r\n  }\r\n  public filter(data: List<BindingObject>, conditions: FilterCondition[]) {\r\n    if (data && data.size) {\r\n      return data.filter((n) => this.validateRowData(n, conditions));\r\n    }\r\n    return data;\r\n  }\r\n  public validateRowData(bindingObject: BindingObject, conditions: any) {\r\n    if (!conditions || conditions.length === 0) {\r\n      return true;\r\n    }\r\n    return this.checkRowDataWithCondition(bindingObject, conditions);\r\n  }\r\n  private checkRowDataWithCondition(bindingObject: BindingObject, conditions) {\r\n    let resultObj = null;\r\n    if (conditions) {\r\n      resultObj = {};\r\n      conditions.forEach((condition) => {\r\n        const field = condition.FilterField;\r\n        let fieldValue = this.getValue(bindingObject, field);\r\n        const bindingProperty = bindingObject.properties.find((item) => item.name === field);\r\n        if (bindingProperty && bindingProperty.enableMultiLangInput && fieldValue) {\r\n          fieldValue = fieldValue[this.getCurrentLanguage()];\r\n        }\r\n        const where = condition;\r\n        const { Value, Compare: operator1 } = where;\r\n        if (where) {\r\n          const r = this.getCompareResult(fieldValue, operator1, Value);\r\n          if (resultObj[field] === undefined) {\r\n            resultObj[field] = [r];\r\n          } else {\r\n            resultObj[field].push(r);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // return this.checkAllFieldResult(resultObj);\r\n    const fields = Object.keys(resultObj);\r\n    const result = [];\r\n    fields.forEach((f) => {\r\n      const _filters = conditions.filter((n) => n.FilterField === f);\r\n      if (resultObj[f].length === 1) {\r\n        result.push(resultObj[f][0]);\r\n      } else {\r\n        if (_filters[0].Relation === 1 && resultObj[f].length === 2) { // and\r\n          result.push(resultObj[f][0] && resultObj[f][1]);\r\n        } else { // or\r\n          result.push(resultObj[f].indexOf(true) > -1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result.indexOf(false) === -1;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataFilter } from './data_filter';\r\nimport { ObjectFilterCondition } from './types';\r\nimport { BindingObject } from '../binding-data';\r\nimport { List } from 'immutable';\r\n\r\n@Injectable()\r\nexport class ObjectFilterConditionDataFilter extends DataFilter {\r\n  constructor() {\r\n    super();\r\n  }\r\n  public filter(data: List<BindingObject>, conditions: ObjectFilterCondition) {\r\n    if (data && data.size) {\r\n      return data.filter((row) => this.validateRowData(row, conditions));\r\n    }\r\n    return data;\r\n  }\r\n  public validateRowData(bindingObject: BindingObject, conditions: ObjectFilterCondition) {\r\n    if (!conditions || Object.keys(conditions).length === 0) {\r\n      return true;\r\n    }\r\n    return this.checkAllFieldInRowData(bindingObject, conditions);\r\n  }\r\n  private checkAllFieldInRowData(bindingObject: BindingObject, conditions: ObjectFilterCondition) {\r\n    let resultObj = null;\r\n    const currentLanguage = this.getCurrentLanguage();\r\n    if (conditions) {\r\n      const fields = Object.keys(conditions);\r\n      resultObj = {};\r\n      fields.forEach((field) => {\r\n        let fieldValue = this.getValue(bindingObject, field);\r\n        const property = bindingObject.properties.find((item) => item.name === field);\r\n        if (property && property.enableMultiLangInput && fieldValue) {\r\n          fieldValue = fieldValue[currentLanguage];\r\n        }\r\n\r\n        const where = conditions[field];\r\n        const { value1, operator1, relation, operator2, value2 } = where;\r\n        if (where) {\r\n          const result = this.getCompareResult(fieldValue, operator1, value1);\r\n          resultObj[field] = result;\r\n          if (relation) {\r\n            const result2 = this.getCompareResult(fieldValue, operator2, value2);\r\n            resultObj[field] = this.getRelationResult(result, relation, result2);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return this.checkAllFieldResult(resultObj);\r\n  }\r\n  private getRelationResult(result1: boolean, relation: 'and' | 'or', result2: boolean) {\r\n    const _relation = relation.toLowerCase();\r\n    if (_relation === 'and') {\r\n      return result1 && result2;\r\n    } else {\r\n      return result1 || result2;\r\n    }\r\n  }\r\n  private checkAllFieldResult(resultObj: { [key: string]: boolean }) {\r\n    if (!resultObj) {\r\n      return true;\r\n    }\r\n    return Object.values(resultObj).reduce((c, n) => {\r\n      return c && n;\r\n    }, true);\r\n  }\r\n}\r\n","/**\r\n * 绑定列表相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n// tslint:disable: max-line-length\r\n\r\nimport { List } from 'immutable';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingData } from './binding_data';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { IDisposable } from '../core';\r\nimport { FilterCondition, ArrayFilterConditionDataFilter, ObjectFilterCondition, ObjectFilterConditionDataFilter } from '../data-filter';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * BindingList是一个BindingObject集合\r\n */\r\nclass BindingList implements IDisposable {\r\n  public __type__ = 'BindingList';\r\n  /**\r\n   * immutable的BindingObject列表\r\n   */\r\n  private innerList: List<BindingObject>;\r\n  private emptyCurrentItem: BindingObject;\r\n  private sortFields: string[] = [];\r\n  private sortDirections: string[] = [];\r\n  /**\r\n   * 界面数据源\r\n   */\r\n  public defaultView: List<BindingObject> = null;\r\n  /**\r\n   * 关联实体的属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 父对象\r\n   */\r\n  public parent: BindingObject;\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 当前行对应的绑定对象的内码\r\n   */\r\n  public currentId: string;\r\n  /**\r\n   * destory signal\r\n   */\r\n  public destroy$: Subject<any>;\r\n\r\n  // #region 分页相关\r\n\r\n  /**\r\n   * 分页信息\r\n   */\r\n  public _paginationInfo: any = null;\r\n\r\n  set paginationInfo(sPaginationInfo: any) {\r\n    this._paginationInfo = sPaginationInfo;\r\n    if (this._paginationInfo === sPaginationInfo) {\r\n      return;\r\n    }\r\n    this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this._paginationInfo\r\n    });\r\n  }\r\n\r\n  get paginationInfo(): any {\r\n    return this._paginationInfo;\r\n  }\r\n  /**\r\n   * 获取页码\r\n   */\r\n  get pageIndex() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\r\n      return this.paginationInfo.pageIndex;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   */\r\n  get pageSize() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\r\n      return this.paginationInfo.pageSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取数据总项数\r\n   */\r\n  get total() {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 获取跳过的数据条数\r\n   */\r\n  get skip() {\r\n    const pageIndex = this.pageIndex;\r\n    const pageSize = this.pageSize;\r\n    return (pageIndex - 1) * pageSize;\r\n  }\r\n\r\n  /**\r\n   * 前台设置分页信息\r\n   * @param skip skip\r\n   * @param take take\r\n   */\r\n  public setPaginationInfo(skip: number, take: number) {\r\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\r\n      pageSize: take,\r\n      pageIndex: skip / take + 1\r\n    });\r\n    /*this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });*/\r\n  }\r\n  //#endregion\r\n\r\n  /**\r\n   * 当前行对应的绑定对象\r\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\r\n   */\r\n  public get currentItem(): BindingObject {\r\n    const currentItem = this.findById(this.currentId);\r\n    if (!currentItem) {\r\n      if (!this.emptyCurrentItem) {\r\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\r\n      }\r\n      return this.emptyCurrentItem;\r\n    }\r\n    return currentItem;\r\n  }\r\n\r\n  /**\r\n   * 绑定对象的数量\r\n   */\r\n  public get length(): number {\r\n    return this.innerList.count();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.changes = new Subject<Change>();\r\n    this.innerList = List<BindingObject>();\r\n    this.currentId = null;\r\n    this.destroy$ = new Subject();\r\n    this.updateDefaultView(this.changes);\r\n  }\r\n  /**\r\n   * 销毁\r\n   * @param options\r\n   */\r\n  dispose(options?: any) {\r\n    this.clear(true);\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加[Symbol.iterator]，使之能通过for of遍历\r\n   */\r\n  [Symbol.iterator]() {\r\n    const self = this;\r\n    let index = -1;\r\n    const size = this.innerList.size;\r\n\r\n    return {\r\n      next: function () {\r\n        index++;\r\n        if (index < size) {\r\n          return { done: false, value: self.innerList.get(index) };\r\n        }\r\n        return { done: true, value: undefined };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public load(objects: BindingObject[], entityCreate: boolean = false): void {\r\n    // 重置列表\r\n    this.innerList = this.innerList.clear();\r\n    if (objects.length !== 0) {\r\n      // 加载数据\r\n      objects.forEach((object: BindingObject) => {\r\n        this.add(object);\r\n      });\r\n\r\n      // 设置默认当前行\r\n      const currentItem = this.findById(this.currentId);\r\n      if (!currentItem) {\r\n        const firstId = objects[0][this.primaryKey];\r\n        this.setCurrentId(firstId, false, false);\r\n      }\r\n    } else {\r\n      this.currentId = null;\r\n    }\r\n    const change: Change = {\r\n      type: ChangeType.Load,\r\n      path: [],\r\n      value: objects\r\n    };\r\n    change.create = entityCreate;\r\n    // 触发事件\r\n    this.changes.next(change);\r\n  }\r\n\r\n  /**\r\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public append(objects: BindingObject[], isCloned: boolean = false, options: any = null): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 当前行为新追加的最后1行\r\n    const lastId = objects[objects.length - 1][this.primaryKey];\r\n    this.setCurrentId(lastId, true, true);\r\n    // 触发事件\r\n    const change: Change = {\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects,\r\n      isTreeNodeLoadScene: options && options.isTreeNodeLoadScene\r\n    };\r\n    if (isCloned) {\r\n      change.isCloned = true;\r\n    }\r\n    this.changes.next(change);\r\n  }\r\n  /**\r\n   * 增加数据\r\n   * @param objects 实体\r\n   * @param options 上下文\r\n   * @description 增加实体数据，但不切换当前行\r\n   */\r\n  public addData(objects: BindingObject[], options: any = null): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects,\r\n      isTreeNodeLoadScene: options && options.isTreeNodeLoadScene\r\n    });\r\n  }\r\n  public insert(object: BindingObject, position?: 1 | -1) {\r\n    const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\r\n    // 加载BindingObject\r\n    if (position === 1) {\r\n      this.innerList = this.innerList.insert(currentIndex + 1, object);\r\n    } else if (position === -1) {\r\n      this.innerList = this.innerList.insert(currentIndex, object);\r\n    } else {\r\n      this.innerList = this.innerList.push(object);\r\n    }\r\n    object.parent = this;\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n\r\n    this.setCurrentId(object.primaryKeyValue, true, true);\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: object,\r\n      detail: {\r\n        type: 'insert',\r\n        position\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\r\n   * @param object 绑定对象\r\n   */\r\n  public add(object: BindingObject) {\r\n    this.innerList = this.innerList.push(object);\r\n    object.parent = this;\r\n\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除主键值数组对应的绑定对象。\r\n   * @param ids 主键值数组\r\n   */\r\n  public removeByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let nextCurrentId = this.currentId;\r\n    ids.forEach((id: string) => {\r\n      // 如果当前行被删除，计算下一当前行\r\n      if (id === nextCurrentId) {\r\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\r\n      }\r\n\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 重新设置当前行\r\n    if (this.innerList.count() === 0) {\r\n      this.currentId = null;\r\n    } else {\r\n      this.setCurrentId(nextCurrentId, false, false);\r\n    }\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 删除数据（不切换当前行）\r\n   * @param ids ids\r\n   */\r\n  public removeDataByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear(clearOnly: boolean = false) {\r\n    this.innerList.forEach((item: BindingObject) => {\r\n      item['_ENTITY_'] = null;\r\n      item.unsubscribe.next();\r\n      item.unsubscribe.complete();\r\n      item.changes.complete();\r\n      item.viewChanges.complete();\r\n    });\r\n    this.innerList = this.innerList.clear();\r\n    if (!clearOnly) {\r\n      this.currentId = null;\r\n      this.changes.next({\r\n        type: ChangeType.Remove,\r\n        path: [],\r\n        value: []\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\r\n   * - 如果被删除的行是最后1行，则上移1行；\r\n   * - 其他情况，下移1行。\r\n   */\r\n  public getCurrentIdBeforeDeleting(): string {\r\n    let nextIndex = -1;\r\n    const currentIndex = this.getIndexById(this.currentId);\r\n    if (currentIndex === this.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n    return this.getIdByIndex(nextIndex);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值获取对应绑定对象\r\n   * @param   id 要查找的主键值\r\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\r\n   */\r\n  public findById(id: string): BindingObject | null {\r\n    let target: BindingObject;\r\n    target = this.innerList.find((item) => {\r\n      return item.getValue(this.primaryKey) === id;\r\n    });\r\n    return target === undefined ? null : target;\r\n  }\r\n\r\n  /**\r\n   * 将主键值为id的绑定对象设置为当前行\r\n   * @param  id        要设置的主键值\r\n   * @param  emitEvent 是否发送当前行变更事件\r\n   * @param  force 强制切换\r\n   */\r\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true, force: boolean = false): void {\r\n    if (this.currentId === id && !force) {\r\n      return;\r\n    }\r\n\r\n    // 不存在时设置为null\r\n    // const currentObj = this.findById(id);\r\n    // if (!currentObj) {\r\n    //   this.currentId = null;\r\n    // } else {\r\n    //   this.currentId = id;\r\n    // }\r\n\r\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\r\n    const currentObj = this.findById(id);\r\n    if (!currentObj && !force) {\r\n      return;\r\n    }\r\n    this.currentId = id;\r\n\r\n    // 发出行切换事件\r\n    if (emitEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.SelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n\r\n    // 是否发送全局的行切换事件\r\n    if (emitGlobalEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.GlobalSelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据主键值为id的绑定对象的索引\r\n   * @param id 主键值\r\n   * @returns 找到时返回对应的index，找不到时返回-1\r\n   */\r\n  public getIndexById(id: string): number {\r\n    return this.innerList.findIndex((obj: BindingObject) => {\r\n      return obj[this.primaryKey] === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据索引位置获取对应绑定对象的主键值\r\n   * @reutrn 找到时返回对应主键值，找不到返回null\r\n   */\r\n  public getIdByIndex(index: number): string {\r\n\r\n    if (index < 0 || index > this.length) {\r\n      return null;\r\n    }\r\n\r\n    if (this.innerList.has(index) === false) {\r\n      return null;\r\n    }\r\n    const obj = this.innerList.get(index);\r\n    return obj[this.primaryKey];\r\n  }\r\n\r\n  /**\r\n   * 转换为BindingObject数组\r\n   */\r\n  public toArray(): BindingObject[] {\r\n    return this.innerList.toArray();\r\n  }\r\n  /**\r\n   * 交互数据位置\r\n   * @param id1 id1\r\n   * @param id2 id2\r\n   */\r\n  public swapById(id1: any, id2: any) {\r\n    const item1 = this.innerList.find((element) => element.primaryKeyValue === id1);\r\n    const item2 = this.innerList.find((element) => element.primaryKeyValue === id2);\r\n    this.innerList = this.innerList.map((bindingObject: BindingObject, index: number) => {\r\n      if (bindingObject.primaryKeyValue === id1) {\r\n        return item2;\r\n      } else if (bindingObject.primaryKeyValue === id2) {\r\n        return item1;\r\n      } else return bindingObject;\r\n    }).toList();\r\n    this.changes.next({\r\n      type: ChangeType.Swap,\r\n      path: [],\r\n      detail: {\r\n        type: 'swap',\r\n        id: [id1, id2]\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 转换为JSON对象\r\n   * @param options 配置\r\n   * @returns 普通对象数组\r\n   */\r\n  public toJSON(options?: any): any[] {\r\n    const result = [];\r\n    this.innerList.forEach((obj: BindingObject) => {\r\n      result.push(obj.toJSON(options));\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * 过滤列表数据\r\n   * @param conditions 过滤条件\r\n   */\r\n  public filter(conditions: Array<FilterCondition> | ObjectFilterCondition) {\r\n    if (this.defaultView === null) {\r\n      this.defaultView = this.innerList.toList();\r\n    }\r\n    let list: List<BindingObject>;\r\n    if (Array.isArray(conditions)) {\r\n      const filter = new ArrayFilterConditionDataFilter();\r\n      list = this.defaultView.filter((bindingObject) => {\r\n        return filter.validateRowData(bindingObject, conditions);\r\n      }).toList();\r\n    } else {\r\n      const filter = new ObjectFilterConditionDataFilter();\r\n      list = this.defaultView.filter((bindingObject) => {\r\n        return filter.validateRowData(bindingObject, conditions);\r\n      }).toList();\r\n    }\r\n    // 如果有排序条件，则对过滤后的结果进行排序\r\n    if (this.sortFields && this.sortFields.length > 0) {\r\n      this.innerList = list.sort(this.comparator(this.sortFields, this.sortDirections)).toList();\r\n    } else {\r\n      this.innerList = list;\r\n    }\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   * @throws 路径必须为字符串！\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter((item) => !!item && item.trim().length > 0).map((item) => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach((item) => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 对bindingList就行排序\r\n   * @param fields - 排序字段\r\n   * @param directions - 排序规则字段\r\n   * @param options - 参数\r\n   * @throws argument error\r\n   */\r\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\r\n    if (!this.defaultView) {\r\n      this.defaultView = this.innerList.toList();\r\n    }\r\n    // 默认升序\r\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',').filter((p) => p) : fields || [];\r\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',').filter((p) => p) : directions || [];\r\n    // 排序字段和排序方式应一致\r\n    if (arrFields.length !== arrDirections.length) {\r\n      throw new Error('sortBy:fields and directions not match');\r\n    }\r\n    this.sortFields = arrFields;\r\n    this.sortDirections = arrDirections;\r\n    if (!this.sortFields || this.sortFields.length < 1) {\r\n      if (this.defaultView) {\r\n        this.innerList = this.defaultView.toList();\r\n        // 清空过滤条件后重置原始数据源\r\n        this.defaultView = null;\r\n      }\r\n    } else {\r\n      this.innerList = this.innerList.sort(this.comparator(arrFields, arrDirections)).toList();\r\n    }\r\n  }\r\n  private getValue(target: any, propName: string, isMultiLangProp: boolean = false, currentLanguage: string = 'zh-CHS') {\r\n    if (target instanceof BindingList) {\r\n      target = target.currentItem;\r\n    } else if (target instanceof BindingData) {\r\n      target = target.list.currentItem;\r\n    }\r\n    let result = null;\r\n    if (propName.indexOf('.') === -1) {\r\n      result = target[propName];\r\n    } else {\r\n      const props = propName.split('.');\r\n      for (const prop of props) {\r\n        target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);\r\n      }\r\n    }\r\n    if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {\r\n      return result[currentLanguage];\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n  /**\r\n   * 排序器\r\n   * @param props - 排序字段\r\n   * @param orders - 排序规则\r\n   * @returns\r\n   */\r\n  private comparator(props: Array<string>, orders: Array<string>) {\r\n    return (item1: BindingObject, item2: BindingObject) => {\r\n      return props.reduce((result, prop) => {\r\n        if (result === 0) {\r\n          const bindingProperty = this.properties.find((item) => item.name === prop);\r\n          let isMultiLangProp = false;\r\n          if (bindingProperty) {\r\n            isMultiLangProp = bindingProperty.enableMultiLangInput;\r\n          }\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\r\n          let item1Value = this.getValue(item1, prop, isMultiLangProp, currentLanguage);\r\n          let item2Value = this.getValue(item2, prop, isMultiLangProp, currentLanguage);\r\n\r\n          if (item1Value === null || item1Value === undefined) { item1Value = ''; }\r\n          if (item2Value === null || item2Value === undefined) { item2Value = ''; }\r\n\r\n          if (typeof item1Value === 'string' && typeof item2Value === 'string') {\r\n            const localeCompareResult = item1Value.localeCompare(item2Value);\r\n            result = localeCompareResult * order;\r\n          } else {\r\n            if (item1Value > item2Value) {\r\n              result = order * 1;\r\n            }\r\n            if (item1Value < item2Value) {\r\n              result = order * -1;\r\n            }\r\n          }\r\n        }\r\n        return result;\r\n      }, 0);\r\n    };\r\n  }\r\n  private updateDefaultView(change: Subject<Change>) {\r\n    change.pipe(takeUntil(this.destroy$)).subscribe((change: Change) => {\r\n      if (this.defaultView !== null && ((change.path.length === 0 && [ChangeType.Load, ChangeType.Append, ChangeType.Remove, ChangeType.Swap].includes(change.type)) || (change.type === ChangeType.ValueChanged && change.isBindingListTransmited !== true))) {\r\n        switch (change.type) {\r\n          case ChangeType.Load:\r\n            this.defaultView = this.innerList.toList();\r\n            break;\r\n          case ChangeType.Append: {\r\n            // 插入\r\n            if (change.detail && change.detail.type === 'insert') {\r\n              const position = change.detail.position;\r\n              const object = change.value;\r\n              const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\r\n              // 加载BindingObject\r\n              if (position === 1) {\r\n                this.defaultView = this.defaultView.insert(currentIndex + 1, object);\r\n              } else if (position === -1) {\r\n                this.defaultView = this.defaultView.insert(currentIndex, object);\r\n              } else {\r\n                this.defaultView = this.defaultView.push(object);\r\n              }\r\n            } else {\r\n              const objects = change.value as any[];\r\n              this.defaultView = this.defaultView.push(...objects);\r\n            }\r\n            break;\r\n          }\r\n          case ChangeType.Remove:\r\n            const ids = change.value as Array<string>;\r\n            if (ids.length === 0) {\r\n              this.defaultView = this.defaultView.clear();\r\n            } else {\r\n              ids.forEach((id: string) => {\r\n                const index = this.defaultView.findIndex((bindingObject: BindingObject) => bindingObject.primaryKeyValue === id);\r\n                this.defaultView = this.defaultView.delete(index);\r\n              });\r\n            }\r\n\r\n            break;\r\n          case ChangeType.ValueChanged:\r\n            const id = change.id;\r\n            const bindingObject = this.defaultView.find((obj: BindingObject) => obj.primaryKeyValue === id);\r\n            const paths = change.path.concat([]);\r\n            const propertyName = paths.pop();\r\n            const target: BindingObject = paths.reduce((object: BindingObject, path: string) => {\r\n              return object[path];\r\n            }, bindingObject) as BindingObject;\r\n            if (target) {\r\n              target.setValue(propertyName, change.value);\r\n            }\r\n            break;\r\n          case ChangeType.Swap:\r\n            const [id1, id2] = change.detail && change.detail.id;\r\n            const item1 = this.defaultView.find((element) => element.primaryKeyValue === id1);\r\n            const item2 = this.defaultView.find((element) => element.primaryKeyValue === id2);\r\n            this.defaultView = this.defaultView.map((bindingObject: BindingObject, index: number) => {\r\n              if (bindingObject.primaryKeyValue === id1) {\r\n                return item2;\r\n              } else if (bindingObject.primaryKeyValue === id2) {\r\n                return item1;\r\n              } else return bindingObject;\r\n            }).toList();\r\n            break;\r\n          // case ChangeType.SortChanged:\r\n          //   const { fields = [], directions = [] } = change.detail || {};\r\n          //   this.defaultView = this.defaultView.sort(this.comparator(fields, directions)).toList();\r\n          //   break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingList };\r\n","import { Subject, of } from 'rxjs';\r\nimport { Map } from 'immutable';\r\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { InvokeOnValueChange } from './types';\r\n\r\n/**\r\n * 绑定对象基类\r\n */\r\nabstract class BaseBindingObject {\r\n  public __type__ = 'BindingObject';\r\n  // protected data: any = undefined;\r\n  /**\r\n   * immutable值对象\r\n   */\r\n  protected innerValues: Map<string, any>;\r\n  /**\r\n   * 当前语言\r\n   */\r\n  protected currentLanguage: string;\r\n  /**\r\n   * 父对象或父列表\r\n   */\r\n  public parent: BindingList | BaseBindingObject;\r\n\r\n  /**\r\n   * 实体引起的变更\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 界面层引起的变更流\r\n   */\r\n  public viewChanges: Subject<ViewChange>;\r\n\r\n  /**\r\n   *  属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 主键值\r\n   */\r\n  public get primaryKeyValue() {\r\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\r\n  }\r\n  /**\r\n   * 数据行的主键值\r\n   */\r\n  public get rowPrimaryKeyValue() {\r\n    const row = this.getRow(this);\r\n    return row && row.primaryKeyValue || null;\r\n  }\r\n  /**\r\n   * 绑定到实体\r\n   */\r\n  public fromEntity: boolean = undefined;\r\n  /**\r\n   * 标识是否提交过\r\n   */\r\n  public isShowValidationMsg = false;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe: Subject<any> = new Subject();\r\n  /**\r\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\r\n   */\r\n  public controlMap: any = {};\r\n  // private __differ__ = this.differ();\r\n  constructor() {\r\n    this.innerValues = Map<string, any>();\r\n    this.changes = new Subject<Change>();\r\n    this.viewChanges = new Subject<ViewChange>();\r\n  }\r\n  /**\r\n   * 设置是否提交过\r\n   */\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n  // public abstract load(data: any);\r\n  /**\r\n   * 根据属性名获取属性值\r\n   * @param   propertyName 属性名\r\n   * @returns 属性值\r\n   */\r\n  public getValue(propertyName: string): any {\r\n    return this.innerValues.get(propertyName);\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   * @param propertyName        属性名\r\n   * @param propertyValue       属性值\r\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\r\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\r\n   * @param errors              错误消息\r\n   * @param invokeOnValueChange 值变化事件执行句柄\r\n   */\r\n  public setValue(propertyName: string, propertyValue: any, emitEventToView: boolean = false, emitEventToEntity: boolean = false, errors?: any, invokeOnValueChange?: InvokeOnValueChange, context?: any): void {\r\n    // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值\r\n    // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {\r\n    //   return;\r\n    // }\r\n    const oldPropertyValue = this.getValue(propertyName);\r\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\r\n    // if (oldPropertyValue === propertyValue) {\r\n    //   return;\r\n    // }\r\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\r\n      // 设定缺省\r\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean, primaryValue?: any) {\r\n        return of(true);\r\n      };\r\n    }\r\n    if (emitEventToEntity === true) {\r\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\r\n      // if(!this.innerValues.has(propertyName)) {\r\n      //   return;\r\n      // }\r\n      // 执行实体值变化前事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, false, this.rowPrimaryKeyValue).subscribe((result) => {\r\n        if (result) {\r\n          //this.__differ__.onValueChange();\r\n          // 如果成功，执行变化，并通知实体变化\r\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n          // this.data[propertyName] = propertyValue;\r\n          const viewChange = this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);\r\n          this.viewChanges.next(viewChange);\r\n          // 如果需要通知视图，通知视图相应修改\r\n          if (emitEventToView === true) {\r\n            const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n            this.changes.next(change);\r\n          }\r\n          // 执行实体值变化后事件\r\n          invokeOnValueChange(oldPropertyValue, propertyValue, true, this.rowPrimaryKeyValue).subscribe();\r\n        } else {\r\n          // 如果失败，不再通知实体变化\r\n          // 并执行界面回滚操作\r\n          const change = this.buildChangesContext(propertyName, oldPropertyValue, context, errors);\r\n          this.changes.next(change);\r\n        }\r\n      });\r\n    } else {\r\n      //this.__differ__.onValueChange();\r\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\r\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n      // this.data[propertyName] = propertyValue;\r\n      if (emitEventToView === true) {\r\n        const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n        this.changes.next(change);\r\n      }\r\n      // 执行实体值变化后事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, true, this.rowPrimaryKeyValue).subscribe();\r\n    }\r\n  }\r\n  /**\r\n   * 将BindingObject实例转换成JSON对象\r\n   */\r\n  public toJSON(options?: any): any {\r\n    //if (!this.__differ__.isChange()) {\r\n    //  return this.__differ__.value();\r\n    //}\r\n    const langCode = this.getCurrentLanguage();//window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    const result = {};\r\n    this.properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        const list: BindingList = this[propName];\r\n        result[propName] = list.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else {\r\n        // 1、对于多语录入字段；\r\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\r\n        if (property.enableMultiLangInput === true) {\r\n          // 忽略多语字段，只返回当前语言\r\n          if (options && options.ignoreMultiLangInput === true) {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[propName] = multiLangValueObj[langCode];\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          } else if (options && options.useFullMultiLangProperty) {\r\n            // 给审批提供的扩展 @2021-10-13\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[`${propName}_MULTILANGUAGE`] = multiLangValueObj;\r\n              // 除返回多语字段外，将当前语言也返回\r\n              result[propName] = multiLangValueObj[langCode];\r\n            }\r\n          } else {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (!multiLangValueObj) {\r\n              result[propName] = { [langCode]: multiLangValueObj };\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          }\r\n        } else {\r\n          result[propName] = this.getValue(propName);\r\n        }\r\n      }\r\n    });\r\n    // this.__differ__.update(result);\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   * @returns\r\n   */\r\n  protected getCurrentLanguage() {\r\n    this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    return this.currentLanguage;\r\n  }\r\n  /**\r\n   * 构造bindignData变更上下文\r\n   * @param propertyName\r\n   * @param propertyValue\r\n   * @param context\r\n   * @param errors\r\n   * @param type\r\n   * @returns\r\n   */\r\n  private buildChangesContext(propertyName: string, propertyValue: any, context?: any, errors?: any, type: ChangeType = ChangeType.ValueChanged): Change {\r\n    const object = this.getRow(this);\r\n    const id = object ? object.primaryKeyValue : null;\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: propertyValue,\r\n      id: id,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n  /**\r\n   * 构造viewChanges上下文\r\n   * @param propertyName\r\n   * @param value\r\n   * @param preValue\r\n   * @param errors\r\n   * @param context\r\n   * @param type\r\n   * @returns\r\n   */\r\n  private buildViewChangesContext(propertyName: string, value: any, preValue: any, errors?: any, context?: any, type: ViewChangeType = ViewChangeType.ValueChanged): ViewChange {\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: value,\r\n      preValue: preValue,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n  private getRow(bindingObject: BaseBindingObject): BaseBindingObject {\r\n    if (bindingObject && bindingObject.fromEntity) {\r\n      return bindingObject;\r\n    }\r\n    if (bindingObject.parent && !(bindingObject.parent instanceof BindingList)) {\r\n      return this.getRow(bindingObject.parent);\r\n    } else {\r\n      return bindingObject;\r\n    }\r\n  }\r\n  private makeHash() {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < 10; i++)\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    return text;\r\n  }\r\n  private differ() {\r\n    let previous, next, value;\r\n    return {\r\n      onValueChange: () => {\r\n        next = this.makeHash();\r\n      },\r\n      isChange: () => {\r\n        return next !== previous;\r\n      },\r\n      update: (result) => {\r\n        value = result;\r\n        previous = next;\r\n      },\r\n      value: () => {\r\n        return value;\r\n      }\r\n    };\r\n  }\r\n}\r\nexport { BaseBindingObject }\r\n","/**\r\n * BindingObject相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { BindingProperty } from './binding_property';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\n/**\r\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\r\n */\r\nclass BindingObject extends BaseBindingObject {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param properties 属性集合\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    super();\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n  }\r\n  /**\r\n   * 重新加载数据\r\n   * @param data\r\n   */\r\n  /*public load(data: any) {\r\n    throw new Error('Method not implemented.');\r\n  }*/\r\n}\r\n\r\nexport { BindingObject };\r\n","import { Entity } from '../entity/index';\r\nimport { Repository, EntityManager } from '../repository/index';\r\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\r\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingData } from './binding_data';\r\n\r\n\r\nclass BindingDataFactory {\r\n\r\n  /**\r\n   * 根据Repository创建一个BindingData\r\n   */\r\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n    bindingData.setDataTypeInfo(repository.entityTypeInfo);\r\n    EntityLoadUtil.loadRepository(repository, bindingList);\r\n\r\n    // 从repository初始化bindingData\r\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\r\n   * @internal\r\n   * @summary\r\n   * 1、该方法暂时仅供内部单元测试使用；\r\n   * 2、该方法暂时只创建BindingData，不建立双向关联\r\n   */\r\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n\r\n    // 初始化数据\r\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\r\n    EntityLoadUtil.loadEntities(entities, bindingList);\r\n\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据已经存在的BindingData创建一个新的BindingData\r\n   */\r\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\r\n    const bindingData = new BindingData();\r\n    bindingData.initByBindingList(existingBindingData.list, bindingPath);\r\n    return bindingData;\r\n  }\r\n}\r\n\r\nexport { BindingDataFactory };\r\n","/**\r\n * 绑定装饰器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { TypeDecorator, makeDecorator } from '../metadata/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * NgBindingData装饰器名称\r\n * @formType {string}\r\n */\r\nexport const NG_BINDING_DATA = 'NgBindingData';\r\n\r\n/**\r\n * NgBindingData\r\n */\r\nexport interface NgBindingData {\r\n\r\n  // /**\r\n  //  * 关联entity类型\r\n  //  */\r\n  // entity: Type<Entity>;\r\n\r\n  /**\r\n   * 关联repository类型\r\n   */\r\n  repository: Type<Repository<any>>;\r\n}\r\n\r\n/**\r\n * NgBindingContextDecorator\r\n */\r\nexport interface NgBindingDataDecorator {\r\n\r\n  (obj?: NgBindingData): TypeDecorator;\r\n\r\n  new(obj?: NgBindingData): NgBindingData;\r\n\r\n}\r\n\r\n/**\r\n * NgBindingContext\r\n */\r\n\r\n// export const NgBindingData: NgBindingDataDecorator =\r\n//   makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\nexport function NgBindingData(options: NgBindingData) {\r\n  const decoratorFactory = makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\r\n/**\r\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\r\n */\r\nclass DataPathUtil {\r\n\r\n  /**\r\n   * 转换成BindingData可识别的路径\r\n   */\r\n  public static convertToBindingPathArray(path: string): string[] {\r\n    const bindingPathArray = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\r\n   */\r\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const restPathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    restPathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      restPathArray.push(propName);\r\n      restPathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    // 移除最后一个主键\r\n    restPathArray.pop();\r\n    return '/' + restPathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    return pathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n}\r\n\r\nexport { DataPathUtil };\r\n","// tslint:disable: max-line-length\r\nimport { UID } from './uid';\r\n\r\n/**\r\n * GUID创建服务\r\n * @scope 静态类没有提供Provider\r\n */\r\nexport class Guid {\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n    public static validator = new RegExp('^[a-z0-9]+$', 'i');\r\n\r\n    public static EMPTY = '';\r\n\r\n    private value: string;\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid(UID.create());\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return UID.create();\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","import { RunMode } from \"../core\";\r\n\r\nexport class RunModeService {\r\n  private static mode: RunMode = null;\r\n  public static setRunMode(mode: RunMode) {\r\n    RunModeService.mode = mode;\r\n  }\r\n  public static getRunMode() {\r\n    return RunModeService.mode;\r\n  }\r\n}","import { Observable, Subject, from } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { NgFieldProperty, NgListProperty, NgObjectProperty, NgDynamicProperty, FieldMetadataUtil } from './metadata/index';\r\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\r\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\r\nimport { EntityList } from './entity_list';\r\nimport { EntityFactory } from './entity_factory';\r\nimport { Validator, ValidationResult, ValidateRule } from './validator/index';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\nimport { BigNumberType, ChangeSetPolicy, RunMode } from '../core/types';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { FrameContext } from '../frame/index';\r\nimport { RunModeService } from '../misc';\r\n/**\r\n * @author Lucas Huang\r\n * 实体抽象基类，所有实体必须扩展自Entity\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *    userId: string;\r\n *    userName: string;\r\n *\r\n *    constructor(data: any){\r\n *        super(data);\r\n *    }\r\n * }\r\n * ```\r\n */\r\nexport abstract class Entity {\r\n  // #region 私有、保护属性\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  private validErrors = {};\r\n  private primaryFieldMetadata: NgFieldProperty = null;\r\n  private originalData = undefined;\r\n  /**\r\n   * 验证器\r\n   */\r\n  private validator: Validator<any>;\r\n\r\n  /**\r\n   * 增量变更集合\r\n   */\r\n  protected changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 是否正在验证\r\n   */\r\n  protected isValidating = false;\r\n\r\n  /**\r\n   * 新数据\r\n   */\r\n  protected newData = undefined;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe: Subject<any> = new Subject();\r\n  /**\r\n   * 变更提交策略\r\n   */\r\n  private _changeSetPolicy: ChangeSetPolicy;\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public valueChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 属性值改变时触发\r\n   *\r\n   * ### 使用示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.onValueChanged.subscribe((data: Modification) => {\r\n   *      console.log(data);\r\n   *  })\r\n   *\r\n   * ```\r\n   *\r\n   * @event\r\n   */\r\n  public onValueChanged = this.valueChanged.asObservable();\r\n  public onUpdate = new Subject<Modification>();\r\n  /**\r\n   * 返回JSON格式的数据\r\n   */\r\n  public get data(): any {\r\n    return this.newData;\r\n  }\r\n  public set data(value: any) {\r\n    this.newData = value;\r\n  }\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  public get errors() {\r\n    return this.validErrors;\r\n  }\r\n\r\n  public set errors(errors: any) {\r\n    this.validErrors = errors;\r\n  }\r\n  public set changeSetPolicy(policy: ChangeSetPolicy) {\r\n    this._changeSetPolicy = policy;\r\n  }\r\n  public get changeSetPolicy(): ChangeSetPolicy {\r\n    return this._changeSetPolicy;\r\n  }\r\n  /**\r\n   * 实体变更集\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.changeSet.changes;\r\n  }\r\n  /**\r\n   * 实体主键元数据\r\n   */\r\n\r\n  public get primaryProperty(): NgFieldProperty {\r\n    if (!this.primaryFieldMetadata) {\r\n      this.primaryFieldMetadata = FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\r\n    }\r\n    return this.primaryFieldMetadata;\r\n  }\r\n\r\n  /**\r\n   * 主键\r\n   * @todo\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryKey(): string {\r\n    if (this.primaryProperty) {\r\n      return this.primaryProperty.property;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实体主键值\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryValue(): string {\r\n    if (this.primaryKey) {\r\n      // return this[this.primaryProperty.property].toString();\r\n      const primaryValue = this[this.primaryProperty.property];\r\n      return primaryValue ? primaryValue : '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    this.validator = new Validator();\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n    this.onValueChanged = this.valueChanged;\r\n    // this.onValueChanged = this.valueChanged.pipe(\r\n    //     scan((x: Modification, curr: Modification) => {\r\n    //         if (x) {\r\n    //             if (isEqual(x.path, curr.path) && x.type === curr.type) {\r\n    //                 return Object.assign(x, curr);\r\n    //             }\r\n    //             return curr;\r\n    //         }\r\n    //         return curr;\r\n    //     })\r\n    // );\r\n    if (RunModeService.getRunMode() === RunMode.compatible) {\r\n      this.initialize();\r\n    }\r\n    // this.validate();\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName) && this.changeSetPolicy === 'valid')) {\r\n      if (value && value.changeSetValue !== undefined) {\r\n        value = JSON.parse(JSON.stringify(value));\r\n        value.value = value.changeSetValue;\r\n      }\r\n      this.changeSet.append(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 校验实体各属性的值\r\n   * @param propertyName 属性名称，如果为空，则验证实体中所有设置了验证规则的属性\r\n   * @returns Observable<ValidationResult>\r\n   * ### 示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.validate().subscribe(result =>{\r\n   *      if(result.isValid){\r\n   *          ...\r\n   *      } else {\r\n   *          console.log(result.message);\r\n   *      }\r\n   *  })\r\n   *\r\n   * ```\r\n   */\r\n\r\n  // tslint:disable-next-line: max-line-length\r\n  public validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index, frameContext)).pipe(\r\n      tap(result => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  }\r\n\r\n  // 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n  public validateFromUtil(propertyName: string, value, cb, context?: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value, null, undefined, context && context.frameContext || null)).subscribe(result => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  }\r\n  /**\r\n   * 同步校验\r\n   * @param propertyName \r\n   * @param value \r\n   * @param cb \r\n   */\r\n  public validateFromUtilSync(propertyName: string, value: any, cb: any, context?: any) {\r\n    this.validErrors = {};\r\n    const result: any = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n    if (result && !result.isValid) {\r\n      this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n    }\r\n    cb(result);\r\n  }\r\n  public getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  }\r\n  public getEntityListPath() {\r\n    let paths = [];\r\n    const handleParent = (item: Entity) => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        if (item instanceof EntityList === true) {\r\n          const path = parentPaths.concat([]).reverse();\r\n          Array.prototype.push.apply(paths, path);\r\n        }\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    return paths.reverse();\r\n  }\r\n  public getMainEntityPrimaryValue() {\r\n    let item = this;\r\n    while (item[PARENT_CLASS]) {\r\n      item = item[PARENT_CLASS];\r\n    }\r\n    return item.primaryValue;\r\n  }\r\n  /**\r\n   * 加载数据\r\n   * @param data 新数据\r\n   */\r\n  public load(data: any, options: any = {}) {\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n    this.loadFields(data);\r\n    if (!options || (options && options.loadChild !== false)) {\r\n      this.loadLists(data);\r\n    }\r\n    this.loadObjects(data);\r\n    this.loadDynamicObjects(data);\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n  }\r\n  /**\r\n   * 转换为JSON\r\n   * @param buildChanges 是否构造变更集\r\n   * @param includeMultiLanguageField 是否包含多语字段\r\n   */\r\n  public toJSON(buildChanges?: boolean) {\r\n    const result = {};\r\n\r\n    // 简单属性\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n\r\n    // 对象属性\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 动态属性\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 列表属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  //#region 实体初始化相关private方法\r\n\r\n  /**\r\n   * 初始化实体\r\n   */\r\n  private initialize() {\r\n    const constructor = this.constructor;\r\n\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n\r\n    this.initializeNormalField(ngFields);\r\n    this.initializeList(ngLists);\r\n    this.initializeObject(ngObjects);\r\n    this.initializeDynamic(ngDynamic);\r\n  }\r\n\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  protected createPath(propertyName: string): string[] {\r\n    const primaryFieldMetadata = this.primaryProperty;\r\n    if (primaryFieldMetadata) {\r\n      const primaryDataField = primaryFieldMetadata.dataField;\r\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 属性字段初始化\r\n   * @param ngFields 属性字段元数据\r\n   */\r\n  private initializeNormalField(ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(propName => {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      const dataField = ngField.dataField || propName;\r\n\r\n      if (delete this[propName]) {\r\n        Object.defineProperty(this, propName, {\r\n          get: function () {\r\n            const value = this.getPropValue(propName, ngField);\r\n            return value;\r\n          },\r\n          set: function (newPropValue) {\r\n            // 值相同时不触发变更。\r\n            const oldPropValue = this.getPropValue(propName, ngField);\r\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n              return;\r\n            }\r\n            this.setPropValue(propName, ngField, newPropValue);\r\n            const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化列表类型的元数据\r\n   * @param ngListMetadata 列表类型元数据\r\n   */\r\n  private initializeList(ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n      const val = this.data[dataField];\r\n\r\n      const entityList = new EntityList<typeof fieldMetadata.type>();\r\n      entityList[PARENT_CLASS] = this;\r\n      entityList[PARENT_PATH] = path;\r\n\r\n      if (val) {\r\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n        entityList.loadEntities(entities);\r\n      }\r\n\r\n      entityList.onListChanged.subscribe(value => {\r\n        if (value) {\r\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n            value.path = entityList[PARENT_PATH].concat(value.path);\r\n          }\r\n          this.setChanges(value);\r\n        }\r\n      });\r\n      this[propertyName] = entityList;\r\n    });\r\n  }\r\n  /**\r\n   * 初始化子对象\r\n   * @param ngObjectMetadata 子对象元数据\r\n   */\r\n  private initializeObject(ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      // val不存在时，用空对象代替\r\n      const val = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      // 如果没有值用一个空对象代替\r\n      let childEntity = createEntityFromJsonData(val);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: () => {\r\n            return childEntity;\r\n          },\r\n          set: function (value: any) {\r\n            const modifyInfo = {\r\n              path: childEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            childEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      const originalData = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      let dynamicEntity = createEntityFromJsonData(originalData);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function () {\r\n            return dynamicEntity;\r\n          },\r\n          set: function (value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n\r\n  // #region 加载实体数据相关private、projected方法\r\n\r\n  /**\r\n   * 加载简单字段值\r\n   * @todo 临时用修改的方式模拟\r\n   */\r\n  protected loadFields(data: any) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      // if (ngField.primary === false) {\r\n      //   this[propName] = data[dataField];\r\n      // }\r\n      let propValue = data[dataField];\r\n      if (ngField.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this[propName] = propValue;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 加载子列表数据\r\n   * @param data 数据\r\n   */\r\n  protected loadLists(data: any) {\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      const entityType = ngList.type;\r\n\r\n      // 创建实体\r\n      const listData = data[dataField];\r\n      if (listData) {\r\n        const entities = listData.map((entityData: any) => {\r\n          return EntityFactory<typeof entityType>(entityType, entityData);\r\n        });\r\n        this[propName].loadEntities(entities);\r\n      } else {\r\n        this[propName].loadEntities([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadObjects(data: any) {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      const objectData = data[dataField];\r\n      const entity = this[propName] as Entity;\r\n      if (!entity || !objectData) {\r\n        return;\r\n      }\r\n      entity.load(objectData);\r\n    });\r\n  }\r\n\r\n  protected loadDynamicObjects(data: any) {\r\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\r\n      const ngDynamicObject = ngDynamicObjects[propName];\r\n      const dataField = ngDynamicObject.dataField || propName;\r\n\r\n      const dynamicData = data[dataField] || {};\r\n      const dynamicEntity = this[propName] as Dynamic;\r\n      if (!dynamicEntity) {\r\n        return;\r\n      }\r\n      dynamicEntity.loadDynamicData(dynamicData);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 私有工具方法\r\n\r\n\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  private emitValueChange(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any, changeSetValue: any = undefined): void {\r\n    const change = {\r\n      path: this.createPath(propName),\r\n      value: newPropValue,\r\n      changeSetValue,\r\n      preValue: oldPropValue,\r\n      type: ModifyType.ValueChange\r\n    };\r\n\r\n    if (this[PARENT_PATH]) {\r\n      change.path = this[PARENT_PATH].concat(change.path);\r\n    }\r\n    this.setChanges(change);\r\n  }\r\n  /**\r\n   * 准备提交给后端的属性值\r\n   * @param propName 属性\r\n   * @param propMetadata 属性描述\r\n   * @param propValue 属性值\r\n   */\r\n  private preparePropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    let value = undefined;\r\n    // 只要启用时区，传给后端的时间就必须带时区，因此当获取用户时区失败的时候，获取浏览器当前时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && propValue) {\r\n        value = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  private getPropValue(propName: string, propMetadata: NgFieldProperty) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    let value = this.data[dataField];\r\n\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (propMetadata.enableMultiLangInput === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    // 启用时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && value) {\r\n        return ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(value, timeZoneOffset);\r\n      }\r\n    }\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      value = value !== null && value !== undefined && value.toString() || null;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  private setPropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      this.data[dataField] = propValue === null ? null : propValue && propValue.toString() || '';\r\n    } else {\r\n      if (propMetadata.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this.data[dataField] = propValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  private isPropValueChanged(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any) {\r\n    if (propMetadata.enableMultiLangInput === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      if (typeof newPropValue !== 'string' && newPropValue !== null && newPropValue !== undefined) {\r\n        newPropValue = newPropValue.toString();\r\n      }\r\n      return newPropValue !== oldPropValue;\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  private isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // #endregion\r\n}\r\n","import { ModifyType, Modification } from '../changeset/types';\r\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\r\nimport { Entity } from './entity';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 支持动态字段集合的动态实体\r\n */\r\nexport class DynamicEntity extends Entity implements Dynamic {\r\n\r\n  /**\r\n   * 是否是嵌套的动态实体\r\n   */\r\n  public get IsNested(): boolean {\r\n    return this[PARENT_CLASS] instanceof DynamicEntity;\r\n  }\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    super(data);\r\n    this.loadDynamicData(data);\r\n  }\r\n\r\n  public loadDynamicData(dynamicData: any) {\r\n    this.initializeDynamicField(dynamicData);\r\n    // super.loadFields(dynamicData);\r\n  }\r\n\r\n  /**\r\n   * 初始化动态数据\r\n   * @param dynamicData 动态数据\r\n   */\r\n  private initializeDynamicField(dynamicData: any): void {\r\n    // 遍历动态数据的key，创建动态实体属性。\r\n    Object.keys(dynamicData).forEach(propertyName => {\r\n      const dataField = propertyName;\r\n      if (delete this[propertyName]) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          const path = this.createPath(propertyName);\r\n          let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgObject({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为外键 */\r\n          //     type: DynamicEntity\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            get: function () {\r\n              return dynamicEntity;\r\n            },\r\n            set: function (value) {\r\n              const modifyInfo = {\r\n                path: dynamicEntity[PARENT_PATH],\r\n                value: value.data,\r\n                preValue: this[propertyName].data,\r\n                type: ModifyType.ValueChange\r\n              };\r\n              dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\r\n              this.setChanges(modifyInfo);\r\n            }\r\n          });\r\n        } else {\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgField({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为主键 */\r\n          //     primary: false,\r\n          //     /** 是否为外键 */\r\n          //     foreign: false\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            // 定义返回数据方法。\r\n            get: function () {\r\n              // 从初始数据返回字段值。\r\n              return this.data[dataField];\r\n            },\r\n            set: function (value) {\r\n              // 值相同时不触发变更。\r\n              const oldValue = this.data[dataField];\r\n              if (oldValue === value) {\r\n                return;\r\n              }\r\n              // 更新元数据数据。\r\n              this.data[dataField] = value;\r\n              // 变更集\r\n              const changes = {\r\n                type: ModifyType.ValueChange,\r\n                path: this.createPath(propertyName),\r\n                value: value,\r\n                preValue: oldValue\r\n              };\r\n\r\n              if (this[PARENT_PATH]) {\r\n                changes.path = this[PARENT_PATH].concat(changes.path);\r\n              }\r\n              this.setChanges(changes);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\r\n    let instance: DynamicEntity;\r\n    if (value instanceof DynamicEntity) {\r\n      instance = value;\r\n    } else {\r\n      instance = new DynamicEntity(value);\r\n      instance.constructor = DynamicEntity;\r\n    }\r\n    instance[PARENT_CLASS] = this;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.pipe(takeUntil(this.unsubscribe)).subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n        this.setChanges(changes);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   * @todo\r\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\r\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\r\n   */\r\n  setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n    const preValue = Object.assign({}, this.data);\r\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n    let parentPath = value.path;\r\n    if (value.path.length > 2) {\r\n      parentPath = value.path.slice(0, value.path.length - 2);\r\n    }\r\n\r\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\r\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\r\n    const parentModification: Modification = {\r\n      path: parentPath,\r\n      value: this.data,\r\n      preValue: preValue,\r\n      type: value.type,\r\n      dynamic: true\r\n    };\r\n\r\n    this.valueChanged.next(parentModification);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  /**\r\n   * toJSON\r\n   */\r\n  public toJSON() {\r\n    return this.data;\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 实体取数服务\r\n */\r\ninterface EntityDataService {\r\n\r\n  /**\r\n   * 新增子实体\r\n   * @param path 子实体路径\r\n   */\r\n  addChild(childPath: string);\r\n\r\n  /**\r\n   * 删除子实体\r\n   * @param path 子实体路径\r\n   * @param id 待删除子实体id\r\n   */\r\n  removeChild(childPath: string, id: string);\r\n\r\n}\r\n\r\nconst ENTITY_DATA_SERVICE_TOKEN = new InjectionToken<EntityDataService>('@farris/devkit ENTITY_DATA_SERVICE');\r\n\r\nexport { EntityDataService, ENTITY_DATA_SERVICE_TOKEN };\r\n","import { from, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Modification, ModifyType } from '../changeset';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { SchemaEntity, SchemaEntityField } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { FieldMetadataUtil } from './metadata/field_metadata_util';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { ValidateRule, ValidationResult } from './validator/types';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\n\r\nexport const entityPrototype = {\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  getFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const value = this.data[fieldName];\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (schemaField.multiLanguage === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = fieldName.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    return value;\r\n  },\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  setFieldValue: function(schemaField: SchemaEntityField, propertyValue: any) {\r\n    const fieldName = schemaField.label;\r\n    this.data[fieldName] = propertyValue;\r\n  },\r\n  /**\r\n   * 获取复杂类型对象的值\r\n   * @param schemaField Schema字段描述\r\n   * @returns 复杂类型对象的值\r\n   */\r\n  getComplexFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    return objectPropertyValue;\r\n  },\r\n  /**\r\n   * 向实体复杂类型字段赋值\r\n   * @param schemaField Schema字段描述\r\n   * @param ComplexField 复杂类型字段的类型定义\r\n   * @param propertyValue 属性值\r\n   */\r\n  setComplexFieldValue: function(schemaField: SchemaEntityField, ComplexField: any, propertyValue: any) {\r\n    // 提取字段名\r\n    const fieldName = schemaField.label;\r\n    let complexFieldInstance = null;\r\n    if (propertyValue instanceof ComplexField) {\r\n      complexFieldInstance = propertyValue;\r\n    } else {\r\n      complexFieldInstance = new ComplexField(propertyValue);\r\n      complexFieldInstance.constructor = ComplexField;\r\n    }\r\n    // 提取复杂类型对象的值\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    const propertyPath = (objectPropertyValue && objectPropertyValue[PARENT_PATH]) || complexFieldInstance[PARENT_PATH];\r\n    // 构造变更信息\r\n    const changeInfo = {\r\n      // 提取变更对象相对于根实体的路径\r\n      path: propertyPath,\r\n      // 记录对象最新值\r\n      value: propertyValue,\r\n      // 记录对象历史值\r\n      preValue: (this[fieldName] && this[fieldName].data) || null,\r\n      // 标记这是一个值变化变更\r\n      type: ModifyType.ValueChange\r\n    };\r\n    // 创建新的对象\r\n    this.innerEntities[fieldName] = complexFieldInstance;\r\n    // this.innerEntities[fieldName] = new ComplexField(propertyValue);\r\n    // 记录本次数据变更\r\n    if (!this.isInitializing) {\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 获取指定的子实体列表\r\n   * @param schemaEntity 实体描述\r\n   * @returns 子实体列表\r\n   */\r\n  getEntities: function(schemaEntity: SchemaEntity) {\r\n    const dataField = schemaEntity.label;\r\n    const listPropertyValue = this.innerEntities[dataField];\r\n    return listPropertyValue;\r\n  },\r\n  /**\r\n   * 更新指定子实体的值\r\n   * @param schemaEntity 实体描述\r\n   * @param propertyValue 实体列表\r\n   */\r\n  setEntities: function(schemaEntity: SchemaEntity, propertyValue: any) {\r\n    const dataField = schemaEntity.label;\r\n    this.innerEntities[dataField] = propertyValue;\r\n  },\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  isFieldValueChanged: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) {\r\n    if (schemaField.multiLanguage === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  },\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  emitFieldValueChange: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any): void {\r\n    if (!this.isInitializing) {\r\n      const fieldName = schemaField.label;\r\n      const changeInfo = {\r\n        path: this.createPath(fieldName),\r\n        value: newPropValue,\r\n        preValue: oldPropValue,\r\n        type: ModifyType.ValueChange\r\n      };\r\n\r\n      if (this[PARENT_PATH]) {\r\n        changeInfo.path = this[PARENT_PATH].concat(changeInfo.path);\r\n      }\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  setChanges: function(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {\r\n      this.changeSet.append(value);\r\n    }\r\n  },\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  createPath: function(propertyName: string): string[] {\r\n    if (this.primaryKey) {\r\n      return [this.primaryKey + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  },\r\n  getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  },\r\n  validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index)).pipe(\r\n      tap((result: any) => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  },\r\n  validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  },\r\n  /**\r\n   * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n   */\r\n  validateFromUtil(propertyName: string, value: any, cb: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value)).subscribe((result: any) => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  },\r\n  /**\r\n   * 将实体数据转换为JSON格式\r\n   */\r\n  toJSON(buildChanges?: boolean) {\r\n    // 声明转换初始值\r\n    const result = {};\r\n    // 提取简单类型字段的值\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n    // 提取对象类型字段的值\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取动态属性字段的值\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取列表字段的属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n};\r\n","import { EnumData, FormVariable } from './dom-entity';\r\n\r\nexport interface SchemaType {\r\n    name: string;\r\n    code: string;\r\n    label: string;\r\n    fields?: SchemaEntityField[];\r\n    entities?: SchemaEntity[];\r\n    primary?: string;\r\n}\r\n\r\n/**\r\n * schema\r\n */\r\nexport class Schema {\r\n    public dataSource?: string;\r\n    public sourceUri: string;\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public entities: SchemaEntity[];\r\n    public variables: SchemaEntityField[];\r\n    public eapiId: string;\r\n    public extendProperties: { enableStdTimeFormat: boolean };\r\n}\r\n\r\n/**\r\n * 实体\r\n */\r\nexport class SchemaEntity {\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public label: string;\r\n    public type: SchemaEntityType;\r\n}\r\n\r\n/**\r\n * 实体类型对象\r\n */\r\nexport class SchemaEntityType implements SchemaType {\r\n    public code: string;\r\n    public label: string;\r\n    public name: string;\r\n    public primary: string;\r\n    public fields: SchemaEntityField[];\r\n    public entities?: SchemaEntity[];\r\n    public displayName?: string;\r\n}\r\n\r\n/**\r\n * 字段\r\n */\r\nexport class SchemaEntityField {\r\n    public $type: SchemaEntityField$Type;\r\n    public id: string;\r\n    public originalId: string;\r\n    public code: string;\r\n    public label: string;\r\n    public bindingField: string;\r\n    public name: string;\r\n    public defaultValue: any;\r\n    public require: boolean;\r\n    public readonly: boolean;\r\n    public type: SchemaEntityFieldType;\r\n    public editor?: SchemaEntityFieldEditor;\r\n    public path?: string;\r\n    public bindingPath?: string;\r\n    public multiLanguage?: boolean;\r\n    public converter?: any;\r\n    // 表达式\r\n    public expression?: any;\r\n}\r\n\r\n/**\r\n * 字段类型对象\r\n */\r\nexport class SchemaEntityFieldType implements SchemaType {\r\n    code: string;\r\n    label: string;\r\n    public $type: SchemaEntityFieldType$Type;\r\n    public name: SchemaEntityFieldTypeName | any;\r\n    public length?: number;\r\n    public precision?: number;\r\n    public valueType?: SchemaEntityFieldType;\r\n    public enumValues?: EnumData[];\r\n    public fields?: SchemaEntityField[];\r\n    public displayName?: string;\r\n    public primary?: string;\r\n    public entities?: SchemaEntity[];\r\n    // 用于区分日期/日期事件和整型/浮点型数据\r\n    public elementType?: any;\r\n\r\n\r\n    // 扩展属性:  运行时定制用\r\n    public extendProperty?: any;\r\n}\r\n\r\n/**\r\n * 字段编辑器对象\r\n */\r\nexport class SchemaEntityFieldEditor {\r\n    public $type: any;\r\n    [propName: string]: any;\r\n}\r\n\r\n\r\n/**\r\n * 字段类型枚举\r\n */\r\nexport enum SchemaEntityField$Type {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    SimpleField = 'SimpleField',\r\n    /**\r\n     * 关联/UDT类型字段\r\n     */\r\n    ComplexField = 'ComplexField'\r\n}\r\n\r\n/**\r\n * 字段类型对象中的类型枚举\r\n */\r\nexport enum SchemaEntityFieldType$Type {\r\n\r\n    /**\r\n     * 字符串\r\n     */\r\n    StringType = 'StringType',\r\n    /**\r\n     * 备注\r\n     */\r\n    TextType = 'TextType',\r\n    /**\r\n     * 数字（整数、浮点数）\r\n     */\r\n    NumericType = 'NumericType',\r\n    /**\r\n     * 布尔\r\n     */\r\n    BooleanType = 'BooleanType',\r\n    /**\r\n     * 日期\r\n     */\r\n    DateType = 'DateType',\r\n\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTimeType = 'DateTimeType',\r\n\r\n    /**\r\n     * 枚举\r\n     */\r\n    EnumType = 'EnumType',\r\n    /**\r\n     * 实体类\r\n     */\r\n    EntityType = 'EntityType',\r\n\r\n    /**\r\n     * 分级码\r\n     */\r\n    HierarchyType = 'HierarchyType',\r\n\r\n    /**\r\n     * 对象\r\n     */\r\n    ObjectType = 'ObjectType',\r\n\r\n    /**\r\n     * 数字（大数据）\r\n     */\r\n    BigNumericType = 'BigNumericType'\r\n}\r\n\r\n\r\n/**\r\n * 字段类型中的名称\r\n */\r\nexport enum SchemaEntityFieldTypeName {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    String = 'String',\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTime = 'DateTime',\r\n    /**\r\n     * 日期\r\n     */\r\n    Date = 'Date',\r\n    /**\r\n     * 枚举\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * 布尔\r\n     */\r\n    Boolean = 'Boolean',\r\n\r\n    /**\r\n     * 数字\r\n     */\r\n    Number = 'Number',\r\n\r\n    /**\r\n     * 备注\r\n     */\r\n    Text = 'Text',\r\n\r\n    /**\r\n     * 大数字\r\n     */\r\n    BigNumber = 'BigNumber'\r\n}\r\n","import { Subject } from 'rxjs';\r\nimport { ChangeSet, Modification } from '../changeset';\r\nimport { Schema, SchemaEntity, SchemaEntityField, SchemaEntityField$Type, SchemaType } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { entityPrototype } from './entity_prototype';\r\nimport { NG_ENTITY, NG_FIELD, NG_LIST, NG_OBJECT } from './metadata';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { Validator } from './validator';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\n\r\nexport interface AbstractEntityType {\r\n  typeName: string;\r\n  types: any;\r\n  __prop__metadata__: any;\r\n}\r\n\r\n/**\r\n * 实体类型工厂\r\n * 用来根据实体Schema描述信息创建实体类型\r\n */\r\nexport class EntityTypeFactory {\r\n\r\n  constructor() { }\r\n  /**\r\n   * 由实体Schema结构创建实体类型\r\n   * @param schema 实体Schema结构\r\n   * @returns 实体类型\r\n   */\r\n  public create(schema: Schema) {\r\n    // 提取Schema定义中的第一个是实体描述\r\n    const schemaType = schema.entities[0].type;\r\n    // 创建实体类型\r\n    const entityType = this.createClass(schemaType, schema.entities[0]);\r\n    return entityType;\r\n  }\r\n  /**\r\n   * 由实体Schema类型描述创建实体类\r\n   * @param schemaType Schema实体类型描述\r\n   * @returns 实体类型\r\n   */\r\n  private createClass(schemaType: SchemaType, relateSchema: any) {\r\n    const attachEntityInstanceData = this.createEntityInstanceDataInitializer(schemaType);\r\n    // 创建指定实体类型的初始化函数，用来在实体类型构造函数中为实体实例赋值\r\n    const initialize = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      entityInstance.isInitializing = true;\r\n      attachEntityInstanceData(entityInstance, entityData, entityTypeConstructor);\r\n      entityInstance.isInitializing = false;\r\n    };\r\n    // 声明实体类构造函数\r\n    const ConcreteEntity = function (data: any) {\r\n      // 创建实体变更集\r\n      this.changeSet = new ChangeSet();\r\n      // 初始化实体验证状态\r\n      this.isValidating = false;\r\n      // 设置unsubscribe 取消订阅事件\r\n      this.unsubscribe = new Subject();\r\n      // 初始化实体验证信息\r\n      this.validErrors = {};\r\n      // 初始化验证器\r\n      this.validator = new Validator();\r\n      // 初始化实体数据副本\r\n      this.innerData = Object.assign({}, data);\r\n      // 初始化子实体对象集合\r\n      this.innerEntities = {};\r\n      // 初始化实体值变化事件\r\n      this.valueChanged = new Subject<Modification>();\r\n      this.onValueChanged = this.valueChanged;\r\n      this.validateFromUtilSync = function (propertyName, value, cb, context) {\r\n        this.validErrors = {};\r\n        const result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n        if (result && !result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        }\r\n        cb(result);\r\n      };\r\n      // 调用初始化方法，初始化实体数据\r\n      initialize(this, data, ConcreteEntity);\r\n      this.load = (newData: any) => {\r\n        attachEntityInstanceData(this, newData, ConcreteEntity);\r\n        this.data = newData;\r\n      };\r\n    };\r\n\r\n\r\n    // 在实体类构造函数中记录视图类型名称\r\n    ConcreteEntity.typeName = `${schemaType.name}Entity`;\r\n    ConcreteEntity.code = relateSchema.code;\r\n    ConcreteEntity.label = relateSchema.label;\r\n    // 在实体类构造函数中记录其下直接引用的子类型\r\n    ConcreteEntity.types = {};\r\n    ConcreteEntity.__prop__metadata__ = {\r\n\r\n    };\r\n\r\n    // 构造实体类的原型对象\r\n    const entityTypePrototype = Object.assign({ typeName: 'ConcreteEntityPrototype' }, entityPrototype);\r\n    // 向实体类原型对象中定义预制属性\r\n    this.definePresetProperty(entityTypePrototype, schemaType);\r\n    // 向实体类原型对象中定义字段属性get/set方法\r\n    this.defineFieldsToPrototype(entityTypePrototype, schemaType.fields, schemaType.primary, ConcreteEntity);\r\n    // 向实体类原型对象中定义访问子实体的get/set方法\r\n    this.defineEntitiesToPrototype(entityTypePrototype, schemaType.entities, ConcreteEntity);\r\n    // 将实体类的原型对象指向新构造的原型对象。\r\n    ConcreteEntity.prototype = entityTypePrototype;\r\n\r\n\r\n    return ConcreteEntity;\r\n  }\r\n  /**\r\n   * 向实体类原型对象中定义预制属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaType Schema类型描述\r\n   */\r\n  private definePresetProperty(prototypeObject: any, schemaType: SchemaType) {\r\n    /**\r\n     * 实体数据\r\n     */\r\n    Object.defineProperty(prototypeObject, 'data', {\r\n      get: function () {\r\n        if (!this.innerData) {\r\n          this.innerData = {};\r\n        }\r\n        return this.innerData;\r\n      },\r\n      set: function (value) {\r\n        this.innerData = value;\r\n      }\r\n    });\r\n    /**\r\n     * 实体验证信息\r\n     */\r\n    Object.defineProperty(prototypeObject, 'errors', {\r\n      get: function () {\r\n        return this.validErrors;\r\n      },\r\n      set: function (errors: any) {\r\n        this.validErrors = errors;\r\n      }\r\n    });\r\n    /**\r\n     * 实体变更集\r\n     */\r\n    Object.defineProperty(prototypeObject, 'changes', {\r\n      get: function () {\r\n        return this.changeSet.changes;\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryProperty', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        // return schemaType.primary;\r\n        return prototypeObject.innerPrimaryProperty || { dataField: schemaType.primary };\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryKey', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        return schemaType.primary || '';\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键的值\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryValue', {\r\n      get: function () {\r\n        if (this.primaryKey) {\r\n          // return this[this.primaryProperty.property].toString();\r\n          const primaryValue = this[this.primaryKey];\r\n          return primaryValue ? primaryValue : '';\r\n        } else {\r\n          return '';\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 向实体类定义字段属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param fields 字段描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineFieldsToPrototype(\r\n    prototypeObject: any,\r\n    fields: SchemaEntityField[],\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ): void {\r\n    if (fields && fields.length) {\r\n      // 遍历Schema中描述的字段，在实体原型对象上定义字段访问函数\r\n      fields.forEach(schemaEntityField => {\r\n        switch (schemaEntityField.$type) {\r\n          // 定义简单类型字段\r\n          case SchemaEntityField$Type.SimpleField:\r\n            this.defineSimpleFieldToPrototype(prototypeObject, schemaEntityField, primary, parentEntityType);\r\n            break;\r\n          // 定义复杂类型字段\r\n          case SchemaEntityField$Type.ComplexField:\r\n            this.defineComplexFieldToPrototype(prototypeObject, schemaEntityField, parentEntityType);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 向实体类定义简单类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   */\r\n  private defineSimpleFieldToPrototype(\r\n    prototypeObject: any,\r\n    schemaField: SchemaEntityField,\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ) {\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        return this.getFieldValue(schemaField);\r\n      },\r\n      set: function (newPropValue) {\r\n        // 值相同时不触发变更。\r\n        const oldPropValue = this.getFieldValue(schemaField);\r\n        if (this.isFieldValueChanged(schemaField, newPropValue, oldPropValue) === false) {\r\n          return;\r\n        }\r\n        this.setFieldValue(schemaField, newPropValue);\r\n        this.emitFieldValueChange(schemaField, newPropValue, oldPropValue);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 字段名称 */\r\n      dataField: this.getDataField(schemaField),\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 原始字段类型 */\r\n      originalDataFieldType: schemaField.type.name,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      primary: schemaField.label === primary,\r\n      enableMultiLangInput: this.getEnableMultiLangInput(schemaField),\r\n      defaultValue: schemaField.defaultValue,\r\n      ngMetadataName: NG_FIELD\r\n    };\r\n    if (schemaField['enableStdTimeFormat'] && fieldMetadata.originalDataFieldType == \"DateTime\") {\r\n      fieldMetadata[\"enableTimeZone\"] = true;\r\n    }\r\n    if (fieldMetadata.primary) {\r\n      prototypeObject.innerPrimaryProperty = fieldMetadata;\r\n    }\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n\r\n  private getDataField(schemaField: SchemaEntityField) {\r\n    if (schemaField.multiLanguage) {\r\n      return schemaField.label + \"_\" + \"MULTILANGUAGE\";\r\n    }\r\n    return schemaField.label;\r\n  }\r\n\r\n  private getEnableMultiLangInput(schemaField: SchemaEntityField) {\r\n    if (schemaField.multiLanguage) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 向实体类定义复杂类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineComplexFieldToPrototype(prototypeObject: any, schemaField: SchemaEntityField, parentEntityType: AbstractEntityType) {\r\n    const complexFieldType = this.createClass(schemaField.type, schemaField);\r\n    parentEntityType.types[schemaField.type.name] = complexFieldType;\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        const fieldValue = this.getComplexFieldValue(schemaField);\r\n        return fieldValue;\r\n      },\r\n      set: function (value: any) {\r\n        this.setComplexFieldValue(schemaField, complexFieldType, value);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 映射字段 */\r\n      dataField: schemaField.label,\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 引用实体类型 */\r\n      type: complexFieldType,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      ngMetadataName: NG_OBJECT\r\n    };\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n  /**\r\n   * 向实体类定义子实体\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param entities 实体描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineEntitiesToPrototype(prototypeObject: any, entities: SchemaEntity[], parentEntityType: AbstractEntityType) {\r\n    if (entities && entities.length) {\r\n      // 遍历Schema中描述的子实体，在实体对象上定义子实体列表\r\n      entities.forEach(schemaEntity => {\r\n        const complexFieldType = this.createClass(schemaEntity.type, schemaEntity);\r\n        parentEntityType.types[schemaEntity.type.name] = complexFieldType;\r\n        // 提取子实体在实体对象上的属性名\r\n        const propertyName = schemaEntity.label;\r\n        Object.defineProperty(prototypeObject, propertyName, {\r\n          get: function () {\r\n            const fieldValue = this.getEntities(schemaEntity);\r\n            return fieldValue;\r\n          },\r\n          set: function (value: any) {\r\n            this.setEntities(schemaEntity, value);\r\n          }\r\n        });\r\n        const entitMetadata = {\r\n          /** 字段名称 */\r\n          dataField: schemaEntity.label,\r\n          /** 原始字段名称 */\r\n          originalDataField: '',\r\n          /** 实体类型 */\r\n          type: complexFieldType,\r\n          ngMetadataName: NG_LIST\r\n        };\r\n        if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n          parentEntityType.__prop__metadata__[propertyName] = [];\r\n        }\r\n        parentEntityType.__prop__metadata__[propertyName].push(entitMetadata);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 创建初始化实体对象方法\r\n   * @param schemaType 实体类型描述\r\n   * @returns 初始化实体对象方法\r\n   */\r\n  private createEntityInstanceDataInitializer(schemaType: SchemaType) {\r\n    /**\r\n     * 实体初始化函数，用来初始化实体的复杂类型数据和子实体数据\r\n     * @param entityInstance 实体类型实例\r\n     * @param data 实体原始数据\r\n     * @param entityTypeConstructor 实体类型构造函数\r\n     */\r\n    const initializer = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      // 初始化复杂类型字段\r\n      schemaType.fields\r\n        // 过滤复杂类型字段\r\n        .filter(field => field.$type === SchemaEntityField$Type.ComplexField)\r\n        // 遍历复杂类型字段创建对应实体类型数据\r\n        .forEach(field => {\r\n          // 提取字段名\r\n          const fieldName = field.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 获取复杂类型字段对应的实体类型\r\n          const ComplexField = includedEntityTypes[field.type.name];\r\n          // 提取复杂类型字段原始数据\r\n          const fieldData = entityData ? entityData[fieldName] : null;\r\n          // 创建复杂类型字段对象路径\r\n          const path = entityInstance.createPath(fieldName);\r\n          let complexFieldValue = entityInstance[fieldName];\r\n          if (complexFieldValue instanceof ComplexField) {\r\n            complexFieldValue.load(fieldData);\r\n          } else {\r\n            // 创建复杂类型字段实体实例\r\n            complexFieldValue = new ComplexField(fieldData);\r\n            complexFieldValue.constructor = ComplexField;\r\n            complexFieldValue[PARENT_CLASS] = entityInstance;\r\n            complexFieldValue[PARENT_PATH] = path;\r\n            complexFieldValue.onValueChanged.subscribe(changes => {\r\n              if (changes) {\r\n                changes.path = (entityInstance[PARENT_PATH] || []).concat(changes.path);\r\n                const modification = { ...changes, fromParent: true };\r\n                entityInstance.setChanges(modification);\r\n              }\r\n            });\r\n            entityInstance[fieldName] = complexFieldValue;\r\n          }\r\n        });\r\n      // 初始化子实体\r\n      if (schemaType.entities) {\r\n        // 遍历子实体创建对应实体类型的数据\r\n        schemaType.entities.forEach(schemaEntity => {\r\n          // 提取子实体名\r\n          const subEntityName = schemaEntity.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 创建子实体对象路径\r\n          const path = entityInstance.createPath(subEntityName);\r\n          // 创建子实体对象集合\r\n          let entityList = entityInstance[subEntityName];\r\n          if (!(entityList instanceof EntityList)) {\r\n            entityList = new EntityList<Entity>();\r\n            // 向子实体列表注册子实体变化事件\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                entityInstance.setChanges(value);\r\n              }\r\n            });\r\n            // 向实体类型实例上直接存储子实体对象列表\r\n            entityInstance[subEntityName] = entityList;\r\n          }\r\n          entityList[PARENT_CLASS] = entityTypeConstructor;\r\n          entityList[PARENT_PATH] = path;\r\n          // 提取子实体类型名称\r\n          const schemaEntityTypeName = schemaEntity.type.name;\r\n          // 获取子实体类型\r\n          const ConcreteEntity = includedEntityTypes[schemaEntityTypeName];\r\n          const originalEntityDataArray = entityData ? entityData[subEntityName] : null;\r\n          // 构造子实体集合\r\n          if (originalEntityDataArray) {\r\n            // 遍历子实体原始数据，构造实体对象集合\r\n            const entities = originalEntityDataArray.map((originalEntityData: any) => {\r\n              const concreteEntityInstance = new ConcreteEntity(originalEntityData);\r\n              concreteEntityInstance.constructor = ConcreteEntity;\r\n              return concreteEntityInstance;\r\n            });\r\n            // 向子实体列表中添加子实体对象\r\n            entityList.loadEntities(entities);\r\n          }\r\n        });\r\n      }\r\n      // 初始化简单字段\r\n      schemaType.fields\r\n        // 过滤复杂类型字段\r\n        .filter(field => field.$type === SchemaEntityField$Type.SimpleField)\r\n        // 遍历复杂类型字段创建对应实体类型数据\r\n        .forEach(function (field) {\r\n          // 提取字段名\r\n          const fieldName = field.label;\r\n          let propValue = entityData ? entityData[fieldName] : null;\r\n          if (field['enableTimeZone'] === true) {\r\n            const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n            if (timeZoneOffset !== null && propValue) {\r\n              propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);\r\n            }\r\n          }\r\n          entityInstance[fieldName] = propValue;\r\n        });\r\n    };\r\n    return initializer;\r\n  }\r\n}\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable valid-jsdoc */\r\n/* eslint-disable require-jsdoc */\r\nimport {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {BasePathService} from '@farris/rtf';\r\n\r\nexport type RestfulMethod = 'GET' | 'PUT' | 'POST' | 'DELETE';\r\n\r\n@Injectable()\r\nexport class RestfulService {\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http客户端\r\n   */\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  /**\r\n   * 发送GET请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  get(uri: string, params?: object, options?: any): Observable<any[]> {\r\n    return this.request(uri, 'GET', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送POST请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  put(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'PUT', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送PUT请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  post(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'POST', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送DELETE请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  delete(uri: string, params?: object, options?: any): Observable<any> {\r\n    return this.request(uri, 'DELETE', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  private request(uri: string, method: RestfulMethod, params: object, options: any = {}): Observable<any> {\r\n    options = options || {};\r\n    if (params) {\r\n      const httpParams = this.buildParams(params);\r\n      options.params = httpParams;\r\n    }\r\n    const methodName = method as string;\r\n    uri = BasePathService.convertPath(uri);\r\n    const result = this.httpClient.request(methodName, uri, options);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 构造Http请求参数\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n  private addBody(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, {body: body});\r\n    return mergedOptions;\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandler\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER = 'NgCommandHandler';\r\n\r\n/**\r\n * 命令处理描述\r\n */\r\nexport interface NgCommandHandler {\r\n\r\n  /**\r\n   * 要处理的名称\r\n   */\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器接口\r\n */\r\nexport interface NgCommandHandlerDecorator {\r\n  (handler?: NgCommandHandler): TypeDecorator;\r\n  new(handler?: NgCommandHandler): NgCommandHandler;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器工厂\r\n */\r\n\r\n// export const NgCommandHandler: NgCommandHandlerDecorator =\r\n//   makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\nexport function NgCommandHandler(options: NgCommandHandler) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\n  return decoratorFactory(options);\r\n  }\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandlerExtender\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理扩展装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER_EXTENDER = 'NgCommandHandlerExtender';\r\n\r\n/**\r\n * 命令处理扩展描述\r\n */\r\nexport interface NgCommandExtender {\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器接口\r\n */\r\nexport interface NgCommandHandlerExtenderDecorator {\r\n  (extender?: NgCommandExtender): TypeDecorator;\r\n  new(extender?: NgCommandExtender): NgCommandExtender;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器工厂\r\n */\r\nexport function NgCommandHandlerExtender(options: NgCommandExtender) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER_EXTENDER, (extender: NgCommandExtender) => extender);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-10-25 13:30:52 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-10-25 13:30:52 \r\n */\r\nimport { Observable } from 'rxjs';\r\n\r\nconst isObservable = (value) => {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\r\n        return true;\r\n    }\r\n    if (value['@@observable'] && value === value['@@observable']()) {\r\n        return true;\r\n    }\r\n    if (value instanceof Observable) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport { isObservable }\r\n","import { Observable, of } from 'rxjs';\r\nimport { CommandContext } from '../command_context';\r\nimport { isObservable } from '../../misc/is-observable';\r\n\r\n/**\r\n * 任务函数\r\n */\r\ntype TaskFunc = (context: CommandContext) => any;\r\n\r\n\r\n/**\r\n * 任务节点\r\n */\r\nclass TaskNode {\r\n\r\n  /**\r\n   * 任务名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 任务函数\r\n   */\r\n  func: TaskFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(name: string, func: TaskFunc) {\r\n    this.name = name;\r\n    this.func = func;\r\n  }\r\n\r\n  /**\r\n   * 执行任务函数\r\n   */\r\n  execute(context: CommandContext): Observable<any> {\r\n    const result = this.func(context);\r\n    const result$ = isObservable(result) ? result : of(result);\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { TaskFunc, TaskNode };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 变量解析接口\r\n */\r\ninterface VariableParser {\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any, eventParam?: any): any;\r\n}\r\n\r\nconst VARIABLE_PARSERS = new InjectionToken<VariableParser>('variable parsers');\r\n\r\nexport { VariableParser, VARIABLE_PARSERS };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\n\r\n// import { AppContext } from '../app/index';\r\n// import { FrameContext } from '../frame/index';\r\n// import { CommandContext } from '../command/index';\r\n\r\n/**\r\n * 解析辅助工具类\r\n */\r\nclass ParseUtil {\r\n\r\n  /**\r\n   * 获取应用上下文\r\n   */\r\n  static getAppContext(context: any): any {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext.appContext;\r\n    } else if (context.appContext) {\r\n      return context.appContext;\r\n    } else if (context.typeName === 'AppContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到AppContext，请检查！');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前Frame的Context\r\n   */\r\n  static getFrameContext(context: any) {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext;\r\n    } else if (context.typeName === 'FrameContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到FrameContext，请检查！');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取根Frame的Context\r\n   */\r\n  static getRootFrameContext(context: any): any {\r\n    const frameContext = this.getFrameContext(context);\r\n    return frameContext.root;\r\n  }\r\n\r\n  /**\r\n   * 根据frameId获取FrameContext\r\n   */\r\n  static getFrameContextById(context: any, frameId: string): any {\r\n    const appContext = this.getAppContext(context);\r\n    return appContext.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n}\r\n\r\nexport { ParseUtil };\r\n","/**\r\n * 数据源变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass DataVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any): any {\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths: string[] = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getValue(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{DATA~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:DATA~${paths[0]}}`) {\r\n        // 该内容是JSON的一部分，需要转义特殊字符\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach((path: string) => {\r\n      const replaceValue = this.getValue(path, appContext);\r\n      const searchValue = `{DATA~${path}}`;\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:DATA~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   */\r\n  private extractPaths(expression: string) {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const DATA_PATTERN_G = /\\{:?DATA~(\\S+?)\\}/g;\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (dataVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const DATA_PATTERN = /\\{:?DATA~(\\S+?)\\}/;\r\n    dataVariables.forEach(dataVariable => {\r\n      const pathMatches = dataVariable.match(DATA_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param path 路径：/\r\n   */\r\n  private getValue(path: string, appContext: AppContext): any {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const frameContext = appContext.getFrameContext(parts[0]);\r\n    if (!frameContext) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n\r\n    const bindingData = frameContext.bindingData;\r\n    if (!bindingData) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n    return bindingData.getValue(parts.slice(1));\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { DataVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass UIStateVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/frameId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getUIState(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{UISTATE~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:UISTATE~${paths[0]}}`) {\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{UISTATE~${path}}`;\r\n      const replaceValue = this.getUIState(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:UISTATE~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{:?UISTATE~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{:?UISTATE~(\\S+?)\\}/;\r\n    uiStateVariables.forEach((uiStateVariable: string) => {\r\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getUIState(path: string, appContext: AppContext) {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const [frameId, stateName] = parts;\r\n    const frameContext = appContext.getFrameContext(frameId);\r\n    let state = frameContext && frameContext.uiState[stateName];\r\n    if (state && state.constructor.toString().startsWith('function Date()')) {\r\n      return this.formatDate(state);\r\n    }\r\n    for (let i = 2; i < parts.length; i++) {\r\n      state = state[parts[i]];\r\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\r\n      if (!state) {\r\n        return state;\r\n      }\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @todo：待删除\r\n   */\r\n  private formatDate(value: Date): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n\r\n    // 年\r\n    const year = value.getFullYear();\r\n\r\n    // 月\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // 日\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\nexport { UIStateVariableParser };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 状态机变量解析\r\n * @summary\r\n *\r\n * 解析策略：\r\n * 1、不带frameId，从顶层StateMachine中解析\r\n * {STATEMACHINE~/states/key}\r\n * {STATEMACHINE~/renderStates/key}\r\n *\r\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\r\n * {STATEMACHINE~/frameId/states/key}\r\n * {STATEMACHINE~/frameId/renderStates/key}\r\n *\r\n * 存在的问题：\r\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\r\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\r\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\r\n */\r\n@Injectable()\r\nclass StateMachineVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{STATEMACHINE~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的StateMachine变量字符串\r\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\r\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\r\n    if (stateMachineVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\r\n    stateMachineVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的值\r\n   */\r\n  private getValue(path: string, context: any): any {\r\n\r\n    const pathObj = this.getPathObj(path);\r\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\r\n\r\n    if (pathObj.type === 'currentState') {\r\n      return stateMachine.context.state;\r\n    } else if (pathObj.type === 'renderStates') {\r\n      return stateMachine[pathObj.name] as boolean;\r\n    } else {\r\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析path，并获取对应的StateMachine实例\r\n   */\r\n  private getTargetStateMachine(frameId: string, context): StateMachine {\r\n    let targetFrameContext: FrameContext;\r\n    if (frameId) {\r\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\r\n    } else {\r\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\r\n    }\r\n\r\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\r\n      throw new Error('找不到对应的状态机实例，请检查！');\r\n    }\r\n    return targetFrameContext.stateMachine;\r\n  }\r\n\r\n  /**\r\n   * 将Path解析为格式化的Path对象\r\n   */\r\n  private getPathObj(path: string): any {\r\n    let parsedPathObj: any;\r\n    const parts = this.splitPath(path);\r\n\r\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\r\n      parsedPathObj = {\r\n        frameId: '',\r\n        type: parts[0],\r\n        name: parts[1]\r\n      };\r\n    } else {\r\n      parsedPathObj = {\r\n        frameId: parts[0],\r\n        type: parts[1],\r\n        name: parts[2]\r\n      };\r\n    }\r\n\r\n    return parsedPathObj;\r\n  }\r\n\r\n  /**\r\n   * 分隔Path\r\n   */\r\n  private splitPath(path: string): string[] {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return parts;\r\n  }\r\n\r\n}\r\n\r\nexport { StateMachineVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { CommandContext } from '../command/index';\r\nimport { VariableParser } from './variable_parser';\r\n\r\n/**\r\n * 命令变量解析\r\n * {COMMAND~/params/key}\r\n * {COMMAND~/results/taskName}\r\n */\r\n@Injectable()\r\nclass CommandVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{COMMAND~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\r\n    uiStateVariables.forEach(sessionVariable => {\r\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getValue(path: string, context: any) {\r\n    if (context instanceof CommandContext === false) {\r\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\r\n    }\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const type = parts.shift();\r\n    if (type === 'params') {\r\n      const paramKey = parts.shift();\r\n      return context.command.params[paramKey];\r\n    } else if (type === 'results') {\r\n      return parts.reduce((results: any, paramKey: string) => {\r\n        return results && results[paramKey];\r\n      }, context.results);\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandVariableParser };\r\n","/**\r\n * 变量解析服务\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\n\r\n\r\n/**\r\n * 变量解析服务\r\n * 职责：\r\n * 1、解析字符串中的变量，并替换成相应的值；\r\n * 2、对表达式进行求值。\r\n *\r\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\r\n */\r\n@Injectable()\r\nclass VariableParseService {\r\n\r\n  /**\r\n   * 解析器集合\r\n   */\r\n  private parsers: VariableParser[];\r\n\r\n  /**\r\n   * 构造变量解析服务\r\n   * @param parsers 解析器集合\r\n   */\r\n  constructor(@Inject(VARIABLE_PARSERS) parsers: VariableParser[]) {\r\n    this.parsers = parsers;\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  public parse(target: any, context?: any, eventParam?: any): any {\r\n    if (typeof target === 'string' && target.length > 0) {\r\n\r\n      // 字符串，直接解析\r\n      return this.parseExpression(target, context, eventParam);\r\n\r\n    } else if (Array.isArray(target)) {\r\n\r\n      // 遍历数组\r\n      target.forEach((item, itemIndex) => {\r\n        if (typeof item === 'string') {\r\n          target[itemIndex] = this.parseExpression(item, context, eventParam);\r\n        } else {\r\n          target[itemIndex] = this.parse(item, context, eventParam);\r\n        }\r\n      });\r\n\r\n    } else if (typeof target === 'object' && target !== null) {\r\n\r\n      // 遍历对象可枚举属性\r\n      const keys = Object.keys(target);\r\n      keys.forEach(key => {\r\n        if (typeof target[key] === 'string') {\r\n          target[key] = this.parseExpression(target[key], context, eventParam);\r\n        } else {\r\n          target[key] = this.parse(target[key], context, eventParam);\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 表达式求值\r\n   */\r\n  public evaluate(expression: string, context?: any, eventParam?: any): any {\r\n    const parsedExpression = this.parse(expression, context, eventParam);\r\n    return (new Function('return ' + parsedExpression))();\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  private parseExpression(expression: string, context: any, eventParam: any): string {\r\n\r\n    // 空串直接返回\r\n    if (expression === '') {\r\n      return '';\r\n    }\r\n\r\n    this.parsers.forEach(parser => {\r\n      if (typeof expression === 'string') {\r\n        expression = parser.parse(expression, context, eventParam);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n}\r\n\r\nexport { VariableParseService };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { FrameContext } from '../frame';\r\nconst VARIABLE_MATCHER = /#{\\S+?}/g;\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass FrameIdVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/#{root-component}/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach((exp: string) => {\r\n      const frameId = this.getVariableValue(exp);\r\n      expression = expression.replace(VARIABLE_MATCHER, frameId);\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 计算表达式的值\r\n   * @param expression like #{root-component}\r\n   */\r\n  private getVariableValue(expression: string) {\r\n    const relativeFrameId = expression.substring(2, expression.length - 1);\r\n    return this.getFullFrameId(relativeFrameId);\r\n  }\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return [];\r\n    }\r\n    return expression.match(VARIABLE_MATCHER);\r\n  }\r\n\r\n  /**\r\n   * 获取补全的frameId\r\n   * @param frameId frameId\r\n   */\r\n  private getFullFrameId(frameId: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const namespace = frameContext.namespace || '';\r\n    const prefix = namespace ? `${namespace}_` : '';\r\n    return `${prefix}${frameId}`;\r\n  }\r\n}\r\n\r\nexport { FrameIdVariableParser };\r\n","import { FrameContext } from '../frame';\r\nimport { ParseUtil } from './parse_util';\r\nimport { VariableParser } from './variable_parser';\r\nconst FORM_STATES_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/g;\r\nconst FORM_STATE_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/;\r\n\r\nexport class FormStateVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析表达式变量\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(FORM_STATE_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable);\r\n        expression = expression.replace(FORM_STATE_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const appContext = frameContext.appContext;\r\n    const formVariable = appContext.params.get(variable);\r\n    return formVariable;\r\n  }\r\n  /**\r\n   * 获取到表达式中所有FormState变量数组\r\n   * @param expression 表达式\r\n   */\r\n  private extractVariables(expression: string): string[] | null {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const formStates = expression.match(FORM_STATES_EXP);\r\n    if (!formStates || formStates.length < 1) {\r\n      return null;\r\n    }\r\n    return formStates;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nconst EVENT_PARAMS_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/g;\r\nconst EVENT_PARAM_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/;\r\n\r\n/**\r\n * 命令参数解析器\r\n */\r\n@Injectable()\r\nexport class EventParamVariableParser implements VariableParser {\r\n  public context: any;\r\n\r\n  public parse(expression: string, context: any, eventParam?: any) {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(EVENT_PARAM_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable, eventParam);\r\n        expression = expression.replace(EVENT_PARAM_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 匹配表达式中的符合正则表达式的项\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const variables = expression.match(EVENT_PARAMS_EXP);\r\n    if (!variables || variables.length < 1) {\r\n      return null;\r\n    }\r\n    return variables;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string, eventParam: any) {\r\n    if (!eventParam || !variable) {\r\n      return null;\r\n    }\r\n    const variables = variable.split('/').filter(p => p);\r\n    const result = variables.reduce((target: any, key: string) => {\r\n      if (target) {\r\n        return target[key];\r\n      } else {\r\n        return null;\r\n      }\r\n    }, eventParam);\r\n    return result;\r\n  }\r\n}","import { Provider } from '@angular/core';\r\n\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\nimport { DataVariableParser } from './data_variable_parser';\r\nimport { UIStateVariableParser } from './ui_state_variable_parser';\r\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\r\nimport { CommandVariableParser } from './command_variable_parser';\r\nimport { VariableParseService } from './variable_parse_service';\r\nimport { FrameIdVariableParser } from './frame_id_variable_parser';\r\nimport { FormStateVariableParser } from './form_state_variable_parser';\r\nimport { EventParamVariableParser } from './event_param_variable_parser';\r\n\r\n// Providers\r\nconst VARIABLE_PROVIDERS: Provider[] = [\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FrameIdVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FormStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: EventParamVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: DataVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: UIStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: StateMachineVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: CommandVariableParser },\r\n  VariableParseService\r\n];\r\n\r\nexport {\r\n  VariableParser, VARIABLE_PARSERS,\r\n  FrameIdVariableParser,\r\n  DataVariableParser, UIStateVariableParser,\r\n  CommandVariableParser, StateMachineVariableParser,\r\n  VariableParseService, EventParamVariableParser, VARIABLE_PROVIDERS\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务函数\r\n * @params result 上一步执行结果\r\n * @params context 执行上下文\r\n */\r\ntype LinkFunc = (context: CommandContext) => boolean;\r\n\r\n/**\r\n * 任务链接\r\n */\r\nclass TaskLink {\r\n\r\n  /**\r\n   * 源任务\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * 目标任务\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * 执行条件\r\n   * 1、表达式；\r\n   * 2、布尔值；\r\n   * 3、函数\r\n   */\r\n  condition: string | boolean | LinkFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(from: string, to: string, condition: string | boolean | LinkFunc) {\r\n    this.from = from;\r\n    this.to = to;\r\n    this.condition = condition;\r\n  }\r\n\r\n  /**\r\n   * 是否能够\r\n   */\r\n  public canLink(context: CommandContext): boolean {\r\n    const type = typeof this.condition;\r\n    let canLink;\r\n    switch (type) {\r\n      case 'boolean':\r\n        canLink = this.condition as boolean;\r\n        break;\r\n      case 'function':\r\n        canLink = (<LinkFunc>this.condition)(context);\r\n        break;\r\n      case 'string':\r\n        const parseService = context && context.frameContext && context.frameContext.injector && context.frameContext.injector.get<VariableParseService>(VariableParseService);\r\n        canLink = parseService && parseService.evaluate(this.condition as string, context);\r\n        break;\r\n      default:\r\n        canLink = false;\r\n        break;\r\n    }\r\n    return canLink;\r\n  }\r\n}\r\n\r\nexport { LinkFunc, TaskLink };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-17 14:13:40\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-17 16:08:34\r\n */\r\n\r\nimport { TaskFunc, TaskNode } from './task_node';\r\nimport { LinkFunc, TaskLink } from './task_link';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务执行流程\r\n */\r\nclass TaskFlow {\r\n\r\n  /**\r\n   * 节点集合\r\n   */\r\n  private nodes: TaskNode[] = [];\r\n\r\n  /**\r\n   * 边集合\r\n   */\r\n  private links: TaskLink[] = [];\r\n\r\n\r\n  // #region 节点操作\r\n\r\n  /**\r\n   * 添加节点\r\n   */\r\n  public addNode(name: string, func: TaskFunc): void {\r\n    const node = new TaskNode(name, func);\r\n    this.nodes.push(node);\r\n  }\r\n\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addNodes(nodes: TaskNode[]) {\r\n    this.nodes = this.nodes.concat(nodes);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   * @param target 目标节点名称\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public insertNode(target: string, name: string, func: TaskFunc): void {\r\n    const index = this.findNodeIndex(target);\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   */\r\n  public appendNode(target: string, name: string, func: TaskFunc) {\r\n    const index = this.findNodeIndex(target) + 1;\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 获取节点索引\r\n   * @param name 名称\r\n   */\r\n  private findNodeIndex(name: string): number {\r\n    return this.nodes.findIndex((node: TaskNode) => {\r\n      return node.name === name;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建任务节点\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  private createNode(name: string, func: TaskFunc): TaskNode {\r\n    const node = new TaskNode(name, func);\r\n    return node;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 链接操作\r\n\r\n  /**\r\n   * 添加链接\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public addLink(from: string, to: string, condition: string | boolean) {\r\n    const link = this.createLink(from, to, condition);\r\n    this.links.push(link);\r\n  }\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addLinks(links: TaskLink[]) {\r\n    this.links = this.links.concat(links);\r\n  }\r\n\r\n  /**\r\n   * 创建链接\r\n   */\r\n  private createLink(from: string, to: string, condition: string | boolean) {\r\n    const link = new TaskLink(from, to, condition);\r\n    return link;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 流程控制\r\n  /**\r\n   * 获取下一个节点\r\n   * @param from    源节点名称\r\n   * @param context 上下文\r\n   */\r\n  getNext(from?: string, context?: CommandContext): TaskNode {\r\n    if (!from) {\r\n      return this.nodes.shift();\r\n    }\r\n\r\n    // 符合满足条件的边\r\n    const nextLink = this.links.find((link: TaskLink) => {\r\n      return link.from === from && link.canLink(context);\r\n    });\r\n    if (!nextLink) {\r\n      return;\r\n    }\r\n\r\n    return this.nodes.find((node: TaskNode) => {\r\n      return node.name === nextLink.to;\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 其他方法\r\n\r\n  /**\r\n   * 克隆任务流\r\n   */\r\n  clone() {\r\n    const taskFlow = new TaskFlow();\r\n    taskFlow.addNodes(this.nodes);\r\n    taskFlow.addLinks(this.links);\r\n    return taskFlow;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { TaskFlow };\r\n","import { IDisposable } from '../core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Command } from './command';\r\n\r\n/**\r\n * Command上下文\r\n */\r\nclass CommandContext implements IDisposable{\r\n\r\n  public typeName = 'CommandContext';\r\n\r\n  /**\r\n   * 命令实例\r\n   */\r\n  command: Command;\r\n\r\n  /**\r\n   * 组件上下文\r\n   */\r\n  frameContext: FrameContext;\r\n\r\n  /**\r\n   * 执行结果\r\n   * 记录每一个task执行的结果\r\n   */\r\n  results: { [taskName: string]: any } = {};\r\n\r\n  /**\r\n   * 最新的执行结果\r\n   */\r\n  latestResult: any;\r\n\r\n  /**\r\n   * 事件参数\r\n   */\r\n  eventParam: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param command 命令\r\n   * @param frameContext 框架上下文\r\n   */\r\n  constructor(command: Command, frameContext: FrameContext) {\r\n    this.command = command;\r\n    this.frameContext = frameContext;\r\n  }\r\n  public dispose() {\r\n    this.eventParam = null;\r\n    this.command = null;\r\n    this.results = null;\r\n    this.latestResult = null;\r\n    this.frameContext = null;\r\n  }\r\n  public clearResults(){\r\n    this.results = null;\r\n  }\r\n}\r\n\r\nexport { CommandContext };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Translate } from './translate';\r\n\r\nexport const TranslateToken = new InjectionToken<Translate>('@farris/devkit TranslateToken');\r\n","import { InjectionToken, Optional, Injector, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject, EMPTY } from 'rxjs';\r\nimport { concatMap, map, takeLast, take, takeUntil, throwIfEmpty } from 'rxjs/operators';\r\n\r\nimport { FrameContext } from '../frame/index';\r\nimport { VariableParseService } from '../variable/index';\r\n\r\nimport { Command, CommandParams, ParamDescriptions } from './command';\r\nimport { CommandContext } from './command_context';\r\nimport { TaskFunc, TaskFlow } from './flow/index';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { Translate } from '../i18n/translate';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\r\n */\r\nabstract class CommandHandler implements IDisposable, OnDestroy {\r\n\r\n  /**\r\n   * 任务流程图\r\n   */\r\n  private taskFlow: TaskFlow;\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 变量解析服务\r\n   */\r\n  protected parseService: VariableParseService;\r\n\r\n  public commandName: string;\r\n  private destroy$: Subject<any> = new Subject<any>();\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n    }\r\n    this.frameContext = null;\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 构造执行流程\r\n   */\r\n  abstract schedule();\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.frameContext = frameContext;\r\n    this.parseService = variableParseService;\r\n    this.taskFlow = new TaskFlow();\r\n    this.schedule();\r\n\r\n  }\r\n\r\n  /**\r\n   * 执行任务\r\n   * @param command 要执行的命令\r\n   * @return 最后一个任务的执行结果\r\n   * @todo：按功能拆分小函数\r\n   */\r\n  public execute(command: Command): Observable<any> {\r\n    const lastTaskResult$ = new Subject();\r\n    const taskFlow = this.taskFlow.clone();\r\n\r\n    // setTimeout暂时不能去掉的原因：\r\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\r\n    // 2、关闭前命令需要延迟执行。\r\n    setTimeout(() => {\r\n      if (!this.frameContext || this.frameContext.isDisposed) {\r\n        return EMPTY;\r\n      }\r\n      // 1、解析参数\r\n      // 避免解析变量时修改了原始的command\r\n      const { eventParam = null } = {\r\n        ...command\r\n      };\r\n      delete command.eventParam;\r\n      const commandToExecute = JSON.parse(JSON.stringify(command));\r\n      commandToExecute.params = this.paramsTransform(commandToExecute.params);\r\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.frameContext, eventParam);\r\n      command.eventParam = eventParam;\r\n      commandToExecute.eventParam = eventParam;\r\n      this.transParamTypes(commandToExecute.params, commandToExecute.paramDescriptions);\r\n\r\n      // 2、串联任务流\r\n      const initContext = new CommandContext(commandToExecute, this.frameContext);\r\n      initContext.eventParam = command.eventParam || null;\r\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\r\n      let currentTask = taskFlow.getNext('', initContext);\r\n      const highOrder$ = context$.pipe(\r\n        concatMap((context: CommandContext) => {\r\n          const result$ = currentTask.execute(context);\r\n          return result$.pipe(\r\n            take(1),\r\n            map((result: any) => {\r\n\r\n              // 写入执行结果\r\n              context.results[currentTask.name] = result;\r\n              context.latestResult = result;\r\n              currentTask = taskFlow.getNext(currentTask.name, context);\r\n\r\n              // 操作控制流\r\n              if (currentTask) {\r\n                context$.next(context);\r\n              } else {\r\n                context$.complete();\r\n              }\r\n\r\n              // 将结果流转换为context流\r\n              return context;\r\n            }),\r\n            throwIfEmpty(() => {\r\n              context$.complete();\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      // 3、执行合并后的任务流\r\n      highOrder$.pipe(\r\n        takeLast(1)\r\n      ).subscribe({\r\n        next: (context: CommandContext) => {\r\n          this.waitForDestroy(context);\r\n          lastTaskResult$.next(context.latestResult);\r\n        },\r\n        error: (error: any) => {\r\n          this.waitForDestroy(initContext);\r\n          this.displayError(error);\r\n          lastTaskResult$.error(error || '');\r\n        },\r\n        complete: () => {\r\n          this.waitForDestroy(initContext);\r\n          lastTaskResult$.complete();\r\n        },\r\n      });\r\n\r\n    }, 0);\r\n\r\n    return lastTaskResult$;\r\n  }\r\n  /**\r\n   * 等待销毁\r\n   * @param commandContext \r\n   */\r\n  private waitForDestroy(commandContext: CommandContext) {\r\n    if (!commandContext) {\r\n      return;\r\n    }\r\n    commandContext.clearResults();\r\n    if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {\r\n      this.frameContext.appContext.destorySignal.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n        if (commandContext) {\r\n          commandContext.dispose();\r\n          commandContext = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 显示错误信息\r\n   */\r\n  private displayError(error: any) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n  /**\r\n   * 参数国际化转换方法\r\n   */\r\n  private paramsTransform(params: object) {\r\n    const exp = /\\{\\{(\\w+)\\}\\}/g;\r\n    if (!params) {\r\n      return null;\r\n    }\r\n    const translateService = this.frameContext && this.frameContext.injector && this.frameContext.injector.get<Translate>(TranslateToken, null) || null;\r\n    const pArray = Object.keys(params);\r\n    const result = {};\r\n    if (pArray.length === 0) {\r\n      return params;\r\n    }\r\n    pArray.forEach((p) => {\r\n      let ele = params[p];\r\n      if (ele && exp.test(ele) && translateService) {\r\n        ele = ele.replace(exp, ($1, $2) => {\r\n          return translateService.transform($2, null);\r\n        });\r\n      }\r\n      result[p] = ele;\r\n\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addTask(name: string, func: TaskFunc) {\r\n    this.taskFlow.addNode(name, func);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addLink(from: string, to: string, condition: string | boolean) {\r\n    this.taskFlow.addLink(from, to, condition);\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public insertTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public afterTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 替换任务\r\n   * @param  name 要替换的任务名称\r\n   * @param  func 替换函数\r\n   */\r\n  public replaceTask(name: string, func: TaskFunc) {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 调用方法\r\n   */\r\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\r\n    this.setContextToServiceInstance(serviceInstance, context);\r\n    const parsedArgs = this.parseService.parse(args, context, context.eventParam);\r\n    return serviceInstance[method](...parsedArgs);\r\n  }\r\n\r\n  /**\r\n   * 为服务设置命令上下文\r\n   * @todo\r\n   * 通过这种方式存在很大问题：\r\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\r\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\r\n   * 建议解决方案：\r\n   * 1、将context修改为某个特殊属性名；\r\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\r\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\r\n   */\r\n  protected setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\r\n\r\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\r\n    const serviceContext = serviceInstance.context;\r\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\r\n      return;\r\n    }\r\n\r\n    serviceInstance.context = context;\r\n  }\r\n\r\n  /**\r\n   * 根据参数描述信息转换参数类型\r\n   */\r\n  private transParamTypes(params: CommandParams, paramDescriptions: ParamDescriptions) {\r\n    if (!paramDescriptions) {\r\n      return;\r\n    }\r\n    const keys = Object.keys(params);\r\n    keys.forEach(key => {\r\n      if (!paramDescriptions[key] || !paramDescriptions[key].type) {\r\n        return;\r\n      }\r\n\r\n      const parType = paramDescriptions[key].type;\r\n      const value = params[key];\r\n      if (value === undefined || value === null || typeof value === parType) {\r\n        return; // 值不存在或类型匹配，无需处理\r\n      }\r\n\r\n      switch (parType) {\r\n        case 'string':\r\n          // 其实转换前的参数都是string，这里不会走到\r\n          params[key] = value + '';\r\n          break;\r\n        case 'int':\r\n        case 'double':\r\n        case 'number':\r\n          // 前端数值类型只有number，这里兼容命令构件上设置为int和double的情况\r\n          const numResult = Number(value);\r\n          if (isNaN(numResult)) {\r\n            throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n          }\r\n          params[key] = numResult;\r\n          break;\r\n        case 'boolean':\r\n          let boolResult: boolean;\r\n          const strValue = (value + '').toLowerCase();\r\n          if (strValue === 'true') {\r\n            boolResult = true;\r\n          } else if (strValue === 'false') {\r\n            boolResult = false;\r\n          } else {\r\n            // throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n            boolResult = false;\r\n          }\r\n          params[key] = boolResult;\r\n          break;\r\n        case 'datetime':\r\n          // todo：日期时间暂不处理\r\n          break;\r\n        case 'object':\r\n          // 表达式解析出来的参数，无需处理，按原类型返回\r\n          // todo: 输入参数是个json串，转成object\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 命令处理器注入Token\r\n */\r\nconst COMMAND_HANDLERS_TOKEN = new InjectionToken<CommandHandler>('@Farris Command Handlers');\r\n\r\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\r\n","/**\r\n * 命令处理注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER, NgCommandHandler } from './decorators';\r\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\r\n\r\n\r\n/**\r\n * 命令处理注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerRegistry {\r\n\r\n  /**\r\n   * CommandHandler Map\r\n   */\r\n  private handlerMap: Map<string, CommandHandler>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlers 命令处理实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLERS_TOKEN)handlers: CommandHandler[]) {\r\n    const self = this;\r\n    this.handlerMap = new Map<string, CommandHandler>();\r\n    if (handlers) {\r\n      handlers.forEach((handler: CommandHandler) => {\r\n        self.regist(handler);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加命令处理\r\n   * @param  commandName    命令名称\r\n   * @param  commandHandler 命令处理实例\r\n   */\r\n  public set(commandName: string, commandHandler: CommandHandler) {\r\n    if (this.handlerMap.has(commandName)) {\r\n      throw new Error(commandName + '对应的CommandHandler已经存在');\r\n    }\r\n    this.handlerMap.set(commandName, commandHandler);\r\n  }\r\n\r\n  /**\r\n   * 获取命令处理\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理实例\r\n   */\r\n  public get(commandName: string): CommandHandler {\r\n    if (this.handlerMap.has(commandName) === false) {\r\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\r\n    }\r\n    return this.handlerMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 注册命令处理\r\n   * @param handlers 命令处理实例\r\n   */\r\n  public regist(commandHandler: CommandHandler) {\r\n    let commandName = commandHandler.commandName;\r\n    if (!commandName) {\r\n      // 根据metadata获取对应的Command名称\r\n      const handlerMetadata: NgCommandHandler =\r\n        MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);\r\n      if (!handlerMetadata) {\r\n        throw new Error('CommandHandler必须指定要处理的命令名称');\r\n      }\r\n      commandName = handlerMetadata.commandName;\r\n    }\r\n    this.set(commandName, commandHandler);\r\n  }\r\n  /**\r\n   * 清空所有命令处理器\r\n   */\r\n  public dispose() {\r\n    if (this.handlerMap) {\r\n      this.handlerMap.forEach(handler => {\r\n        handler.dispose();\r\n      });\r\n    }\r\n    this.handlerMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerRegistry };\r\n","/**\r\n * 命令处理扩展相关\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\nimport { CommandHandler } from './command_handler';\r\n\r\n/**\r\n * 命令处理扩展抽象类\r\n *\r\n * CommandHandler由一个个Task串联而成，这些Task不是一成不变，\r\n * 通过CommandHandlerExtender可以在不同的时机对它扩展，\r\n * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。\r\n *\r\n * ### 定义并注册扩展\r\n *\r\n * **定义一个扩展**\r\n *\r\n * 按如下步骤可以实现一个扩展：\r\n * - 继承CommandHandlerExtender抽象基类；\r\n * - 实现extend方法，在其内部对任务进行扩展、替换；\r\n * - 添加NgCommandHandlerExtender指定要扩展的命令。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandlerExtender({\r\n *    commandName: 'formLoad'\r\n *  })\r\n * class FormLoadExtender extends CommandHandlerExtender {\r\n *\r\n *   extend(handler: CommandHandler): CommandHandler {\r\n *\r\n *     // 扩展一个任务\r\n *     handler.extendTask('loadData', (originalResult) => {\r\n *       console.log('do sth. to the original result');\r\n *     });\r\n *\r\n *     // 替换一个任务\r\n *     handler.extendTask('transitState', () => {\r\n *       console.log('transit to other state');\r\n *     });\r\n *\r\n *     return handler;\r\n *   }\r\n * }\r\n * ```\r\n * 在extend方法内部：\r\n * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；\r\n * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。\r\n *\r\n * **注册扩展**\r\n *\r\n * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，\r\n * 由它来统一进行注册。\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])\r\n *   ]\r\n * })\r\n * class SimpleModule {}\r\n * ```\r\n */\r\n@Injectable()\r\nabstract class CommandHandlerExtender {\r\n\r\n  /**\r\n   * 扩展方法\r\n   * @param handler 要扩展的命令处理器\r\n   */\r\n  abstract extend(handler: CommandHandler): CommandHandler;\r\n\r\n}\r\n\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = new InjectionToken<CommandHandlerExtender>('@farris/devkit CommandHandler Extenders');\r\n\r\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\r\n","/**\r\n * 命令处理扩展注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER_EXTENDER, NgCommandExtender } from './decorators';\r\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 命令处理扩展注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerExtenderRegistry implements IDisposable{\r\n\r\n  /**\r\n   * CommandHandlerExtender实例Map\r\n   * - key：命令名称\r\n   * - value：命令扩展实例\r\n   */\r\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param extenders 命令扩展实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLER_EXTENDERS_TOKEN)extenders: CommandHandlerExtender[]) {\r\n    const self = this;\r\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\r\n    if (extenders) {\r\n      extenders.forEach((extender: CommandHandlerExtender) => {\r\n        self.regist(extender);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取命令扩展实例数组\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理扩展实例数组\r\n   */\r\n  get(commandName: string): CommandHandlerExtender[] {\r\n    if (this.extendersMap.has(commandName) === false) {\r\n      return [];\r\n    }\r\n    return this.extendersMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 添加命令扩展\r\n   * @param commandName Command名称\r\n   * @param extender    CommandHandlerExtender实例\r\n   * @return void\r\n   */\r\n  set(commandName: string, extender: CommandHandlerExtender) {\r\n    if (this.extendersMap.has(commandName)) {\r\n\r\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\r\n      this.extendersMap.get(commandName).push(extender);\r\n    } else {\r\n\r\n      // 如果不存在，则创建新的扩展数组，并追加\r\n      this.extendersMap.set(commandName, [extender]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册命令扩展\r\n   * @param extender CommandHandlerExtender实例\r\n   */\r\n  regist(extender: CommandHandlerExtender) {\r\n\r\n    // 通过元数据获取要扩展的Comamnd名称\r\n    const extenderMetadata: NgCommandExtender =\r\n      MetadataUtil.getClassMetadataByName(extender.constructor, NG_COMMAND_HANDLER_EXTENDER);\r\n    if (!extenderMetadata) {\r\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\r\n    }\r\n    const commandName = extenderMetadata.commandName;\r\n\r\n    // 添加到Map中\r\n    this.set(commandName, extender);\r\n  }\r\n  public dispose(){\r\n    this.extendersMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerExtenderRegistry };\r\n","import { makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * NgComponentState元数据名称\r\n */\r\nexport const NG_COMPONENT_STATE = 'NgParam';\r\n\r\n/**\r\n * NgComponentState\r\n */\r\nexport interface NgParam {\r\n\r\n  /**\r\n   * 组件的ID\r\n   */\r\n  componentId?: string;\r\n\r\n  /**\r\n   * 状态名称\r\n   */\r\n  stateName?: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n\r\n}\r\n\r\n/**\r\n * NgUIStateDecorator\r\n */\r\nexport interface NgParamDecorator {\r\n  (obj?: NgParam): any;\r\n  new(obj?: NgParam): any;\r\n}\r\n\r\n/**\r\n * NgUIState\r\n */\r\nexport const NgParam: NgParamDecorator =\r\n  makePropDecorator(NG_COMPONENT_STATE, (obj?: NgParam) => obj);\r\n\r\n\r\n","import { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMPONENT_STATE, NgParam } from './decorators';\r\n\r\nexport class UIStateMetadataUtil {\r\n\r\n  /**\r\n   * 获取NgUIState的属性元数据\r\n   * @param \r\n   * @returns 属性元数据对象\r\n   * @example\r\n   * 返回格式：\r\n   * {\r\n   *    '属性名称': <NgUIStateProperty>{ ...}\r\n   * }\r\n   */\r\n  static getUIFields(target: Function): {[propName: string]: NgParam} {\r\n      return MetadataUtil.getPropsMetadatasByName(target, NG_COMPONENT_STATE);\r\n  }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-17 13:38:23\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-17 13:38:50\r\n * @todo：临时删除原有功能，待重构\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\r\nimport { NgParam } from './decorators';\r\n\r\nexport interface UIStateObservableParam {\r\n  field: string;\r\n  value: any;\r\n}\r\n/**\r\n * UI状态\r\n */\r\n@Injectable()\r\nexport class UIState {\r\n  /**\r\n   * @deprecated innerData为状态机内部变量，外部请不要使用\r\n   */\r\n  innerData: {};\r\n\r\n  // 监听变化\r\n  public changes: Subject<UIStateObservableParam>;\r\n  public paramTypeTransform = false;\r\n  constructor() {\r\n    this.changes = new Subject<UIStateObservableParam>();\r\n    this.innerData = Object.assign({});\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    const uiFields = UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  initialize(context: any) {\r\n    const uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  private initializeUIField(uiFieldMetadata: { [key: string]: NgParam }): void {\r\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\r\n      const fieldMetadata = uiFieldMetadata[propertyName] as NgParam;\r\n      const uiField = fieldMetadata.stateName || propertyName;\r\n\r\n      if (delete this[propertyName]) {\r\n        this.defineProperty(propertyName, uiField);\r\n      }\r\n    });\r\n  }\r\n\r\n  public isExistProperty(propertyName: any) {\r\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private defineProperty(propertyName: any, field: any = null) {\r\n    Object.defineProperty(this, propertyName, {\r\n      get: function () {\r\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n      },\r\n      set: function (value) {\r\n        // 值相同时不触发变更\r\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n        if (this.paramTypeTransform === true) {\r\n          const ngParams = UIStateMetadataUtil.getUIFields(this.constructor);\r\n          const ngParam = ngParams && ngParams[propertyName] || null;\r\n          const dataType = ngParam && ngParam.originalDataType || null;\r\n          if (dataType) {\r\n            value = this.transform(value, dataType);\r\n          }\r\n        }\r\n        if (oldValue === value) {\r\n          return;\r\n        }\r\n        if (field !== null) {\r\n          this.innerData[field] = value;\r\n        } else {\r\n          this.innerData[propertyName] = value;\r\n        }\r\n        this.changes.next({\r\n          field: propertyName,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public setPropertyValue(propertyName: any, value: any) {\r\n    if (propertyName === '' || propertyName === undefined) {\r\n      return;\r\n    }\r\n    if (!this.isExistProperty(propertyName)) {\r\n      this.defineProperty(propertyName);\r\n    }\r\n    this[propertyName] = value;\r\n  }\r\n  private transform(target: any, dataType: string) {\r\n    if (!dataType) {\r\n      return target;\r\n    }\r\n    dataType = dataType.toLowerCase();\r\n    if (dataType === 'string') {\r\n      if (target === null || target === undefined) {\r\n        return target;\r\n      }\r\n      return target.toString();\r\n    } else if (dataType === 'number') {\r\n      if (target === undefined) {\r\n        return undefined;\r\n      }\r\n      const result = Number(target);\r\n      if (isNaN(result)) {\r\n        throw new Error(`${target}无法转换为数字！`);\r\n      }\r\n      return result;\r\n    } else if (dataType === 'boolean') {\r\n      if (typeof target === 'boolean') {\r\n        return target;\r\n      } else {\r\n        if (target === null || target === undefined) {\r\n          return false;\r\n        }\r\n        target = target.toString().toLowerCase();\r\n        if (target === 'false') {\r\n          return false;\r\n        } else if (target === 'true') {\r\n          return true;\r\n        } else {\r\n          throw new Error(`${target}无法转换为布尔类型！`);\r\n        }\r\n      }\r\n    } else if (dataType === 'date' || dataType === 'datetime') {\r\n      // 日期、日期时间在前端依然按照字符串处理\r\n      return target;\r\n    } else if (dataType === 'object') {\r\n      if (typeof target === 'object') {\r\n        return target;\r\n      } else {\r\n        try {\r\n          return JSON.parse(target);\r\n        } catch {\r\n          throw new Error(`${target}无法转换为对象！`);\r\n        }\r\n      }\r\n    } else {\r\n      return target;\r\n    }\r\n  }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n/**\r\n * 变量类型转换\r\n */\r\nexport const PARAM_TYPE_TRANSFORM_TOKEN = new InjectionToken<boolean>('@farris/devkit_param_type_transform');","import { ViewModel } from '../view-model/index';\r\nimport { StateMachineContext } from './context';\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * State相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\r\n */\r\nexport class State {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param name 状态名称\r\n   */\r\n  constructor(public name: string) {\r\n  }\r\n}\r\n\r\n/**\r\n * 基本状态字典, 形如\r\n * {\r\n *  stateName1: stateInstance1,\r\n *  stateName2: stateInstance2,\r\n *  ...\r\n * }\r\n */\r\nexport interface StateDictionary {\r\n    [index: string]: State;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * RenderState相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 渲染状态，该状态用于和界面UI绑定\r\n */\r\nexport type RenderState = boolean;\r\n\r\n/**\r\n * 初始渲染状态\r\n */\r\nexport const initialUIState: RenderState = false;\r\n\r\n/**\r\n * 渲染状态字典，形如：\r\n * {\r\n *  renderStateName1: true,\r\n *  renderStateName1: false,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderStateDictionary {\r\n  [index: string]: RenderState;\r\n}\r\n\r\n\r\n/**\r\n * 渲染方法\r\n * 该方法接收一个StateMachineContext类型的上下文，\r\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\r\n */\r\nexport type Render = (context: StateMachineContext) => RenderState;\r\n\r\n/**\r\n * 渲染方法字典\r\n * {\r\n *  renderStateName1: render1,\r\n *  renderStateName1: render2,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderDictionary {\r\n  [index: string]: Render;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Action相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 状态机动作\r\n */\r\nexport type Action = () => any;\r\n\r\n/**\r\n * 状态机行为约束条件\r\n */\r\n// export interface Precondition {\r\n// }\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Effect相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\r\n */\r\nexport interface EffectHandlerOption {\r\n\r\n  /**\r\n   * 效果类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 效果实现\r\n   */\r\n  effect: any;\r\n}\r\n\r\n/**\r\n * 状态机界面效果\r\n */\r\nexport interface Effect {\r\n\r\n  /**\r\n   * 行为约束条件集合\r\n   */\r\n  preconditions?: any[];\r\n\r\n  /**\r\n   * 发生某行为后引起的界面变化效果\r\n   */\r\n  handlers?: EffectHandlerOption[];\r\n}\r\n\r\n/**\r\n * 状态机效果字典\r\n */\r\nexport interface EffectDictianry {\r\n    [index: string]: Effect;\r\n}\r\n\r\n\r\n","import { StateMachine } from './state_machine';\r\nimport { State } from './types';\r\nimport { Context } from '../context/context';\r\nimport { VariableParseService } from '../variable/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\n\r\n/**\r\n * 状态机上下文\r\n */\r\nexport class StateMachineContext {\r\n\r\n  /**\r\n   * 当前状态名称\r\n   */\r\n  state: string;\r\n\r\n  parent: Context;\r\n\r\n  parser: VariableParseService;\r\n\r\n  frameContext: FrameContext;\r\n\r\n  stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 构造函数\r\n   * @param stateMachine 状态机\r\n   * @param initialState 初始状态\r\n   */\r\n  constructor(public stateMachine: StateMachine) {\r\n    // this.state = initialState.name;\r\n  }\r\n\r\n  initialize(variableParseService: VariableParseService, initialState: State) {\r\n    this.frameContext = this.stateMachine && this.stateMachine.frameContext || null;\r\n    this.state = this.state || (initialState ? initialState.name : '');\r\n    this.parser = variableParseService;\r\n    this.stateMachineEvent = this.stateMachine.stateMachineEvent;\r\n  }\r\n\r\n  /**\r\n   * 状态迁移\r\n   * @param stateName 下一状态的名称\r\n   */\r\n  transitTo(stateName: string) {\r\n    const nextState = this.stateMachine.states[stateName];\r\n    if (nextState) {\r\n      this.state = nextState.name;\r\n      this.stateMachine.render();\r\n    }\r\n  }\r\n\r\n  parse(expression: string, targetType: 'source' | 'target'): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    const context = this.stateMachineEvent.getFrameContext(expression) || this.stateMachine.frameContext;\r\n    switch (targetType) {\r\n      case 'source':\r\n        return this.parseSourceValue(expression, context);\r\n      case 'target':\r\n        return this.parser.parse(expression, context);\r\n    }\r\n  }\r\n\r\n  private parseSourceValue(expression: string, context: any): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    let result = expression.trim();\r\n    result = this.parser.parse(result, context);\r\n    if (result === 'state') {\r\n      result = this.state;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // 兼容旧版本\r\n  get(expression: string): any {\r\n    return this.getUIState(expression);\r\n  }\r\n  // 解析uistate变量表达式并返回表达式的值\r\n  getUIState(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenUIStateChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n\r\n  // 解析data变量表达式并返回表达式的值\r\n  getData(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenEntityChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { StateMachine } from './state_machine';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Change } from '../binding-data/changes';\r\nimport { AppContext } from '../app';\r\n\r\n/**\r\n * 状态机事件，监听uistate的变化和entity的变化\r\n */\r\n@Injectable()\r\nexport class StateMachineEvent {\r\n\r\n  frameContext: FrameContext;\r\n\r\n  get appContext(): AppContext {\r\n    return this.stateMachine.appContext as AppContext;\r\n  }\r\n\r\n  uiFieldList: Array<string> = [];\r\n\r\n  frameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  dataFieldList: Array<string> = [];\r\n\r\n  dataFrameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  constructor(public stateMachine: StateMachine) {\r\n    this.frameContextMap = new Map<FrameContext, any>();\r\n    this.dataFrameContextMap = new Map<FrameContext, any>();\r\n  }\r\n\r\n  initialize(frameContext: FrameContext) {\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n  /**\r\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\r\n   */\r\n  private extractPaths(expression: string): string {\r\n    let path = '';\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}$/g;\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}$/g;\r\n    if (typeof expression === 'string') {\r\n      const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n      const dataVariables = expression.match(DATA_PATTERN_G);\r\n      if (uiStateVariables !== null) {\r\n        const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}$/;\r\n        uiStateVariables.forEach((uiStateVariable: string) => {\r\n          const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n      if (dataVariables !== null) {\r\n        const DATA_PATTERN = /\\{DATA~(\\S+?)\\}$/;\r\n        dataVariables.forEach((dataVariable: string) => {\r\n          const pathMatches = dataVariable.match(DATA_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 根据表达式返回当前组件的frameContext\r\n  getFrameContext(expression: any): FrameContext {\r\n    let frameId = this.extractPaths(expression).split('/')[1] || '';\r\n    if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {\r\n      const relativeFrameId = frameId.substring(2, frameId.length - 1);\r\n      frameId = this.frameContext.namespace ? `${this.frameContext.namespace}_${relativeFrameId}` : relativeFrameId;\r\n    }\r\n    return this.appContext.getFrameContext(frameId);\r\n  }\r\n\r\n  // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)\r\n  getFrameField(expression: any) {\r\n    return this.extractPaths(expression).split('/')[2];\r\n  }\r\n\r\n  // 监听表单变量的变化\r\n  ListenUIStateChange(frameContext: FrameContext, expression: any) {\r\n    const frameField = this.getFrameField(expression);\r\n    if (!this.frameContextMap.has(frameContext)) {\r\n      this.frameContextMap.set(frameContext, this.uiFieldList);\r\n      frameContext.uiState.changes.subscribe((data) => {\r\n        if (data.field && this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {\r\n      this.uiFieldList.push(frameField);\r\n    }\r\n  }\r\n\r\n\r\n  // 监听实体数据的变化\r\n  ListenEntityChange(frameContext: FrameContext, expression: any) {\r\n    if (!this.dataFrameContextMap.has(frameContext)) {\r\n      this.dataFrameContextMap.set(frameContext, this.dataFieldList);\r\n      frameContext.bindingData.changes.subscribe((change: Change) => {\r\n        // 切换当前行用到的是\r\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\r\n          this.stateMachine.render();\r\n        }\r\n        if (change.path.join() && this.isAccordingValue(this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {\r\n      this.dataFieldList.push(expression);\r\n    }\r\n  }\r\n  // 监听是否是解析的数据发生变化\r\n  isAccordingValue(arr: any, path: string) {\r\n    return arr.find(item => {\r\n      return item.indexOf(path) > -1;\r\n    }) === undefined ? false : true;\r\n  }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { StateMachineContext } from './context';\r\nimport { NgState, NgAction, NgRenderState } from './decorators';\r\nimport {\r\n  State, initialUIState, Effect, Render,\r\n  StateDictionary, RenderStateDictionary, RenderDictionary\r\n} from './types';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { OnDestroy } from '@angular/core';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 状态机初始化配置对象\r\n */\r\nexport interface StateMachineOption {\r\n\r\n  /**\r\n   * 界面渲染描述\r\n   */\r\n  renders?: { [index: string]: Render };\r\n\r\n  /**\r\n   * 状态集合\r\n   */\r\n  states?: string[];\r\n\r\n  /**\r\n   * 状态机界面控制效果\r\n   */\r\n  effects?: { [index: string]: Effect };\r\n}\r\n\r\n/**\r\n * 预置界面效果处理\r\n */\r\nexport const effectHandlers = {\r\n\r\n  /**\r\n   * 预置状态迁移处理\r\n   */\r\n  transit: {\r\n\r\n    /**\r\n     * 执行状态迁移\r\n     * @param stateMachine  状态机对象\r\n     * @param stateName     下一状态的名称\r\n     * @param preconditions 迁移条件\r\n     */\r\n    // tslint:disable-next-line: only-arrow-functions\r\n    perform: function (statemachine: StateMachine, stateName: string, preconditons: any[] = []) {\r\n      const nextState: State = statemachine.states[stateName];\r\n      statemachine.context.transitTo(nextState.name);\r\n      statemachine.render();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 状态机\r\n *\r\n * ### 基本概念\r\n * 状态机中有三个重要的概念：\r\n * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；\r\n * - 控件状态（RenderState）：控制具体控件的状态；\r\n * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。\r\n *\r\n * ### 定义状态机\r\n *\r\n * **基本步骤**\r\n *\r\n * - 继承StateMachine基类，并添加NgStatemachine注解；\r\n * - 定义页面状态、控件状态、迁移动作。\r\n *\r\n * **状态机中的注解**\r\n *\r\n * - NgStatemachine：将类标记为状态机，并进行扩展；\r\n * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；\r\n * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，\r\n *   一般情况下是通过对页面状态进行逻辑运算来确定。\r\n * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgStatemachine()\r\n * class SimpleStateMachine extends StateMachine {\r\n *\r\n *   // 查看状态，设置为初始状态\r\n *   @NgState({ initialState: true })\r\n *   viewState: State;\r\n *\r\n *   // 编辑状态\r\n *   @NgState()\r\n *   editState: State;\r\n *\r\n *   // 编辑按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'viewState'\r\n *   })\r\n *   canEdit: RenderState;\r\n *\r\n *   // 保存按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canSave: RenderState;\r\n *\r\n *   // 输入控件是否允许输入\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canInput: RenderState;\r\n *\r\n *   // 迁移到编辑状态\r\n *   @NgAction({ transitTo: 'editState' })\r\n *   edit: Action;\r\n *\r\n *   // 迁移到查看状态\r\n *   @NgAction({ transitTo: 'viewState' })\r\n *   view: Action;\r\n * }\r\n * ```\r\n * 在上边的代码中做了如下定义：\r\n * - 两个页面状态：查看状态、编辑状态，\r\n * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，\r\n * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。\r\n *\r\n *\r\n * ### 在模板中使用状态机\r\n *\r\n * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。\r\n *\r\n * ```html\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canEdit\">编辑</button>\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canSave\">保存</button>\r\n * <input id=\"code\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * <input id=\"name\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * ```\r\n *\r\n * ### 执行状态迁移\r\n * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。\r\n * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。\r\n * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *   commandName: 'save'\r\n * })\r\n * class SaveHandler extends CommandHandler {\r\n *\r\n *   schedule() {\r\n *     this.addTask('save', () => {\r\n *       // 实现保存\r\n *     });\r\n *\r\n *     // 状态迁移\r\n *     this.addTask('transitState', ) => {\r\n *       this.stateMachine['view']();\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class StateMachine implements OnDestroy, IDisposable {\r\n  private isStateInited = false;\r\n  /**\r\n   * 初始状态\r\n   */\r\n  public initialState: State;\r\n\r\n  /**\r\n   * 状态字典\r\n   */\r\n  public states: StateDictionary;\r\n\r\n  /**\r\n   * 渲染状态字典\r\n   */\r\n  public renderStates: RenderStateDictionary;\r\n\r\n  /**\r\n   * 渲染器字典\r\n   */\r\n  public renders: RenderDictionary;\r\n\r\n  /**\r\n   * 状态机上下文\r\n   */\r\n  public context: StateMachineContext;\r\n\r\n  /**\r\n   * 状态变更\r\n   */\r\n  public stateChange: BehaviorSubject<string>;\r\n\r\n  public appContext: any;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 状态机元数据\r\n   */\r\n  public metadatas: { states: { [stateName: string]: NgState }, renderStates: { [renderStateName: string]: NgRenderState }, actions: { [actionName: string]: NgAction } };\r\n  private isDisposed = false;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n\r\n    // 遍历所有属性装饰器，并调用相应的build方法\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          this['build' + propMetadata.ngMetadataName](propName, propMetadata);\r\n        });\r\n      });\r\n    }\r\n\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n\r\n    this.stateChange = new BehaviorSubject<any>(false);\r\n    this.context = new StateMachineContext(this);\r\n    this.stateMachineEvent = new StateMachineEvent(this);\r\n  }\r\n  public dispose(options?: any) {\r\n    this.isDisposed = true;\r\n    this.frameContext = null;\r\n    this.appContext = null;\r\n    this.context = null;\r\n    this.stateMachineEvent = null;\r\n    this.metadatas = null;\r\n  }\r\n  public ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\r\n  initialize(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.appContext = frameContext.appContext;\r\n    this.frameContext = frameContext;\r\n    const stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();\r\n    this.metadatas = stateMachineMetadata;\r\n    this.buildStateMachine(stateMachineMetadata);\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n    this.context.initialize(variableParseService, this.initialState);\r\n    this.stateMachineEvent.initialize(this.frameContext);\r\n    this.render();\r\n  }\r\n\r\n  private collectionMetadata(): {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  } {\r\n    const stateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          switch (propMetadata.ngMetadataName) {\r\n            case 'NgState':\r\n              stateMachineMetadata.states[propName] = propMetadata;\r\n              break;\r\n            case 'NgRenderState':\r\n              stateMachineMetadata.renderStates[propName] = propMetadata;\r\n              break;\r\n            case 'NgAction':\r\n              stateMachineMetadata.actions[propName] = propMetadata;\r\n              break;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return stateMachineMetadata;\r\n  }\r\n\r\n  private buildStateMachine(metadata: {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  }) {\r\n    Object.keys(metadata.states).forEach((stateName: string) => {\r\n      this.buildNgState(stateName, metadata.states[stateName]);\r\n    });\r\n\r\n    Object.keys(metadata.renderStates).forEach((renderStateName: string) => {\r\n      this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);\r\n    });\r\n\r\n    Object.keys(metadata.actions).forEach((actionName: string) => {\r\n      this.buildNgAction(actionName, metadata.actions[actionName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 构造状态\r\n   * @param stateName 状态名称\r\n   * @param ngState   状态对象\r\n   */\r\n  private buildNgState(stateName: string, ngState: NgState) {\r\n    this.states = this.states || {};\r\n    this[stateName] = new State(stateName);\r\n    this.states[stateName] = this[stateName];\r\n    if (ngState.initialState) {\r\n      this.initialState = this[stateName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 构造界面状态\r\n   * @param renderStateName 渲染状态名称\r\n   * @param ngRenderState   渲染状态元数据\r\n   */\r\n  private buildNgRenderState(renderStateName: string, ngRenderState: NgRenderState) {\r\n    this.renderStates = this.renderStates || {};\r\n    this[renderStateName] = initialUIState;\r\n    this.renderStates[renderStateName] = this[renderStateName];\r\n\r\n    // 将renderState上指定的render加入到renders中\r\n    this.renders = this.renders || {};\r\n    this.renders[renderStateName] = ngRenderState.render;\r\n  }\r\n\r\n  /**\r\n   * 构造动作\r\n   * @param actionName 动作名称\r\n   * @param ngAction   动作元数据\r\n   */\r\n  private buildNgAction(actionName: string, ngAction: NgAction) {\r\n    this[actionName] = () => {\r\n      effectHandlers.transit.perform(this, ngAction.transitTo, ngAction.precondition);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重新计算所有渲染状态的值\r\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\r\n   */\r\n  render() {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    for (const renderStateName in this.renderStates) {\r\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\r\n        continue;\r\n      }\r\n      const stateRender = this.renders[renderStateName];\r\n      if (!stateRender) {\r\n        continue;\r\n      }\r\n      // 调用render方法，更新renderState\r\n      this.renderStates[renderStateName] = stateRender(this.context);\r\n      this[renderStateName] = this.renderStates[renderStateName];\r\n    }\r\n    this.stateChange.next(this.context.state);\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\nimport { Render } from './types';\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgState\r\n */\r\nexport interface NgState {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  initialState?: boolean;\r\n  /**\r\n   * 状态名称\r\n   */\r\n  name?: string;\r\n}\r\n\r\n/**\r\n * NgStateDecorator\r\n */\r\nexport interface NgStateDecorator {\r\n  (obj?: NgState): any;\r\n  new(obj?: NgState): any;\r\n}\r\n\r\n/**\r\n * NgState\r\n */\r\nexport const NgState: NgStateDecorator =\r\n  makePropDecorator('NgState', (obj?: NgState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgRenderStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport interface NgRenderState {\r\n  render: Render;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport interface NgRenderStateDecorator {\r\n  (obj?: NgRenderState): any;\r\n  new(obj?: NgRenderState): any;\r\n}\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport const NgRenderState: NgRenderStateDecorator =\r\n  makePropDecorator('NgRenderState', (obj: NgRenderState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgActionDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgAction\r\n */\r\nexport interface NgAction {\r\n  precondition?: any[];\r\n  transitTo: string;\r\n}\r\n\r\n/**\r\n* NgActionDecorator\r\n*/\r\nexport interface NgActionDecorator {\r\n  (obj?: NgAction): any;\r\n  new(obj?: NgAction): any;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport const NgAction: NgActionDecorator =\r\n  makePropDecorator('NgAction', (action: NgAction) => action);","import { makePropDecorator } from '../metadata/index';\r\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommand\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 快捷键\r\n */\r\nexport interface Keybinding {\r\n\treadonly ctrlKey: boolean;\r\n\treadonly shiftKey: boolean;\r\n\treadonly altKey: boolean;\r\n\treadonly metaKey?: boolean;\r\n\treadonly key: String;\r\n}\r\n\r\n/**\r\n * 命令装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_COMMAND = 'NgCommand';\r\n\r\n/**\r\n * 命令描述\r\n */\r\nexport interface NgCommand {\r\n\r\n  /**\r\n   * 命令名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 命令参数\r\n   */\r\n  params?: CommandParams;\r\n\r\n  /**\r\n   * 框架id\r\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\r\n   */\r\n  frameId?: string;\r\n\r\n  /**\r\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\r\n   */\r\n  paramDescriptions?: ParamDescriptions;\r\n\r\n  /**\r\n   * 快捷键绑定\r\n   */\r\n  keyBinding?: Keybinding\r\n}\r\n\r\n\r\n/**\r\n * 命令装饰接口\r\n */\r\nexport interface NgCommandDecorator {\r\n  (ngCommand?: NgCommand): any;\r\n  new(ngCommand?: NgCommand): any;\r\n}\r\n\r\n/**\r\n * 命令装饰器工厂\r\n * @type {any}\r\n */\r\nexport const NgCommand: NgCommandDecorator =\r\n  makePropDecorator(NG_COMMAND, (obj: NgCommand) => obj);\r\n","import { Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Command } from '../command/index';\r\nimport { NG_COMMAND, NgCommand, Keybinding } from './decorators';\r\nimport { BindingData, EntityValueChange } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Observable, of, Subject, from, EMPTY } from 'rxjs';\r\nimport { map, concatMap, tap, every, debounceTime, switchMap, takeLast } from 'rxjs/operators';\r\nimport { ExpressionManager, ExpressionResult } from '../expression/index';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { InvokeOnValueChange } from '../binding-data/types';\r\nimport { IDisposable } from '../core/index';\r\n\r\n/**\r\n * ViewModel是界面层访问应用层的入口。\r\n *\r\n * ### 定义ViewModel\r\n *\r\n * 定义ViewModel需要以下几个步骤：\r\n *\r\n * 1、定义的ViewModel需要继承ViewModel基类\r\n * 2、使用NgViewModel关联相关对象，比如：绑定数据（SinmpleDemoBindingData）、表单（SimpleDemoForm）、\r\n *    状态机（SimpleDemoStateMachine）等，但所有这些关联都是可选的，用不到或者自己单独实现时，不指定即可。\r\n * 3、同时我们需要传递一个injector给基类的构造函数，在ViewModel实例化时，会从injector获取NgViewModel声明的各个类型的实例。\r\n *\r\n * 下面我们来定义一个简单的ViewModel，代码如下：\r\n * ```ts\r\n * import { Injector, Injectable } from '@angular/core';\r\n * import { NgViewModel, ViewModel } from '@farris/devkit';\r\n *\r\n * @Injectable()\r\n * @NgViewModel({\r\n *   children: [],\r\n *   binding: SimpleDemoBindingData,\r\n *   form: SimpleDemoForm,\r\n *   stateMachine: SimpleDemoStateMachine,\r\n * })\r\n * class SimpleDemoViewModel extends ViewModel {\r\n *    constructor(injector: Injector) {\r\n *      super(injector);\r\n *    }\r\n *    @NgCommand({\r\n *      name: 'formLoad',\r\n *      params: {\r\n *        dataId: '1'\r\n *      }\r\n *    })\r\n *    public formLoad() {}\r\n * }\r\n * export { SimpleDemoViewModel };\r\n * ```\r\n *\r\n * 通过组件的构造函数，我们将ViewModel注入进组件\r\n * ```ts\r\n * @Component({\r\n *   selector: 'app-simple-demo',\r\n *   templateUrl: './simple-demo.component.html'\r\n * })\r\n * class SimpleDemoComponent implements OnInit {\r\n *\r\n *   public viewModel: SimpleDemoViewModel;\r\n *\r\n *   constructor(viewModel: SimpleDemoViewModel) {\r\n *     this.viewModel = viewModel;\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * ### 组件模板中使用ViewModel\r\n *\r\n * 我们可以在模板中绑定NgViewModel中指定的 BindingData、Form、StateMachine的实例。\r\n * ```html\r\n * * <!--绑定数据-->\r\n * <p>{{viewModel.bindingData.name}}</p>\r\n *\r\n * <!--绑定表单-->\r\n * <form [formGroup]=\"viewModel.form\">\r\n *   <input type=\"text\" formControlName=\"name\">\r\n * </form>\r\n *\r\n * <!--绑定状态机-->\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canAdd\">新增 </button>\r\n * * ```\r\n *\r\n * 我们在模板中绑定绑定viewModel的一个方法作为事件处理，这个方法可以是普通的方法，也可以是用NgCommand注解修饰过的。\r\n * ```html\r\n * <button type=\"button\" (click)=\"viewModel.add()\">新增 </button>\r\n * ```\r\n *\r\n * ### 组合的ViewModle\r\n *\r\n * 当界面比较复杂时，我们对界面按一定的粒度进行拆分，拆分出来的各个组成部分分别对应一个ViewModel，这样就形成了一个ViewModel树。\r\n * 我们在父的ViewModel的NgViewModel注解中通过在children属性中声明它的子ViewModel，将它们关联起来。\r\n * 假设我们有一个左列表右卡片的界面，我们可以为左列表、右卡片分别定义一个ViewModel，然后在页面的ViewModel中，将它们组合起来，\r\n * 代码如下：\r\n * ```ts\r\n * @Injectable()\r\n *  @NgViewModel({\r\n *  children: [LeftListViewModel, RightCardViewModel],\r\n *    binding: NestedDemoBindingData,\r\n * })\r\n * class NestedDemoViewModel extends ViewModel {\r\n *   constructor(injector: Injector) {\r\n *     super(injector);\r\n *   }\r\n * }\r\n * export { NestedDemoViewModel };\r\n * ```\r\n */\r\n@Injectable()\r\nclass ViewModel implements IDisposable, OnDestroy {\r\n\r\n  public name: string;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * 绑定路径\r\n   * 形如：/(根实体)，/edus（从表），/edus/grades（从从表）\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 界面状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 表单定义\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 界面验证信息\r\n   */\r\n  public verifyInformations: any[] = [];\r\n\r\n  public verifycationChanged = new Subject<any[]>();\r\n  /**\r\n   * 表达式服务\r\n   */\r\n  public get expression(): ExpressionManager {\r\n    return this.frameContext.expressionManager;\r\n  }\r\n  /**\r\n   * 表达式结果\r\n   */\r\n  public get expressionResult(): ExpressionResult {\r\n    return this.frameContext.expressionResult;\r\n  }\r\n  /**\r\n   * 快捷键映射\r\n   */\r\n  public keybindingMap: Map<string, Keybinding>;\r\n\r\n  /**\r\n   * 值变化前监听器\r\n   */\r\n  private entityValueChangingListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 值变化后监听器\r\n   */\r\n  private entityValueChangedListeners: Map<string, string>;\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metadatas: { [propName: string]: NgCommand };\r\n\r\n  /**\r\n   * kendogrid option\r\n   */\r\n\r\n  // constructor(metadata?: IContextMetadata) {\r\n  //   if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n  //     this.bindingPath = metadata.bindingTo;\r\n  //   }\r\n  // }\r\n  constructor() { }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  dispose(options?: any) {\r\n    // this.frameContext = null;\r\n    // this.bindingData = null;\r\n    // this.stateMachine = null;\r\n    this.form = null;\r\n    // this.uiState = null;\r\n\r\n    if (this.entityValueChangingListeners) {\r\n      this.entityValueChangingListeners.clear();\r\n    }\r\n    if (this.entityValueChangedListeners) {\r\n      this.entityValueChangedListeners.clear();\r\n    }\r\n    if (this.verifycationChanged) {\r\n      this.verifycationChanged.complete();\r\n      this.verifycationChanged = null;\r\n    }\r\n  }\r\n\r\n  public setMetadata(metadata: IContextMetadata) {\r\n    if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n      this.bindingPath = metadata.bindingTo;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(context: FrameContext) {\r\n    if (!this.name) {\r\n      this.name = context.metadata.viewModelCode || this.constructor.name;\r\n    }\r\n    this.frameContext = context;\r\n    this.bindingData = context.bindingData;\r\n    this.uiState = context.uiState;\r\n    this.form = context.form;\r\n    this.stateMachine = context.stateMachine;\r\n    this.buildCommands(context);\r\n    this.entityValueChangingListeners = new Map<string, string>();\r\n    this.entityValueChangedListeners = new Map<string, string>();\r\n    // 为bindingData赋值值变化监听器\r\n    if (this.bindingData) {\r\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\r\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\r\n          const plainPath = '/' + paths.join('/');\r\n          let command: string;\r\n          if (entityChanged === false) {\r\n            command = this.entityValueChangingListeners[plainPath];\r\n          } else {\r\n            command = this.entityValueChangedListeners[plainPath];\r\n          }\r\n\r\n          if (!!command) {\r\n            const change: EntityValueChange = {\r\n              paths: paths,\r\n              preValue: preValue,\r\n              value: value,\r\n              id: primaryValue,\r\n              changed: entityChanged\r\n            };\r\n            const triggerFlag = 'trigger:';\r\n            const commands = command.split(';').filter(p => p);\r\n            // 过滤出所有值变化前后事件\r\n            const valueChangeCommands = commands.filter(item => !item.startsWith(triggerFlag));\r\n            // 过滤出所有组件通讯\r\n            const triggers = commands.filter(item => item.startsWith(triggerFlag));\r\n            const squence = valueChangeCommands.concat(triggers);\r\n            let valueChangeSuccess = true;\r\n            return from(squence).pipe(\r\n              concatMap(item => {\r\n                if (!valueChangeSuccess && entityChanged === false) {\r\n                  return EMPTY;\r\n                }\r\n                if (item.startsWith(triggerFlag)) {\r\n                  // 值变化前后事件绑定了组件通信\r\n                  const eventName = item.substring(8);\r\n                  this.frameContext.frameComponent.trigger(eventName);\r\n                  valueChangeSuccess = true;\r\n                  return of(true);\r\n                } else {\r\n                  return this[item](change).pipe(\r\n                    tap((result: any) => {\r\n                      valueChangeSuccess = result;\r\n                    })\r\n                  );\r\n                }\r\n\r\n              }),\r\n              every((result: any) => result)\r\n            );\r\n            // return this[command](change).pipe(map(result => {\r\n            //   return result === false ? false : true;\r\n            // }));\r\n          } else {\r\n            return of(true);\r\n          }\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    this.initListeners();\r\n  }\r\n\r\n  /**\r\n   * 绑定命令\r\n   */\r\n  public buildCommands(context: FrameContext) {\r\n    const ngCommands: {\r\n      [commandName: string]: NgCommand\r\n    } = context.metadata.commands || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_COMMAND);\r\n    this.metadatas = ngCommands;\r\n    this.keybindingMap = new Map<string, Keybinding>();\r\n    Object.keys(ngCommands).forEach((propertyName: string) => {\r\n      const ngCommand: NgCommand = ngCommands[propertyName];\r\n      // 注册快捷键\r\n      if (ngCommand.keyBinding) {\r\n        this.keybindingMap.set(propertyName, ngCommand.keyBinding);\r\n      }\r\n      Object.defineProperty(this, propertyName, {\r\n        value: (data: any) => {\r\n          if (context.isDisposed) {\r\n            return EMPTY;\r\n          }\r\n          // 获取命令处理上下文\r\n          let targetContext = context;\r\n          if (ngCommand.frameId) {\r\n            targetContext = context.appContext.getFrameContext(ngCommand.frameId);\r\n          }\r\n          const command: Command = {\r\n            name: ngCommand.name,\r\n            params: ngCommand.params,\r\n            paramDescriptions: ngCommand.paramDescriptions,\r\n            eventParam: data || null\r\n          };\r\n          return targetContext.commandBus.dispatch(command);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 从Form获取监听器\r\n   */\r\n  private initListeners() {\r\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\r\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\r\n    };\r\n\r\n    if (this.form) {\r\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\r\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\r\n      });\r\n\r\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\r\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\r\n      });\r\n    }\r\n  }\r\n\r\n  public bindToParent(parent: ViewModel) {\r\n    if (parent) {\r\n      if (parent.verifycationChanged) {\r\n        parent.verifycationChanged.subscribe(verifyInformations => {\r\n          if (this.verifycationChanged) {\r\n            this.verifycationChanged.next(verifyInformations);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 合并审批及表单表达式并计算结果\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  public transform(expression: string | boolean | Array<any>): any {\r\n    if (Array.isArray(expression)) {\r\n      const wfConf = expression.find(item => item && item.source === 'wf');\r\n      if (wfConf && wfConf.value) {\r\n        return this.transform(wfConf.value);\r\n      } else {\r\n        return this.transform(expression[0]);\r\n      }\r\n    } else {\r\n      if (typeof expression === 'boolean') {\r\n        return expression;\r\n      } else if (typeof expression === 'string') {\r\n        return new Function('ctx', `return ${expression}`).apply(this.frameContext, [this]);\r\n      } else {\r\n        // 表达式result\r\n        return expression;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { ViewModel };\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nclass Context {\r\n\r\n  /**\r\n   * 上下文变量\r\n   */\r\n  params: Map<string, any> = new Map<string, any>();\r\n\r\n  /**\r\n   * 获取变量\r\n   */\r\n  getParam(key: string): any {\r\n    return this.params.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置变量\r\n   */\r\n  setParam(key: string, value: any) {\r\n    this.params.set(key, value);\r\n  }\r\n}\r\n\r\nexport { Context };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:56:02\r\n */\r\n\r\nimport { BindingData } from '../binding-data';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * BindingData管理类\r\n */\r\nclass BindingDataManager implements IDisposable {\r\n\r\n  /**\r\n   * BindingDataMap\r\n   */\r\n  private bindingDataMap: Map<string, BindingData>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.bindingDataMap = new Map<string, BindingData>();\r\n  }\r\n\r\n  /**\r\n   * 获取BindingDataMap\r\n   */\r\n  public getBindingDataMap(): Map<string, BindingData> {\r\n    return this.bindingDataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取BindingData\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getBindingDataByName(name: string): BindingData {\r\n    return this.bindingDataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的BindingData\r\n   * @description 仅在高速模式时注册bindingData\r\n   */\r\n  public regBindingData(name: string, bindingData: BindingData): void {\r\n    this.bindingDataMap.set(name, bindingData);\r\n  }\r\n  public unRegisteBindingData(name: string) {\r\n    this.bindingDataMap.delete(name);\r\n  }\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifBindingDataExits(name: string) {\r\n    const bindingData = this.getBindingDataByName(name);\r\n    return bindingData ? true : false;\r\n  }\r\n  public dispose() {\r\n    this.bindingDataMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BindingDataManager };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 18:06:11\r\n */\r\n\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * Repository管理类\r\n */\r\n@Injectable()\r\nclass RepositoryManager implements IDisposable {\r\n  /**\r\n   * repositoryMap\r\n   */\r\n  private repositoryMap: Map<string, Repository<Entity>>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.repositoryMap = new Map<string, Repository<Entity>>();\r\n  }\r\n\r\n  /**\r\n   * 注册Repository\r\n   */\r\n  public regRepository(name: string, repository: Repository<Entity>): void {\r\n    this.repositoryMap.set(name, repository);\r\n  }\r\n\r\n  public unRegisteRepository(name: string) {\r\n    this.repositoryMap.delete(name);\r\n  }\r\n  /**\r\n   * 获取RepositoryMap\r\n   * @internal\r\n   */\r\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\r\n    return this.repositoryMap;\r\n  }\r\n\r\n  /**\r\n   * 获取Repository数组\r\n   */\r\n  public getRepositories(): Repository<Entity>[] {\r\n    return Array.from(this.repositoryMap.values());\r\n  }\r\n\r\n  /**\r\n   * 根据name获取Repository\r\n   */\r\n  public getRepositoryByName(name: string): Repository<Entity> {\r\n    return this.repositoryMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifRepositoryExits(name: string) {\r\n    const repository = this.getRepositoryByName(name);\r\n    return repository ? true : false;\r\n  }\r\n  public dispose() {\r\n    // this.repositoryMap.forEach((repo: Repository<any>) => {\r\n    //   if (repo) {\r\n    //     repo.entityCollection.reset(false);\r\n    //   }\r\n    // });\r\n    this.repositoryMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { RepositoryManager };\r\n","import { IDisposable } from '../core';\r\nimport { FrameContext } from '../frame';\r\n\r\n/**\r\n * FrameComponent刷新器\r\n */\r\nclass FrameComponentRefresher implements IDisposable {\r\n  private frameComponentMap: Map<string, any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.frameComponentMap = new Map<string, any>();\r\n  }\r\n\r\n  /**\r\n   * 刷新组件\r\n   */\r\n  public refreshComponents() {\r\n    this.frameComponentMap.forEach((component: any, frameId: string) => {\r\n      if (typeof component['onFormLoad'] === 'function') {\r\n        component.onFormLoad();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册组件\r\n   * @param frameId   FrameId\r\n   * @param component Frame组件实例\r\n   */\r\n  public regFrameComponent(frameId: string, component: any) {\r\n    this.frameComponentMap.set(frameId, component);\r\n  }\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameComponentMap.delete(frameId);\r\n  }\r\n  public dispose() {\r\n    this.frameComponentMap.clear();\r\n  }\r\n}\r\n\r\nexport { FrameComponentRefresher };\r\n","import { FrameContext } from '../frame/index';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\n\r\n/**\r\n * 变更检测控制器\r\n */\r\nclass ChangeDetectionController {\r\n\r\n  /**\r\n   * 所有的FrameContext数组\r\n   */\r\n  private get frameContexts(): FrameContext[] {\r\n    return this.frameContextManager.getFrameContexts();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private frameContextManager: FrameContextManager) {\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent重新加入到变更检测树\r\n   * @todo\r\n   * 1、该方法仅供数据源变更产生大量变更时优化性能使用；\r\n   * 2、加setTimeout来保证数据变更流完成之后，再执行变更检测，目前父对象是通过subscribe监听子对象变化，导致产生异步；\r\n   * 3、应该从根本上解决该问题，而不是setTimeout。\r\n   */\r\n  public reattach(): void {\r\n    setTimeout(() => {\r\n      this.frameContexts.forEach((frameContext: FrameContext) => {\r\n        frameContext.frameComponent.reattach();\r\n        frameContext.frameComponent.detectChanges();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent脱离变更检测树\r\n   */\r\n  public detach(): void {\r\n    this.frameContexts.forEach((frameContext: FrameContext) => {\r\n      frameContext.frameComponent.detach();\r\n    });\r\n  }\r\n}\r\n\r\nexport { ChangeDetectionController };\r\n","import { AppContext } from './app_context';\r\n\r\n/**\r\n * The manager for all appContexts.\r\n * @summary\r\n * 1, The generator create unique frameId dynamically for each frameContext in the combination forms.\r\n * 2, Combined form and Host form visit each other by these unique frameIds.\r\n * 3, Now we make these forms has own appContext, they can't visit each other in old way.\r\n * 4, For compatible purpose, we collect all appContexts together and search frameContext in these appContexts by unque frameId.\r\n */\r\nclass AppContextManager {\r\n\r\n  /**\r\n   * AppContext Set\r\n   */\r\n  private appContextSet: Set<AppContext>;\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  constructor() {\r\n    this.appContextSet = new Set<AppContext>();\r\n  }\r\n\r\n  /**\r\n   * Register AppContext\r\n   */\r\n  public registerAppContext(appContext: AppContext): void {\r\n    this.appContextSet.add(appContext);\r\n  }\r\n\r\n  /**\r\n   * Unregister AppContext\r\n   */\r\n  public unregisterAppContext(appContext: AppContext): void {\r\n    this.appContextSet.delete(appContext);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all AppContexts.\r\n   */\r\n  public getAppContexts(): AppContext[] {\r\n    return Array.from(this.appContextSet);\r\n  }\r\n\r\n}\r\n\r\nexport { AppContextManager };\r\n","import { AppContext } from './app_context';\r\n\r\nexport class ComponentManager {\r\n  constructor(private appContext: AppContext) { }\r\n  public get(paths: string[]) {\r\n    if (!Array.isArray(paths) || paths.length < 1) {\r\n      throw new Error('Argument error !');\r\n    }\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    let component: any = componentRefs;\r\n    paths.forEach(path => {\r\n      component = component && component.get(path) || null;\r\n    });\r\n    return component;\r\n  }\r\n  /**\r\n   * 获取指定frame下所有的组件\r\n   * @param frameId \r\n   * @returns \r\n   */\r\n  public getComponentsByFrameId(frameId: string): Map<string, any> | undefined {\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    return componentRefs.get(frameId);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n/**\r\n * 表单Id\r\n */\r\nexport const FORM_ID = new InjectionToken<string>('@farris/devkit FORM_ID');\r\n\r\n","export class DomService {\r\n\r\n  constructor() { }\r\n\r\n  public getElementByBinding(contents: any[], bindingFieldId: string, parentElement): ElementByBindingResult[] {\r\n    const controls: ElementByBindingResult[] = [];\r\n    for (const element of contents) {\r\n      // 优先变量数据集合类组件\r\n      if (element.fields) { // 列表\r\n        const childControls = this.getElementByBinding(element.fields, bindingFieldId, element);\r\n        controls.push(...childControls);\r\n      }\r\n      // 其次遍历容器类组件\r\n      else if (element.contents) { // 容器组件\r\n        const childControls = this.getElementByBinding(element.contents, bindingFieldId, element);\r\n        controls.push(...childControls);\r\n      }\r\n      // 再次遍历集合类字段节点\r\n      else if (element.editor) {\r\n        const childControls = this.getElementByBinding([element.editor], bindingFieldId, element);\r\n        controls.push(...childControls);\r\n      }\r\n      // 最后遍历输入类组件\r\n      else if (element.binding && element.binding.field === bindingFieldId) {\r\n        controls.push({\r\n          element: element,\r\n          parentElement: parentElement\r\n        });\r\n      }\r\n    }\r\n    return controls;\r\n  }\r\n}\r\n\r\ninterface ElementByBindingResult {\r\n  element: any;\r\n  parentElement: any;\r\n}","import { FormDeclaration } from './dom-entity';\r\nimport { Schema } from './schema';\r\n\r\nexport class FormContent {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: {\r\n        module: FormModule,\r\n        options?: FormOptions\r\n    };\r\n}\r\n\r\nexport class FormContentForDB {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: string;\r\n\r\n    constructor(content: FormContent) {\r\n        this.Id = content.Id;\r\n        this.Code = content.Code;\r\n        this.Name = content.Name;\r\n        this.Contents = JSON.stringify(content.Contents);\r\n    }\r\n}\r\n\r\nexport class FormMetadaDataDom {\r\n    module: FormModule;\r\n}\r\n\r\nexport class FormModule {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    caption: string;\r\n    type: string;\r\n    creator: string;\r\n    creationDate: Date;\r\n    updateVersion: string;\r\n    showTitle: boolean;\r\n    boostrap: string;\r\n    schemas: Array<Schema>;\r\n    states: Array<any>;\r\n    contents: Array<any>;\r\n    stateMachines: Array<any>;\r\n    viewmodels: Array<IFormViewModel>;\r\n    components: Array<any>;\r\n    webcmds: Array<any>;\r\n    serviceRefs: Array<any>;\r\n    ctrlLangs: any;\r\n\r\n    // 是否移动审批表单\r\n    isMobileApprove: boolean;\r\n\r\n    // 是否组合表单\r\n    isComposedFrm: boolean;\r\n\r\n    // 表单所在的工程名\r\n    projectName: string;\r\n\r\n    // 外部模块声明\r\n    extraImports: Array<{ name: string, path: string }>;\r\n\r\n    // 外部组件\r\n    externalComponents: Array<any>;\r\n    // 当前组件声明：事件、变量、命令\r\n    declarations: FormDeclaration;\r\n    // 订阅\r\n    subscriptions: Array<any>;\r\n}\r\n\r\n// export class FormDeclaration {\r\n//     events: Array<any>;\r\n//     commands: Array<any>;\r\n//     states: Array<any>;\r\n// }\r\n\r\nexport class FormOptions {\r\n    enableTextArea: boolean;\r\n    enableDragAndDropToModifyLayout: boolean;\r\n}\r\n\r\nexport interface IFormViewModel {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    fields: IFormViewModelField[];\r\n    commands: any[];\r\n    serviceRefs: any[];\r\n    states: IFormViewModelUiState[];\r\n    bindTo: string;\r\n    parent: string;\r\n    pagination: any;\r\n    enableValidation: boolean;\r\n}\r\n\r\nexport interface IFormViewModelField {\r\n    type: string;\r\n    id: string;\r\n    fieldName: string;\r\n    bindingPath: string;\r\n    groupId: string;\r\n    groupName: string;\r\n    valueChanging: string;\r\n    valueChanged: string;\r\n    updateOn: 'change' | 'blur' | 'submit';\r\n}\r\n\r\n\r\nexport interface IStateMachine {\r\n    initialState: string;\r\n    renderState: { [renderStateName: string]: IRenderState };\r\n    state: IState[];\r\n    action: { [actionName: string]: IAction };\r\n}\r\n\r\nexport interface IRenderState {\r\n    name: string;\r\n    condition: IRenderStateCondition[];\r\n    description: string;\r\n}\r\n\r\nexport interface IRenderStateCondition {\r\n    compare: string;\r\n    lBracket: string;\r\n    rBracket: string;\r\n    relation: string;\r\n    source: string;\r\n    target: string;\r\n}\r\n\r\nexport interface IState {\r\n    state: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IAction {\r\n    name: string;\r\n    transitTo: string;\r\n    precondition: any[];\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelCommand {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    params: IFormViewModelCommandParam[];\r\n    handlerName: string;\r\n    cmpId: string;\r\n    shortcut: any;\r\n    extensions: any[]\r\n}\r\n\r\nexport interface IFormViewModelCommandParam {\r\n    name: string;\r\n    showName: string;\r\n    value: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelUiState {\r\n    id: string;\r\n    category: string;\r\n    code: string;\r\n    name: string;\r\n    type: string;\r\n}\r\n\r\n","\r\nimport { IFormViewModel } from './form-metadata';\r\nimport { Schema, SchemaEntity, SchemaEntityField } from './schema';\r\n\r\nexport class SchemaService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * 根据字段标识数组获取指定字段集合\r\n     * @param fieldIds 字段标识数组\r\n     * @param schema 实体结构\r\n     * @param viewModel 视图模型\r\n     * @returns 已Map形式存储的指定字段字典\r\n     */\r\n    public getFieldsByIds(fieldIds: string[], schema: Schema, viewModel: IFormViewModel)\r\n        : Map<string, SchemaEntityField> {\r\n        const specifiedFieldsMap = new Map<string, SchemaEntityField>();\r\n        const entities = schema.entities;\r\n        if (entities && entities.length && viewModel) {\r\n            const entityPath = viewModel.bindTo;\r\n            const fields = this.getEntityFields(entities, entityPath);\r\n            const fieldsMap = this.flattenFields(fields);\r\n            fieldIds.forEach(fieldId => {\r\n                if (fieldsMap.has(fieldId)) {\r\n                    specifiedFieldsMap.set(fieldId, fieldsMap.get(fieldId));\r\n                }\r\n            });\r\n        }\r\n        return specifiedFieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 将字段列表打平为字典结构\r\n     * @param fields 字段属性\r\n     * @param fieldsMap 缺省参数，用来存储字段的Map对象\r\n     * @returns 以Map形式存储的字段字段\r\n     */\r\n    private flattenFields(\r\n        fields: SchemaEntityField[],\r\n        fieldsMap: Map<string, SchemaEntityField> = new Map<string, SchemaEntityField>()\r\n    ): Map<string, SchemaEntityField> {\r\n        for (const field of fields) {\r\n            fieldsMap.set(field.id, field);\r\n            if (field.type && field.type.fields && field.type.fields.length > 0) {\r\n                this.flattenFields(field.type.fields, fieldsMap);\r\n            }\r\n        }\r\n        return fieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 获取表字段列表\r\n     * @param entities 实体对象集合\r\n     * @param entityPath 指定实体路径，根实体路径为'/'\r\n     */\r\n    private getEntityFields(entities: SchemaEntity[], entityPath: string): SchemaEntityField[] {\r\n        if (entities && entities.length) {\r\n            const splitIndex = entityPath.indexOf('/');\r\n            if (splitIndex > -1) {\r\n                entityPath = entityPath.slice(splitIndex + 1, entityPath.length);\r\n            }\r\n            // 遍历所有实体，查找匹配指定路径的实体\r\n            for (const entity of entities) {\r\n                if (entityPath === '' || entityPath === entity.code || entityPath === entity.label) {\r\n                    return entity.type.fields;\r\n                } else {\r\n                    const fields = this.getEntityFields(entity.type.entities, entityPath);\r\n                    if (fields && fields.length) {\r\n                        return fields;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n","\r\nimport { CommandController, CommandHandler, CommandHandlerExtender, ControllerMethod, DynamicCommandHandler } from '../command';\r\nimport { ValidateRule } from '../entity';\r\nimport { NgFormControl, NgValidateForm } from '../form';\r\nimport { DomService, Schema, SchemaEntityField } from '../schema';\r\nimport {\r\n  IFormViewModel, IFormViewModelCommand, IFormViewModelCommandParam, IFormViewModelField,\r\n  IFormViewModelUiState, IRenderState, IStateMachine\r\n} from '../schema/form-metadata';\r\nimport { SchemaService } from '../schema/schema.service';\r\nimport { NgParam } from '../ui-state';\r\nimport { NgCommand } from '../view-model';\r\nimport { IContextMetadata, IContextStateMachineMetadata } from './app_metadata';\r\n\r\nexport class ContextMetadataBuilder {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 构造应用程序上下文元数据\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数\r\n   * @returns 应用程序上下文元数据\r\n   */\r\n  public buildAppContextMetadata(formMetadataContent: any, stateMachineMetadata: IStateMachine): IContextMetadata {\r\n    const module = formMetadataContent.module;\r\n    const uiStates = module.states;\r\n    const appContextMetadata = {\r\n      identify: module.code,\r\n      namespace: '',\r\n      stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),\r\n      uiStates: this.buildUiStateMetadata(uiStates)\r\n    };\r\n    return appContextMetadata;\r\n  }\r\n\r\n\r\n  /**\r\n   * 构造视图上下文元数据\r\n   * @param componentId 组件标识\r\n   * @param viewModel 视图模型元数据\r\n   * @param declarations 外部接口定义\r\n   * @param subscriptions 事件订阅定义\r\n   * @returns 视图上下文元数据\r\n   */\r\n  public buildViewContextMetadata(\r\n    component: any,\r\n    viewModel: IFormViewModel,\r\n    schema: Schema,\r\n    controllers: { [id: string]: CommandController },\r\n    dynamicOptions: any\r\n  ): IContextMetadata {\r\n    const contextMetadata = {\r\n      identify: component.id,\r\n      namespace: '',\r\n      commands: this.buildCommand(viewModel.commands),\r\n      commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),\r\n      commandHandlerExtends: [],\r\n      form: this.buildFormMetadata(viewModel),\r\n      formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component, dynamicOptions),\r\n      subForms: null,\r\n      uiStates: this.buildUiStateMetadata(viewModel.states),\r\n      bindingTo: viewModel.bindTo,\r\n      viewModelCode: viewModel.code\r\n    };\r\n    return contextMetadata;\r\n  }\r\n\r\n  private buildCommand(commandMetadataArray: IFormViewModelCommand[]): { [commandName: string]: NgCommand } {\r\n    const commands = {};\r\n    commandMetadataArray.reduce<{ [commandName: string]: NgCommand }>((previousValue, commandMetadata: IFormViewModelCommand) => {\r\n      const ngCommand: NgCommand = {\r\n        name: commandMetadata.code,\r\n        params: {},\r\n        paramDescriptions: {}\r\n      };\r\n      commandMetadata.params.reduce<NgCommand>((previousCommand, param) => {\r\n        previousCommand.params[param.name] = param.value;\r\n        previousCommand.paramDescriptions[param.name] = { type: 'string' };\r\n        return previousCommand;\r\n      }, ngCommand);\r\n      previousValue[commandMetadata.code] = ngCommand;\r\n      return previousValue;\r\n    }, commands);\r\n    return commands;\r\n  }\r\n\r\n  private buildFormMetadata(viewModel: IFormViewModel): NgValidateForm {\r\n    return {\r\n      formGroupName: viewModel.name,\r\n      enableValidate: viewModel.enableValidation\r\n    };\r\n  }\r\n\r\n  private buildFormControlMetadata(formFields: IFormViewModelField[], viewModel: IFormViewModel, schema: Schema, component: any, dynamicOptions: any)\r\n    : { [controlName: string]: NgFormControl } {\r\n    const formControls: { [controlName: string]: NgFormControl } = {};\r\n    const formFieldIds = formFields.map(formField => formField.id);\r\n    const schemaService = new SchemaService();\r\n    const formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);\r\n    const domService = new DomService();\r\n\r\n    formFields.reduce<{ [controlName: string]: NgFormControl }>((previousValue, field) => {\r\n      const schemaEntityField: SchemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;\r\n      const binding = schemaEntityField ? schemaEntityField.bindingPath : '';\r\n      const parentElement = {};\r\n      // parentElement 作为引用方式 往外传递\r\n      const domElements = domService.getElementByBinding(component.contents, field.id, parentElement);\r\n      const validRules: ValidateRule[] = [];\r\n      let matchedElement;\r\n      let parentMatchedElement;\r\n      if (domElements && domElements.length >= 1) {\r\n        matchedElement = domElements[0].element;\r\n        parentMatchedElement = domElements[0].parentElement;\r\n        const keys = 'maxValue,minValue,required,require';\r\n        Object.keys(matchedElement).forEach(key => {\r\n          if (keys.includes(key)) {\r\n            if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最大值属性转换成validRule\r\n              validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最小值属性转换成validRule\r\n              validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'required' || key === 'require') {\r\n              // 把必填属性转换成validRule\r\n              // 必填表达式可以为状态机\r\n              if (matchedElement[key] === 'true' || matchedElement[key] === true) {\r\n                validRules.push({ type: 'required', constraints: [true] });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      previousValue[field.fieldName] = {\r\n        /** 控件标识 */\r\n        id: field.fieldName, //`${field.fieldName}_${field.id.substr(0, 13).replace('-', '_')}`,\r\n        /** 控件名称 todo: 需要支持多语言 */\r\n        name: this.getTitle(matchedElement, parentMatchedElement, field.fieldName),\r\n        /** 绑定字段路径 */\r\n        binding,\r\n        /** 控件值更新时机 */\r\n        updateOn: field.updateOn,\r\n        /** 控件默认名称 */\r\n        defaultI18nValue: this.getTitle(matchedElement, parentMatchedElement, field.fieldName),\r\n        valueChanging: field.valueChanging,\r\n        valueChanged: field.valueChanged,\r\n        valueConverter: this.generateConverter(schemaEntityField, dynamicOptions),\r\n        /** 验证规则 */\r\n        validRules\r\n      };\r\n\r\n      return previousValue;\r\n    }, formControls);\r\n\r\n    return formControls;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的title值\r\n   * @param matchedElement\r\n   * @param defaultValue\r\n   * @returns\r\n   */\r\n  private getTitle(matchedElement, parentMatchedElement, defaultValue) {\r\n    if (!matchedElement) {\r\n      return defaultValue;\r\n    }\r\n    if (parentMatchedElement.type == 'GridField') {\r\n      return parentMatchedElement.caption || defaultValue;\r\n    }\r\n    return matchedElement.title || defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 构造对应的converter\r\n   * @param field\r\n   * @returns\r\n   */\r\n  private generateConverter(field, dynamicOptions) {\r\n    const valueConverterMap = dynamicOptions[\"valueConverterMap\"];\r\n    if (!valueConverterMap || !field) {\r\n      return;\r\n    }\r\n    if (field.type && (field.type.name == 'Date' || field.type.name == 'DateTime') && !field.converter) {\r\n      field.converter = valueConverterMap[\"Date\"];\r\n    }\r\n    if (field.multiLanguage && !field.converter) {\r\n      field.converter = valueConverterMap[\"MultiLang\"];\r\n    }\r\n\r\n    return field.converter;\r\n  }\r\n  /**\r\n   * 由状态机元数据创建状态机上下文描述\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @returns 状态机上下文描述\r\n   */\r\n  private buildStataMachineMetadata(stateMachineMetadata: IStateMachine): IContextStateMachineMetadata {\r\n    // 声明状态机上下文元数据\r\n    const stateMachine: IContextStateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n\r\n    if (!stateMachineMetadata) {\r\n      return stateMachine;\r\n    }\r\n\r\n    // 由状态机元数据构造NgState\r\n    stateMachineMetadata.state.reduce<IContextStateMachineMetadata>((previousValue, state) => {\r\n      previousValue.states[state.state] = {\r\n        initialState: state.state === stateMachineMetadata.initialState\r\n      };\r\n      return previousValue;\r\n    }, stateMachine);\r\n    // 由状态机元数据构造NgRenderState\r\n    Object.keys(stateMachineMetadata.renderState)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, renderStateName) => {\r\n        const renderStateMetadata = stateMachineMetadata.renderState[renderStateName];\r\n        const renderFunction = this.buildRenderFunction(renderStateMetadata);\r\n        previousValue.renderStates[renderStateName] = {\r\n          render: renderFunction\r\n        };\r\n        // previousValue.renderStates[renderStateName] = {\r\n        //   render: (context: StateMachineContext) => {\r\n        //     return context.parser.parse(renderStateMetadata.condition, this);\r\n        //   }\r\n        // };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 由状态机元数据构造NgAction\r\n    Object.keys(stateMachineMetadata.action)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, actionName) => {\r\n        const actionMetadata = stateMachineMetadata.action[actionName];\r\n        previousValue.actions[actionName] = {\r\n          precondition: actionMetadata.precondition,\r\n          transitTo: actionMetadata.transitTo\r\n        };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 返回状态机元数据\r\n    return stateMachine;\r\n  }\r\n\r\n  private buildUiStateMetadata(states: IFormViewModelUiState[]): { [stateName: string]: NgParam } {\r\n    const uiStates: { [stateName: string]: NgParam } = {};\r\n    states.reduce<{ [stateName: string]: NgParam }>((previousValue, uiState) => {\r\n      previousValue[uiState.code] = {\r\n        stateName: uiState.code\r\n      };\r\n      return previousValue;\r\n    }, uiStates);\r\n    return uiStates;\r\n  }\r\n\r\n  private buildRenderFunction(renderStateMetadata: IRenderState): any {\r\n    if (renderStateMetadata && renderStateMetadata.condition.length) {\r\n      const renderFunctionString = renderStateMetadata.condition.reduce<string>((previousFunctionString, condition) => {\r\n        let conditionTarget = condition.target;\r\n        if (!conditionTarget.startsWith('\\'')) {\r\n          conditionTarget = `'${conditionTarget}`;\r\n        }\r\n        if (!conditionTarget.endsWith('\\'')) {\r\n          conditionTarget = `${conditionTarget}'`;\r\n        }\r\n        let conditionSource = condition.source;\r\n        if (conditionSource.indexOf('\\'') < 0) {\r\n          conditionSource = `'${conditionSource}'`;\r\n        }\r\n        if (conditionSource.indexOf('getUIState') > -1) {\r\n          conditionSource = conditionSource.replace('getUIState', 'context.getUIState');\r\n        }\r\n        if (conditionSource.indexOf('getData') > -1) {\r\n          conditionSource = conditionSource.replace('getData', 'context.getData');\r\n        }\r\n        // tslint:disable-next-line: max-line-length\r\n        let functionString = `${condition.lBracket || ''}context.parse(${conditionSource},'source')${condition.compare}${condition.target}${condition.rBracket || ''}`;\r\n        if (condition.relation) {\r\n          switch (condition.relation.trim().toLocaleLowerCase()) {\r\n            case 'or':\r\n              functionString += '||';\r\n              break;\r\n            case 'and':\r\n              functionString += '&&';\r\n              break;\r\n          }\r\n        }\r\n        return previousFunctionString + functionString;\r\n      }, '');\r\n      if (renderFunctionString) {\r\n        return new Function('context', `return ${renderFunctionString};`);\r\n      }\r\n    }\r\n    return new Function('context', 'return true;');\r\n  }\r\n\r\n  private buildCommandHandlers(commandMetadataArray: IFormViewModelCommand[], controllers: { [id: string]: CommandController })\r\n    : CommandHandler[] {\r\n    const commandHandlers: CommandHandler[] = [];\r\n    commandMetadataArray.reduce<CommandHandler[]>((previousValue: CommandHandler[], commandReference: IFormViewModelCommand) => {\r\n      const commandName = commandReference.code;\r\n      const controllerId = commandReference.cmpId;\r\n      const controller = controllers[controllerId];\r\n      const method = Object.assign({}, controller.methods[commandReference.handlerName]);\r\n      method.params = method.params && method.params.map(param => Object.assign({}, param));\r\n      if (method.params && method.params.length) {\r\n        commandReference.params.reduce<ControllerMethod>((previousMethodValue: ControllerMethod, param: IFormViewModelCommandParam) => {\r\n          const methodParam = previousMethodValue.params.find(value => value.name === param.name);\r\n          if (methodParam) {\r\n            methodParam.expression = param.value;\r\n          }\r\n          return previousMethodValue;\r\n        }, method);\r\n      }\r\n      const commandHandler = new DynamicCommandHandler(commandName, method);\r\n      previousValue.push(commandHandler);\r\n      return previousValue;\r\n    }, commandHandlers);\r\n    return commandHandlers;\r\n  }\r\n}\r\n","import { IDisposable } from '../core';\r\nimport { ViewModel } from '../view-model';\r\n\r\n/**\r\n * ViewModel管理类\r\n */\r\nclass ViewModelManager implements IDisposable {\r\n  /**\r\n   * ViewModelMap\r\n   */\r\n  private viewModelMap: Map<string, ViewModel>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.viewModelMap = new Map<string, ViewModel>();\r\n  }\r\n\r\n  /**\r\n   * 获取ViewModelMap\r\n   */\r\n  public getViewModelMap(): Map<string, ViewModel> {\r\n    return this.viewModelMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ViewModel\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getViewModelByName(name: string): ViewModel {\r\n    return this.viewModelMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的viewModel\r\n   */\r\n  public register(name: string, viewModel: ViewModel): void {\r\n    this.viewModelMap.set(name, viewModel);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const viewModel = this.getViewModelByName(name);\r\n    return viewModel ? true : false;\r\n  }\r\n  public dispose() {\r\n    this.viewModelMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModelManager };\r\n","import { IContextMetadata } from './app_metadata';\r\n\r\n/**\r\n * ContextMetadata管理类\r\n */\r\nclass ContextMetadataManager {\r\n\r\n  /**\r\n   * ContextMetadataMap\r\n   */\r\n  private contextMetadataMap: Map<string, IContextMetadata>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.contextMetadataMap = new Map<string, IContextMetadata>();\r\n  }\r\n\r\n  /**\r\n   * 获取ContextMetadataMap\r\n   */\r\n  public getContextMetadataMap(): Map<string, IContextMetadata> {\r\n    return this.contextMetadataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ContextMetadata\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getContextMetadataByName(name: string): IContextMetadata {\r\n    return this.contextMetadataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的ContextMetadata\r\n   */\r\n  public register(name: string, contextMetadata: IContextMetadata): void {\r\n    this.contextMetadataMap.set(name, contextMetadata);\r\n  }\r\n\r\n  /**\r\n   * ContextMetadata是否已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const contextMetadata = this.getContextMetadataByName(name);\r\n    return contextMetadata ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { ContextMetadataManager };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nexport const FRAME_ID = new InjectionToken<string>('@farris/devkit FRAME_ID');\r\n/**\r\n * 表单命名空间\r\n */\r\nexport const NAMESPACE = new InjectionToken<string>('@farris/devkit NAMESPACE');\r\n\r\n/**\r\n * 组件初始化\r\n */\r\nexport interface onFrameComponentInit {\r\n  onComponentInit(frameContext: FrameContext): void;\r\n}\r\n/**\r\n * 组件初始化时的处理器\r\n */\r\nexport const FRAME_COMPONENT_INIT_HANDLER_TOKEN = new InjectionToken<onFrameComponentInit[]>('@farris/frame_component_init_handler_token');\r\n","/**\r\n * 应用上下文\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\r\n */\r\nimport { Injectable, Injector, Optional, SkipSelf, InjectFlags, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Context } from '../context/index';\r\nimport { BindingData, BindingDataFactory, BindingList, Change } from '../binding-data';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\nimport { FrameComponentRefresher } from './frame_component_refresher';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { ChangeDetectionController } from './change_detection_controller';\r\nimport { AppContextManager } from './app_context_manager';\r\nimport { Subject } from 'rxjs';\r\nimport { ComponentManager } from './component_manager';\r\nimport { UID } from '../misc/uid';\r\nimport { FORM_ID } from './tokens';\r\nimport { ContextMetadataBuilder } from './app_metadata_collector';\r\nimport { FormModule, IFormViewModel, IStateMachine } from '../schema/form-metadata';\r\nimport { CommandController } from '../command';\r\nimport { StateMachine } from '../state-machine';\r\nimport { IContextMetadata } from './app_metadata';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser, VariableParseService\r\n} from '../variable';\r\nimport { ViewModelManager } from './view_model_manager';\r\nimport { Repository } from '../repository';\r\nimport { Entity } from '../entity';\r\nimport { UIState } from '../ui-state';\r\nimport { Schema } from '../schema';\r\nimport { ContextMetadataManager } from './render_context_metadata_manager';\r\nimport { Form } from '../form';\r\nimport { ViewModel } from '../view-model';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { NAMESPACE, FRAME_ID } from '../frame/tokens';\r\nimport { EventBus } from '../event-bus-new';\r\nimport { DEVKIT_RUN_MODE, DestroyOpportunity, IDisposeOptions, RunMode } from '../core';\r\nimport { RunModeService } from '../misc/run_mode_service';\r\nimport { IDisposable } from '../core';\r\n\r\n@Injectable()\r\nclass AppContext extends Context implements OnDestroy, IDisposable {\r\n  public typeName = 'AppContext';\r\n  /**\r\n   * 注入器\r\n   */\r\n  public injector: Injector;\r\n  /**\r\n   * 根应用上下文\r\n   */\r\n  public root: AppContext;\r\n  /**\r\n   * 上级应用上下文\r\n   */\r\n  public parent: AppContext;\r\n  /**\r\n   * 应用上下文管理器\r\n   */\r\n  public appContextManager: AppContextManager;\r\n  /**\r\n   * FrameContext管理器\r\n   */\r\n  public frameContextManager: FrameContextManager;\r\n  /**\r\n   * FrameComponent刷新器\r\n   */\r\n  public frameComponentRefresher: FrameComponentRefresher;\r\n  /**\r\n   * Repository管理器\r\n   */\r\n  public repositoryManager: RepositoryManager;\r\n  /**\r\n   * 绑定数据管理器\r\n   */\r\n  public bindingDataManager: BindingDataManager;\r\n  /**\r\n   * 视图模型管理器\r\n   */\r\n  public viewModelManager: ViewModelManager;\r\n\r\n  public contextMetadataManager: ContextMetadataManager;\r\n  /**\r\n   * 变更检测控制器\r\n   */\r\n  public changeDetectionController: ChangeDetectionController;\r\n  /**\r\n   * 是否已经销毁\r\n   */\r\n  public isFormDestoryed = false;\r\n  /**\r\n   * 应用程序标识\r\n   */\r\n  public applicationId: string = null;\r\n\r\n  private token: string = null;\r\n  /**\r\n   * 是否使用独立的eventBus\r\n   * @memberof AppContext\r\n   */\r\n  public useIsoluteEventBus = false;\r\n\r\n  /**\r\n   * 独立的eventBus实例\r\n   *\r\n   * @type {EventBus}\r\n   * @memberof AppContext\r\n   */\r\n  public isoluteEventBus: EventBus;\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   * @summary\r\n   * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。\r\n   */\r\n  private get frameContexts(): Map<string, any> {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n  /**\r\n   * 消息管道\r\n   */\r\n  public messagePipe: Subject<any>;\r\n  /**\r\n   * 表单Id\r\n   */\r\n  public formId: string;\r\n  /**\r\n   * 组件实例数组\r\n   */\r\n  public componentRefs: Map<string, Map<string, any>>;\r\n  /**\r\n   * 视图组件管理器\r\n   */\r\n  public componentManager: ComponentManager;\r\n  /**\r\n   * 记录confirm弹窗是否打开\r\n   */\r\n  public opened: boolean;\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  // public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  // public filterConditionManager: FilterConditionManager;\r\n\r\n  protected contextMetadataBuilder: ContextMetadataBuilder;\r\n  /**\r\n   * 应用上下文元数据描述\r\n   */\r\n  public metadata: IContextMetadata = {};\r\n  /**\r\n   * 应用程序上下文全局状态\r\n   */\r\n  public uiState: UIState;\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public namespace: string;\r\n\r\n  public router: Router;\r\n\r\n  public formMetadataContent: any;\r\n  /**\r\n   * 控制器运行模式，支持compatible | highSpeed\r\n   */\r\n  public runMode: RunMode;\r\n  /**\r\n   * 编辑态时启用表格头\r\n   */\r\n  public enableGridHeaderWhenEditing = false;\r\n  /**\r\n   * tabId\r\n   */\r\n  public tabId: string;\r\n  public get formModule(): FormModule {\r\n    return this.formMetadataContent ? this.formMetadataContent.module : null;\r\n  }\r\n\r\n  public controllers: { [id: string]: CommandController };\r\n\r\n  /**\r\n   * 应用上下文销毁信号\r\n   */\r\n  public destorySignal: Subject<IDisposeOptions | any>;\r\n  public disposed: boolean = false;\r\n\r\n  private dynamicOptions: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    @Optional() injector: Injector,\r\n    @Optional() appContextManager: AppContextManager,\r\n    @Optional() @SkipSelf() parent: AppContext\r\n  ) {\r\n    super();\r\n    this.destorySignal = new Subject<any>();\r\n    this.injector = injector;\r\n    this.appContextManager = appContextManager;\r\n    this.formId = this.injector && this.injector.get(FORM_ID, null) || null;\r\n    // 默认运行模式为兼容模式\r\n    this.runMode = this.injector && this.injector.get<RunMode>(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;\r\n    RunModeService.setRunMode(this.runMode);\r\n    this.params.set('formId', this.formId);\r\n    this.params.set('appId', this.ApplicationId);\r\n    this.params.set('token', this.Token);\r\n    // 确定父子关系\r\n    if (!parent) {\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n\r\n    this.registerToManager();\r\n\r\n    this.frameContextManager = new FrameContextManager(this);\r\n    this.frameComponentRefresher = new FrameComponentRefresher();\r\n    this.repositoryManager = new RepositoryManager();\r\n    this.bindingDataManager = new BindingDataManager();\r\n    this.changeDetectionController = new ChangeDetectionController(this.frameContextManager);\r\n    this.messagePipe = new Subject<any>();\r\n    this.componentRefs = new Map<string, Map<string, any>>();\r\n    this.componentManager = new ComponentManager(this);\r\n    this.contextMetadataManager = new ContextMetadataManager();\r\n\r\n    this.opened = false;\r\n    // this.sortConditionManager = new SortConditionManager();\r\n    // this.filterConditionManager = new FilterConditionManager();\r\n    this.router = this.injector && this.injector.get(Router);\r\n    this.viewModelManager = new ViewModelManager();\r\n    this.contextMetadataBuilder = new ContextMetadataBuilder();\r\n    this.variableParseService = new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]);\r\n  }\r\n  dispose(options?: IDisposeOptions) {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    this.isFormDestoryed = true;\r\n    this.disposed = true;\r\n    this.router = null;\r\n    this.unregisterFromManager();\r\n    this.componentRefs.clear();\r\n    if (this.stateMachine) {\r\n      this.stateMachine.dispose();\r\n      this.stateMachine = null;\r\n    }\r\n\r\n    this.frameComponentRefresher.dispose();\r\n    this.frameContextManager.dispose();\r\n    this.repositoryManager.dispose();\r\n    this.viewModelManager.dispose();\r\n    this.bindingDataManager.dispose();\r\n    if (this.messagePipe) {\r\n      this.messagePipe.complete();\r\n      this.messagePipe = null;\r\n    }\r\n    this.injector = null;\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next(options);\r\n      this.destorySignal.complete();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dispose({ opportunity: DestroyOpportunity.AppContextDestroy });\r\n  }\r\n\r\n  /**\r\n   * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @param controllers 前端构件元数据\r\n   */\r\n  public initializeByMetadata(\r\n    formMetadataContent: any,\r\n    stateMachineMetadata: IStateMachine,\r\n    controllers: { [id: string]: CommandController },\r\n    options: {\r\n      valueConverterMap?: any\r\n    }\r\n  ) {\r\n    this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);\r\n    if (!this.stateMachine) {\r\n      // 避免由于组合表单，获取到父级状态机实例的问题\r\n      // this.stateMachine = this.injector.get(StateMachine, new StateMachine());\r\n      this.stateMachine = new StateMachine();\r\n    }\r\n    this.formMetadataContent = formMetadataContent;\r\n    this.controllers = controllers;\r\n    this.dynamicOptions = options;\r\n  }\r\n\r\n  /**\r\n   * Register current AppContext instance to AppContextManager\r\n   */\r\n  public registerToManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.registerAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * Unregister current AppContext instance from AppContextManager\r\n   */\r\n  public unregisterFromManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.unregisterAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: any): void {\r\n    const repository = frameContext.repository;\r\n    const repositoryName = repository.name;\r\n\r\n    // Repository\r\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\r\n      this.repositoryManager.regRepository(repositoryName, repository);\r\n    }\r\n\r\n    // BindingData\r\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\r\n      let bindingData = null;\r\n      // 仅高速模式下使用bindingDataManager\r\n      if (this.runMode === RunMode.highSpeed) {\r\n        bindingData = BindingDataFactory.createFromRepository(repository, '/');\r\n        this.bindingDataManager.regBindingData(repositoryName, bindingData);\r\n      }\r\n    }\r\n\r\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\r\n    this.frameContextManager.regFrameContext(frameContext);\r\n  }\r\n\r\n  public regContextMetadata(componentId: string, contextMetadata: IContextMetadata) {\r\n    if (!this.contextMetadataManager.exsit(componentId)) {\r\n      this.contextMetadataManager.register(componentId, contextMetadata);\r\n    }\r\n  }\r\n  /**\r\n   * 获取整个表单的AppContext\r\n   */\r\n  public getFormAppContext() {\r\n    return this;\r\n  }\r\n  /**\r\n   * 销毁表单\r\n   * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制\r\n   */\r\n  public destory() {\r\n    this.dispose();\r\n  }\r\n  public get isDestoryed() {\r\n    return this.isFormDestoryed;\r\n  }\r\n  /**\r\n   * 应用id\r\n   */\r\n  public get ApplicationId() {\r\n    if (!!this.applicationId) {\r\n      return this.applicationId;\r\n    }\r\n    this.applicationId = UID.create();\r\n    return this.applicationId;\r\n  }\r\n  public set ApplicationId(appId: string) {\r\n    this.applicationId = appId;\r\n  }\r\n  public get Token() {\r\n    if (!!this.token) {\r\n      return this.token;\r\n    }\r\n    this.token = UID.create();\r\n    return this.token;\r\n  }\r\n  public set Token(token: string) {\r\n    this.token = token;\r\n  }\r\n  // #region 弃用的老方法\r\n\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public registerCommandHandler(frameId: string, component: any) {\r\n    this.frameComponentRefresher.regFrameComponent(frameId, component);\r\n  }\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public refresh() {\r\n    this.frameComponentRefresher.refreshComponents();\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。\r\n   * @deprecated\r\n   */\r\n  public getFrameContext(frameId: string): any {\r\n    return this.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n\r\n  public getContextById(identify: string): any {\r\n    const context = this.frameContextManager.getFrameContextById(identify);\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   */\r\n  public getAllFrameContexts() {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n\r\n  /**\r\n   * 处理行变更\r\n   */\r\n  public handleSelectChange(change: Change, srcFrameContext: any) {\r\n    const force = change.force || false;\r\n    this.frameContexts.forEach((targetFrameContext) => {\r\n      // 相同的FrameCotnext或者Repository不一致的情况下，不同步\r\n      if (targetFrameContext === srcFrameContext\r\n        || targetFrameContext.repository !== srcFrameContext.repository) {\r\n        return;\r\n      }\r\n\r\n      const bindingData = targetFrameContext.bindingData;\r\n      const bindingList: BindingList = bindingData.getValue(change.path);\r\n      const currentId = change.value['id'];\r\n      if (bindingList && bindingList.currentId !== currentId || force) {\r\n\r\n        // 设置当前行，但不对外广播\r\n        bindingList.setCurrentId(currentId, true, false, force);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  public buildRenderViewContext(componentId: string) {\r\n\r\n    // 提取视图模型集合\r\n    const viewModels = this.formModule.viewmodels;\r\n    // 提取组件描述集合\r\n    const viewComponents = this.formModule.components;\r\n    // 提取schema节点\r\n    const schema = this.formModule.schemas[0];\r\n    // 查找匹配指定标识的组件节点\r\n    const matchedComponent = viewComponents.find(component => component.id === componentId);\r\n    // 匹配指定组件的视图模型节点\r\n    const matchedViewModel = viewModels.find(viewModel => matchedComponent.viewModel === viewModel.id);\r\n    // 查找匹配视图模型的父节点\r\n    const parentViewModel = viewModels.find(viewModel => viewModel.id === matchedViewModel.parent);\r\n    let parentComponentId = '';\r\n    // 如果匹配上上级视图模型，提上级视图标识\r\n    if (parentViewModel) {\r\n      const parentComponent = viewComponents.find(component => component.viewModel === parentViewModel.id);\r\n      if (parentComponent) {\r\n        parentComponentId = parentComponent.id;\r\n      }\r\n    }\r\n    // 如果存在上级组件，提取器上下文对象。\r\n    // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;\r\n    // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);\r\n    this.buildRenderViewContextRecursively(matchedViewModel, schema);\r\n  }\r\n\r\n  private buildRenderViewContextRecursively(viewModel: IFormViewModel, schema: Schema) {\r\n    const controllers = this.controllers;\r\n    const viewComponents = this.formModule.components;\r\n    const matchedComponent = viewComponents.find(component => component.viewModel === viewModel.id);\r\n    const contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers, this.dynamicOptions);\r\n    // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);\r\n    // const commandHandlerExtends: CommandHandlerExtender[] = [];\r\n    // const viewContext = new ViewComponentContext();\r\n    //   contextMetadata,\r\n    //   this,\r\n    //   parent,\r\n    //   this.injector\r\n    // );\r\n    // this.regFrameContext(viewContext);\r\n    // viewContext.init();\r\n\r\n    const contextMetadataId = (this.namespace ? (this.namespace + '_') : '') + matchedComponent.id;\r\n    contextMetadata.namespace = this.namespace || '';\r\n    this.regContextMetadata(contextMetadataId, contextMetadata);\r\n\r\n    const viewModels = this.formModule.viewmodels;\r\n    const subViewModels = viewModels.filter(subViewModel => subViewModel.parent === viewModel.id);\r\n    if (subViewModels && subViewModels.length) {\r\n      subViewModels.forEach(subViewModel => {\r\n        this.buildRenderViewContextRecursively(subViewModel, schema);\r\n      });\r\n    }\r\n  }\r\n\r\n  public getComponentProviders(componentId: string): any[] {\r\n    const contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);\r\n    const bindingData = new BindingData();\r\n    const form = new Form();\r\n    const namespace = contextMetadata.namespace;\r\n    const repository = this.repository || this.injector.get(Repository, null);\r\n    const stateMachine = this.stateMachine;\r\n    const uiState = new UIState();\r\n    const viewModel = new ViewModel();\r\n    viewModel.setMetadata(contextMetadata);\r\n    return [\r\n      { provide: FRAME_ID, useValue: componentId },\r\n      { provide: NAMESPACE, useValue: namespace },\r\n      { provide: FrameContext, useClass: FrameContext },\r\n      { provide: AppContext, useValue: this },\r\n      { provide: BindingData, useValue: bindingData },\r\n      { provide: Form, useValue: form },\r\n      { provide: Repository, useValue: repository },\r\n      { provide: StateMachine, useValue: stateMachine },\r\n      { provide: UIState, useValue: uiState },\r\n      { provide: ViewModel, useValue: viewModel },\r\n      {\r\n        provide: VariableParseService, useValue: new VariableParseService([\r\n          new FrameIdVariableParser(),\r\n          new DataVariableParser(),\r\n          new UIStateVariableParser(),\r\n          new StateMachineVariableParser(),\r\n          new CommandVariableParser()\r\n        ])\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport { AppContext };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-30 17:11:37\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:19:01\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { IDisposable, RunMode } from '../core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { AppContext } from './app_context';\r\n\r\n/**\r\n * FrameContext管理类\r\n */\r\n@Injectable()\r\nclass FrameContextManager implements IDisposable {\r\n\r\n  /**\r\n   * FrameContext字典(兼容老表单)\r\n   */\r\n  private frameContextMap: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * FrameContext集合\r\n   */\r\n  private frameContextSet: Set<FrameContext>;\r\n\r\n  /**\r\n   * AppContext\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(appContext: AppContext) {\r\n    this.frameContextMap = new Map<string, FrameContext>();\r\n    this.frameContextSet = new Set<FrameContext>();\r\n    this.appContext = appContext;\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n\r\n    // 如果存在，先删除\r\n    if (this.frameContextMap.has(frameId) === true) {\r\n      const existedFrameContext = this.frameContextMap.get(frameId);\r\n      this.frameContextMap.delete(frameId);\r\n      this.frameContextSet.delete(existedFrameContext);\r\n    }\r\n    frameContext.index = this.frameContextSet.size;\r\n    this.frameContextMap.set(frameId, frameContext);\r\n    this.frameContextSet.add(frameContext);\r\n  }\r\n\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameContextMap.delete(frameId);\r\n    this.frameContextSet.delete(frameContext);\r\n    // 仅在高速模式下才会在bindingDataManager中注册绑定数据实例\r\n    if (this.appContext.runMode === RunMode.highSpeed) {\r\n      const namespace = frameContext.namespace;\r\n      const repositoryName = frameContext.repository && frameContext.repository.name;\r\n      // 获取ns相同的framecontext，如果已经没有组件上下文了需要销毁bindingData\r\n      const frameContexts = this.getFrameContextsByNamespace(namespace);\r\n      if (!frameContexts || frameContexts.length < 1) {\r\n        this.appContext.bindingDataManager.unRegisteBindingData(repositoryName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取FrameContextMap\r\n   */\r\n  public getFrameContextMap() {\r\n    return this.frameContextMap;\r\n  }\r\n\r\n  /**\r\n   * 获取全部FrameContext\r\n   */\r\n  public getFrameContexts(): FrameContext[] {\r\n    return Array.from(this.frameContextSet);\r\n  }\r\n  /**\r\n   * 获取组合表单某个表单的所有frameContext\r\n   * @param namespace 命名空间\r\n   */\r\n  public getFrameContextsByNamespace(namespace: string) {\r\n    return Array.from(this.frameContextSet).filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace);\r\n  }\r\n  /**\r\n   * 根据id获取FrameContext\r\n   */\r\n  public getFrameContextById(frameId: string): FrameContext {\r\n    const targetFrameContext = this.frameContextMap.get(frameId);\r\n    if (targetFrameContext) {\r\n      return targetFrameContext;\r\n    }\r\n    return this.getFrameContextFromAllAppContexts(frameId);\r\n  }\r\n\r\n  /**\r\n   * Get the root FrameContext instance\r\n   * @return Return the FrameContext instance whose parent is null, and undefined otherwise.\r\n   */\r\n  public getRootFrameContext(): FrameContext {\r\n    const frameContexts = this.getFrameContexts();\r\n    const rootFrameContext = frameContexts.find((frameContext: FrameContext) => {\r\n      return frameContext.parent === null;\r\n    });\r\n    return rootFrameContext;\r\n  }\r\n  public dispose() {\r\n    this.frameContextMap.clear();\r\n    this.frameContextSet.clear();\r\n  }\r\n  /**\r\n   * 遍历所有的AppContext查找指定的\r\n   * @summary\r\n   * 1、老表单中所有的frameId均不重复；\r\n   * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；\r\n   * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。\r\n   */\r\n  private getFrameContextFromAllAppContexts(frameId: string): FrameContext {\r\n    if (!this.appContext.appContextManager) {\r\n      return;\r\n    }\r\n    let targetFrameContext: FrameContext;\r\n    const appContexts = this.appContext.appContextManager.getAppContexts();\r\n    appContexts.some((appContext: AppContext) => {\r\n      const frameContextMap = appContext.frameContextManager.getFrameContextMap();\r\n      if (frameContextMap.has(frameId) === true) {\r\n        targetFrameContext = frameContextMap.get(frameId);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return targetFrameContext;\r\n  }\r\n}\r\n\r\nexport { FrameContextManager };\r\n","/**\r\n * 应用（表单）上下文\r\n * ----------------------------------------\r\n * @todo\r\n * 1、AppContext与其他组成部分之间应该使用依赖注入；\r\n * 2、各个Manager之间的依赖应该使用依赖注入处理；\r\n * 3、由于目前的修改原则是不引起大量的重新编译，只能暂时通过new来实现。\r\n * ----------------------------------------\r\n */\r\n\r\nexport * from './binding_data_manager';\r\nexport * from './repository_mananger';\r\nexport * from './frame_contex_manager';\r\nexport * from './frame_component_refresher';\r\nexport * from './app_context';\r\nexport * from './app_context_manager';\r\n// export * from './render_app_context';\r\nexport * from './app_metadata';\r\nexport * from './view_model_manager';\r\nexport * from './tokens';\r\n","import { IEmitable } from './types';\r\nimport { Type } from '@angular/core';\r\n\r\nexport class EventBusProxy {\r\n\r\n  constructor(private eventBus: IEmitable, private hostType: Type<any>, private eventTokenValueProvider: () => any) {\r\n  }\r\n\r\n  post(eventName: string, data: any) {\r\n    this.eventBus.post(this.hostType, this.eventTokenValueProvider(), eventName, data);\r\n  }\r\n\r\n  // on(eventName: string, data: any, handler: Function) {\r\n  //   this.eventBus.on(null, this.eventTokenValueProvider(), eventName, (data) => handler(data), this);\r\n  // }\r\n}\r\n\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\nexport const NG_DECLARATION = 'NgDeclaration';\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件描述\r\n */\r\nexport interface NgDeclaration {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 事件参数\r\n     */\r\n    params: any;\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    type ?: EventTypeEnum;\r\n}\r\n\r\n// /**\r\n//  * 参数\r\n//  */\r\n// export interface Params {\r\n//     [key: string]: any;\r\n// }\r\n\r\n/**\r\n * NgDeclarationDecorator\r\n * 公开事件装饰器接口\r\n */\r\nexport interface NgDeclarationDecorator {\r\n    (obj?: NgDeclaration): any;\r\n    new(obj?: NgDeclaration): any;\r\n}\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件属性装饰器工厂\r\n */\r\nexport function NgDeclaration(options: NgDeclaration) {\r\n    const decoratorFactory = makePropDecorator(NG_DECLARATION, (obj: NgDeclaration) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n","export enum EventTypeEnum {\r\n    COMPONENT,\r\n    ROUTE\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame';\r\nimport { NG_DECLARATION, NgDeclaration } from './declaration_decorator';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\n@Injectable()\r\nclass Declaration {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   *  依据定义列表进行初始化\r\n   * @param frameComponent 表单component实例\r\n   * @param ngDeclarations 事件定义列表信息\r\n   */\r\n  public initWithDeclarations(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }): void {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   * 基于事件元数据构建事件\r\n   * 调整访问级别 便于解析表单进行初始化动作\r\n   * @param context 框架上下文\r\n   */\r\n  public bindDeclaration(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();\r\n    if (!ngPublicEventProps) {\r\n      return;\r\n    }\r\n\r\n    Object.keys(ngPublicEventProps).forEach((propertyName: string) => {\r\n      const ngExportEvent: NgDeclaration = ngPublicEventProps[propertyName];\r\n      Object.defineProperty(this, propertyName, {\r\n        value: (params?: any) => {\r\n          // 获取命令处理上下文\r\n          const targetContext: FrameContext = context;\r\n          // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）\r\n          // if (ngExportEvent.frameId) {\r\n          //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);\r\n          // }\r\n          const root = targetContext.root;\r\n          const emitter = ngExportEvent.token;\r\n          const tokenValue = ngExportEvent.token;\r\n          const eventName = ngExportEvent.name;\r\n          let eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));\r\n          const eventType = ngExportEvent.type;\r\n          const eventBus = targetContext.eventBus || root.eventBus;\r\n          if (!eventBus) {\r\n            return;\r\n          }\r\n          const injector = targetContext.injector || root.injector;\r\n          const variableParseService = injector.get<VariableParseService>(VariableParseService);\r\n\r\n          // 执行参数解析\r\n          setTimeout(() => {\r\n            eventArgs = variableParseService.parse(eventArgs, targetContext, params);\r\n            const eventSender = targetContext.frameComponent;\r\n            let currentContext = targetContext;\r\n            const eventId = new Date().valueOf();\r\n            if (eventType && eventType === EventTypeEnum.ROUTE) {\r\n              // 事件依次向上冒泡\r\n              while (currentContext) {\r\n                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);\r\n                // currentContext = currentContext.parent;\r\n                currentContext = this.getParentContext(currentContext);\r\n              }\r\n            } else {\r\n              eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);\r\n            }\r\n          }, 0);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取事件定义列表\r\n   * @returns  事件定义\r\n   */\r\n  public getNgPublicEvent() {\r\n    return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);\r\n  }\r\n\r\n  /**\r\n   * 获取父Context\r\n   * @param context 当前上下文\r\n   */\r\n  private getParentContext(context: FrameContext): FrameContext {\r\n\r\n    // 首先查找直接上级FrameContext\r\n    if (context.parent) {\r\n      return context.parent;\r\n    }\r\n\r\n    // 到了AppContext边界，返回上级AppContext的根FrameContext\r\n    const parentAppContext = context.appContext.parent;\r\n    if (parentAppContext) {\r\n      return parentAppContext.frameContextManager.getRootFrameContext();\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { Declaration };\r\n","import { makePropDecorator } from '../../metadata/index';\r\n\r\nexport const NG_SUBSCRIPTION = 'NgSubscription';\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅描述\r\n */\r\nexport interface NgSubscription {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 待订阅事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 参数映射\r\n     */\r\n    paramMapCollection?: ParamMap[];\r\n}\r\n\r\nexport class ParamMap {\r\n    from: string;\r\n    frameId: string;\r\n    to: string;\r\n}\r\n\r\n/**\r\n * NgSubscriptionDecorator\r\n * 事件订阅装饰器接口\r\n */\r\nexport interface NgSubscriptionDecorator {\r\n    (obj?: NgSubscription): any;\r\n    new(obj?: NgSubscription): any;\r\n}\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅属性装饰器工厂\r\n */\r\nexport function NgSubscription(options: NgSubscription) {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n\r\nexport function getNgSubscriptionDecoratorFactory() {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame/index';\r\nimport { UIState } from '../../ui-state/index';\r\nimport { NG_SUBSCRIPTION, NgSubscription, ParamMap } from './subscription_decorator';\r\nimport { IDisposable } from '../../core/index';\r\n\r\n@Injectable()\r\nclass Subscription {\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, null);\r\n  }\r\n\r\n\r\n  /**\r\n   *  根据订阅列表进行初始化\r\n   * @param frameComponent \r\n   * @param ngEvents 订阅列表\r\n   * @returns eventPipes\r\n   */\r\n  public initWithSubscriptions(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, ngEvents);\r\n  }\r\n\r\n  /**\r\n   * 更改成为public形式 目的为了解析表单可以进行重新绑定\r\n   * @param frameComponent \r\n   * @param ngEvents \r\n   * @returns \r\n   */\r\n  public bindSubscription(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngEventHandlerProps = ngEvents ? ngEvents : this.getNgEvents(frameComponent);\r\n    if (!ngEventHandlerProps) {\r\n      return;\r\n    }\r\n\r\n    const eventPipes: IDisposable[] = [];\r\n    Object.keys(ngEventHandlerProps).forEach((propertyName: string) => {\r\n      const ngImportEvent: NgSubscription = ngEventHandlerProps[propertyName];\r\n\r\n      // 获取待订阅方法详情，尝试执行订阅\r\n      const targetContext = context;\r\n\r\n      const receiver = frameComponent;\r\n      const emitter = ngImportEvent.token;\r\n      const tokenValue = ngImportEvent.token;\r\n      const eventName = ngImportEvent.name;\r\n\r\n      const paramMapCollection = ngImportEvent.paramMapCollection;\r\n      const eventPipe = targetContext.eventBus.on(emitter, tokenValue, eventName, receiver,\r\n        (eventArgs) => {\r\n          this.subscriptionHandler(eventArgs, paramMapCollection, targetContext);\r\n\r\n          const eventHandler: Function = frameComponent[eventName];\r\n          if (!eventHandler) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            eventHandler(receiver, eventArgs);\r\n          } catch {\r\n            throw new Error('Error invoking method ' + eventName);\r\n          }\r\n        }\r\n      );\r\n\r\n      eventPipes.push(eventPipe);\r\n    });\r\n\r\n    return eventPipes;\r\n  }\r\n\r\n  /**\r\n   * 获取组件订阅列表\r\n   * @param frameComponent 表单component\r\n   * @returns 组件订阅列表信息\r\n   */\r\n  public getNgEvents(frameComponent: FrameComponent) {\r\n    return MetadataUtil.getPropsMetadatasByName(frameComponent.constructor, NG_SUBSCRIPTION);\r\n  }\r\n\r\n  private subscriptionHandler(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n\r\n    if (!param || !paramMapCollection || paramMapCollection.length <= 0 || !currentFrameContext) {\r\n      return;\r\n    }\r\n\r\n    this.paramMap2UiState(param, paramMapCollection, currentFrameContext);\r\n  }\r\n\r\n  /**\r\n   * 设置paramMap后，将param映射到UISTATE上\r\n   */\r\n  private paramMap2UiState(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n    for (let i = 0; i < paramMapCollection.length; i++) {\r\n      const from = paramMapCollection[i].from;\r\n      const frameId = paramMapCollection[i].frameId;\r\n      const to = paramMapCollection[i].to;\r\n\r\n      if (!from || !frameId || !to) {\r\n        continue;\r\n      }\r\n      const destContext: FrameContext = this.getFrameContext(frameId, currentFrameContext);\r\n      if (destContext == null) {\r\n        continue;\r\n      }\r\n      this.setUiStateProperty(to, param[from], destContext.uiState);\r\n      // this.setUiStateProperty(to, param[from], currentFrameContext.uiState);\r\n    }\r\n  }\r\n\r\n  private getFrameContext(targetFrameContextId: string, currentContext: FrameContext): FrameContext {\r\n    let destContext: FrameContext = null;\r\n    try {\r\n      destContext = currentContext.appContext.getFrameContext(targetFrameContextId);\r\n    } catch {\r\n      throw new Error('Error in Getting FrameContext');\r\n    }\r\n    return destContext;\r\n  }\r\n\r\n  private setUiStateProperty(propertyName: string, propertyValue: string, uiState: UIState) {\r\n    try {\r\n      uiState.setPropertyValue(propertyName, propertyValue);\r\n    } catch {\r\n      throw new Error(\"Error in Setting Property Value of the current UISTATE\" + uiState);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { Subscription };\r\n","export enum EventPipeType {\r\n    Compile,\r\n    Parsing\r\n}","import { Subject, Subscription } from 'rxjs';\r\nimport { IDisposable } from '../core/index';\r\nimport { EventTypeEnum } from '../event-mechanism';\r\nimport { EventPipeType } from './event-pipe-type';\r\n\r\nexport class EventPipe implements IDisposable {\r\n  private lastEventId = -1;\r\n  /**\r\n   * 事件对象\r\n   */\r\n  private eventSubject: Subject<any>;\r\n\r\n  /**\r\n   * 订阅对象Map\r\n   * key=订阅所在的FrameComponent\r\n   * value：订阅evetnSubject产生的Subscription对象（rxjs的）\r\n   */\r\n  private subscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * \r\n   */\r\n  private onceSubscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * EventPipe类型，编译类型表单检查是否在同一上下文中，解析类型表单不判断\r\n   */\r\n  public eventPipeType = EventPipeType.Compile; \r\n  public get subscriptions(): Map<object, Subscription> {\r\n    return this.subscriptionMap;\r\n  }\r\n  constructor(\r\n    public name: string,\r\n    public tokenValue: string,\r\n    public emitter: string,\r\n    private parentEventPipeList: Array<EventPipe>\r\n  ) {\r\n    this.eventSubject = new Subject<any>();\r\n    this.subscriptionMap = new Map<object, Subscription>();\r\n    this.onceSubscriptionMap = new Map<object, Subscription>();\r\n    if (this.parentEventPipeList) {\r\n      this.parentEventPipeList.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送事件\r\n   */\r\n  post(args: any, sender?: any, eventType?: any, eventId?: number) {\r\n    const eventData = {\r\n      args: args,\r\n      sender: sender,\r\n      eventType,\r\n      eventId\r\n    };\r\n    this.eventSubject.next(eventData);\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  subscribe(eventHandler: (value: any) => void, receiver: object): IDisposable {\r\n\r\n    // 对于弹窗，caller是弹窗中的组件，每次caller不同，但还是会重复注册。\r\n    // 重复订阅检测\r\n    const subscriptionInMap = this.subscriptionMap.get(receiver);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(receiver);\r\n    }\r\n\r\n    const subscription = this.eventSubject.subscribe((eventData: any) => {\r\n      const args = eventData.args;\r\n      const sender = eventData.sender;\r\n      const eventType = eventData.eventType || null;\r\n      const eventId = eventData.eventId || 0;\r\n      if (this.lastEventId >= eventId) {\r\n        return;\r\n      }\r\n      this.lastEventId = eventId;\r\n      // 判断sender和receiver的关系，如果在同一个AppContext或者在在一棵树上，则处理\r\n      // 该判断主要解决SPA模式下，一个页面被打开多次的场景。\r\n      if (!(eventType === EventTypeEnum.ROUTE)) {\r\n        if (this.isInSampeScope(sender, receiver) === false) {\r\n          return;\r\n        }\r\n      }\r\n      eventHandler.call(receiver, args);\r\n    });\r\n\r\n    this.subscriptionMap.set(\r\n      receiver,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  subscribeOnce(eventHandler: (value: any) => void, caller: object): IDisposable {\r\n    const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));\r\n    this.onceSubscriptionMap.set(\r\n      caller,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  unSubscribe(subscriber: object) {\r\n    let subscription = this.subscriptionMap.get(subscriber);\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      subscription = null;\r\n      this.subscriptionMap.delete(subscriber);\r\n    } else {\r\n      subscription = this.onceSubscriptionMap.get(subscriber);\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n        subscription = null;\r\n        this.onceSubscriptionMap.delete(subscriber);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 注销使用once方法注册的订阅。\r\n  unSubscribeForOnce() {\r\n    for (const subscriber of Array.from(this.onceSubscriptionMap.keys())) {\r\n      this.unSubscribe(subscriber);\r\n    }\r\n  }\r\n\r\n  matchEmitterToken(emitter: string, tokenValue: string): boolean {\r\n    if (this.emitter && emitter && this.emitter !== emitter) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  examByTargetToken(target: string, tokenValue: string): boolean {\r\n    if (this.emitter !== target) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  dispose(subscriber: object): void {\r\n    this.unSubscribe(subscriber);\r\n    if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {\r\n      const location = this.parentEventPipeList.findIndex(item => item === this);\r\n      if (location !== -1) {\r\n        this.parentEventPipeList.splice(location, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据caller进行注销\r\n   */\r\n  disposeByCaller(caller: any) {\r\n    const subscriptionInMap = this.subscriptionMap.get(caller);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(caller);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否在同一个上下文中\r\n   * @todo\r\n   * 1、强识别了sender和receiver的结构来判断，不合理；\r\n   * 2、应该声明一个接口来约束结构。\r\n   */\r\n  private isInSampeScope(sender: any, receiver: any): boolean {\r\n    // 用来区分编译类型的表单，还是解析类型的表单\r\n    if (this.eventPipeType === EventPipeType.Parsing) {\r\n      return true;\r\n    }\r\n\r\n    // 兼容老代码，sender不存在时，不进行检测\r\n    if (!sender) {\r\n      return true;\r\n    }\r\n\r\n    // 异常处理场景\r\n    if (sender === receiver) {\r\n      return true;\r\n    }\r\n\r\n    // 判断是否是FrameContext\r\n    if (!sender.context || !sender.context.appContext ||\r\n      !receiver.context || !receiver.context.appContext) {\r\n      return false;\r\n    }\r\n\r\n    const senderAppContext = sender.context.appContext;\r\n    const receiverAppContext = receiver.context.appContext;\r\n\r\n    // 情况1：现状\r\n    // 对于老表单，在模块上注入了一个AppContext；\r\n    // 组合表单中主表单的root-component（被组合的表单的root-componetn上没有注入）上注入了AppContext\r\n    // SPA模式下，如法通过Root AppContext区分，是不是同一个菜单内的事件；\r\n    // 只能判断根组件上的AppContext来判断\r\n    // 判断根AppContext是否一致\r\n    if (senderAppContext === receiverAppContext) {\r\n      return true;\r\n    }\r\n\r\n    // 情况2：注入改造后\r\n    // 如果以后注入关系改造了，模块上的AppContext移除掉\r\n    // 组合表单中每个root-component都拥有一个AppContext;\r\n    // 组合表单中主表单的root-component的AppContext为Root AppContext\r\n    // if (senderAppContext.root === receiverAppContext.root) {\r\n    //   return true;\r\n    // }\r\n\r\n    // 情况3：注入改造后老表单兼容\r\n    // 如果以后注入关系改造了，但产品部没有重新编译;\r\n    // 和情况2类似，不同的是模块上还遗留了一个AppContext；\r\n    // 此时Root Appcontext还是模块上的，如何来判断？\r\n    // 1、考虑通过sender的injector一直网上找，找到模块之前的那个组件injector，从其中拿AppContext来判断；\r\n    // 2、找一个全部重新编译的时机再改造。\r\n\r\n    if ((senderAppContext.useIsoluteEventBus && senderAppContext.isoluteEventBus) ||\r\n      (receiverAppContext.useIsoluteEventBus && receiverAppContext.isoluteEventBus)) {\r\n      // 如果存在独立加载js  那么\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EventBusProxy } from './event-bus-proxy';\r\nimport { IEmitable } from './types';\r\nimport { EventPipe } from './event-pipe';\r\nimport { IDisposable } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EventBus implements IEmitable {\r\n  private proxyMap: Map<string, EventBusProxy>;\r\n  private eventMap: Map<string, Array<EventPipe>>;\r\n\r\n  constructor() {\r\n    this.proxyMap = new Map<string, EventBusProxy>();\r\n    this.eventMap = new Map<string, Array<EventPipe>>();\r\n  }\r\n\r\n  getProxy(ownerType: any, eventTokenValueProvider: () => any): EventBusProxy {\r\n    const ownerName = ownerType.constructor.typeName || ownerType.constructor.name;\r\n    if (!this.proxyMap.has(ownerName)) {\r\n      this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));\r\n    }\r\n    return this.proxyMap.get(ownerName);\r\n  }\r\n\r\n  /**\r\n   * 发送事件，通知订阅者接收消息。\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  post(emitterType: any | string, tokenValue: string, eventName: string, eventArgs: any, sender?: any, eventType?: any, eventId?: number): void {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return;\r\n    }\r\n\r\n    if (!emitterType) {\r\n      console.error('post方法的参数emitterType不能为空。');\r\n      return;\r\n    }\r\n    let emitter: string;\r\n    if (emitterType instanceof Type) {\r\n      emitter = emitterType.typeName || emitterType.name;\r\n    } else {\r\n      emitter = emitterType;\r\n    }\r\n    if (typeof eventId === 'undefined') {\r\n      eventId = new Date().valueOf();\r\n    }\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(emitter, tokenValue)) {\r\n        eventPipe.post(eventArgs, sender, eventType, eventId);\r\n        eventPipe.unSubscribeForOnce();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  on(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 注销监听\r\n   * @param target \r\n   * @param tokenValue \r\n   * @param eventName \r\n   * @param caller \r\n   */\r\n  public off(target: string, tokenValue: string, eventName: string, caller: Object) {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (eventPipeList) {\r\n      const index = eventPipeList.findIndex((eventPipe: EventPipe) => {\r\n        if (eventPipe.subscriptions.get(caller)) {\r\n          return eventPipe.name === eventName && eventPipe.tokenValue === tokenValue && eventPipe.emitter === target;\r\n        }\r\n        return false;\r\n      });\r\n      if (index !== -1) {\r\n        eventPipeList.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 订阅一次。接收到一次消息之后自动取消订阅\r\n   */\r\n  once(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 发送一个请求事件，获取监听者的响应并处理\r\n   */\r\n  requestFor(target: string, tokenValue: string, requestName: string, requestValue: any, success: (any) => any, fail?: (string) => any) {\r\n    const eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);\r\n    if (eventPipe) {\r\n      this.once(target, tokenValue, requestName, this, (response) => {\r\n        if (response.status === 'success') {\r\n          success(response.data);\r\n        } else {\r\n          if (fail) {\r\n            fail('No target responser listening');\r\n          }\r\n        }\r\n      });\r\n      eventPipe.post({ target: target, token: tokenValue, data: requestValue });\r\n    } else {\r\n      if (fail) {\r\n        fail('No target responser listening.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听一个请求事件，给出响应\r\n   */\r\n  responseOn(responseSubject: string, requestName: string, callback: (any) => any) {\r\n    this.on('RequestSubject', null, requestName, this, (requestObj) => {\r\n      const response = { status: 'fail', data: null };\r\n      if (responseSubject === requestObj.target) {\r\n        response.data = callback(requestObj.data);\r\n        response.status = 'success';\r\n      }\r\n      this.post(requestObj.target, requestObj.token, requestName, response);\r\n    });\r\n  }\r\n\r\n  private getEventPipe(eventName: string, target: string, tokenValue: string) {\r\n    let eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      eventPipeList = new Array<EventPipe>();\r\n      this.eventMap.set(eventName, eventPipeList);\r\n    }\r\n\r\n    // 1、一个事件不允许多个订阅\r\n    // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    // if (!eventPipe) {\r\n    //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n    // }\r\n\r\n    // 2、一个事件允许多个订阅\r\n    const eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n\r\n    return eventPipe;\r\n  }\r\n\r\n  private findExistEventPipe(eventName: string, target: string, tokenValue: string): EventPipe {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return null;\r\n    }\r\n    // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(target, tokenValue)) {\r\n        return eventPipe;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class EventCache {\r\n  private static tokens = new Map();\r\n\r\n  public static setToken(key: string, value: any) {\r\n    EventCache.tokens.set(key, value);\r\n  }\r\n\r\n  public static getToken(key: string) {\r\n    return EventCache.tokens.get(key);\r\n  }\r\n}\r\n\r\nclass RequestSubject { }\r\nclass DataClass { }\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IExceptionHandler } from './types';\r\nexport const EXCEPTION_HANDLER = new InjectionToken<IExceptionHandler>('@farris/devkit ExceptionHandler');","import { InjectionToken } from \"@angular/core\";\r\nimport { UserSettings } from \"./types\";\r\n\r\nexport const UserSettingsToken = new InjectionToken<UserSettings>('@farris/devkit UserSettingsToken');","import { Observable } from 'rxjs';\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace Expression {\r\n  /**\r\n   * 表达式对象\r\n   */\r\n  export interface ExpressionObject {\r\n    /**\r\n     * 表达式唯一标识\r\n     */\r\n    id?: string;\r\n    /**\r\n     * 表达式绑定的路径\r\n     */\r\n    path: string;\r\n    /**\r\n     * 表达式绑定类型State|Entity\r\n     */\r\n    bindingType: ExpressionBindingType;\r\n    /**\r\n     * 表达式类型\r\n     */\r\n    type: ExpressionType;\r\n    /**\r\n     * 表达式\r\n     */\r\n    expression: string;\r\n    /**\r\n     * 表达式依赖\r\n     */\r\n    deps: Array<string>;\r\n    /**\r\n     * 表达式namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 表达式计算结果\r\n     */\r\n    result?: any;\r\n    /**\r\n     * 结果作用路径\r\n     */\r\n    effectPaths?: string[],\r\n    /**\r\n     * 提示信息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 提示消息类型\r\n     */\r\n    messageType?: 'error' | 'info' | 'warning';\r\n    /**\r\n     * \r\n     */\r\n    factory?: any;\r\n  }\r\n\r\n  /**\r\n   * 自定义上下文 \r\n   */\r\n  export interface ICustomContext {\r\n    currentRows?: Array<ICurrentRow>,\r\n    contexts?: { [prop: string]: any },\r\n    patch?: { [prop: string]: any }\r\n  }\r\n\r\n  /**\r\n   * 当前行描述\r\n   */\r\n  export interface ICurrentRow {\r\n    bindingPath: string;\r\n    primaryValue: string;\r\n  }\r\n\r\n  /**\r\n   * 表达式赋值器\r\n   * @deprecated deprecated，never use\r\n   */\r\n  export interface Assigner {\r\n    assign(expressionObject: ExpressionObject);\r\n  }\r\n  /**\r\n   * 表达式执行器\r\n   */\r\n  export interface IExecutor {\r\n    compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any;\r\n  }\r\n  /**\r\n   * 表达式绑定字段类型（表达式绑定到实体、UIState?）\r\n   */\r\n  export enum ExpressionBindingType {\r\n    State = 'State',\r\n    Field = 'Field'\r\n  }\r\n  /**\r\n   * 表达式类型\r\n   */\r\n  export enum ExpressionType {\r\n    /**\r\n     * 必填表达式\r\n     */\r\n    Required = 'require',\r\n    /**\r\n     * 只读表达式\r\n     */\r\n    Readonly = 'readonly',\r\n    /**\r\n     * 计算表达式\r\n     */\r\n    Compute = 'compute',\r\n    /**\r\n     * 依赖表达式\r\n     */\r\n    Dependency = 'dependency',\r\n    /**\r\n     * 是否可见\r\n     */\r\n    Visible = 'visible',\r\n    /**\r\n     * 关联表达式\r\n     */\r\n    Relative = 'relative',\r\n    /**\r\n     * 校验表达式\r\n     */\r\n    Validate = 'validate',\r\n    /**\r\n     * 帮助前\r\n     */\r\n    DataPicking = 'dataPicking'\r\n  }\r\n  /**\r\n   * 事件类型\r\n   */\r\n  export enum EventType {\r\n    ValueChanged = 'VALUE_CHANGED',\r\n    SelectionChanged = 'SELECTION_CHANGED',\r\n    Load = 'Load',\r\n    Append = 'Append',\r\n    Remove = 'Remove',\r\n    Update = 'Update',\r\n  }\r\n  export enum EventSource {\r\n    Field = 'Field',\r\n    State = 'State',\r\n    BindingData = 'BindingData',\r\n    Repository = 'Repository'\r\n  }\r\n  /**\r\n   * 事件参数\r\n   */\r\n  export interface EventArgs {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 变更路径\r\n     */\r\n    path: Array<string>;\r\n    /**\r\n     * 变更类型\r\n     */\r\n    type?: EventType;\r\n    /**\r\n     * 变更来源\r\n     */\r\n    source: EventSource;\r\n    /**\r\n     * 变更后的值\r\n     */\r\n    value?: any;\r\n    /**\r\n     * 上下文\r\n     */\r\n    context?: any;\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 事件数据上下文\r\n     */\r\n    entity?: any;\r\n    id?: any;\r\n    /**\r\n     * 分层加载场景\r\n     */\r\n    isTreeNodeLoadScene?: boolean;\r\n  }\r\n  /**\r\n   * 监听器\r\n   */\r\n  export interface Listener {\r\n    onEvent: Observable<EventArgs>;\r\n  }\r\n  /**\r\n   * 作用器\r\n   */\r\n  export interface Effector {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 作用\r\n     * @param expressionObject \r\n     */\r\n    effect(path: string, value: any, options: EffectOptions);\r\n  }\r\n  export interface EffectOptions {\r\n    /**\r\n     * 指定行\r\n     */\r\n    path?: string[];\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 消息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 消息提示类型\r\n     */\r\n    messageType?: MessageType | 'error' | 'info' | 'warning';\r\n    /**\r\n     * 表达式id\r\n     */\r\n    expressionId?: string;\r\n  }\r\n  export enum MessageType {\r\n    error = 'error',\r\n    info = 'info',\r\n    warning = 'warning'\r\n  }\r\n  /**\r\n   * 事件处理器\r\n   */\r\n  export interface IEventHandler {\r\n    handleEvent(event: EventArgs, expressionObjects: Expression.ExpressionObject[]);\r\n    filter(event: Expression.EventArgs);\r\n    perform(expressionObject: Expression.ExpressionObject, context: any);\r\n    effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;\r\n  }\r\n  export enum EffectPath {\r\n    currentRow = 0\r\n  }\r\n  /**\r\n   * 表达式校验结果\r\n   */\r\n  export interface IValidateResult {\r\n    expressionId: string;\r\n    path: string[];\r\n    result: any;\r\n  }\r\n  /**\r\n   * 表达式计算上下文构造器选项\r\n   */\r\n  export interface IBuilderOptions {\r\n\r\n  }\r\n  export const MESSAGE = {\r\n    'zh-CHS': {\r\n      require: `请输入'$property'`,\r\n      validate: `'$property'校验不通过`,\r\n      dataPicking: '帮助前表达式校验不通过'\r\n    },\r\n    en: {\r\n      require: `Please input '$property'`,\r\n      validate: `'$property' calibration failed`,\r\n      dataPicking: 'Failed to verify the expression before help'\r\n    },\r\n    'zh-CHT': {\r\n      require: `請輸入'$property'`,\r\n      validate: `'$property'校驗不通過`,\r\n      dataPicking: '幫助前表達式校驗不通過'\r\n    }\r\n  };\r\n  export const DEPENDENCY_SPLITER = '/';\r\n}","import { InjectionToken } from \"@angular/core\";\r\nimport { IFormExpressionManifestService, IFormManifestService } from \"./types\";\r\n\r\nexport const FORM_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormManifestService>('@farris/form_manifest_service');\r\nexport const FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormExpressionManifestService>('@farris/form_expression_manifest_service');\r\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError, switchMap } from \"rxjs/operators\";\r\nimport { Expression } from './types';\r\nimport { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, IFormExpressionManifestService } from \"../manifest/index\";\r\nimport { Translate, TranslateToken } from \"../i18n/index\";\r\nimport { Repository } from \"../repository/index\";\r\n\r\n@Injectable()\r\nexport class ExpressionRegistry {\r\n  private _expressions: Expression.ExpressionObject[] = null;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN) private formExpressionManifestService: IFormExpressionManifestService,\r\n    @Optional() @Inject(TranslateToken) private translate: Translate\r\n  ) {\r\n  }\r\n  /**\r\n   * 加载表达式文件\r\n   */\r\n  public load(): Observable<Expression.ExpressionObject[]> {\r\n    return this.formExpressionManifestService.load().pipe(\r\n      switchMap((describe: Array<any>) => {\r\n        const expressions: Array<Expression.ExpressionObject> = [];\r\n        const exprs = Array.from(describe);\r\n        exprs.forEach((expr: any) => {\r\n          expr.expressions.forEach((expression: any) => {\r\n            const expressionObject: Expression.ExpressionObject = {\r\n              id: expression.id,\r\n              ns: expr.ns,\r\n              path: expr.path,\r\n              bindingType: expr.type,\r\n              type: expression.type,\r\n              expression: expression.value || expression.expr || '',\r\n              message: expression.message || null,\r\n              messageType: expression.messageType || null,\r\n              deps: []\r\n            };\r\n            if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate || expression.type === Expression.ExpressionType.DataPicking)) {\r\n              if (!expression.message) {\r\n                expressionObject.message = this.getExpressionMessage(expression.type);\r\n              }\r\n              if (!expression.messageType) {\r\n                expressionObject.messageType = 'error';\r\n              }\r\n            }\r\n            if (expressionObject.message) {\r\n              this.transform(expressionObject);\r\n            }\r\n            expressions.push(expressionObject);\r\n          });\r\n        });\r\n        this._expressions = expressions;\r\n        this.cleanSpecialCharacters();\r\n        return of(expressions);\r\n      }),\r\n      catchError((e) => {\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 获取所有表达式\r\n   */\r\n  public get expressions(): Observable<Expression.ExpressionObject[]> {\r\n    if (this._expressions) {\r\n      return of(this._expressions);\r\n    }\r\n    return this.load();\r\n  }\r\n  /**\r\n   * 根据表达式id获取对应的表达式对象\r\n   * @param id 表达式id\r\n   * @returns \r\n   */\r\n  public getExpressionById(id: string): Expression.ExpressionObject {\r\n    if (!this._expressions || this._expressions.length < 1) {\r\n      return null;\r\n    }\r\n    return this._expressions.find((expressionObject: Expression.ExpressionObject) => expressionObject.id === id);\r\n  }\r\n  private getExpressionMessage(expressionType: Expression.ExpressionType, defaultValue?: string) {\r\n    if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required || expressionType === Expression.ExpressionType.DataPicking)) {\r\n      return null;\r\n    }\r\n    if (!this.translate) {\r\n      return defaultValue;\r\n    }\r\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\r\n    return Expression.MESSAGE[currentLanguage][expressionType];\r\n  }\r\n  private transform(expressionObject: Expression.ExpressionObject) {\r\n    if (!this.translate) {\r\n      return;\r\n    }\r\n    if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {\r\n      expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);\r\n    }\r\n  }\r\n  private cleanSpecialCharacters() {\r\n    if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {\r\n      return;\r\n    }\r\n    const repository: Repository<any> = this.injector.get(Repository, null);\r\n    if (!repository) {\r\n      return;\r\n    }\r\n    const entityTypeInfo = repository.entityTypeInfo;\r\n    const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n    this._expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expr = expressionObject.expression;\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            return;\r\n          }\r\n          // 去数组\r\n          if (/\\[\\d\\]/g.test(item)) {\r\n            const replacer = item.replace(/\\[\\d\\]/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n          // 去星号\r\n          if (/\\*/g.test(item)) {\r\n            const replacer = item.replace(/\\*/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  private replaceAll(originalValue: string, search: string, replacer: string) {\r\n    return originalValue.split(search).join(replacer);\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype Listener = Expression.Listener;\r\n\r\nexport const LISTENER_TOKEN = new InjectionToken<Listener>('@Farris listener');","import { Observable, Subject } from \"rxjs\";\r\nimport { Change } from \"../binding-data/index\";\r\nimport { Modification } from \"../changeset/index\";\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\nimport { Expression } from '../expression/index';\r\nimport { UIStateObservableParam } from \"../ui-state/index\";\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 变更监听器\r\n */\r\nexport abstract class ChangeListener implements Listener {\r\n  protected subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  abstract buildEventPath(change: Change | Modification |UIStateObservableParam): string[];\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo \r\n   * @param results \r\n   * @param paths \r\n   */\r\n  public findEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        paths.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.findEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          results.push(paths);\r\n        }\r\n      });\r\n    } else if (paths && paths.length > 0) {\r\n      results.push(paths);\r\n    }\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from \"@farris/expression-engine\";\r\nimport { Expression } from '../expression/index';\r\n@Injectable()\r\nexport class ExpressionExecutor implements Expression.IExecutor {\r\n  /**\r\n   * 编译执行\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    if (!expressionObject.factory) {\r\n      const expression = new ExpressionEngineExpression(expressionObject.expression, expressionContext);\r\n      expressionObject.factory = expression.compile();\r\n    }\r\n    const expression: ExpressionEngineExpression = expressionObject.factory;\r\n    return expression.eval(expressionContext);\r\n  }\r\n  /**\r\n   * 解析\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public eval(expression: string, context?: { [prop: string]: any }) {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    const expressionEngine = new ExpressionEngine(expressionContext);\r\n    return expressionEngine.eval(expression);\r\n  }\r\n  /**\r\n   * 构造表达式上下文\r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildContext(context: { [prop: string]: any }): ExpressionContext {\r\n    const expressionContext = new ExpressionContext();\r\n    if (context && Object.keys(context).length > 0) {\r\n      Object.keys(context).forEach((key: string) => {\r\n        expressionContext.set(key, context[key]);\r\n      });\r\n    }\r\n    return expressionContext;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\n\r\n/**\r\n * 表达式计算结果\r\n */\r\n@Injectable()\r\nexport class ExpressionResult {\r\n  constructor(private injector: Injector) {\r\n  }\r\n  /**\r\n   * 更新表达式的值\r\n   * @param expressionId 表达式id\r\n   * @param result \r\n   */\r\n  public set(expressionId: string, result: any) {\r\n    this[expressionId] = result;\r\n  }\r\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { BindingData, BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EMPTY, Observable, of } from \"rxjs\";\r\nimport { AppContext } from \"../app/index\";\r\nimport { FrameContext } from \"../frame/index\";\r\nimport { Repository } from \"../repository/index\";\r\nimport { ENTITY_TEMPLATE, ResolveService } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { ExpressionExecutor } from \"./expression_executor\";\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { Expression } from './types';\r\nimport { ViewModel } from \"../view-model/index\";\r\nimport { ExpressionResult } from \"./expression_result\";\r\nimport { IMessageService, INotifyService, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from \"../core/index\";\r\nimport { Entity, EntityList } from \"../entity\";\r\nimport { Translate, TranslateToken } from \"../i18n\";\r\n\r\n@Injectable()\r\nexport class ExpressionManager {\r\n  private frameContext: FrameContext = null;\r\n  constructor(private injector: Injector, private resolveService: ResolveService, private expressionExecutor: ExpressionExecutor, private expressionRegistry: ExpressionRegistry, private expressionResult: ExpressionResult, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n  }\r\n  /**\r\n   * 根据表达式id进行计算\r\n   * @param expressionId 表达式id\r\n   * @param viewModel viewModel\r\n   * @param rowData rowData\r\n   * @returns \r\n   */\r\n  public eval(expressionId: string, viewModel?: ViewModel, rowData?: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const customContext: Expression.ICustomContext = {};\r\n      const bindingPath = viewModel && viewModel.bindingPath || null;\r\n      if (bindingPath && rowData) {\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n        let primaryKey = 'id';\r\n        if (bindingList) {\r\n          primaryKey = bindingList.primaryKey;\r\n        }\r\n        const primaryValue = rowData[primaryKey] || bindingList.currentId;\r\n        if (primaryValue) {\r\n          customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue }];\r\n        }\r\n      }\r\n      let result = this.execute(expressionObject.expression, customContext);\r\n      if (expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        result = result === true ? true : false;\r\n      }\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n      // console.warn('ExpressionManager 执行失败，未获取到表达式!');\r\n    }\r\n    return undefined;\r\n  }\r\n  public validate(expressionId: string, options: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const patch = options && options.patch || null;\r\n      const customContext: Expression.ICustomContext = {};\r\n      if (patch) {\r\n        customContext.patch = patch;\r\n      }\r\n      const currentRow = options.currentRow || null;\r\n      const currentRows = options.currentRows || [];\r\n      if (currentRow) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        customContext.currentRows.push(currentRow);\r\n      }\r\n      if (currentRows && currentRows.length > 0) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        Array.prototype.push.apply(customContext.currentRows, currentRows)\r\n      }\r\n      const result = this.execute(expressionObject.expression, customContext);\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n    }\r\n    return undefined;\r\n  }\r\n  /**\r\n   * 帮助前封装\r\n   * @param event \r\n   */\r\n  public onDataPicking(configs: { expressionId: string }) {\r\n    const expressionId = configs && configs.expressionId || null;\r\n    if (!expressionId) {\r\n      return of(true);\r\n    }\r\n    const result = this.eval(expressionId);\r\n    if (!result) {\r\n      const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n      if (!expressionObject) {\r\n        return of(true);\r\n      }\r\n      const messageType = expressionObject.messageType || Expression.MessageType.warning;\r\n      const message = expressionObject.message;\r\n      if (message) {\r\n        this.notifyService[messageType](message, { hideTitle: true });\r\n      }\r\n      return EMPTY;\r\n    }\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private execute(expression: string, customContext?: Expression.ICustomContext): any {\r\n    const deps = this.resolveService.resolve(expression);\r\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\r\n    const entityContext = this.buildEntityContext(deps, groupDependencies, customContext);\r\n    const stateContext = this.buildStateContext();\r\n    const data = customContext && customContext.contexts || null;\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    const context = {\r\n      [this.entityOriginalNodeCode]: entityContext,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.frameContext.bindingData,\r\n      repository: this.frameContext.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS',\r\n      ...data\r\n    }\r\n    if (!entityContext) {\r\n      return undefined;\r\n    }\r\n    return this.expressionExecutor.eval(expression, context);\r\n  }\r\n  /**\r\n   * 执行表达式（返回可观察对象）\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private executeAsync(expression: string, customContext?: Expression.ICustomContext): Observable<any> {\r\n    const result = this.execute(expression, customContext);\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 构造实体上下文\r\n   * @param deps \r\n   * @param groupDependencies \r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: Expression.ICustomContext) {\r\n\r\n    const currentRows = context && context.currentRows || null;\r\n    const index = deps.findIndex((dep: string) => {\r\n      const isEntityDependency = this.isEntityDependency(dep);\r\n      // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系\r\n      // 表达式依赖了实体\r\n      if (isEntityDependency) {\r\n        const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\r\n        // 是聚合依赖\r\n        if (isGroupDependency) {\r\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\r\n          if (dependencyLength === 1) {\r\n            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。\r\n            return true;\r\n          } else {\r\n            // 聚合了子表字段，只需要传递当前实体\r\n            return false;\r\n          }\r\n        } else {\r\n          // 当前依赖不是聚合，只需要传递当前实体\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    })\r\n    const isGroupdMainEntity = index !== -1;\r\n\r\n    const options = {};\r\n    if (currentRows && currentRows.length > 0) {\r\n      currentRows.forEach((currentRow: Expression.ICurrentRow) => {\r\n        options[currentRow.bindingPath || '/'] = currentRow.primaryValue;\r\n      });\r\n    }\r\n    const entity = this.getEntity(options);\r\n    const patch = context && context.patch || null;\r\n    if (!entity) {\r\n      return {};\r\n    }\r\n    if (patch && Object.keys(patch).length > 0) {\r\n      Object.keys(patch).forEach((key: string) => {\r\n        const paths = key.split('/').filter(p => p);\r\n        const value = patch[key];\r\n        this.setValue(entity, paths, value);\r\n      });\r\n    }\r\n    if (isGroupdMainEntity) {\r\n      const collection = this.frameContext.repository.entityCollection.toJSON();\r\n      entity['__type__'] = 'List';\r\n      entity['__items__'] = collection;\r\n    }\r\n    return entity;\r\n  }\r\n  private setValue(target: any, paths: string[], value: any) {\r\n    if (paths.length === 1) {\r\n      target[paths[0]] = value;\r\n    } else {\r\n      const propertyName = paths.pop();\r\n      const result = paths.reduce((object: any, path: string) => {\r\n        return object && object[path];\r\n      }, target);\r\n      result[propertyName] = value;\r\n    }\r\n  }\r\n  /**\r\n   * 是否为实体依赖\r\n   * @param dep \r\n   * @returns \r\n   */\r\n  private isEntityDependency(dep: string) {\r\n    return dep.startsWith(ENTITY_TEMPLATE);\r\n  }\r\n  /**\r\n   * 获取实体\r\n   * @param options \r\n   * @returns \r\n   */\r\n  public getEntity(options: { [bindingPath: string]: string }) {\r\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\r\n    const bindingData = this.frameContext.bindingData;\r\n    const childrenEntityPaths = [];\r\n\r\n    let entity = null;\r\n    if (options['/']) {\r\n      // 修正主表\r\n      entity = this.frameContext.bindingData.list.findById(options['/']);\r\n      if (entity) {\r\n        entity = entity.toJSON();\r\n      }\r\n    } else {\r\n      entity = this.frameContext.bindingData.list.currentItem.toJSON();\r\n    }\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n    entity['__type__'] = 'Entity';\r\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n      return entity;\r\n    }\r\n    // 找到所有子表\r\n    childrenEntityPaths.forEach((paths: string[]) => {\r\n      let row = null;\r\n      if (options && options[paths.join('/')]) {\r\n        const parentPaths = paths.slice(0, 1);\r\n        if (paths.length == 2 && options[parentPaths.join('/')]) {\r\n          const parentRow = options[parentPaths.join('/')];\r\n          // 从从表\r\n          // 需要切换上级表\r\n          row = this.getPropertyValue(entity, parentPaths.concat([parentRow, paths[1], options[paths.join('/')]]));\r\n        } else {\r\n          // 不应该使用bindingData，这样就默认使用了当前行\r\n          const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n          const currentRowId = options[paths.join('/')];\r\n          let currentRow: BindingObject = null;\r\n          if (currentRowId !== bindingList.currentId) {\r\n            currentRow = bindingList.findById(currentRowId);\r\n          } else {\r\n            currentRow = bindingList.currentItem;\r\n          }\r\n          if (currentRow && currentRow.primaryKeyValue) {\r\n            row = currentRow.toJSON();\r\n          }\r\n        }\r\n      } else {\r\n        // 如果上级表已经切换了当前行，那么下级表也应该切换\r\n        const parentTableCurrentRowChanged = options && !!Object.keys(options).find(path => {\r\n          const fullPath = path.split('/').join('/');\r\n          return paths.join('/').startsWith(fullPath);\r\n        }) || false;\r\n        if (parentTableCurrentRowChanged) {\r\n          const primaryValue = options && options['/'] || bindingData.list.currentId;\r\n          const entity = this.frameContext.repository.entityCollection.getEntityById(primaryValue);\r\n          const fullPaths = [];\r\n          const data = paths.reduce((object, path) => {\r\n            fullPaths.push(path);\r\n            const item = object && object[path] as EntityList<Entity>;\r\n            if (item) {\r\n              const currentRowId = options && options[fullPaths.join('/')] || item.items[0] && item.items[0].primaryValue || null;\r\n              if (currentRowId) {\r\n                const currentRow = item.get(currentRowId);\r\n                return currentRow || null;\r\n              }\r\n            }\r\n            return null;\r\n          }, entity) as Entity;\r\n          if (data) {\r\n            row = data.toJSON();\r\n          } else {\r\n            row = {};\r\n          }\r\n        } else {\r\n          row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\r\n        }\r\n      }\r\n      const propertyName = paths.pop();\r\n      let parent = paths.reduce((object: any, path: string) => {\r\n        return object && object[path] || null;\r\n      }, entity);\r\n      const list = parent[propertyName];\r\n      const node: any = { __items__: [], ...row && row || {}, __type__: 'List' };\r\n      node.length = () => node.__items__.length;\r\n      if (list && Array.isArray(list)) {\r\n        node.__items__ = [].concat(list);\r\n      }\r\n      parent[propertyName] = node;\r\n    });\r\n    return entity;\r\n  }\r\n  private getPropertyValue(entity: any, paths: string[]) {\r\n    return paths.reduce((object: any, path: string) => {\r\n      if (object['__type__'] === 'List') {\r\n        return object['__items__'].find(item => item.id === path);\r\n      } else if (Array.isArray(object)) {\r\n        return object.find(item => item.id === path);\r\n      } else {\r\n        return object && object[path];\r\n      }\r\n    }, entity);\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    const repository = this.injector.get(Repository);\r\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext() {\r\n    const result = {};\r\n    if (this.frameContext) {\r\n      const rootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { ExpressionManager } from \"./expression_manager\";;\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { ExpressionResult } from \"./expression_result\"\r\nimport { Expression } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ExpressionResultFactory {\r\n  constructor(private injector: Injector, private expressionRegistry: ExpressionRegistry, private expressionManager: ExpressionManager, private expressionResult: ExpressionResult) {\r\n    this.registeEvent();\r\n  }\r\n  private registeEvent() {\r\n    this.expressionRegistry.expressions.subscribe((expressionObjects: Expression.ExpressionObject[]) => {\r\n      // 加载完表达式之后做一次计算\r\n      expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.deps && expressionObject.deps.length > 0) {\r\n          return;\r\n        }\r\n        const result = this.expressionManager.eval(expressionObject.id);\r\n        this.expressionResult[expressionObject.id] = result;\r\n      });\r\n    });\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from './types';\r\n\r\nexport const ASSIGNER_TOKEN = new InjectionToken<Expression.Assigner>('@Farris expression assigner');\r\nexport const EVENT_HANDLER_TOKEN = new InjectionToken<Expression.IEventHandler>('@Farris_event_handler');","import { Injectable, Injector, Inject } from '@angular/core';\r\n// import { FRAME_ID, NAMESPACE } from '../frame/index';\r\nimport { UIState, UIStateObservableParam } from '../ui-state/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { FRAME_ID, NAMESPACE } from '../frame/tokens';\r\ntype EventArgs = Expression.EventArgs;\r\n/**\r\n * 监听UIState变更\r\n */\r\n@Injectable()\r\nclass UIStateChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace, @Inject(FRAME_ID) private frameId: string, private bindingData: BindingData) {\r\n    super();\r\n    this.registerEvent();\r\n  }\r\n  public buildEventPath(change: UIStateObservableParam): string[] {\r\n    return null;\r\n  }\r\n  private registerEvent() {\r\n    if (this.uiState && this.uiState.changes) {\r\n      this.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          path: [change.field],\r\n          type: Expression.EventType.ValueChanged,\r\n          value: change.value,\r\n          source: Expression.EventSource.State,\r\n          frameId: this.frameId\r\n        };\r\n        // console.log(\"UIStateChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { UIStateChangeListener };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Entity } from '../entity';\r\nimport { Repository } from '../repository/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n\r\n@Injectable()\r\nclass RepositoryChangeListener extends ChangeListener {\r\n  private bindingData: BindingData;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  private registerEvent() {\r\n    if (this.repository && this.repository.changes) {\r\n      this.repository.changes.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Field,\r\n        };\r\n        // console.log(\"RepositoryChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n    // repository只监听值变化事件\r\n    if (this.repository && this.repository.entityCollectionChange) {\r\n      this.repository.entityCollectionChange.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Repository,\r\n        };\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 构建事件路径参数\r\n   * @param event event\r\n   * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]\r\n   * @returns \r\n   */\r\n  public buildEventPath(event: Modification): string[] {\r\n    const paths = event.path;\r\n    let result = [];\r\n    if (!paths || paths.length < 1) {\r\n      // 主表新增时path为空\r\n      return result;\r\n    }\r\n    // 过滤掉udt的冒号，关联字段的id\r\n    result = paths.filter((path: string, index: number) => {\r\n      if (index % 2 === 0 && path.includes(':')) {\r\n        if (path === ':') {\r\n          return false;\r\n        }\r\n        const primaryKey = path.split(':')[0];\r\n        if (primaryKey !== this.repository.primaryKey) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    // 移除路径中的id字符串\r\n    // result = paths.map((path: string, index: number) => {\r\n    //   if (path.includes(':') && index % 2 === 0) {\r\n    //     return path.split(':')[1];\r\n    //   }\r\n    //   return path;\r\n    // });\r\n    // 此时result中不应该有冒号\r\n    return result;\r\n  }\r\n  private convertEventType(change: Modification): Expression.EventType {\r\n    let eventType = null;\r\n    if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {\r\n      // eventType = Expression.EventType.Append;\r\n      // 不处理新增\r\n    } else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {\r\n      // eventType = Expression.EventType.Remove;\r\n    } else if (change.type === ModifyType.Load) {\r\n      // eventType = Expression.EventType.Load;\r\n    } else if (change.type === ModifyType.ValueChange) {\r\n      //eventType = Expression.EventType.ValueChanged;\r\n      // 不处理值变化\r\n    } else if (change.type === ModifyType.Update) {\r\n      eventType = Expression.EventType.Update\r\n    }\r\n    return eventType;\r\n  }\r\n}\r\n\r\nexport { RepositoryChangeListener }","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { LISTENER_TOKEN } from './tokens';\r\nimport { Expression } from '../expression/index';\r\ntype Listener = Expression.Listener;\r\n@Injectable()\r\nclass ListenerRegistry {\r\n  constructor(@Optional() @Inject(LISTENER_TOKEN) public listeners: Array<Listener>, @Optional() private injector: Injector) {\r\n  }\r\n}\r\nexport { ListenerRegistry };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, BindingList, Change, ChangeType } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n */\r\n@Injectable()\r\nclass BindingDataChangeListener extends ChangeListener {\r\n  private repository: Repository<any> = null;\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.repository = this.injector.get(Repository, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * 注册值变化事件\r\n   */\r\n  private registerEvent() {\r\n    if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\r\n          let eventType = null;\r\n          if (change.type === ChangeType.Append) {\r\n            eventType = EventType.Append;\r\n          } else if (change.type === ChangeType.ValueChanged) {\r\n            eventType = EventType.ValueChanged;\r\n          } else if (change.type === ChangeType.Remove) {\r\n            eventType = EventType.Remove;\r\n          } else if (change.type === ChangeType.Load) {\r\n            // 主表新增\r\n            if (change.create === true) {\r\n              eventType = EventType.Append;\r\n            } else {\r\n              eventType = EventType.Load;\r\n            }\r\n          } else if (change.type === ChangeType.SelectionChanged) {\r\n            eventType = EventType.SelectionChanged\r\n          }\r\n          const path = this.buildEventPath(change);\r\n          const modification: EventArgs = {\r\n            ns: this.namespace,\r\n            path: path,\r\n            type: eventType,\r\n            source: Expression.EventSource.BindingData,\r\n            value: change.value,\r\n            id: change.id,\r\n            isTreeNodeLoadScene: change.isTreeNodeLoadScene\r\n          };\r\n          // console.log(\"BindingDataChangeListener\", modification);\r\n          this.subject.next(modification);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    const path = change.path;\r\n    const paths = [];\r\n    // if (!path || path.length < 1) {\r\n    //   return paths;\r\n    // }\r\n    const primaryValue = this.bindingData.list.currentItem.primaryKeyValue || change.id;\r\n    if (primaryValue) {\r\n      if (!(change.type === ChangeType.Load && change.path.length === 0)) {\r\n        paths.push(`${this.bindingData.list.primaryKey}:${primaryValue}`);\r\n      }\r\n    }\r\n    const currentPath = [];\r\n    for (let index = 0; index < path.length; index++) {\r\n      const propertyName = path[index];\r\n      currentPath.push(propertyName);\r\n      const item = this.bindingData.getValue(currentPath);\r\n      paths.push(propertyName);\r\n      if (item instanceof BindingList) {\r\n        if (currentPath.length < path.length) {\r\n          const bindingList = item as BindingList;\r\n          let currentId = bindingList.currentItem.primaryKeyValue;\r\n          if (index === path.length - 2 && change.id) {\r\n            currentId = change.id;\r\n          }\r\n          paths.push(`${this.bindingData.list.primaryKey}:${currentId}`);\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n}\r\nexport { BindingDataChangeListener };\r\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ListenerRegistry } from './listener_registry';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 监听器\r\n * @description 监听bindingList、UIState变更\r\n */\r\n@Injectable()\r\nclass Listeners {\r\n  private subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  constructor(@Optional() private registry: ListenerRegistry) {\r\n    this.regist();\r\n  }\r\n  private regist() {\r\n    const listeners = this.registry && this.registry.listeners || [];\r\n    if (listeners && listeners.length > 0) {\r\n      listeners.forEach((listener: Listener) => {\r\n        listener.onEvent.subscribe((modification: EventArgs) => {\r\n          this.subject.next(modification);\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { Listeners };\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { Listeners } from \"../listener/index\";\r\nimport { Expression } from \"./types\";\r\n/**\r\n * 事件监听器主要有以下几种类型的事件：\r\n * 1、值变化\r\n * 2、行切换\r\n *    行切换使用场景为需要为数据计算依赖当前行时\r\n * 3、数据加载\r\n */\r\n@Injectable()\r\nexport class ExpressionEventEmitter {\r\n  private onEvent: BehaviorSubject<Array<Expression.EventArgs>>;\r\n  private events: Array<Expression.EventArgs>;\r\n  constructor(private listeners: Listeners) {\r\n    this.events = new Array<Expression.EventArgs>();\r\n    this.listeners.onEvent.subscribe((eventArgs: Expression.EventArgs) => {\r\n      if (this.onEvent && this.onEvent.observers.length > 0) {\r\n        let events = [];\r\n        if (this.events.length > 0) {\r\n          events = [...this.events];\r\n        }\r\n        events.push(eventArgs);\r\n        this.onEvent.next(events);\r\n        this.events = [];\r\n      } else {\r\n        this.events.push(eventArgs);\r\n      }\r\n    });\r\n  }\r\n  public attach(): Observable<Array<Expression.EventArgs>> {\r\n    if (!this.onEvent) {\r\n      this.onEvent = new BehaviorSubject<Array<Expression.EventArgs>>(this.events);\r\n    }\r\n    return this.onEvent.asObservable();\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\nexport const EFFECTOR_TOKEN = new InjectionToken<Expression.Effector>('@farris/effector_token');\r\n\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n/**\r\n * 实体副作用器\r\n * @description 将表达式计算结果赋值给实体属性\r\n */\r\n@Injectable()\r\nexport class RepositoryEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('repository effector 需要指定行信息。');\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      return;\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== value) {\r\n        object[propName] = value;\r\n      }\r\n    } else {\r\n      // console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { UIState } from '../ui-state/index';\r\n\r\n@Injectable()\r\nexport class UIStateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    this.uiState.setPropertyValue(path, value);\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 只读副作用器\r\n */\r\n@Injectable()\r\nexport class ReadonlyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // suprise ?\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 依赖副作用器\r\n * @description 当表达式计算结果为true时，清空字段值\r\n * 当value==true且属性当前值不是null时，设置属性值为null\r\n */\r\n@Injectable()\r\nexport class DependencyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: boolean, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('DependencyEffector 需要指定行信息。');\r\n    }\r\n    if (typeof value !== 'boolean') {\r\n      console.warn(`DependencyEffector 依赖表达式计算结果应该为true/false，当前值为：${value}`);\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      throw new Error(`找不到id：${rowId}对应的实体！`);\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== null && value === true) {\r\n        object[propName] = null;\r\n      }\r\n    } else {\r\n      throw new Error(`[DependencyEffector] 找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n\r\n}","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { EFFECTOR_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class EffectorRegistry {\r\n  constructor(private injector: Injector, @Optional() @Inject(EFFECTOR_TOKEN) public effectors: Array<Expression.Effector>) { }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService } from '../core/index';\r\n\r\n@Injectable()\r\nexport class RelativeEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (value === true && options.message && this.notifyService) {\r\n      const messageType = options.messageType || 'info';\r\n      this.notifyService[messageType](options.message, { hideTitle: true });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService, ComponentType } from '../core/index';\r\nimport { NgFormControl } from '../form/decorators';\r\nimport { RuleType } from '../form/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\n@Injectable()\r\nexport class ValidateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService,\r\n    @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext\r\n  ) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    // const rootViewModel = rootFrameContext.viewModel;\r\n    const expressionId = options.expressionId;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n    }\r\n    if (value === false && options.message) {\r\n      // 更新form错误信息\r\n      // 不是grid，则认为是卡片\r\n      if (!domInfo.isGridComponent) {\r\n        const message = options.message.replace(/\\$property/g, domInfo.propertyName);\r\n        const formErrors = this.buildFormErrors(domPropertyName, message);\r\n        // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      } else {\r\n        // if (expressionId) {\r\n        //   // 增加校验规则\r\n        //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n        // }\r\n      }\r\n      // 不进行汇总展示\r\n      // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);\r\n      // 增加到汇总消息\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      // 更新汇总错误信息\r\n    } else if (value === true) {\r\n      // 移除错误消息\r\n      // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n      if (currentErrors) {\r\n        if (currentErrors.hasOwnProperty('validate')) {\r\n          // require合法，移除require校验提示\r\n          delete currentErrors.validate;\r\n        }\r\n        frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n      } else {\r\n        const formErrors = this.buildFormErrors(domPropertyName, null);\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 通过实体路径获取对应的dom信息\r\n   * @param entityPath\r\n   * @returns\r\n   */\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n\r\n        const isValidFrameContext = frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              // 如果是farris树，则跳过\r\n              const isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;\r\n              if (isFarrisTreeTableComponent) {\r\n                continue;\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getVerifyInformations(frameContext: FrameContext) {\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const verifyInformations = rootViewModel.verifyInformations;\r\n    return verifyInformations;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      message = message.replace(/\\$property/g, 'domPropertyName');\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'validate': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n  private buildVerifyInformations(id: string, frameContext: FrameContext, domPropertyName: string, message: string) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    verifyInformations.push({\r\n      id: id,\r\n      namespace: frameContext.namespace,\r\n      targetField: domPropertyName,\r\n      index: verifyInformations.length + 1,\r\n      title: frameContext.form.formGroupName,\r\n      msg: message,\r\n      type: 'error'\r\n    });\r\n    return verifyInformations;\r\n  }\r\n  private removeValidateVerifyInformations(id: string, frameContext: FrameContext) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    return verifyInformations;\r\n  }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { ComponentType } from '../core/index';\r\nimport { Entity } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NgFormControl, RuleType } from '../form/index';\r\nimport { FrameContext, NAMESPACE } from \"../frame/index\";\r\nimport { Translate, TranslateToken } from '../i18n';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 必填副作用器\r\n * @description 当结算结果为true时设置必填校验，否则删除必填校验\r\n */\r\n@Injectable()\r\nexport class RequiredEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext: FrameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    const pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(p => p));\r\n    const expressionId = options.expressionId;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Require);\r\n    }\r\n    if (value === true) {\r\n      if (options.message) {\r\n        // 更新form错误信息\r\n        // 不是grid，则认为是卡片\r\n        if (!domInfo.isGridComponent) {\r\n          const message = options.message.replace(/\\$property/g, domInfo.propertyName);\r\n          const formErrors = this.buildFormErrors(domPropertyName, message);\r\n          const isValidValue = this.isValidValue(path, pathValue);\r\n          if (!isValidValue) {\r\n            frameContext.form.updateFormErrors(formErrors);\r\n          }\r\n        } else {\r\n          this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);\r\n        }\r\n      }\r\n    } else {\r\n      // 返回非true值时认为非必填\r\n      if (domInfo.isGridComponent) {\r\n        this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);\r\n      } else {\r\n        const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n        if (currentErrors) {\r\n          if (currentErrors.hasOwnProperty('require')) {\r\n            // require合法，移除require校验提示\r\n            delete currentErrors.require;\r\n          }\r\n          frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n        } else {\r\n          const formErrors = this.buildFormErrors(domPropertyName, null);\r\n          frameContext.form.updateFormErrors(formErrors);\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  private updateColumnValidators(frameContext: FrameContext, field: string, datagridColumns: any[][], isRequired: boolean) {\r\n    const frameId = frameContext.frameId;\r\n    const componentRefs = frameContext.appContext.componentManager.get([frameId]) as Map<string, any>;\r\n    if (componentRefs && componentRefs.size > 0) {\r\n      const datagrid = Array.from(componentRefs.values())[0];\r\n      if (datagrid && typeof datagrid.updateColumn === 'function') {\r\n        const columns = datagridColumns.find((array: any[]) => {\r\n          return array.find(item => item.field === field);\r\n        });\r\n        const column = columns && columns.find(item => item.field === field) || null;\r\n        if (column) {\r\n          const validators: any[] = column.validators || [];\r\n          const index = validators.findIndex(item => item.type === 'required');\r\n          if (isRequired) {\r\n            if (index === -1) {\r\n              validators.push({ \"type\": \"required\", \"message\": \"该字段不能为空！\" });\r\n            }\r\n          } else {\r\n            if (index !== -1) {\r\n              validators.splice(index, 1);\r\n            }\r\n          }\r\n          datagrid.updateColumn(field, { validators: [...validators] });\r\n          datagrid.columnsChanged(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean, binding: string, datagridColumns: any[][] } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              // 如果是farris树，则跳过\r\n              const isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;\r\n              if (isFarrisTreeTableComponent) {\r\n                continue;\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent,\r\n                binding: ngFormControl.binding,\r\n                datagridColumns: dgColumnInfo\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getDataPropInfo(path: string) {\r\n    if (!path) {\r\n      return null;\r\n    }\r\n    const paths = path.split('/').filter(p => p);\r\n    return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);\r\n  }\r\n  private isValidValue(path: string, value: any) {\r\n    const dataTypeInfo = this.getDataPropInfo(path);\r\n    if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {\r\n      // 多语字段\r\n      const translate = this.injector.get<Translate>(TranslateToken, null);\r\n      const currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      return !!value[currentLanguage];\r\n    } else if (value === null || value === '' || value === undefined) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'require': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\n\r\n@Injectable()\r\nexport class VisibleEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext,\r\n    private repository: Repository<any>) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 由匿名函数接管，ignore\r\n    const paths = path.split('/').filter(p => p);\r\n    const bindingPaths = this.getTablePaths(paths);\r\n    const bindingPath = bindingPaths.join('/');\r\n    // 主表显隐无需处理\r\n    if (bindingPaths && bindingPaths.length > 0) {\r\n      const isGridComponent = this.isGridComponent(bindingPath);\r\n      if (isGridComponent) {\r\n        const datagridComponent = this.getDatagridComponent(bindingPath);\r\n        if (datagridComponent) {\r\n          // 更新列信息\r\n          // datagridComponent.columnsChanged();\r\n          const fieldPaths = this.getPropertyPaths(paths);\r\n          if (fieldPaths) {\r\n            const field = fieldPaths.join('.');\r\n            if (value) {\r\n              datagridComponent.showColumn(field, false);\r\n            } else {\r\n              datagridComponent.hideColumn(field, false);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const datagridComponent = this.getDatagridComponent(bindingPath);\r\n      if (datagridComponent) {\r\n        datagridComponent.columnsChanged(false);\r\n      }\r\n    }\r\n  }\r\n  private getTablePaths(paths: string[]): string[] {\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  private getDatagridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    let result = null;\r\n    if (matchedFrameContexts) {\r\n      matchedFrameContexts.every((frameContext: FrameContext) => {\r\n        const frameId = frameContext.frameId;\r\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\r\n        if (!componentsMap) {\r\n          return true;\r\n        }\r\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\r\n        if (datagridComponent) {\r\n          result = datagridComponent;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private getPropertyPaths(paths: string[]) {\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  private isGridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const frameContext = frameContexts.find((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    if (frameContext) {\r\n      return !!frameContext.viewModel['dataGridColumnsName'];\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}","import { Expression } from '../expression/index';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { EffectorRegistry } from './effector_registry';\r\nimport { RepositoryEffector } from './repository_effector';\r\nimport { UIStateEffector } from './uistate_effector';\r\nimport { ReadonlyEffector } from './readonly_effector';\r\nimport { DependencyEffector } from './dependency_effector';\r\nimport { RelativeEffector } from './relative_effector';\r\nimport { ValidateEffector } from './validate_effector';\r\nimport { RequiredEffector } from './required_effector';\r\nimport { VisibleEffector } from './visible_effector';\r\n// import { Core } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EffectorFactory {\r\n  constructor(private injector: Injector, private effectorRegistry: EffectorRegistry) { }\r\n  public getEffector(expressionObject: Expression.ExpressionObject) {\r\n    const path = expressionObject.path;\r\n    const ns = expressionObject.ns;\r\n    const bindingType = expressionObject.bindingType;\r\n    const type = expressionObject.type;\r\n    const nsEffectors = this.effectorRegistry.effectors.filter((effector: Expression.Effector) => effector.ns == ns);\r\n    // 计算表达式\r\n    if (type === Expression.ExpressionType.Compute) {\r\n      if (bindingType === Expression.ExpressionBindingType.Field) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof RepositoryEffector);\r\n      } else if (bindingType === Expression.ExpressionBindingType.State) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof UIStateEffector);\r\n      } else {\r\n        throw new Error(`不支持的绑定字段类型：${bindingType}`);\r\n      }\r\n    } else if (type === Expression.ExpressionType.Readonly) {\r\n      // 只读表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ReadonlyEffector);\r\n    } else if (type === Expression.ExpressionType.Dependency) {\r\n      // 依赖表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof DependencyEffector);\r\n    } else if (type === Expression.ExpressionType.Relative) {\r\n      // 关联表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RelativeEffector);\r\n    } else if (type === Expression.ExpressionType.Validate) {\r\n      // 校验表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ValidateEffector);\r\n    } else if (type === Expression.ExpressionType.Required) {\r\n      // 必填表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RequiredEffector);\r\n    } else if (type === Expression.ExpressionType.Visible) {\r\n      // 显隐表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof VisibleEffector);\r\n    } else {\r\n      // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","export * from './tokens';\r\nexport * from './repository_effector';\r\nexport * from './uistate_effector';\r\nexport * from './readonly_effector';\r\nexport * from './dependency_effector';\r\nexport * from './effector_registry';\r\nexport * from './effector_factory';\r\nexport * from './relative_effector';\r\nexport * from './validate_effector';\r\nexport * from './required_effector';\r\nexport * from './visible_effector';\r\n// export * from './types';","import { Injectable, Injector } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { BindingData, BindingList, BindingObject } from '../binding-data/index';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { EffectorFactory } from '../effector/index';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { FrameContext } from '../frame';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { Translate } from '../i18n/translate';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\n\r\n@Injectable()\r\nexport abstract class EventHandler implements Expression.IEventHandler {\r\n  protected frameContext: FrameContext;\r\n  constructor(protected injector: Injector, protected repository: Repository<any>, protected bindingData: BindingData, protected expressionRegistry: ExpressionRegistry, protected effectorFactory: EffectorFactory, protected expressionExecutor: ExpressionExecutor, protected expressionResult: ExpressionResult) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext);\r\n  }\r\n  public expressionObjects: Expression.ExpressionObject[];\r\n\r\n  public handleEvent(event: Expression.EventArgs, expressionObjects: Expression.ExpressionObject[]) {\r\n    event = Object.assign({}, event);\r\n    this.expressionObjects = expressionObjects;\r\n    this.dispatch(event);\r\n  }\r\n\r\n  //#region 抽象函数\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public abstract filter(event: Expression.EventArgs);\r\n  /**\r\n   * 发布事件\r\n   * @param expressionObject 表达式对象\r\n   * @param event 事件\r\n   */\r\n  public abstract dispatch(event: Expression.EventArgs): void;\r\n  //#endregion\r\n\r\n  //#region 属性\r\n\r\n  /**\r\n   * 主表主键值\r\n   */\r\n  protected get primaryValue() {\r\n    return this.bindingData.list.currentItem.primaryKeyValue;\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region 表达式核心\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   * @returns any\r\n   */\r\n  public perform(expressionObject: Expression.ExpressionObject, context: any) {\r\n    return this.expressionExecutor.compile(expressionObject, context);\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);\r\n      return;\r\n    }\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const effectPaths = expressionObject.effectPaths || [];\r\n      if (effectPaths.length > 0) {\r\n        effectPaths.forEach((path: string) => {\r\n          const effectPath = path.split('/');\r\n          const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id };\r\n          effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n        });\r\n      } else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id };\r\n        effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n      }\r\n    } else {\r\n      throw new Error('not supported！');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region util\r\n\r\n  protected isValidateOrRequiredExpression(expressionObject: Expression.ExpressionObject) {\r\n    return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);\r\n  }\r\n  /**\r\n   * 以事件参数为依据构建实体路径\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  protected getEntityPathFromEvent(event: Expression.EventArgs): string[] {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    if (!event || !event.path || event.path.length < 1) {\r\n      return [];\r\n    }\r\n    const paths = event.path;\r\n    return this.getEntityPath(paths);\r\n  }\r\n  /**\r\n   * 获取事件路径中的实体路径\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 构造实体路径\r\n   * @param path path\r\n   * @description 删除路径中的id字段\r\n   * @returns \r\n   */\r\n  protected buildEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 清理事件路径中的id主键标识\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected cleanEventPath(path: string[]) {\r\n    path = path.filter(p => {\r\n      if (p && p !== ':') {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return path.map((item: string) => {\r\n      if (item.includes(':')) {\r\n        return item.split(':')[1];\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  protected getCurrentRowByPaths(paths: string[]): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件路径中指定子表的事件行\r\n   * @param path \r\n   * @param tableCode \r\n   * @returns \r\n   */\r\n  protected getEventId(path: string[], tableCode: string) {\r\n    if (!path || path.length < 1) {\r\n      throw new Error('invalid path!');\r\n    }\r\n    const propertyIndex = path.findIndex(p => p === tableCode);\r\n    if (propertyIndex === -1) {\r\n      return null;\r\n    }\r\n    const idIndex = propertyIndex + 1;\r\n    if (idIndex > path.length - 1) {\r\n      throw new Error('invalid propertyName or path');\r\n    }\r\n    const id = path[idIndex];\r\n    if (id.indexOf(':') === -1) {\r\n      throw new Error('compute error.');\r\n    }\r\n    return id.split(':')[1];\r\n  }\r\n  //#endregion\r\n\r\n\r\n  //#region  构造上下文\r\n\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext(event: Expression.EventArgs) {\r\n    const ns = event.ns;\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const result = {};\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const anonymousFrameContext = frameContexts[0];\r\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件实体\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildEntityContext(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows?: Array<Expression.ICurrentRow>) {\r\n    const expressionBindingType = expressionObject.bindingType;\r\n    if (expressionBindingType === Expression.ExpressionBindingType.Field) {\r\n      const entityTypeInfo = this.repository.entityTypeInfo;\r\n      const childrenEntityPaths = [];\r\n      ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n      // 获取当前行\r\n      const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;\r\n      const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;\r\n      let entity = this.bindingData.list.findById(primaryValue);\r\n      if (!entity) {\r\n        return {};\r\n      }\r\n      const object = entity.toJSON();\r\n      object['__type__'] = 'Entity';\r\n      if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n        return object;\r\n      }\r\n      childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);\r\n      // 找到所有子表\r\n      childrenEntityPaths.forEach((paths: string[]) => {\r\n        const bindingList = this.bindingData.getValue(paths) as BindingList;\r\n        let currentRowId = bindingList.currentId;\r\n        const propertyName = paths[paths.length - 1];\r\n        // parent 为entity或entitylist或null\r\n        const parent = paths.slice(0, paths.length - 1).reduce((object: any, path: string) => {\r\n          return object && object[path] || null;\r\n        }, object);\r\n        if (!parent) {\r\n          return;\r\n        }\r\n        const data = parent;\r\n        let node: any = null;\r\n        if (!currentRowId) {\r\n          // 当前表没有数据\r\n          node = { __items__: [], __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n        } else {\r\n          // 纠正当前行\r\n          if (currentRows && currentRows.length > 0) {\r\n            // 是否指定了当前行\r\n            const userAssignCurrentRow = currentRows.find(row => {\r\n              const bindingPaths = row.bindingPath.split('/').filter(p => p);\r\n              return bindingPaths.join('/') === paths.join('/');\r\n            });\r\n            if (userAssignCurrentRow) {\r\n              currentRowId = userAssignCurrentRow.primaryValue;\r\n            }\r\n          }\r\n          // 子表当前行\r\n          const row = bindingList.findById(currentRowId);\r\n          // 找到子表当前行的上级\r\n          const list = parent[propertyName];\r\n          node = { __items__: [], ...row && row.toJSON() || {}, __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n\r\n          if (list && Array.isArray(list)) {\r\n            node.__items__ = [].concat(list);\r\n          }\r\n        }\r\n        data[propertyName] = node;\r\n      });\r\n      return object;\r\n    } else if (expressionBindingType === Expression.ExpressionBindingType.State) {\r\n      // todo: 支持状态表达式\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 构造表达式计算上下文\r\n   * @param expressionObject 表达式\r\n   * @param event 事件\r\n   * @param entityContext 实体上下文\r\n   * @param currentRows 当前行\r\n   * @returns \r\n   */\r\n  public buildContext(expressionObject: Expression.ExpressionObject, event: Expression.EventArgs, entityContext?: any, currentRows?: Array<Expression.ICurrentRow>): any {\r\n    let context = [];\r\n    if (entityContext) {\r\n      context.push(entityContext);\r\n    } else {\r\n      const entity = this.buildEntityContext(event, expressionObject, currentRows);\r\n      context.push(entity);\r\n    }\r\n    const stateContext = this.buildStateContext(event);\r\n    const entityCode = this.entityOriginalNodeCode;\r\n    let entity = null;\r\n    if (context.length === 1) {\r\n      entity = context.pop();\r\n    } else {\r\n      entity = context[0];\r\n      if (!entity['__type__']) {\r\n        entity['__type__'] = 'Entity';\r\n      }\r\n      entity['__items__'] = context;\r\n    }\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    return {\r\n      [entityCode]: entity,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.bindingData,\r\n      repository: this.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS'\r\n    };\r\n  }\r\n  //#endregion\r\n  /**\r\n   * 构造副作用路径\r\n   * @param event \r\n   * @param expressionObject \r\n   * @returns \r\n   */\r\n  protected buildEffectPath(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): string[] {\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    const primaryValue = event.path[0] && event.path[0].split(':')[1];\r\n    if (!primaryValue) {\r\n      throw new Error('Invalid event path!');\r\n    }\r\n    if (expressionPaths.length === 1) {\r\n      // 主表简单字段\r\n      return [primaryValue, expressionPaths.pop()];\r\n    } else {\r\n      const result = [primaryValue];\r\n      for (let index = 0; index < expressionPaths.length; index++) {\r\n        const propertyName = expressionPaths[index];\r\n        result.push(propertyName);\r\n        const currentPaths = expressionPaths.slice(0, index + 1);\r\n        const propertyInfo: DataPropInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);\r\n        if (propertyInfo.group === 'List') {\r\n          let id = this.getEventId(event.path, propertyInfo.name) || null;\r\n          // 事件和表达式不是同一个表\r\n          if (!id) {\r\n            const bindingList = this.bindingData.getValue(currentPaths) as BindingList;\r\n            if (bindingList) {\r\n              id = bindingList.currentId;\r\n            }\r\n          }\r\n          result.push(id);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  //#region 辅助方法\r\n  protected getPathInfo(path: string): { path: string, propertyName: string, paths: string[], propertyNames: string[] } {\r\n    const paths = path.split('/').filter(p => p);\r\n    // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）\r\n    const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    const propertyName = paths.slice(entityPath.length).join('/');\r\n    return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\r\n  }\r\n  /**\r\n   * get table paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getTablePathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  /**\r\n   * get property paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getPropertyPathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  /**\r\n   * 分析事件和表达式的关系\r\n   */\r\n  protected analysis(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject) {\r\n    const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n    const eventPaths = this.getEntityPath(event.path.slice(0));\r\n    const eventPathInfo = this.getPathInfo(eventPaths.join('/'));\r\n    if (!expressionPathInfo || !eventPathInfo) {\r\n      console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);\r\n      return null;\r\n    }\r\n    const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);\r\n    const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);\r\n    const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);\r\n    const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);\r\n    const result = {\r\n      distance: undefined,\r\n      eventFromChildren: undefined,\r\n      eventFromParent: undefined,\r\n      expressionTablePaths,\r\n      expressionPropertyNames,\r\n      eventTablePaths,\r\n      eventPropertyNames,\r\n      isSameTable: false\r\n    };\r\n    result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);\r\n    if (result.distance === 1) {\r\n      result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));\r\n      result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));\r\n    }\r\n    result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');\r\n    return result;\r\n  }\r\n\r\n  protected buildCurrentRows(tablePaths: string[], fullPaths: string[]) {\r\n    const currentRows = new Array<Expression.ICurrentRow>();\r\n    if (!tablePaths || tablePaths.length < 1) {\r\n      currentRows.push({\r\n        bindingPath: '/',\r\n        primaryValue: fullPaths[0]\r\n      });\r\n    } else {\r\n      const paths = [];\r\n      tablePaths.forEach((path: string, index: number) => {\r\n        if (index === 0) {\r\n          currentRows.push({\r\n            bindingPath: '/',\r\n            primaryValue: fullPaths[0]\r\n          });\r\n        }\r\n        paths.push(path);\r\n        const primaryValue = fullPaths[index * 2 + 2];\r\n        currentRows.push({\r\n          bindingPath: paths.join('/'),\r\n          primaryValue: primaryValue\r\n        });\r\n      });\r\n    }\r\n    return currentRows;\r\n  }\r\n  protected convertBooleanTypeExpressionResult(expressionObject: Expression.ExpressionObject, result: any) {\r\n    if (this.isBooleanTypeExpression(expressionObject)) {\r\n      return result === true ? true : false;\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n  protected isBooleanTypeExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return this.isReadonlyExpression(expressionObject) || this.isVisibleExpression(expressionObject) || this.isValidateExpression(expressionObject) || this.isRequiredExpression(expressionObject) || this.isDependencyExpression(expressionObject);\r\n  }\r\n  private isReadonlyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Readonly || false;\r\n  }\r\n  private isVisibleExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Visible;\r\n  }\r\n  private isValidateExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Validate;\r\n  }\r\n  private isRequiredExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Required;\r\n  }\r\n  private isDependencyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Dependency;\r\n  }\r\n  //#endregion\r\n}","import { Injectable } from '@angular/core';\r\nimport { DataPropInfo } from '../core';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { EventHandler } from './event_handler';\r\n/**\r\n * 实体值变化处理器\r\n */\r\n@Injectable()\r\nexport class EntityValueChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Expression } from \"../expression/index\";\r\n\r\nexport class EffectorManager {\r\n  /**\r\n   * 批量副作用\r\n   * @param effector effector\r\n   * @param expressionObject 表达式\r\n   * @param paths 作用路径\r\n   * @returns \r\n   */\r\n  public static effect(effector: Expression.Effector, expressionObject: Expression.ExpressionObject, paths: any[][]) {\r\n    if (!paths || paths.length < 1) {\r\n      return;\r\n    }\r\n    paths.forEach((path: any[]) => {\r\n      const effectOptions: Expression.EffectOptions = { path, message: expressionObject.message, expressionId: expressionObject.id };\r\n      effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n    });\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Entity, EntityList } from \"../entity/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class StateValueChangedEventHandler extends EventHandler {\r\n\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const changePaths = this.cleanEventPath(event.path);\r\n        changePaths.splice(0, 0, STATE_TEMPLATE);\r\n        const eventPath = changePaths.join('/');\r\n        if (deps.includes(eventPath)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        // const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    const bindingType = expressionObject.bindingType;\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    if (bindingType === Expression.ExpressionBindingType.State) {\r\n      // 如果表达式作用于uistate\r\n      effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n    } else if (bindingType === Expression.ExpressionBindingType.Field) {\r\n      // 表达式作用于实体属性\r\n      const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n      const bindingPaths = expressionPathInfo.paths;\r\n      const entities = this.repository.entityCollection.getAllEntities();\r\n      if (!entities || entities.length < 1 || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n      } else {\r\n        this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, (currentRows: Expression.ICurrentRow[], paths: string[]) => {\r\n          this.output(event, expressionObject, currentRows, effector, [paths]);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  private effectRows(entities: Entity[], bindingPaths: string[], propertyNames: string[], callback: (currentRows: Expression.ICurrentRow[], paths: string[]) => void, currentRows: Expression.ICurrentRow[] = [], prevPaths: string[] = [], paths: string[] = []) {\r\n    if (!bindingPaths || bindingPaths.length < 1) {\r\n      entities.forEach((entity: Entity) => {\r\n        if (!entity || !entity.primaryValue) {\r\n          return;\r\n        }\r\n        const currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);\r\n        const currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);\r\n        callback(currentCurrentRows, currentPaths);\r\n      });\r\n      currentRows.length = 0;\r\n      paths.length = 0;\r\n    } else {\r\n      let flag = false;\r\n      let nextPrevPaths = prevPaths;\r\n      entities.forEach((entity: Entity) => {\r\n        const prop = bindingPaths[0];\r\n        const entityList = entity[prop] as EntityList<Entity>;\r\n        if (!entityList || entityList.count() < 1) {\r\n          // 下级表没有数据\r\n          return;\r\n        }\r\n        currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });\r\n        paths.push(entity.primaryValue);\r\n        paths.push(prop);\r\n        if (flag === false) {\r\n          flag = true;\r\n          nextPrevPaths.push(prop);\r\n        }\r\n        const nextBindingPaths = bindingPaths.slice(1);\r\n        this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths, paths);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths\r\n   * @param event\r\n   * @returns\r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): { [prop: string]: any; } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Entity } from \"../entity/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryAddEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryRemoveEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n}","import { EventHandler } from \"./event_handler\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { Injectable } from \"@angular/core\";\r\n@Injectable()\r\nexport class RepositoryLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class EntityUpdateEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n      // 重新加载实体时不计算计算表达式，只处理只读、必填等\r\n      if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {\r\n        return false;\r\n      }\r\n      const result = this.analysis(event, expressionObject);\r\n      if (!result) {\r\n        return false;\r\n      }\r\n      // 必须是主表表达式\r\n      if (result.expressionTablePaths.length !== 0) {\r\n        return false;\r\n      }\r\n      const index = expressionObject.deps.findIndex((dep: string) => {\r\n        if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n          return false;\r\n        }\r\n        const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n        const depPathInfo = this.getPathInfo(deps.join('/'));\r\n        if (!depPathInfo) {\r\n          return false;\r\n        }\r\n        if (depPathInfo.paths.length !== 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return index === -1 ? false : true;\r\n    });\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs) {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE, STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataAppendObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // const fullEventPath = event.path || [];\r\n      // event.path like [\"id:7dd77e50-ebed-4639-b483-d12004603640\", \"formEEUR1E1s\"] or undefined or []\r\n      // eventTablePaths like [] or [\"子表s\"]\r\n\r\n      // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方\r\n      // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性\r\n      const groupExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // const eventEntityPath = this.buildEntityPath(event.path);\r\n        // 主表新增\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            // 认为主表新增时不需要处理聚合函数\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表新增\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      const eventTablePaths = this.buildEntityPath(event.path);\r\n      // 事件表中表达式（事件表本身的表达式）\r\n      const relativeExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式\r\n        if (expressionObject.ns !== event.ns) {\r\n          return false;\r\n        }\r\n        const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n        // 过滤掉非当前表的表达式\r\n        if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n          return false;\r\n        }\r\n        // 表达式是计算或依赖表达式并且是分层加载场景，不计算，仅当依赖变化时计算\r\n        if ((expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency) && event.isTreeNodeLoadScene) {\r\n          return false;\r\n        }\r\n        // 没有依赖的表达式\r\n        if (!expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return true;\r\n        }\r\n        // 仅依赖State\r\n        const onlyDependOnState = expressionObject.deps.every((dep: string) => dep.startsWith(STATE_TEMPLATE));\r\n        // 仅依赖当前表或上级表\r\n        // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {\r\n        //   if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n        //     return false;\r\n        //   }\r\n        //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);\r\n        //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n        //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;\r\n        // });\r\n        // if (onlyDependOnState || onlyDependOnCurrentTable) {\r\n        //   return true;\r\n        // }\r\n        if (onlyDependOnState) {\r\n          return true;\r\n        }\r\n\r\n        const result = this.analysis(event, expressionObject);\r\n        if (result && result.distance === 0 && result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 事件表表达式，但依赖下级表的未计算\r\n        return false;\r\n      });\r\n\r\n      // 依赖当前加载数据的表达式\r\n      const depExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1 || (expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {\r\n          return false;\r\n        }\r\n        // 过滤出所有实体依赖\r\n        const deps = expressionObject.deps.filter((dep: string) => dep.startsWith(ENTITY_TEMPLATE));\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表\r\n        // 1、计算事件表路径\r\n        const eventPath = event.path.filter(p => p).join('/');\r\n        // 2、获取依赖字段的表路径\r\n        const index = deps.findIndex((dep: string) => {\r\n          // 去掉ENTITY~前缀\r\n          const depPath = dep.split('/').slice(1).join('/');\r\n          // 获取依赖字段所在的表路径\r\n          const { path } = this.getPathInfo(depPath);\r\n          return path === eventPath;\r\n        });\r\n        return index !== -1;\r\n      });\r\n      return groupExpressions.concat(relativeExpressions, depExpressions);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n          // console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n  /**\r\n   * 新增副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 新增场景需要计算事件表\\事件表上面的表\\下层表的可见、必填、校验\r\n      if (info.distance === 0) {\r\n        if (!info.isSameTable) {\r\n          return;\r\n        }\r\n        // 表达式和事件在同一个表\r\n        const prevPaths = eventPath.slice(0);\r\n        if (eventPath.length === 1) {\r\n          // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push([bindingObject.primaryKeyValue].concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const path = prevPaths.concat(propertyPaths);\r\n            paths.push(path);\r\n          }\r\n        } else {\r\n          // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push(prevPaths.concat([bindingObject.primaryKeyValue]).concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const bindingList = this.bindingData.getValue(info.eventTablePaths) as BindingList;\r\n            if (bindingList && bindingList.currentId) {\r\n              paths.push(prevPaths.concat(bindingList.currentId).concat(propertyPaths));\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 仅处理下级表，跨表跳过\r\n          if (info.expressionTablePaths.length > 1) {\r\n            return;\r\n          }\r\n          // 下层表的可见、必填、校验\r\n          let prevPaths = eventPath.slice(0, eventPath.length);\r\n          // 子表新增\r\n          if (eventPath && eventPath.length > 0) {\r\n            prevPaths = eventPath.slice(0, eventPath.length);\r\n          } else {\r\n            // 主表新增\r\n            prevPaths = [this.bindingData.list.currentId, info.expressionTablePaths[0], null];\r\n          }\r\n\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      paths.forEach((path: any[]) => {\r\n        const currentRows = this.buildCurrentRows(info.expressionTablePaths, path);\r\n        this.output(event, expressionObject, currentRows, effector, [path]);\r\n      });\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { EffectorManager } from '../effector/effector_manager';\r\nimport { BindingList } from '../binding-data';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { EventHandler } from './event_handler';\r\n\r\n@Injectable()\r\nexport class BindingDataValueChangeEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const eventEntityPaths = this.getEntityPath(event.path);\r\n        eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        return deps.includes(eventEntityPaths.join('/'));\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 输出副作用\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    // 首先计算当前表达式和事件会影响那些路径\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const result = this.analysis(event, expressionObject);\r\n    if (!result) {\r\n      return;\r\n    }\r\n    const eventPaths = this.cleanEventPath(event.path);\r\n    const paths: any[][] = [];\r\n    if (result.distance === 0) {\r\n      // 值变化之后影响到了一个表内字段或影响到了同级表字段\r\n      if (result.isSameTable === false) {\r\n        // 同级表跳过\r\n        //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n        return;\r\n      }\r\n      const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n      const path = prevPaths.concat(result.expressionPropertyNames);\r\n      const currentRows = this.buildCurrentRows(result.eventTablePaths, path);\r\n      paths.push(path);\r\n      this.output(event, expressionObject, currentRows, effector, paths);\r\n    } else {\r\n      if (result.eventFromChildren === true) {\r\n        if (result.distance > 1) {\r\n          return;\r\n        }\r\n        // 下级表值变化影响到了上级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);\r\n        const path = prevPaths.concat(result.expressionPropertyNames);\r\n        paths.push(path);\r\n        const currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);\r\n        this.output(event, expressionObject, currentRows, effector, paths);\r\n      } else if (result.eventFromParent === true) {\r\n        if (result.distance > 1) {\r\n          //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n          return;\r\n        }\r\n        // 上级表值变化影响到了下级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n        // 添加下级表nodecode到路径中\r\n        prevPaths.push(result.expressionTablePaths.slice(0).pop());\r\n        // 遍历子表\r\n        const bindingPaths = result.expressionTablePaths;\r\n        const primaryKeyValue = eventPaths[0];\r\n        if (!primaryKeyValue) {\r\n          return;\r\n        }\r\n        let object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);\r\n        // prevPaths like [1,c,1.1,cc]\r\n        for (let index = 1; index < prevPaths.length; index++) {\r\n          const propertyName = prevPaths[index];\r\n          if (object instanceof EntityList) {\r\n            object = object.get(propertyName);\r\n          } else {\r\n            object = object[propertyName];\r\n          }\r\n        }\r\n        const list = object;\r\n        if (list && list instanceof EntityList) {\r\n          if (list.count() === 0) {\r\n            if (expressionObject.type === Expression.ExpressionType.Visible || expressionObject.type === Expression.ExpressionType.Required) {\r\n              const context = this.buildContext(expressionObject, event);\r\n              const value = this.perform(expressionObject, context);\r\n              if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n                return;\r\n              }\r\n              expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);\r\n              if (expressionObject.id) {\r\n                this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n              }\r\n              super.effect(event, expressionObject);\r\n            }\r\n          } else {\r\n            for (let entity of list) {\r\n              if (entity && entity.primaryValue) {\r\n                const path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);\r\n                const currentRows = this.buildCurrentRows(result.expressionTablePaths, path);\r\n                this.output(event, expressionObject, currentRows, effector, [path]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 跨表\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n      return;\r\n    }\r\n    expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n/**\r\n * 删除数据时需要计算的表达式\r\n * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）\r\n */\r\n@Injectable()\r\nexport class BindingDataRemoveObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // 找到聚合相关表达式\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // event.path like [id:xxxx] or [id:xxxx,子表s]\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        // 主表删除\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表删除\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      return expressions;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 删除副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 删除场景仅需要计算事件表上面的表\r\n      if (info.distance !== 0) {\r\n        // 表达式和事件不在同一个表，即下级表删除了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 在过滤时这种情况的应该就排除掉了\r\n          return;\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      EffectorManager.effect(effector, expressionObject, paths);\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    // 过滤第一次空load\r\n    if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {\r\n      return null;\r\n    }\r\n    // 数据加载完成后需要计算当前绑定路径下的只读、显隐、必填、校验表达式\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 影响一个表达式是否要计算的因子有两个：表达式作用的字段、表达式的依赖\r\n        // 以下判断的前提时数据加载场景！！\r\n        // 1、表达式作用的字段\r\n        //    如果加载的数据对应的表就是表达式字段所在的表，应该计算\r\n        // 2、表达式依赖\r\n        //    如果表达式依赖的字段加载了，应该计算\r\n        //    如果表达式没有任何依赖，应该计算\r\n        if (result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 如果没有依赖则应该计算，保证只读、必填、显隐、校验表达式结果正确\r\n        if (!expressionObject.deps || expressionObject.deps.length === 0) {\r\n          return true;\r\n        }\r\n\r\n        // 过滤出所有实体依赖\r\n        const deps = expressionObject.deps.filter((dep: string) => dep.startsWith(ENTITY_TEMPLATE));\r\n        // 未依赖实体，只依赖了uistate，那么绑定数据加载时不需要计算\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表\r\n        // 1、计算事件表路径\r\n        const eventTablePath = this.buildEntityPath(event.path).join('/');\r\n        // 2、获取依赖字段的表路径\r\n        const index = deps.findIndex((dep: string) => {\r\n          // 去掉ENTITY~前缀\r\n          const depPath = dep.split('/').slice(1).join('/');\r\n          // 获取依赖字段所在的表路径\r\n          const { path } = this.getPathInfo(depPath);\r\n          return path === eventTablePath;\r\n        });\r\n        return index !== -1;\r\n      });\r\n      return expressions;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n@Injectable()\r\nexport class BindingDataSelectionChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        // 没有依赖的表达式不需要关注\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 不依赖实体的表达式不需要关注\r\n        let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 只关注从表行切换\r\n        if (result.eventTablePaths.length !== 1) {\r\n          return false;\r\n        }\r\n        // 只关注从从表表达式\r\n        if (result.expressionTablePaths.length !== 2) {\r\n          return false;\r\n        }\r\n        // 只关注事件直接下级的表达式，跨表的不需要关注\r\n        if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {\r\n          return false;\r\n        }\r\n        // 从从表表达式需要依赖上级表\r\n        index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  public dispatch(event: Expression.EventArgs): void {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Optional } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { EVENT_HANDLER_TOKEN } from \"../expression/tokens\";\r\nimport { RepositoryAddEntityEventHandler } from \"./repository_add_entity_event_handler\";\r\nimport { RepositoryRemoveEntityEventHandler } from \"./repository_remove_entity_event_handler\";\r\nimport { EntityValueChangedEventHandler } from \"./entity_value_changed_event_handler\";\r\nimport { StateValueChangedEventHandler } from \"./state_value_changed_event_handler\";\r\nimport { EntityUpdateEventHandler } from \"./entity_update_event_handler\";\r\nimport { RepositoryLoadEventHandler } from \"./repository_load_event_handler\";\r\nimport { BindingDataAppendObjectEventHandler } from \"./binding_data_append_object_event_handler\";\r\nimport { BindingDataValueChangeEventHandler } from \"./binding_data_value_change_event_handler\";\r\nimport { BindingDataRemoveObjectEventHandler } from \"./binding_data_remove_object_event_handler\";\r\nimport { BindingDataLoadEventHandler } from \"./binding_data_load_event_handler\";\r\nimport { BindingDataSelectionChangedEventHandler } from \"./binding_data_selection_changed_event_handler\";\r\n\r\n@Injectable()\r\nexport class EventHandlerRegistry {\r\n  constructor(@Optional() @Inject(EVENT_HANDLER_TOKEN) public handlers: Expression.IEventHandler[]) { }\r\n  /**\r\n   * 实体值变化处理器\r\n   */\r\n  public get entityValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityValueChangedEventHandler);\r\n  }\r\n  /**\r\n   * 状态值变化处理器\r\n   */\r\n  public get stateValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof StateValueChangedEventHandler);\r\n  }\r\n  public get repositoryAddEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryAddEntityEventHandler);\r\n  }\r\n  public get repositoryRemoveEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryRemoveEntityEventHandler);\r\n  }\r\n  public get entityUpdateEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityUpdateEventHandler);\r\n  }\r\n  public get repositoryLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryLoadEventHandler);\r\n  }\r\n  public get bindingDataAppendEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataAppendObjectEventHandler);\r\n  }\r\n  public get bindingDataValueChangeEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataValueChangeEventHandler);\r\n  }\r\n  public get bindingDataRemoveObjectEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataRemoveObjectEventHandler);\r\n  }\r\n  public get bindingDataLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataLoadEventHandler);\r\n  }\r\n  public get bindingDataSelectionChangedHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataSelectionChangedEventHandler);\r\n  }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { ExpressionRegistry } from './expression_registry';\r\nimport { ExpressionEventEmitter } from './expression_event_emitter';\r\nimport { Expression } from './types';\r\nimport { ResolverRegistry, ResolveService } from '../resolver/index';\r\nimport { EventHandlerRegistry } from '../event-handler/index';\r\nimport { Core } from '../core/index';\r\n\r\n@Injectable()\r\nexport class ExpressionEngineImpl {\r\n  private expressionObjects: Array<Expression.ExpressionObject> = new Array<Expression.ExpressionObject>();\r\n  constructor(\r\n    private injector: Injector,\r\n    private expressionRegistry: ExpressionRegistry,\r\n    private expressionEventEmitter: ExpressionEventEmitter,\r\n    private resolverRegistry: ResolverRegistry,\r\n    private eventHandlerRegistry: EventHandlerRegistry,\r\n    private resolveService: ResolveService,\r\n  ) {\r\n    this.expressionRegistry.expressions.subscribe((exprs: Expression.ExpressionObject[]) => {\r\n      if (exprs && exprs.length > 0) {\r\n        this.expressionObjects = exprs;\r\n        // 解析表达式依赖\r\n        this.resolveDependency();\r\n      }\r\n      this.attachEvent();\r\n    });\r\n  }\r\n\r\n  private attachEvent() {\r\n    this.expressionEventEmitter.attach().subscribe((events: Expression.EventArgs[]) => {\r\n      if (!events || events.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1) {\r\n        return;\r\n      }\r\n      events.forEach((event: Expression.EventArgs) => {\r\n        const handler = this.getEventHandler(event);\r\n        if (handler) {\r\n          handler.handleEvent(event, this.expressionObjects);\r\n        } else {\r\n          Core.warn(`没有对应的事件处理器,event=${event.type}`);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 解析表达式依赖\r\n   * @returns\r\n   */\r\n  private resolveDependency() {\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {\r\n      return;\r\n    }\r\n    this.expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expression = expressionObject.expression;\r\n      const dependencies = this.resolveService.resolve(expression);\r\n      expressionObject.deps = dependencies;\r\n    });\r\n  }\r\n  /**\r\n   * 获取表达式事件处理器\r\n   * @param event event\r\n   * @returns\r\n   */\r\n  private getEventHandler(event: Expression.EventArgs): Expression.IEventHandler {\r\n    if (event.type === Expression.EventType.ValueChanged) {\r\n      // 实体值变化\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;\r\n      } else if (event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.entityValueChangedEventHandler;\r\n      } else if (event.source === Expression.EventSource.State) {\r\n        return this.eventHandlerRegistry.stateValueChangedEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Append) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryAddEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Remove) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Update) {\r\n      if (event.source === Expression.EventSource.Repository) {\r\n        return this.eventHandlerRegistry.entityUpdateEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Load) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryLoadEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataLoadEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.SelectionChanged) {\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { ComponentRef } from \"@angular/core\";\r\n/**\r\n * 组件实例管理\r\n */\r\nexport class ComponentRefManager {\r\n  private components: Map<string, any[]> = new Map<string, any[]>();\r\n  /**\r\n   * 增加组件实例\r\n   * @param id \r\n   * @param component \r\n   */\r\n  public add(id: string, component: any) {\r\n    const components = this.components.get(id);\r\n    if (components) {\r\n      components.push(component);\r\n    } else {\r\n      this.components.set(id, [component]);\r\n    }\r\n  }\r\n  /**\r\n   * 删除组件实例\r\n   * @param id \r\n   */\r\n  public remove(id: string) {\r\n    const components = this.components.get(id);\r\n    if (components && components.length > 0) {\r\n      components.length = 0;\r\n      this.components.delete(id);\r\n    }\r\n  }\r\n  /**\r\n   * 通过id获取组件实例\r\n   * @param id \r\n   * @returns \r\n   */\r\n  public get(id: string) {\r\n    if (id) {\r\n      const components = this.components.get(id);\r\n      if (components && components.length > 0) {\r\n        return components;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 是否包含id的组件\r\n   * @param id \r\n   * @returns \r\n   */\r\n  public has(id: string) {\r\n    return this.components.has(id);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.components.clear();\r\n  }\r\n  /**\r\n   * 获取指定类型的组件\r\n   * @param componentType \r\n   * @returns \r\n   */\r\n  public getComponentByType(componentType: any): any {\r\n    const containers = Array.from(this.components.values());\r\n    let component = null;\r\n    for (let containerIndex = 0; containers && containerIndex < containers.length; containerIndex++) {\r\n      const components = containers[containerIndex];\r\n      for (let index = 0; components && index < components.length; index++) {\r\n        if (components[index] instanceof componentType) {\r\n          component = components[index];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return component;\r\n  }\r\n}","import { Injector, Injectable, Optional, SkipSelf, InjectFlags, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';\r\nimport { Context } from '../context/index';\r\nimport { AppContext } from '../app/index';\r\nimport { RouterParamService } from '../misc/index';\r\nimport { FRAME_ID, NAMESPACE } from './tokens';\r\nimport { Change, ChangeType } from '../binding-data/index';\r\nimport { EventBus } from '../event-bus-new/index';\r\nimport { FrameComponent } from './frame_component';\r\nimport { IExceptionHandler } from '../exception/types';\r\nimport { EXCEPTION_HANDLER } from '../exception/tokens';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { Translate } from '../i18n';\r\nimport { UserSettings } from '../i18n/types';\r\nimport { UserSettingsToken } from '../i18n/tokens';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ExpressionEngineImpl } from '../expression/expression_engine_impl';\r\nimport { ExpressionManager } from '../expression/expression_manager';\r\nimport { ExpressionResult } from '../expression/expression_result';\r\nimport { ExpressionResultFactory } from '../expression/expression_result_factory';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser\r\n} from '../variable';\r\nimport { ChangeSetPolicy, CHANGE_SET_POLICY_TOKEN, RunMode, ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN,DestroyOpportunity } from '../core';\r\nimport { Subject } from 'rxjs';\r\nimport { IDisposable } from '../core/index';\r\nimport { ComponentRefManager } from './component_ref_manager';\r\n\r\n\r\n/**\r\n * 组件上下文\r\n * @description \r\n * # 上下文\r\n * ## Overview\r\n * \r\n * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：\r\n * \r\n * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix_2110/farris/devkit/guide/images/image-20210806204755378.png)\r\n * \r\n * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。\r\n * \r\n * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：\r\n * \r\n * ```typescript\r\n * // 方法1\r\n * const rootFrameContext = this.frameContext.root;\r\n * // 方法2\r\n * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');\r\n * ```\r\n * \r\n * 通常在编写`Web构件`时先引入FrameContext，如：\r\n * \r\n * ```javascript\r\n * import {FrameContext,BindingData,Repository} from '@farris/devkit';\r\n * \r\n * constructor(private frameContext:FrameContext){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.frameContext.bindingData;\r\n *     const repository: Repository = this.frameContext.repository;\r\n * }\r\n * ```\r\n * \r\n * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。\r\n * \r\n * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：\r\n * \r\n * ```typescript\r\n * import {BindingData,Repository,ViewModel} from '@farris/devkit';\r\n * \r\n * constructor(private viewModel:ViewModel){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.viewModel.bindingData;\r\n *     const repository: Repository = this.viewModel.repository;\r\n * }\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用操作\r\n * \r\n * ### 获取当前上下文所属的组件\r\n * \r\n * ```typescript\r\n * this.frameContext.frameComponent;\r\n * ```\r\n * \r\n * ### 获取当前上下文的根上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.root;\r\n * ```\r\n * \r\n * ### 获取当前上下文的appContext\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext;\r\n * ```\r\n * \r\n * ### 获取指定frameId的上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n * ```\r\n * \r\n * ### 获取表单所有上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用属性\r\n * \r\n * ### BindingData \r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))\r\n * \r\n * ### Repository\r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))\r\n * \r\n * ### ViewModel\r\n * \r\n * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。\r\n * \r\n * ### namespace\r\n * \r\n * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。\r\n * \r\n * ### root\r\n * \r\n * 获取整个表单的根上下文\r\n * \r\n * ### uiState\r\n * \r\n * 获取当前组件的变量\r\n * \r\n * ### frameId\r\n * \r\n * 上下文标识。\r\n */\r\n@Injectable()\r\nexport class FrameContext extends Context implements IDisposable, OnDestroy {\r\n\r\n  public typeName = 'FrameContext';\r\n\r\n  protected isDestoried = false;\r\n  public isDisposed = false;\r\n  /**\r\n   * id\r\n   */\r\n  public frameId: string;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  // public injector: Injector;\r\n\r\n  /**\r\n   * 应用上下文\r\n   */\r\n  public appContext: AppContext;\r\n\r\n  /**\r\n   * 根组件上下文\r\n   */\r\n  public root: FrameContext;\r\n\r\n  /**\r\n   * 父ViewModel\r\n   */\r\n  public parent: FrameContext;\r\n\r\n  /**\r\n   * 后代节点\r\n   */\r\n  public children: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 命令总线\r\n   */\r\n  public commandBus: CommandBus;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 数据绑定\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 表单\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 所属组件\r\n   */\r\n  public frameComponent: FrameComponent;\r\n\r\n  /**\r\n   * 异常处理\r\n   */\r\n  public exceptionHandler: IExceptionHandler;\r\n\r\n  /**\r\n   * 表单命名空间\r\n   */\r\n  public namespace: string;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public metadata: IContextMetadata = {\r\n    identify: '',\r\n    namespace: '',\r\n    commands: null,\r\n    form: null,\r\n    formControls: null,\r\n    subForms: null,\r\n    stateMachine: null,\r\n    uiStates: null,\r\n    bindingTo: ''\r\n  };\r\n\r\n  /**\r\n   * 暂停事件抛出\r\n   */\r\n  public suspend: boolean;\r\n  public expressionEngineImpl: ExpressionEngineImpl;\r\n  public expressionManager: ExpressionManager;\r\n  public expressionResult: ExpressionResult;\r\n  /**\r\n   * 索引(从0开始)\r\n   */\r\n  public index: number;\r\n  /**\r\n   * 多语\r\n   */\r\n  public translate: Translate;\r\n  /**\r\n   * 上下文销毁流\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  /**\r\n   * 组件引用管理\r\n   */\r\n  public componentRefManager: ComponentRefManager = new ComponentRefManager();\r\n  /**\r\n   * 启用后端变更检测\r\n   */\r\n  public enableServerSideChangeDetection: boolean = false;\r\n  /**\r\n   * 构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(public injector: Injector, @Optional() @SkipSelf() parent: FrameContext) {\r\n    super();\r\n    // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。\r\n    this.appContext = injector.get(AppContext);\r\n    this.destorySignal = new Subject<any>();\r\n    // 确定父子关系\r\n    // 必须对appContext进行判断，原因如下：\r\n    // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；\r\n    // 2、进而导致从RootFrameContext上拿VO变量拿不到。\r\n    if (!parent || parent.appContext !== this.appContext) { // 取消 appContext 的判断\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n    this.frameId = injector.get<string>(FRAME_ID);\r\n    if (this.appContext.contextMetadataManager.exsit(this.frameId)) {\r\n      this.metadata = this.appContext.contextMetadataManager.getContextMetadataByName(this.frameId);\r\n    }\r\n    this.namespace = injector.get(NAMESPACE, null);\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, new BindingData());\r\n    if (!this.appContext.useIsoluteEventBus || (this.appContext.useIsoluteEventBus && !this.appContext.isoluteEventBus)) {\r\n      this.eventBus = this.injector.get(EventBus, null, InjectFlags.Optional);\r\n    } else {\r\n      this.eventBus = this.appContext.isoluteEventBus;\r\n    }\r\n    this.form = this.injector.get<Form>(Form, new Form());\r\n    this.repository = this.injector.get(Repository, this.appContext.repository);\r\n    // 获取变更集策略，默认只提交合法的变更\r\n    const changeSetPolicy = this.injector.get<ChangeSetPolicy>(CHANGE_SET_POLICY_TOKEN, 'valid');\r\n    if (this.repository) {\r\n      this.repository.entityCollection.changeSetPolicy = changeSetPolicy;\r\n    }\r\n    this.enableServerSideChangeDetection = this.injector.get<boolean>(ENABLE_SERVER_SIDE_CHANGE_DETECTION_TOKEN, false);\r\n    this.uiState = this.injector.get<UIState>(UIState, new UIState());\r\n    const defaultViewModel = new ViewModel();\r\n    defaultViewModel.setMetadata(this.metadata);\r\n    this.viewModel = this.injector.get<ViewModel>(ViewModel, defaultViewModel);\r\n    this.variableParseService = injector.get<VariableParseService>(VariableParseService, new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]));\r\n    // 注入exceptionHandler\r\n    this.exceptionHandler = injector.get<IExceptionHandler>(EXCEPTION_HANDLER, null, InjectFlags.Optional);\r\n    // 初始化多语服务\r\n    const translate = injector.get<Translate>(TranslateToken, null);\r\n    this.translate = translate;\r\n    TranslateService.setTranslate(translate);\r\n    // 初始化用户配置\r\n    const userSettings = injector.get<UserSettings>(UserSettingsToken, null);\r\n    UserSettingsService.setUserSettings(userSettings);\r\n    this.initializeRepository();\r\n    this.appContext.regFrameContext(this);\r\n    this.registerAppContextDestroyEvent();\r\n  }\r\n  dispose(options?: any): void {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    this.isDestoried = true;\r\n    this.isDisposed = true;\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n    if (this.appContext) {\r\n      this.appContext.frameContextManager.unregFrameContext(this);\r\n      this.appContext.frameComponentRefresher.unregFrameContext(this);\r\n    }\r\n    if (this.appContext && this.isRootFrameContext() === true) {\r\n      const viewModelNames = this['viewModelNames'];\r\n      if (viewModelNames && Array.isArray(viewModelNames)) {\r\n        viewModelNames.forEach(name => {\r\n          this[name] = null;\r\n        });\r\n      }\r\n      this.appContext.unregisterFromManager();\r\n    }\r\n    if (this.bindingData) {\r\n      this.bindingData.dispose();\r\n      // this.bindingData = null;\r\n    }\r\n    if (this.viewModel) {\r\n      this.viewModel.dispose();\r\n    }\r\n    if (this.form) {\r\n      this.form.dispose();\r\n      this.form = null;\r\n    }\r\n    if (this.commandBus) {\r\n      this.commandBus.dispose();\r\n      this.commandBus = null;\r\n    }\r\n    TranslateService.dispose();\r\n    // this.root = null;\r\n    // this.parent = null;\r\n    // this.uiState = null;\r\n    this.frameComponent = null;\r\n    this.repository = null;\r\n    // this.stateMachine = null;\r\n    // this.appContext = null;\r\n    this.exceptionHandler = null;\r\n    this.expressionManager = null;\r\n    this.expressionEngineImpl = null;\r\n    this.variableParseService = null;\r\n    this.eventBus = null;\r\n    this.translate = null;\r\n    this.injector = null;\r\n    this.expressionResult = null;\r\n    UserSettingsService.setUserSettings(null);\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  /**\r\n   * 通过组件标识获取对应的组件实例\r\n   * @param id 组件标识\r\n   * @returns \r\n   */\r\n  public getComponentById<T>(id: string): T {\r\n    const components = this.componentRefManager.get(id);\r\n    if (components && components.length > 0) {\r\n      const component = components[0] as T;\r\n      return component;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取指定标识的所有组件\r\n   * @param id 组件标识\r\n   */\r\n  public getComponentsById<T>(id: string): T[] {\r\n    return this.componentRefManager.get(id) as T[];\r\n  }\r\n  bindInjector(componentInjector: Injector) {\r\n    this.injector = componentInjector;\r\n  }\r\n\r\n  // #region 初始化\r\n\r\n  /**\r\n   * 初始化\r\n   * @todo:\r\n   * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext\r\n   * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    this.frameComponent = frameComponent;\r\n    this.initializeBindingData();\r\n    this.initializeStateMachine();\r\n    this.initializeUiState();\r\n    this.initializeForm();\r\n    this.initializeCommandBus();\r\n    this.initializeViewModel();\r\n    this.registerExceptionHandler();\r\n    this.initExpression();\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n  public initExpression() {\r\n    this.expressionEngineImpl = this.injector.get<ExpressionEngineImpl>(ExpressionEngineImpl, null);\r\n    this.expressionManager = this.injector.get<ExpressionManager>(ExpressionManager, null);\r\n    const expressionResultFactory = this.injector.get<ExpressionResultFactory>(ExpressionResultFactory, null);\r\n    this.expressionResult = this.injector.get<ExpressionResult>(ExpressionResult, null);\r\n  }\r\n  /**\r\n   * 订阅异常消息\r\n   */\r\n  protected registerExceptionHandler() {\r\n    // tslint:disable: no-string-literal\r\n    const formAppContext = this.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    window[window.location.href] = applicationId;\r\n    if (this.exceptionHandler !== null) {\r\n      const applicationContext = window[applicationId] = window[applicationId] || {};\r\n      if (this.eventBus !== null && this.isRootFrameContext()) {\r\n        applicationContext.isExceptionHandlerExist = true;\r\n        this.exceptionHandler.setContext(this.appContext);\r\n        this.eventBus.on('Exception', '', 'onException', formAppContext, (error) => {\r\n          if (this.isDestoried === true) {\r\n            return;\r\n          }\r\n          if (error && error.error) {\r\n            try {\r\n              error.error.__frame_context__ = this;\r\n            } catch { }\r\n          }\r\n          this.exceptionHandler.handle(error);\r\n        });\r\n      }\r\n      this.destorySignal.subscribe(() => {\r\n        this.eventBus.off('Exception', '', 'onException', formAppContext);\r\n      });\r\n    }\r\n  }\r\n  protected registerAppContextDestroyEvent() {\r\n    if (this.appContext && this.appContext.destorySignal) {\r\n      this.appContext.destorySignal.subscribe((options: any) => {\r\n        if (this.stateMachine) {\r\n          // 仅当菜单关闭时销毁\r\n          if (!(options && options.opportunity === DestroyOpportunity.AppContextDestroy)) {\r\n            this.stateMachine.dispose();\r\n            this.stateMachine = null;\r\n          }\r\n        }\r\n        if (this.repository) {\r\n          this.repository.dispose();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取表单appcontext，即最上层appcontext\r\n   */\r\n  public getFormAppContext() {\r\n    return this.appContext;\r\n  }\r\n  /**\r\n   * 获取frameId\r\n   * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId\r\n   */\r\n  public getFrameId(relativeFrameId: string) {\r\n    if (!relativeFrameId) {\r\n      return this.frameId;\r\n    }\r\n    if (this.namespace && this.namespace.length > 0) {\r\n      return `${this.namespace}_${relativeFrameId}`;\r\n    } else {\r\n      return relativeFrameId;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化Repository\r\n   */\r\n  private initializeRepository() {\r\n\r\n    this.repository.setPaginationConfig(this.repository.paginationInfo);\r\n  }\r\n\r\n  private initializeForm() {\r\n    // 设置Form语言服务\r\n    // this.form.setTranslateService(translateService);\r\n    // 初始化Form，提取FormControl定义，添加FormControl\r\n    // this.form.init(this.bindingData, this.metadata.bindingTo, this);\r\n    // Form\r\n    this.form = this.injector.get<Form>(Form, null);\r\n    if (this.form) {\r\n      // 设置Form语言服务\r\n      this.form.setTranslateService(this.injector.get(TranslateToken, null));\r\n      // 初始化Form，提取FormControl定义，添加FormControl\r\n      const bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;\r\n      this.form.init(this.bindingData, bindingPath, this);\r\n    }\r\n  }\r\n\r\n  private initializeStateMachine() {\r\n    // StateMachine 状态机需要在绑定数据之后加载\r\n    this.stateMachine = this.injector.get<StateMachine>(StateMachine, null);\r\n    if (this.stateMachine) {\r\n      this.stateMachine.initialize(this, this.variableParseService);\r\n    }\r\n  }\r\n\r\n  private initializeCommandBus() {\r\n    const handlerRegistry = this.injector.get<CommandHandlerRegistry>(CommandHandlerRegistry,\r\n      new CommandHandlerRegistry(this.metadata.commandHandlers));\r\n    const extendsRegistry = this.injector.get<CommandHandlerExtenderRegistry>(CommandHandlerExtenderRegistry,\r\n      new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));\r\n    const commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);\r\n    this.commandBus = new CommandBus(commandHandlerFactory);\r\n  }\r\n\r\n  /**\r\n   * 初始化ViewModel\r\n   * @todo\r\n   * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；\r\n   * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；\r\n   */\r\n  private initializeViewModel() {\r\n    if (!this.metadata.bindingTo) {\r\n      this.metadata.bindingTo = this.viewModel.bindingPath;\r\n    }\r\n    this.viewModel.init(this);\r\n    this.regViewModel(this.viewModel);\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化BindingData\r\n   * @summary\r\n   * 老表单：repositoryName为空，复制当前Repository里的数据；\r\n   * 新表单：repositoryName有值，引用全局BindingData里的数据；\r\n   */\r\n  private initializeBindingData() {\r\n    const repositoryName = this.repository.name;\r\n    const isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;\r\n    if (repositoryName && isRunAtHighSpeedMode) {\r\n      const repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);\r\n      this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);\r\n      this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;\r\n      this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n    } else {\r\n      this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if (change.type === ChangeType.GlobalSelectionChanged) {\r\n          this.appContext.handleSelectChange(change, this);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化UIState\r\n   * 合并路由参数到UIState中\r\n   */\r\n  private initializeUiState() {\r\n    const isInFramework = window.location.href.indexOf('platform') > -1;\r\n    const paramTypeTransform = this.injector.get<boolean>(PARAM_TYPE_TRANSFORM_TOKEN, false);\r\n    // 获取UIState\r\n    this.uiState = this.injector.get<UIState>(UIState, null);\r\n    if (!this.uiState) {\r\n      return;\r\n    }\r\n    this.uiState.paramTypeTransform = paramTypeTransform;\r\n    this.uiState.initialize(this);\r\n    // 获取路由参数\r\n    const url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';\r\n    const routerParamService = new RouterParamService();\r\n    const routerParams = routerParamService.getParams(url);\r\n\r\n    // 在UIState为路由参数创建属性\r\n    Object.keys(routerParams).forEach((propName: string) => {\r\n      Object.defineProperty(this.uiState, propName, {\r\n        get: () => {\r\n          return routerParams[propName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册子ViewModel\r\n   * @todo\r\n   * 1、propName写死了\r\n   */\r\n  public regViewModel(viewModel: ViewModel): void {\r\n    if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {\r\n      this.appContext.viewModelManager.register(viewModel.name, viewModel);\r\n    }\r\n    const className = viewModel.constructor.name;\r\n    const parentContext = this.parent;\r\n    let parentViewModel = null;\r\n    if (parentContext && parentContext.viewModel) {\r\n      parentViewModel = parentContext.viewModel;\r\n    }\r\n    if (!parentViewModel) {\r\n      return;\r\n    }\r\n    // 优先使用生成器生成的name\r\n    const childViewModels = parentViewModel['childViewModels'];\r\n    let viewModelName = null;\r\n    if (childViewModels) {\r\n      const name = viewModel.constructor.name;\r\n      viewModelName = childViewModels[viewModel.name] || childViewModels[name];\r\n    } else if (className.length === 1) {\r\n      const classNameTokens = viewModel.name.split('-').map((nameToken, index) => {\r\n        if (index > 0 && nameToken.length) {\r\n          const pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return pasicalName;\r\n        } else if (index === 0 && nameToken.length) {\r\n          const camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return camelName;\r\n        }\r\n        return nameToken;\r\n      });\r\n      viewModelName = classNameTokens.join('');\r\n    } else if (viewModel[\"relateChildName\"]) {\r\n      // 增加该参数的目的  是为了解析表单可以进行和生成型相同的层级结构\r\n      viewModelName = viewModel[\"relateChildName\"];\r\n    }\r\n    // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则\r\n    if (!viewModelName) {\r\n      viewModelName = className[0].toLowerCase() + className.substring(1, className.length);\r\n    }\r\n    parentViewModel['viewModelNames'] = parentViewModel['viewModelNames'] || [];\r\n    parentViewModel[viewModelName] = viewModel;\r\n    parentViewModel['viewModelNames'].push(viewModelName);\r\n    viewModel.bindToParent(parentViewModel);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 检查是否为根FrameContext\r\n   * @summary\r\n   * 检查该FrameContext是不是所在AppContext中的根FrameContext\r\n   */\r\n  public isRootFrameContext() {\r\n    return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);\r\n  }\r\n  /**\r\n   * 通过namespace获取当前表单的root-framecontext(非整个表单)\r\n   * @description\r\n   * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext\r\n   */\r\n  public getVirtualRootFrameContext() {\r\n    let formFrameContext: FrameContext = this;\r\n    let parent = this.parent;\r\n    while (parent) {\r\n      // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext\r\n      if (parent.namespace === this.namespace) {\r\n        formFrameContext = parent;\r\n        parent = parent.parent;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return formFrameContext;\r\n  }\r\n\r\n\r\n  public getContextById(identify: string): any {\r\n    return this.appContext.getContextById(identify);\r\n  }\r\n\r\n  public getViewModel(viewModelName: string): ViewModel {\r\n    const renderAppContext = this.appContext;\r\n    if (renderAppContext) {\r\n      return renderAppContext.viewModelManager.getViewModelByName(viewModelName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public attachViewComponent(viewComponent: FrameComponent) {\r\n    this.frameComponent = viewComponent;\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n\r\n  public invoke(actionPath: string, $event: any) {\r\n    const actionBindingPath = actionPath.split('.');\r\n    const actionName = actionBindingPath[actionBindingPath.length - 1];\r\n    const bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :\r\n      this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);\r\n    if (!bindingViewModel) {\r\n      alert(`未匹配到'${actionPath}'命令的视图模型，请检查事件是否配置正确。`);\r\n    }\r\n    return bindingViewModel[actionName]($event);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-12 14:59:22\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-15 17:26:07\r\n */\r\n\r\nimport { Injector, Injectable, InjectFlags, Optional, ChangeDetectorRef, OnDestroy, ElementRef, Renderer, Renderer2, RendererFactory2, ComponentRef, OnInit } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { Subscription, Declaration } from '../event-mechanism/index';\r\nimport { EventPipe } from '../event-bus-new/index';\r\nimport { ComponentType, IDisposable } from '../core/index';\r\nimport { FRAME_COMPONENT_INIT_HANDLER_TOKEN, onFrameComponentInit } from './tokens';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nabstract class FrameComponent implements OnInit, OnDestroy, IDisposable {\r\n\r\n  /**\r\n   * 变更检测器\r\n   */\r\n  private cd: ChangeDetectorRef;\r\n\r\n  /**\r\n   * 框架ID\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * 框架上下文\r\n   */\r\n  public context: FrameContext;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  public subscription: Subscription;\r\n\r\n  /**\r\n   * 公开事件\r\n   */\r\n  public declaration: Declaration;\r\n\r\n  /**\r\n   * 该组件订阅的EventPipes\r\n   */\r\n  private eventPipes: IDisposable[];\r\n\r\n  private initialized = false;\r\n  /**\r\n   * 组件销毁流\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  /**\r\n   * 组件类型\r\n   */\r\n  public componentType: ComponentType;\r\n  /**\r\n   * 框架构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(protected injector: Injector) {\r\n    this.context = this.injector.get<FrameContext>(FrameContext, null);\r\n    if (this.context) {\r\n      this.initialize();\r\n    }\r\n    this.destorySignal = new Subject<any>();\r\n    // this.context.init(this);\r\n    // this.viewModel = this.context.viewModel;\r\n    // this.cd = this.getChangeDetectorRef();\r\n\r\n    // // 必须先执行context的初始化，然后再初始化Subscription\r\n    // this.initPublicEvent();\r\n\r\n    // this.initSubscription();\r\n\r\n    // this.restComponent();\r\n  }\r\n  /**\r\n   * 是否为表格组件\r\n   * @description 返回true/false时可以信任，但如果返回的是undefined则不应信任\r\n   * @warning 该属性依赖了生成代码，如果非标准的生成型工程也会导致判断失败。\r\n   */\r\n  public get isGridComponent() {\r\n    if (this.context && this.context.viewModel) {\r\n      const dataGridColumnsName = this.context.viewModel['dataGridColumnsName'] || null;\r\n      return dataGridColumnsName ? true : false;\r\n    }\r\n    return undefined;\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.eventPipes) {\r\n      this.eventPipes.forEach((eventPipe: IDisposable) => {\r\n        (eventPipe as EventPipe).disposeByCaller(this);\r\n      });\r\n    }\r\n    this.cd = null;\r\n    // this.viewModel = null;\r\n    this.context.dispose();\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initialize();\r\n  }\r\n\r\n  private initialize() {\r\n    if (!this.initialized) {\r\n      this.context.init(this);\r\n      this.viewModel = this.context.viewModel;\r\n      this.cd = this.getChangeDetectorRef();\r\n\r\n      // 必须先执行context的初始化，然后再初始化Subscription\r\n      this.initPublicEvent();\r\n\r\n      this.initSubscription();\r\n\r\n      this.restComponent();\r\n\r\n      this.onFrameComponentInit();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n  /**\r\n   * 执行组件初始化\r\n   */\r\n  private onFrameComponentInit() {\r\n    const frameComponentInitHandlers = this.injector.get<onFrameComponentInit[]>(FRAME_COMPONENT_INIT_HANDLER_TOKEN, null);\r\n    if (frameComponentInitHandlers && Array.isArray(frameComponentInitHandlers) && frameComponentInitHandlers.length > 0) {\r\n      frameComponentInitHandlers.forEach((handler: onFrameComponentInit) => {\r\n        handler.onComponentInit(this.context);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取变更检测器实例\r\n   * @todo：应该通过注入获取，但注入会引起表单编译。\r\n   */\r\n  private getChangeDetectorRef() {\r\n\r\n    // const cd = this.get<ChangeDetectorRef>(ChangeDetectorRef, null, InjectFlags.Optional);\r\n    const cd = this.injector.get(ChangeDetectorRef, null);\r\n    return cd;\r\n  }\r\n\r\n  /**\r\n   * 将当前组件脱离变更检测树\r\n   */\r\n  public detach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detach();\r\n  }\r\n\r\n  /**\r\n   * 将当前组件重新加入变更检测树\r\n   */\r\n  public reattach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.reattach();\r\n  }\r\n\r\n  /**\r\n   * 对当前组件进行一次变更检查\r\n   */\r\n  public detectChanges() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * 检测ChangeDetection是否有效\r\n   * @todo: Can't be depend on the destroyed property, destroyed.\r\n   */\r\n  private isCdValid() {\r\n    return this.cd && this.cd['destroyed'] === false || false;\r\n  }\r\n\r\n  /**\r\n   * 重置组件状态\r\n   * @todo：AppContext是全局的，\r\n   */\r\n  public restComponent() {\r\n\r\n    if (this.context !== this.context.root) {\r\n      return;\r\n    }\r\n\r\n    // 1、如果AppContext不是root并且父AppContext也不是root不清理;\r\n    // 2、表单Module里注入了FARRIS_DEVKIT_APP_PROVIDERS里面有一个冗余的AppContext注入\r\n    //    导致所有AppContext的根是该冗余的AppContext，所以要检测parent.parent。\r\n    // 只清理根组件的session\r\n    if (this.context.appContext.parent !== null && this.context.appContext.parent.parent !== null) {\r\n      return;\r\n    }\r\n\r\n    // Repository被注册到全局了，模块依赖注入中的对象，没有重置时机，临时在根组件中进行注销。\r\n    // @todo：应该清理全部repository，目前缺少全局管理所有Repository的地方。\r\n    this.context.repository.reset();\r\n    // 重置组件绑定数据\r\n    this.context.bindingData.reset();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 初始化事件订阅\r\n   */\r\n  private initSubscription() {\r\n    this.subscription = this.getSubscription();\r\n    if (!this.subscription) {\r\n      return;\r\n    }\r\n\r\n    this.eventPipes = this.subscription.init(this);\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取component对应的订阅\r\n   * @returns \r\n   */\r\n  public getSubscription() {\r\n    return this.injector.get<Subscription>(Subscription, null);\r\n  }\r\n\r\n  private initPublicEvent() {\r\n\r\n    this.declaration = this.getDeclaration();\r\n    if (!this.declaration) {\r\n      return;\r\n    }\r\n\r\n    this.declaration.init(this);\r\n  }\r\n\r\n  /**\r\n   * 获取当前component对应的declaration\r\n   * @returns \r\n   */\r\n  public getDeclaration() {\r\n    return this.injector.get<Declaration>(Declaration, null);\r\n  }\r\n\r\n  /**\r\n   * 事件触发器，触发事件发布\r\n   * @param eventName 待发布事件\r\n   */\r\n  public trigger(eventName: string, params?: any) {\r\n    const subscription = this.context.commandBus.executingCommandCount$.subscribe((executingCommandCount: number) => {\r\n      if (executingCommandCount !== 0) {\r\n        return;\r\n      }\r\n      this.innerTrigger(eventName, params);\r\n\r\n      // @todo\r\n      // subscription存在未undefine的情况，待进一步排查。\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      } else {\r\n        setTimeout(() => {\r\n          if (subscription) {\r\n            subscription.unsubscribe();\r\n          }\r\n        }, 0);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 内部触发变更检测\r\n   */\r\n  private innerTrigger(eventName: string, params?: any) {\r\n\r\n    // 根据事件名，查找对应的事件处理器\r\n    const eventHandler: any = this.declaration && this.declaration[eventName];\r\n    if (!eventHandler) {\r\n      return;\r\n    }\r\n    // 执行事件\r\n    eventHandler(params);\r\n  }\r\n\r\n}\r\n\r\nexport { FrameComponent };\r\n","\r\n/**\r\n * 上下文事件\r\n */\r\nclass FrameEvent {\r\n\r\n  /**\r\n   * 事件类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  data?: any;\r\n\r\n  /**\r\n   * 框架id数组\r\n   */\r\n  frameIds?: string[];\r\n}\r\n\r\nexport { FrameEvent };\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { FrameEvent } from './frame_event';\r\n\r\n\r\n/**\r\n * 框架事件总线\r\n */\r\n@Injectable()\r\nclass FrameEventBus {\r\n\r\n  /**\r\n   * @todo 暂不实现对订阅的注销\r\n   */\r\n  private subscriptions: any;\r\n\r\n  /**\r\n   * 事件流\r\n   */\r\n  public events: Subject<FrameEvent> = new Subject<FrameEvent>();\r\n\r\n\r\n  /**\r\n   * 注册事件处理\r\n   */\r\n  on(eventType: string, eventHandler: any, frameId: string) {\r\n    this.events.pipe(filter((event: FrameEvent) => {\r\n      if (event.type !== eventType) {\r\n        return false;\r\n      }\r\n      return !event.frameIds || event.frameIds.indexOf(frameId) > -1;\r\n    })).subscribe(eventHandler);\r\n  }\r\n\r\n  /**\r\n   * 取消事件处理\r\n   */\r\n  off(eventType: string, frameId: string): void {\r\n    throw new Error('暂不实现');\r\n  }\r\n\r\n  /**\r\n   * 触发事件\r\n   */\r\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\r\n    const event: FrameEvent = {\r\n      type: eventType,\r\n      data: eventData,\r\n      frameIds: frameIds\r\n    };\r\n    this.events.next(event);\r\n  }\r\n}\r\n\r\nexport { FrameEventBus };\r\n","/**\r\n * 命令处理器工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { CommandHandler } from './command_handler';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtender } from './command_handler_extender';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\n\r\n/**\r\n * 命令处理器工厂\r\n */\r\n@Injectable()\r\nclass CommandHandlerFactory {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlerRegistry  命令处理注册器\r\n   * @param extenderRegistry 命令处理扩展注册器\r\n   */\r\n  constructor(\r\n    private handlerRegistry: CommandHandlerRegistry,\r\n    private extenderRegistry: CommandHandlerExtenderRegistry,\r\n    private frameContext: FrameContext,\r\n    private variableParseService: VariableParseService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 创建命令处理器\r\n   * @param   commandName 命令名称\r\n   * @returns 对应的命令处理器实例\r\n   */\r\n  public create(commandName: string): CommandHandler {\r\n    const rawHandler = this.handlerRegistry.get(commandName);\r\n    rawHandler.init(this.frameContext, this.variableParseService);\r\n    const extenders = this.extenderRegistry.get(commandName);\r\n\r\n    // 遍历extenders，依次对handler进行扩展\r\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\r\n      return extender.extend(handler);\r\n    }, rawHandler);\r\n  }\r\n  public dispose() {\r\n    this.handlerRegistry.dispose();\r\n    this.extenderRegistry.dispose();\r\n    this.frameContext = null;\r\n    this.variableParseService = null;\r\n  }\r\n}\r\n\r\nexport { CommandHandlerFactory };\r\n","/**\r\n * CommandBus相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { IDisposable } from '../core';\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Command } from './command';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\n\r\n/**\r\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\r\n */\r\n@Injectable()\r\nclass CommandBus implements IDisposable{\r\n\r\n  /**\r\n   * handler工厂\r\n   */\r\n  private handlerFactory: CommandHandlerFactory;\r\n\r\n  /**\r\n   * 正在执行的命令数量流（请勿使用，后果自负）\r\n   */\r\n  public executingCommandCount$: BehaviorSubject<number>;\r\n\r\n  /**\r\n   * 正在执行的命令数量\r\n   */\r\n  private executingCommands: Command[];\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(handlerFactory: CommandHandlerFactory) {\r\n    this.handlerFactory = handlerFactory;\r\n    this.executingCommands = [];\r\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 派发命令\r\n   * @param command 要派发的命令\r\n   */\r\n  public dispatch(command: Command): Observable<any> {\r\n    const commandResult$ = new Subject();\r\n    this.executeCommand(command).subscribe({\r\n      next: (lastTaskResult: any) => {\r\n        commandResult$.next(lastTaskResult);\r\n        commandResult$.complete();\r\n      },\r\n      complete: () => {\r\n        commandResult$.complete();\r\n        this.removeCommandFromExecutingQueue(command);\r\n      },\r\n      error: (error: any) => {\r\n        commandResult$.error(error);\r\n        this.removeCommandFromExecutingQueue(command, !this.is401Error(error));\r\n      }\r\n    });\r\n    return commandResult$;\r\n  }\r\n\r\n  /**\r\n   * dispose\r\n   */\r\n  public dispose(){\r\n    this.handlerFactory.dispose();\r\n  }\r\n  /**\r\n   * 执行命令并返回最后一个任务的执行结果流\r\n   */\r\n  private executeCommand(command: Command): Observable<any> {\r\n    this.addCommandToExecutingQueue(command);\r\n    const commandName = command.name;\r\n    const handler = this.handlerFactory.create(commandName);\r\n    const lastTaskResult$ = handler.execute(command);\r\n    return lastTaskResult$;\r\n  }\r\n\r\n\r\n  /**\r\n   * 添加到执行队列\r\n   */\r\n  private addCommandToExecutingQueue(command: Command) {\r\n    this.executingCommands.push(command);\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 从执行队列中移除\r\n   */\r\n  private removeCommandFromExecutingQueue(command: Command, postOrNot: boolean = true) {\r\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\r\n      return executingCommand !== command;\r\n    });\r\n    if (postOrNot === true) {\r\n      this.executingCommandCount$.next(this.executingCommands.length);\r\n    }\r\n  }\r\n\r\n  private is401Error(error: HttpErrorResponse) {\r\n    // 如果error为空，不认为是401错误\r\n    return error && error.status === 401;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandBus };\r\n","import { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandBus } from './command_bus';\r\n\r\n\r\nexport const COMMAND_PROVIDERS = [\r\n  CommandHandlerRegistry,\r\n  CommandHandlerExtenderRegistry,\r\n  CommandHandlerFactory,\r\n  CommandBus,\r\n];\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { isObservable, of, Subject } from 'rxjs';\r\nimport { CommandContext } from './command_context';\r\nimport { CommandHandler } from './command_handler';\r\nimport {\r\n  ControllerMethod, DeterminingStage, ExecutingStage,\r\n  ForkStage, MethodStage, StageParam\r\n} from './dynamic_command_handler_metadata';\r\n\r\n/**\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *     commandName: 'add1'\r\n * })\r\n * export class add1Handler extends CommandHandler {\r\n *     constructor(\r\n *         public _ListDataService1: ListDataService1,\r\n *         public _StateMachineService1: StateMachineService1\r\n *     ) {\r\n *         super();\r\n *     }\r\n *\r\n *     schedule() {\r\n *         this.addTask('append', (context: CommandContext) => {\r\n *             const args = [];\r\n *             return this.invoke(this._ListDataService1, 'append', args, context);\r\n *         });\r\n *\r\n *         this.addTask('transit', (context: CommandContext) => {\r\n *             const args = [\r\n *                 'Create'\r\n *                     ];\r\n *             return this.invoke(this._StateMachineService1, 'transit', args, context);\r\n *         });\r\n *\r\n *         this.addLink('append', 'transit', `1==1`);\r\n *     }\r\n * }\r\n */\r\n\r\nconst controllerMap = {\r\n  imports: {\r\n\r\n  }\r\n};\r\n\r\ndeclare const System: any;\r\n\r\nexport class DynamicCommandHandler extends CommandHandler {\r\n\r\n  constructor(public commandName: string, private method: ControllerMethod) {\r\n    super();\r\n  }\r\n\r\n  public dynamicInvoke(serviceTocken: string, method: string, args: StageParam[], context: CommandContext) {\r\n    const serviceInstance = context.frameContext.injector.get(serviceTocken, null);\r\n    if (serviceInstance) {\r\n      this.setContextToServiceInstance(serviceInstance, context);\r\n      const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n      const parsedArgs = parsedStageParams.map(param => param.expression);\r\n      // tslint:disable-next-line: ban-types\r\n      const serviceMethod = serviceInstance[method] as Function;\r\n      return serviceMethod.apply(serviceInstance, parsedArgs);\r\n    }\r\n  }\r\n\r\n  public dynamicInvoke2(methodObject: ExecutingStage, context: CommandContext) {\r\n    const { source: serviceUri, service: serviceName, method } = methodObject;\r\n    const args = methodObject.params.map(stageParam => {\r\n      return Object.assign({}, stageParam);\r\n    });\r\n    const result$ = new Subject();\r\n    const serviceSpecifer = serviceUri && serviceUri.toLowerCase();\r\n    if (serviceSpecifer) {\r\n      let serviceModule = controllerMap.imports[serviceSpecifer];\r\n      if (serviceModule) {\r\n        // 表示缓存中存在\r\n        setTimeout(() => {\r\n          this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);\r\n        }, 0);\r\n      } else {\r\n        //  表示不存在\r\n        System.import(serviceSpecifer)\r\n          .then((serviceModule: any) => {\r\n            if (serviceModule) {\r\n              controllerMap.imports[serviceSpecifer] = serviceModule;\r\n            }\r\n            this.executeWithServiceModule(serviceModule, serviceName, context, args, method, result$);\r\n          });\r\n      }\r\n    }\r\n    return result$;\r\n  }\r\n\r\n  private executeWithServiceModule(serviceModule: any, serviceName: string, context: CommandContext, args: StageParam[], method: string, result$: Subject<unknown>) {\r\n    const serviceConstructor = serviceModule[serviceName];\r\n    if (serviceConstructor) {\r\n      const originalContextInjector = context.frameContext.injector;\r\n      let serviceInstance;\r\n      // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);\r\n      if (context.frameContext.injector.get(serviceName, null)) {\r\n        serviceInstance = context.frameContext.injector.get(serviceName);\r\n      } else {\r\n        const resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);\r\n        const reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);\r\n        context.frameContext.injector = reflectiveInjector;\r\n        serviceInstance = reflectiveInjector.get(serviceName, null);\r\n      }\r\n\r\n      if (serviceInstance) {\r\n        this.setContextToServiceInstance(serviceInstance, context);\r\n        const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n        const parsedArgs = parsedStageParams.map(param => param.expression);\r\n        // tslint:disable-next-line: ban-types\r\n        const serviceMethod = serviceInstance[method] as Function;\r\n        if (!serviceMethod) {\r\n          console.error(\"未找到对应的命令:\" + method);\r\n          return;\r\n        }\r\n        const serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);\r\n        const result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);\r\n        result$$.subscribe({\r\n          next: (result: any) => {\r\n            result$.next(result);\r\n          },\r\n          error: (error: any) => {\r\n            result$.error(error);\r\n          },\r\n          complete: () => {\r\n            result$.complete();\r\n            context.frameContext.injector = originalContextInjector;\r\n          },\r\n        });\r\n        // return serviceMethod.apply(serviceInstance, parsedArgs);\r\n      }\r\n    }\r\n  }\r\n\r\n  schedule() {\r\n    this.scheduleStages(this.method.stages, null);\r\n    // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n    //   if (currentStage.type === '0') {\r\n    //     this.addTask(currentStage.name, (context: CommandContext) => {\r\n    //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n    //     });\r\n    //     if (preStage) {\r\n    //       this.addLink(preStage.name, currentStage.name, `1===1`);\r\n    //     }\r\n    //   } else if (currentStage.type === '2') {\r\n\r\n    //   } else {\r\n    //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n    //   }\r\n    //   return currentStage;\r\n    // }, null);\r\n  }\r\n\r\n  scheduleStages(stages: MethodStage[], initialStage: MethodStage) {\r\n    stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n      if (currentStage.type === 'executing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n        });\r\n      } else if (currentStage.type === 'fork') {\r\n        const forkStages = (currentStage as ForkStage).stages;\r\n        forkStages.forEach(forkStage => {\r\n          this.scheduleStages(forkStage.stages, forkStage);\r\n        });\r\n        this.scheduleStages((currentStage as DeterminingStage).stages, currentStage);\r\n      } else if (currentStage.type === 'determing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return of(true);\r\n        });\r\n      } else {\r\n        throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n      }\r\n      if (preStage) {\r\n        const condition = preStage.type === 'determing' ? (preStage as DeterminingStage).condition : `1===1`;\r\n        this.addLink(preStage.name, currentStage.name, condition);\r\n      }\r\n      return currentStage;\r\n    }, initialStage);\r\n  }\r\n\r\n  private loadProvidersFromModule(serviceModule: { [propertyName: string]: any }) {\r\n    const providerArray = [];\r\n    for (const propertyName in serviceModule) {\r\n      if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {\r\n        const propertyValue = serviceModule[propertyName];\r\n        if (this.isInjectableService(propertyValue)) {\r\n          // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;\r\n          const providerName = propertyName;\r\n          providerArray.push({ provide: providerName, useClass: propertyValue });\r\n          providerArray.push(propertyValue);\r\n        }\r\n      }\r\n    }\r\n    const resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);\r\n    return resolvedReflectiveProviders;\r\n  }\r\n\r\n  private isInjectableService(propertyValue: any) {\r\n    let hasInjectableDecorator = false;\r\n    const isFunction = propertyValue instanceof Function;\r\n    if (isFunction && propertyValue.hasOwnProperty('decorators')) {\r\n      const decorators = propertyValue.decorators as any[];\r\n      const injectableDecorators = decorators.filter(decorator => {\r\n        if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {\r\n          return decorator;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    } else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {\r\n      const decorators = propertyValue.__annotations__ as any[];\r\n      const injectableDecorators = decorators.filter(decoratorFactory => {\r\n        if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {\r\n          return decoratorFactory;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    }\r\n    return hasInjectableDecorator;\r\n  }\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IValidationHandler } from './types';\r\nexport const VALIDATION_HANDLER = new InjectionToken<IValidationHandler>('@farris/common-service ValidationHandler');","import { Provider } from '@angular/core';\r\nimport { VARIABLE_PROVIDERS } from './variable/index';\r\nimport { AppContext, AppContextManager } from './app/index';\r\n\r\nimport { RestfulService } from './rest/index';\r\nimport { RouterParamService } from './misc/index';\r\n\r\nimport { COMMAND_PROVIDERS } from './command/index';\r\nimport { FrameContext, FrameEventBus } from './frame/index';\r\nimport { Subscription } from './event-mechanism/index';\r\nimport { EventBus } from './event-bus-new/index';\r\nimport { RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener } from './listener/index';\r\nimport { ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor, ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory } from './expression/index';\r\nimport { RepositoryEffector, UIStateEffector, ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN, DependencyEffector, RelativeEffector, ValidateEffector, RequiredEffector, VisibleEffector } from './effector/index';\r\nimport { EntityDependencyResolver, StateDependencyResolver, ResolverRegistry, CommentDependencyResolver, RESOLVER_TOKEN, ResolveService } from './resolver/index';\r\nimport { RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler, StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler, BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry, BindingDataSelectionChangedEventHandler } from './event-handler/index';\r\n\r\n// --------------------------------------------------------------------------------\r\n// Legacy\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for compatibility.\r\n */\r\nexport const FARRIS_DEVKIT_APP_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  VARIABLE_PROVIDERS,\r\n\r\n  AppContext,\r\n  RouterParamService,\r\n  FrameEventBus,\r\n  AppContextManager\r\n];\r\n\r\n// --------------------------------------------------------------------------------\r\n// Current\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for DevkitModule.\r\n */\r\nexport const FARRIS_DEVKIT_MODULE_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  RouterParamService,\r\n  VARIABLE_PROVIDERS,\r\n  AppContextManager,\r\n];\r\n\r\n/**\r\n * Providers for root frame components.\r\n */\r\nexport const FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  AppContext,\r\n];\r\n/**\r\n * 表达式provider\r\n * @description 放置到root-component，整个表单只需要注入一次\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  ListenerRegistry,\r\n  Listeners,\r\n  EffectorRegistry,\r\n  EffectorFactory,\r\n  ExpressionRegistry,\r\n  ExpressionEventEmitter,\r\n  ExpressionExecutor,\r\n  ExpressionManager,\r\n  ExpressionResult,\r\n  ExpressionResultFactory,\r\n  { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true },\r\n  ResolverRegistry,\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true},\r\n  EventHandlerRegistry,\r\n  ExpressionEngineImpl,\r\n  ResolveService\r\n];\r\n/**\r\n * 表达式监听器provider\r\n * @description 放置到每个表单的root上，组合表单root也需要放置\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS: Provider[] = [\r\n  { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true }\r\n];\r\n\r\nexport const FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS: Provider[] = [\r\n  { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RelativeEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true }\r\n];\r\n\r\n/**\r\n * Providers for frame components.\r\n */\r\nexport const FARRIS_DEVKIT_FRAME_PROVIDERS = [\r\n  COMMAND_PROVIDERS,\r\n  FrameContext\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { FARRIS_DEVKIT_MODULE_PROVIDERS } from './providers';\r\n/**\r\n * DevkitModule\r\n */\r\n@NgModule({\r\n  providers: FARRIS_DEVKIT_MODULE_PROVIDERS\r\n})\r\nclass DevkitModule {\r\n}\r\n\r\nexport { DevkitModule };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, Change } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n * @deprecated 已废弃\r\n */\r\n@Injectable()\r\nclass DeprecatedBindingDataChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    return null;\r\n  }\r\n}\r\nexport { DeprecatedBindingDataChangeListener };\r\n","export type Type = (...args) => any;\r\nexport type TTL = number | Date;\r\nexport type Key = string | number | ICacheKey | ICacheKeyBuilder;\r\nexport interface ICacheKeyBuilder<T = any[], U = any> {\r\n  (context: U, args: T): any;\r\n}\r\nexport enum CacheReturnType {\r\n  Static = 1,\r\n  Promise\r\n}\r\nexport interface ICacheKey { }\r\nexport interface ICacheKeyCompare {\r\n  compare(key1: ICacheKey, key2: ICacheKey): boolean;\r\n}\r\nexport class CacheKeyCompare implements ICacheKeyCompare {\r\n  compare(key1: string | number, key2: string | number) {\r\n    return key1 === key2;\r\n  }\r\n}\r\nexport interface ICacheOptions<T> {\r\n  key?: Key;\r\n  // returnType?: CacheReturnType;\r\n  ttl?: TTL;\r\n  cacheKeyCompare?: ICacheKeyCompare;\r\n  provider: ICacheProvider<T>\r\n}\r\nexport interface ICacheObject<TValue> {\r\n  key: Key,\r\n  content: TValue,\r\n  ttl: TTL,\r\n  createAt: Date,\r\n  isExpired(): boolean;\r\n}\r\nexport interface ICacheProvider<TValue> {\r\n  has(key: Key): boolean;\r\n  length(): number;\r\n  set(value: ICacheObject<TValue>);\r\n  get(key: Key): ICacheObject<TValue>;\r\n  delete(key: Key);\r\n  clear();\r\n  keys(): IterableIterator<Key>;\r\n  values(): IterableIterator<ICacheObject<TValue>>;\r\n}\r\n","import { ICacheObject, Key, TTL } from \"../types\";\r\n\r\nexport class CacheObject<T> implements ICacheObject<T>{\r\n  public createAt: Date;\r\n  constructor(public key: Key, public content: T, public ttl: TTL) {\r\n    this.createAt = new Date();\r\n  }\r\n  public isExpired(): boolean {\r\n    if (typeof this.ttl === 'number') {\r\n      return Date.now().valueOf() > this.createAt.valueOf() + this.ttl;\r\n    } else {\r\n      return Date.now() > this.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { ICacheObject, ICacheOptions } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n/**\r\n * 缓存方法返回值\r\n * @param options ICacheOptions 缓存选项\r\n * @returns MethodDecorator\r\n */\r\nexport function Cacheable<T>(options?: ICacheOptions<T>): MethodDecorator {\r\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\r\n    if (descriptor === undefined) {\r\n      descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\r\n    }\r\n    const className = target.name || target && target.constructor && target.constructor.name;\r\n    const method = descriptor.value;\r\n    descriptor.value = function (...args: any[]) {\r\n      const ttl = options && options.ttl || 0;\r\n      const provider = options && options.provider;\r\n      if (!provider) {\r\n        throw new Error('cache provider is not defined.');\r\n      }\r\n      let key = options && options.key || undefined;\r\n      if (key && key instanceof Function) {\r\n        key = key(this, args);\r\n      }\r\n      let cacheKey = key;\r\n      if (!cacheKey) {\r\n        const argsString: string = JSON.stringify(args);\r\n        cacheKey = `${className}#${String(propertyKey)}#${argsString}`;\r\n      }\r\n      const cacheObject = provider.get(cacheKey);\r\n      if (!cacheObject || (ttl && cacheObject.isExpired() === true)) {\r\n        const result = method.apply(this, args);\r\n        const object: ICacheObject<T> = new CacheObject(cacheKey, result, ttl);\r\n        provider.set(object);\r\n        return result;\r\n      }\r\n\r\n      return cacheObject && cacheObject.content;\r\n    }\r\n    return descriptor;\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key, TTL } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n\r\nexport class CacheContainer<T>{\r\n  constructor(protected provider: ICacheProvider<T>) {\r\n    this.provider = provider;\r\n  }\r\n  public get(key: Key): T {\r\n    const cacheObject: ICacheObject<T> = this.provider.get(key);\r\n    if (!cacheObject) {\r\n      return undefined;\r\n    }\r\n    const isExpired = this.isCacheObjectExpired(cacheObject);\r\n    return isExpired ? undefined : cacheObject.content;\r\n  }\r\n  public set(key: Key, value: T, ttl?: TTL) {\r\n    const cacheObject: ICacheObject<T> = new CacheObject(key, value, ttl || 0);\r\n    this.provider.set(cacheObject);\r\n  }\r\n  private isCacheObjectExpired(cacheObject: ICacheObject<T>) {\r\n    if (typeof cacheObject.ttl === 'number') {\r\n      return Date.now().valueOf() > cacheObject.createAt.valueOf() + cacheObject.ttl;\r\n    } else {\r\n      return Date.now() > cacheObject.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { CacheKeyCompare, ICacheKeyCompare, ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\nexport class MemoryCacheProvider<T> implements ICacheProvider<T> {\r\n  protected store: Array<ICacheObject<T>>;\r\n  protected cacheKeyCompare: ICacheKeyCompare;\r\n\r\n  constructor(cacheKeyCompare?: ICacheKeyCompare) {\r\n    this.store = new Array<ICacheObject<T>>();\r\n    this.cacheKeyCompare = cacheKeyCompare || new CacheKeyCompare();\r\n  }\r\n  public has(key: Key): boolean {\r\n    if (this.store.length < 1) {\r\n      return false;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    return index !== -1;\r\n  }\r\n  public length(): number {\r\n    return this.store.length;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.store.push(value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    if (this.store.length < 1) {\r\n      return undefined;\r\n    }\r\n    return this.store.find((item: ICacheObject<T>) => this.cacheKeyCompare.compare(key, item.key));\r\n  }\r\n  public delete(key: Key) {\r\n    if (this.store.length < 1) {\r\n      return;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    this.store.splice(index, 1);\r\n  }\r\n  public clear() {\r\n    this.store.length = 0;\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.store.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.store.values();\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\n/**\r\n * 默认缓存\r\n * @description\r\n * 默认缓存使用Map作为缓存容器，存储速度快。但不支持自定义的key对比，对于简单类型的key使用值对比，对于引用类型的key，对比的是引用的地址。\r\n */\r\nexport class DefaultCacheProvider<T> implements ICacheProvider<T>{\r\n  private buffer: Map<any, ICacheObject<T>>;\r\n\r\n  constructor() {\r\n    this.buffer = new Map<any, ICacheObject<T>>();\r\n  }\r\n  public has(key: Key): boolean {\r\n    return this.buffer.has(key);\r\n  }\r\n  public length(): number {\r\n    return this.buffer.size;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.buffer.set(value.key, value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    return this.buffer.get(key);\r\n  }\r\n  public delete(key: Key) {\r\n    this.buffer.delete(key);\r\n  }\r\n  public clear() {\r\n    this.buffer.clear();\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.buffer.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.buffer.values();\r\n  }\r\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {Expression as ɵb} from './lib/expression/index';\nexport {ChangeListener as ɵc} from './lib/listener/change_listener';"],"names":["EntityFactory","isEqual","ValidatorJS.default","format","DataPathCreator","filter","from","take","Map","BindingPropertyUtil","EntityLoadUtil","isObservable","Expression","ExpressionEngineExpression","EventType"],"mappings":"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"}
