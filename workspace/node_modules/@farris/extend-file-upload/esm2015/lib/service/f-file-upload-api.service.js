/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/f-file-upload-api.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function FFileUploadServerConfig() { }
if (false) {
    /** @type {?|undefined} */
    FFileUploadServerConfig.prototype.upload;
    /** @type {?|undefined} */
    FFileUploadServerConfig.prototype.remove;
}
/** @type {?} */
export const FFileUploadAPIServiceToken = new InjectionToken('MFFileUploadServerConfig');
export class FFileUploadAPIService {
    /**
     * @param {?} exConfig
     */
    constructor(exConfig) {
        this.apiArray = ['upload', 'remove'];
        this.config = { upload: null, remove: null };
        this.commonAPI = { type: 'config', url: '', timeout: 0, headers: null, data: {} };
        if (exConfig) {
            for (const key in this.commonAPI) {
                if (exConfig.hasOwnProperty(key)) {
                    this.commonAPI[key] = exConfig[key];
                }
            }
        }
        this.apiArray.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.config[item] = Object.assign({}, this.commonAPI);
            if (exConfig && exConfig.hasOwnProperty(item)) {
                if (exConfig[item].hasOwnProperty('url')) {
                    this.config[item] = Object.assign({}, this.config[item], exConfig[item], { url: this.combinUrl(exConfig[item].url) });
                }
            }
        }));
        // if (exConfig) {
        //     Object.assign(this.config, exConfig);
        // }
    }
    /**
     * @private
     * @param {?} typeUrl
     * @return {?}
     */
    combinUrl(typeUrl) {
        /** @type {?} */
        let result = typeUrl;
        result = this.commonAPI.url + typeUrl;
        return result;
    }
    /**
     * 获取API定义
     * @return {?}
     */
    getAPI() {
        return this.config;
    }
    /**
     *
     * @param {?} type
     * @param {?} object
     * @return {?}
     */
    getAssignAPI(type, object) {
        // removeAll,uploadAll 用于内部传递使用，应当传递的是remove和upload对应的参数
        // 通过设置对应关系
        /** @type {?} */
        const infoMap = { 'removeAll': 'remove', 'uploadAll': 'upload', 'multipartUpload': 'upload' };
        if (infoMap.hasOwnProperty(type)) {
            type = infoMap[type];
        }
        if (this.config[type] && object) {
            return Object.assign({}, this.config[type], object);
        }
        if (this.config[type]) {
            return this.config[type];
        }
        if (object) {
            return object;
        }
        return null;
    }
}
FFileUploadAPIService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FFileUploadAPIService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FFileUploadAPIServiceToken,] }] }
];
/** @nocollapse */ FFileUploadAPIService.ngInjectableDef = i0.defineInjectable({ factory: function FFileUploadAPIService_Factory() { return new FFileUploadAPIService(i0.inject(FFileUploadAPIServiceToken, 8)); }, token: FFileUploadAPIService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFileUploadAPIService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FFileUploadAPIService.prototype.commonAPI;
    /**
     * @type {?}
     * @private
     */
    FFileUploadAPIService.prototype.apiArray;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1maWxlLXVwbG9hZC1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXh0ZW5kLWZpbGUtdXBsb2FkLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZi1maWxlLXVwbG9hZC1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSTdFLDZDQUdDOzs7SUFGRyx5Q0FBNEI7O0lBQzVCLHlDQUE0Qjs7O0FBR2hDLE1BQU0sT0FBTywwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FBMEIsMEJBQTBCLENBQUM7QUFLakgsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUk5QixZQUE0RCxRQUFpQztRQURyRixhQUFRLEdBQUcsQ0FBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLENBQUM7UUFHbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUcsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNsRixJQUFJLFFBQVEsRUFBRTtZQUNWLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDOUIsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDdkM7YUFDSjtTQUNKO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdEQsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDekg7YUFDSjtRQUNMLENBQUMsRUFBQyxDQUFDO1FBRUgsa0JBQWtCO1FBQ2xCLDRDQUE0QztRQUM1QyxJQUFJO0lBQ1IsQ0FBQzs7Ozs7O0lBQ08sU0FBUyxDQUFDLE9BQU87O1lBQ2pCLE1BQU0sR0FBRyxPQUFPO1FBQ3BCLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7UUFDdEMsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Ozs7SUFJRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7Ozs7SUFNRCxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU07Ozs7Y0FHZixPQUFPLEdBQUcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUMsaUJBQWlCLEVBQUMsUUFBUSxFQUFFO1FBQzNGLElBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBQztZQUM1QixJQUFJLEdBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUM3QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDdkQ7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxNQUFNLEVBQUU7WUFDUixPQUFPLE1BQU0sQ0FBQztTQUNqQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7OztZQWpFSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7NENBS2dCLFFBQVEsWUFBSSxNQUFNLFNBQUMsMEJBQTBCOzs7Ozs7OztJQUgxRCx1Q0FBd0M7Ozs7O0lBQ3hDLDBDQUErQjs7Ozs7SUFDL0IseUNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVXBsb2FkSW5wdXQsIFVwbG9hZENvbmZpZyB9IGZyb20gJy4uL21vZGVsL2luZGV4JztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZGaWxlVXBsb2FkU2VydmVyQ29uZmlnIGV4dGVuZHMgVXBsb2FkQ29uZmlnIHtcclxuICAgIHVwbG9hZD86IFVwbG9hZElucHV0IHwgbnVsbDtcclxuICAgIHJlbW92ZT86IFVwbG9hZElucHV0IHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEZGaWxlVXBsb2FkQVBJU2VydmljZVRva2VuID0gbmV3IEluamVjdGlvblRva2VuPEZGaWxlVXBsb2FkU2VydmVyQ29uZmlnPignTUZGaWxlVXBsb2FkU2VydmVyQ29uZmlnJyk7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZGaWxlVXBsb2FkQVBJU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGNvbmZpZzogRkZpbGVVcGxvYWRTZXJ2ZXJDb25maWc7XHJcbiAgICBwcml2YXRlIGNvbW1vbkFQSTogVXBsb2FkSW5wdXQ7XHJcbiAgICBwcml2YXRlIGFwaUFycmF5ID0gWyd1cGxvYWQnLCdyZW1vdmUnXTtcclxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoRkZpbGVVcGxvYWRBUElTZXJ2aWNlVG9rZW4pIGV4Q29uZmlnOiBGRmlsZVVwbG9hZFNlcnZlckNvbmZpZykge1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgdXBsb2FkOiBudWxsLCAgcmVtb3ZlOiBudWxsIH07XHJcbiAgICAgICAgdGhpcy5jb21tb25BUEkgPSB7IHR5cGU6ICdjb25maWcnLCB1cmw6ICcnLCB0aW1lb3V0OiAwLCBoZWFkZXJzOiBudWxsLCBkYXRhOiB7fSB9O1xyXG4gICAgICAgIGlmIChleENvbmZpZykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmNvbW1vbkFQSSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4Q29uZmlnLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbkFQSVtrZXldID0gZXhDb25maWdba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFwaUFycmF5LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnW2l0ZW1dID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb21tb25BUEkpO1xyXG4gICAgICAgICAgICBpZiAoZXhDb25maWcgJiYgZXhDb25maWcuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChleENvbmZpZ1tpdGVtXS5oYXNPd25Qcm9wZXJ0eSgndXJsJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1tpdGVtXSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnW2l0ZW1dLCBleENvbmZpZ1tpdGVtXSwgeyB1cmw6IHRoaXMuY29tYmluVXJsKGV4Q29uZmlnW2l0ZW1dLnVybCkgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gaWYgKGV4Q29uZmlnKSB7XHJcbiAgICAgICAgLy8gICAgIE9iamVjdC5hc3NpZ24odGhpcy5jb25maWcsIGV4Q29uZmlnKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbWJpblVybCh0eXBlVXJsKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHR5cGVVcmw7XHJcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jb21tb25BUEkudXJsICsgdHlwZVVybDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5ZBUEnlrprkuYlcclxuICAgICAqL1xyXG4gICAgZ2V0QVBJKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBcclxuICAgICAqIEBwYXJhbSBvYmplY3QgXHJcbiAgICAgKi9cclxuICAgIGdldEFzc2lnbkFQSSh0eXBlLCBvYmplY3QpIHtcclxuICAgICAgICAvLyByZW1vdmVBbGwsdXBsb2FkQWxsIOeUqOS6juWGhemDqOS8oOmAkuS9v+eUqO+8jOW6lOW9k+S8oOmAkueahOaYr3JlbW92ZeWSjHVwbG9hZOWvueW6lOeahOWPguaVsFxyXG4gICAgICAgIC8vIOmAmui/h+iuvue9ruWvueW6lOWFs+ezu1xyXG4gICAgICAgIGNvbnN0IGluZm9NYXAgPSB7ICdyZW1vdmVBbGwnOiAncmVtb3ZlJywgJ3VwbG9hZEFsbCc6ICd1cGxvYWQnLCdtdWx0aXBhcnRVcGxvYWQnOid1cGxvYWQnIH07XHJcbiAgICAgICAgaWYoaW5mb01hcC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSl7XHJcbiAgICAgICAgICAgIHR5cGU9aW5mb01hcFt0eXBlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnW3R5cGVdICYmIG9iamVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWdbdHlwZV0sIG9iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1t0eXBlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWdbdHlwZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYmplY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgfVxyXG59XHJcbiJdfQ==