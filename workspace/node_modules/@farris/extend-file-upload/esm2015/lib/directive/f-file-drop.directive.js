/**
 * @fileoverview added by tsickle
 * Generated from: lib/directive/f-file-drop.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { FFileUploaderService } from '../service/index';
export class FFileDropDirective {
    /**
     * @param {?} elementRef
     * @param {?} upload
     */
    constructor(elementRef, upload) {
        this.elementRef = elementRef;
        this.upload = upload;
        this.tDisabled = false;
        // eventListener
        this.dropListener = null;
        this.dragOverListener = null;
        this.dragLeaveListener = null;
        this.dragEnterListener = null;
        this.onDropEnter = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            e.preventDefault();
        });
        this.uploadOutput = new EventEmitter();
    }
    // 是否禁用
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        if (this.tDisabled !== value) {
            this.tDisabled = value;
            if (value) {
                this.unbindDragAndDropEvent();
            }
            else {
                this.bindDragAndDropEvent();
            }
        }
    }
    ;
    /**
     * @return {?}
     */
    get disabled() {
        return this.tDisabled;
    }
    // 配置
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this.upload.setOptions(value);
    }
    ;
    // 已上传
    /**
     * @param {?} value
     * @return {?}
     */
    set uploadedCount(value) {
        this.upload.setOptions({ 'uploadedCount': value });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._sub = [];
        this.el = this.elementRef.nativeElement;
        this._sub.push(this.upload.serviceEvents.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.uploadOutput.emit(event);
        })));
        if (this.uploadInput instanceof EventEmitter) {
            this._sub.push(this.upload.initInputEvents(this.uploadInput));
        }
        // 绑定事件
        if (!this.disabled) {
            this.bindDragAndDropEvent();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unbindDragAndDropEvent();
        this._sub.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        sub => sub.unsubscribe()));
    }
    /**
     * @private
     * @return {?}
     */
    bindDragAndDropEvent() {
        // this.ngzone.runOutsideAngular(() => {
        this.dropListener = this.onDrop.bind(this);
        this.el.addEventListener('drop', this.dropListener);
        this.dragOverListener = this.onDragOver.bind(this);
        this.el.addEventListener('dragover', this.dragOverListener);
        this.dragLeaveListener = this.onDragLeave.bind(this);
        this.el.addEventListener('dragleave', this.dragLeaveListener);
        this.dragEnterListener = this.onDropEnter.bind(this);
        this.el.addEventListener('dragenter', this.dragEnterListener);
        //  });
    }
    /**
     * @private
     * @return {?}
     */
    unbindDragAndDropEvent() {
        this.dropListener && this.el.removeEventListener('drop', this.dropListener);
        this.dragOverListener && this.el.removeEventListener('dragover', this.dragOverListener);
        this.dragLeaveListener && this.el.removeEventListener('dragleave', this.dragLeaveListener);
        this.dragEnterListener && this.el.removeEventListener('dragenter', this.dragEnterListener);
    }
    // @HostListener('drop', ['$event'])
    /**
     * @param {?} e
     * @return {?}
     */
    onDrop(e) {
        e.stopPropagation();
        e.preventDefault();
        /** @type {?} */
        const event = { type: 'drop' };
        // console.log('dorp Events');
        this.uploadOutput.emit(event);
        this.upload.handleFiles(e.dataTransfer.files);
    }
    // @HostListener('dragover', ['$event'])
    /**
     * @param {?} e
     * @return {?}
     */
    onDragOver(e) {
        if (!e) {
            return;
        }
        e.stopPropagation();
        e.preventDefault();
        /** @type {?} */
        const event = { type: 'dragOver' };
        this.uploadOutput.emit(event);
    }
    // @HostListener('dragleave', ['$event'])
    /**
     * @param {?} e
     * @return {?}
     */
    onDragLeave(e) {
        if (!e) {
            return;
        }
        e.stopPropagation();
        e.preventDefault();
        /** @type {?} */
        const event = { type: 'dragOut' };
        this.uploadOutput.emit(event);
    }
    /**
     * 重置
     * @return {?}
     */
    reset() {
        /*if (this.el) {
             this._sub.forEach(sub => sub.unsubscribe());
             this._sub = [];
             this.upload.reset();
         }*/
        this.upload.reset();
    }
}
FFileDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[FFileDrop]'
            },] }
];
/** @nocollapse */
FFileDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FFileUploaderService }
];
FFileDropDirective.propDecorators = {
    disabled: [{ type: Input }],
    options: [{ type: Input }],
    uploadedCount: [{ type: Input }],
    uploadInput: [{ type: Input }],
    uploadOutput: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFileDropDirective.prototype.tDisabled;
    /** @type {?} */
    FFileDropDirective.prototype.uploadInput;
    /** @type {?} */
    FFileDropDirective.prototype.uploadOutput;
    /** @type {?} */
    FFileDropDirective.prototype.el;
    /** @type {?} */
    FFileDropDirective.prototype._sub;
    /** @type {?} */
    FFileDropDirective.prototype.dropListener;
    /** @type {?} */
    FFileDropDirective.prototype.dragOverListener;
    /** @type {?} */
    FFileDropDirective.prototype.dragLeaveListener;
    /** @type {?} */
    FFileDropDirective.prototype.dragEnterListener;
    /** @type {?} */
    FFileDropDirective.prototype.onDropEnter;
    /** @type {?} */
    FFileDropDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FFileDropDirective.prototype.upload;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,