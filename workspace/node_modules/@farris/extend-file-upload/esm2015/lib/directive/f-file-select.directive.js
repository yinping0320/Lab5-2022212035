/**
 * @fileoverview added by tsickle
 * Generated from: lib/directive/f-file-select.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { FFileUploaderService } from '../service/f-file-uploader.service';
export class FFileSelectDirective {
    /**
     * @param {?} elementRef
     * @param {?} upload
     */
    constructor(elementRef, upload) {
        this.elementRef = elementRef;
        this.upload = upload;
        this.tDisabled = false;
        this.changeListener = null;
        this.onChange = (/**
         * @return {?}
         */
        () => {
            if (this.el.files) {
                this.upload.handleFiles(this.el.files);
                this.el.value = null;
            }
        });
        this.uploadOutput = new EventEmitter();
        this.el = this.elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        if (this.tDisabled !== value) {
            this.tDisabled = value;
            if (value) {
                this.unbindEvent();
            }
            else {
                this.bindEvent();
            }
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this.tDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        if (value) {
            this.upload.setOptions(value);
        }
    }
    ;
    // 已上传
    /**
     * @param {?} value
     * @return {?}
     */
    set uploadedCount(value) {
        this.upload.setOptions({ 'uploadedCount': value });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._sub = [];
        // 对外抛出事件
        this._sub.push(this.upload.serviceEvents.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.uploadOutput.emit(event);
        })));
        // 对内的事件
        if (this.uploadInput instanceof EventEmitter) {
            this._sub.push(this.upload.initInputEvents(this.uploadInput));
        }
        if (!this.disabled) {
            this.bindEvent();
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindEvent() {
        this.changeListener = this.onChange.bind(this);
        this.el.addEventListener('change', this.changeListener);
    }
    /**
     * @private
     * @return {?}
     */
    unbindEvent() {
        this.changeListener = null;
        this.el.removeEventListener('change', this.changeListener);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.el) {
            this._sub.forEach((/**
             * @param {?} sub
             * @return {?}
             */
            sub => sub.unsubscribe()));
        }
    }
    /**
     * 重置
     * @return {?}
     */
    reset() {
        // if (this.el) {
        //   //this._sub.forEach(sub => sub.unsubscribe());
        //   //this._sub=[];
        //   this.upload.reset();
        // }    
        this.upload.reset();
    }
}
FFileSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: '[FFileSelect]'
            },] }
];
/** @nocollapse */
FFileSelectDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FFileUploaderService }
];
FFileSelectDirective.propDecorators = {
    disabled: [{ type: Input }],
    options: [{ type: Input }],
    uploadedCount: [{ type: Input }],
    uploadInput: [{ type: Input }],
    uploadOutput: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFileSelectDirective.prototype.tDisabled;
    /** @type {?} */
    FFileSelectDirective.prototype.uploadInput;
    /** @type {?} */
    FFileSelectDirective.prototype.uploadOutput;
    /** @type {?} */
    FFileSelectDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FFileSelectDirective.prototype._sub;
    /**
     * @type {?}
     * @private
     */
    FFileSelectDirective.prototype.changeListener;
    /** @type {?} */
    FFileSelectDirective.prototype.onChange;
    /** @type {?} */
    FFileSelectDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FFileSelectDirective.prototype.upload;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1maWxlLXNlbGVjdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmUvZi1maWxlLXNlbGVjdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFNMUUsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7SUFtQy9CLFlBQW1CLFVBQXNCLEVBQVUsTUFBNEI7UUFBNUQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQXNCO1FBbEN2RSxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBZ0NsQixtQkFBYyxHQUFRLElBQUksQ0FBQztRQXNDbkMsYUFBUTs7O1FBQUcsR0FBRyxFQUFFO1lBQ2QsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQyxFQUFBO1FBeENDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFDckQsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDOzs7OztJQXBDRCxJQUNJLFFBQVEsQ0FBQyxLQUFjO1FBQ3pCLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3BCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNsQjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQUNELElBQ0ksT0FBTyxDQUFDLEtBQXNCO1FBQ2hDLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBRUQsSUFDSSxhQUFhLENBQUMsS0FBSztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFDLGVBQWUsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7SUFjRixRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixTQUFTO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUzs7OztRQUFDLENBQUMsS0FBbUIsRUFBRSxFQUFFO1lBQzFELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUNILENBQUM7UUFDRixRQUFRO1FBQ1IsSUFBSSxJQUFJLENBQUMsV0FBVyxZQUFZLFlBQVksRUFBRTtZQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUMvRDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7O0lBQ08sU0FBUztRQUNmLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFELENBQUM7Ozs7O0lBQ08sV0FBVztRQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Ozs7WUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQzs7Ozs7SUFXRCxLQUFLO1FBQ0gsaUJBQWlCO1FBQ2pCLG1EQUFtRDtRQUNuRCxvQkFBb0I7UUFDcEIseUJBQXlCO1FBQ3pCLFFBQVE7UUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7OztZQTFGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7YUFDMUI7Ozs7WUFQbUIsVUFBVTtZQUVyQixvQkFBb0I7Ozt1QkFRMUIsS0FBSztzQkFjTCxLQUFLOzRCQU9KLEtBQUs7MEJBSU4sS0FBSzsyQkFDTCxNQUFNOzs7Ozs7O0lBM0JQLHlDQUEwQjs7SUEwQjFCLDJDQUF3Qzs7SUFDeEMsNENBQW1EOztJQUduRCxrQ0FBcUI7Ozs7O0lBQ3JCLG9DQUE2Qjs7Ozs7SUFDN0IsOENBQW1DOztJQXNDbkMsd0NBS0M7O0lBekNXLDBDQUE2Qjs7Ozs7SUFBRSxzQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVXBsb2FkT3V0cHV0LCBVcGxvYWRlck9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbC9mLWZpbGUtdXBsb2FkLm1vZGVsJztcclxuaW1wb3J0IHsgRkZpbGVVcGxvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2YtZmlsZS11cGxvYWRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tGRmlsZVNlbGVjdF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRmlsZVNlbGVjdERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICBwcml2YXRlIHREaXNhYmxlZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy50RGlzYWJsZWQgIT09IHZhbHVlKSB7XHJcbiAgICAgIHRoaXMudERpc2FibGVkID0gdmFsdWU7XHJcbiAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudW5iaW5kRXZlbnQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmJpbmRFdmVudCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnREaXNhYmxlZDtcclxuICB9XHJcbiAgQElucHV0KClcclxuICBzZXQgb3B0aW9ucyh2YWx1ZTogVXBsb2FkZXJPcHRpb25zKSB7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgdGhpcy51cGxvYWQuc2V0T3B0aW9ucyh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICAgLy8g5bey5LiK5LygXHJcbiAgIEBJbnB1dCgpXHJcbiAgIHNldCB1cGxvYWRlZENvdW50KHZhbHVlKXtcclxuICAgICAgIHRoaXMudXBsb2FkLnNldE9wdGlvbnMoeyd1cGxvYWRlZENvdW50Jzp2YWx1ZX0pO1xyXG4gICB9XHJcbiAgQElucHV0KCkgdXBsb2FkSW5wdXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRPdXRwdXQ6IEV2ZW50RW1pdHRlcjxVcGxvYWRPdXRwdXQ+O1xyXG5cclxuICAvL3VwbG9hZDogRkZpbGVVcGxvYWRlclNlcnZpY2U7XHJcbiAgZWw6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBfc3ViOiBTdWJzY3JpcHRpb25bXTtcclxuICBwcml2YXRlIGNoYW5nZUxpc3RlbmVyOiBhbnkgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSB1cGxvYWQ6IEZGaWxlVXBsb2FkZXJTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLnVwbG9hZE91dHB1dCA9IG5ldyBFdmVudEVtaXR0ZXI8VXBsb2FkT3V0cHV0PigpO1xyXG4gICAgdGhpcy5lbCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLl9zdWIgPSBbXTtcclxuICAgIC8vIOWvueWkluaKm+WHuuS6i+S7tlxyXG4gICAgdGhpcy5fc3ViLnB1c2goXHJcbiAgICAgIHRoaXMudXBsb2FkLnNlcnZpY2VFdmVudHMuc3Vic2NyaWJlKChldmVudDogVXBsb2FkT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGxvYWRPdXRwdXQuZW1pdChldmVudCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgLy8g5a+55YaF55qE5LqL5Lu2XHJcbiAgICBpZiAodGhpcy51cGxvYWRJbnB1dCBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlcikge1xyXG4gICAgICB0aGlzLl9zdWIucHVzaCh0aGlzLnVwbG9hZC5pbml0SW5wdXRFdmVudHModGhpcy51cGxvYWRJbnB1dCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMuYmluZEV2ZW50KCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgYmluZEV2ZW50KCkge1xyXG4gICAgdGhpcy5jaGFuZ2VMaXN0ZW5lciA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5jaGFuZ2VMaXN0ZW5lcik7XHJcbiAgfVxyXG4gIHByaXZhdGUgdW5iaW5kRXZlbnQoKSB7XHJcbiAgICB0aGlzLmNoYW5nZUxpc3RlbmVyID0gbnVsbDtcclxuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5jaGFuZ2VMaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmVsKSB7XHJcbiAgICAgIHRoaXMuX3N1Yi5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSA9ICgpID0+IHtcclxuICAgIGlmICh0aGlzLmVsLmZpbGVzKSB7XHJcbiAgICAgIHRoaXMudXBsb2FkLmhhbmRsZUZpbGVzKHRoaXMuZWwuZmlsZXMpO1xyXG4gICAgICB0aGlzLmVsLnZhbHVlPW51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmHjee9rlxyXG4gICAqL1xyXG4gIHJlc2V0KCl7XHJcbiAgICAvLyBpZiAodGhpcy5lbCkge1xyXG4gICAgLy8gICAvL3RoaXMuX3N1Yi5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XHJcbiAgICAvLyAgIC8vdGhpcy5fc3ViPVtdO1xyXG4gICAgLy8gICB0aGlzLnVwbG9hZC5yZXNldCgpO1xyXG4gICAgLy8gfSAgICBcclxuICAgIHRoaXMudXBsb2FkLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==