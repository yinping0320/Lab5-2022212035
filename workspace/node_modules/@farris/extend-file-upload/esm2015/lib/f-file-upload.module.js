/**
 * @fileoverview added by tsickle
 * Generated from: lib/f-file-upload.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FFileDropDirective, FFileSelectDirective, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective } from './directive/index';
import { FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, PreviewCheckboxComponent } from './components/index';
import { UploadServerService } from './model/index';
import { FFileSizePipe, FFileDatePipe, FormatCellDataPipe, UPLocalePipe, UPLocaleDefaultPipe } from './pipe/index';
import { FFileUploadAPIServiceToken, FFileUploadDefaultService, FFileUploaderService } from './service/index';
import { NotifyModule } from '@farris/ui-notify';
import { ModalModule } from '@farris/ui-modal';
import { DateHelperModule } from '@farris/ui-common/date';
import { MessagerModule } from '@farris/ui-messager';
import { FAreaResponseModule } from '@farris/ui-area-response';
import { UploadAndPreviewComponent } from './components/upload-and-preview/upload-and-preview.component';
import { UploadProgressComponent } from './components/upload-progress/upload-progress.component';
import { MultiDownloadInfoComponent } from './components/multi-download-info/multi-download-info.component';
import { UploadFileOrderDragDirective } from './components/upload-and-preview/file-order-drag.directive';
import { LocaleModule } from '@farris/ui-locale';
import { FarrisCommonModule } from '@farris/ui-common';
import { DataColumnModule } from '@farris/ui-common/column';
export class FFileUploadModule {
    /**
     * @param {?=} config
     * @param {?=} uploadSer
     * @return {?}
     */
    static forRoot(config, uploadSer) {
        return {
            ngModule: FFileUploadModule,
            providers: [
                { provide: FFileUploadAPIServiceToken, useValue: config },
                FFileUploaderService,
                {
                    provide: UploadServerService,
                    useClass: uploadSer || FFileUploadDefaultService
                }
            ]
        };
    }
}
FFileUploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent,
                    FFileViewImageComponent, FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective,
                    PreviewCheckboxComponent, FFilePreviewToolbarTemplateDirective, FFileSizePipe, UploadAndPreviewComponent, UploadProgressComponent,
                    FFileDatePipe, MultiDownloadInfoComponent, UploadFileOrderDragDirective, FormatCellDataPipe, UPLocalePipe, UPLocaleDefaultPipe
                ],
                exports: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, FFileViewImageComponent,
                    FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective, FFileSizePipe,
                    UploadAndPreviewComponent, UploadProgressComponent, FFileDatePipe, UploadFileOrderDragDirective],
                imports: [
                    CommonModule,
                    NotifyModule,
                    MessagerModule,
                    FAreaResponseModule,
                    FarrisCommonModule,
                    DateHelperModule.forRoot(),
                    ModalModule.forRoot(),
                    LocaleModule.forRoot(),
                    DataColumnModule.forRoot()
                ],
                providers: [
                    FFileUploaderService,
                    {
                        provide: UploadServerService,
                        useClass: FFileUploadDefaultService
                    }
                ],
                entryComponents: [
                    MultiDownloadInfoComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1maWxlLXVwbG9hZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9mLWZpbGUtdXBsb2FkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUscUNBQXFDLEVBQUUsb0JBQW9CLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoTCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUscUJBQXFCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwSSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUMsa0JBQWtCLEVBQUMsWUFBWSxFQUFDLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hILE9BQU8sRUFBMkIsMEJBQTBCLEVBQUUseUJBQXlCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2SSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUM1RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFrQzVELE1BQU0sT0FBTyxpQkFBaUI7Ozs7OztJQUM1QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWdDLEVBQUUsU0FBZTtRQUM5RCxPQUFPO1lBQ0wsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtnQkFDekQsb0JBQW9CO2dCQUNwQjtvQkFDRSxPQUFPLEVBQUUsbUJBQW1CO29CQUM1QixRQUFRLEVBQUUsU0FBUyxJQUFJLHlCQUF5QjtpQkFDakQ7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUE1Q0YsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixFQUFFLG9CQUFvQjtvQkFDM0UsdUJBQXVCLEVBQUUscUJBQXFCLEVBQUUscUNBQXFDLEVBQUUsb0JBQW9CO29CQUMzRyx3QkFBd0IsRUFBRSxvQ0FBb0MsRUFBRSxhQUFhLEVBQUUseUJBQXlCLEVBQUUsdUJBQXVCO29CQUNqSSxhQUFhLEVBQUMsMEJBQTBCLEVBQUUsNEJBQTRCLEVBQUMsa0JBQWtCLEVBQUMsWUFBWSxFQUFDLG1CQUFtQjtpQkFDM0g7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCO29CQUMvRixxQkFBcUIsRUFBRSxxQ0FBcUMsRUFBRSxvQkFBb0IsRUFBRSxvQ0FBb0MsRUFBRSxhQUFhO29CQUN2SSx5QkFBeUIsRUFBRSx1QkFBdUIsRUFBRSxhQUFhLEVBQUUsNEJBQTRCLENBQUM7Z0JBQ2xHLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFlBQVk7b0JBQ1osY0FBYztvQkFDZCxtQkFBbUI7b0JBQ25CLGtCQUFrQjtvQkFDbEIsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO29CQUMxQixXQUFXLENBQUMsT0FBTyxFQUFFO29CQUNyQixZQUFZLENBQUMsT0FBTyxFQUFFO29CQUN0QixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7aUJBQzNCO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxvQkFBb0I7b0JBQ3BCO3dCQUNFLE9BQU8sRUFBRSxtQkFBbUI7d0JBQzVCLFFBQVEsRUFBRSx5QkFBeUI7cUJBQ3BDO2lCQUNGO2dCQUNELGVBQWUsRUFBQztvQkFDZCwwQkFBMEI7aUJBQzNCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGRmlsZURyb3BEaXJlY3RpdmUsIEZGaWxlU2VsZWN0RGlyZWN0aXZlLCBGRmlsZVByZXZpZXdMaXN0VHlwZVRlbXBsYXRlRGlyZWN0aXZlLCBGRmlsZVVwbG9hZERpcmVjdGl2ZSwgRkZpbGVQcmV2aWV3VG9vbGJhclRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBGRmlsZVVwbG9hZENvbXBvbmVudCwgRkZpbGVWaWV3SW1hZ2VDb21wb25lbnQsIEZGaWxlUHJldmlld0NvbXBvbmVudCwgUHJldmlld0NoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2luZGV4JztcclxuaW1wb3J0IHsgVXBsb2FkU2VydmVyU2VydmljZSB9IGZyb20gJy4vbW9kZWwvaW5kZXgnO1xyXG5pbXBvcnQgeyBGRmlsZVNpemVQaXBlLCBGRmlsZURhdGVQaXBlLEZvcm1hdENlbGxEYXRhUGlwZSxVUExvY2FsZVBpcGUsVVBMb2NhbGVEZWZhdWx0UGlwZSB9IGZyb20gJy4vcGlwZS9pbmRleCc7XHJcbmltcG9ydCB7IEZGaWxlVXBsb2FkU2VydmVyQ29uZmlnLCBGRmlsZVVwbG9hZEFQSVNlcnZpY2VUb2tlbiwgRkZpbGVVcGxvYWREZWZhdWx0U2VydmljZSwgRkZpbGVVcGxvYWRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvaW5kZXgnO1xyXG5pbXBvcnQgeyBOb3RpZnlNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IE1vZGFsTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IERhdGVIZWxwZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9kYXRlJztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgRkFyZWFSZXNwb25zZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktYXJlYS1yZXNwb25zZSc7XHJcbmltcG9ydCB7IFVwbG9hZEFuZFByZXZpZXdDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdXBsb2FkLWFuZC1wcmV2aWV3L3VwbG9hZC1hbmQtcHJldmlldy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBVcGxvYWRQcm9ncmVzc0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy91cGxvYWQtcHJvZ3Jlc3MvdXBsb2FkLXByb2dyZXNzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE11bHRpRG93bmxvYWRJbmZvQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL211bHRpLWRvd25sb2FkLWluZm8vbXVsdGktZG93bmxvYWQtaW5mby5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBVcGxvYWRGaWxlT3JkZXJEcmFnRGlyZWN0aXZlIH0gZnJvbSAnLi9jb21wb25lbnRzL3VwbG9hZC1hbmQtcHJldmlldy9maWxlLW9yZGVyLWRyYWcuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBGYXJyaXNDb21tb25Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IERhdGFDb2x1bW5Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9jb2x1bW4nO1xyXG5cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRkZpbGVEcm9wRGlyZWN0aXZlLCBGRmlsZVNlbGVjdERpcmVjdGl2ZSwgRkZpbGVVcGxvYWRDb21wb25lbnQsIFxyXG4gICAgRkZpbGVWaWV3SW1hZ2VDb21wb25lbnQsIEZGaWxlUHJldmlld0NvbXBvbmVudCwgRkZpbGVQcmV2aWV3TGlzdFR5cGVUZW1wbGF0ZURpcmVjdGl2ZSwgRkZpbGVVcGxvYWREaXJlY3RpdmUsIFxyXG4gICAgUHJldmlld0NoZWNrYm94Q29tcG9uZW50LCBGRmlsZVByZXZpZXdUb29sYmFyVGVtcGxhdGVEaXJlY3RpdmUsIEZGaWxlU2l6ZVBpcGUsIFVwbG9hZEFuZFByZXZpZXdDb21wb25lbnQsIFVwbG9hZFByb2dyZXNzQ29tcG9uZW50LCBcclxuICAgIEZGaWxlRGF0ZVBpcGUsTXVsdGlEb3dubG9hZEluZm9Db21wb25lbnQsIFVwbG9hZEZpbGVPcmRlckRyYWdEaXJlY3RpdmUsRm9ybWF0Q2VsbERhdGFQaXBlLFVQTG9jYWxlUGlwZSxVUExvY2FsZURlZmF1bHRQaXBlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbRkZpbGVEcm9wRGlyZWN0aXZlLCBGRmlsZVNlbGVjdERpcmVjdGl2ZSwgRkZpbGVVcGxvYWRDb21wb25lbnQsIEZGaWxlVmlld0ltYWdlQ29tcG9uZW50LCBcclxuICAgIEZGaWxlUHJldmlld0NvbXBvbmVudCwgRkZpbGVQcmV2aWV3TGlzdFR5cGVUZW1wbGF0ZURpcmVjdGl2ZSwgRkZpbGVVcGxvYWREaXJlY3RpdmUsIEZGaWxlUHJldmlld1Rvb2xiYXJUZW1wbGF0ZURpcmVjdGl2ZSwgRkZpbGVTaXplUGlwZSxcclxuICAgIFVwbG9hZEFuZFByZXZpZXdDb21wb25lbnQsIFVwbG9hZFByb2dyZXNzQ29tcG9uZW50LCBGRmlsZURhdGVQaXBlLCBVcGxvYWRGaWxlT3JkZXJEcmFnRGlyZWN0aXZlXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBOb3RpZnlNb2R1bGUsIFxyXG4gICAgTWVzc2FnZXJNb2R1bGUsXHJcbiAgICBGQXJlYVJlc3BvbnNlTW9kdWxlLCBcclxuICAgIEZhcnJpc0NvbW1vbk1vZHVsZSxcclxuICAgIERhdGVIZWxwZXJNb2R1bGUuZm9yUm9vdCgpLCBcclxuICAgIE1vZGFsTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIExvY2FsZU1vZHVsZS5mb3JSb290KCksXHJcbiAgICBEYXRhQ29sdW1uTW9kdWxlLmZvclJvb3QoKVxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBGRmlsZVVwbG9hZGVyU2VydmljZSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogVXBsb2FkU2VydmVyU2VydmljZSxcclxuICAgICAgdXNlQ2xhc3M6IEZGaWxlVXBsb2FkRGVmYXVsdFNlcnZpY2VcclxuICAgIH1cclxuICBdLFxyXG4gIGVudHJ5Q29tcG9uZW50czpbXHJcbiAgICBNdWx0aURvd25sb2FkSW5mb0NvbXBvbmVudFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZGaWxlVXBsb2FkTW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBGRmlsZVVwbG9hZFNlcnZlckNvbmZpZywgdXBsb2FkU2VyPzogYW55KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogRkZpbGVVcGxvYWRNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogRkZpbGVVcGxvYWRBUElTZXJ2aWNlVG9rZW4sIHVzZVZhbHVlOiBjb25maWcgfSxcclxuICAgICAgICBGRmlsZVVwbG9hZGVyU2VydmljZSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBVcGxvYWRTZXJ2ZXJTZXJ2aWNlLFxyXG4gICAgICAgICAgdXNlQ2xhc3M6IHVwbG9hZFNlciB8fCBGRmlsZVVwbG9hZERlZmF1bHRTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=