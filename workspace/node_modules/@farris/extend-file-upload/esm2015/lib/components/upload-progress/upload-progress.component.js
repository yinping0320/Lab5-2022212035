/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/upload-progress/upload-progress.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
// const statusColorMap = new Map([
//   ['normal', '#388fff'],
//   ['exception', '#f24645'],
//   ['success', '#51bd78']
// ]);
export class UploadProgressComponent {
    constructor() {
        //是否显示进度条信息
        this.showInfo = true;
        this.percent = 0;
        this.maxWidth = 0;
        //存储的状态
        this.cachedStatus = 'normal';
        //计算的状态
        this.inferredStatus = 'normal';
    }
    //获得进度条状态
    /**
     * @return {?}
     */
    get progressStatus() {
        return this.status || this.inferredStatus;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { status, percent, successPercent } = changes;
        //状态变化
        if (status) {
            this.cachedStatus = this.status || this.cachedStatus;
        }
        //进度 已完成的分段百分比 变化
        if (percent || successPercent) {
            /** @type {?} */
            const fillAll = parseInt(this.percent.toString(), 10) >= 100;
            if (fillAll) {
                if ((this.isNotNil(this.successPercent) && (/** @type {?} */ (this.successPercent)) >= 100) || this.successPercent === undefined) {
                    this.inferredStatus = 'success';
                    // this.status = this.inferredStatus;
                }
            }
            else {
                this.inferredStatus = this.cachedStatus;
            }
            this.status = this.inferredStatus;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    isNotNil(value) {
        return typeof value !== 'undefined' && value !== null;
    }
}
UploadProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'upload-progress',
                template: "<div [ngClass]=\"'f-progress upload-progress upload-progress-status-' + progressStatus+' f-progress-status-'+progressStatus\" class=\"upload-progress-line\"\r\n  [class.upload-progress-show-info]=\"showInfo\">\r\n  <div class=\"upload-progress-outer\" [ngStyle]=\"{'max-width':maxWidth>0?maxWidth+'px':'auto'}\">\r\n    <div class=\"upload-progress-inner\">\r\n      <div class=\"upload-progress-bg f-progress-bg\" [style.width.%]=\"percent\">\r\n      </div>\r\n      <div *ngIf=\"successPercent || successPercent === 0\" class=\"upload-progress-success-bg f-progress-success-bg\"\r\n        [style.width.%]=\"successPercent\"></div>\r\n    </div>\r\n  </div>\r\n  <span class=\"upload-progress-text\" *ngIf=\"showInfo\">\r\n    <ng-container *ngIf=\"status === 'error' || status === 'success'; else formatTemplate\">\r\n      <span [ngClass]=\"'upload-progress-text-icon f-icon f-icon-'+ status\"></span>\r\n    </ng-container>\r\n  </span>\r\n</div>\r\n<ng-template #formatTemplate>\r\n  {{ percent }}%\r\n</ng-template>",
                styles: [".upload-progress{display:inline-block;font-size:.875rem;color:rgba(0,0,0,.65)}.upload-progress.upload-progress-line{position:relative;width:100%}.upload-progress.upload-progress-line .upload-progress-text .upload-progress-text-icon{font-size:1.25rem}.upload-progress .upload-progress-outer{display:inline-block;width:100%}.upload-progress .upload-progress-inner{position:relative;display:inline-block;width:100%;overflow:hidden;vertical-align:middle;background-color:#efefef;border-radius:100px}.upload-progress .upload-progress-bg,.upload-progress .upload-progress-success-bg{position:relative;border-radius:100px;height:6px;-webkit-transition:.4s cubic-bezier(.08,.82,.17,1);transition:.4s cubic-bezier(.08,.82,.17,1)}.upload-progress .upload-progress-success-bg{position:absolute;top:0;left:0}.upload-progress .upload-progress-text{display:inline-block;width:1.75rem;margin-left:.5rem;color:rgba(0,0,0,.65);font-size:1em;line-height:1;white-space:nowrap;text-align:left;vertical-align:middle;word-break:normal}.upload-progress.upload-progress-status-active .upload-progress-bg::before{position:absolute;top:0;right:0;bottom:0;left:0;background:#fff;border-radius:.625rem;opacity:0;-webkit-animation:2.4s ease-in-out infinite upload-progress-active;animation:2.4s ease-in-out infinite upload-progress-active;content:\"\"}.upload-progress-show-info .upload-progress-outer{padding-right:48px;margin-right:-48px}@-webkit-keyframes upload-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}@keyframes upload-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}"]
            }] }
];
/** @nocollapse */
UploadProgressComponent.ctorParameters = () => [];
UploadProgressComponent.propDecorators = {
    showInfo: [{ type: Input }],
    status: [{ type: Input }],
    successPercent: [{ type: Input }],
    percent: [{ type: Input }],
    maxWidth: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    UploadProgressComponent.prototype.showInfo;
    /** @type {?} */
    UploadProgressComponent.prototype.status;
    /** @type {?} */
    UploadProgressComponent.prototype.successPercent;
    /** @type {?} */
    UploadProgressComponent.prototype.percent;
    /** @type {?} */
    UploadProgressComponent.prototype.maxWidth;
    /**
     * @type {?}
     * @private
     */
    UploadProgressComponent.prototype.cachedStatus;
    /**
     * @type {?}
     * @private
     */
    UploadProgressComponent.prototype.inferredStatus;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXh0ZW5kLWZpbGUtdXBsb2FkLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdXBsb2FkLXByb2dyZXNzL3VwbG9hZC1wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7Ozs7OztBQWNuRixNQUFNLE9BQU8sdUJBQXVCO0lBa0JsQzs7UUFoQlMsYUFBUSxHQUFZLElBQUksQ0FBQztRQUt6QixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osYUFBUSxHQUFFLENBQUMsQ0FBQzs7UUFFYixpQkFBWSxHQUE2QixRQUFRLENBQUM7O1FBRWxELG1CQUFjLEdBQTZCLFFBQVEsQ0FBQztJQU01QyxDQUFDOzs7OztJQUhqQixJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7Y0FDMUIsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxHQUFHLE9BQU87UUFDbkQsTUFBTTtRQUNOLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDdEQ7UUFDRCxpQkFBaUI7UUFDakIsSUFBSSxPQUFPLElBQUksY0FBYyxFQUFFOztrQkFDdkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUc7WUFDNUQsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLG1CQUFBLElBQUksQ0FBQyxjQUFjLEVBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtvQkFDNUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7b0JBQ2hDLHFDQUFxQztpQkFDdEM7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDekM7WUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7U0FDbkM7SUFDSCxDQUFDOzs7O0lBQ0QsUUFBUTtJQUNSLENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBSSxLQUFRO1FBQ2xCLE9BQU8sT0FBTyxLQUFLLEtBQUssV0FBVyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7SUFDeEQsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQiwyZ0NBQStDOzthQUVoRDs7Ozs7dUJBR0UsS0FBSztxQkFFTCxLQUFLOzZCQUVMLEtBQUs7c0JBQ0wsS0FBSzt1QkFDTCxLQUFLOzs7O0lBTk4sMkNBQWtDOztJQUVsQyx5Q0FBMEM7O0lBRTFDLGlEQUFnQzs7SUFDaEMsMENBQXFCOztJQUNyQiwyQ0FBcUI7Ozs7O0lBRXJCLCtDQUEwRDs7Ozs7SUFFMUQsaURBQTREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLy/ov5vluqbmnaHnirbmgIEg6buY6K6kbm9ybWFsXHJcbmV4cG9ydCB0eXBlIFVwbG9hZFByb2dyZXNzU3RhdHVzVHlwZSA9ICdzdWNjZXNzJyB8ICdlcnJvcicgfCAnYWN0aXZlJyB8ICdub3JtYWwnO1xyXG5cclxuLy8gY29uc3Qgc3RhdHVzQ29sb3JNYXAgPSBuZXcgTWFwKFtcclxuLy8gICBbJ25vcm1hbCcsICcjMzg4ZmZmJ10sXHJcbi8vICAgWydleGNlcHRpb24nLCAnI2YyNDY0NSddLFxyXG4vLyAgIFsnc3VjY2VzcycsICcjNTFiZDc4J11cclxuLy8gXSk7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndXBsb2FkLXByb2dyZXNzJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdXBsb2FkLXByb2dyZXNzLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi91cGxvYWQtcHJvZ3Jlc3MuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRQcm9ncmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAvL+aYr+WQpuaYvuekuui/m+W6puadoeS/oeaBr1xyXG4gIEBJbnB1dCgpIHNob3dJbmZvOiBib29sZWFuID0gdHJ1ZTtcclxuICAvL+i/m+W6puadoeeKtuaAgSDpu5jorqQnbm9ybWFsJ1xyXG4gIEBJbnB1dCgpIHN0YXR1czogVXBsb2FkUHJvZ3Jlc3NTdGF0dXNUeXBlO1xyXG4gIC8v5bey5a6M5oiQ55qE5YiG5q6155m+5YiG5q+UXHJcbiAgQElucHV0KCkgc3VjY2Vzc1BlcmNlbnQ6IG51bWJlcjtcclxuICBASW5wdXQoKSBwZXJjZW50ID0gMDtcclxuICBASW5wdXQoKSBtYXhXaWR0aCA9MDtcclxuICAvL+WtmOWCqOeahOeKtuaAgVxyXG4gIHByaXZhdGUgY2FjaGVkU3RhdHVzOiBVcGxvYWRQcm9ncmVzc1N0YXR1c1R5cGUgPSAnbm9ybWFsJztcclxuICAvL+iuoeeul+eahOeKtuaAgVxyXG4gIHByaXZhdGUgaW5mZXJyZWRTdGF0dXM6IFVwbG9hZFByb2dyZXNzU3RhdHVzVHlwZSA9ICdub3JtYWwnO1xyXG5cclxuICAvL+iOt+W+l+i/m+W6puadoeeKtuaAgVxyXG4gIGdldCBwcm9ncmVzc1N0YXR1cygpOiBVcGxvYWRQcm9ncmVzc1N0YXR1c1R5cGUge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzIHx8IHRoaXMuaW5mZXJyZWRTdGF0dXM7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgY29uc3QgeyBzdGF0dXMsIHBlcmNlbnQsIHN1Y2Nlc3NQZXJjZW50IH0gPSBjaGFuZ2VzO1xyXG4gICAgLy/nirbmgIHlj5jljJZcclxuICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgdGhpcy5jYWNoZWRTdGF0dXMgPSB0aGlzLnN0YXR1cyB8fCB0aGlzLmNhY2hlZFN0YXR1cztcclxuICAgIH1cclxuICAgIC8v6L+b5bqmIOW3suWujOaIkOeahOWIhuauteeZvuWIhuavlCDlj5jljJZcclxuICAgIGlmIChwZXJjZW50IHx8IHN1Y2Nlc3NQZXJjZW50KSB7XHJcbiAgICAgIGNvbnN0IGZpbGxBbGwgPSBwYXJzZUludCh0aGlzLnBlcmNlbnQudG9TdHJpbmcoKSwgMTApID49IDEwMDtcclxuICAgICAgaWYgKGZpbGxBbGwpIHtcclxuICAgICAgICBpZiAoKHRoaXMuaXNOb3ROaWwodGhpcy5zdWNjZXNzUGVyY2VudCkgJiYgdGhpcy5zdWNjZXNzUGVyY2VudCEgPj0gMTAwKSB8fCB0aGlzLnN1Y2Nlc3NQZXJjZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuaW5mZXJyZWRTdGF0dXMgPSAnc3VjY2Vzcyc7XHJcbiAgICAgICAgICAvLyB0aGlzLnN0YXR1cyA9IHRoaXMuaW5mZXJyZWRTdGF0dXM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5mZXJyZWRTdGF0dXMgPSB0aGlzLmNhY2hlZFN0YXR1cztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnN0YXR1cyA9IHRoaXMuaW5mZXJyZWRTdGF0dXM7XHJcbiAgICB9XHJcbiAgfVxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgaXNOb3ROaWw8VD4odmFsdWU6IFQpOiB2YWx1ZSBpcyBOb25OdWxsYWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSAhPT0gbnVsbDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==